
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 ff26 	bl	20000e54 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	6039      	str	r1, [r7, #0]
2000001a:	1dfb      	adds	r3, r7, #7
2000001c:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000001e:	1dfb      	adds	r3, r7, #7
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	2b7f      	cmp	r3, #127	; 0x7f
20000024:	d90d      	bls.n	20000042 <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000026:	683b      	ldr	r3, [r7, #0]
20000028:	b2da      	uxtb	r2, r3
2000002a:	490f      	ldr	r1, [pc, #60]	; (20000068 <NVIC_SetPriority+0x58>)
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	781b      	ldrb	r3, [r3, #0]
20000030:	0018      	movs	r0, r3
20000032:	230f      	movs	r3, #15
20000034:	4003      	ands	r3, r0
20000036:	3b04      	subs	r3, #4
20000038:	0112      	lsls	r2, r2, #4
2000003a:	b2d2      	uxtb	r2, r2
2000003c:	18cb      	adds	r3, r1, r3
2000003e:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000040:	e00d      	b.n	2000005e <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000042:	683b      	ldr	r3, [r7, #0]
20000044:	b2db      	uxtb	r3, r3
20000046:	4909      	ldr	r1, [pc, #36]	; (2000006c <NVIC_SetPriority+0x5c>)
20000048:	1dfa      	adds	r2, r7, #7
2000004a:	7812      	ldrb	r2, [r2, #0]
2000004c:	b252      	sxtb	r2, r2
2000004e:	011b      	lsls	r3, r3, #4
20000050:	b2d8      	uxtb	r0, r3
20000052:	23c0      	movs	r3, #192	; 0xc0
20000054:	009b      	lsls	r3, r3, #2
20000056:	188a      	adds	r2, r1, r2
20000058:	18d3      	adds	r3, r2, r3
2000005a:	1c02      	adds	r2, r0, #0
2000005c:	701a      	strb	r2, [r3, #0]
}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	46bd      	mov	sp, r7
20000062:	b002      	add	sp, #8
20000064:	bd80      	pop	{r7, pc}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	e000ed00 	and	lr, r0, r0, lsl #26
2000006c:	e000e100 	and	lr, r0, r0, lsl #2

20000070 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20000070:	b580      	push	{r7, lr}
20000072:	b082      	sub	sp, #8
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	3b01      	subs	r3, #1
2000007c:	4a0c      	ldr	r2, [pc, #48]	; (200000b0 <SysTick_Config+0x40>)
2000007e:	4293      	cmp	r3, r2
20000080:	d901      	bls.n	20000086 <SysTick_Config+0x16>
20000082:	2301      	movs	r3, #1
20000084:	e010      	b.n	200000a8 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20000086:	4b0b      	ldr	r3, [pc, #44]	; (200000b4 <SysTick_Config+0x44>)
20000088:	687a      	ldr	r2, [r7, #4]
2000008a:	3a01      	subs	r2, #1
2000008c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000008e:	2301      	movs	r3, #1
20000090:	425b      	negs	r3, r3
20000092:	210f      	movs	r1, #15
20000094:	0018      	movs	r0, r3
20000096:	f7ff ffbb 	bl	20000010 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000009a:	4b06      	ldr	r3, [pc, #24]	; (200000b4 <SysTick_Config+0x44>)
2000009c:	2200      	movs	r2, #0
2000009e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200000a0:	4b04      	ldr	r3, [pc, #16]	; (200000b4 <SysTick_Config+0x44>)
200000a2:	2207      	movs	r2, #7
200000a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200000a6:	2300      	movs	r3, #0
}
200000a8:	0018      	movs	r0, r3
200000aa:	46bd      	mov	sp, r7
200000ac:	b002      	add	sp, #8
200000ae:	bd80      	pop	{r7, pc}
200000b0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200000b4:	e000e010 	and	lr, r0, r0, lsl r0

200000b8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200000bc:	4b14      	ldr	r3, [pc, #80]	; (20000110 <RCC_DeInit+0x58>)
200000be:	681a      	ldr	r2, [r3, #0]
200000c0:	4b13      	ldr	r3, [pc, #76]	; (20000110 <RCC_DeInit+0x58>)
200000c2:	2101      	movs	r1, #1
200000c4:	430a      	orrs	r2, r1
200000c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200000c8:	4b11      	ldr	r3, [pc, #68]	; (20000110 <RCC_DeInit+0x58>)
200000ca:	2200      	movs	r2, #0
200000cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
200000ce:	4b10      	ldr	r3, [pc, #64]	; (20000110 <RCC_DeInit+0x58>)
200000d0:	681a      	ldr	r2, [r3, #0]
200000d2:	4b0f      	ldr	r3, [pc, #60]	; (20000110 <RCC_DeInit+0x58>)
200000d4:	490f      	ldr	r1, [pc, #60]	; (20000114 <RCC_DeInit+0x5c>)
200000d6:	400a      	ands	r2, r1
200000d8:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200000da:	4b0d      	ldr	r3, [pc, #52]	; (20000110 <RCC_DeInit+0x58>)
200000dc:	4a0e      	ldr	r2, [pc, #56]	; (20000118 <RCC_DeInit+0x60>)
200000de:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
200000e0:	4a0b      	ldr	r2, [pc, #44]	; (20000110 <RCC_DeInit+0x58>)
200000e2:	2384      	movs	r3, #132	; 0x84
200000e4:	490d      	ldr	r1, [pc, #52]	; (2000011c <RCC_DeInit+0x64>)
200000e6:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
200000e8:	4a09      	ldr	r2, [pc, #36]	; (20000110 <RCC_DeInit+0x58>)
200000ea:	2388      	movs	r3, #136	; 0x88
200000ec:	490c      	ldr	r1, [pc, #48]	; (20000120 <RCC_DeInit+0x68>)
200000ee:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200000f0:	4b07      	ldr	r3, [pc, #28]	; (20000110 <RCC_DeInit+0x58>)
200000f2:	681a      	ldr	r2, [r3, #0]
200000f4:	4b06      	ldr	r3, [pc, #24]	; (20000110 <RCC_DeInit+0x58>)
200000f6:	490b      	ldr	r1, [pc, #44]	; (20000124 <RCC_DeInit+0x6c>)
200000f8:	400a      	ands	r2, r1
200000fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200000fc:	4b04      	ldr	r3, [pc, #16]	; (20000110 <RCC_DeInit+0x58>)
200000fe:	2200      	movs	r2, #0
20000100:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20000102:	4a03      	ldr	r2, [pc, #12]	; (20000110 <RCC_DeInit+0x58>)
20000104:	238c      	movs	r3, #140	; 0x8c
20000106:	2100      	movs	r1, #0
20000108:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	46bd      	mov	sp, r7
2000010e:	bd80      	pop	{r7, pc}
20000110:	40023800 	andmi	r3, r2, r0, lsl #16
20000114:	eaf6ffff 	b	1fdc0118 <startup-0x23fee8>
20000118:	24003010 	strcs	r3, [r0], #-16
2000011c:	20003000 	andcs	r3, r0, r0
20000120:	24003000 	strcs	r3, [r0], #-0
20000124:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000128 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000128:	b580      	push	{r7, lr}
2000012a:	b082      	sub	sp, #8
2000012c:	af00      	add	r7, sp, #0
2000012e:	0002      	movs	r2, r0
20000130:	1dfb      	adds	r3, r7, #7
20000132:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20000134:	4b05      	ldr	r3, [pc, #20]	; (2000014c <RCC_HSEConfig+0x24>)
20000136:	2200      	movs	r2, #0
20000138:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
2000013a:	4a04      	ldr	r2, [pc, #16]	; (2000014c <RCC_HSEConfig+0x24>)
2000013c:	1dfb      	adds	r3, r7, #7
2000013e:	781b      	ldrb	r3, [r3, #0]
20000140:	7013      	strb	r3, [r2, #0]
}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40023802 	andmi	r3, r2, r2, lsl #16

20000150 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20000156:	2300      	movs	r3, #0
20000158:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
2000015a:	1dfb      	adds	r3, r7, #7
2000015c:	2200      	movs	r2, #0
2000015e:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20000160:	1dbb      	adds	r3, r7, #6
20000162:	2200      	movs	r2, #0
20000164:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20000166:	1dbc      	adds	r4, r7, #6
20000168:	2031      	movs	r0, #49	; 0x31
2000016a:	f000 fd9b 	bl	20000ca4 <RCC_GetFlagStatus>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20000172:	683b      	ldr	r3, [r7, #0]
20000174:	3301      	adds	r3, #1
20000176:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20000178:	683a      	ldr	r2, [r7, #0]
2000017a:	23a0      	movs	r3, #160	; 0xa0
2000017c:	01db      	lsls	r3, r3, #7
2000017e:	429a      	cmp	r2, r3
20000180:	d003      	beq.n	2000018a <RCC_WaitForHSEStartUp+0x3a>
20000182:	1dbb      	adds	r3, r7, #6
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	2b00      	cmp	r3, #0
20000188:	d0ed      	beq.n	20000166 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
2000018a:	2031      	movs	r0, #49	; 0x31
2000018c:	f000 fd8a 	bl	20000ca4 <RCC_GetFlagStatus>
20000190:	1e03      	subs	r3, r0, #0
20000192:	d003      	beq.n	2000019c <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20000194:	1dfb      	adds	r3, r7, #7
20000196:	2201      	movs	r2, #1
20000198:	701a      	strb	r2, [r3, #0]
2000019a:	e002      	b.n	200001a2 <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	2200      	movs	r2, #0
200001a0:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200001a2:	1dfb      	adds	r3, r7, #7
200001a4:	781b      	ldrb	r3, [r3, #0]
}
200001a6:	0018      	movs	r0, r3
200001a8:	46bd      	mov	sp, r7
200001aa:	b003      	add	sp, #12
200001ac:	bd90      	pop	{r4, r7, pc}

200001ae <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
200001ae:	b580      	push	{r7, lr}
200001b0:	b084      	sub	sp, #16
200001b2:	af00      	add	r7, sp, #0
200001b4:	0002      	movs	r2, r0
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
200001ba:	2300      	movs	r3, #0
200001bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
200001be:	4b0a      	ldr	r3, [pc, #40]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001c0:	681b      	ldr	r3, [r3, #0]
200001c2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
200001c4:	68fb      	ldr	r3, [r7, #12]
200001c6:	22f8      	movs	r2, #248	; 0xf8
200001c8:	4393      	bics	r3, r2
200001ca:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
200001cc:	1dfb      	adds	r3, r7, #7
200001ce:	781b      	ldrb	r3, [r3, #0]
200001d0:	00db      	lsls	r3, r3, #3
200001d2:	68fa      	ldr	r2, [r7, #12]
200001d4:	4313      	orrs	r3, r2
200001d6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
200001d8:	4b03      	ldr	r3, [pc, #12]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001da:	68fa      	ldr	r2, [r7, #12]
200001dc:	601a      	str	r2, [r3, #0]
}
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	46bd      	mov	sp, r7
200001e2:	b004      	add	sp, #16
200001e4:	bd80      	pop	{r7, pc}
200001e6:	46c0      	nop			; (mov r8, r8)
200001e8:	40023800 	andmi	r3, r2, r0, lsl #16

200001ec <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b082      	sub	sp, #8
200001f0:	af00      	add	r7, sp, #0
200001f2:	0002      	movs	r2, r0
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
200001f8:	4b03      	ldr	r3, [pc, #12]	; (20000208 <RCC_HSICmd+0x1c>)
200001fa:	1dfa      	adds	r2, r7, #7
200001fc:	7812      	ldrb	r2, [r2, #0]
200001fe:	601a      	str	r2, [r3, #0]
}
20000200:	46c0      	nop			; (mov r8, r8)
20000202:	46bd      	mov	sp, r7
20000204:	b002      	add	sp, #8
20000206:	bd80      	pop	{r7, pc}
20000208:	42470000 	submi	r0, r7, #0

2000020c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
2000020c:	b580      	push	{r7, lr}
2000020e:	b082      	sub	sp, #8
20000210:	af00      	add	r7, sp, #0
20000212:	0002      	movs	r2, r0
20000214:	1dfb      	adds	r3, r7, #7
20000216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000218:	4b0c      	ldr	r3, [pc, #48]	; (2000024c <RCC_LSEConfig+0x40>)
2000021a:	2200      	movs	r2, #0
2000021c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <RCC_LSEConfig+0x40>)
20000220:	2200      	movs	r2, #0
20000222:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20000224:	1dfb      	adds	r3, r7, #7
20000226:	781b      	ldrb	r3, [r3, #0]
20000228:	2b01      	cmp	r3, #1
2000022a:	d002      	beq.n	20000232 <RCC_LSEConfig+0x26>
2000022c:	2b04      	cmp	r3, #4
2000022e:	d004      	beq.n	2000023a <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000230:	e007      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20000232:	4b06      	ldr	r3, [pc, #24]	; (2000024c <RCC_LSEConfig+0x40>)
20000234:	2201      	movs	r2, #1
20000236:	701a      	strb	r2, [r3, #0]
      break;
20000238:	e003      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
2000023a:	4b04      	ldr	r3, [pc, #16]	; (2000024c <RCC_LSEConfig+0x40>)
2000023c:	2205      	movs	r2, #5
2000023e:	701a      	strb	r2, [r3, #0]
      break;
20000240:	46c0      	nop			; (mov r8, r8)
  }
}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	46bd      	mov	sp, r7
20000246:	b002      	add	sp, #8
20000248:	bd80      	pop	{r7, pc}
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	40023870 	andmi	r3, r2, r0, ror r8

20000250 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20000250:	b580      	push	{r7, lr}
20000252:	b082      	sub	sp, #8
20000254:	af00      	add	r7, sp, #0
20000256:	0002      	movs	r2, r0
20000258:	1dfb      	adds	r3, r7, #7
2000025a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
2000025c:	4b03      	ldr	r3, [pc, #12]	; (2000026c <RCC_LSICmd+0x1c>)
2000025e:	1dfa      	adds	r2, r7, #7
20000260:	7812      	ldrb	r2, [r2, #0]
20000262:	601a      	str	r2, [r3, #0]
}
20000264:	46c0      	nop			; (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b002      	add	sp, #8
2000026a:	bd80      	pop	{r7, pc}
2000026c:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20000270 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20000270:	b580      	push	{r7, lr}
20000272:	b084      	sub	sp, #16
20000274:	af00      	add	r7, sp, #0
20000276:	60f8      	str	r0, [r7, #12]
20000278:	60b9      	str	r1, [r7, #8]
2000027a:	607a      	str	r2, [r7, #4]
2000027c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	019a      	lsls	r2, r3, #6
20000282:	68bb      	ldr	r3, [r7, #8]
20000284:	431a      	orrs	r2, r3
20000286:	683b      	ldr	r3, [r7, #0]
20000288:	085b      	lsrs	r3, r3, #1
2000028a:	3b01      	subs	r3, #1
2000028c:	041b      	lsls	r3, r3, #16
2000028e:	431a      	orrs	r2, r3
20000290:	68fb      	ldr	r3, [r7, #12]
20000292:	431a      	orrs	r2, r3
20000294:	0011      	movs	r1, r2
                 (PLLQ << 24);
20000296:	69bb      	ldr	r3, [r7, #24]
20000298:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000029a:	4b03      	ldr	r3, [pc, #12]	; (200002a8 <RCC_PLLConfig+0x38>)
2000029c:	430a      	orrs	r2, r1
2000029e:	605a      	str	r2, [r3, #4]
}
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	b004      	add	sp, #16
200002a6:	bd80      	pop	{r7, pc}
200002a8:	40023800 	andmi	r3, r2, r0, lsl #16

200002ac <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
200002ac:	b580      	push	{r7, lr}
200002ae:	b082      	sub	sp, #8
200002b0:	af00      	add	r7, sp, #0
200002b2:	0002      	movs	r2, r0
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
200002b8:	4b03      	ldr	r3, [pc, #12]	; (200002c8 <RCC_PLLCmd+0x1c>)
200002ba:	1dfa      	adds	r2, r7, #7
200002bc:	7812      	ldrb	r2, [r2, #0]
200002be:	601a      	str	r2, [r3, #0]
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b002      	add	sp, #8
200002c6:	bd80      	pop	{r7, pc}
200002c8:	42470060 	submi	r0, r7, #96	; 0x60

200002cc <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
200002cc:	b580      	push	{r7, lr}
200002ce:	b082      	sub	sp, #8
200002d0:	af00      	add	r7, sp, #0
200002d2:	6078      	str	r0, [r7, #4]
200002d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
200002d6:	687b      	ldr	r3, [r7, #4]
200002d8:	019a      	lsls	r2, r3, #6
200002da:	683b      	ldr	r3, [r7, #0]
200002dc:	071b      	lsls	r3, r3, #28
200002de:	4904      	ldr	r1, [pc, #16]	; (200002f0 <RCC_PLLI2SConfig+0x24>)
200002e0:	4313      	orrs	r3, r2
200002e2:	2284      	movs	r2, #132	; 0x84
200002e4:	508b      	str	r3, [r1, r2]
}
200002e6:	46c0      	nop			; (mov r8, r8)
200002e8:	46bd      	mov	sp, r7
200002ea:	b002      	add	sp, #8
200002ec:	bd80      	pop	{r7, pc}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	40023800 	andmi	r3, r2, r0, lsl #16

200002f4 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
200002f4:	b580      	push	{r7, lr}
200002f6:	b082      	sub	sp, #8
200002f8:	af00      	add	r7, sp, #0
200002fa:	0002      	movs	r2, r0
200002fc:	1dfb      	adds	r3, r7, #7
200002fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000300:	4b03      	ldr	r3, [pc, #12]	; (20000310 <RCC_PLLI2SCmd+0x1c>)
20000302:	1dfa      	adds	r2, r7, #7
20000304:	7812      	ldrb	r2, [r2, #0]
20000306:	601a      	str	r2, [r3, #0]
}
20000308:	46c0      	nop			; (mov r8, r8)
2000030a:	46bd      	mov	sp, r7
2000030c:	b002      	add	sp, #8
2000030e:	bd80      	pop	{r7, pc}
20000310:	42470068 	submi	r0, r7, #104	; 0x68

20000314 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000314:	b580      	push	{r7, lr}
20000316:	b084      	sub	sp, #16
20000318:	af00      	add	r7, sp, #0
2000031a:	60f8      	str	r0, [r7, #12]
2000031c:	60b9      	str	r1, [r7, #8]
2000031e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000320:	68fb      	ldr	r3, [r7, #12]
20000322:	019a      	lsls	r2, r3, #6
20000324:	68bb      	ldr	r3, [r7, #8]
20000326:	061b      	lsls	r3, r3, #24
20000328:	431a      	orrs	r2, r3
2000032a:	687b      	ldr	r3, [r7, #4]
2000032c:	071b      	lsls	r3, r3, #28
2000032e:	4904      	ldr	r1, [pc, #16]	; (20000340 <RCC_PLLSAIConfig+0x2c>)
20000330:	4313      	orrs	r3, r2
20000332:	2288      	movs	r2, #136	; 0x88
20000334:	508b      	str	r3, [r1, r2]
}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	46bd      	mov	sp, r7
2000033a:	b004      	add	sp, #16
2000033c:	bd80      	pop	{r7, pc}
2000033e:	46c0      	nop			; (mov r8, r8)
20000340:	40023800 	andmi	r3, r2, r0, lsl #16

20000344 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20000344:	b580      	push	{r7, lr}
20000346:	b082      	sub	sp, #8
20000348:	af00      	add	r7, sp, #0
2000034a:	0002      	movs	r2, r0
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20000350:	4b03      	ldr	r3, [pc, #12]	; (20000360 <RCC_PLLSAICmd+0x1c>)
20000352:	1dfa      	adds	r2, r7, #7
20000354:	7812      	ldrb	r2, [r2, #0]
20000356:	601a      	str	r2, [r3, #0]
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b002      	add	sp, #8
2000035e:	bd80      	pop	{r7, pc}
20000360:	42470070 	submi	r0, r7, #112	; 0x70

20000364 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20000364:	b580      	push	{r7, lr}
20000366:	b082      	sub	sp, #8
20000368:	af00      	add	r7, sp, #0
2000036a:	0002      	movs	r2, r0
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20000370:	4b03      	ldr	r3, [pc, #12]	; (20000380 <RCC_ClockSecuritySystemCmd+0x1c>)
20000372:	1dfa      	adds	r2, r7, #7
20000374:	7812      	ldrb	r2, [r2, #0]
20000376:	601a      	str	r2, [r3, #0]
}
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	46bd      	mov	sp, r7
2000037c:	b002      	add	sp, #8
2000037e:	bd80      	pop	{r7, pc}
20000380:	4247004c 	submi	r0, r7, #76	; 0x4c

20000384 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20000384:	b580      	push	{r7, lr}
20000386:	b084      	sub	sp, #16
20000388:	af00      	add	r7, sp, #0
2000038a:	6078      	str	r0, [r7, #4]
2000038c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
2000038e:	2300      	movs	r3, #0
20000390:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20000392:	4b0a      	ldr	r3, [pc, #40]	; (200003bc <RCC_MCO1Config+0x38>)
20000394:	689b      	ldr	r3, [r3, #8]
20000396:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20000398:	68fb      	ldr	r3, [r7, #12]
2000039a:	4a09      	ldr	r2, [pc, #36]	; (200003c0 <RCC_MCO1Config+0x3c>)
2000039c:	4013      	ands	r3, r2
2000039e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200003a0:	687a      	ldr	r2, [r7, #4]
200003a2:	683b      	ldr	r3, [r7, #0]
200003a4:	4313      	orrs	r3, r2
200003a6:	68fa      	ldr	r2, [r7, #12]
200003a8:	4313      	orrs	r3, r2
200003aa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ac:	4b03      	ldr	r3, [pc, #12]	; (200003bc <RCC_MCO1Config+0x38>)
200003ae:	68fa      	ldr	r2, [r7, #12]
200003b0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	46bd      	mov	sp, r7
200003b6:	b004      	add	sp, #16
200003b8:	bd80      	pop	{r7, pc}
200003ba:	46c0      	nop			; (mov r8, r8)
200003bc:	40023800 	andmi	r3, r2, r0, lsl #16
200003c0:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

200003c4 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
200003c4:	b580      	push	{r7, lr}
200003c6:	b084      	sub	sp, #16
200003c8:	af00      	add	r7, sp, #0
200003ca:	6078      	str	r0, [r7, #4]
200003cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200003ce:	2300      	movs	r3, #0
200003d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
200003d2:	4b0a      	ldr	r3, [pc, #40]	; (200003fc <RCC_MCO2Config+0x38>)
200003d4:	689b      	ldr	r3, [r3, #8]
200003d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
200003d8:	68fb      	ldr	r3, [r7, #12]
200003da:	015b      	lsls	r3, r3, #5
200003dc:	095b      	lsrs	r3, r3, #5
200003de:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
200003e0:	687a      	ldr	r2, [r7, #4]
200003e2:	683b      	ldr	r3, [r7, #0]
200003e4:	4313      	orrs	r3, r2
200003e6:	68fa      	ldr	r2, [r7, #12]
200003e8:	4313      	orrs	r3, r2
200003ea:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ec:	4b03      	ldr	r3, [pc, #12]	; (200003fc <RCC_MCO2Config+0x38>)
200003ee:	68fa      	ldr	r2, [r7, #12]
200003f0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003f2:	46c0      	nop			; (mov r8, r8)
200003f4:	46bd      	mov	sp, r7
200003f6:	b004      	add	sp, #16
200003f8:	bd80      	pop	{r7, pc}
200003fa:	46c0      	nop			; (mov r8, r8)
200003fc:	40023800 	andmi	r3, r2, r0, lsl #16

20000400 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000400:	b580      	push	{r7, lr}
20000402:	b084      	sub	sp, #16
20000404:	af00      	add	r7, sp, #0
20000406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000408:	2300      	movs	r3, #0
2000040a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
2000040c:	4b08      	ldr	r3, [pc, #32]	; (20000430 <RCC_SYSCLKConfig+0x30>)
2000040e:	689b      	ldr	r3, [r3, #8]
20000410:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000412:	68fb      	ldr	r3, [r7, #12]
20000414:	2203      	movs	r2, #3
20000416:	4393      	bics	r3, r2
20000418:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
2000041a:	68fa      	ldr	r2, [r7, #12]
2000041c:	687b      	ldr	r3, [r7, #4]
2000041e:	4313      	orrs	r3, r2
20000420:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000422:	4b03      	ldr	r3, [pc, #12]	; (20000430 <RCC_SYSCLKConfig+0x30>)
20000424:	68fa      	ldr	r2, [r7, #12]
20000426:	609a      	str	r2, [r3, #8]
}
20000428:	46c0      	nop			; (mov r8, r8)
2000042a:	46bd      	mov	sp, r7
2000042c:	b004      	add	sp, #16
2000042e:	bd80      	pop	{r7, pc}
20000430:	40023800 	andmi	r3, r2, r0, lsl #16

20000434 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000434:	b580      	push	{r7, lr}
20000436:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000438:	4b04      	ldr	r3, [pc, #16]	; (2000044c <RCC_GetSYSCLKSource+0x18>)
2000043a:	689b      	ldr	r3, [r3, #8]
2000043c:	b2db      	uxtb	r3, r3
2000043e:	220c      	movs	r2, #12
20000440:	4013      	ands	r3, r2
20000442:	b2db      	uxtb	r3, r3
}
20000444:	0018      	movs	r0, r3
20000446:	46bd      	mov	sp, r7
20000448:	bd80      	pop	{r7, pc}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	40023800 	andmi	r3, r2, r0, lsl #16

20000450 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20000450:	b580      	push	{r7, lr}
20000452:	b084      	sub	sp, #16
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000458:	2300      	movs	r3, #0
2000045a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
2000045c:	4b08      	ldr	r3, [pc, #32]	; (20000480 <RCC_HCLKConfig+0x30>)
2000045e:	689b      	ldr	r3, [r3, #8]
20000460:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20000462:	68fb      	ldr	r3, [r7, #12]
20000464:	22f0      	movs	r2, #240	; 0xf0
20000466:	4393      	bics	r3, r2
20000468:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
2000046a:	68fa      	ldr	r2, [r7, #12]
2000046c:	687b      	ldr	r3, [r7, #4]
2000046e:	4313      	orrs	r3, r2
20000470:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000472:	4b03      	ldr	r3, [pc, #12]	; (20000480 <RCC_HCLKConfig+0x30>)
20000474:	68fa      	ldr	r2, [r7, #12]
20000476:	609a      	str	r2, [r3, #8]
}
20000478:	46c0      	nop			; (mov r8, r8)
2000047a:	46bd      	mov	sp, r7
2000047c:	b004      	add	sp, #16
2000047e:	bd80      	pop	{r7, pc}
20000480:	40023800 	andmi	r3, r2, r0, lsl #16

20000484 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20000484:	b580      	push	{r7, lr}
20000486:	b084      	sub	sp, #16
20000488:	af00      	add	r7, sp, #0
2000048a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000048c:	2300      	movs	r3, #0
2000048e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000490:	4b08      	ldr	r3, [pc, #32]	; (200004b4 <RCC_PCLK1Config+0x30>)
20000492:	689b      	ldr	r3, [r3, #8]
20000494:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20000496:	68fb      	ldr	r3, [r7, #12]
20000498:	4a07      	ldr	r2, [pc, #28]	; (200004b8 <RCC_PCLK1Config+0x34>)
2000049a:	4013      	ands	r3, r2
2000049c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
2000049e:	68fa      	ldr	r2, [r7, #12]
200004a0:	687b      	ldr	r3, [r7, #4]
200004a2:	4313      	orrs	r3, r2
200004a4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004a6:	4b03      	ldr	r3, [pc, #12]	; (200004b4 <RCC_PCLK1Config+0x30>)
200004a8:	68fa      	ldr	r2, [r7, #12]
200004aa:	609a      	str	r2, [r3, #8]
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b004      	add	sp, #16
200004b2:	bd80      	pop	{r7, pc}
200004b4:	40023800 	andmi	r3, r2, r0, lsl #16
200004b8:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

200004bc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
200004bc:	b580      	push	{r7, lr}
200004be:	b084      	sub	sp, #16
200004c0:	af00      	add	r7, sp, #0
200004c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200004c4:	2300      	movs	r3, #0
200004c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200004c8:	4b09      	ldr	r3, [pc, #36]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004ca:	689b      	ldr	r3, [r3, #8]
200004cc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	4a08      	ldr	r2, [pc, #32]	; (200004f4 <RCC_PCLK2Config+0x38>)
200004d2:	4013      	ands	r3, r2
200004d4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
200004d6:	687b      	ldr	r3, [r7, #4]
200004d8:	00db      	lsls	r3, r3, #3
200004da:	68fa      	ldr	r2, [r7, #12]
200004dc:	4313      	orrs	r3, r2
200004de:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004e0:	4b03      	ldr	r3, [pc, #12]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004e2:	68fa      	ldr	r2, [r7, #12]
200004e4:	609a      	str	r2, [r3, #8]
}
200004e6:	46c0      	nop			; (mov r8, r8)
200004e8:	46bd      	mov	sp, r7
200004ea:	b004      	add	sp, #16
200004ec:	bd80      	pop	{r7, pc}
200004ee:	46c0      	nop			; (mov r8, r8)
200004f0:	40023800 	andmi	r3, r2, r0, lsl #16
200004f4:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

200004f8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
200004f8:	b580      	push	{r7, lr}
200004fa:	b088      	sub	sp, #32
200004fc:	af00      	add	r7, sp, #0
200004fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000500:	2300      	movs	r3, #0
20000502:	61bb      	str	r3, [r7, #24]
20000504:	2300      	movs	r3, #0
20000506:	617b      	str	r3, [r7, #20]
20000508:	2300      	movs	r3, #0
2000050a:	61fb      	str	r3, [r7, #28]
2000050c:	2302      	movs	r3, #2
2000050e:	613b      	str	r3, [r7, #16]
20000510:	2300      	movs	r3, #0
20000512:	60fb      	str	r3, [r7, #12]
20000514:	2302      	movs	r3, #2
20000516:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000518:	4b49      	ldr	r3, [pc, #292]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000051a:	689b      	ldr	r3, [r3, #8]
2000051c:	220c      	movs	r2, #12
2000051e:	4013      	ands	r3, r2
20000520:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000522:	69bb      	ldr	r3, [r7, #24]
20000524:	2b04      	cmp	r3, #4
20000526:	d007      	beq.n	20000538 <RCC_GetClocksFreq+0x40>
20000528:	2b08      	cmp	r3, #8
2000052a:	d009      	beq.n	20000540 <RCC_GetClocksFreq+0x48>
2000052c:	2b00      	cmp	r3, #0
2000052e:	d141      	bne.n	200005b4 <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	4a44      	ldr	r2, [pc, #272]	; (20000644 <RCC_GetClocksFreq+0x14c>)
20000534:	601a      	str	r2, [r3, #0]
    break;
20000536:	e041      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	4a43      	ldr	r2, [pc, #268]	; (20000648 <RCC_GetClocksFreq+0x150>)
2000053c:	601a      	str	r2, [r3, #0]
    break;
2000053e:	e03d      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000540:	4b3f      	ldr	r3, [pc, #252]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000542:	685b      	ldr	r3, [r3, #4]
20000544:	0d9b      	lsrs	r3, r3, #22
20000546:	2201      	movs	r2, #1
20000548:	4013      	ands	r3, r2
2000054a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000054c:	4b3c      	ldr	r3, [pc, #240]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000054e:	685b      	ldr	r3, [r3, #4]
20000550:	223f      	movs	r2, #63	; 0x3f
20000552:	4013      	ands	r3, r2
20000554:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000556:	68fb      	ldr	r3, [r7, #12]
20000558:	2b00      	cmp	r3, #0
2000055a:	d00d      	beq.n	20000578 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
2000055c:	68b9      	ldr	r1, [r7, #8]
2000055e:	483a      	ldr	r0, [pc, #232]	; (20000648 <RCC_GetClocksFreq+0x150>)
20000560:	f002 f894 	bl	2000268c <__udivsi3>
20000564:	0003      	movs	r3, r0
20000566:	001a      	movs	r2, r3
20000568:	4b35      	ldr	r3, [pc, #212]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000056a:	685b      	ldr	r3, [r3, #4]
2000056c:	099b      	lsrs	r3, r3, #6
2000056e:	05db      	lsls	r3, r3, #23
20000570:	0ddb      	lsrs	r3, r3, #23
20000572:	4353      	muls	r3, r2
20000574:	61fb      	str	r3, [r7, #28]
20000576:	e00c      	b.n	20000592 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000578:	68b9      	ldr	r1, [r7, #8]
2000057a:	4832      	ldr	r0, [pc, #200]	; (20000644 <RCC_GetClocksFreq+0x14c>)
2000057c:	f002 f886 	bl	2000268c <__udivsi3>
20000580:	0003      	movs	r3, r0
20000582:	001a      	movs	r2, r3
20000584:	4b2e      	ldr	r3, [pc, #184]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000586:	685b      	ldr	r3, [r3, #4]
20000588:	099b      	lsrs	r3, r3, #6
2000058a:	05db      	lsls	r3, r3, #23
2000058c:	0ddb      	lsrs	r3, r3, #23
2000058e:	4353      	muls	r3, r2
20000590:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000592:	4b2b      	ldr	r3, [pc, #172]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000594:	685b      	ldr	r3, [r3, #4]
20000596:	0c1b      	lsrs	r3, r3, #16
20000598:	2203      	movs	r2, #3
2000059a:	4013      	ands	r3, r2
2000059c:	3301      	adds	r3, #1
2000059e:	005b      	lsls	r3, r3, #1
200005a0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200005a2:	6939      	ldr	r1, [r7, #16]
200005a4:	69f8      	ldr	r0, [r7, #28]
200005a6:	f002 f871 	bl	2000268c <__udivsi3>
200005aa:	0003      	movs	r3, r0
200005ac:	001a      	movs	r2, r3
200005ae:	687b      	ldr	r3, [r7, #4]
200005b0:	601a      	str	r2, [r3, #0]
    break;
200005b2:	e003      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
200005b4:	687b      	ldr	r3, [r7, #4]
200005b6:	4a23      	ldr	r2, [pc, #140]	; (20000644 <RCC_GetClocksFreq+0x14c>)
200005b8:	601a      	str	r2, [r3, #0]
    break;
200005ba:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
200005bc:	4b20      	ldr	r3, [pc, #128]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005be:	689b      	ldr	r3, [r3, #8]
200005c0:	22f0      	movs	r2, #240	; 0xf0
200005c2:	4013      	ands	r3, r2
200005c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
200005c6:	69bb      	ldr	r3, [r7, #24]
200005c8:	091b      	lsrs	r3, r3, #4
200005ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005cc:	4a1f      	ldr	r2, [pc, #124]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005ce:	69bb      	ldr	r3, [r7, #24]
200005d0:	18d3      	adds	r3, r2, r3
200005d2:	781b      	ldrb	r3, [r3, #0]
200005d4:	b2db      	uxtb	r3, r3
200005d6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
200005d8:	687b      	ldr	r3, [r7, #4]
200005da:	681a      	ldr	r2, [r3, #0]
200005dc:	697b      	ldr	r3, [r7, #20]
200005de:	40da      	lsrs	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
200005e4:	4b16      	ldr	r3, [pc, #88]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005e6:	689a      	ldr	r2, [r3, #8]
200005e8:	23e0      	movs	r3, #224	; 0xe0
200005ea:	015b      	lsls	r3, r3, #5
200005ec:	4013      	ands	r3, r2
200005ee:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
200005f0:	69bb      	ldr	r3, [r7, #24]
200005f2:	0a9b      	lsrs	r3, r3, #10
200005f4:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005f6:	4a15      	ldr	r2, [pc, #84]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005f8:	69bb      	ldr	r3, [r7, #24]
200005fa:	18d3      	adds	r3, r2, r3
200005fc:	781b      	ldrb	r3, [r3, #0]
200005fe:	b2db      	uxtb	r3, r3
20000600:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000602:	687b      	ldr	r3, [r7, #4]
20000604:	685a      	ldr	r2, [r3, #4]
20000606:	697b      	ldr	r3, [r7, #20]
20000608:	40da      	lsrs	r2, r3
2000060a:	687b      	ldr	r3, [r7, #4]
2000060c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
2000060e:	4b0c      	ldr	r3, [pc, #48]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000610:	689a      	ldr	r2, [r3, #8]
20000612:	23e0      	movs	r3, #224	; 0xe0
20000614:	021b      	lsls	r3, r3, #8
20000616:	4013      	ands	r3, r2
20000618:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
2000061a:	69bb      	ldr	r3, [r7, #24]
2000061c:	0b5b      	lsrs	r3, r3, #13
2000061e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000620:	4a0a      	ldr	r2, [pc, #40]	; (2000064c <RCC_GetClocksFreq+0x154>)
20000622:	69bb      	ldr	r3, [r7, #24]
20000624:	18d3      	adds	r3, r2, r3
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	b2db      	uxtb	r3, r3
2000062a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	685a      	ldr	r2, [r3, #4]
20000630:	697b      	ldr	r3, [r7, #20]
20000632:	40da      	lsrs	r2, r3
20000634:	687b      	ldr	r3, [r7, #4]
20000636:	60da      	str	r2, [r3, #12]
}
20000638:	46c0      	nop			; (mov r8, r8)
2000063a:	46bd      	mov	sp, r7
2000063c:	b008      	add	sp, #32
2000063e:	bd80      	pop	{r7, pc}
20000640:	40023800 	andmi	r3, r2, r0, lsl #16
20000644:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000648:	017d7840 	cmneq	sp, r0, asr #16
2000064c:	20004bdc 	ldrdcs	r4, [r0], -ip

20000650 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000650:	b580      	push	{r7, lr}
20000652:	b084      	sub	sp, #16
20000654:	af00      	add	r7, sp, #0
20000656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000658:	2300      	movs	r3, #0
2000065a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
2000065c:	687a      	ldr	r2, [r7, #4]
2000065e:	23c0      	movs	r3, #192	; 0xc0
20000660:	009b      	lsls	r3, r3, #2
20000662:	401a      	ands	r2, r3
20000664:	23c0      	movs	r3, #192	; 0xc0
20000666:	009b      	lsls	r3, r3, #2
20000668:	429a      	cmp	r2, r3
2000066a:	d10f      	bne.n	2000068c <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
2000066c:	4b0d      	ldr	r3, [pc, #52]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000066e:	689b      	ldr	r3, [r3, #8]
20000670:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	4a0c      	ldr	r2, [pc, #48]	; (200006a8 <RCC_RTCCLKConfig+0x58>)
20000676:	4013      	ands	r3, r2
20000678:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
2000067a:	687b      	ldr	r3, [r7, #4]
2000067c:	4a0b      	ldr	r2, [pc, #44]	; (200006ac <RCC_RTCCLKConfig+0x5c>)
2000067e:	4013      	ands	r3, r2
20000680:	68fa      	ldr	r2, [r7, #12]
20000682:	4313      	orrs	r3, r2
20000684:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000686:	4b07      	ldr	r3, [pc, #28]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000688:	68fa      	ldr	r2, [r7, #12]
2000068a:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
2000068c:	4b05      	ldr	r3, [pc, #20]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000068e:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	051b      	lsls	r3, r3, #20
20000694:	0d1a      	lsrs	r2, r3, #20
20000696:	4b03      	ldr	r3, [pc, #12]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000698:	430a      	orrs	r2, r1
2000069a:	671a      	str	r2, [r3, #112]	; 0x70
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b004      	add	sp, #16
200006a2:	bd80      	pop	{r7, pc}
200006a4:	40023800 	andmi	r3, r2, r0, lsl #16
200006a8:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
200006ac:	0ffffcff 	svceq	0x00fffcff

200006b0 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
200006b0:	b580      	push	{r7, lr}
200006b2:	b082      	sub	sp, #8
200006b4:	af00      	add	r7, sp, #0
200006b6:	0002      	movs	r2, r0
200006b8:	1dfb      	adds	r3, r7, #7
200006ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
200006bc:	4b03      	ldr	r3, [pc, #12]	; (200006cc <RCC_RTCCLKCmd+0x1c>)
200006be:	1dfa      	adds	r2, r7, #7
200006c0:	7812      	ldrb	r2, [r2, #0]
200006c2:	601a      	str	r2, [r3, #0]
}
200006c4:	46c0      	nop			; (mov r8, r8)
200006c6:	46bd      	mov	sp, r7
200006c8:	b002      	add	sp, #8
200006ca:	bd80      	pop	{r7, pc}
200006cc:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

200006d0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
200006d0:	b580      	push	{r7, lr}
200006d2:	b082      	sub	sp, #8
200006d4:	af00      	add	r7, sp, #0
200006d6:	0002      	movs	r2, r0
200006d8:	1dfb      	adds	r3, r7, #7
200006da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
200006dc:	4b03      	ldr	r3, [pc, #12]	; (200006ec <RCC_BackupResetCmd+0x1c>)
200006de:	1dfa      	adds	r2, r7, #7
200006e0:	7812      	ldrb	r2, [r2, #0]
200006e2:	601a      	str	r2, [r3, #0]
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46bd      	mov	sp, r7
200006e8:	b002      	add	sp, #8
200006ea:	bd80      	pop	{r7, pc}
200006ec:	42470e40 	submi	r0, r7, #64, 28	; 0x400

200006f0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
200006f0:	b580      	push	{r7, lr}
200006f2:	b082      	sub	sp, #8
200006f4:	af00      	add	r7, sp, #0
200006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
200006f8:	4b03      	ldr	r3, [pc, #12]	; (20000708 <RCC_I2SCLKConfig+0x18>)
200006fa:	687a      	ldr	r2, [r7, #4]
200006fc:	601a      	str	r2, [r3, #0]
}
200006fe:	46c0      	nop			; (mov r8, r8)
20000700:	46bd      	mov	sp, r7
20000702:	b002      	add	sp, #8
20000704:	bd80      	pop	{r7, pc}
20000706:	46c0      	nop			; (mov r8, r8)
20000708:	4247015c 	submi	r0, r7, #92, 2

2000070c <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
2000070c:	b580      	push	{r7, lr}
2000070e:	b084      	sub	sp, #16
20000710:	af00      	add	r7, sp, #0
20000712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000714:	2300      	movs	r3, #0
20000716:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000718:	4a09      	ldr	r2, [pc, #36]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
2000071a:	238c      	movs	r3, #140	; 0x8c
2000071c:	58d3      	ldr	r3, [r2, r3]
2000071e:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000720:	68fb      	ldr	r3, [r7, #12]
20000722:	4a08      	ldr	r2, [pc, #32]	; (20000744 <RCC_SAIBlockACLKConfig+0x38>)
20000724:	4013      	ands	r3, r2
20000726:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000728:	68fa      	ldr	r2, [r7, #12]
2000072a:	687b      	ldr	r3, [r7, #4]
2000072c:	4313      	orrs	r3, r2
2000072e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000730:	4903      	ldr	r1, [pc, #12]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
20000732:	228c      	movs	r2, #140	; 0x8c
20000734:	68fb      	ldr	r3, [r7, #12]
20000736:	508b      	str	r3, [r1, r2]
}
20000738:	46c0      	nop			; (mov r8, r8)
2000073a:	46bd      	mov	sp, r7
2000073c:	b004      	add	sp, #16
2000073e:	bd80      	pop	{r7, pc}
20000740:	40023800 	andmi	r3, r2, r0, lsl #16
20000744:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000748 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000748:	b580      	push	{r7, lr}
2000074a:	b084      	sub	sp, #16
2000074c:	af00      	add	r7, sp, #0
2000074e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000750:	2300      	movs	r3, #0
20000752:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000754:	4a09      	ldr	r2, [pc, #36]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
20000756:	238c      	movs	r3, #140	; 0x8c
20000758:	58d3      	ldr	r3, [r2, r3]
2000075a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
2000075c:	68fb      	ldr	r3, [r7, #12]
2000075e:	4a08      	ldr	r2, [pc, #32]	; (20000780 <RCC_SAIBlockBCLKConfig+0x38>)
20000760:	4013      	ands	r3, r2
20000762:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000764:	68fa      	ldr	r2, [r7, #12]
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	4313      	orrs	r3, r2
2000076a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000076c:	4903      	ldr	r1, [pc, #12]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
2000076e:	228c      	movs	r2, #140	; 0x8c
20000770:	68fb      	ldr	r3, [r7, #12]
20000772:	508b      	str	r3, [r1, r2]
}
20000774:	46c0      	nop			; (mov r8, r8)
20000776:	46bd      	mov	sp, r7
20000778:	b004      	add	sp, #16
2000077a:	bd80      	pop	{r7, pc}
2000077c:	40023800 	andmi	r3, r2, r0, lsl #16
20000780:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000784 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000784:	b580      	push	{r7, lr}
20000786:	b084      	sub	sp, #16
20000788:	af00      	add	r7, sp, #0
2000078a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000078c:	2300      	movs	r3, #0
2000078e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000790:	4a0a      	ldr	r2, [pc, #40]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000792:	238c      	movs	r3, #140	; 0x8c
20000794:	58d3      	ldr	r3, [r2, r3]
20000796:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000798:	68fb      	ldr	r3, [r7, #12]
2000079a:	221f      	movs	r2, #31
2000079c:	4393      	bics	r3, r2
2000079e:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	3b01      	subs	r3, #1
200007a4:	68fa      	ldr	r2, [r7, #12]
200007a6:	4313      	orrs	r3, r2
200007a8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007aa:	4904      	ldr	r1, [pc, #16]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
200007ac:	228c      	movs	r2, #140	; 0x8c
200007ae:	68fb      	ldr	r3, [r7, #12]
200007b0:	508b      	str	r3, [r1, r2]
}
200007b2:	46c0      	nop			; (mov r8, r8)
200007b4:	46bd      	mov	sp, r7
200007b6:	b004      	add	sp, #16
200007b8:	bd80      	pop	{r7, pc}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	40023800 	andmi	r3, r2, r0, lsl #16

200007c0 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b084      	sub	sp, #16
200007c4:	af00      	add	r7, sp, #0
200007c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200007c8:	2300      	movs	r3, #0
200007ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200007cc:	4a0a      	ldr	r2, [pc, #40]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ce:	238c      	movs	r3, #140	; 0x8c
200007d0:	58d3      	ldr	r3, [r2, r3]
200007d2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200007d4:	68fb      	ldr	r3, [r7, #12]
200007d6:	4a09      	ldr	r2, [pc, #36]	; (200007fc <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200007d8:	4013      	ands	r3, r2
200007da:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	3b01      	subs	r3, #1
200007e0:	021b      	lsls	r3, r3, #8
200007e2:	68fa      	ldr	r2, [r7, #12]
200007e4:	4313      	orrs	r3, r2
200007e6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007e8:	4903      	ldr	r1, [pc, #12]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ea:	228c      	movs	r2, #140	; 0x8c
200007ec:	68fb      	ldr	r3, [r7, #12]
200007ee:	508b      	str	r3, [r1, r2]
}
200007f0:	46c0      	nop			; (mov r8, r8)
200007f2:	46bd      	mov	sp, r7
200007f4:	b004      	add	sp, #16
200007f6:	bd80      	pop	{r7, pc}
200007f8:	40023800 	andmi	r3, r2, r0, lsl #16
200007fc:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000800 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000800:	b580      	push	{r7, lr}
20000802:	b084      	sub	sp, #16
20000804:	af00      	add	r7, sp, #0
20000806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000808:	2300      	movs	r3, #0
2000080a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
2000080c:	4a09      	ldr	r2, [pc, #36]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
2000080e:	238c      	movs	r3, #140	; 0x8c
20000810:	58d3      	ldr	r3, [r2, r3]
20000812:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000814:	68fb      	ldr	r3, [r7, #12]
20000816:	4a08      	ldr	r2, [pc, #32]	; (20000838 <RCC_LTDCCLKDivConfig+0x38>)
20000818:	4013      	ands	r3, r2
2000081a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
2000081c:	68fa      	ldr	r2, [r7, #12]
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	4313      	orrs	r3, r2
20000822:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000824:	4903      	ldr	r1, [pc, #12]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
20000826:	228c      	movs	r2, #140	; 0x8c
20000828:	68fb      	ldr	r3, [r7, #12]
2000082a:	508b      	str	r3, [r1, r2]
}
2000082c:	46c0      	nop			; (mov r8, r8)
2000082e:	46bd      	mov	sp, r7
20000830:	b004      	add	sp, #16
20000832:	bd80      	pop	{r7, pc}
20000834:	40023800 	andmi	r3, r2, r0, lsl #16
20000838:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

2000083c <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
2000083c:	b580      	push	{r7, lr}
2000083e:	b082      	sub	sp, #8
20000840:	af00      	add	r7, sp, #0
20000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20000844:	4b03      	ldr	r3, [pc, #12]	; (20000854 <RCC_TIMCLKPresConfig+0x18>)
20000846:	687a      	ldr	r2, [r7, #4]
20000848:	601a      	str	r2, [r3, #0]
}
2000084a:	46c0      	nop			; (mov r8, r8)
2000084c:	46bd      	mov	sp, r7
2000084e:	b002      	add	sp, #8
20000850:	bd80      	pop	{r7, pc}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20000858 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000858:	b580      	push	{r7, lr}
2000085a:	b082      	sub	sp, #8
2000085c:	af00      	add	r7, sp, #0
2000085e:	6078      	str	r0, [r7, #4]
20000860:	000a      	movs	r2, r1
20000862:	1cfb      	adds	r3, r7, #3
20000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000866:	1cfb      	adds	r3, r7, #3
20000868:	781b      	ldrb	r3, [r3, #0]
2000086a:	2b00      	cmp	r3, #0
2000086c:	d006      	beq.n	2000087c <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
2000086e:	4b09      	ldr	r3, [pc, #36]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000870:	6b19      	ldr	r1, [r3, #48]	; 0x30
20000872:	4b08      	ldr	r3, [pc, #32]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000874:	687a      	ldr	r2, [r7, #4]
20000876:	430a      	orrs	r2, r1
20000878:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
2000087a:	e006      	b.n	2000088a <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
2000087c:	4b05      	ldr	r3, [pc, #20]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
2000087e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000880:	687b      	ldr	r3, [r7, #4]
20000882:	43d9      	mvns	r1, r3
20000884:	4b03      	ldr	r3, [pc, #12]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000886:	400a      	ands	r2, r1
20000888:	631a      	str	r2, [r3, #48]	; 0x30
}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	46bd      	mov	sp, r7
2000088e:	b002      	add	sp, #8
20000890:	bd80      	pop	{r7, pc}
20000892:	46c0      	nop			; (mov r8, r8)
20000894:	40023800 	andmi	r3, r2, r0, lsl #16

20000898 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000898:	b580      	push	{r7, lr}
2000089a:	b082      	sub	sp, #8
2000089c:	af00      	add	r7, sp, #0
2000089e:	6078      	str	r0, [r7, #4]
200008a0:	000a      	movs	r2, r1
200008a2:	1cfb      	adds	r3, r7, #3
200008a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008a6:	1cfb      	adds	r3, r7, #3
200008a8:	781b      	ldrb	r3, [r3, #0]
200008aa:	2b00      	cmp	r3, #0
200008ac:	d006      	beq.n	200008bc <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
200008ae:	4b09      	ldr	r3, [pc, #36]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
200008b2:	4b08      	ldr	r3, [pc, #32]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b4:	687a      	ldr	r2, [r7, #4]
200008b6:	430a      	orrs	r2, r1
200008b8:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
200008ba:	e006      	b.n	200008ca <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
200008bc:	4b05      	ldr	r3, [pc, #20]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	43d9      	mvns	r1, r3
200008c4:	4b03      	ldr	r3, [pc, #12]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008c6:	400a      	ands	r2, r1
200008c8:	635a      	str	r2, [r3, #52]	; 0x34
}
200008ca:	46c0      	nop			; (mov r8, r8)
200008cc:	46bd      	mov	sp, r7
200008ce:	b002      	add	sp, #8
200008d0:	bd80      	pop	{r7, pc}
200008d2:	46c0      	nop			; (mov r8, r8)
200008d4:	40023800 	andmi	r3, r2, r0, lsl #16

200008d8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200008d8:	b580      	push	{r7, lr}
200008da:	b082      	sub	sp, #8
200008dc:	af00      	add	r7, sp, #0
200008de:	6078      	str	r0, [r7, #4]
200008e0:	000a      	movs	r2, r1
200008e2:	1cfb      	adds	r3, r7, #3
200008e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008e6:	1cfb      	adds	r3, r7, #3
200008e8:	781b      	ldrb	r3, [r3, #0]
200008ea:	2b00      	cmp	r3, #0
200008ec:	d006      	beq.n	200008fc <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
200008ee:	4b09      	ldr	r3, [pc, #36]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
200008f2:	4b08      	ldr	r3, [pc, #32]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f4:	687a      	ldr	r2, [r7, #4]
200008f6:	430a      	orrs	r2, r1
200008f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
200008fa:	e006      	b.n	2000090a <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
200008fc:	4b05      	ldr	r3, [pc, #20]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	43d9      	mvns	r1, r3
20000904:	4b03      	ldr	r3, [pc, #12]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
20000906:	400a      	ands	r2, r1
20000908:	639a      	str	r2, [r3, #56]	; 0x38
}
2000090a:	46c0      	nop			; (mov r8, r8)
2000090c:	46bd      	mov	sp, r7
2000090e:	b002      	add	sp, #8
20000910:	bd80      	pop	{r7, pc}
20000912:	46c0      	nop			; (mov r8, r8)
20000914:	40023800 	andmi	r3, r2, r0, lsl #16

20000918 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000918:	b580      	push	{r7, lr}
2000091a:	b082      	sub	sp, #8
2000091c:	af00      	add	r7, sp, #0
2000091e:	6078      	str	r0, [r7, #4]
20000920:	000a      	movs	r2, r1
20000922:	1cfb      	adds	r3, r7, #3
20000924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000926:	1cfb      	adds	r3, r7, #3
20000928:	781b      	ldrb	r3, [r3, #0]
2000092a:	2b00      	cmp	r3, #0
2000092c:	d006      	beq.n	2000093c <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
2000092e:	4b09      	ldr	r3, [pc, #36]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000930:	6c19      	ldr	r1, [r3, #64]	; 0x40
20000932:	4b08      	ldr	r3, [pc, #32]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000934:	687a      	ldr	r2, [r7, #4]
20000936:	430a      	orrs	r2, r1
20000938:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
2000093a:	e006      	b.n	2000094a <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
2000093c:	4b05      	ldr	r3, [pc, #20]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
2000093e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000940:	687b      	ldr	r3, [r7, #4]
20000942:	43d9      	mvns	r1, r3
20000944:	4b03      	ldr	r3, [pc, #12]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000946:	400a      	ands	r2, r1
20000948:	641a      	str	r2, [r3, #64]	; 0x40
}
2000094a:	46c0      	nop			; (mov r8, r8)
2000094c:	46bd      	mov	sp, r7
2000094e:	b002      	add	sp, #8
20000950:	bd80      	pop	{r7, pc}
20000952:	46c0      	nop			; (mov r8, r8)
20000954:	40023800 	andmi	r3, r2, r0, lsl #16

20000958 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000958:	b580      	push	{r7, lr}
2000095a:	b082      	sub	sp, #8
2000095c:	af00      	add	r7, sp, #0
2000095e:	6078      	str	r0, [r7, #4]
20000960:	000a      	movs	r2, r1
20000962:	1cfb      	adds	r3, r7, #3
20000964:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000966:	1cfb      	adds	r3, r7, #3
20000968:	781b      	ldrb	r3, [r3, #0]
2000096a:	2b00      	cmp	r3, #0
2000096c:	d006      	beq.n	2000097c <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
2000096e:	4b09      	ldr	r3, [pc, #36]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000970:	6c59      	ldr	r1, [r3, #68]	; 0x44
20000972:	4b08      	ldr	r3, [pc, #32]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000974:	687a      	ldr	r2, [r7, #4]
20000976:	430a      	orrs	r2, r1
20000978:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
2000097a:	e006      	b.n	2000098a <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
2000097c:	4b05      	ldr	r3, [pc, #20]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
2000097e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000980:	687b      	ldr	r3, [r7, #4]
20000982:	43d9      	mvns	r1, r3
20000984:	4b03      	ldr	r3, [pc, #12]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000986:	400a      	ands	r2, r1
20000988:	645a      	str	r2, [r3, #68]	; 0x44
}
2000098a:	46c0      	nop			; (mov r8, r8)
2000098c:	46bd      	mov	sp, r7
2000098e:	b002      	add	sp, #8
20000990:	bd80      	pop	{r7, pc}
20000992:	46c0      	nop			; (mov r8, r8)
20000994:	40023800 	andmi	r3, r2, r0, lsl #16

20000998 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000998:	b580      	push	{r7, lr}
2000099a:	b082      	sub	sp, #8
2000099c:	af00      	add	r7, sp, #0
2000099e:	6078      	str	r0, [r7, #4]
200009a0:	000a      	movs	r2, r1
200009a2:	1cfb      	adds	r3, r7, #3
200009a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009a6:	1cfb      	adds	r3, r7, #3
200009a8:	781b      	ldrb	r3, [r3, #0]
200009aa:	2b00      	cmp	r3, #0
200009ac:	d006      	beq.n	200009bc <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
200009ae:	4b09      	ldr	r3, [pc, #36]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b0:	6919      	ldr	r1, [r3, #16]
200009b2:	4b08      	ldr	r3, [pc, #32]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b4:	687a      	ldr	r2, [r7, #4]
200009b6:	430a      	orrs	r2, r1
200009b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
200009ba:	e006      	b.n	200009ca <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
200009bc:	4b05      	ldr	r3, [pc, #20]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009be:	691a      	ldr	r2, [r3, #16]
200009c0:	687b      	ldr	r3, [r7, #4]
200009c2:	43d9      	mvns	r1, r3
200009c4:	4b03      	ldr	r3, [pc, #12]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009c6:	400a      	ands	r2, r1
200009c8:	611a      	str	r2, [r3, #16]
}
200009ca:	46c0      	nop			; (mov r8, r8)
200009cc:	46bd      	mov	sp, r7
200009ce:	b002      	add	sp, #8
200009d0:	bd80      	pop	{r7, pc}
200009d2:	46c0      	nop			; (mov r8, r8)
200009d4:	40023800 	andmi	r3, r2, r0, lsl #16

200009d8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200009d8:	b580      	push	{r7, lr}
200009da:	b082      	sub	sp, #8
200009dc:	af00      	add	r7, sp, #0
200009de:	6078      	str	r0, [r7, #4]
200009e0:	000a      	movs	r2, r1
200009e2:	1cfb      	adds	r3, r7, #3
200009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009e6:	1cfb      	adds	r3, r7, #3
200009e8:	781b      	ldrb	r3, [r3, #0]
200009ea:	2b00      	cmp	r3, #0
200009ec:	d006      	beq.n	200009fc <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
200009ee:	4b09      	ldr	r3, [pc, #36]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f0:	6959      	ldr	r1, [r3, #20]
200009f2:	4b08      	ldr	r3, [pc, #32]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f4:	687a      	ldr	r2, [r7, #4]
200009f6:	430a      	orrs	r2, r1
200009f8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
200009fa:	e006      	b.n	20000a0a <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
200009fc:	4b05      	ldr	r3, [pc, #20]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009fe:	695a      	ldr	r2, [r3, #20]
20000a00:	687b      	ldr	r3, [r7, #4]
20000a02:	43d9      	mvns	r1, r3
20000a04:	4b03      	ldr	r3, [pc, #12]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
20000a06:	400a      	ands	r2, r1
20000a08:	615a      	str	r2, [r3, #20]
}
20000a0a:	46c0      	nop			; (mov r8, r8)
20000a0c:	46bd      	mov	sp, r7
20000a0e:	b002      	add	sp, #8
20000a10:	bd80      	pop	{r7, pc}
20000a12:	46c0      	nop			; (mov r8, r8)
20000a14:	40023800 	andmi	r3, r2, r0, lsl #16

20000a18 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000a18:	b580      	push	{r7, lr}
20000a1a:	b082      	sub	sp, #8
20000a1c:	af00      	add	r7, sp, #0
20000a1e:	6078      	str	r0, [r7, #4]
20000a20:	000a      	movs	r2, r1
20000a22:	1cfb      	adds	r3, r7, #3
20000a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000a26:	1cfb      	adds	r3, r7, #3
20000a28:	781b      	ldrb	r3, [r3, #0]
20000a2a:	2b00      	cmp	r3, #0
20000a2c:	d006      	beq.n	20000a3c <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000a2e:	4b09      	ldr	r3, [pc, #36]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a30:	6999      	ldr	r1, [r3, #24]
20000a32:	4b08      	ldr	r3, [pc, #32]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a34:	687a      	ldr	r2, [r7, #4]
20000a36:	430a      	orrs	r2, r1
20000a38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000a3a:	e006      	b.n	20000a4a <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000a3c:	4b05      	ldr	r3, [pc, #20]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a3e:	699a      	ldr	r2, [r3, #24]
20000a40:	687b      	ldr	r3, [r7, #4]
20000a42:	43d9      	mvns	r1, r3
20000a44:	4b03      	ldr	r3, [pc, #12]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a46:	400a      	ands	r2, r1
20000a48:	619a      	str	r2, [r3, #24]
}
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b002      	add	sp, #8
20000a50:	bd80      	pop	{r7, pc}
20000a52:	46c0      	nop			; (mov r8, r8)
20000a54:	40023800 	andmi	r3, r2, r0, lsl #16

20000a58 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000a58:	b580      	push	{r7, lr}
20000a5a:	b082      	sub	sp, #8
20000a5c:	af00      	add	r7, sp, #0
20000a5e:	6078      	str	r0, [r7, #4]
20000a60:	000a      	movs	r2, r1
20000a62:	1cfb      	adds	r3, r7, #3
20000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a66:	1cfb      	adds	r3, r7, #3
20000a68:	781b      	ldrb	r3, [r3, #0]
20000a6a:	2b00      	cmp	r3, #0
20000a6c:	d006      	beq.n	20000a7c <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20000a6e:	4b09      	ldr	r3, [pc, #36]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a70:	6a19      	ldr	r1, [r3, #32]
20000a72:	4b08      	ldr	r3, [pc, #32]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a74:	687a      	ldr	r2, [r7, #4]
20000a76:	430a      	orrs	r2, r1
20000a78:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20000a7a:	e006      	b.n	20000a8a <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20000a7c:	4b05      	ldr	r3, [pc, #20]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a7e:	6a1a      	ldr	r2, [r3, #32]
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	43d9      	mvns	r1, r3
20000a84:	4b03      	ldr	r3, [pc, #12]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a86:	400a      	ands	r2, r1
20000a88:	621a      	str	r2, [r3, #32]
}
20000a8a:	46c0      	nop			; (mov r8, r8)
20000a8c:	46bd      	mov	sp, r7
20000a8e:	b002      	add	sp, #8
20000a90:	bd80      	pop	{r7, pc}
20000a92:	46c0      	nop			; (mov r8, r8)
20000a94:	40023800 	andmi	r3, r2, r0, lsl #16

20000a98 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000a98:	b580      	push	{r7, lr}
20000a9a:	b082      	sub	sp, #8
20000a9c:	af00      	add	r7, sp, #0
20000a9e:	6078      	str	r0, [r7, #4]
20000aa0:	000a      	movs	r2, r1
20000aa2:	1cfb      	adds	r3, r7, #3
20000aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000aa6:	1cfb      	adds	r3, r7, #3
20000aa8:	781b      	ldrb	r3, [r3, #0]
20000aaa:	2b00      	cmp	r3, #0
20000aac:	d006      	beq.n	20000abc <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000aae:	4b09      	ldr	r3, [pc, #36]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab0:	6a59      	ldr	r1, [r3, #36]	; 0x24
20000ab2:	4b08      	ldr	r3, [pc, #32]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab4:	687a      	ldr	r2, [r7, #4]
20000ab6:	430a      	orrs	r2, r1
20000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20000aba:	e006      	b.n	20000aca <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20000abc:	4b05      	ldr	r3, [pc, #20]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	43d9      	mvns	r1, r3
20000ac4:	4b03      	ldr	r3, [pc, #12]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ac6:	400a      	ands	r2, r1
20000ac8:	625a      	str	r2, [r3, #36]	; 0x24
}
20000aca:	46c0      	nop			; (mov r8, r8)
20000acc:	46bd      	mov	sp, r7
20000ace:	b002      	add	sp, #8
20000ad0:	bd80      	pop	{r7, pc}
20000ad2:	46c0      	nop			; (mov r8, r8)
20000ad4:	40023800 	andmi	r3, r2, r0, lsl #16

20000ad8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000ad8:	b580      	push	{r7, lr}
20000ada:	b082      	sub	sp, #8
20000adc:	af00      	add	r7, sp, #0
20000ade:	6078      	str	r0, [r7, #4]
20000ae0:	000a      	movs	r2, r1
20000ae2:	1cfb      	adds	r3, r7, #3
20000ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ae6:	1cfb      	adds	r3, r7, #3
20000ae8:	781b      	ldrb	r3, [r3, #0]
20000aea:	2b00      	cmp	r3, #0
20000aec:	d006      	beq.n	20000afc <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20000aee:	4b09      	ldr	r3, [pc, #36]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af0:	6d19      	ldr	r1, [r3, #80]	; 0x50
20000af2:	4b08      	ldr	r3, [pc, #32]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af4:	687a      	ldr	r2, [r7, #4]
20000af6:	430a      	orrs	r2, r1
20000af8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20000afa:	e006      	b.n	20000b0a <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20000afc:	4b05      	ldr	r3, [pc, #20]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20000b00:	687b      	ldr	r3, [r7, #4]
20000b02:	43d9      	mvns	r1, r3
20000b04:	4b03      	ldr	r3, [pc, #12]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000b06:	400a      	ands	r2, r1
20000b08:	651a      	str	r2, [r3, #80]	; 0x50
}
20000b0a:	46c0      	nop			; (mov r8, r8)
20000b0c:	46bd      	mov	sp, r7
20000b0e:	b002      	add	sp, #8
20000b10:	bd80      	pop	{r7, pc}
20000b12:	46c0      	nop			; (mov r8, r8)
20000b14:	40023800 	andmi	r3, r2, r0, lsl #16

20000b18 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000b18:	b580      	push	{r7, lr}
20000b1a:	b082      	sub	sp, #8
20000b1c:	af00      	add	r7, sp, #0
20000b1e:	6078      	str	r0, [r7, #4]
20000b20:	000a      	movs	r2, r1
20000b22:	1cfb      	adds	r3, r7, #3
20000b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b26:	1cfb      	adds	r3, r7, #3
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	2b00      	cmp	r3, #0
20000b2c:	d006      	beq.n	20000b3c <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20000b2e:	4b09      	ldr	r3, [pc, #36]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
20000b32:	4b08      	ldr	r3, [pc, #32]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b34:	687a      	ldr	r2, [r7, #4]
20000b36:	430a      	orrs	r2, r1
20000b38:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20000b3a:	e006      	b.n	20000b4a <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20000b3c:	4b05      	ldr	r3, [pc, #20]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20000b40:	687b      	ldr	r3, [r7, #4]
20000b42:	43d9      	mvns	r1, r3
20000b44:	4b03      	ldr	r3, [pc, #12]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b46:	400a      	ands	r2, r1
20000b48:	655a      	str	r2, [r3, #84]	; 0x54
}
20000b4a:	46c0      	nop			; (mov r8, r8)
20000b4c:	46bd      	mov	sp, r7
20000b4e:	b002      	add	sp, #8
20000b50:	bd80      	pop	{r7, pc}
20000b52:	46c0      	nop			; (mov r8, r8)
20000b54:	40023800 	andmi	r3, r2, r0, lsl #16

20000b58 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000b58:	b580      	push	{r7, lr}
20000b5a:	b082      	sub	sp, #8
20000b5c:	af00      	add	r7, sp, #0
20000b5e:	6078      	str	r0, [r7, #4]
20000b60:	000a      	movs	r2, r1
20000b62:	1cfb      	adds	r3, r7, #3
20000b64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b66:	1cfb      	adds	r3, r7, #3
20000b68:	781b      	ldrb	r3, [r3, #0]
20000b6a:	2b00      	cmp	r3, #0
20000b6c:	d006      	beq.n	20000b7c <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20000b6e:	4b09      	ldr	r3, [pc, #36]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b70:	6d99      	ldr	r1, [r3, #88]	; 0x58
20000b72:	4b08      	ldr	r3, [pc, #32]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b74:	687a      	ldr	r2, [r7, #4]
20000b76:	430a      	orrs	r2, r1
20000b78:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20000b7a:	e006      	b.n	20000b8a <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20000b7c:	4b05      	ldr	r3, [pc, #20]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20000b80:	687b      	ldr	r3, [r7, #4]
20000b82:	43d9      	mvns	r1, r3
20000b84:	4b03      	ldr	r3, [pc, #12]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b86:	400a      	ands	r2, r1
20000b88:	659a      	str	r2, [r3, #88]	; 0x58
}
20000b8a:	46c0      	nop			; (mov r8, r8)
20000b8c:	46bd      	mov	sp, r7
20000b8e:	b002      	add	sp, #8
20000b90:	bd80      	pop	{r7, pc}
20000b92:	46c0      	nop			; (mov r8, r8)
20000b94:	40023800 	andmi	r3, r2, r0, lsl #16

20000b98 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000b98:	b580      	push	{r7, lr}
20000b9a:	b082      	sub	sp, #8
20000b9c:	af00      	add	r7, sp, #0
20000b9e:	6078      	str	r0, [r7, #4]
20000ba0:	000a      	movs	r2, r1
20000ba2:	1cfb      	adds	r3, r7, #3
20000ba4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ba6:	1cfb      	adds	r3, r7, #3
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	2b00      	cmp	r3, #0
20000bac:	d006      	beq.n	20000bbc <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20000bae:	4b09      	ldr	r3, [pc, #36]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb0:	6e19      	ldr	r1, [r3, #96]	; 0x60
20000bb2:	4b08      	ldr	r3, [pc, #32]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb4:	687a      	ldr	r2, [r7, #4]
20000bb6:	430a      	orrs	r2, r1
20000bb8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20000bba:	e006      	b.n	20000bca <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20000bbc:	4b05      	ldr	r3, [pc, #20]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	43d9      	mvns	r1, r3
20000bc4:	4b03      	ldr	r3, [pc, #12]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bc6:	400a      	ands	r2, r1
20000bc8:	661a      	str	r2, [r3, #96]	; 0x60
}
20000bca:	46c0      	nop			; (mov r8, r8)
20000bcc:	46bd      	mov	sp, r7
20000bce:	b002      	add	sp, #8
20000bd0:	bd80      	pop	{r7, pc}
20000bd2:	46c0      	nop			; (mov r8, r8)
20000bd4:	40023800 	andmi	r3, r2, r0, lsl #16

20000bd8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000bd8:	b580      	push	{r7, lr}
20000bda:	b082      	sub	sp, #8
20000bdc:	af00      	add	r7, sp, #0
20000bde:	6078      	str	r0, [r7, #4]
20000be0:	000a      	movs	r2, r1
20000be2:	1cfb      	adds	r3, r7, #3
20000be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000be6:	1cfb      	adds	r3, r7, #3
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	2b00      	cmp	r3, #0
20000bec:	d006      	beq.n	20000bfc <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20000bee:	4b09      	ldr	r3, [pc, #36]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf0:	6e59      	ldr	r1, [r3, #100]	; 0x64
20000bf2:	4b08      	ldr	r3, [pc, #32]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf4:	687a      	ldr	r2, [r7, #4]
20000bf6:	430a      	orrs	r2, r1
20000bf8:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20000bfa:	e006      	b.n	20000c0a <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20000bfc:	4b05      	ldr	r3, [pc, #20]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20000c00:	687b      	ldr	r3, [r7, #4]
20000c02:	43d9      	mvns	r1, r3
20000c04:	4b03      	ldr	r3, [pc, #12]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000c06:	400a      	ands	r2, r1
20000c08:	665a      	str	r2, [r3, #100]	; 0x64
}
20000c0a:	46c0      	nop			; (mov r8, r8)
20000c0c:	46bd      	mov	sp, r7
20000c0e:	b002      	add	sp, #8
20000c10:	bd80      	pop	{r7, pc}
20000c12:	46c0      	nop			; (mov r8, r8)
20000c14:	40023800 	andmi	r3, r2, r0, lsl #16

20000c18 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20000c18:	b580      	push	{r7, lr}
20000c1a:	b082      	sub	sp, #8
20000c1c:	af00      	add	r7, sp, #0
20000c1e:	0002      	movs	r2, r0
20000c20:	1dfb      	adds	r3, r7, #7
20000c22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20000c24:	1dfb      	adds	r3, r7, #7
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	2b01      	cmp	r3, #1
20000c2a:	d106      	bne.n	20000c3a <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c2c:	4b08      	ldr	r3, [pc, #32]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c30:	4b07      	ldr	r3, [pc, #28]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c32:	2108      	movs	r1, #8
20000c34:	430a      	orrs	r2, r1
20000c36:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20000c38:	e005      	b.n	20000c46 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c3a:	4b05      	ldr	r3, [pc, #20]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c3e:	4b04      	ldr	r3, [pc, #16]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c40:	2108      	movs	r1, #8
20000c42:	438a      	bics	r2, r1
20000c44:	671a      	str	r2, [r3, #112]	; 0x70
}
20000c46:	46c0      	nop			; (mov r8, r8)
20000c48:	46bd      	mov	sp, r7
20000c4a:	b002      	add	sp, #8
20000c4c:	bd80      	pop	{r7, pc}
20000c4e:	46c0      	nop			; (mov r8, r8)
20000c50:	40023800 	andmi	r3, r2, r0, lsl #16

20000c54 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20000c54:	b580      	push	{r7, lr}
20000c56:	b082      	sub	sp, #8
20000c58:	af00      	add	r7, sp, #0
20000c5a:	0002      	movs	r2, r0
20000c5c:	1dfb      	adds	r3, r7, #7
20000c5e:	701a      	strb	r2, [r3, #0]
20000c60:	1dbb      	adds	r3, r7, #6
20000c62:	1c0a      	adds	r2, r1, #0
20000c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000c66:	1dbb      	adds	r3, r7, #6
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	2b00      	cmp	r3, #0
20000c6c:	d009      	beq.n	20000c82 <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20000c6e:	4b0c      	ldr	r3, [pc, #48]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c70:	781b      	ldrb	r3, [r3, #0]
20000c72:	b2da      	uxtb	r2, r3
20000c74:	490a      	ldr	r1, [pc, #40]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c76:	1dfb      	adds	r3, r7, #7
20000c78:	781b      	ldrb	r3, [r3, #0]
20000c7a:	4313      	orrs	r3, r2
20000c7c:	b2db      	uxtb	r3, r3
20000c7e:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20000c80:	e00a      	b.n	20000c98 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20000c82:	4b07      	ldr	r3, [pc, #28]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c84:	781b      	ldrb	r3, [r3, #0]
20000c86:	b2db      	uxtb	r3, r3
20000c88:	1dfa      	adds	r2, r7, #7
20000c8a:	7812      	ldrb	r2, [r2, #0]
20000c8c:	43d2      	mvns	r2, r2
20000c8e:	b2d2      	uxtb	r2, r2
20000c90:	4903      	ldr	r1, [pc, #12]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c92:	4013      	ands	r3, r2
20000c94:	b2db      	uxtb	r3, r3
20000c96:	700b      	strb	r3, [r1, #0]
}
20000c98:	46c0      	nop			; (mov r8, r8)
20000c9a:	46bd      	mov	sp, r7
20000c9c:	b002      	add	sp, #8
20000c9e:	bd80      	pop	{r7, pc}
20000ca0:	4002380d 	andmi	r3, r2, sp, lsl #16

20000ca4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b086      	sub	sp, #24
20000ca8:	af00      	add	r7, sp, #0
20000caa:	0002      	movs	r2, r0
20000cac:	1dfb      	adds	r3, r7, #7
20000cae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20000cb0:	2300      	movs	r3, #0
20000cb2:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20000cb4:	2300      	movs	r3, #0
20000cb6:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20000cb8:	2313      	movs	r3, #19
20000cba:	18fb      	adds	r3, r7, r3
20000cbc:	2200      	movs	r2, #0
20000cbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20000cc0:	1dfb      	adds	r3, r7, #7
20000cc2:	781b      	ldrb	r3, [r3, #0]
20000cc4:	095b      	lsrs	r3, r3, #5
20000cc6:	b2db      	uxtb	r3, r3
20000cc8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20000cca:	68fb      	ldr	r3, [r7, #12]
20000ccc:	2b01      	cmp	r3, #1
20000cce:	d103      	bne.n	20000cd8 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20000cd0:	4b14      	ldr	r3, [pc, #80]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000cd2:	681b      	ldr	r3, [r3, #0]
20000cd4:	617b      	str	r3, [r7, #20]
20000cd6:	e009      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20000cd8:	68fb      	ldr	r3, [r7, #12]
20000cda:	2b02      	cmp	r3, #2
20000cdc:	d103      	bne.n	20000ce6 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20000cde:	4b11      	ldr	r3, [pc, #68]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20000ce2:	617b      	str	r3, [r7, #20]
20000ce4:	e002      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20000ce6:	4b0f      	ldr	r3, [pc, #60]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000cea:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20000cec:	1dfb      	adds	r3, r7, #7
20000cee:	781b      	ldrb	r3, [r3, #0]
20000cf0:	221f      	movs	r2, #31
20000cf2:	4013      	ands	r3, r2
20000cf4:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20000cf6:	697a      	ldr	r2, [r7, #20]
20000cf8:	68fb      	ldr	r3, [r7, #12]
20000cfa:	40da      	lsrs	r2, r3
20000cfc:	0013      	movs	r3, r2
20000cfe:	2201      	movs	r2, #1
20000d00:	4013      	ands	r3, r2
20000d02:	d004      	beq.n	20000d0e <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20000d04:	2313      	movs	r3, #19
20000d06:	18fb      	adds	r3, r7, r3
20000d08:	2201      	movs	r2, #1
20000d0a:	701a      	strb	r2, [r3, #0]
20000d0c:	e003      	b.n	20000d16 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20000d0e:	2313      	movs	r3, #19
20000d10:	18fb      	adds	r3, r7, r3
20000d12:	2200      	movs	r2, #0
20000d14:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20000d16:	2313      	movs	r3, #19
20000d18:	18fb      	adds	r3, r7, r3
20000d1a:	781b      	ldrb	r3, [r3, #0]
}
20000d1c:	0018      	movs	r0, r3
20000d1e:	46bd      	mov	sp, r7
20000d20:	b006      	add	sp, #24
20000d22:	bd80      	pop	{r7, pc}
20000d24:	40023800 	andmi	r3, r2, r0, lsl #16

20000d28 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20000d28:	b580      	push	{r7, lr}
20000d2a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20000d2c:	4b04      	ldr	r3, [pc, #16]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20000d30:	4b03      	ldr	r3, [pc, #12]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d32:	2180      	movs	r1, #128	; 0x80
20000d34:	0449      	lsls	r1, r1, #17
20000d36:	430a      	orrs	r2, r1
20000d38:	675a      	str	r2, [r3, #116]	; 0x74
}
20000d3a:	46c0      	nop			; (mov r8, r8)
20000d3c:	46bd      	mov	sp, r7
20000d3e:	bd80      	pop	{r7, pc}
20000d40:	40023800 	andmi	r3, r2, r0, lsl #16

20000d44 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20000d44:	b580      	push	{r7, lr}
20000d46:	b084      	sub	sp, #16
20000d48:	af00      	add	r7, sp, #0
20000d4a:	0002      	movs	r2, r0
20000d4c:	1dfb      	adds	r3, r7, #7
20000d4e:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20000d50:	230f      	movs	r3, #15
20000d52:	18fb      	adds	r3, r7, r3
20000d54:	2200      	movs	r2, #0
20000d56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20000d58:	4b0a      	ldr	r3, [pc, #40]	; (20000d84 <RCC_GetITStatus+0x40>)
20000d5a:	68db      	ldr	r3, [r3, #12]
20000d5c:	1dfa      	adds	r2, r7, #7
20000d5e:	7812      	ldrb	r2, [r2, #0]
20000d60:	4013      	ands	r3, r2
20000d62:	d004      	beq.n	20000d6e <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20000d64:	230f      	movs	r3, #15
20000d66:	18fb      	adds	r3, r7, r3
20000d68:	2201      	movs	r2, #1
20000d6a:	701a      	strb	r2, [r3, #0]
20000d6c:	e003      	b.n	20000d76 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20000d6e:	230f      	movs	r3, #15
20000d70:	18fb      	adds	r3, r7, r3
20000d72:	2200      	movs	r2, #0
20000d74:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20000d76:	230f      	movs	r3, #15
20000d78:	18fb      	adds	r3, r7, r3
20000d7a:	781b      	ldrb	r3, [r3, #0]
}
20000d7c:	0018      	movs	r0, r3
20000d7e:	46bd      	mov	sp, r7
20000d80:	b004      	add	sp, #16
20000d82:	bd80      	pop	{r7, pc}
20000d84:	40023800 	andmi	r3, r2, r0, lsl #16

20000d88 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20000d88:	b580      	push	{r7, lr}
20000d8a:	b082      	sub	sp, #8
20000d8c:	af00      	add	r7, sp, #0
20000d8e:	0002      	movs	r2, r0
20000d90:	1dfb      	adds	r3, r7, #7
20000d92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20000d94:	4a03      	ldr	r2, [pc, #12]	; (20000da4 <RCC_ClearITPendingBit+0x1c>)
20000d96:	1dfb      	adds	r3, r7, #7
20000d98:	781b      	ldrb	r3, [r3, #0]
20000d9a:	7013      	strb	r3, [r2, #0]
}
20000d9c:	46c0      	nop			; (mov r8, r8)
20000d9e:	46bd      	mov	sp, r7
20000da0:	b002      	add	sp, #8
20000da2:	bd80      	pop	{r7, pc}
20000da4:	4002380e 	andmi	r3, r2, lr, lsl #16

20000da8 <init_GPIO_Ports>:

volatile uint32_t msTicks = 0; /* Variable to store millisecond ticks */


void init_GPIO_Ports()
{
20000da8:	b580      	push	{r7, lr}
20000daa:	b082      	sub	sp, #8
20000dac:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO A UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000dae:	2101      	movs	r1, #1
20000db0:	2001      	movs	r0, #1
20000db2:	f7ff fd51 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000db6:	003b      	movs	r3, r7
20000db8:	0018      	movs	r0, r3
20000dba:	f000 facf 	bl	2000135c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7;
20000dbe:	003b      	movs	r3, r7
20000dc0:	22aa      	movs	r2, #170	; 0xaa
20000dc2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000dc4:	003b      	movs	r3, r7
20000dc6:	2201      	movs	r2, #1
20000dc8:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000dca:	003b      	movs	r3, r7
20000dcc:	2200      	movs	r2, #0
20000dce:	719a      	strb	r2, [r3, #6]
	GPIO_Init(GPIOA, &init);
20000dd0:	003b      	movs	r3, r7
20000dd2:	4a0e      	ldr	r2, [pc, #56]	; (20000e0c <init_GPIO_Ports+0x64>)
20000dd4:	0019      	movs	r1, r3
20000dd6:	0010      	movs	r0, r2
20000dd8:	f000 fa34 	bl	20001244 <GPIO_Init>

	//konfigurerar inport GPIO A
	GPIO_StructInit(&init);
20000ddc:	003b      	movs	r3, r7
20000dde:	0018      	movs	r0, r3
20000de0:	f000 fabc 	bl	2000135c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6;
20000de4:	003b      	movs	r3, r7
20000de6:	2255      	movs	r2, #85	; 0x55
20000de8:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000dea:	003b      	movs	r3, r7
20000dec:	2200      	movs	r2, #0
20000dee:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000df0:	003b      	movs	r3, r7
20000df2:	2201      	movs	r2, #1
20000df4:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20000df6:	003b      	movs	r3, r7
20000df8:	4a04      	ldr	r2, [pc, #16]	; (20000e0c <init_GPIO_Ports+0x64>)
20000dfa:	0019      	movs	r1, r3
20000dfc:	0010      	movs	r0, r2
20000dfe:	f000 fa21 	bl	20001244 <GPIO_Init>
}
20000e02:	46c0      	nop			; (mov r8, r8)
20000e04:	46bd      	mov	sp, r7
20000e06:	b002      	add	sp, #8
20000e08:	bd80      	pop	{r7, pc}
20000e0a:	46c0      	nop			; (mov r8, r8)
20000e0c:	40020000 	andmi	r0, r2, r0

20000e10 <SysTick_Handler>:

void SysTick_Handler(void)
{ /* SysTick interrupt Handler. */
20000e10:	b580      	push	{r7, lr}
20000e12:	af00      	add	r7, sp, #0
	msTicks++;
20000e14:	4b03      	ldr	r3, [pc, #12]	; (20000e24 <SysTick_Handler+0x14>)
20000e16:	681b      	ldr	r3, [r3, #0]
20000e18:	1c5a      	adds	r2, r3, #1
20000e1a:	4b02      	ldr	r3, [pc, #8]	; (20000e24 <SysTick_Handler+0x14>)
20000e1c:	601a      	str	r2, [r3, #0]
}
20000e1e:	46c0      	nop			; (mov r8, r8)
20000e20:	46bd      	mov	sp, r7
20000e22:	bd80      	pop	{r7, pc}
20000e24:	20004b00 	andcs	r4, r0, r0, lsl #22

20000e28 <app_Init>:

void app_Init(void)
{
20000e28:	b580      	push	{r7, lr}
20000e2a:	b082      	sub	sp, #8
20000e2c:	af00      	add	r7, sp, #0
	// Initiera SysTick.
	*((void (**)(void))0x2001C03C) = SysTick_Handler;
20000e2e:	4b06      	ldr	r3, [pc, #24]	; (20000e48 <app_Init+0x20>)
20000e30:	4a06      	ldr	r2, [pc, #24]	; (20000e4c <app_Init+0x24>)
20000e32:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	returnCode = SysTick_Config(168000000 / 1000); // Genererar ett SysTick-avbrott varje ms.
20000e34:	4b06      	ldr	r3, [pc, #24]	; (20000e50 <app_Init+0x28>)
20000e36:	0018      	movs	r0, r3
20000e38:	f7ff f91a 	bl	20000070 <SysTick_Config>
20000e3c:	0003      	movs	r3, r0
20000e3e:	607b      	str	r3, [r7, #4]

	if (returnCode != 0)
	{   // Om inte SysTick_Config lyckas...
		//typ reboot? bootloops är alltid kul
	}
}
20000e40:	46c0      	nop			; (mov r8, r8)
20000e42:	46bd      	mov	sp, r7
20000e44:	b002      	add	sp, #8
20000e46:	bd80      	pop	{r7, pc}
20000e48:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000e4c:	20000e11 	andcs	r0, r0, r1, lsl lr
20000e50:	00029040 	andeq	r9, r2, r0, asr #32

20000e54 <main>:

void main(void)
{
20000e54:	b5f0      	push	{r4, r5, r6, r7, lr}
20000e56:	b0bb      	sub	sp, #236	; 0xec
20000e58:	af00      	add	r7, sp, #0
	init_GPIO_Ports();
20000e5a:	f7ff ffa5 	bl	20000da8 <init_GPIO_Ports>
	app_Init();
20000e5e:	f7ff ffe3 	bl	20000e28 <app_Init>
//	DebugPrintInit();

	door test1 = {.id = 0, .controlbits = 0, .time_larm = 1, .time_central_larm = 2, .password = 0, .GPIO_lamp = GPIO_Pin_3, .GPIO_read = GPIO_Pin_2, .larmTick = 0};
20000e62:	21c4      	movs	r1, #196	; 0xc4
20000e64:	187b      	adds	r3, r7, r1
20000e66:	4a94      	ldr	r2, [pc, #592]	; (200010b8 <main+0x264>)
20000e68:	ca31      	ldmia	r2!, {r0, r4, r5}
20000e6a:	c331      	stmia	r3!, {r0, r4, r5}
20000e6c:	ca31      	ldmia	r2!, {r0, r4, r5}
20000e6e:	c331      	stmia	r3!, {r0, r4, r5}
20000e70:	6812      	ldr	r2, [r2, #0]
20000e72:	601a      	str	r2, [r3, #0]
	door test2 = {.id = 1, .controlbits = 0, .time_larm = 1, .time_central_larm = 2, .password = 0, .GPIO_lamp = GPIO_Pin_5, .GPIO_read = GPIO_Pin_4, .larmTick = 0};
20000e74:	20a8      	movs	r0, #168	; 0xa8
20000e76:	183b      	adds	r3, r7, r0
20000e78:	4a90      	ldr	r2, [pc, #576]	; (200010bc <main+0x268>)
20000e7a:	ca70      	ldmia	r2!, {r4, r5, r6}
20000e7c:	c370      	stmia	r3!, {r4, r5, r6}
20000e7e:	ca70      	ldmia	r2!, {r4, r5, r6}
20000e80:	c370      	stmia	r3!, {r4, r5, r6}
20000e82:	6812      	ldr	r2, [r2, #0]
20000e84:	601a      	str	r2, [r3, #0]
	door test3 = {.id = 2, .controlbits = 0, .time_larm = 1, .time_central_larm = 2, .password = 0, .GPIO_lamp = GPIO_Pin_1, .GPIO_read = GPIO_Pin_0, .larmTick = 0};
20000e86:	248c      	movs	r4, #140	; 0x8c
20000e88:	193b      	adds	r3, r7, r4
20000e8a:	4a8d      	ldr	r2, [pc, #564]	; (200010c0 <main+0x26c>)
20000e8c:	ca62      	ldmia	r2!, {r1, r5, r6}
20000e8e:	c362      	stmia	r3!, {r1, r5, r6}
20000e90:	ca62      	ldmia	r2!, {r1, r5, r6}
20000e92:	c362      	stmia	r3!, {r1, r5, r6}
20000e94:	6812      	ldr	r2, [r2, #0]
20000e96:	601a      	str	r2, [r3, #0]
	door test4 = {.id = 3, .controlbits = 0, .time_larm = 1, .time_central_larm = 2, .password = 0, .GPIO_lamp = GPIO_Pin_7, .GPIO_read = GPIO_Pin_6, .larmTick = 0};
20000e98:	2570      	movs	r5, #112	; 0x70
20000e9a:	197b      	adds	r3, r7, r5
20000e9c:	4a89      	ldr	r2, [pc, #548]	; (200010c4 <main+0x270>)
20000e9e:	ca43      	ldmia	r2!, {r0, r1, r6}
20000ea0:	c343      	stmia	r3!, {r0, r1, r6}
20000ea2:	ca43      	ldmia	r2!, {r0, r1, r6}
20000ea4:	c343      	stmia	r3!, {r0, r1, r6}
20000ea6:	6812      	ldr	r2, [r2, #0]
20000ea8:	601a      	str	r2, [r3, #0]

	door active_doors[4] = {test1,test2,test3,test4};
20000eaa:	003b      	movs	r3, r7
20000eac:	21c4      	movs	r1, #196	; 0xc4
20000eae:	187a      	adds	r2, r7, r1
20000eb0:	ca43      	ldmia	r2!, {r0, r1, r6}
20000eb2:	c343      	stmia	r3!, {r0, r1, r6}
20000eb4:	ca43      	ldmia	r2!, {r0, r1, r6}
20000eb6:	c343      	stmia	r3!, {r0, r1, r6}
20000eb8:	6812      	ldr	r2, [r2, #0]
20000eba:	601a      	str	r2, [r3, #0]
20000ebc:	003b      	movs	r3, r7
20000ebe:	20a8      	movs	r0, #168	; 0xa8
20000ec0:	183a      	adds	r2, r7, r0
20000ec2:	331c      	adds	r3, #28
20000ec4:	ca43      	ldmia	r2!, {r0, r1, r6}
20000ec6:	c343      	stmia	r3!, {r0, r1, r6}
20000ec8:	ca43      	ldmia	r2!, {r0, r1, r6}
20000eca:	c343      	stmia	r3!, {r0, r1, r6}
20000ecc:	6812      	ldr	r2, [r2, #0]
20000ece:	601a      	str	r2, [r3, #0]
20000ed0:	003b      	movs	r3, r7
20000ed2:	193a      	adds	r2, r7, r4
20000ed4:	3338      	adds	r3, #56	; 0x38
20000ed6:	ca13      	ldmia	r2!, {r0, r1, r4}
20000ed8:	c313      	stmia	r3!, {r0, r1, r4}
20000eda:	ca13      	ldmia	r2!, {r0, r1, r4}
20000edc:	c313      	stmia	r3!, {r0, r1, r4}
20000ede:	6812      	ldr	r2, [r2, #0]
20000ee0:	601a      	str	r2, [r3, #0]
20000ee2:	003b      	movs	r3, r7
20000ee4:	197a      	adds	r2, r7, r5
20000ee6:	3354      	adds	r3, #84	; 0x54
20000ee8:	ca13      	ldmia	r2!, {r0, r1, r4}
20000eea:	c313      	stmia	r3!, {r0, r1, r4}
20000eec:	ca13      	ldmia	r2!, {r0, r1, r4}
20000eee:	c313      	stmia	r3!, {r0, r1, r4}
20000ef0:	6812      	ldr	r2, [r2, #0]
20000ef2:	601a      	str	r2, [r3, #0]

	while (1)
	{
		for (int i = 0; i < sizeof(active_doors); i++)
20000ef4:	2300      	movs	r3, #0
20000ef6:	22e4      	movs	r2, #228	; 0xe4
20000ef8:	18ba      	adds	r2, r7, r2
20000efa:	6013      	str	r3, [r2, #0]
20000efc:	e0d5      	b.n	200010aa <main+0x256>
		{
			if(GPIO_ReadInputDataBit(GPIOA, active_doors[i].GPIO_read)){
20000efe:	0039      	movs	r1, r7
20000f00:	23e4      	movs	r3, #228	; 0xe4
20000f02:	18fb      	adds	r3, r7, r3
20000f04:	681a      	ldr	r2, [r3, #0]
20000f06:	0013      	movs	r3, r2
20000f08:	00db      	lsls	r3, r3, #3
20000f0a:	1a9b      	subs	r3, r3, r2
20000f0c:	009b      	lsls	r3, r3, #2
20000f0e:	18cb      	adds	r3, r1, r3
20000f10:	3314      	adds	r3, #20
20000f12:	681b      	ldr	r3, [r3, #0]
20000f14:	b29b      	uxth	r3, r3
20000f16:	4a6c      	ldr	r2, [pc, #432]	; (200010c8 <main+0x274>)
20000f18:	0019      	movs	r1, r3
20000f1a:	0010      	movs	r0, r2
20000f1c:	f000 fa5b 	bl	200013d6 <GPIO_ReadInputDataBit>
20000f20:	1e03      	subs	r3, r0, #0
20000f22:	d00c      	beq.n	20000f3e <main+0xea>
				active_doors[i].controlbits = 0;
20000f24:	0039      	movs	r1, r7
20000f26:	23e4      	movs	r3, #228	; 0xe4
20000f28:	18fb      	adds	r3, r7, r3
20000f2a:	681a      	ldr	r2, [r3, #0]
20000f2c:	0013      	movs	r3, r2
20000f2e:	00db      	lsls	r3, r3, #3
20000f30:	1a9b      	subs	r3, r3, r2
20000f32:	009b      	lsls	r3, r3, #2
20000f34:	18cb      	adds	r3, r1, r3
20000f36:	3304      	adds	r3, #4
20000f38:	2200      	movs	r2, #0
20000f3a:	601a      	str	r2, [r3, #0]
20000f3c:	e026      	b.n	20000f8c <main+0x138>
				//GPIO_ResetBits(GPIOA, active_doors[i].GPIO_lamp);
			} else{
				if(active_doors[i].controlbits == 0){
20000f3e:	0039      	movs	r1, r7
20000f40:	23e4      	movs	r3, #228	; 0xe4
20000f42:	18fb      	adds	r3, r7, r3
20000f44:	681a      	ldr	r2, [r3, #0]
20000f46:	0013      	movs	r3, r2
20000f48:	00db      	lsls	r3, r3, #3
20000f4a:	1a9b      	subs	r3, r3, r2
20000f4c:	009b      	lsls	r3, r3, #2
20000f4e:	18cb      	adds	r3, r1, r3
20000f50:	3304      	adds	r3, #4
20000f52:	681b      	ldr	r3, [r3, #0]
20000f54:	2b00      	cmp	r3, #0
20000f56:	d10d      	bne.n	20000f74 <main+0x120>
					active_doors[i].larmTick = msTicks;
20000f58:	4b5c      	ldr	r3, [pc, #368]	; (200010cc <main+0x278>)
20000f5a:	681b      	ldr	r3, [r3, #0]
20000f5c:	0018      	movs	r0, r3
20000f5e:	0039      	movs	r1, r7
20000f60:	23e4      	movs	r3, #228	; 0xe4
20000f62:	18fb      	adds	r3, r7, r3
20000f64:	681a      	ldr	r2, [r3, #0]
20000f66:	0013      	movs	r3, r2
20000f68:	00db      	lsls	r3, r3, #3
20000f6a:	1a9b      	subs	r3, r3, r2
20000f6c:	009b      	lsls	r3, r3, #2
20000f6e:	18cb      	adds	r3, r1, r3
20000f70:	3318      	adds	r3, #24
20000f72:	6018      	str	r0, [r3, #0]
				}
				active_doors[i].controlbits = 1;
20000f74:	0039      	movs	r1, r7
20000f76:	23e4      	movs	r3, #228	; 0xe4
20000f78:	18fb      	adds	r3, r7, r3
20000f7a:	681a      	ldr	r2, [r3, #0]
20000f7c:	0013      	movs	r3, r2
20000f7e:	00db      	lsls	r3, r3, #3
20000f80:	1a9b      	subs	r3, r3, r2
20000f82:	009b      	lsls	r3, r3, #2
20000f84:	18cb      	adds	r3, r1, r3
20000f86:	3304      	adds	r3, #4
20000f88:	2201      	movs	r2, #1
20000f8a:	601a      	str	r2, [r3, #0]

				//GPIO_SetBits(GPIOA, active_doors[i].GPIO_lamp);


						}
		for (int i = 0; i < sizeof(active_doors); i++)
20000f8c:	2300      	movs	r3, #0
20000f8e:	22e0      	movs	r2, #224	; 0xe0
20000f90:	18ba      	adds	r2, r7, r2
20000f92:	6013      	str	r3, [r2, #0]
20000f94:	e07d      	b.n	20001092 <main+0x23e>
		{ 
			if (active_doors[i].controlbits == 1 && msTicks > (active_doors[i].larmTick + 1000*10* active_doors[i].time_larm))
20000f96:	0039      	movs	r1, r7
20000f98:	23e0      	movs	r3, #224	; 0xe0
20000f9a:	18fb      	adds	r3, r7, r3
20000f9c:	681a      	ldr	r2, [r3, #0]
20000f9e:	0013      	movs	r3, r2
20000fa0:	00db      	lsls	r3, r3, #3
20000fa2:	1a9b      	subs	r3, r3, r2
20000fa4:	009b      	lsls	r3, r3, #2
20000fa6:	18cb      	adds	r3, r1, r3
20000fa8:	3304      	adds	r3, #4
20000faa:	681b      	ldr	r3, [r3, #0]
20000fac:	2b01      	cmp	r3, #1
20000fae:	d11d      	bne.n	20000fec <main+0x198>
20000fb0:	0039      	movs	r1, r7
20000fb2:	24e0      	movs	r4, #224	; 0xe0
20000fb4:	193b      	adds	r3, r7, r4
20000fb6:	681a      	ldr	r2, [r3, #0]
20000fb8:	0013      	movs	r3, r2
20000fba:	00db      	lsls	r3, r3, #3
20000fbc:	1a9b      	subs	r3, r3, r2
20000fbe:	009b      	lsls	r3, r3, #2
20000fc0:	18cb      	adds	r3, r1, r3
20000fc2:	3318      	adds	r3, #24
20000fc4:	6819      	ldr	r1, [r3, #0]
20000fc6:	0038      	movs	r0, r7
20000fc8:	193b      	adds	r3, r7, r4
20000fca:	681a      	ldr	r2, [r3, #0]
20000fcc:	0013      	movs	r3, r2
20000fce:	00db      	lsls	r3, r3, #3
20000fd0:	1a9b      	subs	r3, r3, r2
20000fd2:	009b      	lsls	r3, r3, #2
20000fd4:	18c3      	adds	r3, r0, r3
20000fd6:	3308      	adds	r3, #8
20000fd8:	781b      	ldrb	r3, [r3, #0]
20000fda:	001a      	movs	r2, r3
20000fdc:	4b3c      	ldr	r3, [pc, #240]	; (200010d0 <main+0x27c>)
20000fde:	4353      	muls	r3, r2
20000fe0:	18cb      	adds	r3, r1, r3
20000fe2:	001a      	movs	r2, r3
20000fe4:	4b39      	ldr	r3, [pc, #228]	; (200010cc <main+0x278>)
20000fe6:	681b      	ldr	r3, [r3, #0]
20000fe8:	429a      	cmp	r2, r3
20000fea:	d310      	bcc.n	2000100e <main+0x1ba>
			{
				//GPIO_SetBits(GPIOA, active_doors[i].GPIO_lamp);
			}
			
			else{
				GPIO_ResetBits(GPIOA, active_doors[i].GPIO_lamp);
20000fec:	0039      	movs	r1, r7
20000fee:	23e0      	movs	r3, #224	; 0xe0
20000ff0:	18fb      	adds	r3, r7, r3
20000ff2:	681a      	ldr	r2, [r3, #0]
20000ff4:	0013      	movs	r3, r2
20000ff6:	00db      	lsls	r3, r3, #3
20000ff8:	1a9b      	subs	r3, r3, r2
20000ffa:	009b      	lsls	r3, r3, #2
20000ffc:	18cb      	adds	r3, r1, r3
20000ffe:	3310      	adds	r3, #16
20001000:	681b      	ldr	r3, [r3, #0]
20001002:	b29b      	uxth	r3, r3
20001004:	4a30      	ldr	r2, [pc, #192]	; (200010c8 <main+0x274>)
20001006:	0019      	movs	r1, r3
20001008:	0010      	movs	r0, r2
2000100a:	f000 fa4b 	bl	200014a4 <GPIO_ResetBits>
			}
			if (active_doors[i].controlbits == 1 && msTicks > (active_doors[i].larmTick + 1000*10* active_doors[i].time_central_larm))
2000100e:	0039      	movs	r1, r7
20001010:	23e0      	movs	r3, #224	; 0xe0
20001012:	18fb      	adds	r3, r7, r3
20001014:	681a      	ldr	r2, [r3, #0]
20001016:	0013      	movs	r3, r2
20001018:	00db      	lsls	r3, r3, #3
2000101a:	1a9b      	subs	r3, r3, r2
2000101c:	009b      	lsls	r3, r3, #2
2000101e:	18cb      	adds	r3, r1, r3
20001020:	3304      	adds	r3, #4
20001022:	681b      	ldr	r3, [r3, #0]
20001024:	2b01      	cmp	r3, #1
20001026:	d12e      	bne.n	20001086 <main+0x232>
20001028:	0039      	movs	r1, r7
2000102a:	24e0      	movs	r4, #224	; 0xe0
2000102c:	193b      	adds	r3, r7, r4
2000102e:	681a      	ldr	r2, [r3, #0]
20001030:	0013      	movs	r3, r2
20001032:	00db      	lsls	r3, r3, #3
20001034:	1a9b      	subs	r3, r3, r2
20001036:	009b      	lsls	r3, r3, #2
20001038:	18cb      	adds	r3, r1, r3
2000103a:	3318      	adds	r3, #24
2000103c:	6819      	ldr	r1, [r3, #0]
2000103e:	0038      	movs	r0, r7
20001040:	193b      	adds	r3, r7, r4
20001042:	681a      	ldr	r2, [r3, #0]
20001044:	0013      	movs	r3, r2
20001046:	00db      	lsls	r3, r3, #3
20001048:	1a9b      	subs	r3, r3, r2
2000104a:	009b      	lsls	r3, r3, #2
2000104c:	18c3      	adds	r3, r0, r3
2000104e:	3309      	adds	r3, #9
20001050:	781b      	ldrb	r3, [r3, #0]
20001052:	001a      	movs	r2, r3
20001054:	4b1e      	ldr	r3, [pc, #120]	; (200010d0 <main+0x27c>)
20001056:	4353      	muls	r3, r2
20001058:	18cb      	adds	r3, r1, r3
2000105a:	001a      	movs	r2, r3
2000105c:	4b1b      	ldr	r3, [pc, #108]	; (200010cc <main+0x278>)
2000105e:	681b      	ldr	r3, [r3, #0]
20001060:	429a      	cmp	r2, r3
20001062:	d210      	bcs.n	20001086 <main+0x232>
			{
				//Larma central enheten
				GPIO_SetBits(GPIOA, active_doors[i].GPIO_lamp);
20001064:	0039      	movs	r1, r7
20001066:	23e0      	movs	r3, #224	; 0xe0
20001068:	18fb      	adds	r3, r7, r3
2000106a:	681a      	ldr	r2, [r3, #0]
2000106c:	0013      	movs	r3, r2
2000106e:	00db      	lsls	r3, r3, #3
20001070:	1a9b      	subs	r3, r3, r2
20001072:	009b      	lsls	r3, r3, #2
20001074:	18cb      	adds	r3, r1, r3
20001076:	3310      	adds	r3, #16
20001078:	681b      	ldr	r3, [r3, #0]
2000107a:	b29b      	uxth	r3, r3
2000107c:	4a12      	ldr	r2, [pc, #72]	; (200010c8 <main+0x274>)
2000107e:	0019      	movs	r1, r3
20001080:	0010      	movs	r0, r2
20001082:	f000 fa00 	bl	20001486 <GPIO_SetBits>
		for (int i = 0; i < sizeof(active_doors); i++)
20001086:	22e0      	movs	r2, #224	; 0xe0
20001088:	18bb      	adds	r3, r7, r2
2000108a:	681b      	ldr	r3, [r3, #0]
2000108c:	3301      	adds	r3, #1
2000108e:	18ba      	adds	r2, r7, r2
20001090:	6013      	str	r3, [r2, #0]
20001092:	23e0      	movs	r3, #224	; 0xe0
20001094:	18fb      	adds	r3, r7, r3
20001096:	681b      	ldr	r3, [r3, #0]
20001098:	2b6f      	cmp	r3, #111	; 0x6f
2000109a:	d800      	bhi.n	2000109e <main+0x24a>
2000109c:	e77b      	b.n	20000f96 <main+0x142>
		for (int i = 0; i < sizeof(active_doors); i++)
2000109e:	22e4      	movs	r2, #228	; 0xe4
200010a0:	18bb      	adds	r3, r7, r2
200010a2:	681b      	ldr	r3, [r3, #0]
200010a4:	3301      	adds	r3, #1
200010a6:	18ba      	adds	r2, r7, r2
200010a8:	6013      	str	r3, [r2, #0]
200010aa:	23e4      	movs	r3, #228	; 0xe4
200010ac:	18fb      	adds	r3, r7, r3
200010ae:	681b      	ldr	r3, [r3, #0]
200010b0:	2b6f      	cmp	r3, #111	; 0x6f
200010b2:	d800      	bhi.n	200010b6 <main+0x262>
200010b4:	e723      	b.n	20000efe <main+0xaa>
200010b6:	e71d      	b.n	20000ef4 <main+0xa0>
200010b8:	20005020 	andcs	r5, r0, r0, lsr #32
200010bc:	2000503c 	andcs	r5, r0, ip, lsr r0
200010c0:	20005058 	andcs	r5, r0, r8, asr r0
200010c4:	20005074 	andcs	r5, r0, r4, ror r0
200010c8:	40020000 	andmi	r0, r2, r0
200010cc:	20004b00 	andcs	r4, r0, r0, lsl #22
200010d0:	00002710 	andeq	r2, r0, r0, lsl r7

200010d4 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
200010d4:	b580      	push	{r7, lr}
200010d6:	b082      	sub	sp, #8
200010d8:	af00      	add	r7, sp, #0
200010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
200010dc:	687b      	ldr	r3, [r7, #4]
200010de:	4a4e      	ldr	r2, [pc, #312]	; (20001218 <GPIO_DeInit+0x144>)
200010e0:	4293      	cmp	r3, r2
200010e2:	d108      	bne.n	200010f6 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
200010e4:	2101      	movs	r1, #1
200010e6:	2001      	movs	r0, #1
200010e8:	f7ff fc56 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
200010ec:	2100      	movs	r1, #0
200010ee:	2001      	movs	r0, #1
200010f0:	f7ff fc52 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
200010f4:	e08c      	b.n	20001210 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
200010f6:	687b      	ldr	r3, [r7, #4]
200010f8:	4a48      	ldr	r2, [pc, #288]	; (2000121c <GPIO_DeInit+0x148>)
200010fa:	4293      	cmp	r3, r2
200010fc:	d108      	bne.n	20001110 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
200010fe:	2101      	movs	r1, #1
20001100:	2002      	movs	r0, #2
20001102:	f7ff fc49 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
20001106:	2100      	movs	r1, #0
20001108:	2002      	movs	r0, #2
2000110a:	f7ff fc45 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
2000110e:	e07f      	b.n	20001210 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20001110:	687b      	ldr	r3, [r7, #4]
20001112:	4a43      	ldr	r2, [pc, #268]	; (20001220 <GPIO_DeInit+0x14c>)
20001114:	4293      	cmp	r3, r2
20001116:	d108      	bne.n	2000112a <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20001118:	2101      	movs	r1, #1
2000111a:	2004      	movs	r0, #4
2000111c:	f7ff fc3c 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20001120:	2100      	movs	r1, #0
20001122:	2004      	movs	r0, #4
20001124:	f7ff fc38 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001128:	e072      	b.n	20001210 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
2000112a:	687b      	ldr	r3, [r7, #4]
2000112c:	4a3d      	ldr	r2, [pc, #244]	; (20001224 <GPIO_DeInit+0x150>)
2000112e:	4293      	cmp	r3, r2
20001130:	d108      	bne.n	20001144 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20001132:	2101      	movs	r1, #1
20001134:	2008      	movs	r0, #8
20001136:	f7ff fc2f 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
2000113a:	2100      	movs	r1, #0
2000113c:	2008      	movs	r0, #8
2000113e:	f7ff fc2b 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001142:	e065      	b.n	20001210 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
20001144:	687b      	ldr	r3, [r7, #4]
20001146:	4a38      	ldr	r2, [pc, #224]	; (20001228 <GPIO_DeInit+0x154>)
20001148:	4293      	cmp	r3, r2
2000114a:	d108      	bne.n	2000115e <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
2000114c:	2101      	movs	r1, #1
2000114e:	2010      	movs	r0, #16
20001150:	f7ff fc22 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20001154:	2100      	movs	r1, #0
20001156:	2010      	movs	r0, #16
20001158:	f7ff fc1e 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
2000115c:	e058      	b.n	20001210 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
2000115e:	687b      	ldr	r3, [r7, #4]
20001160:	4a32      	ldr	r2, [pc, #200]	; (2000122c <GPIO_DeInit+0x158>)
20001162:	4293      	cmp	r3, r2
20001164:	d108      	bne.n	20001178 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
20001166:	2101      	movs	r1, #1
20001168:	2020      	movs	r0, #32
2000116a:	f7ff fc15 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
2000116e:	2100      	movs	r1, #0
20001170:	2020      	movs	r0, #32
20001172:	f7ff fc11 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001176:	e04b      	b.n	20001210 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20001178:	687b      	ldr	r3, [r7, #4]
2000117a:	4a2d      	ldr	r2, [pc, #180]	; (20001230 <GPIO_DeInit+0x15c>)
2000117c:	4293      	cmp	r3, r2
2000117e:	d108      	bne.n	20001192 <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20001180:	2101      	movs	r1, #1
20001182:	2040      	movs	r0, #64	; 0x40
20001184:	f7ff fc08 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20001188:	2100      	movs	r1, #0
2000118a:	2040      	movs	r0, #64	; 0x40
2000118c:	f7ff fc04 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001190:	e03e      	b.n	20001210 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
20001192:	687b      	ldr	r3, [r7, #4]
20001194:	4a27      	ldr	r2, [pc, #156]	; (20001234 <GPIO_DeInit+0x160>)
20001196:	4293      	cmp	r3, r2
20001198:	d108      	bne.n	200011ac <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
2000119a:	2101      	movs	r1, #1
2000119c:	2080      	movs	r0, #128	; 0x80
2000119e:	f7ff fbfb 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
200011a2:	2100      	movs	r1, #0
200011a4:	2080      	movs	r0, #128	; 0x80
200011a6:	f7ff fbf7 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200011aa:	e031      	b.n	20001210 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
200011ac:	687b      	ldr	r3, [r7, #4]
200011ae:	4a22      	ldr	r2, [pc, #136]	; (20001238 <GPIO_DeInit+0x164>)
200011b0:	4293      	cmp	r3, r2
200011b2:	d10c      	bne.n	200011ce <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
200011b4:	2380      	movs	r3, #128	; 0x80
200011b6:	005b      	lsls	r3, r3, #1
200011b8:	2101      	movs	r1, #1
200011ba:	0018      	movs	r0, r3
200011bc:	f7ff fbec 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
200011c0:	2380      	movs	r3, #128	; 0x80
200011c2:	005b      	lsls	r3, r3, #1
200011c4:	2100      	movs	r1, #0
200011c6:	0018      	movs	r0, r3
200011c8:	f7ff fbe6 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200011cc:	e020      	b.n	20001210 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
200011ce:	687b      	ldr	r3, [r7, #4]
200011d0:	4a1a      	ldr	r2, [pc, #104]	; (2000123c <GPIO_DeInit+0x168>)
200011d2:	4293      	cmp	r3, r2
200011d4:	d10c      	bne.n	200011f0 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
200011d6:	2380      	movs	r3, #128	; 0x80
200011d8:	009b      	lsls	r3, r3, #2
200011da:	2101      	movs	r1, #1
200011dc:	0018      	movs	r0, r3
200011de:	f7ff fbdb 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
200011e2:	2380      	movs	r3, #128	; 0x80
200011e4:	009b      	lsls	r3, r3, #2
200011e6:	2100      	movs	r1, #0
200011e8:	0018      	movs	r0, r3
200011ea:	f7ff fbd5 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200011ee:	e00f      	b.n	20001210 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
200011f0:	687b      	ldr	r3, [r7, #4]
200011f2:	4a13      	ldr	r2, [pc, #76]	; (20001240 <GPIO_DeInit+0x16c>)
200011f4:	4293      	cmp	r3, r2
200011f6:	d10b      	bne.n	20001210 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
200011f8:	2380      	movs	r3, #128	; 0x80
200011fa:	00db      	lsls	r3, r3, #3
200011fc:	2101      	movs	r1, #1
200011fe:	0018      	movs	r0, r3
20001200:	f7ff fbca 	bl	20000998 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20001204:	2380      	movs	r3, #128	; 0x80
20001206:	00db      	lsls	r3, r3, #3
20001208:	2100      	movs	r1, #0
2000120a:	0018      	movs	r0, r3
2000120c:	f7ff fbc4 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001210:	46c0      	nop			; (mov r8, r8)
20001212:	46bd      	mov	sp, r7
20001214:	b002      	add	sp, #8
20001216:	bd80      	pop	{r7, pc}
20001218:	40020000 	andmi	r0, r2, r0
2000121c:	40020400 	andmi	r0, r2, r0, lsl #8
20001220:	40020800 	andmi	r0, r2, r0, lsl #16
20001224:	40020c00 	andmi	r0, r2, r0, lsl #24
20001228:	40021000 	andmi	r1, r2, r0
2000122c:	40021400 	andmi	r1, r2, r0, lsl #8
20001230:	40021800 	andmi	r1, r2, r0, lsl #16
20001234:	40021c00 	andmi	r1, r2, r0, lsl #24
20001238:	40022000 	andmi	r2, r2, r0
2000123c:	40022400 	andmi	r2, r2, r0, lsl #8
20001240:	40022800 	andmi	r2, r2, r0, lsl #16

20001244 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
20001244:	b580      	push	{r7, lr}
20001246:	b086      	sub	sp, #24
20001248:	af00      	add	r7, sp, #0
2000124a:	6078      	str	r0, [r7, #4]
2000124c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
2000124e:	2300      	movs	r3, #0
20001250:	617b      	str	r3, [r7, #20]
20001252:	2300      	movs	r3, #0
20001254:	613b      	str	r3, [r7, #16]
20001256:	2300      	movs	r3, #0
20001258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
2000125a:	2300      	movs	r3, #0
2000125c:	617b      	str	r3, [r7, #20]
2000125e:	e076      	b.n	2000134e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20001260:	2201      	movs	r2, #1
20001262:	697b      	ldr	r3, [r7, #20]
20001264:	409a      	lsls	r2, r3
20001266:	0013      	movs	r3, r2
20001268:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
2000126a:	683b      	ldr	r3, [r7, #0]
2000126c:	681a      	ldr	r2, [r3, #0]
2000126e:	693b      	ldr	r3, [r7, #16]
20001270:	4013      	ands	r3, r2
20001272:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20001274:	68fa      	ldr	r2, [r7, #12]
20001276:	693b      	ldr	r3, [r7, #16]
20001278:	429a      	cmp	r2, r3
2000127a:	d165      	bne.n	20001348 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
2000127c:	687b      	ldr	r3, [r7, #4]
2000127e:	681b      	ldr	r3, [r3, #0]
20001280:	697a      	ldr	r2, [r7, #20]
20001282:	0052      	lsls	r2, r2, #1
20001284:	2103      	movs	r1, #3
20001286:	4091      	lsls	r1, r2
20001288:	000a      	movs	r2, r1
2000128a:	43d2      	mvns	r2, r2
2000128c:	401a      	ands	r2, r3
2000128e:	687b      	ldr	r3, [r7, #4]
20001290:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
20001292:	687b      	ldr	r3, [r7, #4]
20001294:	681a      	ldr	r2, [r3, #0]
20001296:	683b      	ldr	r3, [r7, #0]
20001298:	791b      	ldrb	r3, [r3, #4]
2000129a:	0019      	movs	r1, r3
2000129c:	697b      	ldr	r3, [r7, #20]
2000129e:	005b      	lsls	r3, r3, #1
200012a0:	4099      	lsls	r1, r3
200012a2:	000b      	movs	r3, r1
200012a4:	431a      	orrs	r2, r3
200012a6:	687b      	ldr	r3, [r7, #4]
200012a8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
200012aa:	683b      	ldr	r3, [r7, #0]
200012ac:	791b      	ldrb	r3, [r3, #4]
200012ae:	2b01      	cmp	r3, #1
200012b0:	d003      	beq.n	200012ba <GPIO_Init+0x76>
200012b2:	683b      	ldr	r3, [r7, #0]
200012b4:	791b      	ldrb	r3, [r3, #4]
200012b6:	2b02      	cmp	r3, #2
200012b8:	d12e      	bne.n	20001318 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
200012ba:	687b      	ldr	r3, [r7, #4]
200012bc:	689b      	ldr	r3, [r3, #8]
200012be:	697a      	ldr	r2, [r7, #20]
200012c0:	0052      	lsls	r2, r2, #1
200012c2:	2103      	movs	r1, #3
200012c4:	4091      	lsls	r1, r2
200012c6:	000a      	movs	r2, r1
200012c8:	43d2      	mvns	r2, r2
200012ca:	401a      	ands	r2, r3
200012cc:	687b      	ldr	r3, [r7, #4]
200012ce:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
200012d0:	687b      	ldr	r3, [r7, #4]
200012d2:	689a      	ldr	r2, [r3, #8]
200012d4:	683b      	ldr	r3, [r7, #0]
200012d6:	795b      	ldrb	r3, [r3, #5]
200012d8:	0019      	movs	r1, r3
200012da:	697b      	ldr	r3, [r7, #20]
200012dc:	005b      	lsls	r3, r3, #1
200012de:	4099      	lsls	r1, r3
200012e0:	000b      	movs	r3, r1
200012e2:	431a      	orrs	r2, r3
200012e4:	687b      	ldr	r3, [r7, #4]
200012e6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
200012e8:	687b      	ldr	r3, [r7, #4]
200012ea:	685b      	ldr	r3, [r3, #4]
200012ec:	697a      	ldr	r2, [r7, #20]
200012ee:	b292      	uxth	r2, r2
200012f0:	0011      	movs	r1, r2
200012f2:	2201      	movs	r2, #1
200012f4:	408a      	lsls	r2, r1
200012f6:	43d2      	mvns	r2, r2
200012f8:	401a      	ands	r2, r3
200012fa:	687b      	ldr	r3, [r7, #4]
200012fc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
200012fe:	687b      	ldr	r3, [r7, #4]
20001300:	685b      	ldr	r3, [r3, #4]
20001302:	683a      	ldr	r2, [r7, #0]
20001304:	7992      	ldrb	r2, [r2, #6]
20001306:	0011      	movs	r1, r2
20001308:	697a      	ldr	r2, [r7, #20]
2000130a:	b292      	uxth	r2, r2
2000130c:	4091      	lsls	r1, r2
2000130e:	000a      	movs	r2, r1
20001310:	b292      	uxth	r2, r2
20001312:	431a      	orrs	r2, r3
20001314:	687b      	ldr	r3, [r7, #4]
20001316:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20001318:	687b      	ldr	r3, [r7, #4]
2000131a:	68db      	ldr	r3, [r3, #12]
2000131c:	697a      	ldr	r2, [r7, #20]
2000131e:	b292      	uxth	r2, r2
20001320:	0052      	lsls	r2, r2, #1
20001322:	2103      	movs	r1, #3
20001324:	4091      	lsls	r1, r2
20001326:	000a      	movs	r2, r1
20001328:	43d2      	mvns	r2, r2
2000132a:	401a      	ands	r2, r3
2000132c:	687b      	ldr	r3, [r7, #4]
2000132e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20001330:	687b      	ldr	r3, [r7, #4]
20001332:	68da      	ldr	r2, [r3, #12]
20001334:	683b      	ldr	r3, [r7, #0]
20001336:	79db      	ldrb	r3, [r3, #7]
20001338:	0019      	movs	r1, r3
2000133a:	697b      	ldr	r3, [r7, #20]
2000133c:	005b      	lsls	r3, r3, #1
2000133e:	4099      	lsls	r1, r3
20001340:	000b      	movs	r3, r1
20001342:	431a      	orrs	r2, r3
20001344:	687b      	ldr	r3, [r7, #4]
20001346:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20001348:	697b      	ldr	r3, [r7, #20]
2000134a:	3301      	adds	r3, #1
2000134c:	617b      	str	r3, [r7, #20]
2000134e:	697b      	ldr	r3, [r7, #20]
20001350:	2b0f      	cmp	r3, #15
20001352:	d985      	bls.n	20001260 <GPIO_Init+0x1c>
    }
  }
}
20001354:	46c0      	nop			; (mov r8, r8)
20001356:	46bd      	mov	sp, r7
20001358:	b006      	add	sp, #24
2000135a:	bd80      	pop	{r7, pc}

2000135c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
2000135c:	b580      	push	{r7, lr}
2000135e:	b082      	sub	sp, #8
20001360:	af00      	add	r7, sp, #0
20001362:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
20001364:	687b      	ldr	r3, [r7, #4]
20001366:	4a09      	ldr	r2, [pc, #36]	; (2000138c <GPIO_StructInit+0x30>)
20001368:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
2000136a:	687b      	ldr	r3, [r7, #4]
2000136c:	2200      	movs	r2, #0
2000136e:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20001370:	687b      	ldr	r3, [r7, #4]
20001372:	2200      	movs	r2, #0
20001374:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
20001376:	687b      	ldr	r3, [r7, #4]
20001378:	2200      	movs	r2, #0
2000137a:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
2000137c:	687b      	ldr	r3, [r7, #4]
2000137e:	2200      	movs	r2, #0
20001380:	71da      	strb	r2, [r3, #7]
}
20001382:	46c0      	nop			; (mov r8, r8)
20001384:	46bd      	mov	sp, r7
20001386:	b002      	add	sp, #8
20001388:	bd80      	pop	{r7, pc}
2000138a:	46c0      	nop			; (mov r8, r8)
2000138c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001390 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001390:	b580      	push	{r7, lr}
20001392:	b084      	sub	sp, #16
20001394:	af00      	add	r7, sp, #0
20001396:	6078      	str	r0, [r7, #4]
20001398:	000a      	movs	r2, r1
2000139a:	1cbb      	adds	r3, r7, #2
2000139c:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
2000139e:	2380      	movs	r3, #128	; 0x80
200013a0:	025b      	lsls	r3, r3, #9
200013a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
200013a4:	1cbb      	adds	r3, r7, #2
200013a6:	881a      	ldrh	r2, [r3, #0]
200013a8:	68fb      	ldr	r3, [r7, #12]
200013aa:	4313      	orrs	r3, r2
200013ac:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200013ae:	68fa      	ldr	r2, [r7, #12]
200013b0:	687b      	ldr	r3, [r7, #4]
200013b2:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
200013b4:	1cbb      	adds	r3, r7, #2
200013b6:	881a      	ldrh	r2, [r3, #0]
200013b8:	687b      	ldr	r3, [r7, #4]
200013ba:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200013bc:	68fa      	ldr	r2, [r7, #12]
200013be:	687b      	ldr	r3, [r7, #4]
200013c0:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200013c2:	687b      	ldr	r3, [r7, #4]
200013c4:	69db      	ldr	r3, [r3, #28]
200013c6:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200013c8:	687b      	ldr	r3, [r7, #4]
200013ca:	69db      	ldr	r3, [r3, #28]
200013cc:	60fb      	str	r3, [r7, #12]
}
200013ce:	46c0      	nop			; (mov r8, r8)
200013d0:	46bd      	mov	sp, r7
200013d2:	b004      	add	sp, #16
200013d4:	bd80      	pop	{r7, pc}

200013d6 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200013d6:	b580      	push	{r7, lr}
200013d8:	b084      	sub	sp, #16
200013da:	af00      	add	r7, sp, #0
200013dc:	6078      	str	r0, [r7, #4]
200013de:	000a      	movs	r2, r1
200013e0:	1cbb      	adds	r3, r7, #2
200013e2:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
200013e4:	230f      	movs	r3, #15
200013e6:	18fb      	adds	r3, r7, r3
200013e8:	2200      	movs	r2, #0
200013ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
200013ec:	687b      	ldr	r3, [r7, #4]
200013ee:	691b      	ldr	r3, [r3, #16]
200013f0:	1cba      	adds	r2, r7, #2
200013f2:	8812      	ldrh	r2, [r2, #0]
200013f4:	4013      	ands	r3, r2
200013f6:	d004      	beq.n	20001402 <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
200013f8:	230f      	movs	r3, #15
200013fa:	18fb      	adds	r3, r7, r3
200013fc:	2201      	movs	r2, #1
200013fe:	701a      	strb	r2, [r3, #0]
20001400:	e003      	b.n	2000140a <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20001402:	230f      	movs	r3, #15
20001404:	18fb      	adds	r3, r7, r3
20001406:	2200      	movs	r2, #0
20001408:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
2000140a:	230f      	movs	r3, #15
2000140c:	18fb      	adds	r3, r7, r3
2000140e:	781b      	ldrb	r3, [r3, #0]
}
20001410:	0018      	movs	r0, r3
20001412:	46bd      	mov	sp, r7
20001414:	b004      	add	sp, #16
20001416:	bd80      	pop	{r7, pc}

20001418 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20001418:	b580      	push	{r7, lr}
2000141a:	b082      	sub	sp, #8
2000141c:	af00      	add	r7, sp, #0
2000141e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20001420:	687b      	ldr	r3, [r7, #4]
20001422:	691b      	ldr	r3, [r3, #16]
20001424:	b29b      	uxth	r3, r3
}
20001426:	0018      	movs	r0, r3
20001428:	46bd      	mov	sp, r7
2000142a:	b002      	add	sp, #8
2000142c:	bd80      	pop	{r7, pc}

2000142e <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000142e:	b580      	push	{r7, lr}
20001430:	b084      	sub	sp, #16
20001432:	af00      	add	r7, sp, #0
20001434:	6078      	str	r0, [r7, #4]
20001436:	000a      	movs	r2, r1
20001438:	1cbb      	adds	r3, r7, #2
2000143a:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
2000143c:	230f      	movs	r3, #15
2000143e:	18fb      	adds	r3, r7, r3
20001440:	2200      	movs	r2, #0
20001442:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
20001444:	687b      	ldr	r3, [r7, #4]
20001446:	695b      	ldr	r3, [r3, #20]
20001448:	1cba      	adds	r2, r7, #2
2000144a:	8812      	ldrh	r2, [r2, #0]
2000144c:	4013      	ands	r3, r2
2000144e:	d004      	beq.n	2000145a <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001450:	230f      	movs	r3, #15
20001452:	18fb      	adds	r3, r7, r3
20001454:	2201      	movs	r2, #1
20001456:	701a      	strb	r2, [r3, #0]
20001458:	e003      	b.n	20001462 <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
2000145a:	230f      	movs	r3, #15
2000145c:	18fb      	adds	r3, r7, r3
2000145e:	2200      	movs	r2, #0
20001460:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20001462:	230f      	movs	r3, #15
20001464:	18fb      	adds	r3, r7, r3
20001466:	781b      	ldrb	r3, [r3, #0]
}
20001468:	0018      	movs	r0, r3
2000146a:	46bd      	mov	sp, r7
2000146c:	b004      	add	sp, #16
2000146e:	bd80      	pop	{r7, pc}

20001470 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20001470:	b580      	push	{r7, lr}
20001472:	b082      	sub	sp, #8
20001474:	af00      	add	r7, sp, #0
20001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
20001478:	687b      	ldr	r3, [r7, #4]
2000147a:	695b      	ldr	r3, [r3, #20]
2000147c:	b29b      	uxth	r3, r3
}
2000147e:	0018      	movs	r0, r3
20001480:	46bd      	mov	sp, r7
20001482:	b002      	add	sp, #8
20001484:	bd80      	pop	{r7, pc}

20001486 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001486:	b580      	push	{r7, lr}
20001488:	b082      	sub	sp, #8
2000148a:	af00      	add	r7, sp, #0
2000148c:	6078      	str	r0, [r7, #4]
2000148e:	000a      	movs	r2, r1
20001490:	1cbb      	adds	r3, r7, #2
20001492:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
20001494:	687b      	ldr	r3, [r7, #4]
20001496:	1cba      	adds	r2, r7, #2
20001498:	8812      	ldrh	r2, [r2, #0]
2000149a:	831a      	strh	r2, [r3, #24]
}
2000149c:	46c0      	nop			; (mov r8, r8)
2000149e:	46bd      	mov	sp, r7
200014a0:	b002      	add	sp, #8
200014a2:	bd80      	pop	{r7, pc}

200014a4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200014a4:	b580      	push	{r7, lr}
200014a6:	b082      	sub	sp, #8
200014a8:	af00      	add	r7, sp, #0
200014aa:	6078      	str	r0, [r7, #4]
200014ac:	000a      	movs	r2, r1
200014ae:	1cbb      	adds	r3, r7, #2
200014b0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
200014b2:	687b      	ldr	r3, [r7, #4]
200014b4:	1cba      	adds	r2, r7, #2
200014b6:	8812      	ldrh	r2, [r2, #0]
200014b8:	835a      	strh	r2, [r3, #26]
}
200014ba:	46c0      	nop			; (mov r8, r8)
200014bc:	46bd      	mov	sp, r7
200014be:	b002      	add	sp, #8
200014c0:	bd80      	pop	{r7, pc}

200014c2 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
200014c2:	b580      	push	{r7, lr}
200014c4:	b082      	sub	sp, #8
200014c6:	af00      	add	r7, sp, #0
200014c8:	6078      	str	r0, [r7, #4]
200014ca:	0008      	movs	r0, r1
200014cc:	0011      	movs	r1, r2
200014ce:	1cbb      	adds	r3, r7, #2
200014d0:	1c02      	adds	r2, r0, #0
200014d2:	801a      	strh	r2, [r3, #0]
200014d4:	1c7b      	adds	r3, r7, #1
200014d6:	1c0a      	adds	r2, r1, #0
200014d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
200014da:	1c7b      	adds	r3, r7, #1
200014dc:	781b      	ldrb	r3, [r3, #0]
200014de:	2b00      	cmp	r3, #0
200014e0:	d004      	beq.n	200014ec <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
200014e2:	687b      	ldr	r3, [r7, #4]
200014e4:	1cba      	adds	r2, r7, #2
200014e6:	8812      	ldrh	r2, [r2, #0]
200014e8:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
200014ea:	e003      	b.n	200014f4 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
200014ec:	687b      	ldr	r3, [r7, #4]
200014ee:	1cba      	adds	r2, r7, #2
200014f0:	8812      	ldrh	r2, [r2, #0]
200014f2:	835a      	strh	r2, [r3, #26]
}
200014f4:	46c0      	nop			; (mov r8, r8)
200014f6:	46bd      	mov	sp, r7
200014f8:	b002      	add	sp, #8
200014fa:	bd80      	pop	{r7, pc}

200014fc <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
200014fc:	b580      	push	{r7, lr}
200014fe:	b082      	sub	sp, #8
20001500:	af00      	add	r7, sp, #0
20001502:	6078      	str	r0, [r7, #4]
20001504:	000a      	movs	r2, r1
20001506:	1cbb      	adds	r3, r7, #2
20001508:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
2000150a:	1cbb      	adds	r3, r7, #2
2000150c:	881a      	ldrh	r2, [r3, #0]
2000150e:	687b      	ldr	r3, [r7, #4]
20001510:	615a      	str	r2, [r3, #20]
}
20001512:	46c0      	nop			; (mov r8, r8)
20001514:	46bd      	mov	sp, r7
20001516:	b002      	add	sp, #8
20001518:	bd80      	pop	{r7, pc}

2000151a <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000151a:	b580      	push	{r7, lr}
2000151c:	b082      	sub	sp, #8
2000151e:	af00      	add	r7, sp, #0
20001520:	6078      	str	r0, [r7, #4]
20001522:	000a      	movs	r2, r1
20001524:	1cbb      	adds	r3, r7, #2
20001526:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20001528:	687b      	ldr	r3, [r7, #4]
2000152a:	695a      	ldr	r2, [r3, #20]
2000152c:	1cbb      	adds	r3, r7, #2
2000152e:	881b      	ldrh	r3, [r3, #0]
20001530:	405a      	eors	r2, r3
20001532:	687b      	ldr	r3, [r7, #4]
20001534:	615a      	str	r2, [r3, #20]
}
20001536:	46c0      	nop			; (mov r8, r8)
20001538:	46bd      	mov	sp, r7
2000153a:	b002      	add	sp, #8
2000153c:	bd80      	pop	{r7, pc}

2000153e <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
2000153e:	b580      	push	{r7, lr}
20001540:	b084      	sub	sp, #16
20001542:	af00      	add	r7, sp, #0
20001544:	6078      	str	r0, [r7, #4]
20001546:	0008      	movs	r0, r1
20001548:	0011      	movs	r1, r2
2000154a:	1cbb      	adds	r3, r7, #2
2000154c:	1c02      	adds	r2, r0, #0
2000154e:	801a      	strh	r2, [r3, #0]
20001550:	1c7b      	adds	r3, r7, #1
20001552:	1c0a      	adds	r2, r1, #0
20001554:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
20001556:	2300      	movs	r3, #0
20001558:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
2000155a:	2300      	movs	r3, #0
2000155c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
2000155e:	1c7b      	adds	r3, r7, #1
20001560:	781a      	ldrb	r2, [r3, #0]
20001562:	1cbb      	adds	r3, r7, #2
20001564:	881b      	ldrh	r3, [r3, #0]
20001566:	2107      	movs	r1, #7
20001568:	400b      	ands	r3, r1
2000156a:	009b      	lsls	r3, r3, #2
2000156c:	409a      	lsls	r2, r3
2000156e:	0013      	movs	r3, r2
20001570:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20001572:	1cbb      	adds	r3, r7, #2
20001574:	881b      	ldrh	r3, [r3, #0]
20001576:	08db      	lsrs	r3, r3, #3
20001578:	b29b      	uxth	r3, r3
2000157a:	001a      	movs	r2, r3
2000157c:	687b      	ldr	r3, [r7, #4]
2000157e:	3208      	adds	r2, #8
20001580:	0092      	lsls	r2, r2, #2
20001582:	58d3      	ldr	r3, [r2, r3]
20001584:	1cba      	adds	r2, r7, #2
20001586:	8812      	ldrh	r2, [r2, #0]
20001588:	2107      	movs	r1, #7
2000158a:	400a      	ands	r2, r1
2000158c:	0092      	lsls	r2, r2, #2
2000158e:	210f      	movs	r1, #15
20001590:	4091      	lsls	r1, r2
20001592:	000a      	movs	r2, r1
20001594:	43d2      	mvns	r2, r2
20001596:	1cb9      	adds	r1, r7, #2
20001598:	8809      	ldrh	r1, [r1, #0]
2000159a:	08c9      	lsrs	r1, r1, #3
2000159c:	b289      	uxth	r1, r1
2000159e:	0008      	movs	r0, r1
200015a0:	401a      	ands	r2, r3
200015a2:	0011      	movs	r1, r2
200015a4:	687b      	ldr	r3, [r7, #4]
200015a6:	0002      	movs	r2, r0
200015a8:	3208      	adds	r2, #8
200015aa:	0092      	lsls	r2, r2, #2
200015ac:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
200015ae:	1cbb      	adds	r3, r7, #2
200015b0:	881b      	ldrh	r3, [r3, #0]
200015b2:	08db      	lsrs	r3, r3, #3
200015b4:	b29b      	uxth	r3, r3
200015b6:	001a      	movs	r2, r3
200015b8:	687b      	ldr	r3, [r7, #4]
200015ba:	3208      	adds	r2, #8
200015bc:	0092      	lsls	r2, r2, #2
200015be:	58d3      	ldr	r3, [r2, r3]
200015c0:	68fa      	ldr	r2, [r7, #12]
200015c2:	4313      	orrs	r3, r2
200015c4:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
200015c6:	1cbb      	adds	r3, r7, #2
200015c8:	881b      	ldrh	r3, [r3, #0]
200015ca:	08db      	lsrs	r3, r3, #3
200015cc:	b29b      	uxth	r3, r3
200015ce:	001a      	movs	r2, r3
200015d0:	687b      	ldr	r3, [r7, #4]
200015d2:	3208      	adds	r2, #8
200015d4:	0092      	lsls	r2, r2, #2
200015d6:	68b9      	ldr	r1, [r7, #8]
200015d8:	50d1      	str	r1, [r2, r3]
}
200015da:	46c0      	nop			; (mov r8, r8)
200015dc:	46bd      	mov	sp, r7
200015de:	b004      	add	sp, #16
200015e0:	bd80      	pop	{r7, pc}
200015e2:	46c0      	nop			; (mov r8, r8)

200015e4 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
200015e4:	b580      	push	{r7, lr}
200015e6:	b082      	sub	sp, #8
200015e8:	af00      	add	r7, sp, #0
200015ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
200015ec:	4b04      	ldr	r3, [pc, #16]	; (20001600 <NVIC_PriorityGroupConfig+0x1c>)
200015ee:	687a      	ldr	r2, [r7, #4]
200015f0:	4904      	ldr	r1, [pc, #16]	; (20001604 <NVIC_PriorityGroupConfig+0x20>)
200015f2:	430a      	orrs	r2, r1
200015f4:	60da      	str	r2, [r3, #12]
}
200015f6:	46c0      	nop			; (mov r8, r8)
200015f8:	46bd      	mov	sp, r7
200015fa:	b002      	add	sp, #8
200015fc:	bd80      	pop	{r7, pc}
200015fe:	46c0      	nop			; (mov r8, r8)
20001600:	e000ed00 	and	lr, r0, r0, lsl #26
20001604:	05fa0000 	ldrbeq	r0, [sl, #0]!

20001608 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
20001608:	b5b0      	push	{r4, r5, r7, lr}
2000160a:	b084      	sub	sp, #16
2000160c:	af00      	add	r7, sp, #0
2000160e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
20001610:	230f      	movs	r3, #15
20001612:	18fb      	adds	r3, r7, r3
20001614:	2200      	movs	r2, #0
20001616:	701a      	strb	r2, [r3, #0]
20001618:	230e      	movs	r3, #14
2000161a:	18fb      	adds	r3, r7, r3
2000161c:	2200      	movs	r2, #0
2000161e:	701a      	strb	r2, [r3, #0]
20001620:	230d      	movs	r3, #13
20001622:	18fb      	adds	r3, r7, r3
20001624:	220f      	movs	r2, #15
20001626:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
20001628:	687b      	ldr	r3, [r7, #4]
2000162a:	78db      	ldrb	r3, [r3, #3]
2000162c:	2b00      	cmp	r3, #0
2000162e:	d04d      	beq.n	200016cc <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
20001630:	4b31      	ldr	r3, [pc, #196]	; (200016f8 <NVIC_Init+0xf0>)
20001632:	68db      	ldr	r3, [r3, #12]
20001634:	43db      	mvns	r3, r3
20001636:	0a1b      	lsrs	r3, r3, #8
20001638:	b2da      	uxtb	r2, r3
2000163a:	200f      	movs	r0, #15
2000163c:	183b      	adds	r3, r7, r0
2000163e:	2107      	movs	r1, #7
20001640:	400a      	ands	r2, r1
20001642:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
20001644:	250e      	movs	r5, #14
20001646:	197b      	adds	r3, r7, r5
20001648:	183a      	adds	r2, r7, r0
2000164a:	7812      	ldrb	r2, [r2, #0]
2000164c:	2104      	movs	r1, #4
2000164e:	1a8a      	subs	r2, r1, r2
20001650:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
20001652:	240d      	movs	r4, #13
20001654:	193b      	adds	r3, r7, r4
20001656:	781a      	ldrb	r2, [r3, #0]
20001658:	0001      	movs	r1, r0
2000165a:	187b      	adds	r3, r7, r1
2000165c:	781b      	ldrb	r3, [r3, #0]
2000165e:	411a      	asrs	r2, r3
20001660:	193b      	adds	r3, r7, r4
20001662:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
20001664:	687b      	ldr	r3, [r7, #4]
20001666:	785b      	ldrb	r3, [r3, #1]
20001668:	001a      	movs	r2, r3
2000166a:	197b      	adds	r3, r7, r5
2000166c:	781b      	ldrb	r3, [r3, #0]
2000166e:	409a      	lsls	r2, r3
20001670:	0008      	movs	r0, r1
20001672:	187b      	adds	r3, r7, r1
20001674:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
20001676:	687b      	ldr	r3, [r7, #4]
20001678:	789b      	ldrb	r3, [r3, #2]
2000167a:	193a      	adds	r2, r7, r4
2000167c:	7812      	ldrb	r2, [r2, #0]
2000167e:	4013      	ands	r3, r2
20001680:	b2d9      	uxtb	r1, r3
20001682:	183b      	adds	r3, r7, r0
20001684:	183a      	adds	r2, r7, r0
20001686:	7812      	ldrb	r2, [r2, #0]
20001688:	430a      	orrs	r2, r1
2000168a:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
2000168c:	183b      	adds	r3, r7, r0
2000168e:	183a      	adds	r2, r7, r0
20001690:	7812      	ldrb	r2, [r2, #0]
20001692:	0112      	lsls	r2, r2, #4
20001694:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
20001696:	4a19      	ldr	r2, [pc, #100]	; (200016fc <NVIC_Init+0xf4>)
20001698:	687b      	ldr	r3, [r7, #4]
2000169a:	781b      	ldrb	r3, [r3, #0]
2000169c:	0019      	movs	r1, r3
2000169e:	23c0      	movs	r3, #192	; 0xc0
200016a0:	009b      	lsls	r3, r3, #2
200016a2:	1852      	adds	r2, r2, r1
200016a4:	18d3      	adds	r3, r2, r3
200016a6:	183a      	adds	r2, r7, r0
200016a8:	7812      	ldrb	r2, [r2, #0]
200016aa:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200016ac:	687b      	ldr	r3, [r7, #4]
200016ae:	781b      	ldrb	r3, [r3, #0]
200016b0:	001a      	movs	r2, r3
200016b2:	231f      	movs	r3, #31
200016b4:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200016b6:	4911      	ldr	r1, [pc, #68]	; (200016fc <NVIC_Init+0xf4>)
200016b8:	687a      	ldr	r2, [r7, #4]
200016ba:	7812      	ldrb	r2, [r2, #0]
200016bc:	0952      	lsrs	r2, r2, #5
200016be:	b2d2      	uxtb	r2, r2
200016c0:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200016c2:	2201      	movs	r2, #1
200016c4:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200016c6:	0083      	lsls	r3, r0, #2
200016c8:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
200016ca:	e010      	b.n	200016ee <NVIC_Init+0xe6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200016cc:	687b      	ldr	r3, [r7, #4]
200016ce:	781b      	ldrb	r3, [r3, #0]
200016d0:	001a      	movs	r2, r3
200016d2:	231f      	movs	r3, #31
200016d4:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200016d6:	4909      	ldr	r1, [pc, #36]	; (200016fc <NVIC_Init+0xf4>)
200016d8:	687a      	ldr	r2, [r7, #4]
200016da:	7812      	ldrb	r2, [r2, #0]
200016dc:	0952      	lsrs	r2, r2, #5
200016de:	b2d2      	uxtb	r2, r2
200016e0:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200016e2:	2201      	movs	r2, #1
200016e4:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200016e6:	0003      	movs	r3, r0
200016e8:	3320      	adds	r3, #32
200016ea:	009b      	lsls	r3, r3, #2
200016ec:	505a      	str	r2, [r3, r1]
}
200016ee:	46c0      	nop			; (mov r8, r8)
200016f0:	46bd      	mov	sp, r7
200016f2:	b004      	add	sp, #16
200016f4:	bdb0      	pop	{r4, r5, r7, pc}
200016f6:	46c0      	nop			; (mov r8, r8)
200016f8:	e000ed00 	and	lr, r0, r0, lsl #26
200016fc:	e000e100 	and	lr, r0, r0, lsl #2

20001700 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
20001700:	b580      	push	{r7, lr}
20001702:	b082      	sub	sp, #8
20001704:	af00      	add	r7, sp, #0
20001706:	6078      	str	r0, [r7, #4]
20001708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
2000170a:	683b      	ldr	r3, [r7, #0]
2000170c:	4a05      	ldr	r2, [pc, #20]	; (20001724 <NVIC_SetVectorTable+0x24>)
2000170e:	4013      	ands	r3, r2
20001710:	0019      	movs	r1, r3
20001712:	4b05      	ldr	r3, [pc, #20]	; (20001728 <NVIC_SetVectorTable+0x28>)
20001714:	687a      	ldr	r2, [r7, #4]
20001716:	430a      	orrs	r2, r1
20001718:	609a      	str	r2, [r3, #8]
}
2000171a:	46c0      	nop			; (mov r8, r8)
2000171c:	46bd      	mov	sp, r7
2000171e:	b002      	add	sp, #8
20001720:	bd80      	pop	{r7, pc}
20001722:	46c0      	nop			; (mov r8, r8)
20001724:	1fffff80 	svcne	0x00ffff80
20001728:	e000ed00 	and	lr, r0, r0, lsl #26

2000172c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
2000172c:	b580      	push	{r7, lr}
2000172e:	b082      	sub	sp, #8
20001730:	af00      	add	r7, sp, #0
20001732:	0002      	movs	r2, r0
20001734:	1dfb      	adds	r3, r7, #7
20001736:	701a      	strb	r2, [r3, #0]
20001738:	1dbb      	adds	r3, r7, #6
2000173a:	1c0a      	adds	r2, r1, #0
2000173c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
2000173e:	1dbb      	adds	r3, r7, #6
20001740:	781b      	ldrb	r3, [r3, #0]
20001742:	2b00      	cmp	r3, #0
20001744:	d007      	beq.n	20001756 <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
20001746:	4b0a      	ldr	r3, [pc, #40]	; (20001770 <NVIC_SystemLPConfig+0x44>)
20001748:	6919      	ldr	r1, [r3, #16]
2000174a:	1dfb      	adds	r3, r7, #7
2000174c:	781a      	ldrb	r2, [r3, #0]
2000174e:	4b08      	ldr	r3, [pc, #32]	; (20001770 <NVIC_SystemLPConfig+0x44>)
20001750:	430a      	orrs	r2, r1
20001752:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
20001754:	e007      	b.n	20001766 <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
20001756:	4b06      	ldr	r3, [pc, #24]	; (20001770 <NVIC_SystemLPConfig+0x44>)
20001758:	691a      	ldr	r2, [r3, #16]
2000175a:	1dfb      	adds	r3, r7, #7
2000175c:	781b      	ldrb	r3, [r3, #0]
2000175e:	43d9      	mvns	r1, r3
20001760:	4b03      	ldr	r3, [pc, #12]	; (20001770 <NVIC_SystemLPConfig+0x44>)
20001762:	400a      	ands	r2, r1
20001764:	611a      	str	r2, [r3, #16]
}
20001766:	46c0      	nop			; (mov r8, r8)
20001768:	46bd      	mov	sp, r7
2000176a:	b002      	add	sp, #8
2000176c:	bd80      	pop	{r7, pc}
2000176e:	46c0      	nop			; (mov r8, r8)
20001770:	e000ed00 	and	lr, r0, r0, lsl #26

20001774 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
20001774:	b580      	push	{r7, lr}
20001776:	b082      	sub	sp, #8
20001778:	af00      	add	r7, sp, #0
2000177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
2000177c:	687b      	ldr	r3, [r7, #4]
2000177e:	2b04      	cmp	r3, #4
20001780:	d106      	bne.n	20001790 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
20001782:	4b08      	ldr	r3, [pc, #32]	; (200017a4 <SysTick_CLKSourceConfig+0x30>)
20001784:	681a      	ldr	r2, [r3, #0]
20001786:	4b07      	ldr	r3, [pc, #28]	; (200017a4 <SysTick_CLKSourceConfig+0x30>)
20001788:	2104      	movs	r1, #4
2000178a:	430a      	orrs	r2, r1
2000178c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
2000178e:	e005      	b.n	2000179c <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
20001790:	4b04      	ldr	r3, [pc, #16]	; (200017a4 <SysTick_CLKSourceConfig+0x30>)
20001792:	681a      	ldr	r2, [r3, #0]
20001794:	4b03      	ldr	r3, [pc, #12]	; (200017a4 <SysTick_CLKSourceConfig+0x30>)
20001796:	2104      	movs	r1, #4
20001798:	438a      	bics	r2, r1
2000179a:	601a      	str	r2, [r3, #0]
}
2000179c:	46c0      	nop			; (mov r8, r8)
2000179e:	46bd      	mov	sp, r7
200017a0:	b002      	add	sp, #8
200017a2:	bd80      	pop	{r7, pc}
200017a4:	e000e010 	and	lr, r0, r0, lsl r0

200017a8 <bufferInit>:
#include "buffer.h"

//Nollställer bufferten
void bufferInit(FIFO *buffer) {
200017a8:	b580      	push	{r7, lr}
200017aa:	b082      	sub	sp, #8
200017ac:	af00      	add	r7, sp, #0
200017ae:	6078      	str	r0, [r7, #4]
    buffer->count = 0;
200017b0:	687b      	ldr	r3, [r7, #4]
200017b2:	2264      	movs	r2, #100	; 0x64
200017b4:	2100      	movs	r1, #0
200017b6:	5499      	strb	r1, [r3, r2]
    buffer->in = 0;
200017b8:	687b      	ldr	r3, [r7, #4]
200017ba:	2265      	movs	r2, #101	; 0x65
200017bc:	2100      	movs	r1, #0
200017be:	5499      	strb	r1, [r3, r2]
    buffer->out = 0;
200017c0:	687b      	ldr	r3, [r7, #4]
200017c2:	2266      	movs	r2, #102	; 0x66
200017c4:	2100      	movs	r1, #0
200017c6:	5499      	strb	r1, [r3, r2]
}
200017c8:	46c0      	nop			; (mov r8, r8)
200017ca:	46bd      	mov	sp, r7
200017cc:	b002      	add	sp, #8
200017ce:	bd80      	pop	{r7, pc}

200017d0 <bufferPut>:

//Lägger till ett elem i buffern.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferPut ( FIFO *buffer, uint8_t elem) {
200017d0:	b580      	push	{r7, lr}
200017d2:	b082      	sub	sp, #8
200017d4:	af00      	add	r7, sp, #0
200017d6:	6078      	str	r0, [r7, #4]
200017d8:	000a      	movs	r2, r1
200017da:	1cfb      	adds	r3, r7, #3
200017dc:	701a      	strb	r2, [r3, #0]
    //Kollar om bufferten är full.
    if (buffer->count == BUFFERSIZE){
200017de:	687b      	ldr	r3, [r7, #4]
200017e0:	2264      	movs	r2, #100	; 0x64
200017e2:	5c9b      	ldrb	r3, [r3, r2]
200017e4:	2b64      	cmp	r3, #100	; 0x64
200017e6:	d101      	bne.n	200017ec <bufferPut+0x1c>
        return 0;
200017e8:	2300      	movs	r3, #0
200017ea:	e01e      	b.n	2000182a <bufferPut+0x5a>
    }

    //Lägger elem i bufferten
    buffer->buff[buffer->in++] = elem;
200017ec:	687b      	ldr	r3, [r7, #4]
200017ee:	2265      	movs	r2, #101	; 0x65
200017f0:	5c9b      	ldrb	r3, [r3, r2]
200017f2:	1c5a      	adds	r2, r3, #1
200017f4:	b2d0      	uxtb	r0, r2
200017f6:	687a      	ldr	r2, [r7, #4]
200017f8:	2165      	movs	r1, #101	; 0x65
200017fa:	5450      	strb	r0, [r2, r1]
200017fc:	0019      	movs	r1, r3
200017fe:	687b      	ldr	r3, [r7, #4]
20001800:	1cfa      	adds	r2, r7, #3
20001802:	7812      	ldrb	r2, [r2, #0]
20001804:	545a      	strb	r2, [r3, r1]
    buffer->count++;
20001806:	687b      	ldr	r3, [r7, #4]
20001808:	2264      	movs	r2, #100	; 0x64
2000180a:	5c9b      	ldrb	r3, [r3, r2]
2000180c:	3301      	adds	r3, #1
2000180e:	b2d9      	uxtb	r1, r3
20001810:	687b      	ldr	r3, [r7, #4]
20001812:	2264      	movs	r2, #100	; 0x64
20001814:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->in == BUFFERSIZE)
20001816:	687b      	ldr	r3, [r7, #4]
20001818:	2265      	movs	r2, #101	; 0x65
2000181a:	5c9b      	ldrb	r3, [r3, r2]
2000181c:	2b64      	cmp	r3, #100	; 0x64
2000181e:	d103      	bne.n	20001828 <bufferPut+0x58>
        buffer->in = 0;
20001820:	687b      	ldr	r3, [r7, #4]
20001822:	2265      	movs	r2, #101	; 0x65
20001824:	2100      	movs	r1, #0
20001826:	5499      	strb	r1, [r3, r2]

    return 1;
20001828:	2301      	movs	r3, #1
}
2000182a:	0018      	movs	r0, r3
2000182c:	46bd      	mov	sp, r7
2000182e:	b002      	add	sp, #8
20001830:	bd80      	pop	{r7, pc}

20001832 <bufferGet>:

//Hämtar ett element från buffern till dest.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferGet ( FIFO *buffer, uint8_t *dest) {
20001832:	b580      	push	{r7, lr}
20001834:	b082      	sub	sp, #8
20001836:	af00      	add	r7, sp, #0
20001838:	6078      	str	r0, [r7, #4]
2000183a:	6039      	str	r1, [r7, #0]
    //Kollar om bufferten är tom
    if (!buffer->count){
2000183c:	687b      	ldr	r3, [r7, #4]
2000183e:	2264      	movs	r2, #100	; 0x64
20001840:	5c9b      	ldrb	r3, [r3, r2]
20001842:	2b00      	cmp	r3, #0
20001844:	d101      	bne.n	2000184a <bufferGet+0x18>
        return 0;
20001846:	2300      	movs	r3, #0
20001848:	e01e      	b.n	20001888 <bufferGet+0x56>
    }

    //Hämtar element ur buffern till dest
    *dest = buffer->buff[buffer->out++];
2000184a:	687b      	ldr	r3, [r7, #4]
2000184c:	2266      	movs	r2, #102	; 0x66
2000184e:	5c9b      	ldrb	r3, [r3, r2]
20001850:	1c5a      	adds	r2, r3, #1
20001852:	b2d0      	uxtb	r0, r2
20001854:	687a      	ldr	r2, [r7, #4]
20001856:	2166      	movs	r1, #102	; 0x66
20001858:	5450      	strb	r0, [r2, r1]
2000185a:	001a      	movs	r2, r3
2000185c:	687b      	ldr	r3, [r7, #4]
2000185e:	5c9a      	ldrb	r2, [r3, r2]
20001860:	683b      	ldr	r3, [r7, #0]
20001862:	701a      	strb	r2, [r3, #0]
    buffer->count--;
20001864:	687b      	ldr	r3, [r7, #4]
20001866:	2264      	movs	r2, #100	; 0x64
20001868:	5c9b      	ldrb	r3, [r3, r2]
2000186a:	3b01      	subs	r3, #1
2000186c:	b2d9      	uxtb	r1, r3
2000186e:	687b      	ldr	r3, [r7, #4]
20001870:	2264      	movs	r2, #100	; 0x64
20001872:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->out == BUFFERSIZE)
20001874:	687b      	ldr	r3, [r7, #4]
20001876:	2266      	movs	r2, #102	; 0x66
20001878:	5c9b      	ldrb	r3, [r3, r2]
2000187a:	2b64      	cmp	r3, #100	; 0x64
2000187c:	d103      	bne.n	20001886 <bufferGet+0x54>
        buffer->out = 0;
2000187e:	687b      	ldr	r3, [r7, #4]
20001880:	2266      	movs	r2, #102	; 0x66
20001882:	2100      	movs	r1, #0
20001884:	5499      	strb	r1, [r3, r2]

    return 1;
20001886:	2301      	movs	r3, #1
20001888:	0018      	movs	r0, r3
2000188a:	46bd      	mov	sp, r7
2000188c:	b002      	add	sp, #8
2000188e:	bd80      	pop	{r7, pc}

20001890 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
20001890:	b580      	push	{r7, lr}
20001892:	b082      	sub	sp, #8
20001894:	af00      	add	r7, sp, #0
20001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
20001898:	687b      	ldr	r3, [r7, #4]
2000189a:	4a41      	ldr	r2, [pc, #260]	; (200019a0 <USART_DeInit+0x110>)
2000189c:	4293      	cmp	r3, r2
2000189e:	d108      	bne.n	200018b2 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
200018a0:	2101      	movs	r1, #1
200018a2:	2010      	movs	r0, #16
200018a4:	f7ff f8f8 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
200018a8:	2100      	movs	r1, #0
200018aa:	2010      	movs	r0, #16
200018ac:	f7ff f8f4 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
200018b0:	e071      	b.n	20001996 <USART_DeInit+0x106>
  else if (USARTx == USART2)
200018b2:	687b      	ldr	r3, [r7, #4]
200018b4:	4a3b      	ldr	r2, [pc, #236]	; (200019a4 <USART_DeInit+0x114>)
200018b6:	4293      	cmp	r3, r2
200018b8:	d10c      	bne.n	200018d4 <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
200018ba:	2380      	movs	r3, #128	; 0x80
200018bc:	029b      	lsls	r3, r3, #10
200018be:	2101      	movs	r1, #1
200018c0:	0018      	movs	r0, r3
200018c2:	f7ff f8c9 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
200018c6:	2380      	movs	r3, #128	; 0x80
200018c8:	029b      	lsls	r3, r3, #10
200018ca:	2100      	movs	r1, #0
200018cc:	0018      	movs	r0, r3
200018ce:	f7ff f8c3 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
200018d2:	e060      	b.n	20001996 <USART_DeInit+0x106>
  else if (USARTx == USART3)
200018d4:	687b      	ldr	r3, [r7, #4]
200018d6:	4a34      	ldr	r2, [pc, #208]	; (200019a8 <USART_DeInit+0x118>)
200018d8:	4293      	cmp	r3, r2
200018da:	d10c      	bne.n	200018f6 <USART_DeInit+0x66>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
200018dc:	2380      	movs	r3, #128	; 0x80
200018de:	02db      	lsls	r3, r3, #11
200018e0:	2101      	movs	r1, #1
200018e2:	0018      	movs	r0, r3
200018e4:	f7ff f8b8 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
200018e8:	2380      	movs	r3, #128	; 0x80
200018ea:	02db      	lsls	r3, r3, #11
200018ec:	2100      	movs	r1, #0
200018ee:	0018      	movs	r0, r3
200018f0:	f7ff f8b2 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
200018f4:	e04f      	b.n	20001996 <USART_DeInit+0x106>
  else if (USARTx == UART4)
200018f6:	687b      	ldr	r3, [r7, #4]
200018f8:	4a2c      	ldr	r2, [pc, #176]	; (200019ac <USART_DeInit+0x11c>)
200018fa:	4293      	cmp	r3, r2
200018fc:	d10c      	bne.n	20001918 <USART_DeInit+0x88>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
200018fe:	2380      	movs	r3, #128	; 0x80
20001900:	031b      	lsls	r3, r3, #12
20001902:	2101      	movs	r1, #1
20001904:	0018      	movs	r0, r3
20001906:	f7ff f8a7 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
2000190a:	2380      	movs	r3, #128	; 0x80
2000190c:	031b      	lsls	r3, r3, #12
2000190e:	2100      	movs	r1, #0
20001910:	0018      	movs	r0, r3
20001912:	f7ff f8a1 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001916:	e03e      	b.n	20001996 <USART_DeInit+0x106>
  else if (USARTx == UART5)
20001918:	687b      	ldr	r3, [r7, #4]
2000191a:	4a25      	ldr	r2, [pc, #148]	; (200019b0 <USART_DeInit+0x120>)
2000191c:	4293      	cmp	r3, r2
2000191e:	d10c      	bne.n	2000193a <USART_DeInit+0xaa>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
20001920:	2380      	movs	r3, #128	; 0x80
20001922:	035b      	lsls	r3, r3, #13
20001924:	2101      	movs	r1, #1
20001926:	0018      	movs	r0, r3
20001928:	f7ff f896 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
2000192c:	2380      	movs	r3, #128	; 0x80
2000192e:	035b      	lsls	r3, r3, #13
20001930:	2100      	movs	r1, #0
20001932:	0018      	movs	r0, r3
20001934:	f7ff f890 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001938:	e02d      	b.n	20001996 <USART_DeInit+0x106>
  else if (USARTx == USART6)
2000193a:	687b      	ldr	r3, [r7, #4]
2000193c:	4a1d      	ldr	r2, [pc, #116]	; (200019b4 <USART_DeInit+0x124>)
2000193e:	4293      	cmp	r3, r2
20001940:	d108      	bne.n	20001954 <USART_DeInit+0xc4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
20001942:	2101      	movs	r1, #1
20001944:	2020      	movs	r0, #32
20001946:	f7ff f8a7 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
2000194a:	2100      	movs	r1, #0
2000194c:	2020      	movs	r0, #32
2000194e:	f7ff f8a3 	bl	20000a98 <RCC_APB2PeriphResetCmd>
}
20001952:	e020      	b.n	20001996 <USART_DeInit+0x106>
  else if (USARTx == UART7)
20001954:	687b      	ldr	r3, [r7, #4]
20001956:	4a18      	ldr	r2, [pc, #96]	; (200019b8 <USART_DeInit+0x128>)
20001958:	4293      	cmp	r3, r2
2000195a:	d10c      	bne.n	20001976 <USART_DeInit+0xe6>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
2000195c:	2380      	movs	r3, #128	; 0x80
2000195e:	05db      	lsls	r3, r3, #23
20001960:	2101      	movs	r1, #1
20001962:	0018      	movs	r0, r3
20001964:	f7ff f878 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
20001968:	2380      	movs	r3, #128	; 0x80
2000196a:	05db      	lsls	r3, r3, #23
2000196c:	2100      	movs	r1, #0
2000196e:	0018      	movs	r0, r3
20001970:	f7ff f872 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001974:	e00f      	b.n	20001996 <USART_DeInit+0x106>
    if (USARTx == UART8)
20001976:	687b      	ldr	r3, [r7, #4]
20001978:	4a10      	ldr	r2, [pc, #64]	; (200019bc <USART_DeInit+0x12c>)
2000197a:	4293      	cmp	r3, r2
2000197c:	d10b      	bne.n	20001996 <USART_DeInit+0x106>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
2000197e:	2380      	movs	r3, #128	; 0x80
20001980:	061b      	lsls	r3, r3, #24
20001982:	2101      	movs	r1, #1
20001984:	0018      	movs	r0, r3
20001986:	f7ff f867 	bl	20000a58 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
2000198a:	2380      	movs	r3, #128	; 0x80
2000198c:	061b      	lsls	r3, r3, #24
2000198e:	2100      	movs	r1, #0
20001990:	0018      	movs	r0, r3
20001992:	f7ff f861 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001996:	46c0      	nop			; (mov r8, r8)
20001998:	46bd      	mov	sp, r7
2000199a:	b002      	add	sp, #8
2000199c:	bd80      	pop	{r7, pc}
2000199e:	46c0      	nop			; (mov r8, r8)
200019a0:	40011000 	andmi	r1, r1, r0
200019a4:	40004400 	andmi	r4, r0, r0, lsl #8
200019a8:	40004800 	andmi	r4, r0, r0, lsl #16
200019ac:	40004c00 	andmi	r4, r0, r0, lsl #24
200019b0:	40005000 	andmi	r5, r0, r0
200019b4:	40011400 	andmi	r1, r1, r0, lsl #8
200019b8:	40007800 	andmi	r7, r0, r0, lsl #16
200019bc:	40007c00 	andmi	r7, r0, r0, lsl #24

200019c0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
200019c0:	b580      	push	{r7, lr}
200019c2:	b08a      	sub	sp, #40	; 0x28
200019c4:	af00      	add	r7, sp, #0
200019c6:	6078      	str	r0, [r7, #4]
200019c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
200019ca:	2300      	movs	r3, #0
200019cc:	627b      	str	r3, [r7, #36]	; 0x24
200019ce:	2300      	movs	r3, #0
200019d0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
200019d2:	2300      	movs	r3, #0
200019d4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
200019d6:	2300      	movs	r3, #0
200019d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
200019da:	687b      	ldr	r3, [r7, #4]
200019dc:	8a1b      	ldrh	r3, [r3, #16]
200019de:	b29b      	uxth	r3, r3
200019e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
200019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200019e4:	4a56      	ldr	r2, [pc, #344]	; (20001b40 <USART_Init+0x180>)
200019e6:	4013      	ands	r3, r2
200019e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
200019ea:	683b      	ldr	r3, [r7, #0]
200019ec:	88db      	ldrh	r3, [r3, #6]
200019ee:	001a      	movs	r2, r3
200019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200019f2:	4313      	orrs	r3, r2
200019f4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
200019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200019f8:	b29a      	uxth	r2, r3
200019fa:	687b      	ldr	r3, [r7, #4]
200019fc:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
200019fe:	687b      	ldr	r3, [r7, #4]
20001a00:	899b      	ldrh	r3, [r3, #12]
20001a02:	b29b      	uxth	r3, r3
20001a04:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
20001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a08:	4a4e      	ldr	r2, [pc, #312]	; (20001b44 <USART_Init+0x184>)
20001a0a:	4013      	ands	r3, r2
20001a0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
20001a0e:	683b      	ldr	r3, [r7, #0]
20001a10:	889a      	ldrh	r2, [r3, #4]
20001a12:	683b      	ldr	r3, [r7, #0]
20001a14:	891b      	ldrh	r3, [r3, #8]
20001a16:	4313      	orrs	r3, r2
20001a18:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
20001a1a:	683b      	ldr	r3, [r7, #0]
20001a1c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
20001a1e:	4313      	orrs	r3, r2
20001a20:	b29b      	uxth	r3, r3
20001a22:	001a      	movs	r2, r3
20001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a26:	4313      	orrs	r3, r2
20001a28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
20001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a2c:	b29a      	uxth	r2, r3
20001a2e:	687b      	ldr	r3, [r7, #4]
20001a30:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
20001a32:	687b      	ldr	r3, [r7, #4]
20001a34:	8a9b      	ldrh	r3, [r3, #20]
20001a36:	b29b      	uxth	r3, r3
20001a38:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
20001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a3c:	4a42      	ldr	r2, [pc, #264]	; (20001b48 <USART_Init+0x188>)
20001a3e:	4013      	ands	r3, r2
20001a40:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
20001a42:	683b      	ldr	r3, [r7, #0]
20001a44:	899b      	ldrh	r3, [r3, #12]
20001a46:	001a      	movs	r2, r3
20001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a4a:	4313      	orrs	r3, r2
20001a4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
20001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a50:	b29a      	uxth	r2, r3
20001a52:	687b      	ldr	r3, [r7, #4]
20001a54:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
20001a56:	2308      	movs	r3, #8
20001a58:	18fb      	adds	r3, r7, r3
20001a5a:	0018      	movs	r0, r3
20001a5c:	f7fe fd4c 	bl	200004f8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
20001a60:	687b      	ldr	r3, [r7, #4]
20001a62:	4a3a      	ldr	r2, [pc, #232]	; (20001b4c <USART_Init+0x18c>)
20001a64:	4293      	cmp	r3, r2
20001a66:	d003      	beq.n	20001a70 <USART_Init+0xb0>
20001a68:	687b      	ldr	r3, [r7, #4]
20001a6a:	4a39      	ldr	r2, [pc, #228]	; (20001b50 <USART_Init+0x190>)
20001a6c:	4293      	cmp	r3, r2
20001a6e:	d104      	bne.n	20001a7a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
20001a70:	2308      	movs	r3, #8
20001a72:	18fb      	adds	r3, r7, r3
20001a74:	68db      	ldr	r3, [r3, #12]
20001a76:	623b      	str	r3, [r7, #32]
20001a78:	e003      	b.n	20001a82 <USART_Init+0xc2>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
20001a7a:	2308      	movs	r3, #8
20001a7c:	18fb      	adds	r3, r7, r3
20001a7e:	689b      	ldr	r3, [r3, #8]
20001a80:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
20001a82:	687b      	ldr	r3, [r7, #4]
20001a84:	899b      	ldrh	r3, [r3, #12]
20001a86:	b29b      	uxth	r3, r3
20001a88:	b21b      	sxth	r3, r3
20001a8a:	2b00      	cmp	r3, #0
20001a8c:	da0f      	bge.n	20001aae <USART_Init+0xee>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
20001a8e:	6a3a      	ldr	r2, [r7, #32]
20001a90:	0013      	movs	r3, r2
20001a92:	009b      	lsls	r3, r3, #2
20001a94:	189b      	adds	r3, r3, r2
20001a96:	009a      	lsls	r2, r3, #2
20001a98:	189a      	adds	r2, r3, r2
20001a9a:	683b      	ldr	r3, [r7, #0]
20001a9c:	681b      	ldr	r3, [r3, #0]
20001a9e:	005b      	lsls	r3, r3, #1
20001aa0:	0019      	movs	r1, r3
20001aa2:	0010      	movs	r0, r2
20001aa4:	f000 fdf2 	bl	2000268c <__udivsi3>
20001aa8:	0003      	movs	r3, r0
20001aaa:	61fb      	str	r3, [r7, #28]
20001aac:	e00e      	b.n	20001acc <USART_Init+0x10c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
20001aae:	6a3a      	ldr	r2, [r7, #32]
20001ab0:	0013      	movs	r3, r2
20001ab2:	009b      	lsls	r3, r3, #2
20001ab4:	189b      	adds	r3, r3, r2
20001ab6:	009a      	lsls	r2, r3, #2
20001ab8:	189a      	adds	r2, r3, r2
20001aba:	683b      	ldr	r3, [r7, #0]
20001abc:	681b      	ldr	r3, [r3, #0]
20001abe:	009b      	lsls	r3, r3, #2
20001ac0:	0019      	movs	r1, r3
20001ac2:	0010      	movs	r0, r2
20001ac4:	f000 fde2 	bl	2000268c <__udivsi3>
20001ac8:	0003      	movs	r3, r0
20001aca:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
20001acc:	69fb      	ldr	r3, [r7, #28]
20001ace:	2164      	movs	r1, #100	; 0x64
20001ad0:	0018      	movs	r0, r3
20001ad2:	f000 fddb 	bl	2000268c <__udivsi3>
20001ad6:	0003      	movs	r3, r0
20001ad8:	011b      	lsls	r3, r3, #4
20001ada:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
20001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ade:	091b      	lsrs	r3, r3, #4
20001ae0:	2264      	movs	r2, #100	; 0x64
20001ae2:	4353      	muls	r3, r2
20001ae4:	69fa      	ldr	r2, [r7, #28]
20001ae6:	1ad3      	subs	r3, r2, r3
20001ae8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
20001aea:	687b      	ldr	r3, [r7, #4]
20001aec:	899b      	ldrh	r3, [r3, #12]
20001aee:	b29b      	uxth	r3, r3
20001af0:	b21b      	sxth	r3, r3
20001af2:	2b00      	cmp	r3, #0
20001af4:	da0e      	bge.n	20001b14 <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
20001af6:	69bb      	ldr	r3, [r7, #24]
20001af8:	00db      	lsls	r3, r3, #3
20001afa:	3332      	adds	r3, #50	; 0x32
20001afc:	2164      	movs	r1, #100	; 0x64
20001afe:	0018      	movs	r0, r3
20001b00:	f000 fdc4 	bl	2000268c <__udivsi3>
20001b04:	0003      	movs	r3, r0
20001b06:	001a      	movs	r2, r3
20001b08:	2307      	movs	r3, #7
20001b0a:	4013      	ands	r3, r2
20001b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001b0e:	4313      	orrs	r3, r2
20001b10:	627b      	str	r3, [r7, #36]	; 0x24
20001b12:	e00d      	b.n	20001b30 <USART_Init+0x170>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
20001b14:	69bb      	ldr	r3, [r7, #24]
20001b16:	011b      	lsls	r3, r3, #4
20001b18:	3332      	adds	r3, #50	; 0x32
20001b1a:	2164      	movs	r1, #100	; 0x64
20001b1c:	0018      	movs	r0, r3
20001b1e:	f000 fdb5 	bl	2000268c <__udivsi3>
20001b22:	0003      	movs	r3, r0
20001b24:	001a      	movs	r2, r3
20001b26:	230f      	movs	r3, #15
20001b28:	4013      	ands	r3, r2
20001b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001b2c:	4313      	orrs	r3, r2
20001b2e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
20001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b32:	b29a      	uxth	r2, r3
20001b34:	687b      	ldr	r3, [r7, #4]
20001b36:	811a      	strh	r2, [r3, #8]
}
20001b38:	46c0      	nop			; (mov r8, r8)
20001b3a:	46bd      	mov	sp, r7
20001b3c:	b00a      	add	sp, #40	; 0x28
20001b3e:	bd80      	pop	{r7, pc}
20001b40:	ffffcfff 			; <UNDEFINED> instruction: 0xffffcfff
20001b44:	ffffe9f3 			; <UNDEFINED> instruction: 0xffffe9f3
20001b48:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
20001b4c:	40011000 	andmi	r1, r1, r0
20001b50:	40011400 	andmi	r1, r1, r0, lsl #8

20001b54 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
20001b54:	b580      	push	{r7, lr}
20001b56:	b082      	sub	sp, #8
20001b58:	af00      	add	r7, sp, #0
20001b5a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
20001b5c:	687b      	ldr	r3, [r7, #4]
20001b5e:	2296      	movs	r2, #150	; 0x96
20001b60:	0192      	lsls	r2, r2, #6
20001b62:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
20001b64:	687b      	ldr	r3, [r7, #4]
20001b66:	2200      	movs	r2, #0
20001b68:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
20001b6a:	687b      	ldr	r3, [r7, #4]
20001b6c:	2200      	movs	r2, #0
20001b6e:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
20001b70:	687b      	ldr	r3, [r7, #4]
20001b72:	2200      	movs	r2, #0
20001b74:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
20001b76:	687b      	ldr	r3, [r7, #4]
20001b78:	220c      	movs	r2, #12
20001b7a:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
20001b7c:	687b      	ldr	r3, [r7, #4]
20001b7e:	2200      	movs	r2, #0
20001b80:	819a      	strh	r2, [r3, #12]
}
20001b82:	46c0      	nop			; (mov r8, r8)
20001b84:	46bd      	mov	sp, r7
20001b86:	b002      	add	sp, #8
20001b88:	bd80      	pop	{r7, pc}

20001b8a <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20001b8a:	b580      	push	{r7, lr}
20001b8c:	b084      	sub	sp, #16
20001b8e:	af00      	add	r7, sp, #0
20001b90:	6078      	str	r0, [r7, #4]
20001b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
20001b94:	2300      	movs	r3, #0
20001b96:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
20001b98:	687b      	ldr	r3, [r7, #4]
20001b9a:	8a1b      	ldrh	r3, [r3, #16]
20001b9c:	b29b      	uxth	r3, r3
20001b9e:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
20001ba0:	68fb      	ldr	r3, [r7, #12]
20001ba2:	4a0e      	ldr	r2, [pc, #56]	; (20001bdc <USART_ClockInit+0x52>)
20001ba4:	4013      	ands	r3, r2
20001ba6:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20001ba8:	683b      	ldr	r3, [r7, #0]
20001baa:	881a      	ldrh	r2, [r3, #0]
20001bac:	683b      	ldr	r3, [r7, #0]
20001bae:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
20001bb0:	4313      	orrs	r3, r2
20001bb2:	b29a      	uxth	r2, r3
20001bb4:	683b      	ldr	r3, [r7, #0]
20001bb6:	889b      	ldrh	r3, [r3, #4]
20001bb8:	4313      	orrs	r3, r2
20001bba:	b29a      	uxth	r2, r3
20001bbc:	683b      	ldr	r3, [r7, #0]
20001bbe:	88db      	ldrh	r3, [r3, #6]
20001bc0:	4313      	orrs	r3, r2
20001bc2:	b29b      	uxth	r3, r3
20001bc4:	001a      	movs	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20001bc6:	68fb      	ldr	r3, [r7, #12]
20001bc8:	4313      	orrs	r3, r2
20001bca:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
20001bcc:	68fb      	ldr	r3, [r7, #12]
20001bce:	b29a      	uxth	r2, r3
20001bd0:	687b      	ldr	r3, [r7, #4]
20001bd2:	821a      	strh	r2, [r3, #16]
}
20001bd4:	46c0      	nop			; (mov r8, r8)
20001bd6:	46bd      	mov	sp, r7
20001bd8:	b004      	add	sp, #16
20001bda:	bd80      	pop	{r7, pc}
20001bdc:	fffff0ff 			; <UNDEFINED> instruction: 0xfffff0ff

20001be0 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20001be0:	b580      	push	{r7, lr}
20001be2:	b082      	sub	sp, #8
20001be4:	af00      	add	r7, sp, #0
20001be6:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
20001be8:	687b      	ldr	r3, [r7, #4]
20001bea:	2200      	movs	r2, #0
20001bec:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
20001bee:	687b      	ldr	r3, [r7, #4]
20001bf0:	2200      	movs	r2, #0
20001bf2:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
20001bf4:	687b      	ldr	r3, [r7, #4]
20001bf6:	2200      	movs	r2, #0
20001bf8:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
20001bfa:	687b      	ldr	r3, [r7, #4]
20001bfc:	2200      	movs	r2, #0
20001bfe:	80da      	strh	r2, [r3, #6]
}
20001c00:	46c0      	nop			; (mov r8, r8)
20001c02:	46bd      	mov	sp, r7
20001c04:	b002      	add	sp, #8
20001c06:	bd80      	pop	{r7, pc}

20001c08 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001c08:	b580      	push	{r7, lr}
20001c0a:	b082      	sub	sp, #8
20001c0c:	af00      	add	r7, sp, #0
20001c0e:	6078      	str	r0, [r7, #4]
20001c10:	000a      	movs	r2, r1
20001c12:	1cfb      	adds	r3, r7, #3
20001c14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001c16:	1cfb      	adds	r3, r7, #3
20001c18:	781b      	ldrb	r3, [r3, #0]
20001c1a:	2b00      	cmp	r3, #0
20001c1c:	d009      	beq.n	20001c32 <USART_Cmd+0x2a>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
20001c1e:	687b      	ldr	r3, [r7, #4]
20001c20:	899b      	ldrh	r3, [r3, #12]
20001c22:	b29b      	uxth	r3, r3
20001c24:	2280      	movs	r2, #128	; 0x80
20001c26:	0192      	lsls	r2, r2, #6
20001c28:	4313      	orrs	r3, r2
20001c2a:	b29a      	uxth	r2, r3
20001c2c:	687b      	ldr	r3, [r7, #4]
20001c2e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
20001c30:	e007      	b.n	20001c42 <USART_Cmd+0x3a>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
20001c32:	687b      	ldr	r3, [r7, #4]
20001c34:	899b      	ldrh	r3, [r3, #12]
20001c36:	b29b      	uxth	r3, r3
20001c38:	4a04      	ldr	r2, [pc, #16]	; (20001c4c <USART_Cmd+0x44>)
20001c3a:	4013      	ands	r3, r2
20001c3c:	b29a      	uxth	r2, r3
20001c3e:	687b      	ldr	r3, [r7, #4]
20001c40:	819a      	strh	r2, [r3, #12]
}
20001c42:	46c0      	nop			; (mov r8, r8)
20001c44:	46bd      	mov	sp, r7
20001c46:	b002      	add	sp, #8
20001c48:	bd80      	pop	{r7, pc}
20001c4a:	46c0      	nop			; (mov r8, r8)
20001c4c:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

20001c50 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
20001c50:	b580      	push	{r7, lr}
20001c52:	b082      	sub	sp, #8
20001c54:	af00      	add	r7, sp, #0
20001c56:	6078      	str	r0, [r7, #4]
20001c58:	000a      	movs	r2, r1
20001c5a:	1cfb      	adds	r3, r7, #3
20001c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
20001c5e:	687b      	ldr	r3, [r7, #4]
20001c60:	8b1b      	ldrh	r3, [r3, #24]
20001c62:	b29b      	uxth	r3, r3
20001c64:	22ff      	movs	r2, #255	; 0xff
20001c66:	4393      	bics	r3, r2
20001c68:	b29a      	uxth	r2, r3
20001c6a:	687b      	ldr	r3, [r7, #4]
20001c6c:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
20001c6e:	687b      	ldr	r3, [r7, #4]
20001c70:	8b1b      	ldrh	r3, [r3, #24]
20001c72:	b29a      	uxth	r2, r3
20001c74:	1cfb      	adds	r3, r7, #3
20001c76:	781b      	ldrb	r3, [r3, #0]
20001c78:	b29b      	uxth	r3, r3
20001c7a:	4313      	orrs	r3, r2
20001c7c:	b29a      	uxth	r2, r3
20001c7e:	687b      	ldr	r3, [r7, #4]
20001c80:	831a      	strh	r2, [r3, #24]
}
20001c82:	46c0      	nop			; (mov r8, r8)
20001c84:	46bd      	mov	sp, r7
20001c86:	b002      	add	sp, #8
20001c88:	bd80      	pop	{r7, pc}

20001c8a <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001c8a:	b580      	push	{r7, lr}
20001c8c:	b082      	sub	sp, #8
20001c8e:	af00      	add	r7, sp, #0
20001c90:	6078      	str	r0, [r7, #4]
20001c92:	000a      	movs	r2, r1
20001c94:	1cfb      	adds	r3, r7, #3
20001c96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001c98:	1cfb      	adds	r3, r7, #3
20001c9a:	781b      	ldrb	r3, [r3, #0]
20001c9c:	2b00      	cmp	r3, #0
20001c9e:	d008      	beq.n	20001cb2 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
20001ca0:	687b      	ldr	r3, [r7, #4]
20001ca2:	899b      	ldrh	r3, [r3, #12]
20001ca4:	b29b      	uxth	r3, r3
20001ca6:	4a09      	ldr	r2, [pc, #36]	; (20001ccc <USART_OverSampling8Cmd+0x42>)
20001ca8:	4313      	orrs	r3, r2
20001caa:	b29a      	uxth	r2, r3
20001cac:	687b      	ldr	r3, [r7, #4]
20001cae:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
20001cb0:	e007      	b.n	20001cc2 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
20001cb2:	687b      	ldr	r3, [r7, #4]
20001cb4:	899b      	ldrh	r3, [r3, #12]
20001cb6:	b29b      	uxth	r3, r3
20001cb8:	045b      	lsls	r3, r3, #17
20001cba:	0c5b      	lsrs	r3, r3, #17
20001cbc:	b29a      	uxth	r2, r3
20001cbe:	687b      	ldr	r3, [r7, #4]
20001cc0:	819a      	strh	r2, [r3, #12]
}  
20001cc2:	46c0      	nop			; (mov r8, r8)
20001cc4:	46bd      	mov	sp, r7
20001cc6:	b002      	add	sp, #8
20001cc8:	bd80      	pop	{r7, pc}
20001cca:	46c0      	nop			; (mov r8, r8)
20001ccc:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000

20001cd0 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001cd0:	b580      	push	{r7, lr}
20001cd2:	b082      	sub	sp, #8
20001cd4:	af00      	add	r7, sp, #0
20001cd6:	6078      	str	r0, [r7, #4]
20001cd8:	000a      	movs	r2, r1
20001cda:	1cfb      	adds	r3, r7, #3
20001cdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001cde:	1cfb      	adds	r3, r7, #3
20001ce0:	781b      	ldrb	r3, [r3, #0]
20001ce2:	2b00      	cmp	r3, #0
20001ce4:	d009      	beq.n	20001cfa <USART_OneBitMethodCmd+0x2a>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
20001ce6:	687b      	ldr	r3, [r7, #4]
20001ce8:	8a9b      	ldrh	r3, [r3, #20]
20001cea:	b29b      	uxth	r3, r3
20001cec:	2280      	movs	r2, #128	; 0x80
20001cee:	0112      	lsls	r2, r2, #4
20001cf0:	4313      	orrs	r3, r2
20001cf2:	b29a      	uxth	r2, r3
20001cf4:	687b      	ldr	r3, [r7, #4]
20001cf6:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
  }
}
20001cf8:	e007      	b.n	20001d0a <USART_OneBitMethodCmd+0x3a>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
20001cfa:	687b      	ldr	r3, [r7, #4]
20001cfc:	8a9b      	ldrh	r3, [r3, #20]
20001cfe:	b29b      	uxth	r3, r3
20001d00:	4a04      	ldr	r2, [pc, #16]	; (20001d14 <USART_OneBitMethodCmd+0x44>)
20001d02:	4013      	ands	r3, r2
20001d04:	b29a      	uxth	r2, r3
20001d06:	687b      	ldr	r3, [r7, #4]
20001d08:	829a      	strh	r2, [r3, #20]
}
20001d0a:	46c0      	nop			; (mov r8, r8)
20001d0c:	46bd      	mov	sp, r7
20001d0e:	b002      	add	sp, #8
20001d10:	bd80      	pop	{r7, pc}
20001d12:	46c0      	nop			; (mov r8, r8)
20001d14:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20001d18 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
20001d18:	b580      	push	{r7, lr}
20001d1a:	b082      	sub	sp, #8
20001d1c:	af00      	add	r7, sp, #0
20001d1e:	6078      	str	r0, [r7, #4]
20001d20:	000a      	movs	r2, r1
20001d22:	1cbb      	adds	r3, r7, #2
20001d24:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
20001d26:	1cbb      	adds	r3, r7, #2
20001d28:	881b      	ldrh	r3, [r3, #0]
20001d2a:	05db      	lsls	r3, r3, #23
20001d2c:	0ddb      	lsrs	r3, r3, #23
20001d2e:	b29a      	uxth	r2, r3
20001d30:	687b      	ldr	r3, [r7, #4]
20001d32:	809a      	strh	r2, [r3, #4]
}
20001d34:	46c0      	nop			; (mov r8, r8)
20001d36:	46bd      	mov	sp, r7
20001d38:	b002      	add	sp, #8
20001d3a:	bd80      	pop	{r7, pc}

20001d3c <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
20001d3c:	b580      	push	{r7, lr}
20001d3e:	b082      	sub	sp, #8
20001d40:	af00      	add	r7, sp, #0
20001d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
20001d44:	687b      	ldr	r3, [r7, #4]
20001d46:	889b      	ldrh	r3, [r3, #4]
20001d48:	b29b      	uxth	r3, r3
20001d4a:	05db      	lsls	r3, r3, #23
20001d4c:	0ddb      	lsrs	r3, r3, #23
20001d4e:	b29b      	uxth	r3, r3
}
20001d50:	0018      	movs	r0, r3
20001d52:	46bd      	mov	sp, r7
20001d54:	b002      	add	sp, #8
20001d56:	bd80      	pop	{r7, pc}

20001d58 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
20001d58:	b580      	push	{r7, lr}
20001d5a:	b082      	sub	sp, #8
20001d5c:	af00      	add	r7, sp, #0
20001d5e:	6078      	str	r0, [r7, #4]
20001d60:	000a      	movs	r2, r1
20001d62:	1cfb      	adds	r3, r7, #3
20001d64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
20001d66:	687b      	ldr	r3, [r7, #4]
20001d68:	8a1b      	ldrh	r3, [r3, #16]
20001d6a:	b29b      	uxth	r3, r3
20001d6c:	220f      	movs	r2, #15
20001d6e:	4393      	bics	r3, r2
20001d70:	b29a      	uxth	r2, r3
20001d72:	687b      	ldr	r3, [r7, #4]
20001d74:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
20001d76:	687b      	ldr	r3, [r7, #4]
20001d78:	8a1b      	ldrh	r3, [r3, #16]
20001d7a:	b29a      	uxth	r2, r3
20001d7c:	1cfb      	adds	r3, r7, #3
20001d7e:	781b      	ldrb	r3, [r3, #0]
20001d80:	b29b      	uxth	r3, r3
20001d82:	4313      	orrs	r3, r2
20001d84:	b29a      	uxth	r2, r3
20001d86:	687b      	ldr	r3, [r7, #4]
20001d88:	821a      	strh	r2, [r3, #16]
}
20001d8a:	46c0      	nop			; (mov r8, r8)
20001d8c:	46bd      	mov	sp, r7
20001d8e:	b002      	add	sp, #8
20001d90:	bd80      	pop	{r7, pc}

20001d92 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001d92:	b580      	push	{r7, lr}
20001d94:	b082      	sub	sp, #8
20001d96:	af00      	add	r7, sp, #0
20001d98:	6078      	str	r0, [r7, #4]
20001d9a:	000a      	movs	r2, r1
20001d9c:	1cfb      	adds	r3, r7, #3
20001d9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
20001da0:	1cfb      	adds	r3, r7, #3
20001da2:	781b      	ldrb	r3, [r3, #0]
20001da4:	2b00      	cmp	r3, #0
20001da6:	d008      	beq.n	20001dba <USART_ReceiverWakeUpCmd+0x28>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
20001da8:	687b      	ldr	r3, [r7, #4]
20001daa:	899b      	ldrh	r3, [r3, #12]
20001dac:	b29b      	uxth	r3, r3
20001dae:	2202      	movs	r2, #2
20001db0:	4313      	orrs	r3, r2
20001db2:	b29a      	uxth	r2, r3
20001db4:	687b      	ldr	r3, [r7, #4]
20001db6:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
  }
}
20001db8:	e007      	b.n	20001dca <USART_ReceiverWakeUpCmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
20001dba:	687b      	ldr	r3, [r7, #4]
20001dbc:	899b      	ldrh	r3, [r3, #12]
20001dbe:	b29b      	uxth	r3, r3
20001dc0:	2202      	movs	r2, #2
20001dc2:	4393      	bics	r3, r2
20001dc4:	b29a      	uxth	r2, r3
20001dc6:	687b      	ldr	r3, [r7, #4]
20001dc8:	819a      	strh	r2, [r3, #12]
}
20001dca:	46c0      	nop			; (mov r8, r8)
20001dcc:	46bd      	mov	sp, r7
20001dce:	b002      	add	sp, #8
20001dd0:	bd80      	pop	{r7, pc}

20001dd2 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
20001dd2:	b580      	push	{r7, lr}
20001dd4:	b082      	sub	sp, #8
20001dd6:	af00      	add	r7, sp, #0
20001dd8:	6078      	str	r0, [r7, #4]
20001dda:	000a      	movs	r2, r1
20001ddc:	1cbb      	adds	r3, r7, #2
20001dde:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
20001de0:	687b      	ldr	r3, [r7, #4]
20001de2:	899b      	ldrh	r3, [r3, #12]
20001de4:	b29b      	uxth	r3, r3
20001de6:	4a09      	ldr	r2, [pc, #36]	; (20001e0c <USART_WakeUpConfig+0x3a>)
20001de8:	4013      	ands	r3, r2
20001dea:	b29a      	uxth	r2, r3
20001dec:	687b      	ldr	r3, [r7, #4]
20001dee:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
20001df0:	687b      	ldr	r3, [r7, #4]
20001df2:	899b      	ldrh	r3, [r3, #12]
20001df4:	b29a      	uxth	r2, r3
20001df6:	1cbb      	adds	r3, r7, #2
20001df8:	881b      	ldrh	r3, [r3, #0]
20001dfa:	4313      	orrs	r3, r2
20001dfc:	b29a      	uxth	r2, r3
20001dfe:	687b      	ldr	r3, [r7, #4]
20001e00:	819a      	strh	r2, [r3, #12]
}
20001e02:	46c0      	nop			; (mov r8, r8)
20001e04:	46bd      	mov	sp, r7
20001e06:	b002      	add	sp, #8
20001e08:	bd80      	pop	{r7, pc}
20001e0a:	46c0      	nop			; (mov r8, r8)
20001e0c:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20001e10 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
20001e10:	b580      	push	{r7, lr}
20001e12:	b082      	sub	sp, #8
20001e14:	af00      	add	r7, sp, #0
20001e16:	6078      	str	r0, [r7, #4]
20001e18:	000a      	movs	r2, r1
20001e1a:	1cbb      	adds	r3, r7, #2
20001e1c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
20001e1e:	687b      	ldr	r3, [r7, #4]
20001e20:	8a1b      	ldrh	r3, [r3, #16]
20001e22:	b29b      	uxth	r3, r3
20001e24:	2220      	movs	r2, #32
20001e26:	4393      	bics	r3, r2
20001e28:	b29a      	uxth	r2, r3
20001e2a:	687b      	ldr	r3, [r7, #4]
20001e2c:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
20001e2e:	687b      	ldr	r3, [r7, #4]
20001e30:	8a1b      	ldrh	r3, [r3, #16]
20001e32:	b29a      	uxth	r2, r3
20001e34:	1cbb      	adds	r3, r7, #2
20001e36:	881b      	ldrh	r3, [r3, #0]
20001e38:	4313      	orrs	r3, r2
20001e3a:	b29a      	uxth	r2, r3
20001e3c:	687b      	ldr	r3, [r7, #4]
20001e3e:	821a      	strh	r2, [r3, #16]
}
20001e40:	46c0      	nop			; (mov r8, r8)
20001e42:	46bd      	mov	sp, r7
20001e44:	b002      	add	sp, #8
20001e46:	bd80      	pop	{r7, pc}

20001e48 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001e48:	b580      	push	{r7, lr}
20001e4a:	b082      	sub	sp, #8
20001e4c:	af00      	add	r7, sp, #0
20001e4e:	6078      	str	r0, [r7, #4]
20001e50:	000a      	movs	r2, r1
20001e52:	1cfb      	adds	r3, r7, #3
20001e54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001e56:	1cfb      	adds	r3, r7, #3
20001e58:	781b      	ldrb	r3, [r3, #0]
20001e5a:	2b00      	cmp	r3, #0
20001e5c:	d009      	beq.n	20001e72 <USART_LINCmd+0x2a>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
20001e5e:	687b      	ldr	r3, [r7, #4]
20001e60:	8a1b      	ldrh	r3, [r3, #16]
20001e62:	b29b      	uxth	r3, r3
20001e64:	2280      	movs	r2, #128	; 0x80
20001e66:	01d2      	lsls	r2, r2, #7
20001e68:	4313      	orrs	r3, r2
20001e6a:	b29a      	uxth	r2, r3
20001e6c:	687b      	ldr	r3, [r7, #4]
20001e6e:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
  }
}
20001e70:	e007      	b.n	20001e82 <USART_LINCmd+0x3a>
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
20001e72:	687b      	ldr	r3, [r7, #4]
20001e74:	8a1b      	ldrh	r3, [r3, #16]
20001e76:	b29b      	uxth	r3, r3
20001e78:	4a04      	ldr	r2, [pc, #16]	; (20001e8c <USART_LINCmd+0x44>)
20001e7a:	4013      	ands	r3, r2
20001e7c:	b29a      	uxth	r2, r3
20001e7e:	687b      	ldr	r3, [r7, #4]
20001e80:	821a      	strh	r2, [r3, #16]
}
20001e82:	46c0      	nop			; (mov r8, r8)
20001e84:	46bd      	mov	sp, r7
20001e86:	b002      	add	sp, #8
20001e88:	bd80      	pop	{r7, pc}
20001e8a:	46c0      	nop			; (mov r8, r8)
20001e8c:	ffffbfff 			; <UNDEFINED> instruction: 0xffffbfff

20001e90 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
20001e90:	b580      	push	{r7, lr}
20001e92:	b082      	sub	sp, #8
20001e94:	af00      	add	r7, sp, #0
20001e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
20001e98:	687b      	ldr	r3, [r7, #4]
20001e9a:	899b      	ldrh	r3, [r3, #12]
20001e9c:	b29b      	uxth	r3, r3
20001e9e:	2201      	movs	r2, #1
20001ea0:	4313      	orrs	r3, r2
20001ea2:	b29a      	uxth	r2, r3
20001ea4:	687b      	ldr	r3, [r7, #4]
20001ea6:	819a      	strh	r2, [r3, #12]
}
20001ea8:	46c0      	nop			; (mov r8, r8)
20001eaa:	46bd      	mov	sp, r7
20001eac:	b002      	add	sp, #8
20001eae:	bd80      	pop	{r7, pc}

20001eb0 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001eb0:	b580      	push	{r7, lr}
20001eb2:	b082      	sub	sp, #8
20001eb4:	af00      	add	r7, sp, #0
20001eb6:	6078      	str	r0, [r7, #4]
20001eb8:	000a      	movs	r2, r1
20001eba:	1cfb      	adds	r3, r7, #3
20001ebc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001ebe:	1cfb      	adds	r3, r7, #3
20001ec0:	781b      	ldrb	r3, [r3, #0]
20001ec2:	2b00      	cmp	r3, #0
20001ec4:	d008      	beq.n	20001ed8 <USART_HalfDuplexCmd+0x28>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
20001ec6:	687b      	ldr	r3, [r7, #4]
20001ec8:	8a9b      	ldrh	r3, [r3, #20]
20001eca:	b29b      	uxth	r3, r3
20001ecc:	2208      	movs	r2, #8
20001ece:	4313      	orrs	r3, r2
20001ed0:	b29a      	uxth	r2, r3
20001ed2:	687b      	ldr	r3, [r7, #4]
20001ed4:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
20001ed6:	e007      	b.n	20001ee8 <USART_HalfDuplexCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
20001ed8:	687b      	ldr	r3, [r7, #4]
20001eda:	8a9b      	ldrh	r3, [r3, #20]
20001edc:	b29b      	uxth	r3, r3
20001ede:	2208      	movs	r2, #8
20001ee0:	4393      	bics	r3, r2
20001ee2:	b29a      	uxth	r2, r3
20001ee4:	687b      	ldr	r3, [r7, #4]
20001ee6:	829a      	strh	r2, [r3, #20]
}
20001ee8:	46c0      	nop			; (mov r8, r8)
20001eea:	46bd      	mov	sp, r7
20001eec:	b002      	add	sp, #8
20001eee:	bd80      	pop	{r7, pc}

20001ef0 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
20001ef0:	b580      	push	{r7, lr}
20001ef2:	b082      	sub	sp, #8
20001ef4:	af00      	add	r7, sp, #0
20001ef6:	6078      	str	r0, [r7, #4]
20001ef8:	000a      	movs	r2, r1
20001efa:	1cfb      	adds	r3, r7, #3
20001efc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
20001efe:	687b      	ldr	r3, [r7, #4]
20001f00:	8b1b      	ldrh	r3, [r3, #24]
20001f02:	b29b      	uxth	r3, r3
20001f04:	22ff      	movs	r2, #255	; 0xff
20001f06:	4013      	ands	r3, r2
20001f08:	b29a      	uxth	r2, r3
20001f0a:	687b      	ldr	r3, [r7, #4]
20001f0c:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
20001f0e:	687b      	ldr	r3, [r7, #4]
20001f10:	8b1b      	ldrh	r3, [r3, #24]
20001f12:	b29a      	uxth	r2, r3
20001f14:	1cfb      	adds	r3, r7, #3
20001f16:	781b      	ldrb	r3, [r3, #0]
20001f18:	b29b      	uxth	r3, r3
20001f1a:	021b      	lsls	r3, r3, #8
20001f1c:	b29b      	uxth	r3, r3
20001f1e:	4313      	orrs	r3, r2
20001f20:	b29a      	uxth	r2, r3
20001f22:	687b      	ldr	r3, [r7, #4]
20001f24:	831a      	strh	r2, [r3, #24]
}
20001f26:	46c0      	nop			; (mov r8, r8)
20001f28:	46bd      	mov	sp, r7
20001f2a:	b002      	add	sp, #8
20001f2c:	bd80      	pop	{r7, pc}

20001f2e <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001f2e:	b580      	push	{r7, lr}
20001f30:	b082      	sub	sp, #8
20001f32:	af00      	add	r7, sp, #0
20001f34:	6078      	str	r0, [r7, #4]
20001f36:	000a      	movs	r2, r1
20001f38:	1cfb      	adds	r3, r7, #3
20001f3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20001f3c:	1cfb      	adds	r3, r7, #3
20001f3e:	781b      	ldrb	r3, [r3, #0]
20001f40:	2b00      	cmp	r3, #0
20001f42:	d008      	beq.n	20001f56 <USART_SmartCardCmd+0x28>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
20001f44:	687b      	ldr	r3, [r7, #4]
20001f46:	8a9b      	ldrh	r3, [r3, #20]
20001f48:	b29b      	uxth	r3, r3
20001f4a:	2220      	movs	r2, #32
20001f4c:	4313      	orrs	r3, r2
20001f4e:	b29a      	uxth	r2, r3
20001f50:	687b      	ldr	r3, [r7, #4]
20001f52:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
  }
}
20001f54:	e007      	b.n	20001f66 <USART_SmartCardCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
20001f56:	687b      	ldr	r3, [r7, #4]
20001f58:	8a9b      	ldrh	r3, [r3, #20]
20001f5a:	b29b      	uxth	r3, r3
20001f5c:	2220      	movs	r2, #32
20001f5e:	4393      	bics	r3, r2
20001f60:	b29a      	uxth	r2, r3
20001f62:	687b      	ldr	r3, [r7, #4]
20001f64:	829a      	strh	r2, [r3, #20]
}
20001f66:	46c0      	nop			; (mov r8, r8)
20001f68:	46bd      	mov	sp, r7
20001f6a:	b002      	add	sp, #8
20001f6c:	bd80      	pop	{r7, pc}

20001f6e <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001f6e:	b580      	push	{r7, lr}
20001f70:	b082      	sub	sp, #8
20001f72:	af00      	add	r7, sp, #0
20001f74:	6078      	str	r0, [r7, #4]
20001f76:	000a      	movs	r2, r1
20001f78:	1cfb      	adds	r3, r7, #3
20001f7a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20001f7c:	1cfb      	adds	r3, r7, #3
20001f7e:	781b      	ldrb	r3, [r3, #0]
20001f80:	2b00      	cmp	r3, #0
20001f82:	d008      	beq.n	20001f96 <USART_SmartCardNACKCmd+0x28>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
20001f84:	687b      	ldr	r3, [r7, #4]
20001f86:	8a9b      	ldrh	r3, [r3, #20]
20001f88:	b29b      	uxth	r3, r3
20001f8a:	2210      	movs	r2, #16
20001f8c:	4313      	orrs	r3, r2
20001f8e:	b29a      	uxth	r2, r3
20001f90:	687b      	ldr	r3, [r7, #4]
20001f92:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
  }
}
20001f94:	e007      	b.n	20001fa6 <USART_SmartCardNACKCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
20001f96:	687b      	ldr	r3, [r7, #4]
20001f98:	8a9b      	ldrh	r3, [r3, #20]
20001f9a:	b29b      	uxth	r3, r3
20001f9c:	2210      	movs	r2, #16
20001f9e:	4393      	bics	r3, r2
20001fa0:	b29a      	uxth	r2, r3
20001fa2:	687b      	ldr	r3, [r7, #4]
20001fa4:	829a      	strh	r2, [r3, #20]
}
20001fa6:	46c0      	nop			; (mov r8, r8)
20001fa8:	46bd      	mov	sp, r7
20001faa:	b002      	add	sp, #8
20001fac:	bd80      	pop	{r7, pc}

20001fae <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
20001fae:	b580      	push	{r7, lr}
20001fb0:	b082      	sub	sp, #8
20001fb2:	af00      	add	r7, sp, #0
20001fb4:	6078      	str	r0, [r7, #4]
20001fb6:	000a      	movs	r2, r1
20001fb8:	1cbb      	adds	r3, r7, #2
20001fba:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
20001fbc:	687b      	ldr	r3, [r7, #4]
20001fbe:	8a9b      	ldrh	r3, [r3, #20]
20001fc0:	b29b      	uxth	r3, r3
20001fc2:	2204      	movs	r2, #4
20001fc4:	4393      	bics	r3, r2
20001fc6:	b29a      	uxth	r2, r3
20001fc8:	687b      	ldr	r3, [r7, #4]
20001fca:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
20001fcc:	687b      	ldr	r3, [r7, #4]
20001fce:	8a9b      	ldrh	r3, [r3, #20]
20001fd0:	b29a      	uxth	r2, r3
20001fd2:	1cbb      	adds	r3, r7, #2
20001fd4:	881b      	ldrh	r3, [r3, #0]
20001fd6:	4313      	orrs	r3, r2
20001fd8:	b29a      	uxth	r2, r3
20001fda:	687b      	ldr	r3, [r7, #4]
20001fdc:	829a      	strh	r2, [r3, #20]
}
20001fde:	46c0      	nop			; (mov r8, r8)
20001fe0:	46bd      	mov	sp, r7
20001fe2:	b002      	add	sp, #8
20001fe4:	bd80      	pop	{r7, pc}

20001fe6 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001fe6:	b580      	push	{r7, lr}
20001fe8:	b082      	sub	sp, #8
20001fea:	af00      	add	r7, sp, #0
20001fec:	6078      	str	r0, [r7, #4]
20001fee:	000a      	movs	r2, r1
20001ff0:	1cfb      	adds	r3, r7, #3
20001ff2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
20001ff4:	1cfb      	adds	r3, r7, #3
20001ff6:	781b      	ldrb	r3, [r3, #0]
20001ff8:	2b00      	cmp	r3, #0
20001ffa:	d008      	beq.n	2000200e <USART_IrDACmd+0x28>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
20001ffc:	687b      	ldr	r3, [r7, #4]
20001ffe:	8a9b      	ldrh	r3, [r3, #20]
20002000:	b29b      	uxth	r3, r3
20002002:	2202      	movs	r2, #2
20002004:	4313      	orrs	r3, r2
20002006:	b29a      	uxth	r2, r3
20002008:	687b      	ldr	r3, [r7, #4]
2000200a:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
  }
}
2000200c:	e007      	b.n	2000201e <USART_IrDACmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
2000200e:	687b      	ldr	r3, [r7, #4]
20002010:	8a9b      	ldrh	r3, [r3, #20]
20002012:	b29b      	uxth	r3, r3
20002014:	2202      	movs	r2, #2
20002016:	4393      	bics	r3, r2
20002018:	b29a      	uxth	r2, r3
2000201a:	687b      	ldr	r3, [r7, #4]
2000201c:	829a      	strh	r2, [r3, #20]
}
2000201e:	46c0      	nop			; (mov r8, r8)
20002020:	46bd      	mov	sp, r7
20002022:	b002      	add	sp, #8
20002024:	bd80      	pop	{r7, pc}

20002026 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
20002026:	b580      	push	{r7, lr}
20002028:	b082      	sub	sp, #8
2000202a:	af00      	add	r7, sp, #0
2000202c:	6078      	str	r0, [r7, #4]
2000202e:	0008      	movs	r0, r1
20002030:	0011      	movs	r1, r2
20002032:	1cbb      	adds	r3, r7, #2
20002034:	1c02      	adds	r2, r0, #0
20002036:	801a      	strh	r2, [r3, #0]
20002038:	1c7b      	adds	r3, r7, #1
2000203a:	1c0a      	adds	r2, r1, #0
2000203c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
2000203e:	1c7b      	adds	r3, r7, #1
20002040:	781b      	ldrb	r3, [r3, #0]
20002042:	2b00      	cmp	r3, #0
20002044:	d009      	beq.n	2000205a <USART_DMACmd+0x34>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
20002046:	687b      	ldr	r3, [r7, #4]
20002048:	8a9b      	ldrh	r3, [r3, #20]
2000204a:	b29a      	uxth	r2, r3
2000204c:	1cbb      	adds	r3, r7, #2
2000204e:	881b      	ldrh	r3, [r3, #0]
20002050:	4313      	orrs	r3, r2
20002052:	b29a      	uxth	r2, r3
20002054:	687b      	ldr	r3, [r7, #4]
20002056:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
20002058:	e00a      	b.n	20002070 <USART_DMACmd+0x4a>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
2000205a:	687b      	ldr	r3, [r7, #4]
2000205c:	8a9b      	ldrh	r3, [r3, #20]
2000205e:	b29b      	uxth	r3, r3
20002060:	1cba      	adds	r2, r7, #2
20002062:	8812      	ldrh	r2, [r2, #0]
20002064:	43d2      	mvns	r2, r2
20002066:	b292      	uxth	r2, r2
20002068:	4013      	ands	r3, r2
2000206a:	b29a      	uxth	r2, r3
2000206c:	687b      	ldr	r3, [r7, #4]
2000206e:	829a      	strh	r2, [r3, #20]
}
20002070:	46c0      	nop			; (mov r8, r8)
20002072:	46bd      	mov	sp, r7
20002074:	b002      	add	sp, #8
20002076:	bd80      	pop	{r7, pc}

20002078 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
20002078:	b580      	push	{r7, lr}
2000207a:	b086      	sub	sp, #24
2000207c:	af00      	add	r7, sp, #0
2000207e:	6078      	str	r0, [r7, #4]
20002080:	0008      	movs	r0, r1
20002082:	0011      	movs	r1, r2
20002084:	1cbb      	adds	r3, r7, #2
20002086:	1c02      	adds	r2, r0, #0
20002088:	801a      	strh	r2, [r3, #0]
2000208a:	1c7b      	adds	r3, r7, #1
2000208c:	1c0a      	adds	r2, r1, #0
2000208e:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
20002090:	2300      	movs	r3, #0
20002092:	613b      	str	r3, [r7, #16]
20002094:	2300      	movs	r3, #0
20002096:	60fb      	str	r3, [r7, #12]
20002098:	2300      	movs	r3, #0
2000209a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
2000209c:	2300      	movs	r3, #0
2000209e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
200020a0:	687b      	ldr	r3, [r7, #4]
200020a2:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
200020a4:	1cbb      	adds	r3, r7, #2
200020a6:	881b      	ldrh	r3, [r3, #0]
200020a8:	b2db      	uxtb	r3, r3
200020aa:	095b      	lsrs	r3, r3, #5
200020ac:	b2db      	uxtb	r3, r3
200020ae:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
200020b0:	1cbb      	adds	r3, r7, #2
200020b2:	881b      	ldrh	r3, [r3, #0]
200020b4:	221f      	movs	r2, #31
200020b6:	4013      	ands	r3, r2
200020b8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
200020ba:	2201      	movs	r2, #1
200020bc:	68fb      	ldr	r3, [r7, #12]
200020be:	409a      	lsls	r2, r3
200020c0:	0013      	movs	r3, r2
200020c2:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
200020c4:	693b      	ldr	r3, [r7, #16]
200020c6:	2b01      	cmp	r3, #1
200020c8:	d103      	bne.n	200020d2 <USART_ITConfig+0x5a>
  {
    usartxbase += 0x0C;
200020ca:	697b      	ldr	r3, [r7, #20]
200020cc:	330c      	adds	r3, #12
200020ce:	617b      	str	r3, [r7, #20]
200020d0:	e009      	b.n	200020e6 <USART_ITConfig+0x6e>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
200020d2:	693b      	ldr	r3, [r7, #16]
200020d4:	2b02      	cmp	r3, #2
200020d6:	d103      	bne.n	200020e0 <USART_ITConfig+0x68>
  {
    usartxbase += 0x10;
200020d8:	697b      	ldr	r3, [r7, #20]
200020da:	3310      	adds	r3, #16
200020dc:	617b      	str	r3, [r7, #20]
200020de:	e002      	b.n	200020e6 <USART_ITConfig+0x6e>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
200020e0:	697b      	ldr	r3, [r7, #20]
200020e2:	3314      	adds	r3, #20
200020e4:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
200020e6:	1c7b      	adds	r3, r7, #1
200020e8:	781b      	ldrb	r3, [r3, #0]
200020ea:	2b00      	cmp	r3, #0
200020ec:	d006      	beq.n	200020fc <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
200020ee:	697b      	ldr	r3, [r7, #20]
200020f0:	6819      	ldr	r1, [r3, #0]
200020f2:	697b      	ldr	r3, [r7, #20]
200020f4:	68ba      	ldr	r2, [r7, #8]
200020f6:	430a      	orrs	r2, r1
200020f8:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
200020fa:	e006      	b.n	2000210a <USART_ITConfig+0x92>
    *(__IO uint32_t*)usartxbase &= ~itmask;
200020fc:	697b      	ldr	r3, [r7, #20]
200020fe:	681a      	ldr	r2, [r3, #0]
20002100:	68bb      	ldr	r3, [r7, #8]
20002102:	43d9      	mvns	r1, r3
20002104:	697b      	ldr	r3, [r7, #20]
20002106:	400a      	ands	r2, r1
20002108:	601a      	str	r2, [r3, #0]
}
2000210a:	46c0      	nop			; (mov r8, r8)
2000210c:	46bd      	mov	sp, r7
2000210e:	b006      	add	sp, #24
20002110:	bd80      	pop	{r7, pc}

20002112 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
20002112:	b580      	push	{r7, lr}
20002114:	b084      	sub	sp, #16
20002116:	af00      	add	r7, sp, #0
20002118:	6078      	str	r0, [r7, #4]
2000211a:	000a      	movs	r2, r1
2000211c:	1cbb      	adds	r3, r7, #2
2000211e:	801a      	strh	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
20002120:	230f      	movs	r3, #15
20002122:	18fb      	adds	r3, r7, r3
20002124:	2200      	movs	r2, #0
20002126:	701a      	strb	r2, [r3, #0]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
20002128:	687b      	ldr	r3, [r7, #4]
2000212a:	881b      	ldrh	r3, [r3, #0]
2000212c:	b29b      	uxth	r3, r3
2000212e:	1cba      	adds	r2, r7, #2
20002130:	8812      	ldrh	r2, [r2, #0]
20002132:	4013      	ands	r3, r2
20002134:	b29b      	uxth	r3, r3
20002136:	2b00      	cmp	r3, #0
20002138:	d004      	beq.n	20002144 <USART_GetFlagStatus+0x32>
  {
    bitstatus = SET;
2000213a:	230f      	movs	r3, #15
2000213c:	18fb      	adds	r3, r7, r3
2000213e:	2201      	movs	r2, #1
20002140:	701a      	strb	r2, [r3, #0]
20002142:	e003      	b.n	2000214c <USART_GetFlagStatus+0x3a>
  }
  else
  {
    bitstatus = RESET;
20002144:	230f      	movs	r3, #15
20002146:	18fb      	adds	r3, r7, r3
20002148:	2200      	movs	r2, #0
2000214a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
2000214c:	230f      	movs	r3, #15
2000214e:	18fb      	adds	r3, r7, r3
20002150:	781b      	ldrb	r3, [r3, #0]
}
20002152:	0018      	movs	r0, r3
20002154:	46bd      	mov	sp, r7
20002156:	b004      	add	sp, #16
20002158:	bd80      	pop	{r7, pc}

2000215a <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
2000215a:	b580      	push	{r7, lr}
2000215c:	b082      	sub	sp, #8
2000215e:	af00      	add	r7, sp, #0
20002160:	6078      	str	r0, [r7, #4]
20002162:	000a      	movs	r2, r1
20002164:	1cbb      	adds	r3, r7, #2
20002166:	801a      	strh	r2, [r3, #0]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
20002168:	1cbb      	adds	r3, r7, #2
2000216a:	881b      	ldrh	r3, [r3, #0]
2000216c:	43db      	mvns	r3, r3
2000216e:	b29a      	uxth	r2, r3
20002170:	687b      	ldr	r3, [r7, #4]
20002172:	801a      	strh	r2, [r3, #0]
}
20002174:	46c0      	nop			; (mov r8, r8)
20002176:	46bd      	mov	sp, r7
20002178:	b002      	add	sp, #8
2000217a:	bd80      	pop	{r7, pc}

2000217c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
2000217c:	b580      	push	{r7, lr}
2000217e:	b086      	sub	sp, #24
20002180:	af00      	add	r7, sp, #0
20002182:	6078      	str	r0, [r7, #4]
20002184:	000a      	movs	r2, r1
20002186:	1cbb      	adds	r3, r7, #2
20002188:	801a      	strh	r2, [r3, #0]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
2000218a:	2300      	movs	r3, #0
2000218c:	60fb      	str	r3, [r7, #12]
2000218e:	2300      	movs	r3, #0
20002190:	617b      	str	r3, [r7, #20]
20002192:	2300      	movs	r3, #0
20002194:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
20002196:	2313      	movs	r3, #19
20002198:	18fb      	adds	r3, r7, r3
2000219a:	2200      	movs	r2, #0
2000219c:	701a      	strb	r2, [r3, #0]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
2000219e:	1cbb      	adds	r3, r7, #2
200021a0:	881b      	ldrh	r3, [r3, #0]
200021a2:	b2db      	uxtb	r3, r3
200021a4:	095b      	lsrs	r3, r3, #5
200021a6:	b2db      	uxtb	r3, r3
200021a8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
200021aa:	1cbb      	adds	r3, r7, #2
200021ac:	881b      	ldrh	r3, [r3, #0]
200021ae:	221f      	movs	r2, #31
200021b0:	4013      	ands	r3, r2
200021b2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
200021b4:	2201      	movs	r2, #1
200021b6:	697b      	ldr	r3, [r7, #20]
200021b8:	409a      	lsls	r2, r3
200021ba:	0013      	movs	r3, r2
200021bc:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
200021be:	68bb      	ldr	r3, [r7, #8]
200021c0:	2b01      	cmp	r3, #1
200021c2:	d107      	bne.n	200021d4 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
200021c4:	687b      	ldr	r3, [r7, #4]
200021c6:	899b      	ldrh	r3, [r3, #12]
200021c8:	b29b      	uxth	r3, r3
200021ca:	001a      	movs	r2, r3
200021cc:	697b      	ldr	r3, [r7, #20]
200021ce:	4013      	ands	r3, r2
200021d0:	617b      	str	r3, [r7, #20]
200021d2:	e011      	b.n	200021f8 <USART_GetITStatus+0x7c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
200021d4:	68bb      	ldr	r3, [r7, #8]
200021d6:	2b02      	cmp	r3, #2
200021d8:	d107      	bne.n	200021ea <USART_GetITStatus+0x6e>
  {
    itmask &= USARTx->CR2;
200021da:	687b      	ldr	r3, [r7, #4]
200021dc:	8a1b      	ldrh	r3, [r3, #16]
200021de:	b29b      	uxth	r3, r3
200021e0:	001a      	movs	r2, r3
200021e2:	697b      	ldr	r3, [r7, #20]
200021e4:	4013      	ands	r3, r2
200021e6:	617b      	str	r3, [r7, #20]
200021e8:	e006      	b.n	200021f8 <USART_GetITStatus+0x7c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
200021ea:	687b      	ldr	r3, [r7, #4]
200021ec:	8a9b      	ldrh	r3, [r3, #20]
200021ee:	b29b      	uxth	r3, r3
200021f0:	001a      	movs	r2, r3
200021f2:	697b      	ldr	r3, [r7, #20]
200021f4:	4013      	ands	r3, r2
200021f6:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
200021f8:	1cbb      	adds	r3, r7, #2
200021fa:	881b      	ldrh	r3, [r3, #0]
200021fc:	0a1b      	lsrs	r3, r3, #8
200021fe:	b29b      	uxth	r3, r3
20002200:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
20002202:	2201      	movs	r2, #1
20002204:	68fb      	ldr	r3, [r7, #12]
20002206:	409a      	lsls	r2, r3
20002208:	0013      	movs	r3, r2
2000220a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
2000220c:	687b      	ldr	r3, [r7, #4]
2000220e:	881b      	ldrh	r3, [r3, #0]
20002210:	b29b      	uxth	r3, r3
20002212:	001a      	movs	r2, r3
20002214:	68fb      	ldr	r3, [r7, #12]
20002216:	4013      	ands	r3, r2
20002218:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
2000221a:	697b      	ldr	r3, [r7, #20]
2000221c:	2b00      	cmp	r3, #0
2000221e:	d007      	beq.n	20002230 <USART_GetITStatus+0xb4>
20002220:	68fb      	ldr	r3, [r7, #12]
20002222:	2b00      	cmp	r3, #0
20002224:	d004      	beq.n	20002230 <USART_GetITStatus+0xb4>
  {
    bitstatus = SET;
20002226:	2313      	movs	r3, #19
20002228:	18fb      	adds	r3, r7, r3
2000222a:	2201      	movs	r2, #1
2000222c:	701a      	strb	r2, [r3, #0]
2000222e:	e003      	b.n	20002238 <USART_GetITStatus+0xbc>
  }
  else
  {
    bitstatus = RESET;
20002230:	2313      	movs	r3, #19
20002232:	18fb      	adds	r3, r7, r3
20002234:	2200      	movs	r2, #0
20002236:	701a      	strb	r2, [r3, #0]
  }
  
  return bitstatus;  
20002238:	2313      	movs	r3, #19
2000223a:	18fb      	adds	r3, r7, r3
2000223c:	781b      	ldrb	r3, [r3, #0]
}
2000223e:	0018      	movs	r0, r3
20002240:	46bd      	mov	sp, r7
20002242:	b006      	add	sp, #24
20002244:	bd80      	pop	{r7, pc}

20002246 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
20002246:	b580      	push	{r7, lr}
20002248:	b084      	sub	sp, #16
2000224a:	af00      	add	r7, sp, #0
2000224c:	6078      	str	r0, [r7, #4]
2000224e:	000a      	movs	r2, r1
20002250:	1cbb      	adds	r3, r7, #2
20002252:	801a      	strh	r2, [r3, #0]
  uint16_t bitpos = 0x00, itmask = 0x00;
20002254:	210e      	movs	r1, #14
20002256:	187b      	adds	r3, r7, r1
20002258:	2200      	movs	r2, #0
2000225a:	801a      	strh	r2, [r3, #0]
2000225c:	200c      	movs	r0, #12
2000225e:	183b      	adds	r3, r7, r0
20002260:	2200      	movs	r2, #0
20002262:	801a      	strh	r2, [r3, #0]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
20002264:	187b      	adds	r3, r7, r1
20002266:	1cba      	adds	r2, r7, #2
20002268:	8812      	ldrh	r2, [r2, #0]
2000226a:	0a12      	lsrs	r2, r2, #8
2000226c:	801a      	strh	r2, [r3, #0]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
2000226e:	187b      	adds	r3, r7, r1
20002270:	881b      	ldrh	r3, [r3, #0]
20002272:	2201      	movs	r2, #1
20002274:	409a      	lsls	r2, r3
20002276:	183b      	adds	r3, r7, r0
20002278:	801a      	strh	r2, [r3, #0]
  USARTx->SR = (uint16_t)~itmask;
2000227a:	183b      	adds	r3, r7, r0
2000227c:	881b      	ldrh	r3, [r3, #0]
2000227e:	43db      	mvns	r3, r3
20002280:	b29a      	uxth	r2, r3
20002282:	687b      	ldr	r3, [r7, #4]
20002284:	801a      	strh	r2, [r3, #0]
}
20002286:	46c0      	nop			; (mov r8, r8)
20002288:	46bd      	mov	sp, r7
2000228a:	b004      	add	sp, #16
2000228c:	bd80      	pop	{r7, pc}
2000228e:	46c0      	nop			; (mov r8, r8)

20002290 <USART1_IRQHandler>:
static FIFO *txBuffer, *rxBuffer, realTxBuffer, realRxBuffer;
uint8_t digitToPrintable(uint8_t inDigit);
uint8_t charToPrintable(uint8_t inChar);

//Avbrottshantering för USART1
void USART1_IRQHandler(void){
20002290:	b590      	push	{r4, r7, lr}
20002292:	b083      	sub	sp, #12
20002294:	af00      	add	r7, sp, #0
    //Avbrott orsakat av mottaget meddelande
    if(USART_GetITStatus(USART1, USART_IT_RXNE) == SET){
20002296:	4a1f      	ldr	r2, [pc, #124]	; (20002314 <USART1_IRQHandler+0x84>)
20002298:	4b1f      	ldr	r3, [pc, #124]	; (20002318 <USART1_IRQHandler+0x88>)
2000229a:	0011      	movs	r1, r2
2000229c:	0018      	movs	r0, r3
2000229e:	f7ff ff6d 	bl	2000217c <USART_GetITStatus>
200022a2:	0003      	movs	r3, r0
200022a4:	2b01      	cmp	r3, #1
200022a6:	d10b      	bne.n	200022c0 <USART1_IRQHandler+0x30>
        //Skriver inkommen medelande till rxBuffer
        bufferPut(rxBuffer, USART_ReceiveData(USART1));
200022a8:	4b1c      	ldr	r3, [pc, #112]	; (2000231c <USART1_IRQHandler+0x8c>)
200022aa:	681c      	ldr	r4, [r3, #0]
200022ac:	4b1a      	ldr	r3, [pc, #104]	; (20002318 <USART1_IRQHandler+0x88>)
200022ae:	0018      	movs	r0, r3
200022b0:	f7ff fd44 	bl	20001d3c <USART_ReceiveData>
200022b4:	0003      	movs	r3, r0
200022b6:	b2db      	uxtb	r3, r3
200022b8:	0019      	movs	r1, r3
200022ba:	0020      	movs	r0, r4
200022bc:	f7ff fa88 	bl	200017d0 <bufferPut>
        //Fundering ska vi ha något sätt att meddela att vi
        //har missat meddelande på grund av full buffer?
    }

    //Avbrott orsakat av att registret för sändning är tomt
    if(USART_GetITStatus(USART1, USART_IT_TXE) == SET){
200022c0:	4a17      	ldr	r2, [pc, #92]	; (20002320 <USART1_IRQHandler+0x90>)
200022c2:	4b15      	ldr	r3, [pc, #84]	; (20002318 <USART1_IRQHandler+0x88>)
200022c4:	0011      	movs	r1, r2
200022c6:	0018      	movs	r0, r3
200022c8:	f7ff ff58 	bl	2000217c <USART_GetITStatus>
200022cc:	0003      	movs	r3, r0
200022ce:	2b01      	cmp	r3, #1
200022d0:	d11c      	bne.n	2000230c <USART1_IRQHandler+0x7c>
        //Försöker läsa från txBuffer
        uint8_t data;
        uint8_t readOk = bufferGet(txBuffer,&data);
200022d2:	4b14      	ldr	r3, [pc, #80]	; (20002324 <USART1_IRQHandler+0x94>)
200022d4:	681b      	ldr	r3, [r3, #0]
200022d6:	1dfc      	adds	r4, r7, #7
200022d8:	1dba      	adds	r2, r7, #6
200022da:	0011      	movs	r1, r2
200022dc:	0018      	movs	r0, r3
200022de:	f7ff faa8 	bl	20001832 <bufferGet>
200022e2:	0003      	movs	r3, r0
200022e4:	7023      	strb	r3, [r4, #0]

        //Om vi lyckades skickar vi data
        //Annars är buffern tom och vi avativerar avbrott för att skicka
        if(readOk) {
200022e6:	1dfb      	adds	r3, r7, #7
200022e8:	781b      	ldrb	r3, [r3, #0]
200022ea:	2b00      	cmp	r3, #0
200022ec:	d008      	beq.n	20002300 <USART1_IRQHandler+0x70>
            USART_SendData(USART1,data);
200022ee:	1dbb      	adds	r3, r7, #6
200022f0:	781b      	ldrb	r3, [r3, #0]
200022f2:	b29b      	uxth	r3, r3
200022f4:	4a08      	ldr	r2, [pc, #32]	; (20002318 <USART1_IRQHandler+0x88>)
200022f6:	0019      	movs	r1, r3
200022f8:	0010      	movs	r0, r2
200022fa:	f7ff fd0d 	bl	20001d18 <USART_SendData>
        } else{
            USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
        }
    }
}
200022fe:	e005      	b.n	2000230c <USART1_IRQHandler+0x7c>
            USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
20002300:	4907      	ldr	r1, [pc, #28]	; (20002320 <USART1_IRQHandler+0x90>)
20002302:	4b05      	ldr	r3, [pc, #20]	; (20002318 <USART1_IRQHandler+0x88>)
20002304:	2200      	movs	r2, #0
20002306:	0018      	movs	r0, r3
20002308:	f7ff feb6 	bl	20002078 <USART_ITConfig>
}
2000230c:	46c0      	nop			; (mov r8, r8)
2000230e:	46bd      	mov	sp, r7
20002310:	b003      	add	sp, #12
20002312:	bd90      	pop	{r4, r7, pc}
20002314:	00000525 	andeq	r0, r0, r5, lsr #10
20002318:	40011000 	andmi	r1, r1, r0
2000231c:	20004b08 	andcs	r4, r0, r8, lsl #22
20002320:	00000727 	andeq	r0, r0, r7, lsr #14
20002324:	20004b04 	andcs	r4, r0, r4, lsl #22

20002328 <USARTConfig>:

//Sätter upp USART1
void USARTConfig(void){
20002328:	b590      	push	{r4, r7, lr}
2000232a:	b089      	sub	sp, #36	; 0x24
2000232c:	af00      	add	r7, sp, #0
    //Sätter bufferpekarna
    txBuffer = &realTxBuffer;
2000232e:	4b42      	ldr	r3, [pc, #264]	; (20002438 <USARTConfig+0x110>)
20002330:	4a42      	ldr	r2, [pc, #264]	; (2000243c <USARTConfig+0x114>)
20002332:	601a      	str	r2, [r3, #0]
    rxBuffer = &realRxBuffer;
20002334:	4b42      	ldr	r3, [pc, #264]	; (20002440 <USARTConfig+0x118>)
20002336:	4a43      	ldr	r2, [pc, #268]	; (20002444 <USARTConfig+0x11c>)
20002338:	601a      	str	r2, [r3, #0]

    //Nollställer vår buffertar
    bufferInit(txBuffer);
2000233a:	4b3f      	ldr	r3, [pc, #252]	; (20002438 <USARTConfig+0x110>)
2000233c:	681b      	ldr	r3, [r3, #0]
2000233e:	0018      	movs	r0, r3
20002340:	f7ff fa32 	bl	200017a8 <bufferInit>
    bufferInit(rxBuffer);
20002344:	4b3e      	ldr	r3, [pc, #248]	; (20002440 <USARTConfig+0x118>)
20002346:	681b      	ldr	r3, [r3, #0]
20002348:	0018      	movs	r0, r3
2000234a:	f7ff fa2d 	bl	200017a8 <bufferInit>

    //Aktiverar klockorna för USART1, Port A
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
2000234e:	2101      	movs	r1, #1
20002350:	2010      	movs	r0, #16
20002352:	f7fe fb01 	bl	20000958 <RCC_APB2PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20002356:	2101      	movs	r1, #1
20002358:	2001      	movs	r0, #1
2000235a:	f7fe fa7d 	bl	20000858 <RCC_AHB1PeriphClockCmd>

    //Aktiverar alternativ funktion USART1 för port A pinnar 9 och 10
    GPIO_PinAFConfig(GPIOA, GPIO_Pin_9, GPIO_AF_USART1);
2000235e:	2380      	movs	r3, #128	; 0x80
20002360:	009b      	lsls	r3, r3, #2
20002362:	4839      	ldr	r0, [pc, #228]	; (20002448 <USARTConfig+0x120>)
20002364:	2207      	movs	r2, #7
20002366:	0019      	movs	r1, r3
20002368:	f7ff f8e9 	bl	2000153e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_Pin_10, GPIO_AF_USART1);
2000236c:	2380      	movs	r3, #128	; 0x80
2000236e:	00db      	lsls	r3, r3, #3
20002370:	4835      	ldr	r0, [pc, #212]	; (20002448 <USARTConfig+0x120>)
20002372:	2207      	movs	r2, #7
20002374:	0019      	movs	r1, r3
20002376:	f7ff f8e2 	bl	2000153e <GPIO_PinAFConfig>

    //Konfigurerar USART1 Tx och Rx som alternativ funktion push-pull
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
2000237a:	2118      	movs	r1, #24
2000237c:	187b      	adds	r3, r7, r1
2000237e:	2202      	movs	r2, #2
20002380:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
20002382:	187b      	adds	r3, r7, r1
20002384:	2203      	movs	r2, #3
20002386:	715a      	strb	r2, [r3, #5]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
20002388:	187b      	adds	r3, r7, r1
2000238a:	2200      	movs	r2, #0
2000238c:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
2000238e:	187b      	adds	r3, r7, r1
20002390:	2201      	movs	r2, #1
20002392:	71da      	strb	r2, [r3, #7]
    //Pinne 9 är TX
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
20002394:	187b      	adds	r3, r7, r1
20002396:	2280      	movs	r2, #128	; 0x80
20002398:	0092      	lsls	r2, r2, #2
2000239a:	601a      	str	r2, [r3, #0]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
2000239c:	000c      	movs	r4, r1
2000239e:	187b      	adds	r3, r7, r1
200023a0:	4a29      	ldr	r2, [pc, #164]	; (20002448 <USARTConfig+0x120>)
200023a2:	0019      	movs	r1, r3
200023a4:	0010      	movs	r0, r2
200023a6:	f7fe ff4d 	bl	20001244 <GPIO_Init>
    //Pinne 10 är RX
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
200023aa:	0021      	movs	r1, r4
200023ac:	187b      	adds	r3, r7, r1
200023ae:	2280      	movs	r2, #128	; 0x80
200023b0:	00d2      	lsls	r2, r2, #3
200023b2:	601a      	str	r2, [r3, #0]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
200023b4:	187b      	adds	r3, r7, r1
200023b6:	4a24      	ldr	r2, [pc, #144]	; (20002448 <USARTConfig+0x120>)
200023b8:	0019      	movs	r1, r3
200023ba:	0010      	movs	r0, r2
200023bc:	f7fe ff42 	bl	20001244 <GPIO_Init>
    - Word Length = 8 Bits
    - One Stop Bit
    - No parity
    - Hardware flow control disabled (RTS and CTS signals)
    - Receive and transmit enabled*/
      USART_InitStructure.USART_BaudRate = 115200;
200023c0:	2108      	movs	r1, #8
200023c2:	187b      	adds	r3, r7, r1
200023c4:	22e1      	movs	r2, #225	; 0xe1
200023c6:	0252      	lsls	r2, r2, #9
200023c8:	601a      	str	r2, [r3, #0]
      USART_InitStructure.USART_WordLength = USART_WordLength_8b;
200023ca:	187b      	adds	r3, r7, r1
200023cc:	2200      	movs	r2, #0
200023ce:	809a      	strh	r2, [r3, #4]
      USART_InitStructure.USART_StopBits = USART_StopBits_1;
200023d0:	187b      	adds	r3, r7, r1
200023d2:	2200      	movs	r2, #0
200023d4:	80da      	strh	r2, [r3, #6]
      USART_InitStructure.USART_Parity = USART_Parity_No;
200023d6:	187b      	adds	r3, r7, r1
200023d8:	2200      	movs	r2, #0
200023da:	811a      	strh	r2, [r3, #8]
      USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
200023dc:	187b      	adds	r3, r7, r1
200023de:	2200      	movs	r2, #0
200023e0:	819a      	strh	r2, [r3, #12]
      USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
200023e2:	187b      	adds	r3, r7, r1
200023e4:	220c      	movs	r2, #12
200023e6:	815a      	strh	r2, [r3, #10]
    USART_Init(USART1, &USART_InitStructure);
200023e8:	187b      	adds	r3, r7, r1
200023ea:	4a18      	ldr	r2, [pc, #96]	; (2000244c <USARTConfig+0x124>)
200023ec:	0019      	movs	r1, r3
200023ee:	0010      	movs	r0, r2
200023f0:	f7ff fae6 	bl	200019c0 <USART_Init>
    //Konfigurerar avbrott för USART
    NVIC_InitTypeDef NVIC_InitStructure;
    //4 möjliga gruppprioriteringar
    //4 möjliga undergruppsprioriterinar
    //NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
200023f4:	1d3b      	adds	r3, r7, #4
200023f6:	2225      	movs	r2, #37	; 0x25
200023f8:	701a      	strb	r2, [r3, #0]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
200023fa:	1d3b      	adds	r3, r7, #4
200023fc:	2200      	movs	r2, #0
200023fe:	705a      	strb	r2, [r3, #1]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
20002400:	1d3b      	adds	r3, r7, #4
20002402:	2200      	movs	r2, #0
20002404:	709a      	strb	r2, [r3, #2]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
20002406:	1d3b      	adds	r3, r7, #4
20002408:	2201      	movs	r2, #1
2000240a:	70da      	strb	r2, [r3, #3]
    NVIC_Init(&NVIC_InitStructure);
2000240c:	1d3b      	adds	r3, r7, #4
2000240e:	0018      	movs	r0, r3
20002410:	f7ff f8fa 	bl	20001608 <NVIC_Init>

    //Testar att sätta avbrottsvektorn manuellt
    *((void (**)(void) ) (0x2001C000 + 0xD4) ) = USART1_IRQHandler;
20002414:	4b0e      	ldr	r3, [pc, #56]	; (20002450 <USARTConfig+0x128>)
20002416:	4a0f      	ldr	r2, [pc, #60]	; (20002454 <USARTConfig+0x12c>)
20002418:	601a      	str	r2, [r3, #0]

    //Startar USART1
    USART_Cmd(USART1,ENABLE);
2000241a:	4b0c      	ldr	r3, [pc, #48]	; (2000244c <USARTConfig+0x124>)
2000241c:	2101      	movs	r1, #1
2000241e:	0018      	movs	r0, r3
20002420:	f7ff fbf2 	bl	20001c08 <USART_Cmd>

    //Aktiverar avbrott vid mottagning av meddelanden
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
20002424:	490c      	ldr	r1, [pc, #48]	; (20002458 <USARTConfig+0x130>)
20002426:	4b09      	ldr	r3, [pc, #36]	; (2000244c <USARTConfig+0x124>)
20002428:	2201      	movs	r2, #1
2000242a:	0018      	movs	r0, r3
2000242c:	f7ff fe24 	bl	20002078 <USART_ITConfig>
}
20002430:	46c0      	nop			; (mov r8, r8)
20002432:	46bd      	mov	sp, r7
20002434:	b009      	add	sp, #36	; 0x24
20002436:	bd90      	pop	{r4, r7, pc}
20002438:	20004b04 	andcs	r4, r0, r4, lsl #22
2000243c:	20004b0c 	andcs	r4, r0, ip, lsl #22
20002440:	20004b08 	andcs	r4, r0, r8, lsl #22
20002444:	20004b74 	andcs	r4, r0, r4, ror fp
20002448:	40020000 	andmi	r0, r2, r0
2000244c:	40011000 	andmi	r1, r1, r0
20002450:	2001c0d4 	ldrdcs	ip, [r1], -r4
20002454:	20002291 	mulcs	r0, r1, r2
20002458:	00000525 	andeq	r0, r0, r5, lsr #10

2000245c <USARTPut>:

//Lägger till elem till kön för att skicka
//Returnerar 1 om det lyckades, 0 annars.
uint8_t USARTPut (uint8_t elem){
2000245c:	b580      	push	{r7, lr}
2000245e:	b082      	sub	sp, #8
20002460:	af00      	add	r7, sp, #0
20002462:	0002      	movs	r2, r0
20002464:	1dfb      	adds	r3, r7, #7
20002466:	701a      	strb	r2, [r3, #0]
    //Lägger till den i bufferten om det går
    if (bufferPut(txBuffer, elem)){
20002468:	4b0b      	ldr	r3, [pc, #44]	; (20002498 <USARTPut+0x3c>)
2000246a:	681a      	ldr	r2, [r3, #0]
2000246c:	1dfb      	adds	r3, r7, #7
2000246e:	781b      	ldrb	r3, [r3, #0]
20002470:	0019      	movs	r1, r3
20002472:	0010      	movs	r0, r2
20002474:	f7ff f9ac 	bl	200017d0 <bufferPut>
20002478:	1e03      	subs	r3, r0, #0
2000247a:	d007      	beq.n	2000248c <USARTPut+0x30>
        //Aktiverar avbrott för att skicka
        USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
2000247c:	4907      	ldr	r1, [pc, #28]	; (2000249c <USARTPut+0x40>)
2000247e:	4b08      	ldr	r3, [pc, #32]	; (200024a0 <USARTPut+0x44>)
20002480:	2201      	movs	r2, #1
20002482:	0018      	movs	r0, r3
20002484:	f7ff fdf8 	bl	20002078 <USART_ITConfig>
        //Alternativ lösning: hålla koll på om avbrott redan är aktivt
        return 1;
20002488:	2301      	movs	r3, #1
2000248a:	e000      	b.n	2000248e <USARTPut+0x32>
    }
    return 0;
2000248c:	2300      	movs	r3, #0
}
2000248e:	0018      	movs	r0, r3
20002490:	46bd      	mov	sp, r7
20002492:	b002      	add	sp, #8
20002494:	bd80      	pop	{r7, pc}
20002496:	46c0      	nop			; (mov r8, r8)
20002498:	20004b04 	andcs	r4, r0, r4, lsl #22
2000249c:	00000727 	andeq	r0, r0, r7, lsr #14
200024a0:	40011000 	andmi	r1, r1, r0

200024a4 <USARTPrint>:

//Lägger till list till kön för att skicka
//Sköter omvandling mellan sträng i c till rätt tecken i USART. Klarar 0-9 a-z A-Z och mellanslag
//Returnerar 1 om det lyckades, 0 annars.
uint8_t USARTPrint(uint8_t *list){
200024a4:	b580      	push	{r7, lr}
200024a6:	b082      	sub	sp, #8
200024a8:	af00      	add	r7, sp, #0
200024aa:	6078      	str	r0, [r7, #4]
    //En sträng avslutas med null så vi
    //läser tills vi hittar den
    while (*list) {
200024ac:	e00e      	b.n	200024cc <USARTPrint+0x28>
        //Lägg till alla tecken en efter en
        //Misslyckas vi med en avbryter vi resten
        if (!USARTPut(charToPrintable(*list++))){
200024ae:	687b      	ldr	r3, [r7, #4]
200024b0:	1c5a      	adds	r2, r3, #1
200024b2:	607a      	str	r2, [r7, #4]
200024b4:	781b      	ldrb	r3, [r3, #0]
200024b6:	0018      	movs	r0, r3
200024b8:	f000 f8aa 	bl	20002610 <charToPrintable>
200024bc:	0003      	movs	r3, r0
200024be:	0018      	movs	r0, r3
200024c0:	f7ff ffcc 	bl	2000245c <USARTPut>
200024c4:	1e03      	subs	r3, r0, #0
200024c6:	d101      	bne.n	200024cc <USARTPrint+0x28>
            return 0;
200024c8:	2300      	movs	r3, #0
200024ca:	e004      	b.n	200024d6 <USARTPrint+0x32>
    while (*list) {
200024cc:	687b      	ldr	r3, [r7, #4]
200024ce:	781b      	ldrb	r3, [r3, #0]
200024d0:	2b00      	cmp	r3, #0
200024d2:	d1ec      	bne.n	200024ae <USARTPrint+0xa>
        }
    }
    return 1;
200024d4:	2301      	movs	r3, #1
}
200024d6:	0018      	movs	r0, r3
200024d8:	46bd      	mov	sp, r7
200024da:	b002      	add	sp, #8
200024dc:	bd80      	pop	{r7, pc}

200024de <USARTPrintNum>:

//Lägger till num som enskilda nummer
//0-9 till kön för att skicka
//Returnerar 1 om det lyckades, 0 annars.
uint8_t USARTPrintNum(uint32_t num){
200024de:	b5b0      	push	{r4, r5, r7, lr}
200024e0:	b086      	sub	sp, #24
200024e2:	af00      	add	r7, sp, #0
200024e4:	6078      	str	r0, [r7, #4]
    //Max längd för 32 bitar inbut är 10 digits
    uint8_t digits,digitArr[10];
    digits = (num == 0) ? 1 : ceil(log10(num));
200024e6:	687b      	ldr	r3, [r7, #4]
200024e8:	2b00      	cmp	r3, #0
200024ea:	d017      	beq.n	2000251c <USARTPrintNum+0x3e>
200024ec:	6878      	ldr	r0, [r7, #4]
200024ee:	f000 fcf5 	bl	20002edc <__aeabi_ui2d>
200024f2:	0003      	movs	r3, r0
200024f4:	000c      	movs	r4, r1
200024f6:	0018      	movs	r0, r3
200024f8:	0021      	movs	r1, r4
200024fa:	f001 ffff 	bl	200044fc <log10>
200024fe:	0003      	movs	r3, r0
20002500:	000c      	movs	r4, r1
20002502:	0018      	movs	r0, r3
20002504:	0021      	movs	r1, r4
20002506:	f001 ff65 	bl	200043d4 <ceil>
2000250a:	0003      	movs	r3, r0
2000250c:	000c      	movs	r4, r1
2000250e:	0018      	movs	r0, r3
20002510:	0021      	movs	r1, r4
20002512:	f000 f947 	bl	200027a4 <__aeabi_d2uiz>
20002516:	0003      	movs	r3, r0
20002518:	b2da      	uxtb	r2, r3
2000251a:	e000      	b.n	2000251e <USARTPrintNum+0x40>
2000251c:	2201      	movs	r2, #1
2000251e:	2115      	movs	r1, #21
20002520:	187b      	adds	r3, r7, r1
20002522:	701a      	strb	r2, [r3, #0]

    //Save the digit in reverse to array
    for (uint8_t i = digits; i != 0; i--){
20002524:	2317      	movs	r3, #23
20002526:	18fb      	adds	r3, r7, r3
20002528:	187a      	adds	r2, r7, r1
2000252a:	7812      	ldrb	r2, [r2, #0]
2000252c:	701a      	strb	r2, [r3, #0]
2000252e:	e01e      	b.n	2000256e <USARTPrintNum+0x90>
        digitArr[i-1] = digitToPrintable(num % 10);
20002530:	687b      	ldr	r3, [r7, #4]
20002532:	210a      	movs	r1, #10
20002534:	0018      	movs	r0, r3
20002536:	f000 f92f 	bl	20002798 <__aeabi_uidivmod>
2000253a:	000b      	movs	r3, r1
2000253c:	b2da      	uxtb	r2, r3
2000253e:	2517      	movs	r5, #23
20002540:	197b      	adds	r3, r7, r5
20002542:	781b      	ldrb	r3, [r3, #0]
20002544:	1e5c      	subs	r4, r3, #1
20002546:	0010      	movs	r0, r2
20002548:	f000 f84e 	bl	200025e8 <digitToPrintable>
2000254c:	0003      	movs	r3, r0
2000254e:	001a      	movs	r2, r3
20002550:	2308      	movs	r3, #8
20002552:	18fb      	adds	r3, r7, r3
20002554:	551a      	strb	r2, [r3, r4]
        num /= 10;
20002556:	687b      	ldr	r3, [r7, #4]
20002558:	210a      	movs	r1, #10
2000255a:	0018      	movs	r0, r3
2000255c:	f000 f896 	bl	2000268c <__udivsi3>
20002560:	0003      	movs	r3, r0
20002562:	607b      	str	r3, [r7, #4]
    for (uint8_t i = digits; i != 0; i--){
20002564:	197b      	adds	r3, r7, r5
20002566:	781a      	ldrb	r2, [r3, #0]
20002568:	197b      	adds	r3, r7, r5
2000256a:	3a01      	subs	r2, #1
2000256c:	701a      	strb	r2, [r3, #0]
2000256e:	2317      	movs	r3, #23
20002570:	18fb      	adds	r3, r7, r3
20002572:	781b      	ldrb	r3, [r3, #0]
20002574:	2b00      	cmp	r3, #0
20002576:	d1db      	bne.n	20002530 <USARTPrintNum+0x52>
    }

    //Printing
     for (uint8_t i = 0; i != digits; i++){
20002578:	2316      	movs	r3, #22
2000257a:	18fb      	adds	r3, r7, r3
2000257c:	2200      	movs	r2, #0
2000257e:	701a      	strb	r2, [r3, #0]
20002580:	e012      	b.n	200025a8 <USARTPrintNum+0xca>
         if(!USARTPut(digitArr[i])){
20002582:	2316      	movs	r3, #22
20002584:	18fb      	adds	r3, r7, r3
20002586:	781b      	ldrb	r3, [r3, #0]
20002588:	2208      	movs	r2, #8
2000258a:	18ba      	adds	r2, r7, r2
2000258c:	5cd3      	ldrb	r3, [r2, r3]
2000258e:	0018      	movs	r0, r3
20002590:	f7ff ff64 	bl	2000245c <USARTPut>
20002594:	1e03      	subs	r3, r0, #0
20002596:	d101      	bne.n	2000259c <USARTPrintNum+0xbe>
             return 0;
20002598:	2300      	movs	r3, #0
2000259a:	e00e      	b.n	200025ba <USARTPrintNum+0xdc>
     for (uint8_t i = 0; i != digits; i++){
2000259c:	2116      	movs	r1, #22
2000259e:	187b      	adds	r3, r7, r1
200025a0:	781a      	ldrb	r2, [r3, #0]
200025a2:	187b      	adds	r3, r7, r1
200025a4:	3201      	adds	r2, #1
200025a6:	701a      	strb	r2, [r3, #0]
200025a8:	2316      	movs	r3, #22
200025aa:	18fa      	adds	r2, r7, r3
200025ac:	2315      	movs	r3, #21
200025ae:	18fb      	adds	r3, r7, r3
200025b0:	7812      	ldrb	r2, [r2, #0]
200025b2:	781b      	ldrb	r3, [r3, #0]
200025b4:	429a      	cmp	r2, r3
200025b6:	d1e4      	bne.n	20002582 <USARTPrintNum+0xa4>
         }
     }

    return 1;
200025b8:	2301      	movs	r3, #1
}
200025ba:	0018      	movs	r0, r3
200025bc:	46bd      	mov	sp, r7
200025be:	b006      	add	sp, #24
200025c0:	bdb0      	pop	{r4, r5, r7, pc}

200025c2 <USARTGet>:

//Hämta senaste mottagna meddelandet till dest
//Gör ingen omvandling, dvs returnerar det tal som skickades över USART
//Returnerar 1 om det lyckades, dvs det fanns ett meddelande att hämta 0 annars.
uint8_t USARTGet(uint8_t *dest){
200025c2:	b580      	push	{r7, lr}
200025c4:	b082      	sub	sp, #8
200025c6:	af00      	add	r7, sp, #0
200025c8:	6078      	str	r0, [r7, #4]
    return bufferGet (rxBuffer, dest);
200025ca:	4b06      	ldr	r3, [pc, #24]	; (200025e4 <USARTGet+0x22>)
200025cc:	681b      	ldr	r3, [r3, #0]
200025ce:	687a      	ldr	r2, [r7, #4]
200025d0:	0011      	movs	r1, r2
200025d2:	0018      	movs	r0, r3
200025d4:	f7ff f92d 	bl	20001832 <bufferGet>
200025d8:	0003      	movs	r3, r0
}
200025da:	0018      	movs	r0, r3
200025dc:	46bd      	mov	sp, r7
200025de:	b002      	add	sp, #8
200025e0:	bd80      	pop	{r7, pc}
200025e2:	46c0      	nop			; (mov r8, r8)
200025e4:	20004b08 	andcs	r4, r0, r8, lsl #22

200025e8 <digitToPrintable>:

//För omvandling från 0-9 heltal till int som kan skrivas
//ut i terminalen. Det fungerar annorluna i simulatorn
uint8_t digitToPrintable(uint8_t inDigit){
200025e8:	b580      	push	{r7, lr}
200025ea:	b082      	sub	sp, #8
200025ec:	af00      	add	r7, sp, #0
200025ee:	0002      	movs	r2, r0
200025f0:	1dfb      	adds	r3, r7, #7
200025f2:	701a      	strb	r2, [r3, #0]
            return ('0' + inDigit);
        }

        return '?';
        #else
        if (0 <= inDigit && inDigit <= 9) {
200025f4:	1dfb      	adds	r3, r7, #7
200025f6:	781b      	ldrb	r3, [r3, #0]
200025f8:	2b09      	cmp	r3, #9
200025fa:	d804      	bhi.n	20002606 <digitToPrintable+0x1e>
            //Where 16 is the number for a zero
            return (16 + inDigit);
200025fc:	1dfb      	adds	r3, r7, #7
200025fe:	781b      	ldrb	r3, [r3, #0]
20002600:	3310      	adds	r3, #16
20002602:	b2db      	uxtb	r3, r3
20002604:	e000      	b.n	20002608 <digitToPrintable+0x20>
        }

        return (31); //return ?
20002606:	231f      	movs	r3, #31
        #endif
}
20002608:	0018      	movs	r0, r3
2000260a:	46bd      	mov	sp, r7
2000260c:	b002      	add	sp, #8
2000260e:	bd80      	pop	{r7, pc}

20002610 <charToPrintable>:

//För omvandling från char till int som kan skrivas ut i terminalen
// hårdvaran.  Det fungerar annorluna i simulatorn
uint8_t charToPrintable(uint8_t inChar){
20002610:	b580      	push	{r7, lr}
20002612:	b082      	sub	sp, #8
20002614:	af00      	add	r7, sp, #0
20002616:	0002      	movs	r2, r0
20002618:	1dfb      	adds	r3, r7, #7
2000261a:	701a      	strb	r2, [r3, #0]
    return inChar;
    #else
    //* används för ny rad
    //10 är ny rad vid utskrift kort -> pc (USARTPut)
    //"*" är 42
    if (inChar == 42) {
2000261c:	1dfb      	adds	r3, r7, #7
2000261e:	781b      	ldrb	r3, [r3, #0]
20002620:	2b2a      	cmp	r3, #42	; 0x2a
20002622:	d101      	bne.n	20002628 <charToPrintable+0x18>
        return (10);
20002624:	230a      	movs	r3, #10
20002626:	e02d      	b.n	20002684 <charToPrintable+0x74>
    }

    //2 är space vid utskrift kort -> pc (USARTPut)
    //" " är 32
    if (inChar == 32) {
20002628:	1dfb      	adds	r3, r7, #7
2000262a:	781b      	ldrb	r3, [r3, #0]
2000262c:	2b20      	cmp	r3, #32
2000262e:	d101      	bne.n	20002634 <charToPrintable+0x24>
        return (2);
20002630:	2302      	movs	r3, #2
20002632:	e027      	b.n	20002684 <charToPrintable+0x74>
    }

    //16 är 0 vid utskrift kort -> pc (USARTPut)
    //"0" är 48. "9" är 57
    if (48 <= inChar && inChar <= 57) {
20002634:	1dfb      	adds	r3, r7, #7
20002636:	781b      	ldrb	r3, [r3, #0]
20002638:	2b2f      	cmp	r3, #47	; 0x2f
2000263a:	d908      	bls.n	2000264e <charToPrintable+0x3e>
2000263c:	1dfb      	adds	r3, r7, #7
2000263e:	781b      	ldrb	r3, [r3, #0]
20002640:	2b39      	cmp	r3, #57	; 0x39
20002642:	d804      	bhi.n	2000264e <charToPrintable+0x3e>
        return (16 + inChar - 48);
20002644:	1dfb      	adds	r3, r7, #7
20002646:	781b      	ldrb	r3, [r3, #0]
20002648:	3b20      	subs	r3, #32
2000264a:	b2db      	uxtb	r3, r3
2000264c:	e01a      	b.n	20002684 <charToPrintable+0x74>
    }

    //33 är A vid utskrift kort -> pc (USARTPut)
    //"A" är 65.  "Z" är 90
    if (65 <= inChar && inChar <= 90) {
2000264e:	1dfb      	adds	r3, r7, #7
20002650:	781b      	ldrb	r3, [r3, #0]
20002652:	2b40      	cmp	r3, #64	; 0x40
20002654:	d908      	bls.n	20002668 <charToPrintable+0x58>
20002656:	1dfb      	adds	r3, r7, #7
20002658:	781b      	ldrb	r3, [r3, #0]
2000265a:	2b5a      	cmp	r3, #90	; 0x5a
2000265c:	d804      	bhi.n	20002668 <charToPrintable+0x58>
        return (33 + inChar - 65);
2000265e:	1dfb      	adds	r3, r7, #7
20002660:	781b      	ldrb	r3, [r3, #0]
20002662:	3b20      	subs	r3, #32
20002664:	b2db      	uxtb	r3, r3
20002666:	e00d      	b.n	20002684 <charToPrintable+0x74>
    }
    
    //161 är A vid utskrift kort -> pc (USARTPut)
    //"a" är 97. "z" är 122
    if (97 <= inChar && inChar <= 122) {
20002668:	1dfb      	adds	r3, r7, #7
2000266a:	781b      	ldrb	r3, [r3, #0]
2000266c:	2b60      	cmp	r3, #96	; 0x60
2000266e:	d908      	bls.n	20002682 <charToPrintable+0x72>
20002670:	1dfb      	adds	r3, r7, #7
20002672:	781b      	ldrb	r3, [r3, #0]
20002674:	2b7a      	cmp	r3, #122	; 0x7a
20002676:	d804      	bhi.n	20002682 <charToPrintable+0x72>
        return (161 + inChar - 97);
20002678:	1dfb      	adds	r3, r7, #7
2000267a:	781b      	ldrb	r3, [r3, #0]
2000267c:	3340      	adds	r3, #64	; 0x40
2000267e:	b2db      	uxtb	r3, r3
20002680:	e000      	b.n	20002684 <charToPrintable+0x74>
    }

    //else return ?
    return (31);
20002682:	231f      	movs	r3, #31
    #endif
20002684:	0018      	movs	r0, r3
20002686:	46bd      	mov	sp, r7
20002688:	b002      	add	sp, #8
2000268a:	bd80      	pop	{r7, pc}

2000268c <__udivsi3>:
2000268c:	2200      	movs	r2, #0
2000268e:	0843      	lsrs	r3, r0, #1
20002690:	428b      	cmp	r3, r1
20002692:	d374      	bcc.n	2000277e <__udivsi3+0xf2>
20002694:	0903      	lsrs	r3, r0, #4
20002696:	428b      	cmp	r3, r1
20002698:	d35f      	bcc.n	2000275a <__udivsi3+0xce>
2000269a:	0a03      	lsrs	r3, r0, #8
2000269c:	428b      	cmp	r3, r1
2000269e:	d344      	bcc.n	2000272a <__udivsi3+0x9e>
200026a0:	0b03      	lsrs	r3, r0, #12
200026a2:	428b      	cmp	r3, r1
200026a4:	d328      	bcc.n	200026f8 <__udivsi3+0x6c>
200026a6:	0c03      	lsrs	r3, r0, #16
200026a8:	428b      	cmp	r3, r1
200026aa:	d30d      	bcc.n	200026c8 <__udivsi3+0x3c>
200026ac:	22ff      	movs	r2, #255	; 0xff
200026ae:	0209      	lsls	r1, r1, #8
200026b0:	ba12      	rev	r2, r2
200026b2:	0c03      	lsrs	r3, r0, #16
200026b4:	428b      	cmp	r3, r1
200026b6:	d302      	bcc.n	200026be <__udivsi3+0x32>
200026b8:	1212      	asrs	r2, r2, #8
200026ba:	0209      	lsls	r1, r1, #8
200026bc:	d065      	beq.n	2000278a <__udivsi3+0xfe>
200026be:	0b03      	lsrs	r3, r0, #12
200026c0:	428b      	cmp	r3, r1
200026c2:	d319      	bcc.n	200026f8 <__udivsi3+0x6c>
200026c4:	e000      	b.n	200026c8 <__udivsi3+0x3c>
200026c6:	0a09      	lsrs	r1, r1, #8
200026c8:	0bc3      	lsrs	r3, r0, #15
200026ca:	428b      	cmp	r3, r1
200026cc:	d301      	bcc.n	200026d2 <__udivsi3+0x46>
200026ce:	03cb      	lsls	r3, r1, #15
200026d0:	1ac0      	subs	r0, r0, r3
200026d2:	4152      	adcs	r2, r2
200026d4:	0b83      	lsrs	r3, r0, #14
200026d6:	428b      	cmp	r3, r1
200026d8:	d301      	bcc.n	200026de <__udivsi3+0x52>
200026da:	038b      	lsls	r3, r1, #14
200026dc:	1ac0      	subs	r0, r0, r3
200026de:	4152      	adcs	r2, r2
200026e0:	0b43      	lsrs	r3, r0, #13
200026e2:	428b      	cmp	r3, r1
200026e4:	d301      	bcc.n	200026ea <__udivsi3+0x5e>
200026e6:	034b      	lsls	r3, r1, #13
200026e8:	1ac0      	subs	r0, r0, r3
200026ea:	4152      	adcs	r2, r2
200026ec:	0b03      	lsrs	r3, r0, #12
200026ee:	428b      	cmp	r3, r1
200026f0:	d301      	bcc.n	200026f6 <__udivsi3+0x6a>
200026f2:	030b      	lsls	r3, r1, #12
200026f4:	1ac0      	subs	r0, r0, r3
200026f6:	4152      	adcs	r2, r2
200026f8:	0ac3      	lsrs	r3, r0, #11
200026fa:	428b      	cmp	r3, r1
200026fc:	d301      	bcc.n	20002702 <__udivsi3+0x76>
200026fe:	02cb      	lsls	r3, r1, #11
20002700:	1ac0      	subs	r0, r0, r3
20002702:	4152      	adcs	r2, r2
20002704:	0a83      	lsrs	r3, r0, #10
20002706:	428b      	cmp	r3, r1
20002708:	d301      	bcc.n	2000270e <__udivsi3+0x82>
2000270a:	028b      	lsls	r3, r1, #10
2000270c:	1ac0      	subs	r0, r0, r3
2000270e:	4152      	adcs	r2, r2
20002710:	0a43      	lsrs	r3, r0, #9
20002712:	428b      	cmp	r3, r1
20002714:	d301      	bcc.n	2000271a <__udivsi3+0x8e>
20002716:	024b      	lsls	r3, r1, #9
20002718:	1ac0      	subs	r0, r0, r3
2000271a:	4152      	adcs	r2, r2
2000271c:	0a03      	lsrs	r3, r0, #8
2000271e:	428b      	cmp	r3, r1
20002720:	d301      	bcc.n	20002726 <__udivsi3+0x9a>
20002722:	020b      	lsls	r3, r1, #8
20002724:	1ac0      	subs	r0, r0, r3
20002726:	4152      	adcs	r2, r2
20002728:	d2cd      	bcs.n	200026c6 <__udivsi3+0x3a>
2000272a:	09c3      	lsrs	r3, r0, #7
2000272c:	428b      	cmp	r3, r1
2000272e:	d301      	bcc.n	20002734 <__udivsi3+0xa8>
20002730:	01cb      	lsls	r3, r1, #7
20002732:	1ac0      	subs	r0, r0, r3
20002734:	4152      	adcs	r2, r2
20002736:	0983      	lsrs	r3, r0, #6
20002738:	428b      	cmp	r3, r1
2000273a:	d301      	bcc.n	20002740 <__udivsi3+0xb4>
2000273c:	018b      	lsls	r3, r1, #6
2000273e:	1ac0      	subs	r0, r0, r3
20002740:	4152      	adcs	r2, r2
20002742:	0943      	lsrs	r3, r0, #5
20002744:	428b      	cmp	r3, r1
20002746:	d301      	bcc.n	2000274c <__udivsi3+0xc0>
20002748:	014b      	lsls	r3, r1, #5
2000274a:	1ac0      	subs	r0, r0, r3
2000274c:	4152      	adcs	r2, r2
2000274e:	0903      	lsrs	r3, r0, #4
20002750:	428b      	cmp	r3, r1
20002752:	d301      	bcc.n	20002758 <__udivsi3+0xcc>
20002754:	010b      	lsls	r3, r1, #4
20002756:	1ac0      	subs	r0, r0, r3
20002758:	4152      	adcs	r2, r2
2000275a:	08c3      	lsrs	r3, r0, #3
2000275c:	428b      	cmp	r3, r1
2000275e:	d301      	bcc.n	20002764 <__udivsi3+0xd8>
20002760:	00cb      	lsls	r3, r1, #3
20002762:	1ac0      	subs	r0, r0, r3
20002764:	4152      	adcs	r2, r2
20002766:	0883      	lsrs	r3, r0, #2
20002768:	428b      	cmp	r3, r1
2000276a:	d301      	bcc.n	20002770 <__udivsi3+0xe4>
2000276c:	008b      	lsls	r3, r1, #2
2000276e:	1ac0      	subs	r0, r0, r3
20002770:	4152      	adcs	r2, r2
20002772:	0843      	lsrs	r3, r0, #1
20002774:	428b      	cmp	r3, r1
20002776:	d301      	bcc.n	2000277c <__udivsi3+0xf0>
20002778:	004b      	lsls	r3, r1, #1
2000277a:	1ac0      	subs	r0, r0, r3
2000277c:	4152      	adcs	r2, r2
2000277e:	1a41      	subs	r1, r0, r1
20002780:	d200      	bcs.n	20002784 <__udivsi3+0xf8>
20002782:	4601      	mov	r1, r0
20002784:	4152      	adcs	r2, r2
20002786:	4610      	mov	r0, r2
20002788:	4770      	bx	lr
2000278a:	e7ff      	b.n	2000278c <__udivsi3+0x100>
2000278c:	b501      	push	{r0, lr}
2000278e:	2000      	movs	r0, #0
20002790:	f000 f806 	bl	200027a0 <__aeabi_idiv0>
20002794:	bd02      	pop	{r1, pc}
20002796:	46c0      	nop			; (mov r8, r8)

20002798 <__aeabi_uidivmod>:
20002798:	2900      	cmp	r1, #0
2000279a:	d0f7      	beq.n	2000278c <__udivsi3+0x100>
2000279c:	e776      	b.n	2000268c <__udivsi3>
2000279e:	4770      	bx	lr

200027a0 <__aeabi_idiv0>:
200027a0:	4770      	bx	lr
200027a2:	46c0      	nop			; (mov r8, r8)

200027a4 <__aeabi_d2uiz>:
200027a4:	b570      	push	{r4, r5, r6, lr}
200027a6:	2200      	movs	r2, #0
200027a8:	4b0c      	ldr	r3, [pc, #48]	; (200027dc <__aeabi_d2uiz+0x38>)
200027aa:	0004      	movs	r4, r0
200027ac:	000d      	movs	r5, r1
200027ae:	f000 fbfb 	bl	20002fa8 <__aeabi_dcmpge>
200027b2:	2800      	cmp	r0, #0
200027b4:	d104      	bne.n	200027c0 <__aeabi_d2uiz+0x1c>
200027b6:	0020      	movs	r0, r4
200027b8:	0029      	movs	r1, r5
200027ba:	f000 fb59 	bl	20002e70 <__aeabi_d2iz>
200027be:	bd70      	pop	{r4, r5, r6, pc}
200027c0:	4b06      	ldr	r3, [pc, #24]	; (200027dc <__aeabi_d2uiz+0x38>)
200027c2:	2200      	movs	r2, #0
200027c4:	0020      	movs	r0, r4
200027c6:	0029      	movs	r1, r5
200027c8:	f000 f80a 	bl	200027e0 <__aeabi_dsub>
200027cc:	f000 fb50 	bl	20002e70 <__aeabi_d2iz>
200027d0:	2380      	movs	r3, #128	; 0x80
200027d2:	061b      	lsls	r3, r3, #24
200027d4:	469c      	mov	ip, r3
200027d6:	4460      	add	r0, ip
200027d8:	e7f1      	b.n	200027be <__aeabi_d2uiz+0x1a>
200027da:	46c0      	nop			; (mov r8, r8)
200027dc:	41e00000 	mvnmi	r0, r0

200027e0 <__aeabi_dsub>:
200027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200027e2:	4657      	mov	r7, sl
200027e4:	464e      	mov	r6, r9
200027e6:	4645      	mov	r5, r8
200027e8:	46de      	mov	lr, fp
200027ea:	000c      	movs	r4, r1
200027ec:	0309      	lsls	r1, r1, #12
200027ee:	b5e0      	push	{r5, r6, r7, lr}
200027f0:	0a49      	lsrs	r1, r1, #9
200027f2:	0f46      	lsrs	r6, r0, #29
200027f4:	005f      	lsls	r7, r3, #1
200027f6:	4331      	orrs	r1, r6
200027f8:	031e      	lsls	r6, r3, #12
200027fa:	0fdb      	lsrs	r3, r3, #31
200027fc:	0a76      	lsrs	r6, r6, #9
200027fe:	469b      	mov	fp, r3
20002800:	0f53      	lsrs	r3, r2, #29
20002802:	4333      	orrs	r3, r6
20002804:	4ec8      	ldr	r6, [pc, #800]	; (20002b28 <__aeabi_dsub+0x348>)
20002806:	0065      	lsls	r5, r4, #1
20002808:	00c0      	lsls	r0, r0, #3
2000280a:	0fe4      	lsrs	r4, r4, #31
2000280c:	00d2      	lsls	r2, r2, #3
2000280e:	0d6d      	lsrs	r5, r5, #21
20002810:	46a2      	mov	sl, r4
20002812:	4681      	mov	r9, r0
20002814:	0d7f      	lsrs	r7, r7, #21
20002816:	469c      	mov	ip, r3
20002818:	4690      	mov	r8, r2
2000281a:	42b7      	cmp	r7, r6
2000281c:	d100      	bne.n	20002820 <__aeabi_dsub+0x40>
2000281e:	e0b9      	b.n	20002994 <__aeabi_dsub+0x1b4>
20002820:	465b      	mov	r3, fp
20002822:	2601      	movs	r6, #1
20002824:	4073      	eors	r3, r6
20002826:	469b      	mov	fp, r3
20002828:	1bee      	subs	r6, r5, r7
2000282a:	45a3      	cmp	fp, r4
2000282c:	d100      	bne.n	20002830 <__aeabi_dsub+0x50>
2000282e:	e083      	b.n	20002938 <__aeabi_dsub+0x158>
20002830:	2e00      	cmp	r6, #0
20002832:	dd63      	ble.n	200028fc <__aeabi_dsub+0x11c>
20002834:	2f00      	cmp	r7, #0
20002836:	d000      	beq.n	2000283a <__aeabi_dsub+0x5a>
20002838:	e0b1      	b.n	2000299e <__aeabi_dsub+0x1be>
2000283a:	4663      	mov	r3, ip
2000283c:	4313      	orrs	r3, r2
2000283e:	d100      	bne.n	20002842 <__aeabi_dsub+0x62>
20002840:	e123      	b.n	20002a8a <__aeabi_dsub+0x2aa>
20002842:	1e73      	subs	r3, r6, #1
20002844:	2b00      	cmp	r3, #0
20002846:	d000      	beq.n	2000284a <__aeabi_dsub+0x6a>
20002848:	e1ba      	b.n	20002bc0 <__aeabi_dsub+0x3e0>
2000284a:	1a86      	subs	r6, r0, r2
2000284c:	4663      	mov	r3, ip
2000284e:	42b0      	cmp	r0, r6
20002850:	4180      	sbcs	r0, r0
20002852:	2501      	movs	r5, #1
20002854:	1ac9      	subs	r1, r1, r3
20002856:	4240      	negs	r0, r0
20002858:	1a09      	subs	r1, r1, r0
2000285a:	020b      	lsls	r3, r1, #8
2000285c:	d400      	bmi.n	20002860 <__aeabi_dsub+0x80>
2000285e:	e147      	b.n	20002af0 <__aeabi_dsub+0x310>
20002860:	0249      	lsls	r1, r1, #9
20002862:	0a4b      	lsrs	r3, r1, #9
20002864:	4698      	mov	r8, r3
20002866:	4643      	mov	r3, r8
20002868:	2b00      	cmp	r3, #0
2000286a:	d100      	bne.n	2000286e <__aeabi_dsub+0x8e>
2000286c:	e189      	b.n	20002b82 <__aeabi_dsub+0x3a2>
2000286e:	4640      	mov	r0, r8
20002870:	f000 fba4 	bl	20002fbc <__clzsi2>
20002874:	0003      	movs	r3, r0
20002876:	3b08      	subs	r3, #8
20002878:	2b1f      	cmp	r3, #31
2000287a:	dd00      	ble.n	2000287e <__aeabi_dsub+0x9e>
2000287c:	e17c      	b.n	20002b78 <__aeabi_dsub+0x398>
2000287e:	2220      	movs	r2, #32
20002880:	0030      	movs	r0, r6
20002882:	1ad2      	subs	r2, r2, r3
20002884:	4641      	mov	r1, r8
20002886:	40d0      	lsrs	r0, r2
20002888:	4099      	lsls	r1, r3
2000288a:	0002      	movs	r2, r0
2000288c:	409e      	lsls	r6, r3
2000288e:	430a      	orrs	r2, r1
20002890:	429d      	cmp	r5, r3
20002892:	dd00      	ble.n	20002896 <__aeabi_dsub+0xb6>
20002894:	e16a      	b.n	20002b6c <__aeabi_dsub+0x38c>
20002896:	1b5d      	subs	r5, r3, r5
20002898:	1c6b      	adds	r3, r5, #1
2000289a:	2b1f      	cmp	r3, #31
2000289c:	dd00      	ble.n	200028a0 <__aeabi_dsub+0xc0>
2000289e:	e194      	b.n	20002bca <__aeabi_dsub+0x3ea>
200028a0:	2120      	movs	r1, #32
200028a2:	0010      	movs	r0, r2
200028a4:	0035      	movs	r5, r6
200028a6:	1ac9      	subs	r1, r1, r3
200028a8:	408e      	lsls	r6, r1
200028aa:	40da      	lsrs	r2, r3
200028ac:	4088      	lsls	r0, r1
200028ae:	40dd      	lsrs	r5, r3
200028b0:	1e71      	subs	r1, r6, #1
200028b2:	418e      	sbcs	r6, r1
200028b4:	0011      	movs	r1, r2
200028b6:	2207      	movs	r2, #7
200028b8:	4328      	orrs	r0, r5
200028ba:	2500      	movs	r5, #0
200028bc:	4306      	orrs	r6, r0
200028be:	4032      	ands	r2, r6
200028c0:	2a00      	cmp	r2, #0
200028c2:	d009      	beq.n	200028d8 <__aeabi_dsub+0xf8>
200028c4:	230f      	movs	r3, #15
200028c6:	4033      	ands	r3, r6
200028c8:	2b04      	cmp	r3, #4
200028ca:	d005      	beq.n	200028d8 <__aeabi_dsub+0xf8>
200028cc:	1d33      	adds	r3, r6, #4
200028ce:	42b3      	cmp	r3, r6
200028d0:	41b6      	sbcs	r6, r6
200028d2:	4276      	negs	r6, r6
200028d4:	1989      	adds	r1, r1, r6
200028d6:	001e      	movs	r6, r3
200028d8:	020b      	lsls	r3, r1, #8
200028da:	d400      	bmi.n	200028de <__aeabi_dsub+0xfe>
200028dc:	e23d      	b.n	20002d5a <__aeabi_dsub+0x57a>
200028de:	1c6a      	adds	r2, r5, #1
200028e0:	4b91      	ldr	r3, [pc, #580]	; (20002b28 <__aeabi_dsub+0x348>)
200028e2:	0555      	lsls	r5, r2, #21
200028e4:	0d6d      	lsrs	r5, r5, #21
200028e6:	429a      	cmp	r2, r3
200028e8:	d100      	bne.n	200028ec <__aeabi_dsub+0x10c>
200028ea:	e119      	b.n	20002b20 <__aeabi_dsub+0x340>
200028ec:	4a8f      	ldr	r2, [pc, #572]	; (20002b2c <__aeabi_dsub+0x34c>)
200028ee:	08f6      	lsrs	r6, r6, #3
200028f0:	400a      	ands	r2, r1
200028f2:	0757      	lsls	r7, r2, #29
200028f4:	0252      	lsls	r2, r2, #9
200028f6:	4337      	orrs	r7, r6
200028f8:	0b12      	lsrs	r2, r2, #12
200028fa:	e09b      	b.n	20002a34 <__aeabi_dsub+0x254>
200028fc:	2e00      	cmp	r6, #0
200028fe:	d000      	beq.n	20002902 <__aeabi_dsub+0x122>
20002900:	e0c5      	b.n	20002a8e <__aeabi_dsub+0x2ae>
20002902:	1c6e      	adds	r6, r5, #1
20002904:	0576      	lsls	r6, r6, #21
20002906:	0d76      	lsrs	r6, r6, #21
20002908:	2e01      	cmp	r6, #1
2000290a:	dc00      	bgt.n	2000290e <__aeabi_dsub+0x12e>
2000290c:	e148      	b.n	20002ba0 <__aeabi_dsub+0x3c0>
2000290e:	4667      	mov	r7, ip
20002910:	1a86      	subs	r6, r0, r2
20002912:	1bcb      	subs	r3, r1, r7
20002914:	42b0      	cmp	r0, r6
20002916:	41bf      	sbcs	r7, r7
20002918:	427f      	negs	r7, r7
2000291a:	46b8      	mov	r8, r7
2000291c:	001f      	movs	r7, r3
2000291e:	4643      	mov	r3, r8
20002920:	1aff      	subs	r7, r7, r3
20002922:	003b      	movs	r3, r7
20002924:	46b8      	mov	r8, r7
20002926:	021b      	lsls	r3, r3, #8
20002928:	d500      	bpl.n	2000292c <__aeabi_dsub+0x14c>
2000292a:	e15f      	b.n	20002bec <__aeabi_dsub+0x40c>
2000292c:	4337      	orrs	r7, r6
2000292e:	d19a      	bne.n	20002866 <__aeabi_dsub+0x86>
20002930:	2200      	movs	r2, #0
20002932:	2400      	movs	r4, #0
20002934:	2500      	movs	r5, #0
20002936:	e079      	b.n	20002a2c <__aeabi_dsub+0x24c>
20002938:	2e00      	cmp	r6, #0
2000293a:	dc00      	bgt.n	2000293e <__aeabi_dsub+0x15e>
2000293c:	e0fa      	b.n	20002b34 <__aeabi_dsub+0x354>
2000293e:	2f00      	cmp	r7, #0
20002940:	d100      	bne.n	20002944 <__aeabi_dsub+0x164>
20002942:	e08d      	b.n	20002a60 <__aeabi_dsub+0x280>
20002944:	4b78      	ldr	r3, [pc, #480]	; (20002b28 <__aeabi_dsub+0x348>)
20002946:	429d      	cmp	r5, r3
20002948:	d067      	beq.n	20002a1a <__aeabi_dsub+0x23a>
2000294a:	2380      	movs	r3, #128	; 0x80
2000294c:	4667      	mov	r7, ip
2000294e:	041b      	lsls	r3, r3, #16
20002950:	431f      	orrs	r7, r3
20002952:	46bc      	mov	ip, r7
20002954:	2e38      	cmp	r6, #56	; 0x38
20002956:	dc00      	bgt.n	2000295a <__aeabi_dsub+0x17a>
20002958:	e152      	b.n	20002c00 <__aeabi_dsub+0x420>
2000295a:	4663      	mov	r3, ip
2000295c:	4313      	orrs	r3, r2
2000295e:	1e5a      	subs	r2, r3, #1
20002960:	4193      	sbcs	r3, r2
20002962:	181e      	adds	r6, r3, r0
20002964:	4286      	cmp	r6, r0
20002966:	4180      	sbcs	r0, r0
20002968:	4240      	negs	r0, r0
2000296a:	1809      	adds	r1, r1, r0
2000296c:	020b      	lsls	r3, r1, #8
2000296e:	d400      	bmi.n	20002972 <__aeabi_dsub+0x192>
20002970:	e0be      	b.n	20002af0 <__aeabi_dsub+0x310>
20002972:	4b6d      	ldr	r3, [pc, #436]	; (20002b28 <__aeabi_dsub+0x348>)
20002974:	3501      	adds	r5, #1
20002976:	429d      	cmp	r5, r3
20002978:	d100      	bne.n	2000297c <__aeabi_dsub+0x19c>
2000297a:	e0d2      	b.n	20002b22 <__aeabi_dsub+0x342>
2000297c:	4a6b      	ldr	r2, [pc, #428]	; (20002b2c <__aeabi_dsub+0x34c>)
2000297e:	0873      	lsrs	r3, r6, #1
20002980:	400a      	ands	r2, r1
20002982:	2101      	movs	r1, #1
20002984:	400e      	ands	r6, r1
20002986:	431e      	orrs	r6, r3
20002988:	0851      	lsrs	r1, r2, #1
2000298a:	07d3      	lsls	r3, r2, #31
2000298c:	2207      	movs	r2, #7
2000298e:	431e      	orrs	r6, r3
20002990:	4032      	ands	r2, r6
20002992:	e795      	b.n	200028c0 <__aeabi_dsub+0xe0>
20002994:	001e      	movs	r6, r3
20002996:	4316      	orrs	r6, r2
20002998:	d000      	beq.n	2000299c <__aeabi_dsub+0x1bc>
2000299a:	e745      	b.n	20002828 <__aeabi_dsub+0x48>
2000299c:	e740      	b.n	20002820 <__aeabi_dsub+0x40>
2000299e:	4b62      	ldr	r3, [pc, #392]	; (20002b28 <__aeabi_dsub+0x348>)
200029a0:	429d      	cmp	r5, r3
200029a2:	d03a      	beq.n	20002a1a <__aeabi_dsub+0x23a>
200029a4:	2380      	movs	r3, #128	; 0x80
200029a6:	4667      	mov	r7, ip
200029a8:	041b      	lsls	r3, r3, #16
200029aa:	431f      	orrs	r7, r3
200029ac:	46bc      	mov	ip, r7
200029ae:	2e38      	cmp	r6, #56	; 0x38
200029b0:	dd00      	ble.n	200029b4 <__aeabi_dsub+0x1d4>
200029b2:	e0eb      	b.n	20002b8c <__aeabi_dsub+0x3ac>
200029b4:	2e1f      	cmp	r6, #31
200029b6:	dc00      	bgt.n	200029ba <__aeabi_dsub+0x1da>
200029b8:	e13a      	b.n	20002c30 <__aeabi_dsub+0x450>
200029ba:	0033      	movs	r3, r6
200029bc:	4667      	mov	r7, ip
200029be:	3b20      	subs	r3, #32
200029c0:	40df      	lsrs	r7, r3
200029c2:	003b      	movs	r3, r7
200029c4:	2e20      	cmp	r6, #32
200029c6:	d005      	beq.n	200029d4 <__aeabi_dsub+0x1f4>
200029c8:	2740      	movs	r7, #64	; 0x40
200029ca:	1bbf      	subs	r7, r7, r6
200029cc:	4666      	mov	r6, ip
200029ce:	40be      	lsls	r6, r7
200029d0:	4332      	orrs	r2, r6
200029d2:	4690      	mov	r8, r2
200029d4:	4646      	mov	r6, r8
200029d6:	1e72      	subs	r2, r6, #1
200029d8:	4196      	sbcs	r6, r2
200029da:	4333      	orrs	r3, r6
200029dc:	e0da      	b.n	20002b94 <__aeabi_dsub+0x3b4>
200029de:	2b00      	cmp	r3, #0
200029e0:	d100      	bne.n	200029e4 <__aeabi_dsub+0x204>
200029e2:	e214      	b.n	20002e0e <__aeabi_dsub+0x62e>
200029e4:	4663      	mov	r3, ip
200029e6:	4313      	orrs	r3, r2
200029e8:	d100      	bne.n	200029ec <__aeabi_dsub+0x20c>
200029ea:	e168      	b.n	20002cbe <__aeabi_dsub+0x4de>
200029ec:	2380      	movs	r3, #128	; 0x80
200029ee:	074e      	lsls	r6, r1, #29
200029f0:	08c0      	lsrs	r0, r0, #3
200029f2:	08c9      	lsrs	r1, r1, #3
200029f4:	031b      	lsls	r3, r3, #12
200029f6:	4306      	orrs	r6, r0
200029f8:	4219      	tst	r1, r3
200029fa:	d008      	beq.n	20002a0e <__aeabi_dsub+0x22e>
200029fc:	4660      	mov	r0, ip
200029fe:	08c0      	lsrs	r0, r0, #3
20002a00:	4218      	tst	r0, r3
20002a02:	d104      	bne.n	20002a0e <__aeabi_dsub+0x22e>
20002a04:	4663      	mov	r3, ip
20002a06:	0001      	movs	r1, r0
20002a08:	08d2      	lsrs	r2, r2, #3
20002a0a:	075e      	lsls	r6, r3, #29
20002a0c:	4316      	orrs	r6, r2
20002a0e:	00f3      	lsls	r3, r6, #3
20002a10:	4699      	mov	r9, r3
20002a12:	00c9      	lsls	r1, r1, #3
20002a14:	0f72      	lsrs	r2, r6, #29
20002a16:	4d44      	ldr	r5, [pc, #272]	; (20002b28 <__aeabi_dsub+0x348>)
20002a18:	4311      	orrs	r1, r2
20002a1a:	464b      	mov	r3, r9
20002a1c:	08de      	lsrs	r6, r3, #3
20002a1e:	4b42      	ldr	r3, [pc, #264]	; (20002b28 <__aeabi_dsub+0x348>)
20002a20:	074f      	lsls	r7, r1, #29
20002a22:	4337      	orrs	r7, r6
20002a24:	08ca      	lsrs	r2, r1, #3
20002a26:	429d      	cmp	r5, r3
20002a28:	d100      	bne.n	20002a2c <__aeabi_dsub+0x24c>
20002a2a:	e06e      	b.n	20002b0a <__aeabi_dsub+0x32a>
20002a2c:	0312      	lsls	r2, r2, #12
20002a2e:	056d      	lsls	r5, r5, #21
20002a30:	0b12      	lsrs	r2, r2, #12
20002a32:	0d6d      	lsrs	r5, r5, #21
20002a34:	2100      	movs	r1, #0
20002a36:	0312      	lsls	r2, r2, #12
20002a38:	0b13      	lsrs	r3, r2, #12
20002a3a:	0d0a      	lsrs	r2, r1, #20
20002a3c:	0512      	lsls	r2, r2, #20
20002a3e:	431a      	orrs	r2, r3
20002a40:	4b3b      	ldr	r3, [pc, #236]	; (20002b30 <__aeabi_dsub+0x350>)
20002a42:	052d      	lsls	r5, r5, #20
20002a44:	4013      	ands	r3, r2
20002a46:	432b      	orrs	r3, r5
20002a48:	005b      	lsls	r3, r3, #1
20002a4a:	07e4      	lsls	r4, r4, #31
20002a4c:	085b      	lsrs	r3, r3, #1
20002a4e:	4323      	orrs	r3, r4
20002a50:	0038      	movs	r0, r7
20002a52:	0019      	movs	r1, r3
20002a54:	bc3c      	pop	{r2, r3, r4, r5}
20002a56:	4690      	mov	r8, r2
20002a58:	4699      	mov	r9, r3
20002a5a:	46a2      	mov	sl, r4
20002a5c:	46ab      	mov	fp, r5
20002a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20002a60:	4663      	mov	r3, ip
20002a62:	4313      	orrs	r3, r2
20002a64:	d011      	beq.n	20002a8a <__aeabi_dsub+0x2aa>
20002a66:	1e73      	subs	r3, r6, #1
20002a68:	2b00      	cmp	r3, #0
20002a6a:	d000      	beq.n	20002a6e <__aeabi_dsub+0x28e>
20002a6c:	e107      	b.n	20002c7e <__aeabi_dsub+0x49e>
20002a6e:	1886      	adds	r6, r0, r2
20002a70:	4286      	cmp	r6, r0
20002a72:	4180      	sbcs	r0, r0
20002a74:	4461      	add	r1, ip
20002a76:	4240      	negs	r0, r0
20002a78:	1809      	adds	r1, r1, r0
20002a7a:	2501      	movs	r5, #1
20002a7c:	020b      	lsls	r3, r1, #8
20002a7e:	d537      	bpl.n	20002af0 <__aeabi_dsub+0x310>
20002a80:	2502      	movs	r5, #2
20002a82:	e77b      	b.n	2000297c <__aeabi_dsub+0x19c>
20002a84:	003e      	movs	r6, r7
20002a86:	4661      	mov	r1, ip
20002a88:	4691      	mov	r9, r2
20002a8a:	0035      	movs	r5, r6
20002a8c:	e7c5      	b.n	20002a1a <__aeabi_dsub+0x23a>
20002a8e:	465c      	mov	r4, fp
20002a90:	2d00      	cmp	r5, #0
20002a92:	d000      	beq.n	20002a96 <__aeabi_dsub+0x2b6>
20002a94:	e0e1      	b.n	20002c5a <__aeabi_dsub+0x47a>
20002a96:	000b      	movs	r3, r1
20002a98:	4303      	orrs	r3, r0
20002a9a:	d0f3      	beq.n	20002a84 <__aeabi_dsub+0x2a4>
20002a9c:	1c73      	adds	r3, r6, #1
20002a9e:	d100      	bne.n	20002aa2 <__aeabi_dsub+0x2c2>
20002aa0:	e1ac      	b.n	20002dfc <__aeabi_dsub+0x61c>
20002aa2:	4b21      	ldr	r3, [pc, #132]	; (20002b28 <__aeabi_dsub+0x348>)
20002aa4:	429f      	cmp	r7, r3
20002aa6:	d100      	bne.n	20002aaa <__aeabi_dsub+0x2ca>
20002aa8:	e13a      	b.n	20002d20 <__aeabi_dsub+0x540>
20002aaa:	43f3      	mvns	r3, r6
20002aac:	2b38      	cmp	r3, #56	; 0x38
20002aae:	dd00      	ble.n	20002ab2 <__aeabi_dsub+0x2d2>
20002ab0:	e16f      	b.n	20002d92 <__aeabi_dsub+0x5b2>
20002ab2:	2b1f      	cmp	r3, #31
20002ab4:	dd00      	ble.n	20002ab8 <__aeabi_dsub+0x2d8>
20002ab6:	e18c      	b.n	20002dd2 <__aeabi_dsub+0x5f2>
20002ab8:	2520      	movs	r5, #32
20002aba:	000e      	movs	r6, r1
20002abc:	1aed      	subs	r5, r5, r3
20002abe:	40ae      	lsls	r6, r5
20002ac0:	46b0      	mov	r8, r6
20002ac2:	0006      	movs	r6, r0
20002ac4:	46aa      	mov	sl, r5
20002ac6:	40de      	lsrs	r6, r3
20002ac8:	4645      	mov	r5, r8
20002aca:	4335      	orrs	r5, r6
20002acc:	002e      	movs	r6, r5
20002ace:	4655      	mov	r5, sl
20002ad0:	40d9      	lsrs	r1, r3
20002ad2:	40a8      	lsls	r0, r5
20002ad4:	4663      	mov	r3, ip
20002ad6:	1e45      	subs	r5, r0, #1
20002ad8:	41a8      	sbcs	r0, r5
20002ada:	1a5b      	subs	r3, r3, r1
20002adc:	469c      	mov	ip, r3
20002ade:	4330      	orrs	r0, r6
20002ae0:	1a16      	subs	r6, r2, r0
20002ae2:	42b2      	cmp	r2, r6
20002ae4:	4192      	sbcs	r2, r2
20002ae6:	4663      	mov	r3, ip
20002ae8:	4252      	negs	r2, r2
20002aea:	1a99      	subs	r1, r3, r2
20002aec:	003d      	movs	r5, r7
20002aee:	e6b4      	b.n	2000285a <__aeabi_dsub+0x7a>
20002af0:	2207      	movs	r2, #7
20002af2:	4032      	ands	r2, r6
20002af4:	2a00      	cmp	r2, #0
20002af6:	d000      	beq.n	20002afa <__aeabi_dsub+0x31a>
20002af8:	e6e4      	b.n	200028c4 <__aeabi_dsub+0xe4>
20002afa:	4b0b      	ldr	r3, [pc, #44]	; (20002b28 <__aeabi_dsub+0x348>)
20002afc:	08f6      	lsrs	r6, r6, #3
20002afe:	074f      	lsls	r7, r1, #29
20002b00:	4337      	orrs	r7, r6
20002b02:	08ca      	lsrs	r2, r1, #3
20002b04:	429d      	cmp	r5, r3
20002b06:	d000      	beq.n	20002b0a <__aeabi_dsub+0x32a>
20002b08:	e790      	b.n	20002a2c <__aeabi_dsub+0x24c>
20002b0a:	003b      	movs	r3, r7
20002b0c:	4313      	orrs	r3, r2
20002b0e:	d100      	bne.n	20002b12 <__aeabi_dsub+0x332>
20002b10:	e1a6      	b.n	20002e60 <__aeabi_dsub+0x680>
20002b12:	2380      	movs	r3, #128	; 0x80
20002b14:	031b      	lsls	r3, r3, #12
20002b16:	431a      	orrs	r2, r3
20002b18:	0312      	lsls	r2, r2, #12
20002b1a:	0b12      	lsrs	r2, r2, #12
20002b1c:	4d02      	ldr	r5, [pc, #8]	; (20002b28 <__aeabi_dsub+0x348>)
20002b1e:	e789      	b.n	20002a34 <__aeabi_dsub+0x254>
20002b20:	0015      	movs	r5, r2
20002b22:	2200      	movs	r2, #0
20002b24:	2700      	movs	r7, #0
20002b26:	e785      	b.n	20002a34 <__aeabi_dsub+0x254>
20002b28:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20002b2c:	ff7fffff 			; <UNDEFINED> instruction: 0xff7fffff
20002b30:	800fffff 	strdhi	pc, [pc], -pc	; <UNPREDICTABLE>
20002b34:	2e00      	cmp	r6, #0
20002b36:	d000      	beq.n	20002b3a <__aeabi_dsub+0x35a>
20002b38:	e0c7      	b.n	20002cca <__aeabi_dsub+0x4ea>
20002b3a:	1c6b      	adds	r3, r5, #1
20002b3c:	055e      	lsls	r6, r3, #21
20002b3e:	0d76      	lsrs	r6, r6, #21
20002b40:	2e01      	cmp	r6, #1
20002b42:	dc00      	bgt.n	20002b46 <__aeabi_dsub+0x366>
20002b44:	e0f0      	b.n	20002d28 <__aeabi_dsub+0x548>
20002b46:	4dc8      	ldr	r5, [pc, #800]	; (20002e68 <__aeabi_dsub+0x688>)
20002b48:	42ab      	cmp	r3, r5
20002b4a:	d100      	bne.n	20002b4e <__aeabi_dsub+0x36e>
20002b4c:	e0b9      	b.n	20002cc2 <__aeabi_dsub+0x4e2>
20002b4e:	1885      	adds	r5, r0, r2
20002b50:	000a      	movs	r2, r1
20002b52:	4285      	cmp	r5, r0
20002b54:	4189      	sbcs	r1, r1
20002b56:	4462      	add	r2, ip
20002b58:	4249      	negs	r1, r1
20002b5a:	1851      	adds	r1, r2, r1
20002b5c:	2207      	movs	r2, #7
20002b5e:	07ce      	lsls	r6, r1, #31
20002b60:	086d      	lsrs	r5, r5, #1
20002b62:	432e      	orrs	r6, r5
20002b64:	0849      	lsrs	r1, r1, #1
20002b66:	4032      	ands	r2, r6
20002b68:	001d      	movs	r5, r3
20002b6a:	e6a9      	b.n	200028c0 <__aeabi_dsub+0xe0>
20002b6c:	49bf      	ldr	r1, [pc, #764]	; (20002e6c <__aeabi_dsub+0x68c>)
20002b6e:	1aed      	subs	r5, r5, r3
20002b70:	4011      	ands	r1, r2
20002b72:	2207      	movs	r2, #7
20002b74:	4032      	ands	r2, r6
20002b76:	e6a3      	b.n	200028c0 <__aeabi_dsub+0xe0>
20002b78:	0032      	movs	r2, r6
20002b7a:	3828      	subs	r0, #40	; 0x28
20002b7c:	4082      	lsls	r2, r0
20002b7e:	2600      	movs	r6, #0
20002b80:	e686      	b.n	20002890 <__aeabi_dsub+0xb0>
20002b82:	0030      	movs	r0, r6
20002b84:	f000 fa1a 	bl	20002fbc <__clzsi2>
20002b88:	3020      	adds	r0, #32
20002b8a:	e673      	b.n	20002874 <__aeabi_dsub+0x94>
20002b8c:	4663      	mov	r3, ip
20002b8e:	4313      	orrs	r3, r2
20002b90:	1e5a      	subs	r2, r3, #1
20002b92:	4193      	sbcs	r3, r2
20002b94:	1ac6      	subs	r6, r0, r3
20002b96:	42b0      	cmp	r0, r6
20002b98:	4180      	sbcs	r0, r0
20002b9a:	4240      	negs	r0, r0
20002b9c:	1a09      	subs	r1, r1, r0
20002b9e:	e65c      	b.n	2000285a <__aeabi_dsub+0x7a>
20002ba0:	000e      	movs	r6, r1
20002ba2:	4667      	mov	r7, ip
20002ba4:	4306      	orrs	r6, r0
20002ba6:	4317      	orrs	r7, r2
20002ba8:	2d00      	cmp	r5, #0
20002baa:	d15e      	bne.n	20002c6a <__aeabi_dsub+0x48a>
20002bac:	2e00      	cmp	r6, #0
20002bae:	d000      	beq.n	20002bb2 <__aeabi_dsub+0x3d2>
20002bb0:	e0f3      	b.n	20002d9a <__aeabi_dsub+0x5ba>
20002bb2:	2f00      	cmp	r7, #0
20002bb4:	d100      	bne.n	20002bb8 <__aeabi_dsub+0x3d8>
20002bb6:	e11e      	b.n	20002df6 <__aeabi_dsub+0x616>
20002bb8:	465c      	mov	r4, fp
20002bba:	4661      	mov	r1, ip
20002bbc:	4691      	mov	r9, r2
20002bbe:	e72c      	b.n	20002a1a <__aeabi_dsub+0x23a>
20002bc0:	4fa9      	ldr	r7, [pc, #676]	; (20002e68 <__aeabi_dsub+0x688>)
20002bc2:	42be      	cmp	r6, r7
20002bc4:	d07b      	beq.n	20002cbe <__aeabi_dsub+0x4de>
20002bc6:	001e      	movs	r6, r3
20002bc8:	e6f1      	b.n	200029ae <__aeabi_dsub+0x1ce>
20002bca:	0010      	movs	r0, r2
20002bcc:	3d1f      	subs	r5, #31
20002bce:	40e8      	lsrs	r0, r5
20002bd0:	2b20      	cmp	r3, #32
20002bd2:	d003      	beq.n	20002bdc <__aeabi_dsub+0x3fc>
20002bd4:	2140      	movs	r1, #64	; 0x40
20002bd6:	1acb      	subs	r3, r1, r3
20002bd8:	409a      	lsls	r2, r3
20002bda:	4316      	orrs	r6, r2
20002bdc:	1e73      	subs	r3, r6, #1
20002bde:	419e      	sbcs	r6, r3
20002be0:	2207      	movs	r2, #7
20002be2:	4306      	orrs	r6, r0
20002be4:	4032      	ands	r2, r6
20002be6:	2100      	movs	r1, #0
20002be8:	2500      	movs	r5, #0
20002bea:	e783      	b.n	20002af4 <__aeabi_dsub+0x314>
20002bec:	1a16      	subs	r6, r2, r0
20002bee:	4663      	mov	r3, ip
20002bf0:	42b2      	cmp	r2, r6
20002bf2:	4180      	sbcs	r0, r0
20002bf4:	1a59      	subs	r1, r3, r1
20002bf6:	4240      	negs	r0, r0
20002bf8:	1a0b      	subs	r3, r1, r0
20002bfa:	4698      	mov	r8, r3
20002bfc:	465c      	mov	r4, fp
20002bfe:	e632      	b.n	20002866 <__aeabi_dsub+0x86>
20002c00:	2e1f      	cmp	r6, #31
20002c02:	dd00      	ble.n	20002c06 <__aeabi_dsub+0x426>
20002c04:	e0ab      	b.n	20002d5e <__aeabi_dsub+0x57e>
20002c06:	2720      	movs	r7, #32
20002c08:	1bbb      	subs	r3, r7, r6
20002c0a:	469a      	mov	sl, r3
20002c0c:	4663      	mov	r3, ip
20002c0e:	4657      	mov	r7, sl
20002c10:	40bb      	lsls	r3, r7
20002c12:	4699      	mov	r9, r3
20002c14:	0013      	movs	r3, r2
20002c16:	464f      	mov	r7, r9
20002c18:	40f3      	lsrs	r3, r6
20002c1a:	431f      	orrs	r7, r3
20002c1c:	003b      	movs	r3, r7
20002c1e:	4657      	mov	r7, sl
20002c20:	40ba      	lsls	r2, r7
20002c22:	1e57      	subs	r7, r2, #1
20002c24:	41ba      	sbcs	r2, r7
20002c26:	4313      	orrs	r3, r2
20002c28:	4662      	mov	r2, ip
20002c2a:	40f2      	lsrs	r2, r6
20002c2c:	1889      	adds	r1, r1, r2
20002c2e:	e698      	b.n	20002962 <__aeabi_dsub+0x182>
20002c30:	2720      	movs	r7, #32
20002c32:	1bbb      	subs	r3, r7, r6
20002c34:	469a      	mov	sl, r3
20002c36:	4663      	mov	r3, ip
20002c38:	4657      	mov	r7, sl
20002c3a:	40bb      	lsls	r3, r7
20002c3c:	4699      	mov	r9, r3
20002c3e:	0013      	movs	r3, r2
20002c40:	464f      	mov	r7, r9
20002c42:	40f3      	lsrs	r3, r6
20002c44:	431f      	orrs	r7, r3
20002c46:	003b      	movs	r3, r7
20002c48:	4657      	mov	r7, sl
20002c4a:	40ba      	lsls	r2, r7
20002c4c:	1e57      	subs	r7, r2, #1
20002c4e:	41ba      	sbcs	r2, r7
20002c50:	4313      	orrs	r3, r2
20002c52:	4662      	mov	r2, ip
20002c54:	40f2      	lsrs	r2, r6
20002c56:	1a89      	subs	r1, r1, r2
20002c58:	e79c      	b.n	20002b94 <__aeabi_dsub+0x3b4>
20002c5a:	4b83      	ldr	r3, [pc, #524]	; (20002e68 <__aeabi_dsub+0x688>)
20002c5c:	429f      	cmp	r7, r3
20002c5e:	d05f      	beq.n	20002d20 <__aeabi_dsub+0x540>
20002c60:	2580      	movs	r5, #128	; 0x80
20002c62:	042d      	lsls	r5, r5, #16
20002c64:	4273      	negs	r3, r6
20002c66:	4329      	orrs	r1, r5
20002c68:	e720      	b.n	20002aac <__aeabi_dsub+0x2cc>
20002c6a:	2e00      	cmp	r6, #0
20002c6c:	d10c      	bne.n	20002c88 <__aeabi_dsub+0x4a8>
20002c6e:	2f00      	cmp	r7, #0
20002c70:	d100      	bne.n	20002c74 <__aeabi_dsub+0x494>
20002c72:	e0d0      	b.n	20002e16 <__aeabi_dsub+0x636>
20002c74:	465c      	mov	r4, fp
20002c76:	4661      	mov	r1, ip
20002c78:	4691      	mov	r9, r2
20002c7a:	4d7b      	ldr	r5, [pc, #492]	; (20002e68 <__aeabi_dsub+0x688>)
20002c7c:	e6cd      	b.n	20002a1a <__aeabi_dsub+0x23a>
20002c7e:	4f7a      	ldr	r7, [pc, #488]	; (20002e68 <__aeabi_dsub+0x688>)
20002c80:	42be      	cmp	r6, r7
20002c82:	d01c      	beq.n	20002cbe <__aeabi_dsub+0x4de>
20002c84:	001e      	movs	r6, r3
20002c86:	e665      	b.n	20002954 <__aeabi_dsub+0x174>
20002c88:	2f00      	cmp	r7, #0
20002c8a:	d018      	beq.n	20002cbe <__aeabi_dsub+0x4de>
20002c8c:	08c0      	lsrs	r0, r0, #3
20002c8e:	074e      	lsls	r6, r1, #29
20002c90:	4306      	orrs	r6, r0
20002c92:	2080      	movs	r0, #128	; 0x80
20002c94:	08c9      	lsrs	r1, r1, #3
20002c96:	0300      	lsls	r0, r0, #12
20002c98:	4201      	tst	r1, r0
20002c9a:	d008      	beq.n	20002cae <__aeabi_dsub+0x4ce>
20002c9c:	4663      	mov	r3, ip
20002c9e:	08dc      	lsrs	r4, r3, #3
20002ca0:	4204      	tst	r4, r0
20002ca2:	d104      	bne.n	20002cae <__aeabi_dsub+0x4ce>
20002ca4:	0021      	movs	r1, r4
20002ca6:	46da      	mov	sl, fp
20002ca8:	08d2      	lsrs	r2, r2, #3
20002caa:	075e      	lsls	r6, r3, #29
20002cac:	4316      	orrs	r6, r2
20002cae:	00f3      	lsls	r3, r6, #3
20002cb0:	4699      	mov	r9, r3
20002cb2:	2401      	movs	r4, #1
20002cb4:	4653      	mov	r3, sl
20002cb6:	00c9      	lsls	r1, r1, #3
20002cb8:	0f72      	lsrs	r2, r6, #29
20002cba:	4311      	orrs	r1, r2
20002cbc:	401c      	ands	r4, r3
20002cbe:	4d6a      	ldr	r5, [pc, #424]	; (20002e68 <__aeabi_dsub+0x688>)
20002cc0:	e6ab      	b.n	20002a1a <__aeabi_dsub+0x23a>
20002cc2:	001d      	movs	r5, r3
20002cc4:	2200      	movs	r2, #0
20002cc6:	2700      	movs	r7, #0
20002cc8:	e6b4      	b.n	20002a34 <__aeabi_dsub+0x254>
20002cca:	2d00      	cmp	r5, #0
20002ccc:	d159      	bne.n	20002d82 <__aeabi_dsub+0x5a2>
20002cce:	000b      	movs	r3, r1
20002cd0:	4303      	orrs	r3, r0
20002cd2:	d100      	bne.n	20002cd6 <__aeabi_dsub+0x4f6>
20002cd4:	e6d6      	b.n	20002a84 <__aeabi_dsub+0x2a4>
20002cd6:	1c73      	adds	r3, r6, #1
20002cd8:	d100      	bne.n	20002cdc <__aeabi_dsub+0x4fc>
20002cda:	e0b2      	b.n	20002e42 <__aeabi_dsub+0x662>
20002cdc:	4b62      	ldr	r3, [pc, #392]	; (20002e68 <__aeabi_dsub+0x688>)
20002cde:	429f      	cmp	r7, r3
20002ce0:	d01e      	beq.n	20002d20 <__aeabi_dsub+0x540>
20002ce2:	43f3      	mvns	r3, r6
20002ce4:	2b38      	cmp	r3, #56	; 0x38
20002ce6:	dc6f      	bgt.n	20002dc8 <__aeabi_dsub+0x5e8>
20002ce8:	2b1f      	cmp	r3, #31
20002cea:	dd00      	ble.n	20002cee <__aeabi_dsub+0x50e>
20002cec:	e097      	b.n	20002e1e <__aeabi_dsub+0x63e>
20002cee:	2520      	movs	r5, #32
20002cf0:	000e      	movs	r6, r1
20002cf2:	1aed      	subs	r5, r5, r3
20002cf4:	40ae      	lsls	r6, r5
20002cf6:	46b0      	mov	r8, r6
20002cf8:	0006      	movs	r6, r0
20002cfa:	46aa      	mov	sl, r5
20002cfc:	40de      	lsrs	r6, r3
20002cfe:	4645      	mov	r5, r8
20002d00:	4335      	orrs	r5, r6
20002d02:	002e      	movs	r6, r5
20002d04:	4655      	mov	r5, sl
20002d06:	40a8      	lsls	r0, r5
20002d08:	40d9      	lsrs	r1, r3
20002d0a:	1e45      	subs	r5, r0, #1
20002d0c:	41a8      	sbcs	r0, r5
20002d0e:	448c      	add	ip, r1
20002d10:	4306      	orrs	r6, r0
20002d12:	18b6      	adds	r6, r6, r2
20002d14:	4296      	cmp	r6, r2
20002d16:	4192      	sbcs	r2, r2
20002d18:	4251      	negs	r1, r2
20002d1a:	4461      	add	r1, ip
20002d1c:	003d      	movs	r5, r7
20002d1e:	e625      	b.n	2000296c <__aeabi_dsub+0x18c>
20002d20:	003d      	movs	r5, r7
20002d22:	4661      	mov	r1, ip
20002d24:	4691      	mov	r9, r2
20002d26:	e678      	b.n	20002a1a <__aeabi_dsub+0x23a>
20002d28:	000b      	movs	r3, r1
20002d2a:	4303      	orrs	r3, r0
20002d2c:	2d00      	cmp	r5, #0
20002d2e:	d000      	beq.n	20002d32 <__aeabi_dsub+0x552>
20002d30:	e655      	b.n	200029de <__aeabi_dsub+0x1fe>
20002d32:	2b00      	cmp	r3, #0
20002d34:	d0f5      	beq.n	20002d22 <__aeabi_dsub+0x542>
20002d36:	4663      	mov	r3, ip
20002d38:	4313      	orrs	r3, r2
20002d3a:	d100      	bne.n	20002d3e <__aeabi_dsub+0x55e>
20002d3c:	e66d      	b.n	20002a1a <__aeabi_dsub+0x23a>
20002d3e:	1886      	adds	r6, r0, r2
20002d40:	4286      	cmp	r6, r0
20002d42:	4180      	sbcs	r0, r0
20002d44:	4461      	add	r1, ip
20002d46:	4240      	negs	r0, r0
20002d48:	1809      	adds	r1, r1, r0
20002d4a:	2200      	movs	r2, #0
20002d4c:	020b      	lsls	r3, r1, #8
20002d4e:	d400      	bmi.n	20002d52 <__aeabi_dsub+0x572>
20002d50:	e6d0      	b.n	20002af4 <__aeabi_dsub+0x314>
20002d52:	4b46      	ldr	r3, [pc, #280]	; (20002e6c <__aeabi_dsub+0x68c>)
20002d54:	3501      	adds	r5, #1
20002d56:	4019      	ands	r1, r3
20002d58:	e5b2      	b.n	200028c0 <__aeabi_dsub+0xe0>
20002d5a:	46b1      	mov	r9, r6
20002d5c:	e65d      	b.n	20002a1a <__aeabi_dsub+0x23a>
20002d5e:	0033      	movs	r3, r6
20002d60:	4667      	mov	r7, ip
20002d62:	3b20      	subs	r3, #32
20002d64:	40df      	lsrs	r7, r3
20002d66:	003b      	movs	r3, r7
20002d68:	2e20      	cmp	r6, #32
20002d6a:	d005      	beq.n	20002d78 <__aeabi_dsub+0x598>
20002d6c:	2740      	movs	r7, #64	; 0x40
20002d6e:	1bbf      	subs	r7, r7, r6
20002d70:	4666      	mov	r6, ip
20002d72:	40be      	lsls	r6, r7
20002d74:	4332      	orrs	r2, r6
20002d76:	4690      	mov	r8, r2
20002d78:	4646      	mov	r6, r8
20002d7a:	1e72      	subs	r2, r6, #1
20002d7c:	4196      	sbcs	r6, r2
20002d7e:	4333      	orrs	r3, r6
20002d80:	e5ef      	b.n	20002962 <__aeabi_dsub+0x182>
20002d82:	4b39      	ldr	r3, [pc, #228]	; (20002e68 <__aeabi_dsub+0x688>)
20002d84:	429f      	cmp	r7, r3
20002d86:	d0cb      	beq.n	20002d20 <__aeabi_dsub+0x540>
20002d88:	2580      	movs	r5, #128	; 0x80
20002d8a:	042d      	lsls	r5, r5, #16
20002d8c:	4273      	negs	r3, r6
20002d8e:	4329      	orrs	r1, r5
20002d90:	e7a8      	b.n	20002ce4 <__aeabi_dsub+0x504>
20002d92:	4308      	orrs	r0, r1
20002d94:	1e41      	subs	r1, r0, #1
20002d96:	4188      	sbcs	r0, r1
20002d98:	e6a2      	b.n	20002ae0 <__aeabi_dsub+0x300>
20002d9a:	2f00      	cmp	r7, #0
20002d9c:	d100      	bne.n	20002da0 <__aeabi_dsub+0x5c0>
20002d9e:	e63c      	b.n	20002a1a <__aeabi_dsub+0x23a>
20002da0:	4663      	mov	r3, ip
20002da2:	1a86      	subs	r6, r0, r2
20002da4:	1acf      	subs	r7, r1, r3
20002da6:	42b0      	cmp	r0, r6
20002da8:	419b      	sbcs	r3, r3
20002daa:	425b      	negs	r3, r3
20002dac:	1afb      	subs	r3, r7, r3
20002dae:	4698      	mov	r8, r3
20002db0:	021b      	lsls	r3, r3, #8
20002db2:	d54e      	bpl.n	20002e52 <__aeabi_dsub+0x672>
20002db4:	1a16      	subs	r6, r2, r0
20002db6:	4663      	mov	r3, ip
20002db8:	42b2      	cmp	r2, r6
20002dba:	4192      	sbcs	r2, r2
20002dbc:	1a59      	subs	r1, r3, r1
20002dbe:	4252      	negs	r2, r2
20002dc0:	1a89      	subs	r1, r1, r2
20002dc2:	465c      	mov	r4, fp
20002dc4:	2200      	movs	r2, #0
20002dc6:	e57b      	b.n	200028c0 <__aeabi_dsub+0xe0>
20002dc8:	4301      	orrs	r1, r0
20002dca:	000e      	movs	r6, r1
20002dcc:	1e71      	subs	r1, r6, #1
20002dce:	418e      	sbcs	r6, r1
20002dd0:	e79f      	b.n	20002d12 <__aeabi_dsub+0x532>
20002dd2:	001d      	movs	r5, r3
20002dd4:	000e      	movs	r6, r1
20002dd6:	3d20      	subs	r5, #32
20002dd8:	40ee      	lsrs	r6, r5
20002dda:	46b0      	mov	r8, r6
20002ddc:	2b20      	cmp	r3, #32
20002dde:	d004      	beq.n	20002dea <__aeabi_dsub+0x60a>
20002de0:	2540      	movs	r5, #64	; 0x40
20002de2:	1aeb      	subs	r3, r5, r3
20002de4:	4099      	lsls	r1, r3
20002de6:	4308      	orrs	r0, r1
20002de8:	4681      	mov	r9, r0
20002dea:	4648      	mov	r0, r9
20002dec:	4643      	mov	r3, r8
20002dee:	1e41      	subs	r1, r0, #1
20002df0:	4188      	sbcs	r0, r1
20002df2:	4318      	orrs	r0, r3
20002df4:	e674      	b.n	20002ae0 <__aeabi_dsub+0x300>
20002df6:	2200      	movs	r2, #0
20002df8:	2400      	movs	r4, #0
20002dfa:	e617      	b.n	20002a2c <__aeabi_dsub+0x24c>
20002dfc:	1a16      	subs	r6, r2, r0
20002dfe:	4663      	mov	r3, ip
20002e00:	42b2      	cmp	r2, r6
20002e02:	4192      	sbcs	r2, r2
20002e04:	1a59      	subs	r1, r3, r1
20002e06:	4252      	negs	r2, r2
20002e08:	1a89      	subs	r1, r1, r2
20002e0a:	003d      	movs	r5, r7
20002e0c:	e525      	b.n	2000285a <__aeabi_dsub+0x7a>
20002e0e:	4661      	mov	r1, ip
20002e10:	4691      	mov	r9, r2
20002e12:	4d15      	ldr	r5, [pc, #84]	; (20002e68 <__aeabi_dsub+0x688>)
20002e14:	e601      	b.n	20002a1a <__aeabi_dsub+0x23a>
20002e16:	2280      	movs	r2, #128	; 0x80
20002e18:	2400      	movs	r4, #0
20002e1a:	0312      	lsls	r2, r2, #12
20002e1c:	e679      	b.n	20002b12 <__aeabi_dsub+0x332>
20002e1e:	001d      	movs	r5, r3
20002e20:	000e      	movs	r6, r1
20002e22:	3d20      	subs	r5, #32
20002e24:	40ee      	lsrs	r6, r5
20002e26:	46b0      	mov	r8, r6
20002e28:	2b20      	cmp	r3, #32
20002e2a:	d004      	beq.n	20002e36 <__aeabi_dsub+0x656>
20002e2c:	2540      	movs	r5, #64	; 0x40
20002e2e:	1aeb      	subs	r3, r5, r3
20002e30:	4099      	lsls	r1, r3
20002e32:	4308      	orrs	r0, r1
20002e34:	4681      	mov	r9, r0
20002e36:	464e      	mov	r6, r9
20002e38:	4643      	mov	r3, r8
20002e3a:	1e71      	subs	r1, r6, #1
20002e3c:	418e      	sbcs	r6, r1
20002e3e:	431e      	orrs	r6, r3
20002e40:	e767      	b.n	20002d12 <__aeabi_dsub+0x532>
20002e42:	1886      	adds	r6, r0, r2
20002e44:	4296      	cmp	r6, r2
20002e46:	419b      	sbcs	r3, r3
20002e48:	4461      	add	r1, ip
20002e4a:	425b      	negs	r3, r3
20002e4c:	18c9      	adds	r1, r1, r3
20002e4e:	003d      	movs	r5, r7
20002e50:	e58c      	b.n	2000296c <__aeabi_dsub+0x18c>
20002e52:	4647      	mov	r7, r8
20002e54:	4337      	orrs	r7, r6
20002e56:	d0ce      	beq.n	20002df6 <__aeabi_dsub+0x616>
20002e58:	2207      	movs	r2, #7
20002e5a:	4641      	mov	r1, r8
20002e5c:	4032      	ands	r2, r6
20002e5e:	e649      	b.n	20002af4 <__aeabi_dsub+0x314>
20002e60:	2700      	movs	r7, #0
20002e62:	003a      	movs	r2, r7
20002e64:	e5e6      	b.n	20002a34 <__aeabi_dsub+0x254>
20002e66:	46c0      	nop			; (mov r8, r8)
20002e68:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20002e6c:	ff7fffff 			; <UNDEFINED> instruction: 0xff7fffff

20002e70 <__aeabi_d2iz>:
20002e70:	b530      	push	{r4, r5, lr}
20002e72:	4d14      	ldr	r5, [pc, #80]	; (20002ec4 <__aeabi_d2iz+0x54>)
20002e74:	030a      	lsls	r2, r1, #12
20002e76:	004b      	lsls	r3, r1, #1
20002e78:	0b12      	lsrs	r2, r2, #12
20002e7a:	0d5b      	lsrs	r3, r3, #21
20002e7c:	0fc9      	lsrs	r1, r1, #31
20002e7e:	2400      	movs	r4, #0
20002e80:	42ab      	cmp	r3, r5
20002e82:	dd11      	ble.n	20002ea8 <__aeabi_d2iz+0x38>
20002e84:	4c10      	ldr	r4, [pc, #64]	; (20002ec8 <__aeabi_d2iz+0x58>)
20002e86:	42a3      	cmp	r3, r4
20002e88:	dc10      	bgt.n	20002eac <__aeabi_d2iz+0x3c>
20002e8a:	2480      	movs	r4, #128	; 0x80
20002e8c:	0364      	lsls	r4, r4, #13
20002e8e:	4322      	orrs	r2, r4
20002e90:	4c0e      	ldr	r4, [pc, #56]	; (20002ecc <__aeabi_d2iz+0x5c>)
20002e92:	1ae4      	subs	r4, r4, r3
20002e94:	2c1f      	cmp	r4, #31
20002e96:	dd0c      	ble.n	20002eb2 <__aeabi_d2iz+0x42>
20002e98:	480d      	ldr	r0, [pc, #52]	; (20002ed0 <__aeabi_d2iz+0x60>)
20002e9a:	1ac3      	subs	r3, r0, r3
20002e9c:	40da      	lsrs	r2, r3
20002e9e:	0013      	movs	r3, r2
20002ea0:	425c      	negs	r4, r3
20002ea2:	2900      	cmp	r1, #0
20002ea4:	d100      	bne.n	20002ea8 <__aeabi_d2iz+0x38>
20002ea6:	001c      	movs	r4, r3
20002ea8:	0020      	movs	r0, r4
20002eaa:	bd30      	pop	{r4, r5, pc}
20002eac:	4b09      	ldr	r3, [pc, #36]	; (20002ed4 <__aeabi_d2iz+0x64>)
20002eae:	18cc      	adds	r4, r1, r3
20002eb0:	e7fa      	b.n	20002ea8 <__aeabi_d2iz+0x38>
20002eb2:	4d09      	ldr	r5, [pc, #36]	; (20002ed8 <__aeabi_d2iz+0x68>)
20002eb4:	40e0      	lsrs	r0, r4
20002eb6:	46ac      	mov	ip, r5
20002eb8:	4463      	add	r3, ip
20002eba:	409a      	lsls	r2, r3
20002ebc:	0013      	movs	r3, r2
20002ebe:	4303      	orrs	r3, r0
20002ec0:	e7ee      	b.n	20002ea0 <__aeabi_d2iz+0x30>
20002ec2:	46c0      	nop			; (mov r8, r8)
20002ec4:	000003fe 	strdeq	r0, [r0], -lr
20002ec8:	0000041d 	andeq	r0, r0, sp, lsl r4
20002ecc:	00000433 	andeq	r0, r0, r3, lsr r4
20002ed0:	00000413 	andeq	r0, r0, r3, lsl r4
20002ed4:	7fffffff 	svcvc	0x00ffffff
20002ed8:	fffffbed 			; <UNDEFINED> instruction: 0xfffffbed

20002edc <__aeabi_ui2d>:
20002edc:	b510      	push	{r4, lr}
20002ede:	1e04      	subs	r4, r0, #0
20002ee0:	d025      	beq.n	20002f2e <__aeabi_ui2d+0x52>
20002ee2:	f000 f86b 	bl	20002fbc <__clzsi2>
20002ee6:	4b14      	ldr	r3, [pc, #80]	; (20002f38 <__aeabi_ui2d+0x5c>)
20002ee8:	1a1b      	subs	r3, r3, r0
20002eea:	055b      	lsls	r3, r3, #21
20002eec:	0d5b      	lsrs	r3, r3, #21
20002eee:	280a      	cmp	r0, #10
20002ef0:	dd12      	ble.n	20002f18 <__aeabi_ui2d+0x3c>
20002ef2:	380b      	subs	r0, #11
20002ef4:	4084      	lsls	r4, r0
20002ef6:	2200      	movs	r2, #0
20002ef8:	0324      	lsls	r4, r4, #12
20002efa:	0b24      	lsrs	r4, r4, #12
20002efc:	2100      	movs	r1, #0
20002efe:	0010      	movs	r0, r2
20002f00:	0324      	lsls	r4, r4, #12
20002f02:	0d0a      	lsrs	r2, r1, #20
20002f04:	0b24      	lsrs	r4, r4, #12
20002f06:	0512      	lsls	r2, r2, #20
20002f08:	4322      	orrs	r2, r4
20002f0a:	4c0c      	ldr	r4, [pc, #48]	; (20002f3c <__aeabi_ui2d+0x60>)
20002f0c:	051b      	lsls	r3, r3, #20
20002f0e:	4022      	ands	r2, r4
20002f10:	4313      	orrs	r3, r2
20002f12:	005b      	lsls	r3, r3, #1
20002f14:	0859      	lsrs	r1, r3, #1
20002f16:	bd10      	pop	{r4, pc}
20002f18:	0002      	movs	r2, r0
20002f1a:	0021      	movs	r1, r4
20002f1c:	3215      	adds	r2, #21
20002f1e:	4091      	lsls	r1, r2
20002f20:	000a      	movs	r2, r1
20002f22:	210b      	movs	r1, #11
20002f24:	1a08      	subs	r0, r1, r0
20002f26:	40c4      	lsrs	r4, r0
20002f28:	0324      	lsls	r4, r4, #12
20002f2a:	0b24      	lsrs	r4, r4, #12
20002f2c:	e7e6      	b.n	20002efc <__aeabi_ui2d+0x20>
20002f2e:	2300      	movs	r3, #0
20002f30:	2400      	movs	r4, #0
20002f32:	2200      	movs	r2, #0
20002f34:	e7e2      	b.n	20002efc <__aeabi_ui2d+0x20>
20002f36:	46c0      	nop			; (mov r8, r8)
20002f38:	0000041e 	andeq	r0, r0, lr, lsl r4
20002f3c:	800fffff 	strdhi	pc, [pc], -pc	; <UNPREDICTABLE>

20002f40 <__aeabi_cdrcmple>:
20002f40:	4684      	mov	ip, r0
20002f42:	1c10      	adds	r0, r2, #0
20002f44:	4662      	mov	r2, ip
20002f46:	468c      	mov	ip, r1
20002f48:	1c19      	adds	r1, r3, #0
20002f4a:	4663      	mov	r3, ip
20002f4c:	e000      	b.n	20002f50 <__aeabi_cdcmpeq>
20002f4e:	46c0      	nop			; (mov r8, r8)

20002f50 <__aeabi_cdcmpeq>:
20002f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
20002f52:	f000 f8f1 	bl	20003138 <__ledf2>
20002f56:	2800      	cmp	r0, #0
20002f58:	d401      	bmi.n	20002f5e <__aeabi_cdcmpeq+0xe>
20002f5a:	2100      	movs	r1, #0
20002f5c:	42c8      	cmn	r0, r1
20002f5e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

20002f60 <__aeabi_dcmpeq>:
20002f60:	b510      	push	{r4, lr}
20002f62:	f000 f849 	bl	20002ff8 <__eqdf2>
20002f66:	4240      	negs	r0, r0
20002f68:	3001      	adds	r0, #1
20002f6a:	bd10      	pop	{r4, pc}

20002f6c <__aeabi_dcmplt>:
20002f6c:	b510      	push	{r4, lr}
20002f6e:	f000 f8e3 	bl	20003138 <__ledf2>
20002f72:	2800      	cmp	r0, #0
20002f74:	db01      	blt.n	20002f7a <__aeabi_dcmplt+0xe>
20002f76:	2000      	movs	r0, #0
20002f78:	bd10      	pop	{r4, pc}
20002f7a:	2001      	movs	r0, #1
20002f7c:	bd10      	pop	{r4, pc}
20002f7e:	46c0      	nop			; (mov r8, r8)

20002f80 <__aeabi_dcmple>:
20002f80:	b510      	push	{r4, lr}
20002f82:	f000 f8d9 	bl	20003138 <__ledf2>
20002f86:	2800      	cmp	r0, #0
20002f88:	dd01      	ble.n	20002f8e <__aeabi_dcmple+0xe>
20002f8a:	2000      	movs	r0, #0
20002f8c:	bd10      	pop	{r4, pc}
20002f8e:	2001      	movs	r0, #1
20002f90:	bd10      	pop	{r4, pc}
20002f92:	46c0      	nop			; (mov r8, r8)

20002f94 <__aeabi_dcmpgt>:
20002f94:	b510      	push	{r4, lr}
20002f96:	f000 f86b 	bl	20003070 <__gedf2>
20002f9a:	2800      	cmp	r0, #0
20002f9c:	dc01      	bgt.n	20002fa2 <__aeabi_dcmpgt+0xe>
20002f9e:	2000      	movs	r0, #0
20002fa0:	bd10      	pop	{r4, pc}
20002fa2:	2001      	movs	r0, #1
20002fa4:	bd10      	pop	{r4, pc}
20002fa6:	46c0      	nop			; (mov r8, r8)

20002fa8 <__aeabi_dcmpge>:
20002fa8:	b510      	push	{r4, lr}
20002faa:	f000 f861 	bl	20003070 <__gedf2>
20002fae:	2800      	cmp	r0, #0
20002fb0:	da01      	bge.n	20002fb6 <__aeabi_dcmpge+0xe>
20002fb2:	2000      	movs	r0, #0
20002fb4:	bd10      	pop	{r4, pc}
20002fb6:	2001      	movs	r0, #1
20002fb8:	bd10      	pop	{r4, pc}
20002fba:	46c0      	nop			; (mov r8, r8)

20002fbc <__clzsi2>:
20002fbc:	211c      	movs	r1, #28
20002fbe:	2301      	movs	r3, #1
20002fc0:	041b      	lsls	r3, r3, #16
20002fc2:	4298      	cmp	r0, r3
20002fc4:	d301      	bcc.n	20002fca <__clzsi2+0xe>
20002fc6:	0c00      	lsrs	r0, r0, #16
20002fc8:	3910      	subs	r1, #16
20002fca:	0a1b      	lsrs	r3, r3, #8
20002fcc:	4298      	cmp	r0, r3
20002fce:	d301      	bcc.n	20002fd4 <__clzsi2+0x18>
20002fd0:	0a00      	lsrs	r0, r0, #8
20002fd2:	3908      	subs	r1, #8
20002fd4:	091b      	lsrs	r3, r3, #4
20002fd6:	4298      	cmp	r0, r3
20002fd8:	d301      	bcc.n	20002fde <__clzsi2+0x22>
20002fda:	0900      	lsrs	r0, r0, #4
20002fdc:	3904      	subs	r1, #4
20002fde:	a202      	add	r2, pc, #8	; (adr r2, 20002fe8 <__clzsi2+0x2c>)
20002fe0:	5c10      	ldrb	r0, [r2, r0]
20002fe2:	1840      	adds	r0, r0, r1
20002fe4:	4770      	bx	lr
20002fe6:	46c0      	nop			; (mov r8, r8)
20002fe8:	02020304 	andeq	r0, r2, #4, 6	; 0x10000000
20002fec:	01010101 	tsteq	r1, r1, lsl #2
	...

20002ff8 <__eqdf2>:
20002ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
20002ffa:	464f      	mov	r7, r9
20002ffc:	4646      	mov	r6, r8
20002ffe:	46d6      	mov	lr, sl
20003000:	4684      	mov	ip, r0
20003002:	b5c0      	push	{r6, r7, lr}
20003004:	4680      	mov	r8, r0
20003006:	4e19      	ldr	r6, [pc, #100]	; (2000306c <__eqdf2+0x74>)
20003008:	0318      	lsls	r0, r3, #12
2000300a:	030f      	lsls	r7, r1, #12
2000300c:	004d      	lsls	r5, r1, #1
2000300e:	0b00      	lsrs	r0, r0, #12
20003010:	005c      	lsls	r4, r3, #1
20003012:	4682      	mov	sl, r0
20003014:	0b3f      	lsrs	r7, r7, #12
20003016:	0d6d      	lsrs	r5, r5, #21
20003018:	0fc9      	lsrs	r1, r1, #31
2000301a:	4691      	mov	r9, r2
2000301c:	0d64      	lsrs	r4, r4, #21
2000301e:	0fdb      	lsrs	r3, r3, #31
20003020:	2001      	movs	r0, #1
20003022:	42b5      	cmp	r5, r6
20003024:	d00a      	beq.n	2000303c <__eqdf2+0x44>
20003026:	42b4      	cmp	r4, r6
20003028:	d003      	beq.n	20003032 <__eqdf2+0x3a>
2000302a:	42a5      	cmp	r5, r4
2000302c:	d101      	bne.n	20003032 <__eqdf2+0x3a>
2000302e:	4557      	cmp	r7, sl
20003030:	d00c      	beq.n	2000304c <__eqdf2+0x54>
20003032:	bc1c      	pop	{r2, r3, r4}
20003034:	4690      	mov	r8, r2
20003036:	4699      	mov	r9, r3
20003038:	46a2      	mov	sl, r4
2000303a:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000303c:	4666      	mov	r6, ip
2000303e:	433e      	orrs	r6, r7
20003040:	d1f7      	bne.n	20003032 <__eqdf2+0x3a>
20003042:	42ac      	cmp	r4, r5
20003044:	d1f5      	bne.n	20003032 <__eqdf2+0x3a>
20003046:	4654      	mov	r4, sl
20003048:	4314      	orrs	r4, r2
2000304a:	d1f2      	bne.n	20003032 <__eqdf2+0x3a>
2000304c:	2001      	movs	r0, #1
2000304e:	45c8      	cmp	r8, r9
20003050:	d1ef      	bne.n	20003032 <__eqdf2+0x3a>
20003052:	4299      	cmp	r1, r3
20003054:	d007      	beq.n	20003066 <__eqdf2+0x6e>
20003056:	2d00      	cmp	r5, #0
20003058:	d1eb      	bne.n	20003032 <__eqdf2+0x3a>
2000305a:	4663      	mov	r3, ip
2000305c:	431f      	orrs	r7, r3
2000305e:	0038      	movs	r0, r7
20003060:	1e47      	subs	r7, r0, #1
20003062:	41b8      	sbcs	r0, r7
20003064:	e7e5      	b.n	20003032 <__eqdf2+0x3a>
20003066:	2000      	movs	r0, #0
20003068:	e7e3      	b.n	20003032 <__eqdf2+0x3a>
2000306a:	46c0      	nop			; (mov r8, r8)
2000306c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20003070 <__gedf2>:
20003070:	b5f0      	push	{r4, r5, r6, r7, lr}
20003072:	464f      	mov	r7, r9
20003074:	4646      	mov	r6, r8
20003076:	46d6      	mov	lr, sl
20003078:	004d      	lsls	r5, r1, #1
2000307a:	b5c0      	push	{r6, r7, lr}
2000307c:	030e      	lsls	r6, r1, #12
2000307e:	0fc9      	lsrs	r1, r1, #31
20003080:	468a      	mov	sl, r1
20003082:	492c      	ldr	r1, [pc, #176]	; (20003134 <__gedf2+0xc4>)
20003084:	031f      	lsls	r7, r3, #12
20003086:	005c      	lsls	r4, r3, #1
20003088:	4680      	mov	r8, r0
2000308a:	0b36      	lsrs	r6, r6, #12
2000308c:	0d6d      	lsrs	r5, r5, #21
2000308e:	4691      	mov	r9, r2
20003090:	0b3f      	lsrs	r7, r7, #12
20003092:	0d64      	lsrs	r4, r4, #21
20003094:	0fdb      	lsrs	r3, r3, #31
20003096:	428d      	cmp	r5, r1
20003098:	d01e      	beq.n	200030d8 <__gedf2+0x68>
2000309a:	428c      	cmp	r4, r1
2000309c:	d016      	beq.n	200030cc <__gedf2+0x5c>
2000309e:	2d00      	cmp	r5, #0
200030a0:	d11e      	bne.n	200030e0 <__gedf2+0x70>
200030a2:	4330      	orrs	r0, r6
200030a4:	4684      	mov	ip, r0
200030a6:	2c00      	cmp	r4, #0
200030a8:	d101      	bne.n	200030ae <__gedf2+0x3e>
200030aa:	433a      	orrs	r2, r7
200030ac:	d023      	beq.n	200030f6 <__gedf2+0x86>
200030ae:	4662      	mov	r2, ip
200030b0:	2a00      	cmp	r2, #0
200030b2:	d01a      	beq.n	200030ea <__gedf2+0x7a>
200030b4:	459a      	cmp	sl, r3
200030b6:	d029      	beq.n	2000310c <__gedf2+0x9c>
200030b8:	4651      	mov	r1, sl
200030ba:	2002      	movs	r0, #2
200030bc:	3901      	subs	r1, #1
200030be:	4008      	ands	r0, r1
200030c0:	3801      	subs	r0, #1
200030c2:	bc1c      	pop	{r2, r3, r4}
200030c4:	4690      	mov	r8, r2
200030c6:	4699      	mov	r9, r3
200030c8:	46a2      	mov	sl, r4
200030ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
200030cc:	0039      	movs	r1, r7
200030ce:	4311      	orrs	r1, r2
200030d0:	d0e5      	beq.n	2000309e <__gedf2+0x2e>
200030d2:	2002      	movs	r0, #2
200030d4:	4240      	negs	r0, r0
200030d6:	e7f4      	b.n	200030c2 <__gedf2+0x52>
200030d8:	4330      	orrs	r0, r6
200030da:	d1fa      	bne.n	200030d2 <__gedf2+0x62>
200030dc:	42ac      	cmp	r4, r5
200030de:	d00f      	beq.n	20003100 <__gedf2+0x90>
200030e0:	2c00      	cmp	r4, #0
200030e2:	d10f      	bne.n	20003104 <__gedf2+0x94>
200030e4:	433a      	orrs	r2, r7
200030e6:	d0e7      	beq.n	200030b8 <__gedf2+0x48>
200030e8:	e00c      	b.n	20003104 <__gedf2+0x94>
200030ea:	2201      	movs	r2, #1
200030ec:	3b01      	subs	r3, #1
200030ee:	4393      	bics	r3, r2
200030f0:	0018      	movs	r0, r3
200030f2:	3001      	adds	r0, #1
200030f4:	e7e5      	b.n	200030c2 <__gedf2+0x52>
200030f6:	4663      	mov	r3, ip
200030f8:	2000      	movs	r0, #0
200030fa:	2b00      	cmp	r3, #0
200030fc:	d0e1      	beq.n	200030c2 <__gedf2+0x52>
200030fe:	e7db      	b.n	200030b8 <__gedf2+0x48>
20003100:	433a      	orrs	r2, r7
20003102:	d1e6      	bne.n	200030d2 <__gedf2+0x62>
20003104:	459a      	cmp	sl, r3
20003106:	d1d7      	bne.n	200030b8 <__gedf2+0x48>
20003108:	42a5      	cmp	r5, r4
2000310a:	dcd5      	bgt.n	200030b8 <__gedf2+0x48>
2000310c:	42a5      	cmp	r5, r4
2000310e:	db05      	blt.n	2000311c <__gedf2+0xac>
20003110:	42be      	cmp	r6, r7
20003112:	d8d1      	bhi.n	200030b8 <__gedf2+0x48>
20003114:	d008      	beq.n	20003128 <__gedf2+0xb8>
20003116:	2000      	movs	r0, #0
20003118:	42be      	cmp	r6, r7
2000311a:	d2d2      	bcs.n	200030c2 <__gedf2+0x52>
2000311c:	4650      	mov	r0, sl
2000311e:	2301      	movs	r3, #1
20003120:	3801      	subs	r0, #1
20003122:	4398      	bics	r0, r3
20003124:	3001      	adds	r0, #1
20003126:	e7cc      	b.n	200030c2 <__gedf2+0x52>
20003128:	45c8      	cmp	r8, r9
2000312a:	d8c5      	bhi.n	200030b8 <__gedf2+0x48>
2000312c:	2000      	movs	r0, #0
2000312e:	45c8      	cmp	r8, r9
20003130:	d3f4      	bcc.n	2000311c <__gedf2+0xac>
20003132:	e7c6      	b.n	200030c2 <__gedf2+0x52>
20003134:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20003138 <__ledf2>:
20003138:	b5f0      	push	{r4, r5, r6, r7, lr}
2000313a:	464f      	mov	r7, r9
2000313c:	4646      	mov	r6, r8
2000313e:	46d6      	mov	lr, sl
20003140:	004d      	lsls	r5, r1, #1
20003142:	b5c0      	push	{r6, r7, lr}
20003144:	030e      	lsls	r6, r1, #12
20003146:	0fc9      	lsrs	r1, r1, #31
20003148:	468a      	mov	sl, r1
2000314a:	492e      	ldr	r1, [pc, #184]	; (20003204 <__ledf2+0xcc>)
2000314c:	031f      	lsls	r7, r3, #12
2000314e:	005c      	lsls	r4, r3, #1
20003150:	4680      	mov	r8, r0
20003152:	0b36      	lsrs	r6, r6, #12
20003154:	0d6d      	lsrs	r5, r5, #21
20003156:	4691      	mov	r9, r2
20003158:	0b3f      	lsrs	r7, r7, #12
2000315a:	0d64      	lsrs	r4, r4, #21
2000315c:	0fdb      	lsrs	r3, r3, #31
2000315e:	428d      	cmp	r5, r1
20003160:	d018      	beq.n	20003194 <__ledf2+0x5c>
20003162:	428c      	cmp	r4, r1
20003164:	d011      	beq.n	2000318a <__ledf2+0x52>
20003166:	2d00      	cmp	r5, #0
20003168:	d118      	bne.n	2000319c <__ledf2+0x64>
2000316a:	4330      	orrs	r0, r6
2000316c:	4684      	mov	ip, r0
2000316e:	2c00      	cmp	r4, #0
20003170:	d11e      	bne.n	200031b0 <__ledf2+0x78>
20003172:	433a      	orrs	r2, r7
20003174:	d11c      	bne.n	200031b0 <__ledf2+0x78>
20003176:	4663      	mov	r3, ip
20003178:	2000      	movs	r0, #0
2000317a:	2b00      	cmp	r3, #0
2000317c:	d030      	beq.n	200031e0 <__ledf2+0xa8>
2000317e:	4651      	mov	r1, sl
20003180:	2002      	movs	r0, #2
20003182:	3901      	subs	r1, #1
20003184:	4008      	ands	r0, r1
20003186:	3801      	subs	r0, #1
20003188:	e02a      	b.n	200031e0 <__ledf2+0xa8>
2000318a:	0039      	movs	r1, r7
2000318c:	4311      	orrs	r1, r2
2000318e:	d0ea      	beq.n	20003166 <__ledf2+0x2e>
20003190:	2002      	movs	r0, #2
20003192:	e025      	b.n	200031e0 <__ledf2+0xa8>
20003194:	4330      	orrs	r0, r6
20003196:	d1fb      	bne.n	20003190 <__ledf2+0x58>
20003198:	42ac      	cmp	r4, r5
2000319a:	d026      	beq.n	200031ea <__ledf2+0xb2>
2000319c:	2c00      	cmp	r4, #0
2000319e:	d126      	bne.n	200031ee <__ledf2+0xb6>
200031a0:	433a      	orrs	r2, r7
200031a2:	d124      	bne.n	200031ee <__ledf2+0xb6>
200031a4:	4651      	mov	r1, sl
200031a6:	2002      	movs	r0, #2
200031a8:	3901      	subs	r1, #1
200031aa:	4008      	ands	r0, r1
200031ac:	3801      	subs	r0, #1
200031ae:	e017      	b.n	200031e0 <__ledf2+0xa8>
200031b0:	4662      	mov	r2, ip
200031b2:	2a00      	cmp	r2, #0
200031b4:	d00f      	beq.n	200031d6 <__ledf2+0x9e>
200031b6:	459a      	cmp	sl, r3
200031b8:	d1e1      	bne.n	2000317e <__ledf2+0x46>
200031ba:	42a5      	cmp	r5, r4
200031bc:	db05      	blt.n	200031ca <__ledf2+0x92>
200031be:	42be      	cmp	r6, r7
200031c0:	d8dd      	bhi.n	2000317e <__ledf2+0x46>
200031c2:	d019      	beq.n	200031f8 <__ledf2+0xc0>
200031c4:	2000      	movs	r0, #0
200031c6:	42be      	cmp	r6, r7
200031c8:	d20a      	bcs.n	200031e0 <__ledf2+0xa8>
200031ca:	4650      	mov	r0, sl
200031cc:	2301      	movs	r3, #1
200031ce:	3801      	subs	r0, #1
200031d0:	4398      	bics	r0, r3
200031d2:	3001      	adds	r0, #1
200031d4:	e004      	b.n	200031e0 <__ledf2+0xa8>
200031d6:	2201      	movs	r2, #1
200031d8:	3b01      	subs	r3, #1
200031da:	4393      	bics	r3, r2
200031dc:	0018      	movs	r0, r3
200031de:	3001      	adds	r0, #1
200031e0:	bc1c      	pop	{r2, r3, r4}
200031e2:	4690      	mov	r8, r2
200031e4:	4699      	mov	r9, r3
200031e6:	46a2      	mov	sl, r4
200031e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
200031ea:	433a      	orrs	r2, r7
200031ec:	d1d0      	bne.n	20003190 <__ledf2+0x58>
200031ee:	459a      	cmp	sl, r3
200031f0:	d1c5      	bne.n	2000317e <__ledf2+0x46>
200031f2:	42a5      	cmp	r5, r4
200031f4:	dcc3      	bgt.n	2000317e <__ledf2+0x46>
200031f6:	e7e0      	b.n	200031ba <__ledf2+0x82>
200031f8:	45c8      	cmp	r8, r9
200031fa:	d8c0      	bhi.n	2000317e <__ledf2+0x46>
200031fc:	2000      	movs	r0, #0
200031fe:	45c8      	cmp	r8, r9
20003200:	d3e3      	bcc.n	200031ca <__ledf2+0x92>
20003202:	e7ed      	b.n	200031e0 <__ledf2+0xa8>
20003204:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20003208 <__aeabi_dadd>:
20003208:	b5f0      	push	{r4, r5, r6, r7, lr}
2000320a:	464f      	mov	r7, r9
2000320c:	4646      	mov	r6, r8
2000320e:	46d6      	mov	lr, sl
20003210:	000c      	movs	r4, r1
20003212:	0309      	lsls	r1, r1, #12
20003214:	b5c0      	push	{r6, r7, lr}
20003216:	0a49      	lsrs	r1, r1, #9
20003218:	0f47      	lsrs	r7, r0, #29
2000321a:	005e      	lsls	r6, r3, #1
2000321c:	4339      	orrs	r1, r7
2000321e:	031f      	lsls	r7, r3, #12
20003220:	0fdb      	lsrs	r3, r3, #31
20003222:	469c      	mov	ip, r3
20003224:	0065      	lsls	r5, r4, #1
20003226:	0a7b      	lsrs	r3, r7, #9
20003228:	0f57      	lsrs	r7, r2, #29
2000322a:	431f      	orrs	r7, r3
2000322c:	0d6d      	lsrs	r5, r5, #21
2000322e:	0fe4      	lsrs	r4, r4, #31
20003230:	0d76      	lsrs	r6, r6, #21
20003232:	46a1      	mov	r9, r4
20003234:	00c0      	lsls	r0, r0, #3
20003236:	46b8      	mov	r8, r7
20003238:	00d2      	lsls	r2, r2, #3
2000323a:	1bab      	subs	r3, r5, r6
2000323c:	4564      	cmp	r4, ip
2000323e:	d07b      	beq.n	20003338 <__aeabi_dadd+0x130>
20003240:	2b00      	cmp	r3, #0
20003242:	dd5f      	ble.n	20003304 <__aeabi_dadd+0xfc>
20003244:	2e00      	cmp	r6, #0
20003246:	d000      	beq.n	2000324a <__aeabi_dadd+0x42>
20003248:	e0a4      	b.n	20003394 <__aeabi_dadd+0x18c>
2000324a:	003e      	movs	r6, r7
2000324c:	4316      	orrs	r6, r2
2000324e:	d100      	bne.n	20003252 <__aeabi_dadd+0x4a>
20003250:	e112      	b.n	20003478 <__aeabi_dadd+0x270>
20003252:	1e5e      	subs	r6, r3, #1
20003254:	2e00      	cmp	r6, #0
20003256:	d000      	beq.n	2000325a <__aeabi_dadd+0x52>
20003258:	e19e      	b.n	20003598 <__aeabi_dadd+0x390>
2000325a:	1a87      	subs	r7, r0, r2
2000325c:	4643      	mov	r3, r8
2000325e:	42b8      	cmp	r0, r7
20003260:	4180      	sbcs	r0, r0
20003262:	2501      	movs	r5, #1
20003264:	1ac9      	subs	r1, r1, r3
20003266:	4240      	negs	r0, r0
20003268:	1a09      	subs	r1, r1, r0
2000326a:	020b      	lsls	r3, r1, #8
2000326c:	d400      	bmi.n	20003270 <__aeabi_dadd+0x68>
2000326e:	e131      	b.n	200034d4 <__aeabi_dadd+0x2cc>
20003270:	0249      	lsls	r1, r1, #9
20003272:	0a4e      	lsrs	r6, r1, #9
20003274:	2e00      	cmp	r6, #0
20003276:	d100      	bne.n	2000327a <__aeabi_dadd+0x72>
20003278:	e16e      	b.n	20003558 <__aeabi_dadd+0x350>
2000327a:	0030      	movs	r0, r6
2000327c:	f7ff fe9e 	bl	20002fbc <__clzsi2>
20003280:	0003      	movs	r3, r0
20003282:	3b08      	subs	r3, #8
20003284:	2b1f      	cmp	r3, #31
20003286:	dd00      	ble.n	2000328a <__aeabi_dadd+0x82>
20003288:	e161      	b.n	2000354e <__aeabi_dadd+0x346>
2000328a:	2220      	movs	r2, #32
2000328c:	0039      	movs	r1, r7
2000328e:	1ad2      	subs	r2, r2, r3
20003290:	409e      	lsls	r6, r3
20003292:	40d1      	lsrs	r1, r2
20003294:	409f      	lsls	r7, r3
20003296:	430e      	orrs	r6, r1
20003298:	429d      	cmp	r5, r3
2000329a:	dd00      	ble.n	2000329e <__aeabi_dadd+0x96>
2000329c:	e151      	b.n	20003542 <__aeabi_dadd+0x33a>
2000329e:	1b5d      	subs	r5, r3, r5
200032a0:	1c6b      	adds	r3, r5, #1
200032a2:	2b1f      	cmp	r3, #31
200032a4:	dd00      	ble.n	200032a8 <__aeabi_dadd+0xa0>
200032a6:	e17c      	b.n	200035a2 <__aeabi_dadd+0x39a>
200032a8:	2120      	movs	r1, #32
200032aa:	1ac9      	subs	r1, r1, r3
200032ac:	003d      	movs	r5, r7
200032ae:	0030      	movs	r0, r6
200032b0:	408f      	lsls	r7, r1
200032b2:	4088      	lsls	r0, r1
200032b4:	40dd      	lsrs	r5, r3
200032b6:	1e79      	subs	r1, r7, #1
200032b8:	418f      	sbcs	r7, r1
200032ba:	0031      	movs	r1, r6
200032bc:	2207      	movs	r2, #7
200032be:	4328      	orrs	r0, r5
200032c0:	40d9      	lsrs	r1, r3
200032c2:	2500      	movs	r5, #0
200032c4:	4307      	orrs	r7, r0
200032c6:	403a      	ands	r2, r7
200032c8:	2a00      	cmp	r2, #0
200032ca:	d009      	beq.n	200032e0 <__aeabi_dadd+0xd8>
200032cc:	230f      	movs	r3, #15
200032ce:	403b      	ands	r3, r7
200032d0:	2b04      	cmp	r3, #4
200032d2:	d005      	beq.n	200032e0 <__aeabi_dadd+0xd8>
200032d4:	1d3b      	adds	r3, r7, #4
200032d6:	42bb      	cmp	r3, r7
200032d8:	41bf      	sbcs	r7, r7
200032da:	427f      	negs	r7, r7
200032dc:	19c9      	adds	r1, r1, r7
200032de:	001f      	movs	r7, r3
200032e0:	020b      	lsls	r3, r1, #8
200032e2:	d400      	bmi.n	200032e6 <__aeabi_dadd+0xde>
200032e4:	e226      	b.n	20003734 <__aeabi_dadd+0x52c>
200032e6:	1c6a      	adds	r2, r5, #1
200032e8:	4bc6      	ldr	r3, [pc, #792]	; (20003604 <__aeabi_dadd+0x3fc>)
200032ea:	0555      	lsls	r5, r2, #21
200032ec:	0d6d      	lsrs	r5, r5, #21
200032ee:	429a      	cmp	r2, r3
200032f0:	d100      	bne.n	200032f4 <__aeabi_dadd+0xec>
200032f2:	e106      	b.n	20003502 <__aeabi_dadd+0x2fa>
200032f4:	4ac4      	ldr	r2, [pc, #784]	; (20003608 <__aeabi_dadd+0x400>)
200032f6:	08ff      	lsrs	r7, r7, #3
200032f8:	400a      	ands	r2, r1
200032fa:	0753      	lsls	r3, r2, #29
200032fc:	0252      	lsls	r2, r2, #9
200032fe:	433b      	orrs	r3, r7
20003300:	0b12      	lsrs	r2, r2, #12
20003302:	e08e      	b.n	20003422 <__aeabi_dadd+0x21a>
20003304:	2b00      	cmp	r3, #0
20003306:	d000      	beq.n	2000330a <__aeabi_dadd+0x102>
20003308:	e0b8      	b.n	2000347c <__aeabi_dadd+0x274>
2000330a:	1c6b      	adds	r3, r5, #1
2000330c:	055b      	lsls	r3, r3, #21
2000330e:	0d5b      	lsrs	r3, r3, #21
20003310:	2b01      	cmp	r3, #1
20003312:	dc00      	bgt.n	20003316 <__aeabi_dadd+0x10e>
20003314:	e130      	b.n	20003578 <__aeabi_dadd+0x370>
20003316:	1a87      	subs	r7, r0, r2
20003318:	4643      	mov	r3, r8
2000331a:	42b8      	cmp	r0, r7
2000331c:	41b6      	sbcs	r6, r6
2000331e:	1acb      	subs	r3, r1, r3
20003320:	4276      	negs	r6, r6
20003322:	1b9e      	subs	r6, r3, r6
20003324:	0233      	lsls	r3, r6, #8
20003326:	d500      	bpl.n	2000332a <__aeabi_dadd+0x122>
20003328:	e14c      	b.n	200035c4 <__aeabi_dadd+0x3bc>
2000332a:	003b      	movs	r3, r7
2000332c:	4333      	orrs	r3, r6
2000332e:	d1a1      	bne.n	20003274 <__aeabi_dadd+0x6c>
20003330:	2200      	movs	r2, #0
20003332:	2400      	movs	r4, #0
20003334:	2500      	movs	r5, #0
20003336:	e070      	b.n	2000341a <__aeabi_dadd+0x212>
20003338:	2b00      	cmp	r3, #0
2000333a:	dc00      	bgt.n	2000333e <__aeabi_dadd+0x136>
2000333c:	e0e5      	b.n	2000350a <__aeabi_dadd+0x302>
2000333e:	2e00      	cmp	r6, #0
20003340:	d100      	bne.n	20003344 <__aeabi_dadd+0x13c>
20003342:	e083      	b.n	2000344c <__aeabi_dadd+0x244>
20003344:	4eaf      	ldr	r6, [pc, #700]	; (20003604 <__aeabi_dadd+0x3fc>)
20003346:	42b5      	cmp	r5, r6
20003348:	d060      	beq.n	2000340c <__aeabi_dadd+0x204>
2000334a:	2680      	movs	r6, #128	; 0x80
2000334c:	0436      	lsls	r6, r6, #16
2000334e:	4337      	orrs	r7, r6
20003350:	46b8      	mov	r8, r7
20003352:	2b38      	cmp	r3, #56	; 0x38
20003354:	dc00      	bgt.n	20003358 <__aeabi_dadd+0x150>
20003356:	e13e      	b.n	200035d6 <__aeabi_dadd+0x3ce>
20003358:	4643      	mov	r3, r8
2000335a:	4313      	orrs	r3, r2
2000335c:	001f      	movs	r7, r3
2000335e:	1e7a      	subs	r2, r7, #1
20003360:	4197      	sbcs	r7, r2
20003362:	183f      	adds	r7, r7, r0
20003364:	4287      	cmp	r7, r0
20003366:	4180      	sbcs	r0, r0
20003368:	4240      	negs	r0, r0
2000336a:	1809      	adds	r1, r1, r0
2000336c:	020b      	lsls	r3, r1, #8
2000336e:	d400      	bmi.n	20003372 <__aeabi_dadd+0x16a>
20003370:	e0b0      	b.n	200034d4 <__aeabi_dadd+0x2cc>
20003372:	4ba4      	ldr	r3, [pc, #656]	; (20003604 <__aeabi_dadd+0x3fc>)
20003374:	3501      	adds	r5, #1
20003376:	429d      	cmp	r5, r3
20003378:	d100      	bne.n	2000337c <__aeabi_dadd+0x174>
2000337a:	e0c3      	b.n	20003504 <__aeabi_dadd+0x2fc>
2000337c:	4aa2      	ldr	r2, [pc, #648]	; (20003608 <__aeabi_dadd+0x400>)
2000337e:	087b      	lsrs	r3, r7, #1
20003380:	400a      	ands	r2, r1
20003382:	2101      	movs	r1, #1
20003384:	400f      	ands	r7, r1
20003386:	431f      	orrs	r7, r3
20003388:	0851      	lsrs	r1, r2, #1
2000338a:	07d3      	lsls	r3, r2, #31
2000338c:	2207      	movs	r2, #7
2000338e:	431f      	orrs	r7, r3
20003390:	403a      	ands	r2, r7
20003392:	e799      	b.n	200032c8 <__aeabi_dadd+0xc0>
20003394:	4e9b      	ldr	r6, [pc, #620]	; (20003604 <__aeabi_dadd+0x3fc>)
20003396:	42b5      	cmp	r5, r6
20003398:	d038      	beq.n	2000340c <__aeabi_dadd+0x204>
2000339a:	2680      	movs	r6, #128	; 0x80
2000339c:	0436      	lsls	r6, r6, #16
2000339e:	4337      	orrs	r7, r6
200033a0:	46b8      	mov	r8, r7
200033a2:	2b38      	cmp	r3, #56	; 0x38
200033a4:	dd00      	ble.n	200033a8 <__aeabi_dadd+0x1a0>
200033a6:	e0dc      	b.n	20003562 <__aeabi_dadd+0x35a>
200033a8:	2b1f      	cmp	r3, #31
200033aa:	dc00      	bgt.n	200033ae <__aeabi_dadd+0x1a6>
200033ac:	e130      	b.n	20003610 <__aeabi_dadd+0x408>
200033ae:	001e      	movs	r6, r3
200033b0:	4647      	mov	r7, r8
200033b2:	3e20      	subs	r6, #32
200033b4:	40f7      	lsrs	r7, r6
200033b6:	46bc      	mov	ip, r7
200033b8:	2b20      	cmp	r3, #32
200033ba:	d004      	beq.n	200033c6 <__aeabi_dadd+0x1be>
200033bc:	2640      	movs	r6, #64	; 0x40
200033be:	1af3      	subs	r3, r6, r3
200033c0:	4646      	mov	r6, r8
200033c2:	409e      	lsls	r6, r3
200033c4:	4332      	orrs	r2, r6
200033c6:	0017      	movs	r7, r2
200033c8:	4663      	mov	r3, ip
200033ca:	1e7a      	subs	r2, r7, #1
200033cc:	4197      	sbcs	r7, r2
200033ce:	431f      	orrs	r7, r3
200033d0:	e0cc      	b.n	2000356c <__aeabi_dadd+0x364>
200033d2:	2b00      	cmp	r3, #0
200033d4:	d100      	bne.n	200033d8 <__aeabi_dadd+0x1d0>
200033d6:	e204      	b.n	200037e2 <__aeabi_dadd+0x5da>
200033d8:	4643      	mov	r3, r8
200033da:	4313      	orrs	r3, r2
200033dc:	d100      	bne.n	200033e0 <__aeabi_dadd+0x1d8>
200033de:	e159      	b.n	20003694 <__aeabi_dadd+0x48c>
200033e0:	074b      	lsls	r3, r1, #29
200033e2:	08c0      	lsrs	r0, r0, #3
200033e4:	4318      	orrs	r0, r3
200033e6:	2380      	movs	r3, #128	; 0x80
200033e8:	08c9      	lsrs	r1, r1, #3
200033ea:	031b      	lsls	r3, r3, #12
200033ec:	4219      	tst	r1, r3
200033ee:	d008      	beq.n	20003402 <__aeabi_dadd+0x1fa>
200033f0:	4645      	mov	r5, r8
200033f2:	08ed      	lsrs	r5, r5, #3
200033f4:	421d      	tst	r5, r3
200033f6:	d104      	bne.n	20003402 <__aeabi_dadd+0x1fa>
200033f8:	4643      	mov	r3, r8
200033fa:	08d0      	lsrs	r0, r2, #3
200033fc:	0759      	lsls	r1, r3, #29
200033fe:	4308      	orrs	r0, r1
20003400:	0029      	movs	r1, r5
20003402:	0f42      	lsrs	r2, r0, #29
20003404:	00c9      	lsls	r1, r1, #3
20003406:	4d7f      	ldr	r5, [pc, #508]	; (20003604 <__aeabi_dadd+0x3fc>)
20003408:	4311      	orrs	r1, r2
2000340a:	00c0      	lsls	r0, r0, #3
2000340c:	074b      	lsls	r3, r1, #29
2000340e:	08ca      	lsrs	r2, r1, #3
20003410:	497c      	ldr	r1, [pc, #496]	; (20003604 <__aeabi_dadd+0x3fc>)
20003412:	08c0      	lsrs	r0, r0, #3
20003414:	4303      	orrs	r3, r0
20003416:	428d      	cmp	r5, r1
20003418:	d068      	beq.n	200034ec <__aeabi_dadd+0x2e4>
2000341a:	0312      	lsls	r2, r2, #12
2000341c:	056d      	lsls	r5, r5, #21
2000341e:	0b12      	lsrs	r2, r2, #12
20003420:	0d6d      	lsrs	r5, r5, #21
20003422:	2100      	movs	r1, #0
20003424:	0312      	lsls	r2, r2, #12
20003426:	0018      	movs	r0, r3
20003428:	0b13      	lsrs	r3, r2, #12
2000342a:	0d0a      	lsrs	r2, r1, #20
2000342c:	0512      	lsls	r2, r2, #20
2000342e:	431a      	orrs	r2, r3
20003430:	4b76      	ldr	r3, [pc, #472]	; (2000360c <__aeabi_dadd+0x404>)
20003432:	052d      	lsls	r5, r5, #20
20003434:	4013      	ands	r3, r2
20003436:	432b      	orrs	r3, r5
20003438:	005b      	lsls	r3, r3, #1
2000343a:	07e4      	lsls	r4, r4, #31
2000343c:	085b      	lsrs	r3, r3, #1
2000343e:	4323      	orrs	r3, r4
20003440:	0019      	movs	r1, r3
20003442:	bc1c      	pop	{r2, r3, r4}
20003444:	4690      	mov	r8, r2
20003446:	4699      	mov	r9, r3
20003448:	46a2      	mov	sl, r4
2000344a:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000344c:	003e      	movs	r6, r7
2000344e:	4316      	orrs	r6, r2
20003450:	d012      	beq.n	20003478 <__aeabi_dadd+0x270>
20003452:	1e5e      	subs	r6, r3, #1
20003454:	2e00      	cmp	r6, #0
20003456:	d000      	beq.n	2000345a <__aeabi_dadd+0x252>
20003458:	e100      	b.n	2000365c <__aeabi_dadd+0x454>
2000345a:	1887      	adds	r7, r0, r2
2000345c:	4287      	cmp	r7, r0
2000345e:	4180      	sbcs	r0, r0
20003460:	4441      	add	r1, r8
20003462:	4240      	negs	r0, r0
20003464:	1809      	adds	r1, r1, r0
20003466:	2501      	movs	r5, #1
20003468:	020b      	lsls	r3, r1, #8
2000346a:	d533      	bpl.n	200034d4 <__aeabi_dadd+0x2cc>
2000346c:	2502      	movs	r5, #2
2000346e:	e785      	b.n	2000337c <__aeabi_dadd+0x174>
20003470:	4664      	mov	r4, ip
20003472:	0033      	movs	r3, r6
20003474:	4641      	mov	r1, r8
20003476:	0010      	movs	r0, r2
20003478:	001d      	movs	r5, r3
2000347a:	e7c7      	b.n	2000340c <__aeabi_dadd+0x204>
2000347c:	2d00      	cmp	r5, #0
2000347e:	d000      	beq.n	20003482 <__aeabi_dadd+0x27a>
20003480:	e0da      	b.n	20003638 <__aeabi_dadd+0x430>
20003482:	000c      	movs	r4, r1
20003484:	4304      	orrs	r4, r0
20003486:	d0f3      	beq.n	20003470 <__aeabi_dadd+0x268>
20003488:	1c5c      	adds	r4, r3, #1
2000348a:	d100      	bne.n	2000348e <__aeabi_dadd+0x286>
2000348c:	e19f      	b.n	200037ce <__aeabi_dadd+0x5c6>
2000348e:	4c5d      	ldr	r4, [pc, #372]	; (20003604 <__aeabi_dadd+0x3fc>)
20003490:	42a6      	cmp	r6, r4
20003492:	d100      	bne.n	20003496 <__aeabi_dadd+0x28e>
20003494:	e12f      	b.n	200036f6 <__aeabi_dadd+0x4ee>
20003496:	43db      	mvns	r3, r3
20003498:	2b38      	cmp	r3, #56	; 0x38
2000349a:	dd00      	ble.n	2000349e <__aeabi_dadd+0x296>
2000349c:	e166      	b.n	2000376c <__aeabi_dadd+0x564>
2000349e:	2b1f      	cmp	r3, #31
200034a0:	dd00      	ble.n	200034a4 <__aeabi_dadd+0x29c>
200034a2:	e183      	b.n	200037ac <__aeabi_dadd+0x5a4>
200034a4:	2420      	movs	r4, #32
200034a6:	0005      	movs	r5, r0
200034a8:	1ae4      	subs	r4, r4, r3
200034aa:	000f      	movs	r7, r1
200034ac:	40dd      	lsrs	r5, r3
200034ae:	40d9      	lsrs	r1, r3
200034b0:	40a0      	lsls	r0, r4
200034b2:	4643      	mov	r3, r8
200034b4:	40a7      	lsls	r7, r4
200034b6:	1a5b      	subs	r3, r3, r1
200034b8:	1e44      	subs	r4, r0, #1
200034ba:	41a0      	sbcs	r0, r4
200034bc:	4698      	mov	r8, r3
200034be:	432f      	orrs	r7, r5
200034c0:	4338      	orrs	r0, r7
200034c2:	1a17      	subs	r7, r2, r0
200034c4:	42ba      	cmp	r2, r7
200034c6:	4192      	sbcs	r2, r2
200034c8:	4643      	mov	r3, r8
200034ca:	4252      	negs	r2, r2
200034cc:	1a99      	subs	r1, r3, r2
200034ce:	4664      	mov	r4, ip
200034d0:	0035      	movs	r5, r6
200034d2:	e6ca      	b.n	2000326a <__aeabi_dadd+0x62>
200034d4:	2207      	movs	r2, #7
200034d6:	403a      	ands	r2, r7
200034d8:	2a00      	cmp	r2, #0
200034da:	d000      	beq.n	200034de <__aeabi_dadd+0x2d6>
200034dc:	e6f6      	b.n	200032cc <__aeabi_dadd+0xc4>
200034de:	074b      	lsls	r3, r1, #29
200034e0:	08ca      	lsrs	r2, r1, #3
200034e2:	4948      	ldr	r1, [pc, #288]	; (20003604 <__aeabi_dadd+0x3fc>)
200034e4:	08ff      	lsrs	r7, r7, #3
200034e6:	433b      	orrs	r3, r7
200034e8:	428d      	cmp	r5, r1
200034ea:	d196      	bne.n	2000341a <__aeabi_dadd+0x212>
200034ec:	0019      	movs	r1, r3
200034ee:	4311      	orrs	r1, r2
200034f0:	d100      	bne.n	200034f4 <__aeabi_dadd+0x2ec>
200034f2:	e19e      	b.n	20003832 <__aeabi_dadd+0x62a>
200034f4:	2180      	movs	r1, #128	; 0x80
200034f6:	0309      	lsls	r1, r1, #12
200034f8:	430a      	orrs	r2, r1
200034fa:	0312      	lsls	r2, r2, #12
200034fc:	0b12      	lsrs	r2, r2, #12
200034fe:	4d41      	ldr	r5, [pc, #260]	; (20003604 <__aeabi_dadd+0x3fc>)
20003500:	e78f      	b.n	20003422 <__aeabi_dadd+0x21a>
20003502:	0015      	movs	r5, r2
20003504:	2200      	movs	r2, #0
20003506:	2300      	movs	r3, #0
20003508:	e78b      	b.n	20003422 <__aeabi_dadd+0x21a>
2000350a:	2b00      	cmp	r3, #0
2000350c:	d000      	beq.n	20003510 <__aeabi_dadd+0x308>
2000350e:	e0c7      	b.n	200036a0 <__aeabi_dadd+0x498>
20003510:	1c6b      	adds	r3, r5, #1
20003512:	055f      	lsls	r7, r3, #21
20003514:	0d7f      	lsrs	r7, r7, #21
20003516:	2f01      	cmp	r7, #1
20003518:	dc00      	bgt.n	2000351c <__aeabi_dadd+0x314>
2000351a:	e0f1      	b.n	20003700 <__aeabi_dadd+0x4f8>
2000351c:	4d39      	ldr	r5, [pc, #228]	; (20003604 <__aeabi_dadd+0x3fc>)
2000351e:	42ab      	cmp	r3, r5
20003520:	d100      	bne.n	20003524 <__aeabi_dadd+0x31c>
20003522:	e0b9      	b.n	20003698 <__aeabi_dadd+0x490>
20003524:	1885      	adds	r5, r0, r2
20003526:	000a      	movs	r2, r1
20003528:	4285      	cmp	r5, r0
2000352a:	4189      	sbcs	r1, r1
2000352c:	4442      	add	r2, r8
2000352e:	4249      	negs	r1, r1
20003530:	1851      	adds	r1, r2, r1
20003532:	2207      	movs	r2, #7
20003534:	07cf      	lsls	r7, r1, #31
20003536:	086d      	lsrs	r5, r5, #1
20003538:	432f      	orrs	r7, r5
2000353a:	0849      	lsrs	r1, r1, #1
2000353c:	403a      	ands	r2, r7
2000353e:	001d      	movs	r5, r3
20003540:	e6c2      	b.n	200032c8 <__aeabi_dadd+0xc0>
20003542:	2207      	movs	r2, #7
20003544:	4930      	ldr	r1, [pc, #192]	; (20003608 <__aeabi_dadd+0x400>)
20003546:	1aed      	subs	r5, r5, r3
20003548:	4031      	ands	r1, r6
2000354a:	403a      	ands	r2, r7
2000354c:	e6bc      	b.n	200032c8 <__aeabi_dadd+0xc0>
2000354e:	003e      	movs	r6, r7
20003550:	3828      	subs	r0, #40	; 0x28
20003552:	4086      	lsls	r6, r0
20003554:	2700      	movs	r7, #0
20003556:	e69f      	b.n	20003298 <__aeabi_dadd+0x90>
20003558:	0038      	movs	r0, r7
2000355a:	f7ff fd2f 	bl	20002fbc <__clzsi2>
2000355e:	3020      	adds	r0, #32
20003560:	e68e      	b.n	20003280 <__aeabi_dadd+0x78>
20003562:	4643      	mov	r3, r8
20003564:	4313      	orrs	r3, r2
20003566:	001f      	movs	r7, r3
20003568:	1e7a      	subs	r2, r7, #1
2000356a:	4197      	sbcs	r7, r2
2000356c:	1bc7      	subs	r7, r0, r7
2000356e:	42b8      	cmp	r0, r7
20003570:	4180      	sbcs	r0, r0
20003572:	4240      	negs	r0, r0
20003574:	1a09      	subs	r1, r1, r0
20003576:	e678      	b.n	2000326a <__aeabi_dadd+0x62>
20003578:	000e      	movs	r6, r1
2000357a:	003b      	movs	r3, r7
2000357c:	4306      	orrs	r6, r0
2000357e:	4313      	orrs	r3, r2
20003580:	2d00      	cmp	r5, #0
20003582:	d161      	bne.n	20003648 <__aeabi_dadd+0x440>
20003584:	2e00      	cmp	r6, #0
20003586:	d000      	beq.n	2000358a <__aeabi_dadd+0x382>
20003588:	e0f4      	b.n	20003774 <__aeabi_dadd+0x56c>
2000358a:	2b00      	cmp	r3, #0
2000358c:	d100      	bne.n	20003590 <__aeabi_dadd+0x388>
2000358e:	e11b      	b.n	200037c8 <__aeabi_dadd+0x5c0>
20003590:	4664      	mov	r4, ip
20003592:	0039      	movs	r1, r7
20003594:	0010      	movs	r0, r2
20003596:	e739      	b.n	2000340c <__aeabi_dadd+0x204>
20003598:	4f1a      	ldr	r7, [pc, #104]	; (20003604 <__aeabi_dadd+0x3fc>)
2000359a:	42bb      	cmp	r3, r7
2000359c:	d07a      	beq.n	20003694 <__aeabi_dadd+0x48c>
2000359e:	0033      	movs	r3, r6
200035a0:	e6ff      	b.n	200033a2 <__aeabi_dadd+0x19a>
200035a2:	0030      	movs	r0, r6
200035a4:	3d1f      	subs	r5, #31
200035a6:	40e8      	lsrs	r0, r5
200035a8:	2b20      	cmp	r3, #32
200035aa:	d003      	beq.n	200035b4 <__aeabi_dadd+0x3ac>
200035ac:	2140      	movs	r1, #64	; 0x40
200035ae:	1acb      	subs	r3, r1, r3
200035b0:	409e      	lsls	r6, r3
200035b2:	4337      	orrs	r7, r6
200035b4:	1e7b      	subs	r3, r7, #1
200035b6:	419f      	sbcs	r7, r3
200035b8:	2207      	movs	r2, #7
200035ba:	4307      	orrs	r7, r0
200035bc:	403a      	ands	r2, r7
200035be:	2100      	movs	r1, #0
200035c0:	2500      	movs	r5, #0
200035c2:	e789      	b.n	200034d8 <__aeabi_dadd+0x2d0>
200035c4:	1a17      	subs	r7, r2, r0
200035c6:	4643      	mov	r3, r8
200035c8:	42ba      	cmp	r2, r7
200035ca:	41b6      	sbcs	r6, r6
200035cc:	1a59      	subs	r1, r3, r1
200035ce:	4276      	negs	r6, r6
200035d0:	1b8e      	subs	r6, r1, r6
200035d2:	4664      	mov	r4, ip
200035d4:	e64e      	b.n	20003274 <__aeabi_dadd+0x6c>
200035d6:	2b1f      	cmp	r3, #31
200035d8:	dd00      	ble.n	200035dc <__aeabi_dadd+0x3d4>
200035da:	e0ad      	b.n	20003738 <__aeabi_dadd+0x530>
200035dc:	2620      	movs	r6, #32
200035de:	4647      	mov	r7, r8
200035e0:	1af6      	subs	r6, r6, r3
200035e2:	40b7      	lsls	r7, r6
200035e4:	46b9      	mov	r9, r7
200035e6:	0017      	movs	r7, r2
200035e8:	46b2      	mov	sl, r6
200035ea:	40df      	lsrs	r7, r3
200035ec:	464e      	mov	r6, r9
200035ee:	433e      	orrs	r6, r7
200035f0:	0037      	movs	r7, r6
200035f2:	4656      	mov	r6, sl
200035f4:	40b2      	lsls	r2, r6
200035f6:	1e56      	subs	r6, r2, #1
200035f8:	41b2      	sbcs	r2, r6
200035fa:	4317      	orrs	r7, r2
200035fc:	4642      	mov	r2, r8
200035fe:	40da      	lsrs	r2, r3
20003600:	1889      	adds	r1, r1, r2
20003602:	e6ae      	b.n	20003362 <__aeabi_dadd+0x15a>
20003604:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003608:	ff7fffff 			; <UNDEFINED> instruction: 0xff7fffff
2000360c:	800fffff 	strdhi	pc, [pc], -pc	; <UNPREDICTABLE>
20003610:	2620      	movs	r6, #32
20003612:	4647      	mov	r7, r8
20003614:	1af6      	subs	r6, r6, r3
20003616:	40b7      	lsls	r7, r6
20003618:	46b9      	mov	r9, r7
2000361a:	0017      	movs	r7, r2
2000361c:	46b2      	mov	sl, r6
2000361e:	40df      	lsrs	r7, r3
20003620:	464e      	mov	r6, r9
20003622:	433e      	orrs	r6, r7
20003624:	0037      	movs	r7, r6
20003626:	4656      	mov	r6, sl
20003628:	40b2      	lsls	r2, r6
2000362a:	1e56      	subs	r6, r2, #1
2000362c:	41b2      	sbcs	r2, r6
2000362e:	4317      	orrs	r7, r2
20003630:	4642      	mov	r2, r8
20003632:	40da      	lsrs	r2, r3
20003634:	1a89      	subs	r1, r1, r2
20003636:	e799      	b.n	2000356c <__aeabi_dadd+0x364>
20003638:	4c7f      	ldr	r4, [pc, #508]	; (20003838 <__aeabi_dadd+0x630>)
2000363a:	42a6      	cmp	r6, r4
2000363c:	d05b      	beq.n	200036f6 <__aeabi_dadd+0x4ee>
2000363e:	2480      	movs	r4, #128	; 0x80
20003640:	0424      	lsls	r4, r4, #16
20003642:	425b      	negs	r3, r3
20003644:	4321      	orrs	r1, r4
20003646:	e727      	b.n	20003498 <__aeabi_dadd+0x290>
20003648:	2e00      	cmp	r6, #0
2000364a:	d10c      	bne.n	20003666 <__aeabi_dadd+0x45e>
2000364c:	2b00      	cmp	r3, #0
2000364e:	d100      	bne.n	20003652 <__aeabi_dadd+0x44a>
20003650:	e0cb      	b.n	200037ea <__aeabi_dadd+0x5e2>
20003652:	4664      	mov	r4, ip
20003654:	0039      	movs	r1, r7
20003656:	0010      	movs	r0, r2
20003658:	4d77      	ldr	r5, [pc, #476]	; (20003838 <__aeabi_dadd+0x630>)
2000365a:	e6d7      	b.n	2000340c <__aeabi_dadd+0x204>
2000365c:	4f76      	ldr	r7, [pc, #472]	; (20003838 <__aeabi_dadd+0x630>)
2000365e:	42bb      	cmp	r3, r7
20003660:	d018      	beq.n	20003694 <__aeabi_dadd+0x48c>
20003662:	0033      	movs	r3, r6
20003664:	e675      	b.n	20003352 <__aeabi_dadd+0x14a>
20003666:	2b00      	cmp	r3, #0
20003668:	d014      	beq.n	20003694 <__aeabi_dadd+0x48c>
2000366a:	074b      	lsls	r3, r1, #29
2000366c:	08c0      	lsrs	r0, r0, #3
2000366e:	4318      	orrs	r0, r3
20003670:	2380      	movs	r3, #128	; 0x80
20003672:	08c9      	lsrs	r1, r1, #3
20003674:	031b      	lsls	r3, r3, #12
20003676:	4219      	tst	r1, r3
20003678:	d007      	beq.n	2000368a <__aeabi_dadd+0x482>
2000367a:	08fc      	lsrs	r4, r7, #3
2000367c:	421c      	tst	r4, r3
2000367e:	d104      	bne.n	2000368a <__aeabi_dadd+0x482>
20003680:	0779      	lsls	r1, r7, #29
20003682:	08d0      	lsrs	r0, r2, #3
20003684:	4308      	orrs	r0, r1
20003686:	46e1      	mov	r9, ip
20003688:	0021      	movs	r1, r4
2000368a:	464c      	mov	r4, r9
2000368c:	0f42      	lsrs	r2, r0, #29
2000368e:	00c9      	lsls	r1, r1, #3
20003690:	4311      	orrs	r1, r2
20003692:	00c0      	lsls	r0, r0, #3
20003694:	4d68      	ldr	r5, [pc, #416]	; (20003838 <__aeabi_dadd+0x630>)
20003696:	e6b9      	b.n	2000340c <__aeabi_dadd+0x204>
20003698:	001d      	movs	r5, r3
2000369a:	2200      	movs	r2, #0
2000369c:	2300      	movs	r3, #0
2000369e:	e6c0      	b.n	20003422 <__aeabi_dadd+0x21a>
200036a0:	2d00      	cmp	r5, #0
200036a2:	d15b      	bne.n	2000375c <__aeabi_dadd+0x554>
200036a4:	000d      	movs	r5, r1
200036a6:	4305      	orrs	r5, r0
200036a8:	d100      	bne.n	200036ac <__aeabi_dadd+0x4a4>
200036aa:	e6e2      	b.n	20003472 <__aeabi_dadd+0x26a>
200036ac:	1c5d      	adds	r5, r3, #1
200036ae:	d100      	bne.n	200036b2 <__aeabi_dadd+0x4aa>
200036b0:	e0b0      	b.n	20003814 <__aeabi_dadd+0x60c>
200036b2:	4d61      	ldr	r5, [pc, #388]	; (20003838 <__aeabi_dadd+0x630>)
200036b4:	42ae      	cmp	r6, r5
200036b6:	d01f      	beq.n	200036f8 <__aeabi_dadd+0x4f0>
200036b8:	43db      	mvns	r3, r3
200036ba:	2b38      	cmp	r3, #56	; 0x38
200036bc:	dc71      	bgt.n	200037a2 <__aeabi_dadd+0x59a>
200036be:	2b1f      	cmp	r3, #31
200036c0:	dd00      	ble.n	200036c4 <__aeabi_dadd+0x4bc>
200036c2:	e096      	b.n	200037f2 <__aeabi_dadd+0x5ea>
200036c4:	2520      	movs	r5, #32
200036c6:	000f      	movs	r7, r1
200036c8:	1aed      	subs	r5, r5, r3
200036ca:	40af      	lsls	r7, r5
200036cc:	46b9      	mov	r9, r7
200036ce:	0007      	movs	r7, r0
200036d0:	46aa      	mov	sl, r5
200036d2:	40df      	lsrs	r7, r3
200036d4:	464d      	mov	r5, r9
200036d6:	433d      	orrs	r5, r7
200036d8:	002f      	movs	r7, r5
200036da:	4655      	mov	r5, sl
200036dc:	40a8      	lsls	r0, r5
200036de:	40d9      	lsrs	r1, r3
200036e0:	1e45      	subs	r5, r0, #1
200036e2:	41a8      	sbcs	r0, r5
200036e4:	4488      	add	r8, r1
200036e6:	4307      	orrs	r7, r0
200036e8:	18bf      	adds	r7, r7, r2
200036ea:	4297      	cmp	r7, r2
200036ec:	4192      	sbcs	r2, r2
200036ee:	4251      	negs	r1, r2
200036f0:	4441      	add	r1, r8
200036f2:	0035      	movs	r5, r6
200036f4:	e63a      	b.n	2000336c <__aeabi_dadd+0x164>
200036f6:	4664      	mov	r4, ip
200036f8:	0035      	movs	r5, r6
200036fa:	4641      	mov	r1, r8
200036fc:	0010      	movs	r0, r2
200036fe:	e685      	b.n	2000340c <__aeabi_dadd+0x204>
20003700:	000b      	movs	r3, r1
20003702:	4303      	orrs	r3, r0
20003704:	2d00      	cmp	r5, #0
20003706:	d000      	beq.n	2000370a <__aeabi_dadd+0x502>
20003708:	e663      	b.n	200033d2 <__aeabi_dadd+0x1ca>
2000370a:	2b00      	cmp	r3, #0
2000370c:	d0f5      	beq.n	200036fa <__aeabi_dadd+0x4f2>
2000370e:	4643      	mov	r3, r8
20003710:	4313      	orrs	r3, r2
20003712:	d100      	bne.n	20003716 <__aeabi_dadd+0x50e>
20003714:	e67a      	b.n	2000340c <__aeabi_dadd+0x204>
20003716:	1887      	adds	r7, r0, r2
20003718:	4287      	cmp	r7, r0
2000371a:	4180      	sbcs	r0, r0
2000371c:	2207      	movs	r2, #7
2000371e:	4441      	add	r1, r8
20003720:	4240      	negs	r0, r0
20003722:	1809      	adds	r1, r1, r0
20003724:	403a      	ands	r2, r7
20003726:	020b      	lsls	r3, r1, #8
20003728:	d400      	bmi.n	2000372c <__aeabi_dadd+0x524>
2000372a:	e6d5      	b.n	200034d8 <__aeabi_dadd+0x2d0>
2000372c:	4b43      	ldr	r3, [pc, #268]	; (2000383c <__aeabi_dadd+0x634>)
2000372e:	3501      	adds	r5, #1
20003730:	4019      	ands	r1, r3
20003732:	e5c9      	b.n	200032c8 <__aeabi_dadd+0xc0>
20003734:	0038      	movs	r0, r7
20003736:	e669      	b.n	2000340c <__aeabi_dadd+0x204>
20003738:	001e      	movs	r6, r3
2000373a:	4647      	mov	r7, r8
2000373c:	3e20      	subs	r6, #32
2000373e:	40f7      	lsrs	r7, r6
20003740:	46bc      	mov	ip, r7
20003742:	2b20      	cmp	r3, #32
20003744:	d004      	beq.n	20003750 <__aeabi_dadd+0x548>
20003746:	2640      	movs	r6, #64	; 0x40
20003748:	1af3      	subs	r3, r6, r3
2000374a:	4646      	mov	r6, r8
2000374c:	409e      	lsls	r6, r3
2000374e:	4332      	orrs	r2, r6
20003750:	0017      	movs	r7, r2
20003752:	4663      	mov	r3, ip
20003754:	1e7a      	subs	r2, r7, #1
20003756:	4197      	sbcs	r7, r2
20003758:	431f      	orrs	r7, r3
2000375a:	e602      	b.n	20003362 <__aeabi_dadd+0x15a>
2000375c:	4d36      	ldr	r5, [pc, #216]	; (20003838 <__aeabi_dadd+0x630>)
2000375e:	42ae      	cmp	r6, r5
20003760:	d0ca      	beq.n	200036f8 <__aeabi_dadd+0x4f0>
20003762:	2580      	movs	r5, #128	; 0x80
20003764:	042d      	lsls	r5, r5, #16
20003766:	425b      	negs	r3, r3
20003768:	4329      	orrs	r1, r5
2000376a:	e7a6      	b.n	200036ba <__aeabi_dadd+0x4b2>
2000376c:	4308      	orrs	r0, r1
2000376e:	1e41      	subs	r1, r0, #1
20003770:	4188      	sbcs	r0, r1
20003772:	e6a6      	b.n	200034c2 <__aeabi_dadd+0x2ba>
20003774:	2b00      	cmp	r3, #0
20003776:	d100      	bne.n	2000377a <__aeabi_dadd+0x572>
20003778:	e648      	b.n	2000340c <__aeabi_dadd+0x204>
2000377a:	1a87      	subs	r7, r0, r2
2000377c:	4643      	mov	r3, r8
2000377e:	42b8      	cmp	r0, r7
20003780:	41b6      	sbcs	r6, r6
20003782:	1acb      	subs	r3, r1, r3
20003784:	4276      	negs	r6, r6
20003786:	1b9e      	subs	r6, r3, r6
20003788:	0233      	lsls	r3, r6, #8
2000378a:	d54b      	bpl.n	20003824 <__aeabi_dadd+0x61c>
2000378c:	1a17      	subs	r7, r2, r0
2000378e:	4643      	mov	r3, r8
20003790:	42ba      	cmp	r2, r7
20003792:	4192      	sbcs	r2, r2
20003794:	1a59      	subs	r1, r3, r1
20003796:	4252      	negs	r2, r2
20003798:	1a89      	subs	r1, r1, r2
2000379a:	2207      	movs	r2, #7
2000379c:	4664      	mov	r4, ip
2000379e:	403a      	ands	r2, r7
200037a0:	e592      	b.n	200032c8 <__aeabi_dadd+0xc0>
200037a2:	4301      	orrs	r1, r0
200037a4:	000f      	movs	r7, r1
200037a6:	1e79      	subs	r1, r7, #1
200037a8:	418f      	sbcs	r7, r1
200037aa:	e79d      	b.n	200036e8 <__aeabi_dadd+0x4e0>
200037ac:	001c      	movs	r4, r3
200037ae:	000f      	movs	r7, r1
200037b0:	3c20      	subs	r4, #32
200037b2:	40e7      	lsrs	r7, r4
200037b4:	2b20      	cmp	r3, #32
200037b6:	d003      	beq.n	200037c0 <__aeabi_dadd+0x5b8>
200037b8:	2440      	movs	r4, #64	; 0x40
200037ba:	1ae3      	subs	r3, r4, r3
200037bc:	4099      	lsls	r1, r3
200037be:	4308      	orrs	r0, r1
200037c0:	1e41      	subs	r1, r0, #1
200037c2:	4188      	sbcs	r0, r1
200037c4:	4338      	orrs	r0, r7
200037c6:	e67c      	b.n	200034c2 <__aeabi_dadd+0x2ba>
200037c8:	2200      	movs	r2, #0
200037ca:	2400      	movs	r4, #0
200037cc:	e625      	b.n	2000341a <__aeabi_dadd+0x212>
200037ce:	1a17      	subs	r7, r2, r0
200037d0:	4643      	mov	r3, r8
200037d2:	42ba      	cmp	r2, r7
200037d4:	4192      	sbcs	r2, r2
200037d6:	1a59      	subs	r1, r3, r1
200037d8:	4252      	negs	r2, r2
200037da:	1a89      	subs	r1, r1, r2
200037dc:	4664      	mov	r4, ip
200037de:	0035      	movs	r5, r6
200037e0:	e543      	b.n	2000326a <__aeabi_dadd+0x62>
200037e2:	4641      	mov	r1, r8
200037e4:	0010      	movs	r0, r2
200037e6:	4d14      	ldr	r5, [pc, #80]	; (20003838 <__aeabi_dadd+0x630>)
200037e8:	e610      	b.n	2000340c <__aeabi_dadd+0x204>
200037ea:	2280      	movs	r2, #128	; 0x80
200037ec:	2400      	movs	r4, #0
200037ee:	0312      	lsls	r2, r2, #12
200037f0:	e680      	b.n	200034f4 <__aeabi_dadd+0x2ec>
200037f2:	001d      	movs	r5, r3
200037f4:	000f      	movs	r7, r1
200037f6:	3d20      	subs	r5, #32
200037f8:	40ef      	lsrs	r7, r5
200037fa:	46bc      	mov	ip, r7
200037fc:	2b20      	cmp	r3, #32
200037fe:	d003      	beq.n	20003808 <__aeabi_dadd+0x600>
20003800:	2540      	movs	r5, #64	; 0x40
20003802:	1aeb      	subs	r3, r5, r3
20003804:	4099      	lsls	r1, r3
20003806:	4308      	orrs	r0, r1
20003808:	0007      	movs	r7, r0
2000380a:	4663      	mov	r3, ip
2000380c:	1e78      	subs	r0, r7, #1
2000380e:	4187      	sbcs	r7, r0
20003810:	431f      	orrs	r7, r3
20003812:	e769      	b.n	200036e8 <__aeabi_dadd+0x4e0>
20003814:	1887      	adds	r7, r0, r2
20003816:	4297      	cmp	r7, r2
20003818:	419b      	sbcs	r3, r3
2000381a:	4441      	add	r1, r8
2000381c:	425b      	negs	r3, r3
2000381e:	18c9      	adds	r1, r1, r3
20003820:	0035      	movs	r5, r6
20003822:	e5a3      	b.n	2000336c <__aeabi_dadd+0x164>
20003824:	003b      	movs	r3, r7
20003826:	4333      	orrs	r3, r6
20003828:	d0ce      	beq.n	200037c8 <__aeabi_dadd+0x5c0>
2000382a:	2207      	movs	r2, #7
2000382c:	0031      	movs	r1, r6
2000382e:	403a      	ands	r2, r7
20003830:	e652      	b.n	200034d8 <__aeabi_dadd+0x2d0>
20003832:	2300      	movs	r3, #0
20003834:	001a      	movs	r2, r3
20003836:	e5f4      	b.n	20003422 <__aeabi_dadd+0x21a>
20003838:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000383c:	ff7fffff 			; <UNDEFINED> instruction: 0xff7fffff

20003840 <__aeabi_ddiv>:
20003840:	b5f0      	push	{r4, r5, r6, r7, lr}
20003842:	4657      	mov	r7, sl
20003844:	46de      	mov	lr, fp
20003846:	464e      	mov	r6, r9
20003848:	4645      	mov	r5, r8
2000384a:	b5e0      	push	{r5, r6, r7, lr}
2000384c:	4683      	mov	fp, r0
2000384e:	0007      	movs	r7, r0
20003850:	030e      	lsls	r6, r1, #12
20003852:	0048      	lsls	r0, r1, #1
20003854:	b085      	sub	sp, #20
20003856:	4692      	mov	sl, r2
20003858:	001c      	movs	r4, r3
2000385a:	0b36      	lsrs	r6, r6, #12
2000385c:	0d40      	lsrs	r0, r0, #21
2000385e:	0fcd      	lsrs	r5, r1, #31
20003860:	2800      	cmp	r0, #0
20003862:	d100      	bne.n	20003866 <__aeabi_ddiv+0x26>
20003864:	e09d      	b.n	200039a2 <__aeabi_ddiv+0x162>
20003866:	4b95      	ldr	r3, [pc, #596]	; (20003abc <__aeabi_ddiv+0x27c>)
20003868:	4298      	cmp	r0, r3
2000386a:	d039      	beq.n	200038e0 <__aeabi_ddiv+0xa0>
2000386c:	2380      	movs	r3, #128	; 0x80
2000386e:	00f6      	lsls	r6, r6, #3
20003870:	041b      	lsls	r3, r3, #16
20003872:	431e      	orrs	r6, r3
20003874:	4a92      	ldr	r2, [pc, #584]	; (20003ac0 <__aeabi_ddiv+0x280>)
20003876:	0f7b      	lsrs	r3, r7, #29
20003878:	4333      	orrs	r3, r6
2000387a:	4699      	mov	r9, r3
2000387c:	4694      	mov	ip, r2
2000387e:	0003      	movs	r3, r0
20003880:	4463      	add	r3, ip
20003882:	9300      	str	r3, [sp, #0]
20003884:	2300      	movs	r3, #0
20003886:	2600      	movs	r6, #0
20003888:	00ff      	lsls	r7, r7, #3
2000388a:	9302      	str	r3, [sp, #8]
2000388c:	0323      	lsls	r3, r4, #12
2000388e:	0b1b      	lsrs	r3, r3, #12
20003890:	4698      	mov	r8, r3
20003892:	0063      	lsls	r3, r4, #1
20003894:	0fe4      	lsrs	r4, r4, #31
20003896:	4652      	mov	r2, sl
20003898:	0d5b      	lsrs	r3, r3, #21
2000389a:	9401      	str	r4, [sp, #4]
2000389c:	d100      	bne.n	200038a0 <__aeabi_ddiv+0x60>
2000389e:	e0b3      	b.n	20003a08 <__aeabi_ddiv+0x1c8>
200038a0:	4986      	ldr	r1, [pc, #536]	; (20003abc <__aeabi_ddiv+0x27c>)
200038a2:	428b      	cmp	r3, r1
200038a4:	d100      	bne.n	200038a8 <__aeabi_ddiv+0x68>
200038a6:	e09e      	b.n	200039e6 <__aeabi_ddiv+0x1a6>
200038a8:	4642      	mov	r2, r8
200038aa:	00d1      	lsls	r1, r2, #3
200038ac:	2280      	movs	r2, #128	; 0x80
200038ae:	0412      	lsls	r2, r2, #16
200038b0:	430a      	orrs	r2, r1
200038b2:	4651      	mov	r1, sl
200038b4:	0f49      	lsrs	r1, r1, #29
200038b6:	4311      	orrs	r1, r2
200038b8:	468b      	mov	fp, r1
200038ba:	4981      	ldr	r1, [pc, #516]	; (20003ac0 <__aeabi_ddiv+0x280>)
200038bc:	4652      	mov	r2, sl
200038be:	468c      	mov	ip, r1
200038c0:	9900      	ldr	r1, [sp, #0]
200038c2:	4463      	add	r3, ip
200038c4:	1acb      	subs	r3, r1, r3
200038c6:	2100      	movs	r1, #0
200038c8:	00d2      	lsls	r2, r2, #3
200038ca:	9300      	str	r3, [sp, #0]
200038cc:	002b      	movs	r3, r5
200038ce:	4063      	eors	r3, r4
200038d0:	469a      	mov	sl, r3
200038d2:	2e0f      	cmp	r6, #15
200038d4:	d900      	bls.n	200038d8 <__aeabi_ddiv+0x98>
200038d6:	e105      	b.n	20003ae4 <__aeabi_ddiv+0x2a4>
200038d8:	4b7a      	ldr	r3, [pc, #488]	; (20003ac4 <__aeabi_ddiv+0x284>)
200038da:	00b6      	lsls	r6, r6, #2
200038dc:	599b      	ldr	r3, [r3, r6]
200038de:	469f      	mov	pc, r3
200038e0:	465b      	mov	r3, fp
200038e2:	4333      	orrs	r3, r6
200038e4:	4699      	mov	r9, r3
200038e6:	d000      	beq.n	200038ea <__aeabi_ddiv+0xaa>
200038e8:	e0b8      	b.n	20003a5c <__aeabi_ddiv+0x21c>
200038ea:	2302      	movs	r3, #2
200038ec:	2608      	movs	r6, #8
200038ee:	2700      	movs	r7, #0
200038f0:	9000      	str	r0, [sp, #0]
200038f2:	9302      	str	r3, [sp, #8]
200038f4:	e7ca      	b.n	2000388c <__aeabi_ddiv+0x4c>
200038f6:	46cb      	mov	fp, r9
200038f8:	003a      	movs	r2, r7
200038fa:	9902      	ldr	r1, [sp, #8]
200038fc:	9501      	str	r5, [sp, #4]
200038fe:	9b01      	ldr	r3, [sp, #4]
20003900:	469a      	mov	sl, r3
20003902:	2902      	cmp	r1, #2
20003904:	d027      	beq.n	20003956 <__aeabi_ddiv+0x116>
20003906:	2903      	cmp	r1, #3
20003908:	d100      	bne.n	2000390c <__aeabi_ddiv+0xcc>
2000390a:	e280      	b.n	20003e0e <__aeabi_ddiv+0x5ce>
2000390c:	2901      	cmp	r1, #1
2000390e:	d044      	beq.n	2000399a <__aeabi_ddiv+0x15a>
20003910:	496d      	ldr	r1, [pc, #436]	; (20003ac8 <__aeabi_ddiv+0x288>)
20003912:	9b00      	ldr	r3, [sp, #0]
20003914:	468c      	mov	ip, r1
20003916:	4463      	add	r3, ip
20003918:	001c      	movs	r4, r3
2000391a:	2c00      	cmp	r4, #0
2000391c:	dd38      	ble.n	20003990 <__aeabi_ddiv+0x150>
2000391e:	0753      	lsls	r3, r2, #29
20003920:	d000      	beq.n	20003924 <__aeabi_ddiv+0xe4>
20003922:	e213      	b.n	20003d4c <__aeabi_ddiv+0x50c>
20003924:	08d2      	lsrs	r2, r2, #3
20003926:	465b      	mov	r3, fp
20003928:	01db      	lsls	r3, r3, #7
2000392a:	d509      	bpl.n	20003940 <__aeabi_ddiv+0x100>
2000392c:	4659      	mov	r1, fp
2000392e:	4b67      	ldr	r3, [pc, #412]	; (20003acc <__aeabi_ddiv+0x28c>)
20003930:	4019      	ands	r1, r3
20003932:	468b      	mov	fp, r1
20003934:	2180      	movs	r1, #128	; 0x80
20003936:	00c9      	lsls	r1, r1, #3
20003938:	468c      	mov	ip, r1
2000393a:	9b00      	ldr	r3, [sp, #0]
2000393c:	4463      	add	r3, ip
2000393e:	001c      	movs	r4, r3
20003940:	4b63      	ldr	r3, [pc, #396]	; (20003ad0 <__aeabi_ddiv+0x290>)
20003942:	429c      	cmp	r4, r3
20003944:	dc07      	bgt.n	20003956 <__aeabi_ddiv+0x116>
20003946:	465b      	mov	r3, fp
20003948:	0564      	lsls	r4, r4, #21
2000394a:	075f      	lsls	r7, r3, #29
2000394c:	025b      	lsls	r3, r3, #9
2000394e:	4317      	orrs	r7, r2
20003950:	0b1b      	lsrs	r3, r3, #12
20003952:	0d62      	lsrs	r2, r4, #21
20003954:	e002      	b.n	2000395c <__aeabi_ddiv+0x11c>
20003956:	2300      	movs	r3, #0
20003958:	2700      	movs	r7, #0
2000395a:	4a58      	ldr	r2, [pc, #352]	; (20003abc <__aeabi_ddiv+0x27c>)
2000395c:	2100      	movs	r1, #0
2000395e:	031b      	lsls	r3, r3, #12
20003960:	0b1c      	lsrs	r4, r3, #12
20003962:	0d0b      	lsrs	r3, r1, #20
20003964:	051b      	lsls	r3, r3, #20
20003966:	4323      	orrs	r3, r4
20003968:	0514      	lsls	r4, r2, #20
2000396a:	4a5a      	ldr	r2, [pc, #360]	; (20003ad4 <__aeabi_ddiv+0x294>)
2000396c:	0038      	movs	r0, r7
2000396e:	4013      	ands	r3, r2
20003970:	431c      	orrs	r4, r3
20003972:	4653      	mov	r3, sl
20003974:	0064      	lsls	r4, r4, #1
20003976:	07db      	lsls	r3, r3, #31
20003978:	0864      	lsrs	r4, r4, #1
2000397a:	431c      	orrs	r4, r3
2000397c:	0021      	movs	r1, r4
2000397e:	b005      	add	sp, #20
20003980:	bc3c      	pop	{r2, r3, r4, r5}
20003982:	4690      	mov	r8, r2
20003984:	4699      	mov	r9, r3
20003986:	46a2      	mov	sl, r4
20003988:	46ab      	mov	fp, r5
2000398a:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000398c:	2201      	movs	r2, #1
2000398e:	4252      	negs	r2, r2
20003990:	2301      	movs	r3, #1
20003992:	1b1b      	subs	r3, r3, r4
20003994:	2b38      	cmp	r3, #56	; 0x38
20003996:	dc00      	bgt.n	2000399a <__aeabi_ddiv+0x15a>
20003998:	e1ad      	b.n	20003cf6 <__aeabi_ddiv+0x4b6>
2000399a:	2200      	movs	r2, #0
2000399c:	2300      	movs	r3, #0
2000399e:	2700      	movs	r7, #0
200039a0:	e7dc      	b.n	2000395c <__aeabi_ddiv+0x11c>
200039a2:	465b      	mov	r3, fp
200039a4:	4333      	orrs	r3, r6
200039a6:	4699      	mov	r9, r3
200039a8:	d05e      	beq.n	20003a68 <__aeabi_ddiv+0x228>
200039aa:	2e00      	cmp	r6, #0
200039ac:	d100      	bne.n	200039b0 <__aeabi_ddiv+0x170>
200039ae:	e18a      	b.n	20003cc6 <__aeabi_ddiv+0x486>
200039b0:	0030      	movs	r0, r6
200039b2:	f7ff fb03 	bl	20002fbc <__clzsi2>
200039b6:	0003      	movs	r3, r0
200039b8:	3b0b      	subs	r3, #11
200039ba:	2b1c      	cmp	r3, #28
200039bc:	dd00      	ble.n	200039c0 <__aeabi_ddiv+0x180>
200039be:	e17b      	b.n	20003cb8 <__aeabi_ddiv+0x478>
200039c0:	221d      	movs	r2, #29
200039c2:	1ad3      	subs	r3, r2, r3
200039c4:	465a      	mov	r2, fp
200039c6:	0001      	movs	r1, r0
200039c8:	40da      	lsrs	r2, r3
200039ca:	3908      	subs	r1, #8
200039cc:	408e      	lsls	r6, r1
200039ce:	0013      	movs	r3, r2
200039d0:	465f      	mov	r7, fp
200039d2:	4333      	orrs	r3, r6
200039d4:	4699      	mov	r9, r3
200039d6:	408f      	lsls	r7, r1
200039d8:	4b3f      	ldr	r3, [pc, #252]	; (20003ad8 <__aeabi_ddiv+0x298>)
200039da:	2600      	movs	r6, #0
200039dc:	1a1b      	subs	r3, r3, r0
200039de:	9300      	str	r3, [sp, #0]
200039e0:	2300      	movs	r3, #0
200039e2:	9302      	str	r3, [sp, #8]
200039e4:	e752      	b.n	2000388c <__aeabi_ddiv+0x4c>
200039e6:	4641      	mov	r1, r8
200039e8:	4653      	mov	r3, sl
200039ea:	430b      	orrs	r3, r1
200039ec:	493b      	ldr	r1, [pc, #236]	; (20003adc <__aeabi_ddiv+0x29c>)
200039ee:	469b      	mov	fp, r3
200039f0:	468c      	mov	ip, r1
200039f2:	9b00      	ldr	r3, [sp, #0]
200039f4:	4463      	add	r3, ip
200039f6:	9300      	str	r3, [sp, #0]
200039f8:	465b      	mov	r3, fp
200039fa:	2b00      	cmp	r3, #0
200039fc:	d13b      	bne.n	20003a76 <__aeabi_ddiv+0x236>
200039fe:	2302      	movs	r3, #2
20003a00:	2200      	movs	r2, #0
20003a02:	431e      	orrs	r6, r3
20003a04:	2102      	movs	r1, #2
20003a06:	e761      	b.n	200038cc <__aeabi_ddiv+0x8c>
20003a08:	4643      	mov	r3, r8
20003a0a:	4313      	orrs	r3, r2
20003a0c:	469b      	mov	fp, r3
20003a0e:	d037      	beq.n	20003a80 <__aeabi_ddiv+0x240>
20003a10:	4643      	mov	r3, r8
20003a12:	2b00      	cmp	r3, #0
20003a14:	d100      	bne.n	20003a18 <__aeabi_ddiv+0x1d8>
20003a16:	e162      	b.n	20003cde <__aeabi_ddiv+0x49e>
20003a18:	4640      	mov	r0, r8
20003a1a:	f7ff facf 	bl	20002fbc <__clzsi2>
20003a1e:	0003      	movs	r3, r0
20003a20:	3b0b      	subs	r3, #11
20003a22:	2b1c      	cmp	r3, #28
20003a24:	dd00      	ble.n	20003a28 <__aeabi_ddiv+0x1e8>
20003a26:	e153      	b.n	20003cd0 <__aeabi_ddiv+0x490>
20003a28:	0002      	movs	r2, r0
20003a2a:	4641      	mov	r1, r8
20003a2c:	3a08      	subs	r2, #8
20003a2e:	4091      	lsls	r1, r2
20003a30:	4688      	mov	r8, r1
20003a32:	211d      	movs	r1, #29
20003a34:	1acb      	subs	r3, r1, r3
20003a36:	4651      	mov	r1, sl
20003a38:	40d9      	lsrs	r1, r3
20003a3a:	000b      	movs	r3, r1
20003a3c:	4641      	mov	r1, r8
20003a3e:	430b      	orrs	r3, r1
20003a40:	469b      	mov	fp, r3
20003a42:	4653      	mov	r3, sl
20003a44:	4093      	lsls	r3, r2
20003a46:	001a      	movs	r2, r3
20003a48:	9b00      	ldr	r3, [sp, #0]
20003a4a:	4925      	ldr	r1, [pc, #148]	; (20003ae0 <__aeabi_ddiv+0x2a0>)
20003a4c:	469c      	mov	ip, r3
20003a4e:	4460      	add	r0, ip
20003a50:	0003      	movs	r3, r0
20003a52:	468c      	mov	ip, r1
20003a54:	4463      	add	r3, ip
20003a56:	9300      	str	r3, [sp, #0]
20003a58:	2100      	movs	r1, #0
20003a5a:	e737      	b.n	200038cc <__aeabi_ddiv+0x8c>
20003a5c:	2303      	movs	r3, #3
20003a5e:	46b1      	mov	r9, r6
20003a60:	9000      	str	r0, [sp, #0]
20003a62:	260c      	movs	r6, #12
20003a64:	9302      	str	r3, [sp, #8]
20003a66:	e711      	b.n	2000388c <__aeabi_ddiv+0x4c>
20003a68:	2300      	movs	r3, #0
20003a6a:	9300      	str	r3, [sp, #0]
20003a6c:	3301      	adds	r3, #1
20003a6e:	2604      	movs	r6, #4
20003a70:	2700      	movs	r7, #0
20003a72:	9302      	str	r3, [sp, #8]
20003a74:	e70a      	b.n	2000388c <__aeabi_ddiv+0x4c>
20003a76:	2303      	movs	r3, #3
20003a78:	46c3      	mov	fp, r8
20003a7a:	431e      	orrs	r6, r3
20003a7c:	2103      	movs	r1, #3
20003a7e:	e725      	b.n	200038cc <__aeabi_ddiv+0x8c>
20003a80:	3301      	adds	r3, #1
20003a82:	431e      	orrs	r6, r3
20003a84:	2200      	movs	r2, #0
20003a86:	2101      	movs	r1, #1
20003a88:	e720      	b.n	200038cc <__aeabi_ddiv+0x8c>
20003a8a:	2300      	movs	r3, #0
20003a8c:	469a      	mov	sl, r3
20003a8e:	2380      	movs	r3, #128	; 0x80
20003a90:	2700      	movs	r7, #0
20003a92:	031b      	lsls	r3, r3, #12
20003a94:	4a09      	ldr	r2, [pc, #36]	; (20003abc <__aeabi_ddiv+0x27c>)
20003a96:	e761      	b.n	2000395c <__aeabi_ddiv+0x11c>
20003a98:	2380      	movs	r3, #128	; 0x80
20003a9a:	4649      	mov	r1, r9
20003a9c:	031b      	lsls	r3, r3, #12
20003a9e:	4219      	tst	r1, r3
20003aa0:	d100      	bne.n	20003aa4 <__aeabi_ddiv+0x264>
20003aa2:	e0e2      	b.n	20003c6a <__aeabi_ddiv+0x42a>
20003aa4:	4659      	mov	r1, fp
20003aa6:	4219      	tst	r1, r3
20003aa8:	d000      	beq.n	20003aac <__aeabi_ddiv+0x26c>
20003aaa:	e0de      	b.n	20003c6a <__aeabi_ddiv+0x42a>
20003aac:	430b      	orrs	r3, r1
20003aae:	031b      	lsls	r3, r3, #12
20003ab0:	0017      	movs	r7, r2
20003ab2:	0b1b      	lsrs	r3, r3, #12
20003ab4:	46a2      	mov	sl, r4
20003ab6:	4a01      	ldr	r2, [pc, #4]	; (20003abc <__aeabi_ddiv+0x27c>)
20003ab8:	e750      	b.n	2000395c <__aeabi_ddiv+0x11c>
20003aba:	46c0      	nop			; (mov r8, r8)
20003abc:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003ac0:	fffffc01 			; <UNDEFINED> instruction: 0xfffffc01
20003ac4:	20005090 	mulcs	r0, r0, r0
20003ac8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003acc:	feffffff 	mrc2	15, 7, pc, cr15, cr15, {7}
20003ad0:	000007fe 	strdeq	r0, [r0], -lr
20003ad4:	800fffff 	strdhi	pc, [pc], -pc	; <UNPREDICTABLE>
20003ad8:	fffffc0d 			; <UNDEFINED> instruction: 0xfffffc0d
20003adc:	fffff801 			; <UNDEFINED> instruction: 0xfffff801
20003ae0:	000003f3 	strdeq	r0, [r0], -r3
20003ae4:	45d9      	cmp	r9, fp
20003ae6:	d900      	bls.n	20003aea <__aeabi_ddiv+0x2aa>
20003ae8:	e0cb      	b.n	20003c82 <__aeabi_ddiv+0x442>
20003aea:	d100      	bne.n	20003aee <__aeabi_ddiv+0x2ae>
20003aec:	e0c6      	b.n	20003c7c <__aeabi_ddiv+0x43c>
20003aee:	003c      	movs	r4, r7
20003af0:	4648      	mov	r0, r9
20003af2:	2700      	movs	r7, #0
20003af4:	9b00      	ldr	r3, [sp, #0]
20003af6:	3b01      	subs	r3, #1
20003af8:	9300      	str	r3, [sp, #0]
20003afa:	465b      	mov	r3, fp
20003afc:	0e16      	lsrs	r6, r2, #24
20003afe:	021b      	lsls	r3, r3, #8
20003b00:	431e      	orrs	r6, r3
20003b02:	0213      	lsls	r3, r2, #8
20003b04:	4698      	mov	r8, r3
20003b06:	0433      	lsls	r3, r6, #16
20003b08:	0c1b      	lsrs	r3, r3, #16
20003b0a:	4699      	mov	r9, r3
20003b0c:	0c31      	lsrs	r1, r6, #16
20003b0e:	9101      	str	r1, [sp, #4]
20003b10:	f7fe fe42 	bl	20002798 <__aeabi_uidivmod>
20003b14:	464a      	mov	r2, r9
20003b16:	4342      	muls	r2, r0
20003b18:	040b      	lsls	r3, r1, #16
20003b1a:	0c21      	lsrs	r1, r4, #16
20003b1c:	0005      	movs	r5, r0
20003b1e:	4319      	orrs	r1, r3
20003b20:	428a      	cmp	r2, r1
20003b22:	d907      	bls.n	20003b34 <__aeabi_ddiv+0x2f4>
20003b24:	1989      	adds	r1, r1, r6
20003b26:	3d01      	subs	r5, #1
20003b28:	428e      	cmp	r6, r1
20003b2a:	d803      	bhi.n	20003b34 <__aeabi_ddiv+0x2f4>
20003b2c:	428a      	cmp	r2, r1
20003b2e:	d901      	bls.n	20003b34 <__aeabi_ddiv+0x2f4>
20003b30:	1e85      	subs	r5, r0, #2
20003b32:	1989      	adds	r1, r1, r6
20003b34:	1a88      	subs	r0, r1, r2
20003b36:	9901      	ldr	r1, [sp, #4]
20003b38:	f7fe fe2e 	bl	20002798 <__aeabi_uidivmod>
20003b3c:	0409      	lsls	r1, r1, #16
20003b3e:	468c      	mov	ip, r1
20003b40:	464a      	mov	r2, r9
20003b42:	0421      	lsls	r1, r4, #16
20003b44:	4664      	mov	r4, ip
20003b46:	4342      	muls	r2, r0
20003b48:	0c09      	lsrs	r1, r1, #16
20003b4a:	0003      	movs	r3, r0
20003b4c:	4321      	orrs	r1, r4
20003b4e:	428a      	cmp	r2, r1
20003b50:	d904      	bls.n	20003b5c <__aeabi_ddiv+0x31c>
20003b52:	1989      	adds	r1, r1, r6
20003b54:	3b01      	subs	r3, #1
20003b56:	428e      	cmp	r6, r1
20003b58:	d800      	bhi.n	20003b5c <__aeabi_ddiv+0x31c>
20003b5a:	e0f1      	b.n	20003d40 <__aeabi_ddiv+0x500>
20003b5c:	042d      	lsls	r5, r5, #16
20003b5e:	431d      	orrs	r5, r3
20003b60:	46ab      	mov	fp, r5
20003b62:	4643      	mov	r3, r8
20003b64:	1a89      	subs	r1, r1, r2
20003b66:	4642      	mov	r2, r8
20003b68:	0c28      	lsrs	r0, r5, #16
20003b6a:	0412      	lsls	r2, r2, #16
20003b6c:	0c1d      	lsrs	r5, r3, #16
20003b6e:	465b      	mov	r3, fp
20003b70:	0c14      	lsrs	r4, r2, #16
20003b72:	0022      	movs	r2, r4
20003b74:	041b      	lsls	r3, r3, #16
20003b76:	0c1b      	lsrs	r3, r3, #16
20003b78:	435a      	muls	r2, r3
20003b7a:	9403      	str	r4, [sp, #12]
20003b7c:	436b      	muls	r3, r5
20003b7e:	4344      	muls	r4, r0
20003b80:	9502      	str	r5, [sp, #8]
20003b82:	4368      	muls	r0, r5
20003b84:	191b      	adds	r3, r3, r4
20003b86:	0c15      	lsrs	r5, r2, #16
20003b88:	18eb      	adds	r3, r5, r3
20003b8a:	429c      	cmp	r4, r3
20003b8c:	d903      	bls.n	20003b96 <__aeabi_ddiv+0x356>
20003b8e:	2480      	movs	r4, #128	; 0x80
20003b90:	0264      	lsls	r4, r4, #9
20003b92:	46a4      	mov	ip, r4
20003b94:	4460      	add	r0, ip
20003b96:	0c1c      	lsrs	r4, r3, #16
20003b98:	0415      	lsls	r5, r2, #16
20003b9a:	041b      	lsls	r3, r3, #16
20003b9c:	0c2d      	lsrs	r5, r5, #16
20003b9e:	1820      	adds	r0, r4, r0
20003ba0:	195d      	adds	r5, r3, r5
20003ba2:	4281      	cmp	r1, r0
20003ba4:	d377      	bcc.n	20003c96 <__aeabi_ddiv+0x456>
20003ba6:	d073      	beq.n	20003c90 <__aeabi_ddiv+0x450>
20003ba8:	1a0c      	subs	r4, r1, r0
20003baa:	4aa2      	ldr	r2, [pc, #648]	; (20003e34 <__aeabi_ddiv+0x5f4>)
20003bac:	1b7d      	subs	r5, r7, r5
20003bae:	42af      	cmp	r7, r5
20003bb0:	41bf      	sbcs	r7, r7
20003bb2:	4694      	mov	ip, r2
20003bb4:	9b00      	ldr	r3, [sp, #0]
20003bb6:	427f      	negs	r7, r7
20003bb8:	4463      	add	r3, ip
20003bba:	1be0      	subs	r0, r4, r7
20003bbc:	001c      	movs	r4, r3
20003bbe:	4286      	cmp	r6, r0
20003bc0:	d100      	bne.n	20003bc4 <__aeabi_ddiv+0x384>
20003bc2:	e0db      	b.n	20003d7c <__aeabi_ddiv+0x53c>
20003bc4:	9901      	ldr	r1, [sp, #4]
20003bc6:	f7fe fde7 	bl	20002798 <__aeabi_uidivmod>
20003bca:	464a      	mov	r2, r9
20003bcc:	4342      	muls	r2, r0
20003bce:	040b      	lsls	r3, r1, #16
20003bd0:	0c29      	lsrs	r1, r5, #16
20003bd2:	0007      	movs	r7, r0
20003bd4:	4319      	orrs	r1, r3
20003bd6:	428a      	cmp	r2, r1
20003bd8:	d907      	bls.n	20003bea <__aeabi_ddiv+0x3aa>
20003bda:	1989      	adds	r1, r1, r6
20003bdc:	3f01      	subs	r7, #1
20003bde:	428e      	cmp	r6, r1
20003be0:	d803      	bhi.n	20003bea <__aeabi_ddiv+0x3aa>
20003be2:	428a      	cmp	r2, r1
20003be4:	d901      	bls.n	20003bea <__aeabi_ddiv+0x3aa>
20003be6:	1e87      	subs	r7, r0, #2
20003be8:	1989      	adds	r1, r1, r6
20003bea:	1a88      	subs	r0, r1, r2
20003bec:	9901      	ldr	r1, [sp, #4]
20003bee:	f7fe fdd3 	bl	20002798 <__aeabi_uidivmod>
20003bf2:	0409      	lsls	r1, r1, #16
20003bf4:	464a      	mov	r2, r9
20003bf6:	4689      	mov	r9, r1
20003bf8:	0429      	lsls	r1, r5, #16
20003bfa:	464d      	mov	r5, r9
20003bfc:	4342      	muls	r2, r0
20003bfe:	0c09      	lsrs	r1, r1, #16
20003c00:	0003      	movs	r3, r0
20003c02:	4329      	orrs	r1, r5
20003c04:	428a      	cmp	r2, r1
20003c06:	d907      	bls.n	20003c18 <__aeabi_ddiv+0x3d8>
20003c08:	1989      	adds	r1, r1, r6
20003c0a:	3b01      	subs	r3, #1
20003c0c:	428e      	cmp	r6, r1
20003c0e:	d803      	bhi.n	20003c18 <__aeabi_ddiv+0x3d8>
20003c10:	428a      	cmp	r2, r1
20003c12:	d901      	bls.n	20003c18 <__aeabi_ddiv+0x3d8>
20003c14:	1e83      	subs	r3, r0, #2
20003c16:	1989      	adds	r1, r1, r6
20003c18:	043f      	lsls	r7, r7, #16
20003c1a:	1a89      	subs	r1, r1, r2
20003c1c:	003a      	movs	r2, r7
20003c1e:	9f03      	ldr	r7, [sp, #12]
20003c20:	431a      	orrs	r2, r3
20003c22:	0038      	movs	r0, r7
20003c24:	0413      	lsls	r3, r2, #16
20003c26:	0c1b      	lsrs	r3, r3, #16
20003c28:	4358      	muls	r0, r3
20003c2a:	4681      	mov	r9, r0
20003c2c:	9802      	ldr	r0, [sp, #8]
20003c2e:	0c15      	lsrs	r5, r2, #16
20003c30:	436f      	muls	r7, r5
20003c32:	4343      	muls	r3, r0
20003c34:	4345      	muls	r5, r0
20003c36:	4648      	mov	r0, r9
20003c38:	0c00      	lsrs	r0, r0, #16
20003c3a:	4684      	mov	ip, r0
20003c3c:	19db      	adds	r3, r3, r7
20003c3e:	4463      	add	r3, ip
20003c40:	429f      	cmp	r7, r3
20003c42:	d903      	bls.n	20003c4c <__aeabi_ddiv+0x40c>
20003c44:	2080      	movs	r0, #128	; 0x80
20003c46:	0240      	lsls	r0, r0, #9
20003c48:	4684      	mov	ip, r0
20003c4a:	4465      	add	r5, ip
20003c4c:	4648      	mov	r0, r9
20003c4e:	0c1f      	lsrs	r7, r3, #16
20003c50:	0400      	lsls	r0, r0, #16
20003c52:	041b      	lsls	r3, r3, #16
20003c54:	0c00      	lsrs	r0, r0, #16
20003c56:	197d      	adds	r5, r7, r5
20003c58:	1818      	adds	r0, r3, r0
20003c5a:	42a9      	cmp	r1, r5
20003c5c:	d200      	bcs.n	20003c60 <__aeabi_ddiv+0x420>
20003c5e:	e084      	b.n	20003d6a <__aeabi_ddiv+0x52a>
20003c60:	d100      	bne.n	20003c64 <__aeabi_ddiv+0x424>
20003c62:	e07f      	b.n	20003d64 <__aeabi_ddiv+0x524>
20003c64:	2301      	movs	r3, #1
20003c66:	431a      	orrs	r2, r3
20003c68:	e657      	b.n	2000391a <__aeabi_ddiv+0xda>
20003c6a:	2380      	movs	r3, #128	; 0x80
20003c6c:	464a      	mov	r2, r9
20003c6e:	031b      	lsls	r3, r3, #12
20003c70:	4313      	orrs	r3, r2
20003c72:	031b      	lsls	r3, r3, #12
20003c74:	0b1b      	lsrs	r3, r3, #12
20003c76:	46aa      	mov	sl, r5
20003c78:	4a6f      	ldr	r2, [pc, #444]	; (20003e38 <__aeabi_ddiv+0x5f8>)
20003c7a:	e66f      	b.n	2000395c <__aeabi_ddiv+0x11c>
20003c7c:	42ba      	cmp	r2, r7
20003c7e:	d900      	bls.n	20003c82 <__aeabi_ddiv+0x442>
20003c80:	e735      	b.n	20003aee <__aeabi_ddiv+0x2ae>
20003c82:	464b      	mov	r3, r9
20003c84:	07dc      	lsls	r4, r3, #31
20003c86:	0858      	lsrs	r0, r3, #1
20003c88:	087b      	lsrs	r3, r7, #1
20003c8a:	431c      	orrs	r4, r3
20003c8c:	07ff      	lsls	r7, r7, #31
20003c8e:	e734      	b.n	20003afa <__aeabi_ddiv+0x2ba>
20003c90:	2400      	movs	r4, #0
20003c92:	42af      	cmp	r7, r5
20003c94:	d289      	bcs.n	20003baa <__aeabi_ddiv+0x36a>
20003c96:	4447      	add	r7, r8
20003c98:	4547      	cmp	r7, r8
20003c9a:	41a4      	sbcs	r4, r4
20003c9c:	465b      	mov	r3, fp
20003c9e:	4264      	negs	r4, r4
20003ca0:	19a4      	adds	r4, r4, r6
20003ca2:	1864      	adds	r4, r4, r1
20003ca4:	3b01      	subs	r3, #1
20003ca6:	42a6      	cmp	r6, r4
20003ca8:	d21e      	bcs.n	20003ce8 <__aeabi_ddiv+0x4a8>
20003caa:	42a0      	cmp	r0, r4
20003cac:	d86d      	bhi.n	20003d8a <__aeabi_ddiv+0x54a>
20003cae:	d100      	bne.n	20003cb2 <__aeabi_ddiv+0x472>
20003cb0:	e0b6      	b.n	20003e20 <__aeabi_ddiv+0x5e0>
20003cb2:	1a24      	subs	r4, r4, r0
20003cb4:	469b      	mov	fp, r3
20003cb6:	e778      	b.n	20003baa <__aeabi_ddiv+0x36a>
20003cb8:	0003      	movs	r3, r0
20003cba:	465a      	mov	r2, fp
20003cbc:	3b28      	subs	r3, #40	; 0x28
20003cbe:	409a      	lsls	r2, r3
20003cc0:	2700      	movs	r7, #0
20003cc2:	4691      	mov	r9, r2
20003cc4:	e688      	b.n	200039d8 <__aeabi_ddiv+0x198>
20003cc6:	4658      	mov	r0, fp
20003cc8:	f7ff f978 	bl	20002fbc <__clzsi2>
20003ccc:	3020      	adds	r0, #32
20003cce:	e672      	b.n	200039b6 <__aeabi_ddiv+0x176>
20003cd0:	0003      	movs	r3, r0
20003cd2:	4652      	mov	r2, sl
20003cd4:	3b28      	subs	r3, #40	; 0x28
20003cd6:	409a      	lsls	r2, r3
20003cd8:	4693      	mov	fp, r2
20003cda:	2200      	movs	r2, #0
20003cdc:	e6b4      	b.n	20003a48 <__aeabi_ddiv+0x208>
20003cde:	4650      	mov	r0, sl
20003ce0:	f7ff f96c 	bl	20002fbc <__clzsi2>
20003ce4:	3020      	adds	r0, #32
20003ce6:	e69a      	b.n	20003a1e <__aeabi_ddiv+0x1de>
20003ce8:	42a6      	cmp	r6, r4
20003cea:	d1e2      	bne.n	20003cb2 <__aeabi_ddiv+0x472>
20003cec:	45b8      	cmp	r8, r7
20003cee:	d9dc      	bls.n	20003caa <__aeabi_ddiv+0x46a>
20003cf0:	1a34      	subs	r4, r6, r0
20003cf2:	469b      	mov	fp, r3
20003cf4:	e759      	b.n	20003baa <__aeabi_ddiv+0x36a>
20003cf6:	2b1f      	cmp	r3, #31
20003cf8:	dc65      	bgt.n	20003dc6 <__aeabi_ddiv+0x586>
20003cfa:	4c50      	ldr	r4, [pc, #320]	; (20003e3c <__aeabi_ddiv+0x5fc>)
20003cfc:	9900      	ldr	r1, [sp, #0]
20003cfe:	46a4      	mov	ip, r4
20003d00:	465c      	mov	r4, fp
20003d02:	4461      	add	r1, ip
20003d04:	0008      	movs	r0, r1
20003d06:	408c      	lsls	r4, r1
20003d08:	0011      	movs	r1, r2
20003d0a:	4082      	lsls	r2, r0
20003d0c:	40d9      	lsrs	r1, r3
20003d0e:	1e50      	subs	r0, r2, #1
20003d10:	4182      	sbcs	r2, r0
20003d12:	430c      	orrs	r4, r1
20003d14:	4314      	orrs	r4, r2
20003d16:	465a      	mov	r2, fp
20003d18:	40da      	lsrs	r2, r3
20003d1a:	0013      	movs	r3, r2
20003d1c:	0762      	lsls	r2, r4, #29
20003d1e:	d009      	beq.n	20003d34 <__aeabi_ddiv+0x4f4>
20003d20:	220f      	movs	r2, #15
20003d22:	4022      	ands	r2, r4
20003d24:	2a04      	cmp	r2, #4
20003d26:	d005      	beq.n	20003d34 <__aeabi_ddiv+0x4f4>
20003d28:	0022      	movs	r2, r4
20003d2a:	1d14      	adds	r4, r2, #4
20003d2c:	4294      	cmp	r4, r2
20003d2e:	4189      	sbcs	r1, r1
20003d30:	4249      	negs	r1, r1
20003d32:	185b      	adds	r3, r3, r1
20003d34:	021a      	lsls	r2, r3, #8
20003d36:	d562      	bpl.n	20003dfe <__aeabi_ddiv+0x5be>
20003d38:	2201      	movs	r2, #1
20003d3a:	2300      	movs	r3, #0
20003d3c:	2700      	movs	r7, #0
20003d3e:	e60d      	b.n	2000395c <__aeabi_ddiv+0x11c>
20003d40:	428a      	cmp	r2, r1
20003d42:	d800      	bhi.n	20003d46 <__aeabi_ddiv+0x506>
20003d44:	e70a      	b.n	20003b5c <__aeabi_ddiv+0x31c>
20003d46:	1e83      	subs	r3, r0, #2
20003d48:	1989      	adds	r1, r1, r6
20003d4a:	e707      	b.n	20003b5c <__aeabi_ddiv+0x31c>
20003d4c:	230f      	movs	r3, #15
20003d4e:	4013      	ands	r3, r2
20003d50:	2b04      	cmp	r3, #4
20003d52:	d100      	bne.n	20003d56 <__aeabi_ddiv+0x516>
20003d54:	e5e6      	b.n	20003924 <__aeabi_ddiv+0xe4>
20003d56:	1d17      	adds	r7, r2, #4
20003d58:	4297      	cmp	r7, r2
20003d5a:	4192      	sbcs	r2, r2
20003d5c:	4253      	negs	r3, r2
20003d5e:	449b      	add	fp, r3
20003d60:	08fa      	lsrs	r2, r7, #3
20003d62:	e5e0      	b.n	20003926 <__aeabi_ddiv+0xe6>
20003d64:	2800      	cmp	r0, #0
20003d66:	d100      	bne.n	20003d6a <__aeabi_ddiv+0x52a>
20003d68:	e5d7      	b.n	2000391a <__aeabi_ddiv+0xda>
20003d6a:	1871      	adds	r1, r6, r1
20003d6c:	1e53      	subs	r3, r2, #1
20003d6e:	42b1      	cmp	r1, r6
20003d70:	d327      	bcc.n	20003dc2 <__aeabi_ddiv+0x582>
20003d72:	42a9      	cmp	r1, r5
20003d74:	d315      	bcc.n	20003da2 <__aeabi_ddiv+0x562>
20003d76:	d058      	beq.n	20003e2a <__aeabi_ddiv+0x5ea>
20003d78:	001a      	movs	r2, r3
20003d7a:	e773      	b.n	20003c64 <__aeabi_ddiv+0x424>
20003d7c:	2b00      	cmp	r3, #0
20003d7e:	dc00      	bgt.n	20003d82 <__aeabi_ddiv+0x542>
20003d80:	e604      	b.n	2000398c <__aeabi_ddiv+0x14c>
20003d82:	2301      	movs	r3, #1
20003d84:	2200      	movs	r2, #0
20003d86:	449b      	add	fp, r3
20003d88:	e5cd      	b.n	20003926 <__aeabi_ddiv+0xe6>
20003d8a:	2302      	movs	r3, #2
20003d8c:	4447      	add	r7, r8
20003d8e:	4547      	cmp	r7, r8
20003d90:	4189      	sbcs	r1, r1
20003d92:	425b      	negs	r3, r3
20003d94:	469c      	mov	ip, r3
20003d96:	4249      	negs	r1, r1
20003d98:	1989      	adds	r1, r1, r6
20003d9a:	190c      	adds	r4, r1, r4
20003d9c:	44e3      	add	fp, ip
20003d9e:	1a24      	subs	r4, r4, r0
20003da0:	e703      	b.n	20003baa <__aeabi_ddiv+0x36a>
20003da2:	4643      	mov	r3, r8
20003da4:	005f      	lsls	r7, r3, #1
20003da6:	4547      	cmp	r7, r8
20003da8:	419b      	sbcs	r3, r3
20003daa:	46b8      	mov	r8, r7
20003dac:	425b      	negs	r3, r3
20003dae:	199e      	adds	r6, r3, r6
20003db0:	3a02      	subs	r2, #2
20003db2:	1989      	adds	r1, r1, r6
20003db4:	42a9      	cmp	r1, r5
20003db6:	d000      	beq.n	20003dba <__aeabi_ddiv+0x57a>
20003db8:	e754      	b.n	20003c64 <__aeabi_ddiv+0x424>
20003dba:	4540      	cmp	r0, r8
20003dbc:	d000      	beq.n	20003dc0 <__aeabi_ddiv+0x580>
20003dbe:	e751      	b.n	20003c64 <__aeabi_ddiv+0x424>
20003dc0:	e5ab      	b.n	2000391a <__aeabi_ddiv+0xda>
20003dc2:	001a      	movs	r2, r3
20003dc4:	e7f6      	b.n	20003db4 <__aeabi_ddiv+0x574>
20003dc6:	211f      	movs	r1, #31
20003dc8:	465f      	mov	r7, fp
20003dca:	4249      	negs	r1, r1
20003dcc:	1b0c      	subs	r4, r1, r4
20003dce:	40e7      	lsrs	r7, r4
20003dd0:	2b20      	cmp	r3, #32
20003dd2:	d007      	beq.n	20003de4 <__aeabi_ddiv+0x5a4>
20003dd4:	491a      	ldr	r1, [pc, #104]	; (20003e40 <__aeabi_ddiv+0x600>)
20003dd6:	9b00      	ldr	r3, [sp, #0]
20003dd8:	468c      	mov	ip, r1
20003dda:	4463      	add	r3, ip
20003ddc:	0018      	movs	r0, r3
20003dde:	465b      	mov	r3, fp
20003de0:	4083      	lsls	r3, r0
20003de2:	431a      	orrs	r2, r3
20003de4:	1e50      	subs	r0, r2, #1
20003de6:	4182      	sbcs	r2, r0
20003de8:	433a      	orrs	r2, r7
20003dea:	2707      	movs	r7, #7
20003dec:	2300      	movs	r3, #0
20003dee:	4017      	ands	r7, r2
20003df0:	d009      	beq.n	20003e06 <__aeabi_ddiv+0x5c6>
20003df2:	210f      	movs	r1, #15
20003df4:	2300      	movs	r3, #0
20003df6:	4011      	ands	r1, r2
20003df8:	0014      	movs	r4, r2
20003dfa:	2904      	cmp	r1, #4
20003dfc:	d195      	bne.n	20003d2a <__aeabi_ddiv+0x4ea>
20003dfe:	0022      	movs	r2, r4
20003e00:	075f      	lsls	r7, r3, #29
20003e02:	025b      	lsls	r3, r3, #9
20003e04:	0b1b      	lsrs	r3, r3, #12
20003e06:	08d2      	lsrs	r2, r2, #3
20003e08:	4317      	orrs	r7, r2
20003e0a:	2200      	movs	r2, #0
20003e0c:	e5a6      	b.n	2000395c <__aeabi_ddiv+0x11c>
20003e0e:	2380      	movs	r3, #128	; 0x80
20003e10:	4659      	mov	r1, fp
20003e12:	031b      	lsls	r3, r3, #12
20003e14:	430b      	orrs	r3, r1
20003e16:	031b      	lsls	r3, r3, #12
20003e18:	0017      	movs	r7, r2
20003e1a:	0b1b      	lsrs	r3, r3, #12
20003e1c:	4a06      	ldr	r2, [pc, #24]	; (20003e38 <__aeabi_ddiv+0x5f8>)
20003e1e:	e59d      	b.n	2000395c <__aeabi_ddiv+0x11c>
20003e20:	42bd      	cmp	r5, r7
20003e22:	d8b2      	bhi.n	20003d8a <__aeabi_ddiv+0x54a>
20003e24:	469b      	mov	fp, r3
20003e26:	2400      	movs	r4, #0
20003e28:	e6bf      	b.n	20003baa <__aeabi_ddiv+0x36a>
20003e2a:	4580      	cmp	r8, r0
20003e2c:	d3b9      	bcc.n	20003da2 <__aeabi_ddiv+0x562>
20003e2e:	001a      	movs	r2, r3
20003e30:	e7c3      	b.n	20003dba <__aeabi_ddiv+0x57a>
20003e32:	46c0      	nop			; (mov r8, r8)
20003e34:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003e38:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003e3c:	0000041e 	andeq	r0, r0, lr, lsl r4
20003e40:	0000043e 	andeq	r0, r0, lr, lsr r4

20003e44 <__aeabi_dmul>:
20003e44:	b5f0      	push	{r4, r5, r6, r7, lr}
20003e46:	4657      	mov	r7, sl
20003e48:	46de      	mov	lr, fp
20003e4a:	464e      	mov	r6, r9
20003e4c:	4645      	mov	r5, r8
20003e4e:	b5e0      	push	{r5, r6, r7, lr}
20003e50:	4683      	mov	fp, r0
20003e52:	0006      	movs	r6, r0
20003e54:	030f      	lsls	r7, r1, #12
20003e56:	0048      	lsls	r0, r1, #1
20003e58:	b087      	sub	sp, #28
20003e5a:	4692      	mov	sl, r2
20003e5c:	001d      	movs	r5, r3
20003e5e:	0b3f      	lsrs	r7, r7, #12
20003e60:	0d40      	lsrs	r0, r0, #21
20003e62:	0fcc      	lsrs	r4, r1, #31
20003e64:	2800      	cmp	r0, #0
20003e66:	d100      	bne.n	20003e6a <__aeabi_dmul+0x26>
20003e68:	e06f      	b.n	20003f4a <__aeabi_dmul+0x106>
20003e6a:	4bde      	ldr	r3, [pc, #888]	; (200041e4 <__aeabi_dmul+0x3a0>)
20003e6c:	4298      	cmp	r0, r3
20003e6e:	d038      	beq.n	20003ee2 <__aeabi_dmul+0x9e>
20003e70:	2380      	movs	r3, #128	; 0x80
20003e72:	00ff      	lsls	r7, r7, #3
20003e74:	041b      	lsls	r3, r3, #16
20003e76:	431f      	orrs	r7, r3
20003e78:	0f73      	lsrs	r3, r6, #29
20003e7a:	433b      	orrs	r3, r7
20003e7c:	9301      	str	r3, [sp, #4]
20003e7e:	4bda      	ldr	r3, [pc, #872]	; (200041e8 <__aeabi_dmul+0x3a4>)
20003e80:	2700      	movs	r7, #0
20003e82:	4699      	mov	r9, r3
20003e84:	2300      	movs	r3, #0
20003e86:	469b      	mov	fp, r3
20003e88:	00f6      	lsls	r6, r6, #3
20003e8a:	4481      	add	r9, r0
20003e8c:	032b      	lsls	r3, r5, #12
20003e8e:	0069      	lsls	r1, r5, #1
20003e90:	0b1b      	lsrs	r3, r3, #12
20003e92:	4652      	mov	r2, sl
20003e94:	4698      	mov	r8, r3
20003e96:	0d49      	lsrs	r1, r1, #21
20003e98:	0fed      	lsrs	r5, r5, #31
20003e9a:	2900      	cmp	r1, #0
20003e9c:	d100      	bne.n	20003ea0 <__aeabi_dmul+0x5c>
20003e9e:	e085      	b.n	20003fac <__aeabi_dmul+0x168>
20003ea0:	4bd0      	ldr	r3, [pc, #832]	; (200041e4 <__aeabi_dmul+0x3a0>)
20003ea2:	4299      	cmp	r1, r3
20003ea4:	d100      	bne.n	20003ea8 <__aeabi_dmul+0x64>
20003ea6:	e073      	b.n	20003f90 <__aeabi_dmul+0x14c>
20003ea8:	4643      	mov	r3, r8
20003eaa:	00da      	lsls	r2, r3, #3
20003eac:	2380      	movs	r3, #128	; 0x80
20003eae:	041b      	lsls	r3, r3, #16
20003eb0:	4313      	orrs	r3, r2
20003eb2:	4652      	mov	r2, sl
20003eb4:	48cc      	ldr	r0, [pc, #816]	; (200041e8 <__aeabi_dmul+0x3a4>)
20003eb6:	0f52      	lsrs	r2, r2, #29
20003eb8:	4684      	mov	ip, r0
20003eba:	4313      	orrs	r3, r2
20003ebc:	4652      	mov	r2, sl
20003ebe:	2000      	movs	r0, #0
20003ec0:	4461      	add	r1, ip
20003ec2:	00d2      	lsls	r2, r2, #3
20003ec4:	4489      	add	r9, r1
20003ec6:	0021      	movs	r1, r4
20003ec8:	4069      	eors	r1, r5
20003eca:	9100      	str	r1, [sp, #0]
20003ecc:	468c      	mov	ip, r1
20003ece:	2101      	movs	r1, #1
20003ed0:	4449      	add	r1, r9
20003ed2:	468a      	mov	sl, r1
20003ed4:	2f0f      	cmp	r7, #15
20003ed6:	d900      	bls.n	20003eda <__aeabi_dmul+0x96>
20003ed8:	e090      	b.n	20003ffc <__aeabi_dmul+0x1b8>
20003eda:	49c4      	ldr	r1, [pc, #784]	; (200041ec <__aeabi_dmul+0x3a8>)
20003edc:	00bf      	lsls	r7, r7, #2
20003ede:	59cf      	ldr	r7, [r1, r7]
20003ee0:	46bf      	mov	pc, r7
20003ee2:	465b      	mov	r3, fp
20003ee4:	433b      	orrs	r3, r7
20003ee6:	9301      	str	r3, [sp, #4]
20003ee8:	d000      	beq.n	20003eec <__aeabi_dmul+0xa8>
20003eea:	e16a      	b.n	200041c2 <__aeabi_dmul+0x37e>
20003eec:	2302      	movs	r3, #2
20003eee:	2708      	movs	r7, #8
20003ef0:	2600      	movs	r6, #0
20003ef2:	4681      	mov	r9, r0
20003ef4:	469b      	mov	fp, r3
20003ef6:	e7c9      	b.n	20003e8c <__aeabi_dmul+0x48>
20003ef8:	0032      	movs	r2, r6
20003efa:	4658      	mov	r0, fp
20003efc:	9b01      	ldr	r3, [sp, #4]
20003efe:	4661      	mov	r1, ip
20003f00:	9100      	str	r1, [sp, #0]
20003f02:	2802      	cmp	r0, #2
20003f04:	d100      	bne.n	20003f08 <__aeabi_dmul+0xc4>
20003f06:	e075      	b.n	20003ff4 <__aeabi_dmul+0x1b0>
20003f08:	2803      	cmp	r0, #3
20003f0a:	d100      	bne.n	20003f0e <__aeabi_dmul+0xca>
20003f0c:	e1fe      	b.n	2000430c <__aeabi_dmul+0x4c8>
20003f0e:	2801      	cmp	r0, #1
20003f10:	d000      	beq.n	20003f14 <__aeabi_dmul+0xd0>
20003f12:	e12c      	b.n	2000416e <__aeabi_dmul+0x32a>
20003f14:	2300      	movs	r3, #0
20003f16:	2700      	movs	r7, #0
20003f18:	2600      	movs	r6, #0
20003f1a:	2500      	movs	r5, #0
20003f1c:	033f      	lsls	r7, r7, #12
20003f1e:	0d2a      	lsrs	r2, r5, #20
20003f20:	0b3f      	lsrs	r7, r7, #12
20003f22:	48b3      	ldr	r0, [pc, #716]	; (200041f0 <__aeabi_dmul+0x3ac>)
20003f24:	0512      	lsls	r2, r2, #20
20003f26:	433a      	orrs	r2, r7
20003f28:	4002      	ands	r2, r0
20003f2a:	051b      	lsls	r3, r3, #20
20003f2c:	4313      	orrs	r3, r2
20003f2e:	9a00      	ldr	r2, [sp, #0]
20003f30:	005b      	lsls	r3, r3, #1
20003f32:	07d1      	lsls	r1, r2, #31
20003f34:	085b      	lsrs	r3, r3, #1
20003f36:	430b      	orrs	r3, r1
20003f38:	0030      	movs	r0, r6
20003f3a:	0019      	movs	r1, r3
20003f3c:	b007      	add	sp, #28
20003f3e:	bc3c      	pop	{r2, r3, r4, r5}
20003f40:	4690      	mov	r8, r2
20003f42:	4699      	mov	r9, r3
20003f44:	46a2      	mov	sl, r4
20003f46:	46ab      	mov	fp, r5
20003f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
20003f4a:	465b      	mov	r3, fp
20003f4c:	433b      	orrs	r3, r7
20003f4e:	9301      	str	r3, [sp, #4]
20003f50:	d100      	bne.n	20003f54 <__aeabi_dmul+0x110>
20003f52:	e12f      	b.n	200041b4 <__aeabi_dmul+0x370>
20003f54:	2f00      	cmp	r7, #0
20003f56:	d100      	bne.n	20003f5a <__aeabi_dmul+0x116>
20003f58:	e1a5      	b.n	200042a6 <__aeabi_dmul+0x462>
20003f5a:	0038      	movs	r0, r7
20003f5c:	f7ff f82e 	bl	20002fbc <__clzsi2>
20003f60:	0003      	movs	r3, r0
20003f62:	3b0b      	subs	r3, #11
20003f64:	2b1c      	cmp	r3, #28
20003f66:	dd00      	ble.n	20003f6a <__aeabi_dmul+0x126>
20003f68:	e196      	b.n	20004298 <__aeabi_dmul+0x454>
20003f6a:	221d      	movs	r2, #29
20003f6c:	1ad3      	subs	r3, r2, r3
20003f6e:	465a      	mov	r2, fp
20003f70:	0001      	movs	r1, r0
20003f72:	40da      	lsrs	r2, r3
20003f74:	465e      	mov	r6, fp
20003f76:	3908      	subs	r1, #8
20003f78:	408f      	lsls	r7, r1
20003f7a:	0013      	movs	r3, r2
20003f7c:	408e      	lsls	r6, r1
20003f7e:	433b      	orrs	r3, r7
20003f80:	9301      	str	r3, [sp, #4]
20003f82:	4b9c      	ldr	r3, [pc, #624]	; (200041f4 <__aeabi_dmul+0x3b0>)
20003f84:	2700      	movs	r7, #0
20003f86:	1a1b      	subs	r3, r3, r0
20003f88:	4699      	mov	r9, r3
20003f8a:	2300      	movs	r3, #0
20003f8c:	469b      	mov	fp, r3
20003f8e:	e77d      	b.n	20003e8c <__aeabi_dmul+0x48>
20003f90:	4641      	mov	r1, r8
20003f92:	4653      	mov	r3, sl
20003f94:	430b      	orrs	r3, r1
20003f96:	4993      	ldr	r1, [pc, #588]	; (200041e4 <__aeabi_dmul+0x3a0>)
20003f98:	468c      	mov	ip, r1
20003f9a:	44e1      	add	r9, ip
20003f9c:	2b00      	cmp	r3, #0
20003f9e:	d000      	beq.n	20003fa2 <__aeabi_dmul+0x15e>
20003fa0:	e11a      	b.n	200041d8 <__aeabi_dmul+0x394>
20003fa2:	2202      	movs	r2, #2
20003fa4:	2002      	movs	r0, #2
20003fa6:	4317      	orrs	r7, r2
20003fa8:	2200      	movs	r2, #0
20003faa:	e78c      	b.n	20003ec6 <__aeabi_dmul+0x82>
20003fac:	4313      	orrs	r3, r2
20003fae:	d100      	bne.n	20003fb2 <__aeabi_dmul+0x16e>
20003fb0:	e10d      	b.n	200041ce <__aeabi_dmul+0x38a>
20003fb2:	4643      	mov	r3, r8
20003fb4:	2b00      	cmp	r3, #0
20003fb6:	d100      	bne.n	20003fba <__aeabi_dmul+0x176>
20003fb8:	e181      	b.n	200042be <__aeabi_dmul+0x47a>
20003fba:	4640      	mov	r0, r8
20003fbc:	f7fe fffe 	bl	20002fbc <__clzsi2>
20003fc0:	0002      	movs	r2, r0
20003fc2:	3a0b      	subs	r2, #11
20003fc4:	2a1c      	cmp	r2, #28
20003fc6:	dd00      	ble.n	20003fca <__aeabi_dmul+0x186>
20003fc8:	e172      	b.n	200042b0 <__aeabi_dmul+0x46c>
20003fca:	0001      	movs	r1, r0
20003fcc:	4643      	mov	r3, r8
20003fce:	3908      	subs	r1, #8
20003fd0:	408b      	lsls	r3, r1
20003fd2:	4698      	mov	r8, r3
20003fd4:	231d      	movs	r3, #29
20003fd6:	1a9a      	subs	r2, r3, r2
20003fd8:	4653      	mov	r3, sl
20003fda:	40d3      	lsrs	r3, r2
20003fdc:	001a      	movs	r2, r3
20003fde:	4643      	mov	r3, r8
20003fe0:	4313      	orrs	r3, r2
20003fe2:	4652      	mov	r2, sl
20003fe4:	408a      	lsls	r2, r1
20003fe6:	4649      	mov	r1, r9
20003fe8:	1a08      	subs	r0, r1, r0
20003fea:	4982      	ldr	r1, [pc, #520]	; (200041f4 <__aeabi_dmul+0x3b0>)
20003fec:	4689      	mov	r9, r1
20003fee:	4481      	add	r9, r0
20003ff0:	2000      	movs	r0, #0
20003ff2:	e768      	b.n	20003ec6 <__aeabi_dmul+0x82>
20003ff4:	4b7b      	ldr	r3, [pc, #492]	; (200041e4 <__aeabi_dmul+0x3a0>)
20003ff6:	2700      	movs	r7, #0
20003ff8:	2600      	movs	r6, #0
20003ffa:	e78e      	b.n	20003f1a <__aeabi_dmul+0xd6>
20003ffc:	0c14      	lsrs	r4, r2, #16
20003ffe:	0412      	lsls	r2, r2, #16
20004000:	0c12      	lsrs	r2, r2, #16
20004002:	0011      	movs	r1, r2
20004004:	0c37      	lsrs	r7, r6, #16
20004006:	0436      	lsls	r6, r6, #16
20004008:	0c35      	lsrs	r5, r6, #16
2000400a:	4379      	muls	r1, r7
2000400c:	0028      	movs	r0, r5
2000400e:	468c      	mov	ip, r1
20004010:	002e      	movs	r6, r5
20004012:	4360      	muls	r0, r4
20004014:	4460      	add	r0, ip
20004016:	4683      	mov	fp, r0
20004018:	4356      	muls	r6, r2
2000401a:	0021      	movs	r1, r4
2000401c:	0c30      	lsrs	r0, r6, #16
2000401e:	4680      	mov	r8, r0
20004020:	4658      	mov	r0, fp
20004022:	4379      	muls	r1, r7
20004024:	4440      	add	r0, r8
20004026:	9102      	str	r1, [sp, #8]
20004028:	4584      	cmp	ip, r0
2000402a:	d906      	bls.n	2000403a <__aeabi_dmul+0x1f6>
2000402c:	4688      	mov	r8, r1
2000402e:	2180      	movs	r1, #128	; 0x80
20004030:	0249      	lsls	r1, r1, #9
20004032:	468c      	mov	ip, r1
20004034:	44e0      	add	r8, ip
20004036:	4641      	mov	r1, r8
20004038:	9102      	str	r1, [sp, #8]
2000403a:	0436      	lsls	r6, r6, #16
2000403c:	0c01      	lsrs	r1, r0, #16
2000403e:	0c36      	lsrs	r6, r6, #16
20004040:	0400      	lsls	r0, r0, #16
20004042:	468b      	mov	fp, r1
20004044:	1981      	adds	r1, r0, r6
20004046:	0c1e      	lsrs	r6, r3, #16
20004048:	041b      	lsls	r3, r3, #16
2000404a:	0c1b      	lsrs	r3, r3, #16
2000404c:	9103      	str	r1, [sp, #12]
2000404e:	0019      	movs	r1, r3
20004050:	4379      	muls	r1, r7
20004052:	468c      	mov	ip, r1
20004054:	0028      	movs	r0, r5
20004056:	4375      	muls	r5, r6
20004058:	4465      	add	r5, ip
2000405a:	46a8      	mov	r8, r5
2000405c:	4358      	muls	r0, r3
2000405e:	0c05      	lsrs	r5, r0, #16
20004060:	4445      	add	r5, r8
20004062:	4377      	muls	r7, r6
20004064:	42a9      	cmp	r1, r5
20004066:	d903      	bls.n	20004070 <__aeabi_dmul+0x22c>
20004068:	2180      	movs	r1, #128	; 0x80
2000406a:	0249      	lsls	r1, r1, #9
2000406c:	468c      	mov	ip, r1
2000406e:	4467      	add	r7, ip
20004070:	0c29      	lsrs	r1, r5, #16
20004072:	468c      	mov	ip, r1
20004074:	0039      	movs	r1, r7
20004076:	0400      	lsls	r0, r0, #16
20004078:	0c00      	lsrs	r0, r0, #16
2000407a:	042d      	lsls	r5, r5, #16
2000407c:	182d      	adds	r5, r5, r0
2000407e:	4461      	add	r1, ip
20004080:	44ab      	add	fp, r5
20004082:	9105      	str	r1, [sp, #20]
20004084:	4659      	mov	r1, fp
20004086:	9104      	str	r1, [sp, #16]
20004088:	9901      	ldr	r1, [sp, #4]
2000408a:	040f      	lsls	r7, r1, #16
2000408c:	0c3f      	lsrs	r7, r7, #16
2000408e:	0c08      	lsrs	r0, r1, #16
20004090:	0039      	movs	r1, r7
20004092:	4351      	muls	r1, r2
20004094:	4342      	muls	r2, r0
20004096:	4690      	mov	r8, r2
20004098:	0002      	movs	r2, r0
2000409a:	468c      	mov	ip, r1
2000409c:	0c09      	lsrs	r1, r1, #16
2000409e:	468b      	mov	fp, r1
200040a0:	4362      	muls	r2, r4
200040a2:	437c      	muls	r4, r7
200040a4:	4444      	add	r4, r8
200040a6:	445c      	add	r4, fp
200040a8:	45a0      	cmp	r8, r4
200040aa:	d903      	bls.n	200040b4 <__aeabi_dmul+0x270>
200040ac:	2180      	movs	r1, #128	; 0x80
200040ae:	0249      	lsls	r1, r1, #9
200040b0:	4688      	mov	r8, r1
200040b2:	4442      	add	r2, r8
200040b4:	0c21      	lsrs	r1, r4, #16
200040b6:	4688      	mov	r8, r1
200040b8:	4661      	mov	r1, ip
200040ba:	0409      	lsls	r1, r1, #16
200040bc:	0c09      	lsrs	r1, r1, #16
200040be:	468c      	mov	ip, r1
200040c0:	0039      	movs	r1, r7
200040c2:	4359      	muls	r1, r3
200040c4:	4343      	muls	r3, r0
200040c6:	4370      	muls	r0, r6
200040c8:	437e      	muls	r6, r7
200040ca:	0c0f      	lsrs	r7, r1, #16
200040cc:	18f6      	adds	r6, r6, r3
200040ce:	0424      	lsls	r4, r4, #16
200040d0:	19be      	adds	r6, r7, r6
200040d2:	4464      	add	r4, ip
200040d4:	4442      	add	r2, r8
200040d6:	468c      	mov	ip, r1
200040d8:	42b3      	cmp	r3, r6
200040da:	d903      	bls.n	200040e4 <__aeabi_dmul+0x2a0>
200040dc:	2380      	movs	r3, #128	; 0x80
200040de:	025b      	lsls	r3, r3, #9
200040e0:	4698      	mov	r8, r3
200040e2:	4440      	add	r0, r8
200040e4:	9b02      	ldr	r3, [sp, #8]
200040e6:	4661      	mov	r1, ip
200040e8:	4698      	mov	r8, r3
200040ea:	9b04      	ldr	r3, [sp, #16]
200040ec:	0437      	lsls	r7, r6, #16
200040ee:	4443      	add	r3, r8
200040f0:	469b      	mov	fp, r3
200040f2:	45ab      	cmp	fp, r5
200040f4:	41ad      	sbcs	r5, r5
200040f6:	426b      	negs	r3, r5
200040f8:	040d      	lsls	r5, r1, #16
200040fa:	9905      	ldr	r1, [sp, #20]
200040fc:	0c2d      	lsrs	r5, r5, #16
200040fe:	468c      	mov	ip, r1
20004100:	197f      	adds	r7, r7, r5
20004102:	4467      	add	r7, ip
20004104:	18fd      	adds	r5, r7, r3
20004106:	46a8      	mov	r8, r5
20004108:	465d      	mov	r5, fp
2000410a:	192d      	adds	r5, r5, r4
2000410c:	42a5      	cmp	r5, r4
2000410e:	41a4      	sbcs	r4, r4
20004110:	4693      	mov	fp, r2
20004112:	4264      	negs	r4, r4
20004114:	46a4      	mov	ip, r4
20004116:	44c3      	add	fp, r8
20004118:	44dc      	add	ip, fp
2000411a:	428f      	cmp	r7, r1
2000411c:	41bf      	sbcs	r7, r7
2000411e:	4598      	cmp	r8, r3
20004120:	419b      	sbcs	r3, r3
20004122:	4593      	cmp	fp, r2
20004124:	4192      	sbcs	r2, r2
20004126:	45a4      	cmp	ip, r4
20004128:	41a4      	sbcs	r4, r4
2000412a:	425b      	negs	r3, r3
2000412c:	427f      	negs	r7, r7
2000412e:	431f      	orrs	r7, r3
20004130:	0c36      	lsrs	r6, r6, #16
20004132:	4252      	negs	r2, r2
20004134:	4264      	negs	r4, r4
20004136:	19bf      	adds	r7, r7, r6
20004138:	4322      	orrs	r2, r4
2000413a:	18bf      	adds	r7, r7, r2
2000413c:	4662      	mov	r2, ip
2000413e:	1838      	adds	r0, r7, r0
20004140:	0243      	lsls	r3, r0, #9
20004142:	0dd2      	lsrs	r2, r2, #23
20004144:	9903      	ldr	r1, [sp, #12]
20004146:	4313      	orrs	r3, r2
20004148:	026a      	lsls	r2, r5, #9
2000414a:	430a      	orrs	r2, r1
2000414c:	1e50      	subs	r0, r2, #1
2000414e:	4182      	sbcs	r2, r0
20004150:	4661      	mov	r1, ip
20004152:	0ded      	lsrs	r5, r5, #23
20004154:	432a      	orrs	r2, r5
20004156:	024e      	lsls	r6, r1, #9
20004158:	4332      	orrs	r2, r6
2000415a:	01d9      	lsls	r1, r3, #7
2000415c:	d400      	bmi.n	20004160 <__aeabi_dmul+0x31c>
2000415e:	e0b3      	b.n	200042c8 <__aeabi_dmul+0x484>
20004160:	2601      	movs	r6, #1
20004162:	0850      	lsrs	r0, r2, #1
20004164:	4032      	ands	r2, r6
20004166:	4302      	orrs	r2, r0
20004168:	07de      	lsls	r6, r3, #31
2000416a:	4332      	orrs	r2, r6
2000416c:	085b      	lsrs	r3, r3, #1
2000416e:	4c22      	ldr	r4, [pc, #136]	; (200041f8 <__aeabi_dmul+0x3b4>)
20004170:	4454      	add	r4, sl
20004172:	2c00      	cmp	r4, #0
20004174:	dd62      	ble.n	2000423c <__aeabi_dmul+0x3f8>
20004176:	0751      	lsls	r1, r2, #29
20004178:	d009      	beq.n	2000418e <__aeabi_dmul+0x34a>
2000417a:	200f      	movs	r0, #15
2000417c:	4010      	ands	r0, r2
2000417e:	2804      	cmp	r0, #4
20004180:	d005      	beq.n	2000418e <__aeabi_dmul+0x34a>
20004182:	1d10      	adds	r0, r2, #4
20004184:	4290      	cmp	r0, r2
20004186:	4192      	sbcs	r2, r2
20004188:	4252      	negs	r2, r2
2000418a:	189b      	adds	r3, r3, r2
2000418c:	0002      	movs	r2, r0
2000418e:	01d9      	lsls	r1, r3, #7
20004190:	d504      	bpl.n	2000419c <__aeabi_dmul+0x358>
20004192:	2480      	movs	r4, #128	; 0x80
20004194:	4819      	ldr	r0, [pc, #100]	; (200041fc <__aeabi_dmul+0x3b8>)
20004196:	00e4      	lsls	r4, r4, #3
20004198:	4003      	ands	r3, r0
2000419a:	4454      	add	r4, sl
2000419c:	4818      	ldr	r0, [pc, #96]	; (20004200 <__aeabi_dmul+0x3bc>)
2000419e:	4284      	cmp	r4, r0
200041a0:	dd00      	ble.n	200041a4 <__aeabi_dmul+0x360>
200041a2:	e727      	b.n	20003ff4 <__aeabi_dmul+0x1b0>
200041a4:	075e      	lsls	r6, r3, #29
200041a6:	025b      	lsls	r3, r3, #9
200041a8:	08d2      	lsrs	r2, r2, #3
200041aa:	0b1f      	lsrs	r7, r3, #12
200041ac:	0563      	lsls	r3, r4, #21
200041ae:	4316      	orrs	r6, r2
200041b0:	0d5b      	lsrs	r3, r3, #21
200041b2:	e6b2      	b.n	20003f1a <__aeabi_dmul+0xd6>
200041b4:	2300      	movs	r3, #0
200041b6:	4699      	mov	r9, r3
200041b8:	3301      	adds	r3, #1
200041ba:	2704      	movs	r7, #4
200041bc:	2600      	movs	r6, #0
200041be:	469b      	mov	fp, r3
200041c0:	e664      	b.n	20003e8c <__aeabi_dmul+0x48>
200041c2:	2303      	movs	r3, #3
200041c4:	9701      	str	r7, [sp, #4]
200041c6:	4681      	mov	r9, r0
200041c8:	270c      	movs	r7, #12
200041ca:	469b      	mov	fp, r3
200041cc:	e65e      	b.n	20003e8c <__aeabi_dmul+0x48>
200041ce:	2201      	movs	r2, #1
200041d0:	2001      	movs	r0, #1
200041d2:	4317      	orrs	r7, r2
200041d4:	2200      	movs	r2, #0
200041d6:	e676      	b.n	20003ec6 <__aeabi_dmul+0x82>
200041d8:	2303      	movs	r3, #3
200041da:	2003      	movs	r0, #3
200041dc:	431f      	orrs	r7, r3
200041de:	4643      	mov	r3, r8
200041e0:	e671      	b.n	20003ec6 <__aeabi_dmul+0x82>
200041e2:	46c0      	nop			; (mov r8, r8)
200041e4:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200041e8:	fffffc01 			; <UNDEFINED> instruction: 0xfffffc01
200041ec:	200050d0 	ldrdcs	r5, [r0], -r0
200041f0:	800fffff 	strdhi	pc, [pc], -pc	; <UNPREDICTABLE>
200041f4:	fffffc0d 			; <UNDEFINED> instruction: 0xfffffc0d
200041f8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200041fc:	feffffff 	mrc2	15, 7, pc, cr15, cr15, {7}
20004200:	000007fe 	strdeq	r0, [r0], -lr
20004204:	2300      	movs	r3, #0
20004206:	2780      	movs	r7, #128	; 0x80
20004208:	9300      	str	r3, [sp, #0]
2000420a:	033f      	lsls	r7, r7, #12
2000420c:	2600      	movs	r6, #0
2000420e:	4b43      	ldr	r3, [pc, #268]	; (2000431c <__aeabi_dmul+0x4d8>)
20004210:	e683      	b.n	20003f1a <__aeabi_dmul+0xd6>
20004212:	9b01      	ldr	r3, [sp, #4]
20004214:	0032      	movs	r2, r6
20004216:	46a4      	mov	ip, r4
20004218:	4658      	mov	r0, fp
2000421a:	e670      	b.n	20003efe <__aeabi_dmul+0xba>
2000421c:	46ac      	mov	ip, r5
2000421e:	e66e      	b.n	20003efe <__aeabi_dmul+0xba>
20004220:	2780      	movs	r7, #128	; 0x80
20004222:	9901      	ldr	r1, [sp, #4]
20004224:	033f      	lsls	r7, r7, #12
20004226:	4239      	tst	r1, r7
20004228:	d02d      	beq.n	20004286 <__aeabi_dmul+0x442>
2000422a:	423b      	tst	r3, r7
2000422c:	d12b      	bne.n	20004286 <__aeabi_dmul+0x442>
2000422e:	431f      	orrs	r7, r3
20004230:	033f      	lsls	r7, r7, #12
20004232:	0b3f      	lsrs	r7, r7, #12
20004234:	9500      	str	r5, [sp, #0]
20004236:	0016      	movs	r6, r2
20004238:	4b38      	ldr	r3, [pc, #224]	; (2000431c <__aeabi_dmul+0x4d8>)
2000423a:	e66e      	b.n	20003f1a <__aeabi_dmul+0xd6>
2000423c:	2501      	movs	r5, #1
2000423e:	1b2d      	subs	r5, r5, r4
20004240:	2d38      	cmp	r5, #56	; 0x38
20004242:	dd00      	ble.n	20004246 <__aeabi_dmul+0x402>
20004244:	e666      	b.n	20003f14 <__aeabi_dmul+0xd0>
20004246:	2d1f      	cmp	r5, #31
20004248:	dc40      	bgt.n	200042cc <__aeabi_dmul+0x488>
2000424a:	4835      	ldr	r0, [pc, #212]	; (20004320 <__aeabi_dmul+0x4dc>)
2000424c:	001c      	movs	r4, r3
2000424e:	4450      	add	r0, sl
20004250:	0016      	movs	r6, r2
20004252:	4082      	lsls	r2, r0
20004254:	4084      	lsls	r4, r0
20004256:	40ee      	lsrs	r6, r5
20004258:	1e50      	subs	r0, r2, #1
2000425a:	4182      	sbcs	r2, r0
2000425c:	4334      	orrs	r4, r6
2000425e:	4314      	orrs	r4, r2
20004260:	40eb      	lsrs	r3, r5
20004262:	0762      	lsls	r2, r4, #29
20004264:	d009      	beq.n	2000427a <__aeabi_dmul+0x436>
20004266:	220f      	movs	r2, #15
20004268:	4022      	ands	r2, r4
2000426a:	2a04      	cmp	r2, #4
2000426c:	d005      	beq.n	2000427a <__aeabi_dmul+0x436>
2000426e:	0022      	movs	r2, r4
20004270:	1d14      	adds	r4, r2, #4
20004272:	4294      	cmp	r4, r2
20004274:	4180      	sbcs	r0, r0
20004276:	4240      	negs	r0, r0
20004278:	181b      	adds	r3, r3, r0
2000427a:	021a      	lsls	r2, r3, #8
2000427c:	d53e      	bpl.n	200042fc <__aeabi_dmul+0x4b8>
2000427e:	2301      	movs	r3, #1
20004280:	2700      	movs	r7, #0
20004282:	2600      	movs	r6, #0
20004284:	e649      	b.n	20003f1a <__aeabi_dmul+0xd6>
20004286:	2780      	movs	r7, #128	; 0x80
20004288:	9b01      	ldr	r3, [sp, #4]
2000428a:	033f      	lsls	r7, r7, #12
2000428c:	431f      	orrs	r7, r3
2000428e:	033f      	lsls	r7, r7, #12
20004290:	0b3f      	lsrs	r7, r7, #12
20004292:	9400      	str	r4, [sp, #0]
20004294:	4b21      	ldr	r3, [pc, #132]	; (2000431c <__aeabi_dmul+0x4d8>)
20004296:	e640      	b.n	20003f1a <__aeabi_dmul+0xd6>
20004298:	0003      	movs	r3, r0
2000429a:	465a      	mov	r2, fp
2000429c:	3b28      	subs	r3, #40	; 0x28
2000429e:	409a      	lsls	r2, r3
200042a0:	2600      	movs	r6, #0
200042a2:	9201      	str	r2, [sp, #4]
200042a4:	e66d      	b.n	20003f82 <__aeabi_dmul+0x13e>
200042a6:	4658      	mov	r0, fp
200042a8:	f7fe fe88 	bl	20002fbc <__clzsi2>
200042ac:	3020      	adds	r0, #32
200042ae:	e657      	b.n	20003f60 <__aeabi_dmul+0x11c>
200042b0:	0003      	movs	r3, r0
200042b2:	4652      	mov	r2, sl
200042b4:	3b28      	subs	r3, #40	; 0x28
200042b6:	409a      	lsls	r2, r3
200042b8:	0013      	movs	r3, r2
200042ba:	2200      	movs	r2, #0
200042bc:	e693      	b.n	20003fe6 <__aeabi_dmul+0x1a2>
200042be:	4650      	mov	r0, sl
200042c0:	f7fe fe7c 	bl	20002fbc <__clzsi2>
200042c4:	3020      	adds	r0, #32
200042c6:	e67b      	b.n	20003fc0 <__aeabi_dmul+0x17c>
200042c8:	46ca      	mov	sl, r9
200042ca:	e750      	b.n	2000416e <__aeabi_dmul+0x32a>
200042cc:	201f      	movs	r0, #31
200042ce:	001e      	movs	r6, r3
200042d0:	4240      	negs	r0, r0
200042d2:	1b04      	subs	r4, r0, r4
200042d4:	40e6      	lsrs	r6, r4
200042d6:	2d20      	cmp	r5, #32
200042d8:	d003      	beq.n	200042e2 <__aeabi_dmul+0x49e>
200042da:	4c12      	ldr	r4, [pc, #72]	; (20004324 <__aeabi_dmul+0x4e0>)
200042dc:	4454      	add	r4, sl
200042de:	40a3      	lsls	r3, r4
200042e0:	431a      	orrs	r2, r3
200042e2:	1e50      	subs	r0, r2, #1
200042e4:	4182      	sbcs	r2, r0
200042e6:	4332      	orrs	r2, r6
200042e8:	2607      	movs	r6, #7
200042ea:	2700      	movs	r7, #0
200042ec:	4016      	ands	r6, r2
200042ee:	d009      	beq.n	20004304 <__aeabi_dmul+0x4c0>
200042f0:	200f      	movs	r0, #15
200042f2:	2300      	movs	r3, #0
200042f4:	4010      	ands	r0, r2
200042f6:	0014      	movs	r4, r2
200042f8:	2804      	cmp	r0, #4
200042fa:	d1b9      	bne.n	20004270 <__aeabi_dmul+0x42c>
200042fc:	0022      	movs	r2, r4
200042fe:	075e      	lsls	r6, r3, #29
20004300:	025b      	lsls	r3, r3, #9
20004302:	0b1f      	lsrs	r7, r3, #12
20004304:	08d2      	lsrs	r2, r2, #3
20004306:	4316      	orrs	r6, r2
20004308:	2300      	movs	r3, #0
2000430a:	e606      	b.n	20003f1a <__aeabi_dmul+0xd6>
2000430c:	2780      	movs	r7, #128	; 0x80
2000430e:	033f      	lsls	r7, r7, #12
20004310:	431f      	orrs	r7, r3
20004312:	033f      	lsls	r7, r7, #12
20004314:	0b3f      	lsrs	r7, r7, #12
20004316:	0016      	movs	r6, r2
20004318:	4b00      	ldr	r3, [pc, #0]	; (2000431c <__aeabi_dmul+0x4d8>)
2000431a:	e5fe      	b.n	20003f1a <__aeabi_dmul+0xd6>
2000431c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004320:	0000041e 	andeq	r0, r0, lr, lsl r4
20004324:	0000043e 	andeq	r0, r0, lr, lsr r4

20004328 <__aeabi_dcmpun>:
20004328:	b570      	push	{r4, r5, r6, lr}
2000432a:	4e0c      	ldr	r6, [pc, #48]	; (2000435c <__aeabi_dcmpun+0x34>)
2000432c:	030d      	lsls	r5, r1, #12
2000432e:	031c      	lsls	r4, r3, #12
20004330:	0049      	lsls	r1, r1, #1
20004332:	005b      	lsls	r3, r3, #1
20004334:	0b2d      	lsrs	r5, r5, #12
20004336:	0d49      	lsrs	r1, r1, #21
20004338:	0b24      	lsrs	r4, r4, #12
2000433a:	0d5b      	lsrs	r3, r3, #21
2000433c:	42b1      	cmp	r1, r6
2000433e:	d008      	beq.n	20004352 <__aeabi_dcmpun+0x2a>
20004340:	4906      	ldr	r1, [pc, #24]	; (2000435c <__aeabi_dcmpun+0x34>)
20004342:	2000      	movs	r0, #0
20004344:	428b      	cmp	r3, r1
20004346:	d103      	bne.n	20004350 <__aeabi_dcmpun+0x28>
20004348:	4314      	orrs	r4, r2
2000434a:	0020      	movs	r0, r4
2000434c:	1e44      	subs	r4, r0, #1
2000434e:	41a0      	sbcs	r0, r4
20004350:	bd70      	pop	{r4, r5, r6, pc}
20004352:	4305      	orrs	r5, r0
20004354:	2001      	movs	r0, #1
20004356:	2d00      	cmp	r5, #0
20004358:	d1fa      	bne.n	20004350 <__aeabi_dcmpun+0x28>
2000435a:	e7f1      	b.n	20004340 <__aeabi_dcmpun+0x18>
2000435c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20004360 <__aeabi_i2d>:
20004360:	b570      	push	{r4, r5, r6, lr}
20004362:	2800      	cmp	r0, #0
20004364:	d02d      	beq.n	200043c2 <__aeabi_i2d+0x62>
20004366:	17c3      	asrs	r3, r0, #31
20004368:	18c5      	adds	r5, r0, r3
2000436a:	405d      	eors	r5, r3
2000436c:	0fc4      	lsrs	r4, r0, #31
2000436e:	0028      	movs	r0, r5
20004370:	f7fe fe24 	bl	20002fbc <__clzsi2>
20004374:	4b15      	ldr	r3, [pc, #84]	; (200043cc <__aeabi_i2d+0x6c>)
20004376:	1a1b      	subs	r3, r3, r0
20004378:	055b      	lsls	r3, r3, #21
2000437a:	0d5b      	lsrs	r3, r3, #21
2000437c:	280a      	cmp	r0, #10
2000437e:	dd15      	ble.n	200043ac <__aeabi_i2d+0x4c>
20004380:	380b      	subs	r0, #11
20004382:	4085      	lsls	r5, r0
20004384:	2200      	movs	r2, #0
20004386:	032d      	lsls	r5, r5, #12
20004388:	0b2d      	lsrs	r5, r5, #12
2000438a:	2100      	movs	r1, #0
2000438c:	0010      	movs	r0, r2
2000438e:	032d      	lsls	r5, r5, #12
20004390:	0d0a      	lsrs	r2, r1, #20
20004392:	0b2d      	lsrs	r5, r5, #12
20004394:	0512      	lsls	r2, r2, #20
20004396:	432a      	orrs	r2, r5
20004398:	4d0d      	ldr	r5, [pc, #52]	; (200043d0 <__aeabi_i2d+0x70>)
2000439a:	051b      	lsls	r3, r3, #20
2000439c:	402a      	ands	r2, r5
2000439e:	4313      	orrs	r3, r2
200043a0:	005b      	lsls	r3, r3, #1
200043a2:	07e4      	lsls	r4, r4, #31
200043a4:	085b      	lsrs	r3, r3, #1
200043a6:	4323      	orrs	r3, r4
200043a8:	0019      	movs	r1, r3
200043aa:	bd70      	pop	{r4, r5, r6, pc}
200043ac:	0002      	movs	r2, r0
200043ae:	0029      	movs	r1, r5
200043b0:	3215      	adds	r2, #21
200043b2:	4091      	lsls	r1, r2
200043b4:	000a      	movs	r2, r1
200043b6:	210b      	movs	r1, #11
200043b8:	1a08      	subs	r0, r1, r0
200043ba:	40c5      	lsrs	r5, r0
200043bc:	032d      	lsls	r5, r5, #12
200043be:	0b2d      	lsrs	r5, r5, #12
200043c0:	e7e3      	b.n	2000438a <__aeabi_i2d+0x2a>
200043c2:	2400      	movs	r4, #0
200043c4:	2300      	movs	r3, #0
200043c6:	2500      	movs	r5, #0
200043c8:	2200      	movs	r2, #0
200043ca:	e7de      	b.n	2000438a <__aeabi_i2d+0x2a>
200043cc:	0000041e 	andeq	r0, r0, lr, lsl r4
200043d0:	800fffff 	strdhi	pc, [pc], -pc	; <UNPREDICTABLE>

200043d4 <ceil>:
200043d4:	4a43      	ldr	r2, [pc, #268]	; (200044e4 <ceil+0x110>)
200043d6:	b5f0      	push	{r4, r5, r6, r7, lr}
200043d8:	464f      	mov	r7, r9
200043da:	4691      	mov	r9, r2
200043dc:	004b      	lsls	r3, r1, #1
200043de:	0d5b      	lsrs	r3, r3, #21
200043e0:	4499      	add	r9, r3
200043e2:	4646      	mov	r6, r8
200043e4:	46d6      	mov	lr, sl
200043e6:	464a      	mov	r2, r9
200043e8:	b5c0      	push	{r6, r7, lr}
200043ea:	0005      	movs	r5, r0
200043ec:	000c      	movs	r4, r1
200043ee:	000e      	movs	r6, r1
200043f0:	4688      	mov	r8, r1
200043f2:	0007      	movs	r7, r0
200043f4:	2a13      	cmp	r2, #19
200043f6:	dc25      	bgt.n	20004444 <ceil+0x70>
200043f8:	2a00      	cmp	r2, #0
200043fa:	db56      	blt.n	200044aa <ceil+0xd6>
200043fc:	4b3a      	ldr	r3, [pc, #232]	; (200044e8 <ceil+0x114>)
200043fe:	4113      	asrs	r3, r2
20004400:	469a      	mov	sl, r3
20004402:	000b      	movs	r3, r1
20004404:	4652      	mov	r2, sl
20004406:	4013      	ands	r3, r2
20004408:	4303      	orrs	r3, r0
2000440a:	d016      	beq.n	2000443a <ceil+0x66>
2000440c:	4a37      	ldr	r2, [pc, #220]	; (200044ec <ceil+0x118>)
2000440e:	4b38      	ldr	r3, [pc, #224]	; (200044f0 <ceil+0x11c>)
20004410:	f7fe fefa 	bl	20003208 <__aeabi_dadd>
20004414:	2200      	movs	r2, #0
20004416:	2300      	movs	r3, #0
20004418:	f7fe fdbc 	bl	20002f94 <__aeabi_dcmpgt>
2000441c:	2800      	cmp	r0, #0
2000441e:	d00a      	beq.n	20004436 <ceil+0x62>
20004420:	2c00      	cmp	r4, #0
20004422:	dd04      	ble.n	2000442e <ceil+0x5a>
20004424:	2380      	movs	r3, #128	; 0x80
20004426:	464a      	mov	r2, r9
20004428:	035b      	lsls	r3, r3, #13
2000442a:	4113      	asrs	r3, r2
2000442c:	4498      	add	r8, r3
2000442e:	4646      	mov	r6, r8
20004430:	4653      	mov	r3, sl
20004432:	2700      	movs	r7, #0
20004434:	439e      	bics	r6, r3
20004436:	0038      	movs	r0, r7
20004438:	0031      	movs	r1, r6
2000443a:	bc1c      	pop	{r2, r3, r4}
2000443c:	4690      	mov	r8, r2
2000443e:	4699      	mov	r9, r3
20004440:	46a2      	mov	sl, r4
20004442:	bdf0      	pop	{r4, r5, r6, r7, pc}
20004444:	2a33      	cmp	r2, #51	; 0x33
20004446:	dd08      	ble.n	2000445a <ceil+0x86>
20004448:	2380      	movs	r3, #128	; 0x80
2000444a:	00db      	lsls	r3, r3, #3
2000444c:	4599      	cmp	r9, r3
2000444e:	d1f4      	bne.n	2000443a <ceil+0x66>
20004450:	0002      	movs	r2, r0
20004452:	000b      	movs	r3, r1
20004454:	f7fe fed8 	bl	20003208 <__aeabi_dadd>
20004458:	e7ef      	b.n	2000443a <ceil+0x66>
2000445a:	4a26      	ldr	r2, [pc, #152]	; (200044f4 <ceil+0x120>)
2000445c:	4694      	mov	ip, r2
2000445e:	2201      	movs	r2, #1
20004460:	4463      	add	r3, ip
20004462:	4252      	negs	r2, r2
20004464:	40da      	lsrs	r2, r3
20004466:	4692      	mov	sl, r2
20004468:	4202      	tst	r2, r0
2000446a:	d0e6      	beq.n	2000443a <ceil+0x66>
2000446c:	4a1f      	ldr	r2, [pc, #124]	; (200044ec <ceil+0x118>)
2000446e:	4b20      	ldr	r3, [pc, #128]	; (200044f0 <ceil+0x11c>)
20004470:	f7fe feca 	bl	20003208 <__aeabi_dadd>
20004474:	2200      	movs	r2, #0
20004476:	2300      	movs	r3, #0
20004478:	f7fe fd8c 	bl	20002f94 <__aeabi_dcmpgt>
2000447c:	2800      	cmp	r0, #0
2000447e:	d0da      	beq.n	20004436 <ceil+0x62>
20004480:	2c00      	cmp	r4, #0
20004482:	dd0e      	ble.n	200044a2 <ceil+0xce>
20004484:	464b      	mov	r3, r9
20004486:	2b14      	cmp	r3, #20
20004488:	d022      	beq.n	200044d0 <ceil+0xfc>
2000448a:	2334      	movs	r3, #52	; 0x34
2000448c:	464a      	mov	r2, r9
2000448e:	2401      	movs	r4, #1
20004490:	1a9b      	subs	r3, r3, r2
20004492:	409c      	lsls	r4, r3
20004494:	1965      	adds	r5, r4, r5
20004496:	42bd      	cmp	r5, r7
20004498:	d222      	bcs.n	200044e0 <ceil+0x10c>
2000449a:	2301      	movs	r3, #1
2000449c:	469c      	mov	ip, r3
2000449e:	002f      	movs	r7, r5
200044a0:	44e0      	add	r8, ip
200044a2:	4653      	mov	r3, sl
200044a4:	4646      	mov	r6, r8
200044a6:	439f      	bics	r7, r3
200044a8:	e7c5      	b.n	20004436 <ceil+0x62>
200044aa:	4a10      	ldr	r2, [pc, #64]	; (200044ec <ceil+0x118>)
200044ac:	4b10      	ldr	r3, [pc, #64]	; (200044f0 <ceil+0x11c>)
200044ae:	f7fe feab 	bl	20003208 <__aeabi_dadd>
200044b2:	2200      	movs	r2, #0
200044b4:	2300      	movs	r3, #0
200044b6:	f7fe fd6d 	bl	20002f94 <__aeabi_dcmpgt>
200044ba:	2800      	cmp	r0, #0
200044bc:	d0bb      	beq.n	20004436 <ceil+0x62>
200044be:	2c00      	cmp	r4, #0
200044c0:	db0a      	blt.n	200044d8 <ceil+0x104>
200044c2:	432c      	orrs	r4, r5
200044c4:	2700      	movs	r7, #0
200044c6:	2600      	movs	r6, #0
200044c8:	2c00      	cmp	r4, #0
200044ca:	d0b4      	beq.n	20004436 <ceil+0x62>
200044cc:	4e0a      	ldr	r6, [pc, #40]	; (200044f8 <ceil+0x124>)
200044ce:	e7b2      	b.n	20004436 <ceil+0x62>
200044d0:	3b13      	subs	r3, #19
200044d2:	469c      	mov	ip, r3
200044d4:	44e0      	add	r8, ip
200044d6:	e7e4      	b.n	200044a2 <ceil+0xce>
200044d8:	2680      	movs	r6, #128	; 0x80
200044da:	2700      	movs	r7, #0
200044dc:	0636      	lsls	r6, r6, #24
200044de:	e7aa      	b.n	20004436 <ceil+0x62>
200044e0:	002f      	movs	r7, r5
200044e2:	e7de      	b.n	200044a2 <ceil+0xce>
200044e4:	fffffc01 			; <UNDEFINED> instruction: 0xfffffc01
200044e8:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
200044ec:	8800759c 	stmdahi	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
200044f0:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}
200044f4:	fffffbed 			; <UNDEFINED> instruction: 0xfffffbed
200044f8:	3ff00000 	svccc	0x00f00000	; IMB

200044fc <log10>:
200044fc:	b5f0      	push	{r4, r5, r6, r7, lr}
200044fe:	4647      	mov	r7, r8
20004500:	46ce      	mov	lr, r9
20004502:	b580      	push	{r7, lr}
20004504:	b08d      	sub	sp, #52	; 0x34
20004506:	0004      	movs	r4, r0
20004508:	000d      	movs	r5, r1
2000450a:	f000 f883 	bl	20004614 <__ieee754_log10>
2000450e:	4b3c      	ldr	r3, [pc, #240]	; (20004600 <log10+0x104>)
20004510:	0006      	movs	r6, r0
20004512:	781b      	ldrb	r3, [r3, #0]
20004514:	000f      	movs	r7, r1
20004516:	b25b      	sxtb	r3, r3
20004518:	4698      	mov	r8, r3
2000451a:	3301      	adds	r3, #1
2000451c:	d010      	beq.n	20004540 <log10+0x44>
2000451e:	0022      	movs	r2, r4
20004520:	002b      	movs	r3, r5
20004522:	0020      	movs	r0, r4
20004524:	0029      	movs	r1, r5
20004526:	f7ff feff 	bl	20004328 <__aeabi_dcmpun>
2000452a:	4681      	mov	r9, r0
2000452c:	2800      	cmp	r0, #0
2000452e:	d107      	bne.n	20004540 <log10+0x44>
20004530:	2200      	movs	r2, #0
20004532:	2300      	movs	r3, #0
20004534:	0020      	movs	r0, r4
20004536:	0029      	movs	r1, r5
20004538:	f7fe fd22 	bl	20002f80 <__aeabi_dcmple>
2000453c:	2800      	cmp	r0, #0
2000453e:	d106      	bne.n	2000454e <log10+0x52>
20004540:	0030      	movs	r0, r6
20004542:	0039      	movs	r1, r7
20004544:	b00d      	add	sp, #52	; 0x34
20004546:	bc0c      	pop	{r2, r3}
20004548:	4690      	mov	r8, r2
2000454a:	4699      	mov	r9, r3
2000454c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000454e:	4b2d      	ldr	r3, [pc, #180]	; (20004604 <log10+0x108>)
20004550:	9404      	str	r4, [sp, #16]
20004552:	9505      	str	r5, [sp, #20]
20004554:	9303      	str	r3, [sp, #12]
20004556:	464b      	mov	r3, r9
20004558:	930a      	str	r3, [sp, #40]	; 0x28
2000455a:	4643      	mov	r3, r8
2000455c:	9406      	str	r4, [sp, #24]
2000455e:	9507      	str	r5, [sp, #28]
20004560:	2b00      	cmp	r3, #0
20004562:	d11a      	bne.n	2000459a <log10+0x9e>
20004564:	22e0      	movs	r2, #224	; 0xe0
20004566:	4b28      	ldr	r3, [pc, #160]	; (20004608 <log10+0x10c>)
20004568:	0612      	lsls	r2, r2, #24
2000456a:	9208      	str	r2, [sp, #32]
2000456c:	9309      	str	r3, [sp, #36]	; 0x24
2000456e:	0020      	movs	r0, r4
20004570:	2200      	movs	r2, #0
20004572:	2300      	movs	r3, #0
20004574:	0029      	movs	r1, r5
20004576:	f7fe fcf3 	bl	20002f60 <__aeabi_dcmpeq>
2000457a:	2800      	cmp	r0, #0
2000457c:	d038      	beq.n	200045f0 <log10+0xf4>
2000457e:	2302      	movs	r3, #2
20004580:	9302      	str	r3, [sp, #8]
20004582:	a802      	add	r0, sp, #8
20004584:	f000 f8d8 	bl	20004738 <matherr>
20004588:	2800      	cmp	r0, #0
2000458a:	d017      	beq.n	200045bc <log10+0xc0>
2000458c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2000458e:	9301      	str	r3, [sp, #4]
20004590:	2b00      	cmp	r3, #0
20004592:	d118      	bne.n	200045c6 <log10+0xca>
20004594:	9e08      	ldr	r6, [sp, #32]
20004596:	9f09      	ldr	r7, [sp, #36]	; 0x24
20004598:	e7d2      	b.n	20004540 <log10+0x44>
2000459a:	2200      	movs	r2, #0
2000459c:	4b1b      	ldr	r3, [pc, #108]	; (2000460c <log10+0x110>)
2000459e:	0020      	movs	r0, r4
200045a0:	9208      	str	r2, [sp, #32]
200045a2:	9309      	str	r3, [sp, #36]	; 0x24
200045a4:	0029      	movs	r1, r5
200045a6:	2200      	movs	r2, #0
200045a8:	2300      	movs	r3, #0
200045aa:	f7fe fcd9 	bl	20002f60 <__aeabi_dcmpeq>
200045ae:	2800      	cmp	r0, #0
200045b0:	d00f      	beq.n	200045d2 <log10+0xd6>
200045b2:	2302      	movs	r3, #2
200045b4:	9302      	str	r3, [sp, #8]
200045b6:	4643      	mov	r3, r8
200045b8:	2b02      	cmp	r3, #2
200045ba:	d1e2      	bne.n	20004582 <log10+0x86>
200045bc:	f000 fa9a 	bl	20004af4 <__errno>
200045c0:	2322      	movs	r3, #34	; 0x22
200045c2:	6003      	str	r3, [r0, #0]
200045c4:	e7e2      	b.n	2000458c <log10+0x90>
200045c6:	f000 fa95 	bl	20004af4 <__errno>
200045ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
200045cc:	9301      	str	r3, [sp, #4]
200045ce:	6003      	str	r3, [r0, #0]
200045d0:	e7e0      	b.n	20004594 <log10+0x98>
200045d2:	2301      	movs	r3, #1
200045d4:	9302      	str	r3, [sp, #8]
200045d6:	4643      	mov	r3, r8
200045d8:	2b02      	cmp	r3, #2
200045da:	d10b      	bne.n	200045f4 <log10+0xf8>
200045dc:	f000 fa8a 	bl	20004af4 <__errno>
200045e0:	2321      	movs	r3, #33	; 0x21
200045e2:	6003      	str	r3, [r0, #0]
200045e4:	480a      	ldr	r0, [pc, #40]	; (20004610 <log10+0x114>)
200045e6:	f000 f8a9 	bl	2000473c <nan>
200045ea:	9008      	str	r0, [sp, #32]
200045ec:	9109      	str	r1, [sp, #36]	; 0x24
200045ee:	e7cd      	b.n	2000458c <log10+0x90>
200045f0:	2301      	movs	r3, #1
200045f2:	9302      	str	r3, [sp, #8]
200045f4:	a802      	add	r0, sp, #8
200045f6:	f000 f89f 	bl	20004738 <matherr>
200045fa:	2800      	cmp	r0, #0
200045fc:	d1f2      	bne.n	200045e4 <log10+0xe8>
200045fe:	e7ed      	b.n	200045dc <log10+0xe0>
20004600:	20004bec 	andcs	r4, r0, ip, ror #23
20004604:	20005110 	andcs	r5, r0, r0, lsl r1
20004608:	c7efffff 			; <UNDEFINED> instruction: 0xc7efffff
2000460c:	fff00000 			; <UNDEFINED> instruction: 0xfff00000	; IMB
20004610:	20005118 	andcs	r5, r0, r8, lsl r1

20004614 <__ieee754_log10>:
20004614:	b5f0      	push	{r4, r5, r6, r7, lr}
20004616:	46ce      	mov	lr, r9
20004618:	4647      	mov	r7, r8
2000461a:	b580      	push	{r7, lr}
2000461c:	4a3a      	ldr	r2, [pc, #232]	; (20004708 <__ieee754_log10+0xf4>)
2000461e:	b083      	sub	sp, #12
20004620:	0004      	movs	r4, r0
20004622:	000d      	movs	r5, r1
20004624:	000b      	movs	r3, r1
20004626:	4291      	cmp	r1, r2
20004628:	dc1c      	bgt.n	20004664 <__ieee754_log10+0x50>
2000462a:	004a      	lsls	r2, r1, #1
2000462c:	0852      	lsrs	r2, r2, #1
2000462e:	4302      	orrs	r2, r0
20004630:	d05a      	beq.n	200046e8 <__ieee754_log10+0xd4>
20004632:	2900      	cmp	r1, #0
20004634:	db5f      	blt.n	200046f6 <__ieee754_log10+0xe2>
20004636:	2200      	movs	r2, #0
20004638:	4b34      	ldr	r3, [pc, #208]	; (2000470c <__ieee754_log10+0xf8>)
2000463a:	f7ff fc03 	bl	20003e44 <__aeabi_dmul>
2000463e:	000d      	movs	r5, r1
20004640:	000b      	movs	r3, r1
20004642:	2136      	movs	r1, #54	; 0x36
20004644:	4a32      	ldr	r2, [pc, #200]	; (20004710 <__ieee754_log10+0xfc>)
20004646:	0004      	movs	r4, r0
20004648:	4249      	negs	r1, r1
2000464a:	4293      	cmp	r3, r2
2000464c:	dd0e      	ble.n	2000466c <__ieee754_log10+0x58>
2000464e:	0022      	movs	r2, r4
20004650:	002b      	movs	r3, r5
20004652:	0020      	movs	r0, r4
20004654:	0029      	movs	r1, r5
20004656:	f7fe fdd7 	bl	20003208 <__aeabi_dadd>
2000465a:	b003      	add	sp, #12
2000465c:	bc0c      	pop	{r2, r3}
2000465e:	4690      	mov	r8, r2
20004660:	4699      	mov	r9, r3
20004662:	bdf0      	pop	{r4, r5, r6, r7, pc}
20004664:	4a2a      	ldr	r2, [pc, #168]	; (20004710 <__ieee754_log10+0xfc>)
20004666:	2100      	movs	r1, #0
20004668:	4293      	cmp	r3, r2
2000466a:	dcf0      	bgt.n	2000464e <__ieee754_log10+0x3a>
2000466c:	4a29      	ldr	r2, [pc, #164]	; (20004714 <__ieee754_log10+0x100>)
2000466e:	1518      	asrs	r0, r3, #20
20004670:	4694      	mov	ip, r2
20004672:	4460      	add	r0, ip
20004674:	1840      	adds	r0, r0, r1
20004676:	0fc2      	lsrs	r2, r0, #31
20004678:	4691      	mov	r9, r2
2000467a:	031b      	lsls	r3, r3, #12
2000467c:	0b1b      	lsrs	r3, r3, #12
2000467e:	4448      	add	r0, r9
20004680:	4698      	mov	r8, r3
20004682:	f7ff fe6d 	bl	20004360 <__aeabi_i2d>
20004686:	464a      	mov	r2, r9
20004688:	4b23      	ldr	r3, [pc, #140]	; (20004718 <__ieee754_log10+0x104>)
2000468a:	0006      	movs	r6, r0
2000468c:	1a9b      	subs	r3, r3, r2
2000468e:	4642      	mov	r2, r8
20004690:	051b      	lsls	r3, r3, #20
20004692:	431a      	orrs	r2, r3
20004694:	000f      	movs	r7, r1
20004696:	0020      	movs	r0, r4
20004698:	0011      	movs	r1, r2
2000469a:	f000 f855 	bl	20004748 <__ieee754_log>
2000469e:	4a1f      	ldr	r2, [pc, #124]	; (2000471c <__ieee754_log10+0x108>)
200046a0:	0004      	movs	r4, r0
200046a2:	000d      	movs	r5, r1
200046a4:	4b1e      	ldr	r3, [pc, #120]	; (20004720 <__ieee754_log10+0x10c>)
200046a6:	0030      	movs	r0, r6
200046a8:	0039      	movs	r1, r7
200046aa:	f7ff fbcb 	bl	20003e44 <__aeabi_dmul>
200046ae:	4a1d      	ldr	r2, [pc, #116]	; (20004724 <__ieee754_log10+0x110>)
200046b0:	9000      	str	r0, [sp, #0]
200046b2:	9101      	str	r1, [sp, #4]
200046b4:	4b1c      	ldr	r3, [pc, #112]	; (20004728 <__ieee754_log10+0x114>)
200046b6:	0020      	movs	r0, r4
200046b8:	0029      	movs	r1, r5
200046ba:	f7ff fbc3 	bl	20003e44 <__aeabi_dmul>
200046be:	0002      	movs	r2, r0
200046c0:	000b      	movs	r3, r1
200046c2:	9800      	ldr	r0, [sp, #0]
200046c4:	9901      	ldr	r1, [sp, #4]
200046c6:	f7fe fd9f 	bl	20003208 <__aeabi_dadd>
200046ca:	4a18      	ldr	r2, [pc, #96]	; (2000472c <__ieee754_log10+0x118>)
200046cc:	0004      	movs	r4, r0
200046ce:	000d      	movs	r5, r1
200046d0:	4b17      	ldr	r3, [pc, #92]	; (20004730 <__ieee754_log10+0x11c>)
200046d2:	0030      	movs	r0, r6
200046d4:	0039      	movs	r1, r7
200046d6:	f7ff fbb5 	bl	20003e44 <__aeabi_dmul>
200046da:	0002      	movs	r2, r0
200046dc:	000b      	movs	r3, r1
200046de:	0020      	movs	r0, r4
200046e0:	0029      	movs	r1, r5
200046e2:	f7fe fd91 	bl	20003208 <__aeabi_dadd>
200046e6:	e7b8      	b.n	2000465a <__ieee754_log10+0x46>
200046e8:	2200      	movs	r2, #0
200046ea:	2300      	movs	r3, #0
200046ec:	2000      	movs	r0, #0
200046ee:	4911      	ldr	r1, [pc, #68]	; (20004734 <__ieee754_log10+0x120>)
200046f0:	f7ff f8a6 	bl	20003840 <__aeabi_ddiv>
200046f4:	e7b1      	b.n	2000465a <__ieee754_log10+0x46>
200046f6:	0002      	movs	r2, r0
200046f8:	f7fe f872 	bl	200027e0 <__aeabi_dsub>
200046fc:	2200      	movs	r2, #0
200046fe:	2300      	movs	r3, #0
20004700:	f7ff f89e 	bl	20003840 <__aeabi_ddiv>
20004704:	e7a9      	b.n	2000465a <__ieee754_log10+0x46>
20004706:	46c0      	nop			; (mov r8, r8)
20004708:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
2000470c:	43500000 	cmpmi	r0, #0
20004710:	7fefffff 	svcvc	0x00efffff
20004714:	fffffc01 			; <UNDEFINED> instruction: 0xfffffc01
20004718:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000471c:	11f12b36 	mvnsne	r2, r6, lsr fp
20004720:	3d59fef3 	ldclcc	14, cr15, [r9, #-972]	; 0xfffffc34
20004724:	1526e50e 	strne	lr, [r6, #-1294]!	; 0xfffffaf2
20004728:	3fdbcb7b 	svccc	0x00dbcb7b
2000472c:	509f6000 	addspl	r6, pc, r0
20004730:	3fd34413 	svccc	0x00d34413
20004734:	c3500000 	cmpgt	r0, #0

20004738 <matherr>:
20004738:	2000      	movs	r0, #0
2000473a:	4770      	bx	lr

2000473c <nan>:
2000473c:	2000      	movs	r0, #0
2000473e:	4901      	ldr	r1, [pc, #4]	; (20004744 <nan+0x8>)
20004740:	4770      	bx	lr
20004742:	46c0      	nop			; (mov r8, r8)
20004744:	7ff80000 	svcvc	0x00f80000

20004748 <__ieee754_log>:
20004748:	b5f0      	push	{r4, r5, r6, r7, lr}
2000474a:	46d6      	mov	lr, sl
2000474c:	464f      	mov	r7, r9
2000474e:	4646      	mov	r6, r8
20004750:	b5c0      	push	{r6, r7, lr}
20004752:	4aca      	ldr	r2, [pc, #808]	; (20004a7c <__ieee754_log+0x334>)
20004754:	b086      	sub	sp, #24
20004756:	000b      	movs	r3, r1
20004758:	4291      	cmp	r1, r2
2000475a:	dd00      	ble.n	2000475e <__ieee754_log+0x16>
2000475c:	e0cc      	b.n	200048f8 <__ieee754_log+0x1b0>
2000475e:	004a      	lsls	r2, r1, #1
20004760:	0852      	lsrs	r2, r2, #1
20004762:	4302      	orrs	r2, r0
20004764:	d100      	bne.n	20004768 <__ieee754_log+0x20>
20004766:	e0d6      	b.n	20004916 <__ieee754_log+0x1ce>
20004768:	2900      	cmp	r1, #0
2000476a:	da00      	bge.n	2000476e <__ieee754_log+0x26>
2000476c:	e0e6      	b.n	2000493c <__ieee754_log+0x1f4>
2000476e:	4bc4      	ldr	r3, [pc, #784]	; (20004a80 <__ieee754_log+0x338>)
20004770:	2200      	movs	r2, #0
20004772:	f7ff fb67 	bl	20003e44 <__aeabi_dmul>
20004776:	2536      	movs	r5, #54	; 0x36
20004778:	4cc2      	ldr	r4, [pc, #776]	; (20004a84 <__ieee754_log+0x33c>)
2000477a:	000b      	movs	r3, r1
2000477c:	426d      	negs	r5, r5
2000477e:	42a3      	cmp	r3, r4
20004780:	dd00      	ble.n	20004784 <__ieee754_log+0x3c>
20004782:	e0be      	b.n	20004902 <__ieee754_log+0x1ba>
20004784:	151a      	asrs	r2, r3, #20
20004786:	4cc0      	ldr	r4, [pc, #768]	; (20004a88 <__ieee754_log+0x340>)
20004788:	031b      	lsls	r3, r3, #12
2000478a:	0b1b      	lsrs	r3, r3, #12
2000478c:	4698      	mov	r8, r3
2000478e:	46a4      	mov	ip, r4
20004790:	2480      	movs	r4, #128	; 0x80
20004792:	4bbe      	ldr	r3, [pc, #760]	; (20004a8c <__ieee754_log+0x344>)
20004794:	0364      	lsls	r4, r4, #13
20004796:	4443      	add	r3, r8
20004798:	4023      	ands	r3, r4
2000479a:	4cbd      	ldr	r4, [pc, #756]	; (20004a90 <__ieee754_log+0x348>)
2000479c:	4462      	add	r2, ip
2000479e:	1952      	adds	r2, r2, r5
200047a0:	405c      	eors	r4, r3
200047a2:	4645      	mov	r5, r8
200047a4:	151b      	asrs	r3, r3, #20
200047a6:	4699      	mov	r9, r3
200047a8:	4325      	orrs	r5, r4
200047aa:	4bb9      	ldr	r3, [pc, #740]	; (20004a90 <__ieee754_log+0x348>)
200047ac:	0029      	movs	r1, r5
200047ae:	4491      	add	r9, r2
200047b0:	2200      	movs	r2, #0
200047b2:	f7fe f815 	bl	200027e0 <__aeabi_dsub>
200047b6:	4643      	mov	r3, r8
200047b8:	3302      	adds	r3, #2
200047ba:	031b      	lsls	r3, r3, #12
200047bc:	0006      	movs	r6, r0
200047be:	000f      	movs	r7, r1
200047c0:	0b1b      	lsrs	r3, r3, #12
200047c2:	2200      	movs	r2, #0
200047c4:	2b02      	cmp	r3, #2
200047c6:	dc00      	bgt.n	200047ca <__ieee754_log+0x82>
200047c8:	e0ac      	b.n	20004924 <__ieee754_log+0x1dc>
200047ca:	2380      	movs	r3, #128	; 0x80
200047cc:	05db      	lsls	r3, r3, #23
200047ce:	f7fe fd1b 	bl	20003208 <__aeabi_dadd>
200047d2:	0002      	movs	r2, r0
200047d4:	000b      	movs	r3, r1
200047d6:	0030      	movs	r0, r6
200047d8:	0039      	movs	r1, r7
200047da:	f7ff f831 	bl	20003840 <__aeabi_ddiv>
200047de:	0004      	movs	r4, r0
200047e0:	4648      	mov	r0, r9
200047e2:	000d      	movs	r5, r1
200047e4:	f7ff fdbc 	bl	20004360 <__aeabi_i2d>
200047e8:	0022      	movs	r2, r4
200047ea:	9000      	str	r0, [sp, #0]
200047ec:	9101      	str	r1, [sp, #4]
200047ee:	002b      	movs	r3, r5
200047f0:	0020      	movs	r0, r4
200047f2:	0029      	movs	r1, r5
200047f4:	9404      	str	r4, [sp, #16]
200047f6:	9505      	str	r5, [sp, #20]
200047f8:	f7ff fb24 	bl	20003e44 <__aeabi_dmul>
200047fc:	000d      	movs	r5, r1
200047fe:	0004      	movs	r4, r0
20004800:	49a4      	ldr	r1, [pc, #656]	; (20004a94 <__ieee754_log+0x34c>)
20004802:	0022      	movs	r2, r4
20004804:	4441      	add	r1, r8
20004806:	002b      	movs	r3, r5
20004808:	468a      	mov	sl, r1
2000480a:	0020      	movs	r0, r4
2000480c:	0029      	movs	r1, r5
2000480e:	9402      	str	r4, [sp, #8]
20004810:	9503      	str	r5, [sp, #12]
20004812:	f7ff fb17 	bl	20003e44 <__aeabi_dmul>
20004816:	0004      	movs	r4, r0
20004818:	000d      	movs	r5, r1
2000481a:	4a9f      	ldr	r2, [pc, #636]	; (20004a98 <__ieee754_log+0x350>)
2000481c:	4b9f      	ldr	r3, [pc, #636]	; (20004a9c <__ieee754_log+0x354>)
2000481e:	f7ff fb11 	bl	20003e44 <__aeabi_dmul>
20004822:	4a9f      	ldr	r2, [pc, #636]	; (20004aa0 <__ieee754_log+0x358>)
20004824:	4b9f      	ldr	r3, [pc, #636]	; (20004aa4 <__ieee754_log+0x35c>)
20004826:	f7fe fcef 	bl	20003208 <__aeabi_dadd>
2000482a:	0022      	movs	r2, r4
2000482c:	002b      	movs	r3, r5
2000482e:	f7ff fb09 	bl	20003e44 <__aeabi_dmul>
20004832:	4a9d      	ldr	r2, [pc, #628]	; (20004aa8 <__ieee754_log+0x360>)
20004834:	4b9d      	ldr	r3, [pc, #628]	; (20004aac <__ieee754_log+0x364>)
20004836:	f7fe fce7 	bl	20003208 <__aeabi_dadd>
2000483a:	0022      	movs	r2, r4
2000483c:	002b      	movs	r3, r5
2000483e:	f7ff fb01 	bl	20003e44 <__aeabi_dmul>
20004842:	4a9b      	ldr	r2, [pc, #620]	; (20004ab0 <__ieee754_log+0x368>)
20004844:	4b9b      	ldr	r3, [pc, #620]	; (20004ab4 <__ieee754_log+0x36c>)
20004846:	f7fe fcdf 	bl	20003208 <__aeabi_dadd>
2000484a:	9a02      	ldr	r2, [sp, #8]
2000484c:	9b03      	ldr	r3, [sp, #12]
2000484e:	f7ff faf9 	bl	20003e44 <__aeabi_dmul>
20004852:	4a99      	ldr	r2, [pc, #612]	; (20004ab8 <__ieee754_log+0x370>)
20004854:	9002      	str	r0, [sp, #8]
20004856:	9103      	str	r1, [sp, #12]
20004858:	4b98      	ldr	r3, [pc, #608]	; (20004abc <__ieee754_log+0x374>)
2000485a:	0020      	movs	r0, r4
2000485c:	0029      	movs	r1, r5
2000485e:	f7ff faf1 	bl	20003e44 <__aeabi_dmul>
20004862:	4a97      	ldr	r2, [pc, #604]	; (20004ac0 <__ieee754_log+0x378>)
20004864:	4b97      	ldr	r3, [pc, #604]	; (20004ac4 <__ieee754_log+0x37c>)
20004866:	f7fe fccf 	bl	20003208 <__aeabi_dadd>
2000486a:	0022      	movs	r2, r4
2000486c:	002b      	movs	r3, r5
2000486e:	f7ff fae9 	bl	20003e44 <__aeabi_dmul>
20004872:	4a95      	ldr	r2, [pc, #596]	; (20004ac8 <__ieee754_log+0x380>)
20004874:	4b95      	ldr	r3, [pc, #596]	; (20004acc <__ieee754_log+0x384>)
20004876:	f7fe fcc7 	bl	20003208 <__aeabi_dadd>
2000487a:	0022      	movs	r2, r4
2000487c:	002b      	movs	r3, r5
2000487e:	f7ff fae1 	bl	20003e44 <__aeabi_dmul>
20004882:	000b      	movs	r3, r1
20004884:	0002      	movs	r2, r0
20004886:	9802      	ldr	r0, [sp, #8]
20004888:	9903      	ldr	r1, [sp, #12]
2000488a:	f7fe fcbd 	bl	20003208 <__aeabi_dadd>
2000488e:	000d      	movs	r5, r1
20004890:	4641      	mov	r1, r8
20004892:	4b8f      	ldr	r3, [pc, #572]	; (20004ad0 <__ieee754_log+0x388>)
20004894:	0004      	movs	r4, r0
20004896:	1a5b      	subs	r3, r3, r1
20004898:	4651      	mov	r1, sl
2000489a:	430b      	orrs	r3, r1
2000489c:	2b00      	cmp	r3, #0
2000489e:	dc00      	bgt.n	200048a2 <__ieee754_log+0x15a>
200048a0:	e095      	b.n	200049ce <__ieee754_log+0x286>
200048a2:	2200      	movs	r2, #0
200048a4:	4b8b      	ldr	r3, [pc, #556]	; (20004ad4 <__ieee754_log+0x38c>)
200048a6:	0030      	movs	r0, r6
200048a8:	0039      	movs	r1, r7
200048aa:	f7ff facb 	bl	20003e44 <__aeabi_dmul>
200048ae:	0032      	movs	r2, r6
200048b0:	003b      	movs	r3, r7
200048b2:	f7ff fac7 	bl	20003e44 <__aeabi_dmul>
200048b6:	000a      	movs	r2, r1
200048b8:	0001      	movs	r1, r0
200048ba:	0013      	movs	r3, r2
200048bc:	9102      	str	r1, [sp, #8]
200048be:	9203      	str	r2, [sp, #12]
200048c0:	0002      	movs	r2, r0
200048c2:	0029      	movs	r1, r5
200048c4:	0020      	movs	r0, r4
200048c6:	f7fe fc9f 	bl	20003208 <__aeabi_dadd>
200048ca:	9a04      	ldr	r2, [sp, #16]
200048cc:	9b05      	ldr	r3, [sp, #20]
200048ce:	f7ff fab9 	bl	20003e44 <__aeabi_dmul>
200048d2:	464b      	mov	r3, r9
200048d4:	0004      	movs	r4, r0
200048d6:	000d      	movs	r5, r1
200048d8:	2b00      	cmp	r3, #0
200048da:	d000      	beq.n	200048de <__ieee754_log+0x196>
200048dc:	e08d      	b.n	200049fa <__ieee754_log+0x2b2>
200048de:	0002      	movs	r2, r0
200048e0:	000b      	movs	r3, r1
200048e2:	9802      	ldr	r0, [sp, #8]
200048e4:	9903      	ldr	r1, [sp, #12]
200048e6:	f7fd ff7b 	bl	200027e0 <__aeabi_dsub>
200048ea:	0002      	movs	r2, r0
200048ec:	000b      	movs	r3, r1
200048ee:	0030      	movs	r0, r6
200048f0:	0039      	movs	r1, r7
200048f2:	f7fd ff75 	bl	200027e0 <__aeabi_dsub>
200048f6:	e008      	b.n	2000490a <__ieee754_log+0x1c2>
200048f8:	4c62      	ldr	r4, [pc, #392]	; (20004a84 <__ieee754_log+0x33c>)
200048fa:	2500      	movs	r5, #0
200048fc:	42a3      	cmp	r3, r4
200048fe:	dc00      	bgt.n	20004902 <__ieee754_log+0x1ba>
20004900:	e740      	b.n	20004784 <__ieee754_log+0x3c>
20004902:	0002      	movs	r2, r0
20004904:	000b      	movs	r3, r1
20004906:	f7fe fc7f 	bl	20003208 <__aeabi_dadd>
2000490a:	b006      	add	sp, #24
2000490c:	bc1c      	pop	{r2, r3, r4}
2000490e:	4690      	mov	r8, r2
20004910:	4699      	mov	r9, r3
20004912:	46a2      	mov	sl, r4
20004914:	bdf0      	pop	{r4, r5, r6, r7, pc}
20004916:	2200      	movs	r2, #0
20004918:	2300      	movs	r3, #0
2000491a:	2000      	movs	r0, #0
2000491c:	496e      	ldr	r1, [pc, #440]	; (20004ad8 <__ieee754_log+0x390>)
2000491e:	f7fe ff8f 	bl	20003840 <__aeabi_ddiv>
20004922:	e7f2      	b.n	2000490a <__ieee754_log+0x1c2>
20004924:	2300      	movs	r3, #0
20004926:	f7fe fb1b 	bl	20002f60 <__aeabi_dcmpeq>
2000492a:	2800      	cmp	r0, #0
2000492c:	d00e      	beq.n	2000494c <__ieee754_log+0x204>
2000492e:	464b      	mov	r3, r9
20004930:	2b00      	cmp	r3, #0
20004932:	d000      	beq.n	20004936 <__ieee754_log+0x1ee>
20004934:	e084      	b.n	20004a40 <__ieee754_log+0x2f8>
20004936:	2000      	movs	r0, #0
20004938:	2100      	movs	r1, #0
2000493a:	e7e6      	b.n	2000490a <__ieee754_log+0x1c2>
2000493c:	0002      	movs	r2, r0
2000493e:	f7fd ff4f 	bl	200027e0 <__aeabi_dsub>
20004942:	2200      	movs	r2, #0
20004944:	2300      	movs	r3, #0
20004946:	f7fe ff7b 	bl	20003840 <__aeabi_ddiv>
2000494a:	e7de      	b.n	2000490a <__ieee754_log+0x1c2>
2000494c:	4a63      	ldr	r2, [pc, #396]	; (20004adc <__ieee754_log+0x394>)
2000494e:	4b64      	ldr	r3, [pc, #400]	; (20004ae0 <__ieee754_log+0x398>)
20004950:	0030      	movs	r0, r6
20004952:	0039      	movs	r1, r7
20004954:	f7ff fa76 	bl	20003e44 <__aeabi_dmul>
20004958:	0002      	movs	r2, r0
2000495a:	000b      	movs	r3, r1
2000495c:	2000      	movs	r0, #0
2000495e:	495d      	ldr	r1, [pc, #372]	; (20004ad4 <__ieee754_log+0x38c>)
20004960:	f7fd ff3e 	bl	200027e0 <__aeabi_dsub>
20004964:	0032      	movs	r2, r6
20004966:	0004      	movs	r4, r0
20004968:	000d      	movs	r5, r1
2000496a:	003b      	movs	r3, r7
2000496c:	0030      	movs	r0, r6
2000496e:	0039      	movs	r1, r7
20004970:	f7ff fa68 	bl	20003e44 <__aeabi_dmul>
20004974:	000b      	movs	r3, r1
20004976:	0002      	movs	r2, r0
20004978:	0029      	movs	r1, r5
2000497a:	0020      	movs	r0, r4
2000497c:	f7ff fa62 	bl	20003e44 <__aeabi_dmul>
20004980:	464b      	mov	r3, r9
20004982:	0004      	movs	r4, r0
20004984:	000d      	movs	r5, r1
20004986:	2b00      	cmp	r3, #0
20004988:	d030      	beq.n	200049ec <__ieee754_log+0x2a4>
2000498a:	4648      	mov	r0, r9
2000498c:	f7ff fce8 	bl	20004360 <__aeabi_i2d>
20004990:	9000      	str	r0, [sp, #0]
20004992:	9101      	str	r1, [sp, #4]
20004994:	4a53      	ldr	r2, [pc, #332]	; (20004ae4 <__ieee754_log+0x39c>)
20004996:	4b54      	ldr	r3, [pc, #336]	; (20004ae8 <__ieee754_log+0x3a0>)
20004998:	f7ff fa54 	bl	20003e44 <__aeabi_dmul>
2000499c:	4a53      	ldr	r2, [pc, #332]	; (20004aec <__ieee754_log+0x3a4>)
2000499e:	9002      	str	r0, [sp, #8]
200049a0:	9103      	str	r1, [sp, #12]
200049a2:	9800      	ldr	r0, [sp, #0]
200049a4:	9901      	ldr	r1, [sp, #4]
200049a6:	4b52      	ldr	r3, [pc, #328]	; (20004af0 <__ieee754_log+0x3a8>)
200049a8:	f7ff fa4c 	bl	20003e44 <__aeabi_dmul>
200049ac:	0002      	movs	r2, r0
200049ae:	000b      	movs	r3, r1
200049b0:	0020      	movs	r0, r4
200049b2:	0029      	movs	r1, r5
200049b4:	f7fd ff14 	bl	200027e0 <__aeabi_dsub>
200049b8:	0032      	movs	r2, r6
200049ba:	003b      	movs	r3, r7
200049bc:	f7fd ff10 	bl	200027e0 <__aeabi_dsub>
200049c0:	0002      	movs	r2, r0
200049c2:	000b      	movs	r3, r1
200049c4:	9802      	ldr	r0, [sp, #8]
200049c6:	9903      	ldr	r1, [sp, #12]
200049c8:	f7fd ff0a 	bl	200027e0 <__aeabi_dsub>
200049cc:	e79d      	b.n	2000490a <__ieee754_log+0x1c2>
200049ce:	0022      	movs	r2, r4
200049d0:	002b      	movs	r3, r5
200049d2:	0030      	movs	r0, r6
200049d4:	0039      	movs	r1, r7
200049d6:	f7fd ff03 	bl	200027e0 <__aeabi_dsub>
200049da:	9a04      	ldr	r2, [sp, #16]
200049dc:	9b05      	ldr	r3, [sp, #20]
200049de:	f7ff fa31 	bl	20003e44 <__aeabi_dmul>
200049e2:	464b      	mov	r3, r9
200049e4:	0004      	movs	r4, r0
200049e6:	000d      	movs	r5, r1
200049e8:	2b00      	cmp	r3, #0
200049ea:	d141      	bne.n	20004a70 <__ieee754_log+0x328>
200049ec:	0022      	movs	r2, r4
200049ee:	002b      	movs	r3, r5
200049f0:	0030      	movs	r0, r6
200049f2:	0039      	movs	r1, r7
200049f4:	f7fd fef4 	bl	200027e0 <__aeabi_dsub>
200049f8:	e787      	b.n	2000490a <__ieee754_log+0x1c2>
200049fa:	4a3a      	ldr	r2, [pc, #232]	; (20004ae4 <__ieee754_log+0x39c>)
200049fc:	4b3a      	ldr	r3, [pc, #232]	; (20004ae8 <__ieee754_log+0x3a0>)
200049fe:	9800      	ldr	r0, [sp, #0]
20004a00:	9901      	ldr	r1, [sp, #4]
20004a02:	f7ff fa1f 	bl	20003e44 <__aeabi_dmul>
20004a06:	4a39      	ldr	r2, [pc, #228]	; (20004aec <__ieee754_log+0x3a4>)
20004a08:	9004      	str	r0, [sp, #16]
20004a0a:	9105      	str	r1, [sp, #20]
20004a0c:	9800      	ldr	r0, [sp, #0]
20004a0e:	9901      	ldr	r1, [sp, #4]
20004a10:	4b37      	ldr	r3, [pc, #220]	; (20004af0 <__ieee754_log+0x3a8>)
20004a12:	f7ff fa17 	bl	20003e44 <__aeabi_dmul>
20004a16:	0022      	movs	r2, r4
20004a18:	002b      	movs	r3, r5
20004a1a:	f7fe fbf5 	bl	20003208 <__aeabi_dadd>
20004a1e:	0002      	movs	r2, r0
20004a20:	000b      	movs	r3, r1
20004a22:	9802      	ldr	r0, [sp, #8]
20004a24:	9903      	ldr	r1, [sp, #12]
20004a26:	f7fd fedb 	bl	200027e0 <__aeabi_dsub>
20004a2a:	0032      	movs	r2, r6
20004a2c:	003b      	movs	r3, r7
20004a2e:	f7fd fed7 	bl	200027e0 <__aeabi_dsub>
20004a32:	0002      	movs	r2, r0
20004a34:	000b      	movs	r3, r1
20004a36:	9804      	ldr	r0, [sp, #16]
20004a38:	9905      	ldr	r1, [sp, #20]
20004a3a:	f7fd fed1 	bl	200027e0 <__aeabi_dsub>
20004a3e:	e764      	b.n	2000490a <__ieee754_log+0x1c2>
20004a40:	4648      	mov	r0, r9
20004a42:	f7ff fc8d 	bl	20004360 <__aeabi_i2d>
20004a46:	4a27      	ldr	r2, [pc, #156]	; (20004ae4 <__ieee754_log+0x39c>)
20004a48:	4b27      	ldr	r3, [pc, #156]	; (20004ae8 <__ieee754_log+0x3a0>)
20004a4a:	0004      	movs	r4, r0
20004a4c:	000d      	movs	r5, r1
20004a4e:	f7ff f9f9 	bl	20003e44 <__aeabi_dmul>
20004a52:	4a26      	ldr	r2, [pc, #152]	; (20004aec <__ieee754_log+0x3a4>)
20004a54:	0006      	movs	r6, r0
20004a56:	000f      	movs	r7, r1
20004a58:	4b25      	ldr	r3, [pc, #148]	; (20004af0 <__ieee754_log+0x3a8>)
20004a5a:	0020      	movs	r0, r4
20004a5c:	0029      	movs	r1, r5
20004a5e:	f7ff f9f1 	bl	20003e44 <__aeabi_dmul>
20004a62:	0002      	movs	r2, r0
20004a64:	000b      	movs	r3, r1
20004a66:	0030      	movs	r0, r6
20004a68:	0039      	movs	r1, r7
20004a6a:	f7fe fbcd 	bl	20003208 <__aeabi_dadd>
20004a6e:	e74c      	b.n	2000490a <__ieee754_log+0x1c2>
20004a70:	4a1c      	ldr	r2, [pc, #112]	; (20004ae4 <__ieee754_log+0x39c>)
20004a72:	4b1d      	ldr	r3, [pc, #116]	; (20004ae8 <__ieee754_log+0x3a0>)
20004a74:	9800      	ldr	r0, [sp, #0]
20004a76:	9901      	ldr	r1, [sp, #4]
20004a78:	e78e      	b.n	20004998 <__ieee754_log+0x250>
20004a7a:	46c0      	nop			; (mov r8, r8)
20004a7c:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
20004a80:	43500000 	cmpmi	r0, #0
20004a84:	7fefffff 	svcvc	0x00efffff
20004a88:	fffffc01 			; <UNDEFINED> instruction: 0xfffffc01
20004a8c:	00095f64 	andeq	r5, r9, r4, ror #30
20004a90:	3ff00000 	svccc	0x00f00000	; IMB
20004a94:	fff9eb86 			; <UNDEFINED> instruction: 0xfff9eb86
20004a98:	df3e5244 	svcle	0x003e5244
20004a9c:	3fc2f112 	svccc	0x00c2f112
20004aa0:	96cb03de 			; <UNDEFINED> instruction: 0x96cb03de
20004aa4:	3fc74664 	svccc	0x00c74664
20004aa8:	94229359 	strtls	r9, [r2], #-857	; 0xfffffca7
20004aac:	3fd24924 	svccc	0x00d24924
20004ab0:	55555593 	ldrbpl	r5, [r5, #-1427]	; 0xfffffa6d
20004ab4:	3fe55555 	svccc	0x00e55555
20004ab8:	d078c69f 			; <UNDEFINED> instruction: 0xd078c69f
20004abc:	3fc39a09 	svccc	0x00c39a09
20004ac0:	1d8e78af 	stcne	8, cr7, [lr, #700]	; 0x2bc
20004ac4:	3fcc71c5 	svccc	0x00cc71c5
20004ac8:	9997fa04 	ldmibls	r7, {r2, r9, fp, ip, sp, lr, pc}
20004acc:	3fd99999 	svccc	0x00d99999
20004ad0:	0006b851 	andeq	fp, r6, r1, asr r8
20004ad4:	3fe00000 	svccc	0x00e00000
20004ad8:	c3500000 	cmpgt	r0, #0
20004adc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20004ae0:	3fd55555 	svccc	0x00d55555
20004ae4:	fee00000 	cdp2	0, 14, cr0, cr0, cr0, {0}
20004ae8:	3fe62e42 	svccc	0x00e62e42
20004aec:	35793c76 	ldrbcc	r3, [r9, #-3190]!	; 0xfffff38a
20004af0:	3dea39ef 			; <UNDEFINED> instruction: 0x3dea39ef

20004af4 <__errno>:
20004af4:	4b01      	ldr	r3, [pc, #4]	; (20004afc <__errno+0x8>)
20004af6:	6818      	ldr	r0, [r3, #0]
20004af8:	4770      	bx	lr
20004afa:	46c0      	nop			; (mov r8, r8)
20004afc:	20004bf0 	strdcs	r4, [r0], -r0

20004b00 <msTicks>:
20004b00:	00000000 	andeq	r0, r0, r0

20004b04 <txBuffer>:
20004b04:	00000000 	andeq	r0, r0, r0

20004b08 <rxBuffer>:
20004b08:	00000000 	andeq	r0, r0, r0

20004b0c <realTxBuffer>:
	...

20004b74 <realRxBuffer>:
	...

20004bdc <APBAHBPrescTable>:
20004bdc:	00000000 	andeq	r0, r0, r0
20004be0:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20004be4:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20004be8:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20004bec <__fdlib_version>:
20004bec:	00000001 	andeq	r0, r0, r1

20004bf0 <_impure_ptr>:
20004bf0:	20004bf8 	strdcs	r4, [r0], -r8
20004bf4:	00000000 	andeq	r0, r0, r0

20004bf8 <impure_data>:
20004bf8:	00000000 	andeq	r0, r0, r0
20004bfc:	20004ee4 	andcs	r4, r0, r4, ror #29
20004c00:	20004f4c 	andcs	r4, r0, ip, asr #30
20004c04:	20004fb4 			; <UNDEFINED> instruction: 0x20004fb4
	...
20004ca0:	00000001 	andeq	r0, r0, r1
20004ca4:	00000000 	andeq	r0, r0, r0
20004ca8:	abcd330e 	blge	1f3518e8 <startup-0xcae718>
20004cac:	e66d1234 			; <UNDEFINED> instruction: 0xe66d1234
20004cb0:	0005deec 	andeq	sp, r5, ip, ror #29
20004cb4:	0000000b 	andeq	r0, r0, fp
	...
20005028:	00000201 	andeq	r0, r0, r1, lsl #4
2000502c:	00000000 	andeq	r0, r0, r0
20005030:	00000008 	andeq	r0, r0, r8
20005034:	00000004 	andeq	r0, r0, r4
20005038:	00000000 	andeq	r0, r0, r0
2000503c:	00000001 	andeq	r0, r0, r1
20005040:	00000000 	andeq	r0, r0, r0
20005044:	00000201 	andeq	r0, r0, r1, lsl #4
20005048:	00000000 	andeq	r0, r0, r0
2000504c:	00000020 	andeq	r0, r0, r0, lsr #32
20005050:	00000010 	andeq	r0, r0, r0, lsl r0
20005054:	00000000 	andeq	r0, r0, r0
20005058:	00000002 	andeq	r0, r0, r2
2000505c:	00000000 	andeq	r0, r0, r0
20005060:	00000201 	andeq	r0, r0, r1, lsl #4
20005064:	00000000 	andeq	r0, r0, r0
20005068:	00000002 	andeq	r0, r0, r2
2000506c:	00000001 	andeq	r0, r0, r1
20005070:	00000000 	andeq	r0, r0, r0
20005074:	00000003 	andeq	r0, r0, r3
20005078:	00000000 	andeq	r0, r0, r0
2000507c:	00000201 	andeq	r0, r0, r1, lsl #4
20005080:	00000000 	andeq	r0, r0, r0
20005084:	00000080 	andeq	r0, r0, r0, lsl #1
20005088:	00000040 	andeq	r0, r0, r0, asr #32
2000508c:	00000000 	andeq	r0, r0, r0
20005090:	20003ae4 	andcs	r3, r0, r4, ror #21
20005094:	20003956 	andcs	r3, r0, r6, asr r9
20005098:	2000399a 	mulcs	r0, sl, r9
2000509c:	200038fe 	strdcs	r3, [r0], -lr
200050a0:	2000399a 	mulcs	r0, sl, r9
200050a4:	20003a8a 	andcs	r3, r0, sl, lsl #21
200050a8:	2000399a 	mulcs	r0, sl, r9
200050ac:	200038fe 	strdcs	r3, [r0], -lr
200050b0:	20003956 	andcs	r3, r0, r6, asr r9
200050b4:	20003956 	andcs	r3, r0, r6, asr r9
200050b8:	20003a8a 	andcs	r3, r0, sl, lsl #21
200050bc:	200038fe 	strdcs	r3, [r0], -lr
200050c0:	200038f6 	strdcs	r3, [r0], -r6
200050c4:	200038f6 	strdcs	r3, [r0], -r6
200050c8:	200038f6 	strdcs	r3, [r0], -r6
200050cc:	20003a98 	mulcs	r0, r8, sl
200050d0:	20003ffc 	strdcs	r3, [r0], -ip
200050d4:	20003efe 	strdcs	r3, [r0], -lr
200050d8:	20003efe 	strdcs	r3, [r0], -lr
200050dc:	2000421c 	andcs	r4, r0, ip, lsl r2
200050e0:	20003ef8 	strdcs	r3, [r0], -r8
200050e4:	20003ef8 	strdcs	r3, [r0], -r8
200050e8:	20004204 	andcs	r4, r0, r4, lsl #4
200050ec:	2000421c 	andcs	r4, r0, ip, lsl r2
200050f0:	20003ef8 	strdcs	r3, [r0], -r8
200050f4:	20004204 	andcs	r4, r0, r4, lsl #4
200050f8:	20003ef8 	strdcs	r3, [r0], -r8
200050fc:	2000421c 	andcs	r4, r0, ip, lsl r2
20005100:	20004212 	andcs	r4, r0, r2, lsl r2
20005104:	20004212 	andcs	r4, r0, r2, lsl r2
20005108:	20004212 	andcs	r4, r0, r2, lsl r2
2000510c:	20004220 	andcs	r4, r0, r0, lsr #4
20005110:	31676f6c 	cmncc	r7, ip, ror #30
20005114:	00000030 	andeq	r0, r0, r0, lsr r0
20005118:	00000000 	andeq	r0, r0, r0

2000511c <_global_impure_ptr>:
2000511c:	20004bf8 	strdcs	r4, [r0], -r8

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000174e 	andeq	r1, r0, lr, asr #14
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000005de 	ldrdeq	r0, [r0], -lr
      10:	000d7c0c 	andeq	r7, sp, ip, lsl #24
      14:	00053e00 	andeq	r3, r5, r0, lsl #28
	...
      24:	0f850200 	svceq	0x00850200
      28:	01050000 	mrseq	r0, (UNDEF: 5)
      2c:	00000253 	andeq	r0, r0, r3, asr r2
      30:	0253c804 	subseq	ip, r3, #4, 16	; 0x40000
      34:	a6030000 	strge	r0, [r3], -r0
      38:	72000007 	andvc	r0, r0, #7
      3c:	00082103 	andeq	r2, r8, r3, lsl #2
      40:	e6037400 	str	r7, [r3], -r0, lsl #8
      44:	75000008 	strvc	r0, [r0, #-8]
      48:	00048103 	andeq	r8, r4, r3, lsl #2
      4c:	c3037600 	movwgt	r7, #13824	; 0x3600
      50:	7b000009 	blvc	7c <startup-0x1fffff84>
      54:	000e6b03 	andeq	r6, lr, r3, lsl #22
      58:	cf037c00 	svcgt	0x00037c00
      5c:	7e000010 	mcrvc	0, 0, r0, cr0, cr0, {0}
      60:	00032d03 	andeq	r2, r3, r3, lsl #26
      64:	ba047f00 	blt	11fc6c <startup-0x1fee0394>
      68:	00000007 	andeq	r0, r0, r7
      6c:	0006ac04 	andeq	sl, r6, r4, lsl #24
      70:	47040100 	strmi	r0, [r4, -r0, lsl #2]
      74:	02000008 	andeq	r0, r0, #8
      78:	00000e04 	andeq	r0, r0, r4, lsl #28
      7c:	bb040300 	bllt	100c84 <startup-0x1feff37c>
      80:	04000000 	streq	r0, [r0], #-0
      84:	000f0204 	andeq	r0, pc, r4, lsl #4
      88:	ec040500 	cfstr32	mvfx0, [r4], {-0}
      8c:	0600000d 	streq	r0, [r0], -sp
      90:	00072f04 	andeq	r2, r7, r4, lsl #30
      94:	1c040700 	stcne	7, cr0, [r4], {-0}
      98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      9c:	0010c404 	andseq	ip, r0, r4, lsl #8
      a0:	af040900 	svcge	0x00040900
      a4:	0a00000a 	beq	d4 <startup-0x1fffff2c>
      a8:	000c3a04 	andeq	r3, ip, r4, lsl #20
      ac:	5e040b00 	vmlapl.f64	d0, d4, d0
      b0:	0c00000b 	stceq	0, cr0, [r0], {11}
      b4:	00039e04 	andeq	r9, r3, r4, lsl #28
      b8:	17040d00 	strne	r0, [r4, -r0, lsl #26]
      bc:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
      c0:	000e1e04 	andeq	r1, lr, r4, lsl #28
      c4:	47040f00 	strmi	r0, [r4, -r0, lsl #30]
      c8:	10000007 	andne	r0, r0, r7
      cc:	00002704 	andeq	r2, r0, r4, lsl #14
      d0:	32041100 	andcc	r1, r4, #0, 2
      d4:	1200000d 	andne	r0, r0, #13
      d8:	00073a04 	andeq	r3, r7, r4, lsl #20
      dc:	30041300 	andcc	r1, r4, r0, lsl #6
      e0:	14000005 	strne	r0, [r0], #-5
      e4:	00101404 	andseq	r1, r0, r4, lsl #8
      e8:	57041500 	strpl	r1, [r4, -r0, lsl #10]
      ec:	16000008 	strne	r0, [r0], -r8
      f0:	00103e04 	andseq	r3, r0, r4, lsl #28
      f4:	0d041700 	stceq	7, cr1, [r4, #-0]
      f8:	18000009 	stmdane	r0, {r0, r3}
      fc:	000f7704 	andeq	r7, pc, r4, lsl #14
     100:	95041900 	strls	r1, [r4, #-2304]	; 0xfffff700
     104:	1a000002 	bne	114 <startup-0x1ffffeec>
     108:	00071404 	andeq	r1, r7, r4, lsl #8
     10c:	3c041b00 			; <UNDEFINED> instruction: 0x3c041b00
     110:	1c000001 	stcne	0, cr0, [r0], {1}
     114:	000ce604 	andeq	lr, ip, r4, lsl #12
     118:	d4041d00 	strle	r1, [r4], #-3328	; 0xfffff300
     11c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
     120:	0006c204 	andeq	ip, r6, r4, lsl #4
     124:	3a041f00 	bcc	107d2c <startup-0x1fef82d4>
     128:	20000004 	andcs	r0, r0, r4
     12c:	000ae104 	andeq	lr, sl, r4, lsl #2
     130:	b9042100 	stmdblt	r4, {r8, sp}
     134:	22000008 	andcs	r0, r0, #8
     138:	0009b104 	andeq	fp, r9, r4, lsl #2
     13c:	cd042300 	stcgt	3, cr2, [r4, #-0]
     140:	24000001 	strcs	r0, [r0], #-1
     144:	000cf004 	andeq	pc, ip, r4
     148:	29042500 	stmdbcs	r4, {r8, sl, sp}
     14c:	2600000f 	strcs	r0, [r0], -pc
     150:	00034904 	andeq	r4, r3, r4, lsl #18
     154:	b4042700 	strlt	r2, [r4], #-1792	; 0xfffff900
     158:	2800000c 	stmdacs	r0, {r2, r3}
     15c:	000c6c04 	andeq	r6, ip, r4, lsl #24
     160:	85042900 	strhi	r2, [r4, #-2304]	; 0xfffff700
     164:	2a00000a 	bcs	194 <startup-0x1ffffe6c>
     168:	0001d704 	andeq	sp, r1, r4, lsl #14
     16c:	39042b00 	stmdbcc	r4, {r8, r9, fp, sp}
     170:	2c000000 	stccs	0, cr0, [r0], {-0}
     174:	00077004 	andeq	r7, r7, r4
     178:	91042d00 	tstls	r4, r0, lsl #26
     17c:	2e000010 	mcrcs	0, 0, r0, cr0, cr0, {0}
     180:	00110004 	andseq	r0, r1, r4
     184:	e2042f00 	and	r2, r4, #0, 30
     188:	3000000d 	andcc	r0, r0, sp
     18c:	00109e04 	andseq	r9, r0, r4, lsl #28
     190:	77043100 	strvc	r3, [r4, -r0, lsl #2]
     194:	32000004 	andcc	r0, r0, #4
     198:	0000b104 	andeq	fp, r0, r4, lsl #2
     19c:	50043300 	andpl	r3, r4, r0, lsl #6
     1a0:	3400000a 	strcc	r0, [r0], #-10
     1a4:	00090204 	andeq	r0, r9, r4, lsl #4
     1a8:	bf043500 	svclt	0x00043500
     1ac:	3600000a 	strcc	r0, [r0], -sl
     1b0:	00097304 	andeq	r7, r9, r4, lsl #6
     1b4:	7c043700 	stcvc	7, cr3, [r4], {-0}
     1b8:	38000008 	stmdacc	r0, {r3}
     1bc:	00007a04 	andeq	r7, r0, r4, lsl #20
     1c0:	79043900 	stmdbvc	r4, {r8, fp, ip, sp}
     1c4:	3a000011 	bcc	210 <startup-0x1ffffdf0>
     1c8:	000b7d04 	andeq	r7, fp, r4, lsl #26
     1cc:	f7043b00 			; <UNDEFINED> instruction: 0xf7043b00
     1d0:	3c000003 	stccc	0, cr0, [r0], {3}
     1d4:	000ebd04 	andeq	fp, lr, r4, lsl #26
     1d8:	8b043d00 	blhi	10f5e0 <startup-0x1fef0a20>
     1dc:	3e000009 	cdpcc	0, 0, cr0, cr0, cr9, {0}
     1e0:	000b9804 	andeq	r9, fp, r4, lsl #16
     1e4:	9f043f00 	svcls	0x00043f00
     1e8:	40000001 	andmi	r0, r0, r1
     1ec:	000d2404 	andeq	r2, sp, r4, lsl #8
     1f0:	47044100 	strmi	r4, [r4, -r0, lsl #2]
     1f4:	42000004 	andmi	r0, r0, #4
     1f8:	00079a04 	andeq	r9, r7, r4, lsl #20
     1fc:	5f044300 	svcpl	0x00044300
     200:	44000002 	strmi	r0, [r0], #-2
     204:	000e3a04 	andeq	r3, lr, r4, lsl #20
     208:	88044500 	stmdahi	r4, {r8, sl, lr}
     20c:	46000007 	strmi	r0, [r0], -r7
     210:	0001ad04 	andeq	sl, r1, r4, lsl #26
     214:	9d044700 	stcls	7, cr4, [r4, #-0]
     218:	4800000e 	stmdami	r0, {r1, r2, r3}
     21c:	000c9d04 	andeq	r9, ip, r4, lsl #26
     220:	c9044900 	stmdbgt	r4, {r8, fp, lr}
     224:	4a00000f 	bmi	268 <startup-0x1ffffd98>
     228:	0010ed04 	andseq	lr, r0, r4, lsl #26
     22c:	c4044b00 	strgt	r4, [r4], #-2816	; 0xfffff500
     230:	4c000007 	stcmi	0, cr0, [r0], {7}
     234:	00099904 	andeq	r9, r9, r4, lsl #18
     238:	c6044d00 	strgt	r4, [r4], -r0, lsl #26
     23c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     240:	000caa04 	andeq	sl, ip, r4, lsl #20
     244:	21044f00 	tstcs	r4, r0, lsl #30
     248:	50000007 	andpl	r0, r0, r7
     24c:	000a2904 	andeq	r2, sl, r4, lsl #18
     250:	05005100 	streq	r5, [r0, #-256]	; 0xffffff00
     254:	03eb0601 	mvneq	r0, #1048576	; 0x100000
     258:	65060000 	strvs	r0, [r6, #-0]
     25c:	04000008 	streq	r0, [r0], #-8
     260:	0025032f 	eoreq	r0, r5, pc, lsr #6
     264:	c3070000 	movwgt	r0, #28672	; 0x7000
     268:	05000001 	streq	r0, [r0, #-1]
     26c:	0002712b 	andeq	r7, r2, fp, lsr #2
     270:	08010500 	stmdaeq	r1, {r8, sl}
     274:	000003e9 	andeq	r0, r0, r9, ror #7
     278:	ef050205 	svc	0x00050205
     27c:	0700000e 	streq	r0, [r0, -lr]
     280:	000004fe 	strdeq	r0, [r0], -lr
     284:	028a3905 	addeq	r3, sl, #81920	; 0x14000
     288:	02050000 	andeq	r0, r5, #0
     28c:	00106d07 	andseq	r6, r0, r7, lsl #26
     290:	11120700 	tstne	r2, r0, lsl #14
     294:	4d050000 	stcmi	0, cr0, [r5, #-0]
     298:	0000029c 	muleq	r0, ip, r2
     29c:	82050405 	andhi	r0, r5, #83886080	; 0x5000000
     2a0:	07000009 	streq	r0, [r0, -r9]
     2a4:	0000092b 	andeq	r0, r0, fp, lsr #18
     2a8:	02ae4f05 	adceq	r4, lr, #5, 30
     2ac:	04050000 	streq	r0, [r5], #-0
     2b0:	000cc807 	andeq	ip, ip, r7, lsl #16
     2b4:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
     2b8:	0000097d 	andeq	r0, r0, sp, ror r9
     2bc:	c3070805 	movwgt	r0, #30725	; 0x7805
     2c0:	0800000c 	stmdaeq	r0, {r2, r3}
     2c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     2c8:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     2cc:	000ccd07 	andeq	ip, ip, r7, lsl #26
     2d0:	01c50700 	biceq	r0, r5, r0, lsl #14
     2d4:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
     2d8:	00000266 	andeq	r0, r0, r6, ror #4
     2dc:	0002d109 	andeq	sp, r2, r9, lsl #2
     2e0:	02d10a00 	sbcseq	r0, r1, #0, 20
     2e4:	e1090000 	mrs	r0, (UNDEF: 9)
     2e8:	07000002 	streq	r0, [r0, -r2]
     2ec:	00000500 	andeq	r0, r0, r0, lsl #10
     2f0:	027f2406 	rsbseq	r2, pc, #100663296	; 0x6000000
     2f4:	eb090000 	bl	2402fc <startup-0x1fdbfd04>
     2f8:	07000002 	streq	r0, [r0, -r2]
     2fc:	00001114 	andeq	r1, r0, r4, lsl r1
     300:	02912c06 	addseq	r2, r1, #1536	; 0x600
     304:	fb090000 	blx	24030e <startup-0x1fdbfcf2>
     308:	07000002 	streq	r0, [r0, -r2]
     30c:	0000092d 	andeq	r0, r0, sp, lsr #18
     310:	02a33006 	adceq	r3, r3, #6
     314:	0b090000 	bleq	24031c <startup-0x1fdbfce4>
     318:	0a000003 	beq	32c <startup-0x1ffffcd4>
     31c:	00000316 	andeq	r0, r0, r6, lsl r3
     320:	010e040b 	tsteq	lr, fp, lsl #8
     324:	03dc01a0 	bicseq	r0, ip, #160, 2	; 0x28
     328:	300c0000 	andcc	r0, ip, r0
     32c:	01000011 	tsteq	r0, r1, lsl r0
     330:	03ec01a2 	mvneq	r0, #-2147483608	; 0x80000028
     334:	0c000000 	stceq	0, cr0, [r0], {-0}
     338:	000003d5 	ldrdeq	r0, [r0], -r5
     33c:	f101a301 			; <UNDEFINED> instruction: 0xf101a301
     340:	20000003 	andcs	r0, r0, r3
     344:	000d4d0c 	andeq	r4, sp, ip, lsl #26
     348:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
     34c:	000003ec 	andeq	r0, r0, ip, ror #7
     350:	00050c80 	andeq	r0, r5, r0, lsl #25
     354:	a5010000 	strge	r0, [r1, #-0]
     358:	0003f101 	andeq	pc, r3, r1, lsl #2
     35c:	ae0da000 	cdpge	0, 0, cr10, cr13, cr0, {0}
     360:	01000010 	tsteq	r0, r0, lsl r0
     364:	03ec01a6 	mvneq	r0, #-2147483607	; 0x80000029
     368:	01000000 	mrseq	r0, (UNDEF: 0)
     36c:	0004630d 	andeq	r6, r4, sp, lsl #6
     370:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     374:	000003f1 	strdeq	r0, [r0], -r1
     378:	6e0d0120 	adfvsep	f0, f5, f0
     37c:	01000001 	tsteq	r0, r1
     380:	03ec01a8 	mvneq	r0, #168, 2	; 0x2a
     384:	01800000 	orreq	r0, r0, r0
     388:	00046d0d 	andeq	r6, r4, sp, lsl #26
     38c:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
     390:	000003f1 	strdeq	r0, [r0], -r1
     394:	270d01a0 	strcs	r0, [sp, -r0, lsr #3]
     398:	01000004 	tsteq	r0, r4
     39c:	03ec01aa 	mvneq	r0, #-2147483606	; 0x8000002a
     3a0:	02000000 	andeq	r0, r0, #0
     3a4:	0004090d 	andeq	r0, r4, sp, lsl #18
     3a8:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
     3ac:	00000401 	andeq	r0, r0, r1, lsl #8
     3b0:	490e0220 	stmdbmi	lr, {r5, r9}
     3b4:	ac010050 	stcge	0, cr0, [r1], {80}	; 0x50
     3b8:	00042101 	andeq	r2, r4, r1, lsl #2
     3bc:	0d030000 	stceq	0, cr0, [r3, #-0]
     3c0:	00000413 	andeq	r0, r0, r3, lsl r4
     3c4:	2601ad01 	strcs	sl, [r1], -r1, lsl #26
     3c8:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     3cc:	06bd0d03 	ldrteq	r0, [sp], r3, lsl #26
     3d0:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     3d4:	00031601 	andeq	r1, r3, r1, lsl #12
     3d8:	000e0000 	andeq	r0, lr, r0
     3dc:	0003160f 	andeq	r1, r3, pc, lsl #12
     3e0:	0003ec00 	andeq	lr, r3, r0, lsl #24
     3e4:	02ca1000 	sbceq	r1, sl, #0
     3e8:	00070000 	andeq	r0, r7, r0
     3ec:	0003dc09 	andeq	sp, r3, r9, lsl #24
     3f0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     3f4:	04010000 	streq	r0, [r1], #-0
     3f8:	ca100000 	bgt	400400 <startup-0x1fbffc00>
     3fc:	17000002 	strne	r0, [r0, -r2]
     400:	030b0f00 	movweq	r0, #48896	; 0xbf00
     404:	04110000 	ldreq	r0, [r1], #-0
     408:	ca100000 	bgt	400410 <startup-0x1fbffbf0>
     40c:	37000002 	strcc	r0, [r0, -r2]
     410:	02dc0f00 	sbcseq	r0, ip, #0, 30
     414:	04210000 	strteq	r0, [r1], #-0
     418:	ca100000 	bgt	400420 <startup-0x1fbffbe0>
     41c:	ef000002 	svc	0x00000002
     420:	04110900 	ldreq	r0, [r1], #-2304	; 0xfffff700
     424:	0b0f0000 	bleq	3c042c <startup-0x1fc3fbd4>
     428:	37000003 	strcc	r0, [r0, -r3]
     42c:	11000004 	tstne	r0, r4
     430:	000002ca 	andeq	r0, r0, sl, asr #5
     434:	06000283 	streq	r0, [r0], -r3, lsl #5
     438:	00000c83 	andeq	r0, r0, r3, lsl #25
     43c:	2001af01 	andcs	sl, r1, r1, lsl #30
     440:	12000003 	andne	r0, r0, #3
     444:	01c0018c 	biceq	r0, r0, ip, lsl #3
     448:	0000055e 	andeq	r0, r0, lr, asr r5
     44c:	0002340c 	andeq	r3, r2, ip, lsl #8
     450:	01c20100 	biceq	r0, r2, r0, lsl #2
     454:	0000031b 	andeq	r0, r0, fp, lsl r3
     458:	035d0c00 	cmpeq	sp, #0, 24
     45c:	c3010000 	movwgt	r0, #4096	; 0x1000
     460:	00031601 	andeq	r1, r3, r1, lsl #12
     464:	ac0c0400 	cfstrsge	mvf0, [ip], {-0}
     468:	01000000 	mrseq	r0, (UNDEF: 0)
     46c:	031601c4 	tsteq	r6, #196, 2	; 0x31
     470:	0c080000 	stceq	0, cr0, [r8], {-0}
     474:	00000204 	andeq	r0, r0, r4, lsl #4
     478:	1601c501 	strne	ip, [r1], -r1, lsl #10
     47c:	0c000003 	stceq	0, cr0, [r0], {3}
     480:	52435313 	subpl	r5, r3, #1275068416	; 0x4c000000
     484:	01c60100 	biceq	r0, r6, r0, lsl #2
     488:	00000316 	andeq	r0, r0, r6, lsl r3
     48c:	43431310 	movtmi	r1, #13072	; 0x3310
     490:	c7010052 	smlsdgt	r1, r2, r0, r0
     494:	00031601 	andeq	r1, r3, r1, lsl #12
     498:	53131400 	tstpl	r3, #0, 8
     49c:	01005048 	tsteq	r0, r8, asr #32
     4a0:	056e01c8 	strbeq	r0, [lr, #-456]!	; 0xfffffe38
     4a4:	0c180000 	ldceq	0, cr0, [r8], {-0}
     4a8:	000006a6 	andeq	r0, r0, r6, lsr #13
     4ac:	1601c901 	strne	ip, [r1], -r1, lsl #18
     4b0:	24000003 	strcs	r0, [r0], #-3
     4b4:	000e000c 	andeq	r0, lr, ip
     4b8:	01ca0100 	biceq	r0, sl, r0, lsl #2
     4bc:	00000316 	andeq	r0, r0, r6, lsl r3
     4c0:	05810c28 	streq	r0, [r1, #3112]	; 0xc28
     4c4:	cb010000 	blgt	404cc <startup-0x1ffbfb34>
     4c8:	00031601 	andeq	r1, r3, r1, lsl #12
     4cc:	b10c2c00 	tstlt	ip, r0, lsl #24
     4d0:	01000004 	tsteq	r0, r4
     4d4:	031601cc 	tsteq	r6, #204, 2	; 0x33
     4d8:	0c300000 	ldceq	0, cr0, [r0], #-0
     4dc:	00000ee9 	andeq	r0, r0, r9, ror #29
     4e0:	1601cd01 	strne	ip, [r1], -r1, lsl #26
     4e4:	34000003 	strcc	r0, [r0], #-3
     4e8:	000b4f0c 	andeq	r4, fp, ip, lsl #30
     4ec:	01ce0100 	biceq	r0, lr, r0, lsl #2
     4f0:	00000316 	andeq	r0, r0, r6, lsl r3
     4f4:	0dc90c38 	stcleq	12, cr0, [r9, #224]	; 0xe0
     4f8:	cf010000 	svcgt	0x00010000
     4fc:	00031601 	andeq	r1, r3, r1, lsl #12
     500:	50133c00 	andspl	r3, r3, r0, lsl #24
     504:	01005246 	tsteq	r0, r6, asr #4
     508:	058801d0 	streq	r0, [r8, #464]	; 0x1d0
     50c:	13400000 	movtne	r0, #0
     510:	00524644 	subseq	r4, r2, r4, asr #12
     514:	1b01d101 	blne	74920 <startup-0x1ff8b6e0>
     518:	48000003 	stmdami	r0, {r0, r1}
     51c:	52444113 	subpl	r4, r4, #-1073741820	; 0xc0000004
     520:	01d20100 	bicseq	r0, r2, r0, lsl #2
     524:	0000031b 	andeq	r0, r0, fp, lsl r3
     528:	0ed80c4c 	cdpeq	12, 13, cr0, cr8, cr12, {2}
     52c:	d3010000 	movwle	r0, #4096	; 0x1000
     530:	0005a201 	andeq	sl, r5, r1, lsl #4
     534:	120c5000 	andne	r5, ip, #0
     538:	0100000f 	tsteq	r0, pc
     53c:	05bc01d4 	ldreq	r0, [ip, #468]!	; 0x1d4
     540:	0c600000 	stcleq	0, cr0, [r0], #-0
     544:	000003d5 	ldrdeq	r0, [r0], -r5
     548:	c101d501 	tstgt	r1, r1, lsl #10
     54c:	74000005 	strvc	r0, [r0], #-5
     550:	0010a80c 	andseq	sl, r0, ip, lsl #16
     554:	01d60100 	bicseq	r0, r6, r0, lsl #2
     558:	00000316 	andeq	r0, r0, r6, lsl r3
     55c:	dc0f0088 	stcle	0, cr0, [pc], {136}	; 0x88
     560:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
     564:	10000005 	andne	r0, r0, r5
     568:	000002ca 	andeq	r0, r0, sl, asr #5
     56c:	5e09000b 	cdppl	0, 0, cr0, cr9, cr11, {0}
     570:	0f000005 	svceq	0x00000005
     574:	0000031b 	andeq	r0, r0, fp, lsl r3
     578:	00000583 	andeq	r0, r0, r3, lsl #11
     57c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     580:	0a000100 	beq	988 <startup-0x1ffff678>
     584:	00000573 	andeq	r0, r0, r3, ror r5
     588:	00058309 	andeq	r8, r5, r9, lsl #6
     58c:	031b0f00 	tsteq	fp, #0, 30
     590:	059d0000 	ldreq	r0, [sp]
     594:	ca100000 	bgt	40059c <startup-0x1fbffa64>
     598:	03000002 	movweq	r0, #2
     59c:	058d0a00 	streq	r0, [sp, #2560]	; 0xa00
     5a0:	9d090000 	stcls	0, cr0, [r9, #-0]
     5a4:	0f000005 	svceq	0x00000005
     5a8:	0000031b 	andeq	r0, r0, fp, lsl r3
     5ac:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     5b0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5b4:	0a000400 	beq	15bc <startup-0x1fffea44>
     5b8:	000005a7 	andeq	r0, r0, r7, lsr #11
     5bc:	0005b709 	andeq	fp, r5, r9, lsl #14
     5c0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     5c4:	05d10000 	ldrbeq	r0, [r1]
     5c8:	ca100000 	bgt	4005d0 <startup-0x1fbffa30>
     5cc:	04000002 	streq	r0, [r0], #-2
     5d0:	04970600 	ldreq	r0, [r7], #1536	; 0x600
     5d4:	d7010000 	strle	r0, [r1, -r0]
     5d8:	00044301 	andeq	r4, r4, r1, lsl #6
     5dc:	01101200 	tsteq	r0, r0, lsl #4
     5e0:	061b02bf 			; <UNDEFINED> instruction: 0x061b02bf
     5e4:	ba0c0000 	blt	3005ec <startup-0x1fcffa14>
     5e8:	0100000a 	tsteq	r0, sl
     5ec:	031602c1 	tsteq	r6, #268435468	; 0x1000000c
     5f0:	0c000000 	stceq	0, cr0, [r0], {-0}
     5f4:	00000e54 	andeq	r0, r0, r4, asr lr
     5f8:	1602c201 	strne	ip, [r2], -r1, lsl #4
     5fc:	04000003 	streq	r0, [r0], #-3
     600:	4c415613 	mcrrmi	6, 1, r5, r1, cr3
     604:	02c30100 	sbceq	r0, r3, #0, 2
     608:	00000316 	andeq	r0, r0, r6, lsl r3
     60c:	0dd50c08 	ldcleq	12, cr0, [r5, #32]
     610:	c4010000 	strgt	r0, [r1], #-0
     614:	00031b02 	andeq	r1, r3, r2, lsl #22
     618:	06000c00 	streq	r0, [r0], -r0, lsl #24
     61c:	00000be3 	andeq	r0, r0, r3, ror #23
     620:	dd02c501 	cfstr32le	mvfx12, [r2, #-4]
     624:	0f000005 	svceq	0x00000005
     628:	0000030b 	andeq	r0, r0, fp, lsl #6
     62c:	00000637 	andeq	r0, r0, r7, lsr r6
     630:	0002ca10 	andeq	ip, r2, r0, lsl sl
     634:	14000100 	strne	r0, [r0], #-256	; 0xffffff00
     638:	00000f8a 	andeq	r0, r0, sl, lsl #31
     63c:	0606fa01 	streq	pc, [r6], -r1, lsl #20
     640:	15000003 	strne	r0, [r0, #-3]
     644:	00000837 	andeq	r0, r0, r7, lsr r8
     648:	030b3b07 	movweq	r3, #47879	; 0xbb07
     64c:	07160000 	ldreq	r0, [r6, -r0]
     650:	00027101 	andeq	r7, r2, r1, lsl #2
     654:	035d0400 	cmpeq	sp, #0, 8
     658:	00000669 	andeq	r0, r0, r9, ror #12
     65c:	0011f904 	andseq	pc, r1, r4, lsl #18
     660:	53170000 	tstpl	r7, #0
     664:	01005445 	tsteq	r0, r5, asr #8
     668:	09e50600 	stmibeq	r5!, {r9, sl}^
     66c:	5d040000 	stcpl	0, cr0, [r4, #-0]
     670:	00064e03 	andeq	r4, r6, r3, lsl #28
     674:	0aa60600 	beq	fe981e7c <_global_impure_ptr+0xde97cd60>
     678:	5d040000 	stcpl	0, cr0, [r4, #-0]
     67c:	00064e03 	andeq	r4, r6, r3, lsl #28
     680:	01071600 	tsteq	r7, r0, lsl #12
     684:	00000271 	andeq	r0, r0, r1, ror r2
     688:	9c035f04 	stcls	15, cr5, [r3], {4}
     68c:	04000006 	streq	r0, [r0], #-6
     690:	000009bb 			; <UNDEFINED> instruction: 0x000009bb
     694:	0f3f0400 	svceq	0x003f0400
     698:	00010000 	andeq	r0, r1, r0
     69c:	000c8d06 	andeq	r8, ip, r6, lsl #26
     6a0:	035f0400 	cmpeq	pc, #0, 8
     6a4:	00000681 	andeq	r0, r0, r1, lsl #13
     6a8:	71010716 	tstvc	r1, r6, lsl r7
     6ac:	04000002 	streq	r0, [r0], #-2
     6b0:	06c30362 	strbeq	r0, [r3], r2, ror #6
     6b4:	b3040000 	movwlt	r0, #16384	; 0x4000
     6b8:	00000008 	andeq	r0, r0, r8
     6bc:	000d1204 	andeq	r1, sp, r4, lsl #4
     6c0:	06000100 	streq	r0, [r0], -r0, lsl #2
     6c4:	00000c2e 	andeq	r0, r0, lr, lsr #24
     6c8:	a8036204 	stmdage	r3, {r2, r9, sp, lr}
     6cc:	12000006 	andne	r0, r0, #6
     6d0:	05c30428 	strbeq	r0, [r3, #1064]	; 0x428
     6d4:	0000075b 	andeq	r0, r0, fp, asr r7
     6d8:	000ffd0c 	andeq	pc, pc, ip, lsl #26
     6dc:	05c50400 	strbeq	r0, [r5, #1024]	; 0x400
     6e0:	00000316 	andeq	r0, r0, r6, lsl r3
     6e4:	0dce0c00 	stcleq	12, cr0, [lr]
     6e8:	c6040000 	strgt	r0, [r4], -r0
     6ec:	00031605 	andeq	r1, r3, r5, lsl #12
     6f0:	de0c0400 	cfcpysle	mvf0, mvf12
     6f4:	04000008 	streq	r0, [r0], #-8
     6f8:	031605c7 	tsteq	r6, #834666496	; 0x31c00000
     6fc:	0c080000 	stceq	0, cr0, [r8], {-0}
     700:	000009a5 	andeq	r0, r0, r5, lsr #19
     704:	1605c804 	strne	ip, [r5], -r4, lsl #16
     708:	0c000003 	stceq	0, cr0, [r0], {3}
     70c:	52444913 	subpl	r4, r4, #311296	; 0x4c000
     710:	05c90400 	strbeq	r0, [r9, #1024]	; 0x400
     714:	00000316 	andeq	r0, r0, r6, lsl r3
     718:	444f1310 	strbmi	r1, [pc], #-784	; 720 <startup-0x1ffff8e0>
     71c:	ca040052 	bgt	10086c <startup-0x1feff794>
     720:	00031605 	andeq	r1, r3, r5, lsl #12
     724:	fb0c1400 	blx	30572e <startup-0x1fcfa8d2>
     728:	04000009 	streq	r0, [r0], #-9
     72c:	02f605cb 	rscseq	r0, r6, #851443712	; 0x32c00000
     730:	0c180000 	ldceq	0, cr0, [r8], {-0}
     734:	000009d8 	ldrdeq	r0, [r0], -r8
     738:	f605cc04 			; <UNDEFINED> instruction: 0xf605cc04
     73c:	1a000002 	bne	74c <startup-0x1ffff8b4>
     740:	00089d0c 	andeq	r9, r8, ip, lsl #26
     744:	05cd0400 	strbeq	r0, [sp, #1024]	; 0x400
     748:	00000316 	andeq	r0, r0, r6, lsl r3
     74c:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
     750:	ce040052 	mcrgt	0, 0, r0, cr4, cr2, {2}
     754:	00076b05 	andeq	r6, r7, r5, lsl #22
     758:	0f002000 	svceq	0x00002000
     75c:	00000316 	andeq	r0, r0, r6, lsl r3
     760:	0000076b 	andeq	r0, r0, fp, ror #14
     764:	0002ca10 	andeq	ip, r2, r0, lsl sl
     768:	09000100 	stmdbeq	r0, {r8}
     76c:	0000075b 	andeq	r0, r0, fp, asr r7
     770:	000f6a06 	andeq	r6, pc, r6, lsl #20
     774:	05cf0400 	strbeq	r0, [pc, #1024]	; b7c <startup-0x1ffff484>
     778:	000006cf 	andeq	r0, r0, pc, asr #13
     77c:	64049812 	strvs	r9, [r4], #-2066	; 0xfffff7ee
     780:	00093f06 	andeq	r3, r9, r6, lsl #30
     784:	52431300 	subpl	r1, r3, #0, 6
     788:	06660400 	strbteq	r0, [r6], -r0, lsl #8
     78c:	00000316 	andeq	r0, r0, r6, lsl r3
     790:	08fa0c00 	ldmeq	sl!, {sl, fp}^
     794:	67040000 	strvs	r0, [r4, -r0]
     798:	00031606 	andeq	r1, r3, r6, lsl #12
     79c:	510c0400 	tstpl	ip, r0, lsl #8
     7a0:	04000010 	streq	r0, [r0], #-16
     7a4:	03160668 	tsteq	r6, #104, 12	; 0x6800000
     7a8:	13080000 	movwne	r0, #32768	; 0x8000
     7ac:	00524943 	subseq	r4, r2, r3, asr #18
     7b0:	16066904 	strne	r6, [r6], -r4, lsl #18
     7b4:	0c000003 	stceq	0, cr0, [r0], {3}
     7b8:	0004b60c 	andeq	fp, r4, ip, lsl #12
     7bc:	066a0400 	strbteq	r0, [sl], -r0, lsl #8
     7c0:	00000316 	andeq	r0, r0, r6, lsl r3
     7c4:	0eb40c10 	mrceq	12, 5, r0, cr4, cr0, {0}
     7c8:	6b040000 	blvs	1007d0 <startup-0x1feff830>
     7cc:	00031606 	andeq	r1, r3, r6, lsl #12
     7d0:	200c1400 	andcs	r1, ip, r0, lsl #8
     7d4:	0400000c 	streq	r0, [r0], #-12
     7d8:	0316066c 	tsteq	r6, #108, 12	; 0x6c00000
     7dc:	0c180000 	ldceq	0, cr0, [r8], {-0}
     7e0:	000003d5 	ldrdeq	r0, [r0], -r5
     7e4:	0b066d04 	bleq	19bbfc <startup-0x1fe64404>
     7e8:	1c000003 	stcne	0, cr0, [r0], {3}
     7ec:	000c630c 	andeq	r6, ip, ip, lsl #6
     7f0:	066e0400 	strbteq	r0, [lr], -r0, lsl #8
     7f4:	00000316 	andeq	r0, r0, r6, lsl r3
     7f8:	09cf0c20 	stmibeq	pc, {r5, sl, fp}^	; <UNPREDICTABLE>
     7fc:	6f040000 	svcvs	0x00040000
     800:	00031606 	andeq	r1, r3, r6, lsl #12
     804:	df0c2400 	svcle	0x000c2400
     808:	04000003 	streq	r0, [r0], #-3
     80c:	06270670 			; <UNDEFINED> instruction: 0x06270670
     810:	0c280000 	stceq	0, cr0, [r8], #-0
     814:	00000e4c 	andeq	r0, r0, ip, asr #28
     818:	16067104 	strne	r7, [r6], -r4, lsl #2
     81c:	30000003 	andcc	r0, r0, r3
     820:	0005090c 	andeq	r0, r5, ip, lsl #18
     824:	06720400 	ldrbteq	r0, [r2], -r0, lsl #8
     828:	00000316 	andeq	r0, r0, r6, lsl r3
     82c:	11600c34 	cmnne	r0, r4, lsr ip
     830:	73040000 	movwvc	r0, #16384	; 0x4000
     834:	00031606 	andeq	r1, r3, r6, lsl #12
     838:	630c3800 	movwvs	r3, #51200	; 0xc800
     83c:	04000004 	streq	r0, [r0], #-4
     840:	030b0674 	movweq	r0, #46708	; 0xb674
     844:	0c3c0000 	ldceq	0, cr0, [ip], #-0
     848:	00000c7b 	andeq	r0, r0, fp, ror ip
     84c:	16067504 	strne	r7, [r6], -r4, lsl #10
     850:	40000003 	andmi	r0, r0, r3
     854:	0002f80c 	andeq	pc, r2, ip, lsl #16
     858:	06760400 	ldrbteq	r0, [r6], -r0, lsl #8
     85c:	00000316 	andeq	r0, r0, r6, lsl r3
     860:	046d0c44 	strbteq	r0, [sp], #-3140	; 0xfffff3bc
     864:	77040000 	strvc	r0, [r4, -r0]
     868:	00062706 	andeq	r2, r6, r6, lsl #14
     86c:	140c4800 	strne	r4, [ip], #-2048	; 0xfffff800
     870:	04000003 	streq	r0, [r0], #-3
     874:	03160678 	tsteq	r6, #120, 12	; 0x7800000
     878:	0c500000 	mraeq	r0, r0, acc0
     87c:	000001eb 	andeq	r0, r0, fp, ror #3
     880:	16067904 	strne	r7, [r6], -r4, lsl #18
     884:	54000003 	strpl	r0, [r0], #-3
     888:	000d520c 	andeq	r5, sp, ip, lsl #4
     88c:	067a0400 	ldrbteq	r0, [sl], -r0, lsl #8
     890:	00000316 	andeq	r0, r0, r6, lsl r3
     894:	04090c58 	streq	r0, [r9], #-3160	; 0xfffff3a8
     898:	7b040000 	blvc	1008a0 <startup-0x1feff760>
     89c:	00030b06 	andeq	r0, r3, r6, lsl #22
     8a0:	540c5c00 	strpl	r5, [ip], #-3072	; 0xfffff400
     8a4:	0400000b 	streq	r0, [r0], #-11
     8a8:	0316067c 	tsteq	r6, #124, 12	; 0x7c00000
     8ac:	0c600000 	stcleq	0, cr0, [r0], #-0
     8b0:	00000a5b 	andeq	r0, r0, fp, asr sl
     8b4:	16067d04 	strne	r7, [r6], -r4, lsl #26
     8b8:	64000003 	strvs	r0, [r0], #-3
     8bc:	0004130c 	andeq	r1, r4, ip, lsl #6
     8c0:	067e0400 	ldrbteq	r0, [lr], -r0, lsl #8
     8c4:	00000627 	andeq	r0, r0, r7, lsr #12
     8c8:	06a10c68 	strteq	r0, [r1], r8, ror #24
     8cc:	7f040000 	svcvc	0x00040000
     8d0:	00031606 	andeq	r1, r3, r6, lsl #12
     8d4:	43137000 	tstmi	r3, #0
     8d8:	04005253 	streq	r5, [r0], #-595	; 0xfffffdad
     8dc:	03160680 	tsteq	r6, #128, 12	; 0x8000000
     8e0:	0c740000 	ldcleq	0, cr0, [r4], #-0
     8e4:	0000041d 	andeq	r0, r0, sp, lsl r4
     8e8:	27068104 	strcs	r8, [r6, -r4, lsl #2]
     8ec:	78000006 	stmdavc	r0, {r1, r2}
     8f0:	0009ab0c 	andeq	sl, r9, ip, lsl #22
     8f4:	06820400 	streq	r0, [r2], r0, lsl #8
     8f8:	00000316 	andeq	r0, r0, r6, lsl r3
     8fc:	004c0c80 	subeq	r0, ip, r0, lsl #25
     900:	83040000 	movwhi	r0, #16384	; 0x4000
     904:	00031606 	andeq	r1, r3, r6, lsl #12
     908:	4b0c8400 	blmi	321910 <startup-0x1fcde6f0>
     90c:	04000010 	streq	r0, [r0], #-16
     910:	03160684 	tsteq	r6, #132, 12	; 0x8400000
     914:	0c880000 	stceq	0, cr0, [r8], {0}
     918:	00000355 	andeq	r0, r0, r5, asr r3
     91c:	16068504 	strne	r8, [r6], -r4, lsl #10
     920:	8c000003 	stchi	0, cr0, [r0], {3}
     924:	000b8f0c 	andeq	r8, fp, ip, lsl #30
     928:	06860400 	streq	r0, [r6], r0, lsl #8
     92c:	00000316 	andeq	r0, r0, r6, lsl r3
     930:	0df70c90 	ldcleq	12, cr0, [r7, #576]!	; 0x240
     934:	87040000 	strhi	r0, [r4, -r0]
     938:	00031606 	andeq	r1, r3, r6, lsl #12
     93c:	06009400 	streq	r9, [r0], -r0, lsl #8
     940:	00000edd 	ldrdeq	r0, [r0], -sp
     944:	7c068904 			; <UNDEFINED> instruction: 0x7c068904
     948:	18000007 	stmdane	r0, {r0, r1, r2}
     94c:	84300810 	ldrthi	r0, [r0], #-2064	; 0xfffff7f0
     950:	19000009 	stmdbne	r0, {r0, r3}
     954:	000010b3 	strheq	r1, [r0], -r3
     958:	030b3208 	movweq	r3, #45576	; 0xb208
     95c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     960:	0000008c 	andeq	r0, r0, ip, lsl #1
     964:	030b3308 	movweq	r3, #45832	; 0xb308
     968:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     96c:	0000059b 	muleq	r0, fp, r5
     970:	030b3408 	movweq	r3, #46088	; 0xb408
     974:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     978:	00000511 	andeq	r0, r0, r1, lsl r5
     97c:	030b3508 	movweq	r3, #46344	; 0xb508
     980:	000c0000 	andeq	r0, ip, r0
     984:	000ec607 	andeq	ip, lr, r7, lsl #12
     988:	4b360800 	blmi	d82990 <startup-0x1f27d670>
     98c:	0f000009 	svceq	0x00000009
     990:	000002e6 	andeq	r0, r0, r6, ror #5
     994:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
     998:	0002ca10 	andeq	ip, r2, r0, lsl sl
     99c:	0a000f00 	beq	45a4 <startup-0x1fffba5c>
     9a0:	0000098f 	andeq	r0, r0, pc, lsl #19
     9a4:	00099f09 	andeq	r9, r9, r9, lsl #30
     9a8:	09361a00 	ldmdbeq	r6!, {r9, fp, ip}
     9ac:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
     9b0:	000009a4 	andeq	r0, r0, r4, lsr #19
     9b4:	4bdc0305 	blmi	ff7015d0 <_global_impure_ptr+0xdf6fc4b4>
     9b8:	071b2000 	ldreq	r2, [fp, -r0]
     9bc:	00027101 	andeq	r7, r2, r1, lsl #2
     9c0:	e0420900 	sub	r0, r2, r0, lsl #18
     9c4:	04000009 	streq	r0, [r0], #-9
     9c8:	0000086f 	andeq	r0, r0, pc, ror #16
     9cc:	07060400 	streq	r0, [r6, -r0, lsl #8]
     9d0:	04010000 	streq	r0, [r1], #-0
     9d4:	00000271 	andeq	r0, r0, r1, ror r2
     9d8:	02ad0402 	adceq	r0, sp, #33554432	; 0x2000000
     9dc:	00030000 	andeq	r0, r3, r0
     9e0:	000d5c07 	andeq	r5, sp, r7, lsl #24
     9e4:	ba470900 	blt	11c2dec <startup-0x1ee3d214>
     9e8:	1b000009 	blne	a14 <startup-0x1ffff5ec>
     9ec:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
     9f0:	4f090000 	svcmi	0x00090000
     9f4:	00000a05 	andeq	r0, r0, r5, lsl #20
     9f8:	00042c04 	andeq	r2, r4, r4, lsl #24
     9fc:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
     a00:	01000003 	tsteq	r0, r3
     a04:	010a0700 	tsteq	sl, r0, lsl #14
     a08:	52090000 	andpl	r0, r9, #0
     a0c:	000009eb 	andeq	r0, r0, fp, ror #19
     a10:	7101071b 	tstvc	r1, fp, lsl r7
     a14:	09000002 	stmdbeq	r0, {r1}
     a18:	000a365a 	andeq	r3, sl, sl, asr r6
     a1c:	05210400 	streq	r0, [r1, #-1024]!	; 0xfffffc00
     a20:	04000000 	streq	r0, [r0], #-0
     a24:	00000947 	andeq	r0, r0, r7, asr #18
     a28:	118b0401 	orrne	r0, fp, r1, lsl #8
     a2c:	04020000 	streq	r0, [r2], #-0
     a30:	00000a01 	andeq	r0, r0, r1, lsl #20
     a34:	59070003 	stmdbpl	r7, {r0, r1}
     a38:	0900000e 	stmdbeq	r0, {r1, r2, r3}
     a3c:	000a105f 	andeq	r1, sl, pc, asr r0
     a40:	01071b00 	tsteq	r7, r0, lsl #22
     a44:	00000271 	andeq	r0, r0, r1, ror r2
     a48:	0a616e09 	beq	185c274 <startup-0x1e7a3d8c>
     a4c:	9b040000 	blls	100a54 <startup-0x1feff5ac>
     a50:	00000000 	andeq	r0, r0, r0
     a54:	00103104 	andseq	r3, r0, r4, lsl #2
     a58:	f5040100 			; <UNDEFINED> instruction: 0xf5040100
     a5c:	02000001 	andeq	r0, r0, #1
     a60:	04a00700 	strteq	r0, [r0], #1792	; 0x700
     a64:	72090000 	andvc	r0, r9, #0
     a68:	00000a41 	andeq	r0, r0, r1, asr #20
     a6c:	84090818 	strhi	r0, [r9], #-2072	; 0xfffff7e8
     a70:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     a74:	000e7d19 	andeq	r7, lr, r9, lsl sp
     a78:	0b860900 	bleq	fe182e80 <_global_impure_ptr+0xde17dd64>
     a7c:	00000003 	andeq	r0, r0, r3
     a80:	000d1a19 	andeq	r1, sp, r9, lsl sl
     a84:	e0890900 	add	r0, r9, r0, lsl #18
     a88:	04000009 	streq	r0, [r0], #-9
     a8c:	000ad619 	andeq	sp, sl, r9, lsl r6
     a90:	368c0900 	strcc	r0, [ip], r0, lsl #18
     a94:	0500000a 	streq	r0, [r0, #-10]
     a98:	00092019 	andeq	r2, r9, r9, lsl r0
     a9c:	058f0900 	streq	r0, [pc, #2304]	; 13a4 <startup-0x1fffec5c>
     aa0:	0600000a 	streq	r0, [r0], -sl
     aa4:	000eaa19 	andeq	sl, lr, r9, lsl sl
     aa8:	61920900 	orrsvs	r0, r2, r0, lsl #18
     aac:	0700000a 	streq	r0, [r0, -sl]
     ab0:	037c0700 	cmneq	ip, #0, 14
     ab4:	94090000 	strls	r0, [r9], #-0
     ab8:	00000a6c 	andeq	r0, r0, ip, ror #20
     abc:	000c291c 	andeq	r2, ip, ip, lsl r9
     ac0:	010a1c00 	tsteq	sl, r0, lsl #24
     ac4:	00000b28 	andeq	r0, r0, r8, lsr #22
     ac8:	0064691d 	rsbeq	r6, r4, sp, lsl r9
     acc:	0b28030a 	bleq	a016fc <startup-0x1f5fe904>
     ad0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     ad4:	000002ca 	andeq	r0, r0, sl, asr #5
     ad8:	02c3040a 	sbceq	r0, r3, #167772160	; 0xa000000
     adc:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     ae0:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
     ae4:	0b28050a 	bleq	a01f14 <startup-0x1f5fe0ec>
     ae8:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     aec:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     af0:	0b28060a 	bleq	a02320 <startup-0x1f5fdce0>
     af4:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
     af8:	00000ef9 	strdeq	r0, [r0], -r9
     afc:	02c3070a 	sbceq	r0, r3, #2621440	; 0x280000
     b00:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     b04:	00000e30 	andeq	r0, r0, r0, lsr lr
     b08:	02c3080a 	sbceq	r0, r3, #655360	; 0xa0000
     b0c:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
     b10:	00000586 	andeq	r0, r0, r6, lsl #11
     b14:	02c3090a 	sbceq	r0, r3, #163840	; 0x28000
     b18:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     b1c:	00000fdd 	ldrdeq	r0, [r0], -sp
     b20:	02c30a0a 	sbceq	r0, r3, #40960	; 0xa000
     b24:	00180000 	andseq	r0, r8, r0
     b28:	f2080105 	vrhadd.s8	d0, d8, d5
     b2c:	07000003 	streq	r0, [r0, -r3]
     b30:	00000c29 	andeq	r0, r0, r9, lsr #24
     b34:	0abc0b0a 	beq	fef03764 <_global_impure_ptr+0xdeefe648>
     b38:	c61e0000 	ldrgt	r0, [lr], -r0
     b3c:	03000008 	movweq	r0, #8
     b40:	0003161d 	andeq	r1, r3, sp, lsl r6
     b44:	00030500 	andeq	r0, r3, r0, lsl #10
     b48:	1f20004b 	svcne	0x0020004b
     b4c:	00000fc4 	andeq	r0, r0, r4, asr #31
     b50:	0e544603 	cdpeq	6, 5, cr4, cr4, cr3, {0}
     b54:	02802000 	addeq	r2, r0, #0
     b58:	9c010000 	stcls	0, cr0, [r1], {-0}
     b5c:	00000bd7 	ldrdeq	r0, [r0], -r7
     b60:	0010db1a 	andseq	sp, r0, sl, lsl fp
     b64:	2f4c0300 	svccs	0x004c0300
     b68:	0200000b 	andeq	r0, r0, #11
     b6c:	e11a4491 			; <UNDEFINED> instruction: 0xe11a4491
     b70:	03000010 	movweq	r0, #16
     b74:	000b2f4d 	andeq	r2, fp, sp, asr #30
     b78:	a8910300 	ldmge	r1, {r8, r9}
     b7c:	10e71a7f 	rscne	r1, r7, pc, ror sl
     b80:	4e030000 	cdpmi	0, 0, cr0, cr3, cr0, {0}
     b84:	00000b2f 	andeq	r0, r0, pc, lsr #22
     b88:	7f8c9103 	svcvc	0x008c9103
     b8c:	0004911a 	andeq	r9, r4, sl, lsl r1
     b90:	2f4f0300 	svccs	0x004f0300
     b94:	0300000b 	movweq	r0, #11
     b98:	1a7ef091 	bne	1fbcde4 <startup-0x1e04321c>
     b9c:	00000b70 	andeq	r0, r0, r0, ror fp
     ba0:	0bd75103 	bleq	ff5d4fb4 <_global_impure_ptr+0xdf5cfe98>
     ba4:	91030000 	mrsls	r0, (UNDEF: 3)
     ba8:	f4207e80 			; <UNDEFINED> instruction: 0xf4207e80
     bac:	c220000e 	eorgt	r0, r0, #14
     bb0:	21000001 	tstcs	r0, r1
     bb4:	55030069 	strpl	r0, [r3, #-105]	; 0xffffff97
     bb8:	000002c3 	andeq	r0, r0, r3, asr #5
     bbc:	20649102 	rsbcs	r9, r4, r2, lsl #2
     bc0:	20000f8c 	andcs	r0, r0, ip, lsl #31
     bc4:	00000112 	andeq	r0, r0, r2, lsl r1
     bc8:	03006921 	movweq	r6, #2337	; 0x921
     bcc:	0002c364 	andeq	ip, r2, r4, ror #6
     bd0:	60910200 	addsvs	r0, r1, r0, lsl #4
     bd4:	0f000000 	svceq	0x00000000
     bd8:	00000b2f 	andeq	r0, r0, pc, lsr #22
     bdc:	00000be7 	andeq	r0, r0, r7, ror #23
     be0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     be4:	1f000300 	svcne	0x00000300
     be8:	00000ff4 	strdeq	r0, [r0], -r4
     bec:	0e283903 	vmuleq.f16	s6, s16, s6	; <UNPREDICTABLE>
     bf0:	002c2000 	eoreq	r2, ip, r0
     bf4:	9c010000 	stcls	0, cr0, [r1], {-0}
     bf8:	00000c0b 	andeq	r0, r0, fp, lsl #24
     bfc:	0004d61a 	andeq	sp, r4, sl, lsl r6
     c00:	0b3d0300 	bleq	f41808 <startup-0x1f0be7f8>
     c04:	02000003 	andeq	r0, r0, #3
     c08:	22007491 	andcs	r7, r0, #-1862270976	; 0x91000000
     c0c:	0000023a 	andeq	r0, r0, sl, lsr r2
     c10:	0e103403 	cfmulseq	mvf3, mvf0, mvf3
     c14:	00182000 	andseq	r2, r8, r0
     c18:	9c010000 	stcls	0, cr0, [r1], {-0}
     c1c:	00022423 	andeq	r2, r2, r3, lsr #8
     c20:	a8200300 	stmdage	r0!, {r8, r9}
     c24:	6820000d 	stmdavs	r0!, {r0, r2, r3}
     c28:	01000000 	mrseq	r0, (UNDEF: 0)
     c2c:	000c409c 	muleq	ip, ip, r0
     c30:	1c1e1a00 			; <UNDEFINED> instruction: 0x1c1e1a00
     c34:	23030000 	movwcs	r0, #12288	; 0x3000
     c38:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     c3c:	00709102 	rsbseq	r9, r0, r2, lsl #2
     c40:	000c4c22 	andeq	r4, ip, r2, lsr #24
     c44:	00130300 	andseq	r0, r3, r0, lsl #6
     c48:	0c200000 	stceq	0, cr0, [r0], #-0
     c4c:	01000000 	mrseq	r0, (UNDEF: 0)
     c50:	0aee249c 	beq	ffb89ec8 <_global_impure_ptr+0xdfb84dac>
     c54:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
     c58:	000d880c 	andeq	r8, sp, ip, lsl #16
     c5c:	00002020 	andeq	r2, r0, r0, lsr #32
     c60:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
     c64:	2500000c 	strcs	r0, [r0, #-12]
     c68:	00000f0b 	andeq	r0, r0, fp, lsl #30
     c6c:	d10c5e02 	tstle	ip, r2, lsl #28
     c70:	02000002 	andeq	r0, r0, #2
     c74:	26007791 			; <UNDEFINED> instruction: 0x26007791
     c78:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
     c7c:	750c3c02 	strvc	r3, [ip, #-3074]	; 0xfffff3fe
     c80:	44000006 	strmi	r0, [r0], #-6
     c84:	4420000d 	strtmi	r0, [r0], #-13
     c88:	01000000 	mrseq	r0, (UNDEF: 0)
     c8c:	000cb09c 	muleq	ip, ip, r0
     c90:	0f0b2500 	svceq	0x000b2500
     c94:	3c020000 	stccc	0, cr0, [r2], {-0}
     c98:	0002d10c 	andeq	sp, r2, ip, lsl #2
     c9c:	6f910200 	svcvs	0x00910200
     ca0:	000f3527 	andeq	r3, pc, r7, lsr #10
     ca4:	0c3e0200 	lfmeq	f0, 4, [lr], #-0
     ca8:	00000675 	andeq	r0, r0, r5, ror r6
     cac:	00779102 	rsbseq	r9, r7, r2, lsl #2
     cb0:	00068528 	andeq	r8, r6, r8, lsr #10
     cb4:	0c280200 	sfmeq	f0, 4, [r8], #-0
     cb8:	20000d28 	andcs	r0, r0, r8, lsr #26
     cbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     cc0:	de269c01 	cdple	12, 2, cr9, cr6, cr1, {0}
     cc4:	02000009 	andeq	r0, r0, #9
     cc8:	06690bfb 			; <UNDEFINED> instruction: 0x06690bfb
     ccc:	0ca40000 	stceq	0, cr0, [r4]
     cd0:	00842000 	addeq	r2, r4, r0
     cd4:	9c010000 	stcls	0, cr0, [r1], {-0}
     cd8:	00000d19 	andeq	r0, r0, r9, lsl sp
     cdc:	000a9625 	andeq	r9, sl, r5, lsr #12
     ce0:	0bfb0200 	bleq	ffec14e8 <_global_impure_ptr+0xdfebc3cc>
     ce4:	000002d1 	ldrdeq	r0, [r0], -r1
     ce8:	29679102 	stmdbcs	r7!, {r1, r8, ip, pc}^
     cec:	00706d74 	rsbseq	r6, r0, r4, ror sp
     cf0:	0b0bfd02 	bleq	300100 <startup-0x1fcfff00>
     cf4:	02000003 	andeq	r0, r0, #3
     cf8:	36276c91 			; <UNDEFINED> instruction: 0x36276c91
     cfc:	0200000b 	andeq	r0, r0, #11
     d00:	030b0bfe 	movweq	r0, #48126	; 0xbbfe
     d04:	91020000 	mrsls	r0, (UNDEF: 2)
     d08:	0f352774 	svceq	0x00352774
     d0c:	ff020000 			; <UNDEFINED> instruction: 0xff020000
     d10:	0006690b 	andeq	r6, r6, fp, lsl #18
     d14:	73910200 	orrsvc	r0, r1, #0, 4
     d18:	0a112400 	beq	449d20 <startup-0x1fbb62e0>
     d1c:	d6020000 	strle	r0, [r2], -r0
     d20:	000c540b 	andeq	r5, ip, fp, lsl #8
     d24:	00005020 	andeq	r5, r0, r0, lsr #32
     d28:	4e9c0100 	fmlmie	f0, f4, f0
     d2c:	2500000d 	strcs	r0, [r0, #-13]
     d30:	00000f0b 	andeq	r0, r0, fp, lsl #30
     d34:	d10bd602 	tstle	fp, r2, lsl #12
     d38:	02000002 	andeq	r0, r0, #2
     d3c:	cd257791 	stcgt	7, cr7, [r5, #-580]!	; 0xfffffdbc
     d40:	0200000a 	andeq	r0, r0, #10
     d44:	069c0bd6 			; <UNDEFINED> instruction: 0x069c0bd6
     d48:	91020000 	mrsls	r0, (UNDEF: 2)
     d4c:	3b240076 	blcc	900f2c <startup-0x1f6ff0d4>
     d50:	0200000d 	andeq	r0, r0, #13
     d54:	0c180a9e 			; <UNDEFINED> instruction: 0x0c180a9e
     d58:	003c2000 	eorseq	r2, ip, r0
     d5c:	9c010000 	stcls	0, cr0, [r1], {-0}
     d60:	00000d74 	andeq	r0, r0, r4, ror sp
     d64:	00013325 	andeq	r3, r1, r5, lsr #6
     d68:	0a9e0200 	beq	fe781570 <_global_impure_ptr+0xde77c454>
     d6c:	000002d1 	ldrdeq	r0, [r0], -r1
     d70:	00779102 	rsbseq	r9, r7, r2, lsl #2
     d74:	0000d024 	andeq	sp, r0, r4, lsr #32
     d78:	0a860200 	beq	fe181580 <_global_impure_ptr+0xde17c464>
     d7c:	20000bd8 	ldrdcs	r0, [r0], -r8
     d80:	00000040 	andeq	r0, r0, r0, asr #32
     d84:	0da99c01 	stceq	12, cr9, [r9, #4]!
     d88:	40250000 	eormi	r0, r5, r0
     d8c:	0200000b 	andeq	r0, r0, #11
     d90:	030b0a86 	movweq	r0, #47750	; 0xba86
     d94:	91020000 	mrsls	r0, (UNDEF: 2)
     d98:	0acd2574 	beq	ff34a370 <_global_impure_ptr+0xdf345254>
     d9c:	86020000 	strhi	r0, [r2], -r0
     da0:	00069c0a 	andeq	r9, r6, sl, lsl #24
     da4:	73910200 	orrsvc	r0, r1, #0, 4
     da8:	0f4d2400 	svceq	0x004d2400
     dac:	52020000 	andpl	r0, r2, #0
     db0:	000b980a 	andeq	r9, fp, sl, lsl #16
     db4:	00004020 	andeq	r4, r0, r0, lsr #32
     db8:	de9c0100 	fmllee	f0, f4, f0
     dbc:	2500000d 	strcs	r0, [r0, #-13]
     dc0:	00000a65 	andeq	r0, r0, r5, ror #20
     dc4:	0b0a5202 	bleq	2955d4 <startup-0x1fd6aa2c>
     dc8:	02000003 	andeq	r0, r0, #3
     dcc:	cd257491 	cfstrsgt	mvf7, [r5, #-580]!	; 0xfffffdbc
     dd0:	0200000a 	andeq	r0, r0, #10
     dd4:	069c0a52 			; <UNDEFINED> instruction: 0x069c0a52
     dd8:	91020000 	mrsls	r0, (UNDEF: 2)
     ddc:	e1240073 	bkpt	0x4003
     de0:	02000004 	andeq	r0, r0, #4
     de4:	0b580a19 	bleq	1603650 <startup-0x1e9fc9b0>
     de8:	00402000 	subeq	r2, r0, r0
     dec:	9c010000 	stcls	0, cr0, [r1], {-0}
     df0:	00000e13 	andeq	r0, r0, r3, lsl lr
     df4:	00033a25 	andeq	r3, r3, r5, lsr #20
     df8:	0a190200 	beq	641600 <startup-0x1f9bea00>
     dfc:	0000030b 	andeq	r0, r0, fp, lsl #6
     e00:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
     e04:	00000acd 	andeq	r0, r0, sp, asr #21
     e08:	9c0a1902 			; <UNDEFINED> instruction: 0x9c0a1902
     e0c:	02000006 	andeq	r0, r0, #6
     e10:	24007391 	strcs	r7, [r0], #-913	; 0xfffffc6f
     e14:	000000ed 	andeq	r0, r0, sp, ror #1
     e18:	1809fb02 	stmdane	r9, {r1, r8, r9, fp, ip, sp, lr, pc}
     e1c:	4020000b 	eormi	r0, r0, fp
     e20:	01000000 	mrseq	r0, (UNDEF: 0)
     e24:	000e489c 	muleq	lr, ip, r8
     e28:	10222500 	eorne	r2, r2, r0, lsl #10
     e2c:	fb020000 	blx	80e36 <startup-0x1ff7f1ca>
     e30:	00030b09 	andeq	r0, r3, r9, lsl #22
     e34:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     e38:	000acd25 	andeq	ip, sl, r5, lsr #26
     e3c:	09fb0200 	ldmibeq	fp!, {r9}^
     e40:	0000069c 	muleq	r0, ip, r6
     e44:	00739102 	rsbseq	r9, r3, r2, lsl #2
     e48:	000f9f24 	andeq	r9, pc, r4, lsr #30
     e4c:	09db0200 	ldmibeq	fp, {r9}^
     e50:	20000ad8 	ldrdcs	r0, [r0], -r8
     e54:	00000040 	andeq	r0, r0, r0, asr #32
     e58:	0e7d9c01 	cdpeq	12, 7, cr9, cr13, cr1, {0}
     e5c:	05250000 	streq	r0, [r5, #-0]!
     e60:	0200000e 	andeq	r0, r0, #14
     e64:	030b09db 	movweq	r0, #47579	; 0xb9db
     e68:	91020000 	mrsls	r0, (UNDEF: 2)
     e6c:	0acd2574 	beq	ff34a444 <_global_impure_ptr+0xdf345328>
     e70:	db020000 	blle	80e78 <startup-0x1ff7f188>
     e74:	00069c09 	andeq	r9, r6, r9, lsl #24
     e78:	73910200 	orrsvc	r0, r1, #0, 4
     e7c:	04bf2400 	ldrteq	r2, [pc], #1024	; e84 <startup-0x1ffff17c>
     e80:	aa020000 	bge	80e88 <startup-0x1ff7f178>
     e84:	000a9809 	andeq	r9, sl, r9, lsl #16
     e88:	00004020 	andeq	r4, r0, r0, lsr #32
     e8c:	b29c0100 	addslt	r0, ip, #0, 2
     e90:	2500000e 	strcs	r0, [r0, #-14]
     e94:	00000b40 	andeq	r0, r0, r0, asr #22
     e98:	0b09aa02 	bleq	26b6a8 <startup-0x1fd94958>
     e9c:	02000003 	andeq	r0, r0, #3
     ea0:	cd257491 	cfstrsgt	mvf7, [r5, #-580]!	; 0xfffffdbc
     ea4:	0200000a 	andeq	r0, r0, #10
     ea8:	069c09aa 	ldreq	r0, [ip], sl, lsr #19
     eac:	91020000 	mrsls	r0, (UNDEF: 2)
     eb0:	1c240073 	stcne	0, cr0, [r4], #-460	; 0xfffffe34
     eb4:	02000001 	andeq	r0, r0, #1
     eb8:	0a58097b 	beq	16034ac <startup-0x1e9fcb54>
     ebc:	00402000 	subeq	r2, r0, r0
     ec0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ec4:	00000ee7 	andeq	r0, r0, r7, ror #29
     ec8:	000a6525 	andeq	r6, sl, r5, lsr #10
     ecc:	097b0200 	ldmdbeq	fp!, {r9}^
     ed0:	0000030b 	andeq	r0, r0, fp, lsl #6
     ed4:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
     ed8:	00000acd 	andeq	r0, r0, sp, asr #21
     edc:	9c097b02 			; <UNDEFINED> instruction: 0x9c097b02
     ee0:	02000006 	andeq	r0, r0, #6
     ee4:	24007391 	strcs	r7, [r0], #-913	; 0xfffffc6f
     ee8:	0000027e 	andeq	r0, r0, lr, ror r2
     eec:	18094502 	stmdane	r9, {r1, r8, sl, lr}
     ef0:	4020000a 	eormi	r0, r0, sl
     ef4:	01000000 	mrseq	r0, (UNDEF: 0)
     ef8:	000f1c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
     efc:	033a2500 	teqeq	sl, #0, 10
     f00:	45020000 	strmi	r0, [r2, #-0]
     f04:	00030b09 	andeq	r0, r3, r9, lsl #22
     f08:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f0c:	000acd25 	andeq	ip, sl, r5, lsr #26
     f10:	09450200 	stmdbeq	r5, {r9}^
     f14:	0000069c 	muleq	r0, ip, r6
     f18:	00739102 	rsbseq	r9, r3, r2, lsl #2
     f1c:	00113b24 	andseq	r3, r1, r4, lsr #22
     f20:	092a0200 	stmdbeq	sl!, {r9}
     f24:	200009d8 	ldrdcs	r0, [r0], -r8
     f28:	00000040 	andeq	r0, r0, r0, asr #32
     f2c:	0f519c01 	svceq	0x00519c01
     f30:	22250000 	eorcs	r0, r5, #0
     f34:	02000010 	andeq	r0, r0, #16
     f38:	030b092a 	movweq	r0, #47402	; 0xb92a
     f3c:	91020000 	mrsls	r0, (UNDEF: 2)
     f40:	0acd2574 	beq	ff34a518 <_global_impure_ptr+0xdf3453fc>
     f44:	2a020000 	bcs	80f4c <startup-0x1ff7f0b4>
     f48:	00069c09 	andeq	r9, r6, r9, lsl #24
     f4c:	73910200 	orrsvc	r0, r1, #0, 4
     f50:	0e862400 	cdpeq	4, 8, cr2, cr6, cr0, {0}
     f54:	0d020000 	stceq	0, cr0, [r2, #-0]
     f58:	00099809 	andeq	r9, r9, r9, lsl #16
     f5c:	00004020 	andeq	r4, r0, r0, lsr #32
     f60:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
     f64:	2500000f 	strcs	r0, [r0, #-15]
     f68:	00000e05 	andeq	r0, r0, r5, lsl #28
     f6c:	0b090d02 	bleq	24437c <startup-0x1fdbbc84>
     f70:	02000003 	andeq	r0, r0, #3
     f74:	cd257491 	cfstrsgt	mvf7, [r5, #-580]!	; 0xfffffdbc
     f78:	0200000a 	andeq	r0, r0, #10
     f7c:	069c090d 	ldreq	r0, [ip], sp, lsl #18
     f80:	91020000 	mrsls	r0, (UNDEF: 2)
     f84:	d5240073 	strle	r0, [r4, #-115]!	; 0xffffff8d
     f88:	02000007 	andeq	r0, r0, #7
     f8c:	095808e3 	ldmdbeq	r8, {r0, r1, r5, r6, r7, fp}^
     f90:	00402000 	subeq	r2, r0, r0
     f94:	9c010000 	stcls	0, cr0, [r1], {-0}
     f98:	00000fbb 			; <UNDEFINED> instruction: 0x00000fbb
     f9c:	000b4025 	andeq	r4, fp, r5, lsr #32
     fa0:	08e30200 	stmiaeq	r3!, {r9}^
     fa4:	0000030b 	andeq	r0, r0, fp, lsl #6
     fa8:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
     fac:	00000acd 	andeq	r0, r0, sp, asr #21
     fb0:	9c08e302 	stcls	3, cr14, [r8], {2}
     fb4:	02000006 	andeq	r0, r0, #6
     fb8:	24007391 	strcs	r7, [r0], #-913	; 0xfffffc6f
     fbc:	000003be 			; <UNDEFINED> instruction: 0x000003be
     fc0:	1808af02 	stmdane	r8, {r1, r8, r9, sl, fp, sp, pc}
     fc4:	40200009 	eormi	r0, r0, r9
     fc8:	01000000 	mrseq	r0, (UNDEF: 0)
     fcc:	000ff09c 	muleq	pc, ip, r0	; <UNPREDICTABLE>
     fd0:	0a652500 	beq	194a3d8 <startup-0x1e6b5c28>
     fd4:	af020000 	svcge	0x00020000
     fd8:	00030b08 	andeq	r0, r3, r8, lsl #22
     fdc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     fe0:	000acd25 	andeq	ip, sl, r5, lsr #26
     fe4:	08af0200 	stmiaeq	pc!, {r9}	; <UNPREDICTABLE>
     fe8:	0000069c 	muleq	r0, ip, r6
     fec:	00739102 	rsbseq	r9, r3, r2, lsl #2
     ff0:	000bcc24 	andeq	ip, fp, r4, lsr #24
     ff4:	08760200 	ldmdaeq	r6!, {r9}^
     ff8:	200008d8 	ldrdcs	r0, [r0], -r8
     ffc:	00000040 	andeq	r0, r0, r0, asr #32
    1000:	10259c01 	eorne	r9, r5, r1, lsl #24
    1004:	3a250000 	bcc	94100c <startup-0x1f6beff4>
    1008:	02000003 	andeq	r0, r0, #3
    100c:	030b0876 	movweq	r0, #47222	; 0xb876
    1010:	91020000 	mrsls	r0, (UNDEF: 2)
    1014:	0acd2574 	beq	ff34a5ec <_global_impure_ptr+0xdf3454d0>
    1018:	76020000 	strvc	r0, [r2], -r0
    101c:	00069c08 	andeq	r9, r6, r8, lsl #24
    1020:	73910200 	orrsvc	r0, r1, #0, 4
    1024:	01572400 	cmpeq	r7, r0, lsl #8
    1028:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    102c:	00089808 	andeq	r9, r8, r8, lsl #16
    1030:	00004020 	andeq	r4, r0, r0, lsr #32
    1034:	5a9c0100 	bpl	fe70143c <_global_impure_ptr+0xde6fc320>
    1038:	25000010 	strcs	r0, [r0, #-16]
    103c:	00001022 	andeq	r1, r0, r2, lsr #32
    1040:	0b085802 	bleq	217050 <startup-0x1fde8fb0>
    1044:	02000003 	andeq	r0, r0, #3
    1048:	cd257491 	cfstrsgt	mvf7, [r5, #-580]!	; 0xfffffdbc
    104c:	0200000a 	andeq	r0, r0, #10
    1050:	069c0858 			; <UNDEFINED> instruction: 0x069c0858
    1054:	91020000 	mrsls	r0, (UNDEF: 2)
    1058:	56240073 			; <UNDEFINED> instruction: 0x56240073
    105c:	02000010 	andeq	r0, r0, #16
    1060:	08580838 	ldmdaeq	r8, {r3, r4, r5, fp}^
    1064:	00402000 	subeq	r2, r0, r0
    1068:	9c010000 	stcls	0, cr0, [r1], {-0}
    106c:	0000108f 	andeq	r1, r0, pc, lsl #1
    1070:	000e0525 	andeq	r0, lr, r5, lsr #10
    1074:	08380200 	ldmdaeq	r8!, {r9}
    1078:	0000030b 	andeq	r0, r0, fp, lsl #6
    107c:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
    1080:	00000acd 	andeq	r0, r0, sp, asr #21
    1084:	9c083802 	stcls	8, cr3, [r8], {2}
    1088:	02000006 	andeq	r0, r0, #6
    108c:	24007391 	strcs	r7, [r0], #-913	; 0xfffffc6f
    1090:	00000173 	andeq	r0, r0, r3, ror r1
    1094:	3c080e02 	stccc	14, cr0, [r8], {2}
    1098:	1c200008 	stcne	0, cr0, [r0], #-32	; 0xffffffe0
    109c:	01000000 	mrseq	r0, (UNDEF: 0)
    10a0:	0010b59c 	mulseq	r0, ip, r5
    10a4:	111c2500 	tstne	ip, r0, lsl #10
    10a8:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    10ac:	00030b08 	andeq	r0, r3, r8, lsl #22
    10b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    10b4:	024a2400 	subeq	r2, sl, #0, 8
    10b8:	8e020000 	cdphi	0, 0, cr0, cr2, cr0, {0}
    10bc:	00080007 	andeq	r0, r8, r7
    10c0:	00003c20 	andeq	r3, r0, r0, lsr #24
    10c4:	ea9c0100 	b	fe7014cc <_global_impure_ptr+0xde6fc3b0>
    10c8:	25000010 	strcs	r0, [r0, #-16]
    10cc:	000007fb 	strdeq	r0, [r0], -fp
    10d0:	0b078e02 	bleq	1e48e0 <startup-0x1fe1b720>
    10d4:	02000003 	andeq	r0, r0, #3
    10d8:	db276c91 	blle	9dc324 <startup-0x1f623cdc>
    10dc:	0200000d 	andeq	r0, r0, #13
    10e0:	030b0790 	movweq	r0, #46992	; 0xb790
    10e4:	91020000 	mrsls	r0, (UNDEF: 2)
    10e8:	0a240074 	beq	9012c0 <startup-0x1f6fed40>
    10ec:	02000002 	andeq	r0, r0, #2
    10f0:	07c0072b 	strbeq	r0, [r0, fp, lsr #14]
    10f4:	00402000 	subeq	r2, r0, r0
    10f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    10fc:	0000111f 	andeq	r1, r0, pc, lsl r1
    1100:	0007ec25 	andeq	lr, r7, r5, lsr #24
    1104:	072b0200 	streq	r0, [fp, -r0, lsl #4]!
    1108:	0000030b 	andeq	r0, r0, fp, lsl #6
    110c:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    1110:	00000ddb 	ldrdeq	r0, [r0], -fp
    1114:	0b072d02 	bleq	1cc524 <startup-0x1fe33adc>
    1118:	02000003 	andeq	r0, r0, #3
    111c:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1120:	00000959 	andeq	r0, r0, r9, asr r9
    1124:	84070b02 	strhi	r0, [r7], #-2818	; 0xfffff4fe
    1128:	3c200007 	stccc	0, cr0, [r0], #-28	; 0xffffffe4
    112c:	01000000 	mrseq	r0, (UNDEF: 0)
    1130:	0011549c 	mulseq	r1, ip, r4
    1134:	031e2500 	tsteq	lr, #0, 10
    1138:	0b020000 	bleq	81140 <startup-0x1ff7eec0>
    113c:	00030b07 	andeq	r0, r3, r7, lsl #22
    1140:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1144:	000ddb27 	andeq	sp, sp, r7, lsr #22
    1148:	070d0200 	streq	r0, [sp, -r0, lsl #4]
    114c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1150:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1154:	0002e124 	andeq	lr, r2, r4, lsr #2
    1158:	06ea0200 	strbteq	r0, [sl], r0, lsl #4
    115c:	20000748 	andcs	r0, r0, r8, asr #14
    1160:	0000003c 	andeq	r0, r0, ip, lsr r0
    1164:	11899c01 	orrne	r9, r9, r1, lsl #24
    1168:	0a250000 	beq	941170 <startup-0x1f6bee90>
    116c:	02000008 	andeq	r0, r0, #8
    1170:	030b06ea 	movweq	r0, #46826	; 0xb6ea
    1174:	91020000 	mrsls	r0, (UNDEF: 2)
    1178:	0ddb276c 	ldcleq	7, cr2, [fp, #432]	; 0x1b0
    117c:	ec020000 	stc	0, cr0, [r2], {-0}
    1180:	00030b06 	andeq	r0, r3, r6, lsl #22
    1184:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1188:	06cf2400 	strbeq	r2, [pc], r0, lsl #8
    118c:	c6020000 	strgt	r0, [r2], -r0
    1190:	00070c06 	andeq	r0, r7, r6, lsl #24
    1194:	00003c20 	andeq	r3, r0, r0, lsr #24
    1198:	be9c0100 	fmllte	f0, f4, f0
    119c:	25000011 	strcs	r0, [r0, #-17]	; 0xffffffef
    11a0:	00000b1f 	andeq	r0, r0, pc, lsl fp
    11a4:	0b06c602 	bleq	1b29b4 <startup-0x1fe4d64c>
    11a8:	02000003 	andeq	r0, r0, #3
    11ac:	db276c91 	blle	9dc3f8 <startup-0x1f623c08>
    11b0:	0200000d 	andeq	r0, r0, #13
    11b4:	030b06c8 	movweq	r0, #46792	; 0xb6c8
    11b8:	91020000 	mrsls	r0, (UNDEF: 2)
    11bc:	57240074 			; <UNDEFINED> instruction: 0x57240074
    11c0:	02000000 	andeq	r0, r0, #0
    11c4:	06f006ab 	ldrbteq	r0, [r0], fp, lsr #13
    11c8:	001c2000 	andseq	r2, ip, r0
    11cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    11d0:	000011e4 	andeq	r1, r0, r4, ror #3
    11d4:	0008a225 	andeq	sl, r8, r5, lsr #4
    11d8:	06ab0200 	strteq	r0, [fp], r0, lsl #4
    11dc:	0000030b 	andeq	r0, r0, fp, lsl #6
    11e0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    11e4:	000c0d24 	andeq	r0, ip, r4, lsr #26
    11e8:	05ef0200 	strbeq	r0, [pc, #512]!	; 13f0 <startup-0x1fffec10>
    11ec:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    11f0:	00000020 	andeq	r0, r0, r0, lsr #32
    11f4:	120a9c01 	andne	r9, sl, #256	; 0x100
    11f8:	cd250000 	stcgt	0, cr0, [r5, #-0]
    11fc:	0200000a 	andeq	r0, r0, #10
    1200:	069c05ef 	ldreq	r0, [ip], pc, ror #11
    1204:	91020000 	mrsls	r0, (UNDEF: 2)
    1208:	e6240077 			; <UNDEFINED> instruction: 0xe6240077
    120c:	0200000f 	andeq	r0, r0, #15
    1210:	06b005de 	ssateq	r0, #17, lr, asr #11
    1214:	00202000 	eoreq	r2, r0, r0
    1218:	9c010000 	stcls	0, cr0, [r1], {-0}
    121c:	00001230 	andeq	r1, r0, r0, lsr r2
    1220:	000acd25 	andeq	ip, sl, r5, lsr #26
    1224:	05de0200 	ldrbeq	r0, [lr, #512]	; 0x200
    1228:	0000069c 	muleq	r0, ip, r6
    122c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1230:	000a7424 	andeq	r7, sl, r4, lsr #8
    1234:	05be0200 	ldreq	r0, [lr, #512]!	; 0x200
    1238:	20000650 	andcs	r0, r0, r0, asr r6
    123c:	00000060 	andeq	r0, r0, r0, rrx
    1240:	12659c01 	rsbne	r9, r5, #256	; 0x100
    1244:	46250000 	strtmi	r0, [r5], -r0
    1248:	02000001 	andeq	r0, r0, #1
    124c:	030b05be 	movweq	r0, #46526	; 0xb5be
    1250:	91020000 	mrsls	r0, (UNDEF: 2)
    1254:	0ddb276c 	ldcleq	7, cr2, [fp, #432]	; 0x1b0
    1258:	c0020000 	andgt	r0, r2, r0
    125c:	00030b05 	andeq	r0, r3, r5, lsl #22
    1260:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1264:	00682a00 	rsbeq	r2, r8, r0, lsl #20
    1268:	25020000 	strcs	r0, [r2, #-0]
    126c:	0004f805 	andeq	pc, r4, r5, lsl #16
    1270:	00015820 	andeq	r5, r1, r0, lsr #16
    1274:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    1278:	25000012 	strcs	r0, [r0, #-18]	; 0xffffffee
    127c:	000009f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1280:	e5052502 	str	r2, [r5, #-1282]	; 0xfffffafe
    1284:	02000012 	andeq	r0, r0, #18
    1288:	74295c91 	strtvc	r5, [r9], #-3217	; 0xfffff36f
    128c:	0200706d 	andeq	r7, r0, #109	; 0x6d
    1290:	030b0527 	movweq	r0, #46375	; 0xb527
    1294:	91020000 	mrsls	r0, (UNDEF: 2)
    1298:	11352770 	teqne	r5, r0, ror r7
    129c:	27020000 	strcs	r0, [r2, -r0]
    12a0:	00030b05 	andeq	r0, r3, r5, lsl #22
    12a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    12a8:	000f4627 	andeq	r4, pc, r7, lsr #12
    12ac:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    12b0:	0000030b 	andeq	r0, r0, fp, lsl #6
    12b4:	27749102 	ldrbcs	r9, [r4, -r2, lsl #2]!
    12b8:	00000000 	andeq	r0, r0, r0
    12bc:	0b052702 	bleq	14aecc <startup-0x1feb5134>
    12c0:	02000003 	andeq	r0, r0, #3
    12c4:	ca276891 	bgt	9db510 <startup-0x1f624af0>
    12c8:	02000005 	andeq	r0, r0, #5
    12cc:	030b0527 	movweq	r0, #46375	; 0xb527
    12d0:	91020000 	mrsls	r0, (UNDEF: 2)
    12d4:	11a92764 			; <UNDEFINED> instruction: 0x11a92764
    12d8:	27020000 	strcs	r0, [r2, -r0]
    12dc:	00030b05 	andeq	r0, r3, r5, lsl #22
    12e0:	60910200 	addsvs	r0, r1, r0, lsl #4
    12e4:	84042b00 	strhi	r2, [r4], #-2816	; 0xfffff500
    12e8:	24000009 	strcs	r0, [r0], #-9
    12ec:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    12f0:	bc04f102 	stfltd	f7, [r4], {2}
    12f4:	3c200004 	stccc	0, cr0, [r0], #-16
    12f8:	01000000 	mrseq	r0, (UNDEF: 0)
    12fc:	0013209c 	mulseq	r3, ip, r0
    1300:	01962500 	orrseq	r2, r6, r0, lsl #10
    1304:	f1020000 	cps	#0
    1308:	00030b04 	andeq	r0, r3, r4, lsl #22
    130c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1310:	000ddb27 	andeq	sp, sp, r7, lsr #22
    1314:	04f30200 	ldrbteq	r0, [r3], #512	; 0x200
    1318:	0000030b 	andeq	r0, r0, fp, lsl #6
    131c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1320:	0008ce24 	andeq	ip, r8, r4, lsr #28
    1324:	04d20200 	ldrbeq	r0, [r2], #512	; 0x200
    1328:	20000484 	andcs	r0, r0, r4, lsl #9
    132c:	00000038 	andeq	r0, r0, r8, lsr r0
    1330:	13559c01 	cmpne	r5, #256	; 0x100
    1334:	96250000 	strtls	r0, [r5], -r0
    1338:	02000001 	andeq	r0, r0, #1
    133c:	030b04d2 	movweq	r0, #46290	; 0xb4d2
    1340:	91020000 	mrsls	r0, (UNDEF: 2)
    1344:	0ddb276c 	ldcleq	7, cr2, [fp, #432]	; 0x1b0
    1348:	d4020000 	strle	r0, [r2], #-0
    134c:	00030b04 	andeq	r0, r3, r4, lsl #22
    1350:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1354:	06762400 	ldrbteq	r2, [r6], -r0, lsl #8
    1358:	b3020000 	movwlt	r0, #8192	; 0x2000
    135c:	00045004 	andeq	r5, r4, r4
    1360:	00003420 	andeq	r3, r0, r0, lsr #8
    1364:	8a9c0100 	bhi	fe70176c <_global_impure_ptr+0xde6fc650>
    1368:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    136c:	00000590 	muleq	r0, r0, r5
    1370:	0b04b302 	bleq	12df80 <startup-0x1fed2080>
    1374:	02000003 	andeq	r0, r0, #3
    1378:	db276c91 	blle	9dc5c4 <startup-0x1f623a3c>
    137c:	0200000d 	andeq	r0, r0, #13
    1380:	030b04b5 	movweq	r0, #46261	; 0xb4b5
    1384:	91020000 	mrsls	r0, (UNDEF: 2)
    1388:	002c0074 	eoreq	r0, ip, r4, ror r0
    138c:	02000003 	andeq	r0, r0, #3
    1390:	02d1049a 	sbcseq	r0, r1, #-1711276032	; 0x9a000000
    1394:	04340000 	ldrteq	r0, [r4], #-0
    1398:	001c2000 	andseq	r2, ip, r0
    139c:	9c010000 	stcls	0, cr0, [r1], {-0}
    13a0:	00116824 	andseq	r6, r1, r4, lsr #16
    13a4:	047d0200 	ldrbteq	r0, [sp], #-512	; 0xfffffe00
    13a8:	20000400 	andcs	r0, r0, r0, lsl #8
    13ac:	00000034 	andeq	r0, r0, r4, lsr r0
    13b0:	13d59c01 	bicsne	r9, r5, #256	; 0x100
    13b4:	8d250000 	stchi	0, cr0, [r5, #-0]
    13b8:	02000003 	andeq	r0, r0, #3
    13bc:	030b047d 	movweq	r0, #46205	; 0xb47d
    13c0:	91020000 	mrsls	r0, (UNDEF: 2)
    13c4:	0ddb276c 	ldcleq	7, cr2, [fp, #432]	; 0x1b0
    13c8:	7f020000 	svcvc	0x00020000
    13cc:	00030b04 	andeq	r0, r3, r4, lsl #22
    13d0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    13d4:	088e2400 	stmeq	lr, {sl, sp}
    13d8:	b5020000 	strlt	r0, [r2, #-0]
    13dc:	0003c403 	andeq	ip, r3, r3, lsl #8
    13e0:	00003c20 	andeq	r3, r0, r0, lsr #24
    13e4:	199c0100 	ldmibne	ip, {r8}
    13e8:	25000014 	strcs	r0, [r0, #-20]	; 0xffffffec
    13ec:	00000c54 	andeq	r0, r0, r4, asr ip
    13f0:	0b03b502 	bleq	ee800 <startup-0x1ff11800>
    13f4:	02000003 	andeq	r0, r0, #3
    13f8:	62256c91 	eorvs	r6, r5, #37120	; 0x9100
    13fc:	02000003 	andeq	r0, r0, #3
    1400:	030b03b5 	movweq	r0, #46005	; 0xb3b5
    1404:	91020000 	mrsls	r0, (UNDEF: 2)
    1408:	0ddb2768 	ldcleq	7, cr2, [fp, #416]	; 0x1a0
    140c:	b7020000 	strlt	r0, [r2, -r0]
    1410:	00030b03 	andeq	r0, r3, r3, lsl #22
    1414:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1418:	07612400 	strbeq	r2, [r1, -r0, lsl #8]!
    141c:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    1420:	00038403 	andeq	r8, r3, r3, lsl #8
    1424:	00004020 	andeq	r4, r0, r0, lsr #32
    1428:	5d9c0100 	ldfpls	f0, [ip]
    142c:	25000014 	strcs	r0, [r0, #-20]	; 0xffffffec
    1430:	00000bbd 			; <UNDEFINED> instruction: 0x00000bbd
    1434:	0b038802 	bleq	e3444 <startup-0x1ff1cbbc>
    1438:	02000003 	andeq	r0, r0, #3
    143c:	da256c91 	ble	95c688 <startup-0x1f6a3978>
    1440:	0200000c 	andeq	r0, r0, #12
    1444:	030b0388 	movweq	r0, #45960	; 0xb388
    1448:	91020000 	mrsls	r0, (UNDEF: 2)
    144c:	0ddb2768 	ldcleq	7, cr2, [fp, #416]	; 0x1a0
    1450:	8a020000 	bhi	81458 <startup-0x1ff7eba8>
    1454:	00030b03 	andeq	r0, r3, r3, lsl #22
    1458:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    145c:	0b042400 	bleq	10a464 <startup-0x1fef5b9c>
    1460:	6f020000 	svcvs	0x00020000
    1464:	00036403 	andeq	r6, r3, r3, lsl #8
    1468:	00002020 	andeq	r2, r0, r0, lsr #32
    146c:	839c0100 	orrshi	r0, ip, #0, 2
    1470:	25000014 	strcs	r0, [r0, #-20]	; 0xffffffec
    1474:	00000acd 	andeq	r0, r0, sp, asr #21
    1478:	9c036f02 	stcls	15, cr6, [r3], {2}
    147c:	02000006 	andeq	r0, r0, #6
    1480:	24007791 	strcs	r7, [r0], #-1937	; 0xfffff86f
    1484:	00001152 	andeq	r1, r0, r2, asr r1
    1488:	44035d02 	strmi	r5, [r3], #-3330	; 0xfffff2fe
    148c:	20200003 	eorcs	r0, r0, r3
    1490:	01000000 	mrseq	r0, (UNDEF: 0)
    1494:	0014a99c 	mulseq	r4, ip, r9
    1498:	0acd2500 	beq	ff34a8a0 <_global_impure_ptr+0xdf345784>
    149c:	5d020000 	stcpl	0, cr0, [r2, #-0]
    14a0:	00069c03 	andeq	r9, r6, r3, lsl #24
    14a4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    14a8:	06f52400 	ldrbteq	r2, [r5], r0, lsl #8
    14ac:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    14b0:	00031403 	andeq	r1, r3, r3, lsl #8
    14b4:	00003020 	andeq	r3, r0, r0, lsr #32
    14b8:	ed9c0100 	ldfs	f0, [ip]
    14bc:	25000014 	strcs	r0, [r0, #-20]	; 0xffffffec
    14c0:	00000ba5 	andeq	r0, r0, r5, lsr #23
    14c4:	0b034902 	bleq	d38d4 <startup-0x1ff2c72c>
    14c8:	02000003 	andeq	r0, r0, #3
    14cc:	ad257491 	cfstrsge	mvf7, [r5, #-580]!	; 0xfffffdbc
    14d0:	0200000b 	andeq	r0, r0, #11
    14d4:	030b0349 	movweq	r0, #45897	; 0xb349
    14d8:	91020000 	mrsls	r0, (UNDEF: 2)
    14dc:	0bb52570 	bleq	fed4aaa4 <_global_impure_ptr+0xded45988>
    14e0:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    14e4:	00030b03 	andeq	r0, r3, r3, lsl #22
    14e8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    14ec:	01882400 	orreq	r2, r8, r0, lsl #8
    14f0:	dc020000 	stcle	0, cr0, [r2], {-0}
    14f4:	0002f402 	andeq	pc, r2, r2, lsl #8
    14f8:	00002020 	andeq	r2, r0, r0, lsr #32
    14fc:	139c0100 	orrsne	r0, ip, #0, 2
    1500:	25000015 	strcs	r0, [r0, #-21]	; 0xffffffeb
    1504:	00000acd 	andeq	r0, r0, sp, asr #21
    1508:	9c02dc02 	stcls	12, cr13, [r2], {2}
    150c:	02000006 	andeq	r0, r0, #6
    1510:	24007791 	strcs	r7, [r0], #-1937	; 0xfffff86f
    1514:	00001080 	andeq	r1, r0, r0, lsl #1
    1518:	cc025102 	stfgts	f5, [r2], {2}
    151c:	28200002 	stmdacs	r0!, {r1}
    1520:	01000000 	mrseq	r0, (UNDEF: 0)
    1524:	0015489c 	mulseq	r5, ip, r8
    1528:	0f972500 	svceq	0x00972500
    152c:	51020000 	mrspl	r0, (UNDEF: 2)
    1530:	00030b02 	andeq	r0, r3, r2, lsl #22
    1534:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1538:	000fbc25 	andeq	fp, pc, r5, lsr #24
    153c:	02510200 	subseq	r0, r1, #0, 4
    1540:	0000030b 	andeq	r0, r0, fp, lsl #6
    1544:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1548:	000c0224 	andeq	r0, ip, r4, lsr #4
    154c:	02330200 	eorseq	r0, r3, #0, 4
    1550:	200002ac 	andcs	r0, r0, ip, lsr #5
    1554:	00000020 	andeq	r0, r0, r0, lsr #32
    1558:	156e9c01 	strbne	r9, [lr, #-3073]!	; 0xfffff3ff
    155c:	cd250000 	stcgt	0, cr0, [r5, #-0]
    1560:	0200000a 	andeq	r0, r0, #10
    1564:	069c0233 			; <UNDEFINED> instruction: 0x069c0233
    1568:	91020000 	mrsls	r0, (UNDEF: 2)
    156c:	9b240077 	blls	901750 <startup-0x1f6fe8b0>
    1570:	02000011 	andeq	r0, r0, #17
    1574:	0270021b 	rsbseq	r0, r0, #-1342177279	; 0xb0000001
    1578:	003c2000 	eorseq	r2, ip, r0
    157c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1580:	000015d0 	ldrdeq	r1, [r0], -r0
    1584:	0003b025 	andeq	fp, r3, r5, lsr #32
    1588:	021b0200 	andseq	r0, fp, #0, 4
    158c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1590:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
    1594:	000005ab 	andeq	r0, r0, fp, lsr #11
    1598:	0b021b02 	bleq	881a8 <startup-0x1ff77e58>
    159c:	02000003 	andeq	r0, r0, #3
    15a0:	b0257091 	mlalt	r5, r1, r0, r7
    15a4:	02000005 	andeq	r0, r0, #5
    15a8:	030b021b 	movweq	r0, #45595	; 0xb21b
    15ac:	91020000 	mrsls	r0, (UNDEF: 2)
    15b0:	05b5256c 	ldreq	r2, [r5, #1388]!	; 0x56c
    15b4:	1b020000 	blne	815bc <startup-0x1ff7ea44>
    15b8:	00030b02 	andeq	r0, r3, r2, lsl #22
    15bc:	68910200 	ldmvs	r1, {r9}
    15c0:	0005ba25 	andeq	fp, r5, r5, lsr #20
    15c4:	021b0200 	andseq	r0, fp, #0, 4
    15c8:	0000030b 	andeq	r0, r0, fp, lsl #6
    15cc:	00009102 	andeq	r9, r0, r2, lsl #2
    15d0:	0005bf24 	andeq	fp, r5, r4, lsr #30
    15d4:	01b80200 			; <UNDEFINED> instruction: 0x01b80200
    15d8:	20000250 	andcs	r0, r0, r0, asr r2
    15dc:	00000020 	andeq	r0, r0, r0, lsr #32
    15e0:	15f69c01 	ldrbne	r9, [r6, #3073]!	; 0xc01
    15e4:	cd250000 	stcgt	0, cr0, [r5, #-0]
    15e8:	0200000a 	andeq	r0, r0, #10
    15ec:	069c01b8 			; <UNDEFINED> instruction: 0x069c01b8
    15f0:	91020000 	mrsls	r0, (UNDEF: 2)
    15f4:	55240077 	strpl	r0, [r4, #-119]!	; 0xffffff89
    15f8:	02000004 	andeq	r0, r0, #4
    15fc:	020c0190 	andeq	r0, ip, #144, 2	; 0x24
    1600:	00442000 	subeq	r2, r4, r0
    1604:	9c010000 	stcls	0, cr0, [r1], {-0}
    1608:	0000161c 	andeq	r1, r0, ip, lsl r6
    160c:	0006b525 	andeq	fp, r6, r5, lsr #10
    1610:	01900200 	orrseq	r0, r0, r0, lsl #4
    1614:	000002d1 	ldrdeq	r0, [r0], -r1
    1618:	00779102 	rsbseq	r9, r7, r2, lsl #2
    161c:	000a1e24 	andeq	r1, sl, r4, lsr #28
    1620:	01770200 	cmneq	r7, r0, lsl #4
    1624:	200001ec 	andcs	r0, r0, ip, ror #3
    1628:	00000020 	andeq	r0, r0, r0, lsr #32
    162c:	16429c01 	strbne	r9, [r2], -r1, lsl #24
    1630:	cd250000 	stcgt	0, cr0, [r5, #-0]
    1634:	0200000a 	andeq	r0, r0, #10
    1638:	069c0177 			; <UNDEFINED> instruction: 0x069c0177
    163c:	91020000 	mrsls	r0, (UNDEF: 2)
    1640:	32240077 	eorcc	r0, r4, #119	; 0x77
    1644:	0200000a 	andeq	r0, r0, #10
    1648:	01ae0153 			; <UNDEFINED> instruction: 0x01ae0153
    164c:	003e2000 	eorseq	r2, lr, r0
    1650:	9c010000 	stcls	0, cr0, [r1], {-0}
    1654:	00001677 	andeq	r1, r0, r7, ror r6
    1658:	000a3c25 	andeq	r3, sl, r5, lsr #24
    165c:	01530200 	cmpeq	r3, r0, lsl #4
    1660:	000002d1 	ldrdeq	r0, [r0], -r1
    1664:	276f9102 	strbcs	r9, [pc, -r2, lsl #2]!
    1668:	00000ddb 	ldrdeq	r0, [r0], -fp
    166c:	0b015502 	bleq	56a7c <startup-0x1ffa9584>
    1670:	02000003 	andeq	r0, r0, #3
    1674:	2d007491 	cfstrscs	mvf7, [r0, #-580]	; 0xfffffdbc
    1678:	00000cfc 	strdeq	r0, [r0], -ip
    167c:	c3013402 	movwgt	r3, #5122	; 0x1402
    1680:	50000006 	andpl	r0, r0, r6
    1684:	5e200001 	cdppl	0, 2, cr0, cr0, cr1, {0}
    1688:	01000000 	mrseq	r0, (UNDEF: 0)
    168c:	0016bf9c 	mulseq	r6, ip, pc	; <UNPREDICTABLE>
    1690:	06e62700 	strbteq	r2, [r6], r0, lsl #14
    1694:	36020000 	strcc	r0, [r2], -r0
    1698:	00031601 	andeq	r1, r3, r1, lsl #12
    169c:	68910200 	ldmvs	r1, {r9}
    16a0:	000e1727 	andeq	r1, lr, r7, lsr #14
    16a4:	01370200 	teqeq	r7, r0, lsl #4
    16a8:	000006c3 	andeq	r0, r0, r3, asr #13
    16ac:	276f9102 	strbcs	r9, [pc, -r2, lsl #2]!
    16b0:	00000e14 	andeq	r0, r0, r4, lsl lr
    16b4:	69013802 	stmdbvs	r1, {r1, fp, ip, sp}
    16b8:	02000006 	andeq	r0, r0, #6
    16bc:	24006e91 	strcs	r6, [r0], #-3729	; 0xfffff16f
    16c0:	00000693 	muleq	r0, r3, r6
    16c4:	28011c02 	stmdacs	r1, {r1, sl, fp, ip}
    16c8:	28200001 	stmdacs	r0!, {r0}
    16cc:	01000000 	mrseq	r0, (UNDEF: 0)
    16d0:	0016e59c 	mulseq	r6, ip, r5
    16d4:	07592500 	ldrbeq	r2, [r9, -r0, lsl #10]
    16d8:	1c020000 	stcne	0, cr0, [r2], {-0}
    16dc:	0002d101 	andeq	sp, r2, r1, lsl #2
    16e0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    16e4:	02d62200 	sbcseq	r2, r6, #0, 4
    16e8:	e1020000 	mrs	r0, (UNDEF: 2)
    16ec:	200000b8 	strhcs	r0, [r0], -r8
    16f0:	00000070 	andeq	r0, r0, r0, ror r0
    16f4:	6d2e9c01 	stcvs	12, cr9, [lr, #-4]!
    16f8:	0100000d 	tsteq	r0, sp
    16fc:	030b06e0 	movweq	r0, #46816	; 0xb6e0
    1700:	00700000 	rsbseq	r0, r0, r0
    1704:	00482000 	subeq	r2, r8, r0
    1708:	9c010000 	stcls	0, cr0, [r1], {-0}
    170c:	00001720 	andeq	r1, r0, r0, lsr #14
    1710:	0008f425 	andeq	pc, r8, r5, lsr #8
    1714:	06e00100 	strbteq	r0, [r0], r0, lsl #2
    1718:	0000030b 	andeq	r0, r0, fp, lsl #6
    171c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1720:	0010032f 	andseq	r0, r0, pc, lsr #6
    1724:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    1728:	20000010 	andcs	r0, r0, r0, lsl r0
    172c:	00000060 	andeq	r0, r0, r0, rrx
    1730:	85259c01 	strhi	r9, [r5, #-3073]!	; 0xfffff3ff
    1734:	0100000f 	tsteq	r0, pc
    1738:	025a065d 	subseq	r0, sl, #97517568	; 0x5d00000
    173c:	91020000 	mrsls	r0, (UNDEF: 2)
    1740:	14402577 	strbne	r2, [r0], #-1399	; 0xfffffa89
    1744:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1748:	00030b06 	andeq	r0, r3, r6, lsl #22
    174c:	70910200 	addsvc	r0, r1, r0, lsl #4
    1750:	06230000 	strteq	r0, [r3], -r0
    1754:	00040000 	andeq	r0, r4, r0
    1758:	000002f5 	strdeq	r0, [r0], -r5
    175c:	05de0104 	ldrbeq	r0, [lr, #260]	; 0x104
    1760:	330c0000 	movwcc	r0, #49152	; 0xc000
    1764:	3e000012 	mcrcc	0, 0, r0, cr0, cr2, {0}
    1768:	d4000005 	strle	r0, [r0], #-5
    176c:	0e200010 	miaeq	acc0, r0, r0
    1770:	7c000005 	stcvc	0, cr0, [r0], {5}
    1774:	02000004 	andeq	r0, r0, #4
    1778:	03eb0601 	mvneq	r0, #1048576	; 0x100000
    177c:	c3030000 	movwgt	r0, #12288	; 0x3000
    1780:	02000001 	andeq	r0, r0, #1
    1784:	0000372b 	andeq	r3, r0, fp, lsr #14
    1788:	08010200 	stmdaeq	r1, {r9}
    178c:	000003e9 	andeq	r0, r0, r9, ror #7
    1790:	ef050202 	svc	0x00050202
    1794:	0300000e 	movweq	r0, #14
    1798:	000004fe 	strdeq	r0, [r0], -lr
    179c:	00503902 	subseq	r3, r0, r2, lsl #18
    17a0:	02020000 	andeq	r0, r2, #0
    17a4:	00106d07 	andseq	r6, r0, r7, lsl #26
    17a8:	11120300 	tstne	r2, r0, lsl #6
    17ac:	4d020000 	stcmi	0, cr0, [r2, #-0]
    17b0:	00000062 	andeq	r0, r0, r2, rrx
    17b4:	82050402 	andhi	r0, r5, #33554432	; 0x2000000
    17b8:	03000009 	movweq	r0, #9
    17bc:	0000092b 	andeq	r0, r0, fp, lsr #18
    17c0:	00744f02 	rsbseq	r4, r4, r2, lsl #30
    17c4:	04020000 	streq	r0, [r2], #-0
    17c8:	000cc807 	andeq	ip, ip, r7, lsl #16
    17cc:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    17d0:	0000097d 	andeq	r0, r0, sp, ror r9
    17d4:	c3070802 	movwgt	r0, #30722	; 0x7802
    17d8:	0400000c 	streq	r0, [r0], #-12
    17dc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    17e0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    17e4:	000ccd07 	andeq	ip, ip, r7, lsl #26
    17e8:	01c50300 	biceq	r0, r5, r0, lsl #6
    17ec:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    17f0:	0000002c 	andeq	r0, r0, ip, lsr #32
    17f4:	00050003 	andeq	r0, r5, r3
    17f8:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
    17fc:	05000000 	streq	r0, [r0, #-0]
    1800:	000000a2 	andeq	r0, r0, r2, lsr #1
    1804:	00111403 	andseq	r1, r1, r3, lsl #8
    1808:	572c0300 	strpl	r0, [ip, -r0, lsl #6]!
    180c:	05000000 	streq	r0, [r0, #-0]
    1810:	000000b2 	strheq	r0, [r0], -r2
    1814:	00092d03 	andeq	r2, r9, r3, lsl #26
    1818:	69300300 	ldmdbvs	r0!, {r8, r9}
    181c:	05000000 	streq	r0, [r0, #-0]
    1820:	000000c2 	andeq	r0, r0, r2, asr #1
    1824:	000f8a06 	andeq	r8, pc, r6, lsl #20
    1828:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    182c:	000000bd 	strheq	r0, [r0], -sp
    1830:	00083707 	andeq	r3, r8, r7, lsl #14
    1834:	c23b0500 	eorsgt	r0, fp, #0, 10
    1838:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    183c:	00370107 	eorseq	r0, r7, r7, lsl #2
    1840:	5f060000 	svcpl	0x00060000
    1844:	00010403 	andeq	r0, r1, r3, lsl #8
    1848:	09bb0900 	ldmibeq	fp!, {r8, fp}
    184c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1850:	00000f3f 	andeq	r0, r0, pc, lsr pc
    1854:	280a0001 	stmdacs	sl, {r0}
    1858:	9005c306 	andls	ip, r5, r6, lsl #6
    185c:	0b000001 	bleq	1868 <startup-0x1fffe798>
    1860:	00000ffd 	strdeq	r0, [r0], -sp
    1864:	cd05c506 	cfstr32gt	mvfx12, [r5, #-24]	; 0xffffffe8
    1868:	00000000 	andeq	r0, r0, r0
    186c:	000dce0b 	andeq	ip, sp, fp, lsl #28
    1870:	05c60600 	strbeq	r0, [r6, #1536]	; 0x600
    1874:	000000cd 	andeq	r0, r0, sp, asr #1
    1878:	08de0b04 	ldmeq	lr, {r2, r8, r9, fp}^
    187c:	c7060000 	strgt	r0, [r6, -r0]
    1880:	0000cd05 	andeq	ip, r0, r5, lsl #26
    1884:	a50b0800 	strge	r0, [fp, #-2048]	; 0xfffff800
    1888:	06000009 	streq	r0, [r0], -r9
    188c:	00cd05c8 	sbceq	r0, sp, r8, asr #11
    1890:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    1894:	00524449 	subseq	r4, r2, r9, asr #8
    1898:	cd05c906 	vstrgt.16	s24, [r5, #-12]	; <UNPREDICTABLE>
    189c:	10000000 	andne	r0, r0, r0
    18a0:	52444f0c 	subpl	r4, r4, #12, 30	; 0x30
    18a4:	05ca0600 	strbeq	r0, [sl, #1536]	; 0x600
    18a8:	000000cd 	andeq	r0, r0, sp, asr #1
    18ac:	09fb0b14 	ldmibeq	fp!, {r2, r4, r8, r9, fp}^
    18b0:	cb060000 	blgt	1818b8 <startup-0x1fe7e748>
    18b4:	0000ad05 	andeq	sl, r0, r5, lsl #26
    18b8:	d80b1800 	stmdale	fp, {fp, ip}
    18bc:	06000009 	streq	r0, [r0], -r9
    18c0:	00ad05cc 	adceq	r0, sp, ip, asr #11
    18c4:	0b1a0000 	bleq	6818cc <startup-0x1f97e734>
    18c8:	0000089d 	muleq	r0, sp, r8
    18cc:	cd05cd06 	stcgt	13, cr12, [r5, #-24]	; 0xffffffe8
    18d0:	1c000000 	stcne	0, cr0, [r0], {-0}
    18d4:	5246410c 	subpl	r4, r6, #12, 2
    18d8:	05ce0600 	strbeq	r0, [lr, #1536]	; 0x600
    18dc:	000001a0 	andeq	r0, r0, r0, lsr #3
    18e0:	cd0d0020 	stcgt	0, cr0, [sp, #-128]	; 0xffffff80
    18e4:	a0000000 	andge	r0, r0, r0
    18e8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    18ec:	00000090 	muleq	r0, r0, r0
    18f0:	90050001 	andls	r0, r5, r1
    18f4:	0f000001 	svceq	0x00000001
    18f8:	00000f6a 	andeq	r0, r0, sl, ror #30
    18fc:	0405cf06 	streq	ip, [r5], #-3846	; 0xfffff0fa
    1900:	10000001 	andne	r0, r0, r1
    1904:	00370107 	eorseq	r0, r7, r7, lsl #2
    1908:	42070000 	andmi	r0, r7, #0
    190c:	000001d7 	ldrdeq	r0, [r0], -r7
    1910:	00086f09 	andeq	r6, r8, r9, lsl #30
    1914:	06090000 	streq	r0, [r9], -r0
    1918:	01000007 	tsteq	r0, r7
    191c:	00027109 	andeq	r7, r2, r9, lsl #2
    1920:	ad090200 	sfmge	f0, 4, [r9, #-0]
    1924:	03000002 	movweq	r0, #2
    1928:	0d5c0300 	ldcleq	3, cr0, [ip, #-0]
    192c:	47070000 	strmi	r0, [r7, -r0]
    1930:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    1934:	37010710 	smladcc	r1, r0, r7, r0
    1938:	07000000 	streq	r0, [r0, -r0]
    193c:	0001fc4f 	andeq	pc, r1, pc, asr #24
    1940:	042c0900 	strteq	r0, [ip], #-2304	; 0xfffff700
    1944:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1948:	0000036e 	andeq	r0, r0, lr, ror #6
    194c:	0a030001 	beq	c1958 <startup-0x1ff3e6a8>
    1950:	07000001 	streq	r0, [r0, -r1]
    1954:	0001e252 	andeq	lr, r1, r2, asr r2
    1958:	01071000 	mrseq	r1, (UNDEF: 7)
    195c:	00000037 	andeq	r0, r0, r7, lsr r0
    1960:	022d5a07 	eoreq	r5, sp, #28672	; 0x7000
    1964:	21090000 	mrscs	r0, (UNDEF: 9)
    1968:	00000005 	andeq	r0, r0, r5
    196c:	00094709 	andeq	r4, r9, r9, lsl #14
    1970:	8b090100 	blhi	241d78 <startup-0x1fdbe288>
    1974:	02000011 	andeq	r0, r0, #17
    1978:	000a0109 	andeq	r0, sl, r9, lsl #2
    197c:	03000300 	movweq	r0, #768	; 0x300
    1980:	00000e59 	andeq	r0, r0, r9, asr lr
    1984:	02075f07 	andeq	r5, r7, #7, 30
    1988:	07100000 	ldreq	r0, [r0, -r0]
    198c:	00003701 	andeq	r3, r0, r1, lsl #14
    1990:	586e0700 	stmdapl	lr!, {r8, r9, sl}^
    1994:	09000002 	stmdbeq	r0, {r1}
    1998:	0000009b 	muleq	r0, fp, r0
    199c:	10310900 	eorsne	r0, r1, r0, lsl #18
    19a0:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    19a4:	000001f5 	strdeq	r0, [r0], -r5
    19a8:	a0030002 	andge	r0, r3, r2
    19ac:	07000004 	streq	r0, [r0, -r4]
    19b0:	00023872 	andeq	r3, r2, r2, ror r8
    19b4:	01071000 	mrseq	r1, (UNDEF: 7)
    19b8:	00000037 	andeq	r0, r0, r7, lsr r0
    19bc:	027d7a07 	rsbseq	r7, sp, #28672	; 0x7000
    19c0:	f5090000 			; <UNDEFINED> instruction: 0xf5090000
    19c4:	00000011 	andeq	r0, r0, r1, lsl r0
    19c8:	0011b509 	andseq	fp, r1, r9, lsl #10
    19cc:	03000100 	movweq	r0, #256	; 0x100
    19d0:	00001320 	andeq	r1, r0, r0, lsr #6
    19d4:	02637d07 	rsbeq	r7, r3, #448	; 0x1c0
    19d8:	08110000 	ldmdaeq	r1, {}	; <UNPREDICTABLE>
    19dc:	02cd8407 	sbceq	r8, sp, #117440512	; 0x7000000
    19e0:	7d120000 	ldcvc	0, cr0, [r2, #-0]
    19e4:	0700000e 	streq	r0, [r0, -lr]
    19e8:	0000c286 	andeq	ip, r0, r6, lsl #5
    19ec:	1a120000 	bne	4819f4 <startup-0x1fb7e60c>
    19f0:	0700000d 	streq	r0, [r0, -sp]
    19f4:	0001d789 	andeq	sp, r1, r9, lsl #15
    19f8:	d6120400 	ldrle	r0, [r2], -r0, lsl #8
    19fc:	0700000a 	streq	r0, [r0, -sl]
    1a00:	00022d8c 	andeq	r2, r2, ip, lsl #27
    1a04:	20120500 	andscs	r0, r2, r0, lsl #10
    1a08:	07000009 	streq	r0, [r0, -r9]
    1a0c:	0001fc8f 	andeq	pc, r1, pc, lsl #25
    1a10:	aa120600 	bge	483218 <startup-0x1fb7cde8>
    1a14:	0700000e 	streq	r0, [r0, -lr]
    1a18:	00025892 	muleq	r2, r2, r8
    1a1c:	03000700 	movweq	r0, #1792	; 0x700
    1a20:	0000037c 	andeq	r0, r0, ip, ror r3
    1a24:	02889407 	addeq	r9, r8, #117440512	; 0x7000000
    1a28:	5d130000 	ldcpl	0, cr0, [r3, #-0]
    1a2c:	01000013 	tsteq	r0, r3, lsl r0
    1a30:	153e0243 	ldrne	r0, [lr, #-579]!	; 0xfffffdbd
    1a34:	00a42000 	adceq	r2, r4, r0
    1a38:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a3c:	0000033a 	andeq	r0, r0, sl, lsr r3
    1a40:	00134014 	andseq	r4, r3, r4, lsl r0
    1a44:	02430100 	subeq	r0, r3, #0, 2
    1a48:	0000033a 	andeq	r0, r0, sl, lsr r3
    1a4c:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1a50:	000012eb 	andeq	r1, r0, fp, ror #5
    1a54:	a2024301 	andge	r4, r2, #67108864	; 0x4000000
    1a58:	02000000 	andeq	r0, r0, #0
    1a5c:	d1146a91 			; <UNDEFINED> instruction: 0xd1146a91
    1a60:	01000011 	tsteq	r0, r1, lsl r0
    1a64:	00970243 	addseq	r0, r7, r3, asr #4
    1a68:	91020000 	mrsls	r0, (UNDEF: 2)
    1a6c:	11d91569 	bicsne	r1, r9, r9, ror #10
    1a70:	45010000 	strmi	r0, [r1, #-0]
    1a74:	0000c202 	andeq	ip, r0, r2, lsl #4
    1a78:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a7c:	00135615 	andseq	r5, r3, r5, lsl r6
    1a80:	02460100 	subeq	r0, r6, #0, 2
    1a84:	000000c2 	andeq	r0, r0, r2, asr #1
    1a88:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1a8c:	01a50416 			; <UNDEFINED> instruction: 0x01a50416
    1a90:	46130000 	ldrmi	r0, [r3], -r0
    1a94:	01000013 	tsteq	r0, r3, lsl r0
    1a98:	151a01f0 	ldrne	r0, [sl, #-496]	; 0xfffffe10
    1a9c:	00242000 	eoreq	r2, r4, r0
    1aa0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1aa4:	00000375 	andeq	r0, r0, r5, ror r3
    1aa8:	00134014 	andseq	r4, r3, r4, lsl r0
    1aac:	01f00100 	mvnseq	r0, r0, lsl #2
    1ab0:	0000033a 	andeq	r0, r0, sl, lsr r3
    1ab4:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    1ab8:	00000e7d 	andeq	r0, r0, sp, ror lr
    1abc:	a201f001 	andge	pc, r1, #1
    1ac0:	02000000 	andeq	r0, r0, #0
    1ac4:	13007291 	movwne	r7, #657	; 0x291
    1ac8:	00001335 	andeq	r1, r0, r5, lsr r3
    1acc:	fc01e001 	stc2	0, cr14, [r1], {1}
    1ad0:	1e200014 	miane	acc0, r4, r0
    1ad4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ad8:	0003aa9c 	muleq	r3, ip, sl
    1adc:	13401400 	movtne	r1, #1024	; 0x400
    1ae0:	e0010000 	and	r0, r1, r0
    1ae4:	00033a01 	andeq	r3, r3, r1, lsl #20
    1ae8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1aec:	0012e314 	andseq	lr, r2, r4, lsl r3
    1af0:	01e00100 	mvneq	r0, r0, lsl #2
    1af4:	000000a2 	andeq	r0, r0, r2, lsr #1
    1af8:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1afc:	0011ff13 	andseq	pc, r1, r3, lsl pc	; <UNPREDICTABLE>
    1b00:	01c70100 	biceq	r0, r7, r0, lsl #2
    1b04:	200014c2 	andcs	r1, r0, r2, asr #9
    1b08:	0000003a 	andeq	r0, r0, sl, lsr r0
    1b0c:	03ee9c01 	mvneq	r9, #256	; 0x100
    1b10:	40140000 	andsmi	r0, r4, r0
    1b14:	01000013 	tsteq	r0, r3, lsl r0
    1b18:	033a01c7 	teqeq	sl, #-1073741775	; 0xc0000031
    1b1c:	91020000 	mrsls	r0, (UNDEF: 2)
    1b20:	0e7d1474 	mrceq	4, 3, r1, cr13, cr4, {3}
    1b24:	c7010000 	strgt	r0, [r1, -r0]
    1b28:	0000a201 	andeq	sl, r0, r1, lsl #4
    1b2c:	72910200 	addsvc	r0, r1, #0, 4
    1b30:	0011ee14 	andseq	lr, r1, r4, lsl lr
    1b34:	01c70100 	biceq	r0, r7, r0, lsl #2
    1b38:	0000027d 	andeq	r0, r0, sp, ror r2
    1b3c:	00719102 	rsbseq	r9, r1, r2, lsl #2
    1b40:	00122413 	andseq	r2, r2, r3, lsl r4
    1b44:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    1b48:	200014a4 	andcs	r1, r0, r4, lsr #9
    1b4c:	0000001e 	andeq	r0, r0, lr, lsl r0
    1b50:	04239c01 	strteq	r9, [r3], #-3073	; 0xfffff3ff
    1b54:	40140000 	andsmi	r0, r4, r0
    1b58:	01000013 	tsteq	r0, r3, lsl r0
    1b5c:	033a01b1 	teqeq	sl, #1073741868	; 0x4000002c
    1b60:	91020000 	mrsls	r0, (UNDEF: 2)
    1b64:	0e7d1474 	mrceq	4, 3, r1, cr13, cr4, {3}
    1b68:	b1010000 	mrslt	r0, (UNDEF: 1)
    1b6c:	0000a201 	andeq	sl, r0, r1, lsl #4
    1b70:	72910200 	addsvc	r0, r1, #0, 4
    1b74:	120d1300 	andne	r1, sp, #0, 6
    1b78:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b7c:	00148601 	andseq	r8, r4, r1, lsl #12
    1b80:	00001e20 	andeq	r1, r0, r0, lsr #28
    1b84:	589c0100 	ldmpl	ip, {r8}
    1b88:	14000004 	strne	r0, [r0], #-4
    1b8c:	00001340 	andeq	r1, r0, r0, asr #6
    1b90:	3a019c01 	bcc	68b9c <startup-0x1ff97464>
    1b94:	02000003 	andeq	r0, r0, #3
    1b98:	7d147491 	cfldrsvc	mvf7, [r4, #-580]	; 0xfffffdbc
    1b9c:	0100000e 	tsteq	r0, lr
    1ba0:	00a2019c 	umlaleq	r0, r2, ip, r1
    1ba4:	91020000 	mrsls	r0, (UNDEF: 2)
    1ba8:	bd170072 	ldclt	0, cr0, [r7, #-456]	; 0xfffffe38
    1bac:	01000011 	tsteq	r0, r1, lsl r0
    1bb0:	00a20188 	adceq	r0, r2, r8, lsl #3
    1bb4:	14700000 	ldrbtne	r0, [r0], #-0
    1bb8:	00162000 	andseq	r2, r6, r0
    1bbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bc0:	00000482 	andeq	r0, r0, r2, lsl #9
    1bc4:	00134014 	andseq	r4, r3, r4, lsl r0
    1bc8:	01880100 	orreq	r0, r8, r0, lsl #2
    1bcc:	0000033a 	andeq	r0, r0, sl, lsr r3
    1bd0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1bd4:	00136e17 	andseq	r6, r3, r7, lsl lr
    1bd8:	016e0100 	cmneq	lr, r0, lsl #2
    1bdc:	00000097 	muleq	r0, r7, r0
    1be0:	2000142e 	andcs	r1, r0, lr, lsr #8
    1be4:	00000042 	andeq	r0, r0, r2, asr #32
    1be8:	04ca9c01 	strbeq	r9, [sl], #3073	; 0xc01
    1bec:	40140000 	andsmi	r0, r4, r0
    1bf0:	01000013 	tsteq	r0, r3, lsl r0
    1bf4:	033a016e 	teqeq	sl, #-2147483621	; 0x8000001b
    1bf8:	91020000 	mrsls	r0, (UNDEF: 2)
    1bfc:	0e7d146c 	cdpeq	4, 7, cr1, cr13, cr12, {3}
    1c00:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1c04:	0000a201 	andeq	sl, r0, r1, lsl #4
    1c08:	6a910200 	bvs	fe442410 <_global_impure_ptr+0xde43d2f4>
    1c0c:	000f3515 	andeq	r3, pc, r5, lsl r5	; <UNPREDICTABLE>
    1c10:	01700100 	cmneq	r0, r0, lsl #2
    1c14:	00000097 	muleq	r0, r7, r0
    1c18:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1c1c:	0012fa17 	andseq	pc, r2, r7, lsl sl	; <UNPREDICTABLE>
    1c20:	015d0100 	cmpeq	sp, r0, lsl #2
    1c24:	000000a2 	andeq	r0, r0, r2, lsr #1
    1c28:	20001418 	andcs	r1, r0, r8, lsl r4
    1c2c:	00000016 	andeq	r0, r0, r6, lsl r0
    1c30:	04f49c01 	ldrbteq	r9, [r4], #3073	; 0xc01
    1c34:	40140000 	andsmi	r0, r4, r0
    1c38:	01000013 	tsteq	r0, r3, lsl r0
    1c3c:	033a015d 	teqeq	sl, #1073741847	; 0x40000017
    1c40:	91020000 	mrsls	r0, (UNDEF: 2)
    1c44:	bd170074 	ldclt	0, cr0, [r7, #-464]	; 0xfffffe30
    1c48:	01000012 	tsteq	r0, r2, lsl r0
    1c4c:	00970143 	addseq	r0, r7, r3, asr #2
    1c50:	13d60000 	bicsne	r0, r6, #0
    1c54:	00422000 	subeq	r2, r2, r0
    1c58:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c5c:	0000053c 	andeq	r0, r0, ip, lsr r5
    1c60:	00134014 	andseq	r4, r3, r4, lsl r0
    1c64:	01430100 	mrseq	r0, (UNDEF: 83)
    1c68:	0000033a 	andeq	r0, r0, sl, lsr r3
    1c6c:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1c70:	00000e7d 	andeq	r0, r0, sp, ror lr
    1c74:	a2014301 	andge	r4, r1, #67108864	; 0x4000000
    1c78:	02000000 	andeq	r0, r0, #0
    1c7c:	35156a91 	ldrcc	r6, [r5, #-2705]	; 0xfffff56f
    1c80:	0100000f 	tsteq	r0, pc
    1c84:	00970145 	addseq	r0, r7, r5, asr #2
    1c88:	91020000 	mrsls	r0, (UNDEF: 2)
    1c8c:	0d130077 	ldceq	0, cr0, [r3, #-476]	; 0xfffffe24
    1c90:	01000013 	tsteq	r0, r3, lsl r0
    1c94:	13900115 	orrsne	r0, r0, #1073741829	; 0x40000005
    1c98:	00462000 	subeq	r2, r6, r0
    1c9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ca0:	00000580 	andeq	r0, r0, r0, lsl #11
    1ca4:	00134014 	andseq	r4, r3, r4, lsl r0
    1ca8:	01150100 	tsteq	r5, r0, lsl #2
    1cac:	0000033a 	andeq	r0, r0, sl, lsr r3
    1cb0:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1cb4:	00000e7d 	andeq	r0, r0, sp, ror lr
    1cb8:	a2011501 	andge	r1, r1, #4194304	; 0x400000
    1cbc:	02000000 	andeq	r0, r0, #0
    1cc0:	74186a91 	ldrvc	r6, [r8], #-2705	; 0xfffff56f
    1cc4:	0100706d 	tsteq	r0, sp, rrx
    1cc8:	00cd0117 	sbceq	r0, sp, r7, lsl r1
    1ccc:	91020000 	mrsls	r0, (UNDEF: 2)
    1cd0:	de190074 	mrcle	0, 0, r0, cr9, cr4, {3}
    1cd4:	01000011 	tsteq	r0, r1, lsl r0
    1cd8:	00135cfe 			; <UNDEFINED> instruction: 0x00135cfe
    1cdc:	00003420 	andeq	r3, r0, r0, lsr #8
    1ce0:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    1ce4:	1a000005 	bne	1d00 <startup-0x1fffe300>
    1ce8:	000012d3 	ldrdeq	r1, [r0], -r3
    1cec:	05a4fe01 	streq	pc, [r4, #3585]!	; 0xe01
    1cf0:	91020000 	mrsls	r0, (UNDEF: 2)
    1cf4:	04160074 	ldreq	r0, [r6], #-116	; 0xffffff8c
    1cf8:	000002cd 	andeq	r0, r0, sp, asr #5
    1cfc:	00121a19 	andseq	r1, r2, r9, lsl sl
    1d00:	44ca0100 	strbmi	r0, [sl], #256	; 0x100
    1d04:	18200012 	stmdane	r0!, {r1, r4}
    1d08:	01000001 	tsteq	r0, r1
    1d0c:	0006069c 	muleq	r6, ip, r6
    1d10:	13401a00 	movtne	r1, #2560	; 0xa00
    1d14:	ca010000 	bgt	41d1c <startup-0x1ffbe2e4>
    1d18:	0000033a 	andeq	r0, r0, sl, lsr r3
    1d1c:	1a649102 	bne	192612c <startup-0x1e6d9ed4>
    1d20:	000012d3 	ldrdeq	r1, [r0], -r3
    1d24:	05a4ca01 	streq	ip, [r4, #2561]!	; 0xa01
    1d28:	91020000 	mrsls	r0, (UNDEF: 2)
    1d2c:	11ae1b60 			; <UNDEFINED> instruction: 0x11ae1b60
    1d30:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1d34:	000000c2 	andeq	r0, r0, r2, asr #1
    1d38:	1c749102 	ldfnep	f1, [r4], #-8
    1d3c:	00736f70 	rsbseq	r6, r3, r0, ror pc
    1d40:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
    1d44:	91020000 	mrsls	r0, (UNDEF: 2)
    1d48:	132a1b70 			; <UNDEFINED> instruction: 0x132a1b70
    1d4c:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1d50:	000000c2 	andeq	r0, r0, r2, asr #1
    1d54:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1d58:	0012b11d 	andseq	fp, r2, sp, lsl r1
    1d5c:	d47f0100 	ldrbtle	r0, [pc], #-256	; 1d64 <startup-0x1fffe29c>
    1d60:	70200010 	eorvc	r0, r0, r0, lsl r0
    1d64:	01000001 	tsteq	r0, r1
    1d68:	13401a9c 	movtne	r1, #2716	; 0xa9c
    1d6c:	7f010000 	svcvc	0x00010000
    1d70:	0000033a 	andeq	r0, r0, sl, lsr r3
    1d74:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1d78:	00054300 	andeq	r4, r5, r0, lsl #6
    1d7c:	b1000400 	tstlt	r0, r0, lsl #8
    1d80:	04000004 	streq	r0, [r0], #-4
    1d84:	0005de01 	andeq	sp, r5, r1, lsl #28
    1d88:	14a30c00 	strtne	r0, [r3], #3072	; 0xc00
    1d8c:	053e0000 	ldreq	r0, [lr, #-0]!
    1d90:	15e40000 	strbne	r0, [r4, #0]!
    1d94:	01c42000 	biceq	r2, r4, r0
    1d98:	07350000 	ldreq	r0, [r5, -r0]!
    1d9c:	01020000 	mrseq	r0, (UNDEF: 2)
    1da0:	0003eb06 	andeq	lr, r3, r6, lsl #22
    1da4:	01c30300 	biceq	r0, r3, r0, lsl #6
    1da8:	2b020000 	blcs	81db0 <startup-0x1ff7e250>
    1dac:	00000037 	andeq	r0, r0, r7, lsr r0
    1db0:	e9080102 	stmdb	r8, {r1, r8}
    1db4:	02000003 	andeq	r0, r0, #3
    1db8:	0eef0502 	cdpeq	5, 14, cr0, cr15, cr2, {0}
    1dbc:	02020000 	andeq	r0, r2, #0
    1dc0:	00106d07 	andseq	r6, r0, r7, lsl #26
    1dc4:	11120300 	tstne	r2, r0, lsl #6
    1dc8:	4d020000 	stcmi	0, cr0, [r2, #-0]
    1dcc:	00000057 	andeq	r0, r0, r7, asr r0
    1dd0:	82050402 	andhi	r0, r5, #33554432	; 0x2000000
    1dd4:	03000009 	movweq	r0, #9
    1dd8:	0000092b 	andeq	r0, r0, fp, lsr #18
    1ddc:	00694f02 	rsbeq	r4, r9, r2, lsl #30
    1de0:	04020000 	streq	r0, [r2], #-0
    1de4:	000cc807 	andeq	ip, ip, r7, lsl #16
    1de8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    1dec:	0000097d 	andeq	r0, r0, sp, ror r9
    1df0:	c3070802 	movwgt	r0, #30722	; 0x7802
    1df4:	0400000c 	streq	r0, [r0], #-12
    1df8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1dfc:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1e00:	000ccd07 	andeq	ip, ip, r7, lsl #26
    1e04:	01c50300 	biceq	r0, r5, r0, lsl #6
    1e08:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    1e0c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1e10:	00008c05 	andeq	r8, r0, r5, lsl #24
    1e14:	11140300 	tstne	r4, r0, lsl #6
    1e18:	2c030000 	stccs	0, cr0, [r3], {-0}
    1e1c:	0000004c 	andeq	r0, r0, ip, asr #32
    1e20:	00009c05 	andeq	r9, r0, r5, lsl #24
    1e24:	092d0300 	pusheq	{r8, r9}
    1e28:	30030000 	andcc	r0, r3, r0
    1e2c:	0000005e 	andeq	r0, r0, lr, asr r0
    1e30:	0000ac05 	andeq	sl, r0, r5, lsl #24
    1e34:	00b70600 	adcseq	r0, r7, r0, lsl #12
    1e38:	04070000 	streq	r0, [r7], #-0
    1e3c:	01a0040e 	lsleq	r0, lr, #8
    1e40:	0000017d 	andeq	r0, r0, sp, ror r1
    1e44:	00113008 	andseq	r3, r1, r8
    1e48:	01a20400 			; <UNDEFINED> instruction: 0x01a20400
    1e4c:	0000018d 	andeq	r0, r0, sp, lsl #3
    1e50:	03d50800 	bicseq	r0, r5, #0, 16
    1e54:	a3040000 	movwge	r0, #16384	; 0x4000
    1e58:	00019201 	andeq	r9, r1, r1, lsl #4
    1e5c:	4d082000 	stcmi	0, cr2, [r8, #-0]
    1e60:	0400000d 	streq	r0, [r0], #-13
    1e64:	018d01a4 	orreq	r0, sp, r4, lsr #3
    1e68:	08800000 	stmeq	r0, {}	; <UNPREDICTABLE>
    1e6c:	00000005 	andeq	r0, r0, r5
    1e70:	9201a504 	andls	sl, r1, #4, 10	; 0x1000000
    1e74:	a0000001 	andge	r0, r0, r1
    1e78:	0010ae09 	andseq	sl, r0, r9, lsl #28
    1e7c:	01a60400 			; <UNDEFINED> instruction: 0x01a60400
    1e80:	0000018d 	andeq	r0, r0, sp, lsl #3
    1e84:	63090100 	movwvs	r0, #37120	; 0x9100
    1e88:	04000004 	streq	r0, [r0], #-4
    1e8c:	019201a7 	orrseq	r0, r2, r7, lsr #3
    1e90:	01200000 			; <UNDEFINED> instruction: 0x01200000
    1e94:	00016e09 	andeq	r6, r1, r9, lsl #28
    1e98:	01a80400 			; <UNDEFINED> instruction: 0x01a80400
    1e9c:	0000018d 	andeq	r0, r0, sp, lsl #3
    1ea0:	6d090180 	stfvss	f0, [r9, #-512]	; 0xfffffe00
    1ea4:	04000004 	streq	r0, [r0], #-4
    1ea8:	019201a9 	orrseq	r0, r2, r9, lsr #3
    1eac:	01a00000 	moveq	r0, r0
    1eb0:	00042709 	andeq	r2, r4, r9, lsl #14
    1eb4:	01aa0400 			; <UNDEFINED> instruction: 0x01aa0400
    1eb8:	0000018d 	andeq	r0, r0, sp, lsl #3
    1ebc:	09090200 	stmdbeq	r9, {r9}
    1ec0:	04000004 	streq	r0, [r0], #-4
    1ec4:	01a201ab 			; <UNDEFINED> instruction: 0x01a201ab
    1ec8:	02200000 	eoreq	r0, r0, #0
    1ecc:	0050490a 	subseq	r4, r0, sl, lsl #18
    1ed0:	c201ac04 	andgt	sl, r1, #4, 24	; 0x400
    1ed4:	00000001 	andeq	r0, r0, r1
    1ed8:	04130903 	ldreq	r0, [r3], #-2307	; 0xfffff6fd
    1edc:	ad040000 	stcge	0, cr0, [r4, #-0]
    1ee0:	0001c701 	andeq	ip, r1, r1, lsl #14
    1ee4:	0903f000 	stmdbeq	r3, {ip, sp, lr, pc}
    1ee8:	000006bd 			; <UNDEFINED> instruction: 0x000006bd
    1eec:	b701ae04 	strlt	sl, [r1, -r4, lsl #28]
    1ef0:	00000000 	andeq	r0, r0, r0
    1ef4:	b70b000e 	strlt	r0, [fp, -lr]
    1ef8:	8d000000 	stchi	0, cr0, [r0, #-0]
    1efc:	0c000001 	stceq	0, cr0, [r0], {1}
    1f00:	00000085 	andeq	r0, r0, r5, lsl #1
    1f04:	7d050007 	stcvc	0, cr0, [r5, #-28]	; 0xffffffe4
    1f08:	0b000001 	bleq	1f14 <startup-0x1fffe0ec>
    1f0c:	000000ac 	andeq	r0, r0, ip, lsr #1
    1f10:	000001a2 	andeq	r0, r0, r2, lsr #3
    1f14:	0000850c 	andeq	r8, r0, ip, lsl #10
    1f18:	0b001700 	bleq	7b20 <startup-0x1fff84e0>
    1f1c:	000000ac 	andeq	r0, r0, ip, lsr #1
    1f20:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    1f24:	0000850c 	andeq	r8, r0, ip, lsl #10
    1f28:	0b003700 	bleq	fb30 <startup-0x1fff04d0>
    1f2c:	00000097 	muleq	r0, r7, r0
    1f30:	000001c2 	andeq	r0, r0, r2, asr #3
    1f34:	0000850c 	andeq	r8, r0, ip, lsl #10
    1f38:	0500ef00 	streq	lr, [r0, #-3840]	; 0xfffff100
    1f3c:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    1f40:	0000ac0b 	andeq	sl, r0, fp, lsl #24
    1f44:	0001d800 	andeq	sp, r1, r0, lsl #16
    1f48:	00850d00 	addeq	r0, r5, r0, lsl #26
    1f4c:	02830000 	addeq	r0, r3, #0
    1f50:	0c830e00 	stceq	14, cr0, [r3], {0}
    1f54:	af040000 	svcge	0x00040000
    1f58:	0000c101 	andeq	ip, r0, r1, lsl #2
    1f5c:	048c0f00 	streq	r0, [ip], #3840	; 0xf00
    1f60:	02ff01c0 	rscseq	r0, pc, #192, 2	; 0x30
    1f64:	34080000 	strcc	r0, [r8], #-0
    1f68:	04000002 	streq	r0, [r0], #-2
    1f6c:	00bc01c2 	adcseq	r0, ip, r2, asr #3
    1f70:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1f74:	0000035d 	andeq	r0, r0, sp, asr r3
    1f78:	b701c304 	strlt	ip, [r1, -r4, lsl #6]
    1f7c:	04000000 	streq	r0, [r0], #-0
    1f80:	0000ac08 	andeq	sl, r0, r8, lsl #24
    1f84:	01c40400 	biceq	r0, r4, r0, lsl #8
    1f88:	000000b7 	strheq	r0, [r0], -r7
    1f8c:	02040808 	andeq	r0, r4, #8, 16	; 0x80000
    1f90:	c5040000 	strgt	r0, [r4, #-0]
    1f94:	0000b701 	andeq	fp, r0, r1, lsl #14
    1f98:	53100c00 	tstpl	r0, #0, 24
    1f9c:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    1fa0:	00b701c6 	adcseq	r0, r7, r6, asr #3
    1fa4:	10100000 	andsne	r0, r0, r0
    1fa8:	00524343 	subseq	r4, r2, r3, asr #6
    1fac:	b701c704 	strlt	ip, [r1, -r4, lsl #14]
    1fb0:	14000000 	strne	r0, [r0], #-0
    1fb4:	50485310 	subpl	r5, r8, r0, lsl r3
    1fb8:	01c80400 	biceq	r0, r8, r0, lsl #8
    1fbc:	0000030f 	andeq	r0, r0, pc, lsl #6
    1fc0:	06a60818 	ssateq	r0, #7, r8, lsl #16
    1fc4:	c9040000 	stmdbgt	r4, {}	; <UNPREDICTABLE>
    1fc8:	0000b701 	andeq	fp, r0, r1, lsl #14
    1fcc:	00082400 	andeq	r2, r8, r0, lsl #8
    1fd0:	0400000e 	streq	r0, [r0], #-14
    1fd4:	00b701ca 	adcseq	r0, r7, sl, asr #3
    1fd8:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    1fdc:	00000581 	andeq	r0, r0, r1, lsl #11
    1fe0:	b701cb04 	strlt	ip, [r1, -r4, lsl #22]
    1fe4:	2c000000 	stccs	0, cr0, [r0], {-0}
    1fe8:	0004b108 	andeq	fp, r4, r8, lsl #2
    1fec:	01cc0400 	biceq	r0, ip, r0, lsl #8
    1ff0:	000000b7 	strheq	r0, [r0], -r7
    1ff4:	0ee90830 	mcreq	8, 7, r0, cr9, cr0, {1}
    1ff8:	cd040000 	stcgt	0, cr0, [r4, #-0]
    1ffc:	0000b701 	andeq	fp, r0, r1, lsl #14
    2000:	4f083400 	svcmi	0x00083400
    2004:	0400000b 	streq	r0, [r0], #-11
    2008:	00b701ce 	adcseq	r0, r7, lr, asr #3
    200c:	08380000 	ldmdaeq	r8!, {}	; <UNPREDICTABLE>
    2010:	00000dc9 	andeq	r0, r0, r9, asr #27
    2014:	b701cf04 	strlt	ip, [r1, -r4, lsl #30]
    2018:	3c000000 	stccc	0, cr0, [r0], {-0}
    201c:	52465010 	subpl	r5, r6, #16
    2020:	01d00400 	bicseq	r0, r0, r0, lsl #8
    2024:	00000329 	andeq	r0, r0, r9, lsr #6
    2028:	46441040 	strbmi	r1, [r4], -r0, asr #32
    202c:	d1040052 	qaddle	r0, r2, r4
    2030:	0000bc01 	andeq	fp, r0, r1, lsl #24
    2034:	41104800 	tstmi	r0, r0, lsl #16
    2038:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    203c:	00bc01d2 	ldrsbteq	r0, [ip], r2
    2040:	084c0000 	stmdaeq	ip, {}^	; <UNPREDICTABLE>
    2044:	00000ed8 	ldrdeq	r0, [r0], -r8
    2048:	4301d304 	movwmi	sp, #4868	; 0x1304
    204c:	50000003 	andpl	r0, r0, r3
    2050:	000f1208 	andeq	r1, pc, r8, lsl #4
    2054:	01d40400 	bicseq	r0, r4, r0, lsl #8
    2058:	0000035d 	andeq	r0, r0, sp, asr r3
    205c:	03d50860 	bicseq	r0, r5, #96, 16	; 0x600000
    2060:	d5040000 	strle	r0, [r4, #-0]
    2064:	00036201 	andeq	r6, r3, r1, lsl #4
    2068:	a8087400 	stmdage	r8, {sl, ip, sp, lr}
    206c:	04000010 	streq	r0, [r0], #-16
    2070:	00b701d6 	ldrsbteq	r0, [r7], r6
    2074:	00880000 	addeq	r0, r8, r0
    2078:	0000970b 	andeq	r9, r0, fp, lsl #14
    207c:	00030f00 	andeq	r0, r3, r0, lsl #30
    2080:	00850c00 	addeq	r0, r5, r0, lsl #24
    2084:	000b0000 	andeq	r0, fp, r0
    2088:	0002ff05 	andeq	pc, r2, r5, lsl #30
    208c:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    2090:	03240000 			; <UNDEFINED> instruction: 0x03240000
    2094:	850c0000 	strhi	r0, [ip, #-0]
    2098:	01000000 	mrseq	r0, (UNDEF: 0)
    209c:	03140600 	tsteq	r4, #0, 12
    20a0:	24050000 	strcs	r0, [r5], #-0
    20a4:	0b000003 	bleq	20b8 <startup-0x1fffdf48>
    20a8:	000000bc 	strheq	r0, [r0], -ip
    20ac:	0000033e 	andeq	r0, r0, lr, lsr r3
    20b0:	0000850c 	andeq	r8, r0, ip, lsl #10
    20b4:	06000300 	streq	r0, [r0], -r0, lsl #6
    20b8:	0000032e 	andeq	r0, r0, lr, lsr #6
    20bc:	00033e05 	andeq	r3, r3, r5, lsl #28
    20c0:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    20c4:	03580000 	cmpeq	r8, #0
    20c8:	850c0000 	strhi	r0, [ip, #-0]
    20cc:	04000000 	streq	r0, [r0], #-0
    20d0:	03480600 	movteq	r0, #34304	; 0x8600
    20d4:	58050000 	stmdapl	r5, {}	; <UNPREDICTABLE>
    20d8:	0b000003 	bleq	20ec <startup-0x1fffdf14>
    20dc:	000000ac 	andeq	r0, r0, ip, lsr #1
    20e0:	00000372 	andeq	r0, r0, r2, ror r3
    20e4:	0000850c 	andeq	r8, r0, ip, lsl #10
    20e8:	0e000400 	cfcpyseq	mvf0, mvf0
    20ec:	00000497 	muleq	r0, r7, r4
    20f0:	e401d704 	str	sp, [r1], #-1796	; 0xfffff8fc
    20f4:	0f000001 	svceq	0x00000001
    20f8:	02bf0410 	adcseq	r0, pc, #16, 8	; 0x10000000
    20fc:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    2100:	000aba08 	andeq	fp, sl, r8, lsl #20
    2104:	02c10400 	sbceq	r0, r1, #0, 8
    2108:	000000b7 	strheq	r0, [r0], -r7
    210c:	0e540800 	cdpeq	8, 5, cr0, cr4, cr0, {0}
    2110:	c2040000 	andgt	r0, r4, #0
    2114:	0000b702 	andeq	fp, r0, r2, lsl #14
    2118:	56100400 	ldrpl	r0, [r0], -r0, lsl #8
    211c:	04004c41 	streq	r4, [r0], #-3137	; 0xfffff3bf
    2120:	00b702c3 	adcseq	r0, r7, r3, asr #5
    2124:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    2128:	00000dd5 	ldrdeq	r0, [r0], -r5
    212c:	bc02c404 	cfstrslt	mvf12, [r2], {4}
    2130:	0c000000 	stceq	0, cr0, [r0], {-0}
    2134:	0be30e00 	bleq	ff8c593c <_global_impure_ptr+0xdf8c0820>
    2138:	c5040000 	strgt	r0, [r4, #-0]
    213c:	00037e02 	andeq	r7, r3, r2, lsl #28
    2140:	0f8a1100 	svceq	0x008a1100
    2144:	fa040000 	blx	10214c <startup-0x1fefdeb4>
    2148:	0000a706 	andeq	sl, r0, r6, lsl #14
    214c:	08371200 	ldmdaeq	r7!, {r9, ip}
    2150:	3b050000 	blcc	142158 <startup-0x1febdea8>
    2154:	000000ac 	andeq	r0, r0, ip, lsr #1
    2158:	37010713 	smladcc	r1, r3, r7, r0
    215c:	06000000 	streq	r0, [r0], -r0
    2160:	03fa035f 	mvnseq	r0, #2080374785	; 0x7c000001
    2164:	bb140000 	bllt	50216c <startup-0x1fafde94>
    2168:	00000009 	andeq	r0, r0, r9
    216c:	000f3f14 	andeq	r3, pc, r4, lsl pc	; <UNPREDICTABLE>
    2170:	0e000100 	adfeqs	f0, f0, f0
    2174:	00000c8d 	andeq	r0, r0, sp, lsl #25
    2178:	df035f06 	svcle	0x00035f06
    217c:	15000003 	strne	r0, [r0, #-3]
    2180:	3f360704 	svccc	0x00360704
    2184:	16000004 	strne	r0, [r0], -r4
    2188:	00001449 	andeq	r1, r0, r9, asr #8
    218c:	008c3807 	addeq	r3, ip, r7, lsl #16
    2190:	16000000 	strne	r0, [r0], -r0
    2194:	00001474 	andeq	r1, r0, r4, ror r4
    2198:	008c3d07 	addeq	r3, ip, r7, lsl #26
    219c:	16010000 	strne	r0, [r1], -r0
    21a0:	00001459 	andeq	r1, r0, r9, asr r4
    21a4:	008c4207 	addeq	r4, ip, r7, lsl #4
    21a8:	16020000 	strne	r0, [r2], -r0
    21ac:	00001396 	muleq	r0, r6, r3
    21b0:	03fa4707 	mvnseq	r4, #1835008	; 0x1c0000
    21b4:	00030000 	andeq	r0, r3, r0
    21b8:	00138503 	andseq	r8, r3, r3, lsl #10
    21bc:	064a0700 	strbeq	r0, [sl], -r0, lsl #14
    21c0:	17000004 	strne	r0, [r0, -r4]
    21c4:	00001425 	andeq	r1, r0, r5, lsr #8
    21c8:	1774df01 	ldrbne	sp, [r4, -r1, lsl #30]!
    21cc:	00342000 	eorseq	r2, r4, r0
    21d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    21d4:	0000046e 	andeq	r0, r0, lr, ror #8
    21d8:	0013a918 	andseq	sl, r3, r8, lsl r9
    21dc:	acdf0100 	ldfgee	f0, [pc], {0}
    21e0:	02000000 	andeq	r0, r0, #0
    21e4:	17007491 			; <UNDEFINED> instruction: 0x17007491
    21e8:	00001411 	andeq	r1, r0, r1, lsl r4
    21ec:	172cc701 	strne	ip, [ip, -r1, lsl #14]!
    21f0:	00482000 	subeq	r2, r8, r0
    21f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    21f8:	000004a0 	andeq	r0, r0, r0, lsr #9
    21fc:	00151718 	andseq	r1, r5, r8, lsl r7
    2200:	8cc70100 	stfhie	f0, [r7], {0}
    2204:	02000000 	andeq	r0, r0, #0
    2208:	cd187791 	ldcgt	7, cr7, [r8, #-580]	; 0xfffffdbc
    220c:	0100000a 	tsteq	r0, sl
    2210:	0003fac7 	andeq	pc, r3, r7, asr #21
    2214:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2218:	13f61700 	mvnsne	r1, #0, 14
    221c:	b4010000 	strlt	r0, [r1], #-0
    2220:	20001700 	andcs	r1, r0, r0, lsl #14
    2224:	0000002c 	andeq	r0, r0, ip, lsr #32
    2228:	04d29c01 	ldrbeq	r9, [r2], #3073	; 0xc01
    222c:	96180000 	ldrls	r0, [r8], -r0
    2230:	01000014 	tsteq	r0, r4, lsl r0
    2234:	0000acb4 			; <UNDEFINED> instruction: 0x0000acb4
    2238:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    223c:	0013ef18 	andseq	lr, r3, r8, lsl pc
    2240:	acb40100 	ldfges	f0, [r4]
    2244:	02000000 	andeq	r0, r0, #0
    2248:	17007091 			; <UNDEFINED> instruction: 0x17007091
    224c:	000013de 	ldrdeq	r1, [r0], -lr
    2250:	16088801 	strne	r8, [r8], -r1, lsl #16
    2254:	00f82000 	rscseq	r2, r8, r0
    2258:	9c010000 	stcls	0, cr0, [r1], {-0}
    225c:	00000520 	andeq	r0, r0, r0, lsr #10
    2260:	0013bb18 	andseq	fp, r3, r8, lsl fp
    2264:	20880100 	addcs	r0, r8, r0, lsl #2
    2268:	02000005 	andeq	r0, r0, #5
    226c:	3d196491 	cfldrscc	mvf6, [r9, #-580]	; 0xfffffdbc
    2270:	01000014 	tsteq	r0, r4, lsl r0
    2274:	00008c8a 	andeq	r8, r0, sl, lsl #25
    2278:	6f910200 	svcvs	0x00910200
    227c:	0013e819 	andseq	lr, r3, r9, lsl r8
    2280:	8c8a0100 	stfhis	f0, [sl], {0}
    2284:	02000000 	andeq	r0, r0, #0
    2288:	0a196e91 	beq	65dcd4 <startup-0x1f9a232c>
    228c:	01000014 	tsteq	r0, r4, lsl r0
    2290:	00008c8a 	andeq	r8, r0, sl, lsl #25
    2294:	6d910200 	lfmvs	f0, 4, [r1]
    2298:	3f041a00 	svccc	0x00041a00
    229c:	1b000004 	blne	22b4 <startup-0x1fffdd4c>
    22a0:	00001524 	andeq	r1, r0, r4, lsr #10
    22a4:	15e47601 	strbne	r7, [r4, #1537]!	; 0x601
    22a8:	00242000 	eoreq	r2, r4, r0
    22ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    22b0:	0013cb18 	andseq	ip, r3, r8, lsl fp
    22b4:	ac760100 	ldfgee	f0, [r6], #-0
    22b8:	02000000 	andeq	r0, r0, #0
    22bc:	00007491 	muleq	r0, r1, r4
    22c0:	00000169 	andeq	r0, r0, r9, ror #2
    22c4:	06250004 	strteq	r0, [r5], -r4
    22c8:	01040000 	mrseq	r0, (UNDEF: 4)
    22cc:	000005de 	ldrdeq	r0, [r0], -lr
    22d0:	0015470c 	andseq	r4, r5, ip, lsl #14
    22d4:	00053e00 	andeq	r3, r5, r0, lsl #28
    22d8:	0017a800 	andseq	sl, r7, r0, lsl #16
    22dc:	0000e820 	andeq	lr, r0, r0, lsr #16
    22e0:	00093300 	andeq	r3, r9, r0, lsl #6
    22e4:	06010200 	streq	r0, [r1], -r0, lsl #4
    22e8:	000003eb 	andeq	r0, r0, fp, ror #7
    22ec:	0001c303 	andeq	ip, r1, r3, lsl #6
    22f0:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    22f4:	02000000 	andeq	r0, r0, #0
    22f8:	03e90801 	mvneq	r0, #65536	; 0x10000
    22fc:	02020000 	andeq	r0, r2, #0
    2300:	000eef05 	andeq	lr, lr, r5, lsl #30
    2304:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2308:	0000106d 	andeq	r1, r0, sp, rrx
    230c:	82050402 	andhi	r0, r5, #33554432	; 0x2000000
    2310:	02000009 	andeq	r0, r0, #9
    2314:	0cc80704 	stcleq	7, cr0, [r8], {4}
    2318:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    231c:	00097d05 	andeq	r7, r9, r5, lsl #26
    2320:	07080200 	streq	r0, [r8, -r0, lsl #4]
    2324:	00000cc3 	andeq	r0, r0, r3, asr #25
    2328:	69050404 	stmdbvs	r5, {r2, sl}
    232c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    2330:	0ccd0704 	stcleq	7, cr0, [sp], {4}
    2334:	c5030000 	strgt	r0, [r3, #-0]
    2338:	03000001 	movweq	r0, #1
    233c:	00002c18 	andeq	r2, r0, r8, lsl ip
    2340:	04670500 	strbteq	r0, [r7], #-1280	; 0xfffffb00
    2344:	0000b90c 	andeq	fp, r0, ip, lsl #18
    2348:	159c0600 	ldrne	r0, [ip, #1536]	; 0x600
    234c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    2350:	000000b9 	strheq	r0, [r0], -r9
    2354:	1d490600 	stclne	6, cr0, [r9, #-0]
    2358:	11040000 	mrsne	r0, (UNDEF: 4)
    235c:	00000076 	andeq	r0, r0, r6, ror r0
    2360:	6e690764 	cdpvs	7, 6, cr0, cr9, cr4, {3}
    2364:	76140400 	ldrvc	r0, [r4], -r0, lsl #8
    2368:	65000000 	strvs	r0, [r0, #-0]
    236c:	74756f07 	ldrbtvc	r6, [r5], #-3847	; 0xfffff0f9
    2370:	76170400 	ldrvc	r0, [r7], -r0, lsl #8
    2374:	66000000 	strvs	r0, [r0], -r0
    2378:	00760800 	rsbseq	r0, r6, r0, lsl #16
    237c:	00c90000 	sbceq	r0, r9, r0
    2380:	6f090000 	svcvs	0x00090000
    2384:	63000000 	movwvs	r0, #0
    2388:	15920300 	ldrne	r0, [r2, #768]	; 0x300
    238c:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    2390:	00000081 	andeq	r0, r0, r1, lsl #1
    2394:	0015a60a 	andseq	sl, r5, sl, lsl #12
    2398:	761f0100 	ldrvc	r0, [pc], -r0, lsl #2
    239c:	32000000 	andcc	r0, r0, #0
    23a0:	5e200018 	miapl	acc0, r8, r0
    23a4:	01000000 	mrseq	r0, (UNDEF: 0)
    23a8:	00010a9c 	muleq	r1, ip, sl
    23ac:	15bb0b00 	ldrne	r0, [fp, #2816]!	; 0xb00
    23b0:	1f010000 	svcne	0x00010000
    23b4:	0000010a 	andeq	r0, r0, sl, lsl #2
    23b8:	0b749102 	bleq	1d267c8 <startup-0x1e2d9838>
    23bc:	00001597 	muleq	r0, r7, r5
    23c0:	01101f01 	tsteq	r0, r1, lsl #30
    23c4:	91020000 	mrsls	r0, (UNDEF: 2)
    23c8:	040c0070 	streq	r0, [ip], #-112	; 0xffffff90
    23cc:	000000c9 	andeq	r0, r0, r9, asr #1
    23d0:	0076040c 	rsbseq	r0, r6, ip, lsl #8
    23d4:	3d0a0000 	stccc	0, cr0, [sl, #-0]
    23d8:	01000015 	tsteq	r0, r5, lsl r0
    23dc:	0000760c 	andeq	r7, r0, ip, lsl #12
    23e0:	0017d000 	andseq	sp, r7, r0
    23e4:	00006220 	andeq	r6, r0, r0, lsr #4
    23e8:	4c9c0100 	ldfmis	f0, [ip], {0}
    23ec:	0b000001 	bleq	23f8 <startup-0x1fffdc08>
    23f0:	000015bb 			; <UNDEFINED> instruction: 0x000015bb
    23f4:	010a0c01 	tsteq	sl, r1, lsl #24
    23f8:	91020000 	mrsls	r0, (UNDEF: 2)
    23fc:	15a10b74 	strne	r0, [r1, #2932]!	; 0xb74
    2400:	0c010000 	stceq	0, cr0, [r1], {-0}
    2404:	00000076 	andeq	r0, r0, r6, ror r0
    2408:	00739102 	rsbseq	r9, r3, r2, lsl #2
    240c:	0015b00d 	andseq	fp, r5, sp
    2410:	a8040100 	stmdage	r4, {r8}
    2414:	28200017 	stmdacs	r0!, {r0, r1, r2, r4}
    2418:	01000000 	mrseq	r0, (UNDEF: 0)
    241c:	15bb0b9c 	ldrne	r0, [fp, #2972]!	; 0xb9c
    2420:	04010000 	streq	r0, [r1], #-0
    2424:	0000010a 	andeq	r0, r0, sl, lsl #2
    2428:	00749102 	rsbseq	r9, r4, r2, lsl #2
    242c:	0009cc00 	andeq	ip, r9, r0, lsl #24
    2430:	e5000400 	str	r0, [r0, #-1024]	; 0xfffffc00
    2434:	04000006 	streq	r0, [r0], #-6
    2438:	0005de01 	andeq	sp, r5, r1, lsl #28
    243c:	19930c00 	ldmibne	r3, {sl, fp}
    2440:	053e0000 	ldreq	r0, [lr, #-0]!
    2444:	18900000 	ldmne	r0, {}	; <UNPREDICTABLE>
    2448:	09fe2000 	ldmibeq	lr!, {sp}^
    244c:	0a680000 	beq	1a02454 <startup-0x1e5fdbac>
    2450:	01020000 	mrseq	r0, (UNDEF: 2)
    2454:	0003eb06 	andeq	lr, r3, r6, lsl #22
    2458:	01c30300 	biceq	r0, r3, r0, lsl #6
    245c:	2b020000 	blcs	82464 <startup-0x1ff7db9c>
    2460:	00000037 	andeq	r0, r0, r7, lsr r0
    2464:	e9080102 	stmdb	r8, {r1, r8}
    2468:	02000003 	andeq	r0, r0, #3
    246c:	0eef0502 	cdpeq	5, 14, cr0, cr15, cr2, {0}
    2470:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    2474:	02000004 	andeq	r0, r0, #4
    2478:	00005039 	andeq	r5, r0, r9, lsr r0
    247c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2480:	0000106d 	andeq	r1, r0, sp, rrx
    2484:	00111203 	andseq	r1, r1, r3, lsl #4
    2488:	624d0200 	subvs	r0, sp, #0, 4
    248c:	02000000 	andeq	r0, r0, #0
    2490:	09820504 	stmibeq	r2, {r2, r8, sl}
    2494:	2b030000 	blcs	c249c <startup-0x1ff3db64>
    2498:	02000009 	andeq	r0, r0, #9
    249c:	0000744f 	andeq	r7, r0, pc, asr #8
    24a0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    24a4:	00000cc8 	andeq	r0, r0, r8, asr #25
    24a8:	7d050802 	stcvc	8, cr0, [r5, #-8]
    24ac:	02000009 	andeq	r0, r0, #9
    24b0:	0cc30708 	stcleq	7, cr0, [r3], {8}
    24b4:	04040000 	streq	r0, [r4], #-0
    24b8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    24bc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    24c0:	00000ccd 	andeq	r0, r0, sp, asr #25
    24c4:	0001c503 	andeq	ip, r1, r3, lsl #10
    24c8:	2c180300 	ldccs	3, cr0, [r8], {-0}
    24cc:	03000000 	movweq	r0, #0
    24d0:	00000500 	andeq	r0, r0, r0, lsl #10
    24d4:	00452403 	subeq	r2, r5, r3, lsl #8
    24d8:	a2050000 	andge	r0, r5, #0
    24dc:	03000000 	movweq	r0, #0
    24e0:	00001114 	andeq	r1, r0, r4, lsl r1
    24e4:	00572c03 	subseq	r2, r7, r3, lsl #24
    24e8:	b2050000 	andlt	r0, r5, #0
    24ec:	03000000 	movweq	r0, #0
    24f0:	0000092d 	andeq	r0, r0, sp, lsr #18
    24f4:	00693003 	rsbeq	r3, r9, r3
    24f8:	8a060000 	bhi	182500 <startup-0x1fe7db00>
    24fc:	0400000f 	streq	r0, [r0], #-15
    2500:	00bd06fa 	ldrshteq	r0, [sp], sl
    2504:	37070000 	strcc	r0, [r7, -r0]
    2508:	05000008 	streq	r0, [r0, #-8]
    250c:	0000c23b 	andeq	ip, r0, fp, lsr r2
    2510:	01070800 	tsteq	r7, r0, lsl #16
    2514:	00000037 	andeq	r0, r0, r7, lsr r0
    2518:	ff035d06 			; <UNDEFINED> instruction: 0xff035d06
    251c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2520:	000011f9 	strdeq	r1, [r0], -r9
    2524:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xfffff600
    2528:	00010054 	andeq	r0, r1, r4, asr r0
    252c:	0009e50b 	andeq	lr, r9, fp, lsl #10
    2530:	035d0600 	cmpeq	sp, #0, 12
    2534:	000000e4 	andeq	r0, r0, r4, ror #1
    2538:	000aa60b 	andeq	sl, sl, fp, lsl #12
    253c:	035d0600 	cmpeq	sp, #0, 12
    2540:	000000e4 	andeq	r0, r0, r4, ror #1
    2544:	37010708 	strcc	r0, [r1, -r8, lsl #14]
    2548:	06000000 	streq	r0, [r0], -r0
    254c:	0132035f 	teqeq	r2, pc, asr r3
    2550:	bb090000 	bllt	242558 <startup-0x1fdbdaa8>
    2554:	00000009 	andeq	r0, r0, r9
    2558:	000f3f09 	andeq	r3, pc, r9, lsl #30
    255c:	0b000100 	bleq	2964 <startup-0x1fffd69c>
    2560:	00000c8d 	andeq	r0, r0, sp, lsl #25
    2564:	17035f06 	strne	r5, [r3, -r6, lsl #30]
    2568:	0c000001 	stceq	0, cr0, [r0], {1}
    256c:	0773061c 			; <UNDEFINED> instruction: 0x0773061c
    2570:	000001fc 	strdeq	r0, [r0], -ip
    2574:	0052530d 	subseq	r5, r2, sp, lsl #6
    2578:	ad077506 	cfstr32ge	mvfx7, [r7, #-24]	; 0xffffffe8
    257c:	00000000 	andeq	r0, r0, r0
    2580:	0003d50e 	andeq	sp, r3, lr, lsl #10
    2584:	07760600 	ldrbeq	r0, [r6, -r0, lsl #12]!
    2588:	000000a2 	andeq	r0, r0, r2, lsr #1
    258c:	52440d02 	subpl	r0, r4, #2, 26	; 0x80
    2590:	07770600 	ldrbeq	r0, [r7, -r0, lsl #12]!
    2594:	000000ad 	andeq	r0, r0, sp, lsr #1
    2598:	03df0e04 	bicseq	r0, pc, #4, 28	; 0x40
    259c:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    25a0:	0000a207 	andeq	sl, r0, r7, lsl #4
    25a4:	420d0600 	andmi	r0, sp, #0, 12
    25a8:	06005252 			; <UNDEFINED> instruction: 0x06005252
    25ac:	00ad0779 	adceq	r0, sp, r9, ror r7
    25b0:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    25b4:	00000463 	andeq	r0, r0, r3, ror #8
    25b8:	a2077a06 	andge	r7, r7, #24576	; 0x6000
    25bc:	0a000000 	beq	25c4 <startup-0x1fffda3c>
    25c0:	3152430d 	cmpcc	r2, sp, lsl #6
    25c4:	077b0600 	ldrbeq	r0, [fp, -r0, lsl #12]!
    25c8:	000000ad 	andeq	r0, r0, sp, lsr #1
    25cc:	046d0e0c 	strbteq	r0, [sp], #-3596	; 0xfffff1f4
    25d0:	7c060000 	stcvc	0, cr0, [r6], {-0}
    25d4:	0000a207 	andeq	sl, r0, r7, lsl #4
    25d8:	430d0e00 	movwmi	r0, #56832	; 0xde00
    25dc:	06003252 			; <UNDEFINED> instruction: 0x06003252
    25e0:	00ad077d 	adceq	r0, sp, sp, ror r7
    25e4:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    25e8:	00000409 	andeq	r0, r0, r9, lsl #8
    25ec:	a2077e06 	andge	r7, r7, #6, 28	; 0x60
    25f0:	12000000 	andne	r0, r0, #0
    25f4:	3352430d 	cmpcc	r2, #872415232	; 0x34000000
    25f8:	077f0600 	ldrbeq	r0, [pc, -r0, lsl #12]!
    25fc:	000000ad 	andeq	r0, r0, sp, lsr #1
    2600:	04130e14 	ldreq	r0, [r3], #-3604	; 0xfffff1ec
    2604:	80060000 	andhi	r0, r6, r0
    2608:	0000a207 	andeq	sl, r0, r7, lsl #4
    260c:	dc0e1600 	stcle	6, cr1, [lr], {-0}
    2610:	06000015 			; <UNDEFINED> instruction: 0x06000015
    2614:	00ad0781 	adceq	r0, sp, r1, lsl #15
    2618:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    261c:	0000041d 	andeq	r0, r0, sp, lsl r4
    2620:	a2078206 	andge	r8, r7, #1610612736	; 0x60000000
    2624:	1a000000 	bne	262c <startup-0x1fffd9d4>
    2628:	16480b00 	strbne	r0, [r8], -r0, lsl #22
    262c:	83060000 	movwhi	r0, #24576	; 0x6000
    2630:	00013e07 	andeq	r3, r1, r7, lsl #28
    2634:	07100f00 	ldreq	r0, [r0, -r0, lsl #30]
    2638:	00025936 	andeq	r5, r2, r6, lsr r9
    263c:	16ce1000 	strbne	r1, [lr], r0
    2640:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
    2644:	000000c2 	andeq	r0, r0, r2, asr #1
    2648:	16a21000 	strtne	r1, [r2], r0
    264c:	3e070000 	cdpcc	0, 0, cr0, cr7, cr0, {0}
    2650:	000000a2 	andeq	r0, r0, r2, lsr #1
    2654:	16561004 	ldrbne	r1, [r6], -r4
    2658:	41070000 	mrsmi	r0, (UNDEF: 7)
    265c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2660:	176c1006 	strbne	r1, [ip, -r6]!
    2664:	44070000 	strmi	r0, [r7], #-0
    2668:	000000a2 	andeq	r0, r0, r2, lsr #1
    266c:	18401008 	stmdane	r0, {r3, ip}^
    2670:	4b070000 	blmi	1c2678 <startup-0x1fe3d988>
    2674:	000000a2 	andeq	r0, r0, r2, lsr #1
    2678:	1813100a 	ldmdane	r3, {r1, r3, ip}
    267c:	4e070000 	cdpmi	0, 0, cr0, cr7, cr0, {0}
    2680:	000000a2 	andeq	r0, r0, r2, lsr #1
    2684:	de03000c 	cdple	0, 0, cr0, cr3, cr12, {0}
    2688:	07000017 	smladeq	r0, r7, r0, r0
    268c:	00020851 	andeq	r0, r2, r1, asr r8
    2690:	07080f00 	streq	r0, [r8, -r0, lsl #30]
    2694:	00029d57 	andeq	r9, r2, r7, asr sp
    2698:	18a71000 	stmiane	r7!, {ip}
    269c:	5a070000 	bpl	1c26a4 <startup-0x1fe3d95c>
    26a0:	000000a2 	andeq	r0, r0, r2, lsr #1
    26a4:	19811000 	stmibne	r1, {ip}
    26a8:	5d070000 	stcpl	0, cr0, [r7, #-0]
    26ac:	000000a2 	andeq	r0, r0, r2, lsr #1
    26b0:	15d11002 	ldrbne	r1, [r1, #2]
    26b4:	60070000 	andvs	r0, r7, r0
    26b8:	000000a2 	andeq	r0, r0, r2, lsr #1
    26bc:	16c01004 	strbne	r1, [r0], r4
    26c0:	63070000 	movwvs	r0, #28672	; 0x7000
    26c4:	000000a2 	andeq	r0, r0, r2, lsr #1
    26c8:	65030006 	strvs	r0, [r3, #-6]
    26cc:	07000016 	smladeq	r0, r6, r0, r0
    26d0:	00026466 	andeq	r6, r2, r6, ror #8
    26d4:	08100f00 	ldmdaeq	r0, {r8, r9, sl, fp}
    26d8:	0002e130 	andeq	lr, r2, r0, lsr r1
    26dc:	10b31000 	adcsne	r1, r3, r0
    26e0:	32080000 	andcc	r0, r8, #0
    26e4:	000000c2 	andeq	r0, r0, r2, asr #1
    26e8:	008c1000 	addeq	r1, ip, r0
    26ec:	33080000 	movwcc	r0, #32768	; 0x8000
    26f0:	000000c2 	andeq	r0, r0, r2, asr #1
    26f4:	059b1004 	ldreq	r1, [fp, #4]
    26f8:	34080000 	strcc	r0, [r8], #-0
    26fc:	000000c2 	andeq	r0, r0, r2, asr #1
    2700:	05111008 	ldreq	r1, [r1, #-8]
    2704:	35080000 	strcc	r0, [r8, #-0]
    2708:	000000c2 	andeq	r0, r0, r2, asr #1
    270c:	c603000c 	strgt	r0, [r3], -ip
    2710:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    2714:	0002a836 	andeq	sl, r2, r6, lsr r8
    2718:	16f51100 	ldrbtne	r1, [r5], r0, lsl #2
    271c:	ac010000 	stcge	0, cr0, [r1], {-0}
    2720:	00224605 	eoreq	r4, r2, r5, lsl #12
    2724:	00004820 	andeq	r4, r0, r0, lsr #16
    2728:	3f9c0100 	svccc	0x009c0100
    272c:	12000003 	andne	r0, r0, #3
    2730:	0000180c 	andeq	r1, r0, ip, lsl #16
    2734:	3f05ac01 	svccc	0x0005ac01
    2738:	02000003 	andeq	r0, r0, #3
    273c:	fe126c91 	mrc2	12, 0, r6, cr2, cr1, {4}
    2740:	01000018 	tsteq	r0, r8, lsl r0
    2744:	00a205ac 	adceq	r0, r2, ip, lsr #11
    2748:	91020000 	mrsls	r0, (UNDEF: 2)
    274c:	1859136a 	ldmdane	r9, {r1, r3, r5, r6, r8, r9, ip}^
    2750:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    2754:	0000a205 	andeq	sl, r0, r5, lsl #4
    2758:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    275c:	00198c13 	andseq	r8, r9, r3, lsl ip
    2760:	05ae0100 	streq	r0, [lr, #256]!	; 0x100
    2764:	000000a2 	andeq	r0, r0, r2, lsr #1
    2768:	00749102 	rsbseq	r9, r4, r2, lsl #2
    276c:	01fc0414 	mvnseq	r0, r4, lsl r4
    2770:	77150000 	ldrvc	r0, [r5, -r0]
    2774:	01000018 	tsteq	r0, r8, lsl r0
    2778:	010b0562 	tsteq	fp, r2, ror #10
    277c:	217c0000 	cmncs	ip, r0
    2780:	00ca2000 	sbceq	r2, sl, r0
    2784:	9c010000 	stcls	0, cr0, [r1], {-0}
    2788:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    278c:	00180c12 	andseq	r0, r8, r2, lsl ip
    2790:	05620100 	strbeq	r0, [r2, #-256]!	; 0xffffff00
    2794:	0000033f 	andeq	r0, r0, pc, lsr r3
    2798:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    279c:	000018fe 	strdeq	r1, [r0], -lr
    27a0:	a2056201 	andge	r6, r5, #268435456	; 0x10000000
    27a4:	02000000 	andeq	r0, r0, #0
    27a8:	59136291 	ldmdbpl	r3, {r0, r4, r7, r9, sp, lr}
    27ac:	01000018 	tsteq	r0, r8, lsl r0
    27b0:	00c20564 	sbceq	r0, r2, r4, ror #10
    27b4:	91020000 	mrsls	r0, (UNDEF: 2)
    27b8:	198c136c 	stmibne	ip, {r2, r3, r5, r6, r8, r9, ip}
    27bc:	64010000 	strvs	r0, [r1], #-0
    27c0:	0000c205 	andeq	ip, r0, r5, lsl #4
    27c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    27c8:	001a2413 	andseq	r2, sl, r3, lsl r4
    27cc:	05640100 	strbeq	r0, [r4, #-256]!	; 0xffffff00
    27d0:	000000c2 	andeq	r0, r0, r2, asr #1
    27d4:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    27d8:	00000f35 	andeq	r0, r0, r5, lsr pc
    27dc:	0b056501 	bleq	15bbe8 <startup-0x1fea4418>
    27e0:	02000001 	andeq	r0, r0, #1
    27e4:	11007391 			; <UNDEFINED> instruction: 0x11007391
    27e8:	0000179a 	muleq	r0, sl, r7
    27ec:	5a054001 	bpl	1527f8 <startup-0x1fead808>
    27f0:	22200021 	eorcs	r0, r0, #33	; 0x21
    27f4:	01000000 	mrseq	r0, (UNDEF: 0)
    27f8:	0003ef9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
    27fc:	180c1200 	stmdane	ip, {r9, ip}
    2800:	40010000 	andmi	r0, r1, r0
    2804:	00033f05 	andeq	r3, r3, r5, lsl #30
    2808:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    280c:	00173e12 	andseq	r3, r7, r2, lsl lr
    2810:	05400100 	strbeq	r0, [r0, #-256]	; 0xffffff00
    2814:	000000a2 	andeq	r0, r0, r2, lsr #1
    2818:	00729102 	rsbseq	r9, r2, r2, lsl #2
    281c:	0018ea15 	andseq	lr, r8, r5, lsl sl
    2820:	050f0100 	streq	r0, [pc, #-256]	; 2728 <startup-0x1fffd8d8>
    2824:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2828:	20002112 	andcs	r2, r0, r2, lsl r1
    282c:	00000048 	andeq	r0, r0, r8, asr #32
    2830:	04379c01 	ldrteq	r9, [r7], #-3073	; 0xfffff3ff
    2834:	0c120000 	ldceq	0, cr0, [r2], {-0}
    2838:	01000018 	tsteq	r0, r8, lsl r0
    283c:	033f050f 	teqeq	pc, #62914560	; 0x3c00000
    2840:	91020000 	mrsls	r0, (UNDEF: 2)
    2844:	173e126c 	ldrne	r1, [lr, -ip, ror #4]!
    2848:	0f010000 	svceq	0x00010000
    284c:	0000a205 	andeq	sl, r0, r5, lsl #4
    2850:	6a910200 	bvs	fe443058 <_global_impure_ptr+0xde43df3c>
    2854:	000f3513 	andeq	r3, pc, r3, lsl r5	; <UNPREDICTABLE>
    2858:	05110100 	ldreq	r0, [r1, #-256]	; 0xffffff00
    285c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2860:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2864:	0017f011 	andseq	pc, r7, r1, lsl r0	; <UNPREDICTABLE>
    2868:	04cf0100 	strbeq	r0, [pc], #256	; 2870 <startup-0x1fffd790>
    286c:	20002078 	andcs	r2, r0, r8, ror r0
    2870:	0000009a 	muleq	r0, sl, r0
    2874:	04b79c01 	ldrteq	r9, [r7], #3073	; 0xc01
    2878:	0c120000 	ldceq	0, cr0, [r2], {-0}
    287c:	01000018 	tsteq	r0, r8, lsl r0
    2880:	033f04cf 	teqeq	pc, #-822083584	; 0xcf000000
    2884:	91020000 	mrsls	r0, (UNDEF: 2)
    2888:	18fe1264 	ldmne	lr!, {r2, r5, r6, r9, ip}^
    288c:	cf010000 	svcgt	0x00010000
    2890:	0000a204 	andeq	sl, r0, r4, lsl #4
    2894:	62910200 	addsvs	r0, r1, #0, 4
    2898:	000acd12 	andeq	ip, sl, r2, lsl sp
    289c:	04cf0100 	strbeq	r0, [pc], #256	; 28a4 <startup-0x1fffd75c>
    28a0:	00000132 	andeq	r0, r0, r2, lsr r1
    28a4:	13619102 	cmnne	r1, #-2147483648	; 0x80000000
    28a8:	00001a24 	andeq	r1, r0, r4, lsr #20
    28ac:	c204d101 	andgt	sp, r4, #1073741824	; 0x40000000
    28b0:	02000000 	andeq	r0, r0, #0
    28b4:	5a137091 	bpl	4deb00 <startup-0x1fb21500>
    28b8:	01000018 	tsteq	r0, r8, lsl r0
    28bc:	00c204d1 	ldrdeq	r0, [r2], #65	; 0x41
    28c0:	91020000 	mrsls	r0, (UNDEF: 2)
    28c4:	198c136c 	stmibne	ip, {r2, r3, r5, r6, r8, r9, ip}
    28c8:	d1010000 	mrsle	r0, (UNDEF: 1)
    28cc:	0000c204 	andeq	ip, r0, r4, lsl #4
    28d0:	68910200 	ldmvs	r1, {r9}
    28d4:	00178f13 	andseq	r8, r7, r3, lsl pc
    28d8:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    28dc:	000000c2 	andeq	r0, r0, r2, asr #1
    28e0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    28e4:	0016b311 	andseq	fp, r6, r1, lsl r3
    28e8:	044b0100 	strbeq	r0, [fp], #-256	; 0xffffff00
    28ec:	20002026 	andcs	r2, r0, r6, lsr #32
    28f0:	00000052 	andeq	r0, r0, r2, asr r0
    28f4:	04fb9c01 	ldrbteq	r9, [fp], #3073	; 0xc01
    28f8:	0c120000 	ldceq	0, cr0, [r2], {-0}
    28fc:	01000018 	tsteq	r0, r8, lsl r0
    2900:	033f044b 	teqeq	pc, #1258291200	; 0x4b000000
    2904:	91020000 	mrsls	r0, (UNDEF: 2)
    2908:	17ff1274 			; <UNDEFINED> instruction: 0x17ff1274
    290c:	4b010000 	blmi	42914 <startup-0x1ffbd6ec>
    2910:	0000a204 	andeq	sl, r0, r4, lsl #4
    2914:	72910200 	addsvc	r0, r1, #0, 4
    2918:	000acd12 	andeq	ip, sl, r2, lsl sp
    291c:	044b0100 	strbeq	r0, [fp], #-256	; 0xffffff00
    2920:	00000132 	andeq	r0, r0, r2, lsr r1
    2924:	00719102 	rsbseq	r9, r1, r2, lsl #2
    2928:	0018b311 	andseq	fp, r8, r1, lsl r3
    292c:	041d0100 	ldreq	r0, [sp], #-256	; 0xffffff00
    2930:	20001fe6 	andcs	r1, r0, r6, ror #31
    2934:	00000040 	andeq	r0, r0, r0, asr #32
    2938:	05309c01 	ldreq	r9, [r0, #-3073]!	; 0xfffff3ff
    293c:	0c120000 	ldceq	0, cr0, [r2], {-0}
    2940:	01000018 	tsteq	r0, r8, lsl r0
    2944:	033f041d 	teqeq	pc, #486539264	; 0x1d000000
    2948:	91020000 	mrsls	r0, (UNDEF: 2)
    294c:	0acd1274 	beq	ff347324 <_global_impure_ptr+0xdf342208>
    2950:	1d010000 	stcne	0, cr0, [r1, #-0]
    2954:	00013204 	andeq	r3, r1, r4, lsl #4
    2958:	73910200 	orrsvc	r0, r1, #0, 4
    295c:	18961100 	ldmne	r6, {r8, ip}
    2960:	0b010000 	bleq	42968 <startup-0x1ffbd698>
    2964:	001fae04 	andseq	sl, pc, r4, lsl #28
    2968:	00003820 	andeq	r3, r0, r0, lsr #16
    296c:	659c0100 	ldrvs	r0, [ip, #256]	; 0x100
    2970:	12000005 	andne	r0, r0, #5
    2974:	0000180c 	andeq	r1, r0, ip, lsl #16
    2978:	3f040b01 	svccc	0x00040b01
    297c:	02000003 	andeq	r0, r0, #3
    2980:	dd127491 	cfldrsle	mvf7, [r2, #-580]	; 0xfffffdbc
    2984:	01000016 	tsteq	r0, r6, lsl r0
    2988:	00a2040b 	adceq	r0, r2, fp, lsl #8
    298c:	91020000 	mrsls	r0, (UNDEF: 2)
    2990:	d3110072 	tstle	r1, #114	; 0x72
    2994:	01000018 	tsteq	r0, r8, lsl r0
    2998:	1f6e03c4 	svcne	0x006e03c4
    299c:	00402000 	subeq	r2, r0, r0
    29a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    29a4:	0000059a 	muleq	r0, sl, r5
    29a8:	00180c12 	andseq	r0, r8, r2, lsl ip
    29ac:	03c40100 	biceq	r0, r4, #0, 2
    29b0:	0000033f 	andeq	r0, r0, pc, lsr r3
    29b4:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    29b8:	00000acd 	andeq	r0, r0, sp, asr #21
    29bc:	3203c401 	andcc	ip, r3, #16777216	; 0x1000000
    29c0:	02000001 	andeq	r0, r0, #1
    29c4:	11007391 			; <UNDEFINED> instruction: 0x11007391
    29c8:	0000182d 	andeq	r1, r0, sp, lsr #16
    29cc:	2e03ab01 	vmlacs.f64	d10, d3, d1
    29d0:	4020001f 	eormi	r0, r0, pc, lsl r0
    29d4:	01000000 	mrseq	r0, (UNDEF: 0)
    29d8:	0005cf9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    29dc:	180c1200 	stmdane	ip, {r9, ip}
    29e0:	ab010000 	blge	429e8 <startup-0x1ffbd618>
    29e4:	00033f03 	andeq	r3, r3, r3, lsl #30
    29e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    29ec:	000acd12 	andeq	ip, sl, r2, lsl sp
    29f0:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    29f4:	00000132 	andeq	r0, r0, r2, lsr r1
    29f8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    29fc:	0017bb11 	andseq	fp, r7, r1, lsl fp
    2a00:	03980100 	orrseq	r0, r8, #0, 2
    2a04:	20001ef0 	strdcs	r1, [r0], -r0
    2a08:	0000003e 	andeq	r0, r0, lr, lsr r0
    2a0c:	06049c01 	streq	r9, [r4], -r1, lsl #24
    2a10:	0c120000 	ldceq	0, cr0, [r2], {-0}
    2a14:	01000018 	tsteq	r0, r8, lsl r0
    2a18:	033f0398 	teqeq	pc, #152, 6	; 0x60000002
    2a1c:	91020000 	mrsls	r0, (UNDEF: 2)
    2a20:	170d1274 	smlsdxne	sp, r4, r2, r1
    2a24:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2a28:	00009703 	andeq	r9, r0, r3, lsl #14
    2a2c:	73910200 	orrsvc	r0, r1, #0, 4
    2a30:	194c1100 	stmdbne	ip, {r8, ip}^
    2a34:	44010000 	strmi	r0, [r1], #-0
    2a38:	001eb003 	andseq	fp, lr, r3
    2a3c:	00004020 	andeq	r4, r0, r0, lsr #32
    2a40:	399c0100 	ldmibcc	ip, {r8}
    2a44:	12000006 	andne	r0, r0, #6
    2a48:	0000180c 	andeq	r1, r0, ip, lsl #16
    2a4c:	3f034401 	svccc	0x00034401
    2a50:	02000003 	andeq	r0, r0, #3
    2a54:	cd127491 	cfldrsgt	mvf7, [r2, #-580]	; 0xfffffdbc
    2a58:	0100000a 	tsteq	r0, sl
    2a5c:	01320344 	teqeq	r2, r4, asr #6
    2a60:	91020000 	mrsls	r0, (UNDEF: 2)
    2a64:	ce110073 	mrcgt	0, 0, r0, cr1, cr3, {3}
    2a68:	01000017 	tsteq	r0, r7, lsl r0
    2a6c:	1e90030f 	cdpne	3, 9, cr0, cr0, cr15, {0}
    2a70:	00202000 	eoreq	r2, r0, r0
    2a74:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a78:	0000065f 	andeq	r0, r0, pc, asr r6
    2a7c:	00180c12 	andseq	r0, r8, r2, lsl ip
    2a80:	030f0100 	movweq	r0, #61696	; 0xf100
    2a84:	0000033f 	andeq	r0, r0, pc, lsr r3
    2a88:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2a8c:	00188911 	andseq	r8, r8, r1, lsl r9
    2a90:	02f70100 	rscseq	r0, r7, #0, 2
    2a94:	20001e48 	andcs	r1, r0, r8, asr #28
    2a98:	00000048 	andeq	r0, r0, r8, asr #32
    2a9c:	06949c01 	ldreq	r9, [r4], r1, lsl #24
    2aa0:	0c120000 	ldceq	0, cr0, [r2], {-0}
    2aa4:	01000018 	tsteq	r0, r8, lsl r0
    2aa8:	033f02f7 	teqeq	pc, #1879048207	; 0x7000000f
    2aac:	91020000 	mrsls	r0, (UNDEF: 2)
    2ab0:	0acd1274 	beq	ff347488 <_global_impure_ptr+0xdf34236c>
    2ab4:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    2ab8:	00013202 	andeq	r3, r1, r2, lsl #4
    2abc:	73910200 	orrsvc	r0, r1, #0, 4
    2ac0:	171d1100 	ldrne	r1, [sp, -r0, lsl #2]
    2ac4:	e5010000 	str	r0, [r1, #-0]
    2ac8:	001e1002 	andseq	r1, lr, r2
    2acc:	00003820 	andeq	r3, r0, r0, lsr #16
    2ad0:	c99c0100 	ldmibgt	ip, {r8}
    2ad4:	12000006 	andne	r0, r0, #6
    2ad8:	0000180c 	andeq	r1, r0, ip, lsl #16
    2adc:	3f02e501 	svccc	0x0002e501
    2ae0:	02000003 	andeq	r0, r0, #3
    2ae4:	17127491 			; <UNDEFINED> instruction: 0x17127491
    2ae8:	01000016 	tsteq	r0, r6, lsl r0
    2aec:	00a202e5 	adceq	r0, r2, r5, ror #5
    2af0:	91020000 	mrsls	r0, (UNDEF: 2)
    2af4:	39110072 	ldmdbcc	r1, {r1, r4, r5, r6}
    2af8:	01000019 	tsteq	r0, r9, lsl r0
    2afc:	1dd202a0 	lfmne	f0, 2, [r2, #640]	; 0x280
    2b00:	003e2000 	eorseq	r2, lr, r0
    2b04:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b08:	000006fe 	strdeq	r0, [r0], -lr
    2b0c:	00180c12 	andseq	r0, r8, r2, lsl ip
    2b10:	02a00100 	adceq	r0, r0, #0, 2
    2b14:	0000033f 	andeq	r0, r0, pc, lsr r3
    2b18:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2b1c:	00001695 	muleq	r0, r5, r6
    2b20:	a202a001 	andge	sl, r2, #1
    2b24:	02000000 	andeq	r0, r0, #0
    2b28:	11007291 			; <UNDEFINED> instruction: 0x11007291
    2b2c:	000015e1 	andeq	r1, r0, r1, ror #11
    2b30:	92028501 	andls	r8, r2, #4194304	; 0x400000
    2b34:	4020001d 	eormi	r0, r0, sp, lsl r0
    2b38:	01000000 	mrseq	r0, (UNDEF: 0)
    2b3c:	0007339c 	muleq	r7, ip, r3
    2b40:	180c1200 	stmdane	ip, {r9, ip}
    2b44:	85010000 	strhi	r0, [r1, #-0]
    2b48:	00033f02 	andeq	r3, r3, r2, lsl #30
    2b4c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2b50:	000acd12 	andeq	ip, sl, r2, lsl sp
    2b54:	02850100 	addeq	r0, r5, #0, 2
    2b58:	00000132 	andeq	r0, r0, r2, lsr r1
    2b5c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2b60:	0017aa11 	andseq	sl, r7, r1, lsl sl
    2b64:	02710100 	rsbseq	r0, r1, #0, 2
    2b68:	20001d58 	andcs	r1, r0, r8, asr sp
    2b6c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2b70:	07689c01 	strbeq	r9, [r8, -r1, lsl #24]!
    2b74:	0c120000 	ldceq	0, cr0, [r2], {-0}
    2b78:	01000018 	tsteq	r0, r8, lsl r0
    2b7c:	033f0271 	teqeq	pc, #268435463	; 0x10000007
    2b80:	91020000 	mrsls	r0, (UNDEF: 2)
    2b84:	184b1274 	stmdane	fp, {r2, r4, r5, r6, r9, ip}^
    2b88:	71010000 	mrsvc	r0, (UNDEF: 1)
    2b8c:	00009702 	andeq	r9, r0, r2, lsl #14
    2b90:	73910200 	orrsvc	r0, r1, #0, 4
    2b94:	1a121500 	bne	487f9c <startup-0x1fb78064>
    2b98:	3d010000 	stccc	0, cr0, [r1, #-0]
    2b9c:	0000a202 	andeq	sl, r0, r2, lsl #4
    2ba0:	001d3c00 	andseq	r3, sp, r0, lsl #24
    2ba4:	00001c20 	andeq	r1, r0, r0, lsr #24
    2ba8:	929c0100 	addsls	r0, ip, #0, 2
    2bac:	12000007 	andne	r0, r0, #7
    2bb0:	0000180c 	andeq	r1, r0, ip, lsl #16
    2bb4:	3f023d01 	svccc	0x00023d01
    2bb8:	02000003 	andeq	r0, r0, #3
    2bbc:	11007491 			; <UNDEFINED> instruction: 0x11007491
    2bc0:	00001686 	andeq	r1, r0, r6, lsl #13
    2bc4:	18022d01 	stmdane	r2, {r0, r8, sl, fp, sp}
    2bc8:	2420001d 	strtcs	r0, [r0], #-29	; 0xffffffe3
    2bcc:	01000000 	mrseq	r0, (UNDEF: 0)
    2bd0:	0007c79c 	muleq	r7, ip, r7
    2bd4:	180c1200 	stmdane	ip, {r9, ip}
    2bd8:	2d010000 	stccs	0, cr0, [r1, #-0]
    2bdc:	00033f02 	andeq	r3, r3, r2, lsl #30
    2be0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2be4:	00169012 	andseq	r9, r6, r2, lsl r0
    2be8:	022d0100 	eoreq	r0, sp, #0, 2
    2bec:	000000a2 	andeq	r0, r0, r2, lsr #1
    2bf0:	00729102 	rsbseq	r9, r2, r2, lsl #2
    2bf4:	00163211 	andseq	r3, r6, r1, lsl r2
    2bf8:	01f40100 	mvnseq	r0, r0, lsl #2
    2bfc:	20001cd0 	ldrdcs	r1, [r0], -r0
    2c00:	00000048 	andeq	r0, r0, r8, asr #32
    2c04:	07fc9c01 	ldrbeq	r9, [ip, r1, lsl #24]!
    2c08:	0c120000 	ldceq	0, cr0, [r2], {-0}
    2c0c:	01000018 	tsteq	r0, r8, lsl r0
    2c10:	033f01f4 	teqeq	pc, #244, 2	; 0x3d
    2c14:	91020000 	mrsls	r0, (UNDEF: 2)
    2c18:	0acd1274 	beq	ff3475f0 <_global_impure_ptr+0xdf3424d4>
    2c1c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    2c20:	00013201 	andeq	r3, r1, r1, lsl #4
    2c24:	73910200 	orrsvc	r0, r1, #0, 4
    2c28:	18601100 	stmdane	r0!, {r8, ip}^
    2c2c:	da010000 	ble	42c34 <startup-0x1ffbd3cc>
    2c30:	001c8a01 	andseq	r8, ip, r1, lsl #20
    2c34:	00004620 	andeq	r4, r0, r0, lsr #12
    2c38:	319c0100 	orrscc	r0, ip, r0, lsl #2
    2c3c:	12000008 	andne	r0, r0, #8
    2c40:	0000180c 	andeq	r1, r0, ip, lsl #16
    2c44:	3f01da01 	svccc	0x0001da01
    2c48:	02000003 	andeq	r0, r0, #3
    2c4c:	cd127491 	cfldrsgt	mvf7, [r2, #-580]	; 0xfffffdbc
    2c50:	0100000a 	tsteq	r0, sl
    2c54:	013201da 	teqeq	r2, sl	; <illegal shifter operand>
    2c58:	91020000 	mrsls	r0, (UNDEF: 2)
    2c5c:	f9110073 			; <UNDEFINED> instruction: 0xf9110073
    2c60:	01000015 	tsteq	r0, r5, lsl r0
    2c64:	1c5001c5 	ldfnee	f0, [r0], {197}	; 0xc5
    2c68:	003a2000 	eorseq	r2, sl, r0
    2c6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c70:	00000866 	andeq	r0, r0, r6, ror #16
    2c74:	00180c12 	andseq	r0, r8, r2, lsl ip
    2c78:	01c50100 	biceq	r0, r5, r0, lsl #2
    2c7c:	0000033f 	andeq	r0, r0, pc, lsr r3
    2c80:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2c84:	00001971 	andeq	r1, r0, r1, ror r9
    2c88:	9701c501 	strls	ip, [r1, -r1, lsl #10]
    2c8c:	02000000 	andeq	r0, r0, #0
    2c90:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2c94:	0000167c 	andeq	r1, r0, ip, ror r6
    2c98:	0801ab01 	stmdaeq	r1, {r0, r8, r9, fp, sp, pc}
    2c9c:	4820001c 	stmdami	r0!, {r2, r3, r4}
    2ca0:	01000000 	mrseq	r0, (UNDEF: 0)
    2ca4:	00089b9c 	muleq	r8, ip, fp
    2ca8:	180c1200 	stmdane	ip, {r9, ip}
    2cac:	ab010000 	blge	42cb4 <startup-0x1ffbd34c>
    2cb0:	00033f01 	andeq	r3, r3, r1, lsl #30
    2cb4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2cb8:	000acd12 	andeq	ip, sl, r2, lsl sp
    2cbc:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    2cc0:	00000132 	andeq	r0, r0, r2, lsr r1
    2cc4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2cc8:	00177911 	andseq	r7, r7, r1, lsl r9
    2ccc:	019a0100 	orrseq	r0, sl, r0, lsl #2
    2cd0:	20001be0 	andcs	r1, r0, r0, ror #23
    2cd4:	00000028 	andeq	r0, r0, r8, lsr #32
    2cd8:	08c19c01 	stmiaeq	r1, {r0, sl, fp, ip, pc}^
    2cdc:	56120000 	ldrpl	r0, [r2], -r0
    2ce0:	01000017 	tsteq	r0, r7, lsl r0
    2ce4:	08c1019a 	stmiaeq	r1, {r1, r3, r4, r7, r8}^
    2ce8:	91020000 	mrsls	r0, (UNDEF: 2)
    2cec:	04140074 	ldreq	r0, [r4], #-116	; 0xffffff8c
    2cf0:	0000029d 	muleq	r0, sp, r2
    2cf4:	00192911 	andseq	r2, r9, r1, lsl r9
    2cf8:	017b0100 	cmneq	fp, r0, lsl #2
    2cfc:	20001b8a 	andcs	r1, r0, sl, lsl #23
    2d00:	00000056 	andeq	r0, r0, r6, asr r0
    2d04:	090b9c01 	stmdbeq	fp, {r0, sl, fp, ip, pc}
    2d08:	0c120000 	ldceq	0, cr0, [r2], {-0}
    2d0c:	01000018 	tsteq	r0, r8, lsl r0
    2d10:	033f017b 	teqeq	pc, #-1073741794	; 0xc000001e
    2d14:	91020000 	mrsls	r0, (UNDEF: 2)
    2d18:	1756126c 	ldrbne	r1, [r6, -ip, ror #4]
    2d1c:	7b010000 	blvc	42d24 <startup-0x1ffbd2dc>
    2d20:	0008c101 	andeq	ip, r8, r1, lsl #2
    2d24:	68910200 	ldmvs	r1, {r9}
    2d28:	000ddb13 	andeq	sp, sp, r3, lsl fp
    2d2c:	017d0100 	cmneq	sp, r0, lsl #2
    2d30:	000000c2 	andeq	r0, r0, r2, asr #1
    2d34:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2d38:	00196011 	andseq	r6, r9, r1, lsl r0
    2d3c:	01670100 	cmneq	r7, r0, lsl #2
    2d40:	20001b54 	andcs	r1, r0, r4, asr fp
    2d44:	00000036 	andeq	r0, r0, r6, lsr r0
    2d48:	09319c01 	ldmdbeq	r1!, {r0, sl, fp, ip, pc}
    2d4c:	07120000 	ldreq	r0, [r2, -r0]
    2d50:	01000019 	tsteq	r0, r9, lsl r0
    2d54:	09310167 	ldmdbeq	r1!, {r0, r1, r2, r5, r6, r8}
    2d58:	91020000 	mrsls	r0, (UNDEF: 2)
    2d5c:	04140074 	ldreq	r0, [r4], #-116	; 0xffffff8c
    2d60:	00000259 	andeq	r0, r0, r9, asr r2
    2d64:	00160c16 	andseq	r0, r6, r6, lsl ip
    2d68:	c0f60100 	rscsgt	r0, r6, r0, lsl #2
    2d6c:	94200019 	strtls	r0, [r0], #-25	; 0xffffffe7
    2d70:	01000001 	tsteq	r0, r1
    2d74:	0009af9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    2d78:	180c1700 	stmdane	ip, {r8, r9, sl, ip}
    2d7c:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    2d80:	0000033f 	andeq	r0, r0, pc, lsr r3
    2d84:	17549102 	ldrbne	r9, [r4, -r2, lsl #2]
    2d88:	00001907 	andeq	r1, r0, r7, lsl #18
    2d8c:	0931f601 	ldmdbeq	r1!, {r0, r9, sl, ip, sp, lr, pc}
    2d90:	91020000 	mrsls	r0, (UNDEF: 2)
    2d94:	0ddb1850 	ldcleq	8, cr1, [fp, #320]	; 0x140
    2d98:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    2d9c:	000000c2 	andeq	r0, r0, r2, asr #1
    2da0:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    2da4:	000016ec 	andeq	r1, r0, ip, ror #13
    2da8:	00c2f801 	sbceq	pc, r2, r1, lsl #16
    2dac:	91020000 	mrsls	r0, (UNDEF: 2)
    2db0:	15c21870 	strbne	r1, [r2, #2160]	; 0x870
    2db4:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    2db8:	000000c2 	andeq	r0, r0, r2, asr #1
    2dbc:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    2dc0:	000018c1 	andeq	r1, r0, r1, asr #17
    2dc4:	00c2fa01 	sbceq	pc, r2, r1, lsl #20
    2dc8:	91020000 	mrsls	r0, (UNDEF: 2)
    2dcc:	19181868 	ldmdbne	r8, {r3, r5, r6, fp, ip}
    2dd0:	fb010000 	blx	42dda <startup-0x1ffbd226>
    2dd4:	000002e1 	andeq	r0, r0, r1, ror #5
    2dd8:	00589102 	subseq	r9, r8, r2, lsl #2
    2ddc:	00174919 	andseq	r4, r7, r9, lsl r9
    2de0:	90bb0100 	adcsls	r0, fp, r0, lsl #2
    2de4:	30200018 	eorcc	r0, r0, r8, lsl r0
    2de8:	01000001 	tsteq	r0, r1
    2dec:	180c179c 	stmdane	ip, {r2, r3, r4, r7, r8, r9, sl, ip}
    2df0:	bb010000 	bllt	42df8 <startup-0x1ffbd208>
    2df4:	0000033f 	andeq	r0, r0, pc, lsr r3
    2df8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2dfc:	00110200 	andseq	r0, r1, r0, lsl #4
    2e00:	69000400 	stmdbvs	r0, {sl}
    2e04:	04000008 	streq	r0, [r0], #-8
    2e08:	0005de01 	andeq	sp, r5, r1, lsl #28
    2e0c:	1a4e0c00 	bne	1385e14 <startup-0x1ec7a1ec>
    2e10:	053e0000 	ldreq	r0, [lr, #-0]!
    2e14:	22900000 	addscs	r0, r0, #0
    2e18:	03fc2000 	mvnseq	r2, #0
    2e1c:	0dbb0000 	ldceq	0, cr0, [fp]
    2e20:	01020000 	mrseq	r0, (UNDEF: 2)
    2e24:	0003eb06 	andeq	lr, r3, r6, lsl #22
    2e28:	01c30300 	biceq	r0, r3, r0, lsl #6
    2e2c:	2b020000 	blcs	82e34 <startup-0x1ff7d1cc>
    2e30:	00000037 	andeq	r0, r0, r7, lsr r0
    2e34:	e9080102 	stmdb	r8, {r1, r8}
    2e38:	02000003 	andeq	r0, r0, #3
    2e3c:	0eef0502 	cdpeq	5, 14, cr0, cr15, cr2, {0}
    2e40:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    2e44:	02000004 	andeq	r0, r0, #4
    2e48:	00005039 	andeq	r5, r0, r9, lsr r0
    2e4c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2e50:	0000106d 	andeq	r1, r0, sp, rrx
    2e54:	00111203 	andseq	r1, r1, r3, lsl #4
    2e58:	624d0200 	subvs	r0, sp, #0, 4
    2e5c:	02000000 	andeq	r0, r0, #0
    2e60:	09820504 	stmibeq	r2, {r2, r8, sl}
    2e64:	2b030000 	blcs	c2e6c <startup-0x1ff3d194>
    2e68:	02000009 	andeq	r0, r0, #9
    2e6c:	0000744f 	andeq	r7, r0, pc, asr #8
    2e70:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2e74:	00000cc8 	andeq	r0, r0, r8, asr #25
    2e78:	7d050802 	stcvc	8, cr0, [r5, #-8]
    2e7c:	02000009 	andeq	r0, r0, #9
    2e80:	0cc30708 	stcleq	7, cr0, [r3], {8}
    2e84:	04040000 	streq	r0, [r4], #-0
    2e88:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2e8c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2e90:	00000ccd 	andeq	r0, r0, sp, asr #25
    2e94:	0001c503 	andeq	ip, r1, r3, lsl #10
    2e98:	2c180300 	ldccs	3, cr0, [r8], {-0}
    2e9c:	03000000 	movweq	r0, #0
    2ea0:	00000500 	andeq	r0, r0, r0, lsl #10
    2ea4:	00452403 	subeq	r2, r5, r3, lsl #8
    2ea8:	a2050000 	andge	r0, r5, #0
    2eac:	03000000 	movweq	r0, #0
    2eb0:	00001114 	andeq	r1, r0, r4, lsl r1
    2eb4:	00572c03 	subseq	r2, r7, r3, lsl #24
    2eb8:	b2050000 	andlt	r0, r5, #0
    2ebc:	03000000 	movweq	r0, #0
    2ec0:	0000092d 	andeq	r0, r0, sp, lsr #18
    2ec4:	00693003 	rsbeq	r3, r9, r3
    2ec8:	c2050000 	andgt	r0, r5, #0
    2ecc:	06000000 	streq	r0, [r0], -r0
    2ed0:	0a0c0467 	beq	304074 <startup-0x1fcfbf8c>
    2ed4:	07000001 	streq	r0, [r0, -r1]
    2ed8:	0000159c 	muleq	r0, ip, r5
    2edc:	010a0e04 	tsteq	sl, r4, lsl #28
    2ee0:	07000000 	streq	r0, [r0, -r0]
    2ee4:	00001d49 	andeq	r1, r0, r9, asr #26
    2ee8:	00971104 	addseq	r1, r7, r4, lsl #2
    2eec:	08640000 	stmdaeq	r4!, {}^	; <UNPREDICTABLE>
    2ef0:	04006e69 	streq	r6, [r0], #-3689	; 0xfffff197
    2ef4:	00009714 	andeq	r9, r0, r4, lsl r7
    2ef8:	6f086500 	svcvs	0x00086500
    2efc:	04007475 	streq	r7, [r0], #-1141	; 0xfffffb8b
    2f00:	00009717 	andeq	r9, r0, r7, lsl r7
    2f04:	09006600 	stmdbeq	r0, {r9, sl, sp, lr}
    2f08:	00000097 	muleq	r0, r7, r0
    2f0c:	0000011a 	andeq	r0, r0, sl, lsl r1
    2f10:	0000900a 	andeq	r9, r0, sl
    2f14:	03006300 	movweq	r6, #768	; 0x300
    2f18:	00001592 	muleq	r0, r2, r5
    2f1c:	00d21804 	sbcseq	r1, r2, r4, lsl #16
    2f20:	850b0000 	strhi	r0, [fp, #-0]
    2f24:	0500000f 	streq	r0, [r0, #-15]
    2f28:	00002501 	andeq	r2, r0, r1, lsl #10
    2f2c:	53c80700 	bicpl	r0, r8, #0, 14
    2f30:	0c000003 	stceq	0, cr0, [r0], {3}
    2f34:	000007a6 	andeq	r0, r0, r6, lsr #15
    2f38:	08210c72 	stmdaeq	r1!, {r1, r4, r5, r6, sl, fp}
    2f3c:	0c740000 	ldcleq	0, cr0, [r4], #-0
    2f40:	000008e6 	andeq	r0, r0, r6, ror #17
    2f44:	04810c75 	streq	r0, [r1], #3189	; 0xc75
    2f48:	0c760000 	ldcleq	0, cr0, [r6], #-0
    2f4c:	000009c3 	andeq	r0, r0, r3, asr #19
    2f50:	0e6b0c7b 	mcreq	12, 3, r0, cr11, cr11, {3}
    2f54:	0c7c0000 	ldcleq	0, cr0, [ip], #-0
    2f58:	000010cf 	andeq	r1, r0, pc, asr #1
    2f5c:	032d0c7e 			; <UNDEFINED> instruction: 0x032d0c7e
    2f60:	0d7f0000 	ldcleq	0, cr0, [pc, #-0]	; 2f68 <startup-0x1fffd098>
    2f64:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
    2f68:	06ac0d00 	strteq	r0, [ip], r0, lsl #26
    2f6c:	0d010000 	stceq	0, cr0, [r1, #-0]
    2f70:	00000847 	andeq	r0, r0, r7, asr #16
    2f74:	000e0d02 	andeq	r0, lr, r2, lsl #26
    2f78:	0d030000 	stceq	0, cr0, [r3, #-0]
    2f7c:	000000bb 	strheq	r0, [r0], -fp
    2f80:	0f020d04 	svceq	0x00020d04
    2f84:	0d050000 	stceq	0, cr0, [r5, #-0]
    2f88:	00000dec 	andeq	r0, r0, ip, ror #27
    2f8c:	072f0d06 	streq	r0, [pc, -r6, lsl #26]!
    2f90:	0d070000 	stceq	0, cr0, [r7, #-0]
    2f94:	0000001c 	andeq	r0, r0, ip, lsl r0
    2f98:	10c40d08 	sbcne	r0, r4, r8, lsl #26
    2f9c:	0d090000 	stceq	0, cr0, [r9, #-0]
    2fa0:	00000aaf 	andeq	r0, r0, pc, lsr #21
    2fa4:	0c3a0d0a 	ldceq	13, cr0, [sl], #-40	; 0xffffffd8
    2fa8:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    2fac:	00000b5e 	andeq	r0, r0, lr, asr fp
    2fb0:	039e0d0c 	orrseq	r0, lr, #12, 26	; 0x300
    2fb4:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    2fb8:	00000f17 	andeq	r0, r0, r7, lsl pc
    2fbc:	0e1e0d0e 	cdpeq	13, 1, cr0, cr14, cr14, {0}
    2fc0:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 2fc8 <startup-0x1fffd038>
    2fc4:	00000747 	andeq	r0, r0, r7, asr #14
    2fc8:	00270d10 	eoreq	r0, r7, r0, lsl sp
    2fcc:	0d110000 	ldceq	0, cr0, [r1, #-0]
    2fd0:	00000d32 	andeq	r0, r0, r2, lsr sp
    2fd4:	073a0d12 			; <UNDEFINED> instruction: 0x073a0d12
    2fd8:	0d130000 	ldceq	0, cr0, [r3, #-0]
    2fdc:	00000530 	andeq	r0, r0, r0, lsr r5
    2fe0:	10140d14 	andsne	r0, r4, r4, lsl sp
    2fe4:	0d150000 	ldceq	0, cr0, [r5, #-0]
    2fe8:	00000857 	andeq	r0, r0, r7, asr r8
    2fec:	103e0d16 	eorsne	r0, lr, r6, lsl sp
    2ff0:	0d170000 	ldceq	0, cr0, [r7, #-0]
    2ff4:	0000090d 	andeq	r0, r0, sp, lsl #18
    2ff8:	0f770d18 	svceq	0x00770d18
    2ffc:	0d190000 	ldceq	0, cr0, [r9, #-0]
    3000:	00000295 	muleq	r0, r5, r2
    3004:	07140d1a 			; <UNDEFINED> instruction: 0x07140d1a
    3008:	0d1b0000 	ldceq	0, cr0, [fp, #-0]
    300c:	0000013c 	andeq	r0, r0, ip, lsr r1
    3010:	0ce60d1c 	stcleq	13, cr0, [r6], #112	; 0x70
    3014:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
    3018:	000005d4 	ldrdeq	r0, [r0], -r4
    301c:	06c20d1e 			; <UNDEFINED> instruction: 0x06c20d1e
    3020:	0d1f0000 	ldceq	0, cr0, [pc, #-0]	; 3028 <startup-0x1fffcfd8>
    3024:	0000043a 	andeq	r0, r0, sl, lsr r4
    3028:	0ae10d20 	beq	ff8464b0 <_global_impure_ptr+0xdf841394>
    302c:	0d210000 	stceq	0, cr0, [r1, #-0]
    3030:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
    3034:	09b10d22 	ldmibeq	r1!, {r1, r5, r8, sl, fp}
    3038:	0d230000 	stceq	0, cr0, [r3, #-0]
    303c:	000001cd 	andeq	r0, r0, sp, asr #3
    3040:	0cf00d24 	ldcleq	13, cr0, [r0], #144	; 0x90
    3044:	0d250000 	stceq	0, cr0, [r5, #-0]
    3048:	00000f29 	andeq	r0, r0, r9, lsr #30
    304c:	03490d26 	movteq	r0, #40230	; 0x9d26
    3050:	0d270000 	stceq	0, cr0, [r7, #-0]
    3054:	00000cb4 			; <UNDEFINED> instruction: 0x00000cb4
    3058:	0c6c0d28 	stcleq	13, cr0, [ip], #-160	; 0xffffff60
    305c:	0d290000 	stceq	0, cr0, [r9, #-0]
    3060:	00000a85 	andeq	r0, r0, r5, lsl #21
    3064:	01d70d2a 	bicseq	r0, r7, sl, lsr #26
    3068:	0d2b0000 	stceq	0, cr0, [fp, #-0]
    306c:	00000039 	andeq	r0, r0, r9, lsr r0
    3070:	07700d2c 	ldrbeq	r0, [r0, -ip, lsr #26]!
    3074:	0d2d0000 	stceq	0, cr0, [sp, #-0]
    3078:	00001091 	muleq	r0, r1, r0
    307c:	11000d2e 	tstne	r0, lr, lsr #26
    3080:	0d2f0000 	stceq	0, cr0, [pc, #-0]	; 3088 <startup-0x1fffcf78>
    3084:	00000de2 	andeq	r0, r0, r2, ror #27
    3088:	109e0d30 	addsne	r0, lr, r0, lsr sp
    308c:	0d310000 	ldceq	0, cr0, [r1, #-0]
    3090:	00000477 	andeq	r0, r0, r7, ror r4
    3094:	00b10d32 	adcseq	r0, r1, r2, lsr sp
    3098:	0d330000 	ldceq	0, cr0, [r3, #-0]
    309c:	00000a50 	andeq	r0, r0, r0, asr sl
    30a0:	09020d34 	stmdbeq	r2, {r2, r4, r5, r8, sl, fp}
    30a4:	0d350000 	ldceq	0, cr0, [r5, #-0]
    30a8:	00000abf 			; <UNDEFINED> instruction: 0x00000abf
    30ac:	09730d36 	ldmdbeq	r3!, {r1, r2, r4, r5, r8, sl, fp}^
    30b0:	0d370000 	ldceq	0, cr0, [r7, #-0]
    30b4:	0000087c 	andeq	r0, r0, ip, ror r8
    30b8:	007a0d38 	rsbseq	r0, sl, r8, lsr sp
    30bc:	0d390000 	ldceq	0, cr0, [r9, #-0]
    30c0:	00001179 	andeq	r1, r0, r9, ror r1
    30c4:	0b7d0d3a 	bleq	1f465b4 <startup-0x1e0b9a4c>
    30c8:	0d3b0000 	ldceq	0, cr0, [fp, #-0]
    30cc:	000003f7 	strdeq	r0, [r0], -r7
    30d0:	0ebd0d3c 	mrceq	13, 5, r0, cr13, cr12, {1}
    30d4:	0d3d0000 	ldceq	0, cr0, [sp, #-0]
    30d8:	0000098b 	andeq	r0, r0, fp, lsl #19
    30dc:	0b980d3e 	bleq	fe6065dc <_global_impure_ptr+0xde6014c0>
    30e0:	0d3f0000 	ldceq	0, cr0, [pc, #-0]	; 30e8 <startup-0x1fffcf18>
    30e4:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    30e8:	0d240d40 	stceq	13, cr0, [r4, #-256]!	; 0xffffff00
    30ec:	0d410000 	stcleq	0, cr0, [r1, #-0]
    30f0:	00000447 	andeq	r0, r0, r7, asr #8
    30f4:	079a0d42 	ldreq	r0, [sl, r2, asr #26]
    30f8:	0d430000 	stcleq	0, cr0, [r3, #-0]
    30fc:	0000025f 	andeq	r0, r0, pc, asr r2
    3100:	0e3a0d44 	cdpeq	13, 3, cr0, cr10, cr4, {2}
    3104:	0d450000 	stcleq	0, cr0, [r5, #-0]
    3108:	00000788 	andeq	r0, r0, r8, lsl #15
    310c:	01ad0d46 			; <UNDEFINED> instruction: 0x01ad0d46
    3110:	0d470000 	stcleq	0, cr0, [r7, #-0]
    3114:	00000e9d 	muleq	r0, sp, lr
    3118:	0c9d0d48 	ldceq	13, cr0, [sp], {72}	; 0x48
    311c:	0d490000 	stcleq	0, cr0, [r9, #-0]
    3120:	00000fc9 	andeq	r0, r0, r9, asr #31
    3124:	10ed0d4a 	rscne	r0, sp, sl, asr #26
    3128:	0d4b0000 	stcleq	0, cr0, [fp, #-0]
    312c:	000007c4 	andeq	r0, r0, r4, asr #15
    3130:	09990d4c 	ldmibeq	r9, {r2, r3, r6, r8, sl, fp}
    3134:	0d4d0000 	stcleq	0, cr0, [sp, #-0]
    3138:	000000c6 	andeq	r0, r0, r6, asr #1
    313c:	0caa0d4e 	stceq	13, cr0, [sl], #312	; 0x138
    3140:	0d4f0000 	stcleq	0, cr0, [pc, #-0]	; 3148 <startup-0x1fffceb8>
    3144:	00000721 	andeq	r0, r0, r1, lsr #14
    3148:	0a290d50 	beq	a46690 <startup-0x1f5b9970>
    314c:	00510000 	subseq	r0, r1, r0
    3150:	000f8a0e 	andeq	r8, pc, lr, lsl #20
    3154:	06fa0500 	ldrbteq	r0, [sl], r0, lsl #10
    3158:	000000bd 	strheq	r0, [r0], -sp
    315c:	0008370f 	andeq	r3, r8, pc, lsl #14
    3160:	c23b0600 	eorsgt	r0, fp, #0, 12
    3164:	10000000 	andne	r0, r0, r0
    3168:	00370107 	eorseq	r0, r7, r7, lsl #2
    316c:	5d070000 	stcpl	0, cr0, [r7, #-0]
    3170:	00038503 	andeq	r8, r3, r3, lsl #10
    3174:	11f90d00 	mvnsne	r0, r0, lsl #26
    3178:	11000000 	mrsne	r0, (UNDEF: 0)
    317c:	00544553 	subseq	r4, r4, r3, asr r5
    3180:	07100001 	ldreq	r0, [r0, -r1]
    3184:	00003701 	andeq	r3, r0, r1, lsl #14
    3188:	035f0700 	cmpeq	pc, #0, 14
    318c:	000003a0 	andeq	r0, r0, r0, lsr #7
    3190:	0009bb0d 	andeq	fp, r9, sp, lsl #22
    3194:	3f0d0000 	svccc	0x000d0000
    3198:	0100000f 	tsteq	r0, pc
    319c:	0c8d1200 	sfmeq	f1, 4, [sp], {0}
    31a0:	5f070000 	svcpl	0x00070000
    31a4:	00038503 	andeq	r8, r3, r3, lsl #10
    31a8:	07281300 	streq	r1, [r8, -r0, lsl #6]!
    31ac:	043805c3 	ldrteq	r0, [r8], #-1475	; 0xfffffa3d
    31b0:	fd140000 	ldc2	0, cr0, [r4, #-0]
    31b4:	0700000f 	streq	r0, [r0, -pc]
    31b8:	00cd05c5 	sbceq	r0, sp, r5, asr #11
    31bc:	14000000 	strne	r0, [r0], #-0
    31c0:	00000dce 	andeq	r0, r0, lr, asr #27
    31c4:	cd05c607 	stcgt	6, cr12, [r5, #-28]	; 0xffffffe4
    31c8:	04000000 	streq	r0, [r0], #-0
    31cc:	0008de14 	andeq	sp, r8, r4, lsl lr
    31d0:	05c70700 	strbeq	r0, [r7, #1792]	; 0x700
    31d4:	000000cd 	andeq	r0, r0, sp, asr #1
    31d8:	09a51408 	stmibeq	r5!, {r3, sl, ip}
    31dc:	c8070000 	stmdagt	r7, {}	; <UNPREDICTABLE>
    31e0:	0000cd05 	andeq	ip, r0, r5, lsl #26
    31e4:	49150c00 	ldmdbmi	r5, {sl, fp}
    31e8:	07005244 	streq	r5, [r0, -r4, asr #4]
    31ec:	00cd05c9 	sbceq	r0, sp, r9, asr #11
    31f0:	15100000 	ldrne	r0, [r0, #-0]
    31f4:	0052444f 	subseq	r4, r2, pc, asr #8
    31f8:	cd05ca07 	vstrgt	s24, [r5, #-28]	; 0xffffffe4
    31fc:	14000000 	strne	r0, [r0], #-0
    3200:	0009fb14 	andeq	pc, r9, r4, lsl fp	; <UNPREDICTABLE>
    3204:	05cb0700 	strbeq	r0, [fp, #1792]	; 0x700
    3208:	000000ad 	andeq	r0, r0, sp, lsr #1
    320c:	09d81418 	ldmibeq	r8, {r3, r4, sl, ip}^
    3210:	cc070000 	stcgt	0, cr0, [r7], {-0}
    3214:	0000ad05 	andeq	sl, r0, r5, lsl #26
    3218:	9d141a00 	vldrls	s2, [r4, #-0]
    321c:	07000008 	streq	r0, [r0, -r8]
    3220:	00cd05cd 	sbceq	r0, sp, sp, asr #11
    3224:	151c0000 	ldrne	r0, [ip, #-0]
    3228:	00524641 	subseq	r4, r2, r1, asr #12
    322c:	4805ce07 	stmdami	r5, {r0, r1, r2, r9, sl, fp, lr, pc}
    3230:	20000004 	andcs	r0, r0, r4
    3234:	00cd0900 	sbceq	r0, sp, r0, lsl #18
    3238:	04480000 	strbeq	r0, [r8], #-0
    323c:	900a0000 	andls	r0, sl, r0
    3240:	01000000 	mrseq	r0, (UNDEF: 0)
    3244:	04380500 	ldrteq	r0, [r8], #-1280	; 0xfffffb00
    3248:	6a120000 	bvs	483250 <startup-0x1fb7cdb0>
    324c:	0700000f 	streq	r0, [r0, -pc]
    3250:	03ac05cf 			; <UNDEFINED> instruction: 0x03ac05cf
    3254:	1c130000 	ldcne	0, cr0, [r3], {-0}
    3258:	17077307 	strne	r7, [r7, -r7, lsl #6]
    325c:	15000005 	strne	r0, [r0, #-5]
    3260:	07005253 	smlsdeq	r0, r3, r2, r5
    3264:	00ad0775 	adceq	r0, sp, r5, ror r7
    3268:	14000000 	strne	r0, [r0], #-0
    326c:	000003d5 	ldrdeq	r0, [r0], -r5
    3270:	a2077607 	andge	r7, r7, #7340032	; 0x700000
    3274:	02000000 	andeq	r0, r0, #0
    3278:	00524415 	subseq	r4, r2, r5, lsl r4
    327c:	ad077707 	stcge	7, cr7, [r7, #-28]	; 0xffffffe4
    3280:	04000000 	streq	r0, [r0], #-0
    3284:	0003df14 	andeq	sp, r3, r4, lsl pc
    3288:	07780700 	ldrbeq	r0, [r8, -r0, lsl #14]!
    328c:	000000a2 	andeq	r0, r0, r2, lsr #1
    3290:	52421506 	subpl	r1, r2, #25165824	; 0x1800000
    3294:	79070052 	stmdbvc	r7, {r1, r4, r6}
    3298:	0000ad07 	andeq	sl, r0, r7, lsl #26
    329c:	63140800 	tstvs	r4, #0, 16
    32a0:	07000004 	streq	r0, [r0, -r4]
    32a4:	00a2077a 	adceq	r0, r2, sl, ror r7
    32a8:	150a0000 	strne	r0, [sl, #-0]
    32ac:	00315243 	eorseq	r5, r1, r3, asr #4
    32b0:	ad077b07 	vstrge	d7, [r7, #-28]	; 0xffffffe4
    32b4:	0c000000 	stceq	0, cr0, [r0], {-0}
    32b8:	00046d14 	andeq	r6, r4, r4, lsl sp
    32bc:	077c0700 	ldrbeq	r0, [ip, -r0, lsl #14]!
    32c0:	000000a2 	andeq	r0, r0, r2, lsr #1
    32c4:	5243150e 	subpl	r1, r3, #58720256	; 0x3800000
    32c8:	7d070032 	stcvc	0, cr0, [r7, #-200]	; 0xffffff38
    32cc:	0000ad07 	andeq	sl, r0, r7, lsl #26
    32d0:	09141000 	ldmdbeq	r4, {ip}
    32d4:	07000004 	streq	r0, [r0, -r4]
    32d8:	00a2077e 	adceq	r0, r2, lr, ror r7
    32dc:	15120000 	ldrne	r0, [r2, #-0]
    32e0:	00335243 	eorseq	r5, r3, r3, asr #4
    32e4:	ad077f07 	stcge	15, cr7, [r7, #-28]	; 0xffffffe4
    32e8:	14000000 	strne	r0, [r0], #-0
    32ec:	00041314 	andeq	r1, r4, r4, lsl r3
    32f0:	07800700 	streq	r0, [r0, r0, lsl #14]
    32f4:	000000a2 	andeq	r0, r0, r2, lsr #1
    32f8:	15dc1416 	ldrbne	r1, [ip, #1046]	; 0x416
    32fc:	81070000 	mrshi	r0, (UNDEF: 7)
    3300:	0000ad07 	andeq	sl, r0, r7, lsl #26
    3304:	1d141800 	ldcne	8, cr1, [r4, #-0]
    3308:	07000004 	streq	r0, [r0, -r4]
    330c:	00a20782 	adceq	r0, r2, r2, lsl #15
    3310:	001a0000 	andseq	r0, sl, r0
    3314:	00164812 	andseq	r4, r6, r2, lsl r8
    3318:	07830700 	streq	r0, [r3, r0, lsl #14]
    331c:	00000459 	andeq	r0, r0, r9, asr r4
    3320:	36080406 	strcc	r0, [r8], -r6, lsl #8
    3324:	0000055c 	andeq	r0, r0, ip, asr r5
    3328:	00144907 	andseq	r4, r4, r7, lsl #18
    332c:	97380800 	ldrls	r0, [r8, -r0, lsl #16]!
    3330:	00000000 	andeq	r0, r0, r0
    3334:	00147407 	andseq	r7, r4, r7, lsl #8
    3338:	973d0800 	ldrls	r0, [sp, -r0, lsl #16]!
    333c:	01000000 	mrseq	r0, (UNDEF: 0)
    3340:	00145907 	andseq	r5, r4, r7, lsl #18
    3344:	97420800 	strbls	r0, [r2, -r0, lsl #16]
    3348:	02000000 	andeq	r0, r0, #0
    334c:	00139607 	andseq	r9, r3, r7, lsl #12
    3350:	a0470800 	subge	r0, r7, r0, lsl #16
    3354:	03000003 	movweq	r0, #3
    3358:	13850300 	orrne	r0, r5, #0, 6
    335c:	4a080000 	bmi	203364 <startup-0x1fdfcc9c>
    3360:	00000523 	andeq	r0, r0, r3, lsr #10
    3364:	36091006 	strcc	r1, [r9], -r6
    3368:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    336c:	0016ce07 	andseq	ip, r6, r7, lsl #28
    3370:	c2380900 	eorsgt	r0, r8, #0, 18
    3374:	00000000 	andeq	r0, r0, r0
    3378:	0016a207 	andseq	sl, r6, r7, lsl #4
    337c:	a23e0900 	eorsge	r0, lr, #0, 18
    3380:	04000000 	streq	r0, [r0], #-0
    3384:	00165607 	andseq	r5, r6, r7, lsl #12
    3388:	a2410900 	subge	r0, r1, #0, 18
    338c:	06000000 	streq	r0, [r0], -r0
    3390:	00176c07 	andseq	r6, r7, r7, lsl #24
    3394:	a2440900 	subge	r0, r4, #0, 18
    3398:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    339c:	00184007 	andseq	r4, r8, r7
    33a0:	a24b0900 	subge	r0, fp, #0, 18
    33a4:	0a000000 	beq	33ac <startup-0x1fffcc54>
    33a8:	00181307 	andseq	r1, r8, r7, lsl #6
    33ac:	a24e0900 	subge	r0, lr, #0, 18
    33b0:	0c000000 	stceq	0, cr0, [r0], {-0}
    33b4:	17de0300 	ldrbne	r0, [lr, r0, lsl #6]
    33b8:	51090000 	mrspl	r0, (UNDEF: 9)
    33bc:	00000567 	andeq	r0, r0, r7, ror #10
    33c0:	37010716 	smladcc	r1, r6, r7, r0
    33c4:	0a000000 	beq	33cc <startup-0x1fffcc34>
    33c8:	0005e942 	andeq	lr, r5, r2, asr #18
    33cc:	086f0d00 	stmdaeq	pc!, {r8, sl, fp}^	; <UNPREDICTABLE>
    33d0:	0d000000 	stceq	0, cr0, [r0, #-0]
    33d4:	00000706 	andeq	r0, r0, r6, lsl #14
    33d8:	02710d01 	rsbseq	r0, r1, #1, 26	; 0x40
    33dc:	0d020000 	stceq	0, cr0, [r2, #-0]
    33e0:	000002ad 	andeq	r0, r0, sp, lsr #5
    33e4:	5c030003 	stcpl	0, cr0, [r3], {3}
    33e8:	0a00000d 	beq	3424 <startup-0x1fffcbdc>
    33ec:	0005c347 	andeq	ip, r5, r7, asr #6
    33f0:	01071600 	tsteq	r7, r0, lsl #12
    33f4:	00000037 	andeq	r0, r0, r7, lsr r0
    33f8:	060e4f0a 	streq	r4, [lr], -sl, lsl #30
    33fc:	2c0d0000 	stccs	0, cr0, [sp], {-0}
    3400:	00000004 	andeq	r0, r0, r4
    3404:	00036e0d 	andeq	r6, r3, sp, lsl #28
    3408:	03000100 	movweq	r0, #256	; 0x100
    340c:	0000010a 	andeq	r0, r0, sl, lsl #2
    3410:	05f4520a 	ldrbeq	r5, [r4, #522]!	; 0x20a
    3414:	07160000 	ldreq	r0, [r6, -r0]
    3418:	00003701 	andeq	r3, r0, r1, lsl #14
    341c:	3f5a0a00 	svccc	0x005a0a00
    3420:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    3424:	00000521 	andeq	r0, r0, r1, lsr #10
    3428:	09470d00 	stmdbeq	r7, {r8, sl, fp}^
    342c:	0d010000 	stceq	0, cr0, [r1, #-0]
    3430:	0000118b 	andeq	r1, r0, fp, lsl #3
    3434:	0a010d02 	beq	46844 <startup-0x1ffb97bc>
    3438:	00030000 	andeq	r0, r3, r0
    343c:	000e5903 	andeq	r5, lr, r3, lsl #18
    3440:	195f0a00 	ldmdbne	pc, {r9, fp}^	; <UNPREDICTABLE>
    3444:	16000006 	strne	r0, [r0], -r6
    3448:	00370107 	eorseq	r0, r7, r7, lsl #2
    344c:	6e0a0000 	cdpvs	0, 0, cr0, cr10, cr0, {0}
    3450:	0000066a 	andeq	r0, r0, sl, ror #12
    3454:	00009b0d 	andeq	r9, r0, sp, lsl #22
    3458:	310d0000 	mrscc	r0, (UNDEF: 13)
    345c:	01000010 	tsteq	r0, r0, lsl r0
    3460:	0001f50d 	andeq	pc, r1, sp, lsl #10
    3464:	03000200 	movweq	r0, #512	; 0x200
    3468:	000004a0 	andeq	r0, r0, r0, lsr #9
    346c:	064a720a 	strbeq	r7, [sl], -sl, lsl #4
    3470:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
    3474:	06ba840a 	ldrteq	r8, [sl], sl, lsl #8
    3478:	7d070000 	stcvc	0, cr0, [r7, #-0]
    347c:	0a00000e 	beq	34bc <startup-0x1fffcb44>
    3480:	0000c286 	andeq	ip, r0, r6, lsl #5
    3484:	1a070000 	bne	1c348c <startup-0x1fe3cb74>
    3488:	0a00000d 	beq	34c4 <startup-0x1fffcb3c>
    348c:	0005e989 	andeq	lr, r5, r9, lsl #19
    3490:	d6070400 	strle	r0, [r7], -r0, lsl #8
    3494:	0a00000a 	beq	34c4 <startup-0x1fffcb3c>
    3498:	00063f8c 	andeq	r3, r6, ip, lsl #31
    349c:	20070500 	andcs	r0, r7, r0, lsl #10
    34a0:	0a000009 	beq	34cc <startup-0x1fffcb34>
    34a4:	00060e8f 	andeq	r0, r6, pc, lsl #29
    34a8:	aa070600 	bge	1c4cb0 <startup-0x1fe3b350>
    34ac:	0a00000e 	beq	34ec <startup-0x1fffcb14>
    34b0:	00066a92 	muleq	r6, r2, sl
    34b4:	03000700 	movweq	r0, #1792	; 0x700
    34b8:	0000037c 	andeq	r0, r0, ip, ror r3
    34bc:	0675940a 	ldrbteq	r9, [r5], -sl, lsl #8
    34c0:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
    34c4:	0b00001e 	bleq	3544 <startup-0x1fffcabc>
    34c8:	0006d022 	andeq	sp, r6, r2, lsr #32
    34cc:	d6041700 	strle	r1, [r4], -r0, lsl #14
    34d0:	18000006 	stmdane	r0, {r1, r2}
    34d4:	00001be9 	andeq	r1, r0, r9, ror #23
    34d8:	001eaf03 	andseq	sl, lr, r3, lsl #30
    34dc:	622c0c00 	eorvs	r0, ip, #0, 24
    34e0:	03000000 	movweq	r0, #0
    34e4:	00001d7c 	andeq	r1, r0, ip, ror sp
    34e8:	0062720c 	rsbeq	r7, r2, ip, lsl #4
    34ec:	24120000 	ldrcs	r0, [r2], #-0
    34f0:	0d00001e 	stceq	0, cr0, [r0, #-120]	; 0xffffff88
    34f4:	00900165 	addseq	r0, r0, r5, ror #2
    34f8:	04190000 	ldreq	r0, [r9], #-0
    34fc:	071ca60c 	ldreq	sl, [ip, -ip, lsl #12]
    3500:	0e1a0000 	cdpeq	0, 1, cr0, cr10, cr0, {0}
    3504:	0c00001b 	stceq	0, cr0, [r0], {27}
    3508:	0006f1a8 	andeq	pc, r6, r8, lsr #3
    350c:	1d841a00 	vstrne	s2, [r4]
    3510:	a90c0000 	stmdbge	ip, {}	; <UNPREDICTABLE>
    3514:	0000071c 	andeq	r0, r0, ip, lsl r7
    3518:	00370900 	eorseq	r0, r7, r0, lsl #18
    351c:	072c0000 	streq	r0, [ip, -r0]!
    3520:	900a0000 	andls	r0, sl, r0
    3524:	03000000 	movweq	r0, #0
    3528:	0c080600 	stceq	6, cr0, [r8], {-0}
    352c:	00074da3 	andeq	r4, r7, r3, lsr #27
    3530:	1d470700 	stclne	7, cr0, [r7, #-0]
    3534:	a50c0000 	strge	r0, [ip, #-0]
    3538:	00000089 	andeq	r0, r0, r9, lsl #1
    353c:	1a410700 	bne	1045144 <startup-0x1efbaebc>
    3540:	aa0c0000 	bge	303548 <startup-0x1fcfcab8>
    3544:	000006fd 	strdeq	r0, [r0], -sp
    3548:	14030004 	strne	r0, [r3], #-4
    354c:	0c00001e 	stceq	0, cr0, [r0], {30}
    3550:	00072cab 	andeq	r2, r7, fp, lsr #25
    3554:	1df30300 	ldclne	3, cr0, [r3]
    3558:	af0c0000 	svcge	0x000c0000
    355c:	000006c5 	andeq	r0, r0, r5, asr #13
    3560:	0417041b 	ldreq	r0, [r7], #-1051	; 0xfffffbe5
    3564:	0000076b 	andeq	r0, r0, fp, ror #14
    3568:	f2080102 	vrhadd.s8	d0, d8, d2
    356c:	1c000003 	stcne	0, cr0, [r0], {3}
    3570:	0000076b 	andeq	r0, r0, fp, ror #14
    3574:	001e9f03 	andseq	r9, lr, r3, lsl #30
    3578:	74160e00 	ldrvc	r0, [r6], #-3584	; 0xfffff200
    357c:	1d000000 	stcne	0, cr0, [r0, #-0]
    3580:	00001c43 	andeq	r1, r0, r3, asr #24
    3584:	d52f0e18 	strle	r0, [pc, #-3608]!	; 2774 <startup-0x1fffd88c>
    3588:	07000007 	streq	r0, [r0, -r7]
    358c:	00001d32 	andeq	r1, r0, r2, lsr sp
    3590:	07d5310e 	ldrbeq	r3, [r5, lr, lsl #2]
    3594:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3598:	0e006b5f 			; <UNDEFINED> instruction: 0x0e006b5f
    359c:	00008932 	andeq	r8, r0, r2, lsr r9
    35a0:	4b070400 	blmi	1c45a8 <startup-0x1fe3ba58>
    35a4:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    35a8:	00008932 	andeq	r8, r0, r2, lsr r9
    35ac:	c8070800 	stmdagt	r7, {fp}
    35b0:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    35b4:	00008932 	andeq	r8, r0, r2, lsr r9
    35b8:	e4070c00 	str	r0, [r7], #-3072	; 0xfffff400
    35bc:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    35c0:	00008932 	andeq	r8, r0, r2, lsr r9
    35c4:	5f081000 	svcpl	0x00081000
    35c8:	330e0078 	movwcc	r0, #57464	; 0xe078
    35cc:	000007db 	ldrdeq	r0, [r0], -fp
    35d0:	04170014 	ldreq	r0, [r7], #-20	; 0xffffffec
    35d4:	00000782 	andeq	r0, r0, r2, lsl #15
    35d8:	00077709 	andeq	r7, r7, r9, lsl #14
    35dc:	0007eb00 	andeq	lr, r7, r0, lsl #22
    35e0:	00900a00 	addseq	r0, r0, r0, lsl #20
    35e4:	00000000 	andeq	r0, r0, r0
    35e8:	001ac61d 	andseq	ip, sl, sp, lsl r6
    35ec:	370e2400 	strcc	r2, [lr, -r0, lsl #8]
    35f0:	00000864 	andeq	r0, r0, r4, ror #16
    35f4:	001ae207 	andseq	lr, sl, r7, lsl #4
    35f8:	89390e00 	ldmdbhi	r9!, {r9, sl, fp}
    35fc:	00000000 	andeq	r0, r0, r0
    3600:	001f1407 	andseq	r1, pc, r7, lsl #8
    3604:	893a0e00 	ldmdbhi	sl!, {r9, sl, fp}
    3608:	04000000 	streq	r0, [r0], #-0
    360c:	001ebb07 	andseq	fp, lr, r7, lsl #22
    3610:	893b0e00 	ldmdbhi	fp!, {r9, sl, fp}
    3614:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3618:	001cf907 	andseq	pc, ip, r7, lsl #18
    361c:	893c0e00 	ldmdbhi	ip!, {r9, sl, fp}
    3620:	0c000000 	stceq	0, cr0, [r0], {-0}
    3624:	001b5c07 	andseq	r5, fp, r7, lsl #24
    3628:	893d0e00 	ldmdbhi	sp!, {r9, sl, fp}
    362c:	10000000 	andne	r0, r0, r0
    3630:	001e5c07 	andseq	r5, lr, r7, lsl #24
    3634:	893e0e00 	ldmdbhi	lr!, {r9, sl, fp}
    3638:	14000000 	strne	r0, [r0], #-0
    363c:	001ec507 	andseq	ip, lr, r7, lsl #10
    3640:	893f0e00 	ldmdbhi	pc!, {r9, sl, fp}	; <UNPREDICTABLE>
    3644:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3648:	001d5f07 	andseq	r5, sp, r7, lsl #30
    364c:	89400e00 	stmdbhi	r0, {r9, sl, fp}^
    3650:	1c000000 	stcne	0, cr0, [r0], {-0}
    3654:	001ef007 	andseq	pc, lr, r7
    3658:	89410e00 	stmdbhi	r1, {r9, sl, fp}^
    365c:	20000000 	andcs	r0, r0, r0
    3660:	1b1a1e00 	blne	68ae68 <startup-0x1f975198>
    3664:	01080000 	mrseq	r0, (UNDEF: 8)
    3668:	08a44a0e 	stmiaeq	r4!, {r1, r2, r3, r9, fp, lr}
    366c:	e8070000 	stmda	r7, {}	; <UNPREDICTABLE>
    3670:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    3674:	0008a44b 	andeq	sl, r8, fp, asr #8
    3678:	99070000 	stmdbls	r7, {}	; <UNPREDICTABLE>
    367c:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    3680:	0008a44c 	andeq	sl, r8, ip, asr #8
    3684:	531f8000 	tstpl	pc, #0
    3688:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    368c:	0007774e 	andeq	r7, r7, lr, asr #14
    3690:	1f010000 	svcne	0x00010000
    3694:	00001e80 	andeq	r1, r0, r0, lsl #29
    3698:	0777510e 	ldrbeq	r5, [r7, -lr, lsl #2]!
    369c:	01040000 	mrseq	r0, (UNDEF: 4)
    36a0:	07630900 	strbeq	r0, [r3, -r0, lsl #18]!
    36a4:	08b40000 	ldmeq	r4!, {}	; <UNPREDICTABLE>
    36a8:	900a0000 	andls	r0, sl, r0
    36ac:	1f000000 	svcne	0x00000000
    36b0:	1d3f1e00 	ldcne	14, cr1, [pc, #-0]	; 36b8 <startup-0x1fffc948>
    36b4:	01900000 	orrseq	r0, r0, r0
    36b8:	08f25d0e 	ldmeq	r2!, {r1, r2, r3, r8, sl, fp, ip, lr}^
    36bc:	32070000 	andcc	r0, r7, #0
    36c0:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    36c4:	0008f25e 	andeq	pc, r8, lr, asr r2	; <UNPREDICTABLE>
    36c8:	74070000 	strvc	r0, [r7], #-0
    36cc:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    36d0:	0000895f 	andeq	r8, r0, pc, asr r9
    36d4:	c7070400 	strgt	r0, [r7, -r0, lsl #8]
    36d8:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    36dc:	0008f861 	andeq	pc, r8, r1, ror #16
    36e0:	1a070800 	bne	1c56e8 <startup-0x1fe3a918>
    36e4:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    36e8:	00086462 	andeq	r6, r8, r2, ror #8
    36ec:	17008800 	strne	r8, [r0, -r0, lsl #16]
    36f0:	0008b404 	andeq	fp, r8, r4, lsl #8
    36f4:	09080900 	stmdbeq	r8, {r8, fp}
    36f8:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    36fc:	900a0000 	andls	r0, sl, r0
    3700:	1f000000 	svcne	0x00000000
    3704:	0e041700 	cdpeq	7, 0, cr1, cr4, cr0, {0}
    3708:	20000009 	andcs	r0, r0, r9
    370c:	001e791d 	andseq	r7, lr, sp, lsl r9
    3710:	750e0800 	strvc	r0, [lr, #-2048]	; 0xfffff800
    3714:	00000934 	andeq	r0, r0, r4, lsr r9
    3718:	001dd107 	andseq	sp, sp, r7, lsl #2
    371c:	34760e00 	ldrbtcc	r0, [r6], #-3584	; 0xfffff200
    3720:	00000009 	andeq	r0, r0, r9
    3724:	001b4707 	andseq	r4, fp, r7, lsl #14
    3728:	89770e00 	ldmdbhi	r7!, {r9, sl, fp}^
    372c:	04000000 	streq	r0, [r0], #-0
    3730:	37041700 	strcc	r1, [r4, -r0, lsl #14]
    3734:	1d000000 	stcne	0, cr0, [r0, #-0]
    3738:	00001c10 	andeq	r1, r0, r0, lsl ip
    373c:	64b50e68 	ldrtvs	r0, [r5], #3688	; 0xe68
    3740:	0800000a 	stmdaeq	r0, {r1, r3}
    3744:	0e00705f 	mcreq	0, 0, r7, cr0, cr15, {2}
    3748:	000934b6 			; <UNDEFINED> instruction: 0x000934b6
    374c:	5f080000 	svcpl	0x00080000
    3750:	b70e0072 	smlsdxlt	lr, r2, r0, r0
    3754:	00000089 	andeq	r0, r0, r9, lsl #1
    3758:	775f0804 	ldrbvc	r0, [pc, -r4, lsl #16]
    375c:	89b80e00 	ldmibhi	r8!, {r9, sl, fp}
    3760:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3764:	001d3807 	andseq	r3, sp, r7, lsl #16
    3768:	3eb90e00 	cdpcc	14, 11, cr0, cr9, cr0, {0}
    376c:	0c000000 	stceq	0, cr0, [r0], {-0}
    3770:	001b1407 	andseq	r1, fp, r7, lsl #8
    3774:	3eba0e00 	cdpcc	14, 11, cr0, cr10, cr0, {0}
    3778:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    377c:	66625f08 	strbtvs	r5, [r2], -r8, lsl #30
    3780:	0fbb0e00 	svceq	0x00bb0e00
    3784:	10000009 	andne	r0, r0, r9
    3788:	001e6607 	andseq	r6, lr, r7, lsl #12
    378c:	89bc0e00 	ldmibhi	ip!, {r9, sl, fp}
    3790:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3794:	001bdc07 	andseq	sp, fp, r7, lsl #24
    3798:	63c30e00 	bicvs	r0, r3, #0, 28
    379c:	1c000007 	stcne	0, cr0, [r0], {7}
    37a0:	00058a07 	andeq	r8, r5, r7, lsl #20
    37a4:	bfc50e00 	svclt	0x00c50e00
    37a8:	2000000b 	andcs	r0, r0, fp
    37ac:	001aa207 	andseq	sl, sl, r7, lsl #4
    37b0:	e9c70e00 	stmib	r7, {r9, sl, fp}^
    37b4:	2400000b 	strcs	r0, [r0], #-11
    37b8:	001d7607 	andseq	r7, sp, r7, lsl #12
    37bc:	0dca0e00 	stcleq	14, cr0, [sl]
    37c0:	2800000c 	stmdacs	r0, {r2, r3}
    37c4:	001d5807 	andseq	r5, sp, r7, lsl #16
    37c8:	27cb0e00 	strbcs	r0, [fp, r0, lsl #28]
    37cc:	2c00000c 	stccs	0, cr0, [r0], {12}
    37d0:	62755f08 	rsbsvs	r5, r5, #8, 30
    37d4:	0fce0e00 	svceq	0x00ce0e00
    37d8:	30000009 	andcc	r0, r0, r9
    37dc:	70755f08 	rsbsvc	r5, r5, r8, lsl #30
    37e0:	34cf0e00 	strbcc	r0, [pc], #3584	; 37e8 <startup-0x1fffc818>
    37e4:	38000009 	stmdacc	r0, {r0, r3}
    37e8:	72755f08 	rsbsvc	r5, r5, #8, 30
    37ec:	89d00e00 	ldmibhi	r0, {r9, sl, fp}^
    37f0:	3c000000 	stccc	0, cr0, [r0], {-0}
    37f4:	001d0807 	andseq	r0, sp, r7, lsl #16
    37f8:	2dd30e00 	ldclcs	14, cr0, [r3]
    37fc:	4000000c 	andmi	r0, r0, ip
    3800:	001adc07 	andseq	sp, sl, r7, lsl #24
    3804:	3dd40e00 	ldclcc	14, cr0, [r4]
    3808:	4300000c 	movwmi	r0, #12
    380c:	626c5f08 	rsbvs	r5, ip, #8, 30
    3810:	0fd70e00 	svceq	0x00d70e00
    3814:	44000009 	strmi	r0, [r0], #-9
    3818:	001db507 	andseq	fp, sp, r7, lsl #10
    381c:	89da0e00 	ldmibhi	sl, {r9, sl, fp}^
    3820:	4c000000 	stcmi	0, cr0, [r0], {-0}
    3824:	001ee007 	andseq	lr, lr, r7
    3828:	dbdb0e00 	blle	ff6c7030 <_global_impure_ptr+0xdf6c1f14>
    382c:	50000006 	andpl	r0, r0, r6
    3830:	001e3307 	andseq	r3, lr, r7, lsl #6
    3834:	82de0e00 	sbcshi	r0, lr, #0, 28
    3838:	5400000a 	strpl	r0, [r0], #-10
    383c:	001bea07 	andseq	lr, fp, r7, lsl #20
    3840:	58e20e00 	stmiapl	r2!, {r9, sl, fp}^
    3844:	58000007 	stmdapl	r0, {r0, r1, r2}
    3848:	001d2407 	andseq	r2, sp, r7, lsl #8
    384c:	4de40e00 	stclmi	14, cr0, [r4]
    3850:	5c000007 	stcpl	0, cr0, [r0], {7}
    3854:	001c2307 	andseq	r2, ip, r7, lsl #6
    3858:	89e50e00 	stmibhi	r5!, {r9, sl, fp}^
    385c:	64000000 	strvs	r0, [r0], #-0
    3860:	00892100 	addeq	r2, r9, r0, lsl #2
    3864:	0a820000 	beq	fe08386c <_global_impure_ptr+0xde07e750>
    3868:	82220000 	eorhi	r0, r2, #0
    386c:	2200000a 	andcs	r0, r0, #10
    3870:	00000763 	andeq	r0, r0, r3, ror #14
    3874:	00076522 	andeq	r6, r7, r2, lsr #10
    3878:	00892200 	addeq	r2, r9, r0, lsl #4
    387c:	17000000 	strne	r0, [r0, -r0]
    3880:	000a8d04 	andeq	r8, sl, r4, lsl #26
    3884:	0a821c00 	beq	fe08a88c <_global_impure_ptr+0xde085770>
    3888:	ad230000 	stcge	0, cr0, [r3, #-0]
    388c:	2800001b 	stmdacs	r0, {r0, r1, r3, r4}
    3890:	02390e04 	eorseq	r0, r9, #4, 28	; 0x40
    3894:	00000bbf 			; <UNDEFINED> instruction: 0x00000bbf
    3898:	001ce314 	andseq	lr, ip, r4, lsl r3
    389c:	023b0e00 	eorseq	r0, fp, #0, 28
    38a0:	00000089 	andeq	r0, r0, r9, lsl #1
    38a4:	1bcc1400 	blne	ff3088ac <_global_impure_ptr+0xdf303790>
    38a8:	400e0000 	andmi	r0, lr, r0
    38ac:	000c9402 	andeq	r9, ip, r2, lsl #8
    38b0:	ad140400 	cfldrsge	mvf0, [r4, #-0]
    38b4:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    38b8:	0c940240 	lfmeq	f0, 4, [r4], {64}	; 0x40
    38bc:	14080000 	strne	r0, [r8], #-0
    38c0:	00001d0e 	andeq	r1, r0, lr, lsl #26
    38c4:	9402400e 	strls	r4, [r2], #-14
    38c8:	0c00000c 	stceq	0, cr0, [r0], {12}
    38cc:	001e6f14 	andseq	r6, lr, r4, lsl pc
    38d0:	02420e00 	subeq	r0, r2, #0, 28
    38d4:	00000089 	andeq	r0, r0, r9, lsl #1
    38d8:	1c5c1410 	cfldrdne	mvd1, [ip], {16}
    38dc:	430e0000 	movwmi	r0, #57344	; 0xe000
    38e0:	000e7602 	andeq	r7, lr, r2, lsl #12
    38e4:	94141400 	ldrls	r1, [r4], #-1024	; 0xfffffc00
    38e8:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    38ec:	00890246 	addeq	r0, r9, r6, asr #4
    38f0:	14300000 	ldrtne	r0, [r0], #-0
    38f4:	00001e97 	muleq	r0, r7, lr
    38f8:	8b02470e 	blhi	95538 <startup-0x1ff6aac8>
    38fc:	3400000e 	strcc	r0, [r0], #-14
    3900:	001c1814 	andseq	r1, ip, r4, lsl r8
    3904:	02490e00 	subeq	r0, r9, #0, 28
    3908:	00000089 	andeq	r0, r0, r9, lsl #1
    390c:	1a981438 	bne	fe6089f4 <_global_impure_ptr+0xde6038d8>
    3910:	4b0e0000 	blmi	383918 <startup-0x1fc7c6e8>
    3914:	000e9c02 	andeq	r9, lr, r2, lsl #24
    3918:	a7143c00 	ldrge	r3, [r4, -r0, lsl #24]
    391c:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    3920:	07d5024e 	ldrbeq	r0, [r5, lr, asr #4]
    3924:	14400000 	strbne	r0, [r0], #-0
    3928:	00001b36 	andeq	r1, r0, r6, lsr fp
    392c:	89024f0e 	stmdbhi	r2, {r1, r2, r3, r8, r9, sl, fp, lr}
    3930:	44000000 	strmi	r0, [r0], #-0
    3934:	001c0b14 	andseq	r0, ip, r4, lsl fp
    3938:	02500e00 	subseq	r0, r0, #0, 28
    393c:	000007d5 	ldrdeq	r0, [r0], -r5
    3940:	1cb21448 	cfldrsne	mvf1, [r2], #288	; 0x120
    3944:	510e0000 	mrspl	r0, (UNDEF: 14)
    3948:	000ea202 	andeq	sl, lr, r2, lsl #4
    394c:	b6144c00 	ldrlt	r4, [r4], -r0, lsl #24
    3950:	0e00001a 	mcreq	0, 0, r0, cr0, cr10, {0}
    3954:	00890254 	addeq	r0, r9, r4, asr r2
    3958:	14500000 	ldrbne	r0, [r0], #-0
    395c:	00001bfa 	strdeq	r1, [r0], -sl
    3960:	6502550e 	strvs	r5, [r2, #-1294]	; 0xfffffaf2
    3964:	54000007 	strpl	r0, [r0], #-7
    3968:	001d0314 	andseq	r0, sp, r4, lsl r3
    396c:	02780e00 	rsbseq	r0, r8, #0, 28
    3970:	00000e54 	andeq	r0, r0, r4, asr lr
    3974:	1d3f2458 	cfldrsne	mvf2, [pc, #-352]!	; 381c <startup-0x1fffc7e4>
    3978:	7c0e0000 	stcvc	0, cr0, [lr], {-0}
    397c:	0008f202 	andeq	pc, r8, r2, lsl #4
    3980:	24014800 	strcs	r4, [r1], #-2048	; 0xfffff800
    3984:	00001c53 	andeq	r1, r0, r3, asr ip
    3988:	b4027d0e 	strlt	r7, [r2], #-3342	; 0xfffff2f2
    398c:	4c000008 	stcmi	0, cr0, [r0], {8}
    3990:	1bf02401 	blne	ffc0c99c <_global_impure_ptr+0xdfc07880>
    3994:	810e0000 	mrshi	r0, (UNDEF: 14)
    3998:	000eb302 	andeq	fp, lr, r2, lsl #6
    399c:	2402dc00 	strcs	sp, [r2], #-3072	; 0xfffff400
    39a0:	00001c80 	andeq	r1, r0, r0, lsl #25
    39a4:	5902860e 	stmdbpl	r2, {r1, r2, r3, r9, sl, pc}
    39a8:	e000000c 	and	r0, r0, ip
    39ac:	1a492402 	bne	124c9bc <startup-0x1edb3644>
    39b0:	880e0000 	stmdahi	lr, {}	; <UNPREDICTABLE>
    39b4:	000ebf02 	andeq	fp, lr, r2, lsl #30
    39b8:	0002ec00 	andeq	lr, r2, r0, lsl #24
    39bc:	0a640417 	beq	1904a20 <startup-0x1e6fb5e0>
    39c0:	89210000 	stmdbhi	r1!, {}	; <UNPREDICTABLE>
    39c4:	e3000000 	movw	r0, #0
    39c8:	2200000b 	andcs	r0, r0, #11
    39cc:	00000a82 	andeq	r0, r0, r2, lsl #21
    39d0:	00076322 	andeq	r6, r7, r2, lsr #6
    39d4:	0be32200 	bleq	ff8cc1dc <_global_impure_ptr+0xdf8c70c0>
    39d8:	89220000 	stmdbhi	r2!, {}	; <UNPREDICTABLE>
    39dc:	00000000 	andeq	r0, r0, r0
    39e0:	07720417 			; <UNDEFINED> instruction: 0x07720417
    39e4:	04170000 	ldreq	r0, [r7], #-0
    39e8:	00000bc5 	andeq	r0, r0, r5, asr #23
    39ec:	0006e621 	andeq	lr, r6, r1, lsr #12
    39f0:	000c0d00 	andeq	r0, ip, r0, lsl #26
    39f4:	0a822200 	beq	fe08c1fc <_global_impure_ptr+0xde0870e0>
    39f8:	63220000 			; <UNDEFINED> instruction: 0x63220000
    39fc:	22000007 	andcs	r0, r0, #7
    3a00:	000006e6 	andeq	r0, r0, r6, ror #13
    3a04:	00008922 	andeq	r8, r0, r2, lsr #18
    3a08:	04170000 	ldreq	r0, [r7], #-0
    3a0c:	00000bef 	andeq	r0, r0, pc, ror #23
    3a10:	00008921 	andeq	r8, r0, r1, lsr #18
    3a14:	000c2700 	andeq	r2, ip, r0, lsl #14
    3a18:	0a822200 	beq	fe08c220 <_global_impure_ptr+0xde087104>
    3a1c:	63220000 			; <UNDEFINED> instruction: 0x63220000
    3a20:	00000007 	andeq	r0, r0, r7
    3a24:	0c130417 	cfldrseq	mvf0, [r3], {23}
    3a28:	37090000 	strcc	r0, [r9, -r0]
    3a2c:	3d000000 	stccc	0, cr0, [r0, #-0]
    3a30:	0a00000c 	beq	3a68 <startup-0x1fffc598>
    3a34:	00000090 	muleq	r0, r0, r0
    3a38:	37090002 	strcc	r0, [r9, -r2]
    3a3c:	4d000000 	stcmi	0, cr0, [r0, #-0]
    3a40:	0a00000c 	beq	3a78 <startup-0x1fffc588>
    3a44:	00000090 	muleq	r0, r0, r0
    3a48:	0d120000 	ldceq	0, cr0, [r2, #-0]
    3a4c:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    3a50:	093a011f 	ldmdbeq	sl!, {r0, r1, r2, r3, r4, r8}
    3a54:	c2250000 	eorgt	r0, r5, #0
    3a58:	0c00001c 	stceq	0, cr0, [r0], {28}
    3a5c:	8e01230e 	cdphi	3, 0, cr2, cr1, cr14, {0}
    3a60:	1400000c 	strne	r0, [r0], #-12
    3a64:	00001d32 	andeq	r1, r0, r2, lsr sp
    3a68:	8e01250e 	cfsh32hi	mvfx2, mvfx1, #14
    3a6c:	0000000c 	andeq	r0, r0, ip
    3a70:	001c6714 	andseq	r6, ip, r4, lsl r7
    3a74:	01260e00 			; <UNDEFINED> instruction: 0x01260e00
    3a78:	00000089 	andeq	r0, r0, r9, lsl #1
    3a7c:	1cbc1404 	cfldrsne	mvf1, [ip], #16
    3a80:	270e0000 	strcs	r0, [lr, -r0]
    3a84:	000c9401 	andeq	r9, ip, r1, lsl #8
    3a88:	17000800 	strne	r0, [r0, -r0, lsl #16]
    3a8c:	000c5904 	andeq	r5, ip, r4, lsl #18
    3a90:	4d041700 	stcmi	7, cr1, [r4, #-0]
    3a94:	2500000c 	strcs	r0, [r0, #-12]
    3a98:	00001da5 	andeq	r1, r0, r5, lsr #27
    3a9c:	013f0e0e 	teqeq	pc, lr, lsl #28
    3aa0:	00000ccf 	andeq	r0, r0, pc, asr #25
    3aa4:	001d7014 	andseq	r7, sp, r4, lsl r0
    3aa8:	01400e00 	cmpeq	r0, r0, lsl #28
    3aac:	00000ccf 	andeq	r0, r0, pc, asr #25
    3ab0:	1af51400 	bne	ffd48ab8 <_global_impure_ptr+0xdfd4399c>
    3ab4:	410e0000 	mrsmi	r0, (UNDEF: 14)
    3ab8:	000ccf01 	andeq	ip, ip, r1, lsl #30
    3abc:	b6140600 	ldrlt	r0, [r4], -r0, lsl #12
    3ac0:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    3ac4:	00500142 	subseq	r0, r0, r2, asr #2
    3ac8:	000c0000 	andeq	r0, ip, r0
    3acc:	00005009 	andeq	r5, r0, r9
    3ad0:	000cdf00 	andeq	sp, ip, r0, lsl #30
    3ad4:	00900a00 	addseq	r0, r0, r0, lsl #20
    3ad8:	00020000 	andeq	r0, r2, r0
    3adc:	590ed013 	stmdbpl	lr, {r0, r1, r4, ip, lr, pc}
    3ae0:	000de002 	andeq	lr, sp, r2
    3ae4:	1b791400 	blne	1e48aec <startup-0x1e1b7514>
    3ae8:	5b0e0000 	blpl	383af0 <startup-0x1fc7c510>
    3aec:	00009002 	andeq	r9, r0, r2
    3af0:	d7140000 	ldrle	r0, [r4, -r0]
    3af4:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    3af8:	0765025c 			; <UNDEFINED> instruction: 0x0765025c
    3afc:	14040000 	strne	r0, [r4], #-0
    3b00:	00001aa9 	andeq	r1, r0, r9, lsr #21
    3b04:	e0025d0e 	and	r5, r2, lr, lsl #26
    3b08:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    3b0c:	001b4d14 	andseq	r4, fp, r4, lsl sp
    3b10:	025e0e00 	subseq	r0, lr, #0, 28
    3b14:	000007eb 	andeq	r0, r0, fp, ror #15
    3b18:	1c981424 	cfldrsne	mvf1, [r8], {36}	; 0x24
    3b1c:	5f0e0000 	svcpl	0x000e0000
    3b20:	00008902 	andeq	r8, r0, r2, lsl #18
    3b24:	2d144800 	ldccs	8, cr4, [r4, #-0]
    3b28:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    3b2c:	00820260 	addeq	r0, r2, r0, ror #4
    3b30:	14500000 	ldrbne	r0, [r0], #-0
    3b34:	00001e1f 	andeq	r1, r0, pc, lsl lr
    3b38:	9a02610e 	bls	9bf78 <startup-0x1ff64088>
    3b3c:	5800000c 	stmdapl	r0, {r2, r3}
    3b40:	001e3914 	andseq	r3, lr, r4, lsl r9
    3b44:	02620e00 	rsbeq	r0, r2, #0, 28
    3b48:	0000074d 	andeq	r0, r0, sp, asr #14
    3b4c:	1d8b1468 	cfstrsne	mvf1, [fp, #416]	; 0x1a0
    3b50:	630e0000 	movwvs	r0, #57344	; 0xe000
    3b54:	00074d02 	andeq	r4, r7, r2, lsl #26
    3b58:	16147000 	ldrne	r7, [r4], -r0
    3b5c:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    3b60:	074d0264 	strbeq	r0, [sp, -r4, ror #4]
    3b64:	14780000 	ldrbtne	r0, [r8], #-0
    3b68:	00001aeb 	andeq	r1, r0, fp, ror #21
    3b6c:	f002650e 			; <UNDEFINED> instruction: 0xf002650e
    3b70:	8000000d 	andhi	r0, r0, sp
    3b74:	001c3714 	andseq	r3, ip, r4, lsl r7
    3b78:	02660e00 	rsbeq	r0, r6, #0, 28
    3b7c:	00000e00 	andeq	r0, r0, r0, lsl #28
    3b80:	1f1d1488 	svcne	0x001d1488
    3b84:	670e0000 	strvs	r0, [lr, -r0]
    3b88:	00008902 	andeq	r8, r0, r2, lsl #18
    3b8c:	2814a000 	ldmdacs	r4, {sp, pc}
    3b90:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    3b94:	074d0268 	strbeq	r0, [sp, -r8, ror #4]
    3b98:	14a40000 	strtne	r0, [r4], #0
    3b9c:	00001de4 	andeq	r1, r0, r4, ror #27
    3ba0:	4d02690e 	vstrmi.16	s12, [r2, #-28]	; 0xffffffe4	; <UNPREDICTABLE>
    3ba4:	ac000007 	stcge	0, cr0, [r0], {7}
    3ba8:	001ecf14 	andseq	ip, lr, r4, lsl pc
    3bac:	026a0e00 	rsbeq	r0, sl, #0, 28
    3bb0:	0000074d 	andeq	r0, r0, sp, asr #14
    3bb4:	1cea14b4 	cfstrdne	mvd1, [sl], #720	; 0x2d0
    3bb8:	6b0e0000 	blvs	383bc0 <startup-0x1fc7c440>
    3bbc:	00074d02 	andeq	r4, r7, r2, lsl #26
    3bc0:	cb14bc00 	blgt	532bc8 <startup-0x1facd438>
    3bc4:	0e00001a 	mcreq	0, 0, r0, cr0, cr10, {0}
    3bc8:	074d026c 	strbeq	r0, [sp, -ip, ror #4]
    3bcc:	14c40000 	strbne	r0, [r4], #0
    3bd0:	00001ce1 	andeq	r1, r0, r1, ror #25
    3bd4:	89026d0e 	stmdbhi	r2, {r1, r2, r3, r8, sl, fp, sp, lr}
    3bd8:	cc000000 	stcgt	0, cr0, [r0], {-0}
    3bdc:	076b0900 	strbeq	r0, [fp, -r0, lsl #18]!
    3be0:	0df00000 	ldcleq	0, cr0, [r0]
    3be4:	900a0000 	andls	r0, sl, r0
    3be8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3bec:	076b0900 	strbeq	r0, [fp, -r0, lsl #18]!
    3bf0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3bf4:	900a0000 	andls	r0, sl, r0
    3bf8:	07000000 	streq	r0, [r0, -r0]
    3bfc:	076b0900 	strbeq	r0, [fp, -r0, lsl #18]!
    3c00:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    3c04:	900a0000 	andls	r0, sl, r0
    3c08:	17000000 	strne	r0, [r0, -r0]
    3c0c:	0ef01300 	cdpeq	3, 15, cr1, cr0, cr0, {0}
    3c10:	0e340272 	mrceq	2, 1, r0, cr4, cr2, {3}
    3c14:	90140000 	andsls	r0, r4, r0
    3c18:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    3c1c:	0e340275 	mrceq	2, 1, r0, cr4, cr5, {3}
    3c20:	14000000 	strne	r0, [r0], #-0
    3c24:	00001c88 	andeq	r1, r0, r8, lsl #25
    3c28:	4402760e 	strmi	r7, [r2], #-1550	; 0xfffff9f2
    3c2c:	7800000e 	stmdavc	r0, {r1, r2, r3}
    3c30:	09340900 	ldmdbeq	r4!, {r8, fp}
    3c34:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
    3c38:	900a0000 	andls	r0, sl, r0
    3c3c:	1d000000 	stcne	0, cr0, [r0, #-0]
    3c40:	00900900 	addseq	r0, r0, r0, lsl #18
    3c44:	0e540000 	cdpeq	0, 5, cr0, cr4, cr0, {0}
    3c48:	900a0000 	andls	r0, sl, r0
    3c4c:	1d000000 	stcne	0, cr0, [r0, #-0]
    3c50:	0ef02600 	cdpeq	6, 15, cr2, cr0, cr0, {0}
    3c54:	0e760257 	mrceq	2, 3, r0, cr6, cr7, {2}
    3c58:	ad270000 	stcge	0, cr0, [r7, #-0]
    3c5c:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    3c60:	0cdf026e 	lfmeq	f0, 2, [pc], {110}	; 0x6e
    3c64:	be270000 	cdplt	0, 2, cr0, cr7, cr0, {0}
    3c68:	0e00001a 	mcreq	0, 0, r0, cr0, cr10, {0}
    3c6c:	0e100277 	mrceq	2, 0, r0, cr0, cr7, {3}
    3c70:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3c74:	0000076b 	andeq	r0, r0, fp, ror #14
    3c78:	00000e86 	andeq	r0, r0, r6, lsl #29
    3c7c:	0000900a 	andeq	r9, r0, sl
    3c80:	18001800 	stmdane	r0, {fp, ip}
    3c84:	00001a36 	andeq	r1, r0, r6, lsr sl
    3c88:	0e860417 	mcreq	4, 4, r0, cr6, cr7, {0}
    3c8c:	9c280000 	stcls	0, cr0, [r8], #-0
    3c90:	2200000e 	andcs	r0, r0, #14
    3c94:	00000a82 	andeq	r0, r0, r2, lsl #21
    3c98:	91041700 	tstls	r4, r0, lsl #14
    3c9c:	1700000e 	strne	r0, [r0, -lr]
    3ca0:	0007d504 	andeq	sp, r7, r4, lsl #10
    3ca4:	0eb32800 	cdpeq	8, 11, cr2, cr3, cr0, {0}
    3ca8:	89220000 	stmdbhi	r2!, {}	; <UNPREDICTABLE>
    3cac:	00000000 	andeq	r0, r0, r0
    3cb0:	0eb90417 	mrceq	4, 5, r0, cr9, cr7, {0}
    3cb4:	04170000 	ldreq	r0, [r7], #-0
    3cb8:	00000ea8 	andeq	r0, r0, r8, lsr #29
    3cbc:	000c4d09 	andeq	r4, ip, r9, lsl #26
    3cc0:	000ecf00 	andeq	ip, lr, r0, lsl #30
    3cc4:	00900a00 	addseq	r0, r0, r0, lsl #20
    3cc8:	00020000 	andeq	r0, r2, r0
    3ccc:	001bbb0e 	andseq	fp, fp, lr, lsl #22
    3cd0:	03070e00 	movweq	r0, #32256	; 0x7e00
    3cd4:	00000a82 	andeq	r0, r0, r2, lsl #21
    3cd8:	001bb40e 	andseq	fp, fp, lr, lsl #8
    3cdc:	03080e00 	movweq	r0, #36352	; 0x8e00
    3ce0:	00000a88 	andeq	r0, r0, r8, lsl #21
    3ce4:	ce040402 	cdpgt	4, 0, cr0, cr4, cr2, {0}
    3ce8:	0200001c 	andeq	r0, r0, #28
    3cec:	1c910408 	cfldrsne	mvf0, [r1], {8}
    3cf0:	2d290000 	stccs	0, cr0, [r9, #-0]
    3cf4:	0100001a 	tsteq	r0, sl, lsl r0
    3cf8:	000f060e 	andeq	r0, pc, lr, lsl #12
    3cfc:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    3d00:	1720004b 	strne	r0, [r0, -fp, asr #32]!
    3d04:	00011a04 	andeq	r1, r1, r4, lsl #20
    3d08:	1c022900 			; <UNDEFINED> instruction: 0x1c022900
    3d0c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    3d10:	00000f06 	andeq	r0, r0, r6, lsl #30
    3d14:	4b080305 	blmi	204930 <startup-0x1fdfb6d0>
    3d18:	46292000 	strtmi	r2, [r9], -r0
    3d1c:	0100001e 	tsteq	r0, lr, lsl r0
    3d20:	00011a0e 	andeq	r1, r1, lr, lsl #20
    3d24:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    3d28:	2920004b 	stmdbcs	r0!, {r0, r1, r3, r6}
    3d2c:	00001cd4 	ldrdeq	r1, [r0], -r4
    3d30:	011a0e01 	tsteq	sl, r1, lsl #28
    3d34:	03050000 	movweq	r0, #20480	; 0x5000
    3d38:	20004b74 	andcs	r4, r0, r4, ror fp
    3d3c:	001f042a 	andseq	r0, pc, sl, lsr #8
    3d40:	97c20100 	strbls	r0, [r2, r0, lsl #2]
    3d44:	10000000 	andne	r0, r0, r0
    3d48:	7c200026 	stcvc	0, cr0, [r0], #-152	; 0xffffff68
    3d4c:	01000000 	mrseq	r0, (UNDEF: 0)
    3d50:	000f679c 	muleq	pc, ip, r7	; <UNPREDICTABLE>
    3d54:	1f2a2b00 	svcne	0x002a2b00
    3d58:	c2010000 	andgt	r0, r1, #0
    3d5c:	00000097 	muleq	r0, r7, r0
    3d60:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3d64:	001dfc2a 	andseq	pc, sp, sl, lsr #24
    3d68:	97af0100 	strls	r0, [pc, r0, lsl #2]!
    3d6c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    3d70:	28200025 	stmdacs	r0!, {r0, r2, r5}
    3d74:	01000000 	mrseq	r0, (UNDEF: 0)
    3d78:	000f8f9c 	muleq	pc, ip, pc	; <UNPREDICTABLE>
    3d7c:	1e2b2b00 	vmulne.f64	d2, d11, d0
    3d80:	af010000 	svcge	0x00010000
    3d84:	00000097 	muleq	r0, r7, r0
    3d88:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3d8c:	001d4f2c 	andseq	r4, sp, ip, lsr #30
    3d90:	97a90100 	strls	r0, [r9, r0, lsl #2]!
    3d94:	c2000000 	andgt	r0, r0, #0
    3d98:	26200025 	strtcs	r0, [r0], -r5, lsr #32
    3d9c:	01000000 	mrseq	r0, (UNDEF: 0)
    3da0:	000fb79c 	muleq	pc, ip, r7	; <UNPREDICTABLE>
    3da4:	15972b00 	ldrne	r2, [r7, #2816]	; 0xb00
    3da8:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    3dac:	00000fb7 			; <UNDEFINED> instruction: 0x00000fb7
    3db0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3db4:	00970417 	addseq	r0, r7, r7, lsl r4
    3db8:	862c0000 	strthi	r0, [ip], -r0
    3dbc:	0100001b 	tsteq	r0, fp, lsl r0
    3dc0:	00009791 	muleq	r0, r1, r7
    3dc4:	0024de00 	eoreq	sp, r4, r0, lsl #28
    3dc8:	0000e420 	andeq	lr, r0, r0, lsr #8
    3dcc:	319c0100 	orrscc	r0, ip, r0, lsl #2
    3dd0:	2d000010 	stccs	0, cr0, [r0, #-64]	; 0xffffffc0
    3dd4:	006d756e 	rsbeq	r7, sp, lr, ror #10
    3dd8:	00c29101 	sbceq	r9, r2, r1, lsl #2
    3ddc:	91020000 	mrsls	r0, (UNDEF: 2)
    3de0:	1b40295c 	blne	100e358 <startup-0x1eff1ca8>
    3de4:	93010000 	movwls	r0, #4096	; 0x1000
    3de8:	00000097 	muleq	r0, r7, r0
    3dec:	296d9102 	stmdbcs	sp!, {r1, r8, ip, pc}^
    3df0:	00001bd3 	ldrdeq	r1, [r0], -r3
    3df4:	10319301 	eorsne	r9, r1, r1, lsl #6
    3df8:	91020000 	mrsls	r0, (UNDEF: 2)
    3dfc:	25242e60 	strcs	r2, [r4, #-3680]!	; 0xfffff1a0
    3e00:	00542000 	subseq	r2, r4, r0
    3e04:	101a0000 	andsne	r0, sl, r0
    3e08:	692f0000 	stmdbvs	pc!, {}	; <UNPREDICTABLE>
    3e0c:	97970100 	ldrls	r0, [r7, r0, lsl #2]
    3e10:	02000000 	andeq	r0, r0, #0
    3e14:	30006f91 	mulcc	r0, r1, pc	; <UNPREDICTABLE>
    3e18:	20002578 	andcs	r2, r0, r8, ror r5
    3e1c:	00000040 	andeq	r0, r0, r0, asr #32
    3e20:	0100692f 	tsteq	r0, pc, lsr #18
    3e24:	0000979d 	muleq	r0, sp, r7
    3e28:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    3e2c:	97090000 	strls	r0, [r9, -r0]
    3e30:	41000000 	mrsmi	r0, (UNDEF: 0)
    3e34:	0a000010 	beq	3e7c <startup-0x1fffc184>
    3e38:	00000090 	muleq	r0, r0, r0
    3e3c:	a72c0009 	strge	r0, [ip, -r9]!
    3e40:	0100001c 	tsteq	r0, ip, lsl r0
    3e44:	00009781 	andeq	r9, r0, r1, lsl #15
    3e48:	0024a400 	eoreq	sl, r4, r0, lsl #8
    3e4c:	00003a20 	andeq	r3, r0, r0, lsr #20
    3e50:	699c0100 	ldmibvs	ip, {r8}
    3e54:	2b000010 	blcs	3e9c <startup-0x1fffc164>
    3e58:	00001cb7 			; <UNDEFINED> instruction: 0x00001cb7
    3e5c:	0fb78101 	svceq	0x00b78101
    3e60:	91020000 	mrsls	r0, (UNDEF: 2)
    3e64:	fb2c0074 	blx	b0403e <startup-0x1f4fbfc2>
    3e68:	0100001e 	tsteq	r0, lr, lsl r0
    3e6c:	00009773 	andeq	r9, r0, r3, ror r7
    3e70:	00245c00 	eoreq	r5, r4, r0, lsl #24
    3e74:	00004820 	andeq	r4, r0, r0, lsr #16
    3e78:	919c0100 	orrsls	r0, ip, r0, lsl #2
    3e7c:	2b000010 	blcs	3ec4 <startup-0x1fffc13c>
    3e80:	000015a1 	andeq	r1, r0, r1, lsr #11
    3e84:	00977301 	addseq	r7, r7, r1, lsl #6
    3e88:	91020000 	mrsls	r0, (UNDEF: 2)
    3e8c:	2b310077 	blcs	c44070 <startup-0x1f3bbf90>
    3e90:	0100001c 	tsteq	r0, ip, lsl r0
    3e94:	0023282d 	eoreq	r2, r3, sp, lsr #16
    3e98:	00013420 	andeq	r3, r1, r0, lsr #8
    3e9c:	d19c0100 	orrsle	r0, ip, r0, lsl #2
    3ea0:	29000010 	stmdbcs	r0, {r4}
    3ea4:	00001dbe 			; <UNDEFINED> instruction: 0x00001dbe
    3ea8:	06ba3f01 	ldrteq	r3, [sl], r1, lsl #30
    3eac:	91020000 	mrsls	r0, (UNDEF: 2)
    3eb0:	1b652968 	blne	194e458 <startup-0x1e6b1ba8>
    3eb4:	4c010000 	stcmi	0, cr0, [r1], {-0}
    3eb8:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3ebc:	29589102 	ldmdbcs	r8, {r1, r8, ip, pc}^
    3ec0:	00001afb 	strdeq	r1, [r0], -fp
    3ec4:	055c5d01 	ldrbeq	r5, [ip, #-3329]	; 0xfffff2ff
    3ec8:	91020000 	mrsls	r0, (UNDEF: 2)
    3ecc:	6e320054 	mrcvs	0, 1, r0, cr2, cr4, {2}
    3ed0:	0100001c 	tsteq	r0, ip, lsl r0
    3ed4:	00229013 	eoreq	r9, r2, r3, lsl r0
    3ed8:	00009820 	andeq	r9, r0, r0, lsr #16
    3edc:	339c0100 	orrscc	r0, ip, #0, 2
    3ee0:	00000018 	andeq	r0, r0, r8, lsl r0
    3ee4:	001e3429 	andseq	r3, lr, r9, lsr #8
    3ee8:	971f0100 	ldrls	r0, [pc, -r0, lsl #2]
    3eec:	02000000 	andeq	r0, r0, #0
    3ef0:	69296e91 	stmdbvs	r9!, {r0, r4, r7, r9, sl, fp, sp, lr}
    3ef4:	0100001d 	tsteq	r0, sp, lsl r0
    3ef8:	00009720 	andeq	r9, r0, r0, lsr #14
    3efc:	6f910200 	svcvs	0x00910200
    3f00:	Address 0x00003f00 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030104 	adfeqs	f0, f3, f4
  18:	0b0b0b3e 	bleq	2c2d18 <startup-0x1fd3d2e8>
  1c:	0b3a1349 	bleq	e84d48 <startup-0x1f17b2b8>
  20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
  28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  2c:	0400000d 	streq	r0, [r0], #-13
  30:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  34:	00000b1c 	andeq	r0, r0, ip, lsl fp
  38:	0b002405 	bleq	9054 <startup-0x1fff6fac>
  3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  40:	0600000e 	streq	r0, [r0], -lr
  44:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  4c:	00001349 	andeq	r1, r0, r9, asr #6
  50:	03001607 	movweq	r1, #1543	; 0x607
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0013490b 	andseq	r4, r3, fp, lsl #18
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	13490026 	movtne	r0, #36902	; 0x9026
  74:	130b0000 	movwne	r0, #45056	; 0xb000
  78:	3a050b01 	bcc	142c84 <startup-0x1febd37c>
  7c:	01053b0b 	tsteq	r5, fp, lsl #22
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  8c:	0b381349 	bleq	e04db8 <startup-0x1f1fb248>
  90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
  94:	3a0e0300 	bcc	380c9c <startup-0x1fc7f364>
  98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  9c:	00053813 	andeq	r3, r5, r3, lsl r8
  a0:	000d0e00 	andeq	r0, sp, r0, lsl #28
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	1349053b 	movtne	r0, #38203	; 0x953b
  ac:	00000538 	andeq	r0, r0, r8, lsr r5
  b0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
  b4:	00130113 	andseq	r0, r3, r3, lsl r1
  b8:	00211000 	eoreq	r1, r1, r0
  bc:	0b2f1349 	bleq	bc4de8 <startup-0x1f43b218>
  c0:	21110000 	tstcs	r1, r0
  c4:	2f134900 	svccs	0x00134900
  c8:	12000005 	andne	r0, r0, #5
  cc:	0b0b0113 	bleq	2c0520 <startup-0x1fd3fae0>
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	03000d13 	movweq	r0, #3347	; 0xd13
  dc:	3b0b3a08 	blcc	2ce904 <startup-0x1fd316fc>
  e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  e4:	1400000b 	strne	r0, [r0], #-11
  e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f4:	0000193c 	andeq	r1, r0, ip, lsr r9
  f8:	03003415 	movweq	r3, #1045	; 0x415
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	3f13490b 	svccc	0x0013490b
 104:	00193c19 	andseq	r3, r9, r9, lsl ip
 108:	01041600 	tsteq	r4, r0, lsl #12
 10c:	0b0b0b3e 	bleq	2c2e0c <startup-0x1fd3d1f4>
 110:	0b3a1349 	bleq	e84e3c <startup-0x1f17b1c4>
 114:	1301053b 	movwne	r0, #5435	; 0x153b
 118:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
 11c:	1c080300 	stcne	3, cr0, [r8], {-0}
 120:	1800000b 	stmdane	r0, {r0, r1, r3}
 124:	0b0b0113 	bleq	2c0578 <startup-0x1fd3fa88>
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	00001301 	andeq	r1, r0, r1, lsl #6
 130:	03000d19 	movweq	r0, #3353	; 0xd19
 134:	3b0b3a0e 	blcc	2ce974 <startup-0x1fd3168c>
 138:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 13c:	1a00000b 	bne	170 <startup-0x1ffffe90>
 140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 14c:	041b0000 	ldreq	r0, [fp], #-0
 150:	0b0b3e01 	bleq	2cf95c <startup-0x1fd306a4>
 154:	3a13490b 	bcc	4d2588 <startup-0x1fb2da78>
 158:	010b3b0b 	tsteq	fp, fp, lsl #22
 15c:	1c000013 	stcne	0, cr0, [r0], {19}
 160:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 164:	0b3a0b0b 	bleq	e82d98 <startup-0x1f17d268>
 168:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 16c:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
 170:	3a080300 	bcc	200d78 <startup-0x1fdff288>
 174:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 178:	000b3813 	andeq	r3, fp, r3, lsl r8
 17c:	00341e00 	eorseq	r1, r4, r0, lsl #28
 180:	0b3a0e03 	bleq	e83994 <startup-0x1f17c66c>
 184:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 188:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 18c:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 190:	03193f01 	tsteq	r9, #1, 30
 194:	3b0b3a0e 	blcc	2ce9d4 <startup-0x1fd3162c>
 198:	1119270b 	tstne	r9, fp, lsl #14
 19c:	40061201 	andmi	r1, r6, r1, lsl #4
 1a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1a4:	00001301 	andeq	r1, r0, r1, lsl #6
 1a8:	11010b20 	tstne	r1, r0, lsr #22
 1ac:	00061201 	andeq	r1, r6, r1, lsl #4
 1b0:	00342100 	eorseq	r2, r4, r0, lsl #2
 1b4:	0b3a0803 	bleq	e821c8 <startup-0x1f17de38>
 1b8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1bc:	00001802 	andeq	r1, r0, r2, lsl #16
 1c0:	3f002e22 	svccc	0x00002e22
 1c4:	3a0e0319 	bcc	380e30 <startup-0x1fc7f1d0>
 1c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1d0:	97184006 	ldrls	r4, [r8, -r6]
 1d4:	00001942 	andeq	r1, r0, r2, asr #18
 1d8:	3f012e23 	svccc	0x00012e23
 1dc:	3a0e0319 	bcc	380e48 <startup-0x1fc7f1b8>
 1e0:	110b3b0b 	tstne	fp, fp, lsl #22
 1e4:	40061201 	andmi	r1, r6, r1, lsl #4
 1e8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1ec:	00001301 	andeq	r1, r0, r1, lsl #6
 1f0:	3f012e24 	svccc	0x00012e24
 1f4:	3a0e0319 	bcc	380e60 <startup-0x1fc7f1a0>
 1f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 1fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 200:	97184006 	ldrls	r4, [r8, -r6]
 204:	13011942 	movwne	r1, #6466	; 0x1942
 208:	05250000 	streq	r0, [r5, #-0]!
 20c:	3a0e0300 	bcc	380e14 <startup-0x1fc7f1ec>
 210:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 214:	00180213 	andseq	r0, r8, r3, lsl r2
 218:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
 21c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 220:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 224:	13491927 	movtne	r1, #39207	; 0x9927
 228:	06120111 			; <UNDEFINED> instruction: 0x06120111
 22c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 230:	00130119 	andseq	r0, r3, r9, lsl r1
 234:	00342700 	eorseq	r2, r4, r0, lsl #14
 238:	0b3a0e03 	bleq	e83a4c <startup-0x1f17c5b4>
 23c:	1349053b 	movtne	r0, #38203	; 0x953b
 240:	00001802 	andeq	r1, r0, r2, lsl #16
 244:	3f002e28 	svccc	0x00002e28
 248:	3a0e0319 	bcc	380eb4 <startup-0x1fc7f14c>
 24c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 250:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 254:	97184006 	ldrls	r4, [r8, -r6]
 258:	00001942 	andeq	r1, r0, r2, asr #18
 25c:	03003429 	movweq	r3, #1065	; 0x429
 260:	3b0b3a08 	blcc	2cea88 <startup-0x1fd31578>
 264:	02134905 	andseq	r4, r3, #81920	; 0x14000
 268:	2a000018 	bcs	2d0 <startup-0x1ffffd30>
 26c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 270:	0b3a0e03 	bleq	e83a84 <startup-0x1f17c57c>
 274:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 278:	06120111 			; <UNDEFINED> instruction: 0x06120111
 27c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 280:	00130119 	andseq	r0, r3, r9, lsl r1
 284:	000f2b00 	andeq	r2, pc, r0, lsl #22
 288:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 28c:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
 290:	03193f00 	tsteq	r9, #0, 30
 294:	3b0b3a0e 	blcc	2cead4 <startup-0x1fd3152c>
 298:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 29c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2a0:	97184006 	ldrls	r4, [r8, -r6]
 2a4:	00001942 	andeq	r1, r0, r2, asr #18
 2a8:	3f012e2d 	svccc	0x00012e2d
 2ac:	3a0e0319 	bcc	380f18 <startup-0x1fc7f0e8>
 2b0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 2b4:	11134919 	tstne	r3, r9, lsl r9
 2b8:	40061201 	andmi	r1, r6, r1, lsl #4
 2bc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2c0:	00001301 	andeq	r1, r0, r1, lsl #6
 2c4:	03012e2e 	movweq	r2, #7726	; 0x1e2e
 2c8:	3b0b3a0e 	blcc	2ceb08 <startup-0x1fd314f8>
 2cc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 2d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2d4:	96184006 	ldrls	r4, [r8], -r6
 2d8:	13011942 	movwne	r1, #6466	; 0x1942
 2dc:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
 2e0:	3a0e0301 	bcc	380eec <startup-0x1fc7f114>
 2e4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 2e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2ec:	97184006 	ldrls	r4, [r8, -r6]
 2f0:	00001942 	andeq	r1, r0, r2, asr #18
 2f4:	01110100 	tsteq	r1, r0, lsl #2
 2f8:	0b130e25 	bleq	4c3b94 <startup-0x1fb3c46c>
 2fc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 300:	06120111 			; <UNDEFINED> instruction: 0x06120111
 304:	00001710 	andeq	r1, r0, r0, lsl r7
 308:	0b002402 	bleq	9318 <startup-0x1fff6ce8>
 30c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 310:	0300000e 	movweq	r0, #14
 314:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 318:	0b3b0b3a 	bleq	ec3008 <startup-0x1f13cff8>
 31c:	00001349 	andeq	r1, r0, r9, asr #6
 320:	0b002404 	bleq	9338 <startup-0x1fff6cc8>
 324:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 328:	05000008 	streq	r0, [r0, #-8]
 32c:	13490035 	movtne	r0, #36917	; 0x9035
 330:	34060000 	strcc	r0, [r6], #-0
 334:	3a0e0300 	bcc	380f3c <startup-0x1fc7f0c4>
 338:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 33c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 340:	07000019 	smladeq	r0, r9, r0, r0
 344:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 348:	0b3b0b3a 	bleq	ec3038 <startup-0x1f13cfc8>
 34c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 350:	0000193c 	andeq	r1, r0, ip, lsr r9
 354:	3e010408 	cdpcc	4, 0, cr0, cr1, cr8, {0}
 358:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 35c:	3b0b3a13 	blcc	2cebb0 <startup-0x1fd31450>
 360:	00130105 	andseq	r0, r3, r5, lsl #2
 364:	00280900 	eoreq	r0, r8, r0, lsl #18
 368:	0b1c0e03 	bleq	703b7c <startup-0x1f8fc484>
 36c:	130a0000 	movwne	r0, #40960	; 0xa000
 370:	3a0b0b01 	bcc	2c2f7c <startup-0x1fd3d084>
 374:	01053b0b 	tsteq	r5, fp, lsl #22
 378:	0b000013 	bleq	3cc <startup-0x1ffffc34>
 37c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 380:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 384:	0b381349 	bleq	e050b0 <startup-0x1f1faf50>
 388:	0d0c0000 	stceq	0, cr0, [ip, #-0]
 38c:	3a080300 	bcc	200f94 <startup-0x1fdff06c>
 390:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 394:	000b3813 	andeq	r3, fp, r3, lsl r8
 398:	01010d00 	tsteq	r1, r0, lsl #26
 39c:	13011349 	movwne	r1, #4937	; 0x1349
 3a0:	210e0000 	mrscs	r0, (UNDEF: 14)
 3a4:	2f134900 	svccs	0x00134900
 3a8:	0f00000b 	svceq	0x0000000b
 3ac:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 3b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3b4:	00001349 	andeq	r1, r0, r9, asr #6
 3b8:	3e010410 	cfmvdlrcc	mvd1, r0
 3bc:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 3c0:	3b0b3a13 	blcc	2cec14 <startup-0x1fd313ec>
 3c4:	0013010b 	andseq	r0, r3, fp, lsl #2
 3c8:	01131100 	tsteq	r3, r0, lsl #2
 3cc:	0b3a0b0b 	bleq	e83000 <startup-0x1f17d000>
 3d0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 3d4:	0d120000 	ldceq	0, cr0, [r2, #-0]
 3d8:	3a0e0300 	bcc	380fe0 <startup-0x1fc7f020>
 3dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3e0:	000b3813 	andeq	r3, fp, r3, lsl r8
 3e4:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 3e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3f0:	01111927 	tsteq	r1, r7, lsr #18
 3f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3f8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 3fc:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 400:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 404:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 408:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 40c:	34150000 	ldrcc	r0, [r5], #-0
 410:	3a0e0300 	bcc	381018 <startup-0x1fc7efe8>
 414:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 418:	00180213 	andseq	r0, r8, r3, lsl r2
 41c:	000f1600 	andeq	r1, pc, r0, lsl #12
 420:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 424:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 428:	03193f01 	tsteq	r9, #1, 30
 42c:	3b0b3a0e 	blcc	2cec6c <startup-0x1fd31394>
 430:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 434:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 438:	97184006 	ldrls	r4, [r8, -r6]
 43c:	13011942 	movwne	r1, #6466	; 0x1942
 440:	34180000 	ldrcc	r0, [r8], #-0
 444:	3a080300 	bcc	20104c <startup-0x1fdfefb4>
 448:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 44c:	00180213 	andseq	r0, r8, r3, lsl r2
 450:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 454:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 458:	0b3b0b3a 	bleq	ec3148 <startup-0x1f13ceb8>
 45c:	01111927 	tsteq	r1, r7, lsr #18
 460:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 464:	01194297 			; <UNDEFINED> instruction: 0x01194297
 468:	1a000013 	bne	4bc <startup-0x1ffffb44>
 46c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 470:	0b3b0b3a 	bleq	ec3160 <startup-0x1f13cea0>
 474:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 478:	341b0000 	ldrcc	r0, [fp], #-0
 47c:	3a0e0300 	bcc	381084 <startup-0x1fc7ef7c>
 480:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 484:	00180213 	andseq	r0, r8, r3, lsl r2
 488:	00341c00 	eorseq	r1, r4, r0, lsl #24
 48c:	0b3a0803 	bleq	e824a0 <startup-0x1f17db60>
 490:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 494:	00001802 	andeq	r1, r0, r2, lsl #16
 498:	3f012e1d 	svccc	0x00012e1d
 49c:	3a0e0319 	bcc	381108 <startup-0x1fc7eef8>
 4a0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4a4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4a8:	96184006 	ldrls	r4, [r8], -r6
 4ac:	00001942 	andeq	r1, r0, r2, asr #18
 4b0:	01110100 	tsteq	r1, r0, lsl #2
 4b4:	0b130e25 	bleq	4c3d50 <startup-0x1fb3c2b0>
 4b8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 4bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4c0:	00001710 	andeq	r1, r0, r0, lsl r7
 4c4:	0b002402 	bleq	94d4 <startup-0x1fff6b2c>
 4c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4cc:	0300000e 	movweq	r0, #14
 4d0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 4d4:	0b3b0b3a 	bleq	ec31c4 <startup-0x1f13ce3c>
 4d8:	00001349 	andeq	r1, r0, r9, asr #6
 4dc:	0b002404 	bleq	94f4 <startup-0x1fff6b0c>
 4e0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4e4:	05000008 	streq	r0, [r0, #-8]
 4e8:	13490035 	movtne	r0, #36917	; 0x9035
 4ec:	26060000 	strcs	r0, [r6], -r0
 4f0:	00134900 	andseq	r4, r3, r0, lsl #18
 4f4:	01130700 	tsteq	r3, r0, lsl #14
 4f8:	0b3a050b 	bleq	e8192c <startup-0x1f17e6d4>
 4fc:	1301053b 	movwne	r0, #5435	; 0x153b
 500:	0d080000 	stceq	0, cr0, [r8, #-0]
 504:	3a0e0300 	bcc	38110c <startup-0x1fc7eef4>
 508:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 50c:	000b3813 	andeq	r3, fp, r3, lsl r8
 510:	000d0900 	andeq	r0, sp, r0, lsl #18
 514:	0b3a0e03 	bleq	e83d28 <startup-0x1f17c2d8>
 518:	1349053b 	movtne	r0, #38203	; 0x953b
 51c:	00000538 	andeq	r0, r0, r8, lsr r5
 520:	03000d0a 	movweq	r0, #3338	; 0xd0a
 524:	3b0b3a08 	blcc	2ced4c <startup-0x1fd312b4>
 528:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 52c:	0b000005 	bleq	548 <startup-0x1ffffab8>
 530:	13490101 	movtne	r0, #37121	; 0x9101
 534:	00001301 	andeq	r1, r0, r1, lsl #6
 538:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
 53c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 540:	00210d00 	eoreq	r0, r1, r0, lsl #26
 544:	052f1349 	streq	r1, [pc, #-841]!	; 203 <startup-0x1ffffdfd>
 548:	160e0000 	strne	r0, [lr], -r0
 54c:	3a0e0300 	bcc	381154 <startup-0x1fc7eeac>
 550:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 554:	0f000013 	svceq	0x00000013
 558:	0b0b0113 	bleq	2c09ac <startup-0x1fd3f654>
 55c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 560:	00001301 	andeq	r1, r0, r1, lsl #6
 564:	03000d10 	movweq	r0, #3344	; 0xd10
 568:	3b0b3a08 	blcc	2ced90 <startup-0x1fd31270>
 56c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 570:	1100000b 	tstne	r0, fp
 574:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 578:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 57c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 580:	0000193c 	andeq	r1, r0, ip, lsr r9
 584:	03003412 	movweq	r3, #1042	; 0x412
 588:	3b0b3a0e 	blcc	2cedc8 <startup-0x1fd31238>
 58c:	3f13490b 	svccc	0x0013490b
 590:	00193c19 	andseq	r3, r9, r9, lsl ip
 594:	01041300 	mrseq	r1, LR_abt
 598:	0b0b0b3e 	bleq	2c3298 <startup-0x1fd3cd68>
 59c:	0b3a1349 	bleq	e852c8 <startup-0x1f17ad38>
 5a0:	1301053b 	movwne	r0, #5435	; 0x153b
 5a4:	28140000 	ldmdacs	r4, {}	; <UNPREDICTABLE>
 5a8:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 5ac:	1500000b 	strne	r0, [r0, #-11]
 5b0:	0b0b0113 	bleq	2c0a04 <startup-0x1fd3f5fc>
 5b4:	0b3b0b3a 	bleq	ec32a4 <startup-0x1f13cd5c>
 5b8:	00001301 	andeq	r1, r0, r1, lsl #6
 5bc:	03000d16 	movweq	r0, #3350	; 0xd16
 5c0:	3b0b3a0e 	blcc	2cee00 <startup-0x1fd31200>
 5c4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 5c8:	1700000b 	strne	r0, [r0, -fp]
 5cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5d0:	0b3a0e03 	bleq	e83de4 <startup-0x1f17c21c>
 5d4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5dc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5e0:	00130119 	andseq	r0, r3, r9, lsl r1
 5e4:	00051800 	andeq	r1, r5, r0, lsl #16
 5e8:	0b3a0e03 	bleq	e83dfc <startup-0x1f17c204>
 5ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5f0:	00001802 	andeq	r1, r0, r2, lsl #16
 5f4:	03003419 	movweq	r3, #1049	; 0x419
 5f8:	3b0b3a0e 	blcc	2cee38 <startup-0x1fd311c8>
 5fc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 600:	1a000018 	bne	668 <startup-0x1ffff998>
 604:	0b0b000f 	bleq	2c0648 <startup-0x1fd3f9b8>
 608:	00001349 	andeq	r1, r0, r9, asr #6
 60c:	3f012e1b 	svccc	0x00012e1b
 610:	3a0e0319 	bcc	38127c <startup-0x1fc7ed84>
 614:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 618:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 61c:	97184006 	ldrls	r4, [r8, -r6]
 620:	00001942 	andeq	r1, r0, r2, asr #18
 624:	01110100 	tsteq	r1, r0, lsl #2
 628:	0b130e25 	bleq	4c3ec4 <startup-0x1fb3c13c>
 62c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 630:	06120111 			; <UNDEFINED> instruction: 0x06120111
 634:	00001710 	andeq	r1, r0, r0, lsl r7
 638:	0b002402 	bleq	9648 <startup-0x1fff69b8>
 63c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 640:	0300000e 	movweq	r0, #14
 644:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 648:	0b3b0b3a 	bleq	ec3338 <startup-0x1f13ccc8>
 64c:	00001349 	andeq	r1, r0, r9, asr #6
 650:	0b002404 	bleq	9668 <startup-0x1fff6998>
 654:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 658:	05000008 	streq	r0, [r0, #-8]
 65c:	0b0b0113 	bleq	2c0ab0 <startup-0x1fd3f550>
 660:	0b3b0b3a 	bleq	ec3350 <startup-0x1f13ccb0>
 664:	00001301 	andeq	r1, r0, r1, lsl #6
 668:	03000d06 	movweq	r0, #3334	; 0xd06
 66c:	3b0b3a0e 	blcc	2ceeac <startup-0x1fd31154>
 670:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 674:	0700000b 	streq	r0, [r0, -fp]
 678:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 67c:	0b3b0b3a 	bleq	ec336c <startup-0x1f13cc94>
 680:	0b381349 	bleq	e053ac <startup-0x1f1fac54>
 684:	01080000 	mrseq	r0, (UNDEF: 8)
 688:	01134901 	tsteq	r3, r1, lsl #18
 68c:	09000013 	stmdbeq	r0, {r0, r1, r4}
 690:	13490021 	movtne	r0, #36897	; 0x9021
 694:	00000b2f 	andeq	r0, r0, pc, lsr #22
 698:	3f012e0a 	svccc	0x00012e0a
 69c:	3a0e0319 	bcc	381308 <startup-0x1fc7ecf8>
 6a0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6a4:	11134919 	tstne	r3, r9, lsl r9
 6a8:	40061201 	andmi	r1, r6, r1, lsl #4
 6ac:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 6b0:	00001301 	andeq	r1, r0, r1, lsl #6
 6b4:	0300050b 	movweq	r0, #1291	; 0x50b
 6b8:	3b0b3a0e 	blcc	2ceef8 <startup-0x1fd31108>
 6bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6c0:	0c000018 	stceq	0, cr0, [r0], {24}
 6c4:	0b0b000f 	bleq	2c0708 <startup-0x1fd3f8f8>
 6c8:	00001349 	andeq	r1, r0, r9, asr #6
 6cc:	3f012e0d 	svccc	0x00012e0d
 6d0:	3a0e0319 	bcc	38133c <startup-0x1fc7ecc4>
 6d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6d8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6dc:	97184006 	ldrls	r4, [r8, -r6]
 6e0:	00001942 	andeq	r1, r0, r2, asr #18
 6e4:	01110100 	tsteq	r1, r0, lsl #2
 6e8:	0b130e25 	bleq	4c3f84 <startup-0x1fb3c07c>
 6ec:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 6f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6f4:	00001710 	andeq	r1, r0, r0, lsl r7
 6f8:	0b002402 	bleq	9708 <startup-0x1fff68f8>
 6fc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 700:	0300000e 	movweq	r0, #14
 704:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 708:	0b3b0b3a 	bleq	ec33f8 <startup-0x1f13cc08>
 70c:	00001349 	andeq	r1, r0, r9, asr #6
 710:	0b002404 	bleq	9728 <startup-0x1fff68d8>
 714:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 718:	05000008 	streq	r0, [r0, #-8]
 71c:	13490035 	movtne	r0, #36917	; 0x9035
 720:	34060000 	strcc	r0, [r6], #-0
 724:	3a0e0300 	bcc	38132c <startup-0x1fc7ecd4>
 728:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 72c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 730:	07000019 	smladeq	r0, r9, r0, r0
 734:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 738:	0b3b0b3a 	bleq	ec3428 <startup-0x1f13cbd8>
 73c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 740:	0000193c 	andeq	r1, r0, ip, lsr r9
 744:	3e010408 	cdpcc	4, 0, cr0, cr1, cr8, {0}
 748:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 74c:	3b0b3a13 	blcc	2cefa0 <startup-0x1fd31060>
 750:	00130105 	andseq	r0, r3, r5, lsl #2
 754:	00280900 	eoreq	r0, r8, r0, lsl #18
 758:	0b1c0e03 	bleq	703f6c <startup-0x1f8fc094>
 75c:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
 760:	1c080300 	stcne	3, cr0, [r8], {-0}
 764:	0b00000b 	bleq	798 <startup-0x1ffff868>
 768:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 76c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 770:	00001349 	andeq	r1, r0, r9, asr #6
 774:	0b01130c 	bleq	453ac <startup-0x1ffbac54>
 778:	3b0b3a0b 	blcc	2cefac <startup-0x1fd31054>
 77c:	00130105 	andseq	r0, r3, r5, lsl #2
 780:	000d0d00 	andeq	r0, sp, r0, lsl #26
 784:	0b3a0803 	bleq	e82798 <startup-0x1f17d868>
 788:	1349053b 	movtne	r0, #38203	; 0x953b
 78c:	00000b38 	andeq	r0, r0, r8, lsr fp
 790:	03000d0e 	movweq	r0, #3342	; 0xd0e
 794:	3b0b3a0e 	blcc	2cefd4 <startup-0x1fd3102c>
 798:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 79c:	0f00000b 	svceq	0x0000000b
 7a0:	0b0b0113 	bleq	2c0bf4 <startup-0x1fd3f40c>
 7a4:	0b3b0b3a 	bleq	ec3494 <startup-0x1f13cb6c>
 7a8:	00001301 	andeq	r1, r0, r1, lsl #6
 7ac:	03000d10 	movweq	r0, #3344	; 0xd10
 7b0:	3b0b3a0e 	blcc	2ceff0 <startup-0x1fd31010>
 7b4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 7b8:	1100000b 	tstne	r0, fp
 7bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 7c0:	0b3a0e03 	bleq	e83fd4 <startup-0x1f17c02c>
 7c4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 7c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7cc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 7d0:	00130119 	andseq	r0, r3, r9, lsl r1
 7d4:	00051200 	andeq	r1, r5, r0, lsl #4
 7d8:	0b3a0e03 	bleq	e83fec <startup-0x1f17c014>
 7dc:	1349053b 	movtne	r0, #38203	; 0x953b
 7e0:	00001802 	andeq	r1, r0, r2, lsl #16
 7e4:	03003413 	movweq	r3, #1043	; 0x413
 7e8:	3b0b3a0e 	blcc	2cf028 <startup-0x1fd30fd8>
 7ec:	02134905 	andseq	r4, r3, #81920	; 0x14000
 7f0:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 7f4:	0b0b000f 	bleq	2c0838 <startup-0x1fd3f7c8>
 7f8:	00001349 	andeq	r1, r0, r9, asr #6
 7fc:	3f012e15 	svccc	0x00012e15
 800:	3a0e0319 	bcc	38146c <startup-0x1fc7eb94>
 804:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 808:	11134919 	tstne	r3, r9, lsl r9
 80c:	40061201 	andmi	r1, r6, r1, lsl #4
 810:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 814:	00001301 	andeq	r1, r0, r1, lsl #6
 818:	3f012e16 	svccc	0x00012e16
 81c:	3a0e0319 	bcc	381488 <startup-0x1fc7eb78>
 820:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 824:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 828:	96184006 	ldrls	r4, [r8], -r6
 82c:	13011942 	movwne	r1, #6466	; 0x1942
 830:	05170000 	ldreq	r0, [r7, #-0]
 834:	3a0e0300 	bcc	38143c <startup-0x1fc7ebc4>
 838:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 83c:	00180213 	andseq	r0, r8, r3, lsl r2
 840:	00341800 	eorseq	r1, r4, r0, lsl #16
 844:	0b3a0e03 	bleq	e84058 <startup-0x1f17bfa8>
 848:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 84c:	00001802 	andeq	r1, r0, r2, lsl #16
 850:	3f012e19 	svccc	0x00012e19
 854:	3a0e0319 	bcc	3814c0 <startup-0x1fc7eb40>
 858:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 85c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 860:	96184006 	ldrls	r4, [r8], -r6
 864:	00001942 	andeq	r1, r0, r2, asr #18
 868:	01110100 	tsteq	r1, r0, lsl #2
 86c:	0b130e25 	bleq	4c4108 <startup-0x1fb3bef8>
 870:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 874:	06120111 			; <UNDEFINED> instruction: 0x06120111
 878:	00001710 	andeq	r1, r0, r0, lsl r7
 87c:	0b002402 	bleq	988c <startup-0x1fff6774>
 880:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 884:	0300000e 	movweq	r0, #14
 888:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 88c:	0b3b0b3a 	bleq	ec357c <startup-0x1f13ca84>
 890:	00001349 	andeq	r1, r0, r9, asr #6
 894:	0b002404 	bleq	98ac <startup-0x1fff6754>
 898:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 89c:	05000008 	streq	r0, [r0, #-8]
 8a0:	13490035 	movtne	r0, #36917	; 0x9035
 8a4:	13060000 	movwne	r0, #24576	; 0x6000
 8a8:	3a0b0b01 	bcc	2c34b4 <startup-0x1fd3cb4c>
 8ac:	010b3b0b 	tsteq	fp, fp, lsl #22
 8b0:	07000013 	smladeq	r0, r3, r0, r0
 8b4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 8b8:	0b3b0b3a 	bleq	ec35a8 <startup-0x1f13ca58>
 8bc:	0b381349 	bleq	e055e8 <startup-0x1f1faa18>
 8c0:	0d080000 	stceq	0, cr0, [r8, #-0]
 8c4:	3a080300 	bcc	2014cc <startup-0x1fdfeb34>
 8c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8cc:	000b3813 	andeq	r3, fp, r3, lsl r8
 8d0:	01010900 	tsteq	r1, r0, lsl #18
 8d4:	13011349 	movwne	r1, #4937	; 0x1349
 8d8:	210a0000 	mrscs	r0, (UNDEF: 10)
 8dc:	2f134900 	svccs	0x00134900
 8e0:	0b00000b 	bleq	914 <startup-0x1ffff6ec>
 8e4:	0e030104 	adfeqs	f0, f3, f4
 8e8:	0b0b0b3e 	bleq	2c35e8 <startup-0x1fd3ca18>
 8ec:	0b3a1349 	bleq	e85618 <startup-0x1f17a9e8>
 8f0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 8f4:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
 8f8:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 8fc:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
 900:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 904:	00000b1c 	andeq	r0, r0, ip, lsl fp
 908:	0300340e 	movweq	r3, #1038	; 0x40e
 90c:	3b0b3a0e 	blcc	2cf14c <startup-0x1fd30eb4>
 910:	3f134905 	svccc	0x00134905
 914:	00193c19 	andseq	r3, r9, r9, lsl ip
 918:	00340f00 	eorseq	r0, r4, r0, lsl #30
 91c:	0b3a0e03 	bleq	e84130 <startup-0x1f17bed0>
 920:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 924:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 928:	04100000 	ldreq	r0, [r0], #-0
 92c:	0b0b3e01 	bleq	2d0138 <startup-0x1fd2fec8>
 930:	3a13490b 	bcc	4d2d64 <startup-0x1fb2d29c>
 934:	01053b0b 	tsteq	r5, fp, lsl #22
 938:	11000013 	tstne	r0, r3, lsl r0
 93c:	08030028 	stmdaeq	r3, {r3, r5}
 940:	00000b1c 	andeq	r0, r0, ip, lsl fp
 944:	03001612 	movweq	r1, #1554	; 0x612
 948:	3b0b3a0e 	blcc	2cf188 <startup-0x1fd30e78>
 94c:	00134905 	andseq	r4, r3, r5, lsl #18
 950:	01131300 	tsteq	r3, r0, lsl #6
 954:	0b3a0b0b 	bleq	e83588 <startup-0x1f17ca78>
 958:	1301053b 	movwne	r0, #5435	; 0x153b
 95c:	0d140000 	ldceq	0, cr0, [r4, #-0]
 960:	3a0e0300 	bcc	381568 <startup-0x1fc7ea98>
 964:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 968:	000b3813 	andeq	r3, fp, r3, lsl r8
 96c:	000d1500 	andeq	r1, sp, r0, lsl #10
 970:	0b3a0803 	bleq	e82984 <startup-0x1f17d67c>
 974:	1349053b 	movtne	r0, #38203	; 0x953b
 978:	00000b38 	andeq	r0, r0, r8, lsr fp
 97c:	3e010416 	cfmvdlrcc	mvd1, r0
 980:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 984:	3b0b3a13 	blcc	2cf1d8 <startup-0x1fd30e28>
 988:	0013010b 	andseq	r0, r3, fp, lsl #2
 98c:	000f1700 	andeq	r1, pc, r0, lsl #14
 990:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 994:	13180000 	tstne	r8, #0
 998:	3c0e0300 	stccc	3, cr0, [lr], {-0}
 99c:	19000019 	stmdbne	r0, {r0, r3, r4}
 9a0:	0b0b0117 	bleq	2c0e04 <startup-0x1fd3f1fc>
 9a4:	0b3b0b3a 	bleq	ec3694 <startup-0x1f13c96c>
 9a8:	00001301 	andeq	r1, r0, r1, lsl #6
 9ac:	03000d1a 	movweq	r0, #3354	; 0xd1a
 9b0:	3b0b3a0e 	blcc	2cf1f0 <startup-0x1fd30e10>
 9b4:	0013490b 	andseq	r4, r3, fp, lsl #18
 9b8:	000f1b00 	andeq	r1, pc, r0, lsl #22
 9bc:	00000b0b 	andeq	r0, r0, fp, lsl #22
 9c0:	4900261c 	stmdbmi	r0, {r2, r3, r4, r9, sl, sp}
 9c4:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 9c8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 9cc:	0b3a0b0b 	bleq	e83600 <startup-0x1f17ca00>
 9d0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 9d4:	131e0000 	tstne	lr, #0
 9d8:	0b0e0301 	bleq	3815e4 <startup-0x1fc7ea1c>
 9dc:	3b0b3a05 	blcc	2cf1f8 <startup-0x1fd30e08>
 9e0:	0013010b 	andseq	r0, r3, fp, lsl #2
 9e4:	000d1f00 	andeq	r1, sp, r0, lsl #30
 9e8:	0b3a0e03 	bleq	e841fc <startup-0x1f17be04>
 9ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 9f0:	00000538 	andeq	r0, r0, r8, lsr r5
 9f4:	27001520 	strcs	r1, [r0, -r0, lsr #10]
 9f8:	21000019 	tstcs	r0, r9, lsl r0
 9fc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 a00:	13011349 	movwne	r1, #4937	; 0x1349
 a04:	05220000 	streq	r0, [r2, #-0]!
 a08:	00134900 	andseq	r4, r3, r0, lsl #18
 a0c:	01132300 	tsteq	r3, r0, lsl #6
 a10:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
 a14:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 a18:	00001301 	andeq	r1, r0, r1, lsl #6
 a1c:	03000d24 	movweq	r0, #3364	; 0xd24
 a20:	3b0b3a0e 	blcc	2cf260 <startup-0x1fd30da0>
 a24:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 a28:	25000005 	strcs	r0, [r0, #-5]
 a2c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 a30:	0b3a0b0b 	bleq	e83664 <startup-0x1f17c99c>
 a34:	1301053b 	movwne	r0, #5435	; 0x153b
 a38:	17260000 	strne	r0, [r6, -r0]!
 a3c:	3a0b0b01 	bcc	2c3648 <startup-0x1fd3c9b8>
 a40:	01053b0b 	tsteq	r5, fp, lsl #22
 a44:	27000013 	smladcs	r0, r3, r0, r0
 a48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 a4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 a50:	00001349 	andeq	r1, r0, r9, asr #6
 a54:	27011528 	strcs	r1, [r1, -r8, lsr #10]
 a58:	00130119 	andseq	r0, r3, r9, lsl r1
 a5c:	00342900 	eorseq	r2, r4, r0, lsl #18
 a60:	0b3a0e03 	bleq	e84274 <startup-0x1f17bd8c>
 a64:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a68:	00001802 	andeq	r1, r0, r2, lsl #16
 a6c:	3f012e2a 	svccc	0x00012e2a
 a70:	3a0e0319 	bcc	3816dc <startup-0x1fc7e924>
 a74:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 a78:	11134919 	tstne	r3, r9, lsl r9
 a7c:	40061201 	andmi	r1, r6, r1, lsl #4
 a80:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 a84:	00001301 	andeq	r1, r0, r1, lsl #6
 a88:	0300052b 	movweq	r0, #1323	; 0x52b
 a8c:	3b0b3a0e 	blcc	2cf2cc <startup-0x1fd30d34>
 a90:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 a94:	2c000018 	stccs	0, cr0, [r0], {24}
 a98:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 a9c:	0b3a0e03 	bleq	e842b0 <startup-0x1f17bd50>
 aa0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 aa4:	01111349 	tsteq	r1, r9, asr #6
 aa8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 aac:	01194296 			; <UNDEFINED> instruction: 0x01194296
 ab0:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
 ab4:	08030005 	stmdaeq	r3, {r0, r2}
 ab8:	0b3b0b3a 	bleq	ec37a8 <startup-0x1f13c858>
 abc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 ac0:	0b2e0000 	bleq	b80ac8 <startup-0x1f47f538>
 ac4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 ac8:	00130106 	andseq	r0, r3, r6, lsl #2
 acc:	00342f00 	eorseq	r2, r4, r0, lsl #30
 ad0:	0b3a0803 	bleq	e82ae4 <startup-0x1f17d51c>
 ad4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ad8:	00001802 	andeq	r1, r0, r2, lsl #16
 adc:	11010b30 	tstne	r1, r0, lsr fp
 ae0:	00061201 	andeq	r1, r6, r1, lsl #4
 ae4:	012e3100 			; <UNDEFINED> instruction: 0x012e3100
 ae8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 aec:	0b3b0b3a 	bleq	ec37dc <startup-0x1f13c824>
 af0:	01111927 	tsteq	r1, r7, lsr #18
 af4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 af8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 afc:	32000013 	andcc	r0, r0, #19
 b00:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b04:	0b3a0e03 	bleq	e84318 <startup-0x1f17bce8>
 b08:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b0c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 b10:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 b14:	33000019 	movwcc	r0, #25
 b18:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
 b1c:	Address 0x00000b1c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000010c4 	andeq	r1, r0, r4, asr #1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	17520002 	ldrbne	r0, [r2, -r2]
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200010d4 	ldrdcs	r1, [r0], -r4
  3c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	1d790002 	ldclne	0, cr0, [r9, #-8]!
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200015e4 	andcs	r1, r0, r4, ror #11
  5c:	000001c4 	andeq	r0, r0, r4, asr #3
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	22c00002 	sbccs	r0, r0, #2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200017a8 	andcs	r1, r0, r8, lsr #15
  7c:	000000e8 	andeq	r0, r0, r8, ror #1
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	242d0002 	strtcs	r0, [sp], #-2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001890 	mulcs	r0, r0, r8
  9c:	000009fe 	strdeq	r0, [r0], -lr
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	2dfd0002 	ldclcs	0, cr0, [sp, #8]!
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20002290 	mulcs	r0, r0, r2
  bc:	000003fc 	strdeq	r0, [r0], -ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200010d4 	ldrdcs	r1, [r0], -r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
  18:	00000042 	andeq	r0, r0, r2, asr #32
  1c:	0000006e 	andeq	r0, r0, lr, rrx
  20:	00000070 	andeq	r0, r0, r0, ror r0
  24:	0000007c 	andeq	r0, r0, ip, ror r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000478 	andeq	r0, r0, r8, ror r4
       4:	01fd0002 	mvnseq	r0, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
      1c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
      20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
      24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
      2c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
      30:	2f534953 	svccs	0x00534953
      34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      38:	00656475 	rsbeq	r6, r5, r5, ror r4
      3c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; ffffff8c <_global_impure_ptr+0xdfffae70>
      40:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
      44:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      48:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
      4c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
      50:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      54:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
      58:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
      5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
      60:	445f6870 	ldrbmi	r6, [pc], #-2160	; 68 <startup-0x1fffff98>
      64:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
      68:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
      6c:	3a430063 	bcc	10c0200 <startup-0x1ef3fe00>
      70:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
      74:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
      78:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
      7c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
      80:	76697244 	strbtvc	r7, [r9], -r4, asr #4
      84:	6f442f65 	svcvs	0x00442f65
      88:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
      8c:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
      90:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
      94:	41442f62 	cmpmi	r4, r2, ror #30
      98:	30393254 	eorscc	r3, r9, r4, asr r2
      9c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
      a0:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
      a4:	2f6d6574 	svccs	0x006d6574
      a8:	2f646f6b 	svccs	0x00646f6b
      ac:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
      b0:	2f2e2e00 	svccs	0x002e2e00
      b4:	2f62696c 	svccs	0x0062696c
      b8:	334d5453 	movtcc	r5, #54355	; 0xd453
      bc:	5f344632 	svcpl	0x00344632
      c0:	2f62696c 	svccs	0x0062696c
      c4:	334d5453 	movtcc	r5, #54355	; 0xd453
      c8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
      cc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
      d0:	72655064 	rsbvc	r5, r5, #100	; 0x64
      d4:	5f687069 	svcpl	0x00687069
      d8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
      dc:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
      e0:	6300636e 	movwvs	r6, #878	; 0x36e
      e4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
      e8:	70706165 	rsbsvc	r6, r0, r5, ror #2
      ec:	646f635c 	strbtvs	r6, [pc], #-860	; f4 <startup-0x1fffff0c>
      f0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
      f4:	6f745c65 	svcvs	0x00745c65
      f8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
      fc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     100:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     104:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     108:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     10c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     110:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     114:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     118:	616d5c65 	cmnvs	sp, r5, ror #24
     11c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     120:	3a630065 	bcc	18c02bc <startup-0x1e73fd44>
     124:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     128:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     12c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     130:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     134:	6f6f745c 	svcvs	0x006f745c
     138:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     13c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     140:	615c6d72 	cmpvs	ip, r2, ror sp
     144:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     148:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     14c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     150:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     154:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     158:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     15c:	6f630000 	svcvs	0x00630000
     160:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     164:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     168:	00000100 	andeq	r0, r0, r0, lsl #2
     16c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     170:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     174:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     178:	00632e63 	rsbeq	r2, r3, r3, ror #28
     17c:	73000002 	movwvc	r0, #2
     180:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     184:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
     188:	00000300 	andeq	r0, r0, r0, lsl #6
     18c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     190:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     194:	00682e78 	rsbeq	r2, r8, r8, ror lr
     198:	5f000004 	svcpl	0x00000004
     19c:	61666564 	cmnvs	r6, r4, ror #10
     1a0:	5f746c75 	svcpl	0x00746c75
     1a4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     1a8:	00682e73 	rsbeq	r2, r8, r3, ror lr
     1ac:	5f000005 	svcpl	0x00000005
     1b0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     1b4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     1b8:	00000600 	andeq	r0, r0, r0, lsl #12
     1bc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     1c0:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     1c4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     1c8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     1cc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     1d0:	74730000 	ldrbtvc	r0, [r3], #-0
     1d4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     1d8:	5f787834 	svcpl	0x00787834
     1dc:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     1e0:	00040068 	andeq	r0, r4, r8, rrx
     1e4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     1e8:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     1ec:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
     1f0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     1f4:	00040068 	andeq	r0, r4, r8, rrx
     1f8:	61747300 	cmnvs	r4, r0, lsl #6
     1fc:	70757472 	rsbsvc	r7, r5, r2, ror r4
     200:	0300682e 	movweq	r6, #2094	; 0x82e
     204:	00000000 	andeq	r0, r0, r0
     208:	00100205 	andseq	r0, r0, r5, lsl #4
     20c:	dd032000 	stcle	0, cr2, [r3, #-0]
     210:	4b75010c 	blmi	1d40648 <startup-0x1e2bf9b8>
     214:	03d81ecd 	bicseq	r1, r8, #3280	; 0xcd0
     218:	4b9000fc 	blmi	fe400610 <_global_impure_ptr+0xde3fb4f4>
     21c:	01040200 	mrseq	r0, R12_usr
     220:	30065806 	andcc	r5, r6, r6, lsl #16
     224:	3f3d674b 	svccc	0x003d674b
     228:	03020421 	movweq	r0, #9249	; 0x2421
     22c:	308273f7 	strdcc	r7, [r2], r7	; <UNPREDICTABLE>
     230:	40693f69 	rsbmi	r3, r9, r9, ror #30
     234:	3f694e4f 	svccc	0x00694e4f
     238:	e4170350 	ldr	r0, [r7], #-848	; 0xfffffcb0
     23c:	034b3f6b 	movteq	r3, #49003	; 0xbf6b
     240:	2f3d740f 	svccs	0x003d740f
     244:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     248:	02004002 	andeq	r4, r0, #2
     24c:	00670204 	rsbeq	r0, r7, r4, lsl #4
     250:	3d020402 	cfstrscc	mvf0, [r2, #-8]
     254:	01040200 	mrseq	r0, R12_usr
     258:	4c065806 	stcmi	8, cr5, [r6], {6}
     25c:	2f3e4e5a 	svccs	0x003e4e5a
     260:	674a0b03 	strbvs	r0, [sl, -r3, lsl #22]
     264:	694d3f32 	stmdbvs	sp, {r1, r4, r5, r8, r9, sl, fp, ip, sp}^
     268:	7415033d 	ldrvc	r0, [r5], #-829	; 0xfffffcc3
     26c:	14034b6a 	strne	r4, [r3], #-2922	; 0xfffff496
     270:	3f3f6c66 	svccc	0x003f6c66
     274:	03660b03 	cmneq	r6, #3072	; 0xc00
     278:	233d2079 	teqcs	sp, #121	; 0x79
     27c:	0f03243d 	svceq	0x0003243d
     280:	034b6a74 	movteq	r6, #47732	; 0xba74
     284:	7c6600de 	stclvc	0, cr0, [r6], #-888	; 0xfffffc88
     288:	033e2dbb 	teqeq	lr, #11968	; 0x2ec0
     28c:	4b69660e 	blmi	1a59acc <startup-0x1e5a6534>
     290:	5d661a03 	vstmdbpl	r6!, {s3-s5}
     294:	01850383 	orreq	r0, r5, r3, lsl #7
     298:	034b6974 	movteq	r6, #47476	; 0xb974
     29c:	6c6600e9 	stclvs	0, cr0, [r6], #-932	; 0xfffffc5c
     2a0:	740d03ad 	strvc	r0, [sp], #-941	; 0xfffffc53
     2a4:	0e034b69 	vmlseq.f64	d4, d3, d25
     2a8:	034b6966 	movteq	r6, #47462	; 0xb966
     2ac:	34596615 	ldrbcc	r6, [r9], #-1557	; 0xfffff9eb
     2b0:	41694d3f 	cmnmi	r9, pc, lsr sp
     2b4:	59901803 	ldmibpl	r0, {r0, r1, fp, ip}
     2b8:	694d3f34 	stmdbvs	sp, {r2, r4, r5, r8, r9, sl, fp, ip, sp}^
     2bc:	01b30341 			; <UNDEFINED> instruction: 0x01b30341
     2c0:	3f334b74 	svccc	0x00334b74
     2c4:	033d4d4d 	teqeq	sp, #4928	; 0x1340
     2c8:	672f660d 	strvs	r6, [pc, -sp, lsl #12]!
     2cc:	4b661703 	blmi	1985ee0 <startup-0x1e67a120>
     2d0:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
     2d4:	660f033d 			; <UNDEFINED> instruction: 0x660f033d
     2d8:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 1b4 <startup-0x1ffffe4c>
     2dc:	0f033d4d 	svceq	0x00033d4d
     2e0:	3f334b82 	svccc	0x00334b82
     2e4:	033d5b4d 	teqeq	sp, #78848	; 0x13400
     2e8:	c04b9024 	subgt	r9, fp, r4, lsr #32
     2ec:	223d775a 	eorscs	r7, sp, #23592960	; 0x1680000
     2f0:	5a67263d 	bpl	19c9bec <startup-0x1e636414>
     2f4:	83cbdb3f 	bichi	sp, fp, #64512	; 0xfc00
     2f8:	201b0383 	andscs	r0, fp, r3, lsl #7
     2fc:	3d59253d 	cfldr64cc	mvdx2, [r9, #-244]	; 0xffffff0c
     300:	3d676968 			; <UNDEFINED> instruction: 0x3d676968
     304:	3d676968 			; <UNDEFINED> instruction: 0x3d676968
     308:	3f036768 	svccc	0x00036768
     30c:	84334bba 	ldrthi	r4, [r3], #-3002	; 0xfffff446
     310:	40694d3f 	rsbmi	r4, r9, pc, lsr sp
     314:	9e0a0383 	cdpls	3, 0, cr0, cr10, cr3, {4}
     318:	0c034b6a 			; <UNDEFINED> instruction: 0x0c034b6a
     31c:	034b6966 	movteq	r6, #47462	; 0xb966
     320:	4e6601b8 	mcrmi	1, 3, r0, cr6, cr8, {5}
     324:	7416033d 	ldrvc	r0, [r6], #-829	; 0xfffffcc3
     328:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
     32c:	14034b4d 	strne	r4, [r3], #-2893	; 0xfffff4b3
     330:	4d334b82 	vldmdbmi	r3!, {d4}
     334:	034b4d4d 	movteq	r4, #48461	; 0xbd4d
     338:	334b8211 	movtcc	r8, #45585	; 0xb211
     33c:	4b5b4d4d 	blmi	16d3878 <startup-0x1e92c788>
     340:	4b741003 	blmi	1d04354 <startup-0x1e2fbcac>
     344:	694d4d33 	stmdbvs	sp, {r0, r1, r4, r5, r8, sl, fp, lr}^
     348:	00d3034b 	sbcseq	r0, r3, fp, asr #6
     34c:	4d334b82 	vldmdbmi	r3!, {d4}
     350:	034b4d4d 	movteq	r4, #48461	; 0xbd4d
     354:	4e8200f0 	mcrmi	0, 4, r0, cr2, cr0, {7}
     358:	7425033d 	strtvc	r0, [r5], #-829	; 0xfffffcc3
     35c:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     360:	74130376 	ldrvc	r0, [r3], #-886	; 0xfffffc8a
     364:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     368:	74110376 	ldrvc	r0, [r1], #-886	; 0xfffffc8a
     36c:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     370:	742c0376 	strtvc	r0, [ip], #-886	; 0xfffffc8a
     374:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     378:	74270376 	strtvc	r0, [r7], #-886	; 0xfffffc8a
     37c:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     380:	741d0376 	ldrvc	r0, [sp], #-886	; 0xfffffc8a
     384:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     388:	74100376 	ldrvc	r0, [r0], #-886	; 0xfffffc8a
     38c:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     390:	740e0376 	strvc	r0, [lr], #-886	; 0xfffffc8a
     394:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     398:	74290376 	strtvc	r0, [r9], #-886	; 0xfffffc8a
     39c:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3a0:	74230376 	strtvc	r0, [r3], #-886	; 0xfffffc8a
     3a4:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3a8:	74250376 	strtvc	r0, [r5], #-886	; 0xfffffc8a
     3ac:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3b0:	74140376 	ldrvc	r0, [r4], #-886	; 0xfffffc8a
     3b4:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3b8:	74120376 	ldrvc	r0, [r2], #-886	; 0xfffffc8a
     3bc:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3c0:	742d0376 	strtvc	r0, [sp], #-886	; 0xfffffc8a
     3c4:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3c8:	74280376 	strtvc	r0, [r8], #-886	; 0xfffffc8a
     3cc:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3d0:	740c0376 	strvc	r0, [ip], #-886	; 0xfffffc8a
     3d4:	1e6c4c6a 	cdpne	12, 6, cr4, cr12, cr10, {3}
     3d8:	02ac0368 	adceq	r0, ip, #104, 6	; 0xa0000001
     3dc:	974d9474 	smlsldxls	r9, sp, r4, r4
     3e0:	1703ae1e 	smladne	r3, lr, lr, sl
     3e4:	2f2f6766 	svccs	0x002f6766
     3e8:	4c3e5950 			; <UNDEFINED> instruction: 0x4c3e5950
     3ec:	59404e3e 	stmdbpl	r0, {r1, r2, r3, r4, r5, r9, sl, fp, lr}^
     3f0:	3d4d5c76 	stclcc	12, cr5, [sp, #-472]	; 0xfffffe28
     3f4:	30660a03 	rsbcc	r0, r6, r3, lsl #20
     3f8:	58110375 	ldmdapl	r1, {r0, r2, r4, r5, r6, r8, r9}
     3fc:	5c685067 	stclpl	0, cr5, [r8], #-412	; 0xfffffe64
     400:	11033d4d 	tstne	r3, sp, asr #26
     404:	044b6c66 	strbeq	r6, [fp], #-3174	; 0xfffff39a
     408:	67bb0303 	ldrvs	r0, [fp, r3, lsl #6]!
     40c:	4b4b4066 	blmi	12d05ac <startup-0x1ed2fa54>
     410:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     414:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
     418:	592f7767 	stmdbpl	pc!, {r0, r1, r2, r5, r6, r8, r9, sl, ip, sp, lr}	; <UNPREDICTABLE>
     41c:	6c3e3e5b 	ldcvs	14, cr3, [lr], #-364	; 0xfffffe94
     420:	312f3da1 			; <UNDEFINED> instruction: 0x312f3da1
     424:	92919191 	addsls	r9, r1, #1073741860	; 0x40000024
     428:	5a162502 	bpl	589838 <startup-0x1fa767c8>
     42c:	c9cb2f08 	stmibgt	fp, {r3, r8, r9, sl, fp, sp}^
     430:	005ac0d8 	ldrsbeq	ip, [sl], #-8
     434:	06010402 	streq	r0, [r1], -r2, lsl #8
     438:	ce0806c8 	cfmadd32gt	mvax6, mvfx0, mvfx8, mvfx8
     43c:	02001408 	andeq	r1, r0, #8, 8	; 0x8000000
     440:	c8060104 	stmdagt	r6, {r2, r8}
     444:	00cb0806 	sbceq	r0, fp, r6, lsl #16
     448:	03020402 	movweq	r0, #9218	; 0x2402
     44c:	00120873 	andseq	r0, r2, r3, ror r8
     450:	06010402 	streq	r0, [r1], -r2, lsl #8
     454:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     458:	71030602 	tstvc	r3, r2, lsl #12
     45c:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     460:	66660601 	strbtvs	r0, [r6], -r1, lsl #12
     464:	01000f02 	tsteq	r0, r2, lsl #30
     468:	00030401 	andeq	r0, r3, r1, lsl #8
     46c:	00000205 	andeq	r0, r0, r5, lsl #4
     470:	13032000 	movwne	r2, #12288	; 0x3000
     474:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
     478:	01010003 	tsteq	r1, r3
     47c:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
     480:	01c90002 	biceq	r0, r9, r2
     484:	01020000 	mrseq	r0, (UNDEF: 2)
     488:	000d0efb 	strdeq	r0, [sp], -fp
     48c:	01010101 	tsteq	r1, r1, lsl #2
     490:	01000000 	mrseq	r0, (UNDEF: 0)
     494:	43010000 	movwmi	r0, #4096	; 0x1000
     498:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     49c:	2f737265 	svccs	0x00737265
     4a0:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
     4a4:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
     4a8:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
     4ac:	442f6576 	strtmi	r6, [pc], #-1398	; 4b4 <startup-0x1ffffb4c>
     4b0:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
     4b4:	2f746e65 	svccs	0x00746e65
     4b8:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
     4bc:	442f6275 	strtmi	r6, [pc], #-629	; 4c4 <startup-0x1ffffb3c>
     4c0:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
     4c4:	614c2d30 	cmpvs	ip, r0, lsr sp
     4c8:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
     4cc:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     4d0:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 4d8 <startup-0x1ffffb28>
     4d4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     4d8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     4dc:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     4e0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     4e4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     4e8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     4ec:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     4f0:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     4f4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     4f8:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     4fc:	2f726576 	svccs	0x00726576
     500:	00637273 	rsbeq	r7, r3, r3, ror r2
     504:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     508:	70616573 	rsbvc	r6, r1, r3, ror r5
     50c:	6f635c70 	svcvs	0x00635c70
     510:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     514:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     518:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     51c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     520:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     524:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     528:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     52c:	61652d65 	cmnvs	r5, r5, ror #26
     530:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     534:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     538:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     53c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     540:	6300656e 	movwvs	r6, #1390	; 0x56e
     544:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     548:	70706165 	rsbsvc	r6, r0, r5, ror #2
     54c:	646f635c 	strbtvs	r6, [pc], #-860	; 554 <startup-0x1ffffaac>
     550:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     554:	6f745c65 	svcvs	0x00745c65
     558:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     55c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     560:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     564:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     568:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     56c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     570:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     574:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     578:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     57c:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
     580:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     584:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     588:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     58c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     590:	534d432f 	movtpl	r4, #54063	; 0xd32f
     594:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     598:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     59c:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     5a0:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     5a4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     5a8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     5ac:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     5b0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     5b4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     5b8:	5f787834 	svcpl	0x00787834
     5bc:	50647453 	rsbpl	r7, r4, r3, asr r4
     5c0:	70697265 	rsbvc	r7, r9, r5, ror #4
     5c4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     5c8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     5cc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     5d0:	74730000 	ldrbtvc	r0, [r3], #-0
     5d4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     5d8:	5f787834 	svcpl	0x00787834
     5dc:	6f697067 	svcvs	0x00697067
     5e0:	0100632e 	tsteq	r0, lr, lsr #6
     5e4:	645f0000 	ldrbvs	r0, [pc], #-0	; 5ec <startup-0x1ffffa14>
     5e8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     5ec:	745f746c 	ldrbvc	r7, [pc], #-1132	; 5f4 <startup-0x1ffffa0c>
     5f0:	73657079 	cmnvc	r5, #121	; 0x79
     5f4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     5f8:	735f0000 	cmpvc	pc, #0
     5fc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     600:	00682e74 	rsbeq	r2, r8, r4, ror lr
     604:	63000003 	movwvs	r0, #3
     608:	5f65726f 	svcpl	0x0065726f
     60c:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     610:	00040068 	andeq	r0, r4, r8, rrx
     614:	73797300 	cmnvc	r9, #0, 6
     618:	5f6d6574 	svcpl	0x006d6574
     61c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     620:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     624:	00682e78 	rsbeq	r2, r8, r8, ror lr
     628:	73000005 	movwvc	r0, #5
     62c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     630:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     634:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     638:	74730000 	ldrbtvc	r0, [r3], #-0
     63c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     640:	5f787834 	svcpl	0x00787834
     644:	6f697067 	svcvs	0x00697067
     648:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     64c:	00000000 	andeq	r0, r0, r0
     650:	10d40205 	sbcsne	r0, r4, r5, lsl #4
     654:	ff032000 			; <UNDEFINED> instruction: 0xff032000
     658:	4c4e0100 	stfmie	f0, [lr], {-0}
     65c:	4a38034b 	bmi	e01390 <startup-0x1f1fec70>
     660:	4c204a03 			; <UNDEFINED> instruction: 0x4c204a03
     664:	4a33034b 	bmi	cc1398 <startup-0x1f33ec68>
     668:	4c204f03 	stcmi	15, cr4, [r0], #-12
     66c:	4a2e034b 	bmi	b813a0 <startup-0x1f47ec60>
     670:	4c205403 	cfstrsmi	mvf5, [r0], #-12
     674:	4a29034b 	bmi	a413a8 <startup-0x1f5bec58>
     678:	4c205903 			; <UNDEFINED> instruction: 0x4c205903
     67c:	4a24034b 	bmi	9013b0 <startup-0x1f6fec50>
     680:	4c205e03 	stcmi	14, cr5, [r0], #-12
     684:	4a1f034b 	bmi	7c13b8 <startup-0x1f83ec48>
     688:	4c206303 	stcmi	3, cr6, [r0], #-12
     68c:	4a1a034b 	bmi	6813c0 <startup-0x1f97ec40>
     690:	4c206803 	stcmi	8, cr6, [r0], #-12
     694:	4a15034b 	bmi	5413c8 <startup-0x1fabec38>
     698:	4c206e03 	stcmi	14, cr6, [r0], #-12
     69c:	660f0367 	strvs	r0, [pc], -r7, ror #6
     6a0:	4c207303 	stcmi	3, cr7, [r0], #-12
     6a4:	660a0367 	strvs	r0, [sl], -r7, ror #6
     6a8:	4c207a03 			; <UNDEFINED> instruction: 0x4c207a03
     6ac:	0c036967 			; <UNDEFINED> instruction: 0x0c036967
     6b0:	03599008 	cmpeq	r9, #8
     6b4:	5a3e660a 	bpl	f99ee4 <startup-0x1f06611c>
     6b8:	bcad4c5a 	stclt	12, cr4, [sp], #360	; 0x168
     6bc:	01040200 	mrseq	r0, R12_usr
     6c0:	50064a06 	andpl	r4, r6, r6, lsl #20
     6c4:	ccadc0ad 	stcgt	0, cr12, [sp], #692	; 0x2b4
     6c8:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
     6cc:	ba620302 	blt	18812dc <startup-0x1e77ed24>
     6d0:	01040200 	mrseq	r0, R12_usr
     6d4:	03063c06 	movweq	r3, #27654	; 0x6c06
     6d8:	4c523c21 	mrrcmi	12, 2, r3, r2, cr1
     6dc:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     6e0:	7410033d 	ldrvc	r0, [r0], #-829	; 0xfffffcc3
     6e4:	3e5a4275 	mrccc	2, 2, r4, cr10, cr5, {3}
     6e8:	3d3e3e4c 	ldccc	14, cr3, [lr, #-304]!	; 0xfffffed0
     6ec:	754a1c03 	strbvc	r1, [sl, #-3075]	; 0xfffff3fd
     6f0:	4c5c6850 	mrrcmi	8, 5, r6, ip, cr0
     6f4:	4a0a033d 	bmi	2813f0 <startup-0x1fd7ec10>
     6f8:	0c033d4e 	stceq	13, cr3, [r3], {78}	; 0x4e
     6fc:	6850754a 	ldmdavs	r0, {r1, r3, r6, r8, sl, ip, sp, lr}^
     700:	033d4c5c 	teqeq	sp, #92, 24	; 0x5c00
     704:	3d4e4a0a 	vstrcc	s9, [lr, #-40]	; 0xffffffd8
     708:	794a0f03 	stmdbvc	sl, {r0, r1, r8, r9, sl, fp}^
     70c:	4a0f034b 	bmi	3c1440 <startup-0x1fc3ebc0>
     710:	10034b79 	andne	r4, r3, r9, ror fp
     714:	504cc04a 	subpl	ip, ip, sl, asr #32
     718:	0b034c1e 	bleq	d3798 <startup-0x1ff2c868>
     71c:	034b784a 	movteq	r7, #47178	; 0xb84a
     720:	75784a0b 	ldrbvc	r4, [r8, #-2571]!	; 0xfffff5f5
     724:	4a00ce03 	bmi	33f38 <startup-0x1ffcc0c8>
     728:	9f352fbb 	svcls	0x00352fbb
     72c:	9fbbc908 	svcls	0x00bbc908
     730:	01000402 	tsteq	r0, r2, lsl #8
     734:	0001fa01 	andeq	pc, r1, r1, lsl #20
     738:	b5000200 	strlt	r0, [r0, #-512]	; 0xfffffe00
     73c:	02000001 	andeq	r0, r0, #1
     740:	0d0efb01 	vstreq	d15, [lr, #-4]
     744:	01010100 	mrseq	r0, (UNDEF: 17)
     748:	00000001 	andeq	r0, r0, r1
     74c:	01000001 	tsteq	r0, r1
     750:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffd15 <_global_impure_ptr+0xdfffabf9>
     754:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     758:	6164412f 	cmnvs	r4, pc, lsr #2
     75c:	4f2f746d 	svcmi	0x002f746d
     760:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     764:	2f657669 	svccs	0x00657669
     768:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     76c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     770:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     774:	2f627548 	svccs	0x00627548
     778:	32544144 	subscc	r4, r4, #68, 2
     77c:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     780:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     784:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     788:	6f6b2f6d 	svcvs	0x006b2f6d
     78c:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
     790:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     794:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     798:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     79c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     7a0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     7a4:	5f787834 	svcpl	0x00787834
     7a8:	50647453 	rsbpl	r7, r4, r3, asr r4
     7ac:	70697265 	rsbvc	r7, r9, r5, ror #4
     7b0:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     7b4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     7b8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     7bc:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     7c0:	61657363 	cmnvs	r5, r3, ror #6
     7c4:	635c7070 	cmpvs	ip, #112	; 0x70
     7c8:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     7cc:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     7d0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 608 <startup-0x1ffff9f8>
     7d4:	63675c73 	cmnvs	r7, #29440	; 0x7300
     7d8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     7dc:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     7e0:	6f6e2d6d 	svcvs	0x006e2d6d
     7e4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     7e8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     7ec:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     7f0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     7f4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     7f8:	00656e69 	rsbeq	r6, r5, r9, ror #28
     7fc:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     800:	70616573 	rsbvc	r6, r1, r3, ror r5
     804:	6f635c70 	svcvs	0x00635c70
     808:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     80c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     810:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     814:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     818:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     81c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     820:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     824:	61652d65 	cmnvs	r5, r5, ror #26
     828:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     82c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     830:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
     834:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
     838:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     83c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     840:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     844:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     848:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
     84c:	2f534953 	svccs	0x00534953
     850:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     854:	00656475 	rsbeq	r6, r5, r5, ror r4
     858:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 7a8 <startup-0x1ffff858>
     85c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     860:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     864:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     868:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     86c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     870:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     874:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     878:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     87c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 884 <startup-0x1ffff77c>
     880:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     884:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     888:	6d000063 	stcvs	0, cr0, [r0, #-396]	; 0xfffffe74
     88c:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
     890:	00010063 	andeq	r0, r1, r3, rrx
     894:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     898:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     89c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8a0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     8a4:	00020068 	andeq	r0, r2, r8, rrx
     8a8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     8ac:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     8b0:	0300682e 	movweq	r6, #2094	; 0x82e
     8b4:	6f630000 	svcvs	0x00630000
     8b8:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     8bc:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     8c0:	00000400 	andeq	r0, r0, r0, lsl #8
     8c4:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     8c8:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     8cc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     8d0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     8d4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     8d8:	74730000 	ldrbtvc	r0, [r3], #-0
     8dc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     8e0:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     8e4:	00050068 	andeq	r0, r5, r8, rrx
     8e8:	73696d00 	cmnvc	r9, #0, 26
     8ec:	00682e63 	rsbeq	r2, r8, r3, ror #28
     8f0:	00000005 	andeq	r0, r0, r5
     8f4:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
     8f8:	03200015 			; <UNDEFINED> instruction: 0x03200015
     8fc:	4f0100f6 	svcmi	0x000100f6
     900:	900c0359 	andls	r0, ip, r9, asr r3
     904:	9f4dc14b 	svcls	0x004dc14b
     908:	ae919275 	mrcge	2, 4, r9, cr1, cr5, {3}
     90c:	6757b05a 			; <UNDEFINED> instruction: 0x6757b05a
     910:	2e09032d 	cdpcs	3, 0, cr0, cr9, cr13, {1}
     914:	2d67571e 	stclcs	7, cr5, [r7, #-120]!	; 0xffffff88
     918:	900c034d 	andls	r0, ip, sp, asr #6
     91c:	0d03835d 	stceq	3, cr8, [r3, #-372]	; 0xfffffe8c
     920:	7a4c9590 	bvc	1325f68 <startup-0x1ecda098>
     924:	0b03841e 	bleq	e19a4 <startup-0x1ff1e65c>
     928:	6c3e4d74 	ldcvs	13, cr4, [lr], #-464	; 0xfffffe30
     92c:	0602681e 			; <UNDEFINED> instruction: 0x0602681e
     930:	31010100 	mrscc	r0, (UNDEF: 17)
     934:	02000001 	andeq	r0, r0, #1
     938:	00010800 	andeq	r0, r1, r0, lsl #16
     93c:	fb010200 	blx	41146 <startup-0x1ffbeeba>
     940:	01000d0e 	tsteq	r0, lr, lsl #26
     944:	00010101 	andeq	r0, r1, r1, lsl #2
     948:	00010000 	andeq	r0, r1, r0
     94c:	3a430100 	bcc	10c0d54 <startup-0x1ef3f2ac>
     950:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     954:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     958:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     95c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     960:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     964:	6f442f65 	svcvs	0x00442f65
     968:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     96c:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     970:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     974:	41442f62 	cmpmi	r4, r2, ror #30
     978:	30393254 	eorscc	r3, r9, r4, asr r2
     97c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     980:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     984:	2f6d6574 	svccs	0x006d6574
     988:	2f646f6b 	svccs	0x00646f6b
     98c:	0062696c 	rsbeq	r6, r2, ip, ror #18
     990:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     994:	70616573 	rsbvc	r6, r1, r3, ror r5
     998:	6f635c70 	svcvs	0x00635c70
     99c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     9a0:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     9a4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     9a8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     9ac:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     9b0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     9b4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     9b8:	61652d65 	cmnvs	r5, r5, ror #26
     9bc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     9c0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     9c4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     9c8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     9cc:	6300656e 	movwvs	r6, #1390	; 0x56e
     9d0:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     9d4:	70706165 	rsbsvc	r6, r0, r5, ror #2
     9d8:	646f635c 	strbtvs	r6, [pc], #-860	; 9e0 <startup-0x1ffff620>
     9dc:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     9e0:	6f745c65 	svcvs	0x00745c65
     9e4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     9e8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     9ec:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     9f0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     9f4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     9f8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     9fc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     a00:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     a04:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     a08:	62000073 	andvs	r0, r0, #115	; 0x73
     a0c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     a10:	00632e72 	rsbeq	r2, r3, r2, ror lr
     a14:	5f000001 	svcpl	0x00000001
     a18:	61666564 	cmnvs	r6, r4, ror #10
     a1c:	5f746c75 	svcpl	0x00746c75
     a20:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     a24:	00682e73 	rsbeq	r2, r8, r3, ror lr
     a28:	5f000002 	svcpl	0x00000002
     a2c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     a30:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     a34:	00000300 	andeq	r0, r0, r0, lsl #6
     a38:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     a3c:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
     a40:	00000100 	andeq	r0, r0, r0, lsl #2
     a44:	02050000 	andeq	r0, r5, #0
     a48:	200017a8 	andcs	r1, r0, r8, lsr #15
     a4c:	4b4b4b15 	blmi	12d36a8 <startup-0x1ed2c958>
     a50:	59764e4b 	ldmdbpl	r6!, {r0, r1, r3, r6, r9, sl, fp, lr}^
     a54:	5985c932 	stmibpl	r5, {r1, r4, r5, r8, fp, lr, pc}
     a58:	5a4e214c 	bpl	1388f90 <startup-0x1ec77070>
     a5c:	85c93259 	strbhi	r3, [r9, #601]	; 0x259
     a60:	02214c59 	eoreq	r4, r1, #22784	; 0x5900
     a64:	01010004 	tsteq	r1, r4
     a68:	0000034f 	andeq	r0, r0, pc, asr #6
     a6c:	01de0002 	bicseq	r0, lr, r2
     a70:	01020000 	mrseq	r0, (UNDEF: 2)
     a74:	000d0efb 	strdeq	r0, [sp], -fp
     a78:	01010101 	tsteq	r1, r1, lsl #2
     a7c:	01000000 	mrseq	r0, (UNDEF: 0)
     a80:	43010000 	movwmi	r0, #4096	; 0x1000
     a84:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     a88:	2f737265 	svccs	0x00737265
     a8c:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
     a90:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
     a94:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
     a98:	442f6576 	strtmi	r6, [pc], #-1398	; aa0 <startup-0x1ffff560>
     a9c:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
     aa0:	2f746e65 	svccs	0x00746e65
     aa4:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
     aa8:	442f6275 	strtmi	r6, [pc], #-629	; ab0 <startup-0x1ffff550>
     aac:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
     ab0:	614c2d30 	cmpvs	ip, r0, lsr sp
     ab4:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
     ab8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     abc:	646f6b2f 	strbtvs	r6, [pc], #-2863	; ac4 <startup-0x1ffff53c>
     ac0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     ac4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     ac8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     acc:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     ad0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     ad4:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     ad8:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     adc:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     ae0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     ae4:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     ae8:	2f726576 	svccs	0x00726576
     aec:	00637273 	rsbeq	r7, r3, r3, ror r2
     af0:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     af4:	70616573 	rsbvc	r6, r1, r3, ror r5
     af8:	6f635c70 	svcvs	0x00635c70
     afc:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     b00:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     b04:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     b08:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     b0c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     b10:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     b14:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     b18:	61652d65 	cmnvs	r5, r5, ror #26
     b1c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     b20:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     b24:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     b28:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     b2c:	6300656e 	movwvs	r6, #1390	; 0x56e
     b30:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     b34:	70706165 	rsbsvc	r6, r0, r5, ror #2
     b38:	646f635c 	strbtvs	r6, [pc], #-860	; b40 <startup-0x1ffff4c0>
     b3c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     b40:	6f745c65 	svcvs	0x00745c65
     b44:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     b48:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     b4c:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     b50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     b54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     b58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     b5c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     b60:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     b64:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     b68:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
     b6c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     b70:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     b74:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     b78:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     b7c:	534d432f 	movtpl	r4, #54063	; 0xd32f
     b80:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     b84:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     b88:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     b8c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     b90:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     b94:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     b98:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     b9c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     ba0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     ba4:	5f787834 	svcpl	0x00787834
     ba8:	50647453 	rsbpl	r7, r4, r3, asr r4
     bac:	70697265 	rsbvc	r7, r9, r5, ror #4
     bb0:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     bb4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     bb8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     bbc:	74730000 	ldrbtvc	r0, [r3], #-0
     bc0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     bc4:	5f787834 	svcpl	0x00787834
     bc8:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
     bcc:	00632e74 	rsbeq	r2, r3, r4, ror lr
     bd0:	5f000001 	svcpl	0x00000001
     bd4:	61666564 	cmnvs	r6, r4, ror #10
     bd8:	5f746c75 	svcpl	0x00746c75
     bdc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     be0:	00682e73 	rsbeq	r2, r8, r3, ror lr
     be4:	5f000002 	svcpl	0x00000002
     be8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     bec:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     bf0:	00000300 	andeq	r0, r0, r0, lsl #6
     bf4:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
     bf8:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
     bfc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     c00:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     c04:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     c08:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     c0c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     c10:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     c14:	00000500 	andeq	r0, r0, r0, lsl #10
     c18:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     c1c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     c20:	00682e78 	rsbeq	r2, r8, r8, ror lr
     c24:	73000005 	movwvc	r0, #5
     c28:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     c2c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     c30:	6173755f 	cmnvs	r3, pc, asr r5
     c34:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
     c38:	00000500 	andeq	r0, r0, r0, lsl #10
     c3c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     c40:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     c44:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     c48:	00682e63 	rsbeq	r2, r8, r3, ror #28
     c4c:	00000005 	andeq	r0, r0, r5
     c50:	90020500 	andls	r0, r2, r0, lsl #10
     c54:	03200018 			; <UNDEFINED> instruction: 0x03200018
     c58:	4e0101bb 	mcrmi	1, 0, r0, cr1, cr11, {5}
     c5c:	28034b4c 	stmdacs	r3, {r2, r3, r6, r8, r9, fp, lr}
     c60:	205a034a 	subscs	r0, sl, sl, asr #6
     c64:	2303674c 	movwcs	r6, #14156	; 0x374c
     c68:	205f0366 	subscs	r0, pc, r6, ror #6
     c6c:	1e03674c 	cdpne	7, 0, cr6, cr3, cr12, {2}
     c70:	20640366 	rsbcs	r0, r4, r6, ror #6
     c74:	1903674c 	stmdbne	r3, {r2, r3, r6, r8, r9, sl, sp, lr}
     c78:	20690366 	rsbcs	r0, r9, r6, ror #6
     c7c:	1403674c 	strne	r6, [r3], #-1868	; 0xfffff8b4
     c80:	206e0366 	rsbcs	r0, lr, r6, ror #6
     c84:	0f034b4c 	svceq	0x00034b4c
     c88:	2073034a 	rsbscs	r0, r3, sl, asr #6
     c8c:	0a03674c 	beq	da9c4 <startup-0x1ff2563c>
     c90:	207a0366 	rsbscs	r0, sl, r6, ror #6
     c94:	0369674c 	cmneq	r9, #76, 14	; 0x1300000
     c98:	594a080c 	stmdbpl	sl, {r2, r3, fp}^
     c9c:	13032f4b 	movwne	r2, #16203	; 0x3f4b
     ca0:	694e4d2e 	stmdbvs	lr, {r1, r2, r3, r5, r8, sl, fp, lr}^
     ca4:	67504d4d 	ldrbvs	r4, [r0, -sp, asr #26]
     ca8:	4d4d6a2d 	vstrmi	s13, [sp, #-180]	; 0xffffff4c
     cac:	5a4e694e 	bpl	139b1ec <startup-0x1ec64e14>
     cb0:	01040200 	mrseq	r0, R12_usr
     cb4:	4c064a06 			; <UNDEFINED> instruction: 0x4c064a06
     cb8:	f7694e5c 			; <UNDEFINED> instruction: 0xf7694e5c
     cbc:	687785e6 	ldmdavs	r7!, {r1, r2, r5, r6, r7, r8, sl, pc}^
     cc0:	034bdae8 	movteq	sp, #47848	; 0xbae8
     cc4:	4b4cd609 	blmi	13364f0 <startup-0x1ecc9b10>
     cc8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     ccc:	4a0c033d 	bmi	3019c8 <startup-0x1fcfe638>
     cd0:	2e090359 	mcrcs	3, 0, r0, cr9, cr9, {2}
     cd4:	ab4b504c 	blge	12d4e0c <startup-0x1ed2b1f4>
     cd8:	09034b3f 	stmdbeq	r3, {r0, r1, r2, r3, r4, r5, r8, r9, fp, lr}
     cdc:	3d3d4c66 	ldccc	12, cr4, [sp, #-408]!	; 0xfffffe68
     ce0:	0b033d3d 	bleq	d01dc <startup-0x1ff2fe24>
     ce4:	974d794a 	strbls	r7, [sp, -sl, asr #18]
     ce8:	0b03841e 	bleq	e1d68 <startup-0x1ff1e298>
     cec:	9f847974 	svcls	0x00847974
     cf0:	794a0d03 	stmdbvc	sl, {r0, r1, r8, sl, fp}^
     cf4:	841e894d 	ldrhi	r8, [lr], #-2381	; 0xfffff6b3
     cf8:	79740b03 	ldmdbvc	r4!, {r0, r1, r8, r9, fp}^
     cfc:	841e974d 	ldrhi	r9, [lr], #-1869	; 0xfffff8b3
     d00:	7a742a03 	bvc	1d0b514 <startup-0x1e2f4aec>
     d04:	4a090375 	bmi	241ae0 <startup-0x1fdbe520>
     d08:	2e03674f 	cdpcs	7, 0, cr6, cr3, cr15, {2}
     d0c:	9f847a4a 	svcls	0x00847a4a
     d10:	794a0b03 	stmdbvc	sl, {r0, r1, r8, r9, fp}^
     d14:	841e894d 	ldrhi	r8, [lr], #-2381	; 0xfffff6b3
     d18:	794a0c03 	stmdbvc	sl, {r0, r1, sl, fp}^
     d1c:	3e039183 	mvfccd	f1, f3
     d20:	91837974 	orrls	r7, r3, r4, ror r9
     d24:	794a0b03 	stmdbvc	sl, {r0, r1, r8, r9, fp}^
     d28:	841e974d 	ldrhi	r9, [lr], #-1869	; 0xfffff8b3
     d2c:	4f740903 	svcmi	0x00740903
     d30:	4a2f0383 	bmi	bc1b44 <startup-0x1f43e4bc>
     d34:	1e894d79 	mcrne	13, 4, r4, cr9, cr9, {3}
     d38:	00c50384 	sbceq	r0, r5, r4, lsl #7
     d3c:	bb84794a 	bllt	fe11f26c <_global_impure_ptr+0xde11a150>
     d40:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
     d44:	841e894d 	ldrhi	r8, [lr], #-2381	; 0xfffff6b3
     d48:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
     d4c:	841e894d 	ldrhi	r8, [lr], #-2381	; 0xfffff6b3
     d50:	794a3903 	stmdbvc	sl, {r0, r1, r8, fp, ip, sp}^
     d54:	0b039183 	bleq	e5368 <startup-0x1ff1ac98>
     d58:	894d794a 	stmdbhi	sp, {r1, r3, r6, r8, fp, ip, sp, lr}^
     d5c:	1f03841e 	svcne	0x0003841e
     d60:	984ec04a 	stmdals	lr, {r1, r3, r6, lr, pc}^
     d64:	f203ae1e 			; <UNDEFINED> instruction: 0xf203ae1e
     d68:	67bb4a00 	ldrvs	r4, [fp, r0, lsl #20]!
     d6c:	312e0c03 			; <UNDEFINED> instruction: 0x312e0c03
     d70:	3e5a5969 	vnmlacc.f16	s11, s20, s19	; <UNPREDICTABLE>
     d74:	3e4e3e4c 	cdpcc	14, 4, cr3, cr14, cr12, {2}
     d78:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
     d7c:	754a1503 	strbvc	r1, [sl, #-1283]	; 0xfffffafd
     d80:	924a0b03 	subls	r0, sl, #3072	; 0xc00
     d84:	033d4c5c 	teqeq	sp, #92, 24	; 0x5c00
     d88:	0b034a1c 	bleq	d3600 <startup-0x1ff2ca00>
     d8c:	16036774 			; <UNDEFINED> instruction: 0x16036774
     d90:	0367754a 	cmneq	r7, #310378496	; 0x12800000
     d94:	59684a0c 	stmdbpl	r8!, {r2, r3, r9, fp, lr}^
     d98:	3e843e5a 	mcrcc	14, 4, r3, cr4, cr10, {2}
     d9c:	59597786 	ldmdbpl	r9, {r1, r2, r7, r8, r9, sl, ip, sp, lr}^
     da0:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
     da4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     da8:	3d4d5c3e 	stclcc	12, cr5, [sp, #-248]	; 0xffffff08
     dac:	754a1d03 	strbvc	r1, [sl, #-3331]	; 0xfffff2fd
     db0:	59820b03 	stmibpl	r2, {r0, r1, r8, r9, fp}
     db4:	04026767 	streq	r6, [r2], #-1895	; 0xfffff899
     db8:	f0010100 			; <UNDEFINED> instruction: 0xf0010100
     dbc:	02000002 	andeq	r0, r0, #2
     dc0:	00023200 	andeq	r3, r2, r0, lsl #4
     dc4:	fb010200 	blx	415ce <startup-0x1ffbea32>
     dc8:	01000d0e 	tsteq	r0, lr, lsl #26
     dcc:	00010101 	andeq	r0, r1, r1, lsl #2
     dd0:	00010000 	andeq	r0, r1, r0
     dd4:	3a430100 	bcc	10c11dc <startup-0x1ef3ee24>
     dd8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     ddc:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     de0:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     de4:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     de8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     dec:	6f442f65 	svcvs	0x00442f65
     df0:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     df4:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     df8:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     dfc:	41442f62 	cmpmi	r4, r2, ror #30
     e00:	30393254 	eorscc	r3, r9, r4, asr r2
     e04:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     e08:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     e0c:	2f6d6574 	svccs	0x006d6574
     e10:	2f646f6b 	svccs	0x00646f6b
     e14:	0062696c 	rsbeq	r6, r2, ip, ror #18
     e18:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     e1c:	70616573 	rsbvc	r6, r1, r3, ror r5
     e20:	6f635c70 	svcvs	0x00635c70
     e24:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     e28:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     e2c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     e30:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     e34:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     e38:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     e3c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     e40:	61652d65 	cmnvs	r5, r5, ror #26
     e44:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     e48:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     e4c:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     e50:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     e54:	6300656e 	movwvs	r6, #1390	; 0x56e
     e58:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     e5c:	70706165 	rsbsvc	r6, r0, r5, ror #2
     e60:	646f635c 	strbtvs	r6, [pc], #-860	; e68 <startup-0x1ffff198>
     e64:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     e68:	6f745c65 	svcvs	0x00745c65
     e6c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     e70:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     e74:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     e78:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     e7c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     e80:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     e84:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     e88:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     e8c:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     e90:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
     e94:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     e98:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     e9c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     ea0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     ea4:	534d432f 	movtpl	r4, #54063	; 0xd32f
     ea8:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     eac:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     eb0:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     eb4:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     eb8:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     ebc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     ec0:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     ec4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     ec8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     ecc:	5f787834 	svcpl	0x00787834
     ed0:	50647453 	rsbpl	r7, r4, r3, asr r4
     ed4:	70697265 	rsbvc	r7, r9, r5, ror #4
     ed8:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     edc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     ee0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     ee4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     ee8:	61657363 	cmnvs	r5, r3, ror #6
     eec:	635c7070 	cmpvs	ip, #112	; 0x70
     ef0:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     ef4:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     ef8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; d30 <startup-0x1ffff2d0>
     efc:	63675c73 	cmnvs	r7, #29440	; 0x7300
     f00:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     f04:	696c5c6d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, sl, fp, ip, lr}^
     f08:	63675c62 	cmnvs	r7, #25088	; 0x6200
     f0c:	72615c63 	rsbvc	r5, r1, #25344	; 0x6300
     f10:	6f6e2d6d 	svcvs	0x006e2d6d
     f14:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     f18:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     f1c:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
     f20:	6e695c31 	mcrvs	12, 3, r5, cr9, cr1, {1}
     f24:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     f28:	55000065 	strpl	r0, [r0, #-101]	; 0xffffff9b
     f2c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     f30:	0100632e 	tsteq	r0, lr, lsr #6
     f34:	645f0000 	ldrbvs	r0, [pc], #-0	; f3c <startup-0x1ffff0c4>
     f38:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     f3c:	745f746c 	ldrbvc	r7, [pc], #-1132	; f44 <startup-0x1ffff0bc>
     f40:	73657079 	cmnvc	r5, #121	; 0x79
     f44:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     f48:	735f0000 	cmpvc	pc, #0
     f4c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     f50:	00682e74 	rsbeq	r2, r8, r4, ror lr
     f54:	62000003 	andvs	r0, r0, #3
     f58:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     f5c:	00682e72 	rsbeq	r2, r8, r2, ror lr
     f60:	63000001 	movwvs	r0, #1
     f64:	5f65726f 	svcpl	0x0065726f
     f68:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     f6c:	00040068 	andeq	r0, r4, r8, rrx
     f70:	73797300 	cmnvc	r9, #0, 6
     f74:	5f6d6574 	svcpl	0x006d6574
     f78:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     f7c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     f80:	00682e78 	rsbeq	r2, r8, r8, ror lr
     f84:	73000005 	movwvc	r0, #5
     f88:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     f8c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     f90:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     f94:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
     f98:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
     f9c:	00000500 	andeq	r0, r0, r0, lsl #10
     fa0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     fa4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     fa8:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
     fac:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
     fb0:	00050068 	andeq	r0, r5, r8, rrx
     fb4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     fb8:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     fbc:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
     fc0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     fc4:	00050068 	andeq	r0, r5, r8, rrx
     fc8:	636f6c00 	cmnvs	pc, #0, 24
     fcc:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     fd0:	5f000003 	svcpl	0x00000003
     fd4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     fd8:	00682e73 	rsbeq	r2, r8, r3, ror lr
     fdc:	73000003 	movwvc	r0, #3
     fe0:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
     fe4:	00682e66 	rsbeq	r2, r8, r6, ror #28
     fe8:	72000006 	andvc	r0, r0, #6
     fec:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
     ff0:	0300682e 	movweq	r6, #2094	; 0x82e
     ff4:	00000000 	andeq	r0, r0, r0
     ff8:	22900205 	addscs	r0, r0, #1342177280	; 0x50000000
     ffc:	12032000 	andne	r2, r3, #0
    1000:	c0923e01 	addsgt	r3, r2, r1, lsl #28
    1004:	874ba293 			; <UNDEFINED> instruction: 0x874ba293
    1008:	3ed9691d 			; <UNDEFINED> instruction: 0x3ed9691d
    100c:	5b593f3d 	blpl	1650d08 <startup-0x1e9af2f8>
    1010:	78754d4b 	ldmdavc	r5!, {r0, r1, r3, r6, r8, sl, fp, lr}^
    1014:	3e3d3d4b 	cdpcc	13, 3, cr3, cr13, cr11, {2}
    1018:	0359764b 	cmpeq	r9, #78643200	; 0x4b00000
    101c:	3d59660b 	ldclcc	6, cr6, [r9, #-44]	; 0xffffffd4
    1020:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    1024:	3d3d3d6d 	ldccc	13, cr3, [sp, #-436]!	; 0xfffffe4c
    1028:	5b3f4d3d 	blpl	fd4524 <startup-0x1f02badc>
    102c:	685c0867 	ldmdavs	ip, {r0, r1, r2, r5, r6, fp}^
    1030:	213068a0 	teqcs	r0, r0, lsr #17
    1034:	c9234db1 	stmdbgt	r3!, {r0, r4, r5, r7, r8, sl, fp, lr}
    1038:	4f21512a 	svcmi	0x0021512a
    103c:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    1040:	003c0601 	eorseq	r0, ip, r1, lsl #12
    1044:	08020402 	stmdaeq	r2, {r1, sl}
    1048:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    104c:	02002004 	andeq	r2, r0, #4
    1050:	3f060404 	svccc	0x00060404
    1054:	03040200 	movweq	r0, #16896	; 0x4200
    1058:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    105c:	002f0803 	eoreq	r0, pc, r3, lsl #16
    1060:	72030402 	andvc	r0, r3, #33554432	; 0x2000000
    1064:	01040200 	mrseq	r0, R12_usr
    1068:	5e065806 	cdppl	8, 0, cr5, cr6, cr6, {0}
    106c:	0200ad59 	andeq	sl, r0, #5696	; 0x1640
    1070:	002c0204 	eoreq	r0, ip, r4, lsl #4
    1074:	06010402 	streq	r0, [r1], -r2, lsl #8
    1078:	00880666 	addeq	r0, r8, r6, ror #12
    107c:	21010402 	tstcs	r1, r2, lsl #8
    1080:	78834b4f 	stmvc	r3, {r0, r1, r2, r3, r6, r8, r9, fp, lr}
    1084:	225b4c6e 	subscs	r4, fp, #28160	; 0x6e00
    1088:	334b6d4e 	movtcc	r6, #48462	; 0xbd4e
    108c:	0200334b 	andeq	r3, r0, #738197505	; 0x2c000001
    1090:	4a060104 	bmi	1814a8 <startup-0x1fe7eb58>
    1094:	005d4b06 	subseq	r4, sp, r6, lsl #22
    1098:	06010402 	streq	r0, [r1], -r2, lsl #8
    109c:	5d4b064a 	stclpl	6, cr0, [fp, #-296]	; 0xfffffed8
    10a0:	01040200 	mrseq	r0, R12_usr
    10a4:	4b064a06 	blmi	1938c4 <startup-0x1fe6c73c>
    10a8:	0402225c 	streq	r2, [r2], #-604	; 0xfffffda4
    10ac:	Address 0x000010ac is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	706c6c70 	rsbvc	r6, ip, r0, ror ip
       4:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
       8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
       c:	54520031 	ldrbpl	r0, [r2], #-49	; 0xffffffcf
      10:	4b575f43 	blmi	15d7d24 <startup-0x1ea282dc>
      14:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
      18:	006e5152 	rsbeq	r5, lr, r2, asr r1
      1c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
      20:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
      24:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
      28:	5f31414d 	svcpl	0x0031414d
      2c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
      30:	5f366d61 	svcpl	0x00366d61
      34:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      38:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
      3c:	50555f38 	subspl	r5, r5, r8, lsr pc
      40:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
      44:	495f3331 	ldmdbmi	pc, {r0, r4, r5, r8, r9, ip, sp}^	; <UNPREDICTABLE>
      48:	006e5152 	rsbeq	r5, lr, r2, asr r1
      4c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
      50:	46435332 			; <UNDEFINED> instruction: 0x46435332
      54:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
      58:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
      5c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
      60:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
      64:	00676966 	rsbeq	r6, r7, r6, ror #18
      68:	5f434352 	svcpl	0x00434352
      6c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
      70:	6b636f6c 	blvs	18dbe28 <startup-0x1e7241d8>
      74:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
      78:	4d440071 	stclmi	0, cr0, [r4, #-452]	; 0xfffffe3c
      7c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
      80:	61657274 	smcvs	22308	; 0x5724
      84:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
      88:	006e5152 	rsbeq	r5, lr, r2, asr r1
      8c:	4b4c4348 	blmi	1310db4 <startup-0x1ecef24c>
      90:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
      94:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
      98:	47007963 	strmi	r7, [r0, -r3, ror #18]
      9c:	5f4f4950 	svcpl	0x004f4950
      a0:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
      a4:	504f4e5f 	subpl	r4, pc, pc, asr lr	; <UNPREDICTABLE>
      a8:	004c4c55 	subeq	r4, ip, r5, asr ip
      ac:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
      b0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
      b4:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
      b8:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
      bc:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
      c0:	5152495f 	cmppl	r2, pc, asr r9
      c4:	4344006e 	movtmi	r0, #16494	; 0x406e
      c8:	495f494d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
      cc:	006e5152 	rsbeq	r5, lr, r2, asr r1
      d0:	5f434352 	svcpl	0x00434352
      d4:	32425041 	subcc	r5, r2, #65	; 0x41
      d8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
      dc:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
      e0:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
      e4:	646f4d50 	strbtvs	r4, [pc], #-3408	; ec <startup-0x1fffff14>
      e8:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
      ec:	43435200 	movtmi	r5, #12800	; 0x3200
      f0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
      f4:	72655032 	rsbvc	r5, r5, #50	; 0x32
      f8:	43687069 	cmnmi	r8, #105	; 0x69
      fc:	6b636f6c 	blvs	18dbeb4 <startup-0x1e72414c>
     100:	6f4d504c 	svcvs	0x004d504c
     104:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     108:	50470064 	subpl	r0, r7, r4, rrx
     10c:	544f4f49 	strbpl	r4, [pc], #-3913	; 114 <startup-0x1ffffeec>
     110:	5f657079 	svcpl	0x00657079
     114:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     118:	00666544 	rsbeq	r6, r6, r4, asr #10
     11c:	5f434352 	svcpl	0x00434352
     120:	31425041 	cmpcc	r2, r1, asr #32
     124:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     128:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     12c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     130:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     134:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 30 <startup-0x1fffffd0>
     138:	0065646f 	rsbeq	r6, r5, pc, ror #8
     13c:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
     140:	5152495f 	cmppl	r2, pc, asr r9
     144:	4352006e 	cmpmi	r2, #110	; 0x6e
     148:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     14c:	4b4c4343 	blmi	1310e60 <startup-0x1ecef1a0>
     150:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     154:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     158:	415f4343 	cmpmi	pc, r3, asr #6
     15c:	50324248 	eorspl	r4, r2, r8, asr #4
     160:	70697265 	rsbvc	r7, r9, r5, ror #4
     164:	6f6c4368 	svcvs	0x006c4368
     168:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     16c:	43490064 	movtmi	r0, #36964	; 0x9064
     170:	52005250 	andpl	r5, r0, #80, 4
     174:	545f4343 	ldrbpl	r4, [pc], #-835	; 17c <startup-0x1ffffe84>
     178:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
     17c:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0xffffffb5
     180:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
     184:	00676966 	rsbeq	r6, r7, r6, ror #18
     188:	5f434352 	svcpl	0x00434352
     18c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     190:	6d435332 	stclvs	3, cr5, [r3, #-200]	; 0xffffff38
     194:	43520064 	cmpmi	r2, #100	; 0x64
     198:	43485f43 	movtmi	r5, #36675	; 0x8f43
     19c:	43004b4c 	movwmi	r4, #2892	; 0xb4c
     1a0:	5f324e41 	svcpl	0x00324e41
     1a4:	5f305852 	svcpl	0x00305852
     1a8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     1ac:	41535500 	cmpmi	r3, r0, lsl #10
     1b0:	5f365452 	svcpl	0x00365452
     1b4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     1b8:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
     1bc:	616c5f65 	cmnvs	ip, r5, ror #30
     1c0:	5f006d72 	svcpl	0x00006d72
     1c4:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     1c8:	745f3874 	ldrbvc	r3, [pc], #-2164	; 1d0 <startup-0x1ffffe30>
     1cc:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     1d0:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     1d4:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     1d8:	5f384d49 	svcpl	0x00384d49
     1dc:	5f4b5242 	svcpl	0x004b5242
     1e0:	314d4954 	cmpcc	sp, r4, asr r9
     1e4:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     1e8:	41006e51 	tstmi	r0, r1, asr lr
     1ec:	4c324248 	lfmmi	f4, 4, [r2], #-288	; 0xfffffee0
     1f0:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     1f4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     1f8:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     1fc:	445f6450 	ldrbmi	r6, [pc], #-1104	; 204 <startup-0x1ffffdfc>
     200:	004e574f 	subeq	r5, lr, pc, asr #14
     204:	43524941 	cmpmi	r2, #1064960	; 0x104000
     208:	43520052 	cmpmi	r2, #82	; 0x52
     20c:	41535f43 	cmpmi	r3, r3, asr #30
     210:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
     214:	43494153 	movtmi	r4, #37203	; 0x9153
     218:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
     21c:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     220:	00676966 	rsbeq	r6, r7, r6, ror #18
     224:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     228:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
     22c:	6f505f4f 	svcvs	0x00505f4f
     230:	00737472 	rsbseq	r7, r3, r2, ror r4
     234:	49555043 	ldmdbmi	r5, {r0, r1, r6, ip, lr}^
     238:	79530044 	ldmdbvc	r3, {r2, r6}^
     23c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     240:	61485f6b 	cmpvs	r8, fp, ror #30
     244:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     248:	43520072 	cmpmi	r2, #114	; 0x72
     24c:	544c5f43 	strbpl	r5, [ip], #-3907	; 0xfffff0bd
     250:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
     254:	7669444b 	strbtvc	r4, [r9], -fp, asr #8
     258:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     25c:	44006769 	strmi	r6, [r0], #-1897	; 0xfffff897
     260:	5f32414d 	svcpl	0x0032414d
     264:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     268:	5f356d61 	svcpl	0x00356d61
     26c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     270:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     274:	6f4d5f4f 	svcvs	0x004d5f4f
     278:	415f6564 	cmpmi	pc, r4, ror #10
     27c:	43520046 	cmpmi	r2, #70	; 0x46
     280:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     284:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
     288:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     28c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     290:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     294:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     298:	52545f31 	subspl	r5, r4, #49, 30	; 0xc4
     29c:	4f435f47 	svcmi	0x00435f47
     2a0:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     2a4:	5f31314d 	svcpl	0x0031314d
     2a8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     2ac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     2b0:	6f4d5f4f 	svcvs	0x004d5f4f
     2b4:	415f6564 	cmpmi	pc, r4, ror #10
     2b8:	4352004e 	cmpmi	r2, #78	; 0x4e
     2bc:	43505f43 	cmpmi	r0, #268	; 0x10c
     2c0:	43324b4c 	teqmi	r2, #76, 22	; 0x13000
     2c4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     2c8:	6f630067 	svcvs	0x00630067
     2cc:	6f72746e 	svcvs	0x0072746e
     2d0:	7469626c 	strbtvc	r6, [r9], #-620	; 0xfffffd94
     2d4:	43520073 	cmpmi	r2, #115	; 0x73
     2d8:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xfffff0bd
     2dc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     2e0:	43435200 	movtmi	r5, #12800	; 0x3200
     2e4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     2e8:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     2ec:	4c43426b 	sfmmi	f4, 2, [r3], {107}	; 0x6b
     2f0:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     2f4:	00676966 	rsbeq	r6, r7, r6, ror #18
     2f8:	32425041 	subcc	r5, r2, #65	; 0x41
     2fc:	00524e45 	subseq	r4, r2, r5, asr #28
     300:	5f434352 	svcpl	0x00434352
     304:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     308:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     30c:	756f534b 	strbvc	r5, [pc, #-843]!	; ffffffc9 <_global_impure_ptr+0xdfffaead>
     310:	00656372 	rsbeq	r6, r5, r2, ror r3
     314:	31424841 	cmpcc	r2, r1, asr #16
     318:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     31c:	43520052 	cmpmi	r2, #82	; 0x52
     320:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     324:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     328:	51766944 	cmnpl	r6, r4, asr #18
     32c:	73795300 	cmnvc	r9, #0, 6
     330:	6b636954 	blvs	18da888 <startup-0x1e725778>
     334:	5152495f 	cmppl	r2, pc, asr r9
     338:	4352006e 	cmpmi	r2, #110	; 0x6e
     33c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     340:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
     344:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     348:	41535500 	cmpmi	r3, r0, lsl #10
     34c:	5f335452 	svcpl	0x00335452
     350:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     354:	4b434400 	blmi	10d135c <startup-0x1ef2eca4>
     358:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     35c:	53434900 	movtpl	r4, #14592	; 0x3900
     360:	43520052 	cmpmi	r2, #82	; 0x52
     364:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     368:	6944324f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r9, ip, sp}^
     36c:	50470076 	subpl	r0, r7, r6, ror r0
     370:	4f5f4f49 	svcmi	0x005f4f49
     374:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     378:	00444f5f 	subeq	r4, r4, pc, asr pc
     37c:	4f495047 	svcmi	0x00495047
     380:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     384:	70795474 	rsbsvc	r5, r9, r4, ror r4
     388:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     38c:	43435200 	movtmi	r5, #12800	; 0x3200
     390:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     394:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     398:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     39c:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
     3a0:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     3a4:	61657274 	smcvs	22308	; 0x5724
     3a8:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     3ac:	006e5152 	rsbeq	r5, lr, r2, asr r1
     3b0:	5f434352 	svcpl	0x00434352
     3b4:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     3b8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     3bc:	43520065 	cmpmi	r2, #101	; 0x65
     3c0:	50415f43 	subpl	r5, r1, r3, asr #30
     3c4:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     3c8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     3cc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     3d0:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     3d4:	53455200 	movtpl	r5, #20992	; 0x5200
     3d8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     3dc:	52003044 	andpl	r3, r0, #68	; 0x44
     3e0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     3e4:	31444556 	cmpcc	r4, r6, asr r5
     3e8:	736e7500 	cmnvc	lr, #0, 10
     3ec:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     3f0:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     3f4:	44007261 	strmi	r7, [r0], #-609	; 0xfffffd9f
     3f8:	5f32414d 	svcpl	0x0032414d
     3fc:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     400:	5f346d61 	svcpl	0x00346d61
     404:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     408:	53455200 	movtpl	r5, #20992	; 0x5200
     40c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     410:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     414:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     418:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
     41c:	53455200 	movtpl	r5, #20992	; 0x5200
     420:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     424:	49003644 	stmdbmi	r0, {r2, r6, r9, sl, ip, sp}
     428:	00524241 	subseq	r4, r2, r1, asr #4
     42c:	4f495047 	svcmi	0x00495047
     430:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     434:	505f6570 	subspl	r6, pc, r0, ror r5	; <UNPREDICTABLE>
     438:	32490050 	subcc	r0, r9, #80	; 0x50
     43c:	455f3143 	ldrbmi	r3, [pc, #-323]	; 301 <startup-0x1ffffcff>
     440:	52495f52 	subpl	r5, r9, #328	; 0x148
     444:	43006e51 	movwmi	r6, #3665	; 0xe51
     448:	5f324e41 	svcpl	0x00324e41
     44c:	5f454353 	svcpl	0x00454353
     450:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     454:	43435200 	movtmi	r5, #12800	; 0x3200
     458:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
     45c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     460:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     464:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     468:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
     46c:	53455200 	movtpl	r5, #20992	; 0x5200
     470:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     474:	54003344 	strpl	r3, [r0], #-836	; 0xfffffcbc
     478:	5f354d49 	svcpl	0x00354d49
     47c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     480:	61735500 	cmnvs	r3, r0, lsl #10
     484:	61466567 	cmpvs	r6, r7, ror #10
     488:	5f746c75 	svcpl	0x00746c75
     48c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     490:	73657400 	cmnvc	r5, #0, 8
     494:	53003474 	movwpl	r3, #1140	; 0x474
     498:	545f4243 	ldrbpl	r4, [pc], #-579	; 4a0 <startup-0x1ffffb60>
     49c:	00657079 	rsbeq	r7, r5, r9, ror r0
     4a0:	4f495047 	svcmi	0x00495047
     4a4:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     4a8:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     4ac:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     4b0:	53464400 	movtpl	r4, #25600	; 0x6400
     4b4:	48410052 	stmdami	r1, {r1, r4, r6}^
     4b8:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
     4bc:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
     4c0:	415f4343 	cmpmi	pc, r3, asr #6
     4c4:	50324250 	eorspl	r4, r2, r0, asr r2
     4c8:	70697265 	rsbvc	r7, r9, r5, ror #4
     4cc:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     4d0:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     4d4:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
     4d8:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
     4dc:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
     4e0:	43435200 	movtmi	r5, #12800	; 0x3200
     4e4:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     4e8:	72655033 	rsbvc	r5, r5, #51	; 0x33
     4ec:	43687069 	cmnmi	r8, #105	; 0x69
     4f0:	6b636f6c 	blvs	18dc2a8 <startup-0x1e723d58>
     4f4:	6f4d504c 	svcvs	0x004d504c
     4f8:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     4fc:	5f5f0064 	svcpl	0x005f0064
     500:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     504:	745f3631 	ldrbvc	r3, [pc], #-1585	; 50c <startup-0x1ffffaf4>
     508:	42484100 	submi	r4, r8, #0, 2
     50c:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     510:	4c435000 	marmi	acc0, r5, r3
     514:	465f324b 	ldrbmi	r3, [pc], -fp, asr #4
     518:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
     51c:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     520:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     524:	6f4c5f4f 	svcvs	0x004c5f4f
     528:	70535f77 	subsvc	r5, r3, r7, ror pc
     52c:	00646565 	rsbeq	r6, r4, r5, ror #10
     530:	314e4143 	cmpcc	lr, r3, asr #2
     534:	3058525f 	subscc	r5, r8, pc, asr r2
     538:	5152495f 	cmppl	r2, pc, asr r9
     53c:	3a43006e 	bcc	10c06fc <startup-0x1ef3f904>
     540:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
     544:	415c7372 	cmpmi	ip, r2, ror r3
     548:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     54c:	656e4f5c 	strbvs	r4, [lr, #-3932]!	; 0xfffff0a4
     550:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     554:	6f445c65 	svcvs	0x00445c65
     558:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     55c:	475c746e 	ldrbmi	r7, [ip, -lr, ror #8]
     560:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     564:	41445c62 	cmpmi	r4, r2, ror #24
     568:	30393254 	eorscc	r3, r9, r4, asr r2
     56c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     570:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     574:	5c6d6574 	cfstr64pl	mvdx6, [sp], #-464	; 0xfffffe30
     578:	5c646f6b 	stclpl	15, cr6, [r4], #-428	; 0xfffffe54
     57c:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
     580:	53464800 	movtpl	r4, #26624	; 0x6800
     584:	50470052 	subpl	r0, r7, r2, asr r0
     588:	725f4f49 	subsvc	r4, pc, #292	; 0x124
     58c:	00646165 	rsbeq	r6, r4, r5, ror #2
     590:	5f434352 	svcpl	0x00434352
     594:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     598:	50004b4c 	andpl	r4, r0, ip, asr #22
     59c:	314b4c43 	cmpcc	fp, r3, asr #24
     5a0:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
     5a4:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
     5a8:	50007963 	andpl	r7, r0, r3, ror #18
     5ac:	004d4c4c 	subeq	r4, sp, ip, asr #24
     5b0:	4e4c4c50 	mcrmi	12, 2, r4, cr12, cr0, {2}
     5b4:	4c4c5000 	marmi	acc0, r5, ip
     5b8:	4c500050 	mrrcmi	0, 5, r0, r0, cr0	; <UNPREDICTABLE>
     5bc:	5200514c 	andpl	r5, r0, #76, 2
     5c0:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     5c4:	6d434953 	vstrvs.16	s9, [r3, #-166]	; 0xffffff5a	; <UNPREDICTABLE>
     5c8:	6c700064 	ldclvs	0, cr0, [r0], #-400	; 0xfffffe70
     5cc:	756f736c 	strbvc	r7, [pc, #-876]!	; 268 <startup-0x1ffffd98>
     5d0:	00656372 	rsbeq	r6, r5, r2, ror r3
     5d4:	344d4954 	strbcc	r4, [sp], #-2388	; 0xfffff6ac
     5d8:	5152495f 	cmppl	r2, pc, asr r9
     5dc:	4e47006e 	cdpmi	0, 4, cr0, cr7, cr14, {3}
     5e0:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
     5e4:	2e372039 	mrccs	0, 1, r2, cr7, cr9, {1}
     5e8:	20312e32 	eorscs	r2, r1, r2, lsr lr
     5ec:	37313032 			; <UNDEFINED> instruction: 0x37313032
     5f0:	34303930 	ldrtcc	r3, [r0], #-2352	; 0xfffff6d0
     5f4:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
     5f8:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     5fc:	5b202965 	blpl	80ab98 <startup-0x1f7f5468>
     600:	2f4d5241 	svccs	0x004d5241
     604:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
     608:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
     60c:	622d372d 	eorvs	r3, sp, #11796480	; 0xb40000
     610:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
     614:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
     618:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     61c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
     620:	30323535 	eorscc	r3, r2, r5, lsr r5
     624:	2d205d34 	stccs	13, cr5, [r0, #-208]!	; 0xffffff30
     628:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
     62c:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
     630:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
     634:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
     638:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
     63c:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
     640:	616f6c66 	cmnvs	pc, r6, ror #24
     644:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
     648:	6f733d69 	svcvs	0x00733d69
     64c:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
     650:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
     654:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
     658:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
     65c:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
     660:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
     664:	672d206d 	strvs	r2, [sp, -sp, rrx]!
     668:	304f2d20 	subcc	r2, pc, r0, lsr #26
     66c:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
     670:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
     674:	43520039 	cmpmi	r2, #57	; 0x39
     678:	43485f43 	movtmi	r5, #36675	; 0x8f43
     67c:	6f434b4c 	svcvs	0x00434b4c
     680:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     684:	43435200 	movtmi	r5, #12800	; 0x3200
     688:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
     68c:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
     690:	52006761 	andpl	r6, r0, #25427968	; 0x1840000
     694:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     698:	6f434553 	svcvs	0x00434553
     69c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     6a0:	43444200 	movtmi	r4, #16896	; 0x4200
     6a4:	48530052 	ldmdami	r3, {r1, r4, r6}^
     6a8:	00525343 	subseq	r5, r2, r3, asr #6
     6ac:	5f445650 	svcpl	0x00445650
     6b0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     6b4:	43435200 	movtmi	r5, #12800	; 0x3200
     6b8:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
     6bc:	49545300 	ldmdbmi	r4, {r8, r9, ip, lr}^
     6c0:	32490052 	subcc	r0, r9, #82	; 0x52
     6c4:	455f3143 	ldrbmi	r3, [pc, #-323]	; 589 <startup-0x1ffffa77>
     6c8:	52495f56 	subpl	r5, r9, #344	; 0x158
     6cc:	52006e51 	andpl	r6, r0, #1296	; 0x510
     6d0:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     6d4:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     6d8:	416b636f 	cmnmi	fp, pc, ror #6
     6dc:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     6e0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     6e4:	74730067 	ldrbtvc	r0, [r3], #-103	; 0xffffff99
     6e8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     6ec:	756f6370 	strbvc	r6, [pc, #-880]!	; 384 <startup-0x1ffffc7c>
     6f0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     6f4:	43435200 	movtmi	r5, #12800	; 0x3200
     6f8:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     6fc:	43494153 	movtmi	r4, #37203	; 0x9153
     700:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     704:	50470067 	subpl	r0, r7, r7, rrx
     708:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 5ec <startup-0x1ffffa14>
     70c:	5f65646f 	svcpl	0x0065646f
     710:	0054554f 	subseq	r5, r4, pc, asr #10
     714:	314d4954 	cmpcc	sp, r4, asr r9
     718:	5f43435f 	svcpl	0x0043435f
     71c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     720:	53414800 	movtpl	r4, #6144	; 0x1800
     724:	4e525f48 	cdpmi	15, 5, cr5, cr2, cr8, {2}
     728:	52495f47 	subpl	r5, r9, #284	; 0x11c
     72c:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     730:	31495458 	cmpcc	r9, r8, asr r4
     734:	5152495f 	cmppl	r2, pc, asr r9
     738:	4143006e 	cmpmi	r3, lr, rrx
     73c:	545f314e 	ldrbpl	r3, [pc], #-334	; 744 <startup-0x1ffff8bc>
     740:	52495f58 	subpl	r5, r9, #88, 30	; 0x160
     744:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     748:	5f31414d 	svcpl	0x0031414d
     74c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     750:	5f356d61 	svcpl	0x00356d61
     754:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     758:	43435200 	movtmi	r5, #12800	; 0x3200
     75c:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
     760:	43435200 	movtmi	r5, #12800	; 0x3200
     764:	4f434d5f 	svcmi	0x00434d5f
     768:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
     76c:	00676966 	rsbeq	r6, r7, r6, ror #18
     770:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     774:	4752545f 			; <UNDEFINED> instruction: 0x4752545f
     778:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 604 <startup-0x1ffff9fc>
     77c:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     780:	495f3431 	ldmdbmi	pc, {r0, r4, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     784:	006e5152 	rsbeq	r5, lr, r2, asr r1
     788:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     78c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     790:	376d6165 	strbcc	r6, [sp, -r5, ror #2]!
     794:	5152495f 	cmppl	r2, pc, asr r9
     798:	544f006e 	strbpl	r0, [pc], #-110	; 7a0 <startup-0x1ffff860>
     79c:	53465f47 	movtpl	r5, #28487	; 0x6f47
     7a0:	5152495f 	cmppl	r2, pc, asr r9
     7a4:	6f4e006e 	svcvs	0x004e006e
     7a8:	73614d6e 	cmnvc	r1, #7040	; 0x1b80
     7ac:	6c62616b 	stfvse	f6, [r2], #-428	; 0xfffffe54
     7b0:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
     7b4:	5152495f 	cmppl	r2, pc, asr r9
     7b8:	5757006e 	ldrbpl	r0, [r7, -lr, rrx]
     7bc:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     7c0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7c4:	5f47544f 	svcpl	0x0047544f
     7c8:	575f5348 	ldrbpl	r5, [pc, -r8, asr #6]
     7cc:	5f50554b 	svcpl	0x0050554b
     7d0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7d4:	43435200 	movtmi	r5, #12800	; 0x3200
     7d8:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     7dc:	72655032 	rsbvc	r5, r5, #50	; 0x32
     7e0:	43687069 	cmnmi	r8, #105	; 0x69
     7e4:	6b636f6c 	blvs	18dc59c <startup-0x1e723a64>
     7e8:	00646d43 	rsbeq	r6, r4, r3, asr #26
     7ec:	5f434352 	svcpl	0x00434352
     7f0:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     7f4:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
     7f8:	52005176 	andpl	r5, r0, #-2147483619	; 0x8000001d
     7fc:	505f4343 	subspl	r4, pc, r3, asr #6
     800:	41534c4c 	cmpmi	r3, ip, asr #24
     804:	76694449 	strbtvc	r4, [r9], -r9, asr #8
     808:	43520052 	cmpmi	r2, #82	; 0x52
     80c:	41535f43 	cmpmi	r3, r3, asr #30
     810:	6f6c4249 	svcvs	0x006c4249
     814:	43426b63 	movtmi	r6, #11107	; 0x2b63
     818:	6f534b4c 	svcvs	0x00534b4c
     81c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     820:	6d654d00 	stclvs	13, cr4, [r5, #-0]
     824:	4d79726f 	lfmmi	f7, 2, [r9, #-444]!	; 0xfffffe44
     828:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     82c:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
     830:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     834:	53006e51 	movwpl	r6, #3665	; 0xe51
     838:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     83c:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
     840:	6f6c4365 	svcvs	0x006c4365
     844:	54006b63 	strpl	r6, [r0], #-2915	; 0xfffff49d
     848:	5f504d41 	svcpl	0x00504d41
     84c:	4d415453 	cfstrdmi	mvd5, [r1, #-332]	; 0xfffffeb4
     850:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     854:	43006e51 	movwmi	r6, #3665	; 0xe51
     858:	5f314e41 	svcpl	0x00314e41
     85c:	5f454353 	svcpl	0x00454353
     860:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     864:	51524900 	cmppl	r2, r0, lsl #18
     868:	79545f6e 	ldmdbvc	r4, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     86c:	47006570 	smlsdxmi	r0, r0, r5, r6
     870:	5f4f4950 	svcpl	0x004f4950
     874:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     878:	004e495f 	subeq	r4, lr, pc, asr r9
     87c:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     880:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     884:	306d6165 	rsbcc	r6, sp, r5, ror #2
     888:	5152495f 	cmppl	r2, pc, asr r9
     88c:	4352006e 	cmpmi	r2, #110	; 0x6e
     890:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     894:	6f43324f 	svcvs	0x0043324f
     898:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     89c:	4b434c00 	blmi	10d38a4 <startup-0x1ef2c75c>
     8a0:	43520052 	cmpmi	r2, #82	; 0x52
     8a4:	32495f43 	subcc	r5, r9, #268	; 0x10c
     8a8:	4b4c4353 	blmi	13115fc <startup-0x1eceea04>
     8ac:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     8b0:	45006563 	strmi	r6, [r0, #-1379]	; 0xfffffa9d
     8b4:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
     8b8:	43324900 	teqmi	r2, #0, 18
     8bc:	52455f32 	subpl	r5, r5, #50, 30	; 0xc8
     8c0:	5152495f 	cmppl	r2, pc, asr r9
     8c4:	736d006e 	cmnvc	sp, #110	; 0x6e
     8c8:	6b636954 	blvs	18dae20 <startup-0x1e7251e0>
     8cc:	43520073 	cmpmi	r2, #115	; 0x73
     8d0:	43505f43 	cmpmi	r0, #268	; 0x10c
     8d4:	43314b4c 	teqmi	r1, #76, 22	; 0x13000
     8d8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     8dc:	534f0067 	movtpl	r0, #61543	; 0xf067
     8e0:	44454550 	strbmi	r4, [r5], #-1360	; 0xfffffab0
     8e4:	75420052 	strbvc	r0, [r2, #-82]	; 0xffffffae
     8e8:	75614673 	strbvc	r4, [r1, #-1651]!	; 0xfffff98d
     8ec:	495f746c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     8f0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     8f4:	6b636974 	blvs	18daecc <startup-0x1e725134>
     8f8:	4c500073 	mrrcmi	0, 7, r0, r0, cr3	; <UNPREDICTABLE>
     8fc:	4746434c 	strbmi	r4, [r6, -ip, asr #6]
     900:	41550052 	cmpmi	r5, r2, asr r0
     904:	5f355452 	svcpl	0x00355452
     908:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     90c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     910:	52425f31 	subpl	r5, r2, #49, 30	; 0xc4
     914:	49545f4b 	ldmdbmi	r4, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
     918:	495f394d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, ip, sp}^	; <UNPREDICTABLE>
     91c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     920:	4f495047 	svcmi	0x00495047
     924:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     928:	5f006570 	svcpl	0x00006570
     92c:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     930:	5f323374 	svcpl	0x00323374
     934:	50410074 	subpl	r0, r1, r4, ror r0
     938:	42484142 	submi	r4, r8, #-2147483632	; 0x80000010
     93c:	73657250 	cmnvc	r5, #80, 4
     940:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
     944:	4700656c 	strmi	r6, [r0, -ip, ror #10]
     948:	5f4f4950 	svcpl	0x004f4950
     94c:	6964654d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
     950:	535f6d75 	cmppl	pc, #7488	; 0x1d40
     954:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     958:	43435200 	movtmi	r5, #12800	; 0x3200
     95c:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     960:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     964:	6c435332 	mcrrvs	3, 3, r5, r3, cr2
     968:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
     96c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     970:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
     974:	5f374d49 	svcpl	0x00374d49
     978:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     97c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     980:	6f6c2067 	svcvs	0x006c2067
     984:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     988:	4500746e 	strmi	r7, [r0, #-1134]	; 0xfffffb92
     98c:	575f4854 			; <UNDEFINED> instruction: 0x575f4854
     990:	5f50554b 	svcpl	0x0050554b
     994:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     998:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     99c:	5f53485f 	svcpl	0x0053485f
     9a0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     9a4:	50555000 	subspl	r5, r5, r0
     9a8:	53005244 	movwpl	r5, #580	; 0x244
     9ac:	52474353 	subpl	r4, r7, #1275068417	; 0x4c000001
     9b0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     9b4:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     9b8:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     9bc:	42415349 	submi	r5, r1, #603979777	; 0x24000001
     9c0:	5300454c 	movwpl	r4, #1356	; 0x54c
     9c4:	6c614356 	stclvs	3, cr4, [r1], #-344	; 0xfffffea8
     9c8:	52495f6c 	subpl	r5, r9, #108, 30	; 0x1b0
     9cc:	41006e51 	tstmi	r0, r1, asr lr
     9d0:	52324250 	eorspl	r4, r2, #80, 4
     9d4:	00525453 	subseq	r5, r2, r3, asr r4
     9d8:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
     9dc:	43520048 	cmpmi	r2, #72	; 0x48
     9e0:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
     9e4:	616c4674 	smcvs	50276	; 0xc464
     9e8:	61745367 	cmnvs	r4, r7, ror #6
     9ec:	00737574 	rsbseq	r7, r3, r4, ror r5
     9f0:	5f434352 	svcpl	0x00434352
     9f4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     9f8:	4200736b 	andmi	r7, r0, #-1409286143	; 0xac000001
     9fc:	4c525253 	lfmmi	f5, 2, [r2], {83}	; 0x53
     a00:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     a04:	69485f4f 	stmdbvs	r8, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     a08:	535f6867 	cmppl	pc, #6750208	; 0x670000
     a0c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     a10:	43435200 	movtmi	r5, #12800	; 0x3200
     a14:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
     a18:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     a1c:	43520067 	cmpmi	r2, #103	; 0x67
     a20:	53485f43 	movtpl	r5, #36675	; 0x8f43
     a24:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
     a28:	55504600 	ldrbpl	r4, [r0, #-1536]	; 0xfffffa00
     a2c:	5152495f 	cmppl	r2, pc, asr r9
     a30:	4352006e 	cmpmi	r2, #110	; 0x6e
     a34:	64415f43 	strbvs	r5, [r1], #-3907	; 0xfffff0bd
     a38:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
     a3c:	43495348 	movtmi	r5, #37704	; 0x9348
     a40:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
     a44:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     a48:	61566e6f 	cmpvs	r6, pc, ror #28
     a4c:	0065756c 	rsbeq	r7, r5, ip, ror #10
     a50:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     a54:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     a58:	41006e51 	tstmi	r0, r1, asr lr
     a5c:	4c324250 	lfmmi	f4, 4, [r2], #-320	; 0xfffffec0
     a60:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     a64:	43435200 	movtmi	r5, #12800	; 0x3200
     a68:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     a6c:	72655031 	rsbvc	r5, r5, #49	; 0x31
     a70:	00687069 	rsbeq	r7, r8, r9, rrx
     a74:	5f434352 	svcpl	0x00434352
     a78:	43435452 	movtmi	r5, #13394	; 0x3452
     a7c:	6f434b4c 	svcvs	0x00434b4c
     a80:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     a84:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     a88:	5f53465f 	svcpl	0x0053465f
     a8c:	50554b57 	subspl	r4, r5, r7, asr fp
     a90:	5152495f 	cmppl	r2, pc, asr r9
     a94:	4352006e 	cmpmi	r2, #110	; 0x6e
     a98:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
     a9c:	52004741 	andpl	r4, r0, #17039360	; 0x1040000
     aa0:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     aa4:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
     aa8:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     aac:	45007375 	strmi	r7, [r0, #-885]	; 0xfffffc8b
     ab0:	34495458 	strbcc	r5, [r9], #-1112	; 0xfffffba8
     ab4:	5152495f 	cmppl	r2, pc, asr r9
     ab8:	5443006e 	strbpl	r0, [r3], #-110	; 0xffffff92
     abc:	54004c52 	strpl	r4, [r0], #-3154	; 0xfffff3ae
     ac0:	5f364d49 	svcpl	0x00364d49
     ac4:	5f434144 	svcpl	0x00434144
     ac8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     acc:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
     ad0:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     ad4:	50470065 	subpl	r0, r7, r5, rrx
     ad8:	535f4f49 	cmppl	pc, #292	; 0x124
     adc:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     ae0:	43324900 	teqmi	r2, #0, 18
     ae4:	56455f32 			; <UNDEFINED> instruction: 0x56455f32
     ae8:	5152495f 	cmppl	r2, pc, asr r9
     aec:	4352006e 	cmpmi	r2, #110	; 0x6e
     af0:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     af4:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     af8:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
     afc:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     b00:	00746942 	rsbseq	r6, r4, r2, asr #18
     b04:	5f434352 	svcpl	0x00434352
     b08:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     b0c:	6365536b 	cmnvs	r5, #-1409286143	; 0xac000001
     b10:	74697275 	strbtvc	r7, [r9], #-629	; 0xfffffd8b
     b14:	73795379 	cmnvc	r9, #-469762047	; 0xe4000001
     b18:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     b1c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     b20:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     b24:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     b28:	416b636f 	cmnmi	fp, pc, ror #6
     b2c:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     b30:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     b34:	74730065 	ldrbtvc	r0, [r3], #-101	; 0xffffff9b
     b38:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     b3c:	00676572 	rsbeq	r6, r7, r2, ror r5
     b40:	5f434352 	svcpl	0x00434352
     b44:	32425041 	subcc	r5, r2, #65	; 0x41
     b48:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     b4c:	42006870 	andmi	r6, r0, #112, 16	; 0x700000
     b50:	00524146 	subseq	r4, r2, r6, asr #2
     b54:	31425041 	cmpcc	r2, r1, asr #32
     b58:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     b5c:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
     b60:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     b64:	61657274 	smcvs	22308	; 0x5724
     b68:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     b6c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b70:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
     b74:	645f6576 	ldrbvs	r6, [pc], #-1398	; b7c <startup-0x1ffff484>
     b78:	73726f6f 	cmnvc	r2, #444	; 0x1bc
     b7c:	414d4400 	cmpmi	sp, r0, lsl #8
     b80:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     b84:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     b88:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     b8c:	43006e51 	movwmi	r6, #3665	; 0xe51
     b90:	5441474b 	strbpl	r4, [r1], #-1867	; 0xfffff8b5
     b94:	00524e45 	subseq	r4, r2, r5, asr #28
     b98:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     b9c:	5f58545f 	svcpl	0x0058545f
     ba0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ba4:	4c4c5000 	marmi	acc0, r5, ip
     ba8:	4e494153 	mcrmi	1, 2, r4, cr9, cr3, {2}
     bac:	4c4c5000 	marmi	acc0, r5, ip
     bb0:	51494153 	cmppl	r9, r3, asr r1
     bb4:	4c4c5000 	marmi	acc0, r5, ip
     bb8:	52494153 	subpl	r4, r9, #-1073741804	; 0xc0000014
     bbc:	43435200 	movtmi	r5, #12800	; 0x3200
     bc0:	4f434d5f 	svcmi	0x00434d5f
     bc4:	756f5331 	strbvc	r5, [pc, #-817]!	; 89b <startup-0x1ffff765>
     bc8:	00656372 	rsbeq	r6, r5, r2, ror r3
     bcc:	5f434352 	svcpl	0x00434352
     bd0:	33424841 	movtcc	r4, #10305	; 0x2841
     bd4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     bd8:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     bdc:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     be0:	5300646d 	movwpl	r6, #1133	; 0x46d
     be4:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     be8:	545f6b63 	ldrbpl	r6, [pc], #-2915	; bf0 <startup-0x1ffff410>
     bec:	00657079 	rsbeq	r7, r5, r9, ror r0
     bf0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     bf4:	6e65635f 	mcrvs	3, 3, r6, cr5, cr15, {2}
     bf8:	6c617274 	sfmvs	f7, 2, [r1], #-464	; 0xfffffe30
     bfc:	72616c5f 	rsbvc	r6, r1, #24320	; 0x5f00
     c00:	4352006d 	cmpmi	r2, #109	; 0x6d
     c04:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     c08:	646d434c 	strbtvs	r4, [sp], #-844	; 0xfffffcb4
     c0c:	43435200 	movtmi	r5, #12800	; 0x3200
     c10:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
     c14:	5270756b 	rsbspl	r7, r0, #448790528	; 0x1ac00000
     c18:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     c1c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     c20:	33424841 	movtcc	r4, #10305	; 0x2841
     c24:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     c28:	6f6f6400 	svcvs	0x006f6400
     c2c:	72450072 	subvc	r0, r5, #114	; 0x72
     c30:	53726f72 	cmnpl	r2, #456	; 0x1c8
     c34:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     c38:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
     c3c:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     c40:	61657274 	smcvs	22308	; 0x5724
     c44:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
     c48:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c4c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     c50:	00707574 	rsbseq	r7, r0, r4, ror r5
     c54:	5f434352 	svcpl	0x00434352
     c58:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
     c5c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     c60:	41006563 	tstmi	r0, r3, ror #10
     c64:	52314250 	eorspl	r4, r1, #80, 4
     c68:	00525453 	subseq	r5, r2, r3, asr r4
     c6c:	5f435452 	svcpl	0x00435452
     c70:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
     c74:	52495f6d 	subpl	r5, r9, #436	; 0x1b4
     c78:	41006e51 	tstmi	r0, r1, asr lr
     c7c:	45314250 	ldrmi	r4, [r1, #-592]!	; 0xfffffdb0
     c80:	4e00524e 	cdpmi	2, 0, cr5, cr0, cr14, {2}
     c84:	5f434956 	svcpl	0x00434956
     c88:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     c8c:	6e754600 	cdpvs	6, 7, cr4, cr5, cr0, {0}
     c90:	6f697463 	svcvs	0x00697463
     c94:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
     c98:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     c9c:	43324900 	teqmi	r2, #0, 18
     ca0:	52455f33 	subpl	r5, r5, #51, 30	; 0xcc
     ca4:	5152495f 	cmppl	r2, pc, asr r9
     ca8:	5243006e 	subpl	r0, r3, #110	; 0x6e
     cac:	495f5059 	ldmdbmi	pc, {r0, r3, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     cb0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cb4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     cb8:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
     cbc:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     cc0:	6c006e51 	stcvs	14, cr6, [r0], {81}	; 0x51
     cc4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     cc8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     ccc:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     cd0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     cd4:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     cd8:	43520074 	cmpmi	r2, #116	; 0x74
     cdc:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     ce0:	6944314f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r8, ip, sp}^
     ce4:	49540076 	ldmdbmi	r4, {r1, r2, r4, r5, r6}^
     ce8:	495f334d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     cec:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cf0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     cf4:	495f3154 	ldmdbmi	pc, {r2, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     cf8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cfc:	5f434352 	svcpl	0x00434352
     d00:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     d04:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
     d08:	74534553 	ldrbvc	r4, [r3], #-1363	; 0xfffffaad
     d0c:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0xfffffd9f
     d10:	55530070 	ldrbpl	r0, [r3, #-112]	; 0xffffff90
     d14:	53454343 	movtpl	r4, #21315	; 0x5343
     d18:	50470053 	subpl	r0, r7, r3, asr r0
     d1c:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; c00 <startup-0x1ffff400>
     d20:	0065646f 	rsbeq	r6, r5, pc, ror #8
     d24:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     d28:	3158525f 	cmpcc	r8, pc, asr r2
     d2c:	5152495f 	cmppl	r2, pc, asr r9
     d30:	4441006e 	strbmi	r0, [r1], #-110	; 0xffffff92
     d34:	52495f43 	subpl	r5, r9, #268	; 0x10c
     d38:	52006e51 	andpl	r6, r0, #1296	; 0x510
     d3c:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     d40:	6f4d4553 	svcvs	0x004d4553
     d44:	6f436564 	svcvs	0x00436564
     d48:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     d4c:	45434900 	strbmi	r4, [r3, #-2304]	; 0xfffff700
     d50:	48410052 	stmdami	r1, {r1, r4, r6}^
     d54:	504c3342 	subpl	r3, ip, r2, asr #6
     d58:	00524e45 	subseq	r4, r2, r5, asr #28
     d5c:	4f495047 	svcmi	0x00495047
     d60:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     d64:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     d68:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     d6c:	73795300 	cmnvc	r9, #0, 6
     d70:	6b636954 	blvs	18db2c8 <startup-0x1e724d38>
     d74:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     d78:	00676966 	rsbeq	r6, r7, r6, ror #18
     d7c:	552f3a43 	strpl	r3, [pc, #-2627]!	; 341 <startup-0x1ffffcbf>
     d80:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     d84:	6164412f 	cmnvs	r4, pc, lsr #2
     d88:	4f2f746d 	svcmi	0x002f746d
     d8c:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     d90:	2f657669 	svccs	0x00657669
     d94:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     d98:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     d9c:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     da0:	2f627548 	svccs	0x00627548
     da4:	32544144 	subscc	r4, r4, #68, 2
     da8:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     dac:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     db0:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     db4:	6f6b2f6d 	svcvs	0x006b2f6d
     db8:	6f442f64 	svcvs	0x00442f64
     dbc:	732f726f 			; <UNDEFINED> instruction: 0x732f726f
     dc0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     dc4:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
     dc8:	53464100 	movtpl	r4, #24832	; 0x6100
     dcc:	544f0052 	strbpl	r0, [pc], #-82	; dd4 <startup-0x1ffff22c>
     dd0:	52455059 	subpl	r5, r5, #89	; 0x59
     dd4:	4c414300 	mcrrmi	3, 0, r4, r1, cr0
     dd8:	74004249 	strvc	r4, [r0], #-585	; 0xfffffdb7
     ddc:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0xffffff93
     de0:	53460067 	movtpl	r0, #24679	; 0x6067
     de4:	495f434d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     de8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     dec:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     df0:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     df4:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     df8:	46434b43 	strbmi	r4, [r3], -r3, asr #22
     dfc:	00325247 	eorseq	r5, r2, r7, asr #4
     e00:	52534643 	subspl	r4, r3, #70254592	; 0x4300000
     e04:	43435200 	movtmi	r5, #12800	; 0x3200
     e08:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     e0c:	72655031 	rsbvc	r5, r5, #49	; 0x31
     e10:	00687069 	rsbeq	r7, r8, r9, rrx
     e14:	73657368 	cmnvc	r5, #104, 6	; 0xa0000001
     e18:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     e1c:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
     e20:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     e24:	61657274 	smcvs	22308	; 0x5724
     e28:	495f346d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     e2c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     e30:	4f495047 	svcmi	0x00495047
     e34:	6d616c5f 	stclvs	12, cr6, [r1, #-380]!	; 0xfffffe84
     e38:	4d440070 	stclmi	0, cr0, [r4, #-448]	; 0xfffffe40
     e3c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     e40:	61657274 	smcvs	22308	; 0x5724
     e44:	495f366d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     e48:	006e5152 	rsbeq	r5, lr, r2, asr r1
     e4c:	31424841 	cmpcc	r2, r1, asr #16
     e50:	00524e45 	subseq	r4, r2, r5, asr #28
     e54:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xfffff0b4
     e58:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     e5c:	6570534f 	ldrbvs	r5, [r0, #-847]!	; 0xfffffcb1
     e60:	545f6465 	ldrbpl	r6, [pc], #-1125	; e68 <startup-0x1ffff198>
     e64:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     e68:	44006665 	strmi	r6, [r0], #-1637	; 0xfffff99b
     e6c:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
     e70:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
     e74:	5f726f74 	svcpl	0x00726f74
     e78:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     e7c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     e80:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     e84:	4352006e 	cmpmi	r2, #110	; 0x6e
     e88:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     e8c:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     e90:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     e94:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     e98:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     e9c:	43324900 	teqmi	r2, #0, 18
     ea0:	56455f33 			; <UNDEFINED> instruction: 0x56455f33
     ea4:	5152495f 	cmppl	r2, pc, asr r9
     ea8:	5047006e 	subpl	r0, r7, lr, rrx
     eac:	505f4f49 	subspl	r4, pc, r9, asr #30
     eb0:	00645075 	rsbeq	r5, r4, r5, ror r0
     eb4:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     eb8:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     ebc:	48544500 	ldmdami	r4, {r8, sl, lr}^
     ec0:	5152495f 	cmppl	r2, pc, asr r9
     ec4:	4352006e 	cmpmi	r2, #110	; 0x6e
     ec8:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     ecc:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
     ed0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     ed4:	00666544 	rsbeq	r6, r6, r4, asr #10
     ed8:	52464d4d 	subpl	r4, r6, #4928	; 0x1340
     edc:	43435200 	movtmi	r5, #12800	; 0x3200
     ee0:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     ee4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     ee8:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
     eec:	73005241 	movwvc	r5, #577	; 0x241
     ef0:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     ef4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     ef8:	73617000 	cmnvc	r1, #0
     efc:	726f7773 	rsbvc	r7, pc, #30146560	; 0x1cc0000
     f00:	43520064 	cmpmi	r2, #100	; 0x64
     f04:	52495f43 	subpl	r5, r9, #268	; 0x10c
     f08:	52006e51 	andpl	r6, r0, #1296	; 0x510
     f0c:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     f10:	53490054 	movtpl	r0, #36948	; 0x9054
     f14:	44005241 	strmi	r5, [r0], #-577	; 0xfffffdbf
     f18:	5f31414d 	svcpl	0x0031414d
     f1c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     f20:	5f336d61 	svcpl	0x00336d61
     f24:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f28:	41535500 	cmpmi	r3, r0, lsl #10
     f2c:	5f325452 	svcpl	0x00325452
     f30:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f34:	74696200 	strbtvc	r6, [r9], #-512	; 0xfffffe00
     f38:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     f3c:	45007375 	strmi	r7, [r0, #-885]	; 0xfffffc8b
     f40:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
     f44:	6c700045 	ldclvs	0, cr0, [r0], #-276	; 0xfffffeec
     f48:	6f63766c 	svcvs	0x0063766c
     f4c:	43435200 	movtmi	r5, #12800	; 0x3200
     f50:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     f54:	72655031 	rsbvc	r5, r5, #49	; 0x31
     f58:	43687069 	cmnmi	r8, #105	; 0x69
     f5c:	6b636f6c 	blvs	18dcd14 <startup-0x1e7232ec>
     f60:	6f4d504c 	svcvs	0x004d504c
     f64:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     f68:	50470064 	subpl	r0, r7, r4, rrx
     f6c:	545f4f49 	ldrbpl	r4, [pc], #-3913	; f74 <startup-0x1ffff08c>
     f70:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     f74:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
     f78:	5f314d49 	svcpl	0x00314d49
     f7c:	545f5055 	ldrbpl	r5, [pc], #-85	; f84 <startup-0x1ffff07c>
     f80:	30314d49 	eorscc	r4, r1, r9, asr #26
     f84:	5152495f 	cmppl	r2, pc, asr r9
     f88:	5449006e 	strbpl	r0, [r9], #-110	; 0xffffff92
     f8c:	78525f4d 	ldmdavc	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     f90:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     f94:	50007265 	andpl	r7, r0, r5, ror #4
     f98:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     f9c:	52004e53 	andpl	r4, r0, #1328	; 0x530
     fa0:	415f4343 	cmpmi	pc, r3, asr #6
     fa4:	50314248 	eorspl	r4, r1, r8, asr #4
     fa8:	70697265 	rsbvc	r7, r9, r5, ror #4
     fac:	6f6c4368 	svcvs	0x006c4368
     fb0:	504c6b63 	subpl	r6, ip, r3, ror #22
     fb4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     fb8:	00646d43 	rsbeq	r6, r4, r3, asr #26
     fbc:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     fc0:	00525332 	subseq	r5, r2, r2, lsr r3
     fc4:	6e69616d 	powvsez	f6, f1, #5.0
     fc8:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     fcc:	5f53485f 	svcpl	0x0053485f
     fd0:	5f315045 	svcpl	0x00315045
     fd4:	5f54554f 	svcpl	0x0054554f
     fd8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     fdc:	72616c00 	rsbvc	r6, r1, #0, 24
     fe0:	6369546d 	cmnvs	r9, #1828716544	; 0x6d000000
     fe4:	4352006b 	cmpmi	r2, #107	; 0x6b
     fe8:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     fec:	4b4c4343 	blmi	1311d00 <startup-0x1ecee300>
     ff0:	00646d43 	rsbeq	r6, r4, r3, asr #26
     ff4:	5f707061 	svcpl	0x00707061
     ff8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     ffc:	444f4d00 	strbmi	r4, [pc], #-3328	; 1004 <startup-0x1fffeffc>
    1000:	4e005245 	cdpmi	2, 0, cr5, cr0, cr5, {2}
    1004:	5f434956 	svcpl	0x00434956
    1008:	50746553 	rsbspl	r6, r4, r3, asr r5
    100c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1010:	00797469 	rsbseq	r7, r9, r9, ror #8
    1014:	314e4143 	cmpcc	lr, r3, asr #2
    1018:	3158525f 	cmpcc	r8, pc, asr r2
    101c:	5152495f 	cmppl	r2, pc, asr r9
    1020:	4352006e 	cmpmi	r2, #110	; 0x6e
    1024:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1028:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    102c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1030:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1034:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
    1038:	555f6450 	ldrbpl	r6, [pc, #-1104]	; bf0 <startup-0x1ffff410>
    103c:	58450050 	stmdapl	r5, {r4, r6}^
    1040:	5f394954 	svcpl	0x00394954
    1044:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    1048:	50006e51 	andpl	r6, r0, r1, asr lr
    104c:	41534c4c 	cmpmi	r3, ip, asr #24
    1050:	47464349 	strbmi	r4, [r6, -r9, asr #6]
    1054:	43520052 	cmpmi	r2, #82	; 0x52
    1058:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    105c:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    1060:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1064:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1068:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    106c:	6f687300 	svcvs	0x00687300
    1070:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
    1074:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
    1078:	2064656e 	rsbcs	r6, r4, lr, ror #10
    107c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1080:	5f434352 	svcpl	0x00434352
    1084:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    1088:	6f435332 	svcvs	0x00435332
    108c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1090:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1094:	43435f38 	movtmi	r5, #16184	; 0x3f38
    1098:	5152495f 	cmppl	r2, pc, asr r9
    109c:	4453006e 	ldrbmi	r0, [r3], #-110	; 0xffffff92
    10a0:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    10a4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    10a8:	43415043 	movtmi	r5, #4163	; 0x1043
    10ac:	53490052 	movtpl	r0, #36946	; 0x9052
    10b0:	53005250 	movwpl	r5, #592	; 0x250
    10b4:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    10b8:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    10bc:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    10c0:	0079636e 	rsbseq	r6, r9, lr, ror #6
    10c4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    10c8:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    10cc:	50006e51 	andpl	r6, r0, r1, asr lr
    10d0:	53646e65 	cmnpl	r4, #1616	; 0x650
    10d4:	52495f56 	subpl	r5, r9, #344	; 0x158
    10d8:	74006e51 	strvc	r6, [r0], #-3665	; 0xfffff1af
    10dc:	31747365 	cmncc	r4, r5, ror #6
    10e0:	73657400 	cmnvc	r5, #0, 8
    10e4:	74003274 	strvc	r3, [r0], #-628	; 0xfffffd8c
    10e8:	33747365 	cmncc	r4, #-1811939327	; 0x94000001
    10ec:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
    10f0:	5f53485f 	svcpl	0x0053485f
    10f4:	5f315045 	svcpl	0x00315045
    10f8:	495f4e49 	ldmdbmi	pc, {r0, r3, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    10fc:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1100:	31414d44 	cmpcc	r1, r4, asr #26
    1104:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1108:	376d6165 	strbcc	r6, [sp, -r5, ror #2]!
    110c:	5152495f 	cmppl	r2, pc, asr r9
    1110:	5f5f006e 	svcpl	0x005f006e
    1114:	33746e69 	cmncc	r4, #1680	; 0x690
    1118:	00745f32 	rsbseq	r5, r4, r2, lsr pc
    111c:	5f434352 	svcpl	0x00434352
    1120:	434d4954 	movtmi	r4, #55636	; 0xd954
    1124:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
    1128:	61637365 	cmnvs	r3, r5, ror #6
    112c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1130:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
    1134:	65727000 	ldrbvs	r7, [r2, #-0]!
    1138:	52006373 	andpl	r6, r0, #-872415231	; 0xcc000001
    113c:	415f4343 	cmpmi	pc, r3, asr #6
    1140:	50324248 	eorspl	r4, r2, r8, asr #4
    1144:	70697265 	rsbvc	r7, r9, r5, ror #4
    1148:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    114c:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    1150:	43520064 	cmpmi	r2, #100	; 0x64
    1154:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1158:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    115c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1160:	33424841 	movtcc	r4, #10305	; 0x2841
    1164:	00524e45 	subseq	r4, r2, r5, asr #28
    1168:	5f434352 	svcpl	0x00434352
    116c:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1170:	6f434b4c 	svcvs	0x00434b4c
    1174:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1178:	414d4400 	cmpmi	sp, r0, lsl #8
    117c:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
    1180:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1184:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
    1188:	47006e51 	smlsdmi	r0, r1, lr, r6
    118c:	5f4f4950 	svcpl	0x004f4950
    1190:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    1194:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
    1198:	52006465 	andpl	r6, r0, #1694498816	; 0x65000000
    119c:	505f4343 	subspl	r4, pc, r3, asr #6
    11a0:	6f434c4c 	svcvs	0x00434c4c
    11a4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    11a8:	6c6c7000 	stclvs	0, cr7, [ip], #-0
    11ac:	6970006d 	ldmdbvs	r0!, {r0, r2, r3, r5, r6}^
    11b0:	736f706e 	cmnvc	pc, #110	; 0x6e
    11b4:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    11b8:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    11bc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    11c0:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    11c4:	754f6461 	strbvc	r6, [pc, #-1121]	; d6b <startup-0x1ffff295>
    11c8:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    11cc:	61746144 	cmnvs	r4, r4, asr #2
    11d0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    11d4:	46415f4f 	strbmi	r5, [r1], -pc, asr #30
    11d8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    11dc:	50470070 	subpl	r0, r7, r0, ror r0
    11e0:	535f4f49 	cmppl	pc, #292	; 0x124
    11e4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    11e8:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    11ec:	69420074 	stmdbvs	r2, {r2, r4, r5, r6}^
    11f0:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    11f4:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    11f8:	5345525f 	movtpl	r5, #21087	; 0x525f
    11fc:	47005445 	strmi	r5, [r0, -r5, asr #8]
    1200:	5f4f4950 	svcpl	0x004f4950
    1204:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    1208:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
    120c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1210:	65535f4f 	ldrbvs	r5, [r3, #-3919]	; 0xfffff0b1
    1214:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
    1218:	50470073 	subpl	r0, r7, r3, ror r0
    121c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1220:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1224:	4f495047 	svcmi	0x00495047
    1228:	7365525f 	cmnvc	r5, #-268435451	; 0xf0000005
    122c:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1230:	43007374 	movwmi	r7, #884	; 0x374
    1234:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1238:	2f737265 	svccs	0x00737265
    123c:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    1240:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    1244:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    1248:	442f6576 	strtmi	r6, [pc], #-1398	; 1250 <startup-0x1fffedb0>
    124c:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    1250:	2f746e65 	svccs	0x00746e65
    1254:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    1258:	442f6275 	strtmi	r6, [pc], #-629	; 1260 <startup-0x1fffeda0>
    125c:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    1260:	614c2d30 	cmpvs	ip, r0, lsr sp
    1264:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1268:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    126c:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 1274 <startup-0x1fffed8c>
    1270:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1274:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1278:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    127c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1280:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1284:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1288:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    128c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    1290:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1294:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1298:	2f726576 	svccs	0x00726576
    129c:	2f637273 	svccs	0x00637273
    12a0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    12a4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    12a8:	70675f78 	rsbvc	r5, r7, r8, ror pc
    12ac:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    12b0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    12b4:	65445f4f 	strbvs	r5, [r4, #-3919]	; 0xfffff0b1
    12b8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    12bc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    12c0:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    12c4:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    12c8:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    12cc:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    12d0:	47007469 	strmi	r7, [r0, -r9, ror #8]
    12d4:	5f4f4950 	svcpl	0x004f4950
    12d8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    12dc:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    12e0:	50007463 	andpl	r7, r0, r3, ror #8
    12e4:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
    12e8:	47006c61 	strmi	r6, [r0, -r1, ror #24]
    12ec:	5f4f4950 	svcpl	0x004f4950
    12f0:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
    12f4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    12f8:	50470065 	subpl	r0, r7, r5, rrx
    12fc:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1300:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    1304:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    1308:	61746144 	cmnvs	r4, r4, asr #2
    130c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1310:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1314:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
    1318:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    131c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1320:	41746942 	cmnmi	r4, r2, asr #18
    1324:	6f697463 	svcvs	0x00697463
    1328:	7563006e 	strbvc	r0, [r3, #-110]!	; 0xffffff92
    132c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1330:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
    1334:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1338:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    133c:	00657469 	rsbeq	r7, r5, r9, ror #8
    1340:	4f495047 	svcmi	0x00495047
    1344:	50470078 	subpl	r0, r7, r8, ror r0
    1348:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 1350 <startup-0x1fffecb0>
    134c:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
    1350:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
    1354:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1358:	325f706d 	subscc	r7, pc, #109	; 0x6d
    135c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1360:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1364:	4346416e 	movtmi	r4, #24942	; 0x616e
    1368:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    136c:	50470067 	subpl	r0, r7, r7, rrx
    1370:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1374:	4f646165 	svcmi	0x00646165
    1378:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    137c:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1380:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
    1384:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1388:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    138c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1390:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    1394:	564e0066 	strbpl	r0, [lr], -r6, rrx
    1398:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    139c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    13a0:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    13a4:	646d436c 	strbtvs	r4, [sp], #-876	; 0xfffffc94
    13a8:	73795300 	cmnvc	r9, #0, 6
    13ac:	6b636954 	blvs	18db904 <startup-0x1e7246fc>
    13b0:	4b4c435f 	blmi	1312134 <startup-0x1ecedecc>
    13b4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    13b8:	4e006563 	cfsh32mi	mvfx6, mvfx0, #51
    13bc:	5f434956 	svcpl	0x00434956
    13c0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    13c4:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    13c8:	4e007463 	cdpmi	4, 0, cr7, cr0, cr3, {3}
    13cc:	5f434956 	svcpl	0x00434956
    13d0:	6f697250 	svcvs	0x00697250
    13d4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    13d8:	756f7247 	strbvc	r7, [pc, #-583]!	; 1199 <startup-0x1fffee67>
    13dc:	564e0070 			; <UNDEFINED> instruction: 0x564e0070
    13e0:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    13e4:	0074696e 	rsbseq	r6, r4, lr, ror #18
    13e8:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    13ec:	4f006572 	svcmi	0x00006572
    13f0:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    13f4:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
    13f8:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    13fc:	65567465 	ldrbvs	r7, [r6, #-1125]	; 0xfffffb9b
    1400:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    1404:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    1408:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    140c:	62757370 	rsbsvs	r7, r5, #112, 6	; 0xc0000001
    1410:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1414:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1418:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    141c:	6f43504c 	svcvs	0x0043504c
    1420:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1424:	73795300 	cmnvc	r9, #0, 6
    1428:	6b636954 	blvs	18db980 <startup-0x1e724680>
    142c:	4b4c435f 	blmi	13121b0 <startup-0x1ecede50>
    1430:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1434:	6f436563 	svcvs	0x00436563
    1438:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    143c:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    1440:	6f697270 	svcvs	0x00697270
    1444:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1448:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    144c:	52495f43 	subpl	r5, r9, #268	; 0x10c
    1450:	61684351 	cmnvs	r8, r1, asr r3
    1454:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1458:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    145c:	52495f43 	subpl	r5, r9, #268	; 0x10c
    1460:	61684351 	cmnvs	r8, r1, asr r3
    1464:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1468:	50627553 	rsbpl	r7, r2, r3, asr r5
    146c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1470:	00797469 	rsbseq	r7, r9, r9, ror #8
    1474:	4349564e 	movtmi	r5, #38478	; 0x964e
    1478:	5152495f 	cmppl	r2, pc, asr r9
    147c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1480:	506c656e 	rsbpl	r6, ip, lr, ror #10
    1484:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
    1488:	6f697470 	svcvs	0x00697470
    148c:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
    1490:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    1494:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    1498:	565f4349 	ldrbpl	r4, [pc], -r9, asr #6
    149c:	54746365 	ldrbtpl	r6, [r4], #-869	; 0xfffffc9b
    14a0:	43006261 	movwmi	r6, #609	; 0x261
    14a4:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    14a8:	2f737265 	svccs	0x00737265
    14ac:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    14b0:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    14b4:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    14b8:	442f6576 	strtmi	r6, [pc], #-1398	; 14c0 <startup-0x1fffeb40>
    14bc:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    14c0:	2f746e65 	svccs	0x00746e65
    14c4:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    14c8:	442f6275 	strtmi	r6, [pc], #-629	; 14d0 <startup-0x1fffeb30>
    14cc:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    14d0:	614c2d30 	cmpvs	ip, r0, lsr sp
    14d4:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    14d8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    14dc:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 14e4 <startup-0x1fffeb1c>
    14e0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    14e4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    14e8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    14ec:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    14f0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    14f4:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    14f8:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    14fc:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    1500:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1504:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1508:	2f726576 	svccs	0x00726576
    150c:	2f637273 	svccs	0x00637273
    1510:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
    1514:	4c00632e 	stcmi	3, cr6, [r0], {46}	; 0x2e
    1518:	6f50776f 	svcvs	0x0050776f
    151c:	4d726577 	cfldr64mi	mvdx6, [r2, #-476]!	; 0xfffffe24
    1520:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1524:	4349564e 	movtmi	r5, #38478	; 0x964e
    1528:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    152c:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    1530:	6f724779 	svcvs	0x00724779
    1534:	6f437075 	svcvs	0x00437075
    1538:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    153c:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    1540:	50726566 	rsbspl	r6, r2, r6, ror #10
    1544:	43007475 	movwmi	r7, #1141	; 0x475
    1548:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    154c:	2f737265 	svccs	0x00737265
    1550:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    1554:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    1558:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    155c:	442f6576 	strtmi	r6, [pc], #-1398	; 1564 <startup-0x1fffea9c>
    1560:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    1564:	2f746e65 	svccs	0x00746e65
    1568:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    156c:	442f6275 	strtmi	r6, [pc], #-629	; 1574 <startup-0x1fffea8c>
    1570:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    1574:	614c2d30 	cmpvs	ip, r0, lsr sp
    1578:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    157c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1580:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 1588 <startup-0x1fffea78>
    1584:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1588:	6675622f 	ldrbtvs	r6, [r5], -pc, lsr #4
    158c:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
    1590:	49460063 	stmdbmi	r6, {r0, r1, r5, r6}^
    1594:	64004f46 	strvs	r4, [r0], #-3910	; 0xfffff0ba
    1598:	00747365 	rsbseq	r7, r4, r5, ror #6
    159c:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    15a0:	656c6500 	strbvs	r6, [ip, #-1280]!	; 0xfffffb00
    15a4:	7562006d 	strbvc	r0, [r2, #-109]!	; 0xffffff93
    15a8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    15ac:	00746547 	rsbseq	r6, r4, r7, asr #10
    15b0:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    15b4:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
    15b8:	62007469 	andvs	r7, r0, #1761607680	; 0x69000000
    15bc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    15c0:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
    15c4:	65676574 	strbvs	r6, [r7, #-1396]!	; 0xfffffa8c
    15c8:	76696472 			; <UNDEFINED> instruction: 0x76696472
    15cc:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    15d0:	41535500 	cmpmi	r3, r0, lsl #10
    15d4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    15d8:	00414850 	subeq	r4, r1, r0, asr r8
    15dc:	52505447 	subspl	r5, r0, #1191182336	; 0x47000000
    15e0:	41535500 	cmpmi	r3, r0, lsl #10
    15e4:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    15e8:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    15ec:	57726576 			; <UNDEFINED> instruction: 0x57726576
    15f0:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
    15f4:	646d4370 	strbtvs	r4, [sp], #-880	; 0xfffffc90
    15f8:	41535500 	cmpmi	r3, r0, lsl #10
    15fc:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    1600:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    1604:	61637365 	cmnvs	r3, r5, ror #6
    1608:	0072656c 	rsbseq	r6, r2, ip, ror #10
    160c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1610:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    1614:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    1618:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    161c:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    1620:	61657242 	cmnvs	r5, r2, asr #4
    1624:	7465446b 	strbtvc	r4, [r5], #-1131	; 0xfffffb95
    1628:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    162c:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    1630:	53550068 	cmppl	r5, #104	; 0x68
    1634:	5f545241 	svcpl	0x00545241
    1638:	42656e4f 	rsbmi	r6, r5, #1264	; 0x4f0
    163c:	654d7469 	strbvs	r7, [sp, #-1129]	; 0xfffffb97
    1640:	646f6874 	strbtvs	r6, [pc], #-2164	; 1648 <startup-0x1fffe9b8>
    1644:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1648:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    164c:	79545f54 	ldmdbvc	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    1650:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    1654:	53550066 	cmppl	r5, #102	; 0x66
    1658:	5f545241 	svcpl	0x00545241
    165c:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
    1660:	73746942 	cmnvc	r4, #1081344	; 0x108000
    1664:	41535500 	cmpmi	r3, r0, lsl #10
    1668:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    166c:	6b636f6c 	blvs	18dd424 <startup-0x1e722bdc>
    1670:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1674:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1678:	00666544 	rsbeq	r6, r6, r4, asr #10
    167c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1680:	6d435f54 	stclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    1684:	53550064 	cmppl	r5, #100	; 0x64
    1688:	5f545241 	svcpl	0x00545241
    168c:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    1690:	61746144 	cmnvs	r4, r4, asr #2
    1694:	41535500 	cmpmi	r3, r0, lsl #10
    1698:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    169c:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
    16a0:	53550070 	cmppl	r5, #112	; 0x70
    16a4:	5f545241 	svcpl	0x00545241
    16a8:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xfffff0a9
    16ac:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    16b0:	55006874 	strpl	r6, [r0, #-2164]	; 0xfffff78c
    16b4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    16b8:	414d445f 	cmpmi	sp, pc, asr r4
    16bc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    16c0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    16c4:	614c5f54 	cmpvs	ip, r4, asr pc
    16c8:	69427473 	stmdbvs	r2, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    16cc:	53550074 	cmppl	r5, #116	; 0x74
    16d0:	5f545241 	svcpl	0x00545241
    16d4:	64756142 	ldrbtvs	r6, [r5], #-322	; 0xfffffebe
    16d8:	65746152 	ldrbvs	r6, [r4, #-338]!	; 0xfffffeae
    16dc:	41535500 	cmpmi	r3, r0, lsl #10
    16e0:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    16e4:	4d414472 	cfstrdmi	mvd4, [r1, #-456]	; 0xfffffe38
    16e8:	0065646f 	rsbeq	r6, r5, pc, ror #8
    16ec:	63627061 	cmnvs	r2, #97	; 0x61
    16f0:	6b636f6c 	blvs	18dd4a8 <startup-0x1e722b58>
    16f4:	41535500 	cmpmi	r3, r0, lsl #10
    16f8:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    16fc:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1700:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
    1704:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1708:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    170c:	41535500 	cmpmi	r3, r0, lsl #10
    1710:	475f5452 			; <UNDEFINED> instruction: 0x475f5452
    1714:	64726175 	ldrbtvs	r6, [r2], #-373	; 0xfffffe8b
    1718:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    171c:	41535500 	cmpmi	r3, r0, lsl #10
    1720:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    1724:	72424e49 	subvc	r4, r2, #1168	; 0x490
    1728:	446b6165 	strbtmi	r6, [fp], #-357	; 0xfffffe9b
    172c:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
    1730:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    1734:	43687467 	cmnmi	r8, #1728053248	; 0x67000000
    1738:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    173c:	53550067 	cmppl	r5, #103	; 0x67
    1740:	5f545241 	svcpl	0x00545241
    1744:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    1748:	41535500 	cmpmi	r3, r0, lsl #10
    174c:	445f5452 	ldrbmi	r5, [pc], #-1106	; 1754 <startup-0x1fffe8ac>
    1750:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1754:	53550074 	cmppl	r5, #116	; 0x74
    1758:	5f545241 	svcpl	0x00545241
    175c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1760:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    1764:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1768:	00746375 	rsbseq	r6, r4, r5, ror r3
    176c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1770:	61505f54 	cmpvs	r0, r4, asr pc
    1774:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1778:	41535500 	cmpmi	r3, r0, lsl #10
    177c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1780:	6b636f6c 	blvs	18dd538 <startup-0x1e722ac8>
    1784:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1788:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    178c:	75007469 	strvc	r7, [r0, #-1129]	; 0xfffffb97
    1790:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
    1794:	73616278 	cmnvc	r1, #120, 4	; 0x80000007
    1798:	53550065 	cmppl	r5, #101	; 0x65
    179c:	5f545241 	svcpl	0x00545241
    17a0:	61656c43 	cmnvs	r5, r3, asr #24
    17a4:	616c4672 	smcvs	50274	; 0xc462
    17a8:	53550067 	cmppl	r5, #103	; 0x67
    17ac:	5f545241 	svcpl	0x00545241
    17b0:	41746553 	cmnmi	r4, r3, asr r5
    17b4:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    17b8:	55007373 	strpl	r7, [r0, #-883]	; 0xfffffc8d
    17bc:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    17c0:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    17c4:	72617547 	rsbvc	r7, r1, #297795584	; 0x11c00000
    17c8:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    17cc:	53550065 	cmppl	r5, #101	; 0x65
    17d0:	5f545241 	svcpl	0x00545241
    17d4:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    17d8:	61657242 	cmnvs	r5, r2, asr #4
    17dc:	5355006b 	cmppl	r5, #107	; 0x6b
    17e0:	5f545241 	svcpl	0x00545241
    17e4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    17e8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    17ec:	00666544 	rsbeq	r6, r6, r4, asr #10
    17f0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    17f4:	54495f54 	strbpl	r5, [r9], #-3924	; 0xfffff0ac
    17f8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    17fc:	55006769 	strpl	r6, [r0, #-1897]	; 0xfffff897
    1800:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1804:	414d445f 	cmpmi	sp, pc, asr r4
    1808:	00716552 	rsbseq	r6, r1, r2, asr r5
    180c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1810:	55007854 	strpl	r7, [r0, #-2132]	; 0xfffff7ac
    1814:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1818:	7261485f 	rsbvc	r4, r1, #6225920	; 0x5f0000
    181c:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
    1820:	6f6c4665 	svcvs	0x006c4665
    1824:	6e6f4377 	mcrvs	3, 3, r4, cr15, cr7, {3}
    1828:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1660 <startup-0x1fffe9a0>
    182c:	41535500 	cmpmi	r3, r0, lsl #10
    1830:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    1834:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1838:	64726143 	ldrbtvs	r6, [r2], #-323	; 0xfffffebd
    183c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1840:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1844:	6f4d5f54 	svcvs	0x004d5f54
    1848:	55006564 	strpl	r6, [r0, #-1380]	; 0xfffffa9c
    184c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1850:	6464415f 	strbtvs	r4, [r4], #-351	; 0xfffffea1
    1854:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1858:	74696200 	strbtvc	r6, [r9], #-512	; 0xfffffe00
    185c:	00736f70 	rsbseq	r6, r3, r0, ror pc
    1860:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1864:	764f5f54 			; <UNDEFINED> instruction: 0x764f5f54
    1868:	61537265 	cmpvs	r3, r5, ror #4
    186c:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    1870:	4338676e 	teqmi	r8, #28835840	; 0x1b80000
    1874:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    1878:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    187c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1880:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
    1884:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1888:	41535500 	cmpmi	r3, r0, lsl #10
    188c:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    1890:	6d434e49 	stclvs	14, cr4, [r3, #-292]	; 0xfffffedc
    1894:	53550064 	cmppl	r5, #100	; 0x64
    1898:	5f545241 	svcpl	0x00545241
    189c:	41447249 	cmpmi	r4, r9, asr #4
    18a0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    18a4:	55006769 	strpl	r6, [r0, #-1897]	; 0xfffff897
    18a8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    18ac:	6f6c435f 	svcvs	0x006c435f
    18b0:	55006b63 	strpl	r6, [r0, #-2915]	; 0xfffff49d
    18b4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    18b8:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0xfffff6a1
    18bc:	646d4341 	strbtvs	r4, [sp], #-833	; 0xfffffcbf
    18c0:	61726600 	cmnvs	r2, r0, lsl #12
    18c4:	6f697463 	svcvs	0x00697463
    18c8:	646c616e 	strbtvs	r6, [ip], #-366	; 0xfffffe92
    18cc:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
    18d0:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
    18d4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    18d8:	616d535f 	cmnvs	sp, pc, asr r3
    18dc:	61437472 	hvcvs	14146	; 0x3742
    18e0:	414e6472 	hvcmi	58946	; 0xe642
    18e4:	6d434b43 	vstrvs	d20, [r3, #-268]	; 0xfffffef4
    18e8:	53550064 	cmppl	r5, #100	; 0x64
    18ec:	5f545241 	svcpl	0x00545241
    18f0:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    18f4:	5367616c 	cmnpl	r7, #108, 2
    18f8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    18fc:	53550073 	cmppl	r5, #115	; 0x73
    1900:	5f545241 	svcpl	0x00545241
    1904:	55005449 	strpl	r5, [r0, #-1097]	; 0xfffffbb7
    1908:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    190c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1910:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1914:	00746375 	rsbseq	r6, r4, r5, ror r3
    1918:	5f434352 	svcpl	0x00434352
    191c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1920:	7453736b 	ldrbvc	r7, [r3], #-875	; 0xfffffc95
    1924:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1928:	41535500 	cmpmi	r3, r0, lsl #10
    192c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1930:	6b636f6c 	blvs	18dd6e8 <startup-0x1e722918>
    1934:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1938:	41535500 	cmpmi	r3, r0, lsl #10
    193c:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    1940:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
    1944:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    1948:	00676966 	rsbeq	r6, r7, r6, ror #18
    194c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1950:	61485f54 	cmpvs	r8, r4, asr pc
    1954:	7544666c 	strbvc	r6, [r4, #-1644]	; 0xfffff994
    1958:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    195c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1960:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1964:	74535f54 	ldrbvc	r5, [r3], #-3924	; 0xfffff0ac
    1968:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    196c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1970:	41535500 	cmpmi	r3, r0, lsl #10
    1974:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
    1978:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    197c:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1980:	41535500 	cmpmi	r3, r0, lsl #10
    1984:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1988:	004c4f50 	subeq	r4, ip, r0, asr pc
    198c:	616d7469 	cmnvs	sp, r9, ror #8
    1990:	43006b73 	movwmi	r6, #2931	; 0xb73
    1994:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1998:	2f737265 	svccs	0x00737265
    199c:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    19a0:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    19a4:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    19a8:	442f6576 	strtmi	r6, [pc], #-1398	; 19b0 <startup-0x1fffe650>
    19ac:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    19b0:	2f746e65 	svccs	0x00746e65
    19b4:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    19b8:	442f6275 	strtmi	r6, [pc], #-629	; 19c0 <startup-0x1fffe640>
    19bc:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    19c0:	614c2d30 	cmpvs	ip, r0, lsr sp
    19c4:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    19c8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    19cc:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 19d4 <startup-0x1fffe62c>
    19d0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    19d4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    19d8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    19dc:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    19e0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    19e4:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    19e8:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    19ec:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    19f0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    19f4:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    19f8:	2f726576 	svccs	0x00726576
    19fc:	2f637273 	svccs	0x00637273
    1a00:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1a04:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1a08:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
    1a0c:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    1a10:	53550063 	cmppl	r5, #99	; 0x63
    1a14:	5f545241 	svcpl	0x00545241
    1a18:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1a1c:	44657669 	strbtmi	r7, [r5], #-1641	; 0xfffff997
    1a20:	00617461 	rsbeq	r7, r1, r1, ror #8
    1a24:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    1a28:	67657274 			; <UNDEFINED> instruction: 0x67657274
    1a2c:	42787400 	rsbsmi	r7, r8, #0, 8
    1a30:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1a34:	5f5f0072 	svcpl	0x005f0072
    1a38:	61636f6c 	cmnvs	r3, ip, ror #30
    1a3c:	745f656c 	ldrbvc	r6, [pc], #-1388	; 1a44 <startup-0x1fffe5bc>
    1a40:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    1a44:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1a48:	735f5f00 	cmpvc	pc, #0, 30
    1a4c:	3a430066 	bcc	10c1bec <startup-0x1ef3e414>
    1a50:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    1a54:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
    1a58:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
    1a5c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
    1a60:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1a64:	6f442f65 	svcvs	0x00442f65
    1a68:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
    1a6c:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
    1a70:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
    1a74:	41442f62 	cmpmi	r4, r2, ror #30
    1a78:	30393254 	eorscc	r3, r9, r4, asr r2
    1a7c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
    1a80:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
    1a84:	2f6d6574 	svccs	0x006d6574
    1a88:	2f646f6b 	svccs	0x00646f6b
    1a8c:	2f62696c 	svccs	0x0062696c
    1a90:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1a94:	00632e54 	rsbeq	r2, r3, r4, asr lr
    1a98:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
    1a9c:	756e6165 	strbvc	r6, [lr, #-357]!	; 0xfffffe9b
    1aa0:	775f0070 			; <UNDEFINED> instruction: 0x775f0070
    1aa4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1aa8:	73615f00 	cmnvc	r1, #0, 30
    1aac:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
    1ab0:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
    1ab4:	635f0066 	cmpvs	pc, #102	; 0x66
    1ab8:	656c7476 	strbvs	r7, [ip, #-1142]!	; 0xfffffb8a
    1abc:	755f006e 	ldrbvc	r0, [pc, #-110]	; 1a56 <startup-0x1fffe5aa>
    1ac0:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
    1ac4:	5f5f0064 	svcpl	0x005f0064
    1ac8:	5f006d74 	svcpl	0x00006d74
    1acc:	72736377 	rsbsvc	r6, r3, #-603979775	; 0xdc000001
    1ad0:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
    1ad4:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
    1ad8:	00657461 	rsbeq	r7, r5, r1, ror #8
    1adc:	75626e5f 	strbvc	r6, [r2, #-3679]!	; 0xfffff1a1
    1ae0:	5f5f0066 	svcpl	0x005f0066
    1ae4:	735f6d74 	cmpvc	pc, #116, 26	; 0x1d00
    1ae8:	5f006365 	svcpl	0x00006365
    1aec:	6134366c 	teqvs	r4, ip, ror #12
    1af0:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
    1af4:	756d5f00 	strbvc	r5, [sp, #-3840]!	; 0xfffff100
    1af8:	4e00746c 	cdpmi	4, 0, cr7, cr0, cr12, {3}
    1afc:	5f434956 	svcpl	0x00434956
    1b00:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1b04:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1b08:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    1b0c:	5f5f0065 	svcpl	0x005f0065
    1b10:	00686377 	rsbeq	r6, r8, r7, ror r3
    1b14:	6c69665f 	stclvs	6, cr6, [r9], #-380	; 0xfffffe84
    1b18:	6f5f0065 	svcvs	0x005f0065
    1b1c:	78655f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1b20:	615f7469 	cmpvs	pc, r9, ror #8
    1b24:	00736772 	rsbseq	r6, r3, r2, ror r7
    1b28:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
    1b2c:	5f6e656c 	svcpl	0x006e656c
    1b30:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1b34:	725f0065 	subsvc	r0, pc, #101	; 0x65
    1b38:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    1b3c:	006b5f74 	rsbeq	r5, fp, r4, ror pc
    1b40:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
    1b44:	5f007374 	svcpl	0x00007374
    1b48:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    1b4c:	6f6c5f00 	svcvs	0x006c5f00
    1b50:	746c6163 	strbtvc	r6, [ip], #-355	; 0xfffffe9d
    1b54:	5f656d69 	svcpl	0x00656d69
    1b58:	00667562 	rsbeq	r7, r6, r2, ror #10
    1b5c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    1b60:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
    1b64:	41535500 	cmpmi	r3, r0, lsl #10
    1b68:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1b6c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1b70:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1b74:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    1b78:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
    1b7c:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
    1b80:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
    1b84:	53550064 	cmppl	r5, #100	; 0x64
    1b88:	50545241 	subspl	r5, r4, r1, asr #4
    1b8c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    1b90:	006d754e 	rsbeq	r7, sp, lr, asr #10
    1b94:	736e755f 	cmnvc	lr, #398458880	; 0x17c00000
    1b98:	69636570 	stmdbvs	r3!, {r4, r5, r6, r8, sl, sp, lr}^
    1b9c:	64656966 	strbtvs	r6, [r5], #-2406	; 0xfffff69a
    1ba0:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    1ba4:	5f656c61 	svcpl	0x00656c61
    1ba8:	6f666e69 	svcvs	0x00666e69
    1bac:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
    1bb0:	00746e65 	rsbseq	r6, r4, r5, ror #28
    1bb4:	6f6c675f 	svcvs	0x006c675f
    1bb8:	5f6c6162 	svcpl	0x006c6162
    1bbc:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xfffff297
    1bc0:	705f6572 	subsvc	r6, pc, r2, ror r5	; <UNPREDICTABLE>
    1bc4:	5f007274 	svcpl	0x00007274
    1bc8:	00736e66 	rsbseq	r6, r3, r6, ror #28
    1bcc:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    1bd0:	64006e69 	strvs	r6, [r0], #-3689	; 0xfffff197
    1bd4:	74696769 	strbtvc	r6, [r9], #-1897	; 0xfffff897
    1bd8:	00727241 	rsbseq	r7, r2, r1, asr #4
    1bdc:	6f6f635f 	svcvs	0x006f635f
    1be0:	0065696b 	rsbeq	r6, r5, fp, ror #18
    1be4:	7364775f 	cmnvc	r4, #24903680	; 0x17c0000
    1be8:	6c5f5f00 	mrrcvs	15, 0, r5, pc, cr0	; <UNPREDICTABLE>
    1bec:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1bf0:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    1bf4:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
    1bf8:	635f0063 	cmpvs	pc, #99	; 0x63
    1bfc:	75627476 	strbvc	r7, [r2, #-1142]!	; 0xfffffb8a
    1c00:	78720066 	ldmdavc	r2!, {r1, r2, r5, r6}^
    1c04:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1c08:	5f007265 	svcpl	0x00007265
    1c0c:	00733570 	rsbseq	r3, r3, r0, ror r5
    1c10:	46735f5f 	uhsaxmi	r5, r3, pc	; <UNPREDICTABLE>
    1c14:	00454c49 	subeq	r4, r5, r9, asr #24
    1c18:	64735f5f 	ldrbtvs	r5, [r3], #-3935	; 0xfffff0a1
    1c1c:	6e696469 	cdpvs	4, 6, cr6, cr9, cr9, {3}
    1c20:	5f007469 	svcpl	0x00007469
    1c24:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    1c28:	55003273 	strpl	r3, [r0, #-627]	; 0xfffffd8d
    1c2c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1c30:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1c34:	5f006769 	svcpl	0x00006769
    1c38:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    1c3c:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
    1c40:	5f006675 	svcpl	0x00006675
    1c44:	69676942 	stmdbvs	r7!, {r1, r6, r8, fp, sp, lr}^
    1c48:	5f00746e 	svcpl	0x0000746e
    1c4c:	7778616d 	ldrbvc	r6, [r8, -sp, ror #2]!
    1c50:	5f007364 	svcpl	0x00007364
    1c54:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    1c58:	00307469 	eorseq	r7, r0, r9, ror #8
    1c5c:	656d655f 	strbvs	r6, [sp, #-1375]!	; 0xfffffaa1
    1c60:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
    1c64:	5f007963 	svcpl	0x00007963
    1c68:	626f696e 	rsbvs	r6, pc, #1802240	; 0x1b8000
    1c6c:	53550073 	cmppl	r5, #115	; 0x73
    1c70:	31545241 	cmpcc	r4, r1, asr #4
    1c74:	5152495f 	cmppl	r2, pc, asr r9
    1c78:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1c7c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1c80:	67735f5f 			; <UNDEFINED> instruction: 0x67735f5f
    1c84:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1c88:	616d6e5f 	cmnvs	sp, pc, asr lr
    1c8c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    1c90:	756f6400 	strbvc	r6, [pc, #-1024]!	; 1898 <startup-0x1fffe768>
    1c94:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1c98:	6d61675f 	stclvs	7, cr6, [r1, #-380]!	; 0xfffffe84
    1c9c:	735f616d 	cmpvc	pc, #1073741851	; 0x4000001b
    1ca0:	676e6769 	strbvs	r6, [lr, -r9, ror #14]!
    1ca4:	55006d61 	strpl	r6, [r0, #-3425]	; 0xfffff29f
    1ca8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1cac:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
    1cb0:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
    1cb4:	6c656572 	cfstr64vs	mvdx6, [r5], #-456	; 0xfffffe38
    1cb8:	00747369 	rsbseq	r7, r4, r9, ror #6
    1cbc:	626f695f 	rsbvs	r6, pc, #1556480	; 0x17c000
    1cc0:	675f0073 			; <UNDEFINED> instruction: 0x675f0073
    1cc4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1cc8:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    1ccc:	6c66006e 	stclvs	0, cr0, [r6], #-440	; 0xfffffe48
    1cd0:	0074616f 	rsbseq	r6, r4, pc, ror #2
    1cd4:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
    1cd8:	75427852 	strbvc	r7, [r2, #-2130]	; 0xfffff7ae
    1cdc:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1ce0:	5f685f00 	svcpl	0x00685f00
    1ce4:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
    1ce8:	775f006f 	ldrbvc	r0, [pc, -pc, rrx]
    1cec:	6f747263 	svcvs	0x00747263
    1cf0:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
    1cf4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1cf8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 1d00 <startup-0x1fffe300>
    1cfc:	646d5f6d 	strbtvs	r5, [sp], #-3949	; 0xfffff093
    1d00:	5f007961 	svcpl	0x00007961
    1d04:	0077656e 	rsbseq	r6, r7, lr, ror #10
    1d08:	7562755f 	strbvc	r7, [r2, #-1375]!	; 0xfffffaa1
    1d0c:	735f0066 	cmpvc	pc, #102	; 0x66
    1d10:	72656474 	rsbvc	r6, r5, #116, 8	; 0x74000000
    1d14:	775f0072 			; <UNDEFINED> instruction: 0x775f0072
    1d18:	6d6f7463 	cfstrdvs	mvd7, [pc, #-396]!	; 1b94 <startup-0x1fffe46c>
    1d1c:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
    1d20:	00657461 	rsbeq	r7, r5, r1, ror #8
    1d24:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
    1d28:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1d2c:	61725f00 	cmnvs	r2, r0, lsl #30
    1d30:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
    1d34:	00747865 	rsbseq	r7, r4, r5, ror #16
    1d38:	616c665f 	cmnvs	ip, pc, asr r6
    1d3c:	5f007367 	svcpl	0x00007367
    1d40:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    1d44:	5f007469 	svcpl	0x00007469
    1d48:	756f635f 	strbvc	r6, [pc, #-863]!	; 19f1 <startup-0x1fffe60f>
    1d4c:	5500746e 	strpl	r7, [r0, #-1134]	; 0xfffffb92
    1d50:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1d54:	00746547 	rsbseq	r6, r4, r7, asr #10
    1d58:	6f6c635f 	svcvs	0x006c635f
    1d5c:	5f006573 	svcpl	0x00006573
    1d60:	5f6d745f 	svcpl	0x006d745f
    1d64:	79616479 	stmdbvc	r1!, {r0, r3, r4, r5, r6, sl, sp, lr}^
    1d68:	61657200 	cmnvs	r5, r0, lsl #4
    1d6c:	006b4f64 	rsbeq	r4, fp, r4, ror #30
    1d70:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
    1d74:	735f0064 	cmpvc	pc, #100	; 0x64
    1d78:	006b6565 	rsbeq	r6, fp, r5, ror #10
    1d7c:	6f70665f 	svcvs	0x0070665f
    1d80:	00745f73 	rsbseq	r5, r4, r3, ror pc
    1d84:	63775f5f 	cmnvs	r7, #380	; 0x17c
    1d88:	5f006268 	svcpl	0x00006268
    1d8c:	6f74626d 	svcvs	0x0074626d
    1d90:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
    1d94:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1d98:	73645f00 	cmnvc	r4, #0, 30
    1d9c:	61685f6f 	cmnvs	r8, pc, ror #30
    1da0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1da4:	61725f00 	cmnvs	r2, r0, lsl #30
    1da8:	3834646e 	ldmdacc	r4!, {r1, r2, r3, r5, r6, sl, sp, lr}
    1dac:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    1db0:	74756f64 	ldrbtvc	r6, [r5], #-3940	; 0xfffff09c
    1db4:	6c625f00 	stclvs	15, cr5, [r2], #-0
    1db8:	7a69736b 	bvc	1a5eb6c <startup-0x1e5a1494>
    1dbc:	50470065 	subpl	r0, r7, r5, rrx
    1dc0:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1dc4:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1dc8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1dcc:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    1dd0:	61625f00 	cmnvs	r2, r0, lsl #30
    1dd4:	5f006573 	svcpl	0x00006573
    1dd8:	74727473 	ldrbtvc	r7, [r2], #-1139	; 0xfffffb8d
    1ddc:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15	; <UNPREDICTABLE>
    1de0:	00747361 	rsbseq	r7, r4, r1, ror #6
    1de4:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
    1de8:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
    1dec:	6174735f 	cmnvs	r4, pc, asr r3
    1df0:	5f006574 	svcpl	0x00006574
    1df4:	636f6c66 	cmnvs	pc, #26112	; 0x6600
    1df8:	00745f6b 	rsbseq	r5, r4, fp, ror #30
    1dfc:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
    1e00:	506f5474 	rsbpl	r5, pc, r4, ror r4	; <UNPREDICTABLE>
    1e04:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    1e08:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1e0c:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
    1e10:	00454c49 	subeq	r4, r5, r9, asr #24
    1e14:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
    1e18:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1e1c:	5f00745f 	svcpl	0x0000745f
    1e20:	00383472 	eorseq	r3, r8, r2, ror r4
    1e24:	746e6977 	strbtvc	r6, [lr], #-2423	; 0xfffff689
    1e28:	6900745f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    1e2c:	6769446e 	strbvs	r4, [r9, -lr, ror #8]!
    1e30:	5f007469 	svcpl	0x00007469
    1e34:	61746164 	cmnvs	r4, r4, ror #2
    1e38:	626d5f00 	rsbvs	r5, sp, #0, 30
    1e3c:	5f6e656c 	svcpl	0x006e656c
    1e40:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1e44:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
    1e48:	78546c61 	ldmdavc	r4, {r0, r5, r6, sl, fp, sp, lr}^
    1e4c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1e50:	5f007265 	svcpl	0x00007265
    1e54:	79746e66 	ldmdbvc	r4!, {r1, r2, r5, r6, r9, sl, fp, sp, lr}^
    1e58:	00736570 	rsbseq	r6, r3, r0, ror r5
    1e5c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    1e60:	6165795f 	cmnvs	r5, pc, asr r9
    1e64:	6c5f0072 	mrrcvs	0, 7, r0, pc, cr2	; <UNPREDICTABLE>
    1e68:	69736662 	ldmdbvs	r3!, {r1, r5, r6, r9, sl, sp, lr}^
    1e6c:	5f00657a 	svcpl	0x0000657a
    1e70:	00636e69 	rsbeq	r6, r3, r9, ror #28
    1e74:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
    1e78:	735f5f00 	cmpvc	pc, #0, 30
    1e7c:	00667562 	rsbeq	r7, r6, r2, ror #10
    1e80:	5f73695f 	svcpl	0x0073695f
    1e84:	00617863 	rsbeq	r7, r1, r3, ror #16
    1e88:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    1e8c:	00545f4b 	subseq	r5, r4, fp, asr #30
    1e90:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    1e94:	5f006674 	svcpl	0x00006674
    1e98:	61636f6c 	cmnvs	r3, ip, ror #30
    1e9c:	5f00656c 	svcpl	0x0000656c
    1ea0:	6f4c555f 	svcvs	0x004c555f
    1ea4:	5f00676e 	svcpl	0x0000676e
    1ea8:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
    1eac:	5f00746c 	svcpl	0x0000746c
    1eb0:	5f66666f 	svcpl	0x0066666f
    1eb4:	615f0074 	cmpvs	pc, r4, ror r0	; <UNPREDICTABLE>
    1eb8:	5f006464 	svcpl	0x00006464
    1ebc:	5f6d745f 	svcpl	0x006d745f
    1ec0:	72756f68 	rsbsvc	r6, r5, #104, 30	; 0x1a0
    1ec4:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 1ecc <startup-0x1fffe134>
    1ec8:	64775f6d 	ldrbtvs	r5, [r7], #-3949	; 0xfffff093
    1ecc:	5f007961 	svcpl	0x00007961
    1ed0:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
    1ed4:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
    1ed8:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
    1edc:	00657461 	rsbeq	r7, r5, r1, ror #8
    1ee0:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
    1ee4:	00746573 	rsbseq	r6, r4, r3, ror r5
    1ee8:	616e665f 	cmnvs	lr, pc, asr r6
    1eec:	00736772 	rsbseq	r6, r3, r2, ror r7
    1ef0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    1ef4:	6473695f 	ldrbtvs	r6, [r3], #-2399	; 0xfffff6a1
    1ef8:	55007473 	strpl	r7, [r0, #-1139]	; 0xfffffb8d
    1efc:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1f00:	00747550 	rsbseq	r7, r4, r0, asr r5
    1f04:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    1f08:	72506f54 	subsvc	r6, r0, #84, 30	; 0x150
    1f0c:	61746e69 	cmnvs	r4, r9, ror #28
    1f10:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1f14:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    1f18:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
    1f1c:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
    1f20:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
    1f24:	72655f65 	rsbvc	r5, r5, #404	; 0x194
    1f28:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
    1f2c:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <_global_impure_ptr+0xdfffa1f2>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	20000010 	andcs	r0, r0, r0, lsl r0
      1c:	00000060 	andeq	r0, r0, r0, rrx
      20:	40080e41 	andmi	r0, r8, r1, asr #28
      24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      28:	100e4101 	andne	r4, lr, r1, lsl #2
      2c:	00070d41 	andeq	r0, r7, r1, asr #26
      30:	0000001c 	andeq	r0, r0, ip, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	20000070 	andcs	r0, r0, r0, ror r0
      3c:	00000048 	andeq	r0, r0, r8, asr #32
      40:	40080e41 	andmi	r0, r8, r1, asr #28
      44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      48:	100e4101 	andne	r4, lr, r1, lsl #2
      4c:	00070d41 	andeq	r0, r7, r1, asr #26
      50:	00000018 	andeq	r0, r0, r8, lsl r0
      54:	00000000 	andeq	r0, r0, r0
      58:	200000b8 	strhcs	r0, [r0], -r8
      5c:	00000070 	andeq	r0, r0, r0, ror r0
      60:	40080e41 	andmi	r0, r8, r1, asr #28
      64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      68:	070d4101 	streq	r4, [sp, -r1, lsl #2]
      6c:	0000001c 	andeq	r0, r0, ip, lsl r0
      70:	00000000 	andeq	r0, r0, r0
      74:	20000128 	andcs	r0, r0, r8, lsr #2
      78:	00000028 	andeq	r0, r0, r8, lsr #32
      7c:	40080e41 	andmi	r0, r8, r1, asr #28
      80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      84:	100e4101 	andne	r4, lr, r1, lsl #2
      88:	00070d41 	andeq	r0, r7, r1, asr #26
      8c:	00000020 	andeq	r0, r0, r0, lsr #32
      90:	00000000 	andeq	r0, r0, r0
      94:	20000150 	andcs	r0, r0, r0, asr r1
      98:	0000005e 	andeq	r0, r0, lr, asr r0
      9c:	400c0e41 	andmi	r0, ip, r1, asr #28
      a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
      a4:	018e4002 	orreq	r4, lr, r2
      a8:	41180e41 	tstmi	r8, r1, asr #28
      ac:	0000070d 	andeq	r0, r0, sp, lsl #14
      b0:	0000001c 	andeq	r0, r0, ip, lsl r0
      b4:	00000000 	andeq	r0, r0, r0
      b8:	200001ae 	andcs	r0, r0, lr, lsr #3
      bc:	0000003e 	andeq	r0, r0, lr, lsr r0
      c0:	40080e41 	andmi	r0, r8, r1, asr #28
      c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      c8:	180e4101 	stmdane	lr, {r0, r8, lr}
      cc:	00070d41 	andeq	r0, r7, r1, asr #26
      d0:	0000001c 	andeq	r0, r0, ip, lsl r0
      d4:	00000000 	andeq	r0, r0, r0
      d8:	200001ec 	andcs	r0, r0, ip, ror #3
      dc:	00000020 	andeq	r0, r0, r0, lsr #32
      e0:	40080e41 	andmi	r0, r8, r1, asr #28
      e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      e8:	100e4101 	andne	r4, lr, r1, lsl #2
      ec:	00070d41 	andeq	r0, r7, r1, asr #26
      f0:	0000001c 	andeq	r0, r0, ip, lsl r0
      f4:	00000000 	andeq	r0, r0, r0
      f8:	2000020c 	andcs	r0, r0, ip, lsl #4
      fc:	00000044 	andeq	r0, r0, r4, asr #32
     100:	40080e41 	andmi	r0, r8, r1, asr #28
     104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     108:	100e4101 	andne	r4, lr, r1, lsl #2
     10c:	00070d41 	andeq	r0, r7, r1, asr #26
     110:	0000001c 	andeq	r0, r0, ip, lsl r0
     114:	00000000 	andeq	r0, r0, r0
     118:	20000250 	andcs	r0, r0, r0, asr r2
     11c:	00000020 	andeq	r0, r0, r0, lsr #32
     120:	40080e41 	andmi	r0, r8, r1, asr #28
     124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     128:	100e4101 	andne	r4, lr, r1, lsl #2
     12c:	00070d41 	andeq	r0, r7, r1, asr #26
     130:	0000001c 	andeq	r0, r0, ip, lsl r0
     134:	00000000 	andeq	r0, r0, r0
     138:	20000270 	andcs	r0, r0, r0, ror r2
     13c:	0000003c 	andeq	r0, r0, ip, lsr r0
     140:	40080e41 	andmi	r0, r8, r1, asr #28
     144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     148:	180e4101 	stmdane	lr, {r0, r8, lr}
     14c:	00070d41 	andeq	r0, r7, r1, asr #26
     150:	0000001c 	andeq	r0, r0, ip, lsl r0
     154:	00000000 	andeq	r0, r0, r0
     158:	200002ac 	andcs	r0, r0, ip, lsr #5
     15c:	00000020 	andeq	r0, r0, r0, lsr #32
     160:	40080e41 	andmi	r0, r8, r1, asr #28
     164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     168:	100e4101 	andne	r4, lr, r1, lsl #2
     16c:	00070d41 	andeq	r0, r7, r1, asr #26
     170:	0000001c 	andeq	r0, r0, ip, lsl r0
     174:	00000000 	andeq	r0, r0, r0
     178:	200002cc 	andcs	r0, r0, ip, asr #5
     17c:	00000028 	andeq	r0, r0, r8, lsr #32
     180:	40080e41 	andmi	r0, r8, r1, asr #28
     184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     188:	100e4101 	andne	r4, lr, r1, lsl #2
     18c:	00070d41 	andeq	r0, r7, r1, asr #26
     190:	0000001c 	andeq	r0, r0, ip, lsl r0
     194:	00000000 	andeq	r0, r0, r0
     198:	200002f4 	strdcs	r0, [r0], -r4
     19c:	00000020 	andeq	r0, r0, r0, lsr #32
     1a0:	40080e41 	andmi	r0, r8, r1, asr #28
     1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1a8:	100e4101 	andne	r4, lr, r1, lsl #2
     1ac:	00070d41 	andeq	r0, r7, r1, asr #26
     1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1b4:	00000000 	andeq	r0, r0, r0
     1b8:	20000314 	andcs	r0, r0, r4, lsl r3
     1bc:	00000030 	andeq	r0, r0, r0, lsr r0
     1c0:	40080e41 	andmi	r0, r8, r1, asr #28
     1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
     1cc:	00070d41 	andeq	r0, r7, r1, asr #26
     1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1d4:	00000000 	andeq	r0, r0, r0
     1d8:	20000344 	andcs	r0, r0, r4, asr #6
     1dc:	00000020 	andeq	r0, r0, r0, lsr #32
     1e0:	40080e41 	andmi	r0, r8, r1, asr #28
     1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1e8:	100e4101 	andne	r4, lr, r1, lsl #2
     1ec:	00070d41 	andeq	r0, r7, r1, asr #26
     1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1f4:	00000000 	andeq	r0, r0, r0
     1f8:	20000364 	andcs	r0, r0, r4, ror #6
     1fc:	00000020 	andeq	r0, r0, r0, lsr #32
     200:	40080e41 	andmi	r0, r8, r1, asr #28
     204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     208:	100e4101 	andne	r4, lr, r1, lsl #2
     20c:	00070d41 	andeq	r0, r7, r1, asr #26
     210:	0000001c 	andeq	r0, r0, ip, lsl r0
     214:	00000000 	andeq	r0, r0, r0
     218:	20000384 	andcs	r0, r0, r4, lsl #7
     21c:	00000040 	andeq	r0, r0, r0, asr #32
     220:	40080e41 	andmi	r0, r8, r1, asr #28
     224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     228:	180e4101 	stmdane	lr, {r0, r8, lr}
     22c:	00070d41 	andeq	r0, r7, r1, asr #26
     230:	0000001c 	andeq	r0, r0, ip, lsl r0
     234:	00000000 	andeq	r0, r0, r0
     238:	200003c4 	andcs	r0, r0, r4, asr #7
     23c:	0000003c 	andeq	r0, r0, ip, lsr r0
     240:	40080e41 	andmi	r0, r8, r1, asr #28
     244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     248:	180e4101 	stmdane	lr, {r0, r8, lr}
     24c:	00070d41 	andeq	r0, r7, r1, asr #26
     250:	0000001c 	andeq	r0, r0, ip, lsl r0
     254:	00000000 	andeq	r0, r0, r0
     258:	20000400 	andcs	r0, r0, r0, lsl #8
     25c:	00000034 	andeq	r0, r0, r4, lsr r0
     260:	40080e41 	andmi	r0, r8, r1, asr #28
     264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     268:	180e4101 	stmdane	lr, {r0, r8, lr}
     26c:	00070d41 	andeq	r0, r7, r1, asr #26
     270:	00000018 	andeq	r0, r0, r8, lsl r0
     274:	00000000 	andeq	r0, r0, r0
     278:	20000434 	andcs	r0, r0, r4, lsr r4
     27c:	0000001c 	andeq	r0, r0, ip, lsl r0
     280:	40080e41 	andmi	r0, r8, r1, asr #28
     284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     288:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     28c:	0000001c 	andeq	r0, r0, ip, lsl r0
     290:	00000000 	andeq	r0, r0, r0
     294:	20000450 	andcs	r0, r0, r0, asr r4
     298:	00000034 	andeq	r0, r0, r4, lsr r0
     29c:	40080e41 	andmi	r0, r8, r1, asr #28
     2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2a4:	180e4101 	stmdane	lr, {r0, r8, lr}
     2a8:	00070d41 	andeq	r0, r7, r1, asr #26
     2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     2b0:	00000000 	andeq	r0, r0, r0
     2b4:	20000484 	andcs	r0, r0, r4, lsl #9
     2b8:	00000038 	andeq	r0, r0, r8, lsr r0
     2bc:	40080e41 	andmi	r0, r8, r1, asr #28
     2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2c4:	180e4101 	stmdane	lr, {r0, r8, lr}
     2c8:	00070d41 	andeq	r0, r7, r1, asr #26
     2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     2d0:	00000000 	andeq	r0, r0, r0
     2d4:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
     2d8:	0000003c 	andeq	r0, r0, ip, lsr r0
     2dc:	40080e41 	andmi	r0, r8, r1, asr #28
     2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2e4:	180e4101 	stmdane	lr, {r0, r8, lr}
     2e8:	00070d41 	andeq	r0, r7, r1, asr #26
     2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     2f0:	00000000 	andeq	r0, r0, r0
     2f4:	200004f8 	strdcs	r0, [r0], -r8
     2f8:	00000158 	andeq	r0, r0, r8, asr r1
     2fc:	40080e41 	andmi	r0, r8, r1, asr #28
     300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     304:	280e4101 	stmdacs	lr, {r0, r8, lr}
     308:	00070d41 	andeq	r0, r7, r1, asr #26
     30c:	0000001c 	andeq	r0, r0, ip, lsl r0
     310:	00000000 	andeq	r0, r0, r0
     314:	20000650 	andcs	r0, r0, r0, asr r6
     318:	00000060 	andeq	r0, r0, r0, rrx
     31c:	40080e41 	andmi	r0, r8, r1, asr #28
     320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     324:	180e4101 	stmdane	lr, {r0, r8, lr}
     328:	00070d41 	andeq	r0, r7, r1, asr #26
     32c:	0000001c 	andeq	r0, r0, ip, lsl r0
     330:	00000000 	andeq	r0, r0, r0
     334:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
     338:	00000020 	andeq	r0, r0, r0, lsr #32
     33c:	40080e41 	andmi	r0, r8, r1, asr #28
     340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     344:	100e4101 	andne	r4, lr, r1, lsl #2
     348:	00070d41 	andeq	r0, r7, r1, asr #26
     34c:	0000001c 	andeq	r0, r0, ip, lsl r0
     350:	00000000 	andeq	r0, r0, r0
     354:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     358:	00000020 	andeq	r0, r0, r0, lsr #32
     35c:	40080e41 	andmi	r0, r8, r1, asr #28
     360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     364:	100e4101 	andne	r4, lr, r1, lsl #2
     368:	00070d41 	andeq	r0, r7, r1, asr #26
     36c:	0000001c 	andeq	r0, r0, ip, lsl r0
     370:	00000000 	andeq	r0, r0, r0
     374:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     378:	0000001c 	andeq	r0, r0, ip, lsl r0
     37c:	40080e41 	andmi	r0, r8, r1, asr #28
     380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     384:	100e4101 	andne	r4, lr, r1, lsl #2
     388:	00070d41 	andeq	r0, r7, r1, asr #26
     38c:	0000001c 	andeq	r0, r0, ip, lsl r0
     390:	00000000 	andeq	r0, r0, r0
     394:	2000070c 	andcs	r0, r0, ip, lsl #14
     398:	0000003c 	andeq	r0, r0, ip, lsr r0
     39c:	40080e41 	andmi	r0, r8, r1, asr #28
     3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3a4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3a8:	00070d41 	andeq	r0, r7, r1, asr #26
     3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     3b0:	00000000 	andeq	r0, r0, r0
     3b4:	20000748 	andcs	r0, r0, r8, asr #14
     3b8:	0000003c 	andeq	r0, r0, ip, lsr r0
     3bc:	40080e41 	andmi	r0, r8, r1, asr #28
     3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3c4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3c8:	00070d41 	andeq	r0, r7, r1, asr #26
     3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     3d0:	00000000 	andeq	r0, r0, r0
     3d4:	20000784 	andcs	r0, r0, r4, lsl #15
     3d8:	0000003c 	andeq	r0, r0, ip, lsr r0
     3dc:	40080e41 	andmi	r0, r8, r1, asr #28
     3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3e8:	00070d41 	andeq	r0, r7, r1, asr #26
     3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     3f0:	00000000 	andeq	r0, r0, r0
     3f4:	200007c0 	andcs	r0, r0, r0, asr #15
     3f8:	00000040 	andeq	r0, r0, r0, asr #32
     3fc:	40080e41 	andmi	r0, r8, r1, asr #28
     400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     404:	180e4101 	stmdane	lr, {r0, r8, lr}
     408:	00070d41 	andeq	r0, r7, r1, asr #26
     40c:	0000001c 	andeq	r0, r0, ip, lsl r0
     410:	00000000 	andeq	r0, r0, r0
     414:	20000800 	andcs	r0, r0, r0, lsl #16
     418:	0000003c 	andeq	r0, r0, ip, lsr r0
     41c:	40080e41 	andmi	r0, r8, r1, asr #28
     420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     424:	180e4101 	stmdane	lr, {r0, r8, lr}
     428:	00070d41 	andeq	r0, r7, r1, asr #26
     42c:	0000001c 	andeq	r0, r0, ip, lsl r0
     430:	00000000 	andeq	r0, r0, r0
     434:	2000083c 	andcs	r0, r0, ip, lsr r8
     438:	0000001c 	andeq	r0, r0, ip, lsl r0
     43c:	40080e41 	andmi	r0, r8, r1, asr #28
     440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     444:	100e4101 	andne	r4, lr, r1, lsl #2
     448:	00070d41 	andeq	r0, r7, r1, asr #26
     44c:	0000001c 	andeq	r0, r0, ip, lsl r0
     450:	00000000 	andeq	r0, r0, r0
     454:	20000858 	andcs	r0, r0, r8, asr r8
     458:	00000040 	andeq	r0, r0, r0, asr #32
     45c:	40080e41 	andmi	r0, r8, r1, asr #28
     460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     464:	100e4101 	andne	r4, lr, r1, lsl #2
     468:	00070d41 	andeq	r0, r7, r1, asr #26
     46c:	0000001c 	andeq	r0, r0, ip, lsl r0
     470:	00000000 	andeq	r0, r0, r0
     474:	20000898 	mulcs	r0, r8, r8
     478:	00000040 	andeq	r0, r0, r0, asr #32
     47c:	40080e41 	andmi	r0, r8, r1, asr #28
     480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     484:	100e4101 	andne	r4, lr, r1, lsl #2
     488:	00070d41 	andeq	r0, r7, r1, asr #26
     48c:	0000001c 	andeq	r0, r0, ip, lsl r0
     490:	00000000 	andeq	r0, r0, r0
     494:	200008d8 	ldrdcs	r0, [r0], -r8
     498:	00000040 	andeq	r0, r0, r0, asr #32
     49c:	40080e41 	andmi	r0, r8, r1, asr #28
     4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4a4:	100e4101 	andne	r4, lr, r1, lsl #2
     4a8:	00070d41 	andeq	r0, r7, r1, asr #26
     4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     4b0:	00000000 	andeq	r0, r0, r0
     4b4:	20000918 	andcs	r0, r0, r8, lsl r9
     4b8:	00000040 	andeq	r0, r0, r0, asr #32
     4bc:	40080e41 	andmi	r0, r8, r1, asr #28
     4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4c4:	100e4101 	andne	r4, lr, r1, lsl #2
     4c8:	00070d41 	andeq	r0, r7, r1, asr #26
     4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     4d0:	00000000 	andeq	r0, r0, r0
     4d4:	20000958 	andcs	r0, r0, r8, asr r9
     4d8:	00000040 	andeq	r0, r0, r0, asr #32
     4dc:	40080e41 	andmi	r0, r8, r1, asr #28
     4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4e4:	100e4101 	andne	r4, lr, r1, lsl #2
     4e8:	00070d41 	andeq	r0, r7, r1, asr #26
     4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     4f0:	00000000 	andeq	r0, r0, r0
     4f4:	20000998 	mulcs	r0, r8, r9
     4f8:	00000040 	andeq	r0, r0, r0, asr #32
     4fc:	40080e41 	andmi	r0, r8, r1, asr #28
     500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     504:	100e4101 	andne	r4, lr, r1, lsl #2
     508:	00070d41 	andeq	r0, r7, r1, asr #26
     50c:	0000001c 	andeq	r0, r0, ip, lsl r0
     510:	00000000 	andeq	r0, r0, r0
     514:	200009d8 	ldrdcs	r0, [r0], -r8
     518:	00000040 	andeq	r0, r0, r0, asr #32
     51c:	40080e41 	andmi	r0, r8, r1, asr #28
     520:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     524:	100e4101 	andne	r4, lr, r1, lsl #2
     528:	00070d41 	andeq	r0, r7, r1, asr #26
     52c:	0000001c 	andeq	r0, r0, ip, lsl r0
     530:	00000000 	andeq	r0, r0, r0
     534:	20000a18 	andcs	r0, r0, r8, lsl sl
     538:	00000040 	andeq	r0, r0, r0, asr #32
     53c:	40080e41 	andmi	r0, r8, r1, asr #28
     540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     544:	100e4101 	andne	r4, lr, r1, lsl #2
     548:	00070d41 	andeq	r0, r7, r1, asr #26
     54c:	0000001c 	andeq	r0, r0, ip, lsl r0
     550:	00000000 	andeq	r0, r0, r0
     554:	20000a58 	andcs	r0, r0, r8, asr sl
     558:	00000040 	andeq	r0, r0, r0, asr #32
     55c:	40080e41 	andmi	r0, r8, r1, asr #28
     560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     564:	100e4101 	andne	r4, lr, r1, lsl #2
     568:	00070d41 	andeq	r0, r7, r1, asr #26
     56c:	0000001c 	andeq	r0, r0, ip, lsl r0
     570:	00000000 	andeq	r0, r0, r0
     574:	20000a98 	mulcs	r0, r8, sl
     578:	00000040 	andeq	r0, r0, r0, asr #32
     57c:	40080e41 	andmi	r0, r8, r1, asr #28
     580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     584:	100e4101 	andne	r4, lr, r1, lsl #2
     588:	00070d41 	andeq	r0, r7, r1, asr #26
     58c:	0000001c 	andeq	r0, r0, ip, lsl r0
     590:	00000000 	andeq	r0, r0, r0
     594:	20000ad8 	ldrdcs	r0, [r0], -r8
     598:	00000040 	andeq	r0, r0, r0, asr #32
     59c:	40080e41 	andmi	r0, r8, r1, asr #28
     5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5a4:	100e4101 	andne	r4, lr, r1, lsl #2
     5a8:	00070d41 	andeq	r0, r7, r1, asr #26
     5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     5b0:	00000000 	andeq	r0, r0, r0
     5b4:	20000b18 	andcs	r0, r0, r8, lsl fp
     5b8:	00000040 	andeq	r0, r0, r0, asr #32
     5bc:	40080e41 	andmi	r0, r8, r1, asr #28
     5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5c4:	100e4101 	andne	r4, lr, r1, lsl #2
     5c8:	00070d41 	andeq	r0, r7, r1, asr #26
     5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     5d0:	00000000 	andeq	r0, r0, r0
     5d4:	20000b58 	andcs	r0, r0, r8, asr fp
     5d8:	00000040 	andeq	r0, r0, r0, asr #32
     5dc:	40080e41 	andmi	r0, r8, r1, asr #28
     5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5e4:	100e4101 	andne	r4, lr, r1, lsl #2
     5e8:	00070d41 	andeq	r0, r7, r1, asr #26
     5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	20000b98 	mulcs	r0, r8, fp
     5f8:	00000040 	andeq	r0, r0, r0, asr #32
     5fc:	40080e41 	andmi	r0, r8, r1, asr #28
     600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     604:	100e4101 	andne	r4, lr, r1, lsl #2
     608:	00070d41 	andeq	r0, r7, r1, asr #26
     60c:	0000001c 	andeq	r0, r0, ip, lsl r0
     610:	00000000 	andeq	r0, r0, r0
     614:	20000bd8 	ldrdcs	r0, [r0], -r8
     618:	00000040 	andeq	r0, r0, r0, asr #32
     61c:	40080e41 	andmi	r0, r8, r1, asr #28
     620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     624:	100e4101 	andne	r4, lr, r1, lsl #2
     628:	00070d41 	andeq	r0, r7, r1, asr #26
     62c:	0000001c 	andeq	r0, r0, ip, lsl r0
     630:	00000000 	andeq	r0, r0, r0
     634:	20000c18 	andcs	r0, r0, r8, lsl ip
     638:	0000003c 	andeq	r0, r0, ip, lsr r0
     63c:	40080e41 	andmi	r0, r8, r1, asr #28
     640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     644:	100e4101 	andne	r4, lr, r1, lsl #2
     648:	00070d41 	andeq	r0, r7, r1, asr #26
     64c:	0000001c 	andeq	r0, r0, ip, lsl r0
     650:	00000000 	andeq	r0, r0, r0
     654:	20000c54 	andcs	r0, r0, r4, asr ip
     658:	00000050 	andeq	r0, r0, r0, asr r0
     65c:	40080e41 	andmi	r0, r8, r1, asr #28
     660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     664:	100e4101 	andne	r4, lr, r1, lsl #2
     668:	00070d41 	andeq	r0, r7, r1, asr #26
     66c:	0000001c 	andeq	r0, r0, ip, lsl r0
     670:	00000000 	andeq	r0, r0, r0
     674:	20000ca4 	andcs	r0, r0, r4, lsr #25
     678:	00000084 	andeq	r0, r0, r4, lsl #1
     67c:	40080e41 	andmi	r0, r8, r1, asr #28
     680:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     684:	200e4101 	andcs	r4, lr, r1, lsl #2
     688:	00070d41 	andeq	r0, r7, r1, asr #26
     68c:	00000018 	andeq	r0, r0, r8, lsl r0
     690:	00000000 	andeq	r0, r0, r0
     694:	20000d28 	andcs	r0, r0, r8, lsr #26
     698:	0000001c 	andeq	r0, r0, ip, lsl r0
     69c:	40080e41 	andmi	r0, r8, r1, asr #28
     6a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6ac:	00000000 	andeq	r0, r0, r0
     6b0:	20000d44 	andcs	r0, r0, r4, asr #26
     6b4:	00000044 	andeq	r0, r0, r4, asr #32
     6b8:	40080e41 	andmi	r0, r8, r1, asr #28
     6bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6c0:	180e4101 	stmdane	lr, {r0, r8, lr}
     6c4:	00070d41 	andeq	r0, r7, r1, asr #26
     6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6cc:	00000000 	andeq	r0, r0, r0
     6d0:	20000d88 	andcs	r0, r0, r8, lsl #27
     6d4:	00000020 	andeq	r0, r0, r0, lsr #32
     6d8:	40080e41 	andmi	r0, r8, r1, asr #28
     6dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6e0:	100e4101 	andne	r4, lr, r1, lsl #2
     6e4:	00070d41 	andeq	r0, r7, r1, asr #26
     6e8:	0000000c 	andeq	r0, r0, ip
     6ec:	00000000 	andeq	r0, r0, r0
     6f0:	20000000 	andcs	r0, r0, r0
     6f4:	0000000c 	andeq	r0, r0, ip
     6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6fc:	00000000 	andeq	r0, r0, r0
     700:	20000da8 	andcs	r0, r0, r8, lsr #27
     704:	00000068 	andeq	r0, r0, r8, rrx
     708:	40080e41 	andmi	r0, r8, r1, asr #28
     70c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     710:	100e4101 	andne	r4, lr, r1, lsl #2
     714:	00070d41 	andeq	r0, r7, r1, asr #26
     718:	00000018 	andeq	r0, r0, r8, lsl r0
     71c:	00000000 	andeq	r0, r0, r0
     720:	20000e10 	andcs	r0, r0, r0, lsl lr
     724:	00000018 	andeq	r0, r0, r8, lsl r0
     728:	40080e41 	andmi	r0, r8, r1, asr #28
     72c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     730:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     734:	0000001c 	andeq	r0, r0, ip, lsl r0
     738:	00000000 	andeq	r0, r0, r0
     73c:	20000e28 	andcs	r0, r0, r8, lsr #28
     740:	0000002c 	andeq	r0, r0, ip, lsr #32
     744:	40080e41 	andmi	r0, r8, r1, asr #28
     748:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     74c:	100e4101 	andne	r4, lr, r1, lsl #2
     750:	00070d41 	andeq	r0, r7, r1, asr #26
     754:	00000028 	andeq	r0, r0, r8, lsr #32
     758:	00000000 	andeq	r0, r0, r0
     75c:	20000e54 	andcs	r0, r0, r4, asr lr
     760:	00000280 	andeq	r0, r0, r0, lsl #5
     764:	40140e41 	andsmi	r0, r4, r1, asr #28
     768:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
     76c:	03864004 	orreq	r4, r6, #4
     770:	40028740 	andmi	r8, r2, r0, asr #14
     774:	0e41018e 	dvfeqd	f0, f1, #0.5
     778:	0d410280 	sfmeq	f0, 2, [r1, #-512]	; 0xfffffe00
     77c:	00000007 	andeq	r0, r0, r7
     780:	0000000c 	andeq	r0, r0, ip
     784:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     788:	7c020001 	stcvc	0, cr0, [r2], {1}
     78c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     790:	0000001c 	andeq	r0, r0, ip, lsl r0
     794:	00000780 	andeq	r0, r0, r0, lsl #15
     798:	200010d4 	ldrdcs	r1, [r0], -r4
     79c:	00000170 	andeq	r0, r0, r0, ror r1
     7a0:	40080e41 	andmi	r0, r8, r1, asr #28
     7a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7a8:	100e4101 	andne	r4, lr, r1, lsl #2
     7ac:	00070d41 	andeq	r0, r7, r1, asr #26
     7b0:	0000001c 	andeq	r0, r0, ip, lsl r0
     7b4:	00000780 	andeq	r0, r0, r0, lsl #15
     7b8:	20001244 	andcs	r1, r0, r4, asr #4
     7bc:	00000118 	andeq	r0, r0, r8, lsl r1
     7c0:	40080e41 	andmi	r0, r8, r1, asr #28
     7c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7c8:	200e4101 	andcs	r4, lr, r1, lsl #2
     7cc:	00070d41 	andeq	r0, r7, r1, asr #26
     7d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     7d4:	00000780 	andeq	r0, r0, r0, lsl #15
     7d8:	2000135c 	andcs	r1, r0, ip, asr r3
     7dc:	00000034 	andeq	r0, r0, r4, lsr r0
     7e0:	40080e41 	andmi	r0, r8, r1, asr #28
     7e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7e8:	100e4101 	andne	r4, lr, r1, lsl #2
     7ec:	00070d41 	andeq	r0, r7, r1, asr #26
     7f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     7f4:	00000780 	andeq	r0, r0, r0, lsl #15
     7f8:	20001390 	mulcs	r0, r0, r3
     7fc:	00000046 	andeq	r0, r0, r6, asr #32
     800:	40080e41 	andmi	r0, r8, r1, asr #28
     804:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     808:	180e4101 	stmdane	lr, {r0, r8, lr}
     80c:	00070d41 	andeq	r0, r7, r1, asr #26
     810:	0000001c 	andeq	r0, r0, ip, lsl r0
     814:	00000780 	andeq	r0, r0, r0, lsl #15
     818:	200013d6 	ldrdcs	r1, [r0], -r6
     81c:	00000042 	andeq	r0, r0, r2, asr #32
     820:	40080e41 	andmi	r0, r8, r1, asr #28
     824:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     828:	180e4101 	stmdane	lr, {r0, r8, lr}
     82c:	00070d41 	andeq	r0, r7, r1, asr #26
     830:	0000001c 	andeq	r0, r0, ip, lsl r0
     834:	00000780 	andeq	r0, r0, r0, lsl #15
     838:	20001418 	andcs	r1, r0, r8, lsl r4
     83c:	00000016 	andeq	r0, r0, r6, lsl r0
     840:	40080e41 	andmi	r0, r8, r1, asr #28
     844:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     848:	100e4101 	andne	r4, lr, r1, lsl #2
     84c:	00070d41 	andeq	r0, r7, r1, asr #26
     850:	0000001c 	andeq	r0, r0, ip, lsl r0
     854:	00000780 	andeq	r0, r0, r0, lsl #15
     858:	2000142e 	andcs	r1, r0, lr, lsr #8
     85c:	00000042 	andeq	r0, r0, r2, asr #32
     860:	40080e41 	andmi	r0, r8, r1, asr #28
     864:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     868:	180e4101 	stmdane	lr, {r0, r8, lr}
     86c:	00070d41 	andeq	r0, r7, r1, asr #26
     870:	0000001c 	andeq	r0, r0, ip, lsl r0
     874:	00000780 	andeq	r0, r0, r0, lsl #15
     878:	20001470 	andcs	r1, r0, r0, ror r4
     87c:	00000016 	andeq	r0, r0, r6, lsl r0
     880:	40080e41 	andmi	r0, r8, r1, asr #28
     884:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     888:	100e4101 	andne	r4, lr, r1, lsl #2
     88c:	00070d41 	andeq	r0, r7, r1, asr #26
     890:	0000001c 	andeq	r0, r0, ip, lsl r0
     894:	00000780 	andeq	r0, r0, r0, lsl #15
     898:	20001486 	andcs	r1, r0, r6, lsl #9
     89c:	0000001e 	andeq	r0, r0, lr, lsl r0
     8a0:	40080e41 	andmi	r0, r8, r1, asr #28
     8a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8a8:	100e4101 	andne	r4, lr, r1, lsl #2
     8ac:	00070d41 	andeq	r0, r7, r1, asr #26
     8b0:	0000001c 	andeq	r0, r0, ip, lsl r0
     8b4:	00000780 	andeq	r0, r0, r0, lsl #15
     8b8:	200014a4 	andcs	r1, r0, r4, lsr #9
     8bc:	0000001e 	andeq	r0, r0, lr, lsl r0
     8c0:	40080e41 	andmi	r0, r8, r1, asr #28
     8c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8c8:	100e4101 	andne	r4, lr, r1, lsl #2
     8cc:	00070d41 	andeq	r0, r7, r1, asr #26
     8d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     8d4:	00000780 	andeq	r0, r0, r0, lsl #15
     8d8:	200014c2 	andcs	r1, r0, r2, asr #9
     8dc:	0000003a 	andeq	r0, r0, sl, lsr r0
     8e0:	40080e41 	andmi	r0, r8, r1, asr #28
     8e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8e8:	100e4101 	andne	r4, lr, r1, lsl #2
     8ec:	00070d41 	andeq	r0, r7, r1, asr #26
     8f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     8f4:	00000780 	andeq	r0, r0, r0, lsl #15
     8f8:	200014fc 	strdcs	r1, [r0], -ip
     8fc:	0000001e 	andeq	r0, r0, lr, lsl r0
     900:	40080e41 	andmi	r0, r8, r1, asr #28
     904:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     908:	100e4101 	andne	r4, lr, r1, lsl #2
     90c:	00070d41 	andeq	r0, r7, r1, asr #26
     910:	0000001c 	andeq	r0, r0, ip, lsl r0
     914:	00000780 	andeq	r0, r0, r0, lsl #15
     918:	2000151a 	andcs	r1, r0, sl, lsl r5
     91c:	00000024 	andeq	r0, r0, r4, lsr #32
     920:	40080e41 	andmi	r0, r8, r1, asr #28
     924:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     928:	100e4101 	andne	r4, lr, r1, lsl #2
     92c:	00070d41 	andeq	r0, r7, r1, asr #26
     930:	0000001c 	andeq	r0, r0, ip, lsl r0
     934:	00000780 	andeq	r0, r0, r0, lsl #15
     938:	2000153e 	andcs	r1, r0, lr, lsr r5
     93c:	000000a4 	andeq	r0, r0, r4, lsr #1
     940:	40080e41 	andmi	r0, r8, r1, asr #28
     944:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     948:	180e4101 	stmdane	lr, {r0, r8, lr}
     94c:	00070d41 	andeq	r0, r7, r1, asr #26
     950:	0000000c 	andeq	r0, r0, ip
     954:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     958:	7c020001 	stcvc	0, cr0, [r2], {1}
     95c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     960:	0000001c 	andeq	r0, r0, ip, lsl r0
     964:	00000950 	andeq	r0, r0, r0, asr r9
     968:	200015e4 	andcs	r1, r0, r4, ror #11
     96c:	00000024 	andeq	r0, r0, r4, lsr #32
     970:	40080e41 	andmi	r0, r8, r1, asr #28
     974:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     978:	100e4101 	andne	r4, lr, r1, lsl #2
     97c:	00070d41 	andeq	r0, r7, r1, asr #26
     980:	00000024 	andeq	r0, r0, r4, lsr #32
     984:	00000950 	andeq	r0, r0, r0, asr r9
     988:	20001608 	andcs	r1, r0, r8, lsl #12
     98c:	000000f8 	strdeq	r0, [r0], -r8
     990:	40100e41 	andsmi	r0, r0, r1, asr #28
     994:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
     998:	02874003 	addeq	r4, r7, #3
     99c:	41018e40 	tstmi	r1, r0, asr #28
     9a0:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     9a4:	00000007 	andeq	r0, r0, r7
     9a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9ac:	00000950 	andeq	r0, r0, r0, asr r9
     9b0:	20001700 	andcs	r1, r0, r0, lsl #14
     9b4:	0000002c 	andeq	r0, r0, ip, lsr #32
     9b8:	40080e41 	andmi	r0, r8, r1, asr #28
     9bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9c0:	100e4101 	andne	r4, lr, r1, lsl #2
     9c4:	00070d41 	andeq	r0, r7, r1, asr #26
     9c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9cc:	00000950 	andeq	r0, r0, r0, asr r9
     9d0:	2000172c 	andcs	r1, r0, ip, lsr #14
     9d4:	00000048 	andeq	r0, r0, r8, asr #32
     9d8:	40080e41 	andmi	r0, r8, r1, asr #28
     9dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9e0:	100e4101 	andne	r4, lr, r1, lsl #2
     9e4:	00070d41 	andeq	r0, r7, r1, asr #26
     9e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9ec:	00000950 	andeq	r0, r0, r0, asr r9
     9f0:	20001774 	andcs	r1, r0, r4, ror r7
     9f4:	00000034 	andeq	r0, r0, r4, lsr r0
     9f8:	40080e41 	andmi	r0, r8, r1, asr #28
     9fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a00:	100e4101 	andne	r4, lr, r1, lsl #2
     a04:	00070d41 	andeq	r0, r7, r1, asr #26
     a08:	0000000c 	andeq	r0, r0, ip
     a0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a10:	7c020001 	stcvc	0, cr0, [r2], {1}
     a14:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     a18:	0000001c 	andeq	r0, r0, ip, lsl r0
     a1c:	00000a08 	andeq	r0, r0, r8, lsl #20
     a20:	200017a8 	andcs	r1, r0, r8, lsr #15
     a24:	00000028 	andeq	r0, r0, r8, lsr #32
     a28:	40080e41 	andmi	r0, r8, r1, asr #28
     a2c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a30:	100e4101 	andne	r4, lr, r1, lsl #2
     a34:	00070d41 	andeq	r0, r7, r1, asr #26
     a38:	0000001c 	andeq	r0, r0, ip, lsl r0
     a3c:	00000a08 	andeq	r0, r0, r8, lsl #20
     a40:	200017d0 	ldrdcs	r1, [r0], -r0
     a44:	00000062 	andeq	r0, r0, r2, rrx
     a48:	40080e41 	andmi	r0, r8, r1, asr #28
     a4c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a50:	100e4101 	andne	r4, lr, r1, lsl #2
     a54:	00070d41 	andeq	r0, r7, r1, asr #26
     a58:	0000001c 	andeq	r0, r0, ip, lsl r0
     a5c:	00000a08 	andeq	r0, r0, r8, lsl #20
     a60:	20001832 	andcs	r1, r0, r2, lsr r8
     a64:	0000005e 	andeq	r0, r0, lr, asr r0
     a68:	40080e41 	andmi	r0, r8, r1, asr #28
     a6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a70:	100e4101 	andne	r4, lr, r1, lsl #2
     a74:	00070d41 	andeq	r0, r7, r1, asr #26
     a78:	0000000c 	andeq	r0, r0, ip
     a7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a80:	7c020001 	stcvc	0, cr0, [r2], {1}
     a84:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     a88:	0000001c 	andeq	r0, r0, ip, lsl r0
     a8c:	00000a78 	andeq	r0, r0, r8, ror sl
     a90:	20001890 	mulcs	r0, r0, r8
     a94:	00000130 	andeq	r0, r0, r0, lsr r1
     a98:	40080e41 	andmi	r0, r8, r1, asr #28
     a9c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     aa0:	100e4101 	andne	r4, lr, r1, lsl #2
     aa4:	00070d41 	andeq	r0, r7, r1, asr #26
     aa8:	0000001c 	andeq	r0, r0, ip, lsl r0
     aac:	00000a78 	andeq	r0, r0, r8, ror sl
     ab0:	200019c0 	andcs	r1, r0, r0, asr #19
     ab4:	00000194 	muleq	r0, r4, r1
     ab8:	40080e41 	andmi	r0, r8, r1, asr #28
     abc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ac0:	300e4101 	andcc	r4, lr, r1, lsl #2
     ac4:	00070d41 	andeq	r0, r7, r1, asr #26
     ac8:	0000001c 	andeq	r0, r0, ip, lsl r0
     acc:	00000a78 	andeq	r0, r0, r8, ror sl
     ad0:	20001b54 	andcs	r1, r0, r4, asr fp
     ad4:	00000036 	andeq	r0, r0, r6, lsr r0
     ad8:	40080e41 	andmi	r0, r8, r1, asr #28
     adc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ae0:	100e4101 	andne	r4, lr, r1, lsl #2
     ae4:	00070d41 	andeq	r0, r7, r1, asr #26
     ae8:	0000001c 	andeq	r0, r0, ip, lsl r0
     aec:	00000a78 	andeq	r0, r0, r8, ror sl
     af0:	20001b8a 	andcs	r1, r0, sl, lsl #23
     af4:	00000056 	andeq	r0, r0, r6, asr r0
     af8:	40080e41 	andmi	r0, r8, r1, asr #28
     afc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b00:	180e4101 	stmdane	lr, {r0, r8, lr}
     b04:	00070d41 	andeq	r0, r7, r1, asr #26
     b08:	0000001c 	andeq	r0, r0, ip, lsl r0
     b0c:	00000a78 	andeq	r0, r0, r8, ror sl
     b10:	20001be0 	andcs	r1, r0, r0, ror #23
     b14:	00000028 	andeq	r0, r0, r8, lsr #32
     b18:	40080e41 	andmi	r0, r8, r1, asr #28
     b1c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b20:	100e4101 	andne	r4, lr, r1, lsl #2
     b24:	00070d41 	andeq	r0, r7, r1, asr #26
     b28:	0000001c 	andeq	r0, r0, ip, lsl r0
     b2c:	00000a78 	andeq	r0, r0, r8, ror sl
     b30:	20001c08 	andcs	r1, r0, r8, lsl #24
     b34:	00000048 	andeq	r0, r0, r8, asr #32
     b38:	40080e41 	andmi	r0, r8, r1, asr #28
     b3c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b40:	100e4101 	andne	r4, lr, r1, lsl #2
     b44:	00070d41 	andeq	r0, r7, r1, asr #26
     b48:	0000001c 	andeq	r0, r0, ip, lsl r0
     b4c:	00000a78 	andeq	r0, r0, r8, ror sl
     b50:	20001c50 	andcs	r1, r0, r0, asr ip
     b54:	0000003a 	andeq	r0, r0, sl, lsr r0
     b58:	40080e41 	andmi	r0, r8, r1, asr #28
     b5c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b60:	100e4101 	andne	r4, lr, r1, lsl #2
     b64:	00070d41 	andeq	r0, r7, r1, asr #26
     b68:	0000001c 	andeq	r0, r0, ip, lsl r0
     b6c:	00000a78 	andeq	r0, r0, r8, ror sl
     b70:	20001c8a 	andcs	r1, r0, sl, lsl #25
     b74:	00000046 	andeq	r0, r0, r6, asr #32
     b78:	40080e41 	andmi	r0, r8, r1, asr #28
     b7c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b80:	100e4101 	andne	r4, lr, r1, lsl #2
     b84:	00070d41 	andeq	r0, r7, r1, asr #26
     b88:	0000001c 	andeq	r0, r0, ip, lsl r0
     b8c:	00000a78 	andeq	r0, r0, r8, ror sl
     b90:	20001cd0 	ldrdcs	r1, [r0], -r0
     b94:	00000048 	andeq	r0, r0, r8, asr #32
     b98:	40080e41 	andmi	r0, r8, r1, asr #28
     b9c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ba0:	100e4101 	andne	r4, lr, r1, lsl #2
     ba4:	00070d41 	andeq	r0, r7, r1, asr #26
     ba8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bac:	00000a78 	andeq	r0, r0, r8, ror sl
     bb0:	20001d18 	andcs	r1, r0, r8, lsl sp
     bb4:	00000024 	andeq	r0, r0, r4, lsr #32
     bb8:	40080e41 	andmi	r0, r8, r1, asr #28
     bbc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     bc0:	100e4101 	andne	r4, lr, r1, lsl #2
     bc4:	00070d41 	andeq	r0, r7, r1, asr #26
     bc8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bcc:	00000a78 	andeq	r0, r0, r8, ror sl
     bd0:	20001d3c 	andcs	r1, r0, ip, lsr sp
     bd4:	0000001c 	andeq	r0, r0, ip, lsl r0
     bd8:	40080e41 	andmi	r0, r8, r1, asr #28
     bdc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     be0:	100e4101 	andne	r4, lr, r1, lsl #2
     be4:	00070d41 	andeq	r0, r7, r1, asr #26
     be8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bec:	00000a78 	andeq	r0, r0, r8, ror sl
     bf0:	20001d58 	andcs	r1, r0, r8, asr sp
     bf4:	0000003a 	andeq	r0, r0, sl, lsr r0
     bf8:	40080e41 	andmi	r0, r8, r1, asr #28
     bfc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c00:	100e4101 	andne	r4, lr, r1, lsl #2
     c04:	00070d41 	andeq	r0, r7, r1, asr #26
     c08:	0000001c 	andeq	r0, r0, ip, lsl r0
     c0c:	00000a78 	andeq	r0, r0, r8, ror sl
     c10:	20001d92 	mulcs	r0, r2, sp
     c14:	00000040 	andeq	r0, r0, r0, asr #32
     c18:	40080e41 	andmi	r0, r8, r1, asr #28
     c1c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c20:	100e4101 	andne	r4, lr, r1, lsl #2
     c24:	00070d41 	andeq	r0, r7, r1, asr #26
     c28:	0000001c 	andeq	r0, r0, ip, lsl r0
     c2c:	00000a78 	andeq	r0, r0, r8, ror sl
     c30:	20001dd2 	ldrdcs	r1, [r0], -r2
     c34:	0000003e 	andeq	r0, r0, lr, lsr r0
     c38:	40080e41 	andmi	r0, r8, r1, asr #28
     c3c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c40:	100e4101 	andne	r4, lr, r1, lsl #2
     c44:	00070d41 	andeq	r0, r7, r1, asr #26
     c48:	0000001c 	andeq	r0, r0, ip, lsl r0
     c4c:	00000a78 	andeq	r0, r0, r8, ror sl
     c50:	20001e10 	andcs	r1, r0, r0, lsl lr
     c54:	00000038 	andeq	r0, r0, r8, lsr r0
     c58:	40080e41 	andmi	r0, r8, r1, asr #28
     c5c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c60:	100e4101 	andne	r4, lr, r1, lsl #2
     c64:	00070d41 	andeq	r0, r7, r1, asr #26
     c68:	0000001c 	andeq	r0, r0, ip, lsl r0
     c6c:	00000a78 	andeq	r0, r0, r8, ror sl
     c70:	20001e48 	andcs	r1, r0, r8, asr #28
     c74:	00000048 	andeq	r0, r0, r8, asr #32
     c78:	40080e41 	andmi	r0, r8, r1, asr #28
     c7c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c80:	100e4101 	andne	r4, lr, r1, lsl #2
     c84:	00070d41 	andeq	r0, r7, r1, asr #26
     c88:	0000001c 	andeq	r0, r0, ip, lsl r0
     c8c:	00000a78 	andeq	r0, r0, r8, ror sl
     c90:	20001e90 	mulcs	r0, r0, lr
     c94:	00000020 	andeq	r0, r0, r0, lsr #32
     c98:	40080e41 	andmi	r0, r8, r1, asr #28
     c9c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ca0:	100e4101 	andne	r4, lr, r1, lsl #2
     ca4:	00070d41 	andeq	r0, r7, r1, asr #26
     ca8:	0000001c 	andeq	r0, r0, ip, lsl r0
     cac:	00000a78 	andeq	r0, r0, r8, ror sl
     cb0:	20001eb0 			; <UNDEFINED> instruction: 0x20001eb0
     cb4:	00000040 	andeq	r0, r0, r0, asr #32
     cb8:	40080e41 	andmi	r0, r8, r1, asr #28
     cbc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     cc0:	100e4101 	andne	r4, lr, r1, lsl #2
     cc4:	00070d41 	andeq	r0, r7, r1, asr #26
     cc8:	0000001c 	andeq	r0, r0, ip, lsl r0
     ccc:	00000a78 	andeq	r0, r0, r8, ror sl
     cd0:	20001ef0 	strdcs	r1, [r0], -r0
     cd4:	0000003e 	andeq	r0, r0, lr, lsr r0
     cd8:	40080e41 	andmi	r0, r8, r1, asr #28
     cdc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ce0:	100e4101 	andne	r4, lr, r1, lsl #2
     ce4:	00070d41 	andeq	r0, r7, r1, asr #26
     ce8:	0000001c 	andeq	r0, r0, ip, lsl r0
     cec:	00000a78 	andeq	r0, r0, r8, ror sl
     cf0:	20001f2e 	andcs	r1, r0, lr, lsr #30
     cf4:	00000040 	andeq	r0, r0, r0, asr #32
     cf8:	40080e41 	andmi	r0, r8, r1, asr #28
     cfc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d00:	100e4101 	andne	r4, lr, r1, lsl #2
     d04:	00070d41 	andeq	r0, r7, r1, asr #26
     d08:	0000001c 	andeq	r0, r0, ip, lsl r0
     d0c:	00000a78 	andeq	r0, r0, r8, ror sl
     d10:	20001f6e 	andcs	r1, r0, lr, ror #30
     d14:	00000040 	andeq	r0, r0, r0, asr #32
     d18:	40080e41 	andmi	r0, r8, r1, asr #28
     d1c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d20:	100e4101 	andne	r4, lr, r1, lsl #2
     d24:	00070d41 	andeq	r0, r7, r1, asr #26
     d28:	0000001c 	andeq	r0, r0, ip, lsl r0
     d2c:	00000a78 	andeq	r0, r0, r8, ror sl
     d30:	20001fae 	andcs	r1, r0, lr, lsr #31
     d34:	00000038 	andeq	r0, r0, r8, lsr r0
     d38:	40080e41 	andmi	r0, r8, r1, asr #28
     d3c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d40:	100e4101 	andne	r4, lr, r1, lsl #2
     d44:	00070d41 	andeq	r0, r7, r1, asr #26
     d48:	0000001c 	andeq	r0, r0, ip, lsl r0
     d4c:	00000a78 	andeq	r0, r0, r8, ror sl
     d50:	20001fe6 	andcs	r1, r0, r6, ror #31
     d54:	00000040 	andeq	r0, r0, r0, asr #32
     d58:	40080e41 	andmi	r0, r8, r1, asr #28
     d5c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d60:	100e4101 	andne	r4, lr, r1, lsl #2
     d64:	00070d41 	andeq	r0, r7, r1, asr #26
     d68:	0000001c 	andeq	r0, r0, ip, lsl r0
     d6c:	00000a78 	andeq	r0, r0, r8, ror sl
     d70:	20002026 	andcs	r2, r0, r6, lsr #32
     d74:	00000052 	andeq	r0, r0, r2, asr r0
     d78:	40080e41 	andmi	r0, r8, r1, asr #28
     d7c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d80:	100e4101 	andne	r4, lr, r1, lsl #2
     d84:	00070d41 	andeq	r0, r7, r1, asr #26
     d88:	0000001c 	andeq	r0, r0, ip, lsl r0
     d8c:	00000a78 	andeq	r0, r0, r8, ror sl
     d90:	20002078 	andcs	r2, r0, r8, ror r0
     d94:	0000009a 	muleq	r0, sl, r0
     d98:	40080e41 	andmi	r0, r8, r1, asr #28
     d9c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     da0:	200e4101 	andcs	r4, lr, r1, lsl #2
     da4:	00070d41 	andeq	r0, r7, r1, asr #26
     da8:	0000001c 	andeq	r0, r0, ip, lsl r0
     dac:	00000a78 	andeq	r0, r0, r8, ror sl
     db0:	20002112 	andcs	r2, r0, r2, lsl r1
     db4:	00000048 	andeq	r0, r0, r8, asr #32
     db8:	40080e41 	andmi	r0, r8, r1, asr #28
     dbc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     dc0:	180e4101 	stmdane	lr, {r0, r8, lr}
     dc4:	00070d41 	andeq	r0, r7, r1, asr #26
     dc8:	0000001c 	andeq	r0, r0, ip, lsl r0
     dcc:	00000a78 	andeq	r0, r0, r8, ror sl
     dd0:	2000215a 	andcs	r2, r0, sl, asr r1
     dd4:	00000022 	andeq	r0, r0, r2, lsr #32
     dd8:	40080e41 	andmi	r0, r8, r1, asr #28
     ddc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     de0:	100e4101 	andne	r4, lr, r1, lsl #2
     de4:	00070d41 	andeq	r0, r7, r1, asr #26
     de8:	0000001c 	andeq	r0, r0, ip, lsl r0
     dec:	00000a78 	andeq	r0, r0, r8, ror sl
     df0:	2000217c 	andcs	r2, r0, ip, ror r1
     df4:	000000ca 	andeq	r0, r0, sl, asr #1
     df8:	40080e41 	andmi	r0, r8, r1, asr #28
     dfc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e00:	200e4101 	andcs	r4, lr, r1, lsl #2
     e04:	00070d41 	andeq	r0, r7, r1, asr #26
     e08:	0000001c 	andeq	r0, r0, ip, lsl r0
     e0c:	00000a78 	andeq	r0, r0, r8, ror sl
     e10:	20002246 	andcs	r2, r0, r6, asr #4
     e14:	00000048 	andeq	r0, r0, r8, asr #32
     e18:	40080e41 	andmi	r0, r8, r1, asr #28
     e1c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e20:	180e4101 	stmdane	lr, {r0, r8, lr}
     e24:	00070d41 	andeq	r0, r7, r1, asr #26
     e28:	0000000c 	andeq	r0, r0, ip
     e2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e30:	7c020001 	stcvc	0, cr0, [r2], {1}
     e34:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e38:	00000020 	andeq	r0, r0, r0, lsr #32
     e3c:	00000e28 	andeq	r0, r0, r8, lsr #28
     e40:	20002290 	mulcs	r0, r0, r2
     e44:	00000098 	muleq	r0, r8, r0
     e48:	400c0e41 	andmi	r0, ip, r1, asr #28
     e4c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     e50:	018e4002 	orreq	r4, lr, r2
     e54:	41180e41 	tstmi	r8, r1, asr #28
     e58:	0000070d 	andeq	r0, r0, sp, lsl #14
     e5c:	00000020 	andeq	r0, r0, r0, lsr #32
     e60:	00000e28 	andeq	r0, r0, r8, lsr #28
     e64:	20002328 	andcs	r2, r0, r8, lsr #6
     e68:	00000134 	andeq	r0, r0, r4, lsr r1
     e6c:	400c0e41 	andmi	r0, ip, r1, asr #28
     e70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     e74:	018e4002 	orreq	r4, lr, r2
     e78:	41300e41 	teqmi	r0, r1, asr #28
     e7c:	0000070d 	andeq	r0, r0, sp, lsl #14
     e80:	0000001c 	andeq	r0, r0, ip, lsl r0
     e84:	00000e28 	andeq	r0, r0, r8, lsr #28
     e88:	2000245c 	andcs	r2, r0, ip, asr r4
     e8c:	00000048 	andeq	r0, r0, r8, asr #32
     e90:	40080e41 	andmi	r0, r8, r1, asr #28
     e94:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e98:	100e4101 	andne	r4, lr, r1, lsl #2
     e9c:	00070d41 	andeq	r0, r7, r1, asr #26
     ea0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ea4:	00000e28 	andeq	r0, r0, r8, lsr #28
     ea8:	200024a4 	andcs	r2, r0, r4, lsr #9
     eac:	0000003a 	andeq	r0, r0, sl, lsr r0
     eb0:	40080e41 	andmi	r0, r8, r1, asr #28
     eb4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     eb8:	100e4101 	andne	r4, lr, r1, lsl #2
     ebc:	00070d41 	andeq	r0, r7, r1, asr #26
     ec0:	00000024 	andeq	r0, r0, r4, lsr #32
     ec4:	00000e28 	andeq	r0, r0, r8, lsr #28
     ec8:	200024de 	ldrdcs	r2, [r0], -lr
     ecc:	000000e4 	andeq	r0, r0, r4, ror #1
     ed0:	40100e41 	andsmi	r0, r0, r1, asr #28
     ed4:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
     ed8:	02874003 	addeq	r4, r7, #3
     edc:	41018e40 	tstmi	r1, r0, asr #28
     ee0:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
     ee4:	00000007 	andeq	r0, r0, r7
     ee8:	0000001c 	andeq	r0, r0, ip, lsl r0
     eec:	00000e28 	andeq	r0, r0, r8, lsr #28
     ef0:	200025c2 	andcs	r2, r0, r2, asr #11
     ef4:	00000026 	andeq	r0, r0, r6, lsr #32
     ef8:	40080e41 	andmi	r0, r8, r1, asr #28
     efc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f00:	100e4101 	andne	r4, lr, r1, lsl #2
     f04:	00070d41 	andeq	r0, r7, r1, asr #26
     f08:	0000001c 	andeq	r0, r0, ip, lsl r0
     f0c:	00000e28 	andeq	r0, r0, r8, lsr #28
     f10:	200025e8 	andcs	r2, r0, r8, ror #11
     f14:	00000028 	andeq	r0, r0, r8, lsr #32
     f18:	40080e41 	andmi	r0, r8, r1, asr #28
     f1c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f20:	100e4101 	andne	r4, lr, r1, lsl #2
     f24:	00070d41 	andeq	r0, r7, r1, asr #26
     f28:	0000001c 	andeq	r0, r0, ip, lsl r0
     f2c:	00000e28 	andeq	r0, r0, r8, lsr #28
     f30:	20002610 	andcs	r2, r0, r0, lsl r6
     f34:	0000007c 	andeq	r0, r0, ip, ror r0
     f38:	40080e41 	andmi	r0, r8, r1, asr #28
     f3c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f40:	100e4101 	andne	r4, lr, r1, lsl #2
     f44:	00070d41 	andeq	r0, r7, r1, asr #26
     f48:	0000000c 	andeq	r0, r0, ip
     f4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f50:	7c010001 	stcvc	0, cr0, [r1], {1}
     f54:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f58:	0000000c 	andeq	r0, r0, ip
     f5c:	00000f48 	andeq	r0, r0, r8, asr #30
     f60:	2000268d 	andcs	r2, r0, sp, lsl #13
     f64:	0000010a 	andeq	r0, r0, sl, lsl #2
     f68:	0000000c 	andeq	r0, r0, ip
     f6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f70:	7c020001 	stcvc	0, cr0, [r2], {1}
     f74:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f78:	00000018 	andeq	r0, r0, r8, lsl r0
     f7c:	00000f68 	andeq	r0, r0, r8, ror #30
     f80:	200027a4 	andcs	r2, r0, r4, lsr #15
     f84:	0000003c 	andeq	r0, r0, ip, lsr r0
     f88:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     f8c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     f90:	00018e02 	andeq	r8, r1, r2, lsl #28
     f94:	0000000c 	andeq	r0, r0, ip
     f98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f9c:	7c020001 	stcvc	0, cr0, [r2], {1}
     fa0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fa4:	00000028 	andeq	r0, r0, r8, lsr #32
     fa8:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     fac:	200027e0 	andcs	r2, r0, r0, ror #15
     fb0:	00000690 	muleq	r0, r0, r6
     fb4:	83180e41 	tsthi	r8, #1040	; 0x410
     fb8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     fbc:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     fc0:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
     fc4:	0a88280e 	beq	fe20b004 <_global_impure_ptr+0xde205ee8>
     fc8:	088a0989 	stmeq	sl, {r0, r3, r7, r8, fp}
     fcc:	0000078b 	andeq	r0, r0, fp, lsl #15
     fd0:	0000000c 	andeq	r0, r0, ip
     fd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fd8:	7c020001 	stcvc	0, cr0, [r2], {1}
     fdc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fe0:	00000018 	andeq	r0, r0, r8, lsl r0
     fe4:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     fe8:	20002e70 	andcs	r2, r0, r0, ror lr
     fec:	0000006c 	andeq	r0, r0, ip, rrx
     ff0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     ff4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     ff8:	00000001 	andeq	r0, r0, r1
     ffc:	0000000c 	andeq	r0, r0, ip
    1000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1004:	7c020001 	stcvc	0, cr0, [r2], {1}
    1008:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    100c:	00000014 	andeq	r0, r0, r4, lsl r0
    1010:	00000ffc 	strdeq	r0, [r0], -ip
    1014:	20002edc 	ldrdcs	r2, [r0], -ip
    1018:	00000064 	andeq	r0, r0, r4, rrx
    101c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1020:	00018e02 	andeq	r8, r1, r2, lsl #28
    1024:	0000000c 	andeq	r0, r0, ip
    1028:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    102c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1030:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1034:	00000024 	andeq	r0, r0, r4, lsr #32
    1038:	00001024 	andeq	r1, r0, r4, lsr #32
    103c:	20002ff8 	strdcs	r2, [r0], -r8
    1040:	00000078 	andeq	r0, r0, r8, ror r0
    1044:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1048:	86048505 	strhi	r8, [r4], -r5, lsl #10
    104c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1050:	200e4501 	andcs	r4, lr, r1, lsl #10
    1054:	07890888 	streq	r0, [r9, r8, lsl #17]
    1058:	0000068a 	andeq	r0, r0, sl, lsl #13
    105c:	0000000c 	andeq	r0, r0, ip
    1060:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1064:	7c020001 	stcvc	0, cr0, [r2], {1}
    1068:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    106c:	00000024 	andeq	r0, r0, r4, lsr #32
    1070:	0000105c 	andeq	r1, r0, ip, asr r0
    1074:	20003070 	andcs	r3, r0, r0, ror r0
    1078:	000000c8 	andeq	r0, r0, r8, asr #1
    107c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1080:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1084:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1088:	200e4501 	andcs	r4, lr, r1, lsl #10
    108c:	07890888 	streq	r0, [r9, r8, lsl #17]
    1090:	0000068a 	andeq	r0, r0, sl, lsl #13
    1094:	0000000c 	andeq	r0, r0, ip
    1098:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    109c:	7c020001 	stcvc	0, cr0, [r2], {1}
    10a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10a4:	00000024 	andeq	r0, r0, r4, lsr #32
    10a8:	00001094 	muleq	r0, r4, r0
    10ac:	20003138 	andcs	r3, r0, r8, lsr r1
    10b0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10b4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    10b8:	86048505 	strhi	r8, [r4], -r5, lsl #10
    10bc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    10c0:	200e4501 	andcs	r4, lr, r1, lsl #10
    10c4:	07890888 	streq	r0, [r9, r8, lsl #17]
    10c8:	0000068a 	andeq	r0, r0, sl, lsl #13
    10cc:	0000000c 	andeq	r0, r0, ip
    10d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10d4:	7c020001 	stcvc	0, cr0, [r2], {1}
    10d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10dc:	00000024 	andeq	r0, r0, r4, lsr #32
    10e0:	000010cc 	andeq	r1, r0, ip, asr #1
    10e4:	200043d4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>
    10e8:	00000128 	andeq	r0, r0, r8, lsr #2
    10ec:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xfffff1be
    10f0:	86048505 	strhi	r8, [r4], -r5, lsl #10
    10f4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    10f8:	200e4901 	andcs	r4, lr, r1, lsl #18
    10fc:	07890888 	streq	r0, [r9, r8, lsl #17]
    1100:	0000068a 	andeq	r0, r0, sl, lsl #13
    1104:	0000000c 	andeq	r0, r0, ip
    1108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    110c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1110:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1114:	00000024 	andeq	r0, r0, r4, lsr #32
    1118:	00001104 	andeq	r1, r0, r4, lsl #2
    111c:	200044fc 	strdcs	r4, [r0], -ip
    1120:	00000118 	andeq	r0, r0, r8, lsl r1
    1124:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1128:	86048505 	strhi	r8, [r4], -r5, lsl #10
    112c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1130:	1c0e4301 	stcne	3, cr4, [lr], {1}
    1134:	06890788 	streq	r0, [r9], r8, lsl #15
    1138:	00500e41 	subseq	r0, r0, r1, asr #28
    113c:	0000000c 	andeq	r0, r0, ip
    1140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1144:	7c020001 	stcvc	0, cr0, [r2], {1}
    1148:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    114c:	00000024 	andeq	r0, r0, r4, lsr #32
    1150:	0000113c 	andeq	r1, r0, ip, lsr r1
    1154:	20004614 	andcs	r4, r0, r4, lsl r6
    1158:	00000124 	andeq	r0, r0, r4, lsr #2
    115c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1160:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1164:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1168:	1c0e4301 	stcne	3, cr4, [lr], {1}
    116c:	06890788 	streq	r0, [r9], r8, lsl #15
    1170:	00280e42 	eoreq	r0, r8, r2, asr #28
    1174:	0000000c 	andeq	r0, r0, ip
    1178:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    117c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1180:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1184:	0000000c 	andeq	r0, r0, ip
    1188:	00001174 	andeq	r1, r0, r4, ror r1
    118c:	20004738 	andcs	r4, r0, r8, lsr r7
    1190:	00000004 	andeq	r0, r0, r4
    1194:	0000000c 	andeq	r0, r0, ip
    1198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    119c:	7c020001 	stcvc	0, cr0, [r2], {1}
    11a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11a4:	0000000c 	andeq	r0, r0, ip
    11a8:	00001194 	muleq	r0, r4, r1
    11ac:	2000473c 	andcs	r4, r0, ip, lsr r7
    11b0:	0000000c 	andeq	r0, r0, ip
    11b4:	0000000c 	andeq	r0, r0, ip
    11b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11bc:	7c020001 	stcvc	0, cr0, [r2], {1}
    11c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11c4:	00000028 	andeq	r0, r0, r8, lsr #32
    11c8:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
    11cc:	20004748 	andcs	r4, r0, r8, asr #14
    11d0:	000003ac 	andeq	r0, r0, ip, lsr #7
    11d4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    11d8:	86048505 	strhi	r8, [r4], -r5, lsl #10
    11dc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    11e0:	200e4401 	andcs	r4, lr, r1, lsl #8
    11e4:	07890888 	streq	r0, [r9, r8, lsl #17]
    11e8:	0e42068a 	cdpeq	6, 4, cr0, cr2, cr10, {4}
    11ec:	00000038 	andeq	r0, r0, r8, lsr r0
    11f0:	0000000c 	andeq	r0, r0, ip
    11f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11f8:	7c020001 	stcvc	0, cr0, [r2], {1}
    11fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1200:	00000024 	andeq	r0, r0, r4, lsr #32
    1204:	000011f0 	strdeq	r1, [r0], -r0
    1208:	20003208 	andcs	r3, r0, r8, lsl #4
    120c:	00000638 	andeq	r0, r0, r8, lsr r6
    1210:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1214:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1218:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    121c:	200e4601 	andcs	r4, lr, r1, lsl #12
    1220:	07890888 	streq	r0, [r9, r8, lsl #17]
    1224:	0000068a 	andeq	r0, r0, sl, lsl #13
    1228:	0000000c 	andeq	r0, r0, ip
    122c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1230:	7c020001 	stcvc	0, cr0, [r2], {1}
    1234:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1238:	00000028 	andeq	r0, r0, r8, lsr #32
    123c:	00001228 	andeq	r1, r0, r8, lsr #4
    1240:	20003840 	andcs	r3, r0, r0, asr #16
    1244:	00000604 	andeq	r0, r0, r4, lsl #12
    1248:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    124c:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1250:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1254:	240e4501 	strcs	r4, [lr], #-1281	; 0xfffffaff
    1258:	08890988 	stmeq	r9, {r3, r7, r8, fp}
    125c:	068b078a 	streq	r0, [fp], sl, lsl #15
    1260:	00380e45 	eorseq	r0, r8, r5, asr #28
    1264:	0000000c 	andeq	r0, r0, ip
    1268:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    126c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1270:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1274:	00000028 	andeq	r0, r0, r8, lsr #32
    1278:	00001264 	andeq	r1, r0, r4, ror #4
    127c:	20003e44 	andcs	r3, r0, r4, asr #28
    1280:	000004e4 	andeq	r0, r0, r4, ror #9
    1284:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1288:	86048505 	strhi	r8, [r4], -r5, lsl #10
    128c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1290:	240e4501 	strcs	r4, [lr], #-1281	; 0xfffffaff
    1294:	08890988 	stmeq	r9, {r3, r7, r8, fp}
    1298:	068b078a 	streq	r0, [fp], sl, lsl #15
    129c:	00400e45 	subeq	r0, r0, r5, asr #28
    12a0:	0000000c 	andeq	r0, r0, ip
    12a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12a8:	7c020001 	stcvc	0, cr0, [r2], {1}
    12ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12b0:	00000018 	andeq	r0, r0, r8, lsl r0
    12b4:	000012a0 	andeq	r1, r0, r0, lsr #5
    12b8:	20004328 	andcs	r4, r0, r8, lsr #6
    12bc:	00000038 	andeq	r0, r0, r8, lsr r0
    12c0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    12c4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    12c8:	00018e02 	andeq	r8, r1, r2, lsl #28
    12cc:	0000000c 	andeq	r0, r0, ip
    12d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12d4:	7c020001 	stcvc	0, cr0, [r2], {1}
    12d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12dc:	00000018 	andeq	r0, r0, r8, lsl r0
    12e0:	000012cc 	andeq	r1, r0, ip, asr #5
    12e4:	20004360 	andcs	r4, r0, r0, ror #6
    12e8:	00000074 	andeq	r0, r0, r4, ror r0
    12ec:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    12f0:	86038504 	strhi	r8, [r3], -r4, lsl #10
    12f4:	00018e02 	andeq	r8, r1, r2, lsl #28
    12f8:	0000000c 	andeq	r0, r0, ip
    12fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1300:	7c020001 	stcvc	0, cr0, [r2], {1}
    1304:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1308:	0000000c 	andeq	r0, r0, ip
    130c:	000012f8 	strdeq	r1, [r0], -r8
    1310:	20004af4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
    1314:	0000000c 	andeq	r0, r0, ip
