
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "stm32f4xx_rng.h"
void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f002 fdfa 	bl	20002bfc <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <CAN_DeInit>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
20000018:	687b      	ldr	r3, [r7, #4]
2000001a:	4a10      	ldr	r2, [pc, #64]	; (2000005c <CAN_DeInit+0x4c>)
2000001c:	4293      	cmp	r3, r2
2000001e:	d10c      	bne.n	2000003a <CAN_DeInit+0x2a>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
20000020:	2380      	movs	r3, #128	; 0x80
20000022:	049b      	lsls	r3, r3, #18
20000024:	2101      	movs	r1, #1
20000026:	0018      	movs	r0, r3
20000028:	f002 fb12 	bl	20002650 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
2000002c:	2380      	movs	r3, #128	; 0x80
2000002e:	049b      	lsls	r3, r3, #18
20000030:	2100      	movs	r1, #0
20000032:	0018      	movs	r0, r3
20000034:	f002 fb0c 	bl	20002650 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  }
#endif /* STM32F413_423xx */
}
20000038:	e00b      	b.n	20000052 <CAN_DeInit+0x42>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
2000003a:	2380      	movs	r3, #128	; 0x80
2000003c:	04db      	lsls	r3, r3, #19
2000003e:	2101      	movs	r1, #1
20000040:	0018      	movs	r0, r3
20000042:	f002 fb05 	bl	20002650 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
20000046:	2380      	movs	r3, #128	; 0x80
20000048:	04db      	lsls	r3, r3, #19
2000004a:	2100      	movs	r1, #0
2000004c:	0018      	movs	r0, r3
2000004e:	f002 faff 	bl	20002650 <RCC_APB1PeriphResetCmd>
}
20000052:	46c0      	nop			; (mov r8, r8)
20000054:	46bd      	mov	sp, r7
20000056:	b002      	add	sp, #8
20000058:	bd80      	pop	{r7, pc}
2000005a:	46c0      	nop			; (mov r8, r8)
2000005c:	40006400 	andmi	r6, r0, r0, lsl #8

20000060 <CAN_Init>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
20000060:	b580      	push	{r7, lr}
20000062:	b084      	sub	sp, #16
20000064:	af00      	add	r7, sp, #0
20000066:	6078      	str	r0, [r7, #4]
20000068:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
2000006a:	230f      	movs	r3, #15
2000006c:	18fb      	adds	r3, r7, r3
2000006e:	2200      	movs	r2, #0
20000070:	701a      	strb	r2, [r3, #0]
  uint32_t wait_ack = 0x00000000;
20000072:	2300      	movs	r3, #0
20000074:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
20000076:	687b      	ldr	r3, [r7, #4]
20000078:	681b      	ldr	r3, [r3, #0]
2000007a:	2202      	movs	r2, #2
2000007c:	4393      	bics	r3, r2
2000007e:	001a      	movs	r2, r3
20000080:	687b      	ldr	r3, [r7, #4]
20000082:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
20000084:	687b      	ldr	r3, [r7, #4]
20000086:	681b      	ldr	r3, [r3, #0]
20000088:	2201      	movs	r2, #1
2000008a:	431a      	orrs	r2, r3
2000008c:	687b      	ldr	r3, [r7, #4]
2000008e:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
20000090:	e002      	b.n	20000098 <CAN_Init+0x38>
  {
    wait_ack++;
20000092:	68bb      	ldr	r3, [r7, #8]
20000094:	3301      	adds	r3, #1
20000096:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
20000098:	687b      	ldr	r3, [r7, #4]
2000009a:	685b      	ldr	r3, [r3, #4]
2000009c:	2201      	movs	r2, #1
2000009e:	4013      	ands	r3, r2
200000a0:	2b01      	cmp	r3, #1
200000a2:	d003      	beq.n	200000ac <CAN_Init+0x4c>
200000a4:	68bb      	ldr	r3, [r7, #8]
200000a6:	4a5e      	ldr	r2, [pc, #376]	; (20000220 <CAN_Init+0x1c0>)
200000a8:	4293      	cmp	r3, r2
200000aa:	d1f2      	bne.n	20000092 <CAN_Init+0x32>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	685b      	ldr	r3, [r3, #4]
200000b0:	2201      	movs	r2, #1
200000b2:	4013      	ands	r3, r2
200000b4:	2b01      	cmp	r3, #1
200000b6:	d004      	beq.n	200000c2 <CAN_Init+0x62>
  {
    InitStatus = CAN_InitStatus_Failed;
200000b8:	230f      	movs	r3, #15
200000ba:	18fb      	adds	r3, r7, r3
200000bc:	2200      	movs	r2, #0
200000be:	701a      	strb	r2, [r3, #0]
200000c0:	e0a6      	b.n	20000210 <CAN_Init+0x1b0>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
200000c2:	683b      	ldr	r3, [r7, #0]
200000c4:	799b      	ldrb	r3, [r3, #6]
200000c6:	2b01      	cmp	r3, #1
200000c8:	d106      	bne.n	200000d8 <CAN_Init+0x78>
    {
      CANx->MCR |= CAN_MCR_TTCM;
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	681b      	ldr	r3, [r3, #0]
200000ce:	2280      	movs	r2, #128	; 0x80
200000d0:	431a      	orrs	r2, r3
200000d2:	687b      	ldr	r3, [r7, #4]
200000d4:	601a      	str	r2, [r3, #0]
200000d6:	e006      	b.n	200000e6 <CAN_Init+0x86>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
200000d8:	687b      	ldr	r3, [r7, #4]
200000da:	681b      	ldr	r3, [r3, #0]
200000dc:	2280      	movs	r2, #128	; 0x80
200000de:	4393      	bics	r3, r2
200000e0:	001a      	movs	r2, r3
200000e2:	687b      	ldr	r3, [r7, #4]
200000e4:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
200000e6:	683b      	ldr	r3, [r7, #0]
200000e8:	79db      	ldrb	r3, [r3, #7]
200000ea:	2b01      	cmp	r3, #1
200000ec:	d106      	bne.n	200000fc <CAN_Init+0x9c>
    {
      CANx->MCR |= CAN_MCR_ABOM;
200000ee:	687b      	ldr	r3, [r7, #4]
200000f0:	681b      	ldr	r3, [r3, #0]
200000f2:	2240      	movs	r2, #64	; 0x40
200000f4:	431a      	orrs	r2, r3
200000f6:	687b      	ldr	r3, [r7, #4]
200000f8:	601a      	str	r2, [r3, #0]
200000fa:	e006      	b.n	2000010a <CAN_Init+0xaa>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
200000fc:	687b      	ldr	r3, [r7, #4]
200000fe:	681b      	ldr	r3, [r3, #0]
20000100:	2240      	movs	r2, #64	; 0x40
20000102:	4393      	bics	r3, r2
20000104:	001a      	movs	r2, r3
20000106:	687b      	ldr	r3, [r7, #4]
20000108:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
2000010a:	683b      	ldr	r3, [r7, #0]
2000010c:	7a1b      	ldrb	r3, [r3, #8]
2000010e:	2b01      	cmp	r3, #1
20000110:	d106      	bne.n	20000120 <CAN_Init+0xc0>
    {
      CANx->MCR |= CAN_MCR_AWUM;
20000112:	687b      	ldr	r3, [r7, #4]
20000114:	681b      	ldr	r3, [r3, #0]
20000116:	2220      	movs	r2, #32
20000118:	431a      	orrs	r2, r3
2000011a:	687b      	ldr	r3, [r7, #4]
2000011c:	601a      	str	r2, [r3, #0]
2000011e:	e006      	b.n	2000012e <CAN_Init+0xce>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
20000120:	687b      	ldr	r3, [r7, #4]
20000122:	681b      	ldr	r3, [r3, #0]
20000124:	2220      	movs	r2, #32
20000126:	4393      	bics	r3, r2
20000128:	001a      	movs	r2, r3
2000012a:	687b      	ldr	r3, [r7, #4]
2000012c:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
2000012e:	683b      	ldr	r3, [r7, #0]
20000130:	7a5b      	ldrb	r3, [r3, #9]
20000132:	2b01      	cmp	r3, #1
20000134:	d106      	bne.n	20000144 <CAN_Init+0xe4>
    {
      CANx->MCR |= CAN_MCR_NART;
20000136:	687b      	ldr	r3, [r7, #4]
20000138:	681b      	ldr	r3, [r3, #0]
2000013a:	2210      	movs	r2, #16
2000013c:	431a      	orrs	r2, r3
2000013e:	687b      	ldr	r3, [r7, #4]
20000140:	601a      	str	r2, [r3, #0]
20000142:	e006      	b.n	20000152 <CAN_Init+0xf2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
20000144:	687b      	ldr	r3, [r7, #4]
20000146:	681b      	ldr	r3, [r3, #0]
20000148:	2210      	movs	r2, #16
2000014a:	4393      	bics	r3, r2
2000014c:	001a      	movs	r2, r3
2000014e:	687b      	ldr	r3, [r7, #4]
20000150:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
20000152:	683b      	ldr	r3, [r7, #0]
20000154:	7a9b      	ldrb	r3, [r3, #10]
20000156:	2b01      	cmp	r3, #1
20000158:	d106      	bne.n	20000168 <CAN_Init+0x108>
    {
      CANx->MCR |= CAN_MCR_RFLM;
2000015a:	687b      	ldr	r3, [r7, #4]
2000015c:	681b      	ldr	r3, [r3, #0]
2000015e:	2208      	movs	r2, #8
20000160:	431a      	orrs	r2, r3
20000162:	687b      	ldr	r3, [r7, #4]
20000164:	601a      	str	r2, [r3, #0]
20000166:	e006      	b.n	20000176 <CAN_Init+0x116>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
20000168:	687b      	ldr	r3, [r7, #4]
2000016a:	681b      	ldr	r3, [r3, #0]
2000016c:	2208      	movs	r2, #8
2000016e:	4393      	bics	r3, r2
20000170:	001a      	movs	r2, r3
20000172:	687b      	ldr	r3, [r7, #4]
20000174:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
20000176:	683b      	ldr	r3, [r7, #0]
20000178:	7adb      	ldrb	r3, [r3, #11]
2000017a:	2b01      	cmp	r3, #1
2000017c:	d106      	bne.n	2000018c <CAN_Init+0x12c>
    {
      CANx->MCR |= CAN_MCR_TXFP;
2000017e:	687b      	ldr	r3, [r7, #4]
20000180:	681b      	ldr	r3, [r3, #0]
20000182:	2204      	movs	r2, #4
20000184:	431a      	orrs	r2, r3
20000186:	687b      	ldr	r3, [r7, #4]
20000188:	601a      	str	r2, [r3, #0]
2000018a:	e006      	b.n	2000019a <CAN_Init+0x13a>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
2000018c:	687b      	ldr	r3, [r7, #4]
2000018e:	681b      	ldr	r3, [r3, #0]
20000190:	2204      	movs	r2, #4
20000192:	4393      	bics	r3, r2
20000194:	001a      	movs	r2, r3
20000196:	687b      	ldr	r3, [r7, #4]
20000198:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
2000019a:	683b      	ldr	r3, [r7, #0]
2000019c:	789b      	ldrb	r3, [r3, #2]
2000019e:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
200001a0:	683b      	ldr	r3, [r7, #0]
200001a2:	78db      	ldrb	r3, [r3, #3]
200001a4:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
200001a6:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
200001a8:	683b      	ldr	r3, [r7, #0]
200001aa:	791b      	ldrb	r3, [r3, #4]
200001ac:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
200001ae:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
200001b0:	683b      	ldr	r3, [r7, #0]
200001b2:	795b      	ldrb	r3, [r3, #5]
200001b4:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
200001b6:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
200001b8:	683b      	ldr	r3, [r7, #0]
200001ba:	881b      	ldrh	r3, [r3, #0]
200001bc:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
200001be:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
200001c0:	687b      	ldr	r3, [r7, #4]
200001c2:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	681b      	ldr	r3, [r3, #0]
200001c8:	2201      	movs	r2, #1
200001ca:	4393      	bics	r3, r2
200001cc:	001a      	movs	r2, r3
200001ce:	687b      	ldr	r3, [r7, #4]
200001d0:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
200001d2:	2300      	movs	r3, #0
200001d4:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
200001d6:	e002      	b.n	200001de <CAN_Init+0x17e>
   {
     wait_ack++;
200001d8:	68bb      	ldr	r3, [r7, #8]
200001da:	3301      	adds	r3, #1
200001dc:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
200001de:	687b      	ldr	r3, [r7, #4]
200001e0:	685b      	ldr	r3, [r3, #4]
200001e2:	2201      	movs	r2, #1
200001e4:	4013      	ands	r3, r2
200001e6:	2b01      	cmp	r3, #1
200001e8:	d103      	bne.n	200001f2 <CAN_Init+0x192>
200001ea:	68bb      	ldr	r3, [r7, #8]
200001ec:	4a0c      	ldr	r2, [pc, #48]	; (20000220 <CAN_Init+0x1c0>)
200001ee:	4293      	cmp	r3, r2
200001f0:	d1f2      	bne.n	200001d8 <CAN_Init+0x178>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
200001f2:	687b      	ldr	r3, [r7, #4]
200001f4:	685b      	ldr	r3, [r3, #4]
200001f6:	2201      	movs	r2, #1
200001f8:	4013      	ands	r3, r2
200001fa:	2b01      	cmp	r3, #1
200001fc:	d104      	bne.n	20000208 <CAN_Init+0x1a8>
    {
      InitStatus = CAN_InitStatus_Failed;
200001fe:	230f      	movs	r3, #15
20000200:	18fb      	adds	r3, r7, r3
20000202:	2200      	movs	r2, #0
20000204:	701a      	strb	r2, [r3, #0]
20000206:	e003      	b.n	20000210 <CAN_Init+0x1b0>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
20000208:	230f      	movs	r3, #15
2000020a:	18fb      	adds	r3, r7, r3
2000020c:	2201      	movs	r2, #1
2000020e:	701a      	strb	r2, [r3, #0]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
20000210:	230f      	movs	r3, #15
20000212:	18fb      	adds	r3, r7, r3
20000214:	781b      	ldrb	r3, [r3, #0]
}
20000216:	0018      	movs	r0, r3
20000218:	46bd      	mov	sp, r7
2000021a:	b004      	add	sp, #16
2000021c:	bd80      	pop	{r7, pc}
2000021e:	46c0      	nop			; (mov r8, r8)
20000220:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20000224 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
20000224:	b590      	push	{r4, r7, lr}
20000226:	b085      	sub	sp, #20
20000228:	af00      	add	r7, sp, #0
2000022a:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
2000022c:	2300      	movs	r3, #0
2000022e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
20000230:	687b      	ldr	r3, [r7, #4]
20000232:	7a9b      	ldrb	r3, [r3, #10]
20000234:	001a      	movs	r2, r3
20000236:	2301      	movs	r3, #1
20000238:	4093      	lsls	r3, r2
2000023a:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
2000023c:	4a64      	ldr	r2, [pc, #400]	; (200003d0 <CAN_FilterInit+0x1ac>)
2000023e:	2380      	movs	r3, #128	; 0x80
20000240:	009b      	lsls	r3, r3, #2
20000242:	58d3      	ldr	r3, [r2, r3]
20000244:	4962      	ldr	r1, [pc, #392]	; (200003d0 <CAN_FilterInit+0x1ac>)
20000246:	2201      	movs	r2, #1
20000248:	431a      	orrs	r2, r3
2000024a:	2380      	movs	r3, #128	; 0x80
2000024c:	009b      	lsls	r3, r3, #2
2000024e:	50ca      	str	r2, [r1, r3]

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
20000250:	4a5f      	ldr	r2, [pc, #380]	; (200003d0 <CAN_FilterInit+0x1ac>)
20000252:	2387      	movs	r3, #135	; 0x87
20000254:	009b      	lsls	r3, r3, #2
20000256:	58d3      	ldr	r3, [r2, r3]
20000258:	68fa      	ldr	r2, [r7, #12]
2000025a:	43d2      	mvns	r2, r2
2000025c:	495c      	ldr	r1, [pc, #368]	; (200003d0 <CAN_FilterInit+0x1ac>)
2000025e:	401a      	ands	r2, r3
20000260:	2387      	movs	r3, #135	; 0x87
20000262:	009b      	lsls	r3, r3, #2
20000264:	50ca      	str	r2, [r1, r3]

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
20000266:	687b      	ldr	r3, [r7, #4]
20000268:	7b1b      	ldrb	r3, [r3, #12]
2000026a:	2b00      	cmp	r3, #0
2000026c:	d12c      	bne.n	200002c8 <CAN_FilterInit+0xa4>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
2000026e:	4a58      	ldr	r2, [pc, #352]	; (200003d0 <CAN_FilterInit+0x1ac>)
20000270:	2383      	movs	r3, #131	; 0x83
20000272:	009b      	lsls	r3, r3, #2
20000274:	58d3      	ldr	r3, [r2, r3]
20000276:	68fa      	ldr	r2, [r7, #12]
20000278:	43d2      	mvns	r2, r2
2000027a:	4955      	ldr	r1, [pc, #340]	; (200003d0 <CAN_FilterInit+0x1ac>)
2000027c:	401a      	ands	r2, r3
2000027e:	2383      	movs	r3, #131	; 0x83
20000280:	009b      	lsls	r3, r3, #2
20000282:	50ca      	str	r2, [r1, r3]

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
20000284:	687b      	ldr	r3, [r7, #4]
20000286:	88db      	ldrh	r3, [r3, #6]
20000288:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
2000028a:	687a      	ldr	r2, [r7, #4]
2000028c:	8852      	ldrh	r2, [r2, #2]
2000028e:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20000290:	494f      	ldr	r1, [pc, #316]	; (200003d0 <CAN_FilterInit+0x1ac>)
20000292:	687a      	ldr	r2, [r7, #4]
20000294:	7a92      	ldrb	r2, [r2, #10]
20000296:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
20000298:	4323      	orrs	r3, r4
2000029a:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
2000029c:	0003      	movs	r3, r0
2000029e:	3348      	adds	r3, #72	; 0x48
200002a0:	00db      	lsls	r3, r3, #3
200002a2:	505a      	str	r2, [r3, r1]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
200002a4:	687b      	ldr	r3, [r7, #4]
200002a6:	889b      	ldrh	r3, [r3, #4]
200002a8:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
200002aa:	687a      	ldr	r2, [r7, #4]
200002ac:	8812      	ldrh	r2, [r2, #0]
200002ae:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
200002b0:	4947      	ldr	r1, [pc, #284]	; (200003d0 <CAN_FilterInit+0x1ac>)
200002b2:	687a      	ldr	r2, [r7, #4]
200002b4:	7a92      	ldrb	r2, [r2, #10]
200002b6:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
200002b8:	4323      	orrs	r3, r4
200002ba:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
200002bc:	0003      	movs	r3, r0
200002be:	3348      	adds	r3, #72	; 0x48
200002c0:	00db      	lsls	r3, r3, #3
200002c2:	18cb      	adds	r3, r1, r3
200002c4:	3304      	adds	r3, #4
200002c6:	601a      	str	r2, [r3, #0]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
200002c8:	687b      	ldr	r3, [r7, #4]
200002ca:	7b1b      	ldrb	r3, [r3, #12]
200002cc:	2b01      	cmp	r3, #1
200002ce:	d12b      	bne.n	20000328 <CAN_FilterInit+0x104>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
200002d0:	4a3f      	ldr	r2, [pc, #252]	; (200003d0 <CAN_FilterInit+0x1ac>)
200002d2:	2383      	movs	r3, #131	; 0x83
200002d4:	009b      	lsls	r3, r3, #2
200002d6:	58d2      	ldr	r2, [r2, r3]
200002d8:	493d      	ldr	r1, [pc, #244]	; (200003d0 <CAN_FilterInit+0x1ac>)
200002da:	68fb      	ldr	r3, [r7, #12]
200002dc:	431a      	orrs	r2, r3
200002de:	2383      	movs	r3, #131	; 0x83
200002e0:	009b      	lsls	r3, r3, #2
200002e2:	50ca      	str	r2, [r1, r3]
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
200002e4:	687b      	ldr	r3, [r7, #4]
200002e6:	881b      	ldrh	r3, [r3, #0]
200002e8:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
200002ea:	687a      	ldr	r2, [r7, #4]
200002ec:	8852      	ldrh	r2, [r2, #2]
200002ee:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
200002f0:	4937      	ldr	r1, [pc, #220]	; (200003d0 <CAN_FilterInit+0x1ac>)
200002f2:	687a      	ldr	r2, [r7, #4]
200002f4:	7a92      	ldrb	r2, [r2, #10]
200002f6:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
200002f8:	4323      	orrs	r3, r4
200002fa:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
200002fc:	0003      	movs	r3, r0
200002fe:	3348      	adds	r3, #72	; 0x48
20000300:	00db      	lsls	r3, r3, #3
20000302:	505a      	str	r2, [r3, r1]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20000304:	687b      	ldr	r3, [r7, #4]
20000306:	889b      	ldrh	r3, [r3, #4]
20000308:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
2000030a:	687a      	ldr	r2, [r7, #4]
2000030c:	88d2      	ldrh	r2, [r2, #6]
2000030e:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20000310:	492f      	ldr	r1, [pc, #188]	; (200003d0 <CAN_FilterInit+0x1ac>)
20000312:	687a      	ldr	r2, [r7, #4]
20000314:	7a92      	ldrb	r2, [r2, #10]
20000316:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20000318:	4323      	orrs	r3, r4
2000031a:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
2000031c:	0003      	movs	r3, r0
2000031e:	3348      	adds	r3, #72	; 0x48
20000320:	00db      	lsls	r3, r3, #3
20000322:	18cb      	adds	r3, r1, r3
20000324:	3304      	adds	r3, #4
20000326:	601a      	str	r2, [r3, #0]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
20000328:	687b      	ldr	r3, [r7, #4]
2000032a:	7adb      	ldrb	r3, [r3, #11]
2000032c:	2b00      	cmp	r3, #0
2000032e:	d10b      	bne.n	20000348 <CAN_FilterInit+0x124>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
20000330:	4a27      	ldr	r2, [pc, #156]	; (200003d0 <CAN_FilterInit+0x1ac>)
20000332:	2381      	movs	r3, #129	; 0x81
20000334:	009b      	lsls	r3, r3, #2
20000336:	58d3      	ldr	r3, [r2, r3]
20000338:	68fa      	ldr	r2, [r7, #12]
2000033a:	43d2      	mvns	r2, r2
2000033c:	4924      	ldr	r1, [pc, #144]	; (200003d0 <CAN_FilterInit+0x1ac>)
2000033e:	401a      	ands	r2, r3
20000340:	2381      	movs	r3, #129	; 0x81
20000342:	009b      	lsls	r3, r3, #2
20000344:	50ca      	str	r2, [r1, r3]
20000346:	e009      	b.n	2000035c <CAN_FilterInit+0x138>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
20000348:	4a21      	ldr	r2, [pc, #132]	; (200003d0 <CAN_FilterInit+0x1ac>)
2000034a:	2381      	movs	r3, #129	; 0x81
2000034c:	009b      	lsls	r3, r3, #2
2000034e:	58d2      	ldr	r2, [r2, r3]
20000350:	491f      	ldr	r1, [pc, #124]	; (200003d0 <CAN_FilterInit+0x1ac>)
20000352:	68fb      	ldr	r3, [r7, #12]
20000354:	431a      	orrs	r2, r3
20000356:	2381      	movs	r3, #129	; 0x81
20000358:	009b      	lsls	r3, r3, #2
2000035a:	50ca      	str	r2, [r1, r3]
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
2000035c:	687b      	ldr	r3, [r7, #4]
2000035e:	891b      	ldrh	r3, [r3, #8]
20000360:	2b00      	cmp	r3, #0
20000362:	d10a      	bne.n	2000037a <CAN_FilterInit+0x156>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
20000364:	4a1a      	ldr	r2, [pc, #104]	; (200003d0 <CAN_FilterInit+0x1ac>)
20000366:	2385      	movs	r3, #133	; 0x85
20000368:	009b      	lsls	r3, r3, #2
2000036a:	58d3      	ldr	r3, [r2, r3]
2000036c:	68fa      	ldr	r2, [r7, #12]
2000036e:	43d2      	mvns	r2, r2
20000370:	4917      	ldr	r1, [pc, #92]	; (200003d0 <CAN_FilterInit+0x1ac>)
20000372:	401a      	ands	r2, r3
20000374:	2385      	movs	r3, #133	; 0x85
20000376:	009b      	lsls	r3, r3, #2
20000378:	50ca      	str	r2, [r1, r3]
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
2000037a:	687b      	ldr	r3, [r7, #4]
2000037c:	891b      	ldrh	r3, [r3, #8]
2000037e:	2b01      	cmp	r3, #1
20000380:	d109      	bne.n	20000396 <CAN_FilterInit+0x172>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
20000382:	4a13      	ldr	r2, [pc, #76]	; (200003d0 <CAN_FilterInit+0x1ac>)
20000384:	2385      	movs	r3, #133	; 0x85
20000386:	009b      	lsls	r3, r3, #2
20000388:	58d2      	ldr	r2, [r2, r3]
2000038a:	4911      	ldr	r1, [pc, #68]	; (200003d0 <CAN_FilterInit+0x1ac>)
2000038c:	68fb      	ldr	r3, [r7, #12]
2000038e:	431a      	orrs	r2, r3
20000390:	2385      	movs	r3, #133	; 0x85
20000392:	009b      	lsls	r3, r3, #2
20000394:	50ca      	str	r2, [r1, r3]
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
20000396:	687b      	ldr	r3, [r7, #4]
20000398:	7b5b      	ldrb	r3, [r3, #13]
2000039a:	2b01      	cmp	r3, #1
2000039c:	d109      	bne.n	200003b2 <CAN_FilterInit+0x18e>
  {
    CAN1->FA1R |= filter_number_bit_pos;
2000039e:	4a0c      	ldr	r2, [pc, #48]	; (200003d0 <CAN_FilterInit+0x1ac>)
200003a0:	2387      	movs	r3, #135	; 0x87
200003a2:	009b      	lsls	r3, r3, #2
200003a4:	58d2      	ldr	r2, [r2, r3]
200003a6:	490a      	ldr	r1, [pc, #40]	; (200003d0 <CAN_FilterInit+0x1ac>)
200003a8:	68fb      	ldr	r3, [r7, #12]
200003aa:	431a      	orrs	r2, r3
200003ac:	2387      	movs	r3, #135	; 0x87
200003ae:	009b      	lsls	r3, r3, #2
200003b0:	50ca      	str	r2, [r1, r3]
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
200003b2:	4a07      	ldr	r2, [pc, #28]	; (200003d0 <CAN_FilterInit+0x1ac>)
200003b4:	2380      	movs	r3, #128	; 0x80
200003b6:	009b      	lsls	r3, r3, #2
200003b8:	58d3      	ldr	r3, [r2, r3]
200003ba:	4905      	ldr	r1, [pc, #20]	; (200003d0 <CAN_FilterInit+0x1ac>)
200003bc:	2201      	movs	r2, #1
200003be:	4393      	bics	r3, r2
200003c0:	001a      	movs	r2, r3
200003c2:	2380      	movs	r3, #128	; 0x80
200003c4:	009b      	lsls	r3, r3, #2
200003c6:	50ca      	str	r2, [r1, r3]
}
200003c8:	46c0      	nop			; (mov r8, r8)
200003ca:	46bd      	mov	sp, r7
200003cc:	b005      	add	sp, #20
200003ce:	bd90      	pop	{r4, r7, pc}
200003d0:	40006400 	andmi	r6, r0, r0, lsl #8

200003d4 <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
200003d4:	b580      	push	{r7, lr}
200003d6:	b082      	sub	sp, #8
200003d8:	af00      	add	r7, sp, #0
200003da:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
200003dc:	687b      	ldr	r3, [r7, #4]
200003de:	2200      	movs	r2, #0
200003e0:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
200003e2:	687b      	ldr	r3, [r7, #4]
200003e4:	2200      	movs	r2, #0
200003e6:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
200003e8:	687b      	ldr	r3, [r7, #4]
200003ea:	2200      	movs	r2, #0
200003ec:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
200003ee:	687b      	ldr	r3, [r7, #4]
200003f0:	2200      	movs	r2, #0
200003f2:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
200003f4:	687b      	ldr	r3, [r7, #4]
200003f6:	2200      	movs	r2, #0
200003f8:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
200003fa:	687b      	ldr	r3, [r7, #4]
200003fc:	2200      	movs	r2, #0
200003fe:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
20000400:	687b      	ldr	r3, [r7, #4]
20000402:	2200      	movs	r2, #0
20000404:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
20000406:	687b      	ldr	r3, [r7, #4]
20000408:	2200      	movs	r2, #0
2000040a:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
2000040c:	687b      	ldr	r3, [r7, #4]
2000040e:	2203      	movs	r2, #3
20000410:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
20000412:	687b      	ldr	r3, [r7, #4]
20000414:	2202      	movs	r2, #2
20000416:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
20000418:	687b      	ldr	r3, [r7, #4]
2000041a:	2201      	movs	r2, #1
2000041c:	801a      	strh	r2, [r3, #0]
}
2000041e:	46c0      	nop			; (mov r8, r8)
20000420:	46bd      	mov	sp, r7
20000422:	b002      	add	sp, #8
20000424:	bd80      	pop	{r7, pc}

20000426 <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
20000426:	b580      	push	{r7, lr}
20000428:	b082      	sub	sp, #8
2000042a:	af00      	add	r7, sp, #0
2000042c:	0002      	movs	r2, r0
2000042e:	1dfb      	adds	r3, r7, #7
20000430:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
20000432:	4a17      	ldr	r2, [pc, #92]	; (20000490 <CAN_SlaveStartBank+0x6a>)
20000434:	2380      	movs	r3, #128	; 0x80
20000436:	009b      	lsls	r3, r3, #2
20000438:	58d3      	ldr	r3, [r2, r3]
2000043a:	4915      	ldr	r1, [pc, #84]	; (20000490 <CAN_SlaveStartBank+0x6a>)
2000043c:	2201      	movs	r2, #1
2000043e:	431a      	orrs	r2, r3
20000440:	2380      	movs	r3, #128	; 0x80
20000442:	009b      	lsls	r3, r3, #2
20000444:	50ca      	str	r2, [r1, r3]
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
20000446:	4a12      	ldr	r2, [pc, #72]	; (20000490 <CAN_SlaveStartBank+0x6a>)
20000448:	2380      	movs	r3, #128	; 0x80
2000044a:	009b      	lsls	r3, r3, #2
2000044c:	58d3      	ldr	r3, [r2, r3]
2000044e:	4910      	ldr	r1, [pc, #64]	; (20000490 <CAN_SlaveStartBank+0x6a>)
20000450:	4a10      	ldr	r2, [pc, #64]	; (20000494 <CAN_SlaveStartBank+0x6e>)
20000452:	401a      	ands	r2, r3
20000454:	2380      	movs	r3, #128	; 0x80
20000456:	009b      	lsls	r3, r3, #2
20000458:	50ca      	str	r2, [r1, r3]
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
2000045a:	4a0d      	ldr	r2, [pc, #52]	; (20000490 <CAN_SlaveStartBank+0x6a>)
2000045c:	2380      	movs	r3, #128	; 0x80
2000045e:	009b      	lsls	r3, r3, #2
20000460:	58d2      	ldr	r2, [r2, r3]
20000462:	1dfb      	adds	r3, r7, #7
20000464:	781b      	ldrb	r3, [r3, #0]
20000466:	021b      	lsls	r3, r3, #8
20000468:	4909      	ldr	r1, [pc, #36]	; (20000490 <CAN_SlaveStartBank+0x6a>)
2000046a:	431a      	orrs	r2, r3
2000046c:	2380      	movs	r3, #128	; 0x80
2000046e:	009b      	lsls	r3, r3, #2
20000470:	50ca      	str	r2, [r1, r3]
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
20000472:	4a07      	ldr	r2, [pc, #28]	; (20000490 <CAN_SlaveStartBank+0x6a>)
20000474:	2380      	movs	r3, #128	; 0x80
20000476:	009b      	lsls	r3, r3, #2
20000478:	58d3      	ldr	r3, [r2, r3]
2000047a:	4905      	ldr	r1, [pc, #20]	; (20000490 <CAN_SlaveStartBank+0x6a>)
2000047c:	2201      	movs	r2, #1
2000047e:	4393      	bics	r3, r2
20000480:	001a      	movs	r2, r3
20000482:	2380      	movs	r3, #128	; 0x80
20000484:	009b      	lsls	r3, r3, #2
20000486:	50ca      	str	r2, [r1, r3]
}
20000488:	46c0      	nop			; (mov r8, r8)
2000048a:	46bd      	mov	sp, r7
2000048c:	b002      	add	sp, #8
2000048e:	bd80      	pop	{r7, pc}
20000490:	40006400 	andmi	r6, r0, r0, lsl #8
20000494:	ffffc0f1 			; <UNDEFINED> instruction: 0xffffc0f1

20000498 <CAN_DBGFreeze>:
  *          or DISABLE (CAN is working during debug).
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
20000498:	b580      	push	{r7, lr}
2000049a:	b082      	sub	sp, #8
2000049c:	af00      	add	r7, sp, #0
2000049e:	6078      	str	r0, [r7, #4]
200004a0:	000a      	movs	r2, r1
200004a2:	1cfb      	adds	r3, r7, #3
200004a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
200004a6:	1cfb      	adds	r3, r7, #3
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	2b00      	cmp	r3, #0
200004ac:	d007      	beq.n	200004be <CAN_DBGFreeze+0x26>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
200004ae:	687b      	ldr	r3, [r7, #4]
200004b0:	681b      	ldr	r3, [r3, #0]
200004b2:	2280      	movs	r2, #128	; 0x80
200004b4:	0252      	lsls	r2, r2, #9
200004b6:	431a      	orrs	r2, r3
200004b8:	687b      	ldr	r3, [r7, #4]
200004ba:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
  }
}
200004bc:	e005      	b.n	200004ca <CAN_DBGFreeze+0x32>
    CANx->MCR &= ~MCR_DBF;
200004be:	687b      	ldr	r3, [r7, #4]
200004c0:	681b      	ldr	r3, [r3, #0]
200004c2:	4a04      	ldr	r2, [pc, #16]	; (200004d4 <CAN_DBGFreeze+0x3c>)
200004c4:	401a      	ands	r2, r3
200004c6:	687b      	ldr	r3, [r7, #4]
200004c8:	601a      	str	r2, [r3, #0]
}
200004ca:	46c0      	nop			; (mov r8, r8)
200004cc:	46bd      	mov	sp, r7
200004ce:	b002      	add	sp, #8
200004d0:	bd80      	pop	{r7, pc}
200004d2:	46c0      	nop			; (mov r8, r8)
200004d4:	fffeffff 			; <UNDEFINED> instruction: 0xfffeffff

200004d8 <CAN_TTComModeCmd>:
  *         in data byte 7.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
200004d8:	b580      	push	{r7, lr}
200004da:	b082      	sub	sp, #8
200004dc:	af00      	add	r7, sp, #0
200004de:	6078      	str	r0, [r7, #4]
200004e0:	000a      	movs	r2, r1
200004e2:	1cfb      	adds	r3, r7, #3
200004e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200004e6:	1cfb      	adds	r3, r7, #3
200004e8:	781b      	ldrb	r3, [r3, #0]
200004ea:	2b00      	cmp	r3, #0
200004ec:	d02a      	beq.n	20000544 <CAN_TTComModeCmd+0x6c>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
200004ee:	687b      	ldr	r3, [r7, #4]
200004f0:	681b      	ldr	r3, [r3, #0]
200004f2:	2280      	movs	r2, #128	; 0x80
200004f4:	431a      	orrs	r2, r3
200004f6:	687b      	ldr	r3, [r7, #4]
200004f8:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
200004fa:	687a      	ldr	r2, [r7, #4]
200004fc:	23c2      	movs	r3, #194	; 0xc2
200004fe:	005b      	lsls	r3, r3, #1
20000500:	58d3      	ldr	r3, [r2, r3]
20000502:	2280      	movs	r2, #128	; 0x80
20000504:	0052      	lsls	r2, r2, #1
20000506:	431a      	orrs	r2, r3
20000508:	0011      	movs	r1, r2
2000050a:	687a      	ldr	r2, [r7, #4]
2000050c:	23c2      	movs	r3, #194	; 0xc2
2000050e:	005b      	lsls	r3, r3, #1
20000510:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
20000512:	687a      	ldr	r2, [r7, #4]
20000514:	23ca      	movs	r3, #202	; 0xca
20000516:	005b      	lsls	r3, r3, #1
20000518:	58d3      	ldr	r3, [r2, r3]
2000051a:	2280      	movs	r2, #128	; 0x80
2000051c:	0052      	lsls	r2, r2, #1
2000051e:	431a      	orrs	r2, r3
20000520:	0011      	movs	r1, r2
20000522:	687a      	ldr	r2, [r7, #4]
20000524:	23ca      	movs	r3, #202	; 0xca
20000526:	005b      	lsls	r3, r3, #1
20000528:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
2000052a:	687a      	ldr	r2, [r7, #4]
2000052c:	23d2      	movs	r3, #210	; 0xd2
2000052e:	005b      	lsls	r3, r3, #1
20000530:	58d3      	ldr	r3, [r2, r3]
20000532:	2280      	movs	r2, #128	; 0x80
20000534:	0052      	lsls	r2, r2, #1
20000536:	431a      	orrs	r2, r3
20000538:	0011      	movs	r1, r2
2000053a:	687a      	ldr	r2, [r7, #4]
2000053c:	23d2      	movs	r3, #210	; 0xd2
2000053e:	005b      	lsls	r3, r3, #1
20000540:	50d1      	str	r1, [r2, r3]
    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
  }
}
20000542:	e027      	b.n	20000594 <CAN_TTComModeCmd+0xbc>
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
20000544:	687b      	ldr	r3, [r7, #4]
20000546:	681b      	ldr	r3, [r3, #0]
20000548:	2280      	movs	r2, #128	; 0x80
2000054a:	4393      	bics	r3, r2
2000054c:	001a      	movs	r2, r3
2000054e:	687b      	ldr	r3, [r7, #4]
20000550:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
20000552:	687a      	ldr	r2, [r7, #4]
20000554:	23c2      	movs	r3, #194	; 0xc2
20000556:	005b      	lsls	r3, r3, #1
20000558:	58d3      	ldr	r3, [r2, r3]
2000055a:	4a10      	ldr	r2, [pc, #64]	; (2000059c <CAN_TTComModeCmd+0xc4>)
2000055c:	4013      	ands	r3, r2
2000055e:	0019      	movs	r1, r3
20000560:	687a      	ldr	r2, [r7, #4]
20000562:	23c2      	movs	r3, #194	; 0xc2
20000564:	005b      	lsls	r3, r3, #1
20000566:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
20000568:	687a      	ldr	r2, [r7, #4]
2000056a:	23ca      	movs	r3, #202	; 0xca
2000056c:	005b      	lsls	r3, r3, #1
2000056e:	58d3      	ldr	r3, [r2, r3]
20000570:	4a0a      	ldr	r2, [pc, #40]	; (2000059c <CAN_TTComModeCmd+0xc4>)
20000572:	4013      	ands	r3, r2
20000574:	0019      	movs	r1, r3
20000576:	687a      	ldr	r2, [r7, #4]
20000578:	23ca      	movs	r3, #202	; 0xca
2000057a:	005b      	lsls	r3, r3, #1
2000057c:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
2000057e:	687a      	ldr	r2, [r7, #4]
20000580:	23d2      	movs	r3, #210	; 0xd2
20000582:	005b      	lsls	r3, r3, #1
20000584:	58d3      	ldr	r3, [r2, r3]
20000586:	4a05      	ldr	r2, [pc, #20]	; (2000059c <CAN_TTComModeCmd+0xc4>)
20000588:	4013      	ands	r3, r2
2000058a:	0019      	movs	r1, r3
2000058c:	687a      	ldr	r2, [r7, #4]
2000058e:	23d2      	movs	r3, #210	; 0xd2
20000590:	005b      	lsls	r3, r3, #1
20000592:	50d1      	str	r1, [r2, r3]
}
20000594:	46c0      	nop			; (mov r8, r8)
20000596:	46bd      	mov	sp, r7
20000598:	b002      	add	sp, #8
2000059a:	bd80      	pop	{r7, pc}
2000059c:	fffffeff 			; <UNDEFINED> instruction: 0xfffffeff

200005a0 <CAN_Transmit>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
200005a0:	b590      	push	{r4, r7, lr}
200005a2:	b085      	sub	sp, #20
200005a4:	af00      	add	r7, sp, #0
200005a6:	6078      	str	r0, [r7, #4]
200005a8:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
200005aa:	230f      	movs	r3, #15
200005ac:	18fb      	adds	r3, r7, r3
200005ae:	2200      	movs	r2, #0
200005b0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
200005b2:	687b      	ldr	r3, [r7, #4]
200005b4:	689a      	ldr	r2, [r3, #8]
200005b6:	2380      	movs	r3, #128	; 0x80
200005b8:	04db      	lsls	r3, r3, #19
200005ba:	401a      	ands	r2, r3
200005bc:	2380      	movs	r3, #128	; 0x80
200005be:	04db      	lsls	r3, r3, #19
200005c0:	429a      	cmp	r2, r3
200005c2:	d104      	bne.n	200005ce <CAN_Transmit+0x2e>
  {
    transmit_mailbox = 0;
200005c4:	230f      	movs	r3, #15
200005c6:	18fb      	adds	r3, r7, r3
200005c8:	2200      	movs	r2, #0
200005ca:	701a      	strb	r2, [r3, #0]
200005cc:	e01f      	b.n	2000060e <CAN_Transmit+0x6e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
200005ce:	687b      	ldr	r3, [r7, #4]
200005d0:	689a      	ldr	r2, [r3, #8]
200005d2:	2380      	movs	r3, #128	; 0x80
200005d4:	051b      	lsls	r3, r3, #20
200005d6:	401a      	ands	r2, r3
200005d8:	2380      	movs	r3, #128	; 0x80
200005da:	051b      	lsls	r3, r3, #20
200005dc:	429a      	cmp	r2, r3
200005de:	d104      	bne.n	200005ea <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 1;
200005e0:	230f      	movs	r3, #15
200005e2:	18fb      	adds	r3, r7, r3
200005e4:	2201      	movs	r2, #1
200005e6:	701a      	strb	r2, [r3, #0]
200005e8:	e011      	b.n	2000060e <CAN_Transmit+0x6e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
200005ea:	687b      	ldr	r3, [r7, #4]
200005ec:	689a      	ldr	r2, [r3, #8]
200005ee:	2380      	movs	r3, #128	; 0x80
200005f0:	055b      	lsls	r3, r3, #21
200005f2:	401a      	ands	r2, r3
200005f4:	2380      	movs	r3, #128	; 0x80
200005f6:	055b      	lsls	r3, r3, #21
200005f8:	429a      	cmp	r2, r3
200005fa:	d104      	bne.n	20000606 <CAN_Transmit+0x66>
  {
    transmit_mailbox = 2;
200005fc:	230f      	movs	r3, #15
200005fe:	18fb      	adds	r3, r7, r3
20000600:	2202      	movs	r2, #2
20000602:	701a      	strb	r2, [r3, #0]
20000604:	e003      	b.n	2000060e <CAN_Transmit+0x6e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
20000606:	230f      	movs	r3, #15
20000608:	18fb      	adds	r3, r7, r3
2000060a:	2204      	movs	r2, #4
2000060c:	701a      	strb	r2, [r3, #0]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
2000060e:	230f      	movs	r3, #15
20000610:	18fb      	adds	r3, r7, r3
20000612:	781b      	ldrb	r3, [r3, #0]
20000614:	2b04      	cmp	r3, #4
20000616:	d100      	bne.n	2000061a <CAN_Transmit+0x7a>
20000618:	e0ac      	b.n	20000774 <CAN_Transmit+0x1d4>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
2000061a:	210f      	movs	r1, #15
2000061c:	187b      	adds	r3, r7, r1
2000061e:	781a      	ldrb	r2, [r3, #0]
20000620:	687b      	ldr	r3, [r7, #4]
20000622:	3218      	adds	r2, #24
20000624:	0112      	lsls	r2, r2, #4
20000626:	58d3      	ldr	r3, [r2, r3]
20000628:	187a      	adds	r2, r7, r1
2000062a:	7812      	ldrb	r2, [r2, #0]
2000062c:	2101      	movs	r1, #1
2000062e:	4019      	ands	r1, r3
20000630:	687b      	ldr	r3, [r7, #4]
20000632:	3218      	adds	r2, #24
20000634:	0112      	lsls	r2, r2, #4
20000636:	50d1      	str	r1, [r2, r3]
    if (TxMessage->IDE == CAN_Id_Standard)
20000638:	683b      	ldr	r3, [r7, #0]
2000063a:	7a1b      	ldrb	r3, [r3, #8]
2000063c:	2b00      	cmp	r3, #0
2000063e:	d114      	bne.n	2000066a <CAN_Transmit+0xca>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
20000640:	200f      	movs	r0, #15
20000642:	183b      	adds	r3, r7, r0
20000644:	781a      	ldrb	r2, [r3, #0]
20000646:	687b      	ldr	r3, [r7, #4]
20000648:	3218      	adds	r2, #24
2000064a:	0112      	lsls	r2, r2, #4
2000064c:	58d1      	ldr	r1, [r2, r3]
2000064e:	683b      	ldr	r3, [r7, #0]
20000650:	681b      	ldr	r3, [r3, #0]
20000652:	055b      	lsls	r3, r3, #21
                                                  TxMessage->RTR);
20000654:	683a      	ldr	r2, [r7, #0]
20000656:	7a52      	ldrb	r2, [r2, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
20000658:	4313      	orrs	r3, r2
2000065a:	183a      	adds	r2, r7, r0
2000065c:	7812      	ldrb	r2, [r2, #0]
2000065e:	4319      	orrs	r1, r3
20000660:	687b      	ldr	r3, [r7, #4]
20000662:	3218      	adds	r2, #24
20000664:	0112      	lsls	r2, r2, #4
20000666:	50d1      	str	r1, [r2, r3]
20000668:	e016      	b.n	20000698 <CAN_Transmit+0xf8>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
2000066a:	200f      	movs	r0, #15
2000066c:	183b      	adds	r3, r7, r0
2000066e:	781a      	ldrb	r2, [r3, #0]
20000670:	687b      	ldr	r3, [r7, #4]
20000672:	3218      	adds	r2, #24
20000674:	0112      	lsls	r2, r2, #4
20000676:	58d1      	ldr	r1, [r2, r3]
20000678:	683b      	ldr	r3, [r7, #0]
2000067a:	685b      	ldr	r3, [r3, #4]
2000067c:	00db      	lsls	r3, r3, #3
                                                  TxMessage->IDE | \
2000067e:	683a      	ldr	r2, [r7, #0]
20000680:	7a12      	ldrb	r2, [r2, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
20000682:	4313      	orrs	r3, r2
                                                  TxMessage->RTR);
20000684:	683a      	ldr	r2, [r7, #0]
20000686:	7a52      	ldrb	r2, [r2, #9]
                                                  TxMessage->IDE | \
20000688:	4313      	orrs	r3, r2
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
2000068a:	183a      	adds	r2, r7, r0
2000068c:	7812      	ldrb	r2, [r2, #0]
2000068e:	4319      	orrs	r1, r3
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	3218      	adds	r2, #24
20000694:	0112      	lsls	r2, r2, #4
20000696:	50d1      	str	r1, [r2, r3]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
20000698:	683b      	ldr	r3, [r7, #0]
2000069a:	7a9b      	ldrb	r3, [r3, #10]
2000069c:	220f      	movs	r2, #15
2000069e:	4013      	ands	r3, r2
200006a0:	b2da      	uxtb	r2, r3
200006a2:	683b      	ldr	r3, [r7, #0]
200006a4:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
200006a6:	240f      	movs	r4, #15
200006a8:	193b      	adds	r3, r7, r4
200006aa:	781b      	ldrb	r3, [r3, #0]
200006ac:	687a      	ldr	r2, [r7, #4]
200006ae:	3318      	adds	r3, #24
200006b0:	011b      	lsls	r3, r3, #4
200006b2:	18d3      	adds	r3, r2, r3
200006b4:	3304      	adds	r3, #4
200006b6:	681a      	ldr	r2, [r3, #0]
200006b8:	193b      	adds	r3, r7, r4
200006ba:	781b      	ldrb	r3, [r3, #0]
200006bc:	210f      	movs	r1, #15
200006be:	438a      	bics	r2, r1
200006c0:	6879      	ldr	r1, [r7, #4]
200006c2:	3318      	adds	r3, #24
200006c4:	011b      	lsls	r3, r3, #4
200006c6:	18cb      	adds	r3, r1, r3
200006c8:	3304      	adds	r3, #4
200006ca:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
200006cc:	193b      	adds	r3, r7, r4
200006ce:	781b      	ldrb	r3, [r3, #0]
200006d0:	687a      	ldr	r2, [r7, #4]
200006d2:	3318      	adds	r3, #24
200006d4:	011b      	lsls	r3, r3, #4
200006d6:	18d3      	adds	r3, r2, r3
200006d8:	3304      	adds	r3, #4
200006da:	681a      	ldr	r2, [r3, #0]
200006dc:	683b      	ldr	r3, [r7, #0]
200006de:	7a9b      	ldrb	r3, [r3, #10]
200006e0:	0019      	movs	r1, r3
200006e2:	193b      	adds	r3, r7, r4
200006e4:	781b      	ldrb	r3, [r3, #0]
200006e6:	430a      	orrs	r2, r1
200006e8:	6879      	ldr	r1, [r7, #4]
200006ea:	3318      	adds	r3, #24
200006ec:	011b      	lsls	r3, r3, #4
200006ee:	18cb      	adds	r3, r1, r3
200006f0:	3304      	adds	r3, #4
200006f2:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
200006f4:	683b      	ldr	r3, [r7, #0]
200006f6:	7b9b      	ldrb	r3, [r3, #14]
200006f8:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
200006fa:	683b      	ldr	r3, [r7, #0]
200006fc:	7b5b      	ldrb	r3, [r3, #13]
200006fe:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20000700:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
20000702:	683b      	ldr	r3, [r7, #0]
20000704:	7b1b      	ldrb	r3, [r3, #12]
20000706:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
20000708:	4313      	orrs	r3, r2
                                             ((uint32_t)TxMessage->Data[0]));
2000070a:	683a      	ldr	r2, [r7, #0]
2000070c:	7ad2      	ldrb	r2, [r2, #11]
2000070e:	0010      	movs	r0, r2
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20000710:	193a      	adds	r2, r7, r4
20000712:	7811      	ldrb	r1, [r2, #0]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
20000714:	4303      	orrs	r3, r0
20000716:	001a      	movs	r2, r3
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20000718:	6878      	ldr	r0, [r7, #4]
2000071a:	23c4      	movs	r3, #196	; 0xc4
2000071c:	005b      	lsls	r3, r3, #1
2000071e:	0109      	lsls	r1, r1, #4
20000720:	1841      	adds	r1, r0, r1
20000722:	18cb      	adds	r3, r1, r3
20000724:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
20000726:	683b      	ldr	r3, [r7, #0]
20000728:	7c9b      	ldrb	r3, [r3, #18]
2000072a:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
2000072c:	683b      	ldr	r3, [r7, #0]
2000072e:	7c5b      	ldrb	r3, [r3, #17]
20000730:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
20000732:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[5] << 8) |
20000734:	683b      	ldr	r3, [r7, #0]
20000736:	7c1b      	ldrb	r3, [r3, #16]
20000738:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
2000073a:	4313      	orrs	r3, r2
                                             ((uint32_t)TxMessage->Data[4]));
2000073c:	683a      	ldr	r2, [r7, #0]
2000073e:	7bd2      	ldrb	r2, [r2, #15]
20000740:	0010      	movs	r0, r2
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
20000742:	193a      	adds	r2, r7, r4
20000744:	7811      	ldrb	r1, [r2, #0]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
20000746:	4303      	orrs	r3, r0
20000748:	001a      	movs	r2, r3
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
2000074a:	6878      	ldr	r0, [r7, #4]
2000074c:	23c6      	movs	r3, #198	; 0xc6
2000074e:	005b      	lsls	r3, r3, #1
20000750:	0109      	lsls	r1, r1, #4
20000752:	1841      	adds	r1, r0, r1
20000754:	18cb      	adds	r3, r1, r3
20000756:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
20000758:	193b      	adds	r3, r7, r4
2000075a:	781a      	ldrb	r2, [r3, #0]
2000075c:	687b      	ldr	r3, [r7, #4]
2000075e:	3218      	adds	r2, #24
20000760:	0112      	lsls	r2, r2, #4
20000762:	58d3      	ldr	r3, [r2, r3]
20000764:	193a      	adds	r2, r7, r4
20000766:	7812      	ldrb	r2, [r2, #0]
20000768:	2101      	movs	r1, #1
2000076a:	4319      	orrs	r1, r3
2000076c:	687b      	ldr	r3, [r7, #4]
2000076e:	3218      	adds	r2, #24
20000770:	0112      	lsls	r2, r2, #4
20000772:	50d1      	str	r1, [r2, r3]
  }
  return transmit_mailbox;
20000774:	230f      	movs	r3, #15
20000776:	18fb      	adds	r3, r7, r3
20000778:	781b      	ldrb	r3, [r3, #0]
}
2000077a:	0018      	movs	r0, r3
2000077c:	46bd      	mov	sp, r7
2000077e:	b005      	add	sp, #20
20000780:	bd90      	pop	{r4, r7, pc}

20000782 <CAN_TransmitStatus>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
20000782:	b580      	push	{r7, lr}
20000784:	b084      	sub	sp, #16
20000786:	af00      	add	r7, sp, #0
20000788:	6078      	str	r0, [r7, #4]
2000078a:	000a      	movs	r2, r1
2000078c:	1cfb      	adds	r3, r7, #3
2000078e:	701a      	strb	r2, [r3, #0]
  uint32_t state = 0;
20000790:	2300      	movs	r3, #0
20000792:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
20000794:	1cfb      	adds	r3, r7, #3
20000796:	781b      	ldrb	r3, [r3, #0]
20000798:	2b01      	cmp	r3, #1
2000079a:	d009      	beq.n	200007b0 <CAN_TransmitStatus+0x2e>
2000079c:	2b02      	cmp	r3, #2
2000079e:	d00d      	beq.n	200007bc <CAN_TransmitStatus+0x3a>
200007a0:	2b00      	cmp	r3, #0
200007a2:	d111      	bne.n	200007c8 <CAN_TransmitStatus+0x46>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
200007a4:	687b      	ldr	r3, [r7, #4]
200007a6:	689b      	ldr	r3, [r3, #8]
200007a8:	4a25      	ldr	r2, [pc, #148]	; (20000840 <CAN_TransmitStatus+0xbe>)
200007aa:	4013      	ands	r3, r2
200007ac:	60fb      	str	r3, [r7, #12]
      break;
200007ae:	e00e      	b.n	200007ce <CAN_TransmitStatus+0x4c>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
200007b0:	687b      	ldr	r3, [r7, #4]
200007b2:	689b      	ldr	r3, [r3, #8]
200007b4:	4a23      	ldr	r2, [pc, #140]	; (20000844 <CAN_TransmitStatus+0xc2>)
200007b6:	4013      	ands	r3, r2
200007b8:	60fb      	str	r3, [r7, #12]
      break;
200007ba:	e008      	b.n	200007ce <CAN_TransmitStatus+0x4c>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
200007bc:	687b      	ldr	r3, [r7, #4]
200007be:	689b      	ldr	r3, [r3, #8]
200007c0:	4a21      	ldr	r2, [pc, #132]	; (20000848 <CAN_TransmitStatus+0xc6>)
200007c2:	4013      	ands	r3, r2
200007c4:	60fb      	str	r3, [r7, #12]
      break;
200007c6:	e002      	b.n	200007ce <CAN_TransmitStatus+0x4c>
    default:
      state = CAN_TxStatus_Failed;
200007c8:	2300      	movs	r3, #0
200007ca:	60fb      	str	r3, [r7, #12]
      break;
200007cc:	46c0      	nop			; (mov r8, r8)
  }
  switch (state)
200007ce:	68fb      	ldr	r3, [r7, #12]
200007d0:	4a1e      	ldr	r2, [pc, #120]	; (2000084c <CAN_TransmitStatus+0xca>)
200007d2:	4293      	cmp	r3, r2
200007d4:	d01b      	beq.n	2000080e <CAN_TransmitStatus+0x8c>
200007d6:	4a1d      	ldr	r2, [pc, #116]	; (2000084c <CAN_TransmitStatus+0xca>)
200007d8:	4293      	cmp	r3, r2
200007da:	d808      	bhi.n	200007ee <CAN_TransmitStatus+0x6c>
200007dc:	4a1c      	ldr	r2, [pc, #112]	; (20000850 <CAN_TransmitStatus+0xce>)
200007de:	4293      	cmp	r3, r2
200007e0:	d012      	beq.n	20000808 <CAN_TransmitStatus+0x86>
200007e2:	4a17      	ldr	r2, [pc, #92]	; (20000840 <CAN_TransmitStatus+0xbe>)
200007e4:	4293      	cmp	r3, r2
200007e6:	d018      	beq.n	2000081a <CAN_TransmitStatus+0x98>
200007e8:	2b00      	cmp	r3, #0
200007ea:	d00a      	beq.n	20000802 <CAN_TransmitStatus+0x80>
200007ec:	e01e      	b.n	2000082c <CAN_TransmitStatus+0xaa>
200007ee:	4a19      	ldr	r2, [pc, #100]	; (20000854 <CAN_TransmitStatus+0xd2>)
200007f0:	4293      	cmp	r3, r2
200007f2:	d00f      	beq.n	20000814 <CAN_TransmitStatus+0x92>
200007f4:	4a14      	ldr	r2, [pc, #80]	; (20000848 <CAN_TransmitStatus+0xc6>)
200007f6:	4293      	cmp	r3, r2
200007f8:	d015      	beq.n	20000826 <CAN_TransmitStatus+0xa4>
200007fa:	4a12      	ldr	r2, [pc, #72]	; (20000844 <CAN_TransmitStatus+0xc2>)
200007fc:	4293      	cmp	r3, r2
200007fe:	d00f      	beq.n	20000820 <CAN_TransmitStatus+0x9e>
20000800:	e014      	b.n	2000082c <CAN_TransmitStatus+0xaa>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
20000802:	2302      	movs	r3, #2
20000804:	60fb      	str	r3, [r7, #12]
      break;
20000806:	e014      	b.n	20000832 <CAN_TransmitStatus+0xb0>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
20000808:	2300      	movs	r3, #0
2000080a:	60fb      	str	r3, [r7, #12]
      break;
2000080c:	e011      	b.n	20000832 <CAN_TransmitStatus+0xb0>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
2000080e:	2300      	movs	r3, #0
20000810:	60fb      	str	r3, [r7, #12]
      break;
20000812:	e00e      	b.n	20000832 <CAN_TransmitStatus+0xb0>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
20000814:	2300      	movs	r3, #0
20000816:	60fb      	str	r3, [r7, #12]
      break;
20000818:	e00b      	b.n	20000832 <CAN_TransmitStatus+0xb0>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
2000081a:	2301      	movs	r3, #1
2000081c:	60fb      	str	r3, [r7, #12]
      break;
2000081e:	e008      	b.n	20000832 <CAN_TransmitStatus+0xb0>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
20000820:	2301      	movs	r3, #1
20000822:	60fb      	str	r3, [r7, #12]
      break;
20000824:	e005      	b.n	20000832 <CAN_TransmitStatus+0xb0>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
20000826:	2301      	movs	r3, #1
20000828:	60fb      	str	r3, [r7, #12]
      break;
2000082a:	e002      	b.n	20000832 <CAN_TransmitStatus+0xb0>
    default: state = CAN_TxStatus_Failed;
2000082c:	2300      	movs	r3, #0
2000082e:	60fb      	str	r3, [r7, #12]
      break;
20000830:	46c0      	nop			; (mov r8, r8)
  }
  return (uint8_t) state;
20000832:	68fb      	ldr	r3, [r7, #12]
20000834:	b2db      	uxtb	r3, r3
}
20000836:	0018      	movs	r0, r3
20000838:	46bd      	mov	sp, r7
2000083a:	b004      	add	sp, #16
2000083c:	bd80      	pop	{r7, pc}
2000083e:	46c0      	nop			; (mov r8, r8)
20000840:	04000003 	streq	r0, [r0], #-3
20000844:	08000300 	stmdaeq	r0, {r8, r9}
20000848:	10030000 	andne	r0, r3, r0
2000084c:	08000100 	stmdaeq	r0, {r8}
20000850:	04000001 	streq	r0, [r0], #-1
20000854:	10010000 	andne	r0, r1, r0

20000858 <CAN_CancelTransmit>:
  * @param  Mailbox: Mailbox number.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
20000858:	b580      	push	{r7, lr}
2000085a:	b082      	sub	sp, #8
2000085c:	af00      	add	r7, sp, #0
2000085e:	6078      	str	r0, [r7, #4]
20000860:	000a      	movs	r2, r1
20000862:	1cfb      	adds	r3, r7, #3
20000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
20000866:	1cfb      	adds	r3, r7, #3
20000868:	781b      	ldrb	r3, [r3, #0]
2000086a:	2b01      	cmp	r3, #1
2000086c:	d00b      	beq.n	20000886 <CAN_CancelTransmit+0x2e>
2000086e:	2b02      	cmp	r3, #2
20000870:	d011      	beq.n	20000896 <CAN_CancelTransmit+0x3e>
20000872:	2b00      	cmp	r3, #0
20000874:	d000      	beq.n	20000878 <CAN_CancelTransmit+0x20>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
      break;
    default:
      break;
20000876:	e016      	b.n	200008a6 <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
20000878:	687b      	ldr	r3, [r7, #4]
2000087a:	689b      	ldr	r3, [r3, #8]
2000087c:	2280      	movs	r2, #128	; 0x80
2000087e:	431a      	orrs	r2, r3
20000880:	687b      	ldr	r3, [r7, #4]
20000882:	609a      	str	r2, [r3, #8]
      break;
20000884:	e00f      	b.n	200008a6 <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
20000886:	687b      	ldr	r3, [r7, #4]
20000888:	689b      	ldr	r3, [r3, #8]
2000088a:	2280      	movs	r2, #128	; 0x80
2000088c:	0212      	lsls	r2, r2, #8
2000088e:	431a      	orrs	r2, r3
20000890:	687b      	ldr	r3, [r7, #4]
20000892:	609a      	str	r2, [r3, #8]
      break;
20000894:	e007      	b.n	200008a6 <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
20000896:	687b      	ldr	r3, [r7, #4]
20000898:	689b      	ldr	r3, [r3, #8]
2000089a:	2280      	movs	r2, #128	; 0x80
2000089c:	0412      	lsls	r2, r2, #16
2000089e:	431a      	orrs	r2, r3
200008a0:	687b      	ldr	r3, [r7, #4]
200008a2:	609a      	str	r2, [r3, #8]
      break;
200008a4:	46c0      	nop			; (mov r8, r8)
  }
}
200008a6:	46c0      	nop			; (mov r8, r8)
200008a8:	46bd      	mov	sp, r7
200008aa:	b002      	add	sp, #8
200008ac:	bd80      	pop	{r7, pc}

200008ae <CAN_Receive>:
  *         CAN DLC, CAN data and FMI number.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
200008ae:	b580      	push	{r7, lr}
200008b0:	b084      	sub	sp, #16
200008b2:	af00      	add	r7, sp, #0
200008b4:	60f8      	str	r0, [r7, #12]
200008b6:	607a      	str	r2, [r7, #4]
200008b8:	200b      	movs	r0, #11
200008ba:	183b      	adds	r3, r7, r0
200008bc:	1c0a      	adds	r2, r1, #0
200008be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
200008c0:	183b      	adds	r3, r7, r0
200008c2:	781a      	ldrb	r2, [r3, #0]
200008c4:	68fb      	ldr	r3, [r7, #12]
200008c6:	321b      	adds	r2, #27
200008c8:	0112      	lsls	r2, r2, #4
200008ca:	58d3      	ldr	r3, [r2, r3]
200008cc:	b2db      	uxtb	r3, r3
200008ce:	2204      	movs	r2, #4
200008d0:	4013      	ands	r3, r2
200008d2:	b2da      	uxtb	r2, r3
200008d4:	687b      	ldr	r3, [r7, #4]
200008d6:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
200008d8:	687b      	ldr	r3, [r7, #4]
200008da:	7a1b      	ldrb	r3, [r3, #8]
200008dc:	2b00      	cmp	r3, #0
200008de:	d10c      	bne.n	200008fa <CAN_Receive+0x4c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
200008e0:	230b      	movs	r3, #11
200008e2:	18fb      	adds	r3, r7, r3
200008e4:	781a      	ldrb	r2, [r3, #0]
200008e6:	68fb      	ldr	r3, [r7, #12]
200008e8:	321b      	adds	r2, #27
200008ea:	0112      	lsls	r2, r2, #4
200008ec:	58d3      	ldr	r3, [r2, r3]
200008ee:	0d5b      	lsrs	r3, r3, #21
200008f0:	055b      	lsls	r3, r3, #21
200008f2:	0d5a      	lsrs	r2, r3, #21
200008f4:	687b      	ldr	r3, [r7, #4]
200008f6:	601a      	str	r2, [r3, #0]
200008f8:	e00b      	b.n	20000912 <CAN_Receive+0x64>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
200008fa:	230b      	movs	r3, #11
200008fc:	18fb      	adds	r3, r7, r3
200008fe:	781a      	ldrb	r2, [r3, #0]
20000900:	68fb      	ldr	r3, [r7, #12]
20000902:	321b      	adds	r2, #27
20000904:	0112      	lsls	r2, r2, #4
20000906:	58d3      	ldr	r3, [r2, r3]
20000908:	08db      	lsrs	r3, r3, #3
2000090a:	00db      	lsls	r3, r3, #3
2000090c:	08da      	lsrs	r2, r3, #3
2000090e:	687b      	ldr	r3, [r7, #4]
20000910:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
20000912:	210b      	movs	r1, #11
20000914:	187b      	adds	r3, r7, r1
20000916:	781a      	ldrb	r2, [r3, #0]
20000918:	68fb      	ldr	r3, [r7, #12]
2000091a:	321b      	adds	r2, #27
2000091c:	0112      	lsls	r2, r2, #4
2000091e:	58d3      	ldr	r3, [r2, r3]
20000920:	b2db      	uxtb	r3, r3
20000922:	2202      	movs	r2, #2
20000924:	4013      	ands	r3, r2
20000926:	b2da      	uxtb	r2, r3
20000928:	687b      	ldr	r3, [r7, #4]
2000092a:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
2000092c:	187b      	adds	r3, r7, r1
2000092e:	781b      	ldrb	r3, [r3, #0]
20000930:	68fa      	ldr	r2, [r7, #12]
20000932:	331b      	adds	r3, #27
20000934:	011b      	lsls	r3, r3, #4
20000936:	18d3      	adds	r3, r2, r3
20000938:	3304      	adds	r3, #4
2000093a:	681b      	ldr	r3, [r3, #0]
2000093c:	b2db      	uxtb	r3, r3
2000093e:	220f      	movs	r2, #15
20000940:	4013      	ands	r3, r2
20000942:	b2da      	uxtb	r2, r3
20000944:	687b      	ldr	r3, [r7, #4]
20000946:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
20000948:	0008      	movs	r0, r1
2000094a:	183b      	adds	r3, r7, r0
2000094c:	781b      	ldrb	r3, [r3, #0]
2000094e:	68fa      	ldr	r2, [r7, #12]
20000950:	331b      	adds	r3, #27
20000952:	011b      	lsls	r3, r3, #4
20000954:	18d3      	adds	r3, r2, r3
20000956:	3304      	adds	r3, #4
20000958:	681b      	ldr	r3, [r3, #0]
2000095a:	0a1b      	lsrs	r3, r3, #8
2000095c:	b2da      	uxtb	r2, r3
2000095e:	687b      	ldr	r3, [r7, #4]
20000960:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
20000962:	183b      	adds	r3, r7, r0
20000964:	781a      	ldrb	r2, [r3, #0]
20000966:	68f9      	ldr	r1, [r7, #12]
20000968:	23dc      	movs	r3, #220	; 0xdc
2000096a:	005b      	lsls	r3, r3, #1
2000096c:	0112      	lsls	r2, r2, #4
2000096e:	188a      	adds	r2, r1, r2
20000970:	18d3      	adds	r3, r2, r3
20000972:	681b      	ldr	r3, [r3, #0]
20000974:	b2da      	uxtb	r2, r3
20000976:	687b      	ldr	r3, [r7, #4]
20000978:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
2000097a:	183b      	adds	r3, r7, r0
2000097c:	781a      	ldrb	r2, [r3, #0]
2000097e:	68f9      	ldr	r1, [r7, #12]
20000980:	23dc      	movs	r3, #220	; 0xdc
20000982:	005b      	lsls	r3, r3, #1
20000984:	0112      	lsls	r2, r2, #4
20000986:	188a      	adds	r2, r1, r2
20000988:	18d3      	adds	r3, r2, r3
2000098a:	681b      	ldr	r3, [r3, #0]
2000098c:	0a1b      	lsrs	r3, r3, #8
2000098e:	b2da      	uxtb	r2, r3
20000990:	687b      	ldr	r3, [r7, #4]
20000992:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
20000994:	183b      	adds	r3, r7, r0
20000996:	781a      	ldrb	r2, [r3, #0]
20000998:	68f9      	ldr	r1, [r7, #12]
2000099a:	23dc      	movs	r3, #220	; 0xdc
2000099c:	005b      	lsls	r3, r3, #1
2000099e:	0112      	lsls	r2, r2, #4
200009a0:	188a      	adds	r2, r1, r2
200009a2:	18d3      	adds	r3, r2, r3
200009a4:	681b      	ldr	r3, [r3, #0]
200009a6:	0c1b      	lsrs	r3, r3, #16
200009a8:	b2da      	uxtb	r2, r3
200009aa:	687b      	ldr	r3, [r7, #4]
200009ac:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
200009ae:	183b      	adds	r3, r7, r0
200009b0:	781a      	ldrb	r2, [r3, #0]
200009b2:	68f9      	ldr	r1, [r7, #12]
200009b4:	23dc      	movs	r3, #220	; 0xdc
200009b6:	005b      	lsls	r3, r3, #1
200009b8:	0112      	lsls	r2, r2, #4
200009ba:	188a      	adds	r2, r1, r2
200009bc:	18d3      	adds	r3, r2, r3
200009be:	681b      	ldr	r3, [r3, #0]
200009c0:	0e1b      	lsrs	r3, r3, #24
200009c2:	b2da      	uxtb	r2, r3
200009c4:	687b      	ldr	r3, [r7, #4]
200009c6:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
200009c8:	183b      	adds	r3, r7, r0
200009ca:	781a      	ldrb	r2, [r3, #0]
200009cc:	68f9      	ldr	r1, [r7, #12]
200009ce:	23de      	movs	r3, #222	; 0xde
200009d0:	005b      	lsls	r3, r3, #1
200009d2:	0112      	lsls	r2, r2, #4
200009d4:	188a      	adds	r2, r1, r2
200009d6:	18d3      	adds	r3, r2, r3
200009d8:	681b      	ldr	r3, [r3, #0]
200009da:	b2da      	uxtb	r2, r3
200009dc:	687b      	ldr	r3, [r7, #4]
200009de:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
200009e0:	183b      	adds	r3, r7, r0
200009e2:	781a      	ldrb	r2, [r3, #0]
200009e4:	68f9      	ldr	r1, [r7, #12]
200009e6:	23de      	movs	r3, #222	; 0xde
200009e8:	005b      	lsls	r3, r3, #1
200009ea:	0112      	lsls	r2, r2, #4
200009ec:	188a      	adds	r2, r1, r2
200009ee:	18d3      	adds	r3, r2, r3
200009f0:	681b      	ldr	r3, [r3, #0]
200009f2:	0a1b      	lsrs	r3, r3, #8
200009f4:	b2da      	uxtb	r2, r3
200009f6:	687b      	ldr	r3, [r7, #4]
200009f8:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
200009fa:	183b      	adds	r3, r7, r0
200009fc:	781a      	ldrb	r2, [r3, #0]
200009fe:	68f9      	ldr	r1, [r7, #12]
20000a00:	23de      	movs	r3, #222	; 0xde
20000a02:	005b      	lsls	r3, r3, #1
20000a04:	0112      	lsls	r2, r2, #4
20000a06:	188a      	adds	r2, r1, r2
20000a08:	18d3      	adds	r3, r2, r3
20000a0a:	681b      	ldr	r3, [r3, #0]
20000a0c:	0c1b      	lsrs	r3, r3, #16
20000a0e:	b2da      	uxtb	r2, r3
20000a10:	687b      	ldr	r3, [r7, #4]
20000a12:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
20000a14:	183b      	adds	r3, r7, r0
20000a16:	781a      	ldrb	r2, [r3, #0]
20000a18:	68f9      	ldr	r1, [r7, #12]
20000a1a:	23de      	movs	r3, #222	; 0xde
20000a1c:	005b      	lsls	r3, r3, #1
20000a1e:	0112      	lsls	r2, r2, #4
20000a20:	188a      	adds	r2, r1, r2
20000a22:	18d3      	adds	r3, r2, r3
20000a24:	681b      	ldr	r3, [r3, #0]
20000a26:	0e1b      	lsrs	r3, r3, #24
20000a28:	b2da      	uxtb	r2, r3
20000a2a:	687b      	ldr	r3, [r7, #4]
20000a2c:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
20000a2e:	183b      	adds	r3, r7, r0
20000a30:	781b      	ldrb	r3, [r3, #0]
20000a32:	2b00      	cmp	r3, #0
20000a34:	d106      	bne.n	20000a44 <CAN_Receive+0x196>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
20000a36:	68fb      	ldr	r3, [r7, #12]
20000a38:	68db      	ldr	r3, [r3, #12]
20000a3a:	2220      	movs	r2, #32
20000a3c:	431a      	orrs	r2, r3
20000a3e:	68fb      	ldr	r3, [r7, #12]
20000a40:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
20000a42:	e005      	b.n	20000a50 <CAN_Receive+0x1a2>
    CANx->RF1R |= CAN_RF1R_RFOM1;
20000a44:	68fb      	ldr	r3, [r7, #12]
20000a46:	691b      	ldr	r3, [r3, #16]
20000a48:	2220      	movs	r2, #32
20000a4a:	431a      	orrs	r2, r3
20000a4c:	68fb      	ldr	r3, [r7, #12]
20000a4e:	611a      	str	r2, [r3, #16]
}
20000a50:	46c0      	nop			; (mov r8, r8)
20000a52:	46bd      	mov	sp, r7
20000a54:	b004      	add	sp, #16
20000a56:	bd80      	pop	{r7, pc}

20000a58 <CAN_FIFORelease>:
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
20000a58:	b580      	push	{r7, lr}
20000a5a:	b082      	sub	sp, #8
20000a5c:	af00      	add	r7, sp, #0
20000a5e:	6078      	str	r0, [r7, #4]
20000a60:	000a      	movs	r2, r1
20000a62:	1cfb      	adds	r3, r7, #3
20000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
20000a66:	1cfb      	adds	r3, r7, #3
20000a68:	781b      	ldrb	r3, [r3, #0]
20000a6a:	2b00      	cmp	r3, #0
20000a6c:	d106      	bne.n	20000a7c <CAN_FIFORelease+0x24>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
20000a6e:	687b      	ldr	r3, [r7, #4]
20000a70:	68db      	ldr	r3, [r3, #12]
20000a72:	2220      	movs	r2, #32
20000a74:	431a      	orrs	r2, r3
20000a76:	687b      	ldr	r3, [r7, #4]
20000a78:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
20000a7a:	e005      	b.n	20000a88 <CAN_FIFORelease+0x30>
    CANx->RF1R |= CAN_RF1R_RFOM1;
20000a7c:	687b      	ldr	r3, [r7, #4]
20000a7e:	691b      	ldr	r3, [r3, #16]
20000a80:	2220      	movs	r2, #32
20000a82:	431a      	orrs	r2, r3
20000a84:	687b      	ldr	r3, [r7, #4]
20000a86:	611a      	str	r2, [r3, #16]
}
20000a88:	46c0      	nop			; (mov r8, r8)
20000a8a:	46bd      	mov	sp, r7
20000a8c:	b002      	add	sp, #8
20000a8e:	bd80      	pop	{r7, pc}

20000a90 <CAN_MessagePending>:
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
20000a90:	b580      	push	{r7, lr}
20000a92:	b084      	sub	sp, #16
20000a94:	af00      	add	r7, sp, #0
20000a96:	6078      	str	r0, [r7, #4]
20000a98:	000a      	movs	r2, r1
20000a9a:	1cfb      	adds	r3, r7, #3
20000a9c:	701a      	strb	r2, [r3, #0]
  uint8_t message_pending=0;
20000a9e:	230f      	movs	r3, #15
20000aa0:	18fb      	adds	r3, r7, r3
20000aa2:	2200      	movs	r2, #0
20000aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
20000aa6:	1cfb      	adds	r3, r7, #3
20000aa8:	781b      	ldrb	r3, [r3, #0]
20000aaa:	2b00      	cmp	r3, #0
20000aac:	d108      	bne.n	20000ac0 <CAN_MessagePending+0x30>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
20000aae:	687b      	ldr	r3, [r7, #4]
20000ab0:	68db      	ldr	r3, [r3, #12]
20000ab2:	b2da      	uxtb	r2, r3
20000ab4:	230f      	movs	r3, #15
20000ab6:	18fb      	adds	r3, r7, r3
20000ab8:	2103      	movs	r1, #3
20000aba:	400a      	ands	r2, r1
20000abc:	701a      	strb	r2, [r3, #0]
20000abe:	e010      	b.n	20000ae2 <CAN_MessagePending+0x52>
  }
  else if (FIFONumber == CAN_FIFO1)
20000ac0:	1cfb      	adds	r3, r7, #3
20000ac2:	781b      	ldrb	r3, [r3, #0]
20000ac4:	2b01      	cmp	r3, #1
20000ac6:	d108      	bne.n	20000ada <CAN_MessagePending+0x4a>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
20000ac8:	687b      	ldr	r3, [r7, #4]
20000aca:	691b      	ldr	r3, [r3, #16]
20000acc:	b2da      	uxtb	r2, r3
20000ace:	230f      	movs	r3, #15
20000ad0:	18fb      	adds	r3, r7, r3
20000ad2:	2103      	movs	r1, #3
20000ad4:	400a      	ands	r2, r1
20000ad6:	701a      	strb	r2, [r3, #0]
20000ad8:	e003      	b.n	20000ae2 <CAN_MessagePending+0x52>
  }
  else
  {
    message_pending = 0;
20000ada:	230f      	movs	r3, #15
20000adc:	18fb      	adds	r3, r7, r3
20000ade:	2200      	movs	r2, #0
20000ae0:	701a      	strb	r2, [r3, #0]
  }
  return message_pending;
20000ae2:	230f      	movs	r3, #15
20000ae4:	18fb      	adds	r3, r7, r3
20000ae6:	781b      	ldrb	r3, [r3, #0]
}
20000ae8:	0018      	movs	r0, r3
20000aea:	46bd      	mov	sp, r7
20000aec:	b004      	add	sp, #16
20000aee:	bd80      	pop	{r7, pc}

20000af0 <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
20000af0:	b580      	push	{r7, lr}
20000af2:	b084      	sub	sp, #16
20000af4:	af00      	add	r7, sp, #0
20000af6:	6078      	str	r0, [r7, #4]
20000af8:	000a      	movs	r2, r1
20000afa:	1cfb      	adds	r3, r7, #3
20000afc:	701a      	strb	r2, [r3, #0]
  uint8_t status = CAN_ModeStatus_Failed;
20000afe:	230f      	movs	r3, #15
20000b00:	18fb      	adds	r3, r7, r3
20000b02:	2200      	movs	r2, #0
20000b04:	701a      	strb	r2, [r3, #0]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
20000b06:	4b42      	ldr	r3, [pc, #264]	; (20000c10 <CAN_OperatingModeRequest+0x120>)
20000b08:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
20000b0a:	1cfb      	adds	r3, r7, #3
20000b0c:	781b      	ldrb	r3, [r3, #0]
20000b0e:	2b00      	cmp	r3, #0
20000b10:	d124      	bne.n	20000b5c <CAN_OperatingModeRequest+0x6c>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
20000b12:	687b      	ldr	r3, [r7, #4]
20000b14:	681b      	ldr	r3, [r3, #0]
20000b16:	2203      	movs	r2, #3
20000b18:	4393      	bics	r3, r2
20000b1a:	2201      	movs	r2, #1
20000b1c:	431a      	orrs	r2, r3
20000b1e:	687b      	ldr	r3, [r7, #4]
20000b20:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
20000b22:	e002      	b.n	20000b2a <CAN_OperatingModeRequest+0x3a>
    {
      timeout--;
20000b24:	68bb      	ldr	r3, [r7, #8]
20000b26:	3b01      	subs	r3, #1
20000b28:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
20000b2a:	687b      	ldr	r3, [r7, #4]
20000b2c:	685b      	ldr	r3, [r3, #4]
20000b2e:	2203      	movs	r2, #3
20000b30:	4013      	ands	r3, r2
20000b32:	2b01      	cmp	r3, #1
20000b34:	d002      	beq.n	20000b3c <CAN_OperatingModeRequest+0x4c>
20000b36:	68bb      	ldr	r3, [r7, #8]
20000b38:	2b00      	cmp	r3, #0
20000b3a:	d1f3      	bne.n	20000b24 <CAN_OperatingModeRequest+0x34>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
20000b3c:	687b      	ldr	r3, [r7, #4]
20000b3e:	685b      	ldr	r3, [r3, #4]
20000b40:	2203      	movs	r2, #3
20000b42:	4013      	ands	r3, r2
20000b44:	2b01      	cmp	r3, #1
20000b46:	d004      	beq.n	20000b52 <CAN_OperatingModeRequest+0x62>
    {
      status = CAN_ModeStatus_Failed;
20000b48:	230f      	movs	r3, #15
20000b4a:	18fb      	adds	r3, r7, r3
20000b4c:	2200      	movs	r2, #0
20000b4e:	701a      	strb	r2, [r3, #0]
20000b50:	e057      	b.n	20000c02 <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
20000b52:	230f      	movs	r3, #15
20000b54:	18fb      	adds	r3, r7, r3
20000b56:	2201      	movs	r2, #1
20000b58:	701a      	strb	r2, [r3, #0]
20000b5a:	e052      	b.n	20000c02 <CAN_OperatingModeRequest+0x112>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
20000b5c:	1cfb      	adds	r3, r7, #3
20000b5e:	781b      	ldrb	r3, [r3, #0]
20000b60:	2b01      	cmp	r3, #1
20000b62:	d121      	bne.n	20000ba8 <CAN_OperatingModeRequest+0xb8>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
20000b64:	687b      	ldr	r3, [r7, #4]
20000b66:	681b      	ldr	r3, [r3, #0]
20000b68:	2203      	movs	r2, #3
20000b6a:	4393      	bics	r3, r2
20000b6c:	001a      	movs	r2, r3
20000b6e:	687b      	ldr	r3, [r7, #4]
20000b70:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
20000b72:	e002      	b.n	20000b7a <CAN_OperatingModeRequest+0x8a>
    {
      timeout--;
20000b74:	68bb      	ldr	r3, [r7, #8]
20000b76:	3b01      	subs	r3, #1
20000b78:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
20000b7a:	687b      	ldr	r3, [r7, #4]
20000b7c:	685b      	ldr	r3, [r3, #4]
20000b7e:	2203      	movs	r2, #3
20000b80:	4013      	ands	r3, r2
20000b82:	d002      	beq.n	20000b8a <CAN_OperatingModeRequest+0x9a>
20000b84:	68bb      	ldr	r3, [r7, #8]
20000b86:	2b00      	cmp	r3, #0
20000b88:	d1f4      	bne.n	20000b74 <CAN_OperatingModeRequest+0x84>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
20000b8a:	687b      	ldr	r3, [r7, #4]
20000b8c:	685b      	ldr	r3, [r3, #4]
20000b8e:	2203      	movs	r2, #3
20000b90:	4013      	ands	r3, r2
20000b92:	d004      	beq.n	20000b9e <CAN_OperatingModeRequest+0xae>
    {
      status = CAN_ModeStatus_Failed;
20000b94:	230f      	movs	r3, #15
20000b96:	18fb      	adds	r3, r7, r3
20000b98:	2200      	movs	r2, #0
20000b9a:	701a      	strb	r2, [r3, #0]
20000b9c:	e031      	b.n	20000c02 <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
20000b9e:	230f      	movs	r3, #15
20000ba0:	18fb      	adds	r3, r7, r3
20000ba2:	2201      	movs	r2, #1
20000ba4:	701a      	strb	r2, [r3, #0]
20000ba6:	e02c      	b.n	20000c02 <CAN_OperatingModeRequest+0x112>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
20000ba8:	1cfb      	adds	r3, r7, #3
20000baa:	781b      	ldrb	r3, [r3, #0]
20000bac:	2b02      	cmp	r3, #2
20000bae:	d124      	bne.n	20000bfa <CAN_OperatingModeRequest+0x10a>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
20000bb0:	687b      	ldr	r3, [r7, #4]
20000bb2:	681b      	ldr	r3, [r3, #0]
20000bb4:	2203      	movs	r2, #3
20000bb6:	4393      	bics	r3, r2
20000bb8:	2202      	movs	r2, #2
20000bba:	431a      	orrs	r2, r3
20000bbc:	687b      	ldr	r3, [r7, #4]
20000bbe:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
20000bc0:	e002      	b.n	20000bc8 <CAN_OperatingModeRequest+0xd8>
    {
      timeout--;
20000bc2:	68bb      	ldr	r3, [r7, #8]
20000bc4:	3b01      	subs	r3, #1
20000bc6:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
20000bc8:	687b      	ldr	r3, [r7, #4]
20000bca:	685b      	ldr	r3, [r3, #4]
20000bcc:	2203      	movs	r2, #3
20000bce:	4013      	ands	r3, r2
20000bd0:	2b02      	cmp	r3, #2
20000bd2:	d002      	beq.n	20000bda <CAN_OperatingModeRequest+0xea>
20000bd4:	68bb      	ldr	r3, [r7, #8]
20000bd6:	2b00      	cmp	r3, #0
20000bd8:	d1f3      	bne.n	20000bc2 <CAN_OperatingModeRequest+0xd2>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
20000bda:	687b      	ldr	r3, [r7, #4]
20000bdc:	685b      	ldr	r3, [r3, #4]
20000bde:	2203      	movs	r2, #3
20000be0:	4013      	ands	r3, r2
20000be2:	2b02      	cmp	r3, #2
20000be4:	d004      	beq.n	20000bf0 <CAN_OperatingModeRequest+0x100>
    {
      status = CAN_ModeStatus_Failed;
20000be6:	230f      	movs	r3, #15
20000be8:	18fb      	adds	r3, r7, r3
20000bea:	2200      	movs	r2, #0
20000bec:	701a      	strb	r2, [r3, #0]
20000bee:	e008      	b.n	20000c02 <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
20000bf0:	230f      	movs	r3, #15
20000bf2:	18fb      	adds	r3, r7, r3
20000bf4:	2201      	movs	r2, #1
20000bf6:	701a      	strb	r2, [r3, #0]
20000bf8:	e003      	b.n	20000c02 <CAN_OperatingModeRequest+0x112>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
20000bfa:	230f      	movs	r3, #15
20000bfc:	18fb      	adds	r3, r7, r3
20000bfe:	2200      	movs	r2, #0
20000c00:	701a      	strb	r2, [r3, #0]
  }

  return  (uint8_t) status;
20000c02:	230f      	movs	r3, #15
20000c04:	18fb      	adds	r3, r7, r3
20000c06:	781b      	ldrb	r3, [r3, #0]
}
20000c08:	0018      	movs	r0, r3
20000c0a:	46bd      	mov	sp, r7
20000c0c:	b004      	add	sp, #16
20000c0e:	bd80      	pop	{r7, pc}
20000c10:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20000c14 <CAN_Sleep>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
20000c14:	b580      	push	{r7, lr}
20000c16:	b084      	sub	sp, #16
20000c18:	af00      	add	r7, sp, #0
20000c1a:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
20000c1c:	230f      	movs	r3, #15
20000c1e:	18fb      	adds	r3, r7, r3
20000c20:	2200      	movs	r2, #0
20000c22:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
20000c24:	687b      	ldr	r3, [r7, #4]
20000c26:	681b      	ldr	r3, [r3, #0]
20000c28:	2203      	movs	r2, #3
20000c2a:	4393      	bics	r3, r2
20000c2c:	2202      	movs	r2, #2
20000c2e:	431a      	orrs	r2, r3
20000c30:	687b      	ldr	r3, [r7, #4]
20000c32:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
20000c34:	687b      	ldr	r3, [r7, #4]
20000c36:	685b      	ldr	r3, [r3, #4]
20000c38:	2203      	movs	r2, #3
20000c3a:	4013      	ands	r3, r2
20000c3c:	2b02      	cmp	r3, #2
20000c3e:	d103      	bne.n	20000c48 <CAN_Sleep+0x34>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
20000c40:	230f      	movs	r3, #15
20000c42:	18fb      	adds	r3, r7, r3
20000c44:	2201      	movs	r2, #1
20000c46:	701a      	strb	r2, [r3, #0]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
20000c48:	230f      	movs	r3, #15
20000c4a:	18fb      	adds	r3, r7, r3
20000c4c:	781b      	ldrb	r3, [r3, #0]
}
20000c4e:	0018      	movs	r0, r3
20000c50:	46bd      	mov	sp, r7
20000c52:	b004      	add	sp, #16
20000c54:	bd80      	pop	{r7, pc}

20000c56 <CAN_WakeUp>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
20000c56:	b580      	push	{r7, lr}
20000c58:	b084      	sub	sp, #16
20000c5a:	af00      	add	r7, sp, #0
20000c5c:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
20000c5e:	4b15      	ldr	r3, [pc, #84]	; (20000cb4 <CAN_WakeUp+0x5e>)
20000c60:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
20000c62:	230b      	movs	r3, #11
20000c64:	18fb      	adds	r3, r7, r3
20000c66:	2200      	movs	r2, #0
20000c68:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
20000c6a:	687b      	ldr	r3, [r7, #4]
20000c6c:	681b      	ldr	r3, [r3, #0]
20000c6e:	2202      	movs	r2, #2
20000c70:	4393      	bics	r3, r2
20000c72:	001a      	movs	r2, r3
20000c74:	687b      	ldr	r3, [r7, #4]
20000c76:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
20000c78:	e002      	b.n	20000c80 <CAN_WakeUp+0x2a>
  {
   wait_slak--;
20000c7a:	68fb      	ldr	r3, [r7, #12]
20000c7c:	3b01      	subs	r3, #1
20000c7e:	60fb      	str	r3, [r7, #12]
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
20000c80:	687b      	ldr	r3, [r7, #4]
20000c82:	685b      	ldr	r3, [r3, #4]
20000c84:	2202      	movs	r2, #2
20000c86:	4013      	ands	r3, r2
20000c88:	2b02      	cmp	r3, #2
20000c8a:	d102      	bne.n	20000c92 <CAN_WakeUp+0x3c>
20000c8c:	68fb      	ldr	r3, [r7, #12]
20000c8e:	2b00      	cmp	r3, #0
20000c90:	d1f3      	bne.n	20000c7a <CAN_WakeUp+0x24>
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
20000c92:	687b      	ldr	r3, [r7, #4]
20000c94:	685b      	ldr	r3, [r3, #4]
20000c96:	2202      	movs	r2, #2
20000c98:	4013      	ands	r3, r2
20000c9a:	2b02      	cmp	r3, #2
20000c9c:	d003      	beq.n	20000ca6 <CAN_WakeUp+0x50>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
20000c9e:	230b      	movs	r3, #11
20000ca0:	18fb      	adds	r3, r7, r3
20000ca2:	2201      	movs	r2, #1
20000ca4:	701a      	strb	r2, [r3, #0]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
20000ca6:	230b      	movs	r3, #11
20000ca8:	18fb      	adds	r3, r7, r3
20000caa:	781b      	ldrb	r3, [r3, #0]
}
20000cac:	0018      	movs	r0, r3
20000cae:	46bd      	mov	sp, r7
20000cb0:	b004      	add	sp, #16
20000cb2:	bd80      	pop	{r7, pc}
20000cb4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20000cb8 <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
20000cb8:	b580      	push	{r7, lr}
20000cba:	b084      	sub	sp, #16
20000cbc:	af00      	add	r7, sp, #0
20000cbe:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
20000cc0:	210f      	movs	r1, #15
20000cc2:	187b      	adds	r3, r7, r1
20000cc4:	2200      	movs	r2, #0
20000cc6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
20000cc8:	687b      	ldr	r3, [r7, #4]
20000cca:	699b      	ldr	r3, [r3, #24]
20000ccc:	b2da      	uxtb	r2, r3
20000cce:	0008      	movs	r0, r1
20000cd0:	187b      	adds	r3, r7, r1
20000cd2:	2170      	movs	r1, #112	; 0x70
20000cd4:	400a      	ands	r2, r1
20000cd6:	701a      	strb	r2, [r3, #0]
  
  /* Return the error code*/
  return errorcode;
20000cd8:	0001      	movs	r1, r0
20000cda:	187b      	adds	r3, r7, r1
20000cdc:	781b      	ldrb	r3, [r3, #0]
}
20000cde:	0018      	movs	r0, r3
20000ce0:	46bd      	mov	sp, r7
20000ce2:	b004      	add	sp, #16
20000ce4:	bd80      	pop	{r7, pc}

20000ce6 <CAN_GetReceiveErrorCounter>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
20000ce6:	b580      	push	{r7, lr}
20000ce8:	b084      	sub	sp, #16
20000cea:	af00      	add	r7, sp, #0
20000cec:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
20000cee:	210f      	movs	r1, #15
20000cf0:	187b      	adds	r3, r7, r1
20000cf2:	2200      	movs	r2, #0
20000cf4:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
20000cf6:	687b      	ldr	r3, [r7, #4]
20000cf8:	699b      	ldr	r3, [r3, #24]
20000cfa:	0e1a      	lsrs	r2, r3, #24
20000cfc:	187b      	adds	r3, r7, r1
20000cfe:	701a      	strb	r2, [r3, #0]
  
  /* Return the Receive Error Counter*/
  return counter;
20000d00:	187b      	adds	r3, r7, r1
20000d02:	781b      	ldrb	r3, [r3, #0]
}
20000d04:	0018      	movs	r0, r3
20000d06:	46bd      	mov	sp, r7
20000d08:	b004      	add	sp, #16
20000d0a:	bd80      	pop	{r7, pc}

20000d0c <CAN_GetLSBTransmitErrorCounter>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
20000d0c:	b580      	push	{r7, lr}
20000d0e:	b084      	sub	sp, #16
20000d10:	af00      	add	r7, sp, #0
20000d12:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
20000d14:	210f      	movs	r1, #15
20000d16:	187b      	adds	r3, r7, r1
20000d18:	2200      	movs	r2, #0
20000d1a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
20000d1c:	687b      	ldr	r3, [r7, #4]
20000d1e:	699b      	ldr	r3, [r3, #24]
20000d20:	0c1a      	lsrs	r2, r3, #16
20000d22:	187b      	adds	r3, r7, r1
20000d24:	701a      	strb	r2, [r3, #0]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
20000d26:	187b      	adds	r3, r7, r1
20000d28:	781b      	ldrb	r3, [r3, #0]
}
20000d2a:	0018      	movs	r0, r3
20000d2c:	46bd      	mov	sp, r7
20000d2e:	b004      	add	sp, #16
20000d30:	bd80      	pop	{r7, pc}

20000d32 <CAN_ITConfig>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
20000d32:	b580      	push	{r7, lr}
20000d34:	b084      	sub	sp, #16
20000d36:	af00      	add	r7, sp, #0
20000d38:	60f8      	str	r0, [r7, #12]
20000d3a:	60b9      	str	r1, [r7, #8]
20000d3c:	1dfb      	adds	r3, r7, #7
20000d3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000d40:	1dfb      	adds	r3, r7, #7
20000d42:	781b      	ldrb	r3, [r3, #0]
20000d44:	2b00      	cmp	r3, #0
20000d46:	d006      	beq.n	20000d56 <CAN_ITConfig+0x24>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
20000d48:	68fb      	ldr	r3, [r7, #12]
20000d4a:	695a      	ldr	r2, [r3, #20]
20000d4c:	68bb      	ldr	r3, [r7, #8]
20000d4e:	431a      	orrs	r2, r3
20000d50:	68fb      	ldr	r3, [r7, #12]
20000d52:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
20000d54:	e006      	b.n	20000d64 <CAN_ITConfig+0x32>
    CANx->IER &= ~CAN_IT;
20000d56:	68fb      	ldr	r3, [r7, #12]
20000d58:	695b      	ldr	r3, [r3, #20]
20000d5a:	68ba      	ldr	r2, [r7, #8]
20000d5c:	43d2      	mvns	r2, r2
20000d5e:	401a      	ands	r2, r3
20000d60:	68fb      	ldr	r3, [r7, #12]
20000d62:	615a      	str	r2, [r3, #20]
}
20000d64:	46c0      	nop			; (mov r8, r8)
20000d66:	46bd      	mov	sp, r7
20000d68:	b004      	add	sp, #16
20000d6a:	bd80      	pop	{r7, pc}

20000d6c <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_LEC: Last error code Flag
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
20000d6c:	b580      	push	{r7, lr}
20000d6e:	b084      	sub	sp, #16
20000d70:	af00      	add	r7, sp, #0
20000d72:	6078      	str	r0, [r7, #4]
20000d74:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
20000d76:	230f      	movs	r3, #15
20000d78:	18fb      	adds	r3, r7, r3
20000d7a:	2200      	movs	r2, #0
20000d7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
20000d7e:	683a      	ldr	r2, [r7, #0]
20000d80:	23f0      	movs	r3, #240	; 0xf0
20000d82:	041b      	lsls	r3, r3, #16
20000d84:	4013      	ands	r3, r2
20000d86:	d010      	beq.n	20000daa <CAN_GetFlagStatus+0x3e>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20000d88:	687b      	ldr	r3, [r7, #4]
20000d8a:	699b      	ldr	r3, [r3, #24]
20000d8c:	683a      	ldr	r2, [r7, #0]
20000d8e:	4013      	ands	r3, r2
20000d90:	031b      	lsls	r3, r3, #12
20000d92:	0b1b      	lsrs	r3, r3, #12
20000d94:	d004      	beq.n	20000da0 <CAN_GetFlagStatus+0x34>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20000d96:	230f      	movs	r3, #15
20000d98:	18fb      	adds	r3, r7, r3
20000d9a:	2201      	movs	r2, #1
20000d9c:	701a      	strb	r2, [r3, #0]
20000d9e:	e056      	b.n	20000e4e <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20000da0:	230f      	movs	r3, #15
20000da2:	18fb      	adds	r3, r7, r3
20000da4:	2200      	movs	r2, #0
20000da6:	701a      	strb	r2, [r3, #0]
20000da8:	e051      	b.n	20000e4e <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
20000daa:	683a      	ldr	r2, [r7, #0]
20000dac:	2380      	movs	r3, #128	; 0x80
20000dae:	045b      	lsls	r3, r3, #17
20000db0:	4013      	ands	r3, r2
20000db2:	d010      	beq.n	20000dd6 <CAN_GetFlagStatus+0x6a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20000db4:	687b      	ldr	r3, [r7, #4]
20000db6:	685b      	ldr	r3, [r3, #4]
20000db8:	683a      	ldr	r2, [r7, #0]
20000dba:	4013      	ands	r3, r2
20000dbc:	031b      	lsls	r3, r3, #12
20000dbe:	0b1b      	lsrs	r3, r3, #12
20000dc0:	d004      	beq.n	20000dcc <CAN_GetFlagStatus+0x60>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20000dc2:	230f      	movs	r3, #15
20000dc4:	18fb      	adds	r3, r7, r3
20000dc6:	2201      	movs	r2, #1
20000dc8:	701a      	strb	r2, [r3, #0]
20000dca:	e040      	b.n	20000e4e <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20000dcc:	230f      	movs	r3, #15
20000dce:	18fb      	adds	r3, r7, r3
20000dd0:	2200      	movs	r2, #0
20000dd2:	701a      	strb	r2, [r3, #0]
20000dd4:	e03b      	b.n	20000e4e <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
20000dd6:	683a      	ldr	r2, [r7, #0]
20000dd8:	2380      	movs	r3, #128	; 0x80
20000dda:	051b      	lsls	r3, r3, #20
20000ddc:	4013      	ands	r3, r2
20000dde:	d010      	beq.n	20000e02 <CAN_GetFlagStatus+0x96>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20000de0:	687b      	ldr	r3, [r7, #4]
20000de2:	689b      	ldr	r3, [r3, #8]
20000de4:	683a      	ldr	r2, [r7, #0]
20000de6:	4013      	ands	r3, r2
20000de8:	031b      	lsls	r3, r3, #12
20000dea:	0b1b      	lsrs	r3, r3, #12
20000dec:	d004      	beq.n	20000df8 <CAN_GetFlagStatus+0x8c>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20000dee:	230f      	movs	r3, #15
20000df0:	18fb      	adds	r3, r7, r3
20000df2:	2201      	movs	r2, #1
20000df4:	701a      	strb	r2, [r3, #0]
20000df6:	e02a      	b.n	20000e4e <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20000df8:	230f      	movs	r3, #15
20000dfa:	18fb      	adds	r3, r7, r3
20000dfc:	2200      	movs	r2, #0
20000dfe:	701a      	strb	r2, [r3, #0]
20000e00:	e025      	b.n	20000e4e <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
20000e02:	683a      	ldr	r2, [r7, #0]
20000e04:	2380      	movs	r3, #128	; 0x80
20000e06:	049b      	lsls	r3, r3, #18
20000e08:	4013      	ands	r3, r2
20000e0a:	d010      	beq.n	20000e2e <CAN_GetFlagStatus+0xc2>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20000e0c:	687b      	ldr	r3, [r7, #4]
20000e0e:	68db      	ldr	r3, [r3, #12]
20000e10:	683a      	ldr	r2, [r7, #0]
20000e12:	4013      	ands	r3, r2
20000e14:	031b      	lsls	r3, r3, #12
20000e16:	0b1b      	lsrs	r3, r3, #12
20000e18:	d004      	beq.n	20000e24 <CAN_GetFlagStatus+0xb8>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20000e1a:	230f      	movs	r3, #15
20000e1c:	18fb      	adds	r3, r7, r3
20000e1e:	2201      	movs	r2, #1
20000e20:	701a      	strb	r2, [r3, #0]
20000e22:	e014      	b.n	20000e4e <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20000e24:	230f      	movs	r3, #15
20000e26:	18fb      	adds	r3, r7, r3
20000e28:	2200      	movs	r2, #0
20000e2a:	701a      	strb	r2, [r3, #0]
20000e2c:	e00f      	b.n	20000e4e <CAN_GetFlagStatus+0xe2>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20000e2e:	687b      	ldr	r3, [r7, #4]
20000e30:	691b      	ldr	r3, [r3, #16]
20000e32:	683a      	ldr	r2, [r7, #0]
20000e34:	4013      	ands	r3, r2
20000e36:	031b      	lsls	r3, r3, #12
20000e38:	0b1b      	lsrs	r3, r3, #12
20000e3a:	d004      	beq.n	20000e46 <CAN_GetFlagStatus+0xda>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20000e3c:	230f      	movs	r3, #15
20000e3e:	18fb      	adds	r3, r7, r3
20000e40:	2201      	movs	r2, #1
20000e42:	701a      	strb	r2, [r3, #0]
20000e44:	e003      	b.n	20000e4e <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20000e46:	230f      	movs	r3, #15
20000e48:	18fb      	adds	r3, r7, r3
20000e4a:	2200      	movs	r2, #0
20000e4c:	701a      	strb	r2, [r3, #0]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
20000e4e:	230f      	movs	r3, #15
20000e50:	18fb      	adds	r3, r7, r3
20000e52:	781b      	ldrb	r3, [r3, #0]
}
20000e54:	0018      	movs	r0, r3
20000e56:	46bd      	mov	sp, r7
20000e58:	b004      	add	sp, #16
20000e5a:	bd80      	pop	{r7, pc}

20000e5c <CAN_ClearFlag>:
  *            @arg CAN_FLAG_LEC: Last error code Flag
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
20000e5c:	b580      	push	{r7, lr}
20000e5e:	b084      	sub	sp, #16
20000e60:	af00      	add	r7, sp, #0
20000e62:	6078      	str	r0, [r7, #4]
20000e64:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
20000e66:	2300      	movs	r3, #0
20000e68:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
20000e6a:	683b      	ldr	r3, [r7, #0]
20000e6c:	4a16      	ldr	r2, [pc, #88]	; (20000ec8 <CAN_ClearFlag+0x6c>)
20000e6e:	4293      	cmp	r3, r2
20000e70:	d103      	bne.n	20000e7a <CAN_ClearFlag+0x1e>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
20000e72:	687b      	ldr	r3, [r7, #4]
20000e74:	2200      	movs	r2, #0
20000e76:	619a      	str	r2, [r3, #24]
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
    }
  }
}
20000e78:	e021      	b.n	20000ebe <CAN_ClearFlag+0x62>
    flagtmp = CAN_FLAG & 0x000FFFFF;
20000e7a:	683b      	ldr	r3, [r7, #0]
20000e7c:	031b      	lsls	r3, r3, #12
20000e7e:	0b1b      	lsrs	r3, r3, #12
20000e80:	60fb      	str	r3, [r7, #12]
    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
20000e82:	683a      	ldr	r2, [r7, #0]
20000e84:	2380      	movs	r3, #128	; 0x80
20000e86:	049b      	lsls	r3, r3, #18
20000e88:	4013      	ands	r3, r2
20000e8a:	d003      	beq.n	20000e94 <CAN_ClearFlag+0x38>
      CANx->RF0R = (uint32_t)(flagtmp);
20000e8c:	687b      	ldr	r3, [r7, #4]
20000e8e:	68fa      	ldr	r2, [r7, #12]
20000e90:	60da      	str	r2, [r3, #12]
}
20000e92:	e014      	b.n	20000ebe <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
20000e94:	683a      	ldr	r2, [r7, #0]
20000e96:	2380      	movs	r3, #128	; 0x80
20000e98:	04db      	lsls	r3, r3, #19
20000e9a:	4013      	ands	r3, r2
20000e9c:	d003      	beq.n	20000ea6 <CAN_ClearFlag+0x4a>
      CANx->RF1R = (uint32_t)(flagtmp);
20000e9e:	687b      	ldr	r3, [r7, #4]
20000ea0:	68fa      	ldr	r2, [r7, #12]
20000ea2:	611a      	str	r2, [r3, #16]
}
20000ea4:	e00b      	b.n	20000ebe <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
20000ea6:	683a      	ldr	r2, [r7, #0]
20000ea8:	2380      	movs	r3, #128	; 0x80
20000eaa:	051b      	lsls	r3, r3, #20
20000eac:	4013      	ands	r3, r2
20000eae:	d003      	beq.n	20000eb8 <CAN_ClearFlag+0x5c>
      CANx->TSR = (uint32_t)(flagtmp);
20000eb0:	687b      	ldr	r3, [r7, #4]
20000eb2:	68fa      	ldr	r2, [r7, #12]
20000eb4:	609a      	str	r2, [r3, #8]
}
20000eb6:	e002      	b.n	20000ebe <CAN_ClearFlag+0x62>
      CANx->MSR = (uint32_t)(flagtmp);
20000eb8:	687b      	ldr	r3, [r7, #4]
20000eba:	68fa      	ldr	r2, [r7, #12]
20000ebc:	605a      	str	r2, [r3, #4]
}
20000ebe:	46c0      	nop			; (mov r8, r8)
20000ec0:	46bd      	mov	sp, r7
20000ec2:	b004      	add	sp, #16
20000ec4:	bd80      	pop	{r7, pc}
20000ec6:	46c0      	nop			; (mov r8, r8)
20000ec8:	30f00070 	rscscc	r0, r0, r0, ror r0

20000ecc <CAN_GetITStatus>:
  *            @arg CAN_IT_ERR: Error Interrupt
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
20000ecc:	b590      	push	{r4, r7, lr}
20000ece:	b085      	sub	sp, #20
20000ed0:	af00      	add	r7, sp, #0
20000ed2:	6078      	str	r0, [r7, #4]
20000ed4:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
20000ed6:	230f      	movs	r3, #15
20000ed8:	18fb      	adds	r3, r7, r3
20000eda:	2200      	movs	r2, #0
20000edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
20000ede:	687b      	ldr	r3, [r7, #4]
20000ee0:	695b      	ldr	r3, [r3, #20]
20000ee2:	683a      	ldr	r2, [r7, #0]
20000ee4:	4013      	ands	r3, r2
20000ee6:	d100      	bne.n	20000eea <CAN_GetITStatus+0x1e>
20000ee8:	e0db      	b.n	200010a2 <CAN_GetITStatus+0x1d6>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
20000eea:	683b      	ldr	r3, [r7, #0]
20000eec:	2b40      	cmp	r3, #64	; 0x40
20000eee:	d100      	bne.n	20000ef2 <CAN_GetITStatus+0x26>
20000ef0:	e079      	b.n	20000fe6 <CAN_GetITStatus+0x11a>
20000ef2:	d80e      	bhi.n	20000f12 <CAN_GetITStatus+0x46>
20000ef4:	2b04      	cmp	r3, #4
20000ef6:	d04a      	beq.n	20000f8e <CAN_GetITStatus+0xc2>
20000ef8:	d804      	bhi.n	20000f04 <CAN_GetITStatus+0x38>
20000efa:	2b01      	cmp	r3, #1
20000efc:	d030      	beq.n	20000f60 <CAN_GetITStatus+0x94>
20000efe:	2b02      	cmp	r3, #2
20000f00:	d03a      	beq.n	20000f78 <CAN_GetITStatus+0xac>
20000f02:	e0c8      	b.n	20001096 <CAN_GetITStatus+0x1ca>
20000f04:	2b10      	cmp	r3, #16
20000f06:	d058      	beq.n	20000fba <CAN_GetITStatus+0xee>
20000f08:	2b20      	cmp	r3, #32
20000f0a:	d061      	beq.n	20000fd0 <CAN_GetITStatus+0x104>
20000f0c:	2b08      	cmp	r3, #8
20000f0e:	d049      	beq.n	20000fa4 <CAN_GetITStatus+0xd8>
20000f10:	e0c1      	b.n	20001096 <CAN_GetITStatus+0x1ca>
20000f12:	2280      	movs	r2, #128	; 0x80
20000f14:	0112      	lsls	r2, r2, #4
20000f16:	4293      	cmp	r3, r2
20000f18:	d100      	bne.n	20000f1c <CAN_GetITStatus+0x50>
20000f1a:	e0a6      	b.n	2000106a <CAN_GetITStatus+0x19e>
20000f1c:	2280      	movs	r2, #128	; 0x80
20000f1e:	0112      	lsls	r2, r2, #4
20000f20:	4293      	cmp	r3, r2
20000f22:	d80f      	bhi.n	20000f44 <CAN_GetITStatus+0x78>
20000f24:	2280      	movs	r2, #128	; 0x80
20000f26:	0092      	lsls	r2, r2, #2
20000f28:	4293      	cmp	r3, r2
20000f2a:	d100      	bne.n	20000f2e <CAN_GetITStatus+0x62>
20000f2c:	e087      	b.n	2000103e <CAN_GetITStatus+0x172>
20000f2e:	2280      	movs	r2, #128	; 0x80
20000f30:	00d2      	lsls	r2, r2, #3
20000f32:	4293      	cmp	r3, r2
20000f34:	d100      	bne.n	20000f38 <CAN_GetITStatus+0x6c>
20000f36:	e08d      	b.n	20001054 <CAN_GetITStatus+0x188>
20000f38:	2280      	movs	r2, #128	; 0x80
20000f3a:	0052      	lsls	r2, r2, #1
20000f3c:	4293      	cmp	r3, r2
20000f3e:	d100      	bne.n	20000f42 <CAN_GetITStatus+0x76>
20000f40:	e072      	b.n	20001028 <CAN_GetITStatus+0x15c>
20000f42:	e0a8      	b.n	20001096 <CAN_GetITStatus+0x1ca>
20000f44:	2280      	movs	r2, #128	; 0x80
20000f46:	0252      	lsls	r2, r2, #9
20000f48:	4293      	cmp	r3, r2
20000f4a:	d057      	beq.n	20000ffc <CAN_GetITStatus+0x130>
20000f4c:	2280      	movs	r2, #128	; 0x80
20000f4e:	0292      	lsls	r2, r2, #10
20000f50:	4293      	cmp	r3, r2
20000f52:	d05e      	beq.n	20001012 <CAN_GetITStatus+0x146>
20000f54:	2280      	movs	r2, #128	; 0x80
20000f56:	0212      	lsls	r2, r2, #8
20000f58:	4293      	cmp	r3, r2
20000f5a:	d100      	bne.n	20000f5e <CAN_GetITStatus+0x92>
20000f5c:	e090      	b.n	20001080 <CAN_GetITStatus+0x1b4>
20000f5e:	e09a      	b.n	20001096 <CAN_GetITStatus+0x1ca>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
20000f60:	687b      	ldr	r3, [r7, #4]
20000f62:	689b      	ldr	r3, [r3, #8]
20000f64:	220f      	movs	r2, #15
20000f66:	18bc      	adds	r4, r7, r2
20000f68:	4a53      	ldr	r2, [pc, #332]	; (200010b8 <CAN_GetITStatus+0x1ec>)
20000f6a:	0011      	movs	r1, r2
20000f6c:	0018      	movs	r0, r3
20000f6e:	f000 f91b 	bl	200011a8 <CheckITStatus>
20000f72:	0003      	movs	r3, r0
20000f74:	7023      	strb	r3, [r4, #0]
        break;
20000f76:	e098      	b.n	200010aa <CAN_GetITStatus+0x1de>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
20000f78:	687b      	ldr	r3, [r7, #4]
20000f7a:	68db      	ldr	r3, [r3, #12]
20000f7c:	220f      	movs	r2, #15
20000f7e:	18bc      	adds	r4, r7, r2
20000f80:	2103      	movs	r1, #3
20000f82:	0018      	movs	r0, r3
20000f84:	f000 f910 	bl	200011a8 <CheckITStatus>
20000f88:	0003      	movs	r3, r0
20000f8a:	7023      	strb	r3, [r4, #0]
        break;
20000f8c:	e08d      	b.n	200010aa <CAN_GetITStatus+0x1de>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
20000f8e:	687b      	ldr	r3, [r7, #4]
20000f90:	68db      	ldr	r3, [r3, #12]
20000f92:	220f      	movs	r2, #15
20000f94:	18bc      	adds	r4, r7, r2
20000f96:	2108      	movs	r1, #8
20000f98:	0018      	movs	r0, r3
20000f9a:	f000 f905 	bl	200011a8 <CheckITStatus>
20000f9e:	0003      	movs	r3, r0
20000fa0:	7023      	strb	r3, [r4, #0]
        break;
20000fa2:	e082      	b.n	200010aa <CAN_GetITStatus+0x1de>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
20000fa4:	687b      	ldr	r3, [r7, #4]
20000fa6:	68db      	ldr	r3, [r3, #12]
20000fa8:	220f      	movs	r2, #15
20000faa:	18bc      	adds	r4, r7, r2
20000fac:	2110      	movs	r1, #16
20000fae:	0018      	movs	r0, r3
20000fb0:	f000 f8fa 	bl	200011a8 <CheckITStatus>
20000fb4:	0003      	movs	r3, r0
20000fb6:	7023      	strb	r3, [r4, #0]
        break;
20000fb8:	e077      	b.n	200010aa <CAN_GetITStatus+0x1de>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
20000fba:	687b      	ldr	r3, [r7, #4]
20000fbc:	691b      	ldr	r3, [r3, #16]
20000fbe:	220f      	movs	r2, #15
20000fc0:	18bc      	adds	r4, r7, r2
20000fc2:	2103      	movs	r1, #3
20000fc4:	0018      	movs	r0, r3
20000fc6:	f000 f8ef 	bl	200011a8 <CheckITStatus>
20000fca:	0003      	movs	r3, r0
20000fcc:	7023      	strb	r3, [r4, #0]
        break;
20000fce:	e06c      	b.n	200010aa <CAN_GetITStatus+0x1de>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
20000fd0:	687b      	ldr	r3, [r7, #4]
20000fd2:	691b      	ldr	r3, [r3, #16]
20000fd4:	220f      	movs	r2, #15
20000fd6:	18bc      	adds	r4, r7, r2
20000fd8:	2108      	movs	r1, #8
20000fda:	0018      	movs	r0, r3
20000fdc:	f000 f8e4 	bl	200011a8 <CheckITStatus>
20000fe0:	0003      	movs	r3, r0
20000fe2:	7023      	strb	r3, [r4, #0]
        break;
20000fe4:	e061      	b.n	200010aa <CAN_GetITStatus+0x1de>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
20000fe6:	687b      	ldr	r3, [r7, #4]
20000fe8:	691b      	ldr	r3, [r3, #16]
20000fea:	220f      	movs	r2, #15
20000fec:	18bc      	adds	r4, r7, r2
20000fee:	2110      	movs	r1, #16
20000ff0:	0018      	movs	r0, r3
20000ff2:	f000 f8d9 	bl	200011a8 <CheckITStatus>
20000ff6:	0003      	movs	r3, r0
20000ff8:	7023      	strb	r3, [r4, #0]
        break;
20000ffa:	e056      	b.n	200010aa <CAN_GetITStatus+0x1de>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
20000ffc:	687b      	ldr	r3, [r7, #4]
20000ffe:	685b      	ldr	r3, [r3, #4]
20001000:	220f      	movs	r2, #15
20001002:	18bc      	adds	r4, r7, r2
20001004:	2108      	movs	r1, #8
20001006:	0018      	movs	r0, r3
20001008:	f000 f8ce 	bl	200011a8 <CheckITStatus>
2000100c:	0003      	movs	r3, r0
2000100e:	7023      	strb	r3, [r4, #0]
        break;
20001010:	e04b      	b.n	200010aa <CAN_GetITStatus+0x1de>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
20001012:	687b      	ldr	r3, [r7, #4]
20001014:	685b      	ldr	r3, [r3, #4]
20001016:	220f      	movs	r2, #15
20001018:	18bc      	adds	r4, r7, r2
2000101a:	2110      	movs	r1, #16
2000101c:	0018      	movs	r0, r3
2000101e:	f000 f8c3 	bl	200011a8 <CheckITStatus>
20001022:	0003      	movs	r3, r0
20001024:	7023      	strb	r3, [r4, #0]
        break;
20001026:	e040      	b.n	200010aa <CAN_GetITStatus+0x1de>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
20001028:	687b      	ldr	r3, [r7, #4]
2000102a:	699b      	ldr	r3, [r3, #24]
2000102c:	220f      	movs	r2, #15
2000102e:	18bc      	adds	r4, r7, r2
20001030:	2101      	movs	r1, #1
20001032:	0018      	movs	r0, r3
20001034:	f000 f8b8 	bl	200011a8 <CheckITStatus>
20001038:	0003      	movs	r3, r0
2000103a:	7023      	strb	r3, [r4, #0]
        break;
2000103c:	e035      	b.n	200010aa <CAN_GetITStatus+0x1de>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
2000103e:	687b      	ldr	r3, [r7, #4]
20001040:	699b      	ldr	r3, [r3, #24]
20001042:	220f      	movs	r2, #15
20001044:	18bc      	adds	r4, r7, r2
20001046:	2102      	movs	r1, #2
20001048:	0018      	movs	r0, r3
2000104a:	f000 f8ad 	bl	200011a8 <CheckITStatus>
2000104e:	0003      	movs	r3, r0
20001050:	7023      	strb	r3, [r4, #0]
        break;
20001052:	e02a      	b.n	200010aa <CAN_GetITStatus+0x1de>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
20001054:	687b      	ldr	r3, [r7, #4]
20001056:	699b      	ldr	r3, [r3, #24]
20001058:	220f      	movs	r2, #15
2000105a:	18bc      	adds	r4, r7, r2
2000105c:	2104      	movs	r1, #4
2000105e:	0018      	movs	r0, r3
20001060:	f000 f8a2 	bl	200011a8 <CheckITStatus>
20001064:	0003      	movs	r3, r0
20001066:	7023      	strb	r3, [r4, #0]
        break;
20001068:	e01f      	b.n	200010aa <CAN_GetITStatus+0x1de>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
2000106a:	687b      	ldr	r3, [r7, #4]
2000106c:	699b      	ldr	r3, [r3, #24]
2000106e:	220f      	movs	r2, #15
20001070:	18bc      	adds	r4, r7, r2
20001072:	2170      	movs	r1, #112	; 0x70
20001074:	0018      	movs	r0, r3
20001076:	f000 f897 	bl	200011a8 <CheckITStatus>
2000107a:	0003      	movs	r3, r0
2000107c:	7023      	strb	r3, [r4, #0]
        break;
2000107e:	e014      	b.n	200010aa <CAN_GetITStatus+0x1de>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
20001080:	687b      	ldr	r3, [r7, #4]
20001082:	685b      	ldr	r3, [r3, #4]
20001084:	220f      	movs	r2, #15
20001086:	18bc      	adds	r4, r7, r2
20001088:	2104      	movs	r1, #4
2000108a:	0018      	movs	r0, r3
2000108c:	f000 f88c 	bl	200011a8 <CheckITStatus>
20001090:	0003      	movs	r3, r0
20001092:	7023      	strb	r3, [r4, #0]
        break;
20001094:	e009      	b.n	200010aa <CAN_GetITStatus+0x1de>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
20001096:	230f      	movs	r3, #15
20001098:	18fb      	adds	r3, r7, r3
2000109a:	2200      	movs	r2, #0
2000109c:	701a      	strb	r2, [r3, #0]
        break;
2000109e:	46c0      	nop			; (mov r8, r8)
200010a0:	e003      	b.n	200010aa <CAN_GetITStatus+0x1de>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
200010a2:	230f      	movs	r3, #15
200010a4:	18fb      	adds	r3, r7, r3
200010a6:	2200      	movs	r2, #0
200010a8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
200010aa:	230f      	movs	r3, #15
200010ac:	18fb      	adds	r3, r7, r3
200010ae:	781b      	ldrb	r3, [r3, #0]
}
200010b0:	0018      	movs	r0, r3
200010b2:	46bd      	mov	sp, r7
200010b4:	b005      	add	sp, #20
200010b6:	bd90      	pop	{r4, r7, pc}
200010b8:	00010101 	andeq	r0, r1, r1, lsl #2

200010bc <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_ERR: Error Interrupt
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
200010bc:	b580      	push	{r7, lr}
200010be:	b082      	sub	sp, #8
200010c0:	af00      	add	r7, sp, #0
200010c2:	6078      	str	r0, [r7, #4]
200010c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
200010c6:	683b      	ldr	r3, [r7, #0]
200010c8:	2280      	movs	r2, #128	; 0x80
200010ca:	0052      	lsls	r2, r2, #1
200010cc:	4293      	cmp	r3, r2
200010ce:	d04a      	beq.n	20001166 <CAN_ClearITPendingBit+0xaa>
200010d0:	2280      	movs	r2, #128	; 0x80
200010d2:	0052      	lsls	r2, r2, #1
200010d4:	4293      	cmp	r3, r2
200010d6:	d80c      	bhi.n	200010f2 <CAN_ClearITPendingBit+0x36>
200010d8:	2b08      	cmp	r3, #8
200010da:	d030      	beq.n	2000113e <CAN_ClearITPendingBit+0x82>
200010dc:	d804      	bhi.n	200010e8 <CAN_ClearITPendingBit+0x2c>
200010de:	2b01      	cmp	r3, #1
200010e0:	d025      	beq.n	2000112e <CAN_ClearITPendingBit+0x72>
200010e2:	2b04      	cmp	r3, #4
200010e4:	d027      	beq.n	20001136 <CAN_ClearITPendingBit+0x7a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
200010e6:	e058      	b.n	2000119a <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
200010e8:	2b20      	cmp	r3, #32
200010ea:	d02c      	beq.n	20001146 <CAN_ClearITPendingBit+0x8a>
200010ec:	2b40      	cmp	r3, #64	; 0x40
200010ee:	d02e      	beq.n	2000114e <CAN_ClearITPendingBit+0x92>
       break;
200010f0:	e053      	b.n	2000119a <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
200010f2:	2280      	movs	r2, #128	; 0x80
200010f4:	0112      	lsls	r2, r2, #4
200010f6:	4293      	cmp	r3, r2
200010f8:	d041      	beq.n	2000117e <CAN_ClearITPendingBit+0xc2>
200010fa:	2280      	movs	r2, #128	; 0x80
200010fc:	0112      	lsls	r2, r2, #4
200010fe:	4293      	cmp	r3, r2
20001100:	d808      	bhi.n	20001114 <CAN_ClearITPendingBit+0x58>
20001102:	2280      	movs	r2, #128	; 0x80
20001104:	0092      	lsls	r2, r2, #2
20001106:	4293      	cmp	r3, r2
20001108:	d031      	beq.n	2000116e <CAN_ClearITPendingBit+0xb2>
2000110a:	2280      	movs	r2, #128	; 0x80
2000110c:	00d2      	lsls	r2, r2, #3
2000110e:	4293      	cmp	r3, r2
20001110:	d031      	beq.n	20001176 <CAN_ClearITPendingBit+0xba>
       break;
20001112:	e042      	b.n	2000119a <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
20001114:	2280      	movs	r2, #128	; 0x80
20001116:	0252      	lsls	r2, r2, #9
20001118:	4293      	cmp	r3, r2
2000111a:	d01c      	beq.n	20001156 <CAN_ClearITPendingBit+0x9a>
2000111c:	2280      	movs	r2, #128	; 0x80
2000111e:	0292      	lsls	r2, r2, #10
20001120:	4293      	cmp	r3, r2
20001122:	d01c      	beq.n	2000115e <CAN_ClearITPendingBit+0xa2>
20001124:	2280      	movs	r2, #128	; 0x80
20001126:	0212      	lsls	r2, r2, #8
20001128:	4293      	cmp	r3, r2
2000112a:	d02f      	beq.n	2000118c <CAN_ClearITPendingBit+0xd0>
       break;
2000112c:	e035      	b.n	2000119a <CAN_ClearITPendingBit+0xde>
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
2000112e:	687b      	ldr	r3, [r7, #4]
20001130:	4a1c      	ldr	r2, [pc, #112]	; (200011a4 <CAN_ClearITPendingBit+0xe8>)
20001132:	609a      	str	r2, [r3, #8]
      break;
20001134:	e031      	b.n	2000119a <CAN_ClearITPendingBit+0xde>
      CANx->RF0R = CAN_RF0R_FULL0; 
20001136:	687b      	ldr	r3, [r7, #4]
20001138:	2208      	movs	r2, #8
2000113a:	60da      	str	r2, [r3, #12]
      break;
2000113c:	e02d      	b.n	2000119a <CAN_ClearITPendingBit+0xde>
      CANx->RF0R = CAN_RF0R_FOVR0; 
2000113e:	687b      	ldr	r3, [r7, #4]
20001140:	2210      	movs	r2, #16
20001142:	60da      	str	r2, [r3, #12]
      break;
20001144:	e029      	b.n	2000119a <CAN_ClearITPendingBit+0xde>
      CANx->RF1R = CAN_RF1R_FULL1;  
20001146:	687b      	ldr	r3, [r7, #4]
20001148:	2208      	movs	r2, #8
2000114a:	611a      	str	r2, [r3, #16]
      break;
2000114c:	e025      	b.n	2000119a <CAN_ClearITPendingBit+0xde>
      CANx->RF1R = CAN_RF1R_FOVR1; 
2000114e:	687b      	ldr	r3, [r7, #4]
20001150:	2210      	movs	r2, #16
20001152:	611a      	str	r2, [r3, #16]
      break;
20001154:	e021      	b.n	2000119a <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_WKUI;  
20001156:	687b      	ldr	r3, [r7, #4]
20001158:	2208      	movs	r2, #8
2000115a:	605a      	str	r2, [r3, #4]
      break;
2000115c:	e01d      	b.n	2000119a <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_SLAKI;   
2000115e:	687b      	ldr	r3, [r7, #4]
20001160:	2210      	movs	r2, #16
20001162:	605a      	str	r2, [r3, #4]
      break;
20001164:	e019      	b.n	2000119a <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI;
20001166:	687b      	ldr	r3, [r7, #4]
20001168:	2204      	movs	r2, #4
2000116a:	605a      	str	r2, [r3, #4]
      break;
2000116c:	e015      	b.n	2000119a <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI; 
2000116e:	687b      	ldr	r3, [r7, #4]
20001170:	2204      	movs	r2, #4
20001172:	605a      	str	r2, [r3, #4]
      break;
20001174:	e011      	b.n	2000119a <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI; 
20001176:	687b      	ldr	r3, [r7, #4]
20001178:	2204      	movs	r2, #4
2000117a:	605a      	str	r2, [r3, #4]
       break;
2000117c:	e00d      	b.n	2000119a <CAN_ClearITPendingBit+0xde>
      CANx->ESR = RESET; 
2000117e:	687b      	ldr	r3, [r7, #4]
20001180:	2200      	movs	r2, #0
20001182:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
20001184:	687b      	ldr	r3, [r7, #4]
20001186:	2204      	movs	r2, #4
20001188:	605a      	str	r2, [r3, #4]
      break;
2000118a:	e006      	b.n	2000119a <CAN_ClearITPendingBit+0xde>
      CANx->ESR = RESET; 
2000118c:	687b      	ldr	r3, [r7, #4]
2000118e:	2200      	movs	r2, #0
20001190:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
20001192:	687b      	ldr	r3, [r7, #4]
20001194:	2204      	movs	r2, #4
20001196:	605a      	str	r2, [r3, #4]
       break;
20001198:	46c0      	nop			; (mov r8, r8)
   }
}
2000119a:	46c0      	nop			; (mov r8, r8)
2000119c:	46bd      	mov	sp, r7
2000119e:	b002      	add	sp, #8
200011a0:	bd80      	pop	{r7, pc}
200011a2:	46c0      	nop			; (mov r8, r8)
200011a4:	00010101 	andeq	r0, r1, r1, lsl #2

200011a8 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
200011a8:	b580      	push	{r7, lr}
200011aa:	b084      	sub	sp, #16
200011ac:	af00      	add	r7, sp, #0
200011ae:	6078      	str	r0, [r7, #4]
200011b0:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
200011b2:	230f      	movs	r3, #15
200011b4:	18fb      	adds	r3, r7, r3
200011b6:	2200      	movs	r2, #0
200011b8:	701a      	strb	r2, [r3, #0]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
200011ba:	687b      	ldr	r3, [r7, #4]
200011bc:	683a      	ldr	r2, [r7, #0]
200011be:	4013      	ands	r3, r2
200011c0:	d004      	beq.n	200011cc <CheckITStatus+0x24>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
200011c2:	230f      	movs	r3, #15
200011c4:	18fb      	adds	r3, r7, r3
200011c6:	2201      	movs	r2, #1
200011c8:	701a      	strb	r2, [r3, #0]
200011ca:	e003      	b.n	200011d4 <CheckITStatus+0x2c>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
200011cc:	230f      	movs	r3, #15
200011ce:	18fb      	adds	r3, r7, r3
200011d0:	2200      	movs	r2, #0
200011d2:	701a      	strb	r2, [r3, #0]
  }
  return pendingbitstatus;
200011d4:	230f      	movs	r3, #15
200011d6:	18fb      	adds	r3, r7, r3
200011d8:	781b      	ldrb	r3, [r3, #0]
}
200011da:	0018      	movs	r0, r3
200011dc:	46bd      	mov	sp, r7
200011de:	b004      	add	sp, #16
200011e0:	bd80      	pop	{r7, pc}
200011e2:	46c0      	nop			; (mov r8, r8)

200011e4 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
200011e4:	b580      	push	{r7, lr}
200011e6:	b082      	sub	sp, #8
200011e8:	af00      	add	r7, sp, #0
200011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
200011ec:	4b04      	ldr	r3, [pc, #16]	; (20001200 <NVIC_PriorityGroupConfig+0x1c>)
200011ee:	687a      	ldr	r2, [r7, #4]
200011f0:	4904      	ldr	r1, [pc, #16]	; (20001204 <NVIC_PriorityGroupConfig+0x20>)
200011f2:	430a      	orrs	r2, r1
200011f4:	60da      	str	r2, [r3, #12]
}
200011f6:	46c0      	nop			; (mov r8, r8)
200011f8:	46bd      	mov	sp, r7
200011fa:	b002      	add	sp, #8
200011fc:	bd80      	pop	{r7, pc}
200011fe:	46c0      	nop			; (mov r8, r8)
20001200:	e000ed00 	and	lr, r0, r0, lsl #26
20001204:	05fa0000 	ldrbeq	r0, [sl, #0]!

20001208 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
20001208:	b5b0      	push	{r4, r5, r7, lr}
2000120a:	b084      	sub	sp, #16
2000120c:	af00      	add	r7, sp, #0
2000120e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
20001210:	230f      	movs	r3, #15
20001212:	18fb      	adds	r3, r7, r3
20001214:	2200      	movs	r2, #0
20001216:	701a      	strb	r2, [r3, #0]
20001218:	230e      	movs	r3, #14
2000121a:	18fb      	adds	r3, r7, r3
2000121c:	2200      	movs	r2, #0
2000121e:	701a      	strb	r2, [r3, #0]
20001220:	230d      	movs	r3, #13
20001222:	18fb      	adds	r3, r7, r3
20001224:	220f      	movs	r2, #15
20001226:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
20001228:	687b      	ldr	r3, [r7, #4]
2000122a:	78db      	ldrb	r3, [r3, #3]
2000122c:	2b00      	cmp	r3, #0
2000122e:	d04d      	beq.n	200012cc <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
20001230:	4b31      	ldr	r3, [pc, #196]	; (200012f8 <NVIC_Init+0xf0>)
20001232:	68db      	ldr	r3, [r3, #12]
20001234:	43db      	mvns	r3, r3
20001236:	0a1b      	lsrs	r3, r3, #8
20001238:	b2da      	uxtb	r2, r3
2000123a:	200f      	movs	r0, #15
2000123c:	183b      	adds	r3, r7, r0
2000123e:	2107      	movs	r1, #7
20001240:	400a      	ands	r2, r1
20001242:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
20001244:	250e      	movs	r5, #14
20001246:	197b      	adds	r3, r7, r5
20001248:	183a      	adds	r2, r7, r0
2000124a:	7812      	ldrb	r2, [r2, #0]
2000124c:	2104      	movs	r1, #4
2000124e:	1a8a      	subs	r2, r1, r2
20001250:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
20001252:	240d      	movs	r4, #13
20001254:	193b      	adds	r3, r7, r4
20001256:	781a      	ldrb	r2, [r3, #0]
20001258:	0001      	movs	r1, r0
2000125a:	187b      	adds	r3, r7, r1
2000125c:	781b      	ldrb	r3, [r3, #0]
2000125e:	411a      	asrs	r2, r3
20001260:	193b      	adds	r3, r7, r4
20001262:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
20001264:	687b      	ldr	r3, [r7, #4]
20001266:	785b      	ldrb	r3, [r3, #1]
20001268:	001a      	movs	r2, r3
2000126a:	197b      	adds	r3, r7, r5
2000126c:	781b      	ldrb	r3, [r3, #0]
2000126e:	409a      	lsls	r2, r3
20001270:	0008      	movs	r0, r1
20001272:	187b      	adds	r3, r7, r1
20001274:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
20001276:	687b      	ldr	r3, [r7, #4]
20001278:	789b      	ldrb	r3, [r3, #2]
2000127a:	193a      	adds	r2, r7, r4
2000127c:	7812      	ldrb	r2, [r2, #0]
2000127e:	4013      	ands	r3, r2
20001280:	b2d9      	uxtb	r1, r3
20001282:	183b      	adds	r3, r7, r0
20001284:	183a      	adds	r2, r7, r0
20001286:	7812      	ldrb	r2, [r2, #0]
20001288:	430a      	orrs	r2, r1
2000128a:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
2000128c:	183b      	adds	r3, r7, r0
2000128e:	183a      	adds	r2, r7, r0
20001290:	7812      	ldrb	r2, [r2, #0]
20001292:	0112      	lsls	r2, r2, #4
20001294:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
20001296:	4a19      	ldr	r2, [pc, #100]	; (200012fc <NVIC_Init+0xf4>)
20001298:	687b      	ldr	r3, [r7, #4]
2000129a:	781b      	ldrb	r3, [r3, #0]
2000129c:	0019      	movs	r1, r3
2000129e:	23c0      	movs	r3, #192	; 0xc0
200012a0:	009b      	lsls	r3, r3, #2
200012a2:	1852      	adds	r2, r2, r1
200012a4:	18d3      	adds	r3, r2, r3
200012a6:	183a      	adds	r2, r7, r0
200012a8:	7812      	ldrb	r2, [r2, #0]
200012aa:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200012ac:	687b      	ldr	r3, [r7, #4]
200012ae:	781b      	ldrb	r3, [r3, #0]
200012b0:	001a      	movs	r2, r3
200012b2:	231f      	movs	r3, #31
200012b4:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200012b6:	4911      	ldr	r1, [pc, #68]	; (200012fc <NVIC_Init+0xf4>)
200012b8:	687a      	ldr	r2, [r7, #4]
200012ba:	7812      	ldrb	r2, [r2, #0]
200012bc:	0952      	lsrs	r2, r2, #5
200012be:	b2d2      	uxtb	r2, r2
200012c0:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200012c2:	2201      	movs	r2, #1
200012c4:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200012c6:	0083      	lsls	r3, r0, #2
200012c8:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
200012ca:	e010      	b.n	200012ee <NVIC_Init+0xe6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200012cc:	687b      	ldr	r3, [r7, #4]
200012ce:	781b      	ldrb	r3, [r3, #0]
200012d0:	001a      	movs	r2, r3
200012d2:	231f      	movs	r3, #31
200012d4:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200012d6:	4909      	ldr	r1, [pc, #36]	; (200012fc <NVIC_Init+0xf4>)
200012d8:	687a      	ldr	r2, [r7, #4]
200012da:	7812      	ldrb	r2, [r2, #0]
200012dc:	0952      	lsrs	r2, r2, #5
200012de:	b2d2      	uxtb	r2, r2
200012e0:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200012e2:	2201      	movs	r2, #1
200012e4:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200012e6:	0003      	movs	r3, r0
200012e8:	3320      	adds	r3, #32
200012ea:	009b      	lsls	r3, r3, #2
200012ec:	505a      	str	r2, [r3, r1]
}
200012ee:	46c0      	nop			; (mov r8, r8)
200012f0:	46bd      	mov	sp, r7
200012f2:	b004      	add	sp, #16
200012f4:	bdb0      	pop	{r4, r5, r7, pc}
200012f6:	46c0      	nop			; (mov r8, r8)
200012f8:	e000ed00 	and	lr, r0, r0, lsl #26
200012fc:	e000e100 	and	lr, r0, r0, lsl #2

20001300 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
20001300:	b580      	push	{r7, lr}
20001302:	b082      	sub	sp, #8
20001304:	af00      	add	r7, sp, #0
20001306:	6078      	str	r0, [r7, #4]
20001308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
2000130a:	683b      	ldr	r3, [r7, #0]
2000130c:	4a05      	ldr	r2, [pc, #20]	; (20001324 <NVIC_SetVectorTable+0x24>)
2000130e:	4013      	ands	r3, r2
20001310:	0019      	movs	r1, r3
20001312:	4b05      	ldr	r3, [pc, #20]	; (20001328 <NVIC_SetVectorTable+0x28>)
20001314:	687a      	ldr	r2, [r7, #4]
20001316:	430a      	orrs	r2, r1
20001318:	609a      	str	r2, [r3, #8]
}
2000131a:	46c0      	nop			; (mov r8, r8)
2000131c:	46bd      	mov	sp, r7
2000131e:	b002      	add	sp, #8
20001320:	bd80      	pop	{r7, pc}
20001322:	46c0      	nop			; (mov r8, r8)
20001324:	1fffff80 	svcne	0x00ffff80
20001328:	e000ed00 	and	lr, r0, r0, lsl #26

2000132c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
2000132c:	b580      	push	{r7, lr}
2000132e:	b082      	sub	sp, #8
20001330:	af00      	add	r7, sp, #0
20001332:	0002      	movs	r2, r0
20001334:	1dfb      	adds	r3, r7, #7
20001336:	701a      	strb	r2, [r3, #0]
20001338:	1dbb      	adds	r3, r7, #6
2000133a:	1c0a      	adds	r2, r1, #0
2000133c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
2000133e:	1dbb      	adds	r3, r7, #6
20001340:	781b      	ldrb	r3, [r3, #0]
20001342:	2b00      	cmp	r3, #0
20001344:	d007      	beq.n	20001356 <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
20001346:	4b0a      	ldr	r3, [pc, #40]	; (20001370 <NVIC_SystemLPConfig+0x44>)
20001348:	6919      	ldr	r1, [r3, #16]
2000134a:	1dfb      	adds	r3, r7, #7
2000134c:	781a      	ldrb	r2, [r3, #0]
2000134e:	4b08      	ldr	r3, [pc, #32]	; (20001370 <NVIC_SystemLPConfig+0x44>)
20001350:	430a      	orrs	r2, r1
20001352:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
20001354:	e007      	b.n	20001366 <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
20001356:	4b06      	ldr	r3, [pc, #24]	; (20001370 <NVIC_SystemLPConfig+0x44>)
20001358:	691a      	ldr	r2, [r3, #16]
2000135a:	1dfb      	adds	r3, r7, #7
2000135c:	781b      	ldrb	r3, [r3, #0]
2000135e:	43d9      	mvns	r1, r3
20001360:	4b03      	ldr	r3, [pc, #12]	; (20001370 <NVIC_SystemLPConfig+0x44>)
20001362:	400a      	ands	r2, r1
20001364:	611a      	str	r2, [r3, #16]
}
20001366:	46c0      	nop			; (mov r8, r8)
20001368:	46bd      	mov	sp, r7
2000136a:	b002      	add	sp, #8
2000136c:	bd80      	pop	{r7, pc}
2000136e:	46c0      	nop			; (mov r8, r8)
20001370:	e000ed00 	and	lr, r0, r0, lsl #26

20001374 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
20001374:	b580      	push	{r7, lr}
20001376:	b082      	sub	sp, #8
20001378:	af00      	add	r7, sp, #0
2000137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
2000137c:	687b      	ldr	r3, [r7, #4]
2000137e:	2b04      	cmp	r3, #4
20001380:	d106      	bne.n	20001390 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
20001382:	4b08      	ldr	r3, [pc, #32]	; (200013a4 <SysTick_CLKSourceConfig+0x30>)
20001384:	681a      	ldr	r2, [r3, #0]
20001386:	4b07      	ldr	r3, [pc, #28]	; (200013a4 <SysTick_CLKSourceConfig+0x30>)
20001388:	2104      	movs	r1, #4
2000138a:	430a      	orrs	r2, r1
2000138c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
2000138e:	e005      	b.n	2000139c <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
20001390:	4b04      	ldr	r3, [pc, #16]	; (200013a4 <SysTick_CLKSourceConfig+0x30>)
20001392:	681a      	ldr	r2, [r3, #0]
20001394:	4b03      	ldr	r3, [pc, #12]	; (200013a4 <SysTick_CLKSourceConfig+0x30>)
20001396:	2104      	movs	r1, #4
20001398:	438a      	bics	r2, r1
2000139a:	601a      	str	r2, [r3, #0]
}
2000139c:	46c0      	nop			; (mov r8, r8)
2000139e:	46bd      	mov	sp, r7
200013a0:	b002      	add	sp, #8
200013a2:	bd80      	pop	{r7, pc}
200013a4:	e000e010 	and	lr, r0, r0, lsl r0

200013a8 <encode_door_config>:
#include "stm32f4xx.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_gpio.h"


uint8_t encode_door_config(CanTxMsg *msg, uint8_t to_central, uint8_t door_id_0, uint8_t door_id_1, uint16_t time_0, uint16_t time_1, uint8_t locked){
200013a8:	b590      	push	{r4, r7, lr}
200013aa:	b085      	sub	sp, #20
200013ac:	af00      	add	r7, sp, #0
200013ae:	6078      	str	r0, [r7, #4]
200013b0:	000c      	movs	r4, r1
200013b2:	0010      	movs	r0, r2
200013b4:	0019      	movs	r1, r3
200013b6:	1cfb      	adds	r3, r7, #3
200013b8:	1c22      	adds	r2, r4, #0
200013ba:	701a      	strb	r2, [r3, #0]
200013bc:	1cbb      	adds	r3, r7, #2
200013be:	1c02      	adds	r2, r0, #0
200013c0:	701a      	strb	r2, [r3, #0]
200013c2:	1c7b      	adds	r3, r7, #1
200013c4:	1c0a      	adds	r2, r1, #0
200013c6:	701a      	strb	r2, [r3, #0]
    if(door_id_0 > door_id_1 || door_id_1 > 31){
200013c8:	1cba      	adds	r2, r7, #2
200013ca:	1c7b      	adds	r3, r7, #1
200013cc:	7812      	ldrb	r2, [r2, #0]
200013ce:	781b      	ldrb	r3, [r3, #0]
200013d0:	429a      	cmp	r2, r3
200013d2:	d803      	bhi.n	200013dc <encode_door_config+0x34>
200013d4:	1c7b      	adds	r3, r7, #1
200013d6:	781b      	ldrb	r3, [r3, #0]
200013d8:	2b1f      	cmp	r3, #31
200013da:	d901      	bls.n	200013e0 <encode_door_config+0x38>
        return 0;
200013dc:	2300      	movs	r3, #0
200013de:	e042      	b.n	20001466 <encode_door_config+0xbe>
    }
    
    uint8_t *data_pointer =  &(msg->Data);
200013e0:	687b      	ldr	r3, [r7, #4]
200013e2:	330b      	adds	r3, #11
200013e4:	60fb      	str	r3, [r7, #12]
    
    
    Header header = empty_header;
200013e6:	2300      	movs	r3, #0
200013e8:	60bb      	str	r3, [r7, #8]
    header.msgType = 2;
200013ea:	200b      	movs	r0, #11
200013ec:	183b      	adds	r3, r7, r0
200013ee:	781a      	ldrb	r2, [r3, #0]
200013f0:	211c      	movs	r1, #28
200013f2:	438a      	bics	r2, r1
200013f4:	1c11      	adds	r1, r2, #0
200013f6:	2208      	movs	r2, #8
200013f8:	430a      	orrs	r2, r1
200013fa:	701a      	strb	r2, [r3, #0]
    header.toCentral = to_central;
200013fc:	1cfb      	adds	r3, r7, #3
200013fe:	781b      	ldrb	r3, [r3, #0]
20001400:	2201      	movs	r2, #1
20001402:	4013      	ands	r3, r2
20001404:	b2da      	uxtb	r2, r3
20001406:	183b      	adds	r3, r7, r0
20001408:	2101      	movs	r1, #1
2000140a:	400a      	ands	r2, r1
2000140c:	1890      	adds	r0, r2, r2
2000140e:	781a      	ldrb	r2, [r3, #0]
20001410:	2102      	movs	r1, #2
20001412:	438a      	bics	r2, r1
20001414:	1c11      	adds	r1, r2, #0
20001416:	1c02      	adds	r2, r0, #0
20001418:	430a      	orrs	r2, r1
2000141a:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
2000141c:	2308      	movs	r3, #8
2000141e:	18fb      	adds	r3, r7, r3
20001420:	681a      	ldr	r2, [r3, #0]
20001422:	687b      	ldr	r3, [r7, #4]
20001424:	605a      	str	r2, [r3, #4]
    
    msg->DLC = 7;
20001426:	687b      	ldr	r3, [r7, #4]
20001428:	2207      	movs	r2, #7
2000142a:	729a      	strb	r2, [r3, #10]
    
    //Dörrintervall skrivs till de 16 första databitarna
    *data_pointer = door_id_0;
2000142c:	68fb      	ldr	r3, [r7, #12]
2000142e:	1cba      	adds	r2, r7, #2
20001430:	7812      	ldrb	r2, [r2, #0]
20001432:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 1) = door_id_1;
20001434:	68fb      	ldr	r3, [r7, #12]
20001436:	3301      	adds	r3, #1
20001438:	1c7a      	adds	r2, r7, #1
2000143a:	7812      	ldrb	r2, [r2, #0]
2000143c:	701a      	strb	r2, [r3, #0]
    
    
    //De två tidsvärdena skrivs till bit 16-47
    *(data_pointer + 2) = time_0;
2000143e:	68fb      	ldr	r3, [r7, #12]
20001440:	3302      	adds	r3, #2
20001442:	2120      	movs	r1, #32
20001444:	187a      	adds	r2, r7, r1
20001446:	8812      	ldrh	r2, [r2, #0]
20001448:	b2d2      	uxtb	r2, r2
2000144a:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 4) = time_0;
2000144c:	68fb      	ldr	r3, [r7, #12]
2000144e:	3304      	adds	r3, #4
20001450:	187a      	adds	r2, r7, r1
20001452:	8812      	ldrh	r2, [r2, #0]
20001454:	b2d2      	uxtb	r2, r2
20001456:	701a      	strb	r2, [r3, #0]
    
    //Låsflagga skrivs till bit 48-55
    *(data_pointer + 6) = locked;
20001458:	68fb      	ldr	r3, [r7, #12]
2000145a:	3306      	adds	r3, #6
2000145c:	2228      	movs	r2, #40	; 0x28
2000145e:	18ba      	adds	r2, r7, r2
20001460:	7812      	ldrb	r2, [r2, #0]
20001462:	701a      	strb	r2, [r3, #0]
    
    return 1;
20001464:	2301      	movs	r3, #1
}
20001466:	0018      	movs	r0, r3
20001468:	46bd      	mov	sp, r7
2000146a:	b005      	add	sp, #20
2000146c:	bd90      	pop	{r4, r7, pc}

2000146e <encode_request_id>:
 * uint32_t temp_id: temporärt, förslagsvis slumpgenererat id
 * uint8_t device_type: 0 för dörrenhet, 1 för rörelseenhet
 * uint8_t value_0: antal dörrar eller avståndssensorer
 * uint8_t value_1: antal vibrationssensorer
 */
uint8_t encode_request_id(CanTxMsg *msg, uint32_t temp_id, uint8_t device_type, uint8_t value_0, uint8_t value_1){
2000146e:	b580      	push	{r7, lr}
20001470:	b086      	sub	sp, #24
20001472:	af00      	add	r7, sp, #0
20001474:	60f8      	str	r0, [r7, #12]
20001476:	60b9      	str	r1, [r7, #8]
20001478:	0019      	movs	r1, r3
2000147a:	1dfb      	adds	r3, r7, #7
2000147c:	701a      	strb	r2, [r3, #0]
2000147e:	1dbb      	adds	r3, r7, #6
20001480:	1c0a      	adds	r2, r1, #0
20001482:	701a      	strb	r2, [r3, #0]
    uint8_t *data_pointer =  &(msg->Data);
20001484:	68fb      	ldr	r3, [r7, #12]
20001486:	330b      	adds	r3, #11
20001488:	617b      	str	r3, [r7, #20]
    
    
    Header header = empty_header;
2000148a:	2300      	movs	r3, #0
2000148c:	613b      	str	r3, [r7, #16]
    header.msgType = 4;
2000148e:	2013      	movs	r0, #19
20001490:	183b      	adds	r3, r7, r0
20001492:	781a      	ldrb	r2, [r3, #0]
20001494:	211c      	movs	r1, #28
20001496:	438a      	bics	r2, r1
20001498:	1c11      	adds	r1, r2, #0
2000149a:	2210      	movs	r2, #16
2000149c:	430a      	orrs	r2, r1
2000149e:	701a      	strb	r2, [r3, #0]
    header.toCentral = 1;
200014a0:	183b      	adds	r3, r7, r0
200014a2:	781a      	ldrb	r2, [r3, #0]
200014a4:	2102      	movs	r1, #2
200014a6:	430a      	orrs	r2, r1
200014a8:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
200014aa:	2310      	movs	r3, #16
200014ac:	18fb      	adds	r3, r7, r3
200014ae:	681a      	ldr	r2, [r3, #0]
200014b0:	68fb      	ldr	r3, [r7, #12]
200014b2:	605a      	str	r2, [r3, #4]
    
    
    
    msg->DLC = 7;
200014b4:	68fb      	ldr	r3, [r7, #12]
200014b6:	2207      	movs	r2, #7
200014b8:	729a      	strb	r2, [r3, #10]
    
    msg->IDE = CAN_Id_Extended;
200014ba:	68fb      	ldr	r3, [r7, #12]
200014bc:	2204      	movs	r2, #4
200014be:	721a      	strb	r2, [r3, #8]
    msg->RTR = CAN_RTR_Data;
200014c0:	68fb      	ldr	r3, [r7, #12]
200014c2:	2200      	movs	r2, #0
200014c4:	725a      	strb	r2, [r3, #9]
    
    //Id skrivs in i bytearrayen för data
    *data_pointer = temp_id;
200014c6:	68bb      	ldr	r3, [r7, #8]
200014c8:	b2da      	uxtb	r2, r3
200014ca:	697b      	ldr	r3, [r7, #20]
200014cc:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 4) = device_type;
200014ce:	697b      	ldr	r3, [r7, #20]
200014d0:	3304      	adds	r3, #4
200014d2:	1dfa      	adds	r2, r7, #7
200014d4:	7812      	ldrb	r2, [r2, #0]
200014d6:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 5) = value_0;
200014d8:	697b      	ldr	r3, [r7, #20]
200014da:	3305      	adds	r3, #5
200014dc:	1dba      	adds	r2, r7, #6
200014de:	7812      	ldrb	r2, [r2, #0]
200014e0:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 6) = value_1;
200014e2:	697b      	ldr	r3, [r7, #20]
200014e4:	3306      	adds	r3, #6
200014e6:	2220      	movs	r2, #32
200014e8:	18ba      	adds	r2, r7, r2
200014ea:	7812      	ldrb	r2, [r2, #0]
200014ec:	701a      	strb	r2, [r3, #0]
    
    return 1;
200014ee:	2301      	movs	r3, #1
}
200014f0:	0018      	movs	r0, r3
200014f2:	46bd      	mov	sp, r7
200014f4:	b006      	add	sp, #24
200014f6:	bd80      	pop	{r7, pc}

200014f8 <encode_assign_id>:

uint8_t encode_assign_id(CanTxMsg *msg, uint8_t id){
200014f8:	b580      	push	{r7, lr}
200014fa:	b084      	sub	sp, #16
200014fc:	af00      	add	r7, sp, #0
200014fe:	6078      	str	r0, [r7, #4]
20001500:	000a      	movs	r2, r1
20001502:	1cfb      	adds	r3, r7, #3
20001504:	701a      	strb	r2, [r3, #0]
    uint8_t *data_pointer =  &(msg->Data);
20001506:	687b      	ldr	r3, [r7, #4]
20001508:	330b      	adds	r3, #11
2000150a:	60fb      	str	r3, [r7, #12]
    
    
    Header header = empty_header;
2000150c:	2300      	movs	r3, #0
2000150e:	60bb      	str	r3, [r7, #8]
    header.msgType = 3;
20001510:	200b      	movs	r0, #11
20001512:	183b      	adds	r3, r7, r0
20001514:	781a      	ldrb	r2, [r3, #0]
20001516:	211c      	movs	r1, #28
20001518:	438a      	bics	r2, r1
2000151a:	1c11      	adds	r1, r2, #0
2000151c:	220c      	movs	r2, #12
2000151e:	430a      	orrs	r2, r1
20001520:	701a      	strb	r2, [r3, #0]
    header.toCentral = 0;
20001522:	183b      	adds	r3, r7, r0
20001524:	781a      	ldrb	r2, [r3, #0]
20001526:	2102      	movs	r1, #2
20001528:	438a      	bics	r2, r1
2000152a:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
2000152c:	2308      	movs	r3, #8
2000152e:	18fb      	adds	r3, r7, r3
20001530:	681a      	ldr	r2, [r3, #0]
20001532:	687b      	ldr	r3, [r7, #4]
20001534:	605a      	str	r2, [r3, #4]
    
    msg->DLC = 1;
20001536:	687b      	ldr	r3, [r7, #4]
20001538:	2201      	movs	r2, #1
2000153a:	729a      	strb	r2, [r3, #10]
    
    msg->IDE = CAN_Id_Extended; //Alternativen är CAN_Id_Standard eller FCAN_Id_Extended
2000153c:	687b      	ldr	r3, [r7, #4]
2000153e:	2204      	movs	r2, #4
20001540:	721a      	strb	r2, [r3, #8]
    msg->RTR = CAN_RTR_Data;
20001542:	687b      	ldr	r3, [r7, #4]
20001544:	2200      	movs	r2, #0
20001546:	725a      	strb	r2, [r3, #9]
    
    //Id skrivs in i bytearrayen för data
    *data_pointer = id;
20001548:	68fb      	ldr	r3, [r7, #12]
2000154a:	1cfa      	adds	r2, r7, #3
2000154c:	7812      	ldrb	r2, [r2, #0]
2000154e:	701a      	strb	r2, [r3, #0]
}
20001550:	46c0      	nop			; (mov r8, r8)
20001552:	0018      	movs	r0, r3
20001554:	46bd      	mov	sp, r7
20001556:	b004      	add	sp, #16
20001558:	bd80      	pop	{r7, pc}

2000155a <encode_distance_config>:

uint8_t encode_distance_config(CanTxMsg *msg, uint32_t dist){
2000155a:	b580      	push	{r7, lr}
2000155c:	b084      	sub	sp, #16
2000155e:	af00      	add	r7, sp, #0
20001560:	6078      	str	r0, [r7, #4]
20001562:	6039      	str	r1, [r7, #0]
    uint8_t *data_pointer =  &(msg->Data[0]);
20001564:	687b      	ldr	r3, [r7, #4]
20001566:	330b      	adds	r3, #11
20001568:	60fb      	str	r3, [r7, #12]
    
    msg->DLC = 4;
2000156a:	687b      	ldr	r3, [r7, #4]
2000156c:	2204      	movs	r2, #4
2000156e:	729a      	strb	r2, [r3, #10]
    
    //Avstånd skrivs in i bytearrayen för data
    *data_pointer = dist;
20001570:	683b      	ldr	r3, [r7, #0]
20001572:	b2da      	uxtb	r2, r3
20001574:	68fb      	ldr	r3, [r7, #12]
20001576:	701a      	strb	r2, [r3, #0]
20001578:	46c0      	nop			; (mov r8, r8)
2000157a:	0018      	movs	r0, r3
2000157c:	46bd      	mov	sp, r7
2000157e:	b004      	add	sp, #16
20001580:	bd80      	pop	{r7, pc}
	...

20001584 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
20001584:	b580      	push	{r7, lr}
20001586:	b082      	sub	sp, #8
20001588:	af00      	add	r7, sp, #0
2000158a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
2000158c:	687b      	ldr	r3, [r7, #4]
2000158e:	4a4e      	ldr	r2, [pc, #312]	; (200016c8 <GPIO_DeInit+0x144>)
20001590:	4293      	cmp	r3, r2
20001592:	d108      	bne.n	200015a6 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20001594:	2101      	movs	r1, #1
20001596:	2001      	movs	r0, #1
20001598:	f000 fffa 	bl	20002590 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
2000159c:	2100      	movs	r1, #0
2000159e:	2001      	movs	r0, #1
200015a0:	f000 fff6 	bl	20002590 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
200015a4:	e08c      	b.n	200016c0 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
200015a6:	687b      	ldr	r3, [r7, #4]
200015a8:	4a48      	ldr	r2, [pc, #288]	; (200016cc <GPIO_DeInit+0x148>)
200015aa:	4293      	cmp	r3, r2
200015ac:	d108      	bne.n	200015c0 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
200015ae:	2101      	movs	r1, #1
200015b0:	2002      	movs	r0, #2
200015b2:	f000 ffed 	bl	20002590 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
200015b6:	2100      	movs	r1, #0
200015b8:	2002      	movs	r0, #2
200015ba:	f000 ffe9 	bl	20002590 <RCC_AHB1PeriphResetCmd>
}
200015be:	e07f      	b.n	200016c0 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
200015c0:	687b      	ldr	r3, [r7, #4]
200015c2:	4a43      	ldr	r2, [pc, #268]	; (200016d0 <GPIO_DeInit+0x14c>)
200015c4:	4293      	cmp	r3, r2
200015c6:	d108      	bne.n	200015da <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
200015c8:	2101      	movs	r1, #1
200015ca:	2004      	movs	r0, #4
200015cc:	f000 ffe0 	bl	20002590 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
200015d0:	2100      	movs	r1, #0
200015d2:	2004      	movs	r0, #4
200015d4:	f000 ffdc 	bl	20002590 <RCC_AHB1PeriphResetCmd>
}
200015d8:	e072      	b.n	200016c0 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
200015da:	687b      	ldr	r3, [r7, #4]
200015dc:	4a3d      	ldr	r2, [pc, #244]	; (200016d4 <GPIO_DeInit+0x150>)
200015de:	4293      	cmp	r3, r2
200015e0:	d108      	bne.n	200015f4 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
200015e2:	2101      	movs	r1, #1
200015e4:	2008      	movs	r0, #8
200015e6:	f000 ffd3 	bl	20002590 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
200015ea:	2100      	movs	r1, #0
200015ec:	2008      	movs	r0, #8
200015ee:	f000 ffcf 	bl	20002590 <RCC_AHB1PeriphResetCmd>
}
200015f2:	e065      	b.n	200016c0 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
200015f4:	687b      	ldr	r3, [r7, #4]
200015f6:	4a38      	ldr	r2, [pc, #224]	; (200016d8 <GPIO_DeInit+0x154>)
200015f8:	4293      	cmp	r3, r2
200015fa:	d108      	bne.n	2000160e <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
200015fc:	2101      	movs	r1, #1
200015fe:	2010      	movs	r0, #16
20001600:	f000 ffc6 	bl	20002590 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20001604:	2100      	movs	r1, #0
20001606:	2010      	movs	r0, #16
20001608:	f000 ffc2 	bl	20002590 <RCC_AHB1PeriphResetCmd>
}
2000160c:	e058      	b.n	200016c0 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
2000160e:	687b      	ldr	r3, [r7, #4]
20001610:	4a32      	ldr	r2, [pc, #200]	; (200016dc <GPIO_DeInit+0x158>)
20001612:	4293      	cmp	r3, r2
20001614:	d108      	bne.n	20001628 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
20001616:	2101      	movs	r1, #1
20001618:	2020      	movs	r0, #32
2000161a:	f000 ffb9 	bl	20002590 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
2000161e:	2100      	movs	r1, #0
20001620:	2020      	movs	r0, #32
20001622:	f000 ffb5 	bl	20002590 <RCC_AHB1PeriphResetCmd>
}
20001626:	e04b      	b.n	200016c0 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20001628:	687b      	ldr	r3, [r7, #4]
2000162a:	4a2d      	ldr	r2, [pc, #180]	; (200016e0 <GPIO_DeInit+0x15c>)
2000162c:	4293      	cmp	r3, r2
2000162e:	d108      	bne.n	20001642 <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20001630:	2101      	movs	r1, #1
20001632:	2040      	movs	r0, #64	; 0x40
20001634:	f000 ffac 	bl	20002590 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20001638:	2100      	movs	r1, #0
2000163a:	2040      	movs	r0, #64	; 0x40
2000163c:	f000 ffa8 	bl	20002590 <RCC_AHB1PeriphResetCmd>
}
20001640:	e03e      	b.n	200016c0 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
20001642:	687b      	ldr	r3, [r7, #4]
20001644:	4a27      	ldr	r2, [pc, #156]	; (200016e4 <GPIO_DeInit+0x160>)
20001646:	4293      	cmp	r3, r2
20001648:	d108      	bne.n	2000165c <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
2000164a:	2101      	movs	r1, #1
2000164c:	2080      	movs	r0, #128	; 0x80
2000164e:	f000 ff9f 	bl	20002590 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
20001652:	2100      	movs	r1, #0
20001654:	2080      	movs	r0, #128	; 0x80
20001656:	f000 ff9b 	bl	20002590 <RCC_AHB1PeriphResetCmd>
}
2000165a:	e031      	b.n	200016c0 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
2000165c:	687b      	ldr	r3, [r7, #4]
2000165e:	4a22      	ldr	r2, [pc, #136]	; (200016e8 <GPIO_DeInit+0x164>)
20001660:	4293      	cmp	r3, r2
20001662:	d10c      	bne.n	2000167e <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
20001664:	2380      	movs	r3, #128	; 0x80
20001666:	005b      	lsls	r3, r3, #1
20001668:	2101      	movs	r1, #1
2000166a:	0018      	movs	r0, r3
2000166c:	f000 ff90 	bl	20002590 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20001670:	2380      	movs	r3, #128	; 0x80
20001672:	005b      	lsls	r3, r3, #1
20001674:	2100      	movs	r1, #0
20001676:	0018      	movs	r0, r3
20001678:	f000 ff8a 	bl	20002590 <RCC_AHB1PeriphResetCmd>
}
2000167c:	e020      	b.n	200016c0 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
2000167e:	687b      	ldr	r3, [r7, #4]
20001680:	4a1a      	ldr	r2, [pc, #104]	; (200016ec <GPIO_DeInit+0x168>)
20001682:	4293      	cmp	r3, r2
20001684:	d10c      	bne.n	200016a0 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
20001686:	2380      	movs	r3, #128	; 0x80
20001688:	009b      	lsls	r3, r3, #2
2000168a:	2101      	movs	r1, #1
2000168c:	0018      	movs	r0, r3
2000168e:	f000 ff7f 	bl	20002590 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
20001692:	2380      	movs	r3, #128	; 0x80
20001694:	009b      	lsls	r3, r3, #2
20001696:	2100      	movs	r1, #0
20001698:	0018      	movs	r0, r3
2000169a:	f000 ff79 	bl	20002590 <RCC_AHB1PeriphResetCmd>
}
2000169e:	e00f      	b.n	200016c0 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
200016a0:	687b      	ldr	r3, [r7, #4]
200016a2:	4a13      	ldr	r2, [pc, #76]	; (200016f0 <GPIO_DeInit+0x16c>)
200016a4:	4293      	cmp	r3, r2
200016a6:	d10b      	bne.n	200016c0 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
200016a8:	2380      	movs	r3, #128	; 0x80
200016aa:	00db      	lsls	r3, r3, #3
200016ac:	2101      	movs	r1, #1
200016ae:	0018      	movs	r0, r3
200016b0:	f000 ff6e 	bl	20002590 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
200016b4:	2380      	movs	r3, #128	; 0x80
200016b6:	00db      	lsls	r3, r3, #3
200016b8:	2100      	movs	r1, #0
200016ba:	0018      	movs	r0, r3
200016bc:	f000 ff68 	bl	20002590 <RCC_AHB1PeriphResetCmd>
}
200016c0:	46c0      	nop			; (mov r8, r8)
200016c2:	46bd      	mov	sp, r7
200016c4:	b002      	add	sp, #8
200016c6:	bd80      	pop	{r7, pc}
200016c8:	40020000 	andmi	r0, r2, r0
200016cc:	40020400 	andmi	r0, r2, r0, lsl #8
200016d0:	40020800 	andmi	r0, r2, r0, lsl #16
200016d4:	40020c00 	andmi	r0, r2, r0, lsl #24
200016d8:	40021000 	andmi	r1, r2, r0
200016dc:	40021400 	andmi	r1, r2, r0, lsl #8
200016e0:	40021800 	andmi	r1, r2, r0, lsl #16
200016e4:	40021c00 	andmi	r1, r2, r0, lsl #24
200016e8:	40022000 	andmi	r2, r2, r0
200016ec:	40022400 	andmi	r2, r2, r0, lsl #8
200016f0:	40022800 	andmi	r2, r2, r0, lsl #16

200016f4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
200016f4:	b580      	push	{r7, lr}
200016f6:	b086      	sub	sp, #24
200016f8:	af00      	add	r7, sp, #0
200016fa:	6078      	str	r0, [r7, #4]
200016fc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
200016fe:	2300      	movs	r3, #0
20001700:	617b      	str	r3, [r7, #20]
20001702:	2300      	movs	r3, #0
20001704:	613b      	str	r3, [r7, #16]
20001706:	2300      	movs	r3, #0
20001708:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
2000170a:	2300      	movs	r3, #0
2000170c:	617b      	str	r3, [r7, #20]
2000170e:	e076      	b.n	200017fe <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20001710:	2201      	movs	r2, #1
20001712:	697b      	ldr	r3, [r7, #20]
20001714:	409a      	lsls	r2, r3
20001716:	0013      	movs	r3, r2
20001718:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
2000171a:	683b      	ldr	r3, [r7, #0]
2000171c:	681a      	ldr	r2, [r3, #0]
2000171e:	693b      	ldr	r3, [r7, #16]
20001720:	4013      	ands	r3, r2
20001722:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20001724:	68fa      	ldr	r2, [r7, #12]
20001726:	693b      	ldr	r3, [r7, #16]
20001728:	429a      	cmp	r2, r3
2000172a:	d165      	bne.n	200017f8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
2000172c:	687b      	ldr	r3, [r7, #4]
2000172e:	681b      	ldr	r3, [r3, #0]
20001730:	697a      	ldr	r2, [r7, #20]
20001732:	0052      	lsls	r2, r2, #1
20001734:	2103      	movs	r1, #3
20001736:	4091      	lsls	r1, r2
20001738:	000a      	movs	r2, r1
2000173a:	43d2      	mvns	r2, r2
2000173c:	401a      	ands	r2, r3
2000173e:	687b      	ldr	r3, [r7, #4]
20001740:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
20001742:	687b      	ldr	r3, [r7, #4]
20001744:	681a      	ldr	r2, [r3, #0]
20001746:	683b      	ldr	r3, [r7, #0]
20001748:	791b      	ldrb	r3, [r3, #4]
2000174a:	0019      	movs	r1, r3
2000174c:	697b      	ldr	r3, [r7, #20]
2000174e:	005b      	lsls	r3, r3, #1
20001750:	4099      	lsls	r1, r3
20001752:	000b      	movs	r3, r1
20001754:	431a      	orrs	r2, r3
20001756:	687b      	ldr	r3, [r7, #4]
20001758:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
2000175a:	683b      	ldr	r3, [r7, #0]
2000175c:	791b      	ldrb	r3, [r3, #4]
2000175e:	2b01      	cmp	r3, #1
20001760:	d003      	beq.n	2000176a <GPIO_Init+0x76>
20001762:	683b      	ldr	r3, [r7, #0]
20001764:	791b      	ldrb	r3, [r3, #4]
20001766:	2b02      	cmp	r3, #2
20001768:	d12e      	bne.n	200017c8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
2000176a:	687b      	ldr	r3, [r7, #4]
2000176c:	689b      	ldr	r3, [r3, #8]
2000176e:	697a      	ldr	r2, [r7, #20]
20001770:	0052      	lsls	r2, r2, #1
20001772:	2103      	movs	r1, #3
20001774:	4091      	lsls	r1, r2
20001776:	000a      	movs	r2, r1
20001778:	43d2      	mvns	r2, r2
2000177a:	401a      	ands	r2, r3
2000177c:	687b      	ldr	r3, [r7, #4]
2000177e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
20001780:	687b      	ldr	r3, [r7, #4]
20001782:	689a      	ldr	r2, [r3, #8]
20001784:	683b      	ldr	r3, [r7, #0]
20001786:	795b      	ldrb	r3, [r3, #5]
20001788:	0019      	movs	r1, r3
2000178a:	697b      	ldr	r3, [r7, #20]
2000178c:	005b      	lsls	r3, r3, #1
2000178e:	4099      	lsls	r1, r3
20001790:	000b      	movs	r3, r1
20001792:	431a      	orrs	r2, r3
20001794:	687b      	ldr	r3, [r7, #4]
20001796:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
20001798:	687b      	ldr	r3, [r7, #4]
2000179a:	685b      	ldr	r3, [r3, #4]
2000179c:	697a      	ldr	r2, [r7, #20]
2000179e:	b292      	uxth	r2, r2
200017a0:	0011      	movs	r1, r2
200017a2:	2201      	movs	r2, #1
200017a4:	408a      	lsls	r2, r1
200017a6:	43d2      	mvns	r2, r2
200017a8:	401a      	ands	r2, r3
200017aa:	687b      	ldr	r3, [r7, #4]
200017ac:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
200017ae:	687b      	ldr	r3, [r7, #4]
200017b0:	685b      	ldr	r3, [r3, #4]
200017b2:	683a      	ldr	r2, [r7, #0]
200017b4:	7992      	ldrb	r2, [r2, #6]
200017b6:	0011      	movs	r1, r2
200017b8:	697a      	ldr	r2, [r7, #20]
200017ba:	b292      	uxth	r2, r2
200017bc:	4091      	lsls	r1, r2
200017be:	000a      	movs	r2, r1
200017c0:	b292      	uxth	r2, r2
200017c2:	431a      	orrs	r2, r3
200017c4:	687b      	ldr	r3, [r7, #4]
200017c6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
200017c8:	687b      	ldr	r3, [r7, #4]
200017ca:	68db      	ldr	r3, [r3, #12]
200017cc:	697a      	ldr	r2, [r7, #20]
200017ce:	b292      	uxth	r2, r2
200017d0:	0052      	lsls	r2, r2, #1
200017d2:	2103      	movs	r1, #3
200017d4:	4091      	lsls	r1, r2
200017d6:	000a      	movs	r2, r1
200017d8:	43d2      	mvns	r2, r2
200017da:	401a      	ands	r2, r3
200017dc:	687b      	ldr	r3, [r7, #4]
200017de:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
200017e0:	687b      	ldr	r3, [r7, #4]
200017e2:	68da      	ldr	r2, [r3, #12]
200017e4:	683b      	ldr	r3, [r7, #0]
200017e6:	79db      	ldrb	r3, [r3, #7]
200017e8:	0019      	movs	r1, r3
200017ea:	697b      	ldr	r3, [r7, #20]
200017ec:	005b      	lsls	r3, r3, #1
200017ee:	4099      	lsls	r1, r3
200017f0:	000b      	movs	r3, r1
200017f2:	431a      	orrs	r2, r3
200017f4:	687b      	ldr	r3, [r7, #4]
200017f6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
200017f8:	697b      	ldr	r3, [r7, #20]
200017fa:	3301      	adds	r3, #1
200017fc:	617b      	str	r3, [r7, #20]
200017fe:	697b      	ldr	r3, [r7, #20]
20001800:	2b0f      	cmp	r3, #15
20001802:	d985      	bls.n	20001710 <GPIO_Init+0x1c>
    }
  }
}
20001804:	46c0      	nop			; (mov r8, r8)
20001806:	46bd      	mov	sp, r7
20001808:	b006      	add	sp, #24
2000180a:	bd80      	pop	{r7, pc}

2000180c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
2000180c:	b580      	push	{r7, lr}
2000180e:	b082      	sub	sp, #8
20001810:	af00      	add	r7, sp, #0
20001812:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
20001814:	687b      	ldr	r3, [r7, #4]
20001816:	4a09      	ldr	r2, [pc, #36]	; (2000183c <GPIO_StructInit+0x30>)
20001818:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
2000181a:	687b      	ldr	r3, [r7, #4]
2000181c:	2200      	movs	r2, #0
2000181e:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20001820:	687b      	ldr	r3, [r7, #4]
20001822:	2200      	movs	r2, #0
20001824:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
20001826:	687b      	ldr	r3, [r7, #4]
20001828:	2200      	movs	r2, #0
2000182a:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
2000182c:	687b      	ldr	r3, [r7, #4]
2000182e:	2200      	movs	r2, #0
20001830:	71da      	strb	r2, [r3, #7]
}
20001832:	46c0      	nop			; (mov r8, r8)
20001834:	46bd      	mov	sp, r7
20001836:	b002      	add	sp, #8
20001838:	bd80      	pop	{r7, pc}
2000183a:	46c0      	nop			; (mov r8, r8)
2000183c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001840 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001840:	b580      	push	{r7, lr}
20001842:	b084      	sub	sp, #16
20001844:	af00      	add	r7, sp, #0
20001846:	6078      	str	r0, [r7, #4]
20001848:	000a      	movs	r2, r1
2000184a:	1cbb      	adds	r3, r7, #2
2000184c:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
2000184e:	2380      	movs	r3, #128	; 0x80
20001850:	025b      	lsls	r3, r3, #9
20001852:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
20001854:	1cbb      	adds	r3, r7, #2
20001856:	881a      	ldrh	r2, [r3, #0]
20001858:	68fb      	ldr	r3, [r7, #12]
2000185a:	4313      	orrs	r3, r2
2000185c:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
2000185e:	68fa      	ldr	r2, [r7, #12]
20001860:	687b      	ldr	r3, [r7, #4]
20001862:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
20001864:	1cbb      	adds	r3, r7, #2
20001866:	881a      	ldrh	r2, [r3, #0]
20001868:	687b      	ldr	r3, [r7, #4]
2000186a:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
2000186c:	68fa      	ldr	r2, [r7, #12]
2000186e:	687b      	ldr	r3, [r7, #4]
20001870:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20001872:	687b      	ldr	r3, [r7, #4]
20001874:	69db      	ldr	r3, [r3, #28]
20001876:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20001878:	687b      	ldr	r3, [r7, #4]
2000187a:	69db      	ldr	r3, [r3, #28]
2000187c:	60fb      	str	r3, [r7, #12]
}
2000187e:	46c0      	nop			; (mov r8, r8)
20001880:	46bd      	mov	sp, r7
20001882:	b004      	add	sp, #16
20001884:	bd80      	pop	{r7, pc}

20001886 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001886:	b580      	push	{r7, lr}
20001888:	b084      	sub	sp, #16
2000188a:	af00      	add	r7, sp, #0
2000188c:	6078      	str	r0, [r7, #4]
2000188e:	000a      	movs	r2, r1
20001890:	1cbb      	adds	r3, r7, #2
20001892:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20001894:	230f      	movs	r3, #15
20001896:	18fb      	adds	r3, r7, r3
20001898:	2200      	movs	r2, #0
2000189a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
2000189c:	687b      	ldr	r3, [r7, #4]
2000189e:	691b      	ldr	r3, [r3, #16]
200018a0:	1cba      	adds	r2, r7, #2
200018a2:	8812      	ldrh	r2, [r2, #0]
200018a4:	4013      	ands	r3, r2
200018a6:	d004      	beq.n	200018b2 <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
200018a8:	230f      	movs	r3, #15
200018aa:	18fb      	adds	r3, r7, r3
200018ac:	2201      	movs	r2, #1
200018ae:	701a      	strb	r2, [r3, #0]
200018b0:	e003      	b.n	200018ba <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
200018b2:	230f      	movs	r3, #15
200018b4:	18fb      	adds	r3, r7, r3
200018b6:	2200      	movs	r2, #0
200018b8:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200018ba:	230f      	movs	r3, #15
200018bc:	18fb      	adds	r3, r7, r3
200018be:	781b      	ldrb	r3, [r3, #0]
}
200018c0:	0018      	movs	r0, r3
200018c2:	46bd      	mov	sp, r7
200018c4:	b004      	add	sp, #16
200018c6:	bd80      	pop	{r7, pc}

200018c8 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
200018c8:	b580      	push	{r7, lr}
200018ca:	b082      	sub	sp, #8
200018cc:	af00      	add	r7, sp, #0
200018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
200018d0:	687b      	ldr	r3, [r7, #4]
200018d2:	691b      	ldr	r3, [r3, #16]
200018d4:	b29b      	uxth	r3, r3
}
200018d6:	0018      	movs	r0, r3
200018d8:	46bd      	mov	sp, r7
200018da:	b002      	add	sp, #8
200018dc:	bd80      	pop	{r7, pc}

200018de <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200018de:	b580      	push	{r7, lr}
200018e0:	b084      	sub	sp, #16
200018e2:	af00      	add	r7, sp, #0
200018e4:	6078      	str	r0, [r7, #4]
200018e6:	000a      	movs	r2, r1
200018e8:	1cbb      	adds	r3, r7, #2
200018ea:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
200018ec:	230f      	movs	r3, #15
200018ee:	18fb      	adds	r3, r7, r3
200018f0:	2200      	movs	r2, #0
200018f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
200018f4:	687b      	ldr	r3, [r7, #4]
200018f6:	695b      	ldr	r3, [r3, #20]
200018f8:	1cba      	adds	r2, r7, #2
200018fa:	8812      	ldrh	r2, [r2, #0]
200018fc:	4013      	ands	r3, r2
200018fe:	d004      	beq.n	2000190a <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001900:	230f      	movs	r3, #15
20001902:	18fb      	adds	r3, r7, r3
20001904:	2201      	movs	r2, #1
20001906:	701a      	strb	r2, [r3, #0]
20001908:	e003      	b.n	20001912 <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
2000190a:	230f      	movs	r3, #15
2000190c:	18fb      	adds	r3, r7, r3
2000190e:	2200      	movs	r2, #0
20001910:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20001912:	230f      	movs	r3, #15
20001914:	18fb      	adds	r3, r7, r3
20001916:	781b      	ldrb	r3, [r3, #0]
}
20001918:	0018      	movs	r0, r3
2000191a:	46bd      	mov	sp, r7
2000191c:	b004      	add	sp, #16
2000191e:	bd80      	pop	{r7, pc}

20001920 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20001920:	b580      	push	{r7, lr}
20001922:	b082      	sub	sp, #8
20001924:	af00      	add	r7, sp, #0
20001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
20001928:	687b      	ldr	r3, [r7, #4]
2000192a:	695b      	ldr	r3, [r3, #20]
2000192c:	b29b      	uxth	r3, r3
}
2000192e:	0018      	movs	r0, r3
20001930:	46bd      	mov	sp, r7
20001932:	b002      	add	sp, #8
20001934:	bd80      	pop	{r7, pc}

20001936 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001936:	b580      	push	{r7, lr}
20001938:	b082      	sub	sp, #8
2000193a:	af00      	add	r7, sp, #0
2000193c:	6078      	str	r0, [r7, #4]
2000193e:	000a      	movs	r2, r1
20001940:	1cbb      	adds	r3, r7, #2
20001942:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
20001944:	687b      	ldr	r3, [r7, #4]
20001946:	1cba      	adds	r2, r7, #2
20001948:	8812      	ldrh	r2, [r2, #0]
2000194a:	831a      	strh	r2, [r3, #24]
}
2000194c:	46c0      	nop			; (mov r8, r8)
2000194e:	46bd      	mov	sp, r7
20001950:	b002      	add	sp, #8
20001952:	bd80      	pop	{r7, pc}

20001954 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001954:	b580      	push	{r7, lr}
20001956:	b082      	sub	sp, #8
20001958:	af00      	add	r7, sp, #0
2000195a:	6078      	str	r0, [r7, #4]
2000195c:	000a      	movs	r2, r1
2000195e:	1cbb      	adds	r3, r7, #2
20001960:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
20001962:	687b      	ldr	r3, [r7, #4]
20001964:	1cba      	adds	r2, r7, #2
20001966:	8812      	ldrh	r2, [r2, #0]
20001968:	835a      	strh	r2, [r3, #26]
}
2000196a:	46c0      	nop			; (mov r8, r8)
2000196c:	46bd      	mov	sp, r7
2000196e:	b002      	add	sp, #8
20001970:	bd80      	pop	{r7, pc}

20001972 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
20001972:	b580      	push	{r7, lr}
20001974:	b082      	sub	sp, #8
20001976:	af00      	add	r7, sp, #0
20001978:	6078      	str	r0, [r7, #4]
2000197a:	0008      	movs	r0, r1
2000197c:	0011      	movs	r1, r2
2000197e:	1cbb      	adds	r3, r7, #2
20001980:	1c02      	adds	r2, r0, #0
20001982:	801a      	strh	r2, [r3, #0]
20001984:	1c7b      	adds	r3, r7, #1
20001986:	1c0a      	adds	r2, r1, #0
20001988:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
2000198a:	1c7b      	adds	r3, r7, #1
2000198c:	781b      	ldrb	r3, [r3, #0]
2000198e:	2b00      	cmp	r3, #0
20001990:	d004      	beq.n	2000199c <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
20001992:	687b      	ldr	r3, [r7, #4]
20001994:	1cba      	adds	r2, r7, #2
20001996:	8812      	ldrh	r2, [r2, #0]
20001998:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
2000199a:	e003      	b.n	200019a4 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
2000199c:	687b      	ldr	r3, [r7, #4]
2000199e:	1cba      	adds	r2, r7, #2
200019a0:	8812      	ldrh	r2, [r2, #0]
200019a2:	835a      	strh	r2, [r3, #26]
}
200019a4:	46c0      	nop			; (mov r8, r8)
200019a6:	46bd      	mov	sp, r7
200019a8:	b002      	add	sp, #8
200019aa:	bd80      	pop	{r7, pc}

200019ac <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
200019ac:	b580      	push	{r7, lr}
200019ae:	b082      	sub	sp, #8
200019b0:	af00      	add	r7, sp, #0
200019b2:	6078      	str	r0, [r7, #4]
200019b4:	000a      	movs	r2, r1
200019b6:	1cbb      	adds	r3, r7, #2
200019b8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
200019ba:	1cbb      	adds	r3, r7, #2
200019bc:	881a      	ldrh	r2, [r3, #0]
200019be:	687b      	ldr	r3, [r7, #4]
200019c0:	615a      	str	r2, [r3, #20]
}
200019c2:	46c0      	nop			; (mov r8, r8)
200019c4:	46bd      	mov	sp, r7
200019c6:	b002      	add	sp, #8
200019c8:	bd80      	pop	{r7, pc}

200019ca <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200019ca:	b580      	push	{r7, lr}
200019cc:	b082      	sub	sp, #8
200019ce:	af00      	add	r7, sp, #0
200019d0:	6078      	str	r0, [r7, #4]
200019d2:	000a      	movs	r2, r1
200019d4:	1cbb      	adds	r3, r7, #2
200019d6:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
200019d8:	687b      	ldr	r3, [r7, #4]
200019da:	695a      	ldr	r2, [r3, #20]
200019dc:	1cbb      	adds	r3, r7, #2
200019de:	881b      	ldrh	r3, [r3, #0]
200019e0:	405a      	eors	r2, r3
200019e2:	687b      	ldr	r3, [r7, #4]
200019e4:	615a      	str	r2, [r3, #20]
}
200019e6:	46c0      	nop			; (mov r8, r8)
200019e8:	46bd      	mov	sp, r7
200019ea:	b002      	add	sp, #8
200019ec:	bd80      	pop	{r7, pc}

200019ee <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
200019ee:	b580      	push	{r7, lr}
200019f0:	b084      	sub	sp, #16
200019f2:	af00      	add	r7, sp, #0
200019f4:	6078      	str	r0, [r7, #4]
200019f6:	0008      	movs	r0, r1
200019f8:	0011      	movs	r1, r2
200019fa:	1cbb      	adds	r3, r7, #2
200019fc:	1c02      	adds	r2, r0, #0
200019fe:	801a      	strh	r2, [r3, #0]
20001a00:	1c7b      	adds	r3, r7, #1
20001a02:	1c0a      	adds	r2, r1, #0
20001a04:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
20001a06:	2300      	movs	r3, #0
20001a08:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
20001a0a:	2300      	movs	r3, #0
20001a0c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20001a0e:	1c7b      	adds	r3, r7, #1
20001a10:	781a      	ldrb	r2, [r3, #0]
20001a12:	1cbb      	adds	r3, r7, #2
20001a14:	881b      	ldrh	r3, [r3, #0]
20001a16:	2107      	movs	r1, #7
20001a18:	400b      	ands	r3, r1
20001a1a:	009b      	lsls	r3, r3, #2
20001a1c:	409a      	lsls	r2, r3
20001a1e:	0013      	movs	r3, r2
20001a20:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20001a22:	1cbb      	adds	r3, r7, #2
20001a24:	881b      	ldrh	r3, [r3, #0]
20001a26:	08db      	lsrs	r3, r3, #3
20001a28:	b29b      	uxth	r3, r3
20001a2a:	001a      	movs	r2, r3
20001a2c:	687b      	ldr	r3, [r7, #4]
20001a2e:	3208      	adds	r2, #8
20001a30:	0092      	lsls	r2, r2, #2
20001a32:	58d3      	ldr	r3, [r2, r3]
20001a34:	1cba      	adds	r2, r7, #2
20001a36:	8812      	ldrh	r2, [r2, #0]
20001a38:	2107      	movs	r1, #7
20001a3a:	400a      	ands	r2, r1
20001a3c:	0092      	lsls	r2, r2, #2
20001a3e:	210f      	movs	r1, #15
20001a40:	4091      	lsls	r1, r2
20001a42:	000a      	movs	r2, r1
20001a44:	43d2      	mvns	r2, r2
20001a46:	1cb9      	adds	r1, r7, #2
20001a48:	8809      	ldrh	r1, [r1, #0]
20001a4a:	08c9      	lsrs	r1, r1, #3
20001a4c:	b289      	uxth	r1, r1
20001a4e:	0008      	movs	r0, r1
20001a50:	401a      	ands	r2, r3
20001a52:	0011      	movs	r1, r2
20001a54:	687b      	ldr	r3, [r7, #4]
20001a56:	0002      	movs	r2, r0
20001a58:	3208      	adds	r2, #8
20001a5a:	0092      	lsls	r2, r2, #2
20001a5c:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
20001a5e:	1cbb      	adds	r3, r7, #2
20001a60:	881b      	ldrh	r3, [r3, #0]
20001a62:	08db      	lsrs	r3, r3, #3
20001a64:	b29b      	uxth	r3, r3
20001a66:	001a      	movs	r2, r3
20001a68:	687b      	ldr	r3, [r7, #4]
20001a6a:	3208      	adds	r2, #8
20001a6c:	0092      	lsls	r2, r2, #2
20001a6e:	58d3      	ldr	r3, [r2, r3]
20001a70:	68fa      	ldr	r2, [r7, #12]
20001a72:	4313      	orrs	r3, r2
20001a74:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
20001a76:	1cbb      	adds	r3, r7, #2
20001a78:	881b      	ldrh	r3, [r3, #0]
20001a7a:	08db      	lsrs	r3, r3, #3
20001a7c:	b29b      	uxth	r3, r3
20001a7e:	001a      	movs	r2, r3
20001a80:	687b      	ldr	r3, [r7, #4]
20001a82:	3208      	adds	r2, #8
20001a84:	0092      	lsls	r2, r2, #2
20001a86:	68b9      	ldr	r1, [r7, #8]
20001a88:	50d1      	str	r1, [r2, r3]
}
20001a8a:	46c0      	nop			; (mov r8, r8)
20001a8c:	46bd      	mov	sp, r7
20001a8e:	b004      	add	sp, #16
20001a90:	bd80      	pop	{r7, pc}
20001a92:	46c0      	nop			; (mov r8, r8)

20001a94 <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
20001a94:	b580      	push	{r7, lr}
20001a96:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)  
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
20001a98:	2101      	movs	r1, #1
20001a9a:	2040      	movs	r0, #64	; 0x40
20001a9c:	f000 fd98 	bl	200025d0 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
20001aa0:	2100      	movs	r1, #0
20001aa2:	2040      	movs	r0, #64	; 0x40
20001aa4:	f000 fd94 	bl	200025d0 <RCC_AHB2PeriphResetCmd>
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, ENABLE);

  /* Release RNG from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, DISABLE); 
#endif /* STM32F410xx*/  
}
20001aa8:	46c0      	nop			; (mov r8, r8)
20001aaa:	46bd      	mov	sp, r7
20001aac:	bd80      	pop	{r7, pc}

20001aae <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
20001aae:	b580      	push	{r7, lr}
20001ab0:	b082      	sub	sp, #8
20001ab2:	af00      	add	r7, sp, #0
20001ab4:	0002      	movs	r2, r0
20001ab6:	1dfb      	adds	r3, r7, #7
20001ab8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20001aba:	1dfb      	adds	r3, r7, #7
20001abc:	781b      	ldrb	r3, [r3, #0]
20001abe:	2b00      	cmp	r3, #0
20001ac0:	d006      	beq.n	20001ad0 <RNG_Cmd+0x22>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
20001ac2:	4b08      	ldr	r3, [pc, #32]	; (20001ae4 <RNG_Cmd+0x36>)
20001ac4:	681a      	ldr	r2, [r3, #0]
20001ac6:	4b07      	ldr	r3, [pc, #28]	; (20001ae4 <RNG_Cmd+0x36>)
20001ac8:	2104      	movs	r1, #4
20001aca:	430a      	orrs	r2, r1
20001acc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
  }
}
20001ace:	e005      	b.n	20001adc <RNG_Cmd+0x2e>
    RNG->CR &= ~RNG_CR_RNGEN;
20001ad0:	4b04      	ldr	r3, [pc, #16]	; (20001ae4 <RNG_Cmd+0x36>)
20001ad2:	681a      	ldr	r2, [r3, #0]
20001ad4:	4b03      	ldr	r3, [pc, #12]	; (20001ae4 <RNG_Cmd+0x36>)
20001ad6:	2104      	movs	r1, #4
20001ad8:	438a      	bics	r2, r1
20001ada:	601a      	str	r2, [r3, #0]
}
20001adc:	46c0      	nop			; (mov r8, r8)
20001ade:	46bd      	mov	sp, r7
20001ae0:	b002      	add	sp, #8
20001ae2:	bd80      	pop	{r7, pc}
20001ae4:	50060800 	andpl	r0, r6, r0, lsl #16

20001ae8 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
20001ae8:	b580      	push	{r7, lr}
20001aea:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
20001aec:	4b02      	ldr	r3, [pc, #8]	; (20001af8 <RNG_GetRandomNumber+0x10>)
20001aee:	689b      	ldr	r3, [r3, #8]
}
20001af0:	0018      	movs	r0, r3
20001af2:	46bd      	mov	sp, r7
20001af4:	bd80      	pop	{r7, pc}
20001af6:	46c0      	nop			; (mov r8, r8)
20001af8:	50060800 	andpl	r0, r6, r0, lsl #16

20001afc <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
20001afc:	b580      	push	{r7, lr}
20001afe:	b082      	sub	sp, #8
20001b00:	af00      	add	r7, sp, #0
20001b02:	0002      	movs	r2, r0
20001b04:	1dfb      	adds	r3, r7, #7
20001b06:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20001b08:	1dfb      	adds	r3, r7, #7
20001b0a:	781b      	ldrb	r3, [r3, #0]
20001b0c:	2b00      	cmp	r3, #0
20001b0e:	d006      	beq.n	20001b1e <RNG_ITConfig+0x22>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
20001b10:	4b08      	ldr	r3, [pc, #32]	; (20001b34 <RNG_ITConfig+0x38>)
20001b12:	681a      	ldr	r2, [r3, #0]
20001b14:	4b07      	ldr	r3, [pc, #28]	; (20001b34 <RNG_ITConfig+0x38>)
20001b16:	2108      	movs	r1, #8
20001b18:	430a      	orrs	r2, r1
20001b1a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
  }
}
20001b1c:	e005      	b.n	20001b2a <RNG_ITConfig+0x2e>
    RNG->CR &= ~RNG_CR_IE;
20001b1e:	4b05      	ldr	r3, [pc, #20]	; (20001b34 <RNG_ITConfig+0x38>)
20001b20:	681a      	ldr	r2, [r3, #0]
20001b22:	4b04      	ldr	r3, [pc, #16]	; (20001b34 <RNG_ITConfig+0x38>)
20001b24:	2108      	movs	r1, #8
20001b26:	438a      	bics	r2, r1
20001b28:	601a      	str	r2, [r3, #0]
}
20001b2a:	46c0      	nop			; (mov r8, r8)
20001b2c:	46bd      	mov	sp, r7
20001b2e:	b002      	add	sp, #8
20001b30:	bd80      	pop	{r7, pc}
20001b32:	46c0      	nop			; (mov r8, r8)
20001b34:	50060800 	andpl	r0, r6, r0, lsl #16

20001b38 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
20001b38:	b580      	push	{r7, lr}
20001b3a:	b084      	sub	sp, #16
20001b3c:	af00      	add	r7, sp, #0
20001b3e:	0002      	movs	r2, r0
20001b40:	1dfb      	adds	r3, r7, #7
20001b42:	701a      	strb	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
20001b44:	230f      	movs	r3, #15
20001b46:	18fb      	adds	r3, r7, r3
20001b48:	2200      	movs	r2, #0
20001b4a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
20001b4c:	4b0a      	ldr	r3, [pc, #40]	; (20001b78 <RNG_GetFlagStatus+0x40>)
20001b4e:	685b      	ldr	r3, [r3, #4]
20001b50:	1dfa      	adds	r2, r7, #7
20001b52:	7812      	ldrb	r2, [r2, #0]
20001b54:	4013      	ands	r3, r2
20001b56:	d004      	beq.n	20001b62 <RNG_GetFlagStatus+0x2a>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
20001b58:	230f      	movs	r3, #15
20001b5a:	18fb      	adds	r3, r7, r3
20001b5c:	2201      	movs	r2, #1
20001b5e:	701a      	strb	r2, [r3, #0]
20001b60:	e003      	b.n	20001b6a <RNG_GetFlagStatus+0x32>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
20001b62:	230f      	movs	r3, #15
20001b64:	18fb      	adds	r3, r7, r3
20001b66:	2200      	movs	r2, #0
20001b68:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
20001b6a:	230f      	movs	r3, #15
20001b6c:	18fb      	adds	r3, r7, r3
20001b6e:	781b      	ldrb	r3, [r3, #0]
}
20001b70:	0018      	movs	r0, r3
20001b72:	46bd      	mov	sp, r7
20001b74:	b004      	add	sp, #16
20001b76:	bd80      	pop	{r7, pc}
20001b78:	50060800 	andpl	r0, r6, r0, lsl #16

20001b7c <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
20001b7c:	b580      	push	{r7, lr}
20001b7e:	b082      	sub	sp, #8
20001b80:	af00      	add	r7, sp, #0
20001b82:	0002      	movs	r2, r0
20001b84:	1dfb      	adds	r3, r7, #7
20001b86:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
20001b88:	1dfb      	adds	r3, r7, #7
20001b8a:	781b      	ldrb	r3, [r3, #0]
20001b8c:	011a      	lsls	r2, r3, #4
20001b8e:	4b03      	ldr	r3, [pc, #12]	; (20001b9c <RNG_ClearFlag+0x20>)
20001b90:	43d2      	mvns	r2, r2
20001b92:	605a      	str	r2, [r3, #4]
}
20001b94:	46c0      	nop			; (mov r8, r8)
20001b96:	46bd      	mov	sp, r7
20001b98:	b002      	add	sp, #8
20001b9a:	bd80      	pop	{r7, pc}
20001b9c:	50060800 	andpl	r0, r6, r0, lsl #16

20001ba0 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
20001ba0:	b580      	push	{r7, lr}
20001ba2:	b084      	sub	sp, #16
20001ba4:	af00      	add	r7, sp, #0
20001ba6:	0002      	movs	r2, r0
20001ba8:	1dfb      	adds	r3, r7, #7
20001baa:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20001bac:	230f      	movs	r3, #15
20001bae:	18fb      	adds	r3, r7, r3
20001bb0:	2200      	movs	r2, #0
20001bb2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
20001bb4:	4b0a      	ldr	r3, [pc, #40]	; (20001be0 <RNG_GetITStatus+0x40>)
20001bb6:	685b      	ldr	r3, [r3, #4]
20001bb8:	1dfa      	adds	r2, r7, #7
20001bba:	7812      	ldrb	r2, [r2, #0]
20001bbc:	4013      	ands	r3, r2
20001bbe:	d004      	beq.n	20001bca <RNG_GetITStatus+0x2a>
  {
    /* RNG_IT is set */
    bitstatus = SET;
20001bc0:	230f      	movs	r3, #15
20001bc2:	18fb      	adds	r3, r7, r3
20001bc4:	2201      	movs	r2, #1
20001bc6:	701a      	strb	r2, [r3, #0]
20001bc8:	e003      	b.n	20001bd2 <RNG_GetITStatus+0x32>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
20001bca:	230f      	movs	r3, #15
20001bcc:	18fb      	adds	r3, r7, r3
20001bce:	2200      	movs	r2, #0
20001bd0:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RNG_IT status */
  return bitstatus;
20001bd2:	230f      	movs	r3, #15
20001bd4:	18fb      	adds	r3, r7, r3
20001bd6:	781b      	ldrb	r3, [r3, #0]
}
20001bd8:	0018      	movs	r0, r3
20001bda:	46bd      	mov	sp, r7
20001bdc:	b004      	add	sp, #16
20001bde:	bd80      	pop	{r7, pc}
20001be0:	50060800 	andpl	r0, r6, r0, lsl #16

20001be4 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
20001be4:	b580      	push	{r7, lr}
20001be6:	b082      	sub	sp, #8
20001be8:	af00      	add	r7, sp, #0
20001bea:	0002      	movs	r2, r0
20001bec:	1dfb      	adds	r3, r7, #7
20001bee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
20001bf0:	1dfb      	adds	r3, r7, #7
20001bf2:	781b      	ldrb	r3, [r3, #0]
20001bf4:	43db      	mvns	r3, r3
20001bf6:	b2da      	uxtb	r2, r3
20001bf8:	4b02      	ldr	r3, [pc, #8]	; (20001c04 <RNG_ClearITPendingBit+0x20>)
20001bfa:	605a      	str	r2, [r3, #4]
}
20001bfc:	46c0      	nop			; (mov r8, r8)
20001bfe:	46bd      	mov	sp, r7
20001c00:	b002      	add	sp, #8
20001c02:	bd80      	pop	{r7, pc}
20001c04:	50060800 	andpl	r0, r6, r0, lsl #16

20001c08 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20001c08:	b580      	push	{r7, lr}
20001c0a:	b082      	sub	sp, #8
20001c0c:	af00      	add	r7, sp, #0
20001c0e:	0002      	movs	r2, r0
20001c10:	6039      	str	r1, [r7, #0]
20001c12:	1dfb      	adds	r3, r7, #7
20001c14:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
20001c16:	1dfb      	adds	r3, r7, #7
20001c18:	781b      	ldrb	r3, [r3, #0]
20001c1a:	2b7f      	cmp	r3, #127	; 0x7f
20001c1c:	d90d      	bls.n	20001c3a <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001c1e:	683b      	ldr	r3, [r7, #0]
20001c20:	b2da      	uxtb	r2, r3
20001c22:	490f      	ldr	r1, [pc, #60]	; (20001c60 <NVIC_SetPriority+0x58>)
20001c24:	1dfb      	adds	r3, r7, #7
20001c26:	781b      	ldrb	r3, [r3, #0]
20001c28:	0018      	movs	r0, r3
20001c2a:	230f      	movs	r3, #15
20001c2c:	4003      	ands	r3, r0
20001c2e:	3b04      	subs	r3, #4
20001c30:	0112      	lsls	r2, r2, #4
20001c32:	b2d2      	uxtb	r2, r2
20001c34:	18cb      	adds	r3, r1, r3
20001c36:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20001c38:	e00d      	b.n	20001c56 <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001c3a:	683b      	ldr	r3, [r7, #0]
20001c3c:	b2db      	uxtb	r3, r3
20001c3e:	4909      	ldr	r1, [pc, #36]	; (20001c64 <NVIC_SetPriority+0x5c>)
20001c40:	1dfa      	adds	r2, r7, #7
20001c42:	7812      	ldrb	r2, [r2, #0]
20001c44:	b252      	sxtb	r2, r2
20001c46:	011b      	lsls	r3, r3, #4
20001c48:	b2d8      	uxtb	r0, r3
20001c4a:	23c0      	movs	r3, #192	; 0xc0
20001c4c:	009b      	lsls	r3, r3, #2
20001c4e:	188a      	adds	r2, r1, r2
20001c50:	18d3      	adds	r3, r2, r3
20001c52:	1c02      	adds	r2, r0, #0
20001c54:	701a      	strb	r2, [r3, #0]
}
20001c56:	46c0      	nop			; (mov r8, r8)
20001c58:	46bd      	mov	sp, r7
20001c5a:	b002      	add	sp, #8
20001c5c:	bd80      	pop	{r7, pc}
20001c5e:	46c0      	nop			; (mov r8, r8)
20001c60:	e000ed00 	and	lr, r0, r0, lsl #26
20001c64:	e000e100 	and	lr, r0, r0, lsl #2

20001c68 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20001c68:	b580      	push	{r7, lr}
20001c6a:	b082      	sub	sp, #8
20001c6c:	af00      	add	r7, sp, #0
20001c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
20001c70:	687b      	ldr	r3, [r7, #4]
20001c72:	3b01      	subs	r3, #1
20001c74:	4a0c      	ldr	r2, [pc, #48]	; (20001ca8 <SysTick_Config+0x40>)
20001c76:	4293      	cmp	r3, r2
20001c78:	d901      	bls.n	20001c7e <SysTick_Config+0x16>
20001c7a:	2301      	movs	r3, #1
20001c7c:	e010      	b.n	20001ca0 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20001c7e:	4b0b      	ldr	r3, [pc, #44]	; (20001cac <SysTick_Config+0x44>)
20001c80:	687a      	ldr	r2, [r7, #4]
20001c82:	3a01      	subs	r2, #1
20001c84:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20001c86:	2301      	movs	r3, #1
20001c88:	425b      	negs	r3, r3
20001c8a:	210f      	movs	r1, #15
20001c8c:	0018      	movs	r0, r3
20001c8e:	f7ff ffbb 	bl	20001c08 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20001c92:	4b06      	ldr	r3, [pc, #24]	; (20001cac <SysTick_Config+0x44>)
20001c94:	2200      	movs	r2, #0
20001c96:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20001c98:	4b04      	ldr	r3, [pc, #16]	; (20001cac <SysTick_Config+0x44>)
20001c9a:	2207      	movs	r2, #7
20001c9c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20001c9e:	2300      	movs	r3, #0
}
20001ca0:	0018      	movs	r0, r3
20001ca2:	46bd      	mov	sp, r7
20001ca4:	b002      	add	sp, #8
20001ca6:	bd80      	pop	{r7, pc}
20001ca8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20001cac:	e000e010 	and	lr, r0, r0, lsl r0

20001cb0 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
20001cb0:	b580      	push	{r7, lr}
20001cb2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
20001cb4:	4b14      	ldr	r3, [pc, #80]	; (20001d08 <RCC_DeInit+0x58>)
20001cb6:	681a      	ldr	r2, [r3, #0]
20001cb8:	4b13      	ldr	r3, [pc, #76]	; (20001d08 <RCC_DeInit+0x58>)
20001cba:	2101      	movs	r1, #1
20001cbc:	430a      	orrs	r2, r1
20001cbe:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20001cc0:	4b11      	ldr	r3, [pc, #68]	; (20001d08 <RCC_DeInit+0x58>)
20001cc2:	2200      	movs	r2, #0
20001cc4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
20001cc6:	4b10      	ldr	r3, [pc, #64]	; (20001d08 <RCC_DeInit+0x58>)
20001cc8:	681a      	ldr	r2, [r3, #0]
20001cca:	4b0f      	ldr	r3, [pc, #60]	; (20001d08 <RCC_DeInit+0x58>)
20001ccc:	490f      	ldr	r1, [pc, #60]	; (20001d0c <RCC_DeInit+0x5c>)
20001cce:	400a      	ands	r2, r1
20001cd0:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
20001cd2:	4b0d      	ldr	r3, [pc, #52]	; (20001d08 <RCC_DeInit+0x58>)
20001cd4:	4a0e      	ldr	r2, [pc, #56]	; (20001d10 <RCC_DeInit+0x60>)
20001cd6:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
20001cd8:	4a0b      	ldr	r2, [pc, #44]	; (20001d08 <RCC_DeInit+0x58>)
20001cda:	2384      	movs	r3, #132	; 0x84
20001cdc:	490d      	ldr	r1, [pc, #52]	; (20001d14 <RCC_DeInit+0x64>)
20001cde:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
20001ce0:	4a09      	ldr	r2, [pc, #36]	; (20001d08 <RCC_DeInit+0x58>)
20001ce2:	2388      	movs	r3, #136	; 0x88
20001ce4:	490c      	ldr	r1, [pc, #48]	; (20001d18 <RCC_DeInit+0x68>)
20001ce6:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20001ce8:	4b07      	ldr	r3, [pc, #28]	; (20001d08 <RCC_DeInit+0x58>)
20001cea:	681a      	ldr	r2, [r3, #0]
20001cec:	4b06      	ldr	r3, [pc, #24]	; (20001d08 <RCC_DeInit+0x58>)
20001cee:	490b      	ldr	r1, [pc, #44]	; (20001d1c <RCC_DeInit+0x6c>)
20001cf0:	400a      	ands	r2, r1
20001cf2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20001cf4:	4b04      	ldr	r3, [pc, #16]	; (20001d08 <RCC_DeInit+0x58>)
20001cf6:	2200      	movs	r2, #0
20001cf8:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20001cfa:	4a03      	ldr	r2, [pc, #12]	; (20001d08 <RCC_DeInit+0x58>)
20001cfc:	238c      	movs	r3, #140	; 0x8c
20001cfe:	2100      	movs	r1, #0
20001d00:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
20001d02:	46c0      	nop			; (mov r8, r8)
20001d04:	46bd      	mov	sp, r7
20001d06:	bd80      	pop	{r7, pc}
20001d08:	40023800 	andmi	r3, r2, r0, lsl #16
20001d0c:	eaf6ffff 	b	1fdc1d10 <startup-0x23e2f0>
20001d10:	24003010 	strcs	r3, [r0], #-16
20001d14:	20003000 	andcs	r3, r0, r0
20001d18:	24003000 	strcs	r3, [r0], #-0
20001d1c:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20001d20 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20001d20:	b580      	push	{r7, lr}
20001d22:	b082      	sub	sp, #8
20001d24:	af00      	add	r7, sp, #0
20001d26:	0002      	movs	r2, r0
20001d28:	1dfb      	adds	r3, r7, #7
20001d2a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20001d2c:	4b05      	ldr	r3, [pc, #20]	; (20001d44 <RCC_HSEConfig+0x24>)
20001d2e:	2200      	movs	r2, #0
20001d30:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
20001d32:	4a04      	ldr	r2, [pc, #16]	; (20001d44 <RCC_HSEConfig+0x24>)
20001d34:	1dfb      	adds	r3, r7, #7
20001d36:	781b      	ldrb	r3, [r3, #0]
20001d38:	7013      	strb	r3, [r2, #0]
}
20001d3a:	46c0      	nop			; (mov r8, r8)
20001d3c:	46bd      	mov	sp, r7
20001d3e:	b002      	add	sp, #8
20001d40:	bd80      	pop	{r7, pc}
20001d42:	46c0      	nop			; (mov r8, r8)
20001d44:	40023802 	andmi	r3, r2, r2, lsl #16

20001d48 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20001d48:	b590      	push	{r4, r7, lr}
20001d4a:	b083      	sub	sp, #12
20001d4c:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20001d4e:	2300      	movs	r3, #0
20001d50:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
20001d52:	1dfb      	adds	r3, r7, #7
20001d54:	2200      	movs	r2, #0
20001d56:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20001d58:	1dbb      	adds	r3, r7, #6
20001d5a:	2200      	movs	r2, #0
20001d5c:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20001d5e:	1dbc      	adds	r4, r7, #6
20001d60:	2031      	movs	r0, #49	; 0x31
20001d62:	f000 fd9b 	bl	2000289c <RCC_GetFlagStatus>
20001d66:	0003      	movs	r3, r0
20001d68:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20001d6a:	683b      	ldr	r3, [r7, #0]
20001d6c:	3301      	adds	r3, #1
20001d6e:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20001d70:	683a      	ldr	r2, [r7, #0]
20001d72:	23a0      	movs	r3, #160	; 0xa0
20001d74:	01db      	lsls	r3, r3, #7
20001d76:	429a      	cmp	r2, r3
20001d78:	d003      	beq.n	20001d82 <RCC_WaitForHSEStartUp+0x3a>
20001d7a:	1dbb      	adds	r3, r7, #6
20001d7c:	781b      	ldrb	r3, [r3, #0]
20001d7e:	2b00      	cmp	r3, #0
20001d80:	d0ed      	beq.n	20001d5e <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
20001d82:	2031      	movs	r0, #49	; 0x31
20001d84:	f000 fd8a 	bl	2000289c <RCC_GetFlagStatus>
20001d88:	1e03      	subs	r3, r0, #0
20001d8a:	d003      	beq.n	20001d94 <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20001d8c:	1dfb      	adds	r3, r7, #7
20001d8e:	2201      	movs	r2, #1
20001d90:	701a      	strb	r2, [r3, #0]
20001d92:	e002      	b.n	20001d9a <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
20001d94:	1dfb      	adds	r3, r7, #7
20001d96:	2200      	movs	r2, #0
20001d98:	701a      	strb	r2, [r3, #0]
  }
  return (status);
20001d9a:	1dfb      	adds	r3, r7, #7
20001d9c:	781b      	ldrb	r3, [r3, #0]
}
20001d9e:	0018      	movs	r0, r3
20001da0:	46bd      	mov	sp, r7
20001da2:	b003      	add	sp, #12
20001da4:	bd90      	pop	{r4, r7, pc}

20001da6 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
20001da6:	b580      	push	{r7, lr}
20001da8:	b084      	sub	sp, #16
20001daa:	af00      	add	r7, sp, #0
20001dac:	0002      	movs	r2, r0
20001dae:	1dfb      	adds	r3, r7, #7
20001db0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
20001db2:	2300      	movs	r3, #0
20001db4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
20001db6:	4b0a      	ldr	r3, [pc, #40]	; (20001de0 <RCC_AdjustHSICalibrationValue+0x3a>)
20001db8:	681b      	ldr	r3, [r3, #0]
20001dba:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
20001dbc:	68fb      	ldr	r3, [r7, #12]
20001dbe:	22f8      	movs	r2, #248	; 0xf8
20001dc0:	4393      	bics	r3, r2
20001dc2:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
20001dc4:	1dfb      	adds	r3, r7, #7
20001dc6:	781b      	ldrb	r3, [r3, #0]
20001dc8:	00db      	lsls	r3, r3, #3
20001dca:	68fa      	ldr	r2, [r7, #12]
20001dcc:	4313      	orrs	r3, r2
20001dce:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
20001dd0:	4b03      	ldr	r3, [pc, #12]	; (20001de0 <RCC_AdjustHSICalibrationValue+0x3a>)
20001dd2:	68fa      	ldr	r2, [r7, #12]
20001dd4:	601a      	str	r2, [r3, #0]
}
20001dd6:	46c0      	nop			; (mov r8, r8)
20001dd8:	46bd      	mov	sp, r7
20001dda:	b004      	add	sp, #16
20001ddc:	bd80      	pop	{r7, pc}
20001dde:	46c0      	nop			; (mov r8, r8)
20001de0:	40023800 	andmi	r3, r2, r0, lsl #16

20001de4 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
20001de4:	b580      	push	{r7, lr}
20001de6:	b082      	sub	sp, #8
20001de8:	af00      	add	r7, sp, #0
20001dea:	0002      	movs	r2, r0
20001dec:	1dfb      	adds	r3, r7, #7
20001dee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
20001df0:	4b03      	ldr	r3, [pc, #12]	; (20001e00 <RCC_HSICmd+0x1c>)
20001df2:	1dfa      	adds	r2, r7, #7
20001df4:	7812      	ldrb	r2, [r2, #0]
20001df6:	601a      	str	r2, [r3, #0]
}
20001df8:	46c0      	nop			; (mov r8, r8)
20001dfa:	46bd      	mov	sp, r7
20001dfc:	b002      	add	sp, #8
20001dfe:	bd80      	pop	{r7, pc}
20001e00:	42470000 	submi	r0, r7, #0

20001e04 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
20001e04:	b580      	push	{r7, lr}
20001e06:	b082      	sub	sp, #8
20001e08:	af00      	add	r7, sp, #0
20001e0a:	0002      	movs	r2, r0
20001e0c:	1dfb      	adds	r3, r7, #7
20001e0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20001e10:	4b0c      	ldr	r3, [pc, #48]	; (20001e44 <RCC_LSEConfig+0x40>)
20001e12:	2200      	movs	r2, #0
20001e14:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20001e16:	4b0b      	ldr	r3, [pc, #44]	; (20001e44 <RCC_LSEConfig+0x40>)
20001e18:	2200      	movs	r2, #0
20001e1a:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20001e1c:	1dfb      	adds	r3, r7, #7
20001e1e:	781b      	ldrb	r3, [r3, #0]
20001e20:	2b01      	cmp	r3, #1
20001e22:	d002      	beq.n	20001e2a <RCC_LSEConfig+0x26>
20001e24:	2b04      	cmp	r3, #4
20001e26:	d004      	beq.n	20001e32 <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20001e28:	e007      	b.n	20001e3a <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20001e2a:	4b06      	ldr	r3, [pc, #24]	; (20001e44 <RCC_LSEConfig+0x40>)
20001e2c:	2201      	movs	r2, #1
20001e2e:	701a      	strb	r2, [r3, #0]
      break;
20001e30:	e003      	b.n	20001e3a <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
20001e32:	4b04      	ldr	r3, [pc, #16]	; (20001e44 <RCC_LSEConfig+0x40>)
20001e34:	2205      	movs	r2, #5
20001e36:	701a      	strb	r2, [r3, #0]
      break;
20001e38:	46c0      	nop			; (mov r8, r8)
  }
}
20001e3a:	46c0      	nop			; (mov r8, r8)
20001e3c:	46bd      	mov	sp, r7
20001e3e:	b002      	add	sp, #8
20001e40:	bd80      	pop	{r7, pc}
20001e42:	46c0      	nop			; (mov r8, r8)
20001e44:	40023870 	andmi	r3, r2, r0, ror r8

20001e48 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20001e48:	b580      	push	{r7, lr}
20001e4a:	b082      	sub	sp, #8
20001e4c:	af00      	add	r7, sp, #0
20001e4e:	0002      	movs	r2, r0
20001e50:	1dfb      	adds	r3, r7, #7
20001e52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
20001e54:	4b03      	ldr	r3, [pc, #12]	; (20001e64 <RCC_LSICmd+0x1c>)
20001e56:	1dfa      	adds	r2, r7, #7
20001e58:	7812      	ldrb	r2, [r2, #0]
20001e5a:	601a      	str	r2, [r3, #0]
}
20001e5c:	46c0      	nop			; (mov r8, r8)
20001e5e:	46bd      	mov	sp, r7
20001e60:	b002      	add	sp, #8
20001e62:	bd80      	pop	{r7, pc}
20001e64:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20001e68 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20001e68:	b580      	push	{r7, lr}
20001e6a:	b084      	sub	sp, #16
20001e6c:	af00      	add	r7, sp, #0
20001e6e:	60f8      	str	r0, [r7, #12]
20001e70:	60b9      	str	r1, [r7, #8]
20001e72:	607a      	str	r2, [r7, #4]
20001e74:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
20001e76:	687b      	ldr	r3, [r7, #4]
20001e78:	019a      	lsls	r2, r3, #6
20001e7a:	68bb      	ldr	r3, [r7, #8]
20001e7c:	431a      	orrs	r2, r3
20001e7e:	683b      	ldr	r3, [r7, #0]
20001e80:	085b      	lsrs	r3, r3, #1
20001e82:	3b01      	subs	r3, #1
20001e84:	041b      	lsls	r3, r3, #16
20001e86:	431a      	orrs	r2, r3
20001e88:	68fb      	ldr	r3, [r7, #12]
20001e8a:	431a      	orrs	r2, r3
20001e8c:	0011      	movs	r1, r2
                 (PLLQ << 24);
20001e8e:	69bb      	ldr	r3, [r7, #24]
20001e90:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
20001e92:	4b03      	ldr	r3, [pc, #12]	; (20001ea0 <RCC_PLLConfig+0x38>)
20001e94:	430a      	orrs	r2, r1
20001e96:	605a      	str	r2, [r3, #4]
}
20001e98:	46c0      	nop			; (mov r8, r8)
20001e9a:	46bd      	mov	sp, r7
20001e9c:	b004      	add	sp, #16
20001e9e:	bd80      	pop	{r7, pc}
20001ea0:	40023800 	andmi	r3, r2, r0, lsl #16

20001ea4 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
20001ea4:	b580      	push	{r7, lr}
20001ea6:	b082      	sub	sp, #8
20001ea8:	af00      	add	r7, sp, #0
20001eaa:	0002      	movs	r2, r0
20001eac:	1dfb      	adds	r3, r7, #7
20001eae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
20001eb0:	4b03      	ldr	r3, [pc, #12]	; (20001ec0 <RCC_PLLCmd+0x1c>)
20001eb2:	1dfa      	adds	r2, r7, #7
20001eb4:	7812      	ldrb	r2, [r2, #0]
20001eb6:	601a      	str	r2, [r3, #0]
}
20001eb8:	46c0      	nop			; (mov r8, r8)
20001eba:	46bd      	mov	sp, r7
20001ebc:	b002      	add	sp, #8
20001ebe:	bd80      	pop	{r7, pc}
20001ec0:	42470060 	submi	r0, r7, #96	; 0x60

20001ec4 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
20001ec4:	b580      	push	{r7, lr}
20001ec6:	b082      	sub	sp, #8
20001ec8:	af00      	add	r7, sp, #0
20001eca:	6078      	str	r0, [r7, #4]
20001ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
20001ece:	687b      	ldr	r3, [r7, #4]
20001ed0:	019a      	lsls	r2, r3, #6
20001ed2:	683b      	ldr	r3, [r7, #0]
20001ed4:	071b      	lsls	r3, r3, #28
20001ed6:	4904      	ldr	r1, [pc, #16]	; (20001ee8 <RCC_PLLI2SConfig+0x24>)
20001ed8:	4313      	orrs	r3, r2
20001eda:	2284      	movs	r2, #132	; 0x84
20001edc:	508b      	str	r3, [r1, r2]
}
20001ede:	46c0      	nop			; (mov r8, r8)
20001ee0:	46bd      	mov	sp, r7
20001ee2:	b002      	add	sp, #8
20001ee4:	bd80      	pop	{r7, pc}
20001ee6:	46c0      	nop			; (mov r8, r8)
20001ee8:	40023800 	andmi	r3, r2, r0, lsl #16

20001eec <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
20001eec:	b580      	push	{r7, lr}
20001eee:	b082      	sub	sp, #8
20001ef0:	af00      	add	r7, sp, #0
20001ef2:	0002      	movs	r2, r0
20001ef4:	1dfb      	adds	r3, r7, #7
20001ef6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20001ef8:	4b03      	ldr	r3, [pc, #12]	; (20001f08 <RCC_PLLI2SCmd+0x1c>)
20001efa:	1dfa      	adds	r2, r7, #7
20001efc:	7812      	ldrb	r2, [r2, #0]
20001efe:	601a      	str	r2, [r3, #0]
}
20001f00:	46c0      	nop			; (mov r8, r8)
20001f02:	46bd      	mov	sp, r7
20001f04:	b002      	add	sp, #8
20001f06:	bd80      	pop	{r7, pc}
20001f08:	42470068 	submi	r0, r7, #104	; 0x68

20001f0c <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20001f0c:	b580      	push	{r7, lr}
20001f0e:	b084      	sub	sp, #16
20001f10:	af00      	add	r7, sp, #0
20001f12:	60f8      	str	r0, [r7, #12]
20001f14:	60b9      	str	r1, [r7, #8]
20001f16:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20001f18:	68fb      	ldr	r3, [r7, #12]
20001f1a:	019a      	lsls	r2, r3, #6
20001f1c:	68bb      	ldr	r3, [r7, #8]
20001f1e:	061b      	lsls	r3, r3, #24
20001f20:	431a      	orrs	r2, r3
20001f22:	687b      	ldr	r3, [r7, #4]
20001f24:	071b      	lsls	r3, r3, #28
20001f26:	4904      	ldr	r1, [pc, #16]	; (20001f38 <RCC_PLLSAIConfig+0x2c>)
20001f28:	4313      	orrs	r3, r2
20001f2a:	2288      	movs	r2, #136	; 0x88
20001f2c:	508b      	str	r3, [r1, r2]
}
20001f2e:	46c0      	nop			; (mov r8, r8)
20001f30:	46bd      	mov	sp, r7
20001f32:	b004      	add	sp, #16
20001f34:	bd80      	pop	{r7, pc}
20001f36:	46c0      	nop			; (mov r8, r8)
20001f38:	40023800 	andmi	r3, r2, r0, lsl #16

20001f3c <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20001f3c:	b580      	push	{r7, lr}
20001f3e:	b082      	sub	sp, #8
20001f40:	af00      	add	r7, sp, #0
20001f42:	0002      	movs	r2, r0
20001f44:	1dfb      	adds	r3, r7, #7
20001f46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20001f48:	4b03      	ldr	r3, [pc, #12]	; (20001f58 <RCC_PLLSAICmd+0x1c>)
20001f4a:	1dfa      	adds	r2, r7, #7
20001f4c:	7812      	ldrb	r2, [r2, #0]
20001f4e:	601a      	str	r2, [r3, #0]
}
20001f50:	46c0      	nop			; (mov r8, r8)
20001f52:	46bd      	mov	sp, r7
20001f54:	b002      	add	sp, #8
20001f56:	bd80      	pop	{r7, pc}
20001f58:	42470070 	submi	r0, r7, #112	; 0x70

20001f5c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20001f5c:	b580      	push	{r7, lr}
20001f5e:	b082      	sub	sp, #8
20001f60:	af00      	add	r7, sp, #0
20001f62:	0002      	movs	r2, r0
20001f64:	1dfb      	adds	r3, r7, #7
20001f66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20001f68:	4b03      	ldr	r3, [pc, #12]	; (20001f78 <RCC_ClockSecuritySystemCmd+0x1c>)
20001f6a:	1dfa      	adds	r2, r7, #7
20001f6c:	7812      	ldrb	r2, [r2, #0]
20001f6e:	601a      	str	r2, [r3, #0]
}
20001f70:	46c0      	nop			; (mov r8, r8)
20001f72:	46bd      	mov	sp, r7
20001f74:	b002      	add	sp, #8
20001f76:	bd80      	pop	{r7, pc}
20001f78:	4247004c 	submi	r0, r7, #76	; 0x4c

20001f7c <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20001f7c:	b580      	push	{r7, lr}
20001f7e:	b084      	sub	sp, #16
20001f80:	af00      	add	r7, sp, #0
20001f82:	6078      	str	r0, [r7, #4]
20001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20001f86:	2300      	movs	r3, #0
20001f88:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20001f8a:	4b0a      	ldr	r3, [pc, #40]	; (20001fb4 <RCC_MCO1Config+0x38>)
20001f8c:	689b      	ldr	r3, [r3, #8]
20001f8e:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20001f90:	68fb      	ldr	r3, [r7, #12]
20001f92:	4a09      	ldr	r2, [pc, #36]	; (20001fb8 <RCC_MCO1Config+0x3c>)
20001f94:	4013      	ands	r3, r2
20001f96:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
20001f98:	687a      	ldr	r2, [r7, #4]
20001f9a:	683b      	ldr	r3, [r7, #0]
20001f9c:	4313      	orrs	r3, r2
20001f9e:	68fa      	ldr	r2, [r7, #12]
20001fa0:	4313      	orrs	r3, r2
20001fa2:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20001fa4:	4b03      	ldr	r3, [pc, #12]	; (20001fb4 <RCC_MCO1Config+0x38>)
20001fa6:	68fa      	ldr	r2, [r7, #12]
20001fa8:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
20001faa:	46c0      	nop			; (mov r8, r8)
20001fac:	46bd      	mov	sp, r7
20001fae:	b004      	add	sp, #16
20001fb0:	bd80      	pop	{r7, pc}
20001fb2:	46c0      	nop			; (mov r8, r8)
20001fb4:	40023800 	andmi	r3, r2, r0, lsl #16
20001fb8:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

20001fbc <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
20001fbc:	b580      	push	{r7, lr}
20001fbe:	b084      	sub	sp, #16
20001fc0:	af00      	add	r7, sp, #0
20001fc2:	6078      	str	r0, [r7, #4]
20001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20001fc6:	2300      	movs	r3, #0
20001fc8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
20001fca:	4b0a      	ldr	r3, [pc, #40]	; (20001ff4 <RCC_MCO2Config+0x38>)
20001fcc:	689b      	ldr	r3, [r3, #8]
20001fce:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
20001fd0:	68fb      	ldr	r3, [r7, #12]
20001fd2:	015b      	lsls	r3, r3, #5
20001fd4:	095b      	lsrs	r3, r3, #5
20001fd6:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
20001fd8:	687a      	ldr	r2, [r7, #4]
20001fda:	683b      	ldr	r3, [r7, #0]
20001fdc:	4313      	orrs	r3, r2
20001fde:	68fa      	ldr	r2, [r7, #12]
20001fe0:	4313      	orrs	r3, r2
20001fe2:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20001fe4:	4b03      	ldr	r3, [pc, #12]	; (20001ff4 <RCC_MCO2Config+0x38>)
20001fe6:	68fa      	ldr	r2, [r7, #12]
20001fe8:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
20001fea:	46c0      	nop			; (mov r8, r8)
20001fec:	46bd      	mov	sp, r7
20001fee:	b004      	add	sp, #16
20001ff0:	bd80      	pop	{r7, pc}
20001ff2:	46c0      	nop			; (mov r8, r8)
20001ff4:	40023800 	andmi	r3, r2, r0, lsl #16

20001ff8 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20001ff8:	b580      	push	{r7, lr}
20001ffa:	b084      	sub	sp, #16
20001ffc:	af00      	add	r7, sp, #0
20001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002000:	2300      	movs	r3, #0
20002002:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
20002004:	4b08      	ldr	r3, [pc, #32]	; (20002028 <RCC_SYSCLKConfig+0x30>)
20002006:	689b      	ldr	r3, [r3, #8]
20002008:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
2000200a:	68fb      	ldr	r3, [r7, #12]
2000200c:	2203      	movs	r2, #3
2000200e:	4393      	bics	r3, r2
20002010:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
20002012:	68fa      	ldr	r2, [r7, #12]
20002014:	687b      	ldr	r3, [r7, #4]
20002016:	4313      	orrs	r3, r2
20002018:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
2000201a:	4b03      	ldr	r3, [pc, #12]	; (20002028 <RCC_SYSCLKConfig+0x30>)
2000201c:	68fa      	ldr	r2, [r7, #12]
2000201e:	609a      	str	r2, [r3, #8]
}
20002020:	46c0      	nop			; (mov r8, r8)
20002022:	46bd      	mov	sp, r7
20002024:	b004      	add	sp, #16
20002026:	bd80      	pop	{r7, pc}
20002028:	40023800 	andmi	r3, r2, r0, lsl #16

2000202c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
2000202c:	b580      	push	{r7, lr}
2000202e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20002030:	4b04      	ldr	r3, [pc, #16]	; (20002044 <RCC_GetSYSCLKSource+0x18>)
20002032:	689b      	ldr	r3, [r3, #8]
20002034:	b2db      	uxtb	r3, r3
20002036:	220c      	movs	r2, #12
20002038:	4013      	ands	r3, r2
2000203a:	b2db      	uxtb	r3, r3
}
2000203c:	0018      	movs	r0, r3
2000203e:	46bd      	mov	sp, r7
20002040:	bd80      	pop	{r7, pc}
20002042:	46c0      	nop			; (mov r8, r8)
20002044:	40023800 	andmi	r3, r2, r0, lsl #16

20002048 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20002048:	b580      	push	{r7, lr}
2000204a:	b084      	sub	sp, #16
2000204c:	af00      	add	r7, sp, #0
2000204e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002050:	2300      	movs	r3, #0
20002052:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
20002054:	4b08      	ldr	r3, [pc, #32]	; (20002078 <RCC_HCLKConfig+0x30>)
20002056:	689b      	ldr	r3, [r3, #8]
20002058:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
2000205a:	68fb      	ldr	r3, [r7, #12]
2000205c:	22f0      	movs	r2, #240	; 0xf0
2000205e:	4393      	bics	r3, r2
20002060:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
20002062:	68fa      	ldr	r2, [r7, #12]
20002064:	687b      	ldr	r3, [r7, #4]
20002066:	4313      	orrs	r3, r2
20002068:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
2000206a:	4b03      	ldr	r3, [pc, #12]	; (20002078 <RCC_HCLKConfig+0x30>)
2000206c:	68fa      	ldr	r2, [r7, #12]
2000206e:	609a      	str	r2, [r3, #8]
}
20002070:	46c0      	nop			; (mov r8, r8)
20002072:	46bd      	mov	sp, r7
20002074:	b004      	add	sp, #16
20002076:	bd80      	pop	{r7, pc}
20002078:	40023800 	andmi	r3, r2, r0, lsl #16

2000207c <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
2000207c:	b580      	push	{r7, lr}
2000207e:	b084      	sub	sp, #16
20002080:	af00      	add	r7, sp, #0
20002082:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002084:	2300      	movs	r3, #0
20002086:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20002088:	4b08      	ldr	r3, [pc, #32]	; (200020ac <RCC_PCLK1Config+0x30>)
2000208a:	689b      	ldr	r3, [r3, #8]
2000208c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
2000208e:	68fb      	ldr	r3, [r7, #12]
20002090:	4a07      	ldr	r2, [pc, #28]	; (200020b0 <RCC_PCLK1Config+0x34>)
20002092:	4013      	ands	r3, r2
20002094:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
20002096:	68fa      	ldr	r2, [r7, #12]
20002098:	687b      	ldr	r3, [r7, #4]
2000209a:	4313      	orrs	r3, r2
2000209c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
2000209e:	4b03      	ldr	r3, [pc, #12]	; (200020ac <RCC_PCLK1Config+0x30>)
200020a0:	68fa      	ldr	r2, [r7, #12]
200020a2:	609a      	str	r2, [r3, #8]
}
200020a4:	46c0      	nop			; (mov r8, r8)
200020a6:	46bd      	mov	sp, r7
200020a8:	b004      	add	sp, #16
200020aa:	bd80      	pop	{r7, pc}
200020ac:	40023800 	andmi	r3, r2, r0, lsl #16
200020b0:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

200020b4 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
200020b4:	b580      	push	{r7, lr}
200020b6:	b084      	sub	sp, #16
200020b8:	af00      	add	r7, sp, #0
200020ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200020bc:	2300      	movs	r3, #0
200020be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200020c0:	4b09      	ldr	r3, [pc, #36]	; (200020e8 <RCC_PCLK2Config+0x34>)
200020c2:	689b      	ldr	r3, [r3, #8]
200020c4:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
200020c6:	68fb      	ldr	r3, [r7, #12]
200020c8:	4a08      	ldr	r2, [pc, #32]	; (200020ec <RCC_PCLK2Config+0x38>)
200020ca:	4013      	ands	r3, r2
200020cc:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
200020ce:	687b      	ldr	r3, [r7, #4]
200020d0:	00db      	lsls	r3, r3, #3
200020d2:	68fa      	ldr	r2, [r7, #12]
200020d4:	4313      	orrs	r3, r2
200020d6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200020d8:	4b03      	ldr	r3, [pc, #12]	; (200020e8 <RCC_PCLK2Config+0x34>)
200020da:	68fa      	ldr	r2, [r7, #12]
200020dc:	609a      	str	r2, [r3, #8]
}
200020de:	46c0      	nop			; (mov r8, r8)
200020e0:	46bd      	mov	sp, r7
200020e2:	b004      	add	sp, #16
200020e4:	bd80      	pop	{r7, pc}
200020e6:	46c0      	nop			; (mov r8, r8)
200020e8:	40023800 	andmi	r3, r2, r0, lsl #16
200020ec:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

200020f0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
200020f0:	b580      	push	{r7, lr}
200020f2:	b088      	sub	sp, #32
200020f4:	af00      	add	r7, sp, #0
200020f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
200020f8:	2300      	movs	r3, #0
200020fa:	61bb      	str	r3, [r7, #24]
200020fc:	2300      	movs	r3, #0
200020fe:	617b      	str	r3, [r7, #20]
20002100:	2300      	movs	r3, #0
20002102:	61fb      	str	r3, [r7, #28]
20002104:	2302      	movs	r3, #2
20002106:	613b      	str	r3, [r7, #16]
20002108:	2300      	movs	r3, #0
2000210a:	60fb      	str	r3, [r7, #12]
2000210c:	2302      	movs	r3, #2
2000210e:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20002110:	4b49      	ldr	r3, [pc, #292]	; (20002238 <RCC_GetClocksFreq+0x148>)
20002112:	689b      	ldr	r3, [r3, #8]
20002114:	220c      	movs	r2, #12
20002116:	4013      	ands	r3, r2
20002118:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
2000211a:	69bb      	ldr	r3, [r7, #24]
2000211c:	2b04      	cmp	r3, #4
2000211e:	d007      	beq.n	20002130 <RCC_GetClocksFreq+0x40>
20002120:	2b08      	cmp	r3, #8
20002122:	d009      	beq.n	20002138 <RCC_GetClocksFreq+0x48>
20002124:	2b00      	cmp	r3, #0
20002126:	d141      	bne.n	200021ac <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20002128:	687b      	ldr	r3, [r7, #4]
2000212a:	4a44      	ldr	r2, [pc, #272]	; (2000223c <RCC_GetClocksFreq+0x14c>)
2000212c:	601a      	str	r2, [r3, #0]
    break;
2000212e:	e041      	b.n	200021b4 <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20002130:	687b      	ldr	r3, [r7, #4]
20002132:	4a43      	ldr	r2, [pc, #268]	; (20002240 <RCC_GetClocksFreq+0x150>)
20002134:	601a      	str	r2, [r3, #0]
    break;
20002136:	e03d      	b.n	200021b4 <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20002138:	4b3f      	ldr	r3, [pc, #252]	; (20002238 <RCC_GetClocksFreq+0x148>)
2000213a:	685b      	ldr	r3, [r3, #4]
2000213c:	0d9b      	lsrs	r3, r3, #22
2000213e:	2201      	movs	r2, #1
20002140:	4013      	ands	r3, r2
20002142:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20002144:	4b3c      	ldr	r3, [pc, #240]	; (20002238 <RCC_GetClocksFreq+0x148>)
20002146:	685b      	ldr	r3, [r3, #4]
20002148:	223f      	movs	r2, #63	; 0x3f
2000214a:	4013      	ands	r3, r2
2000214c:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
2000214e:	68fb      	ldr	r3, [r7, #12]
20002150:	2b00      	cmp	r3, #0
20002152:	d00d      	beq.n	20002170 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
20002154:	68b9      	ldr	r1, [r7, #8]
20002156:	483a      	ldr	r0, [pc, #232]	; (20002240 <RCC_GetClocksFreq+0x150>)
20002158:	f001 fc80 	bl	20003a5c <__udivsi3>
2000215c:	0003      	movs	r3, r0
2000215e:	001a      	movs	r2, r3
20002160:	4b35      	ldr	r3, [pc, #212]	; (20002238 <RCC_GetClocksFreq+0x148>)
20002162:	685b      	ldr	r3, [r3, #4]
20002164:	099b      	lsrs	r3, r3, #6
20002166:	05db      	lsls	r3, r3, #23
20002168:	0ddb      	lsrs	r3, r3, #23
2000216a:	4353      	muls	r3, r2
2000216c:	61fb      	str	r3, [r7, #28]
2000216e:	e00c      	b.n	2000218a <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20002170:	68b9      	ldr	r1, [r7, #8]
20002172:	4832      	ldr	r0, [pc, #200]	; (2000223c <RCC_GetClocksFreq+0x14c>)
20002174:	f001 fc72 	bl	20003a5c <__udivsi3>
20002178:	0003      	movs	r3, r0
2000217a:	001a      	movs	r2, r3
2000217c:	4b2e      	ldr	r3, [pc, #184]	; (20002238 <RCC_GetClocksFreq+0x148>)
2000217e:	685b      	ldr	r3, [r3, #4]
20002180:	099b      	lsrs	r3, r3, #6
20002182:	05db      	lsls	r3, r3, #23
20002184:	0ddb      	lsrs	r3, r3, #23
20002186:	4353      	muls	r3, r2
20002188:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
2000218a:	4b2b      	ldr	r3, [pc, #172]	; (20002238 <RCC_GetClocksFreq+0x148>)
2000218c:	685b      	ldr	r3, [r3, #4]
2000218e:	0c1b      	lsrs	r3, r3, #16
20002190:	2203      	movs	r2, #3
20002192:	4013      	ands	r3, r2
20002194:	3301      	adds	r3, #1
20002196:	005b      	lsls	r3, r3, #1
20002198:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
2000219a:	6939      	ldr	r1, [r7, #16]
2000219c:	69f8      	ldr	r0, [r7, #28]
2000219e:	f001 fc5d 	bl	20003a5c <__udivsi3>
200021a2:	0003      	movs	r3, r0
200021a4:	001a      	movs	r2, r3
200021a6:	687b      	ldr	r3, [r7, #4]
200021a8:	601a      	str	r2, [r3, #0]
    break;
200021aa:	e003      	b.n	200021b4 <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
200021ac:	687b      	ldr	r3, [r7, #4]
200021ae:	4a23      	ldr	r2, [pc, #140]	; (2000223c <RCC_GetClocksFreq+0x14c>)
200021b0:	601a      	str	r2, [r3, #0]
    break;
200021b2:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
200021b4:	4b20      	ldr	r3, [pc, #128]	; (20002238 <RCC_GetClocksFreq+0x148>)
200021b6:	689b      	ldr	r3, [r3, #8]
200021b8:	22f0      	movs	r2, #240	; 0xf0
200021ba:	4013      	ands	r3, r2
200021bc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
200021be:	69bb      	ldr	r3, [r7, #24]
200021c0:	091b      	lsrs	r3, r3, #4
200021c2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200021c4:	4a1f      	ldr	r2, [pc, #124]	; (20002244 <RCC_GetClocksFreq+0x154>)
200021c6:	69bb      	ldr	r3, [r7, #24]
200021c8:	18d3      	adds	r3, r2, r3
200021ca:	781b      	ldrb	r3, [r3, #0]
200021cc:	b2db      	uxtb	r3, r3
200021ce:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
200021d0:	687b      	ldr	r3, [r7, #4]
200021d2:	681a      	ldr	r2, [r3, #0]
200021d4:	697b      	ldr	r3, [r7, #20]
200021d6:	40da      	lsrs	r2, r3
200021d8:	687b      	ldr	r3, [r7, #4]
200021da:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
200021dc:	4b16      	ldr	r3, [pc, #88]	; (20002238 <RCC_GetClocksFreq+0x148>)
200021de:	689a      	ldr	r2, [r3, #8]
200021e0:	23e0      	movs	r3, #224	; 0xe0
200021e2:	015b      	lsls	r3, r3, #5
200021e4:	4013      	ands	r3, r2
200021e6:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
200021e8:	69bb      	ldr	r3, [r7, #24]
200021ea:	0a9b      	lsrs	r3, r3, #10
200021ec:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200021ee:	4a15      	ldr	r2, [pc, #84]	; (20002244 <RCC_GetClocksFreq+0x154>)
200021f0:	69bb      	ldr	r3, [r7, #24]
200021f2:	18d3      	adds	r3, r2, r3
200021f4:	781b      	ldrb	r3, [r3, #0]
200021f6:	b2db      	uxtb	r3, r3
200021f8:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
200021fa:	687b      	ldr	r3, [r7, #4]
200021fc:	685a      	ldr	r2, [r3, #4]
200021fe:	697b      	ldr	r3, [r7, #20]
20002200:	40da      	lsrs	r2, r3
20002202:	687b      	ldr	r3, [r7, #4]
20002204:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
20002206:	4b0c      	ldr	r3, [pc, #48]	; (20002238 <RCC_GetClocksFreq+0x148>)
20002208:	689a      	ldr	r2, [r3, #8]
2000220a:	23e0      	movs	r3, #224	; 0xe0
2000220c:	021b      	lsls	r3, r3, #8
2000220e:	4013      	ands	r3, r2
20002210:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
20002212:	69bb      	ldr	r3, [r7, #24]
20002214:	0b5b      	lsrs	r3, r3, #13
20002216:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20002218:	4a0a      	ldr	r2, [pc, #40]	; (20002244 <RCC_GetClocksFreq+0x154>)
2000221a:	69bb      	ldr	r3, [r7, #24]
2000221c:	18d3      	adds	r3, r2, r3
2000221e:	781b      	ldrb	r3, [r3, #0]
20002220:	b2db      	uxtb	r3, r3
20002222:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20002224:	687b      	ldr	r3, [r7, #4]
20002226:	685a      	ldr	r2, [r3, #4]
20002228:	697b      	ldr	r3, [r7, #20]
2000222a:	40da      	lsrs	r2, r3
2000222c:	687b      	ldr	r3, [r7, #4]
2000222e:	60da      	str	r2, [r3, #12]
}
20002230:	46c0      	nop			; (mov r8, r8)
20002232:	46bd      	mov	sp, r7
20002234:	b008      	add	sp, #32
20002236:	bd80      	pop	{r7, pc}
20002238:	40023800 	andmi	r3, r2, r0, lsl #16
2000223c:	00f42400 	rscseq	r2, r4, r0, lsl #8
20002240:	017d7840 	cmneq	sp, r0, asr #16
20002244:	20003c70 	andcs	r3, r0, r0, ror ip

20002248 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20002248:	b580      	push	{r7, lr}
2000224a:	b084      	sub	sp, #16
2000224c:	af00      	add	r7, sp, #0
2000224e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002250:	2300      	movs	r3, #0
20002252:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
20002254:	687a      	ldr	r2, [r7, #4]
20002256:	23c0      	movs	r3, #192	; 0xc0
20002258:	009b      	lsls	r3, r3, #2
2000225a:	401a      	ands	r2, r3
2000225c:	23c0      	movs	r3, #192	; 0xc0
2000225e:	009b      	lsls	r3, r3, #2
20002260:	429a      	cmp	r2, r3
20002262:	d10f      	bne.n	20002284 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
20002264:	4b0d      	ldr	r3, [pc, #52]	; (2000229c <RCC_RTCCLKConfig+0x54>)
20002266:	689b      	ldr	r3, [r3, #8]
20002268:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
2000226a:	68fb      	ldr	r3, [r7, #12]
2000226c:	4a0c      	ldr	r2, [pc, #48]	; (200022a0 <RCC_RTCCLKConfig+0x58>)
2000226e:	4013      	ands	r3, r2
20002270:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
20002272:	687b      	ldr	r3, [r7, #4]
20002274:	4a0b      	ldr	r2, [pc, #44]	; (200022a4 <RCC_RTCCLKConfig+0x5c>)
20002276:	4013      	ands	r3, r2
20002278:	68fa      	ldr	r2, [r7, #12]
2000227a:	4313      	orrs	r3, r2
2000227c:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
2000227e:	4b07      	ldr	r3, [pc, #28]	; (2000229c <RCC_RTCCLKConfig+0x54>)
20002280:	68fa      	ldr	r2, [r7, #12]
20002282:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
20002284:	4b05      	ldr	r3, [pc, #20]	; (2000229c <RCC_RTCCLKConfig+0x54>)
20002286:	6f19      	ldr	r1, [r3, #112]	; 0x70
20002288:	687b      	ldr	r3, [r7, #4]
2000228a:	051b      	lsls	r3, r3, #20
2000228c:	0d1a      	lsrs	r2, r3, #20
2000228e:	4b03      	ldr	r3, [pc, #12]	; (2000229c <RCC_RTCCLKConfig+0x54>)
20002290:	430a      	orrs	r2, r1
20002292:	671a      	str	r2, [r3, #112]	; 0x70
}
20002294:	46c0      	nop			; (mov r8, r8)
20002296:	46bd      	mov	sp, r7
20002298:	b004      	add	sp, #16
2000229a:	bd80      	pop	{r7, pc}
2000229c:	40023800 	andmi	r3, r2, r0, lsl #16
200022a0:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
200022a4:	0ffffcff 	svceq	0x00fffcff

200022a8 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
200022a8:	b580      	push	{r7, lr}
200022aa:	b082      	sub	sp, #8
200022ac:	af00      	add	r7, sp, #0
200022ae:	0002      	movs	r2, r0
200022b0:	1dfb      	adds	r3, r7, #7
200022b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
200022b4:	4b03      	ldr	r3, [pc, #12]	; (200022c4 <RCC_RTCCLKCmd+0x1c>)
200022b6:	1dfa      	adds	r2, r7, #7
200022b8:	7812      	ldrb	r2, [r2, #0]
200022ba:	601a      	str	r2, [r3, #0]
}
200022bc:	46c0      	nop			; (mov r8, r8)
200022be:	46bd      	mov	sp, r7
200022c0:	b002      	add	sp, #8
200022c2:	bd80      	pop	{r7, pc}
200022c4:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

200022c8 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
200022c8:	b580      	push	{r7, lr}
200022ca:	b082      	sub	sp, #8
200022cc:	af00      	add	r7, sp, #0
200022ce:	0002      	movs	r2, r0
200022d0:	1dfb      	adds	r3, r7, #7
200022d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
200022d4:	4b03      	ldr	r3, [pc, #12]	; (200022e4 <RCC_BackupResetCmd+0x1c>)
200022d6:	1dfa      	adds	r2, r7, #7
200022d8:	7812      	ldrb	r2, [r2, #0]
200022da:	601a      	str	r2, [r3, #0]
}
200022dc:	46c0      	nop			; (mov r8, r8)
200022de:	46bd      	mov	sp, r7
200022e0:	b002      	add	sp, #8
200022e2:	bd80      	pop	{r7, pc}
200022e4:	42470e40 	submi	r0, r7, #64, 28	; 0x400

200022e8 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
200022e8:	b580      	push	{r7, lr}
200022ea:	b082      	sub	sp, #8
200022ec:	af00      	add	r7, sp, #0
200022ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
200022f0:	4b03      	ldr	r3, [pc, #12]	; (20002300 <RCC_I2SCLKConfig+0x18>)
200022f2:	687a      	ldr	r2, [r7, #4]
200022f4:	601a      	str	r2, [r3, #0]
}
200022f6:	46c0      	nop			; (mov r8, r8)
200022f8:	46bd      	mov	sp, r7
200022fa:	b002      	add	sp, #8
200022fc:	bd80      	pop	{r7, pc}
200022fe:	46c0      	nop			; (mov r8, r8)
20002300:	4247015c 	submi	r0, r7, #92, 2

20002304 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
20002304:	b580      	push	{r7, lr}
20002306:	b084      	sub	sp, #16
20002308:	af00      	add	r7, sp, #0
2000230a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000230c:	2300      	movs	r3, #0
2000230e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20002310:	4a09      	ldr	r2, [pc, #36]	; (20002338 <RCC_SAIBlockACLKConfig+0x34>)
20002312:	238c      	movs	r3, #140	; 0x8c
20002314:	58d3      	ldr	r3, [r2, r3]
20002316:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20002318:	68fb      	ldr	r3, [r7, #12]
2000231a:	4a08      	ldr	r2, [pc, #32]	; (2000233c <RCC_SAIBlockACLKConfig+0x38>)
2000231c:	4013      	ands	r3, r2
2000231e:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20002320:	68fa      	ldr	r2, [r7, #12]
20002322:	687b      	ldr	r3, [r7, #4]
20002324:	4313      	orrs	r3, r2
20002326:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20002328:	4903      	ldr	r1, [pc, #12]	; (20002338 <RCC_SAIBlockACLKConfig+0x34>)
2000232a:	228c      	movs	r2, #140	; 0x8c
2000232c:	68fb      	ldr	r3, [r7, #12]
2000232e:	508b      	str	r3, [r1, r2]
}
20002330:	46c0      	nop			; (mov r8, r8)
20002332:	46bd      	mov	sp, r7
20002334:	b004      	add	sp, #16
20002336:	bd80      	pop	{r7, pc}
20002338:	40023800 	andmi	r3, r2, r0, lsl #16
2000233c:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20002340 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20002340:	b580      	push	{r7, lr}
20002342:	b084      	sub	sp, #16
20002344:	af00      	add	r7, sp, #0
20002346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002348:	2300      	movs	r3, #0
2000234a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
2000234c:	4a09      	ldr	r2, [pc, #36]	; (20002374 <RCC_SAIBlockBCLKConfig+0x34>)
2000234e:	238c      	movs	r3, #140	; 0x8c
20002350:	58d3      	ldr	r3, [r2, r3]
20002352:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
20002354:	68fb      	ldr	r3, [r7, #12]
20002356:	4a08      	ldr	r2, [pc, #32]	; (20002378 <RCC_SAIBlockBCLKConfig+0x38>)
20002358:	4013      	ands	r3, r2
2000235a:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
2000235c:	68fa      	ldr	r2, [r7, #12]
2000235e:	687b      	ldr	r3, [r7, #4]
20002360:	4313      	orrs	r3, r2
20002362:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20002364:	4903      	ldr	r1, [pc, #12]	; (20002374 <RCC_SAIBlockBCLKConfig+0x34>)
20002366:	228c      	movs	r2, #140	; 0x8c
20002368:	68fb      	ldr	r3, [r7, #12]
2000236a:	508b      	str	r3, [r1, r2]
}
2000236c:	46c0      	nop			; (mov r8, r8)
2000236e:	46bd      	mov	sp, r7
20002370:	b004      	add	sp, #16
20002372:	bd80      	pop	{r7, pc}
20002374:	40023800 	andmi	r3, r2, r0, lsl #16
20002378:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

2000237c <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
2000237c:	b580      	push	{r7, lr}
2000237e:	b084      	sub	sp, #16
20002380:	af00      	add	r7, sp, #0
20002382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002384:	2300      	movs	r3, #0
20002386:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20002388:	4a0a      	ldr	r2, [pc, #40]	; (200023b4 <RCC_SAIPLLI2SClkDivConfig+0x38>)
2000238a:	238c      	movs	r3, #140	; 0x8c
2000238c:	58d3      	ldr	r3, [r2, r3]
2000238e:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20002390:	68fb      	ldr	r3, [r7, #12]
20002392:	221f      	movs	r2, #31
20002394:	4393      	bics	r3, r2
20002396:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
20002398:	687b      	ldr	r3, [r7, #4]
2000239a:	3b01      	subs	r3, #1
2000239c:	68fa      	ldr	r2, [r7, #12]
2000239e:	4313      	orrs	r3, r2
200023a0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200023a2:	4904      	ldr	r1, [pc, #16]	; (200023b4 <RCC_SAIPLLI2SClkDivConfig+0x38>)
200023a4:	228c      	movs	r2, #140	; 0x8c
200023a6:	68fb      	ldr	r3, [r7, #12]
200023a8:	508b      	str	r3, [r1, r2]
}
200023aa:	46c0      	nop			; (mov r8, r8)
200023ac:	46bd      	mov	sp, r7
200023ae:	b004      	add	sp, #16
200023b0:	bd80      	pop	{r7, pc}
200023b2:	46c0      	nop			; (mov r8, r8)
200023b4:	40023800 	andmi	r3, r2, r0, lsl #16

200023b8 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200023b8:	b580      	push	{r7, lr}
200023ba:	b084      	sub	sp, #16
200023bc:	af00      	add	r7, sp, #0
200023be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200023c0:	2300      	movs	r3, #0
200023c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200023c4:	4a0a      	ldr	r2, [pc, #40]	; (200023f0 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200023c6:	238c      	movs	r3, #140	; 0x8c
200023c8:	58d3      	ldr	r3, [r2, r3]
200023ca:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200023cc:	68fb      	ldr	r3, [r7, #12]
200023ce:	4a09      	ldr	r2, [pc, #36]	; (200023f4 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200023d0:	4013      	ands	r3, r2
200023d2:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200023d4:	687b      	ldr	r3, [r7, #4]
200023d6:	3b01      	subs	r3, #1
200023d8:	021b      	lsls	r3, r3, #8
200023da:	68fa      	ldr	r2, [r7, #12]
200023dc:	4313      	orrs	r3, r2
200023de:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200023e0:	4903      	ldr	r1, [pc, #12]	; (200023f0 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200023e2:	228c      	movs	r2, #140	; 0x8c
200023e4:	68fb      	ldr	r3, [r7, #12]
200023e6:	508b      	str	r3, [r1, r2]
}
200023e8:	46c0      	nop			; (mov r8, r8)
200023ea:	46bd      	mov	sp, r7
200023ec:	b004      	add	sp, #16
200023ee:	bd80      	pop	{r7, pc}
200023f0:	40023800 	andmi	r3, r2, r0, lsl #16
200023f4:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

200023f8 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
200023f8:	b580      	push	{r7, lr}
200023fa:	b084      	sub	sp, #16
200023fc:	af00      	add	r7, sp, #0
200023fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002400:	2300      	movs	r3, #0
20002402:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
20002404:	4a09      	ldr	r2, [pc, #36]	; (2000242c <RCC_LTDCCLKDivConfig+0x34>)
20002406:	238c      	movs	r3, #140	; 0x8c
20002408:	58d3      	ldr	r3, [r2, r3]
2000240a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
2000240c:	68fb      	ldr	r3, [r7, #12]
2000240e:	4a08      	ldr	r2, [pc, #32]	; (20002430 <RCC_LTDCCLKDivConfig+0x38>)
20002410:	4013      	ands	r3, r2
20002412:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
20002414:	68fa      	ldr	r2, [r7, #12]
20002416:	687b      	ldr	r3, [r7, #4]
20002418:	4313      	orrs	r3, r2
2000241a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000241c:	4903      	ldr	r1, [pc, #12]	; (2000242c <RCC_LTDCCLKDivConfig+0x34>)
2000241e:	228c      	movs	r2, #140	; 0x8c
20002420:	68fb      	ldr	r3, [r7, #12]
20002422:	508b      	str	r3, [r1, r2]
}
20002424:	46c0      	nop			; (mov r8, r8)
20002426:	46bd      	mov	sp, r7
20002428:	b004      	add	sp, #16
2000242a:	bd80      	pop	{r7, pc}
2000242c:	40023800 	andmi	r3, r2, r0, lsl #16
20002430:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

20002434 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
20002434:	b580      	push	{r7, lr}
20002436:	b082      	sub	sp, #8
20002438:	af00      	add	r7, sp, #0
2000243a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
2000243c:	4b03      	ldr	r3, [pc, #12]	; (2000244c <RCC_TIMCLKPresConfig+0x18>)
2000243e:	687a      	ldr	r2, [r7, #4]
20002440:	601a      	str	r2, [r3, #0]
}
20002442:	46c0      	nop			; (mov r8, r8)
20002444:	46bd      	mov	sp, r7
20002446:	b002      	add	sp, #8
20002448:	bd80      	pop	{r7, pc}
2000244a:	46c0      	nop			; (mov r8, r8)
2000244c:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20002450 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20002450:	b580      	push	{r7, lr}
20002452:	b082      	sub	sp, #8
20002454:	af00      	add	r7, sp, #0
20002456:	6078      	str	r0, [r7, #4]
20002458:	000a      	movs	r2, r1
2000245a:	1cfb      	adds	r3, r7, #3
2000245c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000245e:	1cfb      	adds	r3, r7, #3
20002460:	781b      	ldrb	r3, [r3, #0]
20002462:	2b00      	cmp	r3, #0
20002464:	d006      	beq.n	20002474 <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
20002466:	4b09      	ldr	r3, [pc, #36]	; (2000248c <RCC_AHB1PeriphClockCmd+0x3c>)
20002468:	6b19      	ldr	r1, [r3, #48]	; 0x30
2000246a:	4b08      	ldr	r3, [pc, #32]	; (2000248c <RCC_AHB1PeriphClockCmd+0x3c>)
2000246c:	687a      	ldr	r2, [r7, #4]
2000246e:	430a      	orrs	r2, r1
20002470:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
20002472:	e006      	b.n	20002482 <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
20002474:	4b05      	ldr	r3, [pc, #20]	; (2000248c <RCC_AHB1PeriphClockCmd+0x3c>)
20002476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002478:	687b      	ldr	r3, [r7, #4]
2000247a:	43d9      	mvns	r1, r3
2000247c:	4b03      	ldr	r3, [pc, #12]	; (2000248c <RCC_AHB1PeriphClockCmd+0x3c>)
2000247e:	400a      	ands	r2, r1
20002480:	631a      	str	r2, [r3, #48]	; 0x30
}
20002482:	46c0      	nop			; (mov r8, r8)
20002484:	46bd      	mov	sp, r7
20002486:	b002      	add	sp, #8
20002488:	bd80      	pop	{r7, pc}
2000248a:	46c0      	nop			; (mov r8, r8)
2000248c:	40023800 	andmi	r3, r2, r0, lsl #16

20002490 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20002490:	b580      	push	{r7, lr}
20002492:	b082      	sub	sp, #8
20002494:	af00      	add	r7, sp, #0
20002496:	6078      	str	r0, [r7, #4]
20002498:	000a      	movs	r2, r1
2000249a:	1cfb      	adds	r3, r7, #3
2000249c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000249e:	1cfb      	adds	r3, r7, #3
200024a0:	781b      	ldrb	r3, [r3, #0]
200024a2:	2b00      	cmp	r3, #0
200024a4:	d006      	beq.n	200024b4 <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
200024a6:	4b09      	ldr	r3, [pc, #36]	; (200024cc <RCC_AHB2PeriphClockCmd+0x3c>)
200024a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
200024aa:	4b08      	ldr	r3, [pc, #32]	; (200024cc <RCC_AHB2PeriphClockCmd+0x3c>)
200024ac:	687a      	ldr	r2, [r7, #4]
200024ae:	430a      	orrs	r2, r1
200024b0:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
200024b2:	e006      	b.n	200024c2 <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
200024b4:	4b05      	ldr	r3, [pc, #20]	; (200024cc <RCC_AHB2PeriphClockCmd+0x3c>)
200024b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200024b8:	687b      	ldr	r3, [r7, #4]
200024ba:	43d9      	mvns	r1, r3
200024bc:	4b03      	ldr	r3, [pc, #12]	; (200024cc <RCC_AHB2PeriphClockCmd+0x3c>)
200024be:	400a      	ands	r2, r1
200024c0:	635a      	str	r2, [r3, #52]	; 0x34
}
200024c2:	46c0      	nop			; (mov r8, r8)
200024c4:	46bd      	mov	sp, r7
200024c6:	b002      	add	sp, #8
200024c8:	bd80      	pop	{r7, pc}
200024ca:	46c0      	nop			; (mov r8, r8)
200024cc:	40023800 	andmi	r3, r2, r0, lsl #16

200024d0 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200024d0:	b580      	push	{r7, lr}
200024d2:	b082      	sub	sp, #8
200024d4:	af00      	add	r7, sp, #0
200024d6:	6078      	str	r0, [r7, #4]
200024d8:	000a      	movs	r2, r1
200024da:	1cfb      	adds	r3, r7, #3
200024dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200024de:	1cfb      	adds	r3, r7, #3
200024e0:	781b      	ldrb	r3, [r3, #0]
200024e2:	2b00      	cmp	r3, #0
200024e4:	d006      	beq.n	200024f4 <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
200024e6:	4b09      	ldr	r3, [pc, #36]	; (2000250c <RCC_AHB3PeriphClockCmd+0x3c>)
200024e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
200024ea:	4b08      	ldr	r3, [pc, #32]	; (2000250c <RCC_AHB3PeriphClockCmd+0x3c>)
200024ec:	687a      	ldr	r2, [r7, #4]
200024ee:	430a      	orrs	r2, r1
200024f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
200024f2:	e006      	b.n	20002502 <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
200024f4:	4b05      	ldr	r3, [pc, #20]	; (2000250c <RCC_AHB3PeriphClockCmd+0x3c>)
200024f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200024f8:	687b      	ldr	r3, [r7, #4]
200024fa:	43d9      	mvns	r1, r3
200024fc:	4b03      	ldr	r3, [pc, #12]	; (2000250c <RCC_AHB3PeriphClockCmd+0x3c>)
200024fe:	400a      	ands	r2, r1
20002500:	639a      	str	r2, [r3, #56]	; 0x38
}
20002502:	46c0      	nop			; (mov r8, r8)
20002504:	46bd      	mov	sp, r7
20002506:	b002      	add	sp, #8
20002508:	bd80      	pop	{r7, pc}
2000250a:	46c0      	nop			; (mov r8, r8)
2000250c:	40023800 	andmi	r3, r2, r0, lsl #16

20002510 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20002510:	b580      	push	{r7, lr}
20002512:	b082      	sub	sp, #8
20002514:	af00      	add	r7, sp, #0
20002516:	6078      	str	r0, [r7, #4]
20002518:	000a      	movs	r2, r1
2000251a:	1cfb      	adds	r3, r7, #3
2000251c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000251e:	1cfb      	adds	r3, r7, #3
20002520:	781b      	ldrb	r3, [r3, #0]
20002522:	2b00      	cmp	r3, #0
20002524:	d006      	beq.n	20002534 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
20002526:	4b09      	ldr	r3, [pc, #36]	; (2000254c <RCC_APB1PeriphClockCmd+0x3c>)
20002528:	6c19      	ldr	r1, [r3, #64]	; 0x40
2000252a:	4b08      	ldr	r3, [pc, #32]	; (2000254c <RCC_APB1PeriphClockCmd+0x3c>)
2000252c:	687a      	ldr	r2, [r7, #4]
2000252e:	430a      	orrs	r2, r1
20002530:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
20002532:	e006      	b.n	20002542 <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
20002534:	4b05      	ldr	r3, [pc, #20]	; (2000254c <RCC_APB1PeriphClockCmd+0x3c>)
20002536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20002538:	687b      	ldr	r3, [r7, #4]
2000253a:	43d9      	mvns	r1, r3
2000253c:	4b03      	ldr	r3, [pc, #12]	; (2000254c <RCC_APB1PeriphClockCmd+0x3c>)
2000253e:	400a      	ands	r2, r1
20002540:	641a      	str	r2, [r3, #64]	; 0x40
}
20002542:	46c0      	nop			; (mov r8, r8)
20002544:	46bd      	mov	sp, r7
20002546:	b002      	add	sp, #8
20002548:	bd80      	pop	{r7, pc}
2000254a:	46c0      	nop			; (mov r8, r8)
2000254c:	40023800 	andmi	r3, r2, r0, lsl #16

20002550 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20002550:	b580      	push	{r7, lr}
20002552:	b082      	sub	sp, #8
20002554:	af00      	add	r7, sp, #0
20002556:	6078      	str	r0, [r7, #4]
20002558:	000a      	movs	r2, r1
2000255a:	1cfb      	adds	r3, r7, #3
2000255c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000255e:	1cfb      	adds	r3, r7, #3
20002560:	781b      	ldrb	r3, [r3, #0]
20002562:	2b00      	cmp	r3, #0
20002564:	d006      	beq.n	20002574 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
20002566:	4b09      	ldr	r3, [pc, #36]	; (2000258c <RCC_APB2PeriphClockCmd+0x3c>)
20002568:	6c59      	ldr	r1, [r3, #68]	; 0x44
2000256a:	4b08      	ldr	r3, [pc, #32]	; (2000258c <RCC_APB2PeriphClockCmd+0x3c>)
2000256c:	687a      	ldr	r2, [r7, #4]
2000256e:	430a      	orrs	r2, r1
20002570:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
20002572:	e006      	b.n	20002582 <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
20002574:	4b05      	ldr	r3, [pc, #20]	; (2000258c <RCC_APB2PeriphClockCmd+0x3c>)
20002576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20002578:	687b      	ldr	r3, [r7, #4]
2000257a:	43d9      	mvns	r1, r3
2000257c:	4b03      	ldr	r3, [pc, #12]	; (2000258c <RCC_APB2PeriphClockCmd+0x3c>)
2000257e:	400a      	ands	r2, r1
20002580:	645a      	str	r2, [r3, #68]	; 0x44
}
20002582:	46c0      	nop			; (mov r8, r8)
20002584:	46bd      	mov	sp, r7
20002586:	b002      	add	sp, #8
20002588:	bd80      	pop	{r7, pc}
2000258a:	46c0      	nop			; (mov r8, r8)
2000258c:	40023800 	andmi	r3, r2, r0, lsl #16

20002590 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20002590:	b580      	push	{r7, lr}
20002592:	b082      	sub	sp, #8
20002594:	af00      	add	r7, sp, #0
20002596:	6078      	str	r0, [r7, #4]
20002598:	000a      	movs	r2, r1
2000259a:	1cfb      	adds	r3, r7, #3
2000259c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000259e:	1cfb      	adds	r3, r7, #3
200025a0:	781b      	ldrb	r3, [r3, #0]
200025a2:	2b00      	cmp	r3, #0
200025a4:	d006      	beq.n	200025b4 <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
200025a6:	4b09      	ldr	r3, [pc, #36]	; (200025cc <RCC_AHB1PeriphResetCmd+0x3c>)
200025a8:	6919      	ldr	r1, [r3, #16]
200025aa:	4b08      	ldr	r3, [pc, #32]	; (200025cc <RCC_AHB1PeriphResetCmd+0x3c>)
200025ac:	687a      	ldr	r2, [r7, #4]
200025ae:	430a      	orrs	r2, r1
200025b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
200025b2:	e006      	b.n	200025c2 <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
200025b4:	4b05      	ldr	r3, [pc, #20]	; (200025cc <RCC_AHB1PeriphResetCmd+0x3c>)
200025b6:	691a      	ldr	r2, [r3, #16]
200025b8:	687b      	ldr	r3, [r7, #4]
200025ba:	43d9      	mvns	r1, r3
200025bc:	4b03      	ldr	r3, [pc, #12]	; (200025cc <RCC_AHB1PeriphResetCmd+0x3c>)
200025be:	400a      	ands	r2, r1
200025c0:	611a      	str	r2, [r3, #16]
}
200025c2:	46c0      	nop			; (mov r8, r8)
200025c4:	46bd      	mov	sp, r7
200025c6:	b002      	add	sp, #8
200025c8:	bd80      	pop	{r7, pc}
200025ca:	46c0      	nop			; (mov r8, r8)
200025cc:	40023800 	andmi	r3, r2, r0, lsl #16

200025d0 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200025d0:	b580      	push	{r7, lr}
200025d2:	b082      	sub	sp, #8
200025d4:	af00      	add	r7, sp, #0
200025d6:	6078      	str	r0, [r7, #4]
200025d8:	000a      	movs	r2, r1
200025da:	1cfb      	adds	r3, r7, #3
200025dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200025de:	1cfb      	adds	r3, r7, #3
200025e0:	781b      	ldrb	r3, [r3, #0]
200025e2:	2b00      	cmp	r3, #0
200025e4:	d006      	beq.n	200025f4 <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
200025e6:	4b09      	ldr	r3, [pc, #36]	; (2000260c <RCC_AHB2PeriphResetCmd+0x3c>)
200025e8:	6959      	ldr	r1, [r3, #20]
200025ea:	4b08      	ldr	r3, [pc, #32]	; (2000260c <RCC_AHB2PeriphResetCmd+0x3c>)
200025ec:	687a      	ldr	r2, [r7, #4]
200025ee:	430a      	orrs	r2, r1
200025f0:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
200025f2:	e006      	b.n	20002602 <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
200025f4:	4b05      	ldr	r3, [pc, #20]	; (2000260c <RCC_AHB2PeriphResetCmd+0x3c>)
200025f6:	695a      	ldr	r2, [r3, #20]
200025f8:	687b      	ldr	r3, [r7, #4]
200025fa:	43d9      	mvns	r1, r3
200025fc:	4b03      	ldr	r3, [pc, #12]	; (2000260c <RCC_AHB2PeriphResetCmd+0x3c>)
200025fe:	400a      	ands	r2, r1
20002600:	615a      	str	r2, [r3, #20]
}
20002602:	46c0      	nop			; (mov r8, r8)
20002604:	46bd      	mov	sp, r7
20002606:	b002      	add	sp, #8
20002608:	bd80      	pop	{r7, pc}
2000260a:	46c0      	nop			; (mov r8, r8)
2000260c:	40023800 	andmi	r3, r2, r0, lsl #16

20002610 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20002610:	b580      	push	{r7, lr}
20002612:	b082      	sub	sp, #8
20002614:	af00      	add	r7, sp, #0
20002616:	6078      	str	r0, [r7, #4]
20002618:	000a      	movs	r2, r1
2000261a:	1cfb      	adds	r3, r7, #3
2000261c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000261e:	1cfb      	adds	r3, r7, #3
20002620:	781b      	ldrb	r3, [r3, #0]
20002622:	2b00      	cmp	r3, #0
20002624:	d006      	beq.n	20002634 <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20002626:	4b09      	ldr	r3, [pc, #36]	; (2000264c <RCC_AHB3PeriphResetCmd+0x3c>)
20002628:	6999      	ldr	r1, [r3, #24]
2000262a:	4b08      	ldr	r3, [pc, #32]	; (2000264c <RCC_AHB3PeriphResetCmd+0x3c>)
2000262c:	687a      	ldr	r2, [r7, #4]
2000262e:	430a      	orrs	r2, r1
20002630:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20002632:	e006      	b.n	20002642 <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20002634:	4b05      	ldr	r3, [pc, #20]	; (2000264c <RCC_AHB3PeriphResetCmd+0x3c>)
20002636:	699a      	ldr	r2, [r3, #24]
20002638:	687b      	ldr	r3, [r7, #4]
2000263a:	43d9      	mvns	r1, r3
2000263c:	4b03      	ldr	r3, [pc, #12]	; (2000264c <RCC_AHB3PeriphResetCmd+0x3c>)
2000263e:	400a      	ands	r2, r1
20002640:	619a      	str	r2, [r3, #24]
}
20002642:	46c0      	nop			; (mov r8, r8)
20002644:	46bd      	mov	sp, r7
20002646:	b002      	add	sp, #8
20002648:	bd80      	pop	{r7, pc}
2000264a:	46c0      	nop			; (mov r8, r8)
2000264c:	40023800 	andmi	r3, r2, r0, lsl #16

20002650 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20002650:	b580      	push	{r7, lr}
20002652:	b082      	sub	sp, #8
20002654:	af00      	add	r7, sp, #0
20002656:	6078      	str	r0, [r7, #4]
20002658:	000a      	movs	r2, r1
2000265a:	1cfb      	adds	r3, r7, #3
2000265c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000265e:	1cfb      	adds	r3, r7, #3
20002660:	781b      	ldrb	r3, [r3, #0]
20002662:	2b00      	cmp	r3, #0
20002664:	d006      	beq.n	20002674 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20002666:	4b09      	ldr	r3, [pc, #36]	; (2000268c <RCC_APB1PeriphResetCmd+0x3c>)
20002668:	6a19      	ldr	r1, [r3, #32]
2000266a:	4b08      	ldr	r3, [pc, #32]	; (2000268c <RCC_APB1PeriphResetCmd+0x3c>)
2000266c:	687a      	ldr	r2, [r7, #4]
2000266e:	430a      	orrs	r2, r1
20002670:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20002672:	e006      	b.n	20002682 <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20002674:	4b05      	ldr	r3, [pc, #20]	; (2000268c <RCC_APB1PeriphResetCmd+0x3c>)
20002676:	6a1a      	ldr	r2, [r3, #32]
20002678:	687b      	ldr	r3, [r7, #4]
2000267a:	43d9      	mvns	r1, r3
2000267c:	4b03      	ldr	r3, [pc, #12]	; (2000268c <RCC_APB1PeriphResetCmd+0x3c>)
2000267e:	400a      	ands	r2, r1
20002680:	621a      	str	r2, [r3, #32]
}
20002682:	46c0      	nop			; (mov r8, r8)
20002684:	46bd      	mov	sp, r7
20002686:	b002      	add	sp, #8
20002688:	bd80      	pop	{r7, pc}
2000268a:	46c0      	nop			; (mov r8, r8)
2000268c:	40023800 	andmi	r3, r2, r0, lsl #16

20002690 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20002690:	b580      	push	{r7, lr}
20002692:	b082      	sub	sp, #8
20002694:	af00      	add	r7, sp, #0
20002696:	6078      	str	r0, [r7, #4]
20002698:	000a      	movs	r2, r1
2000269a:	1cfb      	adds	r3, r7, #3
2000269c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000269e:	1cfb      	adds	r3, r7, #3
200026a0:	781b      	ldrb	r3, [r3, #0]
200026a2:	2b00      	cmp	r3, #0
200026a4:	d006      	beq.n	200026b4 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
200026a6:	4b09      	ldr	r3, [pc, #36]	; (200026cc <RCC_APB2PeriphResetCmd+0x3c>)
200026a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
200026aa:	4b08      	ldr	r3, [pc, #32]	; (200026cc <RCC_APB2PeriphResetCmd+0x3c>)
200026ac:	687a      	ldr	r2, [r7, #4]
200026ae:	430a      	orrs	r2, r1
200026b0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
200026b2:	e006      	b.n	200026c2 <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
200026b4:	4b05      	ldr	r3, [pc, #20]	; (200026cc <RCC_APB2PeriphResetCmd+0x3c>)
200026b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
200026b8:	687b      	ldr	r3, [r7, #4]
200026ba:	43d9      	mvns	r1, r3
200026bc:	4b03      	ldr	r3, [pc, #12]	; (200026cc <RCC_APB2PeriphResetCmd+0x3c>)
200026be:	400a      	ands	r2, r1
200026c0:	625a      	str	r2, [r3, #36]	; 0x24
}
200026c2:	46c0      	nop			; (mov r8, r8)
200026c4:	46bd      	mov	sp, r7
200026c6:	b002      	add	sp, #8
200026c8:	bd80      	pop	{r7, pc}
200026ca:	46c0      	nop			; (mov r8, r8)
200026cc:	40023800 	andmi	r3, r2, r0, lsl #16

200026d0 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200026d0:	b580      	push	{r7, lr}
200026d2:	b082      	sub	sp, #8
200026d4:	af00      	add	r7, sp, #0
200026d6:	6078      	str	r0, [r7, #4]
200026d8:	000a      	movs	r2, r1
200026da:	1cfb      	adds	r3, r7, #3
200026dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200026de:	1cfb      	adds	r3, r7, #3
200026e0:	781b      	ldrb	r3, [r3, #0]
200026e2:	2b00      	cmp	r3, #0
200026e4:	d006      	beq.n	200026f4 <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
200026e6:	4b09      	ldr	r3, [pc, #36]	; (2000270c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
200026e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
200026ea:	4b08      	ldr	r3, [pc, #32]	; (2000270c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
200026ec:	687a      	ldr	r2, [r7, #4]
200026ee:	430a      	orrs	r2, r1
200026f0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
200026f2:	e006      	b.n	20002702 <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
200026f4:	4b05      	ldr	r3, [pc, #20]	; (2000270c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
200026f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200026f8:	687b      	ldr	r3, [r7, #4]
200026fa:	43d9      	mvns	r1, r3
200026fc:	4b03      	ldr	r3, [pc, #12]	; (2000270c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
200026fe:	400a      	ands	r2, r1
20002700:	651a      	str	r2, [r3, #80]	; 0x50
}
20002702:	46c0      	nop			; (mov r8, r8)
20002704:	46bd      	mov	sp, r7
20002706:	b002      	add	sp, #8
20002708:	bd80      	pop	{r7, pc}
2000270a:	46c0      	nop			; (mov r8, r8)
2000270c:	40023800 	andmi	r3, r2, r0, lsl #16

20002710 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20002710:	b580      	push	{r7, lr}
20002712:	b082      	sub	sp, #8
20002714:	af00      	add	r7, sp, #0
20002716:	6078      	str	r0, [r7, #4]
20002718:	000a      	movs	r2, r1
2000271a:	1cfb      	adds	r3, r7, #3
2000271c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000271e:	1cfb      	adds	r3, r7, #3
20002720:	781b      	ldrb	r3, [r3, #0]
20002722:	2b00      	cmp	r3, #0
20002724:	d006      	beq.n	20002734 <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20002726:	4b09      	ldr	r3, [pc, #36]	; (2000274c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20002728:	6d59      	ldr	r1, [r3, #84]	; 0x54
2000272a:	4b08      	ldr	r3, [pc, #32]	; (2000274c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
2000272c:	687a      	ldr	r2, [r7, #4]
2000272e:	430a      	orrs	r2, r1
20002730:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20002732:	e006      	b.n	20002742 <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20002734:	4b05      	ldr	r3, [pc, #20]	; (2000274c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20002736:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20002738:	687b      	ldr	r3, [r7, #4]
2000273a:	43d9      	mvns	r1, r3
2000273c:	4b03      	ldr	r3, [pc, #12]	; (2000274c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
2000273e:	400a      	ands	r2, r1
20002740:	655a      	str	r2, [r3, #84]	; 0x54
}
20002742:	46c0      	nop			; (mov r8, r8)
20002744:	46bd      	mov	sp, r7
20002746:	b002      	add	sp, #8
20002748:	bd80      	pop	{r7, pc}
2000274a:	46c0      	nop			; (mov r8, r8)
2000274c:	40023800 	andmi	r3, r2, r0, lsl #16

20002750 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20002750:	b580      	push	{r7, lr}
20002752:	b082      	sub	sp, #8
20002754:	af00      	add	r7, sp, #0
20002756:	6078      	str	r0, [r7, #4]
20002758:	000a      	movs	r2, r1
2000275a:	1cfb      	adds	r3, r7, #3
2000275c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000275e:	1cfb      	adds	r3, r7, #3
20002760:	781b      	ldrb	r3, [r3, #0]
20002762:	2b00      	cmp	r3, #0
20002764:	d006      	beq.n	20002774 <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20002766:	4b09      	ldr	r3, [pc, #36]	; (2000278c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20002768:	6d99      	ldr	r1, [r3, #88]	; 0x58
2000276a:	4b08      	ldr	r3, [pc, #32]	; (2000278c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
2000276c:	687a      	ldr	r2, [r7, #4]
2000276e:	430a      	orrs	r2, r1
20002770:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20002772:	e006      	b.n	20002782 <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20002774:	4b05      	ldr	r3, [pc, #20]	; (2000278c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20002776:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20002778:	687b      	ldr	r3, [r7, #4]
2000277a:	43d9      	mvns	r1, r3
2000277c:	4b03      	ldr	r3, [pc, #12]	; (2000278c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
2000277e:	400a      	ands	r2, r1
20002780:	659a      	str	r2, [r3, #88]	; 0x58
}
20002782:	46c0      	nop			; (mov r8, r8)
20002784:	46bd      	mov	sp, r7
20002786:	b002      	add	sp, #8
20002788:	bd80      	pop	{r7, pc}
2000278a:	46c0      	nop			; (mov r8, r8)
2000278c:	40023800 	andmi	r3, r2, r0, lsl #16

20002790 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20002790:	b580      	push	{r7, lr}
20002792:	b082      	sub	sp, #8
20002794:	af00      	add	r7, sp, #0
20002796:	6078      	str	r0, [r7, #4]
20002798:	000a      	movs	r2, r1
2000279a:	1cfb      	adds	r3, r7, #3
2000279c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000279e:	1cfb      	adds	r3, r7, #3
200027a0:	781b      	ldrb	r3, [r3, #0]
200027a2:	2b00      	cmp	r3, #0
200027a4:	d006      	beq.n	200027b4 <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
200027a6:	4b09      	ldr	r3, [pc, #36]	; (200027cc <RCC_APB1PeriphClockLPModeCmd+0x3c>)
200027a8:	6e19      	ldr	r1, [r3, #96]	; 0x60
200027aa:	4b08      	ldr	r3, [pc, #32]	; (200027cc <RCC_APB1PeriphClockLPModeCmd+0x3c>)
200027ac:	687a      	ldr	r2, [r7, #4]
200027ae:	430a      	orrs	r2, r1
200027b0:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
200027b2:	e006      	b.n	200027c2 <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
200027b4:	4b05      	ldr	r3, [pc, #20]	; (200027cc <RCC_APB1PeriphClockLPModeCmd+0x3c>)
200027b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
200027b8:	687b      	ldr	r3, [r7, #4]
200027ba:	43d9      	mvns	r1, r3
200027bc:	4b03      	ldr	r3, [pc, #12]	; (200027cc <RCC_APB1PeriphClockLPModeCmd+0x3c>)
200027be:	400a      	ands	r2, r1
200027c0:	661a      	str	r2, [r3, #96]	; 0x60
}
200027c2:	46c0      	nop			; (mov r8, r8)
200027c4:	46bd      	mov	sp, r7
200027c6:	b002      	add	sp, #8
200027c8:	bd80      	pop	{r7, pc}
200027ca:	46c0      	nop			; (mov r8, r8)
200027cc:	40023800 	andmi	r3, r2, r0, lsl #16

200027d0 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200027d0:	b580      	push	{r7, lr}
200027d2:	b082      	sub	sp, #8
200027d4:	af00      	add	r7, sp, #0
200027d6:	6078      	str	r0, [r7, #4]
200027d8:	000a      	movs	r2, r1
200027da:	1cfb      	adds	r3, r7, #3
200027dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200027de:	1cfb      	adds	r3, r7, #3
200027e0:	781b      	ldrb	r3, [r3, #0]
200027e2:	2b00      	cmp	r3, #0
200027e4:	d006      	beq.n	200027f4 <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
200027e6:	4b09      	ldr	r3, [pc, #36]	; (2000280c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
200027e8:	6e59      	ldr	r1, [r3, #100]	; 0x64
200027ea:	4b08      	ldr	r3, [pc, #32]	; (2000280c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
200027ec:	687a      	ldr	r2, [r7, #4]
200027ee:	430a      	orrs	r2, r1
200027f0:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
200027f2:	e006      	b.n	20002802 <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
200027f4:	4b05      	ldr	r3, [pc, #20]	; (2000280c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
200027f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
200027f8:	687b      	ldr	r3, [r7, #4]
200027fa:	43d9      	mvns	r1, r3
200027fc:	4b03      	ldr	r3, [pc, #12]	; (2000280c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
200027fe:	400a      	ands	r2, r1
20002800:	665a      	str	r2, [r3, #100]	; 0x64
}
20002802:	46c0      	nop			; (mov r8, r8)
20002804:	46bd      	mov	sp, r7
20002806:	b002      	add	sp, #8
20002808:	bd80      	pop	{r7, pc}
2000280a:	46c0      	nop			; (mov r8, r8)
2000280c:	40023800 	andmi	r3, r2, r0, lsl #16

20002810 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20002810:	b580      	push	{r7, lr}
20002812:	b082      	sub	sp, #8
20002814:	af00      	add	r7, sp, #0
20002816:	0002      	movs	r2, r0
20002818:	1dfb      	adds	r3, r7, #7
2000281a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
2000281c:	1dfb      	adds	r3, r7, #7
2000281e:	781b      	ldrb	r3, [r3, #0]
20002820:	2b01      	cmp	r3, #1
20002822:	d106      	bne.n	20002832 <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20002824:	4b08      	ldr	r3, [pc, #32]	; (20002848 <RCC_LSEModeConfig+0x38>)
20002826:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20002828:	4b07      	ldr	r3, [pc, #28]	; (20002848 <RCC_LSEModeConfig+0x38>)
2000282a:	2108      	movs	r1, #8
2000282c:	430a      	orrs	r2, r1
2000282e:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20002830:	e005      	b.n	2000283e <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20002832:	4b05      	ldr	r3, [pc, #20]	; (20002848 <RCC_LSEModeConfig+0x38>)
20002834:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20002836:	4b04      	ldr	r3, [pc, #16]	; (20002848 <RCC_LSEModeConfig+0x38>)
20002838:	2108      	movs	r1, #8
2000283a:	438a      	bics	r2, r1
2000283c:	671a      	str	r2, [r3, #112]	; 0x70
}
2000283e:	46c0      	nop			; (mov r8, r8)
20002840:	46bd      	mov	sp, r7
20002842:	b002      	add	sp, #8
20002844:	bd80      	pop	{r7, pc}
20002846:	46c0      	nop			; (mov r8, r8)
20002848:	40023800 	andmi	r3, r2, r0, lsl #16

2000284c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
2000284c:	b580      	push	{r7, lr}
2000284e:	b082      	sub	sp, #8
20002850:	af00      	add	r7, sp, #0
20002852:	0002      	movs	r2, r0
20002854:	1dfb      	adds	r3, r7, #7
20002856:	701a      	strb	r2, [r3, #0]
20002858:	1dbb      	adds	r3, r7, #6
2000285a:	1c0a      	adds	r2, r1, #0
2000285c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000285e:	1dbb      	adds	r3, r7, #6
20002860:	781b      	ldrb	r3, [r3, #0]
20002862:	2b00      	cmp	r3, #0
20002864:	d009      	beq.n	2000287a <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20002866:	4b0c      	ldr	r3, [pc, #48]	; (20002898 <RCC_ITConfig+0x4c>)
20002868:	781b      	ldrb	r3, [r3, #0]
2000286a:	b2da      	uxtb	r2, r3
2000286c:	490a      	ldr	r1, [pc, #40]	; (20002898 <RCC_ITConfig+0x4c>)
2000286e:	1dfb      	adds	r3, r7, #7
20002870:	781b      	ldrb	r3, [r3, #0]
20002872:	4313      	orrs	r3, r2
20002874:	b2db      	uxtb	r3, r3
20002876:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20002878:	e00a      	b.n	20002890 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
2000287a:	4b07      	ldr	r3, [pc, #28]	; (20002898 <RCC_ITConfig+0x4c>)
2000287c:	781b      	ldrb	r3, [r3, #0]
2000287e:	b2db      	uxtb	r3, r3
20002880:	1dfa      	adds	r2, r7, #7
20002882:	7812      	ldrb	r2, [r2, #0]
20002884:	43d2      	mvns	r2, r2
20002886:	b2d2      	uxtb	r2, r2
20002888:	4903      	ldr	r1, [pc, #12]	; (20002898 <RCC_ITConfig+0x4c>)
2000288a:	4013      	ands	r3, r2
2000288c:	b2db      	uxtb	r3, r3
2000288e:	700b      	strb	r3, [r1, #0]
}
20002890:	46c0      	nop			; (mov r8, r8)
20002892:	46bd      	mov	sp, r7
20002894:	b002      	add	sp, #8
20002896:	bd80      	pop	{r7, pc}
20002898:	4002380d 	andmi	r3, r2, sp, lsl #16

2000289c <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
2000289c:	b580      	push	{r7, lr}
2000289e:	b086      	sub	sp, #24
200028a0:	af00      	add	r7, sp, #0
200028a2:	0002      	movs	r2, r0
200028a4:	1dfb      	adds	r3, r7, #7
200028a6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
200028a8:	2300      	movs	r3, #0
200028aa:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
200028ac:	2300      	movs	r3, #0
200028ae:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
200028b0:	2313      	movs	r3, #19
200028b2:	18fb      	adds	r3, r7, r3
200028b4:	2200      	movs	r2, #0
200028b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
200028b8:	1dfb      	adds	r3, r7, #7
200028ba:	781b      	ldrb	r3, [r3, #0]
200028bc:	095b      	lsrs	r3, r3, #5
200028be:	b2db      	uxtb	r3, r3
200028c0:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
200028c2:	68fb      	ldr	r3, [r7, #12]
200028c4:	2b01      	cmp	r3, #1
200028c6:	d103      	bne.n	200028d0 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
200028c8:	4b14      	ldr	r3, [pc, #80]	; (2000291c <RCC_GetFlagStatus+0x80>)
200028ca:	681b      	ldr	r3, [r3, #0]
200028cc:	617b      	str	r3, [r7, #20]
200028ce:	e009      	b.n	200028e4 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
200028d0:	68fb      	ldr	r3, [r7, #12]
200028d2:	2b02      	cmp	r3, #2
200028d4:	d103      	bne.n	200028de <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
200028d6:	4b11      	ldr	r3, [pc, #68]	; (2000291c <RCC_GetFlagStatus+0x80>)
200028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200028da:	617b      	str	r3, [r7, #20]
200028dc:	e002      	b.n	200028e4 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
200028de:	4b0f      	ldr	r3, [pc, #60]	; (2000291c <RCC_GetFlagStatus+0x80>)
200028e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200028e2:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
200028e4:	1dfb      	adds	r3, r7, #7
200028e6:	781b      	ldrb	r3, [r3, #0]
200028e8:	221f      	movs	r2, #31
200028ea:	4013      	ands	r3, r2
200028ec:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
200028ee:	697a      	ldr	r2, [r7, #20]
200028f0:	68fb      	ldr	r3, [r7, #12]
200028f2:	40da      	lsrs	r2, r3
200028f4:	0013      	movs	r3, r2
200028f6:	2201      	movs	r2, #1
200028f8:	4013      	ands	r3, r2
200028fa:	d004      	beq.n	20002906 <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
200028fc:	2313      	movs	r3, #19
200028fe:	18fb      	adds	r3, r7, r3
20002900:	2201      	movs	r2, #1
20002902:	701a      	strb	r2, [r3, #0]
20002904:	e003      	b.n	2000290e <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20002906:	2313      	movs	r3, #19
20002908:	18fb      	adds	r3, r7, r3
2000290a:	2200      	movs	r2, #0
2000290c:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
2000290e:	2313      	movs	r3, #19
20002910:	18fb      	adds	r3, r7, r3
20002912:	781b      	ldrb	r3, [r3, #0]
}
20002914:	0018      	movs	r0, r3
20002916:	46bd      	mov	sp, r7
20002918:	b006      	add	sp, #24
2000291a:	bd80      	pop	{r7, pc}
2000291c:	40023800 	andmi	r3, r2, r0, lsl #16

20002920 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20002920:	b580      	push	{r7, lr}
20002922:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20002924:	4b04      	ldr	r3, [pc, #16]	; (20002938 <RCC_ClearFlag+0x18>)
20002926:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20002928:	4b03      	ldr	r3, [pc, #12]	; (20002938 <RCC_ClearFlag+0x18>)
2000292a:	2180      	movs	r1, #128	; 0x80
2000292c:	0449      	lsls	r1, r1, #17
2000292e:	430a      	orrs	r2, r1
20002930:	675a      	str	r2, [r3, #116]	; 0x74
}
20002932:	46c0      	nop			; (mov r8, r8)
20002934:	46bd      	mov	sp, r7
20002936:	bd80      	pop	{r7, pc}
20002938:	40023800 	andmi	r3, r2, r0, lsl #16

2000293c <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
2000293c:	b580      	push	{r7, lr}
2000293e:	b084      	sub	sp, #16
20002940:	af00      	add	r7, sp, #0
20002942:	0002      	movs	r2, r0
20002944:	1dfb      	adds	r3, r7, #7
20002946:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20002948:	230f      	movs	r3, #15
2000294a:	18fb      	adds	r3, r7, r3
2000294c:	2200      	movs	r2, #0
2000294e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20002950:	4b0a      	ldr	r3, [pc, #40]	; (2000297c <RCC_GetITStatus+0x40>)
20002952:	68db      	ldr	r3, [r3, #12]
20002954:	1dfa      	adds	r2, r7, #7
20002956:	7812      	ldrb	r2, [r2, #0]
20002958:	4013      	ands	r3, r2
2000295a:	d004      	beq.n	20002966 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
2000295c:	230f      	movs	r3, #15
2000295e:	18fb      	adds	r3, r7, r3
20002960:	2201      	movs	r2, #1
20002962:	701a      	strb	r2, [r3, #0]
20002964:	e003      	b.n	2000296e <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20002966:	230f      	movs	r3, #15
20002968:	18fb      	adds	r3, r7, r3
2000296a:	2200      	movs	r2, #0
2000296c:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
2000296e:	230f      	movs	r3, #15
20002970:	18fb      	adds	r3, r7, r3
20002972:	781b      	ldrb	r3, [r3, #0]
}
20002974:	0018      	movs	r0, r3
20002976:	46bd      	mov	sp, r7
20002978:	b004      	add	sp, #16
2000297a:	bd80      	pop	{r7, pc}
2000297c:	40023800 	andmi	r3, r2, r0, lsl #16

20002980 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20002980:	b580      	push	{r7, lr}
20002982:	b082      	sub	sp, #8
20002984:	af00      	add	r7, sp, #0
20002986:	0002      	movs	r2, r0
20002988:	1dfb      	adds	r3, r7, #7
2000298a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
2000298c:	4a03      	ldr	r2, [pc, #12]	; (2000299c <RCC_ClearITPendingBit+0x1c>)
2000298e:	1dfb      	adds	r3, r7, #7
20002990:	781b      	ldrb	r3, [r3, #0]
20002992:	7013      	strb	r3, [r2, #0]
}
20002994:	46c0      	nop			; (mov r8, r8)
20002996:	46bd      	mov	sp, r7
20002998:	b002      	add	sp, #8
2000299a:	bd80      	pop	{r7, pc}
2000299c:	4002380e 	andmi	r3, r2, lr, lsl #16

200029a0 <init_GPIO_Ports>:
//======================================GPIO=========================================================
void init_GPIO_Ports()
{
200029a0:	b580      	push	{r7, lr}
200029a2:	b082      	sub	sp, #8
200029a4:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO E UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
200029a6:	2101      	movs	r1, #1
200029a8:	2010      	movs	r0, #16
200029aa:	f7ff fd51 	bl	20002450 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
200029ae:	003b      	movs	r3, r7
200029b0:	0018      	movs	r0, r3
200029b2:	f7fe ff2b 	bl	2000180c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
200029b6:	003b      	movs	r3, r7
200029b8:	4a64      	ldr	r2, [pc, #400]	; (20002b4c <init_GPIO_Ports+0x1ac>)
200029ba:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
200029bc:	003b      	movs	r3, r7
200029be:	2201      	movs	r2, #1
200029c0:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
200029c2:	003b      	movs	r3, r7
200029c4:	2200      	movs	r2, #0
200029c6:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
200029c8:	003b      	movs	r3, r7
200029ca:	2200      	movs	r2, #0
200029cc:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
200029ce:	003b      	movs	r3, r7
200029d0:	4a5f      	ldr	r2, [pc, #380]	; (20002b50 <init_GPIO_Ports+0x1b0>)
200029d2:	0019      	movs	r1, r3
200029d4:	0010      	movs	r0, r2
200029d6:	f7fe fe8d 	bl	200016f4 <GPIO_Init>
	
	//konfigurerar inport GPIO E
	GPIO_StructInit(&init);
200029da:	003b      	movs	r3, r7
200029dc:	0018      	movs	r0, r3
200029de:	f7fe ff15 	bl	2000180c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
200029e2:	003b      	movs	r3, r7
200029e4:	4a5b      	ldr	r2, [pc, #364]	; (20002b54 <init_GPIO_Ports+0x1b4>)
200029e6:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
200029e8:	003b      	movs	r3, r7
200029ea:	2200      	movs	r2, #0
200029ec:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
200029ee:	003b      	movs	r3, r7
200029f0:	2201      	movs	r2, #1
200029f2:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
200029f4:	003b      	movs	r3, r7
200029f6:	4a56      	ldr	r2, [pc, #344]	; (20002b50 <init_GPIO_Ports+0x1b0>)
200029f8:	0019      	movs	r1, r3
200029fa:	0010      	movs	r0, r2
200029fc:	f7fe fe7a 	bl	200016f4 <GPIO_Init>

    //GPIOA UTPORTAR
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20002a00:	2101      	movs	r1, #1
20002a02:	2001      	movs	r0, #1
20002a04:	f7ff fd24 	bl	20002450 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20002a08:	003b      	movs	r3, r7
20002a0a:	0018      	movs	r0, r3
20002a0c:	f7fe fefe 	bl	2000180c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20002a10:	003b      	movs	r3, r7
20002a12:	4a4e      	ldr	r2, [pc, #312]	; (20002b4c <init_GPIO_Ports+0x1ac>)
20002a14:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20002a16:	003b      	movs	r3, r7
20002a18:	2201      	movs	r2, #1
20002a1a:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20002a1c:	003b      	movs	r3, r7
20002a1e:	2200      	movs	r2, #0
20002a20:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20002a22:	003b      	movs	r3, r7
20002a24:	2200      	movs	r2, #0
20002a26:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20002a28:	003b      	movs	r3, r7
20002a2a:	4a4b      	ldr	r2, [pc, #300]	; (20002b58 <init_GPIO_Ports+0x1b8>)
20002a2c:	0019      	movs	r1, r3
20002a2e:	0010      	movs	r0, r2
20002a30:	f7fe fe60 	bl	200016f4 <GPIO_Init>
	
	//konfigurerar inport GPIO a
	GPIO_StructInit(&init);
20002a34:	003b      	movs	r3, r7
20002a36:	0018      	movs	r0, r3
20002a38:	f7fe fee8 	bl	2000180c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20002a3c:	003b      	movs	r3, r7
20002a3e:	4a45      	ldr	r2, [pc, #276]	; (20002b54 <init_GPIO_Ports+0x1b4>)
20002a40:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20002a42:	003b      	movs	r3, r7
20002a44:	2200      	movs	r2, #0
20002a46:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20002a48:	003b      	movs	r3, r7
20002a4a:	2201      	movs	r2, #1
20002a4c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20002a4e:	003b      	movs	r3, r7
20002a50:	4a41      	ldr	r2, [pc, #260]	; (20002b58 <init_GPIO_Ports+0x1b8>)
20002a52:	0019      	movs	r1, r3
20002a54:	0010      	movs	r0, r2
20002a56:	f7fe fe4d 	bl	200016f4 <GPIO_Init>

	//GPIO C UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20002a5a:	2101      	movs	r1, #1
20002a5c:	2004      	movs	r0, #4
20002a5e:	f7ff fcf7 	bl	20002450 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20002a62:	003b      	movs	r3, r7
20002a64:	0018      	movs	r0, r3
20002a66:	f7fe fed1 	bl	2000180c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20002a6a:	003b      	movs	r3, r7
20002a6c:	4a37      	ldr	r2, [pc, #220]	; (20002b4c <init_GPIO_Ports+0x1ac>)
20002a6e:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20002a70:	003b      	movs	r3, r7
20002a72:	2201      	movs	r2, #1
20002a74:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20002a76:	003b      	movs	r3, r7
20002a78:	2200      	movs	r2, #0
20002a7a:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20002a7c:	003b      	movs	r3, r7
20002a7e:	2200      	movs	r2, #0
20002a80:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
20002a82:	003b      	movs	r3, r7
20002a84:	4a35      	ldr	r2, [pc, #212]	; (20002b5c <init_GPIO_Ports+0x1bc>)
20002a86:	0019      	movs	r1, r3
20002a88:	0010      	movs	r0, r2
20002a8a:	f7fe fe33 	bl	200016f4 <GPIO_Init>
	
	//konfigurerar inport GPIO C
	GPIO_StructInit(&init);
20002a8e:	003b      	movs	r3, r7
20002a90:	0018      	movs	r0, r3
20002a92:	f7fe febb 	bl	2000180c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20002a96:	003b      	movs	r3, r7
20002a98:	4a2e      	ldr	r2, [pc, #184]	; (20002b54 <init_GPIO_Ports+0x1b4>)
20002a9a:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20002a9c:	003b      	movs	r3, r7
20002a9e:	2200      	movs	r2, #0
20002aa0:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20002aa2:	003b      	movs	r3, r7
20002aa4:	2201      	movs	r2, #1
20002aa6:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
20002aa8:	003b      	movs	r3, r7
20002aaa:	4a2c      	ldr	r2, [pc, #176]	; (20002b5c <init_GPIO_Ports+0x1bc>)
20002aac:	0019      	movs	r1, r3
20002aae:	0010      	movs	r0, r2
20002ab0:	f7fe fe20 	bl	200016f4 <GPIO_Init>

	//GPIO D UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20002ab4:	2101      	movs	r1, #1
20002ab6:	2008      	movs	r0, #8
20002ab8:	f7ff fcca 	bl	20002450 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20002abc:	003b      	movs	r3, r7
20002abe:	0018      	movs	r0, r3
20002ac0:	f7fe fea4 	bl	2000180c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20002ac4:	003b      	movs	r3, r7
20002ac6:	4a21      	ldr	r2, [pc, #132]	; (20002b4c <init_GPIO_Ports+0x1ac>)
20002ac8:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20002aca:	003b      	movs	r3, r7
20002acc:	2201      	movs	r2, #1
20002ace:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20002ad0:	003b      	movs	r3, r7
20002ad2:	2200      	movs	r2, #0
20002ad4:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20002ad6:	003b      	movs	r3, r7
20002ad8:	2200      	movs	r2, #0
20002ada:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
20002adc:	003b      	movs	r3, r7
20002ade:	4a20      	ldr	r2, [pc, #128]	; (20002b60 <init_GPIO_Ports+0x1c0>)
20002ae0:	0019      	movs	r1, r3
20002ae2:	0010      	movs	r0, r2
20002ae4:	f7fe fe06 	bl	200016f4 <GPIO_Init>
	
	//konfigurerar inport GPIO D
	GPIO_StructInit(&init);
20002ae8:	003b      	movs	r3, r7
20002aea:	0018      	movs	r0, r3
20002aec:	f7fe fe8e 	bl	2000180c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20002af0:	003b      	movs	r3, r7
20002af2:	4a18      	ldr	r2, [pc, #96]	; (20002b54 <init_GPIO_Ports+0x1b4>)
20002af4:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20002af6:	003b      	movs	r3, r7
20002af8:	2200      	movs	r2, #0
20002afa:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20002afc:	003b      	movs	r3, r7
20002afe:	2201      	movs	r2, #1
20002b00:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
20002b02:	003b      	movs	r3, r7
20002b04:	4a16      	ldr	r2, [pc, #88]	; (20002b60 <init_GPIO_Ports+0x1c0>)
20002b06:	0019      	movs	r1, r3
20002b08:	0010      	movs	r0, r2
20002b0a:	f7fe fdf3 	bl	200016f4 <GPIO_Init>

	//GPIO B UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20002b0e:	2101      	movs	r1, #1
20002b10:	2002      	movs	r0, #2
20002b12:	f7ff fc9d 	bl	20002450 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20002b16:	003b      	movs	r3, r7
20002b18:	0018      	movs	r0, r3
20002b1a:	f7fe fe77 	bl	2000180c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_2;
20002b1e:	003b      	movs	r3, r7
20002b20:	2204      	movs	r2, #4
20002b22:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20002b24:	003b      	movs	r3, r7
20002b26:	2201      	movs	r2, #1
20002b28:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20002b2a:	003b      	movs	r3, r7
20002b2c:	2200      	movs	r2, #0
20002b2e:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20002b30:	003b      	movs	r3, r7
20002b32:	2200      	movs	r2, #0
20002b34:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &init);
20002b36:	003b      	movs	r3, r7
20002b38:	4a0a      	ldr	r2, [pc, #40]	; (20002b64 <init_GPIO_Ports+0x1c4>)
20002b3a:	0019      	movs	r1, r3
20002b3c:	0010      	movs	r0, r2
20002b3e:	f7fe fdd9 	bl	200016f4 <GPIO_Init>
20002b42:	46c0      	nop			; (mov r8, r8)
20002b44:	46bd      	mov	sp, r7
20002b46:	b002      	add	sp, #8
20002b48:	bd80      	pop	{r7, pc}
20002b4a:	46c0      	nop			; (mov r8, r8)
20002b4c:	0000aaaa 	andeq	sl, r0, sl, lsr #21
20002b50:	40021000 	andmi	r1, r2, r0
20002b54:	00005555 	andeq	r5, r0, r5, asr r5
20002b58:	40020000 	andmi	r0, r2, r0
20002b5c:	40020800 	andmi	r0, r2, r0, lsl #16
20002b60:	40020c00 	andmi	r0, r2, r0, lsl #24
20002b64:	40020400 	andmi	r0, r2, r0, lsl #8

20002b68 <SysTick_Handler>:
GPIO_TypeDef* GPIO_Ports[] = {GPIOE, GPIOA, GPIOC, GPIOD};

// ========================================= SYSTICK ================================================
volatile uint32_t msTicks = 0; /* Variable to store millisecond ticks */
void SysTick_Handler(void)
{ /* SysTick interrupt Handler. */
20002b68:	b580      	push	{r7, lr}
20002b6a:	af00      	add	r7, sp, #0
	msTicks++;
20002b6c:	4b03      	ldr	r3, [pc, #12]	; (20002b7c <SysTick_Handler+0x14>)
20002b6e:	681b      	ldr	r3, [r3, #0]
20002b70:	1c5a      	adds	r2, r3, #1
20002b72:	4b02      	ldr	r3, [pc, #8]	; (20002b7c <SysTick_Handler+0x14>)
20002b74:	601a      	str	r2, [r3, #0]
}
20002b76:	46c0      	nop			; (mov r8, r8)
20002b78:	46bd      	mov	sp, r7
20002b7a:	bd80      	pop	{r7, pc}
20002b7c:	20003b84 	andcs	r3, r0, r4, lsl #23

20002b80 <systick_Init>:
void systick_Init(void)
{
20002b80:	b580      	push	{r7, lr}
20002b82:	b082      	sub	sp, #8
20002b84:	af00      	add	r7, sp, #0
	// Initiera SysTick.
	*((void (**)(void))0x2001C03C) = SysTick_Handler;
20002b86:	4b09      	ldr	r3, [pc, #36]	; (20002bac <systick_Init+0x2c>)
20002b88:	4a09      	ldr	r2, [pc, #36]	; (20002bb0 <systick_Init+0x30>)
20002b8a:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	returnCode = SysTick_Config(168000000 / 1000); // Genererar ett SysTick-avbrott varje ms.
20002b8c:	4b09      	ldr	r3, [pc, #36]	; (20002bb4 <systick_Init+0x34>)
20002b8e:	0018      	movs	r0, r3
20002b90:	f7ff f86a 	bl	20001c68 <SysTick_Config>
20002b94:	0003      	movs	r3, r0
20002b96:	607b      	str	r3, [r7, #4]

	if (returnCode != 0)
20002b98:	687b      	ldr	r3, [r7, #4]
20002b9a:	2b00      	cmp	r3, #0
20002b9c:	d001      	beq.n	20002ba2 <systick_Init+0x22>
	{   
		systick_Init();
20002b9e:	f7ff ffef 	bl	20002b80 <systick_Init>
	}
}
20002ba2:	46c0      	nop			; (mov r8, r8)
20002ba4:	46bd      	mov	sp, r7
20002ba6:	b002      	add	sp, #8
20002ba8:	bd80      	pop	{r7, pc}
20002baa:	46c0      	nop			; (mov r8, r8)
20002bac:	2001c03c 	andcs	ip, r1, ip, lsr r0
20002bb0:	20002b69 	andcs	r2, r0, r9, ror #22
20002bb4:	00029040 	andeq	r9, r2, r0, asr #32

20002bb8 <delay>:
void delay (int mili){
20002bb8:	b580      	push	{r7, lr}
20002bba:	b084      	sub	sp, #16
20002bbc:	af00      	add	r7, sp, #0
20002bbe:	6078      	str	r0, [r7, #4]
		int time = msTicks + mili;
20002bc0:	4b07      	ldr	r3, [pc, #28]	; (20002be0 <delay+0x28>)
20002bc2:	681a      	ldr	r2, [r3, #0]
20002bc4:	687b      	ldr	r3, [r7, #4]
20002bc6:	18d3      	adds	r3, r2, r3
20002bc8:	60fb      	str	r3, [r7, #12]
		while(time > msTicks);
20002bca:	46c0      	nop			; (mov r8, r8)
20002bcc:	68fa      	ldr	r2, [r7, #12]
20002bce:	4b04      	ldr	r3, [pc, #16]	; (20002be0 <delay+0x28>)
20002bd0:	681b      	ldr	r3, [r3, #0]
20002bd2:	429a      	cmp	r2, r3
20002bd4:	d8fa      	bhi.n	20002bcc <delay+0x14>
	}
20002bd6:	46c0      	nop			; (mov r8, r8)
20002bd8:	46bd      	mov	sp, r7
20002bda:	b004      	add	sp, #16
20002bdc:	bd80      	pop	{r7, pc}
20002bde:	46c0      	nop			; (mov r8, r8)
20002be0:	20003b84 	andcs	r3, r0, r4, lsl #23

20002be4 <init_rng>:
//======================================== Slumptals generator CAN =========================================
void init_rng(void){
20002be4:	b580      	push	{r7, lr}
20002be6:	af00      	add	r7, sp, #0
	RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE);
20002be8:	2101      	movs	r1, #1
20002bea:	2040      	movs	r0, #64	; 0x40
20002bec:	f7ff fc50 	bl	20002490 <RCC_AHB2PeriphClockCmd>
    RNG_Cmd(ENABLE);
20002bf0:	2001      	movs	r0, #1
20002bf2:	f7fe ff5c 	bl	20001aae <RNG_Cmd>
}
20002bf6:	46c0      	nop			; (mov r8, r8)
20002bf8:	46bd      	mov	sp, r7
20002bfa:	bd80      	pop	{r7, pc}

20002bfc <main>:

void sendAlarm(door);
void getId (void);

void main(void)
{
20002bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
20002bfe:	b099      	sub	sp, #100	; 0x64
20002c00:	af04      	add	r7, sp, #16
	init_GPIO_Ports();
20002c02:	f7ff fecd 	bl	200029a0 <init_GPIO_Ports>
	systick_Init();
20002c06:	f7ff ffbb 	bl	20002b80 <systick_Init>
	can_init();
20002c0a:	f000 fe1b 	bl	20003844 <can_init>
	init_rng();
20002c0e:	f7ff ffe9 	bl	20002be4 <init_rng>
	while(msTicks < 2000);
20002c12:	46c0      	nop			; (mov r8, r8)
20002c14:	4bda      	ldr	r3, [pc, #872]	; (20002f80 <main+0x384>)
20002c16:	681b      	ldr	r3, [r3, #0]
20002c18:	4ada      	ldr	r2, [pc, #872]	; (20002f84 <main+0x388>)
20002c1a:	4293      	cmp	r3, r2
20002c1c:	d9fa      	bls.n	20002c14 <main+0x18>

	//door door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16, door17, door18, door19, door20, door21, door22, door23, door24 ,door25, door26, door27, door28,door29,door30,door31,door32;
	//door all_doors[32] = {door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16, door17, door18, door19, door20, door21, door22, door23, door24 ,door25, door26, door27, door28,door29,door30,door31,door32};

	volatile int amountOfActiveDoors = 0;
20002c1e:	2300      	movs	r3, #0
20002c20:	61bb      	str	r3, [r7, #24]
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20002c22:	2300      	movs	r3, #0
20002c24:	647b      	str	r3, [r7, #68]	; 0x44
20002c26:	e01b      	b.n	20002c60 <main+0x64>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20002c28:	2300      	movs	r3, #0
20002c2a:	64bb      	str	r3, [r7, #72]	; 0x48
20002c2c:	e012      	b.n	20002c54 <main+0x58>
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
20002c2e:	4bd6      	ldr	r3, [pc, #856]	; (20002f88 <main+0x38c>)
20002c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
20002c32:	0092      	lsls	r2, r2, #2
20002c34:	58d0      	ldr	r0, [r2, r3]
20002c36:	4bd5      	ldr	r3, [pc, #852]	; (20002f8c <main+0x390>)
20002c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
20002c3a:	0052      	lsls	r2, r2, #1
20002c3c:	5ad3      	ldrh	r3, [r2, r3]
20002c3e:	0019      	movs	r1, r3
20002c40:	f7fe fe21 	bl	20001886 <GPIO_ReadInputDataBit>
20002c44:	1e03      	subs	r3, r0, #0
20002c46:	d102      	bne.n	20002c4e <main+0x52>
				amountOfActiveDoors++;
20002c48:	69bb      	ldr	r3, [r7, #24]
20002c4a:	3301      	adds	r3, #1
20002c4c:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20002c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
20002c50:	3302      	adds	r3, #2
20002c52:	64bb      	str	r3, [r7, #72]	; 0x48
20002c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
20002c56:	2b0f      	cmp	r3, #15
20002c58:	d9e9      	bls.n	20002c2e <main+0x32>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20002c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
20002c5c:	3301      	adds	r3, #1
20002c5e:	647b      	str	r3, [r7, #68]	; 0x44
20002c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
20002c62:	2b03      	cmp	r3, #3
20002c64:	d9e0      	bls.n	20002c28 <main+0x2c>
			}
		}
	}
	volatile door active_doors[amountOfActiveDoors];
20002c66:	69be      	ldr	r6, [r7, #24]
20002c68:	1e73      	subs	r3, r6, #1
20002c6a:	623b      	str	r3, [r7, #32]
20002c6c:	0033      	movs	r3, r6
20002c6e:	60bb      	str	r3, [r7, #8]
20002c70:	2300      	movs	r3, #0
20002c72:	60fb      	str	r3, [r7, #12]
20002c74:	68b9      	ldr	r1, [r7, #8]
20002c76:	68fa      	ldr	r2, [r7, #12]
20002c78:	000b      	movs	r3, r1
20002c7a:	0e1b      	lsrs	r3, r3, #24
20002c7c:	0010      	movs	r0, r2
20002c7e:	0200      	lsls	r0, r0, #8
20002c80:	6178      	str	r0, [r7, #20]
20002c82:	6978      	ldr	r0, [r7, #20]
20002c84:	4318      	orrs	r0, r3
20002c86:	6178      	str	r0, [r7, #20]
20002c88:	000b      	movs	r3, r1
20002c8a:	021b      	lsls	r3, r3, #8
20002c8c:	613b      	str	r3, [r7, #16]
20002c8e:	0033      	movs	r3, r6
20002c90:	603b      	str	r3, [r7, #0]
20002c92:	2300      	movs	r3, #0
20002c94:	607b      	str	r3, [r7, #4]
20002c96:	6839      	ldr	r1, [r7, #0]
20002c98:	687a      	ldr	r2, [r7, #4]
20002c9a:	000b      	movs	r3, r1
20002c9c:	0e1b      	lsrs	r3, r3, #24
20002c9e:	0010      	movs	r0, r2
20002ca0:	0205      	lsls	r5, r0, #8
20002ca2:	431d      	orrs	r5, r3
20002ca4:	000b      	movs	r3, r1
20002ca6:	021c      	lsls	r4, r3, #8
20002ca8:	0033      	movs	r3, r6
20002caa:	015b      	lsls	r3, r3, #5
20002cac:	3303      	adds	r3, #3
20002cae:	3307      	adds	r3, #7
20002cb0:	08db      	lsrs	r3, r3, #3
20002cb2:	00db      	lsls	r3, r3, #3
20002cb4:	466a      	mov	r2, sp
20002cb6:	1ad3      	subs	r3, r2, r3
20002cb8:	469d      	mov	sp, r3
20002cba:	ab04      	add	r3, sp, #16
20002cbc:	3303      	adds	r3, #3
20002cbe:	089b      	lsrs	r3, r3, #2
20002cc0:	009b      	lsls	r3, r3, #2
20002cc2:	61fb      	str	r3, [r7, #28]
	int counter = 0;
20002cc4:	2300      	movs	r3, #0
20002cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20002cc8:	2300      	movs	r3, #0
20002cca:	643b      	str	r3, [r7, #64]	; 0x40
20002ccc:	e051      	b.n	20002d72 <main+0x176>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20002cce:	2300      	movs	r3, #0
20002cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
20002cd2:	e048      	b.n	20002d66 <main+0x16a>
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
20002cd4:	4bac      	ldr	r3, [pc, #688]	; (20002f88 <main+0x38c>)
20002cd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
20002cd8:	0092      	lsls	r2, r2, #2
20002cda:	58d0      	ldr	r0, [r2, r3]
20002cdc:	4bab      	ldr	r3, [pc, #684]	; (20002f8c <main+0x390>)
20002cde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20002ce0:	0052      	lsls	r2, r2, #1
20002ce2:	5ad3      	ldrh	r3, [r2, r3]
20002ce4:	0019      	movs	r1, r3
20002ce6:	f7fe fdce 	bl	20001886 <GPIO_ReadInputDataBit>
20002cea:	1e03      	subs	r3, r0, #0
20002cec:	d138      	bne.n	20002d60 <main+0x164>
				active_doors[counter].GPIO_read = GPIO_Pins[i];
20002cee:	4ba7      	ldr	r3, [pc, #668]	; (20002f8c <main+0x390>)
20002cf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20002cf2:	0052      	lsls	r2, r2, #1
20002cf4:	5ad3      	ldrh	r3, [r2, r3]
20002cf6:	0019      	movs	r1, r3
20002cf8:	69fa      	ldr	r2, [r7, #28]
20002cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002cfc:	015b      	lsls	r3, r3, #5
20002cfe:	18d3      	adds	r3, r2, r3
20002d00:	3314      	adds	r3, #20
20002d02:	6019      	str	r1, [r3, #0]
				active_doors[counter].GPIO_lamp = GPIO_Pins[i+1];
20002d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20002d06:	1c5a      	adds	r2, r3, #1
20002d08:	4ba0      	ldr	r3, [pc, #640]	; (20002f8c <main+0x390>)
20002d0a:	0052      	lsls	r2, r2, #1
20002d0c:	5ad3      	ldrh	r3, [r2, r3]
20002d0e:	0019      	movs	r1, r3
20002d10:	69fa      	ldr	r2, [r7, #28]
20002d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002d14:	015b      	lsls	r3, r3, #5
20002d16:	18d3      	adds	r3, r2, r3
20002d18:	3310      	adds	r3, #16
20002d1a:	6019      	str	r1, [r3, #0]
				active_doors[counter].controlbits = 0;
20002d1c:	69fa      	ldr	r2, [r7, #28]
20002d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002d20:	015b      	lsls	r3, r3, #5
20002d22:	18d3      	adds	r3, r2, r3
20002d24:	3304      	adds	r3, #4
20002d26:	2200      	movs	r2, #0
20002d28:	601a      	str	r2, [r3, #0]
				active_doors[counter].time_larm = 0;
20002d2a:	69fa      	ldr	r2, [r7, #28]
20002d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002d2e:	015b      	lsls	r3, r3, #5
20002d30:	18d3      	adds	r3, r2, r3
20002d32:	3308      	adds	r3, #8
20002d34:	2200      	movs	r2, #0
20002d36:	701a      	strb	r2, [r3, #0]
				active_doors[counter].time_central_larm = 1;
20002d38:	69fa      	ldr	r2, [r7, #28]
20002d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002d3c:	015b      	lsls	r3, r3, #5
20002d3e:	18d3      	adds	r3, r2, r3
20002d40:	3309      	adds	r3, #9
20002d42:	2201      	movs	r2, #1
20002d44:	701a      	strb	r2, [r3, #0]
				active_doors[counter].GPIO_type = GPIO_Ports[j];
20002d46:	4b90      	ldr	r3, [pc, #576]	; (20002f88 <main+0x38c>)
20002d48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
20002d4a:	0092      	lsls	r2, r2, #2
20002d4c:	58d2      	ldr	r2, [r2, r3]
20002d4e:	69f9      	ldr	r1, [r7, #28]
20002d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002d52:	015b      	lsls	r3, r3, #5
20002d54:	18cb      	adds	r3, r1, r3
20002d56:	331c      	adds	r3, #28
20002d58:	601a      	str	r2, [r3, #0]
				//active_doors[counter] = all_doors[counter];
				counter++;
20002d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002d5c:	3301      	adds	r3, #1
20002d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20002d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20002d62:	3302      	adds	r3, #2
20002d64:	63fb      	str	r3, [r7, #60]	; 0x3c
20002d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20002d68:	2b0f      	cmp	r3, #15
20002d6a:	d9b3      	bls.n	20002cd4 <main+0xd8>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20002d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20002d6e:	3301      	adds	r3, #1
20002d70:	643b      	str	r3, [r7, #64]	; 0x40
20002d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20002d74:	2b03      	cmp	r3, #3
20002d76:	d9aa      	bls.n	20002cce <main+0xd2>
			}
		}
	}
	getId();
20002d78:	f000 f98c 	bl	20003094 <getId>
	// ================================== LIGHTS =========================================================
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002d7c:	2300      	movs	r3, #0
20002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
20002d80:	e015      	b.n	20002dae <main+0x1b2>
	{
		GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20002d82:	69fa      	ldr	r2, [r7, #28]
20002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002d86:	015b      	lsls	r3, r3, #5
20002d88:	18d3      	adds	r3, r2, r3
20002d8a:	331c      	adds	r3, #28
20002d8c:	6818      	ldr	r0, [r3, #0]
20002d8e:	69fa      	ldr	r2, [r7, #28]
20002d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002d92:	015b      	lsls	r3, r3, #5
20002d94:	18d3      	adds	r3, r2, r3
20002d96:	3310      	adds	r3, #16
20002d98:	681b      	ldr	r3, [r3, #0]
20002d9a:	b29b      	uxth	r3, r3
20002d9c:	0019      	movs	r1, r3
20002d9e:	f7fe fdca 	bl	20001936 <GPIO_SetBits>
		delay(100);	
20002da2:	2064      	movs	r0, #100	; 0x64
20002da4:	f7ff ff08 	bl	20002bb8 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002daa:	3301      	adds	r3, #1
20002dac:	63bb      	str	r3, [r7, #56]	; 0x38
20002dae:	0033      	movs	r3, r6
20002db0:	015b      	lsls	r3, r3, #5
20002db2:	095a      	lsrs	r2, r3, #5
20002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002db6:	429a      	cmp	r2, r3
20002db8:	d8e3      	bhi.n	20002d82 <main+0x186>
		
	}
	for (int i = sizeof(active_doors)/sizeof(active_doors[0]); i >= 0 ; i--) //CHRISTMAST LIGHTS FTW
20002dba:	0033      	movs	r3, r6
20002dbc:	015b      	lsls	r3, r3, #5
20002dbe:	095b      	lsrs	r3, r3, #5
20002dc0:	637b      	str	r3, [r7, #52]	; 0x34
20002dc2:	e015      	b.n	20002df0 <main+0x1f4>
	{
		GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20002dc4:	69fa      	ldr	r2, [r7, #28]
20002dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002dc8:	015b      	lsls	r3, r3, #5
20002dca:	18d3      	adds	r3, r2, r3
20002dcc:	331c      	adds	r3, #28
20002dce:	6818      	ldr	r0, [r3, #0]
20002dd0:	69fa      	ldr	r2, [r7, #28]
20002dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002dd4:	015b      	lsls	r3, r3, #5
20002dd6:	18d3      	adds	r3, r2, r3
20002dd8:	3310      	adds	r3, #16
20002dda:	681b      	ldr	r3, [r3, #0]
20002ddc:	b29b      	uxth	r3, r3
20002dde:	0019      	movs	r1, r3
20002de0:	f7fe fdb8 	bl	20001954 <GPIO_ResetBits>
		delay(100);
20002de4:	2064      	movs	r0, #100	; 0x64
20002de6:	f7ff fee7 	bl	20002bb8 <delay>
	for (int i = sizeof(active_doors)/sizeof(active_doors[0]); i >= 0 ; i--) //CHRISTMAST LIGHTS FTW
20002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002dec:	3b01      	subs	r3, #1
20002dee:	637b      	str	r3, [r7, #52]	; 0x34
20002df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002df2:	2b00      	cmp	r3, #0
20002df4:	dae6      	bge.n	20002dc4 <main+0x1c8>
	}
	delay(200);
20002df6:	20c8      	movs	r0, #200	; 0xc8
20002df8:	f7ff fede 	bl	20002bb8 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002dfc:	2300      	movs	r3, #0
20002dfe:	633b      	str	r3, [r7, #48]	; 0x30
20002e00:	e012      	b.n	20002e28 <main+0x22c>
	{
		GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20002e02:	69fa      	ldr	r2, [r7, #28]
20002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002e06:	015b      	lsls	r3, r3, #5
20002e08:	18d3      	adds	r3, r2, r3
20002e0a:	331c      	adds	r3, #28
20002e0c:	6818      	ldr	r0, [r3, #0]
20002e0e:	69fa      	ldr	r2, [r7, #28]
20002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002e12:	015b      	lsls	r3, r3, #5
20002e14:	18d3      	adds	r3, r2, r3
20002e16:	3310      	adds	r3, #16
20002e18:	681b      	ldr	r3, [r3, #0]
20002e1a:	b29b      	uxth	r3, r3
20002e1c:	0019      	movs	r1, r3
20002e1e:	f7fe fd8a 	bl	20001936 <GPIO_SetBits>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002e24:	3301      	adds	r3, #1
20002e26:	633b      	str	r3, [r7, #48]	; 0x30
20002e28:	0033      	movs	r3, r6
20002e2a:	015b      	lsls	r3, r3, #5
20002e2c:	095a      	lsrs	r2, r3, #5
20002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002e30:	429a      	cmp	r2, r3
20002e32:	d8e6      	bhi.n	20002e02 <main+0x206>
	}
	delay(3000);
20002e34:	4b56      	ldr	r3, [pc, #344]	; (20002f90 <main+0x394>)
20002e36:	0018      	movs	r0, r3
20002e38:	f7ff febe 	bl	20002bb8 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002e3c:	2300      	movs	r3, #0
20002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
20002e40:	e012      	b.n	20002e68 <main+0x26c>
	{
		GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20002e42:	69fa      	ldr	r2, [r7, #28]
20002e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002e46:	015b      	lsls	r3, r3, #5
20002e48:	18d3      	adds	r3, r2, r3
20002e4a:	331c      	adds	r3, #28
20002e4c:	6818      	ldr	r0, [r3, #0]
20002e4e:	69fa      	ldr	r2, [r7, #28]
20002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002e52:	015b      	lsls	r3, r3, #5
20002e54:	18d3      	adds	r3, r2, r3
20002e56:	3310      	adds	r3, #16
20002e58:	681b      	ldr	r3, [r3, #0]
20002e5a:	b29b      	uxth	r3, r3
20002e5c:	0019      	movs	r1, r3
20002e5e:	f7fe fd79 	bl	20001954 <GPIO_ResetBits>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002e64:	3301      	adds	r3, #1
20002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
20002e68:	0033      	movs	r3, r6
20002e6a:	015b      	lsls	r3, r3, #5
20002e6c:	095a      	lsrs	r2, r3, #5
20002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002e70:	429a      	cmp	r2, r3
20002e72:	d8e6      	bhi.n	20002e42 <main+0x246>
	}
	

	GPIO_SetBits(GPIOB, GPIO_Pin_2);
20002e74:	4b47      	ldr	r3, [pc, #284]	; (20002f94 <main+0x398>)
20002e76:	2104      	movs	r1, #4
20002e78:	0018      	movs	r0, r3
20002e7a:	f7fe fd5c 	bl	20001936 <GPIO_SetBits>
	//active_doors[2].controlbits |= 4;
	while (1)
	{
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20002e7e:	2300      	movs	r3, #0
20002e80:	62bb      	str	r3, [r7, #40]	; 0x28
20002e82:	e0fa      	b.n	2000307a <main+0x47e>
		{
		
			if (!(active_doors[i].controlbits & 4))
20002e84:	69fa      	ldr	r2, [r7, #28]
20002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002e88:	015b      	lsls	r3, r3, #5
20002e8a:	18d3      	adds	r3, r2, r3
20002e8c:	3304      	adds	r3, #4
20002e8e:	681b      	ldr	r3, [r3, #0]
20002e90:	2204      	movs	r2, #4
20002e92:	4013      	ands	r3, r2
20002e94:	d000      	beq.n	20002e98 <main+0x29c>
20002e96:	e0ed      	b.n	20003074 <main+0x478>
				{
				if (!GPIO_ReadInputDataBit(active_doors[i].GPIO_type, active_doors[i].GPIO_read)){ //GPIO pinnen är noll ifall dörren är stängd därför !
20002e98:	69fa      	ldr	r2, [r7, #28]
20002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002e9c:	015b      	lsls	r3, r3, #5
20002e9e:	18d3      	adds	r3, r2, r3
20002ea0:	331c      	adds	r3, #28
20002ea2:	6818      	ldr	r0, [r3, #0]
20002ea4:	69fa      	ldr	r2, [r7, #28]
20002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002ea8:	015b      	lsls	r3, r3, #5
20002eaa:	18d3      	adds	r3, r2, r3
20002eac:	3314      	adds	r3, #20
20002eae:	681b      	ldr	r3, [r3, #0]
20002eb0:	b29b      	uxth	r3, r3
20002eb2:	0019      	movs	r1, r3
20002eb4:	f7fe fce7 	bl	20001886 <GPIO_ReadInputDataBit>
20002eb8:	1e03      	subs	r3, r0, #0
20002eba:	d10e      	bne.n	20002eda <main+0x2de>
					active_doors[i].controlbits &= 0xFFFC; //Nollställer kontrollbiten för ifall en dörr är öppen och spam kontrollbiten för 
20002ebc:	69fa      	ldr	r2, [r7, #28]
20002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002ec0:	015b      	lsls	r3, r3, #5
20002ec2:	18d3      	adds	r3, r2, r3
20002ec4:	3304      	adds	r3, #4
20002ec6:	681b      	ldr	r3, [r3, #0]
20002ec8:	4a33      	ldr	r2, [pc, #204]	; (20002f98 <main+0x39c>)
20002eca:	401a      	ands	r2, r3
20002ecc:	69f9      	ldr	r1, [r7, #28]
20002ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002ed0:	015b      	lsls	r3, r3, #5
20002ed2:	18cb      	adds	r3, r1, r3
20002ed4:	3304      	adds	r3, #4
20002ed6:	601a      	str	r2, [r3, #0]
20002ed8:	e01e      	b.n	20002f18 <main+0x31c>
					//att skicka medelande till centralenheten, när den detekteras som stängd
					
				}
				else{
					if (!active_doors[i].controlbits & 1) // Kollar så att dörren inte larmar sen innan så larmtick inte uppdateras hela tiden
20002eda:	69fa      	ldr	r2, [r7, #28]
20002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002ede:	015b      	lsls	r3, r3, #5
20002ee0:	18d3      	adds	r3, r2, r3
20002ee2:	3304      	adds	r3, #4
20002ee4:	681b      	ldr	r3, [r3, #0]
20002ee6:	2b00      	cmp	r3, #0
20002ee8:	d108      	bne.n	20002efc <main+0x300>
					{
						active_doors[i].larmTick = msTicks;
20002eea:	4b25      	ldr	r3, [pc, #148]	; (20002f80 <main+0x384>)
20002eec:	681b      	ldr	r3, [r3, #0]
20002eee:	0019      	movs	r1, r3
20002ef0:	69fa      	ldr	r2, [r7, #28]
20002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002ef4:	015b      	lsls	r3, r3, #5
20002ef6:	18d3      	adds	r3, r2, r3
20002ef8:	3318      	adds	r3, #24
20002efa:	6019      	str	r1, [r3, #0]
					}
					active_doors[i].controlbits |= 1; // sätter dörrens larm kontrollbit till 1.
20002efc:	69fa      	ldr	r2, [r7, #28]
20002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002f00:	015b      	lsls	r3, r3, #5
20002f02:	18d3      	adds	r3, r2, r3
20002f04:	3304      	adds	r3, #4
20002f06:	681b      	ldr	r3, [r3, #0]
20002f08:	2201      	movs	r2, #1
20002f0a:	431a      	orrs	r2, r3
20002f0c:	69f9      	ldr	r1, [r7, #28]
20002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002f10:	015b      	lsls	r3, r3, #5
20002f12:	18cb      	adds	r3, r1, r3
20002f14:	3304      	adds	r3, #4
20002f16:	601a      	str	r2, [r3, #0]
				}
				for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20002f18:	2300      	movs	r3, #0
20002f1a:	627b      	str	r3, [r7, #36]	; 0x24
20002f1c:	e0a3      	b.n	20003066 <main+0x46a>
				{
					if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_larm))
20002f1e:	69fa      	ldr	r2, [r7, #28]
20002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002f22:	015b      	lsls	r3, r3, #5
20002f24:	18d3      	adds	r3, r2, r3
20002f26:	3304      	adds	r3, #4
20002f28:	681b      	ldr	r3, [r3, #0]
20002f2a:	2201      	movs	r2, #1
20002f2c:	4013      	ands	r3, r2
20002f2e:	d037      	beq.n	20002fa0 <main+0x3a4>
20002f30:	69fa      	ldr	r2, [r7, #28]
20002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002f34:	015b      	lsls	r3, r3, #5
20002f36:	18d3      	adds	r3, r2, r3
20002f38:	3318      	adds	r3, #24
20002f3a:	681a      	ldr	r2, [r3, #0]
20002f3c:	69f9      	ldr	r1, [r7, #28]
20002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002f40:	015b      	lsls	r3, r3, #5
20002f42:	18cb      	adds	r3, r1, r3
20002f44:	3308      	adds	r3, #8
20002f46:	781b      	ldrb	r3, [r3, #0]
20002f48:	b2db      	uxtb	r3, r3
20002f4a:	0019      	movs	r1, r3
20002f4c:	4b13      	ldr	r3, [pc, #76]	; (20002f9c <main+0x3a0>)
20002f4e:	434b      	muls	r3, r1
20002f50:	18d3      	adds	r3, r2, r3
20002f52:	001a      	movs	r2, r3
20002f54:	4b0a      	ldr	r3, [pc, #40]	; (20002f80 <main+0x384>)
20002f56:	681b      	ldr	r3, [r3, #0]
20002f58:	429a      	cmp	r2, r3
20002f5a:	d221      	bcs.n	20002fa0 <main+0x3a4>
					{
						GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp); // tänder lampan ifall tiden för att dörren ska larma har gått
20002f5c:	69fa      	ldr	r2, [r7, #28]
20002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002f60:	015b      	lsls	r3, r3, #5
20002f62:	18d3      	adds	r3, r2, r3
20002f64:	331c      	adds	r3, #28
20002f66:	6818      	ldr	r0, [r3, #0]
20002f68:	69fa      	ldr	r2, [r7, #28]
20002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002f6c:	015b      	lsls	r3, r3, #5
20002f6e:	18d3      	adds	r3, r2, r3
20002f70:	3310      	adds	r3, #16
20002f72:	681b      	ldr	r3, [r3, #0]
20002f74:	b29b      	uxth	r3, r3
20002f76:	0019      	movs	r1, r3
20002f78:	f7fe fcdd 	bl	20001936 <GPIO_SetBits>
20002f7c:	e020      	b.n	20002fc0 <main+0x3c4>
20002f7e:	46c0      	nop			; (mov r8, r8)
20002f80:	20003b84 	andcs	r3, r0, r4, lsl #23
20002f84:	000007cf 	andeq	r0, r0, pc, asr #15
20002f88:	20003ca0 	andcs	r3, r0, r0, lsr #25
20002f8c:	20003c80 	andcs	r3, r0, r0, lsl #25
20002f90:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
20002f94:	40020400 	andmi	r0, r2, r0, lsl #8
20002f98:	0000fffc 	strdeq	pc, [r0], -ip
20002f9c:	00002710 	andeq	r2, r0, r0, lsl r7
					}
					else
					{
						GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);	// släcker lampan annars
20002fa0:	69fa      	ldr	r2, [r7, #28]
20002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002fa4:	015b      	lsls	r3, r3, #5
20002fa6:	18d3      	adds	r3, r2, r3
20002fa8:	331c      	adds	r3, #28
20002faa:	6818      	ldr	r0, [r3, #0]
20002fac:	69fa      	ldr	r2, [r7, #28]
20002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002fb0:	015b      	lsls	r3, r3, #5
20002fb2:	18d3      	adds	r3, r2, r3
20002fb4:	3310      	adds	r3, #16
20002fb6:	681b      	ldr	r3, [r3, #0]
20002fb8:	b29b      	uxth	r3, r3
20002fba:	0019      	movs	r1, r3
20002fbc:	f7fe fcca 	bl	20001954 <GPIO_ResetBits>
					}
					if ((active_doors[i].controlbits & 1 )&& msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_central_larm) && !(active_doors[i].controlbits & 2))
20002fc0:	69fa      	ldr	r2, [r7, #28]
20002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002fc4:	015b      	lsls	r3, r3, #5
20002fc6:	18d3      	adds	r3, r2, r3
20002fc8:	3304      	adds	r3, #4
20002fca:	681b      	ldr	r3, [r3, #0]
20002fcc:	2201      	movs	r2, #1
20002fce:	4013      	ands	r3, r2
20002fd0:	d046      	beq.n	20003060 <main+0x464>
20002fd2:	69fa      	ldr	r2, [r7, #28]
20002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002fd6:	015b      	lsls	r3, r3, #5
20002fd8:	18d3      	adds	r3, r2, r3
20002fda:	3318      	adds	r3, #24
20002fdc:	681a      	ldr	r2, [r3, #0]
20002fde:	69f9      	ldr	r1, [r7, #28]
20002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002fe2:	015b      	lsls	r3, r3, #5
20002fe4:	18cb      	adds	r3, r1, r3
20002fe6:	3309      	adds	r3, #9
20002fe8:	781b      	ldrb	r3, [r3, #0]
20002fea:	b2db      	uxtb	r3, r3
20002fec:	0019      	movs	r1, r3
20002fee:	4b27      	ldr	r3, [pc, #156]	; (2000308c <main+0x490>)
20002ff0:	434b      	muls	r3, r1
20002ff2:	18d3      	adds	r3, r2, r3
20002ff4:	001a      	movs	r2, r3
20002ff6:	4b26      	ldr	r3, [pc, #152]	; (20003090 <main+0x494>)
20002ff8:	681b      	ldr	r3, [r3, #0]
20002ffa:	429a      	cmp	r2, r3
20002ffc:	d230      	bcs.n	20003060 <main+0x464>
20002ffe:	69fa      	ldr	r2, [r7, #28]
20003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003002:	015b      	lsls	r3, r3, #5
20003004:	18d3      	adds	r3, r2, r3
20003006:	3304      	adds	r3, #4
20003008:	681b      	ldr	r3, [r3, #0]
2000300a:	2202      	movs	r2, #2
2000300c:	4013      	ands	r3, r2
2000300e:	d127      	bne.n	20003060 <main+0x464>
					{
						active_doors[i].controlbits |= 2;
20003010:	69fa      	ldr	r2, [r7, #28]
20003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003014:	015b      	lsls	r3, r3, #5
20003016:	18d3      	adds	r3, r2, r3
20003018:	3304      	adds	r3, #4
2000301a:	681b      	ldr	r3, [r3, #0]
2000301c:	2202      	movs	r2, #2
2000301e:	431a      	orrs	r2, r3
20003020:	69f9      	ldr	r1, [r7, #28]
20003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003024:	015b      	lsls	r3, r3, #5
20003026:	18cb      	adds	r3, r1, r3
20003028:	3304      	adds	r3, #4
2000302a:	601a      	str	r2, [r3, #0]
						sendAlarm(active_doors[i]);
2000302c:	69fc      	ldr	r4, [r7, #28]
2000302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003030:	015b      	lsls	r3, r3, #5
20003032:	469c      	mov	ip, r3
20003034:	2110      	movs	r1, #16
20003036:	4663      	mov	r3, ip
20003038:	18e2      	adds	r2, r4, r3
2000303a:	1851      	adds	r1, r2, r1
2000303c:	466a      	mov	r2, sp
2000303e:	c929      	ldmia	r1!, {r0, r3, r5}
20003040:	c229      	stmia	r2!, {r0, r3, r5}
20003042:	6809      	ldr	r1, [r1, #0]
20003044:	6011      	str	r1, [r2, #0]
20003046:	4663      	mov	r3, ip
20003048:	5918      	ldr	r0, [r3, r4]
2000304a:	4663      	mov	r3, ip
2000304c:	18e2      	adds	r2, r4, r3
2000304e:	6851      	ldr	r1, [r2, #4]
20003050:	4663      	mov	r3, ip
20003052:	18e2      	adds	r2, r4, r3
20003054:	6892      	ldr	r2, [r2, #8]
20003056:	0023      	movs	r3, r4
20003058:	4463      	add	r3, ip
2000305a:	68db      	ldr	r3, [r3, #12]
2000305c:	f000 f846 	bl	200030ec <sendAlarm>
				for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003062:	3301      	adds	r3, #1
20003064:	627b      	str	r3, [r7, #36]	; 0x24
20003066:	0033      	movs	r3, r6
20003068:	015b      	lsls	r3, r3, #5
2000306a:	095a      	lsrs	r2, r3, #5
2000306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000306e:	429a      	cmp	r2, r3
20003070:	d900      	bls.n	20003074 <main+0x478>
20003072:	e754      	b.n	20002f1e <main+0x322>
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003076:	3301      	adds	r3, #1
20003078:	62bb      	str	r3, [r7, #40]	; 0x28
2000307a:	0033      	movs	r3, r6
2000307c:	015b      	lsls	r3, r3, #5
2000307e:	095a      	lsrs	r2, r3, #5
20003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003082:	429a      	cmp	r2, r3
20003084:	d900      	bls.n	20003088 <main+0x48c>
20003086:	e6fd      	b.n	20002e84 <main+0x288>
20003088:	e6f9      	b.n	20002e7e <main+0x282>
2000308a:	46c0      	nop			; (mov r8, r8)
2000308c:	00002710 	andeq	r2, r0, r0, lsl r7
20003090:	20003b84 	andcs	r3, r0, r4, lsl #23

20003094 <getId>:
			}
		}
	}
	}

	void getId (void){
20003094:	b580      	push	{r7, lr}
20003096:	b082      	sub	sp, #8
20003098:	af00      	add	r7, sp, #0
		int timeStamp = msTicks + 60 * 1000; 
2000309a:	4b12      	ldr	r3, [pc, #72]	; (200030e4 <getId+0x50>)
2000309c:	681b      	ldr	r3, [r3, #0]
2000309e:	4a12      	ldr	r2, [pc, #72]	; (200030e8 <getId+0x54>)
200030a0:	4694      	mov	ip, r2
200030a2:	4463      	add	r3, ip
200030a4:	607b      	str	r3, [r7, #4]
		if (RNG_GetFlagStatus(RNG_FLAG_DRDY) == SET && //Nytt meddelande finns
200030a6:	2001      	movs	r0, #1
200030a8:	f7fe fd46 	bl	20001b38 <RNG_GetFlagStatus>
200030ac:	0003      	movs	r3, r0
200030ae:	2b01      	cmp	r3, #1
200030b0:	d113      	bne.n	200030da <getId+0x46>
             RNG_GetFlagStatus(RNG_FLAG_CECS) == RESET && //Inget klockfel
200030b2:	2002      	movs	r0, #2
200030b4:	f7fe fd40 	bl	20001b38 <RNG_GetFlagStatus>
200030b8:	1e03      	subs	r3, r0, #0
		if (RNG_GetFlagStatus(RNG_FLAG_DRDY) == SET && //Nytt meddelande finns
200030ba:	d10e      	bne.n	200030da <getId+0x46>
             RNG_GetFlagStatus(RNG_FLAG_SECS) == RESET){ //Inget seedfel
200030bc:	2004      	movs	r0, #4
200030be:	f7fe fd3b 	bl	20001b38 <RNG_GetFlagStatus>
200030c2:	1e03      	subs	r3, r0, #0
             RNG_GetFlagStatus(RNG_FLAG_CECS) == RESET && //Inget klockfel
200030c4:	d109      	bne.n	200030da <getId+0x46>
                    uint32_t rand = RNG_GetRandomNumber();
200030c6:	f7fe fd0f 	bl	20001ae8 <RNG_GetRandomNumber>
200030ca:	0003      	movs	r3, r0
200030cc:	603b      	str	r3, [r7, #0]
			 
					while (msTicks < timeStamp)
200030ce:	46c0      	nop			; (mov r8, r8)
200030d0:	4b04      	ldr	r3, [pc, #16]	; (200030e4 <getId+0x50>)
200030d2:	681a      	ldr	r2, [r3, #0]
200030d4:	687b      	ldr	r3, [r7, #4]
200030d6:	429a      	cmp	r2, r3
200030d8:	d3fa      	bcc.n	200030d0 <getId+0x3c>
					{
						
					}
			 }
	}
200030da:	46c0      	nop			; (mov r8, r8)
200030dc:	46bd      	mov	sp, r7
200030de:	b002      	add	sp, #8
200030e0:	bd80      	pop	{r7, pc}
200030e2:	46c0      	nop			; (mov r8, r8)
200030e4:	20003b84 	andcs	r3, r0, r4, lsl #23
200030e8:	0000ea60 	andeq	lr, r0, r0, ror #20

200030ec <sendAlarm>:

	void sendAlarm (door alarming_door){
200030ec:	b084      	sub	sp, #16
200030ee:	b590      	push	{r4, r7, lr}
200030f0:	b087      	sub	sp, #28
200030f2:	af00      	add	r7, sp, #0
200030f4:	2428      	movs	r4, #40	; 0x28
200030f6:	193c      	adds	r4, r7, r4
200030f8:	6020      	str	r0, [r4, #0]
200030fa:	6061      	str	r1, [r4, #4]
200030fc:	60a2      	str	r2, [r4, #8]
200030fe:	60e3      	str	r3, [r4, #12]
		CanTxMsg testMsg = {
20003100:	1d3b      	adds	r3, r7, #4
20003102:	0018      	movs	r0, r3
20003104:	2314      	movs	r3, #20
20003106:	001a      	movs	r2, r3
20003108:	2100      	movs	r1, #0
2000310a:	f000 fd33 	bl	20003b74 <memset>
2000310e:	1d3b      	adds	r3, r7, #4
20003110:	2204      	movs	r2, #4
20003112:	605a      	str	r2, [r3, #4]
20003114:	1d3b      	adds	r3, r7, #4
20003116:	2204      	movs	r2, #4
20003118:	721a      	strb	r2, [r3, #8]
2000311a:	1d3b      	adds	r3, r7, #4
2000311c:	2204      	movs	r2, #4
2000311e:	729a      	strb	r2, [r3, #10]
20003120:	1d3b      	adds	r3, r7, #4
20003122:	220a      	movs	r2, #10
20003124:	72da      	strb	r2, [r3, #11]
20003126:	1d3b      	adds	r3, r7, #4
20003128:	220b      	movs	r2, #11
2000312a:	731a      	strb	r2, [r3, #12]
2000312c:	1d3b      	adds	r3, r7, #4
2000312e:	220c      	movs	r2, #12
20003130:	735a      	strb	r2, [r3, #13]
20003132:	1d3b      	adds	r3, r7, #4
20003134:	2201      	movs	r2, #1
20003136:	739a      	strb	r2, [r3, #14]
							0, 0x4, CAN_Id_Extended, CAN_RTR_DATA, 4, {0xa,0xb,0xc,1} 
						};
						CANsendMessage(&testMsg);
20003138:	1d3b      	adds	r3, r7, #4
2000313a:	0018      	movs	r0, r3
2000313c:	f000 fa11 	bl	20003562 <CANsendMessage>
20003140:	46c0      	nop			; (mov r8, r8)
20003142:	46bd      	mov	sp, r7
20003144:	b007      	add	sp, #28
20003146:	bc90      	pop	{r4, r7}
20003148:	bc08      	pop	{r3}
2000314a:	b004      	add	sp, #16
2000314c:	4718      	bx	r3
2000314e:	46c0      	nop			; (mov r8, r8)

20003150 <bufferInit>:
#include "buffer.h"

//Nollställer bufferten
void bufferInit(FIFO *buffer) {
20003150:	b580      	push	{r7, lr}
20003152:	b082      	sub	sp, #8
20003154:	af00      	add	r7, sp, #0
20003156:	6078      	str	r0, [r7, #4]
    buffer->count = 0;
20003158:	687b      	ldr	r3, [r7, #4]
2000315a:	2264      	movs	r2, #100	; 0x64
2000315c:	2100      	movs	r1, #0
2000315e:	5499      	strb	r1, [r3, r2]
    buffer->in = 0;
20003160:	687b      	ldr	r3, [r7, #4]
20003162:	2265      	movs	r2, #101	; 0x65
20003164:	2100      	movs	r1, #0
20003166:	5499      	strb	r1, [r3, r2]
    buffer->out = 0;
20003168:	687b      	ldr	r3, [r7, #4]
2000316a:	2266      	movs	r2, #102	; 0x66
2000316c:	2100      	movs	r1, #0
2000316e:	5499      	strb	r1, [r3, r2]
}
20003170:	46c0      	nop			; (mov r8, r8)
20003172:	46bd      	mov	sp, r7
20003174:	b002      	add	sp, #8
20003176:	bd80      	pop	{r7, pc}

20003178 <bufferPut>:

//Lägger till ett elem i buffern.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferPut ( FIFO *buffer, uint8_t elem) {
20003178:	b580      	push	{r7, lr}
2000317a:	b082      	sub	sp, #8
2000317c:	af00      	add	r7, sp, #0
2000317e:	6078      	str	r0, [r7, #4]
20003180:	000a      	movs	r2, r1
20003182:	1cfb      	adds	r3, r7, #3
20003184:	701a      	strb	r2, [r3, #0]
    //Kollar om bufferten är full.
    if (buffer->count == BUFFERSIZE){
20003186:	687b      	ldr	r3, [r7, #4]
20003188:	2264      	movs	r2, #100	; 0x64
2000318a:	5c9b      	ldrb	r3, [r3, r2]
2000318c:	2b64      	cmp	r3, #100	; 0x64
2000318e:	d101      	bne.n	20003194 <bufferPut+0x1c>
        return 0;
20003190:	2300      	movs	r3, #0
20003192:	e01e      	b.n	200031d2 <bufferPut+0x5a>
    }

    //Lägger elem i bufferten
    buffer->buff[buffer->in++] = elem;
20003194:	687b      	ldr	r3, [r7, #4]
20003196:	2265      	movs	r2, #101	; 0x65
20003198:	5c9b      	ldrb	r3, [r3, r2]
2000319a:	1c5a      	adds	r2, r3, #1
2000319c:	b2d0      	uxtb	r0, r2
2000319e:	687a      	ldr	r2, [r7, #4]
200031a0:	2165      	movs	r1, #101	; 0x65
200031a2:	5450      	strb	r0, [r2, r1]
200031a4:	0019      	movs	r1, r3
200031a6:	687b      	ldr	r3, [r7, #4]
200031a8:	1cfa      	adds	r2, r7, #3
200031aa:	7812      	ldrb	r2, [r2, #0]
200031ac:	545a      	strb	r2, [r3, r1]
    buffer->count++;
200031ae:	687b      	ldr	r3, [r7, #4]
200031b0:	2264      	movs	r2, #100	; 0x64
200031b2:	5c9b      	ldrb	r3, [r3, r2]
200031b4:	3301      	adds	r3, #1
200031b6:	b2d9      	uxtb	r1, r3
200031b8:	687b      	ldr	r3, [r7, #4]
200031ba:	2264      	movs	r2, #100	; 0x64
200031bc:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->in == BUFFERSIZE)
200031be:	687b      	ldr	r3, [r7, #4]
200031c0:	2265      	movs	r2, #101	; 0x65
200031c2:	5c9b      	ldrb	r3, [r3, r2]
200031c4:	2b64      	cmp	r3, #100	; 0x64
200031c6:	d103      	bne.n	200031d0 <bufferPut+0x58>
        buffer->in = 0;
200031c8:	687b      	ldr	r3, [r7, #4]
200031ca:	2265      	movs	r2, #101	; 0x65
200031cc:	2100      	movs	r1, #0
200031ce:	5499      	strb	r1, [r3, r2]

    return 1;
200031d0:	2301      	movs	r3, #1
}
200031d2:	0018      	movs	r0, r3
200031d4:	46bd      	mov	sp, r7
200031d6:	b002      	add	sp, #8
200031d8:	bd80      	pop	{r7, pc}

200031da <bufferOverrideLast>:

//Skriver över föregående elem i buffern.
//Ändrar inga indexeringsvariabler
void bufferOverrideLast ( FIFO *buffer, uint8_t elem) {
200031da:	b580      	push	{r7, lr}
200031dc:	b084      	sub	sp, #16
200031de:	af00      	add	r7, sp, #0
200031e0:	6078      	str	r0, [r7, #4]
200031e2:	000a      	movs	r2, r1
200031e4:	1cfb      	adds	r3, r7, #3
200031e6:	701a      	strb	r2, [r3, #0]
    //Index för föregående element i buffern
    uint8_t prevIndex;

    //Om index för nästa element är 0 så blir föregående BUFFERSIZE - 1
    //annars buffer->in - 1
    prevIndex =  (buffer->in == 0) ? BUFFERSIZE - 1 : buffer->in - 1;
200031e8:	687b      	ldr	r3, [r7, #4]
200031ea:	2265      	movs	r2, #101	; 0x65
200031ec:	5c9b      	ldrb	r3, [r3, r2]
200031ee:	2b00      	cmp	r3, #0
200031f0:	d005      	beq.n	200031fe <bufferOverrideLast+0x24>
200031f2:	687b      	ldr	r3, [r7, #4]
200031f4:	2265      	movs	r2, #101	; 0x65
200031f6:	5c9b      	ldrb	r3, [r3, r2]
200031f8:	3b01      	subs	r3, #1
200031fa:	b2da      	uxtb	r2, r3
200031fc:	e000      	b.n	20003200 <bufferOverrideLast+0x26>
200031fe:	2263      	movs	r2, #99	; 0x63
20003200:	210f      	movs	r1, #15
20003202:	187b      	adds	r3, r7, r1
20003204:	701a      	strb	r2, [r3, #0]

    //Skriver över elem i bufferten
    buffer->buff[prevIndex] = elem;
20003206:	187b      	adds	r3, r7, r1
20003208:	781b      	ldrb	r3, [r3, #0]
2000320a:	687a      	ldr	r2, [r7, #4]
2000320c:	1cf9      	adds	r1, r7, #3
2000320e:	7809      	ldrb	r1, [r1, #0]
20003210:	54d1      	strb	r1, [r2, r3]
}
20003212:	46c0      	nop			; (mov r8, r8)
20003214:	46bd      	mov	sp, r7
20003216:	b004      	add	sp, #16
20003218:	bd80      	pop	{r7, pc}

2000321a <bufferGet>:

//Hämtar ett element från buffern till dest.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferGet ( FIFO *buffer, uint8_t *dest) {
2000321a:	b580      	push	{r7, lr}
2000321c:	b082      	sub	sp, #8
2000321e:	af00      	add	r7, sp, #0
20003220:	6078      	str	r0, [r7, #4]
20003222:	6039      	str	r1, [r7, #0]
    //Kollar om bufferten är tom
    if (!buffer->count){
20003224:	687b      	ldr	r3, [r7, #4]
20003226:	2264      	movs	r2, #100	; 0x64
20003228:	5c9b      	ldrb	r3, [r3, r2]
2000322a:	2b00      	cmp	r3, #0
2000322c:	d101      	bne.n	20003232 <bufferGet+0x18>
        return 0;
2000322e:	2300      	movs	r3, #0
20003230:	e01e      	b.n	20003270 <bufferGet+0x56>
    }

    //Hämtar element ur buffern till dest
    *dest = buffer->buff[buffer->out++];
20003232:	687b      	ldr	r3, [r7, #4]
20003234:	2266      	movs	r2, #102	; 0x66
20003236:	5c9b      	ldrb	r3, [r3, r2]
20003238:	1c5a      	adds	r2, r3, #1
2000323a:	b2d0      	uxtb	r0, r2
2000323c:	687a      	ldr	r2, [r7, #4]
2000323e:	2166      	movs	r1, #102	; 0x66
20003240:	5450      	strb	r0, [r2, r1]
20003242:	001a      	movs	r2, r3
20003244:	687b      	ldr	r3, [r7, #4]
20003246:	5c9a      	ldrb	r2, [r3, r2]
20003248:	683b      	ldr	r3, [r7, #0]
2000324a:	701a      	strb	r2, [r3, #0]
    buffer->count--;
2000324c:	687b      	ldr	r3, [r7, #4]
2000324e:	2264      	movs	r2, #100	; 0x64
20003250:	5c9b      	ldrb	r3, [r3, r2]
20003252:	3b01      	subs	r3, #1
20003254:	b2d9      	uxtb	r1, r3
20003256:	687b      	ldr	r3, [r7, #4]
20003258:	2264      	movs	r2, #100	; 0x64
2000325a:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->out == BUFFERSIZE)
2000325c:	687b      	ldr	r3, [r7, #4]
2000325e:	2266      	movs	r2, #102	; 0x66
20003260:	5c9b      	ldrb	r3, [r3, r2]
20003262:	2b64      	cmp	r3, #100	; 0x64
20003264:	d103      	bne.n	2000326e <bufferGet+0x54>
        buffer->out = 0;
20003266:	687b      	ldr	r3, [r7, #4]
20003268:	2266      	movs	r2, #102	; 0x66
2000326a:	2100      	movs	r1, #0
2000326c:	5499      	strb	r1, [r3, r2]

    return 1;
2000326e:	2301      	movs	r3, #1
20003270:	0018      	movs	r0, r3
20003272:	46bd      	mov	sp, r7
20003274:	b002      	add	sp, #8
20003276:	bd80      	pop	{r7, pc}

20003278 <NVIC_SetPriority>:
{
20003278:	b580      	push	{r7, lr}
2000327a:	b082      	sub	sp, #8
2000327c:	af00      	add	r7, sp, #0
2000327e:	0002      	movs	r2, r0
20003280:	6039      	str	r1, [r7, #0]
20003282:	1dfb      	adds	r3, r7, #7
20003284:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
20003286:	1dfb      	adds	r3, r7, #7
20003288:	781b      	ldrb	r3, [r3, #0]
2000328a:	2b7f      	cmp	r3, #127	; 0x7f
2000328c:	d90d      	bls.n	200032aa <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000328e:	683b      	ldr	r3, [r7, #0]
20003290:	b2da      	uxtb	r2, r3
20003292:	490f      	ldr	r1, [pc, #60]	; (200032d0 <NVIC_SetPriority+0x58>)
20003294:	1dfb      	adds	r3, r7, #7
20003296:	781b      	ldrb	r3, [r3, #0]
20003298:	0018      	movs	r0, r3
2000329a:	230f      	movs	r3, #15
2000329c:	4003      	ands	r3, r0
2000329e:	3b04      	subs	r3, #4
200032a0:	0112      	lsls	r2, r2, #4
200032a2:	b2d2      	uxtb	r2, r2
200032a4:	18cb      	adds	r3, r1, r3
200032a6:	761a      	strb	r2, [r3, #24]
}
200032a8:	e00d      	b.n	200032c6 <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200032aa:	683b      	ldr	r3, [r7, #0]
200032ac:	b2db      	uxtb	r3, r3
200032ae:	4909      	ldr	r1, [pc, #36]	; (200032d4 <NVIC_SetPriority+0x5c>)
200032b0:	1dfa      	adds	r2, r7, #7
200032b2:	7812      	ldrb	r2, [r2, #0]
200032b4:	b252      	sxtb	r2, r2
200032b6:	011b      	lsls	r3, r3, #4
200032b8:	b2d8      	uxtb	r0, r3
200032ba:	23c0      	movs	r3, #192	; 0xc0
200032bc:	009b      	lsls	r3, r3, #2
200032be:	188a      	adds	r2, r1, r2
200032c0:	18d3      	adds	r3, r2, r3
200032c2:	1c02      	adds	r2, r0, #0
200032c4:	701a      	strb	r2, [r3, #0]
}
200032c6:	46c0      	nop			; (mov r8, r8)
200032c8:	46bd      	mov	sp, r7
200032ca:	b002      	add	sp, #8
200032cc:	bd80      	pop	{r7, pc}
200032ce:	46c0      	nop			; (mov r8, r8)
200032d0:	e000ed00 	and	lr, r0, r0, lsl #26
200032d4:	e000e100 	and	lr, r0, r0, lsl #2

200032d8 <CANhandlerListNotFull>:
uint8_t SessionIDActive;
uint32_t SessionID;

//Kollar om det finns plats i handlerList
//Returnerar 1 om det finns plats, 0 annars
uint8_t CANhandlerListNotFull(void){
200032d8:	b580      	push	{r7, lr}
200032da:	b082      	sub	sp, #8
200032dc:	af00      	add	r7, sp, #0
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200032de:	1dfb      	adds	r3, r7, #7
200032e0:	2200      	movs	r2, #0
200032e2:	701a      	strb	r2, [r3, #0]
200032e4:	e00f      	b.n	20003306 <CANhandlerListNotFull+0x2e>
            if (handlerList[index].state == DISABLE){
200032e6:	1dfb      	adds	r3, r7, #7
200032e8:	781b      	ldrb	r3, [r3, #0]
200032ea:	4a0b      	ldr	r2, [pc, #44]	; (20003318 <CANhandlerListNotFull+0x40>)
200032ec:	011b      	lsls	r3, r3, #4
200032ee:	18d3      	adds	r3, r2, r3
200032f0:	330c      	adds	r3, #12
200032f2:	781b      	ldrb	r3, [r3, #0]
200032f4:	2b00      	cmp	r3, #0
200032f6:	d101      	bne.n	200032fc <CANhandlerListNotFull+0x24>
                return 1;
200032f8:	2301      	movs	r3, #1
200032fa:	e009      	b.n	20003310 <CANhandlerListNotFull+0x38>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200032fc:	1dfb      	adds	r3, r7, #7
200032fe:	781a      	ldrb	r2, [r3, #0]
20003300:	1dfb      	adds	r3, r7, #7
20003302:	3201      	adds	r2, #1
20003304:	701a      	strb	r2, [r3, #0]
20003306:	1dfb      	adds	r3, r7, #7
20003308:	781b      	ldrb	r3, [r3, #0]
2000330a:	2b0d      	cmp	r3, #13
2000330c:	d9eb      	bls.n	200032e6 <CANhandlerListNotFull+0xe>
            }
    }
    return 0;
2000330e:	2300      	movs	r3, #0
}
20003310:	0018      	movs	r0, r3
20003312:	46bd      	mov	sp, r7
20003314:	b002      	add	sp, #8
20003316:	bd80      	pop	{r7, pc}
20003318:	20003b8c 	andcs	r3, r0, ip, lsl #23

2000331c <CANactivateFilterHandler>:

//Ativerar ett filtet med index från handlerList
void CANactivateFilterHandler (uint8_t index){
2000331c:	b580      	push	{r7, lr}
2000331e:	b088      	sub	sp, #32
20003320:	af00      	add	r7, sp, #0
20003322:	0002      	movs	r2, r0
20003324:	1dfb      	adds	r3, r7, #7
20003326:	701a      	strb	r2, [r3, #0]
            handlerList[index].state = ENABLE;
20003328:	1dfb      	adds	r3, r7, #7
2000332a:	781b      	ldrb	r3, [r3, #0]
2000332c:	4a20      	ldr	r2, [pc, #128]	; (200033b0 <CANactivateFilterHandler+0x94>)
2000332e:	011b      	lsls	r3, r3, #4
20003330:	18d3      	adds	r3, r2, r3
20003332:	330c      	adds	r3, #12
20003334:	2201      	movs	r2, #1
20003336:	701a      	strb	r2, [r3, #0]

            //Union för omvandling mellan CANFilter och uint16_t
            filterUnion unionFilter, unionMask;
            unionFilter.filter = handlerList[index].filter;
20003338:	1dfb      	adds	r3, r7, #7
2000333a:	781b      	ldrb	r3, [r3, #0]
2000333c:	4a1c      	ldr	r2, [pc, #112]	; (200033b0 <CANactivateFilterHandler+0x94>)
2000333e:	011b      	lsls	r3, r3, #4
20003340:	18d3      	adds	r3, r2, r3
20003342:	3304      	adds	r3, #4
20003344:	681b      	ldr	r3, [r3, #0]
20003346:	61fb      	str	r3, [r7, #28]
            unionMask.filter = handlerList[index].mask;
20003348:	1dfb      	adds	r3, r7, #7
2000334a:	781b      	ldrb	r3, [r3, #0]
2000334c:	4a18      	ldr	r2, [pc, #96]	; (200033b0 <CANactivateFilterHandler+0x94>)
2000334e:	011b      	lsls	r3, r3, #4
20003350:	18d3      	adds	r3, r2, r3
20003352:	3308      	adds	r3, #8
20003354:	681b      	ldr	r3, [r3, #0]
20003356:	61bb      	str	r3, [r7, #24]

            /* CAN filter init */
            CAN_FilterInitTypeDef CAN_FilterInitStructure;
            CAN_FilterInitStructure.CAN_FilterNumber = index;
20003358:	2108      	movs	r1, #8
2000335a:	187b      	adds	r3, r7, r1
2000335c:	1dfa      	adds	r2, r7, #7
2000335e:	7812      	ldrb	r2, [r2, #0]
20003360:	729a      	strb	r2, [r3, #10]
            CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
20003362:	187b      	adds	r3, r7, r1
20003364:	2200      	movs	r2, #0
20003366:	72da      	strb	r2, [r3, #11]
            CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
20003368:	187b      	adds	r3, r7, r1
2000336a:	2201      	movs	r2, #1
2000336c:	731a      	strb	r2, [r3, #12]
            CAN_FilterInitStructure.CAN_FilterIdHigh = unionFilter.u16bits[1];
2000336e:	201c      	movs	r0, #28
20003370:	183b      	adds	r3, r7, r0
20003372:	885a      	ldrh	r2, [r3, #2]
20003374:	187b      	adds	r3, r7, r1
20003376:	801a      	strh	r2, [r3, #0]
            CAN_FilterInitStructure.CAN_FilterIdLow = unionFilter.u16bits[0];
20003378:	183b      	adds	r3, r7, r0
2000337a:	881a      	ldrh	r2, [r3, #0]
2000337c:	187b      	adds	r3, r7, r1
2000337e:	805a      	strh	r2, [r3, #2]
            CAN_FilterInitStructure.CAN_FilterMaskIdHigh = unionMask.u16bits[1];
20003380:	2018      	movs	r0, #24
20003382:	183b      	adds	r3, r7, r0
20003384:	885a      	ldrh	r2, [r3, #2]
20003386:	187b      	adds	r3, r7, r1
20003388:	809a      	strh	r2, [r3, #4]
            CAN_FilterInitStructure.CAN_FilterMaskIdLow = unionMask.u16bits[0];
2000338a:	183b      	adds	r3, r7, r0
2000338c:	881a      	ldrh	r2, [r3, #0]
2000338e:	187b      	adds	r3, r7, r1
20003390:	80da      	strh	r2, [r3, #6]
            CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
20003392:	187b      	adds	r3, r7, r1
20003394:	2200      	movs	r2, #0
20003396:	811a      	strh	r2, [r3, #8]
            CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
20003398:	187b      	adds	r3, r7, r1
2000339a:	2201      	movs	r2, #1
2000339c:	735a      	strb	r2, [r3, #13]
            CAN_FilterInit(&CAN_FilterInitStructure);
2000339e:	187b      	adds	r3, r7, r1
200033a0:	0018      	movs	r0, r3
200033a2:	f7fc ff3f 	bl	20000224 <CAN_FilterInit>
}
200033a6:	46c0      	nop			; (mov r8, r8)
200033a8:	46bd      	mov	sp, r7
200033aa:	b008      	add	sp, #32
200033ac:	bd80      	pop	{r7, pc}
200033ae:	46c0      	nop			; (mov r8, r8)
200033b0:	20003b8c 	andcs	r3, r0, ip, lsl #23

200033b4 <CANaddFilterHandler>:

//Lägger till ett filter, returnerar index för filtret i handlerList
//Om session ID är aktiverat läggs det automatiskt till i filtret
//Kolla att det finns plats i handlerList innan med handlerListNotFull()
uint8_t CANaddFilterHandler(void (*newHandler)(CanRxMsg *), CANFilter *filter, CANFilter *mask){
200033b4:	b590      	push	{r4, r7, lr}
200033b6:	b087      	sub	sp, #28
200033b8:	af00      	add	r7, sp, #0
200033ba:	60f8      	str	r0, [r7, #12]
200033bc:	60b9      	str	r1, [r7, #8]
200033be:	607a      	str	r2, [r7, #4]
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200033c0:	2317      	movs	r3, #23
200033c2:	18fb      	adds	r3, r7, r3
200033c4:	2200      	movs	r2, #0
200033c6:	701a      	strb	r2, [r3, #0]
200033c8:	e076      	b.n	200034b8 <CANaddFilterHandler+0x104>
        if (handlerList[index].state == DISABLE){
200033ca:	2317      	movs	r3, #23
200033cc:	18fb      	adds	r3, r7, r3
200033ce:	781b      	ldrb	r3, [r3, #0]
200033d0:	4a3e      	ldr	r2, [pc, #248]	; (200034cc <CANaddFilterHandler+0x118>)
200033d2:	011b      	lsls	r3, r3, #4
200033d4:	18d3      	adds	r3, r2, r3
200033d6:	330c      	adds	r3, #12
200033d8:	781b      	ldrb	r3, [r3, #0]
200033da:	2b00      	cmp	r3, #0
200033dc:	d166      	bne.n	200034ac <CANaddFilterHandler+0xf8>
            //Aktiverar session ID om det är aktivt
            if (SessionIDActive == SESSIONIDACTIVE){
200033de:	4b3c      	ldr	r3, [pc, #240]	; (200034d0 <CANaddFilterHandler+0x11c>)
200033e0:	781b      	ldrb	r3, [r3, #0]
200033e2:	2b01      	cmp	r3, #1
200033e4:	d13d      	bne.n	20003462 <CANaddFilterHandler+0xae>
                //Används för omvandling och tilldeling av sessionID
                Header header;

                //Alla meddelanden med sessionID aktivt måste vara extended
                filter->IDE = 1;
200033e6:	68bb      	ldr	r3, [r7, #8]
200033e8:	781a      	ldrb	r2, [r3, #0]
200033ea:	2104      	movs	r1, #4
200033ec:	430a      	orrs	r2, r1
200033ee:	701a      	strb	r2, [r3, #0]
                mask->IDE = 1;
200033f0:	687b      	ldr	r3, [r7, #4]
200033f2:	781a      	ldrb	r2, [r3, #0]
200033f4:	2104      	movs	r1, #4
200033f6:	430a      	orrs	r2, r1
200033f8:	701a      	strb	r2, [r3, #0]

                //Skriver sessionID
                UINT32toHEADER(filter->ID, header);
200033fa:	68bb      	ldr	r3, [r7, #8]
200033fc:	681b      	ldr	r3, [r3, #0]
200033fe:	08da      	lsrs	r2, r3, #3
20003400:	2010      	movs	r0, #16
20003402:	183b      	adds	r3, r7, r0
20003404:	601a      	str	r2, [r3, #0]
                header.sessionID = SessionID;
20003406:	4b33      	ldr	r3, [pc, #204]	; (200034d4 <CANaddFilterHandler+0x120>)
20003408:	681b      	ldr	r3, [r3, #0]
2000340a:	059b      	lsls	r3, r3, #22
2000340c:	0d9b      	lsrs	r3, r3, #22
2000340e:	b29b      	uxth	r3, r3
20003410:	059b      	lsls	r3, r3, #22
20003412:	0d9b      	lsrs	r3, r3, #22
20003414:	021b      	lsls	r3, r3, #8
20003416:	693a      	ldr	r2, [r7, #16]
20003418:	492f      	ldr	r1, [pc, #188]	; (200034d8 <CANaddFilterHandler+0x124>)
2000341a:	400a      	ands	r2, r1
2000341c:	4313      	orrs	r3, r2
2000341e:	613b      	str	r3, [r7, #16]
                HEADERtoUINT32(header, filter->ID);
20003420:	0004      	movs	r4, r0
20003422:	183b      	adds	r3, r7, r0
20003424:	681b      	ldr	r3, [r3, #0]
20003426:	00db      	lsls	r3, r3, #3
20003428:	08da      	lsrs	r2, r3, #3
2000342a:	68bb      	ldr	r3, [r7, #8]
2000342c:	00d2      	lsls	r2, r2, #3
2000342e:	6819      	ldr	r1, [r3, #0]
20003430:	2007      	movs	r0, #7
20003432:	4001      	ands	r1, r0
20003434:	430a      	orrs	r2, r1
20003436:	601a      	str	r2, [r3, #0]

                //Skriver sessionID masken
                UINT32toHEADER(mask->ID, header);
20003438:	687b      	ldr	r3, [r7, #4]
2000343a:	681b      	ldr	r3, [r3, #0]
2000343c:	08da      	lsrs	r2, r3, #3
2000343e:	0020      	movs	r0, r4
20003440:	183b      	adds	r3, r7, r0
20003442:	601a      	str	r2, [r3, #0]
                header.sessionID = ~0;
20003444:	693b      	ldr	r3, [r7, #16]
20003446:	4a25      	ldr	r2, [pc, #148]	; (200034dc <CANaddFilterHandler+0x128>)
20003448:	4313      	orrs	r3, r2
2000344a:	613b      	str	r3, [r7, #16]
                HEADERtoUINT32(header, mask->ID);
2000344c:	183b      	adds	r3, r7, r0
2000344e:	681b      	ldr	r3, [r3, #0]
20003450:	00db      	lsls	r3, r3, #3
20003452:	08da      	lsrs	r2, r3, #3
20003454:	687b      	ldr	r3, [r7, #4]
20003456:	00d2      	lsls	r2, r2, #3
20003458:	6819      	ldr	r1, [r3, #0]
2000345a:	2007      	movs	r0, #7
2000345c:	4001      	ands	r1, r0
2000345e:	430a      	orrs	r2, r1
20003460:	601a      	str	r2, [r3, #0]
            }

            handlerList[index].filter = *filter;
20003462:	2117      	movs	r1, #23
20003464:	187b      	adds	r3, r7, r1
20003466:	781b      	ldrb	r3, [r3, #0]
20003468:	4a18      	ldr	r2, [pc, #96]	; (200034cc <CANaddFilterHandler+0x118>)
2000346a:	011b      	lsls	r3, r3, #4
2000346c:	18d3      	adds	r3, r2, r3
2000346e:	3304      	adds	r3, #4
20003470:	68ba      	ldr	r2, [r7, #8]
20003472:	6812      	ldr	r2, [r2, #0]
20003474:	601a      	str	r2, [r3, #0]
            handlerList[index].mask = *mask;
20003476:	187b      	adds	r3, r7, r1
20003478:	781b      	ldrb	r3, [r3, #0]
2000347a:	4a14      	ldr	r2, [pc, #80]	; (200034cc <CANaddFilterHandler+0x118>)
2000347c:	011b      	lsls	r3, r3, #4
2000347e:	18d3      	adds	r3, r2, r3
20003480:	3308      	adds	r3, #8
20003482:	687a      	ldr	r2, [r7, #4]
20003484:	6812      	ldr	r2, [r2, #0]
20003486:	601a      	str	r2, [r3, #0]
            handlerList[index].handler = newHandler;
20003488:	0008      	movs	r0, r1
2000348a:	187b      	adds	r3, r7, r1
2000348c:	781a      	ldrb	r2, [r3, #0]
2000348e:	4b0f      	ldr	r3, [pc, #60]	; (200034cc <CANaddFilterHandler+0x118>)
20003490:	0112      	lsls	r2, r2, #4
20003492:	68f9      	ldr	r1, [r7, #12]
20003494:	50d1      	str	r1, [r2, r3]

            //Aktiverar filtret
            CANactivateFilterHandler(index);
20003496:	0001      	movs	r1, r0
20003498:	000c      	movs	r4, r1
2000349a:	187b      	adds	r3, r7, r1
2000349c:	781b      	ldrb	r3, [r3, #0]
2000349e:	0018      	movs	r0, r3
200034a0:	f7ff ff3c 	bl	2000331c <CANactivateFilterHandler>

            return index;
200034a4:	0021      	movs	r1, r4
200034a6:	187b      	adds	r3, r7, r1
200034a8:	781b      	ldrb	r3, [r3, #0]
200034aa:	e00b      	b.n	200034c4 <CANaddFilterHandler+0x110>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200034ac:	2117      	movs	r1, #23
200034ae:	187b      	adds	r3, r7, r1
200034b0:	781a      	ldrb	r2, [r3, #0]
200034b2:	187b      	adds	r3, r7, r1
200034b4:	3201      	adds	r2, #1
200034b6:	701a      	strb	r2, [r3, #0]
200034b8:	2317      	movs	r3, #23
200034ba:	18fb      	adds	r3, r7, r3
200034bc:	781b      	ldrb	r3, [r3, #0]
200034be:	2b0d      	cmp	r3, #13
200034c0:	d983      	bls.n	200033ca <CANaddFilterHandler+0x16>
        }
    }

    //Detta händer bara om man inte kollat så det finns plats innan man lägger till filtret.
    //Skulle man sedan avaktivera filtret med denna index så händer ingenting, se CANdisableFilterHandler.
    return HANDLERLISTSIZE;
200034c2:	230e      	movs	r3, #14
}
200034c4:	0018      	movs	r0, r3
200034c6:	46bd      	mov	sp, r7
200034c8:	b007      	add	sp, #28
200034ca:	bd90      	pop	{r4, r7, pc}
200034cc:	20003b8c 	andcs	r3, r0, ip, lsl #23
200034d0:	20003c6c 	andcs	r3, r0, ip, ror #24
200034d4:	20003b88 	andcs	r3, r0, r8, lsl #23
200034d8:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff
200034dc:	0003ff00 	andeq	pc, r3, r0, lsl #30

200034e0 <CANdisableFilterHandler>:

//Avaktiverar CANFilterHandler med index index från handlerList
void CANdisableFilterHandler(uint8_t index){
200034e0:	b580      	push	{r7, lr}
200034e2:	b086      	sub	sp, #24
200034e4:	af00      	add	r7, sp, #0
200034e6:	0002      	movs	r2, r0
200034e8:	1dfb      	adds	r3, r7, #7
200034ea:	701a      	strb	r2, [r3, #0]
    if (index < HANDLERLISTSIZE){
200034ec:	1dfb      	adds	r3, r7, #7
200034ee:	781b      	ldrb	r3, [r3, #0]
200034f0:	2b0d      	cmp	r3, #13
200034f2:	d816      	bhi.n	20003522 <CANdisableFilterHandler+0x42>
        handlerList[index].state = DISABLE;
200034f4:	1dfb      	adds	r3, r7, #7
200034f6:	781b      	ldrb	r3, [r3, #0]
200034f8:	4a0c      	ldr	r2, [pc, #48]	; (2000352c <CANdisableFilterHandler+0x4c>)
200034fa:	011b      	lsls	r3, r3, #4
200034fc:	18d3      	adds	r3, r2, r3
200034fe:	330c      	adds	r3, #12
20003500:	2200      	movs	r2, #0
20003502:	701a      	strb	r2, [r3, #0]

        //Avaktiverar filtret
        CAN_FilterInitTypeDef CAN_FilterInitStructure;
        CAN_FilterInitStructure.CAN_FilterNumber = index;
20003504:	2108      	movs	r1, #8
20003506:	187b      	adds	r3, r7, r1
20003508:	1dfa      	adds	r2, r7, #7
2000350a:	7812      	ldrb	r2, [r2, #0]
2000350c:	729a      	strb	r2, [r3, #10]
        CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
2000350e:	187b      	adds	r3, r7, r1
20003510:	2200      	movs	r2, #0
20003512:	811a      	strh	r2, [r3, #8]
        CAN_FilterInitStructure.CAN_FilterActivation = DISABLE;
20003514:	187b      	adds	r3, r7, r1
20003516:	2200      	movs	r2, #0
20003518:	735a      	strb	r2, [r3, #13]
        CAN_FilterInit(&CAN_FilterInitStructure);
2000351a:	187b      	adds	r3, r7, r1
2000351c:	0018      	movs	r0, r3
2000351e:	f7fc fe81 	bl	20000224 <CAN_FilterInit>
    }
}
20003522:	46c0      	nop			; (mov r8, r8)
20003524:	46bd      	mov	sp, r7
20003526:	b006      	add	sp, #24
20003528:	bd80      	pop	{r7, pc}
2000352a:	46c0      	nop			; (mov r8, r8)
2000352c:	20003b8c 	andcs	r3, r0, ip, lsl #23

20003530 <CANdisableAllFilterHandlers>:

//Avaktiverar alla CANFilterHandlers
void CANdisableAllFilterHandlers(void){
20003530:	b580      	push	{r7, lr}
20003532:	b082      	sub	sp, #8
20003534:	af00      	add	r7, sp, #0
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20003536:	1dfb      	adds	r3, r7, #7
20003538:	2200      	movs	r2, #0
2000353a:	701a      	strb	r2, [r3, #0]
2000353c:	e009      	b.n	20003552 <CANdisableAllFilterHandlers+0x22>
        CANdisableFilterHandler(index);
2000353e:	1dfb      	adds	r3, r7, #7
20003540:	781b      	ldrb	r3, [r3, #0]
20003542:	0018      	movs	r0, r3
20003544:	f7ff ffcc 	bl	200034e0 <CANdisableFilterHandler>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20003548:	1dfb      	adds	r3, r7, #7
2000354a:	781a      	ldrb	r2, [r3, #0]
2000354c:	1dfb      	adds	r3, r7, #7
2000354e:	3201      	adds	r2, #1
20003550:	701a      	strb	r2, [r3, #0]
20003552:	1dfb      	adds	r3, r7, #7
20003554:	781b      	ldrb	r3, [r3, #0]
20003556:	2b0d      	cmp	r3, #13
20003558:	d9f1      	bls.n	2000353e <CANdisableAllFilterHandlers+0xe>
    }
}
2000355a:	46c0      	nop			; (mov r8, r8)
2000355c:	46bd      	mov	sp, r7
2000355e:	b002      	add	sp, #8
20003560:	bd80      	pop	{r7, pc}

20003562 <CANsendMessage>:

//Skickar ett CAN-meddelande
//Omvandlar till extended om det inte redan är det samt session ID är aktivt
//Returnderar numret för mailboxen som används eller CAN_TxStatus_NoMailBox om det misslyckades
uint8_t CANsendMessage(CanTxMsg *msg){
20003562:	b580      	push	{r7, lr}
20003564:	b084      	sub	sp, #16
20003566:	af00      	add	r7, sp, #0
20003568:	6078      	str	r0, [r7, #4]
    //Justerar endast meddelandet om sessionID är aktivt
    if (SessionIDActive == SESSIONIDACTIVE){
2000356a:	4b24      	ldr	r3, [pc, #144]	; (200035fc <CANsendMessage+0x9a>)
2000356c:	781b      	ldrb	r3, [r3, #0]
2000356e:	2b01      	cmp	r3, #1
20003570:	d138      	bne.n	200035e4 <CANsendMessage+0x82>
        //Används för omvandling och tilldeling av session ID
        Header header;

        //Om standardmeddelande omvandla till extended
        if (msg->IDE == CAN_Id_Standard){
20003572:	687b      	ldr	r3, [r7, #4]
20003574:	7a1b      	ldrb	r3, [r3, #8]
20003576:	2b00      	cmp	r3, #0
20003578:	d11a      	bne.n	200035b0 <CANsendMessage+0x4e>
            msg->IDE = CAN_Id_Extended;
2000357a:	687b      	ldr	r3, [r7, #4]
2000357c:	2204      	movs	r2, #4
2000357e:	721a      	strb	r2, [r3, #8]

            //Skriver sessionID
            UINT32toHEADER(msg->StdId << STDtoEXTLENGTHDIFF, header);
20003580:	687b      	ldr	r3, [r7, #4]
20003582:	681a      	ldr	r2, [r3, #0]
20003584:	200c      	movs	r0, #12
20003586:	183b      	adds	r3, r7, r0
20003588:	0492      	lsls	r2, r2, #18
2000358a:	601a      	str	r2, [r3, #0]
            header.sessionID = SessionID;
2000358c:	4b1c      	ldr	r3, [pc, #112]	; (20003600 <CANsendMessage+0x9e>)
2000358e:	681b      	ldr	r3, [r3, #0]
20003590:	059b      	lsls	r3, r3, #22
20003592:	0d9b      	lsrs	r3, r3, #22
20003594:	b29b      	uxth	r3, r3
20003596:	059b      	lsls	r3, r3, #22
20003598:	0d9b      	lsrs	r3, r3, #22
2000359a:	021b      	lsls	r3, r3, #8
2000359c:	68fa      	ldr	r2, [r7, #12]
2000359e:	4919      	ldr	r1, [pc, #100]	; (20003604 <CANsendMessage+0xa2>)
200035a0:	400a      	ands	r2, r1
200035a2:	4313      	orrs	r3, r2
200035a4:	60fb      	str	r3, [r7, #12]
            HEADERtoUINT32(header, msg->ExtId);
200035a6:	183b      	adds	r3, r7, r0
200035a8:	681a      	ldr	r2, [r3, #0]
200035aa:	687b      	ldr	r3, [r7, #4]
200035ac:	605a      	str	r2, [r3, #4]
200035ae:	e019      	b.n	200035e4 <CANsendMessage+0x82>
        }

        //Annars om det redan är ett meddelande med extended ID
        //justeras endast sessionsbitarna om sessions ID är aktivt
        else if (msg->IDE == CAN_Id_Extended){
200035b0:	687b      	ldr	r3, [r7, #4]
200035b2:	7a1b      	ldrb	r3, [r3, #8]
200035b4:	2b04      	cmp	r3, #4
200035b6:	d115      	bne.n	200035e4 <CANsendMessage+0x82>
            UINT32toHEADER(msg->ExtId, header);
200035b8:	200c      	movs	r0, #12
200035ba:	183b      	adds	r3, r7, r0
200035bc:	687a      	ldr	r2, [r7, #4]
200035be:	6852      	ldr	r2, [r2, #4]
200035c0:	601a      	str	r2, [r3, #0]
            header.sessionID = SessionID;
200035c2:	4b0f      	ldr	r3, [pc, #60]	; (20003600 <CANsendMessage+0x9e>)
200035c4:	681b      	ldr	r3, [r3, #0]
200035c6:	059b      	lsls	r3, r3, #22
200035c8:	0d9b      	lsrs	r3, r3, #22
200035ca:	b29b      	uxth	r3, r3
200035cc:	059b      	lsls	r3, r3, #22
200035ce:	0d9b      	lsrs	r3, r3, #22
200035d0:	021b      	lsls	r3, r3, #8
200035d2:	68fa      	ldr	r2, [r7, #12]
200035d4:	490b      	ldr	r1, [pc, #44]	; (20003604 <CANsendMessage+0xa2>)
200035d6:	400a      	ands	r2, r1
200035d8:	4313      	orrs	r3, r2
200035da:	60fb      	str	r3, [r7, #12]
            HEADERtoUINT32(header, msg->ExtId);
200035dc:	183b      	adds	r3, r7, r0
200035de:	681a      	ldr	r2, [r3, #0]
200035e0:	687b      	ldr	r3, [r7, #4]
200035e2:	605a      	str	r2, [r3, #4]
        }
    }

	return CAN_Transmit(CAN1, msg);
200035e4:	687b      	ldr	r3, [r7, #4]
200035e6:	4a08      	ldr	r2, [pc, #32]	; (20003608 <CANsendMessage+0xa6>)
200035e8:	0019      	movs	r1, r3
200035ea:	0010      	movs	r0, r2
200035ec:	f7fc ffd8 	bl	200005a0 <CAN_Transmit>
200035f0:	0003      	movs	r3, r0
}
200035f2:	0018      	movs	r0, r3
200035f4:	46bd      	mov	sp, r7
200035f6:	b004      	add	sp, #16
200035f8:	bd80      	pop	{r7, pc}
200035fa:	46c0      	nop			; (mov r8, r8)
200035fc:	20003c6c 	andcs	r3, r0, ip, ror #24
20003600:	20003b88 	andcs	r3, r0, r8, lsl #23
20003604:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff
20003608:	40006400 	andmi	r6, r0, r0, lsl #8

2000360c <can_irq_handler>:

//Avbrottshanterare för mottagna meddelanden på FIFO 0.
//Anropar meddelandes hanteringsfunktion.
void can_irq_handler(void){
2000360c:	b580      	push	{r7, lr}
2000360e:	b086      	sub	sp, #24
20003610:	af00      	add	r7, sp, #0
    //Kollar FIFO 0 pending Interrupt
    if(CAN_GetITStatus(CAN1, CAN_IT_FMP0)) {
20003612:	4b17      	ldr	r3, [pc, #92]	; (20003670 <can_irq_handler+0x64>)
20003614:	2102      	movs	r1, #2
20003616:	0018      	movs	r0, r3
20003618:	f7fd fc58 	bl	20000ecc <CAN_GetITStatus>
2000361c:	1e03      	subs	r3, r0, #0
2000361e:	d022      	beq.n	20003666 <can_irq_handler+0x5a>
        //Kollar så att det finns meddelande som väntar i FIFO0
        if (CAN_MessagePending(CAN1, CAN_FIFO0)) {
20003620:	4b13      	ldr	r3, [pc, #76]	; (20003670 <can_irq_handler+0x64>)
20003622:	2100      	movs	r1, #0
20003624:	0018      	movs	r0, r3
20003626:	f7fd fa33 	bl	20000a90 <CAN_MessagePending>
2000362a:	1e03      	subs	r3, r0, #0
2000362c:	d01b      	beq.n	20003666 <can_irq_handler+0x5a>
            //Läser meddelandet
            CanRxMsg rxMsg;
            CAN_Receive(CAN1, CAN_FIFO0, &rxMsg);
2000362e:	1d3b      	adds	r3, r7, #4
20003630:	480f      	ldr	r0, [pc, #60]	; (20003670 <can_irq_handler+0x64>)
20003632:	001a      	movs	r2, r3
20003634:	2100      	movs	r1, #0
20003636:	f7fd f93a 	bl	200008ae <CAN_Receive>

            //Anropar hanteringsfunktionen för meddelandet
            if (rxMsg.FMI < HANDLERLISTSIZE){
2000363a:	1d3b      	adds	r3, r7, #4
2000363c:	7cdb      	ldrb	r3, [r3, #19]
2000363e:	2b0d      	cmp	r3, #13
20003640:	d811      	bhi.n	20003666 <can_irq_handler+0x5a>
                if (handlerList[rxMsg.FMI].state == ENABLE){
20003642:	1d3b      	adds	r3, r7, #4
20003644:	7cdb      	ldrb	r3, [r3, #19]
20003646:	4a0b      	ldr	r2, [pc, #44]	; (20003674 <can_irq_handler+0x68>)
20003648:	011b      	lsls	r3, r3, #4
2000364a:	18d3      	adds	r3, r2, r3
2000364c:	330c      	adds	r3, #12
2000364e:	781b      	ldrb	r3, [r3, #0]
20003650:	2b01      	cmp	r3, #1
20003652:	d108      	bne.n	20003666 <can_irq_handler+0x5a>
                    handlerList[rxMsg.FMI].handler(&rxMsg);
20003654:	1d3b      	adds	r3, r7, #4
20003656:	7cdb      	ldrb	r3, [r3, #19]
20003658:	001a      	movs	r2, r3
2000365a:	4b06      	ldr	r3, [pc, #24]	; (20003674 <can_irq_handler+0x68>)
2000365c:	0112      	lsls	r2, r2, #4
2000365e:	58d3      	ldr	r3, [r2, r3]
20003660:	1d3a      	adds	r2, r7, #4
20003662:	0010      	movs	r0, r2
20003664:	4798      	blx	r3
                }
            }
        }
    }
}
20003666:	46c0      	nop			; (mov r8, r8)
20003668:	46bd      	mov	sp, r7
2000366a:	b006      	add	sp, #24
2000366c:	bd80      	pop	{r7, pc}
2000366e:	46c0      	nop			; (mov r8, r8)
20003670:	40006400 	andmi	r6, r0, r0, lsl #8
20003674:	20003b8c 	andcs	r3, r0, ip, lsl #23

20003678 <setSessionId>:

//Sätter session ID,  ändra även session ID för aktiva filter
//Använder de första 10 bitarna av ID
void setSessionId(uint16_t ID){
20003678:	b5b0      	push	{r4, r5, r7, lr}
2000367a:	b084      	sub	sp, #16
2000367c:	af00      	add	r7, sp, #0
2000367e:	0002      	movs	r2, r0
20003680:	1dbb      	adds	r3, r7, #6
20003682:	801a      	strh	r2, [r3, #0]
    SessionIDActive = SESSIONIDACTIVE;
20003684:	4b44      	ldr	r3, [pc, #272]	; (20003798 <setSessionId+0x120>)
20003686:	2201      	movs	r2, #1
20003688:	701a      	strb	r2, [r3, #0]
    SessionID = ID;
2000368a:	1dbb      	adds	r3, r7, #6
2000368c:	881a      	ldrh	r2, [r3, #0]
2000368e:	4b43      	ldr	r3, [pc, #268]	; (2000379c <setSessionId+0x124>)
20003690:	601a      	str	r2, [r3, #0]

    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20003692:	230f      	movs	r3, #15
20003694:	18fb      	adds	r3, r7, r3
20003696:	2200      	movs	r2, #0
20003698:	701a      	strb	r2, [r3, #0]
2000369a:	e073      	b.n	20003784 <setSessionId+0x10c>
        //Justerar filter som är aktiva
        if(handlerList[index].state == ENABLE){
2000369c:	230f      	movs	r3, #15
2000369e:	18fb      	adds	r3, r7, r3
200036a0:	781b      	ldrb	r3, [r3, #0]
200036a2:	4a3f      	ldr	r2, [pc, #252]	; (200037a0 <setSessionId+0x128>)
200036a4:	011b      	lsls	r3, r3, #4
200036a6:	18d3      	adds	r3, r2, r3
200036a8:	330c      	adds	r3, #12
200036aa:	781b      	ldrb	r3, [r3, #0]
200036ac:	2b01      	cmp	r3, #1
200036ae:	d163      	bne.n	20003778 <setSessionId+0x100>
            //Används för omvandling
            Header header;

            //Filtrer och masken måste vara av typ extended
            handlerList[index].filter.IDE = 1;
200036b0:	200f      	movs	r0, #15
200036b2:	183b      	adds	r3, r7, r0
200036b4:	781b      	ldrb	r3, [r3, #0]
200036b6:	4a3a      	ldr	r2, [pc, #232]	; (200037a0 <setSessionId+0x128>)
200036b8:	011b      	lsls	r3, r3, #4
200036ba:	18d3      	adds	r3, r2, r3
200036bc:	791a      	ldrb	r2, [r3, #4]
200036be:	2104      	movs	r1, #4
200036c0:	430a      	orrs	r2, r1
200036c2:	711a      	strb	r2, [r3, #4]
            handlerList[index].mask.IDE = 1;
200036c4:	183b      	adds	r3, r7, r0
200036c6:	781b      	ldrb	r3, [r3, #0]
200036c8:	4a35      	ldr	r2, [pc, #212]	; (200037a0 <setSessionId+0x128>)
200036ca:	2108      	movs	r1, #8
200036cc:	011b      	lsls	r3, r3, #4
200036ce:	18d3      	adds	r3, r2, r3
200036d0:	185b      	adds	r3, r3, r1
200036d2:	781a      	ldrb	r2, [r3, #0]
200036d4:	2104      	movs	r1, #4
200036d6:	430a      	orrs	r2, r1
200036d8:	701a      	strb	r2, [r3, #0]

            //Ändrar filter
            UINT32toHEADER(handlerList[index].filter.ID, header);
200036da:	183b      	adds	r3, r7, r0
200036dc:	781b      	ldrb	r3, [r3, #0]
200036de:	4a30      	ldr	r2, [pc, #192]	; (200037a0 <setSessionId+0x128>)
200036e0:	011b      	lsls	r3, r3, #4
200036e2:	18d3      	adds	r3, r2, r3
200036e4:	685b      	ldr	r3, [r3, #4]
200036e6:	08da      	lsrs	r2, r3, #3
200036e8:	2508      	movs	r5, #8
200036ea:	197b      	adds	r3, r7, r5
200036ec:	601a      	str	r2, [r3, #0]
            header.sessionID = SessionID;
200036ee:	4b2b      	ldr	r3, [pc, #172]	; (2000379c <setSessionId+0x124>)
200036f0:	681b      	ldr	r3, [r3, #0]
200036f2:	059b      	lsls	r3, r3, #22
200036f4:	0d9b      	lsrs	r3, r3, #22
200036f6:	b29b      	uxth	r3, r3
200036f8:	059b      	lsls	r3, r3, #22
200036fa:	0d9b      	lsrs	r3, r3, #22
200036fc:	021b      	lsls	r3, r3, #8
200036fe:	68ba      	ldr	r2, [r7, #8]
20003700:	4928      	ldr	r1, [pc, #160]	; (200037a4 <setSessionId+0x12c>)
20003702:	400a      	ands	r2, r1
20003704:	4313      	orrs	r3, r2
20003706:	60bb      	str	r3, [r7, #8]
            HEADERtoUINT32(header, handlerList[index].filter.ID);
20003708:	197b      	adds	r3, r7, r5
2000370a:	681a      	ldr	r2, [r3, #0]
2000370c:	0004      	movs	r4, r0
2000370e:	183b      	adds	r3, r7, r0
20003710:	781b      	ldrb	r3, [r3, #0]
20003712:	00d2      	lsls	r2, r2, #3
20003714:	08d2      	lsrs	r2, r2, #3
20003716:	4922      	ldr	r1, [pc, #136]	; (200037a0 <setSessionId+0x128>)
20003718:	011b      	lsls	r3, r3, #4
2000371a:	18cb      	adds	r3, r1, r3
2000371c:	00d2      	lsls	r2, r2, #3
2000371e:	6859      	ldr	r1, [r3, #4]
20003720:	2007      	movs	r0, #7
20003722:	4001      	ands	r1, r0
20003724:	430a      	orrs	r2, r1
20003726:	605a      	str	r2, [r3, #4]

            //Ändrar masken
            UINT32toHEADER(handlerList[index].mask.ID, header);
20003728:	0020      	movs	r0, r4
2000372a:	183b      	adds	r3, r7, r0
2000372c:	781b      	ldrb	r3, [r3, #0]
2000372e:	4a1c      	ldr	r2, [pc, #112]	; (200037a0 <setSessionId+0x128>)
20003730:	2108      	movs	r1, #8
20003732:	011b      	lsls	r3, r3, #4
20003734:	18d3      	adds	r3, r2, r3
20003736:	185b      	adds	r3, r3, r1
20003738:	681b      	ldr	r3, [r3, #0]
2000373a:	08da      	lsrs	r2, r3, #3
2000373c:	197b      	adds	r3, r7, r5
2000373e:	601a      	str	r2, [r3, #0]
            header.sessionID = ~0;
20003740:	68bb      	ldr	r3, [r7, #8]
20003742:	4a19      	ldr	r2, [pc, #100]	; (200037a8 <setSessionId+0x130>)
20003744:	4313      	orrs	r3, r2
20003746:	60bb      	str	r3, [r7, #8]
            HEADERtoUINT32(header, handlerList[index].mask.ID);
20003748:	197b      	adds	r3, r7, r5
2000374a:	681a      	ldr	r2, [r3, #0]
2000374c:	0004      	movs	r4, r0
2000374e:	183b      	adds	r3, r7, r0
20003750:	781b      	ldrb	r3, [r3, #0]
20003752:	00d2      	lsls	r2, r2, #3
20003754:	08d2      	lsrs	r2, r2, #3
20003756:	4912      	ldr	r1, [pc, #72]	; (200037a0 <setSessionId+0x128>)
20003758:	2008      	movs	r0, #8
2000375a:	011b      	lsls	r3, r3, #4
2000375c:	18cb      	adds	r3, r1, r3
2000375e:	181b      	adds	r3, r3, r0
20003760:	00d2      	lsls	r2, r2, #3
20003762:	6819      	ldr	r1, [r3, #0]
20003764:	2007      	movs	r0, #7
20003766:	4001      	ands	r1, r0
20003768:	430a      	orrs	r2, r1
2000376a:	601a      	str	r2, [r3, #0]

            CANactivateFilterHandler(index);
2000376c:	0020      	movs	r0, r4
2000376e:	183b      	adds	r3, r7, r0
20003770:	781b      	ldrb	r3, [r3, #0]
20003772:	0018      	movs	r0, r3
20003774:	f7ff fdd2 	bl	2000331c <CANactivateFilterHandler>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20003778:	210f      	movs	r1, #15
2000377a:	187b      	adds	r3, r7, r1
2000377c:	781a      	ldrb	r2, [r3, #0]
2000377e:	187b      	adds	r3, r7, r1
20003780:	3201      	adds	r2, #1
20003782:	701a      	strb	r2, [r3, #0]
20003784:	230f      	movs	r3, #15
20003786:	18fb      	adds	r3, r7, r3
20003788:	781b      	ldrb	r3, [r3, #0]
2000378a:	2b0d      	cmp	r3, #13
2000378c:	d986      	bls.n	2000369c <setSessionId+0x24>
        }
    }
}
2000378e:	46c0      	nop			; (mov r8, r8)
20003790:	46bd      	mov	sp, r7
20003792:	b004      	add	sp, #16
20003794:	bdb0      	pop	{r4, r5, r7, pc}
20003796:	46c0      	nop			; (mov r8, r8)
20003798:	20003c6c 	andcs	r3, r0, ip, ror #24
2000379c:	20003b88 	andcs	r3, r0, r8, lsl #23
200037a0:	20003b8c 	andcs	r3, r0, ip, lsl #23
200037a4:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff
200037a8:	0003ff00 	andeq	pc, r3, r0, lsl #30

200037ac <noSessionId>:

//Avaktiverar session ID för aktiva filter och kommande filter
void noSessionId(void){
200037ac:	b580      	push	{r7, lr}
200037ae:	b082      	sub	sp, #8
200037b0:	af00      	add	r7, sp, #0
    SessionIDActive = SESSIONIDINACTIVE;
200037b2:	4b21      	ldr	r3, [pc, #132]	; (20003838 <noSessionId+0x8c>)
200037b4:	2200      	movs	r2, #0
200037b6:	701a      	strb	r2, [r3, #0]

    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200037b8:	1dfb      	adds	r3, r7, #7
200037ba:	2200      	movs	r2, #0
200037bc:	701a      	strb	r2, [r3, #0]
200037be:	e032      	b.n	20003826 <noSessionId+0x7a>
        //Avaktiverar filtering för sessionID på de aktiva filtren
        if(handlerList[index].state == ENABLE){
200037c0:	1dfb      	adds	r3, r7, #7
200037c2:	781b      	ldrb	r3, [r3, #0]
200037c4:	4a1d      	ldr	r2, [pc, #116]	; (2000383c <noSessionId+0x90>)
200037c6:	011b      	lsls	r3, r3, #4
200037c8:	18d3      	adds	r3, r2, r3
200037ca:	330c      	adds	r3, #12
200037cc:	781b      	ldrb	r3, [r3, #0]
200037ce:	2b01      	cmp	r3, #1
200037d0:	d124      	bne.n	2000381c <noSessionId+0x70>
            //Används för omvandling
            Header header;

            UINT32toHEADER(handlerList[index].mask.ID, header);
200037d2:	1dfb      	adds	r3, r7, #7
200037d4:	781b      	ldrb	r3, [r3, #0]
200037d6:	4a19      	ldr	r2, [pc, #100]	; (2000383c <noSessionId+0x90>)
200037d8:	2108      	movs	r1, #8
200037da:	011b      	lsls	r3, r3, #4
200037dc:	18d3      	adds	r3, r2, r3
200037de:	185b      	adds	r3, r3, r1
200037e0:	681b      	ldr	r3, [r3, #0]
200037e2:	08da      	lsrs	r2, r3, #3
200037e4:	003b      	movs	r3, r7
200037e6:	601a      	str	r2, [r3, #0]
            header.sessionID  = 0;
200037e8:	683b      	ldr	r3, [r7, #0]
200037ea:	4a15      	ldr	r2, [pc, #84]	; (20003840 <noSessionId+0x94>)
200037ec:	4013      	ands	r3, r2
200037ee:	603b      	str	r3, [r7, #0]
            HEADERtoUINT32(header, handlerList[index].mask.ID);
200037f0:	003b      	movs	r3, r7
200037f2:	681a      	ldr	r2, [r3, #0]
200037f4:	1dfb      	adds	r3, r7, #7
200037f6:	781b      	ldrb	r3, [r3, #0]
200037f8:	00d2      	lsls	r2, r2, #3
200037fa:	08d2      	lsrs	r2, r2, #3
200037fc:	490f      	ldr	r1, [pc, #60]	; (2000383c <noSessionId+0x90>)
200037fe:	2008      	movs	r0, #8
20003800:	011b      	lsls	r3, r3, #4
20003802:	18cb      	adds	r3, r1, r3
20003804:	181b      	adds	r3, r3, r0
20003806:	00d2      	lsls	r2, r2, #3
20003808:	6819      	ldr	r1, [r3, #0]
2000380a:	2007      	movs	r0, #7
2000380c:	4001      	ands	r1, r0
2000380e:	430a      	orrs	r2, r1
20003810:	601a      	str	r2, [r3, #0]
            CANactivateFilterHandler(index);
20003812:	1dfb      	adds	r3, r7, #7
20003814:	781b      	ldrb	r3, [r3, #0]
20003816:	0018      	movs	r0, r3
20003818:	f7ff fd80 	bl	2000331c <CANactivateFilterHandler>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
2000381c:	1dfb      	adds	r3, r7, #7
2000381e:	781a      	ldrb	r2, [r3, #0]
20003820:	1dfb      	adds	r3, r7, #7
20003822:	3201      	adds	r2, #1
20003824:	701a      	strb	r2, [r3, #0]
20003826:	1dfb      	adds	r3, r7, #7
20003828:	781b      	ldrb	r3, [r3, #0]
2000382a:	2b0d      	cmp	r3, #13
2000382c:	d9c8      	bls.n	200037c0 <noSessionId+0x14>
        }
    }
}
2000382e:	46c0      	nop			; (mov r8, r8)
20003830:	46bd      	mov	sp, r7
20003832:	b002      	add	sp, #8
20003834:	bd80      	pop	{r7, pc}
20003836:	46c0      	nop			; (mov r8, r8)
20003838:	20003c6c 	andcs	r3, r0, ip, ror #24
2000383c:	20003b8c 	andcs	r3, r0, ip, lsl #23
20003840:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff

20003844 <can_init>:

uint8_t can_init() {
20003844:	b5f0      	push	{r4, r5, r6, r7, lr}
20003846:	b089      	sub	sp, #36	; 0x24
20003848:	af00      	add	r7, sp, #0
	CAN_InitTypeDef CAN_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);
2000384a:	2380      	movs	r3, #128	; 0x80
2000384c:	049b      	lsls	r3, r3, #18
2000384e:	2101      	movs	r1, #1
20003850:	0018      	movs	r0, r3
20003852:	f7fe fe5d 	bl	20002510 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
20003856:	2380      	movs	r3, #128	; 0x80
20003858:	01db      	lsls	r3, r3, #7
2000385a:	2101      	movs	r1, #1
2000385c:	0018      	movs	r0, r3
2000385e:	f7fe fe77 	bl	20002550 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20003862:	2101      	movs	r1, #1
20003864:	2002      	movs	r0, #2
20003866:	f7fe fdf3 	bl	20002450 <RCC_AHB1PeriphClockCmd>

	// Connect CAN pins to AF9. See more below
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_CAN1);
2000386a:	4b61      	ldr	r3, [pc, #388]	; (200039f0 <can_init+0x1ac>)
2000386c:	2209      	movs	r2, #9
2000386e:	2109      	movs	r1, #9
20003870:	0018      	movs	r0, r3
20003872:	f7fe f8bc 	bl	200019ee <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_CAN1);  
20003876:	4b5e      	ldr	r3, [pc, #376]	; (200039f0 <can_init+0x1ac>)
20003878:	2209      	movs	r2, #9
2000387a:	2108      	movs	r1, #8
2000387c:	0018      	movs	r0, r3
2000387e:	f7fe f8b6 	bl	200019ee <GPIO_PinAFConfig>
	// Configure CAN RX and TX pins
	// See page 41 of MD407 reference manual
	// Connect CAN1 pins to AF
    // PB9 - CAN1 TX
    // PB8 - CAN1 RX
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_CAN1);  	
20003882:	4b5b      	ldr	r3, [pc, #364]	; (200039f0 <can_init+0x1ac>)
20003884:	2209      	movs	r2, #9
20003886:	2109      	movs	r1, #9
20003888:	0018      	movs	r0, r3
2000388a:	f7fe f8b0 	bl	200019ee <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_CAN1);  
2000388e:	4b58      	ldr	r3, [pc, #352]	; (200039f0 <can_init+0x1ac>)
20003890:	2209      	movs	r2, #9
20003892:	2108      	movs	r1, #8
20003894:	0018      	movs	r0, r3
20003896:	f7fe f8aa 	bl	200019ee <GPIO_PinAFConfig>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
2000389a:	1d3b      	adds	r3, r7, #4
2000389c:	2280      	movs	r2, #128	; 0x80
2000389e:	0092      	lsls	r2, r2, #2
200038a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
200038a2:	1d3b      	adds	r3, r7, #4
200038a4:	2202      	movs	r2, #2
200038a6:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
200038a8:	1d3b      	adds	r3, r7, #4
200038aa:	2200      	movs	r2, #0
200038ac:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
200038ae:	1d3b      	adds	r3, r7, #4
200038b0:	2200      	movs	r2, #0
200038b2:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
200038b4:	1d3b      	adds	r3, r7, #4
200038b6:	2202      	movs	r2, #2
200038b8:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);	
200038ba:	1d3b      	adds	r3, r7, #4
200038bc:	4a4c      	ldr	r2, [pc, #304]	; (200039f0 <can_init+0x1ac>)
200038be:	0019      	movs	r1, r3
200038c0:	0010      	movs	r0, r2
200038c2:	f7fd ff17 	bl	200016f4 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;	
200038c6:	1d3b      	adds	r3, r7, #4
200038c8:	2280      	movs	r2, #128	; 0x80
200038ca:	0052      	lsls	r2, r2, #1
200038cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
200038ce:	1d3b      	adds	r3, r7, #4
200038d0:	2202      	movs	r2, #2
200038d2:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_Mode_IN;
200038d4:	1d3b      	adds	r3, r7, #4
200038d6:	2200      	movs	r2, #0
200038d8:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	
200038da:	1d3b      	adds	r3, r7, #4
200038dc:	2201      	movs	r2, #1
200038de:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
200038e0:	1d3b      	adds	r3, r7, #4
200038e2:	2202      	movs	r2, #2
200038e4:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
200038e6:	1d3b      	adds	r3, r7, #4
200038e8:	4a41      	ldr	r2, [pc, #260]	; (200039f0 <can_init+0x1ac>)
200038ea:	0019      	movs	r1, r3
200038ec:	0010      	movs	r0, r2
200038ee:	f7fd ff01 	bl	200016f4 <GPIO_Init>
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
200038f2:	1d3b      	adds	r3, r7, #4
200038f4:	2240      	movs	r2, #64	; 0x40
200038f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
200038f8:	1d3b      	adds	r3, r7, #4
200038fa:	2202      	movs	r2, #2
200038fc:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
200038fe:	1d3b      	adds	r3, r7, #4
20003900:	2200      	movs	r2, #0
20003902:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
20003904:	1d3b      	adds	r3, r7, #4
20003906:	2200      	movs	r2, #0
20003908:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
2000390a:	1d3b      	adds	r3, r7, #4
2000390c:	2202      	movs	r2, #2
2000390e:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);	
20003910:	1d3b      	adds	r3, r7, #4
20003912:	4a37      	ldr	r2, [pc, #220]	; (200039f0 <can_init+0x1ac>)
20003914:	0019      	movs	r1, r3
20003916:	0010      	movs	r0, r2
20003918:	f7fd feec 	bl	200016f4 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;	
2000391c:	1d3b      	adds	r3, r7, #4
2000391e:	2220      	movs	r2, #32
20003920:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
20003922:	1d3b      	adds	r3, r7, #4
20003924:	2202      	movs	r2, #2
20003926:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_Mode_IN;
20003928:	1d3b      	adds	r3, r7, #4
2000392a:	2200      	movs	r2, #0
2000392c:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	
2000392e:	1d3b      	adds	r3, r7, #4
20003930:	2201      	movs	r2, #1
20003932:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
20003934:	1d3b      	adds	r3, r7, #4
20003936:	2202      	movs	r2, #2
20003938:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
2000393a:	1d3b      	adds	r3, r7, #4
2000393c:	4a2c      	ldr	r2, [pc, #176]	; (200039f0 <can_init+0x1ac>)
2000393e:	0019      	movs	r1, r3
20003940:	0010      	movs	r0, r2
20003942:	f7fd fed7 	bl	200016f4 <GPIO_Init>
	
	NVIC_InitStructure.NVIC_IRQChannel = CAN1_RX0_IRQn;
20003946:	210c      	movs	r1, #12
20003948:	187b      	adds	r3, r7, r1
2000394a:	2214      	movs	r2, #20
2000394c:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = __CAN_IRQ_PRIORITY;
2000394e:	187b      	adds	r3, r7, r1
20003950:	2202      	movs	r2, #2
20003952:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x2;
20003954:	187b      	adds	r3, r7, r1
20003956:	2202      	movs	r2, #2
20003958:	709a      	strb	r2, [r3, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
2000395a:	187b      	adds	r3, r7, r1
2000395c:	2201      	movs	r2, #1
2000395e:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&NVIC_InitStructure);
20003960:	187b      	adds	r3, r7, r1
20003962:	0018      	movs	r0, r3
20003964:	f7fd fc50 	bl	20001208 <NVIC_Init>

	/* CAN register init */
	CAN_DeInit(CAN1);
20003968:	4b22      	ldr	r3, [pc, #136]	; (200039f4 <can_init+0x1b0>)
2000396a:	0018      	movs	r0, r3
2000396c:	f7fc fb50 	bl	20000010 <CAN_DeInit>

	/* CAN cell init */
	CAN_InitStructure.CAN_TTCM = DISABLE; // time-triggered communication mode = DISABLED
20003970:	2510      	movs	r5, #16
20003972:	197b      	adds	r3, r7, r5
20003974:	2200      	movs	r2, #0
20003976:	719a      	strb	r2, [r3, #6]
    CAN_InitStructure.CAN_ABOM = DISABLE; // automatic bus-off management mode = DISABLED
20003978:	197b      	adds	r3, r7, r5
2000397a:	2200      	movs	r2, #0
2000397c:	71da      	strb	r2, [r3, #7]
    CAN_InitStructure.CAN_AWUM = DISABLE; // automatic wake-up mode = DISABLED
2000397e:	197b      	adds	r3, r7, r5
20003980:	2200      	movs	r2, #0
20003982:	721a      	strb	r2, [r3, #8]
    CAN_InitStructure.CAN_NART = DISABLE; // non-automatic retransmission mode = DISABLED
20003984:	197b      	adds	r3, r7, r5
20003986:	2200      	movs	r2, #0
20003988:	725a      	strb	r2, [r3, #9]
    CAN_InitStructure.CAN_RFLM = DISABLE; // receive FIFO locked mode = DISABLED
2000398a:	197b      	adds	r3, r7, r5
2000398c:	2200      	movs	r2, #0
2000398e:	729a      	strb	r2, [r3, #10]
    CAN_InitStructure.CAN_TXFP = DISABLE; // transmit FIFO priority = DISABLED
20003990:	197b      	adds	r3, r7, r5
20003992:	2200      	movs	r2, #0
20003994:	72da      	strb	r2, [r3, #11]
    CAN_InitStructure.CAN_Mode = CAN_Mode_Normal; // normal CAN mode
20003996:	197b      	adds	r3, r7, r5
20003998:	2200      	movs	r2, #0
2000399a:	709a      	strb	r2, [r3, #2]

	/* CAN Baudrate = 1 MBps (CAN clocked at 30 MHz) */
	CAN_InitStructure.CAN_BS1 = CAN_BS1_3tq;
2000399c:	197b      	adds	r3, r7, r5
2000399e:	2202      	movs	r2, #2
200039a0:	711a      	strb	r2, [r3, #4]
	CAN_InitStructure.CAN_BS2 = CAN_BS2_4tq;
200039a2:	197b      	adds	r3, r7, r5
200039a4:	2203      	movs	r2, #3
200039a6:	715a      	strb	r2, [r3, #5]
	CAN_InitStructure.CAN_Prescaler = 7;
200039a8:	197b      	adds	r3, r7, r5
200039aa:	2207      	movs	r2, #7
200039ac:	801a      	strh	r2, [r3, #0]

    //Avaktiverar alla filter
    CANdisableAllFilterHandlers();
200039ae:	f7ff fdbf 	bl	20003530 <CANdisableAllFilterHandlers>

	uint8_t can_init_status = CAN_Init(CAN1, &CAN_InitStructure);
200039b2:	261f      	movs	r6, #31
200039b4:	19bc      	adds	r4, r7, r6
200039b6:	197b      	adds	r3, r7, r5
200039b8:	4a0e      	ldr	r2, [pc, #56]	; (200039f4 <can_init+0x1b0>)
200039ba:	0019      	movs	r1, r3
200039bc:	0010      	movs	r0, r2
200039be:	f7fc fb4f 	bl	20000060 <CAN_Init>
200039c2:	0003      	movs	r3, r0
200039c4:	7023      	strb	r3, [r4, #0]

	*((void (**)(void) ) CAN1_IRQ_VECTOR ) = can_irq_handler;
200039c6:	4b0c      	ldr	r3, [pc, #48]	; (200039f8 <can_init+0x1b4>)
200039c8:	4a0c      	ldr	r2, [pc, #48]	; (200039fc <can_init+0x1b8>)
200039ca:	601a      	str	r2, [r3, #0]
	// We need the following function because it's not equivalent to what NVIC_Init does with respect
	// to IRQ priority. Which seems bananas to me...
    NVIC_SetPriority( CAN1_RX0_IRQn, __CAN_IRQ_PRIORITY);
200039cc:	2102      	movs	r1, #2
200039ce:	2014      	movs	r0, #20
200039d0:	f7ff fc52 	bl	20003278 <NVIC_SetPriority>
	CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE);
200039d4:	4b07      	ldr	r3, [pc, #28]	; (200039f4 <can_init+0x1b0>)
200039d6:	2201      	movs	r2, #1
200039d8:	2102      	movs	r1, #2
200039da:	0018      	movs	r0, r3
200039dc:	f7fd f9a9 	bl	20000d32 <CAN_ITConfig>

    //Avaktiverar Session ID
    noSessionId();
200039e0:	f7ff fee4 	bl	200037ac <noSessionId>

	return can_init_status;
200039e4:	19bb      	adds	r3, r7, r6
200039e6:	781b      	ldrb	r3, [r3, #0]
}
200039e8:	0018      	movs	r0, r3
200039ea:	46bd      	mov	sp, r7
200039ec:	b009      	add	sp, #36	; 0x24
200039ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
200039f0:	40020400 	andmi	r0, r2, r0, lsl #8
200039f4:	40006400 	andmi	r6, r0, r0, lsl #8
200039f8:	2001c090 	mulcs	r1, r0, r0
200039fc:	2000360d 	andcs	r3, r0, sp, lsl #12

20003a00 <decode_door_config_msg>:



uint8_t decode_door_config_msg(CanRxMsg *msg, uint8_t *door_id_0, uint8_t *door_id_1, uint16_t *time_0, uint16_t *time_1, uint8_t *locked) {
20003a00:	b580      	push	{r7, lr}
20003a02:	b086      	sub	sp, #24
20003a04:	af00      	add	r7, sp, #0
20003a06:	60f8      	str	r0, [r7, #12]
20003a08:	60b9      	str	r1, [r7, #8]
20003a0a:	607a      	str	r2, [r7, #4]
20003a0c:	603b      	str	r3, [r7, #0]
    uint8_t *data_pointer =  &(msg->Data);
20003a0e:	68fb      	ldr	r3, [r7, #12]
20003a10:	330b      	adds	r3, #11
20003a12:	617b      	str	r3, [r7, #20]
    
    door_id_0 = data_pointer;
20003a14:	697b      	ldr	r3, [r7, #20]
20003a16:	60bb      	str	r3, [r7, #8]
    door_id_1 = data_pointer + 1;
20003a18:	697b      	ldr	r3, [r7, #20]
20003a1a:	3301      	adds	r3, #1
20003a1c:	607b      	str	r3, [r7, #4]
    
    time_0 = data_pointer + 2;
20003a1e:	697b      	ldr	r3, [r7, #20]
20003a20:	3302      	adds	r3, #2
20003a22:	603b      	str	r3, [r7, #0]
    time_1 = data_pointer + 4;
20003a24:	697b      	ldr	r3, [r7, #20]
20003a26:	3304      	adds	r3, #4
20003a28:	623b      	str	r3, [r7, #32]
    
    locked = data_pointer + 6;
20003a2a:	697b      	ldr	r3, [r7, #20]
20003a2c:	3306      	adds	r3, #6
20003a2e:	627b      	str	r3, [r7, #36]	; 0x24
    
    
    return 1;
20003a30:	2301      	movs	r3, #1
}
20003a32:	0018      	movs	r0, r3
20003a34:	46bd      	mov	sp, r7
20003a36:	b006      	add	sp, #24
20003a38:	bd80      	pop	{r7, pc}

20003a3a <handle_recieve_id_msg>:





uint8_t handle_recieve_id_msg(CanRxMsg *msg) {
20003a3a:	b580      	push	{r7, lr}
20003a3c:	b084      	sub	sp, #16
20003a3e:	af00      	add	r7, sp, #0
20003a40:	6078      	str	r0, [r7, #4]
    uint16_t id;
    uint8_t *data_pointer =  &(msg->Data);
20003a42:	687b      	ldr	r3, [r7, #4]
20003a44:	330b      	adds	r3, #11
20003a46:	60fb      	str	r3, [r7, #12]
    
    id = *data_pointer;
20003a48:	68fb      	ldr	r3, [r7, #12]
20003a4a:	781a      	ldrb	r2, [r3, #0]
20003a4c:	230a      	movs	r3, #10
20003a4e:	18fb      	adds	r3, r7, r3
20003a50:	801a      	strh	r2, [r3, #0]
    
    //TODO: Gör grejer med id
}
20003a52:	46c0      	nop			; (mov r8, r8)
20003a54:	0018      	movs	r0, r3
20003a56:	46bd      	mov	sp, r7
20003a58:	b004      	add	sp, #16
20003a5a:	bd80      	pop	{r7, pc}

20003a5c <__udivsi3>:
20003a5c:	2200      	movs	r2, #0
20003a5e:	0843      	lsrs	r3, r0, #1
20003a60:	428b      	cmp	r3, r1
20003a62:	d374      	bcc.n	20003b4e <__udivsi3+0xf2>
20003a64:	0903      	lsrs	r3, r0, #4
20003a66:	428b      	cmp	r3, r1
20003a68:	d35f      	bcc.n	20003b2a <__udivsi3+0xce>
20003a6a:	0a03      	lsrs	r3, r0, #8
20003a6c:	428b      	cmp	r3, r1
20003a6e:	d344      	bcc.n	20003afa <__udivsi3+0x9e>
20003a70:	0b03      	lsrs	r3, r0, #12
20003a72:	428b      	cmp	r3, r1
20003a74:	d328      	bcc.n	20003ac8 <__udivsi3+0x6c>
20003a76:	0c03      	lsrs	r3, r0, #16
20003a78:	428b      	cmp	r3, r1
20003a7a:	d30d      	bcc.n	20003a98 <__udivsi3+0x3c>
20003a7c:	22ff      	movs	r2, #255	; 0xff
20003a7e:	0209      	lsls	r1, r1, #8
20003a80:	ba12      	rev	r2, r2
20003a82:	0c03      	lsrs	r3, r0, #16
20003a84:	428b      	cmp	r3, r1
20003a86:	d302      	bcc.n	20003a8e <__udivsi3+0x32>
20003a88:	1212      	asrs	r2, r2, #8
20003a8a:	0209      	lsls	r1, r1, #8
20003a8c:	d065      	beq.n	20003b5a <__udivsi3+0xfe>
20003a8e:	0b03      	lsrs	r3, r0, #12
20003a90:	428b      	cmp	r3, r1
20003a92:	d319      	bcc.n	20003ac8 <__udivsi3+0x6c>
20003a94:	e000      	b.n	20003a98 <__udivsi3+0x3c>
20003a96:	0a09      	lsrs	r1, r1, #8
20003a98:	0bc3      	lsrs	r3, r0, #15
20003a9a:	428b      	cmp	r3, r1
20003a9c:	d301      	bcc.n	20003aa2 <__udivsi3+0x46>
20003a9e:	03cb      	lsls	r3, r1, #15
20003aa0:	1ac0      	subs	r0, r0, r3
20003aa2:	4152      	adcs	r2, r2
20003aa4:	0b83      	lsrs	r3, r0, #14
20003aa6:	428b      	cmp	r3, r1
20003aa8:	d301      	bcc.n	20003aae <__udivsi3+0x52>
20003aaa:	038b      	lsls	r3, r1, #14
20003aac:	1ac0      	subs	r0, r0, r3
20003aae:	4152      	adcs	r2, r2
20003ab0:	0b43      	lsrs	r3, r0, #13
20003ab2:	428b      	cmp	r3, r1
20003ab4:	d301      	bcc.n	20003aba <__udivsi3+0x5e>
20003ab6:	034b      	lsls	r3, r1, #13
20003ab8:	1ac0      	subs	r0, r0, r3
20003aba:	4152      	adcs	r2, r2
20003abc:	0b03      	lsrs	r3, r0, #12
20003abe:	428b      	cmp	r3, r1
20003ac0:	d301      	bcc.n	20003ac6 <__udivsi3+0x6a>
20003ac2:	030b      	lsls	r3, r1, #12
20003ac4:	1ac0      	subs	r0, r0, r3
20003ac6:	4152      	adcs	r2, r2
20003ac8:	0ac3      	lsrs	r3, r0, #11
20003aca:	428b      	cmp	r3, r1
20003acc:	d301      	bcc.n	20003ad2 <__udivsi3+0x76>
20003ace:	02cb      	lsls	r3, r1, #11
20003ad0:	1ac0      	subs	r0, r0, r3
20003ad2:	4152      	adcs	r2, r2
20003ad4:	0a83      	lsrs	r3, r0, #10
20003ad6:	428b      	cmp	r3, r1
20003ad8:	d301      	bcc.n	20003ade <__udivsi3+0x82>
20003ada:	028b      	lsls	r3, r1, #10
20003adc:	1ac0      	subs	r0, r0, r3
20003ade:	4152      	adcs	r2, r2
20003ae0:	0a43      	lsrs	r3, r0, #9
20003ae2:	428b      	cmp	r3, r1
20003ae4:	d301      	bcc.n	20003aea <__udivsi3+0x8e>
20003ae6:	024b      	lsls	r3, r1, #9
20003ae8:	1ac0      	subs	r0, r0, r3
20003aea:	4152      	adcs	r2, r2
20003aec:	0a03      	lsrs	r3, r0, #8
20003aee:	428b      	cmp	r3, r1
20003af0:	d301      	bcc.n	20003af6 <__udivsi3+0x9a>
20003af2:	020b      	lsls	r3, r1, #8
20003af4:	1ac0      	subs	r0, r0, r3
20003af6:	4152      	adcs	r2, r2
20003af8:	d2cd      	bcs.n	20003a96 <__udivsi3+0x3a>
20003afa:	09c3      	lsrs	r3, r0, #7
20003afc:	428b      	cmp	r3, r1
20003afe:	d301      	bcc.n	20003b04 <__udivsi3+0xa8>
20003b00:	01cb      	lsls	r3, r1, #7
20003b02:	1ac0      	subs	r0, r0, r3
20003b04:	4152      	adcs	r2, r2
20003b06:	0983      	lsrs	r3, r0, #6
20003b08:	428b      	cmp	r3, r1
20003b0a:	d301      	bcc.n	20003b10 <__udivsi3+0xb4>
20003b0c:	018b      	lsls	r3, r1, #6
20003b0e:	1ac0      	subs	r0, r0, r3
20003b10:	4152      	adcs	r2, r2
20003b12:	0943      	lsrs	r3, r0, #5
20003b14:	428b      	cmp	r3, r1
20003b16:	d301      	bcc.n	20003b1c <__udivsi3+0xc0>
20003b18:	014b      	lsls	r3, r1, #5
20003b1a:	1ac0      	subs	r0, r0, r3
20003b1c:	4152      	adcs	r2, r2
20003b1e:	0903      	lsrs	r3, r0, #4
20003b20:	428b      	cmp	r3, r1
20003b22:	d301      	bcc.n	20003b28 <__udivsi3+0xcc>
20003b24:	010b      	lsls	r3, r1, #4
20003b26:	1ac0      	subs	r0, r0, r3
20003b28:	4152      	adcs	r2, r2
20003b2a:	08c3      	lsrs	r3, r0, #3
20003b2c:	428b      	cmp	r3, r1
20003b2e:	d301      	bcc.n	20003b34 <__udivsi3+0xd8>
20003b30:	00cb      	lsls	r3, r1, #3
20003b32:	1ac0      	subs	r0, r0, r3
20003b34:	4152      	adcs	r2, r2
20003b36:	0883      	lsrs	r3, r0, #2
20003b38:	428b      	cmp	r3, r1
20003b3a:	d301      	bcc.n	20003b40 <__udivsi3+0xe4>
20003b3c:	008b      	lsls	r3, r1, #2
20003b3e:	1ac0      	subs	r0, r0, r3
20003b40:	4152      	adcs	r2, r2
20003b42:	0843      	lsrs	r3, r0, #1
20003b44:	428b      	cmp	r3, r1
20003b46:	d301      	bcc.n	20003b4c <__udivsi3+0xf0>
20003b48:	004b      	lsls	r3, r1, #1
20003b4a:	1ac0      	subs	r0, r0, r3
20003b4c:	4152      	adcs	r2, r2
20003b4e:	1a41      	subs	r1, r0, r1
20003b50:	d200      	bcs.n	20003b54 <__udivsi3+0xf8>
20003b52:	4601      	mov	r1, r0
20003b54:	4152      	adcs	r2, r2
20003b56:	4610      	mov	r0, r2
20003b58:	4770      	bx	lr
20003b5a:	e7ff      	b.n	20003b5c <__udivsi3+0x100>
20003b5c:	b501      	push	{r0, lr}
20003b5e:	2000      	movs	r0, #0
20003b60:	f000 f806 	bl	20003b70 <__aeabi_idiv0>
20003b64:	bd02      	pop	{r1, pc}
20003b66:	46c0      	nop			; (mov r8, r8)

20003b68 <__aeabi_uidivmod>:
20003b68:	2900      	cmp	r1, #0
20003b6a:	d0f7      	beq.n	20003b5c <__udivsi3+0x100>
20003b6c:	e776      	b.n	20003a5c <__udivsi3>
20003b6e:	4770      	bx	lr

20003b70 <__aeabi_idiv0>:
20003b70:	4770      	bx	lr
20003b72:	46c0      	nop			; (mov r8, r8)

20003b74 <memset>:
20003b74:	0003      	movs	r3, r0
20003b76:	1812      	adds	r2, r2, r0
20003b78:	4293      	cmp	r3, r2
20003b7a:	d100      	bne.n	20003b7e <memset+0xa>
20003b7c:	4770      	bx	lr
20003b7e:	7019      	strb	r1, [r3, #0]
20003b80:	3301      	adds	r3, #1
20003b82:	e7f9      	b.n	20003b78 <memset+0x4>

20003b84 <msTicks>:
20003b84:	00000000 	andeq	r0, r0, r0

20003b88 <SessionID>:
20003b88:	00000000 	andeq	r0, r0, r0

20003b8c <handlerList>:
	...

20003c6c <SessionIDActive>:
20003c6c:	00000000 	andeq	r0, r0, r0

20003c70 <APBAHBPrescTable>:
20003c70:	00000000 	andeq	r0, r0, r0
20003c74:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003c78:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003c7c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20003c80 <GPIO_Pins>:
20003c80:	00020001 	andeq	r0, r2, r1
20003c84:	00080004 	andeq	r0, r8, r4
20003c88:	00200010 	eoreq	r0, r0, r0, lsl r0
20003c8c:	00800040 	addeq	r0, r0, r0, asr #32
20003c90:	02000100 	andeq	r0, r0, #0, 2
20003c94:	08000400 	stmdaeq	r0, {sl}
20003c98:	20001000 	andcs	r1, r0, r0
20003c9c:	80004000 	andhi	r4, r0, r0

20003ca0 <GPIO_Ports>:
20003ca0:	40021000 	andmi	r1, r2, r0
20003ca4:	40020000 	andmi	r0, r2, r0
20003ca8:	40020800 	andmi	r0, r2, r0, lsl #16
20003cac:	40020c00 	andmi	r0, r2, r0, lsl #24

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000ba6 	andeq	r0, r0, r6, lsr #23
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000370 	andeq	r0, r0, r0, ror r3
      10:	00002c0c 	andeq	r2, r0, ip, lsl #24
      14:	0006a500 	andeq	sl, r6, r0, lsl #10
      18:	00001000 	andeq	r1, r0, r0
      1c:	0011d220 	andseq	sp, r1, r0, lsr #4
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
      2c:	0000a903 	andeq	sl, r0, r3, lsl #18
      30:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
      34:	02000000 	andeq	r0, r0, #0
      38:	04bd0801 	ldrteq	r0, [sp], #2049	; 0x801
      3c:	02020000 	andeq	r0, r2, #0
      40:	0004d605 	andeq	sp, r4, r5, lsl #12
      44:	05a40300 	streq	r0, [r4, #768]!	; 0x300
      48:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
      4c:	00000050 	andeq	r0, r0, r0, asr r0
      50:	c1070202 	tstgt	r7, r2, lsl #4
      54:	03000002 	movweq	r0, #2
      58:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
      5c:	00624d02 	rsbeq	r4, r2, r2, lsl #26
      60:	04020000 	streq	r0, [r2], #-0
      64:	00016a05 	andeq	r6, r1, r5, lsl #20
      68:	02200300 	eoreq	r0, r0, #0, 6
      6c:	4f020000 	svcmi	0x00020000
      70:	00000074 	andeq	r0, r0, r4, ror r0
      74:	ba070402 	blt	1c1084 <startup-0x1fe3ef7c>
      78:	02000001 	andeq	r0, r0, #1
      7c:	01650508 	cmneq	r5, r8, lsl #10
      80:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      84:	0001b507 	andeq	fp, r1, r7, lsl #10
      88:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
      90:	bf070402 	svclt	0x00070402
      94:	03000001 	movweq	r0, #1
      98:	000000ab 	andeq	r0, r0, fp, lsr #1
      9c:	002c1803 	eoreq	r1, ip, r3, lsl #16
      a0:	a6030000 	strge	r0, [r3], -r0
      a4:	03000005 	movweq	r0, #5
      a8:	00004524 	andeq	r4, r0, r4, lsr #10
      ac:	05be0300 	ldreq	r0, [lr, #768]!	; 0x300
      b0:	2c030000 	stccs	0, cr0, [r3], {-0}
      b4:	00000057 	andeq	r0, r0, r7, asr r0
      b8:	0000ad05 	andeq	sl, r0, r5, lsl #26
      bc:	02220300 	eoreq	r0, r2, #0, 6
      c0:	30030000 	andcc	r0, r3, r0
      c4:	00000069 	andeq	r0, r0, r9, rrx
      c8:	0000bd05 	andeq	fp, r0, r5, lsl #26
      cc:	00bd0600 	adcseq	r0, sp, r0, lsl #12
      d0:	00dd0000 	sbcseq	r0, sp, r0
      d4:	90070000 	andls	r0, r7, r0
      d8:	07000000 	streq	r0, [r0, -r0]
      dc:	01350800 	teqeq	r5, r0, lsl #16
      e0:	fa040000 	blx	1000e8 <startup-0x1fefff18>
      e4:	0000b806 	andeq	fp, r0, r6, lsl #16
      e8:	045a0900 	ldrbeq	r0, [sl], #-2304	; 0xfffff700
      ec:	3b050000 	blcc	1400f4 <startup-0x1febff0c>
      f0:	000000bd 	strheq	r0, [r0], -sp
      f4:	3701070a 	strcc	r0, [r1, -sl, lsl #14]
      f8:	06000000 	streq	r0, [r0], -r0
      fc:	010f035d 	tsteq	pc, sp, asr r3	; <UNPREDICTABLE>
     100:	440b0000 	strmi	r0, [fp], #-0
     104:	0000000b 	andeq	r0, r0, fp
     108:	5445530c 	strbpl	r5, [r5], #-780	; 0xfffffcf4
     10c:	0d000100 	stfeqs	f0, [r0, #-0]
     110:	000016a3 	andeq	r1, r0, r3, lsr #13
     114:	f4035d06 			; <UNDEFINED> instruction: 0xf4035d06
     118:	0d000000 	stceq	0, cr0, [r0, #-0]
     11c:	0000063f 	andeq	r0, r0, pc, lsr r6
     120:	f4035d06 			; <UNDEFINED> instruction: 0xf4035d06
     124:	0a000000 	beq	12c <startup-0x1ffffed4>
     128:	00370107 	eorseq	r0, r7, r7, lsl #2
     12c:	5f060000 	svcpl	0x00060000
     130:	00014203 	andeq	r4, r1, r3, lsl #4
     134:	050c0b00 	streq	r0, [ip, #-2816]	; 0xfffff500
     138:	0b000000 	bleq	140 <startup-0x1ffffec0>
     13c:	000001f5 	strdeq	r0, [r0], -r5
     140:	190d0001 	stmdbne	sp, {r0}
     144:	06000004 	streq	r0, [r0], -r4
     148:	0127035f 			; <UNDEFINED> instruction: 0x0127035f
     14c:	100e0000 	andne	r0, lr, r0
     150:	8c039506 	cfstr32hi	mvfx9, [r3], {6}
     154:	0f000001 	svceq	0x00000001
     158:	00524954 	subseq	r4, r2, r4, asr r9
     15c:	c8039706 	stmdagt	r3, {r1, r2, r8, r9, sl, ip, pc}
     160:	00000000 	andeq	r0, r0, r0
     164:	00031c10 	andeq	r1, r3, r0, lsl ip
     168:	03980600 	orrseq	r0, r8, #0, 12
     16c:	000000c8 	andeq	r0, r0, r8, asr #1
     170:	01db1004 	bicseq	r1, fp, r4
     174:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
     178:	0000c803 	andeq	ip, r0, r3, lsl #16
     17c:	39100800 	ldmdbcc	r0, {fp}
     180:	06000004 	streq	r0, [r0], -r4
     184:	00c8039a 	smulleq	r0, r8, sl, r3
     188:	000c0000 	andeq	r0, ip, r0
     18c:	00054f0d 	andeq	r4, r5, sp, lsl #30
     190:	039b0600 	orrseq	r0, fp, #0, 12
     194:	0000014e 	andeq	r0, r0, lr, asr #2
     198:	a106100e 	tstge	r6, lr
     19c:	0001d603 	andeq	sp, r1, r3, lsl #12
     1a0:	49520f00 	ldmdbmi	r2, {r8, r9, sl, fp}^
     1a4:	a3060052 	movwge	r0, #24658	; 0x6052
     1a8:	0000c803 	andeq	ip, r0, r3, lsl #16
     1ac:	b7100000 	ldrlt	r0, [r0, -r0]
     1b0:	06000002 	streq	r0, [r0], -r2
     1b4:	00c803a4 	sbceq	r0, r8, r4, lsr #7
     1b8:	10040000 	andne	r0, r4, r0
     1bc:	0000024d 	andeq	r0, r0, sp, asr #4
     1c0:	c803a506 	stmdagt	r3, {r1, r2, r8, sl, sp, pc}
     1c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     1c8:	0005af10 	andeq	sl, r5, r0, lsl pc
     1cc:	03a60600 			; <UNDEFINED> instruction: 0x03a60600
     1d0:	000000c8 	andeq	r0, r0, r8, asr #1
     1d4:	310d000c 	tstcc	sp, ip
     1d8:	06000003 	streq	r0, [r0], -r3
     1dc:	019803a7 	orrseq	r0, r8, r7, lsr #7
     1e0:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
     1e4:	0603ad06 	streq	sl, [r3], -r6, lsl #26
     1e8:	0f000002 	svceq	0x00000002
     1ec:	00315246 	eorseq	r5, r1, r6, asr #4
     1f0:	c803af06 	stmdagt	r3, {r1, r2, r8, r9, sl, fp, sp, pc}
     1f4:	00000000 	andeq	r0, r0, r0
     1f8:	3252460f 	subscc	r4, r2, #15728640	; 0xf00000
     1fc:	03b00600 	movseq	r0, #0, 12
     200:	000000c8 	andeq	r0, r0, r8, asr #1
     204:	d90d0004 	stmdble	sp, {r2}
     208:	06000002 	streq	r0, [r0], -r2
     20c:	01e203b1 	strheq	r0, [r2, #49]!	; 0x31
     210:	20110000 	andscs	r0, r1, r0
     214:	03b70603 			; <UNDEFINED> instruction: 0x03b70603
     218:	00000348 	andeq	r0, r0, r8, asr #6
     21c:	52434d0f 	subpl	r4, r3, #960	; 0x3c0
     220:	03b90600 			; <UNDEFINED> instruction: 0x03b90600
     224:	000000c8 	andeq	r0, r0, r8, asr #1
     228:	534d0f00 	movtpl	r0, #57088	; 0xdf00
     22c:	ba060052 	blt	18037c <startup-0x1fe7fc84>
     230:	0000c803 	andeq	ip, r0, r3, lsl #16
     234:	540f0400 	strpl	r0, [pc], #-1024	; 23c <startup-0x1ffffdc4>
     238:	06005253 			; <UNDEFINED> instruction: 0x06005253
     23c:	00c803bb 	strheq	r0, [r8], #59	; 0x3b
     240:	10080000 	andne	r0, r8, r0
     244:	0000021b 	andeq	r0, r0, fp, lsl r2
     248:	c803bc06 	stmdagt	r3, {r1, r2, sl, fp, ip, sp, pc}
     24c:	0c000000 	stceq	0, cr0, [r0], {-0}
     250:	0002d410 	andeq	sp, r2, r0, lsl r4
     254:	03bd0600 			; <UNDEFINED> instruction: 0x03bd0600
     258:	000000c8 	andeq	r0, r0, r8, asr #1
     25c:	45490f10 	strbmi	r0, [r9, #-3856]	; 0xfffff0f0
     260:	be060052 	mcrlt	0, 0, r0, cr6, cr2, {2}
     264:	0000c803 	andeq	ip, r0, r3, lsl #16
     268:	450f1400 	strmi	r1, [pc, #-1024]	; fffffe70 <GPIO_Ports+0xdfffc1d0>
     26c:	06005253 			; <UNDEFINED> instruction: 0x06005253
     270:	00c803bf 	strheq	r0, [r8], #63	; 0x3f
     274:	0f180000 	svceq	0x00180000
     278:	00525442 	subseq	r5, r2, r2, asr #8
     27c:	c803c006 	stmdagt	r3, {r1, r2, lr, pc}
     280:	1c000000 	stcne	0, cr0, [r0], {-0}
     284:	00048110 	andeq	r8, r4, r0, lsl r1
     288:	03c10600 	biceq	r0, r1, #0, 12
     28c:	00000348 	andeq	r0, r0, r8, asr #6
     290:	028b1220 	addeq	r1, fp, #32, 4
     294:	c2060000 	andgt	r0, r6, #0
     298:	00035803 	andeq	r5, r3, r3, lsl #16
     29c:	12018000 	andne	r8, r1, #0
     2a0:	000005cf 	andeq	r0, r0, pc, asr #11
     2a4:	6803c306 	stmdavs	r3, {r1, r2, r8, r9, lr, pc}
     2a8:	b0000003 	andlt	r0, r0, r3
     2ac:	048b1201 	streq	r1, [fp], #513	; 0x201
     2b0:	c4060000 	strgt	r0, [r6], #-0
     2b4:	00037803 	andeq	r7, r3, r3, lsl #16
     2b8:	1301d000 	movwne	sp, #4096	; 0x1000
     2bc:	00524d46 	subseq	r4, r2, r6, asr #26
     2c0:	c803c506 	stmdagt	r3, {r1, r2, r8, sl, lr, pc}
     2c4:	00000000 	andeq	r0, r0, r0
     2c8:	03171202 	tsteq	r7, #536870912	; 0x20000000
     2cc:	c6060000 	strgt	r0, [r6], -r0
     2d0:	0000c803 	andeq	ip, r0, r3, lsl #16
     2d4:	12020400 	andne	r0, r2, #0, 8
     2d8:	00000495 	muleq	r0, r5, r4
     2dc:	bd03c706 	stclt	7, cr12, [r3, #-24]	; 0xffffffe8
     2e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     2e4:	02bc1202 	adcseq	r1, ip, #536870912	; 0x20000000
     2e8:	c8060000 	stmdagt	r6, {}	; <UNPREDICTABLE>
     2ec:	0000c803 	andeq	ip, r0, r3, lsl #16
     2f0:	12020c00 	andne	r0, r2, #0, 24
     2f4:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     2f8:	bd03c906 	vstrlt.16	s24, [r3, #-12]	; <UNPREDICTABLE>
     2fc:	10000000 	andne	r0, r0, r0
     300:	04441202 	strbeq	r1, [r4], #-514	; 0xfffffdfe
     304:	ca060000 	bgt	18030c <startup-0x1fe7fcf4>
     308:	0000c803 	andeq	ip, r0, r3, lsl #16
     30c:	12021400 	andne	r1, r2, #0, 8
     310:	000004a9 	andeq	r0, r0, r9, lsr #9
     314:	bd03cb06 	vstrlt	d12, [r3, #-24]	; 0xffffffe8
     318:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     31c:	04451202 	strbeq	r1, [r5], #-514	; 0xfffffdfe
     320:	cc060000 	stcgt	0, cr0, [r6], {-0}
     324:	0000c803 	andeq	ip, r0, r3, lsl #16
     328:	12021c00 	andne	r1, r2, #0, 24
     32c:	00000545 	andeq	r0, r0, r5, asr #10
     330:	cd03cd06 	stcgt	13, cr12, [r3, #-24]	; 0xffffffe8
     334:	20000000 	andcs	r0, r0, r0
     338:	02fa1202 	rscseq	r1, sl, #536870912	; 0x20000000
     33c:	ce060000 	cdpgt	0, 0, cr0, cr6, cr0, {0}
     340:	00038803 	andeq	r8, r3, r3, lsl #16
     344:	00024000 	andeq	r4, r2, r0
     348:	0000bd06 	andeq	fp, r0, r6, lsl #26
     34c:	00035800 	andeq	r5, r3, r0, lsl #16
     350:	00900700 	addseq	r0, r0, r0, lsl #14
     354:	00570000 	subseq	r0, r7, r0
     358:	00018c06 	andeq	r8, r1, r6, lsl #24
     35c:	00036800 	andeq	r6, r3, r0, lsl #16
     360:	00900700 	addseq	r0, r0, r0, lsl #14
     364:	00020000 	andeq	r0, r2, r0
     368:	0001d606 	andeq	sp, r1, r6, lsl #12
     36c:	00037800 	andeq	r7, r3, r0, lsl #16
     370:	00900700 	addseq	r0, r0, r0, lsl #14
     374:	00010000 	andeq	r0, r1, r0
     378:	0000bd06 	andeq	fp, r0, r6, lsl #26
     37c:	00038800 	andeq	r8, r3, r0, lsl #16
     380:	00900700 	addseq	r0, r0, r0, lsl #14
     384:	000b0000 	andeq	r0, fp, r0
     388:	00020606 	andeq	r0, r2, r6, lsl #12
     38c:	00039800 	andeq	r9, r3, r0, lsl #16
     390:	00900700 	addseq	r0, r0, r0, lsl #14
     394:	001b0000 	andseq	r0, fp, r0
     398:	0000c20d 	andeq	ip, r0, sp, lsl #4
     39c:	03cf0600 	biceq	r0, pc, #0, 12
     3a0:	00000212 	andeq	r0, r0, r2, lsl r2
     3a4:	3d070c14 	stccc	12, cr0, [r7, #-80]	; 0xffffffb0
     3a8:	00000431 	andeq	r0, r0, r1, lsr r4
     3ac:	00047315 	andeq	r7, r4, r5, lsl r3
     3b0:	a23f0700 	eorsge	r0, pc, #0, 14
     3b4:	00000000 	andeq	r0, r0, r0
     3b8:	0001cc15 	andeq	ip, r1, r5, lsl ip
     3bc:	97420700 	strbls	r0, [r2, -r0, lsl #14]
     3c0:	02000000 	andeq	r0, r0, #0
     3c4:	0006fe15 	andeq	pc, r6, r5, lsl lr	; <UNPREDICTABLE>
     3c8:	97450700 	strbls	r0, [r5, -r0, lsl #14]
     3cc:	03000000 	movweq	r0, #0
     3d0:	00015515 	andeq	r5, r1, r5, lsl r5
     3d4:	974a0700 	strbls	r0, [sl, -r0, lsl #14]
     3d8:	04000000 	streq	r0, [r0], #-0
     3dc:	00015d15 	andeq	r5, r1, r5, lsl sp
     3e0:	974e0700 	strbls	r0, [lr, -r0, lsl #14]
     3e4:	05000000 	streq	r0, [r0, #-0]
     3e8:	00068115 	andeq	r8, r6, r5, lsl r1
     3ec:	42510700 	subsmi	r0, r1, #0, 14
     3f0:	06000001 	streq	r0, [r0], -r1
     3f4:	00025215 	andeq	r5, r2, r5, lsl r2
     3f8:	42540700 	subsmi	r0, r4, #0, 14
     3fc:	07000001 	streq	r0, [r0, -r1]
     400:	0005c615 	andeq	ip, r5, r5, lsl r6
     404:	42570700 	subsmi	r0, r7, #0, 14
     408:	08000001 	stmdaeq	r0, {r0}
     40c:	00072215 	andeq	r2, r7, r5, lsl r2
     410:	425a0700 	subsmi	r0, sl, #0, 14
     414:	09000001 	stmdbeq	r0, {r0}
     418:	0005ee15 	andeq	lr, r5, r5, lsl lr
     41c:	425d0700 	subsmi	r0, sp, #0, 14
     420:	0a000001 	beq	42c <startup-0x1ffffbd4>
     424:	00066715 	andeq	r6, r6, r5, lsl r7
     428:	42600700 	rsbmi	r0, r0, #0, 14
     42c:	0b000001 	bleq	438 <startup-0x1ffffbc8>
     430:	051c0300 	ldreq	r0, [ip, #-768]	; 0xfffffd00
     434:	62070000 	andvs	r0, r7, #0
     438:	000003a4 	andeq	r0, r0, r4, lsr #7
     43c:	67070e14 	smladvs	r7, r4, lr, r0
     440:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
     444:	0004fb15 	andeq	pc, r4, r5, lsl fp	; <UNPREDICTABLE>
     448:	a2690700 	rsbge	r0, r9, #0, 14
     44c:	00000000 	andeq	r0, r0, r0
     450:	00044a15 	andeq	r4, r4, r5, lsl sl
     454:	a26d0700 	rsbge	r0, sp, #0, 14
     458:	02000000 	andeq	r0, r0, #0
     45c:	00012015 	andeq	r2, r1, r5, lsl r0
     460:	a2710700 	rsbsge	r0, r1, #0, 14
     464:	04000000 	streq	r0, [r0], #-0
     468:	00018215 	andeq	r8, r1, r5, lsl r2
     46c:	a2760700 	rsbsge	r0, r6, #0, 14
     470:	06000000 	streq	r0, [r0], -r0
     474:	00052c15 	andeq	r2, r5, r5, lsl ip
     478:	a27b0700 	rsbsge	r0, fp, #0, 14
     47c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     480:	00040815 	andeq	r0, r4, r5, lsl r8
     484:	977e0700 	ldrbls	r0, [lr, -r0, lsl #14]!
     488:	0a000000 	beq	490 <startup-0x1ffffb70>
     48c:	00058315 	andeq	r8, r5, r5, lsl r3
     490:	97800700 	strls	r0, [r0, r0, lsl #14]
     494:	0b000000 	bleq	49c <startup-0x1ffffb64>
     498:	00057315 	andeq	r7, r5, r5, lsl r3
     49c:	97830700 	strls	r0, [r3, r0, lsl #14]
     4a0:	0c000000 	stceq	0, cr0, [r0], {-0}
     4a4:	00060915 	andeq	r0, r6, r5, lsl r9
     4a8:	42860700 	addmi	r0, r6, #0, 14
     4ac:	0d000001 	stceq	0, cr0, [r0, #-4]
     4b0:	035a0300 	cmpeq	sl, #0, 6
     4b4:	88070000 	stmdahi	r7, {}	; <UNPREDICTABLE>
     4b8:	0000043c 	andeq	r0, r0, ip, lsr r4
     4bc:	8d071414 	cfstrshi	mvf1, [r7, #-80]	; 0xffffffb0
     4c0:	0000050d 	andeq	r0, r0, sp, lsl #10
     4c4:	00043e15 	andeq	r3, r4, r5, lsl lr
     4c8:	bd8f0700 	stclt	7, cr0, [pc]	; 4d0 <startup-0x1ffffb30>
     4cc:	00000000 	andeq	r0, r0, r0
     4d0:	0002f415 	andeq	pc, r2, r5, lsl r4	; <UNPREDICTABLE>
     4d4:	bd920700 	ldclt	7, cr0, [r2]
     4d8:	04000000 	streq	r0, [r0], #-0
     4dc:	45444916 	strbmi	r4, [r4, #-2326]	; 0xfffff6ea
     4e0:	97950700 	ldrls	r0, [r5, r0, lsl #14]
     4e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     4e8:	52545216 	subspl	r5, r4, #1610612737	; 0x60000001
     4ec:	97990700 	ldrls	r0, [r9, r0, lsl #14]
     4f0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     4f4:	434c4416 	movtmi	r4, #50198	; 0xc416
     4f8:	979d0700 	ldrls	r0, [sp, r0, lsl #14]
     4fc:	0a000000 	beq	504 <startup-0x1ffffafc>
     500:	000cdc15 	andeq	sp, ip, r5, lsl ip
     504:	0da10700 	stceq	7, cr0, [r1]
     508:	0b000005 	bleq	524 <startup-0x1ffffadc>
     50c:	00970600 	addseq	r0, r7, r0, lsl #12
     510:	051d0000 	ldreq	r0, [sp, #-0]
     514:	90070000 	andls	r0, r7, r0
     518:	07000000 	streq	r0, [r0, -r0]
     51c:	06480300 	strbeq	r0, [r8], -r0, lsl #6
     520:	a3070000 	movwge	r0, #28672	; 0x7000
     524:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
     528:	a8071414 	stmdage	r7, {r2, r4, sl, ip}
     52c:	00000585 	andeq	r0, r0, r5, lsl #11
     530:	00043e15 	andeq	r3, r4, r5, lsl lr
     534:	bdaa0700 	stclt	7, cr0, [sl]
     538:	00000000 	andeq	r0, r0, r0
     53c:	0002f415 	andeq	pc, r2, r5, lsl r4	; <UNPREDICTABLE>
     540:	bdad0700 	stclt	7, cr0, [sp]
     544:	04000000 	streq	r0, [r0], #-0
     548:	45444916 	strbmi	r4, [r4, #-2326]	; 0xfffff6ea
     54c:	97b00700 	ldrls	r0, [r0, r0, lsl #14]!
     550:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     554:	52545216 	subspl	r5, r4, #1610612737	; 0x60000001
     558:	97b40700 	ldrls	r0, [r4, r0, lsl #14]!
     55c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     560:	434c4416 	movtmi	r4, #50198	; 0xc416
     564:	97b80700 	ldrls	r0, [r8, r0, lsl #14]!
     568:	0a000000 	beq	570 <startup-0x1ffffa90>
     56c:	000cdc15 	andeq	sp, ip, r5, lsl ip
     570:	0dbb0700 	ldceq	7, cr0, [fp]
     574:	0b000005 	bleq	590 <startup-0x1ffffa70>
     578:	494d4616 	stmdbmi	sp, {r1, r2, r4, r9, sl, lr}^
     57c:	97be0700 	ldrls	r0, [lr, r0, lsl #14]!
     580:	13000000 	movwne	r0, #0
     584:	000b0300 	andeq	r0, fp, r0, lsl #6
     588:	c1070000 	mrsgt	r0, (UNDEF: 7)
     58c:	00000528 	andeq	r0, r0, r8, lsr #10
     590:	00063a17 	andeq	r3, r6, r7, lsl sl
     594:	07230100 	streq	r0, [r3, -r0, lsl #2]!
     598:	0000011b 	andeq	r0, r0, fp, lsl r1
     59c:	200011a8 	andcs	r1, r0, r8, lsr #3
     5a0:	0000003a 	andeq	r0, r0, sl, lsr r0
     5a4:	05d89c01 	ldrbeq	r9, [r8, #3073]	; 0xc01
     5a8:	14180000 	ldrne	r0, [r8], #-0
     5ac:	01000005 	tsteq	r0, r5
     5b0:	00bd0723 	adcseq	r0, sp, r3, lsr #14
     5b4:	91020000 	mrsls	r0, (UNDEF: 2)
     5b8:	0353186c 	cmpeq	r3, #108, 16	; 0x6c0000
     5bc:	23010000 	movwcs	r0, #4096	; 0x1000
     5c0:	0000bd07 	andeq	fp, r0, r7, lsl #26
     5c4:	68910200 	ldmvs	r1, {r9}
     5c8:	0004ea19 	andeq	lr, r4, r9, lsl sl
     5cc:	07250100 	streq	r0, [r5, -r0, lsl #2]!
     5d0:	0000011b 	andeq	r0, r0, fp, lsl r1
     5d4:	00779102 	rsbseq	r9, r7, r2, lsl #2
     5d8:	0006511a 	andeq	r5, r6, sl, lsl r1
     5dc:	06d50100 	ldrbeq	r0, [r5], r0, lsl #2
     5e0:	200010bc 	strhcs	r1, [r0], -ip
     5e4:	000000ec 	andeq	r0, r0, ip, ror #1
     5e8:	060d9c01 	streq	r9, [sp], -r1, lsl #24
     5ec:	04180000 	ldreq	r0, [r8], #-0
     5f0:	01000006 	tsteq	r0, r6
     5f4:	060d06d5 			; <UNDEFINED> instruction: 0x060d06d5
     5f8:	91020000 	mrsls	r0, (UNDEF: 2)
     5fc:	03211874 			; <UNDEFINED> instruction: 0x03211874
     600:	d5010000 	strle	r0, [r1, #-0]
     604:	0000bd06 	andeq	fp, r0, r6, lsl #26
     608:	70910200 	addsvc	r0, r1, r0, lsl #4
     60c:	98041b00 	stmdals	r4, {r8, r9, fp, ip}
     610:	1c000003 	stcne	0, cr0, [r0], {3}
     614:	00000429 	andeq	r0, r0, r9, lsr #8
     618:	1b066c01 	blne	19b624 <startup-0x1fe649dc>
     61c:	cc000001 	stcgt	0, cr0, [r0], {1}
     620:	f020000e 			; <UNDEFINED> instruction: 0xf020000e
     624:	01000001 	tsteq	r0, r1
     628:	00065b9c 	muleq	r6, ip, fp
     62c:	06041800 	streq	r1, [r4], -r0, lsl #16
     630:	6c010000 	stcvs	0, cr0, [r1], {-0}
     634:	00060d06 	andeq	r0, r6, r6, lsl #26
     638:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     63c:	00032118 	andeq	r2, r3, r8, lsl r1
     640:	066c0100 	strbteq	r0, [ip], -r0, lsl #2
     644:	000000bd 	strheq	r0, [r0], -sp
     648:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
     64c:	000004f2 	strdeq	r0, [r0], -r2
     650:	1b066e01 	blne	19be5c <startup-0x1fe641a4>
     654:	02000001 	andeq	r0, r0, #1
     658:	1a006f91 	bne	1c4a4 <startup-0x1ffe3b5c>
     65c:	00000014 	andeq	r0, r0, r4, lsl r0
     660:	5c062f01 	stcpl	15, cr2, [r6], {1}
     664:	7020000e 	eorvc	r0, r0, lr
     668:	01000000 	mrseq	r0, (UNDEF: 0)
     66c:	00069f9c 	muleq	r6, ip, pc	; <UNPREDICTABLE>
     670:	06041800 	streq	r1, [r4], -r0, lsl #16
     674:	2f010000 	svccs	0x00010000
     678:	00060d06 	andeq	r0, r6, r6, lsl #26
     67c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     680:	00046a18 	andeq	r6, r4, r8, lsl sl
     684:	062f0100 	strteq	r0, [pc], -r0, lsl #2
     688:	000000bd 	strheq	r0, [r0], -sp
     68c:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
     690:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     694:	bd063101 	stflts	f3, [r6, #-4]
     698:	02000000 	andeq	r0, r0, #0
     69c:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
     6a0:	000005dc 	ldrdeq	r0, [r0], -ip
     6a4:	0f05ca01 	svceq	0x0005ca01
     6a8:	6c000001 	stcvs	0, cr0, [r0], {1}
     6ac:	f020000d 			; <UNDEFINED> instruction: 0xf020000d
     6b0:	01000000 	mrseq	r0, (UNDEF: 0)
     6b4:	0006e79c 	muleq	r6, ip, r7
     6b8:	06041800 	streq	r1, [r4], -r0, lsl #16
     6bc:	ca010000 	bgt	406c4 <startup-0x1ffbf93c>
     6c0:	00060d05 	andeq	r0, r6, r5, lsl #26
     6c4:	6c910200 	lfmvs	f0, 4, [r1], {0}
     6c8:	00046a18 	andeq	r6, r4, r8, lsl sl
     6cc:	05ca0100 	strbeq	r0, [sl, #256]	; 0x100
     6d0:	000000bd 	strheq	r0, [r0], -sp
     6d4:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
     6d8:	000004f1 	strdeq	r0, [r0], -r1
     6dc:	0f05cc01 	svceq	0x0005cc01
     6e0:	02000001 	andeq	r0, r0, #1
     6e4:	1a007791 	bne	1e530 <startup-0x1ffe1ad0>
     6e8:	000005f7 	strdeq	r0, [r0], -r7
     6ec:	3205a101 	andcc	sl, r5, #1073741824	; 0x40000000
     6f0:	3a20000d 	bcc	80072c <startup-0x1f7ff8d4>
     6f4:	01000000 	mrseq	r0, (UNDEF: 0)
     6f8:	00072b9c 	muleq	r7, ip, fp
     6fc:	06041800 	streq	r1, [r4], -r0, lsl #16
     700:	a1010000 	mrsge	r0, (UNDEF: 1)
     704:	00060d05 	andeq	r0, r6, r5, lsl #26
     708:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     70c:	00032118 	andeq	r2, r3, r8, lsl r1
     710:	05a10100 	streq	r0, [r1, #256]!	; 0x100
     714:	000000bd 	strheq	r0, [r0], -sp
     718:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
     71c:	00000212 	andeq	r0, r0, r2, lsl r2
     720:	4205a101 	andmi	sl, r5, #1073741824	; 0x40000000
     724:	02000001 	andeq	r0, r0, #1
     728:	1d006f91 	stcne	15, cr6, [r0, #-580]	; 0xfffffdbc
     72c:	00000196 	muleq	r0, r6, r1
     730:	9704d301 	strls	sp, [r4, -r1, lsl #6]
     734:	0c000000 	stceq	0, cr0, [r0], {-0}
     738:	2620000d 	strtcs	r0, [r0], -sp
     73c:	01000000 	mrseq	r0, (UNDEF: 0)
     740:	0007649c 	muleq	r7, ip, r4
     744:	06041800 	streq	r1, [r4], -r0, lsl #16
     748:	d3010000 	movwle	r0, #4096	; 0x1000
     74c:	00060d04 	andeq	r0, r6, r4, lsl #26
     750:	6c910200 	lfmvs	f0, 4, [r1], {0}
     754:	0013fd19 	andseq	pc, r3, r9, lsl sp	; <UNPREDICTABLE>
     758:	04d50100 	ldrbeq	r0, [r5], #256	; 0x100
     75c:	00000097 	muleq	r0, r7, r0
     760:	00779102 	rsbseq	r9, r7, r2, lsl #2
     764:	00068a1d 	andeq	r8, r6, sp, lsl sl
     768:	04be0100 	ldrteq	r0, [lr], #256	; 0x100
     76c:	00000097 	muleq	r0, r7, r0
     770:	20000ce6 	andcs	r0, r0, r6, ror #25
     774:	00000026 	andeq	r0, r0, r6, lsr #32
     778:	079d9c01 	ldreq	r9, [sp, r1, lsl #24]
     77c:	04180000 	ldreq	r0, [r8], #-0
     780:	01000006 	tsteq	r0, r6
     784:	060d04be 			; <UNDEFINED> instruction: 0x060d04be
     788:	91020000 	mrsls	r0, (UNDEF: 2)
     78c:	13fd196c 	mvnsne	r1, #108, 18	; 0x1b0000
     790:	c0010000 	andgt	r0, r1, r0
     794:	00009704 	andeq	r9, r0, r4, lsl #14
     798:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     79c:	01e01d00 	mvneq	r1, r0, lsl #26
     7a0:	a4010000 	strge	r0, [r1], #-0
     7a4:	00009704 	andeq	r9, r0, r4, lsl #14
     7a8:	000cb800 	andeq	fp, ip, r0, lsl #16
     7ac:	00002e20 	andeq	r2, r0, r0, lsr #28
     7b0:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
     7b4:	18000007 	stmdane	r0, {r0, r1, r2}
     7b8:	00000604 	andeq	r0, r0, r4, lsl #12
     7bc:	0d04a401 	cfstrseq	mvf10, [r4, #-4]
     7c0:	02000006 	andeq	r0, r0, #6
     7c4:	e0196c91 	muls	r9, r1, ip
     7c8:	01000004 	tsteq	r0, r4
     7cc:	009704a6 	addseq	r0, r7, r6, lsr #9
     7d0:	91020000 	mrsls	r0, (UNDEF: 2)
     7d4:	071d0077 			; <UNDEFINED> instruction: 0x071d0077
     7d8:	01000002 	tsteq	r0, r2
     7dc:	00970466 	addseq	r0, r7, r6, ror #8
     7e0:	0c560000 	mraeq	r0, r6, acc0
     7e4:	00622000 	rsbeq	r2, r2, r0
     7e8:	9c010000 	stcls	0, cr0, [r1], {-0}
     7ec:	0000081e 	andeq	r0, r0, lr, lsl r8
     7f0:	00060418 	andeq	r0, r6, r8, lsl r4
     7f4:	04660100 	strbteq	r0, [r6], #-256	; 0xffffff00
     7f8:	0000060d 	andeq	r0, r0, sp, lsl #12
     7fc:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
     800:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
     804:	bd046801 	stclt	8, cr6, [r4, #-4]
     808:	02000000 	andeq	r0, r0, #0
     80c:	06197491 			; <UNDEFINED> instruction: 0x06197491
     810:	01000007 	tsteq	r0, r7
     814:	00970469 	addseq	r0, r7, r9, ror #8
     818:	91020000 	mrsls	r0, (UNDEF: 2)
     81c:	491d0073 	ldmdbmi	sp, {r0, r1, r4, r5, r6}
     820:	01000003 	tsteq	r0, r3
     824:	0097044c 	addseq	r0, r7, ip, asr #8
     828:	0c140000 	ldceq	0, cr0, [r4], {-0}
     82c:	00422000 	subeq	r2, r2, r0
     830:	9c010000 	stcls	0, cr0, [r1], {-0}
     834:	00000857 	andeq	r0, r0, r7, asr r8
     838:	00060418 	andeq	r0, r6, r8, lsl r4
     83c:	044c0100 	strbeq	r0, [ip], #-256	; 0xffffff00
     840:	0000060d 	andeq	r0, r0, sp, lsl #12
     844:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
     848:	000000ce 	andeq	r0, r0, lr, asr #1
     84c:	97044e01 	strls	r4, [r4, -r1, lsl #28]
     850:	02000000 	andeq	r0, r0, #0
     854:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
     858:	00000296 	muleq	r0, r6, r2
     85c:	9703fa01 	strls	pc, [r3, -r1, lsl #20]
     860:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     864:	2420000a 	strtcs	r0, [r0], #-10
     868:	01000001 	tsteq	r0, r1
     86c:	0008ae9c 	muleq	r8, ip, lr
     870:	06041800 	streq	r1, [r4], -r0, lsl #16
     874:	fa010000 	blx	4087c <startup-0x1ffbf784>
     878:	00060d03 	andeq	r0, r6, r3, lsl #26
     87c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     880:	00059218 	andeq	r9, r5, r8, lsl r2
     884:	03fa0100 	mvnseq	r0, #0, 2
     888:	00000097 	muleq	r0, r7, r0
     88c:	196b9102 	stmdbne	fp!, {r1, r8, ip, pc}^
     890:	00001eab 	andeq	r1, r0, fp, lsr #29
     894:	9703fc01 	strls	pc, [r3, -r1, lsl #24]
     898:	02000000 	andeq	r0, r0, #0
     89c:	af197791 	svcge	0x00197791
     8a0:	01000002 	tsteq	r0, r2
     8a4:	00bd03ff 	ldrshteq	r0, [sp], pc
     8a8:	91020000 	mrsls	r0, (UNDEF: 2)
     8ac:	651d0070 	ldrvs	r0, [sp, #-112]	; 0xffffff90
     8b0:	01000002 	tsteq	r0, r2
     8b4:	009703c8 	addseq	r0, r7, r8, asr #7
     8b8:	0a900000 	beq	fe4008c0 <GPIO_Ports+0xde3fcc20>
     8bc:	00602000 	rsbeq	r2, r0, r0
     8c0:	9c010000 	stcls	0, cr0, [r1], {-0}
     8c4:	000008f6 	strdeq	r0, [r0], -r6
     8c8:	00060418 	andeq	r0, r6, r8, lsl r4
     8cc:	03c80100 	biceq	r0, r8, #0, 2
     8d0:	0000060d 	andeq	r0, r0, sp, lsl #12
     8d4:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     8d8:	000004cb 	andeq	r0, r0, fp, asr #9
     8dc:	9703c801 	strls	ip, [r3, -r1, lsl #16]
     8e0:	02000000 	andeq	r0, r0, #0
     8e4:	10196b91 	mulsne	r9, r1, fp
     8e8:	01000001 	tsteq	r0, r1
     8ec:	009703ca 	addseq	r0, r7, sl, asr #7
     8f0:	91020000 	mrsls	r0, (UNDEF: 2)
     8f4:	ef1a0077 	svc	0x001a0077
     8f8:	01000000 	mrseq	r0, (UNDEF: 0)
     8fc:	0a5803b0 	beq	16017c4 <startup-0x1e9fe83c>
     900:	00382000 	eorseq	r2, r8, r0
     904:	9c010000 	stcls	0, cr0, [r1], {-0}
     908:	0000092b 	andeq	r0, r0, fp, lsr #18
     90c:	00060418 	andeq	r0, r6, r8, lsl r4
     910:	03b00100 	movseq	r0, #0, 2
     914:	0000060d 	andeq	r0, r0, sp, lsl #12
     918:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
     91c:	000004cb 	andeq	r0, r0, fp, asr #9
     920:	9703b001 	strls	fp, [r3, -r1]
     924:	02000000 	andeq	r0, r0, #0
     928:	1a007391 	bne	1d774 <startup-0x1ffe288c>
     92c:	0000061e 	andeq	r0, r0, lr, lsl r6
     930:	ae037e01 	cdpge	14, 0, cr7, cr3, cr1, {0}
     934:	aa200008 	bge	80095c <startup-0x1f7ff6a4>
     938:	01000001 	tsteq	r0, r1
     93c:	00096f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
     940:	06041800 	streq	r1, [r4], -r0, lsl #16
     944:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
     948:	00060d03 	andeq	r0, r6, r3, lsl #26
     94c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     950:	0004cb18 	andeq	ip, r4, r8, lsl fp
     954:	037e0100 	cmneq	lr, #0, 2
     958:	00000097 	muleq	r0, r7, r0
     95c:	18739102 	ldmdane	r3!, {r1, r8, ip, pc}^
     960:	00000022 	andeq	r0, r0, r2, lsr #32
     964:	6f037e01 	svcvs	0x00037e01
     968:	02000009 	andeq	r0, r0, #9
     96c:	1b006c91 	blne	1bbb8 <startup-0x1ffe4448>
     970:	00058504 	andeq	r8, r5, r4, lsl #10
     974:	022b1a00 	eoreq	r1, fp, #0, 20
     978:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
     97c:	00085803 	andeq	r5, r8, r3, lsl #16
     980:	00005620 	andeq	r5, r0, r0, lsr #12
     984:	aa9c0100 	bge	fe700d8c <GPIO_Ports+0xde6fd0ec>
     988:	18000009 	stmdane	r0, {r0, r3}
     98c:	00000604 	andeq	r0, r0, r4, lsl #12
     990:	0d034e01 	stceq	14, cr4, [r3, #-4]
     994:	02000006 	andeq	r0, r0, #6
     998:	32187491 	andscc	r7, r8, #-1862270976	; 0x91000000
     99c:	01000006 	tsteq	r0, r6
     9a0:	0097034e 	addseq	r0, r7, lr, asr #6
     9a4:	91020000 	mrsls	r0, (UNDEF: 2)
     9a8:	421d0073 	andsmi	r0, sp, #115	; 0x73
     9ac:	01000001 	tsteq	r0, r1
     9b0:	00970317 	addseq	r0, r7, r7, lsl r3
     9b4:	07820000 	streq	r0, [r2, r0]
     9b8:	00d62000 	sbcseq	r2, r6, r0
     9bc:	9c010000 	stcls	0, cr0, [r1], {-0}
     9c0:	000009f2 	strdeq	r0, [r0], -r2
     9c4:	00060418 	andeq	r0, r6, r8, lsl r4
     9c8:	03170100 	tsteq	r7, #0, 2
     9cc:	0000060d 	andeq	r0, r0, sp, lsl #12
     9d0:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     9d4:	0000062a 	andeq	r0, r0, sl, lsr #12
     9d8:	97031701 	strls	r1, [r3, -r1, lsl #14]
     9dc:	02000000 	andeq	r0, r0, #0
     9e0:	d5196b91 	ldrle	r6, [r9, #-2961]	; 0xfffff46f
     9e4:	01000001 	tsteq	r0, r1
     9e8:	00bd0319 	adcseq	r0, sp, r9, lsl r3
     9ec:	91020000 	mrsls	r0, (UNDEF: 2)
     9f0:	0a1d0074 	beq	740bc8 <startup-0x1f8bf438>
     9f4:	01000003 	tsteq	r0, r3
     9f8:	009702ce 	addseq	r0, r7, lr, asr #5
     9fc:	05a00000 	streq	r0, [r0, #0]!
     a00:	01e22000 	mvneq	r2, r0
     a04:	9c010000 	stcls	0, cr0, [r1], {-0}
     a08:	00000a3a 	andeq	r0, r0, sl, lsr sl
     a0c:	00060418 	andeq	r0, r6, r8, lsl r4
     a10:	02ce0100 	sbceq	r0, lr, #0, 2
     a14:	0000060d 	andeq	r0, r0, sp, lsl #12
     a18:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
     a1c:	0000025b 	andeq	r0, r0, fp, asr r2
     a20:	3a02ce01 	bcc	b422c <startup-0x1ff4bdd4>
     a24:	0200000a 	andeq	r0, r0, #10
     a28:	70196091 	mulsvc	r9, r1, r0
     a2c:	01000006 	tsteq	r0, r6
     a30:	009702d0 			; <UNDEFINED> instruction: 0x009702d0
     a34:	91020000 	mrsls	r0, (UNDEF: 2)
     a38:	041b006f 	ldreq	r0, [fp], #-111	; 0xffffff91
     a3c:	0000051d 	andeq	r0, r0, sp, lsl r5
     a40:	0000ff1a 	andeq	pc, r0, sl, lsl pc	; <UNPREDICTABLE>
     a44:	02970100 	addseq	r0, r7, #0, 2
     a48:	200004d8 	ldrdcs	r0, [r0], -r8
     a4c:	000000c8 	andeq	r0, r0, r8, asr #1
     a50:	0a759c01 	beq	1d67a5c <startup-0x1e2985a4>
     a54:	04180000 	ldreq	r0, [r8], #-0
     a58:	01000006 	tsteq	r0, r6
     a5c:	060d0297 			; <UNDEFINED> instruction: 0x060d0297
     a60:	91020000 	mrsls	r0, (UNDEF: 2)
     a64:	02121874 	andseq	r1, r2, #116, 16	; 0x740000
     a68:	97010000 	strls	r0, [r1, -r0]
     a6c:	00014202 	andeq	r4, r1, r2, lsl #4
     a70:	73910200 	orrsvc	r0, r1, #0, 4
     a74:	05651a00 	strbeq	r1, [r5, #-2560]!	; 0xfffff600
     a78:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
     a7c:	00049802 	andeq	r9, r4, r2, lsl #16
     a80:	00004020 	andeq	r4, r0, r0, lsr #32
     a84:	aa9c0100 	bge	fe700e8c <GPIO_Ports+0xde6fd1ec>
     a88:	1800000a 	stmdane	r0, {r1, r3}
     a8c:	00000604 	andeq	r0, r0, r4, lsl #12
     a90:	0d027801 	stceq	8, cr7, [r2, #-4]
     a94:	02000006 	andeq	r0, r0, #6
     a98:	12187491 	andsne	r7, r8, #-1862270976	; 0x91000000
     a9c:	01000002 	tsteq	r0, r2
     aa0:	01420278 	hvceq	8232	; 0x2028
     aa4:	91020000 	mrsls	r0, (UNDEF: 2)
     aa8:	781a0073 	ldmdavc	sl, {r0, r1, r4, r5, r6}
     aac:	01000002 	tsteq	r0, r2
     ab0:	0426025e 	strteq	r0, [r6], #-606	; 0xfffffda2
     ab4:	00722000 	rsbseq	r2, r2, r0
     ab8:	9c010000 	stcls	0, cr0, [r1], {-0}
     abc:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     ac0:	00017318 	andeq	r7, r1, r8, lsl r3
     ac4:	025e0100 	subseq	r0, lr, #0, 2
     ac8:	00000097 	muleq	r0, r7, r0
     acc:	00779102 	rsbseq	r9, r7, r2, lsl #2
     ad0:	0000b31a 	andeq	fp, r0, sl, lsl r3
     ad4:	021c0100 	andseq	r0, ip, #0, 2
     ad8:	200003d4 	ldrdcs	r0, [r0], -r4
     adc:	00000052 	andeq	r0, r0, r2, asr r0
     ae0:	0af69c01 	beq	ffda7aec <GPIO_Ports+0xdfda3e4c>
     ae4:	3e180000 	cdpcc	0, 1, cr0, cr8, cr0, {0}
     ae8:	01000002 	tsteq	r0, r2
     aec:	0af6021c 	beq	ffd81364 <GPIO_Ports+0xdfd7d6c4>
     af0:	91020000 	mrsls	r0, (UNDEF: 2)
     af4:	041b0074 	ldreq	r0, [fp], #-116	; 0xffffff8c
     af8:	00000431 	andeq	r0, r0, r1, lsr r4
     afc:	0007131a 	andeq	r1, r7, sl, lsl r3
     b00:	01c00100 	biceq	r0, r0, r0, lsl #2
     b04:	20000224 	andcs	r0, r0, r4, lsr #4
     b08:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     b0c:	0b319c01 	bleq	c67b18 <startup-0x1f3984e8>
     b10:	da180000 	ble	600b18 <startup-0x1f9ff4e8>
     b14:	01000000 	mrseq	r0, (UNDEF: 0)
     b18:	0b3101c0 	bleq	c41220 <startup-0x1f3bede0>
     b1c:	91020000 	mrsls	r0, (UNDEF: 2)
     b20:	06e81964 	strbteq	r1, [r8], r4, ror #18
     b24:	c2010000 	andgt	r0, r1, #0
     b28:	0000bd01 	andeq	fp, r0, r1, lsl #26
     b2c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     b30:	b1041b00 	tstlt	r4, r0, lsl #22
     b34:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
     b38:	00000328 	andeq	r0, r0, r8, lsr #6
     b3c:	0097d801 	addseq	sp, r7, r1, lsl #16
     b40:	00600000 	rsbeq	r0, r0, r0
     b44:	01c42000 	biceq	r2, r4, r0
     b48:	9c010000 	stcls	0, cr0, [r1], {-0}
     b4c:	00000b89 	andeq	r0, r0, r9, lsl #23
     b50:	0006041f 	andeq	r0, r6, pc, lsl r4
     b54:	0dd80100 	ldfeqe	f0, [r8]
     b58:	02000006 	andeq	r0, r0, #6
     b5c:	3e1f6c91 	mrccc	12, 0, r6, cr15, cr1, {4}
     b60:	01000002 	tsteq	r0, r2
     b64:	000af6d8 	ldrdeq	pc, [sl], -r8
     b68:	68910200 	ldmvs	r1, {r9}
     b6c:	0001fc20 	andeq	pc, r1, r0, lsr #24
     b70:	97da0100 	ldrbls	r0, [sl, r0, lsl #2]
     b74:	02000000 	andeq	r0, r0, #0
     b78:	2b207791 	blcs	81e9c4 <startup-0x1f7e163c>
     b7c:	01000007 	tsteq	r0, r7
     b80:	0000bddb 	ldrdeq	fp, [r0], -fp	; <UNPREDICTABLE>
     b84:	70910200 	addsvc	r0, r1, r0, lsl #4
     b88:	00002100 	andeq	r2, r0, r0, lsl #2
     b8c:	a7010000 	strge	r0, [r1, -r0]
     b90:	20000010 	andcs	r0, r0, r0, lsl r0
     b94:	00000050 	andeq	r0, r0, r0, asr r0
     b98:	041f9c01 	ldreq	r9, [pc], #-3073	; ba0 <startup-0x1ffff460>
     b9c:	01000006 	tsteq	r0, r6
     ba0:	00060da7 	andeq	r0, r6, r7, lsr #27
     ba4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ba8:	05430000 	strbeq	r0, [r3, #-0]
     bac:	00040000 	andeq	r0, r4, r0
     bb0:	00000208 	andeq	r0, r0, r8, lsl #4
     bb4:	03700104 	cmneq	r0, #4, 2
     bb8:	e90c0000 	stmdb	ip, {}	; <UNPREDICTABLE>
     bbc:	a5000008 	strge	r0, [r0, #-8]
     bc0:	e4000006 	str	r0, [r0], #-6
     bc4:	c4200011 	strtgt	r0, [r0], #-17	; 0xffffffef
     bc8:	25000001 	strcs	r0, [r0, #-1]
     bcc:	02000004 	andeq	r0, r0, #4
     bd0:	04bf0601 	ldrteq	r0, [pc], #1537	; bd8 <startup-0x1ffff428>
     bd4:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
     bd8:	02000000 	andeq	r0, r0, #0
     bdc:	0000372b 	andeq	r3, r0, fp, lsr #14
     be0:	08010200 	stmdaeq	r1, {r9}
     be4:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
     be8:	d6050202 	strle	r0, [r5], -r2, lsl #4
     bec:	02000004 	andeq	r0, r0, #4
     bf0:	02c10702 	sbceq	r0, r1, #524288	; 0x80000
     bf4:	bc030000 	stclt	0, cr0, [r3], {-0}
     bf8:	02000005 	andeq	r0, r0, #5
     bfc:	0000574d 	andeq	r5, r0, sp, asr #14
     c00:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     c04:	0000016a 	andeq	r0, r0, sl, ror #2
     c08:	00022003 	andeq	r2, r2, r3
     c0c:	694f0200 	stmdbvs	pc, {r9}^	; <UNPREDICTABLE>
     c10:	02000000 	andeq	r0, r0, #0
     c14:	01ba0704 			; <UNDEFINED> instruction: 0x01ba0704
     c18:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     c1c:	00016505 	andeq	r6, r1, r5, lsl #10
     c20:	07080200 	streq	r0, [r8, -r0, lsl #4]
     c24:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
     c28:	69050404 	stmdbvs	r5, {r2, sl}
     c2c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     c30:	01bf0704 			; <UNDEFINED> instruction: 0x01bf0704
     c34:	ab030000 	blge	c0c3c <startup-0x1ff3f3c4>
     c38:	03000000 	movweq	r0, #0
     c3c:	00002c18 	andeq	r2, r0, r8, lsl ip
     c40:	008c0500 	addeq	r0, ip, r0, lsl #10
     c44:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
     c48:	03000005 	movweq	r0, #5
     c4c:	00004c2c 	andeq	r4, r0, ip, lsr #24
     c50:	009c0500 	addseq	r0, ip, r0, lsl #10
     c54:	22030000 	andcs	r0, r3, #0
     c58:	03000002 	movweq	r0, #2
     c5c:	00005e30 	andeq	r5, r0, r0, lsr lr
     c60:	00ac0500 	adceq	r0, ip, r0, lsl #10
     c64:	b7060000 	strlt	r0, [r6, -r0]
     c68:	07000000 	streq	r0, [r0, -r0]
     c6c:	a0040e04 	andge	r0, r4, r4, lsl #28
     c70:	00017d01 	andeq	r7, r1, r1, lsl #26
     c74:	07af0800 	streq	r0, [pc, r0, lsl #16]!
     c78:	a2040000 	andge	r0, r4, #0
     c7c:	00018d01 	andeq	r8, r1, r1, lsl #26
     c80:	81080000 	mrshi	r0, (UNDEF: 8)
     c84:	04000004 	streq	r0, [r0], #-4
     c88:	019201a3 	orrseq	r0, r2, r3, lsr #3
     c8c:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
     c90:	00000811 	andeq	r0, r0, r1, lsl r8
     c94:	8d01a404 	cfstrshi	mvf10, [r1, #-16]
     c98:	80000001 	andhi	r0, r0, r1
     c9c:	0007c708 	andeq	ip, r7, r8, lsl #14
     ca0:	01a50400 			; <UNDEFINED> instruction: 0x01a50400
     ca4:	00000192 	muleq	r0, r2, r1
     ca8:	086c09a0 	stmdaeq	ip!, {r5, r7, r8, fp}^
     cac:	a6040000 	strge	r0, [r4], -r0
     cb0:	00018d01 	andeq	r8, r1, r1, lsl #26
     cb4:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     cb8:	00000495 	muleq	r0, r5, r4
     cbc:	9201a704 	andls	sl, r1, #4, 14	; 0x100000
     cc0:	20000001 	andcs	r0, r0, r1
     cc4:	08000901 	stmdaeq	r0, {r0, r8, fp}
     cc8:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
     ccc:	00018d01 	andeq	r8, r1, r1, lsl #26
     cd0:	09018000 	stmdbeq	r1, {pc}
     cd4:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     cd8:	9201a904 	andls	sl, r1, #4, 18	; 0x10000
     cdc:	a0000001 	andge	r0, r0, r1
     ce0:	07340901 	ldreq	r0, [r4, -r1, lsl #18]!
     ce4:	aa040000 	bge	100cec <startup-0x1feff314>
     ce8:	00018d01 	andeq	r8, r1, r1, lsl #26
     cec:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     cf0:	000004a9 	andeq	r0, r0, r9, lsr #9
     cf4:	a201ab04 	andge	sl, r1, #4, 22	; 0x1000
     cf8:	20000001 	andcs	r0, r0, r1
     cfc:	50490a02 	subpl	r0, r9, r2, lsl #20
     d00:	01ac0400 			; <UNDEFINED> instruction: 0x01ac0400
     d04:	000001c2 	andeq	r0, r0, r2, asr #3
     d08:	45090300 	strmi	r0, [r9, #-768]	; 0xfffffd00
     d0c:	04000005 	streq	r0, [r0], #-5
     d10:	01c701ad 	biceq	r0, r7, sp, lsr #3
     d14:	03f00000 	mvnseq	r0, #0
     d18:	0007bd09 	andeq	fp, r7, r9, lsl #26
     d1c:	01ae0400 			; <UNDEFINED> instruction: 0x01ae0400
     d20:	000000b7 	strheq	r0, [r0], -r7
     d24:	0b000e00 	bleq	452c <startup-0x1fffbad4>
     d28:	000000b7 	strheq	r0, [r0], -r7
     d2c:	0000018d 	andeq	r0, r0, sp, lsl #3
     d30:	0000850c 	andeq	r8, r0, ip, lsl #10
     d34:	05000700 	streq	r0, [r0, #-1792]	; 0xfffff900
     d38:	0000017d 	andeq	r0, r0, sp, ror r1
     d3c:	0000ac0b 	andeq	sl, r0, fp, lsl #24
     d40:	0001a200 	andeq	sl, r1, r0, lsl #4
     d44:	00850c00 	addeq	r0, r5, r0, lsl #24
     d48:	00170000 	andseq	r0, r7, r0
     d4c:	0000ac0b 	andeq	sl, r0, fp, lsl #24
     d50:	0001b200 	andeq	fp, r1, r0, lsl #4
     d54:	00850c00 	addeq	r0, r5, r0, lsl #24
     d58:	00370000 	eorseq	r0, r7, r0
     d5c:	0000970b 	andeq	r9, r0, fp, lsl #14
     d60:	0001c200 	andeq	ip, r1, r0, lsl #4
     d64:	00850c00 	addeq	r0, r5, r0, lsl #24
     d68:	00ef0000 	rsceq	r0, pc, r0
     d6c:	0001b205 	andeq	fp, r1, r5, lsl #4
     d70:	00ac0b00 	adceq	r0, ip, r0, lsl #22
     d74:	01d80000 	bicseq	r0, r8, r0
     d78:	850d0000 	strhi	r0, [sp, #-0]
     d7c:	83000000 	movwhi	r0, #0
     d80:	ab0e0002 	blge	380d90 <startup-0x1fc7f270>
     d84:	04000008 	streq	r0, [r0], #-8
     d88:	00c101af 	sbceq	r0, r1, pc, lsr #3
     d8c:	8c0f0000 	stchi	0, cr0, [pc], {-0}
     d90:	ff01c004 			; <UNDEFINED> instruction: 0xff01c004
     d94:	08000002 	stmdaeq	r0, {r1}
     d98:	000007a9 	andeq	r0, r0, r9, lsr #15
     d9c:	bc01c204 	sfmlt	f4, 1, [r1], {4}
     da0:	00000000 	andeq	r0, r0, r0
     da4:	0007c208 	andeq	ip, r7, r8, lsl #4
     da8:	01c30400 	biceq	r0, r3, r0, lsl #8
     dac:	000000b7 	strheq	r0, [r0], -r7
     db0:	08620804 	stmdaeq	r2!, {r2, fp}^
     db4:	c4040000 	strgt	r0, [r4], #-0
     db8:	0000b701 	andeq	fp, r0, r1, lsl #14
     dbc:	e1080800 	tst	r8, r0, lsl #16
     dc0:	04000007 	streq	r0, [r0], #-7
     dc4:	00b701c5 	adcseq	r0, r7, r5, asr #3
     dc8:	100c0000 	andne	r0, ip, r0
     dcc:	00524353 	subseq	r4, r2, r3, asr r3
     dd0:	b701c604 	strlt	ip, [r1, -r4, lsl #12]
     dd4:	10000000 	andne	r0, r0, r0
     dd8:	52434310 	subpl	r4, r3, #16, 6	; 0x40000000
     ddc:	01c70400 	biceq	r0, r7, r0, lsl #8
     de0:	000000b7 	strheq	r0, [r0], -r7
     de4:	48531014 	ldmdami	r3, {r2, r4, ip}^
     de8:	c8040050 	stmdagt	r4, {r4, r6}
     dec:	00030f01 	andeq	r0, r3, r1, lsl #30
     df0:	0b081800 	bleq	206df8 <startup-0x1fdf9208>
     df4:	04000008 	streq	r0, [r0], #-8
     df8:	00b701c9 	adcseq	r0, r7, r9, asr #3
     dfc:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
     e00:	000007dc 	ldrdeq	r0, [r0], -ip
     e04:	b701ca04 	strlt	ip, [r1, -r4, lsl #20]
     e08:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     e0c:	0008a108 	andeq	sl, r8, r8, lsl #2
     e10:	01cb0400 	biceq	r0, fp, r0, lsl #8
     e14:	000000b7 	strheq	r0, [r0], -r7
     e18:	0871082c 	ldmdaeq	r1!, {r2, r3, r5, fp}^
     e1c:	cc040000 	stcgt	0, cr0, [r4], {-0}
     e20:	0000b701 	andeq	fp, r0, r1, lsl #14
     e24:	92083000 	andls	r3, r8, #0
     e28:	04000007 	streq	r0, [r0], #-7
     e2c:	00b701cd 	adcseq	r0, r7, sp, asr #3
     e30:	08340000 	ldmdaeq	r4!, {}	; <UNPREDICTABLE>
     e34:	000007d7 	ldrdeq	r0, [r0], -r7
     e38:	b701ce04 	strlt	ip, [r1, -r4, lsl #28]
     e3c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     e40:	00095d08 	andeq	r5, r9, r8, lsl #26
     e44:	01cf0400 	biceq	r0, pc, r0, lsl #8
     e48:	000000b7 	strheq	r0, [r0], -r7
     e4c:	4650103c 			; <UNDEFINED> instruction: 0x4650103c
     e50:	d0040052 	andle	r0, r4, r2, asr r0
     e54:	00032901 	andeq	r2, r3, r1, lsl #18
     e58:	44104000 	ldrmi	r4, [r0], #-0
     e5c:	04005246 	streq	r5, [r0], #-582	; 0xfffffdba
     e60:	00bc01d1 	ldrsbteq	r0, [ip], r1
     e64:	10480000 	subne	r0, r8, r0
     e68:	00524441 	subseq	r4, r2, r1, asr #8
     e6c:	bc01d204 	sfmlt	f5, 1, [r1], {4}
     e70:	4c000000 	stcmi	0, cr0, [r0], {-0}
     e74:	0008a608 	andeq	sl, r8, r8, lsl #12
     e78:	01d30400 	bicseq	r0, r3, r0, lsl #8
     e7c:	00000343 	andeq	r0, r0, r3, asr #6
     e80:	08670850 	stmdaeq	r7!, {r4, r6, fp}^
     e84:	d4040000 	strle	r0, [r4], #-0
     e88:	00035d01 	andeq	r5, r3, r1, lsl #26
     e8c:	81086000 	mrshi	r6, (UNDEF: 8)
     e90:	04000004 	streq	r0, [r0], #-4
     e94:	036201d5 	cmneq	r2, #1073741877	; 0x40000035
     e98:	08740000 	ldmdaeq	r4!, {}^	; <UNPREDICTABLE>
     e9c:	0000096f 	andeq	r0, r0, pc, ror #18
     ea0:	b701d604 	strlt	sp, [r1, -r4, lsl #12]
     ea4:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     ea8:	00970b00 	addseq	r0, r7, r0, lsl #22
     eac:	030f0000 	movweq	r0, #61440	; 0xf000
     eb0:	850c0000 	strhi	r0, [ip, #-0]
     eb4:	0b000000 	bleq	ebc <startup-0x1ffff144>
     eb8:	02ff0500 	rscseq	r0, pc, #0, 10
     ebc:	bc0b0000 	stclt	0, cr0, [fp], {-0}
     ec0:	24000000 	strcs	r0, [r0], #-0
     ec4:	0c000003 	stceq	0, cr0, [r0], {3}
     ec8:	00000085 	andeq	r0, r0, r5, lsl #1
     ecc:	14060001 	strne	r0, [r6], #-1
     ed0:	05000003 	streq	r0, [r0, #-3]
     ed4:	00000324 	andeq	r0, r0, r4, lsr #6
     ed8:	0000bc0b 	andeq	fp, r0, fp, lsl #24
     edc:	00033e00 	andeq	r3, r3, r0, lsl #28
     ee0:	00850c00 	addeq	r0, r5, r0, lsl #24
     ee4:	00030000 	andeq	r0, r3, r0
     ee8:	00032e06 	andeq	r2, r3, r6, lsl #28
     eec:	033e0500 	teqeq	lr, #0, 10
     ef0:	bc0b0000 	stclt	0, cr0, [fp], {-0}
     ef4:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     ef8:	0c000003 	stceq	0, cr0, [r0], {3}
     efc:	00000085 	andeq	r0, r0, r5, lsl #1
     f00:	48060004 	stmdami	r6, {r2}
     f04:	05000003 	streq	r0, [r0, #-3]
     f08:	00000358 	andeq	r0, r0, r8, asr r3
     f0c:	0000ac0b 	andeq	sl, r0, fp, lsl #24
     f10:	00037200 	andeq	r7, r3, r0, lsl #4
     f14:	00850c00 	addeq	r0, r5, r0, lsl #24
     f18:	00040000 	andeq	r0, r4, r0
     f1c:	0007b40e 	andeq	fp, r7, lr, lsl #8
     f20:	01d70400 	bicseq	r0, r7, r0, lsl #8
     f24:	000001e4 	andeq	r0, r0, r4, ror #3
     f28:	bf04100f 	svclt	0x0004100f
     f2c:	0003bc02 	andeq	fp, r3, r2, lsl #24
     f30:	07e70800 	strbeq	r0, [r7, r0, lsl #16]!
     f34:	c1040000 	mrsgt	r0, (UNDEF: 4)
     f38:	0000b702 	andeq	fp, r0, r2, lsl #14
     f3c:	e4080000 	str	r0, [r8], #-0
     f40:	04000008 	streq	r0, [r0], #-8
     f44:	00b702c2 	adcseq	r0, r7, r2, asr #5
     f48:	10040000 	andne	r0, r4, r0
     f4c:	004c4156 	subeq	r4, ip, r6, asr r1
     f50:	b702c304 	strlt	ip, [r2, -r4, lsl #6]
     f54:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     f58:	00080508 	andeq	r0, r8, r8, lsl #10
     f5c:	02c40400 	sbceq	r0, r4, #0, 8
     f60:	000000bc 	strheq	r0, [r0], -ip
     f64:	490e000c 	stmdbmi	lr, {r2, r3}
     f68:	04000008 	streq	r0, [r0], #-8
     f6c:	037e02c5 	cmneq	lr, #1342177292	; 0x5000000c
     f70:	35110000 	ldrcc	r0, [r1, #-0]
     f74:	04000001 	streq	r0, [r0], #-1
     f78:	00a706fa 	strdeq	r0, [r7], sl	; <UNPREDICTABLE>
     f7c:	5a120000 	bpl	480f84 <startup-0x1fb7f07c>
     f80:	05000004 	streq	r0, [r0, #-4]
     f84:	0000ac3b 	andeq	sl, r0, fp, lsr ip
     f88:	01071300 	mrseq	r1, SP_und
     f8c:	00000037 	andeq	r0, r0, r7, lsr r0
     f90:	fa035f06 	blx	d8bb0 <startup-0x1ff27450>
     f94:	14000003 	strne	r0, [r0], #-3
     f98:	0000050c 	andeq	r0, r0, ip, lsl #10
     f9c:	01f51400 	mvnseq	r1, r0, lsl #8
     fa0:	00010000 	andeq	r0, r1, r0
     fa4:	0004190e 	andeq	r1, r4, lr, lsl #18
     fa8:	035f0600 	cmpeq	pc, #0, 12
     fac:	000003df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     fb0:	36070415 			; <UNDEFINED> instruction: 0x36070415
     fb4:	0000043f 	andeq	r0, r0, pc, lsr r4
     fb8:	00087616 	andeq	r7, r8, r6, lsl r6
     fbc:	8c380700 	ldchi	7, cr0, [r8], #-0
     fc0:	00000000 	andeq	r0, r0, r0
     fc4:	0008b516 	andeq	fp, r8, r6, lsl r5
     fc8:	8c3d0700 	ldchi	7, cr0, [sp], #-0
     fcc:	01000000 	mrseq	r0, (UNDEF: 0)
     fd0:	00088616 	andeq	r8, r8, r6, lsl r6
     fd4:	8c420700 	mcrrhi	7, 0, r0, r2, cr0
     fd8:	02000000 	andeq	r0, r0, #0
     fdc:	00074a16 	andeq	r4, r7, r6, lsl sl
     fe0:	fa470700 	blx	11c2be8 <startup-0x1ee3d418>
     fe4:	03000003 	movweq	r0, #3
     fe8:	07390300 	ldreq	r0, [r9, -r0, lsl #6]!
     fec:	4a070000 	bmi	1c0ff4 <startup-0x1fe3f00c>
     ff0:	00000406 	andeq	r0, r0, r6, lsl #8
     ff4:	00083117 	andeq	r3, r8, r7, lsl r1
     ff8:	74df0100 	ldrbvc	r0, [pc], #256	; 1000 <startup-0x1ffff000>
     ffc:	34200013 	strtcc	r0, [r0], #-19	; 0xffffffed
    1000:	01000000 	mrseq	r0, (UNDEF: 0)
    1004:	00046e9c 	muleq	r4, ip, lr
    1008:	075d1800 	ldrbeq	r1, [sp, -r0, lsl #16]
    100c:	df010000 	svcle	0x00010000
    1010:	000000ac 	andeq	r0, r0, ip, lsr #1
    1014:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1018:	00081d17 	andeq	r1, r8, r7, lsl sp
    101c:	2cc70100 	stfcse	f0, [r7], {0}
    1020:	48200013 	stmdami	r0!, {r0, r1, r4}
    1024:	01000000 	mrseq	r0, (UNDEF: 0)
    1028:	0004a09c 	muleq	r4, ip, r0
    102c:	09621800 	stmdbeq	r2!, {fp, ip}^
    1030:	c7010000 	strgt	r0, [r1, -r0]
    1034:	0000008c 	andeq	r0, r0, ip, lsl #1
    1038:	18779102 	ldmdane	r7!, {r1, r8, ip, pc}^
    103c:	00000212 	andeq	r0, r0, r2, lsl r2
    1040:	03fac701 	mvnseq	ip, #262144	; 0x40000
    1044:	91020000 	mrsls	r0, (UNDEF: 2)
    1048:	ec170076 	ldc	0, cr0, [r7], {118}	; 0x76
    104c:	01000007 	tsteq	r0, r7
    1050:	001300b4 	ldrheq	r0, [r3], -r4
    1054:	00002c20 	andeq	r2, r0, r0, lsr #24
    1058:	d29c0100 	addsle	r0, ip, #0, 2
    105c:	18000004 	stmdane	r0, {r2}
    1060:	000008d7 	ldrdeq	r0, [r0], -r7
    1064:	00acb401 	adceq	fp, ip, r1, lsl #8
    1068:	91020000 	mrsls	r0, (UNDEF: 2)
    106c:	07d01874 			; <UNDEFINED> instruction: 0x07d01874
    1070:	b4010000 	strlt	r0, [r1], #-0
    1074:	000000ac 	andeq	r0, r0, ip, lsr #1
    1078:	00709102 	rsbseq	r9, r0, r2, lsl #2
    107c:	00079817 	andeq	r9, r7, r7, lsl r8
    1080:	08880100 	stmeq	r8, {r8}
    1084:	f8200012 			; <UNDEFINED> instruction: 0xf8200012
    1088:	01000000 	mrseq	r0, (UNDEF: 0)
    108c:	0005209c 	muleq	r5, ip, r0
    1090:	076f1800 	strbeq	r1, [pc, -r0, lsl #16]!
    1094:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    1098:	00000520 	andeq	r0, r0, r0, lsr #10
    109c:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
    10a0:	00000856 	andeq	r0, r0, r6, asr r8
    10a4:	008c8a01 	addeq	r8, ip, r1, lsl #20
    10a8:	91020000 	mrsls	r0, (UNDEF: 2)
    10ac:	07a2196f 	streq	r1, [r2, pc, ror #18]!
    10b0:	8a010000 	bhi	410b8 <startup-0x1ffbef48>
    10b4:	0000008c 	andeq	r0, r0, ip, lsl #1
    10b8:	196e9102 	stmdbne	lr!, {r1, r8, ip, pc}^
    10bc:	00000816 	andeq	r0, r0, r6, lsl r8
    10c0:	008c8a01 	addeq	r8, ip, r1, lsl #20
    10c4:	91020000 	mrsls	r0, (UNDEF: 2)
    10c8:	041a006d 	ldreq	r0, [sl], #-109	; 0xffffff93
    10cc:	0000043f 	andeq	r0, r0, pc, lsr r4
    10d0:	0009751b 	andeq	r7, r9, fp, lsl r5
    10d4:	e4760100 	ldrbt	r0, [r6], #-256	; 0xffffff00
    10d8:	24200011 	strtcs	r0, [r0], #-17	; 0xffffffef
    10dc:	01000000 	mrseq	r0, (UNDEF: 0)
    10e0:	077f189c 			; <UNDEFINED> instruction: 0x077f189c
    10e4:	76010000 	strvc	r0, [r1], -r0
    10e8:	000000ac 	andeq	r0, r0, ip, lsr #1
    10ec:	00749102 	rsbseq	r9, r4, r2, lsl #2
    10f0:	00036600 	andeq	r6, r3, r0, lsl #12
    10f4:	7c000400 	cfstrsvc	mvf0, [r0], {-0}
    10f8:	04000003 	streq	r0, [r0], #-3
    10fc:	00037001 	andeq	r7, r3, r1
    1100:	09c90c00 	stmibeq	r9, {sl, fp}^
    1104:	06a50000 	strteq	r0, [r5], r0
    1108:	13a80000 			; <UNDEFINED> instruction: 0x13a80000
    110c:	01da2000 	bicseq	r2, sl, r0
    1110:	06230000 	strteq	r0, [r3], -r0
    1114:	01020000 	mrseq	r0, (UNDEF: 2)
    1118:	0004bf06 	andeq	fp, r4, r6, lsl #30
    111c:	00a90300 	adceq	r0, r9, r0, lsl #6
    1120:	2b020000 	blcs	81128 <startup-0x1ff7eed8>
    1124:	00000037 	andeq	r0, r0, r7, lsr r0
    1128:	bd080102 	stflts	f0, [r8, #-8]
    112c:	02000004 	andeq	r0, r0, #4
    1130:	04d60502 	ldrbeq	r0, [r6], #1282	; 0x502
    1134:	a4030000 	strge	r0, [r3], #-0
    1138:	02000005 	andeq	r0, r0, #5
    113c:	00005039 	andeq	r5, r0, r9, lsr r0
    1140:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1144:	000002c1 	andeq	r0, r0, r1, asr #5
    1148:	0005bc03 	andeq	fp, r5, r3, lsl #24
    114c:	624d0200 	subvs	r0, sp, #0, 4
    1150:	02000000 	andeq	r0, r0, #0
    1154:	016a0504 	cmneq	sl, r4, lsl #10
    1158:	20030000 	andcs	r0, r3, r0
    115c:	02000002 	andeq	r0, r0, #2
    1160:	0000744f 	andeq	r7, r0, pc, asr #8
    1164:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1168:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
    116c:	65050802 	strvs	r0, [r5, #-2050]	; 0xfffff7fe
    1170:	02000001 	andeq	r0, r0, #1
    1174:	01b50708 			; <UNDEFINED> instruction: 0x01b50708
    1178:	04040000 	streq	r0, [r4], #-0
    117c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1180:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1184:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
    1188:	0000ab03 	andeq	sl, r0, r3, lsl #22
    118c:	2c180300 	ldccs	3, cr0, [r8], {-0}
    1190:	03000000 	movweq	r0, #0
    1194:	000005a6 	andeq	r0, r0, r6, lsr #11
    1198:	00452403 	subeq	r2, r5, r3, lsl #8
    119c:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
    11a0:	03000005 	movweq	r0, #5
    11a4:	0000572c 	andeq	r5, r0, ip, lsr #14
    11a8:	00ad0500 	adceq	r0, sp, r0, lsl #10
    11ac:	22030000 	andcs	r0, r3, #0
    11b0:	03000002 	movweq	r0, #2
    11b4:	00006930 	andeq	r6, r0, r0, lsr r9
    11b8:	01350600 	teqeq	r5, r0, lsl #12
    11bc:	fa040000 	blx	1011c4 <startup-0x1fefee3c>
    11c0:	0000b806 	andeq	fp, r0, r6, lsl #16
    11c4:	045a0700 	ldrbeq	r0, [sl], #-1792	; 0xfffff900
    11c8:	3b050000 	blcc	1411d0 <startup-0x1febee30>
    11cc:	000000bd 	strheq	r0, [r0], -sp
    11d0:	8d061408 	cfstrshi	mvf1, [r6, #-32]	; 0xffffffe0
    11d4:	00000130 	andeq	r0, r0, r0, lsr r1
    11d8:	00043e09 	andeq	r3, r4, r9, lsl #28
    11dc:	bd8f0600 	stclt	6, cr0, [pc]	; 11e4 <startup-0x1fffee1c>
    11e0:	00000000 	andeq	r0, r0, r0
    11e4:	0002f409 	andeq	pc, r2, r9, lsl #8
    11e8:	bd920600 	ldclt	6, cr0, [r2]
    11ec:	04000000 	streq	r0, [r0], #-0
    11f0:	4544490a 	strbmi	r4, [r4, #-2314]	; 0xfffff6f6
    11f4:	97950600 	ldrls	r0, [r5, r0, lsl #12]
    11f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    11fc:	5254520a 	subspl	r5, r4, #-1610612736	; 0xa0000000
    1200:	97990600 	ldrls	r0, [r9, r0, lsl #12]
    1204:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1208:	434c440a 	movtmi	r4, #50186	; 0xc40a
    120c:	979d0600 	ldrls	r0, [sp, r0, lsl #12]
    1210:	0a000000 	beq	1218 <startup-0x1fffede8>
    1214:	000cdc09 	andeq	sp, ip, r9, lsl #24
    1218:	30a10600 	adccc	r0, r1, r0, lsl #12
    121c:	0b000001 	bleq	1228 <startup-0x1fffedd8>
    1220:	00970b00 	addseq	r0, r7, r0, lsl #22
    1224:	01400000 	mrseq	r0, (UNDEF: 64)
    1228:	900c0000 	andls	r0, ip, r0
    122c:	07000000 	streq	r0, [r0, -r0]
    1230:	06480300 	strbeq	r0, [r8], -r0, lsl #6
    1234:	a3060000 	movwge	r0, #24576	; 0x6000
    1238:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    123c:	1a070408 	bne	1c2264 <startup-0x1fe3dd9c>
    1240:	000001ad 	andeq	r0, r0, sp, lsr #3
    1244:	0009c20d 	andeq	ip, r9, sp, lsl #4
    1248:	bd1c0700 	ldclt	7, cr0, [ip, #-0]
    124c:	04000000 	streq	r0, [r0], #-0
    1250:	0d001808 	stceq	8, cr1, [r0, #-32]	; 0xffffffe0
    1254:	0000098e 	andeq	r0, r0, lr, lsl #19
    1258:	00bd2007 	adcseq	r2, sp, r7
    125c:	0a040000 	beq	101264 <startup-0x1fefed9c>
    1260:	490e000e 	stmdbmi	lr, {r1, r2, r3}
    1264:	24070044 	strcs	r0, [r7], #-68	; 0xffffffbc
    1268:	000000bd 	strheq	r0, [r0], -sp
    126c:	00070704 	andeq	r0, r7, r4, lsl #14
    1270:	000a600d 	andeq	r6, sl, sp
    1274:	bd280700 	stclt	7, cr0, [r8, #-0]
    1278:	04000000 	streq	r0, [r0], #-0
    127c:	0d000601 	stceq	6, cr0, [r0, #-4]
    1280:	000009ac 	andeq	r0, r0, ip, lsr #19
    1284:	00bd2b07 	adcseq	r2, sp, r7, lsl #22
    1288:	03040000 	movweq	r0, #16384	; 0x4000
    128c:	2a0d0003 	bcs	3412a0 <startup-0x1fcbed60>
    1290:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    1294:	0000bd2e 	andeq	fp, r0, lr, lsr #26
    1298:	00030400 	andeq	r0, r3, r0, lsl #8
    129c:	bd030000 	stclt	0, cr0, [r3, #-0]
    12a0:	0700000a 	streq	r0, [r0, -sl]
    12a4:	00014b2f 	andeq	r4, r1, pc, lsr #22
    12a8:	0a870f00 	beq	fe1c4eb0 <GPIO_Ports+0xde1c1210>
    12ac:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    12b0:	00000097 	muleq	r0, r7, r0
    12b4:	2000155a 	andcs	r1, r0, sl, asr r5
    12b8:	00000028 	andeq	r0, r0, r8, lsr #32
    12bc:	01fc9c01 	mvnseq	r9, r1, lsl #24
    12c0:	6d100000 	ldcvs	0, cr0, [r0, #-0]
    12c4:	01006773 	tsteq	r0, r3, ror r7
    12c8:	0001fc58 	andeq	pc, r1, r8, asr ip	; <UNPREDICTABLE>
    12cc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    12d0:	000a4811 	andeq	r4, sl, r1, lsl r8
    12d4:	bd580100 	ldflte	f0, [r8, #-0]
    12d8:	02000000 	andeq	r0, r0, #0
    12dc:	28126891 	ldmdacs	r2, {r0, r4, r7, fp, sp, lr}
    12e0:	0100000a 	tsteq	r0, sl
    12e4:	00020259 	andeq	r0, r2, r9, asr r2
    12e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    12ec:	40041300 	andmi	r1, r4, r0, lsl #6
    12f0:	13000001 	movwne	r0, #1
    12f4:	00009704 	andeq	r9, r0, r4, lsl #14
    12f8:	0a170f00 	beq	5c4f00 <startup-0x1fa3b100>
    12fc:	46010000 	strmi	r0, [r1], -r0
    1300:	00000097 	muleq	r0, r7, r0
    1304:	200014f8 	strdcs	r1, [r0], -r8
    1308:	00000062 	andeq	r0, r0, r2, rrx
    130c:	02599c01 	subseq	r9, r9, #256	; 0x100
    1310:	6d100000 	ldcvs	0, cr0, [r0, #-0]
    1314:	01006773 	tsteq	r0, r3, ror r7
    1318:	0001fc46 	andeq	pc, r1, r6, asr #24
    131c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1320:	00646910 	rsbeq	r6, r4, r0, lsl r9
    1324:	00974601 	addseq	r4, r7, r1, lsl #12
    1328:	91020000 	mrsls	r0, (UNDEF: 2)
    132c:	0a28126b 	beq	a05ce0 <startup-0x1f5fa320>
    1330:	47010000 	strmi	r0, [r1, -r0]
    1334:	00000202 	andeq	r0, r0, r2, lsl #4
    1338:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    133c:	00000aa6 	andeq	r0, r0, r6, lsr #21
    1340:	01ad4a01 			; <UNDEFINED> instruction: 0x01ad4a01
    1344:	91020000 	mrsls	r0, (UNDEF: 2)
    1348:	6a0f0070 	bvs	3c1510 <startup-0x1fc3eaf0>
    134c:	0100000a 	tsteq	r0, sl
    1350:	0000972d 	andeq	r9, r0, sp, lsr #14
    1354:	00146e00 	andseq	r6, r4, r0, lsl #28
    1358:	00008a20 	andeq	r8, r0, r0, lsr #20
    135c:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    1360:	10000002 	andne	r0, r0, r2
    1364:	0067736d 	rsbeq	r7, r7, sp, ror #6
    1368:	01fc2d01 	mvnseq	r2, r1, lsl #26
    136c:	91020000 	mrsls	r0, (UNDEF: 2)
    1370:	0a9e116c 	beq	fe785928 <GPIO_Ports+0xde781c88>
    1374:	2d010000 	stccs	0, cr0, [r1, #-0]
    1378:	000000bd 	strheq	r0, [r0], -sp
    137c:	11689102 	cmnne	r8, r2, lsl #2
    1380:	00000a54 	andeq	r0, r0, r4, asr sl
    1384:	00972d01 	addseq	r2, r7, r1, lsl #26
    1388:	91020000 	mrsls	r0, (UNDEF: 2)
    138c:	0aad1167 	beq	feb45930 <GPIO_Ports+0xdeb41c90>
    1390:	2d010000 	stccs	0, cr0, [r1, #-0]
    1394:	00000097 	muleq	r0, r7, r0
    1398:	11669102 	cmnne	r6, r2, lsl #2
    139c:	00000ab5 			; <UNDEFINED> instruction: 0x00000ab5
    13a0:	00972d01 	addseq	r2, r7, r1, lsl #26
    13a4:	91020000 	mrsls	r0, (UNDEF: 2)
    13a8:	0a281200 	beq	a05bb0 <startup-0x1f5fa450>
    13ac:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    13b0:	00000202 	andeq	r0, r0, r2, lsl #4
    13b4:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    13b8:	00000aa6 	andeq	r0, r0, r6, lsr #21
    13bc:	01ad3101 			; <UNDEFINED> instruction: 0x01ad3101
    13c0:	91020000 	mrsls	r0, (UNDEF: 2)
    13c4:	35140070 	ldrcc	r0, [r4, #-112]	; 0xffffff90
    13c8:	0100000a 	tsteq	r0, sl
    13cc:	00009708 	andeq	r9, r0, r8, lsl #14
    13d0:	0013a800 	andseq	sl, r3, r0, lsl #16
    13d4:	0000c620 	andeq	ip, r0, r0, lsr #12
    13d8:	109c0100 	addsne	r0, ip, r0, lsl #2
    13dc:	0067736d 	rsbeq	r7, r7, sp, ror #6
    13e0:	01fc0801 	mvnseq	r0, r1, lsl #16
    13e4:	91020000 	mrsls	r0, (UNDEF: 2)
    13e8:	0a7c1164 	beq	1f05980 <startup-0x1e0fa680>
    13ec:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    13f0:	00000097 	muleq	r0, r7, r0
    13f4:	11639102 	cmnne	r3, r2, lsl #2
    13f8:	00000998 	muleq	r0, r8, r9
    13fc:	00970801 	addseq	r0, r7, r1, lsl #16
    1400:	91020000 	mrsls	r0, (UNDEF: 2)
    1404:	09a21162 	stmibeq	r2!, {r1, r5, r6, r8, ip}
    1408:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    140c:	00000097 	muleq	r0, r7, r0
    1410:	11619102 	cmnne	r1, r2, lsl #2
    1414:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
    1418:	00a20801 	adceq	r0, r2, r1, lsl #16
    141c:	91020000 	mrsls	r0, (UNDEF: 2)
    1420:	09bb1100 	ldmibeq	fp!, {r8, ip}
    1424:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    1428:	000000a2 	andeq	r0, r0, r2, lsr #1
    142c:	11049102 	tstne	r4, r2, lsl #2
    1430:	00000a4d 	andeq	r0, r0, sp, asr #20
    1434:	00970801 	addseq	r0, r7, r1, lsl #16
    1438:	91020000 	mrsls	r0, (UNDEF: 2)
    143c:	0a281208 	beq	a05c64 <startup-0x1f5fa39c>
    1440:	0d010000 	stceq	0, cr0, [r1, #-0]
    1444:	00000202 	andeq	r0, r0, r2, lsl #4
    1448:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    144c:	00000aa6 	andeq	r0, r0, r6, lsr #21
    1450:	01ad1001 			; <UNDEFINED> instruction: 0x01ad1001
    1454:	91020000 	mrsls	r0, (UNDEF: 2)
    1458:	23000068 	movwcs	r0, #104	; 0x68
    145c:	04000006 	streq	r0, [r0], #-6
    1460:	0004af00 	andeq	sl, r4, r0, lsl #30
    1464:	70010400 	andvc	r0, r1, r0, lsl #8
    1468:	0c000003 	stceq	0, cr0, [r0], {3}
    146c:	00000bcc 	andeq	r0, r0, ip, asr #23
    1470:	000006a5 	andeq	r0, r0, r5, lsr #13
    1474:	20001584 	andcs	r1, r0, r4, lsl #11
    1478:	0000050e 	andeq	r0, r0, lr, lsl #10
    147c:	0000080e 	andeq	r0, r0, lr, lsl #16
    1480:	bf060102 	svclt	0x00060102
    1484:	03000004 	movweq	r0, #4
    1488:	000000a9 	andeq	r0, r0, r9, lsr #1
    148c:	00372b02 	eorseq	r2, r7, r2, lsl #22
    1490:	01020000 	mrseq	r0, (UNDEF: 2)
    1494:	0004bd08 	andeq	fp, r4, r8, lsl #26
    1498:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    149c:	000004d6 	ldrdeq	r0, [r0], -r6
    14a0:	0005a403 	andeq	sl, r5, r3, lsl #8
    14a4:	50390200 	eorspl	r0, r9, r0, lsl #4
    14a8:	02000000 	andeq	r0, r0, #0
    14ac:	02c10702 	sbceq	r0, r1, #524288	; 0x80000
    14b0:	bc030000 	stclt	0, cr0, [r3], {-0}
    14b4:	02000005 	andeq	r0, r0, #5
    14b8:	0000624d 	andeq	r6, r0, sp, asr #4
    14bc:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    14c0:	0000016a 	andeq	r0, r0, sl, ror #2
    14c4:	00022003 	andeq	r2, r2, r3
    14c8:	744f0200 	strbvc	r0, [pc], #-512	; 14d0 <startup-0x1fffeb30>
    14cc:	02000000 	andeq	r0, r0, #0
    14d0:	01ba0704 			; <UNDEFINED> instruction: 0x01ba0704
    14d4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    14d8:	00016505 	andeq	r6, r1, r5, lsl #10
    14dc:	07080200 	streq	r0, [r8, -r0, lsl #4]
    14e0:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    14e4:	69050404 	stmdbvs	r5, {r2, sl}
    14e8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    14ec:	01bf0704 			; <UNDEFINED> instruction: 0x01bf0704
    14f0:	ab030000 	blge	c14f8 <startup-0x1ff3eb08>
    14f4:	03000000 	movweq	r0, #0
    14f8:	00002c18 	andeq	r2, r0, r8, lsl ip
    14fc:	05a60300 	streq	r0, [r6, #768]!	; 0x300
    1500:	24030000 	strcs	r0, [r3], #-0
    1504:	00000045 	andeq	r0, r0, r5, asr #32
    1508:	0000a205 	andeq	sl, r0, r5, lsl #4
    150c:	05be0300 	ldreq	r0, [lr, #768]!	; 0x300
    1510:	2c030000 	stccs	0, cr0, [r3], {-0}
    1514:	00000057 	andeq	r0, r0, r7, asr r0
    1518:	0000b205 	andeq	fp, r0, r5, lsl #4
    151c:	02220300 	eoreq	r0, r2, #0, 6
    1520:	30030000 	andcc	r0, r3, r0
    1524:	00000069 	andeq	r0, r0, r9, rrx
    1528:	0000c205 	andeq	ip, r0, r5, lsl #4
    152c:	01350600 	teqeq	r5, r0, lsl #12
    1530:	fa040000 	blx	101538 <startup-0x1fefeac8>
    1534:	0000bd06 	andeq	fp, r0, r6, lsl #26
    1538:	045a0700 	ldrbeq	r0, [sl], #-1792	; 0xfffff900
    153c:	3b050000 	blcc	141544 <startup-0x1febeabc>
    1540:	000000c2 	andeq	r0, r0, r2, asr #1
    1544:	37010708 	strcc	r0, [r1, -r8, lsl #14]
    1548:	06000000 	streq	r0, [r0], -r0
    154c:	0104035f 	tsteq	r4, pc, asr r3
    1550:	0c090000 	stceq	0, cr0, [r9], {-0}
    1554:	00000005 	andeq	r0, r0, r5
    1558:	0001f509 	andeq	pc, r1, r9, lsl #10
    155c:	0a000100 	beq	1964 <startup-0x1fffe69c>
    1560:	05c30628 	strbeq	r0, [r3, #1576]	; 0x628
    1564:	00000190 	muleq	r0, r0, r1
    1568:	000c7d0b 	andeq	r7, ip, fp, lsl #26
    156c:	05c50600 	strbeq	r0, [r5, #1536]	; 0x600
    1570:	000000cd 	andeq	r0, r0, sp, asr #1
    1574:	0bc50b00 	bleq	ff14417c <GPIO_Ports+0xdf1404dc>
    1578:	c6060000 	strgt	r0, [r6], -r0
    157c:	0000cd05 	andeq	ip, r0, r5, lsl #26
    1580:	450b0400 	strmi	r0, [fp, #-1024]	; 0xfffffc00
    1584:	0600000d 	streq	r0, [r0], -sp
    1588:	00cd05c7 	sbceq	r0, sp, r7, asr #11
    158c:	0b080000 	bleq	201594 <startup-0x1fdfea6c>
    1590:	00000c58 	andeq	r0, r0, r8, asr ip
    1594:	cd05c806 	stcgt	8, cr12, [r5, #-24]	; 0xffffffe8
    1598:	0c000000 	stceq	0, cr0, [r0], {-0}
    159c:	5244490c 	subpl	r4, r4, #12, 18	; 0x30000
    15a0:	05c90600 	strbeq	r0, [r9, #1536]	; 0x600
    15a4:	000000cd 	andeq	r0, r0, sp, asr #1
    15a8:	444f0c10 	strbmi	r0, [pc], #-3088	; 15b0 <startup-0x1fffea50>
    15ac:	ca060052 	bgt	1816fc <startup-0x1fe7e904>
    15b0:	0000cd05 	andeq	ip, r0, r5, lsl #26
    15b4:	f60b1400 			; <UNDEFINED> instruction: 0xf60b1400
    15b8:	0600000d 	streq	r0, [r0], -sp
    15bc:	00ad05cb 	adceq	r0, sp, fp, asr #11
    15c0:	0b180000 	bleq	6015c8 <startup-0x1f9fea38>
    15c4:	00000c77 	andeq	r0, r0, r7, ror ip
    15c8:	ad05cc06 	stcge	12, cr12, [r5, #-24]	; 0xffffffe8
    15cc:	1a000000 	bne	15d4 <startup-0x1fffea2c>
    15d0:	000bae0b 	andeq	sl, fp, fp, lsl #28
    15d4:	05cd0600 	strbeq	r0, [sp, #1536]	; 0x600
    15d8:	000000cd 	andeq	r0, r0, sp, asr #1
    15dc:	46410c1c 			; <UNDEFINED> instruction: 0x46410c1c
    15e0:	ce060052 	mcrgt	0, 0, r0, cr6, cr2, {2}
    15e4:	0001a005 	andeq	sl, r1, r5
    15e8:	0d002000 	stceq	0, cr2, [r0, #-0]
    15ec:	000000cd 	andeq	r0, r0, sp, asr #1
    15f0:	000001a0 	andeq	r0, r0, r0, lsr #3
    15f4:	0000900e 	andeq	r9, r0, lr
    15f8:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
    15fc:	00000190 	muleq	r0, r0, r1
    1600:	000ac40f 	andeq	ip, sl, pc, lsl #8
    1604:	05cf0600 	strbeq	r0, [pc, #1536]	; 1c0c <startup-0x1fffe3f4>
    1608:	00000104 	andeq	r0, r0, r4, lsl #2
    160c:	37010710 	smladcc	r1, r0, r7, r0
    1610:	07000000 	streq	r0, [r0, -r0]
    1614:	0001d742 	andeq	sp, r1, r2, asr #14
    1618:	0c5e0900 	mrrceq	9, 0, r0, lr, cr0	; <UNPREDICTABLE>
    161c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1620:	00000c4a 	andeq	r0, r0, sl, asr #24
    1624:	0b630901 	bleq	18c3a30 <startup-0x1e73c5d0>
    1628:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    162c:	00000b92 	muleq	r0, r2, fp
    1630:	fd030003 	stc2	0, cr0, [r3, #-12]
    1634:	0700000a 	streq	r0, [r0, -sl]
    1638:	0001b147 	andeq	fp, r1, r7, asr #2
    163c:	01071000 	mrseq	r1, (UNDEF: 7)
    1640:	00000037 	andeq	r0, r0, r7, lsr r0
    1644:	01fc4f07 	mvnseq	r4, r7, lsl #30
    1648:	99090000 	stmdbls	r9, {}	; <UNPREDICTABLE>
    164c:	0000000c 	andeq	r0, r0, ip
    1650:	000b3209 	andeq	r3, fp, r9, lsl #4
    1654:	03000100 	movweq	r0, #256	; 0x100
    1658:	00000bb3 			; <UNDEFINED> instruction: 0x00000bb3
    165c:	01e25207 	mvneq	r5, r7, lsl #4
    1660:	07100000 	ldreq	r0, [r0, -r0]
    1664:	00003701 	andeq	r3, r0, r1, lsl #14
    1668:	2d5a0700 	ldclcs	7, cr0, [sl, #-0]
    166c:	09000002 	stmdbeq	r0, {r1}
    1670:	00000d24 	andeq	r0, r0, r4, lsr #26
    1674:	0d330900 			; <UNDEFINED> instruction: 0x0d330900
    1678:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    167c:	00000ce1 	andeq	r0, r0, r1, ror #25
    1680:	0db70902 			; <UNDEFINED> instruction: 0x0db70902
    1684:	00030000 	andeq	r0, r3, r0
    1688:	000d5303 	andeq	r5, sp, r3, lsl #6
    168c:	075f0700 	ldrbeq	r0, [pc, -r0, lsl #14]
    1690:	10000002 	andne	r0, r0, r2
    1694:	00370107 	eorseq	r0, r7, r7, lsl #2
    1698:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    169c:	00000258 	andeq	r0, r0, r8, asr r2
    16a0:	000d7409 	andeq	r7, sp, r9, lsl #8
    16a4:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    16a8:	0100000d 	tsteq	r0, sp
    16ac:	000d6509 	andeq	r6, sp, r9, lsl #10
    16b0:	03000200 	movweq	r0, #512	; 0x200
    16b4:	00000dc7 	andeq	r0, r0, r7, asr #27
    16b8:	02387207 	eorseq	r7, r8, #1879048192	; 0x70000000
    16bc:	07100000 	ldreq	r0, [r0, -r0]
    16c0:	00003701 	andeq	r3, r0, r1, lsl #14
    16c4:	7d7a0700 	ldclvc	7, cr0, [sl, #-0]
    16c8:	09000002 	stmdbeq	r0, {r1}
    16cc:	00000b40 	andeq	r0, r0, r0, asr #22
    16d0:	0ae10900 	beq	ff843ad8 <GPIO_Ports+0xdf83fe38>
    16d4:	00010000 	andeq	r0, r1, r0
    16d8:	000d0403 	andeq	r0, sp, r3, lsl #8
    16dc:	637d0700 	cmnvs	sp, #0, 14
    16e0:	11000002 	tstne	r0, r2
    16e4:	cd840708 	stcgt	7, cr0, [r4, #32]
    16e8:	12000002 	andne	r0, r0, #2
    16ec:	00000ad8 	ldrdeq	r0, [r0], -r8
    16f0:	00c28607 	sbceq	r8, r2, r7, lsl #12
    16f4:	12000000 	andne	r0, r0, #0
    16f8:	00000e13 	andeq	r0, r0, r3, lsl lr
    16fc:	01d78907 	bicseq	r8, r7, r7, lsl #18
    1700:	12040000 	andne	r0, r4, #0
    1704:	00000b7d 	andeq	r0, r0, sp, ror fp
    1708:	022d8c07 	eoreq	r8, sp, #1792	; 0x700
    170c:	12050000 	andne	r0, r5, #0
    1710:	00000b58 	andeq	r0, r0, r8, asr fp
    1714:	01fc8f07 	mvnseq	r8, r7, lsl #30
    1718:	12060000 	andne	r0, r6, #0
    171c:	00000d9c 	muleq	r0, ip, sp
    1720:	02589207 	subseq	r9, r8, #1879048192	; 0x70000000
    1724:	00070000 	andeq	r0, r7, r0
    1728:	000da603 	andeq	sl, sp, r3, lsl #12
    172c:	88940700 	ldmhi	r4, {r8, r9, sl}
    1730:	13000002 	movwne	r0, #2
    1734:	00000de5 	andeq	r0, r0, r5, ror #27
    1738:	ee024301 	cdp	3, 0, cr4, cr2, cr1, {0}
    173c:	a4200019 	strtge	r0, [r0], #-25	; 0xffffffe7
    1740:	01000000 	mrseq	r0, (UNDEF: 0)
    1744:	00033a9c 	muleq	r3, ip, sl
    1748:	0d4d1400 	cfstrdeq	mvd1, [sp, #-0]
    174c:	43010000 	movwmi	r0, #4096	; 0x1000
    1750:	00033a02 	andeq	r3, r3, r2, lsl #20
    1754:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1758:	000cbf14 	andeq	fp, ip, r4, lsl pc
    175c:	02430100 	subeq	r0, r3, #0, 2
    1760:	000000a2 	andeq	r0, r0, r2, lsr #1
    1764:	146a9102 	strbtne	r9, [sl], #-258	; 0xfffffefe
    1768:	00000b0e 	andeq	r0, r0, lr, lsl #22
    176c:	97024301 	strls	r4, [r2, -r1, lsl #6]
    1770:	02000000 	andeq	r0, r0, #0
    1774:	16156991 			; <UNDEFINED> instruction: 0x16156991
    1778:	0100000b 	tsteq	r0, fp
    177c:	00c20245 	sbceq	r0, r2, r5, asr #4
    1780:	91020000 	mrsls	r0, (UNDEF: 2)
    1784:	0d951574 	cfldr32eq	mvfx1, [r5, #464]	; 0x1d0
    1788:	46010000 	strmi	r0, [r1], -r0
    178c:	0000c202 	andeq	ip, r0, r2, lsl #4
    1790:	70910200 	addsvc	r0, r1, r0, lsl #4
    1794:	a5041600 	strge	r1, [r4, #-1536]	; 0xfffffa00
    1798:	13000001 	movwne	r0, #1
    179c:	00000d85 	andeq	r0, r0, r5, lsl #27
    17a0:	ca01f001 	bgt	7d7ac <startup-0x1ff82854>
    17a4:	24200019 	strtcs	r0, [r0], #-25	; 0xffffffe7
    17a8:	01000000 	mrseq	r0, (UNDEF: 0)
    17ac:	0003759c 	muleq	r3, ip, r5
    17b0:	0d4d1400 	cfstrdeq	mvd1, [sp, #-0]
    17b4:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    17b8:	00033a01 	andeq	r3, r3, r1, lsl #20
    17bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    17c0:	000ad814 	andeq	sp, sl, r4, lsl r8
    17c4:	01f00100 	mvnseq	r0, r0, lsl #2
    17c8:	000000a2 	andeq	r0, r0, r2, lsr #1
    17cc:	00729102 	rsbseq	r9, r2, r2, lsl #2
    17d0:	000d1913 	andeq	r1, sp, r3, lsl r9
    17d4:	01e00100 	mvneq	r0, r0, lsl #2
    17d8:	200019ac 	andcs	r1, r0, ip, lsr #19
    17dc:	0000001e 	andeq	r0, r0, lr, lsl r0
    17e0:	03aa9c01 			; <UNDEFINED> instruction: 0x03aa9c01
    17e4:	4d140000 	ldcmi	0, cr0, [r4, #-0]
    17e8:	0100000d 	tsteq	r0, sp
    17ec:	033a01e0 	teqeq	sl, #224, 2	; 0x38
    17f0:	91020000 	mrsls	r0, (UNDEF: 2)
    17f4:	0cb71474 	cfldrseq	mvf1, [r7], #464	; 0x1d0
    17f8:	e0010000 	and	r0, r1, r0
    17fc:	0000a201 	andeq	sl, r0, r1, lsl #4
    1800:	72910200 	addsvc	r0, r1, #0, 4
    1804:	0b4a1300 	bleq	128640c <startup-0x1ed79bf4>
    1808:	c7010000 	strgt	r0, [r1, -r0]
    180c:	00197201 	andseq	r7, r9, r1, lsl #4
    1810:	00003a20 	andeq	r3, r0, r0, lsr #20
    1814:	ee9c0100 	fmle	f0, f4, f0
    1818:	14000003 	strne	r0, [r0], #-3
    181c:	00000d4d 	andeq	r0, r0, sp, asr #26
    1820:	3a01c701 	bcc	7342c <startup-0x1ff8cbd4>
    1824:	02000003 	andeq	r0, r0, #3
    1828:	d8147491 	ldmdale	r4, {r0, r4, r7, sl, ip, sp, lr}
    182c:	0100000a 	tsteq	r0, sl
    1830:	00a201c7 	adceq	r0, r2, r7, asr #3
    1834:	91020000 	mrsls	r0, (UNDEF: 2)
    1838:	0b2b1472 	bleq	ac6a08 <startup-0x1f5395f8>
    183c:	c7010000 	strgt	r0, [r1, -r0]
    1840:	00027d01 	andeq	r7, r2, r1, lsl #26
    1844:	71910200 	orrsvc	r0, r1, r0, lsl #4
    1848:	0b9f1300 	bleq	fe7c6450 <GPIO_Ports+0xde7c27b0>
    184c:	b1010000 	mrslt	r0, (UNDEF: 1)
    1850:	00195401 	andseq	r5, r9, r1, lsl #8
    1854:	00001e20 	andeq	r1, r0, r0, lsr #28
    1858:	239c0100 	orrscs	r0, ip, #0, 2
    185c:	14000004 	strne	r0, [r0], #-4
    1860:	00000d4d 	andeq	r0, r0, sp, asr #26
    1864:	3a01b101 	bcc	6dc70 <startup-0x1ff92390>
    1868:	02000003 	andeq	r0, r0, #3
    186c:	d8147491 	ldmdale	r4, {r0, r4, r7, sl, ip, sp, lr}
    1870:	0100000a 	tsteq	r0, sl
    1874:	00a201b1 	strhteq	r0, [r2], r1
    1878:	91020000 	mrsls	r0, (UNDEF: 2)
    187c:	70130072 	andsvc	r0, r3, r2, ror r0
    1880:	0100000b 	tsteq	r0, fp
    1884:	1936019c 	ldmdbne	r6!, {r2, r3, r4, r7, r8}
    1888:	001e2000 	andseq	r2, lr, r0
    188c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1890:	00000458 	andeq	r0, r0, r8, asr r4
    1894:	000d4d14 	andeq	r4, sp, r4, lsl sp
    1898:	019c0100 	orrseq	r0, ip, r0, lsl #2
    189c:	0000033a 	andeq	r0, r0, sl, lsr r3
    18a0:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    18a4:	00000ad8 	ldrdeq	r0, [r0], -r8
    18a8:	a2019c01 	andge	r9, r1, #256	; 0x100
    18ac:	02000000 	andeq	r0, r0, #0
    18b0:	17007291 			; <UNDEFINED> instruction: 0x17007291
    18b4:	00000ae9 	andeq	r0, r0, r9, ror #21
    18b8:	a2018801 	andge	r8, r1, #65536	; 0x10000
    18bc:	20000000 	andcs	r0, r0, r0
    18c0:	16200019 			; <UNDEFINED> instruction: 0x16200019
    18c4:	01000000 	mrseq	r0, (UNDEF: 0)
    18c8:	0004829c 	muleq	r4, ip, r2
    18cc:	0d4d1400 	cfstrdeq	mvd1, [sp, #-0]
    18d0:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    18d4:	00033a01 	andeq	r3, r3, r1, lsl #20
    18d8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    18dc:	0dfc1700 	ldcleq	7, cr1, [ip]
    18e0:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    18e4:	00009701 	andeq	r9, r0, r1, lsl #14
    18e8:	0018de00 	andseq	sp, r8, r0, lsl #28
    18ec:	00004220 	andeq	r4, r0, r0, lsr #4
    18f0:	ca9c0100 	bgt	fe701cf8 <GPIO_Ports+0xde6fe058>
    18f4:	14000004 	strne	r0, [r0], #-4
    18f8:	00000d4d 	andeq	r0, r0, sp, asr #26
    18fc:	3a016e01 	bcc	5d108 <startup-0x1ffa2ef8>
    1900:	02000003 	andeq	r0, r0, #3
    1904:	d8146c91 	ldmdale	r4, {r0, r4, r7, sl, fp, sp, lr}
    1908:	0100000a 	tsteq	r0, sl
    190c:	00a2016e 	adceq	r0, r2, lr, ror #2
    1910:	91020000 	mrsls	r0, (UNDEF: 2)
    1914:	04f1156a 	ldrbteq	r1, [r1], #1386	; 0x56a
    1918:	70010000 	andvc	r0, r1, r0
    191c:	00009701 	andeq	r9, r0, r1, lsl #14
    1920:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1924:	0cce1700 	stcleq	7, cr1, [lr], {0}
    1928:	5d010000 	stcpl	0, cr0, [r1, #-0]
    192c:	0000a201 	andeq	sl, r0, r1, lsl #4
    1930:	0018c800 	andseq	ip, r8, r0, lsl #16
    1934:	00001620 	andeq	r1, r0, r0, lsr #12
    1938:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
    193c:	14000004 	strne	r0, [r0], #-4
    1940:	00000d4d 	andeq	r0, r0, sp, asr #26
    1944:	3a015d01 	bcc	58d50 <startup-0x1ffa72b0>
    1948:	02000003 	andeq	r0, r0, #3
    194c:	17007491 			; <UNDEFINED> instruction: 0x17007491
    1950:	00000c83 	andeq	r0, r0, r3, lsl #25
    1954:	97014301 	strls	r4, [r1, -r1, lsl #6]
    1958:	86000000 	strhi	r0, [r0], -r0
    195c:	42200018 	eormi	r0, r0, #24
    1960:	01000000 	mrseq	r0, (UNDEF: 0)
    1964:	00053c9c 	muleq	r5, ip, ip
    1968:	0d4d1400 	cfstrdeq	mvd1, [sp, #-0]
    196c:	43010000 	movwmi	r0, #4096	; 0x1000
    1970:	00033a01 	andeq	r3, r3, r1, lsl #20
    1974:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1978:	000ad814 	andeq	sp, sl, r4, lsl r8
    197c:	01430100 	mrseq	r0, (UNDEF: 83)
    1980:	000000a2 	andeq	r0, r0, r2, lsr #1
    1984:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    1988:	000004f1 	strdeq	r0, [r0], -r1
    198c:	97014501 	strls	r4, [r1, -r1, lsl #10]
    1990:	02000000 	andeq	r0, r0, #0
    1994:	13007791 	movwne	r7, #1937	; 0x791
    1998:	00000cf1 	strdeq	r0, [r0], -r1
    199c:	40011501 	andmi	r1, r1, r1, lsl #10
    19a0:	46200018 			; <UNDEFINED> instruction: 0x46200018
    19a4:	01000000 	mrseq	r0, (UNDEF: 0)
    19a8:	0005809c 	muleq	r5, ip, r0
    19ac:	0d4d1400 	cfstrdeq	mvd1, [sp, #-0]
    19b0:	15010000 	strne	r0, [r1, #-0]
    19b4:	00033a01 	andeq	r3, r3, r1, lsl #20
    19b8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    19bc:	000ad814 	andeq	sp, sl, r4, lsl r8
    19c0:	01150100 	tsteq	r5, r0, lsl #2
    19c4:	000000a2 	andeq	r0, r0, r2, lsr #1
    19c8:	186a9102 	stmdane	sl!, {r1, r8, ip, pc}^
    19cc:	00706d74 	rsbseq	r6, r0, r4, ror sp
    19d0:	cd011701 	stcgt	7, cr1, [r1, #-4]
    19d4:	02000000 	andeq	r0, r0, #0
    19d8:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
    19dc:	00000b1b 	andeq	r0, r0, fp, lsl fp
    19e0:	180cfe01 	stmdane	ip, {r0, r9, sl, fp, ip, sp, lr, pc}
    19e4:	00342000 	eorseq	r2, r4, r0
    19e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    19ec:	000005a4 	andeq	r0, r0, r4, lsr #11
    19f0:	000ca71a 	andeq	sl, ip, sl, lsl r7
    19f4:	a4fe0100 	ldrbtge	r0, [lr], #256	; 0x100
    19f8:	02000005 	andeq	r0, r0, #5
    19fc:	16007491 			; <UNDEFINED> instruction: 0x16007491
    1a00:	0002cd04 	andeq	ip, r2, r4, lsl #26
    1a04:	0b881900 	bleq	fe207e0c <GPIO_Ports+0xde20416c>
    1a08:	ca010000 	bgt	41a10 <startup-0x1ffbe5f0>
    1a0c:	200016f4 	strdcs	r1, [r0], -r4
    1a10:	00000118 	andeq	r0, r0, r8, lsl r1
    1a14:	06069c01 	streq	r9, [r6], -r1, lsl #24
    1a18:	4d1a0000 	ldcmi	0, cr0, [sl, #-0]
    1a1c:	0100000d 	tsteq	r0, sp
    1a20:	00033aca 	andeq	r3, r3, sl, asr #21
    1a24:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1a28:	000ca71a 	andeq	sl, ip, sl, lsl r7
    1a2c:	a4ca0100 	strbge	r0, [sl], #256	; 0x100
    1a30:	02000005 	andeq	r0, r0, #5
    1a34:	d11b6091 			; <UNDEFINED> instruction: 0xd11b6091
    1a38:	0100000a 	tsteq	r0, sl
    1a3c:	0000c2cc 	andeq	ip, r0, ip, asr #5
    1a40:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a44:	736f701c 	cmnvc	pc, #28
    1a48:	c2cc0100 	sbcgt	r0, ip, #0, 2
    1a4c:	02000000 	andeq	r0, r0, #0
    1a50:	0e1b7091 	mrceq	0, 0, r7, cr11, cr1, {4}
    1a54:	0100000d 	tsteq	r0, sp
    1a58:	0000c2cc 	andeq	ip, r0, ip, asr #5
    1a5c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1a60:	0c6b1d00 	stcleq	13, cr1, [fp], #-0
    1a64:	7f010000 	svcvc	0x00010000
    1a68:	20001584 	andcs	r1, r0, r4, lsl #11
    1a6c:	00000170 	andeq	r0, r0, r0, ror r1
    1a70:	4d1a9c01 	ldcmi	12, cr9, [sl, #-4]
    1a74:	0100000d 	tsteq	r0, sp
    1a78:	00033a7f 	andeq	r3, r3, pc, ror sl
    1a7c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a80:	028d0000 	addeq	r0, sp, #0
    1a84:	00040000 	andeq	r0, r4, r0
    1a88:	0000066b 	andeq	r0, r0, fp, ror #12
    1a8c:	03700104 	cmneq	r0, #4, 2
    1a90:	640c0000 	strvs	r0, [ip], #-0
    1a94:	a500000e 	strge	r0, [r0, #-14]
    1a98:	94000006 	strls	r0, [r0], #-6
    1a9c:	7420001a 	strtvc	r0, [r0], #-26	; 0xffffffe6
    1aa0:	c7000001 	strgt	r0, [r0, -r1]
    1aa4:	0200000a 	andeq	r0, r0, #10
    1aa8:	04bf0601 	ldrteq	r0, [pc], #1537	; 1ab0 <startup-0x1fffe550>
    1aac:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    1ab0:	02000000 	andeq	r0, r0, #0
    1ab4:	0000372b 	andeq	r3, r0, fp, lsr #14
    1ab8:	08010200 	stmdaeq	r1, {r9}
    1abc:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
    1ac0:	d6050202 	strle	r0, [r5], -r2, lsl #4
    1ac4:	02000004 	andeq	r0, r0, #4
    1ac8:	02c10702 	sbceq	r0, r1, #524288	; 0x80000
    1acc:	bc030000 	stclt	0, cr0, [r3], {-0}
    1ad0:	02000005 	andeq	r0, r0, #5
    1ad4:	0000574d 	andeq	r5, r0, sp, asr #14
    1ad8:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    1adc:	0000016a 	andeq	r0, r0, sl, ror #2
    1ae0:	00022003 	andeq	r2, r2, r3
    1ae4:	694f0200 	stmdbvs	pc, {r9}^	; <UNPREDICTABLE>
    1ae8:	02000000 	andeq	r0, r0, #0
    1aec:	01ba0704 			; <UNDEFINED> instruction: 0x01ba0704
    1af0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1af4:	00016505 	andeq	r6, r1, r5, lsl #10
    1af8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    1afc:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    1b00:	69050404 	stmdbvs	r5, {r2, sl}
    1b04:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1b08:	01bf0704 			; <UNDEFINED> instruction: 0x01bf0704
    1b0c:	ab030000 	blge	c1b14 <startup-0x1ff3e4ec>
    1b10:	03000000 	movweq	r0, #0
    1b14:	00002c18 	andeq	r2, r0, r8, lsl ip
    1b18:	05be0300 	ldreq	r0, [lr, #768]!	; 0x300
    1b1c:	2c030000 	stccs	0, cr0, [r3], {-0}
    1b20:	0000004c 	andeq	r0, r0, ip, asr #32
    1b24:	00009705 	andeq	r9, r0, r5, lsl #14
    1b28:	02220300 	eoreq	r0, r2, #0, 6
    1b2c:	30030000 	andcc	r0, r3, r0
    1b30:	0000005e 	andeq	r0, r0, lr, asr r0
    1b34:	0000a705 	andeq	sl, r0, r5, lsl #14
    1b38:	01350600 	teqeq	r5, r0, lsl #12
    1b3c:	fa040000 	blx	101b44 <startup-0x1fefe4bc>
    1b40:	0000a206 	andeq	sl, r0, r6, lsl #4
    1b44:	045a0700 	ldrbeq	r0, [sl], #-1792	; 0xfffff900
    1b48:	3b050000 	blcc	141b50 <startup-0x1febe4b0>
    1b4c:	000000a7 	andeq	r0, r0, r7, lsr #1
    1b50:	37010708 	strcc	r0, [r1, -r8, lsl #14]
    1b54:	06000000 	streq	r0, [r0], -r0
    1b58:	00e9035d 	rsceq	r0, r9, sp, asr r3
    1b5c:	44090000 	strmi	r0, [r9], #-0
    1b60:	0000000b 	andeq	r0, r0, fp
    1b64:	5445530a 	strbpl	r5, [r5], #-778	; 0xfffffcf6
    1b68:	0b000100 	bleq	1f70 <startup-0x1fffe090>
    1b6c:	000016a3 	andeq	r1, r0, r3, lsr #13
    1b70:	ce035d06 	cdpgt	13, 0, cr5, cr3, cr6, {0}
    1b74:	0b000000 	bleq	1b7c <startup-0x1fffe484>
    1b78:	0000063f 	andeq	r0, r0, pc, lsr r6
    1b7c:	ce035d06 	cdpgt	13, 0, cr5, cr3, cr6, {0}
    1b80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1b84:	00370107 	eorseq	r0, r7, r7, lsl #2
    1b88:	5f060000 	svcpl	0x00060000
    1b8c:	00011c03 	andeq	r1, r1, r3, lsl #24
    1b90:	050c0900 	streq	r0, [ip, #-2304]	; 0xfffff700
    1b94:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1b98:	000001f5 	strdeq	r0, [r0], -r5
    1b9c:	190b0001 	stmdbne	fp, {r0}
    1ba0:	06000004 	streq	r0, [r0], -r4
    1ba4:	0101035f 	tsteq	r1, pc, asr r3
    1ba8:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    1bac:	5607d906 	strpl	sp, [r7], -r6, lsl #18
    1bb0:	0d000001 	stceq	0, cr0, [r0, #-4]
    1bb4:	06005243 	streq	r5, [r0], -r3, asr #4
    1bb8:	00b207db 	ldrsbteq	r0, [r2], fp
    1bbc:	0d000000 	stceq	0, cr0, [r0, #-0]
    1bc0:	06005253 			; <UNDEFINED> instruction: 0x06005253
    1bc4:	00b207dc 	ldrsbteq	r0, [r2], ip
    1bc8:	0d040000 	stceq	0, cr0, [r4, #-0]
    1bcc:	06005244 	streq	r5, [r0], -r4, asr #4
    1bd0:	00b207dd 	ldrsbteq	r0, [r2], sp
    1bd4:	00080000 	andeq	r0, r8, r0
    1bd8:	000e580b 	andeq	r5, lr, fp, lsl #16
    1bdc:	07de0600 	ldrbeq	r0, [lr, r0, lsl #12]
    1be0:	00000128 	andeq	r0, r0, r8, lsr #2
    1be4:	000f080e 	andeq	r0, pc, lr, lsl #16
    1be8:	017d0100 	cmneq	sp, r0, lsl #2
    1bec:	20001be4 	andcs	r1, r0, r4, ror #23
    1bf0:	00000024 	andeq	r0, r0, r4, lsr #32
    1bf4:	01889c01 	orreq	r9, r8, r1, lsl #24
    1bf8:	1d0f0000 	stcne	0, cr0, [pc, #-0]	; 1c00 <startup-0x1fffe400>
    1bfc:	0100000e 	tsteq	r0, lr
    1c00:	008c017d 	addeq	r0, ip, sp, ror r1
    1c04:	91020000 	mrsls	r0, (UNDEF: 2)
    1c08:	f8100077 			; <UNDEFINED> instruction: 0xf8100077
    1c0c:	0100000e 	tsteq	r0, lr
    1c10:	00f5015f 	rscseq	r0, r5, pc, asr r1
    1c14:	1ba00000 	blne	fe801c1c <GPIO_Ports+0xde7fdf7c>
    1c18:	00442000 	subeq	r2, r4, r0
    1c1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c20:	000001c1 	andeq	r0, r0, r1, asr #3
    1c24:	000e1d0f 	andeq	r1, lr, pc, lsl #26
    1c28:	015f0100 	cmpeq	pc, r0, lsl #2
    1c2c:	0000008c 	andeq	r0, r0, ip, lsl #1
    1c30:	116f9102 	cmnne	pc, r2, lsl #2
    1c34:	000004f1 	strdeq	r0, [r0], -r1
    1c38:	f5016101 			; <UNDEFINED> instruction: 0xf5016101
    1c3c:	02000000 	andeq	r0, r0, #0
    1c40:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
    1c44:	00000eea 	andeq	r0, r0, sl, ror #29
    1c48:	7c014f01 	stcvc	15, cr4, [r1], {1}
    1c4c:	2420001b 	strtcs	r0, [r0], #-27	; 0xffffffe5
    1c50:	01000000 	mrseq	r0, (UNDEF: 0)
    1c54:	0001e79c 	muleq	r1, ip, r7
    1c58:	0ee10f00 	cdpeq	15, 14, cr0, cr1, cr0, {0}
    1c5c:	4f010000 	svcmi	0x00010000
    1c60:	00008c01 	andeq	r8, r0, r1, lsl #24
    1c64:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1c68:	0f1e1000 	svceq	0x001e1000
    1c6c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1c70:	0000e901 	andeq	lr, r0, r1, lsl #18
    1c74:	001b3800 	andseq	r3, fp, r0, lsl #16
    1c78:	00004420 	andeq	r4, r0, r0, lsr #8
    1c7c:	209c0100 	addscs	r0, ip, r0, lsl #2
    1c80:	0f000002 	svceq	0x00000002
    1c84:	00000ee1 	andeq	r0, r0, r1, ror #29
    1c88:	8c012e01 	stchi	14, cr2, [r1], {1}
    1c8c:	02000000 	andeq	r0, r0, #0
    1c90:	f1116f91 			; <UNDEFINED> instruction: 0xf1116f91
    1c94:	01000004 	tsteq	r0, r4
    1c98:	00e90130 	rsceq	r0, r9, r0, lsr r1
    1c9c:	91020000 	mrsls	r0, (UNDEF: 2)
    1ca0:	240e0077 	strcs	r0, [lr], #-119	; 0xffffff89
    1ca4:	0100000e 	tsteq	r0, lr
    1ca8:	1afc0114 	bne	fff02100 <GPIO_Ports+0xdfefe460>
    1cac:	003c2000 	eorseq	r2, ip, r0
    1cb0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1cb4:	00000246 	andeq	r0, r0, r6, asr #4
    1cb8:	0002120f 	andeq	r1, r2, pc, lsl #4
    1cbc:	01140100 	tsteq	r4, r0, lsl #2
    1cc0:	0000011c 	andeq	r0, r0, ip, lsl r1
    1cc4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1cc8:	000e3912 	andeq	r3, lr, r2, lsl r9
    1ccc:	a7b90100 	ldrge	r0, [r9, r0, lsl #2]!
    1cd0:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    1cd4:	1420001a 	strtne	r0, [r0], #-26	; 0xffffffe6
    1cd8:	01000000 	mrseq	r0, (UNDEF: 0)
    1cdc:	0e31139c 	mrceq	3, 1, r1, cr1, cr12, {4}
    1ce0:	7b010000 	blvc	41ce8 <startup-0x1ffbe318>
    1ce4:	20001aae 	andcs	r1, r0, lr, lsr #21
    1ce8:	0000003a 	andeq	r0, r0, sl, lsr r0
    1cec:	027f9c01 	rsbseq	r9, pc, #256	; 0x100
    1cf0:	12140000 	andsne	r0, r4, #0
    1cf4:	01000002 	tsteq	r0, r2
    1cf8:	00011c7b 	andeq	r1, r1, fp, ror ip
    1cfc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1d00:	0e4d1500 	cdpeq	5, 4, cr1, cr13, cr0, {0}
    1d04:	63010000 	movwvs	r0, #4096	; 0x1000
    1d08:	20001a94 	mulcs	r0, r4, sl
    1d0c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1d10:	7e009c01 	cdpvc	12, 0, cr9, cr0, cr1, {0}
    1d14:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    1d18:	0007c600 	andeq	ip, r7, r0, lsl #12
    1d1c:	70010400 	andvc	r0, r1, r0, lsl #8
    1d20:	0c000003 	stceq	0, cr0, [r0], {3}
    1d24:	000019c5 	andeq	r1, r0, r5, asr #19
    1d28:	000006a5 	andeq	r0, r0, r5, lsr #13
	...
    1d34:	00000ccc 	andeq	r0, r0, ip, asr #25
    1d38:	001b6e02 	andseq	r6, fp, r2, lsl #28
    1d3c:	53010500 	movwpl	r0, #5376	; 0x1500
    1d40:	05000002 	streq	r0, [r0, #-2]
    1d44:	000253c8 	andeq	r5, r2, r8, asr #7
    1d48:	14b20300 	ldrtne	r0, [r2], #768	; 0x300
    1d4c:	03720000 	cmneq	r2, #0
    1d50:	0000152d 	andeq	r1, r0, sp, lsr #10
    1d54:	15d80374 	ldrbne	r0, [r8, #884]	; 0x374
    1d58:	03750000 	cmneq	r5, #0
    1d5c:	000012ba 			; <UNDEFINED> instruction: 0x000012ba
    1d60:	16870376 			; <UNDEFINED> instruction: 0x16870376
    1d64:	037b0000 	cmneq	fp, #0
    1d68:	00001a8b 	andeq	r1, r0, fp, lsl #21
    1d6c:	1c89037c 	stcne	3, cr0, [r9], {124}	; 0x7c
    1d70:	037e0000 	cmneq	lr, #0
    1d74:	000011e7 	andeq	r1, r0, r7, ror #3
    1d78:	14c6047f 	strbne	r0, [r6], #1151	; 0x47f
    1d7c:	04000000 	streq	r0, [r0], #-0
    1d80:	000013c1 	andeq	r1, r0, r1, asr #7
    1d84:	15430401 	strbne	r0, [r3, #-1025]	; 0xfffffbff
    1d88:	04020000 	streq	r0, [r2], #-0
    1d8c:	00000f35 	andeq	r0, r0, r5, lsr pc
    1d90:	0fcc0403 	svceq	0x00cc0403
    1d94:	04040000 	streq	r0, [r4], #-0
    1d98:	00001afa 	strdeq	r1, [r0], -sl
    1d9c:	1a280405 	bne	a02db8 <startup-0x1f5fd248>
    1da0:	04060000 	streq	r0, [r6], #-0
    1da4:	0000143b 	andeq	r1, r0, fp, lsr r4
    1da8:	0f430407 	svceq	0x00430407
    1dac:	04080000 	streq	r0, [r8], #-0
    1db0:	00001c7e 	andeq	r1, r0, lr, ror ip
    1db4:	17570409 	ldrbne	r0, [r7, -r9, lsl #8]
    1db8:	040a0000 	streq	r0, [sl], #-0
    1dbc:	000018d4 	ldrdeq	r1, [r0], -r4
    1dc0:	180a040b 	stmdane	sl, {r0, r1, r3, sl}
    1dc4:	040c0000 	streq	r0, [ip], #-0
    1dc8:	00001234 	andeq	r1, r0, r4, lsr r2
    1dcc:	1b14040d 	blne	502e08 <startup-0x1fafd1f8>
    1dd0:	040e0000 	streq	r0, [lr], #-0
    1dd4:	00001a55 	andeq	r1, r0, r5, asr sl
    1dd8:	1453040f 	ldrbne	r0, [r3], #-1039	; 0xfffffbf1
    1ddc:	04100000 	ldreq	r0, [r0], #-0
    1de0:	00000f4e 	andeq	r0, r0, lr, asr #30
    1de4:	19910411 	ldmibne	r1, {r0, r4, sl}
    1de8:	04120000 	ldreq	r0, [r2], #-0
    1dec:	00001446 	andeq	r1, r0, r6, asr #8
    1df0:	132a0413 			; <UNDEFINED> instruction: 0x132a0413
    1df4:	04140000 	ldreq	r0, [r4], #-0
    1df8:	00001be6 	andeq	r1, r0, r6, ror #23
    1dfc:	155d0415 	ldrbne	r0, [sp, #-1045]	; 0xfffffbeb
    1e00:	04160000 	ldreq	r0, [r6], #-0
    1e04:	00001c11 	andeq	r1, r0, r1, lsl ip
    1e08:	16070417 			; <UNDEFINED> instruction: 0x16070417
    1e0c:	04180000 	ldreq	r0, [r8], #-0
    1e10:	00001b60 	andeq	r1, r0, r0, ror #22
    1e14:	11570419 	cmpne	r7, r9, lsl r4
    1e18:	041a0000 	ldreq	r0, [sl], #-0
    1e1c:	00001420 	andeq	r1, r0, r0, lsr #8
    1e20:	1044041b 	subne	r0, r4, fp, lsl r4
    1e24:	041c0000 	ldreq	r0, [ip], #-0
    1e28:	0000194f 	andeq	r1, r0, pc, asr #18
    1e2c:	1381041d 	orrne	r0, r1, #486539264	; 0x1d000000
    1e30:	041e0000 	ldreq	r0, [lr], #-0
    1e34:	000013d2 	ldrdeq	r1, [r0], -r2
    1e38:	1287041f 	addne	r0, r7, #520093696	; 0x1f000000
    1e3c:	04200000 	strteq	r0, [r0], #-0
    1e40:	00001770 	andeq	r1, r0, r0, ror r7
    1e44:	15b30421 	ldrne	r0, [r3, #1057]!	; 0x421
    1e48:	04220000 	strteq	r0, [r2], #-0
    1e4c:	0000167d 	andeq	r1, r0, sp, ror r6
    1e50:	10b70423 	adcsne	r0, r7, r3, lsr #8
    1e54:	04240000 	strteq	r0, [r4], #-0
    1e58:	00001959 	andeq	r1, r0, r9, asr r9
    1e5c:	1b260425 	blne	982ef8 <startup-0x1f67d108>
    1e60:	04260000 	strteq	r0, [r6], #-0
    1e64:	00001203 	andeq	r1, r0, r3, lsl #4
    1e68:	19340427 	ldmdbne	r4!, {r0, r1, r2, r5, sl}
    1e6c:	04280000 	strteq	r0, [r8], #-0
    1e70:	00001906 	andeq	r1, r0, r6, lsl #18
    1e74:	172d0429 	strne	r0, [sp, -r9, lsr #8]!
    1e78:	042a0000 	strteq	r0, [sl], #-0
    1e7c:	000010c1 	andeq	r1, r0, r1, asr #1
    1e80:	0f60042b 	svceq	0x0060042b
    1e84:	042c0000 	strteq	r0, [ip], #-0
    1e88:	0000147c 	andeq	r1, r0, ip, ror r4
    1e8c:	1c56042d 	cfldrdne	mvd0, [r6], {45}	; 0x2d
    1e90:	042e0000 	strteq	r0, [lr], #-0
    1e94:	00001ca8 	andeq	r1, r0, r8, lsr #25
    1e98:	1a1e042f 	bne	782f5c <startup-0x1f87d0a4>
    1e9c:	04300000 	ldrteq	r0, [r0], #-0
    1ea0:	00001c63 	andeq	r1, r0, r3, ror #24
    1ea4:	12b00431 	adcsne	r0, r0, #822083584	; 0x31000000
    1ea8:	04320000 	ldrteq	r0, [r2], #-0
    1eac:	00000fc2 	andeq	r0, r0, r2, asr #31
    1eb0:	16f80433 			; <UNDEFINED> instruction: 0x16f80433
    1eb4:	04340000 	ldrteq	r0, [r4], #-0
    1eb8:	000015fc 	strdeq	r1, [r0], -ip
    1ebc:	17620435 			; <UNDEFINED> instruction: 0x17620435
    1ec0:	04360000 	ldrteq	r0, [r6], #-0
    1ec4:	00001653 	andeq	r1, r0, r3, asr r6
    1ec8:	15750437 	ldrbne	r0, [r5, #-1079]!	; 0xfffffbc9
    1ecc:	04380000 	ldrteq	r0, [r8], #-0
    1ed0:	00000fa1 	andeq	r0, r0, r1, lsr #31
    1ed4:	1d120439 	cfldrsne	mvf0, [r2, #-228]	; 0xffffff1c
    1ed8:	043a0000 	ldrteq	r0, [sl], #-0
    1edc:	00001829 	andeq	r1, r0, r9, lsr #16
    1ee0:	126b043b 	rsbne	r0, fp, #989855744	; 0x3b000000
    1ee4:	043c0000 	ldrteq	r0, [ip], #-0
    1ee8:	00001aca 	andeq	r1, r0, sl, asr #21
    1eec:	165d043d 			; <UNDEFINED> instruction: 0x165d043d
    1ef0:	043e0000 	ldrteq	r0, [lr], #-0
    1ef4:	00001844 	andeq	r1, r0, r4, asr #16
    1ef8:	1093043f 	addsne	r0, r3, pc, lsr r4
    1efc:	04400000 	strbeq	r0, [r0], #-0
    1f00:	00001983 	andeq	r1, r0, r3, lsl #19
    1f04:	12940441 	addsne	r0, r4, #1090519040	; 0x41000000
    1f08:	04420000 	strbeq	r0, [r2], #-0
    1f0c:	000014a6 	andeq	r1, r0, r6, lsr #9
    1f10:	112e0443 			; <UNDEFINED> instruction: 0x112e0443
    1f14:	04440000 	strbeq	r0, [r4], #-0
    1f18:	00001a71 	andeq	r1, r0, r1, ror sl
    1f1c:	14940445 	ldrne	r0, [r4], #1093	; 0x445
    1f20:	04460000 	strbeq	r0, [r6], #-0
    1f24:	000010a1 	andeq	r1, r0, r1, lsr #1
    1f28:	1ab40447 	bne	fed0304c <GPIO_Ports+0xdecff3ac>
    1f2c:	04480000 	strbeq	r0, [r8], #-0
    1f30:	0000191d 	andeq	r1, r0, sp, lsl r9
    1f34:	1baa0449 	blne	fea83060 <GPIO_Ports+0xdea7f3c0>
    1f38:	044a0000 	strbeq	r0, [sl], #-0
    1f3c:	00001c95 	muleq	r0, r5, ip
    1f40:	14d0044b 	ldrbne	r0, [r0], #1099	; 0x44b
    1f44:	044c0000 	strbeq	r0, [ip], #-0
    1f48:	0000166b 	andeq	r1, r0, fp, ror #12
    1f4c:	0fd7044d 	svceq	0x00d7044d
    1f50:	044e0000 	strbeq	r0, [lr], #-0
    1f54:	0000192a 	andeq	r1, r0, sl, lsr #18
    1f58:	142d044f 	strtne	r0, [sp], #-1103	; 0xfffffbb1
    1f5c:	04500000 	ldrbeq	r0, [r0], #-0
    1f60:	000016d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    1f64:	01050051 	qaddeq	r0, r1, r5
    1f68:	0004bf06 	andeq	fp, r4, r6, lsl #30
    1f6c:	156b0600 	strbne	r0, [fp, #-1536]!	; 0xfffffa00
    1f70:	2f050000 	svccs	0x00050000
    1f74:	00002503 	andeq	r2, r0, r3, lsl #10
    1f78:	00a90700 	adceq	r0, r9, r0, lsl #14
    1f7c:	2b060000 	blcs	181f84 <startup-0x1fe7e07c>
    1f80:	00000271 	andeq	r0, r0, r1, ror r2
    1f84:	bd080105 	stflts	f0, [r8, #-20]	; 0xffffffec
    1f88:	05000004 	streq	r0, [r0, #-4]
    1f8c:	04d60502 	ldrbeq	r0, [r6], #1282	; 0x502
    1f90:	a4070000 	strge	r0, [r7], #-0
    1f94:	06000005 	streq	r0, [r0], -r5
    1f98:	00028a39 	andeq	r8, r2, r9, lsr sl
    1f9c:	07020500 	streq	r0, [r2, -r0, lsl #10]
    1fa0:	000002c1 	andeq	r0, r0, r1, asr #5
    1fa4:	0005bc07 	andeq	fp, r5, r7, lsl #24
    1fa8:	9c4d0600 	mcrrls	6, 0, r0, sp, cr0
    1fac:	05000002 	streq	r0, [r0, #-2]
    1fb0:	016a0504 	cmneq	sl, r4, lsl #10
    1fb4:	20070000 	andcs	r0, r7, r0
    1fb8:	06000002 	streq	r0, [r0], -r2
    1fbc:	0002ae4f 	andeq	sl, r2, pc, asr #28
    1fc0:	07040500 	streq	r0, [r4, -r0, lsl #10]
    1fc4:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
    1fc8:	65050805 	strvs	r0, [r5, #-2053]	; 0xfffff7fb
    1fcc:	05000001 	streq	r0, [r0, #-1]
    1fd0:	01b50708 			; <UNDEFINED> instruction: 0x01b50708
    1fd4:	04080000 	streq	r0, [r8], #-0
    1fd8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1fdc:	02c30900 	sbceq	r0, r3, #0, 18
    1fe0:	04050000 	streq	r0, [r5], #-0
    1fe4:	0001bf07 	andeq	fp, r1, r7, lsl #30
    1fe8:	00ab0700 	adceq	r0, fp, r0, lsl #14
    1fec:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    1ff0:	00000266 	andeq	r0, r0, r6, ror #4
    1ff4:	0002d609 	andeq	sp, r2, r9, lsl #12
    1ff8:	02d60a00 	sbcseq	r0, r6, #0, 20
    1ffc:	e6090000 	str	r0, [r9], -r0
    2000:	07000002 	streq	r0, [r0, -r2]
    2004:	000005a6 	andeq	r0, r0, r6, lsr #11
    2008:	027f2407 	rsbseq	r2, pc, #117440512	; 0x7000000
    200c:	f0090000 			; <UNDEFINED> instruction: 0xf0090000
    2010:	07000002 	streq	r0, [r0, -r2]
    2014:	000005be 			; <UNDEFINED> instruction: 0x000005be
    2018:	02912c07 	addseq	r2, r1, #1792	; 0x700
    201c:	00090000 	andeq	r0, r9, r0
    2020:	07000003 	streq	r0, [r0, -r3]
    2024:	00000222 	andeq	r0, r0, r2, lsr #4
    2028:	02a33007 	adceq	r3, r3, #7
    202c:	10090000 	andne	r0, r9, r0
    2030:	0a000003 	beq	2044 <startup-0x1fffdfbc>
    2034:	0000031b 	andeq	r0, r0, fp, lsl r3
    2038:	010e040b 	tsteq	lr, fp, lsl #8
    203c:	03e101a0 	mvneq	r0, #160, 2	; 0x28
    2040:	af0c0000 	svcge	0x000c0000
    2044:	01000007 	tsteq	r0, r7
    2048:	03f101a2 	mvnseq	r0, #-2147483608	; 0x80000028
    204c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2050:	00000481 	andeq	r0, r0, r1, lsl #9
    2054:	f601a301 			; <UNDEFINED> instruction: 0xf601a301
    2058:	20000003 	andcs	r0, r0, r3
    205c:	0008110c 	andeq	r1, r8, ip, lsl #2
    2060:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    2064:	000003f1 	strdeq	r0, [r0], -r1
    2068:	07c70c80 	strbeq	r0, [r7, r0, lsl #25]
    206c:	a5010000 	strge	r0, [r1, #-0]
    2070:	0003f601 	andeq	pc, r3, r1, lsl #12
    2074:	6c0da000 	stcvs	0, cr10, [sp], {-0}
    2078:	01000008 	tsteq	r0, r8
    207c:	03f101a6 	mvnseq	r0, #-2147483607	; 0x80000029
    2080:	01000000 	mrseq	r0, (UNDEF: 0)
    2084:	0004950d 	andeq	r9, r4, sp, lsl #10
    2088:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    208c:	000003f6 	strdeq	r0, [r0], -r6
    2090:	000d0120 	andeq	r0, sp, r0, lsr #2
    2094:	01000008 	tsteq	r0, r8
    2098:	03f101a8 	mvnseq	r0, #168, 2	; 0x2a
    209c:	01800000 	orreq	r0, r0, r0
    20a0:	00049f0d 	andeq	r9, r4, sp, lsl #30
    20a4:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
    20a8:	000003f6 	strdeq	r0, [r0], -r6
    20ac:	340d01a0 	strcc	r0, [sp], #-416	; 0xfffffe60
    20b0:	01000007 	tsteq	r0, r7
    20b4:	03f101aa 	mvnseq	r0, #-2147483606	; 0x8000002a
    20b8:	02000000 	andeq	r0, r0, #0
    20bc:	0004a90d 	andeq	sl, r4, sp, lsl #18
    20c0:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    20c4:	00000406 	andeq	r0, r0, r6, lsl #8
    20c8:	490e0220 	stmdbmi	lr, {r5, r9}
    20cc:	ac010050 	stcge	0, cr0, [r1], {80}	; 0x50
    20d0:	00042601 	andeq	r2, r4, r1, lsl #12
    20d4:	0d030000 	stceq	0, cr0, [r3, #-0]
    20d8:	00000545 	andeq	r0, r0, r5, asr #10
    20dc:	2b01ad01 	blcs	6d4e8 <startup-0x1ff92b18>
    20e0:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    20e4:	07bd0d03 	ldreq	r0, [sp, r3, lsl #26]!
    20e8:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    20ec:	00031b01 	andeq	r1, r3, r1, lsl #22
    20f0:	000e0000 	andeq	r0, lr, r0
    20f4:	00031b0f 	andeq	r1, r3, pc, lsl #22
    20f8:	0003f100 	andeq	pc, r3, r0, lsl #2
    20fc:	02cf1000 	sbceq	r1, pc, #0
    2100:	00070000 	andeq	r0, r7, r0
    2104:	0003e109 	andeq	lr, r3, r9, lsl #2
    2108:	03100f00 	tsteq	r0, #0, 30
    210c:	04060000 	streq	r0, [r6], #-0
    2110:	cf100000 	svcgt	0x00100000
    2114:	17000002 	strne	r0, [r0, -r2]
    2118:	03100f00 	tsteq	r0, #0, 30
    211c:	04160000 	ldreq	r0, [r6], #-0
    2120:	cf100000 	svcgt	0x00100000
    2124:	37000002 	strcc	r0, [r0, -r2]
    2128:	02e10f00 	rsceq	r0, r1, #0, 30
    212c:	04260000 	strteq	r0, [r6], #-0
    2130:	cf100000 	svcgt	0x00100000
    2134:	ef000002 	svc	0x00000002
    2138:	04160900 	ldreq	r0, [r6], #-2304	; 0xfffff700
    213c:	100f0000 	andne	r0, pc, r0
    2140:	3c000003 	stccc	0, cr0, [r0], {3}
    2144:	11000004 	tstne	r0, r4
    2148:	000002cf 	andeq	r0, r0, pc, asr #5
    214c:	06000283 	streq	r0, [r0], -r3, lsl #5
    2150:	000008ab 	andeq	r0, r0, fp, lsr #17
    2154:	2501af01 	strcs	sl, [r1, #-3841]	; 0xfffff0ff
    2158:	12000003 	andne	r0, r0, #3
    215c:	01c0018c 	biceq	r0, r0, ip, lsl #3
    2160:	00000563 	andeq	r0, r0, r3, ror #10
    2164:	0007a90c 	andeq	sl, r7, ip, lsl #18
    2168:	01c20100 	biceq	r0, r2, r0, lsl #2
    216c:	00000320 	andeq	r0, r0, r0, lsr #6
    2170:	07c20c00 	strbeq	r0, [r2, r0, lsl #24]
    2174:	c3010000 	movwgt	r0, #4096	; 0x1000
    2178:	00031b01 	andeq	r1, r3, r1, lsl #22
    217c:	620c0400 	andvs	r0, ip, #0, 8
    2180:	01000008 	tsteq	r0, r8
    2184:	031b01c4 	tsteq	fp, #196, 2	; 0x31
    2188:	0c080000 	stceq	0, cr0, [r8], {-0}
    218c:	000007e1 	andeq	r0, r0, r1, ror #15
    2190:	1b01c501 	blne	7359c <startup-0x1ff8ca64>
    2194:	0c000003 	stceq	0, cr0, [r0], {3}
    2198:	52435313 	subpl	r5, r3, #1275068416	; 0x4c000000
    219c:	01c60100 	biceq	r0, r6, r0, lsl #2
    21a0:	0000031b 	andeq	r0, r0, fp, lsl r3
    21a4:	43431310 	movtmi	r1, #13072	; 0x3310
    21a8:	c7010052 	smlsdgt	r1, r2, r0, r0
    21ac:	00031b01 	andeq	r1, r3, r1, lsl #22
    21b0:	53131400 	tstpl	r3, #0, 8
    21b4:	01005048 	tsteq	r0, r8, asr #32
    21b8:	057301c8 	ldrbeq	r0, [r3, #-456]!	; 0xfffffe38
    21bc:	0c180000 	ldceq	0, cr0, [r8], {-0}
    21c0:	0000080b 	andeq	r0, r0, fp, lsl #16
    21c4:	1b01c901 	blne	745d0 <startup-0x1ff8ba30>
    21c8:	24000003 	strcs	r0, [r0], #-3
    21cc:	0007dc0c 	andeq	sp, r7, ip, lsl #24
    21d0:	01ca0100 	biceq	r0, sl, r0, lsl #2
    21d4:	0000031b 	andeq	r0, r0, fp, lsl r3
    21d8:	08a10c28 	stmiaeq	r1!, {r3, r5, sl, fp}
    21dc:	cb010000 	blgt	421e4 <startup-0x1ffbde1c>
    21e0:	00031b01 	andeq	r1, r3, r1, lsl #22
    21e4:	710c2c00 	tstvc	ip, r0, lsl #24
    21e8:	01000008 	tsteq	r0, r8
    21ec:	031b01cc 	tsteq	fp, #204, 2	; 0x33
    21f0:	0c300000 	ldceq	0, cr0, [r0], #-0
    21f4:	00000792 	muleq	r0, r2, r7
    21f8:	1b01cd01 	blne	75604 <startup-0x1ff8a9fc>
    21fc:	34000003 	strcc	r0, [r0], #-3
    2200:	0007d70c 	andeq	sp, r7, ip, lsl #14
    2204:	01ce0100 	biceq	r0, lr, r0, lsl #2
    2208:	0000031b 	andeq	r0, r0, fp, lsl r3
    220c:	095d0c38 	ldmdbeq	sp, {r3, r4, r5, sl, fp}^
    2210:	cf010000 	svcgt	0x00010000
    2214:	00031b01 	andeq	r1, r3, r1, lsl #22
    2218:	50133c00 	andspl	r3, r3, r0, lsl #24
    221c:	01005246 	tsteq	r0, r6, asr #4
    2220:	058d01d0 	streq	r0, [sp, #464]	; 0x1d0
    2224:	13400000 	movtne	r0, #0
    2228:	00524644 	subseq	r4, r2, r4, asr #12
    222c:	2001d101 	andcs	sp, r1, r1, lsl #2
    2230:	48000003 	stmdami	r0, {r0, r1}
    2234:	52444113 	subpl	r4, r4, #-1073741820	; 0xc0000004
    2238:	01d20100 	bicseq	r0, r2, r0, lsl #2
    223c:	00000320 	andeq	r0, r0, r0, lsr #6
    2240:	08a60c4c 	stmiaeq	r6!, {r2, r3, r6, sl, fp}
    2244:	d3010000 	movwle	r0, #4096	; 0x1000
    2248:	0005a701 	andeq	sl, r5, r1, lsl #14
    224c:	670c5000 	strvs	r5, [ip, -r0]
    2250:	01000008 	tsteq	r0, r8
    2254:	05c101d4 	strbeq	r0, [r1, #468]	; 0x1d4
    2258:	0c600000 	stcleq	0, cr0, [r0], #-0
    225c:	00000481 	andeq	r0, r0, r1, lsl #9
    2260:	c601d501 	strgt	sp, [r1], -r1, lsl #10
    2264:	74000005 	strvc	r0, [r0], #-5
    2268:	00096f0c 	andeq	r6, r9, ip, lsl #30
    226c:	01d60100 	bicseq	r0, r6, r0, lsl #2
    2270:	0000031b 	andeq	r0, r0, fp, lsl r3
    2274:	e10f0088 	smlabb	pc, r8, r0, r0	; <UNPREDICTABLE>
    2278:	73000002 	movwvc	r0, #2
    227c:	10000005 	andne	r0, r0, r5
    2280:	000002cf 	andeq	r0, r0, pc, asr #5
    2284:	6309000b 	movwvs	r0, #36875	; 0x900b
    2288:	0f000005 	svceq	0x00000005
    228c:	00000320 	andeq	r0, r0, r0, lsr #6
    2290:	00000588 	andeq	r0, r0, r8, lsl #11
    2294:	0002cf10 	andeq	ip, r2, r0, lsl pc
    2298:	0a000100 	beq	26a0 <startup-0x1fffd960>
    229c:	00000578 	andeq	r0, r0, r8, ror r5
    22a0:	00058809 	andeq	r8, r5, r9, lsl #16
    22a4:	03200f00 	nopeq	{0}	; <UNPREDICTABLE>
    22a8:	05a20000 	streq	r0, [r2, #0]!
    22ac:	cf100000 	svcgt	0x00100000
    22b0:	03000002 	movweq	r0, #2
    22b4:	05920a00 	ldreq	r0, [r2, #2560]	; 0xa00
    22b8:	a2090000 	andge	r0, r9, #0
    22bc:	0f000005 	svceq	0x00000005
    22c0:	00000320 	andeq	r0, r0, r0, lsr #6
    22c4:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    22c8:	0002cf10 	andeq	ip, r2, r0, lsl pc
    22cc:	0a000400 	beq	32d4 <startup-0x1fffcd2c>
    22d0:	000005ac 	andeq	r0, r0, ip, lsr #11
    22d4:	0005bc09 	andeq	fp, r5, r9, lsl #24
    22d8:	03100f00 	tsteq	r0, #0, 30
    22dc:	05d60000 	ldrbeq	r0, [r6]
    22e0:	cf100000 	svcgt	0x00100000
    22e4:	04000002 	streq	r0, [r0], #-2
    22e8:	07b40600 	ldreq	r0, [r4, r0, lsl #12]!
    22ec:	d7010000 	strle	r0, [r1, -r0]
    22f0:	00044801 	andeq	r4, r4, r1, lsl #16
    22f4:	01101200 	tsteq	r0, r0, lsl #4
    22f8:	062002bf 			; <UNDEFINED> instruction: 0x062002bf
    22fc:	e70c0000 	str	r0, [ip, -r0]
    2300:	01000007 	tsteq	r0, r7
    2304:	031b02c1 	tsteq	fp, #268435468	; 0x1000000c
    2308:	0c000000 	stceq	0, cr0, [r0], {-0}
    230c:	000008e4 	andeq	r0, r0, r4, ror #17
    2310:	1b02c201 	blne	b2b1c <startup-0x1ff4d4e4>
    2314:	04000003 	streq	r0, [r0], #-3
    2318:	4c415613 	mcrrmi	6, 1, r5, r1, cr3
    231c:	02c30100 	sbceq	r0, r3, #0, 2
    2320:	0000031b 	andeq	r0, r0, fp, lsl r3
    2324:	08050c08 	stmdaeq	r5, {r3, sl, fp}
    2328:	c4010000 	strgt	r0, [r1], #-0
    232c:	00032002 	andeq	r2, r3, r2
    2330:	06000c00 	streq	r0, [r0], -r0, lsl #24
    2334:	00000849 	andeq	r0, r0, r9, asr #16
    2338:	e202c501 	and	ip, r2, #4194304	; 0x400000
    233c:	0f000005 	svceq	0x00000005
    2340:	00000310 	andeq	r0, r0, r0, lsl r3
    2344:	0000063c 	andeq	r0, r0, ip, lsr r6
    2348:	0002cf10 	andeq	ip, r2, r0, lsl pc
    234c:	14000100 	strne	r0, [r0], #-256	; 0xffffff00
    2350:	00000135 	andeq	r0, r0, r5, lsr r1
    2354:	0b06fa01 	bleq	1c0b60 <startup-0x1fe3f4a0>
    2358:	15000003 	strne	r0, [r0, #-3]
    235c:	0000045a 	andeq	r0, r0, sl, asr r4
    2360:	03103b08 	tsteq	r0, #8, 22	; 0x2000
    2364:	07160000 	ldreq	r0, [r6, -r0]
    2368:	00027101 	andeq	r7, r2, r1, lsl #2
    236c:	035d0500 	cmpeq	sp, #0, 10
    2370:	0000066e 	andeq	r0, r0, lr, ror #12
    2374:	000b4404 	andeq	r4, fp, r4, lsl #8
    2378:	53170000 	tstpl	r7, #0
    237c:	01005445 	tsteq	r0, r5, asr #8
    2380:	16a30600 	strtne	r0, [r3], r0, lsl #12
    2384:	5d050000 	stcpl	0, cr0, [r5, #-0]
    2388:	00065303 	andeq	r5, r6, r3, lsl #6
    238c:	063f0600 	ldrteq	r0, [pc], -r0, lsl #12
    2390:	5d050000 	stcpl	0, cr0, [r5, #-0]
    2394:	00065303 	andeq	r5, r6, r3, lsl #6
    2398:	01071600 	tsteq	r7, r0, lsl #12
    239c:	00000271 	andeq	r0, r0, r1, ror r2
    23a0:	a1035f05 	tstge	r3, r5, lsl #30
    23a4:	04000006 	streq	r0, [r0], #-6
    23a8:	0000050c 	andeq	r0, r0, ip, lsl #10
    23ac:	01f50400 	mvnseq	r0, r0, lsl #8
    23b0:	00010000 	andeq	r0, r1, r0
    23b4:	00041906 	andeq	r1, r4, r6, lsl #18
    23b8:	035f0500 	cmpeq	pc, #0, 10
    23bc:	00000686 	andeq	r0, r0, r6, lsl #13
    23c0:	71010716 	tstvc	r1, r6, lsl r7
    23c4:	05000002 	streq	r0, [r0, #-2]
    23c8:	06c80362 	strbeq	r0, [r8], r2, ror #6
    23cc:	ad040000 	stcge	0, cr0, [r4, #-0]
    23d0:	00000015 	andeq	r0, r0, r5, lsl r0
    23d4:	00197b04 	andseq	r7, r9, r4, lsl #22
    23d8:	06000100 	streq	r0, [r0], -r0, lsl #2
    23dc:	000018c8 	andeq	r1, r0, r8, asr #17
    23e0:	ad036205 	sfmge	f6, 4, [r3, #-20]	; 0xffffffec
    23e4:	12000006 	andne	r0, r0, #6
    23e8:	05c30528 	strbeq	r0, [r3, #1320]	; 0x528
    23ec:	00000760 	andeq	r0, r0, r0, ror #14
    23f0:	000c7d0c 	andeq	r7, ip, ip, lsl #26
    23f4:	05c50500 	strbeq	r0, [r5, #1280]	; 0x500
    23f8:	0000031b 	andeq	r0, r0, fp, lsl r3
    23fc:	0bc50c00 	bleq	ff145404 <GPIO_Ports+0xdf141764>
    2400:	c6050000 	strgt	r0, [r5], -r0
    2404:	00031b05 	andeq	r1, r3, r5, lsl #22
    2408:	450c0400 	strmi	r0, [ip, #-1024]	; 0xfffffc00
    240c:	0500000d 	streq	r0, [r0, #-13]
    2410:	031b05c7 	tsteq	fp, #834666496	; 0x31c00000
    2414:	0c080000 	stceq	0, cr0, [r8], {-0}
    2418:	00000c58 	andeq	r0, r0, r8, asr ip
    241c:	1b05c805 	blne	174438 <startup-0x1fe8bbc8>
    2420:	0c000003 	stceq	0, cr0, [r0], {3}
    2424:	52444913 	subpl	r4, r4, #311296	; 0x4c000
    2428:	05c90500 	strbeq	r0, [r9, #1280]	; 0x500
    242c:	0000031b 	andeq	r0, r0, fp, lsl r3
    2430:	444f1310 	strbmi	r1, [pc], #-784	; 2438 <startup-0x1fffdbc8>
    2434:	ca050052 	bgt	142584 <startup-0x1febda7c>
    2438:	00031b05 	andeq	r1, r3, r5, lsl #22
    243c:	f60c1400 			; <UNDEFINED> instruction: 0xf60c1400
    2440:	0500000d 	streq	r0, [r0, #-13]
    2444:	02fb05cb 	rscseq	r0, fp, #851443712	; 0x32c00000
    2448:	0c180000 	ldceq	0, cr0, [r8], {-0}
    244c:	00000c77 	andeq	r0, r0, r7, ror ip
    2450:	fb05cc05 	blx	17546e <startup-0x1fe8ab92>
    2454:	1a000002 	bne	2464 <startup-0x1fffdb9c>
    2458:	000bae0c 	andeq	sl, fp, ip, lsl #28
    245c:	05cd0500 	strbeq	r0, [sp, #1280]	; 0x500
    2460:	0000031b 	andeq	r0, r0, fp, lsl r3
    2464:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
    2468:	ce050052 	mcrgt	0, 0, r0, cr5, cr2, {2}
    246c:	00077005 	andeq	r7, r7, r5
    2470:	0f002000 	svceq	0x00002000
    2474:	0000031b 	andeq	r0, r0, fp, lsl r3
    2478:	00000770 	andeq	r0, r0, r0, ror r7
    247c:	0002cf10 	andeq	ip, r2, r0, lsl pc
    2480:	09000100 	stmdbeq	r0, {r8}
    2484:	00000760 	andeq	r0, r0, r0, ror #14
    2488:	000ac406 	andeq	ip, sl, r6, lsl #8
    248c:	05cf0500 	strbeq	r0, [pc, #1280]	; 2994 <startup-0x1fffd66c>
    2490:	000006d4 	ldrdeq	r0, [r0], -r4
    2494:	64059812 	strvs	r9, [r5], #-2066	; 0xfffff7ee
    2498:	00094406 	andeq	r4, r9, r6, lsl #8
    249c:	52431300 	subpl	r1, r3, #0, 6
    24a0:	06660500 	strbteq	r0, [r6], -r0, lsl #10
    24a4:	0000031b 	andeq	r0, r0, fp, lsl r3
    24a8:	15ec0c00 	strbne	r0, [ip, #3072]!	; 0xc00
    24ac:	67050000 	strvs	r0, [r5, -r0]
    24b0:	00031b06 	andeq	r1, r3, r6, lsl #22
    24b4:	240c0400 	strcs	r0, [ip], #-1024	; 0xfffffc00
    24b8:	0500001c 	streq	r0, [r0, #-28]	; 0xffffffe4
    24bc:	031b0668 	tsteq	fp, #104, 12	; 0x6800000
    24c0:	13080000 	movwne	r0, #32768	; 0x8000
    24c4:	00524943 	subseq	r4, r2, r3, asr #18
    24c8:	1b066905 	blne	19c8e4 <startup-0x1fe6371c>
    24cc:	0c000003 	stceq	0, cr0, [r0], {3}
    24d0:	0012ca0c 	andseq	ip, r2, ip, lsl #20
    24d4:	066a0500 	strbteq	r0, [sl], -r0, lsl #10
    24d8:	0000031b 	andeq	r0, r0, fp, lsl r3
    24dc:	1ac10c10 	bne	ff045524 <GPIO_Ports+0xdf041884>
    24e0:	6b050000 	blvs	1424e8 <startup-0x1febdb18>
    24e4:	00031b06 	andeq	r1, r3, r6, lsl #22
    24e8:	bf0c1400 	svclt	0x000c1400
    24ec:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    24f0:	031b066c 	tsteq	fp, #108, 12	; 0x6c00000
    24f4:	0c180000 	ldceq	0, cr0, [r8], {-0}
    24f8:	00000481 	andeq	r0, r0, r1, lsl #9
    24fc:	10066d05 	andne	r6, r6, r5, lsl #26
    2500:	1c000003 	stcne	0, cr0, [r0], {3}
    2504:	0018fd0c 	andseq	pc, r8, ip, lsl #26
    2508:	066e0500 	strbteq	r0, [lr], -r0, lsl #10
    250c:	0000031b 	andeq	r0, r0, fp, lsl r3
    2510:	16930c20 	ldrne	r0, [r3], r0, lsr #24
    2514:	6f050000 	svcvs	0x00050000
    2518:	00031b06 	andeq	r1, r3, r6, lsl #22
    251c:	8b0c2400 	blhi	30b524 <startup-0x1fcf4adc>
    2520:	05000004 	streq	r0, [r0, #-4]
    2524:	062c0670 			; <UNDEFINED> instruction: 0x062c0670
    2528:	0c280000 	stceq	0, cr0, [r8], #-0
    252c:	00001a83 	andeq	r1, r0, r3, lsl #21
    2530:	1b067105 	blne	19e94c <startup-0x1fe616b4>
    2534:	30000003 	andcc	r0, r0, r3
    2538:	0013120c 	andseq	r1, r3, ip, lsl #4
    253c:	06720500 	ldrbteq	r0, [r2], -r0, lsl #10
    2540:	0000031b 	andeq	r0, r0, fp, lsl r3
    2544:	1cf90c34 	ldclne	12, cr0, [r9], #208	; 0xd0
    2548:	73050000 	movwvc	r0, #20480	; 0x5000
    254c:	00031b06 	andeq	r1, r3, r6, lsl #22
    2550:	950c3800 	strls	r3, [ip, #-2048]	; 0xfffff800
    2554:	05000004 	streq	r0, [r0, #-4]
    2558:	03100674 	tsteq	r0, #116, 12	; 0x7400000
    255c:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    2560:	00001915 	andeq	r1, r0, r5, lsl r9
    2564:	1b067505 	blne	19f980 <startup-0x1fe60680>
    2568:	40000003 	andmi	r0, r0, r3
    256c:	0011b20c 	andseq	fp, r1, ip, lsl #4
    2570:	06760500 	ldrbteq	r0, [r6], -r0, lsl #10
    2574:	0000031b 	andeq	r0, r0, fp, lsl r3
    2578:	049f0c44 	ldreq	r0, [pc], #3140	; 2580 <startup-0x1fffda80>
    257c:	77050000 	strvc	r0, [r5, -r0]
    2580:	00062c06 	andeq	r2, r6, r6, lsl #24
    2584:	ce0c4800 	cdpgt	8, 0, cr4, cr12, cr0, {0}
    2588:	05000011 	streq	r0, [r0, #-17]	; 0xffffffef
    258c:	031b0678 	tsteq	fp, #120, 12	; 0x7800000
    2590:	0c500000 	mraeq	r0, r0, acc0
    2594:	000010d5 	ldrdeq	r1, [r0], -r5
    2598:	1b067905 	blne	1a09b4 <startup-0x1fe5f64c>
    259c:	54000003 	strpl	r0, [r0], #-3
    25a0:	0019ac0c 	andseq	sl, r9, ip, lsl #24
    25a4:	067a0500 	ldrbteq	r0, [sl], -r0, lsl #10
    25a8:	0000031b 	andeq	r0, r0, fp, lsl r3
    25ac:	04a90c58 	strteq	r0, [r9], #3160	; 0xc58
    25b0:	7b050000 	blvc	1425b8 <startup-0x1febda48>
    25b4:	00031006 	andeq	r1, r3, r6
    25b8:	000c5c00 	andeq	r5, ip, r0, lsl #24
    25bc:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    25c0:	031b067c 	tsteq	fp, #124, 12	; 0x7c00000
    25c4:	0c600000 	stcleq	0, cr0, [r0], #-0
    25c8:	00001703 	andeq	r1, r0, r3, lsl #14
    25cc:	1b067d05 	blne	1a19e8 <startup-0x1fe5e618>
    25d0:	64000003 	strvs	r0, [r0], #-3
    25d4:	0005450c 	andeq	r4, r5, ip, lsl #10
    25d8:	067e0500 	ldrbteq	r0, [lr], -r0, lsl #10
    25dc:	0000062c 	andeq	r0, r0, ip, lsr #12
    25e0:	13bc0c68 			; <UNDEFINED> instruction: 0x13bc0c68
    25e4:	7f050000 	svcvc	0x00050000
    25e8:	00031b06 	andeq	r1, r3, r6, lsl #22
    25ec:	43137000 	tstmi	r3, #0
    25f0:	05005253 	streq	r5, [r0, #-595]	; 0xfffffdad
    25f4:	031b0680 	tsteq	fp, #128, 12	; 0x8000000
    25f8:	0c740000 	ldcleq	0, cr0, [r4], #-0
    25fc:	0000127d 	andeq	r1, r0, sp, ror r2
    2600:	2c068105 	stfcsd	f0, [r6], {5}
    2604:	78000006 	stmdavc	r0, {r1, r2}
    2608:	0016770c 	andseq	r7, r6, ip, lsl #14
    260c:	06820500 	streq	r0, [r2], r0, lsl #10
    2610:	0000031b 	andeq	r0, r0, fp, lsl r3
    2614:	0f730c80 	svceq	0x00730c80
    2618:	83050000 	movwhi	r0, #20480	; 0x5000
    261c:	00031b06 	andeq	r1, r3, r6, lsl #22
    2620:	1e0c8400 	cfcpysne	mvf8, mvf12
    2624:	0500001c 	streq	r0, [r0, #-28]	; 0xffffffe4
    2628:	031b0684 	tsteq	fp, #132, 12	; 0x8400000
    262c:	0c880000 	stceq	0, cr0, [r8], {0}
    2630:	0000120f 	andeq	r1, r0, pc, lsl #4
    2634:	1b068505 	blne	1a3a50 <startup-0x1fe5c5b0>
    2638:	8c000003 	stchi	0, cr0, [r0], {3}
    263c:	00183b0c 	andseq	r3, r8, ip, lsl #22
    2640:	06860500 	streq	r0, [r6], r0, lsl #10
    2644:	0000031b 	andeq	r0, r0, fp, lsl r3
    2648:	1a330c90 	bne	cc5890 <startup-0x1f33a770>
    264c:	87050000 	strhi	r0, [r5, -r0]
    2650:	00031b06 	andeq	r1, r3, r6, lsl #22
    2654:	06009400 	streq	r9, [r0], -r0, lsl #8
    2658:	00001ae5 	andeq	r1, r0, r5, ror #21
    265c:	81068905 	tsthi	r6, r5, lsl #18
    2660:	18000007 	stmdane	r0, {r0, r1, r2}
    2664:	89300910 	ldmdbhi	r0!, {r4, r8, fp}
    2668:	19000009 	stmdbne	r0, {r0, r3}
    266c:	00001c6d 	andeq	r1, r0, sp, ror #24
    2670:	03103209 	tsteq	r0, #-1879048192	; 0x90000000
    2674:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2678:	00000fb3 			; <UNDEFINED> instruction: 0x00000fb3
    267c:	03103309 	tsteq	r0, #603979776	; 0x24000000
    2680:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    2684:	0000134d 	andeq	r1, r0, sp, asr #6
    2688:	03103409 	tsteq	r0, #150994944	; 0x9000000
    268c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    2690:	0000131a 	andeq	r1, r0, sl, lsl r3
    2694:	03103509 	tsteq	r0, #37748736	; 0x2400000
    2698:	000c0000 	andeq	r0, ip, r0
    269c:	001ad307 	andseq	sp, sl, r7, lsl #6
    26a0:	50360900 	eorspl	r0, r6, r0, lsl #18
    26a4:	0f000009 	svceq	0x00000009
    26a8:	000002eb 	andeq	r0, r0, fp, ror #5
    26ac:	000009a4 	andeq	r0, r0, r4, lsr #19
    26b0:	0002cf10 	andeq	ip, r2, r0, lsl pc
    26b4:	0a000f00 	beq	62bc <startup-0x1fff9d44>
    26b8:	00000994 	muleq	r0, r4, r9
    26bc:	0009a409 	andeq	sl, r9, r9, lsl #8
    26c0:	16281a00 	strtne	r1, [r8], -r0, lsl #20
    26c4:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
    26c8:	000009a9 	andeq	r0, r0, r9, lsr #19
    26cc:	3c700305 	ldclcc	3, cr0, [r0], #-20	; 0xffffffec
    26d0:	071b2000 	ldreq	r2, [fp, -r0]
    26d4:	00027101 	andeq	r7, r2, r1, lsl #2
    26d8:	e5420a00 	strb	r0, [r2, #-2560]	; 0xfffff600
    26dc:	04000009 	streq	r0, [r0], #-9
    26e0:	00000c5e 	andeq	r0, r0, lr, asr ip
    26e4:	0c4a0400 	cfstrdeq	mvd0, [sl], {-0}
    26e8:	04010000 	streq	r0, [r1], #-0
    26ec:	00000b63 	andeq	r0, r0, r3, ror #22
    26f0:	0b920402 	bleq	fe483700 <GPIO_Ports+0xde47fa60>
    26f4:	00030000 	andeq	r0, r3, r0
    26f8:	000afd07 	andeq	pc, sl, r7, lsl #26
    26fc:	bf470a00 	svclt	0x00470a00
    2700:	1b000009 	blne	272c <startup-0x1fffd8d4>
    2704:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
    2708:	4f0a0000 	svcmi	0x000a0000
    270c:	00000a0a 	andeq	r0, r0, sl, lsl #20
    2710:	000c9904 	andeq	r9, ip, r4, lsl #18
    2714:	32040000 	andcc	r0, r4, #0
    2718:	0100000b 	tsteq	r0, fp
    271c:	0bb30700 	bleq	fecc4324 <GPIO_Ports+0xdecc0684>
    2720:	520a0000 	andpl	r0, sl, #0
    2724:	000009f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2728:	7101071b 	tstvc	r1, fp, lsl r7
    272c:	0a000002 	beq	273c <startup-0x1fffd8c4>
    2730:	000a3b5a 	andeq	r3, sl, sl, asr fp
    2734:	0d240400 	cfstrseq	mvf0, [r4, #-0]
    2738:	04000000 	streq	r0, [r0], #-0
    273c:	00000d33 	andeq	r0, r0, r3, lsr sp
    2740:	0ce10401 	cfstrdeq	mvd0, [r1], #4
    2744:	04020000 	streq	r0, [r2], #-0
    2748:	00000db7 			; <UNDEFINED> instruction: 0x00000db7
    274c:	53070003 	movwpl	r0, #28675	; 0x7003
    2750:	0a00000d 	beq	278c <startup-0x1fffd874>
    2754:	000a155f 	andeq	r1, sl, pc, asr r5
    2758:	01071b00 	tsteq	r7, r0, lsl #22
    275c:	00000271 	andeq	r0, r0, r1, ror r2
    2760:	0a666e0a 	beq	199df90 <startup-0x1e662070>
    2764:	74040000 	strvc	r0, [r4], #-0
    2768:	0000000d 	andeq	r0, r0, sp
    276c:	000dd804 	andeq	sp, sp, r4, lsl #16
    2770:	65040100 	strvs	r0, [r4, #-256]	; 0xffffff00
    2774:	0200000d 	andeq	r0, r0, #13
    2778:	0dc70700 	stcleq	7, cr0, [r7]
    277c:	720a0000 	andvc	r0, sl, #0
    2780:	00000a46 	andeq	r0, r0, r6, asr #20
    2784:	840a0818 	strhi	r0, [sl], #-2072	; 0xfffff7e8
    2788:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
    278c:	000ad819 	andeq	sp, sl, r9, lsl r8
    2790:	10860a00 	addne	r0, r6, r0, lsl #20
    2794:	00000003 	andeq	r0, r0, r3
    2798:	000e1319 	andeq	r1, lr, r9, lsl r3
    279c:	e5890a00 	str	r0, [r9, #2560]	; 0xa00
    27a0:	04000009 	streq	r0, [r0], #-9
    27a4:	000b7d19 	andeq	r7, fp, r9, lsl sp
    27a8:	3b8c0a00 	blcc	fe304fb0 <GPIO_Ports+0xde301310>
    27ac:	0500000a 	streq	r0, [r0, #-10]
    27b0:	000b5819 	andeq	r5, fp, r9, lsl r8
    27b4:	0a8f0a00 	beq	fe3c4fbc <GPIO_Ports+0xde3c131c>
    27b8:	0600000a 	streq	r0, [r0], -sl
    27bc:	000d9c19 	andeq	r9, sp, r9, lsl ip
    27c0:	66920a00 	ldrvs	r0, [r2], r0, lsl #20
    27c4:	0700000a 	streq	r0, [r0, -sl]
    27c8:	0da60700 	stceq	7, cr0, [r6]
    27cc:	940a0000 	strls	r0, [sl], #-0
    27d0:	00000a71 	andeq	r0, r0, r1, ror sl
    27d4:	001c0b1c 	andseq	r0, ip, ip, lsl fp
    27d8:	010b2000 	mrseq	r2, (UNDEF: 11)
    27dc:	00000b39 	andeq	r0, r0, r9, lsr fp
    27e0:	0064691d 	rsbeq	r6, r4, sp, lsl r9
    27e4:	0b39030b 	bleq	e43418 <startup-0x1f1bcbe8>
    27e8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    27ec:	00001184 	andeq	r1, r0, r4, lsl #3
    27f0:	02c3040b 	sbceq	r0, r3, #184549376	; 0xb000000
    27f4:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    27f8:	000010ad 	andeq	r1, r0, sp, lsr #1
    27fc:	0b39050b 	bleq	e43c30 <startup-0x1f1bc3d0>
    2800:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    2804:	0000188f 	andeq	r1, r0, pc, lsl #17
    2808:	0b39060b 	bleq	e4403c <startup-0x1f1bbfc4>
    280c:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    2810:	00001af1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    2814:	02c3070b 	sbceq	r0, r3, #2883584	; 0x2c0000
    2818:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
    281c:	00001a67 	andeq	r1, r0, r7, ror #20
    2820:	02c3080b 	sbceq	r0, r3, #720896	; 0xb0000
    2824:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
    2828:	00001338 	andeq	r1, r0, r8, lsr r3
    282c:	02c3090b 	sbceq	r0, r3, #180224	; 0x2c000
    2830:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
    2834:	00001bbe 			; <UNDEFINED> instruction: 0x00001bbe
    2838:	02c30a0b 	sbceq	r0, r3, #45056	; 0xb000
    283c:	19180000 	ldmdbne	r8, {}	; <UNPREDICTABLE>
    2840:	00001b0a 	andeq	r1, r0, sl, lsl #22
    2844:	0b400b0b 	bleq	1005478 <startup-0x1effab88>
    2848:	001c0000 	andseq	r0, ip, r0
    284c:	c6080105 	strgt	r0, [r8], -r5, lsl #2
    2850:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    2854:	00077504 	andeq	r7, r7, r4, lsl #10
    2858:	1c0c0700 	stcne	7, cr0, [ip], {-0}
    285c:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    2860:	00000ac1 	andeq	r0, r0, r1, asr #21
    2864:	000b4609 	andeq	r4, fp, r9, lsl #12
    2868:	0c141800 	ldceq	8, cr1, [r4], {-0}
    286c:	000ba78d 	andeq	sl, fp, sp, lsl #15
    2870:	043e1900 	ldrteq	r1, [lr], #-2304	; 0xfffff700
    2874:	8f0c0000 	svchi	0x000c0000
    2878:	00000310 	andeq	r0, r0, r0, lsl r3
    287c:	02f41900 	rscseq	r1, r4, #0, 18
    2880:	920c0000 	andls	r0, ip, #0
    2884:	00000310 	andeq	r0, r0, r0, lsl r3
    2888:	44491d04 	strbmi	r1, [r9], #-3332	; 0xfffff2fc
    288c:	950c0045 	strls	r0, [ip, #-69]	; 0xffffffbb
    2890:	000002d6 	ldrdeq	r0, [r0], -r6
    2894:	54521d08 	ldrbpl	r1, [r2], #-3336	; 0xfffff2f8
    2898:	990c0052 	stmdbls	ip, {r1, r4, r6}
    289c:	000002d6 	ldrdeq	r0, [r0], -r6
    28a0:	4c441d09 	mcrrmi	13, 0, r1, r4, cr9
    28a4:	9d0c0043 	stcls	0, cr0, [ip, #-268]	; 0xfffffef4
    28a8:	000002d6 	ldrdeq	r0, [r0], -r6
    28ac:	0cdc190a 			; <UNDEFINED> instruction: 0x0cdc190a
    28b0:	a10c0000 	mrsge	r0, (UNDEF: 12)
    28b4:	00000ba7 	andeq	r0, r0, r7, lsr #23
    28b8:	d60f000b 	strle	r0, [pc], -fp
    28bc:	b7000002 	strlt	r0, [r0, -r2]
    28c0:	1000000b 	andne	r0, r0, fp
    28c4:	000002cf 	andeq	r0, r0, pc, asr #5
    28c8:	48070007 	stmdami	r7, {r0, r1, r2}
    28cc:	0c000006 	stceq	0, cr0, [r0], {6}
    28d0:	000b56a3 	andeq	r5, fp, r3, lsr #13
    28d4:	02f00f00 	rscseq	r0, r0, #0, 30
    28d8:	0bd20000 	bleq	ff4828e0 <GPIO_Ports+0xdf47ec40>
    28dc:	cf100000 	svcgt	0x00100000
    28e0:	0f000002 	svceq	0x00000002
    28e4:	14161f00 	ldrne	r1, [r6], #-3840	; 0xfffff100
    28e8:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    28ec:	00000bc2 	andeq	r0, r0, r2, asr #23
    28f0:	3c800305 	stccc	3, cr0, [r0], {5}
    28f4:	400f2000 	andmi	r2, pc, r0
    28f8:	f300000b 	vhadd.u8	d0, d0, d11
    28fc:	1000000b 	andne	r0, r0, fp
    2900:	000002cf 	andeq	r0, r0, pc, asr #5
    2904:	fe1f0003 	cdp2	0, 1, cr0, cr15, cr3, {0}
    2908:	04000010 	streq	r0, [r0], #-16
    290c:	000be31e 	andeq	lr, fp, lr, lsl r3
    2910:	a0030500 	andge	r0, r3, r0, lsl #10
    2914:	1f20003c 	svcne	0x0020003c
    2918:	000015c0 	andeq	r1, r0, r0, asr #11
    291c:	031b2104 	tsteq	fp, #4, 2
    2920:	03050000 	movweq	r0, #20480	; 0x5000
    2924:	20003b84 	andcs	r3, r0, r4, lsl #23
    2928:	00155320 	andseq	r5, r5, r0, lsr #6
    292c:	ecb80400 	cfldrs	mvf0, [r8]
    2930:	62200030 	eorvs	r0, r0, #48	; 0x30
    2934:	01000000 	mrseq	r0, (UNDEF: 0)
    2938:	000c479c 	muleq	ip, ip, r7
    293c:	1c032100 	stfnes	f2, [r3], {-0}
    2940:	b8040000 	stmdalt	r4, {}	; <UNPREDICTABLE>
    2944:	00000b46 	andeq	r0, r0, r6, asr #22
    2948:	1a709102 	bne	1c26d58 <startup-0x1e3d92a8>
    294c:	000015f4 	strdeq	r1, [r0], -r4
    2950:	0bb7b904 	bleq	fedf0d68 <GPIO_Ports+0xdeded0c8>
    2954:	91020000 	mrsls	r0, (UNDEF: 2)
    2958:	9620004c 	strtls	r0, [r0], -ip, asr #32
    295c:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    2960:	003094aa 	eorseq	r9, r0, sl, lsr #9
    2964:	00005820 	andeq	r5, r0, r0, lsr #16
    2968:	839c0100 	orrshi	r0, ip, #0, 2
    296c:	1a00000c 	bne	29a4 <startup-0x1fffd65c>
    2970:	00001b32 	andeq	r1, r0, r2, lsr fp
    2974:	02c3ab04 	sbceq	sl, r3, #4, 22	; 0x1000
    2978:	91020000 	mrsls	r0, (UNDEF: 2)
    297c:	30c62274 	sbccc	r2, r6, r4, ror r2
    2980:	00142000 	andseq	r2, r4, r0
    2984:	6f1a0000 	svcvs	0x001a0000
    2988:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    298c:	000310af 	andeq	r1, r3, pc, lsr #1
    2990:	70910200 	addsvc	r0, r1, r0, lsl #4
    2994:	a0200000 	eorge	r0, r0, r0
    2998:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    299c:	002bfc3f 	eoreq	pc, fp, pc, lsr ip	; <UNPREDICTABLE>
    29a0:	00049820 	andeq	r9, r4, r0, lsr #16
    29a4:	bb9c0100 	bllt	fe702dac <GPIO_Ports+0xde6ff10c>
    29a8:	1a00000d 	bne	29e4 <startup-0x1fffd61c>
    29ac:	0000138b 	andeq	r1, r0, fp, lsl #7
    29b0:	02ca4a04 	sbceq	r4, sl, #4, 20	; 0x4000
    29b4:	91030000 	mrsls	r0, (UNDEF: 3)
    29b8:	1c1a7fb0 	ldcne	15, cr7, [sl], {176}	; 0xb0
    29bc:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    29c0:	000dcf54 	andeq	ip, sp, r4, asr pc
    29c4:	b4910400 	ldrlt	r0, [r1], #1024	; 0x400
    29c8:	fd1a067f 	ldc2	6, cr0, [sl, #-508]	; 0xfffffe04
    29cc:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    29d0:	0002c355 	andeq	ip, r2, r5, asr r3
    29d4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    29d8:	002c2223 	eoreq	r2, ip, r3, lsr #4
    29dc:	00004420 	andeq	r4, r0, r0, lsr #8
    29e0:	000cf500 	andeq	pc, ip, r0, lsl #10
    29e4:	006a2400 	rsbeq	r2, sl, r0, lsl #8
    29e8:	02c34b04 	sbceq	r4, r3, #4, 22	; 0x1000
    29ec:	91020000 	mrsls	r0, (UNDEF: 2)
    29f0:	2c28225c 	sfmcs	f2, 4, [r8], #-368	; 0xfffffe90
    29f4:	00322000 	eorseq	r2, r2, r0
    29f8:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
    29fc:	c34d0400 	movtgt	r0, #54272	; 0xd400
    2a00:	02000002 	andeq	r0, r0, #2
    2a04:	00006091 	muleq	r0, r1, r0
    2a08:	002cc823 	eoreq	ip, ip, r3, lsr #16
    2a0c:	0000b020 	andeq	fp, r0, r0, lsr #32
    2a10:	000d2500 	andeq	r2, sp, r0, lsl #10
    2a14:	006a2400 	rsbeq	r2, sl, r0, lsl #8
    2a18:	02c35604 	sbceq	r5, r3, #4, 12	; 0x400000
    2a1c:	91020000 	mrsls	r0, (UNDEF: 2)
    2a20:	2cce2258 	sfmcs	f2, 2, [lr], {88}	; 0x58
    2a24:	009e2000 	addseq	r2, lr, r0
    2a28:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
    2a2c:	c3580400 	cmpgt	r8, #0, 8
    2a30:	02000002 	andeq	r0, r0, #2
    2a34:	00005491 	muleq	r0, r1, r4
    2a38:	002d7c23 	eoreq	r7, sp, r3, lsr #24
    2a3c:	00003e20 	andeq	r3, r0, r0, lsr #28
    2a40:	000d3f00 	andeq	r3, sp, r0, lsl #30
    2a44:	00692400 	rsbeq	r2, r9, r0, lsl #8
    2a48:	02c36804 	sbceq	r6, r3, #4, 16	; 0x40000
    2a4c:	91020000 	mrsls	r0, (UNDEF: 2)
    2a50:	ba230050 	blt	8c2b98 <startup-0x1f73d468>
    2a54:	3c20002d 	stccc	0, cr0, [r0], #-180	; 0xffffff4c
    2a58:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    2a5c:	2400000d 	strcs	r0, [r0], #-13
    2a60:	6e040069 	cdpvs	0, 0, cr0, cr4, cr9, {3}
    2a64:	000002c3 	andeq	r0, r0, r3, asr #5
    2a68:	004c9102 	subeq	r9, ip, r2, lsl #2
    2a6c:	002dfc23 	eoreq	pc, sp, r3, lsr #24
    2a70:	00003820 	andeq	r3, r0, r0, lsr #16
    2a74:	000d7300 	andeq	r7, sp, r0, lsl #6
    2a78:	00692400 	rsbeq	r2, r9, r0, lsl #8
    2a7c:	02c37404 	sbceq	r7, r3, #4, 8	; 0x4000000
    2a80:	91020000 	mrsls	r0, (UNDEF: 2)
    2a84:	3c230048 	stccc	0, cr0, [r3], #-288	; 0xfffffee0
    2a88:	3820002e 	stmdacc	r0!, {r1, r2, r3, r5}
    2a8c:	8d000000 	stchi	0, cr0, [r0, #-0]
    2a90:	2400000d 	strcs	r0, [r0], #-13
    2a94:	79040069 	stmdbvc	r4, {r0, r3, r5, r6}
    2a98:	000002c3 	andeq	r0, r0, r3, asr #5
    2a9c:	00449102 	subeq	r9, r4, r2, lsl #2
    2aa0:	002e7e22 	eoreq	r7, lr, r2, lsr #28
    2aa4:	00020a20 	andeq	r0, r2, r0, lsr #20
    2aa8:	00692400 	rsbeq	r2, r9, r0, lsl #8
    2aac:	02c38304 	sbceq	r8, r3, #4, 6	; 0x10000000
    2ab0:	91020000 	mrsls	r0, (UNDEF: 2)
    2ab4:	2f182240 	svccs	0x00182240
    2ab8:	015c2000 	cmpeq	ip, r0
    2abc:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
    2ac0:	c3940400 	orrsgt	r0, r4, #0, 8
    2ac4:	03000002 	movweq	r0, #2
    2ac8:	007fbc91 			; <UNDEFINED> instruction: 0x007fbc91
    2acc:	510f0000 	mrspl	r0, CPSR
    2ad0:	cf00000b 	svcgt	0x0000000b
    2ad4:	2500000d 	strcs	r0, [r0, #-13]
    2ad8:	000002cf 	andeq	r0, r0, pc, asr #5
    2adc:	7fb89104 	svcvc	0x00b89104
    2ae0:	bb090006 	bllt	242b00 <startup-0x1fdbd500>
    2ae4:	2600000d 	strcs	r0, [r0], -sp
    2ae8:	0000101b 	andeq	r1, r0, fp, lsl r0
    2aec:	2be43704 	blcs	ff910704 <GPIO_Ports+0xdf90ca64>
    2af0:	00182000 	andseq	r2, r8, r0
    2af4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2af8:	00107627 	andseq	r7, r0, r7, lsr #12
    2afc:	b8320400 	ldmdalt	r2!, {sl}
    2b00:	2c20002b 	stccs	0, cr0, [r0], #-172	; 0xffffff54
    2b04:	01000000 	mrseq	r0, (UNDEF: 0)
    2b08:	000e179c 	muleq	lr, ip, r7
    2b0c:	1ba52100 	blne	fe94af14 <GPIO_Ports+0xde947274>
    2b10:	32040000 	andcc	r0, r4, #0
    2b14:	000002c3 	andeq	r0, r0, r3, asr #5
    2b18:	1a6c9102 	bne	1b26f28 <startup-0x1e4d90d8>
    2b1c:	00001a12 	andeq	r1, r0, r2, lsl sl
    2b20:	02c33304 	sbceq	r3, r3, #4, 6	; 0x10000000
    2b24:	91020000 	mrsls	r0, (UNDEF: 2)
    2b28:	da200074 	ble	802d00 <startup-0x1f7fd300>
    2b2c:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    2b30:	002b8026 	eoreq	r8, fp, r6, lsr #32
    2b34:	00003820 	andeq	r3, r0, r0, lsr #16
    2b38:	3b9c0100 	blcc	fe702f40 <GPIO_Ports+0xde6ff2a0>
    2b3c:	1a00000e 	bne	2b7c <startup-0x1fffd484>
    2b40:	000012ea 	andeq	r1, r0, sl, ror #5
    2b44:	03102a04 	tsteq	r0, #4, 20	; 0x4000
    2b48:	91020000 	mrsls	r0, (UNDEF: 2)
    2b4c:	09280074 	stmdbeq	r8!, {r2, r4, r5, r6}
    2b50:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    2b54:	002b6822 	eoreq	r6, fp, r2, lsr #16
    2b58:	00001820 	andeq	r1, r0, r0, lsr #16
    2b5c:	289c0100 	ldmcs	ip, {r8}
    2b60:	000018e6 	andeq	r1, r0, r6, ror #17
    2b64:	00000f04 	andeq	r0, r0, r4, lsl #30
    2b68:	000c2000 	andeq	r2, ip, r0
    2b6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b70:	0010f929 	andseq	pc, r0, r9, lsr #18
    2b74:	a0020300 	andge	r0, r2, r0, lsl #6
    2b78:	c8200029 	stmdagt	r0!, {r0, r3, r5}
    2b7c:	01000001 	tsteq	r0, r1
    2b80:	000e819c 	muleq	lr, ip, r1
    2b84:	1ded1a00 			; <UNDEFINED> instruction: 0x1ded1a00
    2b88:	05030000 	streq	r0, [r3, #-0]
    2b8c:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
    2b90:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2b94:	00177d2a 	andseq	r7, r7, sl, lsr #26
    2b98:	0c5e0200 	lfmeq	f0, 2, [lr], {-0}
    2b9c:	20002980 	andcs	r2, r0, r0, lsl #19
    2ba0:	00000020 	andeq	r0, r0, r0, lsr #32
    2ba4:	0ea79c01 	cdpeq	12, 10, cr9, cr7, cr1, {0}
    2ba8:	032b0000 			; <UNDEFINED> instruction: 0x032b0000
    2bac:	0200001b 	andeq	r0, r0, #27
    2bb0:	02d60c5e 	sbcseq	r0, r6, #24064	; 0x5e00
    2bb4:	91020000 	mrsls	r0, (UNDEF: 2)
    2bb8:	472c0077 			; <UNDEFINED> instruction: 0x472c0077
    2bbc:	02000017 	andeq	r0, r0, #23
    2bc0:	067a0c3c 			; <UNDEFINED> instruction: 0x067a0c3c
    2bc4:	293c0000 	ldmdbcs	ip!, {}	; <UNPREDICTABLE>
    2bc8:	00442000 	subeq	r2, r4, r0
    2bcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bd0:	00000ee0 	andeq	r0, r0, r0, ror #29
    2bd4:	001b032b 	andseq	r0, fp, fp, lsr #6
    2bd8:	0c3c0200 	lfmeq	f0, 4, [ip], #-0
    2bdc:	000002d6 	ldrdeq	r0, [r0], -r6
    2be0:	2d6f9102 	stfcsp	f1, [pc, #-8]!	; 2be0 <startup-0x1fffd420>
    2be4:	000004f1 	strdeq	r0, [r0], -r1
    2be8:	7a0c3e02 	bvc	3123f8 <startup-0x1fcedc08>
    2bec:	02000006 	andeq	r0, r0, #6
    2bf0:	2e007791 	mcrcs	7, 0, r7, cr0, cr1, {4}
    2bf4:	0000161a 	andeq	r1, r0, sl, lsl r6
    2bf8:	200c2802 	andcs	r2, ip, r2, lsl #16
    2bfc:	1c200029 	stcne	0, cr0, [r0], #-164	; 0xffffff5c
    2c00:	01000000 	mrseq	r0, (UNDEF: 0)
    2c04:	169c2c9c 			; <UNDEFINED> instruction: 0x169c2c9c
    2c08:	fb020000 	blx	82c12 <startup-0x1ff7d3ee>
    2c0c:	00066e0b 	andeq	r6, r6, fp, lsl #28
    2c10:	00289c00 	eoreq	r9, r8, r0, lsl #24
    2c14:	00008420 	andeq	r8, r0, r0, lsr #8
    2c18:	499c0100 	ldmibmi	ip, {r8}
    2c1c:	2b00000f 	blcs	2c60 <startup-0x1fffd3a0>
    2c20:	0000173e 	andeq	r1, r0, lr, lsr r7
    2c24:	d60bfb02 	strle	pc, [fp], -r2, lsl #22
    2c28:	02000002 	andeq	r0, r0, #2
    2c2c:	742f6791 	strtvc	r6, [pc], #-1937	; 2c34 <startup-0x1fffd3cc>
    2c30:	0200706d 	andeq	r7, r0, #109	; 0x6d
    2c34:	03100bfd 	tsteq	r0, #259072	; 0x3f400
    2c38:	91020000 	mrsls	r0, (UNDEF: 2)
    2c3c:	17e72d6c 	strbne	r2, [r7, ip, ror #26]!
    2c40:	fe020000 	cdp2	0, 0, cr0, cr2, cr0, {0}
    2c44:	0003100b 	andeq	r1, r3, fp
    2c48:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2c4c:	0004f12d 	andeq	pc, r4, sp, lsr #2
    2c50:	0bff0200 	bleq	fffc3458 <GPIO_Ports+0xdffbf7b8>
    2c54:	0000066e 	andeq	r0, r0, lr, ror #12
    2c58:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2c5c:	0016b92a 	andseq	fp, r6, sl, lsr #18
    2c60:	0bd60200 	bleq	ff583468 <GPIO_Ports+0xdf57f7c8>
    2c64:	2000284c 	andcs	r2, r0, ip, asr #16
    2c68:	00000050 	andeq	r0, r0, r0, asr r0
    2c6c:	0f7e9c01 	svceq	0x007e9c01
    2c70:	032b0000 			; <UNDEFINED> instruction: 0x032b0000
    2c74:	0200001b 	andeq	r0, r0, #27
    2c78:	02d60bd6 	sbcseq	r0, r6, #219136	; 0x35800
    2c7c:	91020000 	mrsls	r0, (UNDEF: 2)
    2c80:	02122b77 	andseq	r2, r2, #121856	; 0x1dc00
    2c84:	d6020000 	strle	r0, [r2], -r0
    2c88:	0006a10b 	andeq	sl, r6, fp, lsl #2
    2c8c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2c90:	199a2a00 	ldmibne	sl, {r9, fp, sp}
    2c94:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    2c98:	0028100a 	eoreq	r1, r8, sl
    2c9c:	00003c20 	andeq	r3, r0, r0, lsr #24
    2ca0:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    2ca4:	2b00000f 	blcs	2ce8 <startup-0x1fffd318>
    2ca8:	0000103b 	andeq	r1, r0, fp, lsr r0
    2cac:	d60a9e02 	strle	r9, [sl], -r2, lsl #28
    2cb0:	02000002 	andeq	r0, r0, #2
    2cb4:	2a007791 	bcs	20b00 <startup-0x1ffdf500>
    2cb8:	00000fe1 	andeq	r0, r0, r1, ror #31
    2cbc:	d00a8602 	andle	r8, sl, r2, lsl #12
    2cc0:	40200027 	eormi	r0, r0, r7, lsr #32
    2cc4:	01000000 	mrseq	r0, (UNDEF: 0)
    2cc8:	000fd99c 	muleq	pc, ip, r9	; <UNPREDICTABLE>
    2ccc:	17f12b00 	ldrbne	r2, [r1, r0, lsl #22]!
    2cd0:	86020000 	strhi	r0, [r2], -r0
    2cd4:	0003100a 	andeq	r1, r3, sl
    2cd8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2cdc:	0002122b 	andeq	r1, r2, fp, lsr #4
    2ce0:	0a860200 	beq	fe1834e8 <GPIO_Ports+0xde17f848>
    2ce4:	000006a1 	andeq	r0, r0, r1, lsr #13
    2ce8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2cec:	001b432a 	andseq	r4, fp, sl, lsr #6
    2cf0:	0a520200 	beq	14834f8 <startup-0x1eb7cb08>
    2cf4:	20002790 	mulcs	r0, r0, r7
    2cf8:	00000040 	andeq	r0, r0, r0, asr #32
    2cfc:	100e9c01 	andne	r9, lr, r1, lsl #24
    2d00:	0d2b0000 	stceq	0, cr0, [fp, #-0]
    2d04:	02000017 	andeq	r0, r0, #23
    2d08:	03100a52 	tsteq	r0, #335872	; 0x52000
    2d0c:	91020000 	mrsls	r0, (UNDEF: 2)
    2d10:	02122b74 	andseq	r2, r2, #116, 22	; 0x1d000
    2d14:	52020000 	andpl	r0, r2, #0
    2d18:	0006a10a 	andeq	sl, r6, sl, lsl #2
    2d1c:	73910200 	orrsvc	r0, r1, #0, 4
    2d20:	12f52a00 	rscsne	r2, r5, #0, 20
    2d24:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    2d28:	0027500a 	eoreq	r5, r7, sl
    2d2c:	00004020 	andeq	r4, r0, r0, lsr #32
    2d30:	439c0100 	orrsmi	r0, ip, #0, 2
    2d34:	2b000010 	blcs	2d7c <startup-0x1fffd284>
    2d38:	000011f4 	strdeq	r1, [r0], -r4
    2d3c:	100a1902 	andne	r1, sl, r2, lsl #18
    2d40:	02000003 	andeq	r0, r0, #3
    2d44:	122b7491 	eorne	r7, fp, #-1862270976	; 0x91000000
    2d48:	02000002 	andeq	r0, r0, #2
    2d4c:	06a10a19 	ssateq	r0, #2, r9, lsl #20
    2d50:	91020000 	mrsls	r0, (UNDEF: 2)
    2d54:	fe2a0073 	mcr2	0, 1, r0, cr10, cr3, {3}
    2d58:	0200000f 	andeq	r0, r0, #15
    2d5c:	271009fb 			; <UNDEFINED> instruction: 0x271009fb
    2d60:	00402000 	subeq	r2, r0, r0
    2d64:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d68:	00001078 	andeq	r1, r0, r8, ror r0
    2d6c:	001bf42b 	andseq	pc, fp, fp, lsr #8
    2d70:	09fb0200 	ldmibeq	fp!, {r9}^
    2d74:	00000310 	andeq	r0, r0, r0, lsl r3
    2d78:	2b749102 	blcs	1d27188 <startup-0x1e2d8e78>
    2d7c:	00000212 	andeq	r0, r0, r2, lsl r2
    2d80:	a109fb02 	tstge	r9, r2, lsl #22	; <UNPREDICTABLE>
    2d84:	02000006 	andeq	r0, r0, #6
    2d88:	2a007391 	bcs	1fbd4 <startup-0x1ffe042c>
    2d8c:	00001b7b 	andeq	r1, r0, fp, ror fp
    2d90:	d009db02 	andle	sp, r9, r2, lsl #22
    2d94:	40200026 	eormi	r0, r0, r6, lsr #32
    2d98:	01000000 	mrseq	r0, (UNDEF: 0)
    2d9c:	0010ad9c 	mulseq	r0, ip, sp
    2da0:	1a3c2b00 	bne	f0d9a8 <startup-0x1f0f2658>
    2da4:	db020000 	blle	82dac <startup-0x1ff7d254>
    2da8:	00031009 	andeq	r1, r3, r9
    2dac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2db0:	0002122b 	andeq	r1, r2, fp, lsr #4
    2db4:	09db0200 	ldmibeq	fp, {r9}^
    2db8:	000006a1 	andeq	r0, r0, r1, lsr #13
    2dbc:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2dc0:	0012d32a 	andseq	sp, r2, sl, lsr #6
    2dc4:	09aa0200 	stmibeq	sl!, {r9}
    2dc8:	20002690 	mulcs	r0, r0, r6
    2dcc:	00000040 	andeq	r0, r0, r0, asr #32
    2dd0:	10e29c01 	rscne	r9, r2, r1, lsl #24
    2dd4:	f12b0000 			; <UNDEFINED> instruction: 0xf12b0000
    2dd8:	02000017 	andeq	r0, r0, #23
    2ddc:	031009aa 	tsteq	r0, #2785280	; 0x2a8000
    2de0:	91020000 	mrsls	r0, (UNDEF: 2)
    2de4:	02122b74 	andseq	r2, r2, #116, 22	; 0x1d000
    2de8:	aa020000 	bge	82df0 <startup-0x1ff7d210>
    2dec:	0006a109 	andeq	sl, r6, r9, lsl #2
    2df0:	73910200 	orrsvc	r0, r1, #0, 4
    2df4:	10242a00 	eorne	r2, r4, r0, lsl #20
    2df8:	7b020000 	blvc	82e00 <startup-0x1ff7d200>
    2dfc:	00265009 	eoreq	r5, r6, r9
    2e00:	00004020 	andeq	r4, r0, r0, lsr #32
    2e04:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    2e08:	2b000011 	blcs	2e54 <startup-0x1fffd1ac>
    2e0c:	0000170d 	andeq	r1, r0, sp, lsl #14
    2e10:	10097b02 	andne	r7, r9, r2, lsl #22
    2e14:	02000003 	andeq	r0, r0, #3
    2e18:	122b7491 	eorne	r7, fp, #-1862270976	; 0x91000000
    2e1c:	02000002 	andeq	r0, r0, #2
    2e20:	06a1097b 			; <UNDEFINED> instruction: 0x06a1097b
    2e24:	91020000 	mrsls	r0, (UNDEF: 2)
    2e28:	402a0073 	eormi	r0, sl, r3, ror r0
    2e2c:	02000011 	andeq	r0, r0, #17
    2e30:	26100945 	ldrcs	r0, [r0], -r5, asr #18
    2e34:	00402000 	subeq	r2, r0, r0
    2e38:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e3c:	0000114c 	andeq	r1, r0, ip, asr #2
    2e40:	0011f42b 	andseq	pc, r1, fp, lsr #8
    2e44:	09450200 	stmdbeq	r5, {r9}^
    2e48:	00000310 	andeq	r0, r0, r0, lsl r3
    2e4c:	2b749102 	blcs	1d2725c <startup-0x1e2d8da4>
    2e50:	00000212 	andeq	r0, r0, r2, lsl r2
    2e54:	a1094502 	tstge	r9, r2, lsl #10
    2e58:	02000006 	andeq	r0, r0, #6
    2e5c:	2a007391 	bcs	1fca8 <startup-0x1ffe0358>
    2e60:	00001cd4 	ldrdeq	r1, [r0], -r4
    2e64:	d0092a02 	andle	r2, r9, r2, lsl #20
    2e68:	40200025 	eormi	r0, r0, r5, lsr #32
    2e6c:	01000000 	mrseq	r0, (UNDEF: 0)
    2e70:	0011819c 	mulseq	r1, ip, r1
    2e74:	1bf42b00 	blne	ffd0da7c <GPIO_Ports+0xdfd09ddc>
    2e78:	2a020000 	bcs	82e80 <startup-0x1ff7d180>
    2e7c:	00031009 	andeq	r1, r3, r9
    2e80:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2e84:	0002122b 	andeq	r1, r2, fp, lsr #4
    2e88:	092a0200 	stmdbeq	sl!, {r9}
    2e8c:	000006a1 	andeq	r0, r0, r1, lsr #13
    2e90:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2e94:	001a9d2a 	andseq	r9, sl, sl, lsr #26
    2e98:	090d0200 	stmdbeq	sp, {r9}
    2e9c:	20002590 	mulcs	r0, r0, r5
    2ea0:	00000040 	andeq	r0, r0, r0, asr #32
    2ea4:	11b69c01 			; <UNDEFINED> instruction: 0x11b69c01
    2ea8:	3c2b0000 	stccc	0, cr0, [fp], #-0
    2eac:	0200001a 	andeq	r0, r0, #26
    2eb0:	0310090d 	tsteq	r0, #212992	; 0x34000
    2eb4:	91020000 	mrsls	r0, (UNDEF: 2)
    2eb8:	02122b74 	andseq	r2, r2, #116, 22	; 0x1d000
    2ebc:	0d020000 	stceq	0, cr0, [r2, #-0]
    2ec0:	0006a109 	andeq	sl, r6, r9, lsl #2
    2ec4:	73910200 	orrsvc	r0, r1, #0, 4
    2ec8:	14e12a00 	strbtne	r2, [r1], #2560	; 0xa00
    2ecc:	e3020000 	movw	r0, #8192	; 0x2000
    2ed0:	00255008 	eoreq	r5, r5, r8
    2ed4:	00004020 	andeq	r4, r0, r0, lsr #32
    2ed8:	eb9c0100 	bl	fe7032e0 <GPIO_Ports+0xde6ff640>
    2edc:	2b000011 	blcs	2f28 <startup-0x1fffd0d8>
    2ee0:	000017f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    2ee4:	1008e302 	andne	lr, r8, r2, lsl #6
    2ee8:	02000003 	andeq	r0, r0, #3
    2eec:	122b7491 	eorne	r7, fp, #-1862270976	; 0x91000000
    2ef0:	02000002 	andeq	r0, r0, #2
    2ef4:	06a108e3 	strteq	r0, [r1], r3, ror #17
    2ef8:	91020000 	mrsls	r0, (UNDEF: 2)
    2efc:	542a0073 	strtpl	r0, [sl], #-115	; 0xffffff8d
    2f00:	02000012 	andeq	r0, r0, #18
    2f04:	251008af 	ldrcs	r0, [r0, #-2223]	; 0xfffff751
    2f08:	00402000 	subeq	r2, r0, r0
    2f0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f10:	00001220 	andeq	r1, r0, r0, lsr #4
    2f14:	00170d2b 	andseq	r0, r7, fp, lsr #26
    2f18:	08af0200 	stmiaeq	pc!, {r9}	; <UNPREDICTABLE>
    2f1c:	00000310 	andeq	r0, r0, r0, lsl r3
    2f20:	2b749102 	blcs	1d27330 <startup-0x1e2d8cd0>
    2f24:	00000212 	andeq	r0, r0, r2, lsl r2
    2f28:	a108af02 	tstge	r8, r2, lsl #30
    2f2c:	02000006 	andeq	r0, r0, #6
    2f30:	2a007391 	bcs	1fd7c <startup-0x1ffe0284>
    2f34:	00001878 	andeq	r1, r0, r8, ror r8
    2f38:	d0087602 	andle	r7, r8, r2, lsl #12
    2f3c:	40200024 	eormi	r0, r0, r4, lsr #32
    2f40:	01000000 	mrseq	r0, (UNDEF: 0)
    2f44:	0012559c 	mulseq	r2, ip, r5
    2f48:	11f42b00 	mvnsne	r2, r0, lsl #22
    2f4c:	76020000 	strvc	r0, [r2], -r0
    2f50:	00031008 	andeq	r1, r3, r8
    2f54:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2f58:	0002122b 	andeq	r1, r2, fp, lsr #4
    2f5c:	08760200 	ldmdaeq	r6!, {r9}^
    2f60:	000006a1 	andeq	r0, r0, r1, lsr #13
    2f64:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2f68:	00105f2a 	andseq	r5, r0, sl, lsr #30
    2f6c:	08580200 	ldmdaeq	r8, {r9}^
    2f70:	20002490 	mulcs	r0, r0, r4
    2f74:	00000040 	andeq	r0, r0, r0, asr #32
    2f78:	128a9c01 	addne	r9, sl, #256	; 0x100
    2f7c:	f42b0000 	vld4.8	{d0-d3}, [fp], r0
    2f80:	0200001b 	andeq	r0, r0, #27
    2f84:	03100858 	tsteq	r0, #88, 16	; 0x580000
    2f88:	91020000 	mrsls	r0, (UNDEF: 2)
    2f8c:	02122b74 	andseq	r2, r2, #116, 22	; 0x1d000
    2f90:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    2f94:	0006a108 	andeq	sl, r6, r8, lsl #2
    2f98:	73910200 	orrsvc	r0, r1, #0, 4
    2f9c:	1c2e2a00 			; <UNDEFINED> instruction: 0x1c2e2a00
    2fa0:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    2fa4:	00245008 	eoreq	r5, r4, r8
    2fa8:	00004020 	andeq	r4, r0, r0, lsr #32
    2fac:	bf9c0100 	svclt	0x009c0100
    2fb0:	2b000012 	blcs	3000 <startup-0x1fffd000>
    2fb4:	00001a3c 	andeq	r1, r0, ip, lsr sl
    2fb8:	10083802 	andne	r3, r8, r2, lsl #16
    2fbc:	02000003 	andeq	r0, r0, #3
    2fc0:	122b7491 	eorne	r7, fp, #-1862270976	; 0x91000000
    2fc4:	02000002 	andeq	r0, r0, #2
    2fc8:	06a10838 			; <UNDEFINED> instruction: 0x06a10838
    2fcc:	91020000 	mrsls	r0, (UNDEF: 2)
    2fd0:	ae2a0073 	mcrge	0, 1, r0, cr10, cr3, {3}
    2fd4:	02000017 	andeq	r0, r0, #23
    2fd8:	2434080e 	ldrtcs	r0, [r4], #-2062	; 0xfffff7f2
    2fdc:	001c2000 	andseq	r2, ip, r0
    2fe0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2fe4:	000012e5 	andeq	r1, r0, r5, ror #5
    2fe8:	001cba2b 	andseq	fp, ip, fp, lsr #20
    2fec:	080e0200 	stmdaeq	lr, {r9}
    2ff0:	00000310 	andeq	r0, r0, r0, lsl r3
    2ff4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2ff8:	0011192a 	andseq	r1, r1, sl, lsr #18
    2ffc:	078e0200 	streq	r0, [lr, r0, lsl #4]
    3000:	200023f8 	strdcs	r2, [r0], -r8
    3004:	0000003c 	andeq	r0, r0, ip, lsr r0
    3008:	131a9c01 	tstne	sl, #256	; 0x100
    300c:	072b0000 	streq	r0, [fp, -r0]!
    3010:	02000015 	andeq	r0, r0, #21
    3014:	0310078e 	tsteq	r0, #37224448	; 0x2380000
    3018:	91020000 	mrsls	r0, (UNDEF: 2)
    301c:	1a172d6c 	bne	5ce5d4 <startup-0x1fa31a2c>
    3020:	90020000 	andls	r0, r2, r0
    3024:	00031007 	andeq	r1, r3, r7
    3028:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    302c:	10df2a00 	sbcsne	r2, pc, r0, lsl #20
    3030:	2b020000 	blcs	83038 <startup-0x1ff7cfc8>
    3034:	0023b807 	eoreq	fp, r3, r7, lsl #16
    3038:	00004020 	andeq	r4, r0, r0, lsr #32
    303c:	4f9c0100 	svcmi	0x009c0100
    3040:	2b000013 	blcs	3094 <startup-0x1fffcf6c>
    3044:	000014f8 	strdeq	r1, [r0], -r8
    3048:	10072b02 	andne	r2, r7, r2, lsl #22
    304c:	02000003 	andeq	r0, r0, #3
    3050:	172d6c91 			; <UNDEFINED> instruction: 0x172d6c91
    3054:	0200001a 	andeq	r0, r0, #26
    3058:	0310072d 	tsteq	r0, #11796480	; 0xb40000
    305c:	91020000 	mrsls	r0, (UNDEF: 2)
    3060:	392a0074 	stmdbcc	sl!, {r2, r4, r5, r6}
    3064:	02000016 	andeq	r0, r0, #22
    3068:	237c070b 	cmncs	ip, #2883584	; 0x2c0000
    306c:	003c2000 	eorseq	r2, ip, r0
    3070:	9c010000 	stcls	0, cr0, [r1], {-0}
    3074:	00001384 	andeq	r1, r0, r4, lsl #7
    3078:	0011d82b 	andseq	sp, r1, fp, lsr #16
    307c:	070b0200 	streq	r0, [fp, -r0, lsl #4]
    3080:	00000310 	andeq	r0, r0, r0, lsl r3
    3084:	2d6c9102 	stfcsp	f1, [ip, #-8]!
    3088:	00001a17 	andeq	r1, r0, r7, lsl sl
    308c:	10070d02 	andne	r0, r7, r2, lsl #26
    3090:	02000003 	andeq	r0, r0, #3
    3094:	2a007491 	bcs	202e0 <startup-0x1ffdfd20>
    3098:	0000119b 	muleq	r0, fp, r1
    309c:	4006ea02 	andmi	lr, r6, r2, lsl #20
    30a0:	3c200023 	stccc	0, cr0, [r0], #-140	; 0xffffff74
    30a4:	01000000 	mrseq	r0, (UNDEF: 0)
    30a8:	0013b99c 	mulseq	r3, ip, r9
    30ac:	15162b00 	ldrne	r2, [r6, #-2816]	; 0xfffff500
    30b0:	ea020000 	b	830b8 <startup-0x1ff7cf48>
    30b4:	00031006 	andeq	r1, r3, r6
    30b8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    30bc:	001a172d 	andseq	r1, sl, sp, lsr #14
    30c0:	06ec0200 	strbteq	r0, [ip], r0, lsl #4
    30c4:	00000310 	andeq	r0, r0, r0, lsl r3
    30c8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    30cc:	0013df2a 	andseq	sp, r3, sl, lsr #30
    30d0:	06c60200 	strbeq	r0, [r6], r0, lsl #4
    30d4:	20002304 	andcs	r2, r0, r4, lsl #6
    30d8:	0000003c 	andeq	r0, r0, ip, lsr r0
    30dc:	13ee9c01 	mvnne	r9, #256	; 0x100
    30e0:	c32b0000 			; <UNDEFINED> instruction: 0xc32b0000
    30e4:	02000017 	andeq	r0, r0, #23
    30e8:	031006c6 	tsteq	r0, #207618048	; 0xc600000
    30ec:	91020000 	mrsls	r0, (UNDEF: 2)
    30f0:	1a172d6c 	bne	5ce6a8 <startup-0x1fa31958>
    30f4:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
    30f8:	00031006 	andeq	r1, r3, r6
    30fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3100:	0f7e2a00 	svceq	0x007e2a00
    3104:	ab020000 	blge	8310c <startup-0x1ff7cef4>
    3108:	0022e806 	eoreq	lr, r2, r6, lsl #16
    310c:	00001c20 	andeq	r1, r0, r0, lsr #24
    3110:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    3114:	2b000014 	blcs	316c <startup-0x1fffce94>
    3118:	0000159c 	muleq	r0, ip, r5
    311c:	1006ab02 	andne	sl, r6, r2, lsl #22
    3120:	02000003 	andeq	r0, r0, #3
    3124:	2a007491 	bcs	20370 <startup-0x1ffdfc90>
    3128:	000018ac 	andeq	r1, r0, ip, lsr #17
    312c:	c805ef02 	stmdagt	r5, {r1, r8, r9, sl, fp, sp, lr, pc}
    3130:	20200022 	eorcs	r0, r0, r2, lsr #32
    3134:	01000000 	mrseq	r0, (UNDEF: 0)
    3138:	00143a9c 	mulseq	r4, ip, sl
    313c:	02122b00 	andseq	r2, r2, #0, 22
    3140:	ef020000 	svc	0x00020000
    3144:	0006a105 	andeq	sl, r6, r5, lsl #2
    3148:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    314c:	1bc72a00 	blne	ff1cd954 <GPIO_Ports+0xdf1c9cb4>
    3150:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    3154:	0022a805 	eoreq	sl, r2, r5, lsl #16
    3158:	00002020 	andeq	r2, r0, r0, lsr #32
    315c:	609c0100 	addsvs	r0, ip, r0, lsl #2
    3160:	2b000014 	blcs	31b8 <startup-0x1fffce48>
    3164:	00000212 	andeq	r0, r0, r2, lsl r2
    3168:	a105de02 	tstge	r5, r2, lsl #28
    316c:	02000006 	andeq	r0, r0, #6
    3170:	2a007791 	bcs	20fbc <startup-0x1ffdf044>
    3174:	0000171c 	andeq	r1, r0, ip, lsl r7
    3178:	4805be02 	stmdami	r5, {r1, r9, sl, fp, ip, sp, pc}
    317c:	60200022 	eorvs	r0, r0, r2, lsr #32
    3180:	01000000 	mrseq	r0, (UNDEF: 0)
    3184:	0014959c 	mulseq	r4, ip, r5
    3188:	104e2b00 	subne	r2, lr, r0, lsl #22
    318c:	be020000 	cdplt	0, 0, cr0, cr2, cr0, {0}
    3190:	00031005 	andeq	r1, r3, r5
    3194:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3198:	001a172d 	andseq	r1, sl, sp, lsr #14
    319c:	05c00200 	strbeq	r0, [r0, #512]	; 0x200
    31a0:	00000310 	andeq	r0, r0, r0, lsl r3
    31a4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    31a8:	000f8f30 	andeq	r8, pc, r0, lsr pc	; <UNPREDICTABLE>
    31ac:	05250200 	streq	r0, [r5, #-512]!	; 0xfffffe00
    31b0:	200020f0 	strdcs	r2, [r0], -r0
    31b4:	00000158 	andeq	r0, r0, r8, asr r1
    31b8:	15159c01 	ldrne	r9, [r5, #-3073]	; 0xfffff3ff
    31bc:	ae2b0000 	cdpge	0, 2, cr0, cr11, cr0, {0}
    31c0:	02000016 	andeq	r0, r0, #22
    31c4:	15150525 	ldrne	r0, [r5, #-1317]	; 0xfffffadb
    31c8:	91020000 	mrsls	r0, (UNDEF: 2)
    31cc:	6d742f5c 	ldclvs	15, cr2, [r4, #-368]!	; 0xfffffe90
    31d0:	27020070 	smlsdxcs	r2, r0, r0, r0
    31d4:	00031005 	andeq	r1, r3, r5
    31d8:	70910200 	addsvc	r0, r1, r0, lsl #4
    31dc:	001cce2d 	andseq	ip, ip, sp, lsr #28
    31e0:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    31e4:	00000310 	andeq	r0, r0, r0, lsl r3
    31e8:	2d6c9102 	stfcsp	f1, [ip, #-8]!
    31ec:	00001b3c 	andeq	r1, r0, ip, lsr fp
    31f0:	10052702 	andne	r2, r5, r2, lsl #14
    31f4:	02000003 	andeq	r0, r0, #3
    31f8:	302d7491 	mlacc	sp, r1, r4, r7
    31fc:	0200000f 	andeq	r0, r0, #15
    3200:	03100527 	tsteq	r0, #163577856	; 0x9c00000
    3204:	91020000 	mrsls	r0, (UNDEF: 2)
    3208:	13772d68 	cmnne	r7, #104, 26	; 0x1a00
    320c:	27020000 	strcs	r0, [r2, -r0]
    3210:	00031005 	andeq	r1, r3, r5
    3214:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3218:	001d322d 	andseq	r3, sp, sp, lsr #4
    321c:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    3220:	00000310 	andeq	r0, r0, r0, lsl r3
    3224:	00609102 	rsbeq	r9, r0, r2, lsl #2
    3228:	0989041e 	stmibeq	r9, {r1, r2, r3, r4, sl}
    322c:	742a0000 	strtvc	r0, [sl], #-0
    3230:	02000011 	andeq	r0, r0, #17
    3234:	20b404f1 	ldrshtcs	r0, [r4], r1
    3238:	003c2000 	eorseq	r2, ip, r0
    323c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3240:	00001550 	andeq	r1, r0, r0, asr r5
    3244:	00108a2b 	andseq	r8, r0, fp, lsr #20
    3248:	04f10200 	ldrbteq	r0, [r1], #512	; 0x200
    324c:	00000310 	andeq	r0, r0, r0, lsl r3
    3250:	2d6c9102 	stfcsp	f1, [ip, #-8]!
    3254:	00001a17 	andeq	r1, r0, r7, lsl sl
    3258:	1004f302 	andne	pc, r4, r2, lsl #6
    325c:	02000003 	andeq	r0, r0, #3
    3260:	2a007491 	bcs	204ac <startup-0x1ffdfb54>
    3264:	000015c8 	andeq	r1, r0, r8, asr #11
    3268:	7c04d202 	sfmvc	f5, 1, [r4], {2}
    326c:	38200020 	stmdacc	r0!, {r5}
    3270:	01000000 	mrseq	r0, (UNDEF: 0)
    3274:	0015859c 	mulseq	r5, ip, r5
    3278:	108a2b00 	addne	r2, sl, r0, lsl #22
    327c:	d2020000 	andle	r0, r2, #0
    3280:	00031004 	andeq	r1, r3, r4
    3284:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3288:	001a172d 	andseq	r1, sl, sp, lsr #14
    328c:	04d40200 	ldrbeq	r0, [r4], #512	; 0x200
    3290:	00000310 	andeq	r0, r0, r0, lsl r3
    3294:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3298:	00139f2a 	andseq	r9, r3, sl, lsr #30
    329c:	04b30200 	ldrteq	r0, [r3], #512	; 0x200
    32a0:	20002048 	andcs	r2, r0, r8, asr #32
    32a4:	00000034 	andeq	r0, r0, r4, lsr r0
    32a8:	15ba9c01 	ldrne	r9, [sl, #3073]!	; 0xc01
    32ac:	422b0000 	eormi	r0, fp, #0
    32b0:	02000013 	andeq	r0, r0, #19
    32b4:	031004b3 	tsteq	r0, #-1291845632	; 0xb3000000
    32b8:	91020000 	mrsls	r0, (UNDEF: 2)
    32bc:	1a172d6c 	bne	5ce874 <startup-0x1fa3178c>
    32c0:	b5020000 	strlt	r0, [r2, #-0]
    32c4:	00031004 	andeq	r1, r3, r4
    32c8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    32cc:	11ba3100 			; <UNDEFINED> instruction: 0x11ba3100
    32d0:	9a020000 	bls	832d8 <startup-0x1ff7cd28>
    32d4:	0002d604 	andeq	sp, r2, r4, lsl #12
    32d8:	00202c00 	eoreq	r2, r0, r0, lsl #24
    32dc:	00001c20 	andeq	r1, r0, r0, lsr #24
    32e0:	2a9c0100 	bcs	fe7036e8 <GPIO_Ports+0xde6ffa48>
    32e4:	00001d01 	andeq	r1, r0, r1, lsl #26
    32e8:	f8047d02 			; <UNDEFINED> instruction: 0xf8047d02
    32ec:	3420001f 	strtcc	r0, [r0], #-31	; 0xffffffe1
    32f0:	01000000 	mrseq	r0, (UNDEF: 0)
    32f4:	0016059c 	mulseq	r6, ip, r5
    32f8:	12232b00 	eorne	r2, r3, #0, 22
    32fc:	7d020000 	stcvc	0, cr0, [r2, #-0]
    3300:	00031004 	andeq	r1, r3, r4
    3304:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3308:	001a172d 	andseq	r1, sl, sp, lsr #14
    330c:	047f0200 	ldrbteq	r0, [pc], #-512	; 3314 <startup-0x1fffccec>
    3310:	00000310 	andeq	r0, r0, r0, lsl r3
    3314:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3318:	0015872a 	andseq	r8, r5, sl, lsr #14
    331c:	03b50200 			; <UNDEFINED> instruction: 0x03b50200
    3320:	20001fbc 			; <UNDEFINED> instruction: 0x20001fbc
    3324:	0000003c 	andeq	r0, r0, ip, lsr r0
    3328:	16499c01 	strbne	r9, [r9], -r1, lsl #24
    332c:	ee2b0000 	cdp	0, 2, cr0, cr11, cr0, {0}
    3330:	02000018 	andeq	r0, r0, #24
    3334:	031003b5 	tsteq	r0, #-738197502	; 0xd4000002
    3338:	91020000 	mrsls	r0, (UNDEF: 2)
    333c:	12172b6c 	andsne	r2, r7, #108, 22	; 0x1b000
    3340:	b5020000 	strlt	r0, [r2, #-0]
    3344:	00031003 	andeq	r1, r3, r3
    3348:	68910200 	ldmvs	r1, {r9}
    334c:	001a172d 	andseq	r1, sl, sp, lsr #14
    3350:	03b70200 			; <UNDEFINED> instruction: 0x03b70200
    3354:	00000310 	andeq	r0, r0, r0, lsl r3
    3358:	00749102 	rsbseq	r9, r4, r2, lsl #2
    335c:	00146d2a 	andseq	r6, r4, sl, lsr #26
    3360:	03880200 	orreq	r0, r8, #0, 4
    3364:	20001f7c 	andcs	r1, r0, ip, ror pc
    3368:	00000040 	andeq	r0, r0, r0, asr #32
    336c:	168d9c01 	strne	r9, [sp], r1, lsl #24
    3370:	692b0000 	stmdbvs	fp!, {}	; <UNPREDICTABLE>
    3374:	02000018 	andeq	r0, r0, #24
    3378:	03100388 	tsteq	r0, #136, 6	; 0x20000002
    337c:	91020000 	mrsls	r0, (UNDEF: 2)
    3380:	19432b6c 	stmdbne	r3, {r2, r3, r5, r6, r8, r9, fp, sp}^
    3384:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    3388:	00031003 	andeq	r1, r3, r3
    338c:	68910200 	ldmvs	r1, {r9}
    3390:	001a172d 	andseq	r1, sl, sp, lsr #14
    3394:	038a0200 	orreq	r0, sl, #0, 4
    3398:	00000310 	andeq	r0, r0, r0, lsl r3
    339c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    33a0:	0017932a 	andseq	r9, r7, sl, lsr #6
    33a4:	036f0200 	cmneq	pc, #0, 4
    33a8:	20001f5c 	andcs	r1, r0, ip, asr pc
    33ac:	00000020 	andeq	r0, r0, r0, lsr #32
    33b0:	16b39c01 	ldrtne	r9, [r3], r1, lsl #24
    33b4:	122b0000 	eorne	r0, fp, #0
    33b8:	02000002 	andeq	r0, r0, #2
    33bc:	06a1036f 	strteq	r0, [r1], pc, ror #6
    33c0:	91020000 	mrsls	r0, (UNDEF: 2)
    33c4:	eb2a0077 	bl	a835a8 <startup-0x1f57ca58>
    33c8:	0200001c 	andeq	r0, r0, #28
    33cc:	1f3c035d 	svcne	0x003c035d
    33d0:	00202000 	eoreq	r2, r0, r0
    33d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    33d8:	000016d9 	ldrdeq	r1, [r0], -r9
    33dc:	0002122b 	andeq	r1, r2, fp, lsr #4
    33e0:	035d0200 	cmpeq	sp, #0, 4
    33e4:	000006a1 	andeq	r0, r0, r1, lsr #13
    33e8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    33ec:	0014052a 	andseq	r0, r4, sl, lsr #10
    33f0:	03490200 	movteq	r0, #37376	; 0x9200
    33f4:	20001f0c 	andcs	r1, r0, ip, lsl #30
    33f8:	00000030 	andeq	r0, r0, r0, lsr r0
    33fc:	171d9c01 	ldrne	r9, [sp, -r1, lsl #24]
    3400:	512b0000 			; <UNDEFINED> instruction: 0x512b0000
    3404:	02000018 	andeq	r0, r0, #24
    3408:	03100349 	tsteq	r0, #603979777	; 0x24000001
    340c:	91020000 	mrsls	r0, (UNDEF: 2)
    3410:	18592b74 	ldmdane	r9, {r2, r4, r5, r6, r8, r9, fp, sp}^
    3414:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    3418:	00031003 	andeq	r1, r3, r3
    341c:	70910200 	addsvc	r0, r1, r0, lsl #4
    3420:	0018612b 	andseq	r6, r8, fp, lsr #2
    3424:	03490200 	movteq	r0, #37376	; 0x9200
    3428:	00000310 	andeq	r0, r0, r0, lsl r3
    342c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    3430:	00107c2a 	andseq	r7, r0, sl, lsr #24
    3434:	02dc0200 	sbcseq	r0, ip, #0, 4
    3438:	20001eec 	andcs	r1, r0, ip, ror #29
    343c:	00000020 	andeq	r0, r0, r0, lsr #32
    3440:	17439c01 	strbne	r9, [r3, -r1, lsl #24]
    3444:	122b0000 	eorne	r0, fp, #0
    3448:	02000002 	andeq	r0, r0, #2
    344c:	06a102dc 	ssateq	r0, #2, ip, asr #5
    3450:	91020000 	mrsls	r0, (UNDEF: 2)
    3454:	452a0077 	strmi	r0, [sl, #-119]!	; 0xffffff89
    3458:	0200001c 	andeq	r0, r0, #28
    345c:	1ec40251 	mcrne	2, 6, r0, cr4, cr1, {2}
    3460:	00282000 	eoreq	r2, r8, r0
    3464:	9c010000 	stcls	0, cr0, [r1], {-0}
    3468:	00001778 	andeq	r1, r0, r8, ror r7
    346c:	001b732b 	andseq	r7, fp, fp, lsr #6
    3470:	02510200 	subseq	r0, r1, #0, 4
    3474:	00000310 	andeq	r0, r0, r0, lsl r3
    3478:	2b749102 	blcs	1d27888 <startup-0x1e2d8778>
    347c:	00001b98 	muleq	r0, r8, fp
    3480:	10025102 	andne	r5, r2, r2, lsl #2
    3484:	02000003 	andeq	r0, r0, #3
    3488:	2a007091 	bcs	1f6d4 <startup-0x1ffe092c>
    348c:	000018a1 	andeq	r1, r0, r1, lsr #17
    3490:	a4023302 	strge	r3, [r2], #-770	; 0xfffffcfe
    3494:	2020001e 	eorcs	r0, r0, lr, lsl r0
    3498:	01000000 	mrseq	r0, (UNDEF: 0)
    349c:	00179e9c 	mulseq	r7, ip, lr
    34a0:	02122b00 	andseq	r2, r2, #0, 22
    34a4:	33020000 	movwcc	r0, #8192	; 0x2000
    34a8:	0006a102 	andeq	sl, r6, r2, lsl #2
    34ac:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    34b0:	1d242a00 	vstmdbne	r4!, {s4-s3}
    34b4:	1b020000 	blne	834bc <startup-0x1ff7cb44>
    34b8:	001e6802 	andseq	r6, lr, r2, lsl #16
    34bc:	00003c20 	andeq	r3, r0, r0, lsr #24
    34c0:	009c0100 	addseq	r0, ip, r0, lsl #2
    34c4:	2b000018 	blcs	352c <startup-0x1fffcad4>
    34c8:	00001246 	andeq	r1, r0, r6, asr #4
    34cc:	10021b02 	andne	r1, r2, r2, lsl #22
    34d0:	02000003 	andeq	r0, r0, #3
    34d4:	5d2b7491 	cfstrspl	mvf7, [fp, #-580]!	; 0xfffffdbc
    34d8:	02000013 	andeq	r0, r0, #19
    34dc:	0310021b 	tsteq	r0, #-1342177279	; 0xb0000001
    34e0:	91020000 	mrsls	r0, (UNDEF: 2)
    34e4:	1c292b70 			; <UNDEFINED> instruction: 0x1c292b70
    34e8:	1b020000 	blne	834f0 <startup-0x1ff7cb10>
    34ec:	00031002 	andeq	r1, r3, r2
    34f0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    34f4:	0013622b 	andseq	r6, r3, fp, lsr #4
    34f8:	021b0200 	andseq	r0, fp, #0, 4
    34fc:	00000310 	andeq	r0, r0, r0, lsl r3
    3500:	2b689102 	blcs	1a27910 <startup-0x1e5d86f0>
    3504:	00001367 	andeq	r1, r0, r7, ror #6
    3508:	10021b02 	andne	r1, r2, r2, lsl #22
    350c:	02000003 	andeq	r0, r0, #3
    3510:	2a000091 	bcs	375c <startup-0x1fffc8a4>
    3514:	0000136c 	andeq	r1, r0, ip, ror #6
    3518:	4801b802 	stmdami	r1, {r1, fp, ip, sp, pc}
    351c:	2020001e 	eorcs	r0, r0, lr, lsl r0
    3520:	01000000 	mrseq	r0, (UNDEF: 0)
    3524:	0018269c 	mulseq	r8, ip, r6
    3528:	02122b00 	andseq	r2, r2, #0, 22
    352c:	b8020000 	stmdalt	r2, {}	; <UNPREDICTABLE>
    3530:	0006a101 	andeq	sl, r6, r1, lsl #2
    3534:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3538:	12a22a00 	adcne	r2, r2, #0, 20
    353c:	90020000 	andls	r0, r2, r0
    3540:	001e0401 	andseq	r0, lr, r1, lsl #8
    3544:	00004420 	andeq	r4, r0, r0, lsr #8
    3548:	4c9c0100 	ldfmis	f0, [ip], {0}
    354c:	2b000018 	blcs	35b4 <startup-0x1fffca4c>
    3550:	000013ca 	andeq	r1, r0, sl, asr #7
    3554:	d6019002 	strle	r9, [r1], -r2
    3558:	02000002 	andeq	r0, r0, #2
    355c:	2a007791 	bcs	213a8 <startup-0x1ffdec58>
    3560:	000016c6 	andeq	r1, r0, r6, asr #13
    3564:	e4017702 	str	r7, [r1], #-1794	; 0xfffff8fe
    3568:	2020001d 	eorcs	r0, r0, sp, lsl r0
    356c:	01000000 	mrseq	r0, (UNDEF: 0)
    3570:	0018729c 	mulseq	r8, ip, r2
    3574:	02122b00 	andseq	r2, r2, #0, 22
    3578:	77020000 	strvc	r0, [r2, -r0]
    357c:	0006a101 	andeq	sl, r6, r1, lsl #2
    3580:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3584:	16da2a00 	ldrbne	r2, [sl], r0, lsl #20
    3588:	53020000 	movwpl	r0, #8192	; 0x2000
    358c:	001da601 	andseq	sl, sp, r1, lsl #12
    3590:	00003e20 	andeq	r3, r0, r0, lsr #28
    3594:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    3598:	2b000018 	blcs	3600 <startup-0x1fffca00>
    359c:	000016e4 	andeq	r1, r0, r4, ror #13
    35a0:	d6015302 	strle	r5, [r1], -r2, lsl #6
    35a4:	02000002 	andeq	r0, r0, #2
    35a8:	172d6f91 			; <UNDEFINED> instruction: 0x172d6f91
    35ac:	0200001a 	andeq	r0, r0, #26
    35b0:	03100155 	tsteq	r0, #1073741845	; 0x40000015
    35b4:	91020000 	mrsls	r0, (UNDEF: 2)
    35b8:	65320074 	ldrvs	r0, [r2, #-116]!	; 0xffffff8c
    35bc:	02000019 	andeq	r0, r0, #25
    35c0:	06c80134 			; <UNDEFINED> instruction: 0x06c80134
    35c4:	1d480000 	stclne	0, cr0, [r8, #-0]
    35c8:	005e2000 	subseq	r2, lr, r0
    35cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    35d0:	000018ef 	andeq	r1, r0, pc, ror #17
    35d4:	0013f62d 	andseq	pc, r3, sp, lsr #12
    35d8:	01360200 	teqeq	r6, r0, lsl #4
    35dc:	0000031b 	andeq	r0, r0, fp, lsl r3
    35e0:	2d689102 	stfcsp	f1, [r8, #-8]!
    35e4:	00001eab 	andeq	r1, r0, fp, lsr #29
    35e8:	c8013702 	stmdagt	r1, {r1, r8, r9, sl, ip, sp}
    35ec:	02000006 	andeq	r0, r0, #6
    35f0:	4b2d6f91 	blmi	b5f43c <startup-0x1f4a0bc4>
    35f4:	0200001a 	andeq	r0, r0, #26
    35f8:	066e0138 			; <UNDEFINED> instruction: 0x066e0138
    35fc:	91020000 	mrsls	r0, (UNDEF: 2)
    3600:	ae2a006e 	cdpge	0, 2, cr0, cr10, cr14, {3}
    3604:	02000013 	andeq	r0, r0, #19
    3608:	1d20011c 	stfnes	f0, [r0, #-112]!	; 0xffffff90
    360c:	00282000 	eoreq	r2, r8, r0
    3610:	9c010000 	stcls	0, cr0, [r1], {-0}
    3614:	00001915 	andeq	r1, r0, r5, lsl r9
    3618:	0014652b 	andseq	r6, r4, fp, lsr #10
    361c:	011c0200 	tsteq	ip, r0, lsl #4
    3620:	000002d6 	ldrdeq	r0, [r0], -r6
    3624:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3628:	00119028 	andseq	r9, r1, r8, lsr #32
    362c:	b0e10200 	rsclt	r0, r1, r0, lsl #4
    3630:	7020001c 	eorvc	r0, r0, ip, lsl r0
    3634:	01000000 	mrseq	r0, (UNDEF: 0)
    3638:	19b6339c 	ldmibne	r6!, {r2, r3, r4, r7, r8, r9, ip, sp}
    363c:	e0010000 	and	r0, r1, r0
    3640:	00031006 	andeq	r1, r3, r6
    3644:	001c6800 	andseq	r6, ip, r0, lsl #16
    3648:	00004820 	andeq	r4, r0, r0, lsr #16
    364c:	509c0100 	addspl	r0, ip, r0, lsl #2
    3650:	2b000019 	blcs	36bc <startup-0x1fffc944>
    3654:	000015e6 	andeq	r1, r0, r6, ror #11
    3658:	1006e001 	andne	lr, r6, r1
    365c:	02000003 	andeq	r0, r0, #3
    3660:	34007491 	strcc	r7, [r0], #-1169	; 0xfffffb6f
    3664:	00001bd5 	ldrdeq	r1, [r0], -r5
    3668:	08065d01 	stmdaeq	r6, {r0, r8, sl, fp, ip, lr}
    366c:	6020001c 	eorvs	r0, r0, ip, lsl r0
    3670:	01000000 	mrseq	r0, (UNDEF: 0)
    3674:	1b6e2b9c 	blne	1b8e4ec <startup-0x1e471b14>
    3678:	5d010000 	stcpl	0, cr0, [r1, #-0]
    367c:	00025a06 	andeq	r5, r2, r6, lsl #20
    3680:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3684:	0008592b 	andeq	r5, r8, fp, lsr #18
    3688:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    368c:	00000310 	andeq	r0, r0, r0, lsl r3
    3690:	00709102 	rsbseq	r9, r0, r2, lsl #2
    3694:	0001a900 	andeq	sl, r1, r0, lsl #18
    3698:	10000400 	andne	r0, r0, r0, lsl #8
    369c:	0400000b 	streq	r0, [r0], #-11
    36a0:	00037001 	andeq	r7, r3, r1
    36a4:	1d470c00 	stclne	12, cr0, [r7, #-0]
    36a8:	06a50000 	strteq	r0, [r5], r0
    36ac:	31500000 	cmpcc	r0, r0
    36b0:	01282000 			; <UNDEFINED> instruction: 0x01282000
    36b4:	12730000 	rsbsne	r0, r3, #0
    36b8:	01020000 	mrseq	r0, (UNDEF: 2)
    36bc:	0004bf06 	andeq	fp, r4, r6, lsl #30
    36c0:	00a90300 	adceq	r0, r9, r0, lsl #6
    36c4:	2b020000 	blcs	836cc <startup-0x1ff7c934>
    36c8:	00000037 	andeq	r0, r0, r7, lsr r0
    36cc:	bd080102 	stflts	f0, [r8, #-8]
    36d0:	02000004 	andeq	r0, r0, #4
    36d4:	04d60502 	ldrbeq	r0, [r6], #1282	; 0x502
    36d8:	02020000 	andeq	r0, r2, #0
    36dc:	0002c107 	andeq	ip, r2, r7, lsl #2
    36e0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    36e4:	0000016a 	andeq	r0, r0, sl, ror #2
    36e8:	ba070402 	blt	1c46f8 <startup-0x1fe3b908>
    36ec:	02000001 	andeq	r0, r0, #1
    36f0:	01650508 	cmneq	r5, r8, lsl #10
    36f4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    36f8:	0001b507 	andeq	fp, r1, r7, lsl #10
    36fc:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    3700:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3704:	bf070402 	svclt	0x00070402
    3708:	03000001 	movweq	r0, #1
    370c:	000000ab 	andeq	r0, r0, fp, lsr #1
    3710:	002c1803 	eoreq	r1, ip, r3, lsl #16
    3714:	67050000 	strvs	r0, [r5, -r0]
    3718:	00b90c04 	adcseq	r0, r9, r4, lsl #24
    371c:	af060000 	svcge	0x00060000
    3720:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    3724:	0000b90e 	andeq	fp, r0, lr, lsl #18
    3728:	41060000 	mrsmi	r0, (UNDEF: 6)
    372c:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    3730:	00007611 	andeq	r7, r0, r1, lsl r6
    3734:	69076400 	stmdbvs	r7, {sl, sp, lr}
    3738:	1404006e 	strne	r0, [r4], #-110	; 0xffffff92
    373c:	00000076 	andeq	r0, r0, r6, ror r0
    3740:	756f0765 	strbvc	r0, [pc, #-1893]!	; 2fe3 <startup-0x1fffd01d>
    3744:	17040074 	smlsdxne	r4, r4, r0, r0
    3748:	00000076 	andeq	r0, r0, r6, ror r0
    374c:	76080066 	strvc	r0, [r8], -r6, rrx
    3750:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    3754:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3758:	0000006f 	andeq	r0, r0, pc, rrx
    375c:	92030063 	andls	r0, r3, #99	; 0x63
    3760:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    3764:	00008118 	andeq	r8, r0, r8, lsl r1
    3768:	1db90a00 			; <UNDEFINED> instruction: 0x1db90a00
    376c:	2d010000 	stccs	0, cr0, [r1, #-0]
    3770:	00000076 	andeq	r0, r0, r6, ror r0
    3774:	2000321a 	andcs	r3, r0, sl, lsl r2
    3778:	0000005e 	andeq	r0, r0, lr, asr r0
    377c:	010a9c01 	tsteq	sl, r1, lsl #24
    3780:	ce0b0000 	cdpgt	0, 0, cr0, cr11, cr0, {0}
    3784:	0100001d 	tsteq	r0, sp, lsl r0
    3788:	00010a2d 	andeq	r0, r1, sp, lsr #20
    378c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3790:	001daa0b 	andseq	sl, sp, fp, lsl #20
    3794:	102d0100 	eorne	r0, sp, r0, lsl #2
    3798:	02000001 	andeq	r0, r0, #1
    379c:	0c007091 	stceq	0, cr7, [r0], {145}	; 0x91
    37a0:	0000c904 	andeq	ip, r0, r4, lsl #18
    37a4:	76040c00 	strvc	r0, [r4], -r0, lsl #24
    37a8:	0d000000 	stceq	0, cr0, [r0, #-0]
    37ac:	00001d97 	muleq	r0, r7, sp
    37b0:	31da1f01 	bicscc	r1, sl, r1, lsl #30
    37b4:	00402000 	subeq	r2, r0, r0
    37b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    37bc:	00000156 	andeq	r0, r0, r6, asr r1
    37c0:	001dce0b 	andseq	ip, sp, fp, lsl #28
    37c4:	0a1f0100 	beq	7c3bcc <startup-0x1f83c434>
    37c8:	02000001 	andeq	r0, r0, #1
    37cc:	b40b6c91 	strlt	r6, [fp], #-3217	; 0xfffff36f
    37d0:	0100001d 	tsteq	r0, sp, lsl r0
    37d4:	0000761f 	andeq	r7, r0, pc, lsl r6
    37d8:	6b910200 	blvs	fe443fe0 <GPIO_Ports+0xde440340>
    37dc:	001dd50e 	andseq	sp, sp, lr, lsl #10
    37e0:	76210100 	strtvc	r0, [r1], -r0, lsl #2
    37e4:	02000000 	andeq	r0, r0, #0
    37e8:	0a007791 	beq	21634 <startup-0x1ffde9cc>
    37ec:	00001d37 	andeq	r1, r0, r7, lsr sp
    37f0:	00760c01 	rsbseq	r0, r6, r1, lsl #24
    37f4:	31780000 	cmncc	r8, r0
    37f8:	00622000 	rsbeq	r2, r2, r0
    37fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3800:	0000018c 	andeq	r0, r0, ip, lsl #3
    3804:	001dce0b 	andseq	ip, sp, fp, lsl #28
    3808:	0a0c0100 	beq	303c10 <startup-0x1fcfc3f0>
    380c:	02000001 	andeq	r0, r0, #1
    3810:	b40b7491 	strlt	r7, [fp], #-1169	; 0xfffffb6f
    3814:	0100001d 	tsteq	r0, sp, lsl r0
    3818:	0000760c 	andeq	r7, r0, ip, lsl #12
    381c:	73910200 	orrsvc	r0, r1, #0, 4
    3820:	1dc30f00 	stclne	15, cr0, [r3]
    3824:	04010000 	streq	r0, [r1], #-0
    3828:	20003150 	andcs	r3, r0, r0, asr r1
    382c:	00000028 	andeq	r0, r0, r8, lsr #32
    3830:	ce0b9c01 	cdpgt	12, 0, cr9, cr11, cr1, {0}
    3834:	0100001d 	tsteq	r0, sp, lsl r0
    3838:	00010a04 	andeq	r0, r1, r4, lsl #20
    383c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3840:	11b30000 			; <UNDEFINED> instruction: 0x11b30000
    3844:	00040000 	andeq	r0, r4, r0
    3848:	00000bf9 	strdeq	r0, [r0], -r9
    384c:	03700104 	cmneq	r0, #4, 2
    3850:	e10c0000 	mrs	r0, (UNDEF: 12)
    3854:	a500001e 	strge	r0, [r0, #-30]	; 0xffffffe2
    3858:	78000006 	stmdavc	r0, {r1, r2}
    385c:	e4200032 	strt	r0, [r0], #-50	; 0xffffffce
    3860:	c5000007 	strgt	r0, [r0, #-7]
    3864:	02000013 	andeq	r0, r0, #19
    3868:	00001b6e 	andeq	r1, r0, lr, ror #22
    386c:	02530105 	subseq	r0, r3, #1073741825	; 0x40000001
    3870:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    3874:	00000253 	andeq	r0, r0, r3, asr r2
    3878:	0014b203 	andseq	fp, r4, r3, lsl #4
    387c:	2d037200 	sfmcs	f7, 4, [r3, #-0]
    3880:	74000015 	strvc	r0, [r0], #-21	; 0xffffffeb
    3884:	0015d803 	andseq	sp, r5, r3, lsl #16
    3888:	ba037500 	blt	e0c90 <startup-0x1ff1f370>
    388c:	76000012 			; <UNDEFINED> instruction: 0x76000012
    3890:	00168703 	andseq	r8, r6, r3, lsl #14
    3894:	8b037b00 	blhi	e249c <startup-0x1ff1db64>
    3898:	7c00001a 	stcvc	0, cr0, [r0], {26}
    389c:	001c8903 	andseq	r8, ip, r3, lsl #18
    38a0:	e7037e00 	str	r7, [r3, -r0, lsl #28]
    38a4:	7f000011 	svcvc	0x00000011
    38a8:	0014c604 	andseq	ip, r4, r4, lsl #12
    38ac:	c1040000 	mrsgt	r0, (UNDEF: 4)
    38b0:	01000013 	tsteq	r0, r3, lsl r0
    38b4:	00154304 	andseq	r4, r5, r4, lsl #6
    38b8:	35040200 	strcc	r0, [r4, #-512]	; 0xfffffe00
    38bc:	0300000f 	movweq	r0, #15
    38c0:	000fcc04 	andeq	ip, pc, r4, lsl #24
    38c4:	fa040400 	blx	1048cc <startup-0x1fefb734>
    38c8:	0500001a 	streq	r0, [r0, #-26]	; 0xffffffe6
    38cc:	001a2804 	andseq	r2, sl, r4, lsl #16
    38d0:	3b040600 	blcc	1050d8 <startup-0x1fefaf28>
    38d4:	07000014 	smladeq	r0, r4, r0, r0
    38d8:	000f4304 	andeq	r4, pc, r4, lsl #6
    38dc:	7e040800 	cdpvc	8, 0, cr0, cr4, cr0, {0}
    38e0:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    38e4:	00175704 	andseq	r5, r7, r4, lsl #14
    38e8:	d4040a00 	strle	r0, [r4], #-2560	; 0xfffff600
    38ec:	0b000018 	bleq	3954 <startup-0x1fffc6ac>
    38f0:	00180a04 	andseq	r0, r8, r4, lsl #20
    38f4:	34040c00 	strcc	r0, [r4], #-3072	; 0xfffff400
    38f8:	0d000012 	stceq	0, cr0, [r0, #-72]	; 0xffffffb8
    38fc:	001b1404 	andseq	r1, fp, r4, lsl #8
    3900:	55040e00 	strpl	r0, [r4, #-3584]	; 0xfffff200
    3904:	0f00001a 	svceq	0x0000001a
    3908:	00145304 	andseq	r5, r4, r4, lsl #6
    390c:	4e041000 	cdpmi	0, 0, cr1, cr4, cr0, {0}
    3910:	1100000f 	tstne	r0, pc
    3914:	00199104 	andseq	r9, r9, r4, lsl #2
    3918:	46041200 	strmi	r1, [r4], -r0, lsl #4
    391c:	13000014 	movwne	r0, #20
    3920:	00132a04 	andseq	r2, r3, r4, lsl #20
    3924:	e6041400 	str	r1, [r4], -r0, lsl #8
    3928:	1500001b 	strne	r0, [r0, #-27]	; 0xffffffe5
    392c:	00155d04 	andseq	r5, r5, r4, lsl #26
    3930:	11041600 	tstne	r4, r0, lsl #12
    3934:	1700001c 	smladne	r0, ip, r0, r0
    3938:	00160704 	andseq	r0, r6, r4, lsl #14
    393c:	60041800 	andvs	r1, r4, r0, lsl #16
    3940:	1900001b 	stmdbne	r0, {r0, r1, r3, r4}
    3944:	00115704 	andseq	r5, r1, r4, lsl #14
    3948:	20041a00 	andcs	r1, r4, r0, lsl #20
    394c:	1b000014 	blne	39a4 <startup-0x1fffc65c>
    3950:	00104404 	andseq	r4, r0, r4, lsl #8
    3954:	4f041c00 	svcmi	0x00041c00
    3958:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    395c:	00138104 	andseq	r8, r3, r4, lsl #2
    3960:	d2041e00 	andle	r1, r4, #0, 28
    3964:	1f000013 	svcne	0x00000013
    3968:	00128704 	andseq	r8, r2, r4, lsl #14
    396c:	70042000 	andvc	r2, r4, r0
    3970:	21000017 	tstcs	r0, r7, lsl r0
    3974:	0015b304 	andseq	fp, r5, r4, lsl #6
    3978:	7d042200 	sfmvc	f2, 4, [r4, #-0]
    397c:	23000016 	movwcs	r0, #22
    3980:	0010b704 	andseq	fp, r0, r4, lsl #14
    3984:	59042400 	stmdbpl	r4, {sl, sp}
    3988:	25000019 	strcs	r0, [r0, #-25]	; 0xffffffe7
    398c:	001b2604 	andseq	r2, fp, r4, lsl #12
    3990:	03042600 	movweq	r2, #17920	; 0x4600
    3994:	27000012 	smladcs	r0, r2, r0, r0
    3998:	00193404 	andseq	r3, r9, r4, lsl #8
    399c:	06042800 	streq	r2, [r4], -r0, lsl #16
    39a0:	29000019 	stmdbcs	r0, {r0, r3, r4}
    39a4:	00172d04 	andseq	r2, r7, r4, lsl #26
    39a8:	c1042a00 	tstgt	r4, r0, lsl #20
    39ac:	2b000010 	blcs	39f4 <startup-0x1fffc60c>
    39b0:	000f6004 	andeq	r6, pc, r4
    39b4:	7c042c00 	stcvc	12, cr2, [r4], {-0}
    39b8:	2d000014 	stccs	0, cr0, [r0, #-80]	; 0xffffffb0
    39bc:	001c5604 	andseq	r5, ip, r4, lsl #12
    39c0:	a8042e00 	stmdage	r4, {r9, sl, fp, sp}
    39c4:	2f00001c 	svccs	0x0000001c
    39c8:	001a1e04 	andseq	r1, sl, r4, lsl #28
    39cc:	63043000 	movwvs	r3, #16384	; 0x4000
    39d0:	3100001c 	tstcc	r0, ip, lsl r0
    39d4:	0012b004 	andseq	fp, r2, r4
    39d8:	c2043200 	andgt	r3, r4, #0, 4
    39dc:	3300000f 	movwcc	r0, #15
    39e0:	0016f804 	andseq	pc, r6, r4, lsl #16
    39e4:	fc043400 	stc2	4, cr3, [r4], {-0}
    39e8:	35000015 	strcc	r0, [r0, #-21]	; 0xffffffeb
    39ec:	00176204 	andseq	r6, r7, r4, lsl #4
    39f0:	53043600 	movwpl	r3, #17920	; 0x4600
    39f4:	37000016 	smladcc	r0, r6, r0, r0
    39f8:	00157504 	andseq	r7, r5, r4, lsl #10
    39fc:	a1043800 	tstge	r4, r0, lsl #16
    3a00:	3900000f 	stmdbcc	r0, {r0, r1, r2, r3}
    3a04:	001d1204 	andseq	r1, sp, r4, lsl #4
    3a08:	29043a00 	stmdbcs	r4, {r9, fp, ip, sp}
    3a0c:	3b000018 	blcc	3a74 <startup-0x1fffc58c>
    3a10:	00126b04 	andseq	r6, r2, r4, lsl #22
    3a14:	ca043c00 	bgt	112a1c <startup-0x1feed5e4>
    3a18:	3d00001a 	stccc	0, cr0, [r0, #-104]	; 0xffffff98
    3a1c:	00165d04 	andseq	r5, r6, r4, lsl #26
    3a20:	44043e00 	strmi	r3, [r4], #-3584	; 0xfffff200
    3a24:	3f000018 	svccc	0x00000018
    3a28:	00109304 	andseq	r9, r0, r4, lsl #6
    3a2c:	83044000 	movwhi	r4, #16384	; 0x4000
    3a30:	41000019 	tstmi	r0, r9, lsl r0
    3a34:	00129404 	andseq	r9, r2, r4, lsl #8
    3a38:	a6044200 	strge	r4, [r4], -r0, lsl #4
    3a3c:	43000014 	movwmi	r0, #20
    3a40:	00112e04 	andseq	r2, r1, r4, lsl #28
    3a44:	71044400 	tstvc	r4, r0, lsl #8
    3a48:	4500001a 	strmi	r0, [r0, #-26]	; 0xffffffe6
    3a4c:	00149404 	andseq	r9, r4, r4, lsl #8
    3a50:	a1044600 	tstge	r4, r0, lsl #12
    3a54:	47000010 	smladmi	r0, r0, r0, r0
    3a58:	001ab404 	andseq	fp, sl, r4, lsl #8
    3a5c:	1d044800 	stcne	8, cr4, [r4, #-0]
    3a60:	49000019 	stmdbmi	r0, {r0, r3, r4}
    3a64:	001baa04 	andseq	sl, fp, r4, lsl #20
    3a68:	95044a00 	strls	r4, [r4, #-2560]	; 0xfffff600
    3a6c:	4b00001c 	blmi	3ae4 <startup-0x1fffc51c>
    3a70:	0014d004 	andseq	sp, r4, r4
    3a74:	6b044c00 	blvs	116a7c <startup-0x1fee9584>
    3a78:	4d000016 	stcmi	0, cr0, [r0, #-88]	; 0xffffffa8
    3a7c:	000fd704 	andeq	sp, pc, r4, lsl #14
    3a80:	2a044e00 	bcs	117288 <startup-0x1fee8d78>
    3a84:	4f000019 	svcmi	0x00000019
    3a88:	00142d04 	andseq	r2, r4, r4, lsl #26
    3a8c:	d1045000 	mrsle	r5, (UNDEF: 4)
    3a90:	51000016 	tstpl	r0, r6, lsl r0
    3a94:	06010500 	streq	r0, [r1], -r0, lsl #10
    3a98:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
    3a9c:	00156b06 	andseq	r6, r5, r6, lsl #22
    3aa0:	032f0300 			; <UNDEFINED> instruction: 0x032f0300
    3aa4:	00000025 	andeq	r0, r0, r5, lsr #32
    3aa8:	0000a907 	andeq	sl, r0, r7, lsl #18
    3aac:	712b0400 			; <UNDEFINED> instruction: 0x712b0400
    3ab0:	05000002 	streq	r0, [r0, #-2]
    3ab4:	04bd0801 	ldrteq	r0, [sp], #2049	; 0x801
    3ab8:	02050000 	andeq	r0, r5, #0
    3abc:	0004d605 	andeq	sp, r4, r5, lsl #12
    3ac0:	05a40700 	streq	r0, [r4, #1792]!	; 0x700
    3ac4:	39040000 	stmdbcc	r4, {}	; <UNPREDICTABLE>
    3ac8:	0000028a 	andeq	r0, r0, sl, lsl #5
    3acc:	c1070205 	tstgt	r7, r5, lsl #4
    3ad0:	07000002 	streq	r0, [r0, -r2]
    3ad4:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    3ad8:	029c4d04 	addseq	r4, ip, #4, 26	; 0x100
    3adc:	04050000 	streq	r0, [r5], #-0
    3ae0:	00016a05 	andeq	r6, r1, r5, lsl #20
    3ae4:	02200700 	eoreq	r0, r0, #0, 14
    3ae8:	4f040000 	svcmi	0x00040000
    3aec:	000002ae 	andeq	r0, r0, lr, lsr #5
    3af0:	ba070405 	blt	1c4b0c <startup-0x1fe3b4f4>
    3af4:	05000001 	streq	r0, [r0, #-1]
    3af8:	01650508 	cmneq	r5, r8, lsl #10
    3afc:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    3b00:	0001b507 	andeq	fp, r1, r7, lsl #10
    3b04:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    3b08:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3b0c:	bf070405 	svclt	0x00070405
    3b10:	07000001 	streq	r0, [r0, -r1]
    3b14:	000000ab 	andeq	r0, r0, fp, lsr #1
    3b18:	02661805 	rsbeq	r1, r6, #327680	; 0x50000
    3b1c:	d1090000 	mrsle	r0, (UNDEF: 9)
    3b20:	07000002 	streq	r0, [r0, -r2]
    3b24:	000005a6 	andeq	r0, r0, r6, lsr #11
    3b28:	027f2405 	rsbseq	r2, pc, #83886080	; 0x5000000
    3b2c:	e1090000 	mrs	r0, (UNDEF: 9)
    3b30:	07000002 	streq	r0, [r0, -r2]
    3b34:	000005be 			; <UNDEFINED> instruction: 0x000005be
    3b38:	02912c05 	addseq	r2, r1, #1280	; 0x500
    3b3c:	f1090000 			; <UNDEFINED> instruction: 0xf1090000
    3b40:	07000002 	streq	r0, [r0, -r2]
    3b44:	00000222 	andeq	r0, r0, r2, lsr #4
    3b48:	02a33005 	adceq	r3, r3, #5
    3b4c:	01090000 	mrseq	r0, (UNDEF: 9)
    3b50:	0a000003 	beq	3b64 <startup-0x1fffc49c>
    3b54:	0000030c 	andeq	r0, r0, ip, lsl #6
    3b58:	010e040b 	tsteq	lr, fp, lsl #8
    3b5c:	03d201a0 	bicseq	r0, r2, #160, 2	; 0x28
    3b60:	af0c0000 	svcge	0x000c0000
    3b64:	01000007 	tsteq	r0, r7
    3b68:	03e201a2 	mvneq	r0, #-2147483608	; 0x80000028
    3b6c:	0c000000 	stceq	0, cr0, [r0], {-0}
    3b70:	00000481 	andeq	r0, r0, r1, lsl #9
    3b74:	e701a301 	str	sl, [r1, -r1, lsl #6]
    3b78:	20000003 	andcs	r0, r0, r3
    3b7c:	0008110c 	andeq	r1, r8, ip, lsl #2
    3b80:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    3b84:	000003e2 	andeq	r0, r0, r2, ror #7
    3b88:	07c70c80 	strbeq	r0, [r7, r0, lsl #25]
    3b8c:	a5010000 	strge	r0, [r1, #-0]
    3b90:	0003e701 	andeq	lr, r3, r1, lsl #14
    3b94:	6c0da000 	stcvs	0, cr10, [sp], {-0}
    3b98:	01000008 	tsteq	r0, r8
    3b9c:	03e201a6 	mvneq	r0, #-2147483607	; 0x80000029
    3ba0:	01000000 	mrseq	r0, (UNDEF: 0)
    3ba4:	0004950d 	andeq	r9, r4, sp, lsl #10
    3ba8:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    3bac:	000003e7 	andeq	r0, r0, r7, ror #7
    3bb0:	000d0120 	andeq	r0, sp, r0, lsr #2
    3bb4:	01000008 	tsteq	r0, r8
    3bb8:	03e201a8 	mvneq	r0, #168, 2	; 0x2a
    3bbc:	01800000 	orreq	r0, r0, r0
    3bc0:	00049f0d 	andeq	r9, r4, sp, lsl #30
    3bc4:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
    3bc8:	000003e7 	andeq	r0, r0, r7, ror #7
    3bcc:	340d01a0 	strcc	r0, [sp], #-416	; 0xfffffe60
    3bd0:	01000007 	tsteq	r0, r7
    3bd4:	03e201aa 	mvneq	r0, #-2147483606	; 0x8000002a
    3bd8:	02000000 	andeq	r0, r0, #0
    3bdc:	0004a90d 	andeq	sl, r4, sp, lsl #18
    3be0:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    3be4:	000003f7 	strdeq	r0, [r0], -r7
    3be8:	490e0220 	stmdbmi	lr, {r5, r9}
    3bec:	ac010050 	stcge	0, cr0, [r1], {80}	; 0x50
    3bf0:	00041701 	andeq	r1, r4, r1, lsl #14
    3bf4:	0d030000 	stceq	0, cr0, [r3, #-0]
    3bf8:	00000545 	andeq	r0, r0, r5, asr #10
    3bfc:	1c01ad01 	stcne	13, cr10, [r1], {1}
    3c00:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    3c04:	07bd0d03 	ldreq	r0, [sp, r3, lsl #26]!
    3c08:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    3c0c:	00030c01 	andeq	r0, r3, r1, lsl #24
    3c10:	000e0000 	andeq	r0, lr, r0
    3c14:	00030c0f 	andeq	r0, r3, pc, lsl #24
    3c18:	0003e200 	andeq	lr, r3, r0, lsl #4
    3c1c:	02ca1000 	sbceq	r1, sl, #0
    3c20:	00070000 	andeq	r0, r7, r0
    3c24:	0003d209 	andeq	sp, r3, r9, lsl #4
    3c28:	03010f00 	movweq	r0, #7936	; 0x1f00
    3c2c:	03f70000 	mvnseq	r0, #0
    3c30:	ca100000 	bgt	403c38 <startup-0x1fbfc3c8>
    3c34:	17000002 	strne	r0, [r0, -r2]
    3c38:	03010f00 	movweq	r0, #7936	; 0x1f00
    3c3c:	04070000 	streq	r0, [r7], #-0
    3c40:	ca100000 	bgt	403c48 <startup-0x1fbfc3b8>
    3c44:	37000002 	strcc	r0, [r0, -r2]
    3c48:	02dc0f00 	sbcseq	r0, ip, #0, 30
    3c4c:	04170000 	ldreq	r0, [r7], #-0
    3c50:	ca100000 	bgt	403c58 <startup-0x1fbfc3a8>
    3c54:	ef000002 	svc	0x00000002
    3c58:	04070900 	streq	r0, [r7], #-2304	; 0xfffff700
    3c5c:	010f0000 	mrseq	r0, CPSR
    3c60:	2d000003 	stccs	0, cr0, [r0, #-12]
    3c64:	11000004 	tstne	r0, r4
    3c68:	000002ca 	andeq	r0, r0, sl, asr #5
    3c6c:	06000283 	streq	r0, [r0], -r3, lsl #5
    3c70:	000008ab 	andeq	r0, r0, fp, lsr #17
    3c74:	1601af01 	strne	sl, [r1], -r1, lsl #30
    3c78:	12000003 	andne	r0, r0, #3
    3c7c:	01c0018c 	biceq	r0, r0, ip, lsl #3
    3c80:	00000554 	andeq	r0, r0, r4, asr r5
    3c84:	0007a90c 	andeq	sl, r7, ip, lsl #18
    3c88:	01c20100 	biceq	r0, r2, r0, lsl #2
    3c8c:	00000311 	andeq	r0, r0, r1, lsl r3
    3c90:	07c20c00 	strbeq	r0, [r2, r0, lsl #24]
    3c94:	c3010000 	movwgt	r0, #4096	; 0x1000
    3c98:	00030c01 	andeq	r0, r3, r1, lsl #24
    3c9c:	620c0400 	andvs	r0, ip, #0, 8
    3ca0:	01000008 	tsteq	r0, r8
    3ca4:	030c01c4 	movweq	r0, #49604	; 0xc1c4
    3ca8:	0c080000 	stceq	0, cr0, [r8], {-0}
    3cac:	000007e1 	andeq	r0, r0, r1, ror #15
    3cb0:	0c01c501 	cfstr32eq	mvfx12, [r1], {1}
    3cb4:	0c000003 	stceq	0, cr0, [r0], {3}
    3cb8:	52435313 	subpl	r5, r3, #1275068416	; 0x4c000000
    3cbc:	01c60100 	biceq	r0, r6, r0, lsl #2
    3cc0:	0000030c 	andeq	r0, r0, ip, lsl #6
    3cc4:	43431310 	movtmi	r1, #13072	; 0x3310
    3cc8:	c7010052 	smlsdgt	r1, r2, r0, r0
    3ccc:	00030c01 	andeq	r0, r3, r1, lsl #24
    3cd0:	53131400 	tstpl	r3, #0, 8
    3cd4:	01005048 	tsteq	r0, r8, asr #32
    3cd8:	056401c8 	strbeq	r0, [r4, #-456]!	; 0xfffffe38
    3cdc:	0c180000 	ldceq	0, cr0, [r8], {-0}
    3ce0:	0000080b 	andeq	r0, r0, fp, lsl #16
    3ce4:	0c01c901 			; <UNDEFINED> instruction: 0x0c01c901
    3ce8:	24000003 	strcs	r0, [r0], #-3
    3cec:	0007dc0c 	andeq	sp, r7, ip, lsl #24
    3cf0:	01ca0100 	biceq	r0, sl, r0, lsl #2
    3cf4:	0000030c 	andeq	r0, r0, ip, lsl #6
    3cf8:	08a10c28 	stmiaeq	r1!, {r3, r5, sl, fp}
    3cfc:	cb010000 	blgt	43d04 <startup-0x1ffbc2fc>
    3d00:	00030c01 	andeq	r0, r3, r1, lsl #24
    3d04:	710c2c00 	tstvc	ip, r0, lsl #24
    3d08:	01000008 	tsteq	r0, r8
    3d0c:	030c01cc 	movweq	r0, #49612	; 0xc1cc
    3d10:	0c300000 	ldceq	0, cr0, [r0], #-0
    3d14:	00000792 	muleq	r0, r2, r7
    3d18:	0c01cd01 	stceq	13, cr12, [r1], {1}
    3d1c:	34000003 	strcc	r0, [r0], #-3
    3d20:	0007d70c 	andeq	sp, r7, ip, lsl #14
    3d24:	01ce0100 	biceq	r0, lr, r0, lsl #2
    3d28:	0000030c 	andeq	r0, r0, ip, lsl #6
    3d2c:	095d0c38 	ldmdbeq	sp, {r3, r4, r5, sl, fp}^
    3d30:	cf010000 	svcgt	0x00010000
    3d34:	00030c01 	andeq	r0, r3, r1, lsl #24
    3d38:	50133c00 	andspl	r3, r3, r0, lsl #24
    3d3c:	01005246 	tsteq	r0, r6, asr #4
    3d40:	057e01d0 	ldrbeq	r0, [lr, #-464]!	; 0xfffffe30
    3d44:	13400000 	movtne	r0, #0
    3d48:	00524644 	subseq	r4, r2, r4, asr #12
    3d4c:	1101d101 	tstne	r1, r1, lsl #2
    3d50:	48000003 	stmdami	r0, {r0, r1}
    3d54:	52444113 	subpl	r4, r4, #-1073741820	; 0xc0000004
    3d58:	01d20100 	bicseq	r0, r2, r0, lsl #2
    3d5c:	00000311 	andeq	r0, r0, r1, lsl r3
    3d60:	08a60c4c 	stmiaeq	r6!, {r2, r3, r6, sl, fp}
    3d64:	d3010000 	movwle	r0, #4096	; 0x1000
    3d68:	00059801 	andeq	r9, r5, r1, lsl #16
    3d6c:	670c5000 	strvs	r5, [ip, -r0]
    3d70:	01000008 	tsteq	r0, r8
    3d74:	05b201d4 	ldreq	r0, [r2, #468]!	; 0x1d4
    3d78:	0c600000 	stcleq	0, cr0, [r0], #-0
    3d7c:	00000481 	andeq	r0, r0, r1, lsl #9
    3d80:	b701d501 	strlt	sp, [r1, -r1, lsl #10]
    3d84:	74000005 	strvc	r0, [r0], #-5
    3d88:	00096f0c 	andeq	r6, r9, ip, lsl #30
    3d8c:	01d60100 	bicseq	r0, r6, r0, lsl #2
    3d90:	0000030c 	andeq	r0, r0, ip, lsl #6
    3d94:	dc0f0088 	stcle	0, cr0, [pc], {136}	; 0x88
    3d98:	64000002 	strvs	r0, [r0], #-2
    3d9c:	10000005 	andne	r0, r0, r5
    3da0:	000002ca 	andeq	r0, r0, sl, asr #5
    3da4:	5409000b 	strpl	r0, [r9], #-11
    3da8:	0f000005 	svceq	0x00000005
    3dac:	00000311 	andeq	r0, r0, r1, lsl r3
    3db0:	00000579 	andeq	r0, r0, r9, ror r5
    3db4:	0002ca10 	andeq	ip, r2, r0, lsl sl
    3db8:	0a000100 	beq	41c0 <startup-0x1fffbe40>
    3dbc:	00000569 	andeq	r0, r0, r9, ror #10
    3dc0:	00057909 	andeq	r7, r5, r9, lsl #18
    3dc4:	03110f00 	tsteq	r1, #0, 30
    3dc8:	05930000 	ldreq	r0, [r3]
    3dcc:	ca100000 	bgt	403dd4 <startup-0x1fbfc22c>
    3dd0:	03000002 	movweq	r0, #2
    3dd4:	05830a00 	streq	r0, [r3, #2560]	; 0xa00
    3dd8:	93090000 	movwls	r0, #36864	; 0x9000
    3ddc:	0f000005 	svceq	0x00000005
    3de0:	00000311 	andeq	r0, r0, r1, lsl r3
    3de4:	000005ad 	andeq	r0, r0, sp, lsr #11
    3de8:	0002ca10 	andeq	ip, r2, r0, lsl sl
    3dec:	0a000400 	beq	4df4 <startup-0x1fffb20c>
    3df0:	0000059d 	muleq	r0, sp, r5
    3df4:	0005ad09 	andeq	sl, r5, r9, lsl #26
    3df8:	03010f00 	movweq	r0, #7936	; 0x1f00
    3dfc:	05c70000 	strbeq	r0, [r7]
    3e00:	ca100000 	bgt	403e08 <startup-0x1fbfc1f8>
    3e04:	04000002 	streq	r0, [r0], #-2
    3e08:	07b40600 	ldreq	r0, [r4, r0, lsl #12]!
    3e0c:	d7010000 	strle	r0, [r1, -r0]
    3e10:	00043901 	andeq	r3, r4, r1, lsl #18
    3e14:	03010f00 	movweq	r0, #7936	; 0x1f00
    3e18:	05e30000 	strbeq	r0, [r3, #0]!
    3e1c:	ca100000 	bgt	403e24 <startup-0x1fbfc1dc>
    3e20:	07000002 	streq	r0, [r0, -r2]
    3e24:	01351400 	teqeq	r5, r0, lsl #8
    3e28:	fa010000 	blx	43e30 <startup-0x1ffbc1d0>
    3e2c:	0002fc06 	andeq	pc, r2, r6, lsl #24
    3e30:	045a1500 	ldrbeq	r1, [sl], #-1280	; 0xfffffb00
    3e34:	3b060000 	blcc	183e3c <startup-0x1fe7c1c4>
    3e38:	00000301 	andeq	r0, r0, r1, lsl #6
    3e3c:	71010716 	tstvc	r1, r6, lsl r7
    3e40:	03000002 	movweq	r0, #2
    3e44:	0615035f 			; <UNDEFINED> instruction: 0x0615035f
    3e48:	0c040000 	stceq	0, cr0, [r4], {-0}
    3e4c:	00000005 	andeq	r0, r0, r5
    3e50:	0001f504 	andeq	pc, r1, r4, lsl #10
    3e54:	06000100 	streq	r0, [r0], -r0, lsl #2
    3e58:	00000419 	andeq	r0, r0, r9, lsl r4
    3e5c:	fa035f03 	blx	dba70 <startup-0x1ff24590>
    3e60:	12000005 	andne	r0, r0, #5
    3e64:	03950310 	orrseq	r0, r5, #16, 6	; 0x40000000
    3e68:	0000065f 	andeq	r0, r0, pc, asr r6
    3e6c:	52495413 	subpl	r5, r9, #318767104	; 0x13000000
    3e70:	03970300 	orrseq	r0, r7, #0, 6
    3e74:	0000030c 	andeq	r0, r0, ip, lsl #6
    3e78:	031c0c00 	tsteq	ip, #0, 24
    3e7c:	98030000 	stmdals	r3, {}	; <UNPREDICTABLE>
    3e80:	00030c03 	andeq	r0, r3, r3, lsl #24
    3e84:	db0c0400 	blle	304e8c <startup-0x1fcfb174>
    3e88:	03000001 	movweq	r0, #1
    3e8c:	030c0399 	movweq	r0, #50073	; 0xc399
    3e90:	0c080000 	stceq	0, cr0, [r8], {-0}
    3e94:	00000439 	andeq	r0, r0, r9, lsr r4
    3e98:	0c039a03 			; <UNDEFINED> instruction: 0x0c039a03
    3e9c:	0c000003 	stceq	0, cr0, [r0], {3}
    3ea0:	054f0600 	strbeq	r0, [pc, #-1536]	; 38a8 <startup-0x1fffc758>
    3ea4:	9b030000 	blls	c3eac <startup-0x1ff3c154>
    3ea8:	00062103 	andeq	r2, r6, r3, lsl #2
    3eac:	03101200 	tsteq	r0, #0, 4
    3eb0:	06a903a1 	strteq	r0, [r9], r1, lsr #7
    3eb4:	52130000 	andspl	r0, r3, #0
    3eb8:	03005249 	movweq	r5, #585	; 0x249
    3ebc:	030c03a3 	movweq	r0, #50083	; 0xc3a3
    3ec0:	0c000000 	stceq	0, cr0, [r0], {-0}
    3ec4:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
    3ec8:	0c03a403 	cfstrseq	mvf10, [r3], {3}
    3ecc:	04000003 	streq	r0, [r0], #-3
    3ed0:	00024d0c 	andeq	r4, r2, ip, lsl #26
    3ed4:	03a50300 			; <UNDEFINED> instruction: 0x03a50300
    3ed8:	0000030c 	andeq	r0, r0, ip, lsl #6
    3edc:	05af0c08 	streq	r0, [pc, #3080]!	; 4aec <startup-0x1fffb514>
    3ee0:	a6030000 	strge	r0, [r3], -r0
    3ee4:	00030c03 	andeq	r0, r3, r3, lsl #24
    3ee8:	06000c00 	streq	r0, [r0], -r0, lsl #24
    3eec:	00000331 	andeq	r0, r0, r1, lsr r3
    3ef0:	6b03a703 	blvs	edb04 <startup-0x1ff124fc>
    3ef4:	12000006 	andne	r0, r0, #6
    3ef8:	03ad0308 			; <UNDEFINED> instruction: 0x03ad0308
    3efc:	000006d9 	ldrdeq	r0, [r0], -r9
    3f00:	31524613 	cmpcc	r2, r3, lsl r6
    3f04:	03af0300 			; <UNDEFINED> instruction: 0x03af0300
    3f08:	0000030c 	andeq	r0, r0, ip, lsl #6
    3f0c:	52461300 	subpl	r1, r6, #0, 6
    3f10:	b0030032 	andlt	r0, r3, r2, lsr r0
    3f14:	00030c03 	andeq	r0, r3, r3, lsl #24
    3f18:	06000400 	streq	r0, [r0], -r0, lsl #8
    3f1c:	000002d9 	ldrdeq	r0, [r0], -r9
    3f20:	b503b103 	strlt	fp, [r3, #-259]	; 0xfffffefd
    3f24:	0b000006 	bleq	3f44 <startup-0x1fffc0bc>
    3f28:	b7030320 	strlt	r0, [r3, -r0, lsr #6]
    3f2c:	00081b03 	andeq	r1, r8, r3, lsl #22
    3f30:	434d1300 	movtmi	r1, #54016	; 0xd300
    3f34:	b9030052 	stmdblt	r3, {r1, r4, r6}
    3f38:	00030c03 	andeq	r0, r3, r3, lsl #24
    3f3c:	4d130000 	ldcmi	0, cr0, [r3, #-0]
    3f40:	03005253 	movweq	r5, #595	; 0x253
    3f44:	030c03ba 	movweq	r0, #50106	; 0xc3ba
    3f48:	13040000 	movwne	r0, #16384	; 0x4000
    3f4c:	00525354 	subseq	r5, r2, r4, asr r3
    3f50:	0c03bb03 			; <UNDEFINED> instruction: 0x0c03bb03
    3f54:	08000003 	stmdaeq	r0, {r0, r1}
    3f58:	00021b0c 	andeq	r1, r2, ip, lsl #22
    3f5c:	03bc0300 			; <UNDEFINED> instruction: 0x03bc0300
    3f60:	0000030c 	andeq	r0, r0, ip, lsl #6
    3f64:	02d40c0c 	sbcseq	r0, r4, #12, 24	; 0xc00
    3f68:	bd030000 	stclt	0, cr0, [r3, #-0]
    3f6c:	00030c03 	andeq	r0, r3, r3, lsl #24
    3f70:	49131000 	ldmdbmi	r3, {ip}
    3f74:	03005245 	movweq	r5, #581	; 0x245
    3f78:	030c03be 	movweq	r0, #50110	; 0xc3be
    3f7c:	13140000 	tstne	r4, #0
    3f80:	00525345 	subseq	r5, r2, r5, asr #6
    3f84:	0c03bf03 	stceq	15, cr11, [r3], {3}
    3f88:	18000003 	stmdane	r0, {r0, r1}
    3f8c:	52544213 	subspl	r4, r4, #805306369	; 0x30000001
    3f90:	03c00300 	biceq	r0, r0, #0, 6
    3f94:	0000030c 	andeq	r0, r0, ip, lsl #6
    3f98:	04810c1c 	streq	r0, [r1], #3100	; 0xc1c
    3f9c:	c1030000 	mrsgt	r0, (UNDEF: 3)
    3fa0:	00081b03 	andeq	r1, r8, r3, lsl #22
    3fa4:	8b0d2000 	blhi	34bfac <startup-0x1fcb4054>
    3fa8:	03000002 	movweq	r0, #2
    3fac:	082b03c2 	stmdaeq	fp!, {r1, r6, r7, r8, r9}
    3fb0:	01800000 	orreq	r0, r0, r0
    3fb4:	0005cf0d 	andeq	ip, r5, sp, lsl #30
    3fb8:	03c30300 	biceq	r0, r3, #0, 6
    3fbc:	0000083b 	andeq	r0, r0, fp, lsr r8
    3fc0:	8b0d01b0 	blhi	344688 <startup-0x1fcbb978>
    3fc4:	03000004 	movweq	r0, #4
    3fc8:	084b03c4 	stmdaeq	fp, {r2, r6, r7, r8, r9}^
    3fcc:	01d00000 	bicseq	r0, r0, r0
    3fd0:	524d460e 	subpl	r4, sp, #14680064	; 0xe00000
    3fd4:	03c50300 	biceq	r0, r5, #0, 6
    3fd8:	0000030c 	andeq	r0, r0, ip, lsl #6
    3fdc:	170d0200 	strne	r0, [sp, -r0, lsl #4]
    3fe0:	03000003 	movweq	r0, #3
    3fe4:	030c03c6 	movweq	r0, #50118	; 0xc3c6
    3fe8:	02040000 	andeq	r0, r4, #0
    3fec:	0004950d 	andeq	r9, r4, sp, lsl #10
    3ff0:	03c70300 	biceq	r0, r7, #0, 6
    3ff4:	00000301 	andeq	r0, r0, r1, lsl #6
    3ff8:	bc0d0208 	sfmlt	f0, 4, [sp], {8}
    3ffc:	03000002 	movweq	r0, #2
    4000:	030c03c8 	movweq	r0, #50120	; 0xc3c8
    4004:	020c0000 	andeq	r0, ip, #0
    4008:	00049f0d 	andeq	r9, r4, sp, lsl #30
    400c:	03c90300 	biceq	r0, r9, #0, 6
    4010:	00000301 	andeq	r0, r0, r1, lsl #6
    4014:	440d0210 	strmi	r0, [sp], #-528	; 0xfffffdf0
    4018:	03000004 	movweq	r0, #4
    401c:	030c03ca 	movweq	r0, #50122	; 0xc3ca
    4020:	02140000 	andseq	r0, r4, #0
    4024:	0004a90d 	andeq	sl, r4, sp, lsl #18
    4028:	03cb0300 	biceq	r0, fp, #0, 6
    402c:	00000301 	andeq	r0, r0, r1, lsl #6
    4030:	450d0218 	strmi	r0, [sp, #-536]	; 0xfffffde8
    4034:	03000004 	movweq	r0, #4
    4038:	030c03cc 	movweq	r0, #50124	; 0xc3cc
    403c:	021c0000 	andseq	r0, ip, #0
    4040:	0005450d 	andeq	r4, r5, sp, lsl #10
    4044:	03cd0300 	biceq	r0, sp, #0, 6
    4048:	000005d3 	ldrdeq	r0, [r0], -r3
    404c:	fa0d0220 	blx	3448d4 <startup-0x1fcbb72c>
    4050:	03000002 	movweq	r0, #2
    4054:	085b03ce 	ldmdaeq	fp, {r1, r2, r3, r6, r7, r8, r9}^
    4058:	02400000 	subeq	r0, r0, #0
    405c:	03010f00 	movweq	r0, #7936	; 0x1f00
    4060:	082b0000 	stmdaeq	fp!, {}	; <UNPREDICTABLE>
    4064:	ca100000 	bgt	40406c <startup-0x1fbfbf94>
    4068:	57000002 	strpl	r0, [r0, -r2]
    406c:	065f0f00 	ldrbeq	r0, [pc], -r0, lsl #30
    4070:	083b0000 	ldmdaeq	fp!, {}	; <UNPREDICTABLE>
    4074:	ca100000 	bgt	40407c <startup-0x1fbfbf84>
    4078:	02000002 	andeq	r0, r0, #2
    407c:	06a90f00 	strteq	r0, [r9], r0, lsl #30
    4080:	084b0000 	stmdaeq	fp, {}^	; <UNPREDICTABLE>
    4084:	ca100000 	bgt	40408c <startup-0x1fbfbf74>
    4088:	01000002 	tsteq	r0, r2
    408c:	03010f00 	movweq	r0, #7936	; 0x1f00
    4090:	085b0000 	ldmdaeq	fp, {}^	; <UNPREDICTABLE>
    4094:	ca100000 	bgt	40409c <startup-0x1fbfbf64>
    4098:	0b000002 	bleq	40a8 <startup-0x1fffbf58>
    409c:	06d90f00 	ldrbeq	r0, [r9], r0, lsl #30
    40a0:	086b0000 	stmdaeq	fp!, {}^	; <UNPREDICTABLE>
    40a4:	ca100000 	bgt	4040ac <startup-0x1fbfbf54>
    40a8:	1b000002 	blne	40b8 <startup-0x1fffbf48>
    40ac:	00c20600 	sbceq	r0, r2, r0, lsl #12
    40b0:	cf030000 	svcgt	0x00030000
    40b4:	0006e503 	andeq	lr, r6, r3, lsl #10
    40b8:	03281200 			; <UNDEFINED> instruction: 0x03281200
    40bc:	090305c3 	stmdbeq	r3, {r0, r1, r6, r7, r8, sl}
    40c0:	7d0c0000 	stcvc	0, cr0, [ip, #-0]
    40c4:	0300000c 	movweq	r0, #12
    40c8:	030c05c5 	movweq	r0, #50629	; 0xc5c5
    40cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    40d0:	00000bc5 	andeq	r0, r0, r5, asr #23
    40d4:	0c05c603 	stceq	6, cr12, [r5], {3}
    40d8:	04000003 	streq	r0, [r0], #-3
    40dc:	000d450c 	andeq	r4, sp, ip, lsl #10
    40e0:	05c70300 	strbeq	r0, [r7, #768]	; 0x300
    40e4:	0000030c 	andeq	r0, r0, ip, lsl #6
    40e8:	0c580c08 	mrrceq	12, 0, r0, r8, cr8
    40ec:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    40f0:	00030c05 	andeq	r0, r3, r5, lsl #24
    40f4:	49130c00 	ldmdbmi	r3, {sl, fp}
    40f8:	03005244 	movweq	r5, #580	; 0x244
    40fc:	030c05c9 	movweq	r0, #50633	; 0xc5c9
    4100:	13100000 	tstne	r0, #0
    4104:	0052444f 	subseq	r4, r2, pc, asr #8
    4108:	0c05ca03 			; <UNDEFINED> instruction: 0x0c05ca03
    410c:	14000003 	strne	r0, [r0], #-3
    4110:	000df60c 	andeq	pc, sp, ip, lsl #12
    4114:	05cb0300 	strbeq	r0, [fp, #768]	; 0x300
    4118:	000002ec 	andeq	r0, r0, ip, ror #5
    411c:	0c770c18 	ldcleq	12, cr0, [r7], #-96	; 0xffffffa0
    4120:	cc030000 	stcgt	0, cr0, [r3], {-0}
    4124:	0002ec05 	andeq	lr, r2, r5, lsl #24
    4128:	ae0c1a00 	vmlage.f32	s2, s24, s0
    412c:	0300000b 	movweq	r0, #11
    4130:	030c05cd 	movweq	r0, #50637	; 0xc5cd
    4134:	131c0000 	tstne	ip, #0
    4138:	00524641 	subseq	r4, r2, r1, asr #12
    413c:	1305ce03 	movwne	ip, #24067	; 0x5e03
    4140:	20000009 	andcs	r0, r0, r9
    4144:	030c0f00 	movweq	r0, #52992	; 0xcf00
    4148:	09130000 	ldmdbeq	r3, {}	; <UNPREDICTABLE>
    414c:	ca100000 	bgt	404154 <startup-0x1fbfbeac>
    4150:	01000002 	tsteq	r0, r2
    4154:	09030900 	stmdbeq	r3, {r8, fp}
    4158:	c4060000 	strgt	r0, [r6], #-0
    415c:	0300000a 	movweq	r0, #10
    4160:	087705cf 	ldmdaeq	r7!, {r0, r1, r2, r3, r6, r7, r8, sl}^
    4164:	0c170000 	ldceq	0, cr0, [r7], {-0}
    4168:	09b13d07 	ldmibeq	r1!, {r0, r1, r2, r8, sl, fp, ip, sp}
    416c:	73180000 	tstvc	r8, #0
    4170:	07000004 	streq	r0, [r0, -r4]
    4174:	0002e13f 	andeq	lr, r2, pc, lsr r1
    4178:	cc180000 	ldcgt	0, cr0, [r8], {-0}
    417c:	07000001 	streq	r0, [r0, -r1]
    4180:	0002d142 	andeq	sp, r2, r2, asr #2
    4184:	fe180200 	cdp2	2, 1, cr0, cr8, cr0, {0}
    4188:	07000006 	streq	r0, [r0, -r6]
    418c:	0002d145 	andeq	sp, r2, r5, asr #2
    4190:	55180300 	ldrpl	r0, [r8, #-768]	; 0xfffffd00
    4194:	07000001 	streq	r0, [r0, -r1]
    4198:	0002d14a 	andeq	sp, r2, sl, asr #2
    419c:	5d180400 	cfldrspl	mvf0, [r8, #-0]
    41a0:	07000001 	streq	r0, [r0, -r1]
    41a4:	0002d14e 	andeq	sp, r2, lr, asr #2
    41a8:	81180500 	tsthi	r8, r0, lsl #10
    41ac:	07000006 	streq	r0, [r0, -r6]
    41b0:	00061551 	andeq	r1, r6, r1, asr r5
    41b4:	52180600 	andspl	r0, r8, #0, 12
    41b8:	07000002 	streq	r0, [r0, -r2]
    41bc:	00061554 	andeq	r1, r6, r4, asr r5
    41c0:	c6180700 	ldrgt	r0, [r8], -r0, lsl #14
    41c4:	07000005 	streq	r0, [r0, -r5]
    41c8:	00061557 	andeq	r1, r6, r7, asr r5
    41cc:	22180800 	andscs	r0, r8, #0, 16
    41d0:	07000007 	streq	r0, [r0, -r7]
    41d4:	0006155a 	andeq	r1, r6, sl, asr r5
    41d8:	ee180900 	vnmls.f16	s0, s16, s0
    41dc:	07000005 	streq	r0, [r0, -r5]
    41e0:	0006155d 	andeq	r1, r6, sp, asr r5
    41e4:	67180a00 	ldrvs	r0, [r8, -r0, lsl #20]
    41e8:	07000006 	streq	r0, [r0, -r6]
    41ec:	00061560 	andeq	r1, r6, r0, ror #10
    41f0:	07000b00 	streq	r0, [r0, -r0, lsl #22]
    41f4:	0000051c 	andeq	r0, r0, ip, lsl r5
    41f8:	09246207 	stmdbeq	r4!, {r0, r1, r2, r9, sp, lr}
    41fc:	0e170000 	cdpeq	0, 1, cr0, cr7, cr0, {0}
    4200:	0a316707 	beq	c5de24 <startup-0x1f3a21dc>
    4204:	fb180000 	blx	60420e <startup-0x1f9fbdf2>
    4208:	07000004 	streq	r0, [r0, -r4]
    420c:	0002e169 	andeq	lr, r2, r9, ror #2
    4210:	4a180000 	bmi	604218 <startup-0x1f9fbde8>
    4214:	07000004 	streq	r0, [r0, -r4]
    4218:	0002e16d 	andeq	lr, r2, sp, ror #2
    421c:	20180200 	andscs	r0, r8, r0, lsl #4
    4220:	07000001 	streq	r0, [r0, -r1]
    4224:	0002e171 	andeq	lr, r2, r1, ror r1
    4228:	82180400 	andshi	r0, r8, #0, 8
    422c:	07000001 	streq	r0, [r0, -r1]
    4230:	0002e176 	andeq	lr, r2, r6, ror r1
    4234:	2c180600 	ldccs	6, cr0, [r8], {-0}
    4238:	07000005 	streq	r0, [r0, -r5]
    423c:	0002e17b 	andeq	lr, r2, fp, ror r1
    4240:	08180800 	ldmdaeq	r8, {fp}
    4244:	07000004 	streq	r0, [r0, -r4]
    4248:	0002d17e 	andeq	sp, r2, lr, ror r1
    424c:	83180a00 	tsthi	r8, #0, 20
    4250:	07000005 	streq	r0, [r0, -r5]
    4254:	0002d180 	andeq	sp, r2, r0, lsl #3
    4258:	73180b00 	tstvc	r8, #0, 22
    425c:	07000005 	streq	r0, [r0, -r5]
    4260:	0002d183 	andeq	sp, r2, r3, lsl #3
    4264:	09180c00 	ldmdbeq	r8, {sl, fp}
    4268:	07000006 	streq	r0, [r0, -r6]
    426c:	00061586 	andeq	r1, r6, r6, lsl #11
    4270:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    4274:	0000035a 	andeq	r0, r0, sl, asr r3
    4278:	09bc8807 	ldmibeq	ip!, {r0, r1, r2, fp, pc}
    427c:	14170000 	ldrne	r0, [r7], #-0
    4280:	0a8d8d07 	beq	fe3676a4 <GPIO_Ports+0xde363a04>
    4284:	3e180000 	cdpcc	0, 1, cr0, cr8, cr0, {0}
    4288:	07000004 	streq	r0, [r0, -r4]
    428c:	0003018f 	andeq	r0, r3, pc, lsl #3
    4290:	f4180000 			; <UNDEFINED> instruction: 0xf4180000
    4294:	07000002 	streq	r0, [r0, -r2]
    4298:	00030192 	muleq	r3, r2, r1
    429c:	49190400 	ldmdbmi	r9, {sl}
    42a0:	07004544 	streq	r4, [r0, -r4, asr #10]
    42a4:	0002d195 	muleq	r2, r5, r1
    42a8:	52190800 	andspl	r0, r9, #0, 16
    42ac:	07005254 	smlsdeq	r0, r4, r2, r5
    42b0:	0002d199 	muleq	r2, r9, r1
    42b4:	44190900 	ldrmi	r0, [r9], #-2304	; 0xfffff700
    42b8:	0700434c 	streq	r4, [r0, -ip, asr #6]
    42bc:	0002d19d 	muleq	r2, sp, r1
    42c0:	dc180a00 			; <UNDEFINED> instruction: 0xdc180a00
    42c4:	0700000c 	streq	r0, [r0, -ip]
    42c8:	000a8da1 	andeq	r8, sl, r1, lsr #27
    42cc:	0f000b00 	svceq	0x00000b00
    42d0:	000002d1 	ldrdeq	r0, [r0], -r1
    42d4:	00000a9d 	muleq	r0, sp, sl
    42d8:	0002ca10 	andeq	ip, r2, r0, lsl sl
    42dc:	07000700 	streq	r0, [r0, -r0, lsl #14]
    42e0:	00000648 	andeq	r0, r0, r8, asr #12
    42e4:	0a3ca307 	beq	f2cf08 <startup-0x1f0d30f8>
    42e8:	14170000 	ldrne	r0, [r7], #-0
    42ec:	0b05a807 	bleq	16e310 <startup-0x1fe91cf0>
    42f0:	3e180000 	cdpcc	0, 1, cr0, cr8, cr0, {0}
    42f4:	07000004 	streq	r0, [r0, -r4]
    42f8:	000301aa 	andeq	r0, r3, sl, lsr #3
    42fc:	f4180000 			; <UNDEFINED> instruction: 0xf4180000
    4300:	07000002 	streq	r0, [r0, -r2]
    4304:	000301ad 	andeq	r0, r3, sp, lsr #3
    4308:	49190400 	ldmdbmi	r9, {sl}
    430c:	07004544 	streq	r4, [r0, -r4, asr #10]
    4310:	0002d1b0 			; <UNDEFINED> instruction: 0x0002d1b0
    4314:	52190800 	andspl	r0, r9, #0, 16
    4318:	07005254 	smlsdeq	r0, r4, r2, r5
    431c:	0002d1b4 			; <UNDEFINED> instruction: 0x0002d1b4
    4320:	44190900 	ldrmi	r0, [r9], #-2304	; 0xfffff700
    4324:	0700434c 	streq	r4, [r0, -ip, asr #6]
    4328:	0002d1b8 			; <UNDEFINED> instruction: 0x0002d1b8
    432c:	dc180a00 			; <UNDEFINED> instruction: 0xdc180a00
    4330:	0700000c 	streq	r0, [r0, -ip]
    4334:	000a8dbb 			; <UNDEFINED> instruction: 0x000a8dbb
    4338:	46190b00 	ldrmi	r0, [r9], -r0, lsl #22
    433c:	0700494d 	streq	r4, [r0, -sp, asr #18]
    4340:	0002d1be 			; <UNDEFINED> instruction: 0x0002d1be
    4344:	07001300 	streq	r1, [r0, -r0, lsl #6]
    4348:	0000000b 	andeq	r0, r0, fp
    434c:	0aa8c107 	beq	fea34770 <GPIO_Ports+0xdea30ad0>
    4350:	04170000 	ldreq	r0, [r7], #-0
    4354:	0b721a08 	bleq	1c8ab7c <startup-0x1e375484>
    4358:	c21a0000 	andsgt	r0, sl, #0
    435c:	08000009 	stmdaeq	r0, {r0, r3}
    4360:	0003011c 	andeq	r0, r3, ip, lsl r1
    4364:	18080400 	stmdane	r8, {sl}
    4368:	098e1a00 	stmibeq	lr, {r9, fp, ip}
    436c:	20080000 	andcs	r0, r8, r0
    4370:	00000301 	andeq	r0, r0, r1, lsl #6
    4374:	000e0a04 	andeq	r0, lr, r4, lsl #20
    4378:	0044491b 	subeq	r4, r4, fp, lsl r9
    437c:	03012408 	movweq	r2, #5128	; 0x1408
    4380:	07040000 	streq	r0, [r4, -r0]
    4384:	601a0007 	andsvs	r0, sl, r7
    4388:	0800000a 	stmdaeq	r0, {r1, r3}
    438c:	00030128 	andeq	r0, r3, r8, lsr #2
    4390:	06010400 	streq	r0, [r1], -r0, lsl #8
    4394:	09ac1a00 	stmibeq	ip!, {r9, fp, ip}
    4398:	2b080000 	blcs	2043a0 <startup-0x1fdfbc60>
    439c:	00000301 	andeq	r0, r0, r1, lsl #6
    43a0:	00030304 	andeq	r0, r3, r4, lsl #6
    43a4:	001f2a1a 	andseq	r2, pc, sl, lsl sl	; <UNPREDICTABLE>
    43a8:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    43ac:	04000003 	streq	r0, [r0], #-3
    43b0:	00000003 	andeq	r0, r0, r3
    43b4:	000abd07 	andeq	fp, sl, r7, lsl #26
    43b8:	102f0800 	eorne	r0, pc, r0, lsl #16
    43bc:	1700000b 	strne	r0, [r0, -fp]
    43c0:	c1340804 	teqgt	r4, r4, lsl #16
    43c4:	1a00000b 	bne	43f8 <startup-0x1fffbc08>
    43c8:	00001f29 	andeq	r1, r0, r9, lsr #30
    43cc:	03013608 	movweq	r3, #5640	; 0x1608
    43d0:	01040000 	mrseq	r0, (UNDEF: 4)
    43d4:	521b001f 	andspl	r0, fp, #31
    43d8:	08005254 	stmdaeq	r0, {r2, r4, r6, r9, ip, lr}
    43dc:	00030139 	andeq	r0, r3, r9, lsr r1
    43e0:	1e010400 	cfcpysne	mvf0, mvf1
    43e4:	44491b00 	strbmi	r1, [r9], #-2816	; 0xfffff500
    43e8:	3c080045 	stccc	0, cr0, [r8], {69}	; 0x45
    43ec:	00000301 	andeq	r0, r0, r1, lsl #6
    43f0:	001d0104 	andseq	r0, sp, r4, lsl #2
    43f4:	0044491b 	subeq	r4, r4, fp, lsl r9
    43f8:	03013e08 	movweq	r3, #7688	; 0x1e08
    43fc:	1d040000 	stcne	0, cr0, [r4, #-0]
    4400:	07000000 	streq	r0, [r0, -r0]
    4404:	00001fcb 	andeq	r1, r0, fp, asr #31
    4408:	0b7d3f08 	bleq	1f54030 <startup-0x1e0abfd0>
    440c:	04170000 	ldreq	r0, [r7], #-0
    4410:	0c053609 	stceq	6, cr3, [r5], {9}
    4414:	76180000 	ldrvc	r0, [r8], -r0
    4418:	09000008 	stmdbeq	r0, {r3}
    441c:	0002d138 	andeq	sp, r2, r8, lsr r1
    4420:	b5180000 	ldrlt	r0, [r8, #-0]
    4424:	09000008 	stmdbeq	r0, {r3}
    4428:	0002d13d 	andeq	sp, r2, sp, lsr r1
    442c:	86180100 	ldrhi	r0, [r8], -r0, lsl #2
    4430:	09000008 	stmdbeq	r0, {r3}
    4434:	0002d142 	andeq	sp, r2, r2, asr #2
    4438:	4a180200 	bmi	604c40 <startup-0x1f9fb3c0>
    443c:	09000007 	stmdbeq	r0, {r0, r1, r2}
    4440:	00061547 	andeq	r1, r6, r7, asr #10
    4444:	07000300 	streq	r0, [r0, -r0, lsl #6]
    4448:	00000739 	andeq	r0, r0, r9, lsr r7
    444c:	0bcc4a09 	bleq	ff316c78 <GPIO_Ports+0xdf312fd8>
    4450:	071c0000 	ldreq	r0, [ip, -r0]
    4454:	00027101 	andeq	r7, r2, r1, lsl #2
    4458:	36420a00 	strbcc	r0, [r2], -r0, lsl #20
    445c:	0400000c 	streq	r0, [r0], #-12
    4460:	00000c5e 	andeq	r0, r0, lr, asr ip
    4464:	0c4a0400 	cfstrdeq	mvd0, [sl], {-0}
    4468:	04010000 	streq	r0, [r1], #-0
    446c:	00000b63 	andeq	r0, r0, r3, ror #22
    4470:	0b920402 	bleq	fe485480 <GPIO_Ports+0xde4817e0>
    4474:	00030000 	andeq	r0, r3, r0
    4478:	000afd07 	andeq	pc, sl, r7, lsl #26
    447c:	10470a00 	subne	r0, r7, r0, lsl #20
    4480:	1c00000c 	stcne	0, cr0, [r0], {12}
    4484:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
    4488:	4f0a0000 	svcmi	0x000a0000
    448c:	00000c5b 	andeq	r0, r0, fp, asr ip
    4490:	000c9904 	andeq	r9, ip, r4, lsl #18
    4494:	32040000 	andcc	r0, r4, #0
    4498:	0100000b 	tsteq	r0, fp
    449c:	0bb30700 	bleq	fecc60a4 <GPIO_Ports+0xdecc2404>
    44a0:	520a0000 	andpl	r0, sl, #0
    44a4:	00000c41 	andeq	r0, r0, r1, asr #24
    44a8:	7101071c 	tstvc	r1, ip, lsl r7
    44ac:	0a000002 	beq	44bc <startup-0x1fffbb44>
    44b0:	000c8c5a 	andeq	r8, ip, sl, asr ip
    44b4:	0d240400 	cfstrseq	mvf0, [r4, #-0]
    44b8:	04000000 	streq	r0, [r0], #-0
    44bc:	00000d33 	andeq	r0, r0, r3, lsr sp
    44c0:	0ce10401 	cfstrdeq	mvd0, [r1], #4
    44c4:	04020000 	streq	r0, [r2], #-0
    44c8:	00000db7 			; <UNDEFINED> instruction: 0x00000db7
    44cc:	53070003 	movwpl	r0, #28675	; 0x7003
    44d0:	0a00000d 	beq	450c <startup-0x1fffbaf4>
    44d4:	000c665f 	andeq	r6, ip, pc, asr r6
    44d8:	01071c00 	tsteq	r7, r0, lsl #24
    44dc:	00000271 	andeq	r0, r0, r1, ror r2
    44e0:	0cb76e0a 	ldceq	14, cr6, [r7], #40	; 0x28
    44e4:	74040000 	strvc	r0, [r4], #-0
    44e8:	0000000d 	andeq	r0, r0, sp
    44ec:	000dd804 	andeq	sp, sp, r4, lsl #16
    44f0:	65040100 	strvs	r0, [r4, #-256]	; 0xffffff00
    44f4:	0200000d 	andeq	r0, r0, #13
    44f8:	0dc70700 	stcleq	7, cr0, [r7]
    44fc:	720a0000 	andvc	r0, sl, #0
    4500:	00000c97 	muleq	r0, r7, ip
    4504:	840a0817 	strhi	r0, [sl], #-2071	; 0xfffff7e9
    4508:	00000d07 	andeq	r0, r0, r7, lsl #26
    450c:	000ad818 	andeq	sp, sl, r8, lsl r8
    4510:	01860a00 	orreq	r0, r6, r0, lsl #20
    4514:	00000003 	andeq	r0, r0, r3
    4518:	000e1318 	andeq	r1, lr, r8, lsl r3
    451c:	36890a00 	strcc	r0, [r9], r0, lsl #20
    4520:	0400000c 	streq	r0, [r0], #-12
    4524:	000b7d18 	andeq	r7, fp, r8, lsl sp
    4528:	8c8c0a00 	vstmiahi	ip, {s0-s-1}
    452c:	0500000c 	streq	r0, [r0, #-12]
    4530:	000b5818 	andeq	r5, fp, r8, lsl r8
    4534:	5b8f0a00 	blpl	fe3c6d3c <GPIO_Ports+0xde3c309c>
    4538:	0600000c 	streq	r0, [r0], -ip
    453c:	000d9c18 	andeq	r9, sp, r8, lsl ip
    4540:	b7920a00 	ldrlt	r0, [r2, r0, lsl #20]
    4544:	0700000c 	streq	r0, [r0, -ip]
    4548:	0da60700 	stceq	7, cr0, [r6]
    454c:	940a0000 	strls	r0, [sl], #-0
    4550:	00000cc2 	andeq	r0, r0, r2, asr #25
    4554:	0f02041d 	svceq	0x0002041d
    4558:	00000d31 	andeq	r0, r0, r1, lsr sp
    455c:	001dfd1e 	andseq	pc, sp, lr, lsl sp	; <UNPREDICTABLE>
    4560:	31100200 	tstcc	r0, r0, lsl #4
    4564:	1e00000d 	cdpne	0, 0, cr0, cr0, cr13, {0}
    4568:	00001fc4 	andeq	r1, r0, r4, asr #31
    456c:	0bc11102 	bleq	ff04897c <GPIO_Ports+0xdf044cdc>
    4570:	0f000000 	svceq	0x00000000
    4574:	000002e1 	andeq	r0, r0, r1, ror #5
    4578:	00000d41 	andeq	r0, r0, r1, asr #26
    457c:	0002ca10 	andeq	ip, r2, r0, lsl sl
    4580:	07000100 	streq	r0, [r0, -r0, lsl #2]
    4584:	00001f4e 	andeq	r1, r0, lr, asr #30
    4588:	0d121202 	lfmeq	f1, 4, [r2, #-8]
    458c:	10170000 	andsne	r0, r7, r0
    4590:	0d851402 	cfstrseq	mvf1, [r5, #8]
    4594:	38180000 	ldmdacc	r8, {}	; <UNPREDICTABLE>
    4598:	0200001e 	andeq	r0, r0, #30
    459c:	000d9615 	andeq	r9, sp, r5, lsl r6
    45a0:	c4180000 	ldrgt	r0, [r8], #-0
    45a4:	0200001f 	andeq	r0, r0, #31
    45a8:	000bc116 	andeq	ip, fp, r6, lsl r1
    45ac:	dc180400 	cfldrsle	mvf0, [r8], {-0}
    45b0:	0200001e 	andeq	r0, r0, #30
    45b4:	000bc117 	andeq	ip, fp, r7, lsl r1
    45b8:	d5180800 	ldrle	r0, [r8, #-2048]	; 0xfffff800
    45bc:	02000001 	andeq	r0, r0, #1
    45c0:	00061518 	andeq	r1, r6, r8, lsl r5
    45c4:	1f000c00 	svcne	0x00000c00
    45c8:	00000d90 	muleq	r0, r0, sp
    45cc:	000d9020 	andeq	r9, sp, r0, lsr #32
    45d0:	04210000 	strteq	r0, [r1], #-0
    45d4:	00000b05 	andeq	r0, r0, r5, lsl #22
    45d8:	0d850421 	cfstrseq	mvf0, [r5, #132]	; 0x84
    45dc:	99070000 	stmdbls	r7, {}	; <UNPREDICTABLE>
    45e0:	0200001f 	andeq	r0, r0, #31
    45e4:	000d4c19 	andeq	r4, sp, r9, lsl ip
    45e8:	0d9c0f00 	ldceq	15, cr0, [ip]
    45ec:	0db70000 	ldceq	0, cr0, [r7]
    45f0:	ca100000 	bgt	4045f8 <startup-0x1fbfba08>
    45f4:	0d000002 	stceq	0, cr0, [r0, #-8]
    45f8:	1ed02200 	cdpne	2, 13, cr2, cr0, cr0, {0}
    45fc:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    4600:	00000da7 	andeq	r0, r0, r7, lsr #27
    4604:	3b8c0305 	blcc	fe305220 <GPIO_Ports+0xde301580>
    4608:	61222000 			; <UNDEFINED> instruction: 0x61222000
    460c:	0200001e 	andeq	r0, r0, #30
    4610:	0002d123 	andeq	sp, r2, r3, lsr #2
    4614:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
    4618:	2220003c 	eorcs	r0, r0, #60	; 0x3c
    461c:	00001ddf 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    4620:	03012402 	movweq	r2, #5122	; 0x1402
    4624:	03050000 	movweq	r0, #20480	; 0x5000
    4628:	20003b88 	andcs	r3, r0, r8, lsl #23
    462c:	001f7023 	andseq	r7, pc, r3, lsr #32
    4630:	015a0200 	cmpeq	sl, r0, lsl #4
    4634:	000002d1 	ldrdeq	r0, [r0], -r1
    4638:	20003a3a 	andcs	r3, r0, sl, lsr sl
    463c:	00000022 	andeq	r0, r0, r2, lsr #32
    4640:	0e319c01 	cdpeq	12, 3, cr9, cr1, cr1, {0}
    4644:	6d240000 	stcvs	0, cr0, [r4, #-0]
    4648:	02006773 	andeq	r6, r0, #30146560	; 0x1cc0000
    464c:	0d90015a 	ldfeqs	f0, [r0, #360]	; 0x168
    4650:	91020000 	mrsls	r0, (UNDEF: 2)
    4654:	6469256c 	strbtvs	r2, [r9], #-1388	; 0xfffffa94
    4658:	015b0200 	cmpeq	fp, r0, lsl #4
    465c:	000002e1 	andeq	r0, r0, r1, ror #5
    4660:	26729102 	ldrbtcs	r9, [r2], -r2, lsl #2
    4664:	00000a28 	andeq	r0, r0, r8, lsr #20
    4668:	31015c02 	tstcc	r1, r2, lsl #24
    466c:	0200000e 	andeq	r0, r0, #14
    4670:	21007491 			; <UNDEFINED> instruction: 0x21007491
    4674:	0002d104 	andeq	sp, r2, r4, lsl #2
    4678:	1fdf2300 	svcne	0x00df2300
    467c:	47020000 	strmi	r0, [r2, -r0]
    4680:	0002d101 	andeq	sp, r2, r1, lsl #2
    4684:	003a0000 	eorseq	r0, sl, r0
    4688:	00003a20 	andeq	r3, r0, r0, lsr #20
    468c:	bb9c0100 	bllt	fe704a94 <GPIO_Ports+0xde700df4>
    4690:	2400000e 	strcs	r0, [r0], #-14
    4694:	0067736d 	rsbeq	r7, r7, sp, ror #6
    4698:	90014702 	andls	r4, r1, r2, lsl #14
    469c:	0200000d 	andeq	r0, r0, #13
    46a0:	98276c91 	stmdals	r7!, {r0, r4, r7, sl, fp, sp, lr}
    46a4:	02000009 	andeq	r0, r0, #9
    46a8:	0e310147 	rsfeqsm	f0, f1, f7
    46ac:	91020000 	mrsls	r0, (UNDEF: 2)
    46b0:	09a22768 	stmibeq	r2!, {r3, r5, r6, r8, r9, sl, sp}
    46b4:	47020000 	strmi	r0, [r2, -r0]
    46b8:	000e3101 	andeq	r3, lr, r1, lsl #2
    46bc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    46c0:	0009b427 	andeq	fp, r9, r7, lsr #8
    46c4:	01470200 	mrseq	r0, (UNDEF: 103)
    46c8:	00000ebb 			; <UNDEFINED> instruction: 0x00000ebb
    46cc:	27609102 	strbcs	r9, [r0, -r2, lsl #2]!
    46d0:	000009bb 			; <UNDEFINED> instruction: 0x000009bb
    46d4:	bb014702 	bllt	562e4 <startup-0x1ffa9d1c>
    46d8:	0200000e 	andeq	r0, r0, #14
    46dc:	4d270091 	stcmi	0, cr0, [r7, #-580]!	; 0xfffffdbc
    46e0:	0200000a 	andeq	r0, r0, #10
    46e4:	0e310147 	rsfeqsm	f0, f1, f7
    46e8:	91020000 	mrsls	r0, (UNDEF: 2)
    46ec:	0a282604 	beq	a0df04 <startup-0x1f5f20fc>
    46f0:	48020000 	stmdami	r2, {}	; <UNPREDICTABLE>
    46f4:	000e3101 	andeq	r3, lr, r1, lsl #2
    46f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    46fc:	e1042100 	mrs	r2, (UNDEF: 20)
    4700:	28000002 	stmdacs	r0, {r1}
    4704:	00001de9 	andeq	r1, r0, r9, ror #27
    4708:	02d1ec02 	sbcseq	lr, r1, #512	; 0x200
    470c:	38440000 	stmdacc	r4, {}^	; <UNPREDICTABLE>
    4710:	01bc2000 			; <UNDEFINED> instruction: 0x01bc2000
    4714:	9c010000 	stcls	0, cr0, [r1], {-0}
    4718:	00000f14 	andeq	r0, r0, r4, lsl pc
    471c:	001eb229 	andseq	fp, lr, r9, lsr #4
    4720:	b1ed0200 	mvnlt	r0, r0, lsl #4
    4724:	02000009 	andeq	r0, r0, #9
    4728:	1d295891 	stcne	8, cr5, [r9, #-580]!	; 0xfffffdbc
    472c:	0200001e 	andeq	r0, r0, #30
    4730:	000c05ee 	andeq	r0, ip, lr, ror #11
    4734:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    4738:	001f8629 	andseq	r8, pc, r9, lsr #12
    473c:	07ef0200 	strbeq	r0, [pc, r0, lsl #4]!
    4740:	0200000d 	andeq	r0, r0, #13
    4744:	a2264c91 	eorge	r4, r6, #37120	; 0x9100
    4748:	0200001e 	andeq	r0, r0, #30
    474c:	02d10137 	sbcseq	r0, r1, #-1073741811	; 0xc000000d
    4750:	91020000 	mrsls	r0, (UNDEF: 2)
    4754:	402a0067 	eormi	r0, sl, r7, rrx
    4758:	0200001e 	andeq	r0, r0, #30
    475c:	0037acdb 	ldrsbteq	sl, [r7], -fp
    4760:	00009820 	andeq	r9, r0, r0, lsr #16
    4764:	5a9c0100 	bpl	fe704b6c <GPIO_Ports+0xde700ecc>
    4768:	2b00000f 	blcs	47ac <startup-0x1fffb854>
    476c:	200037b8 			; <UNDEFINED> instruction: 0x200037b8
    4770:	00000076 	andeq	r0, r0, r6, ror r0
    4774:	001faa29 	andseq	sl, pc, r9, lsr #20
    4778:	d1de0200 	bicsle	r0, lr, r0, lsl #4
    477c:	02000002 	andeq	r0, r0, #2
    4780:	d22b7791 	eorle	r7, fp, #38010880	; 0x2440000
    4784:	4a200037 	bmi	804868 <startup-0x1f7fb798>
    4788:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    478c:	00000aa6 	andeq	r0, r0, r6, lsr #21
    4790:	0b72e202 	bleq	1cbcfa0 <startup-0x1e343060>
    4794:	91020000 	mrsls	r0, (UNDEF: 2)
    4798:	00000070 	andeq	r0, r0, r0, ror r0
    479c:	001ff62a 	andseq	pc, pc, sl, lsr #12
    47a0:	78bd0200 	ldmfdvc	sp!, {r9}
    47a4:	34200036 	strtcc	r0, [r0], #-54	; 0xffffffca
    47a8:	01000001 	tsteq	r0, r1
    47ac:	000fad9c 	muleq	pc, ip, sp	; <UNPREDICTABLE>
    47b0:	44492c00 	strbmi	r2, [r9], #-3072	; 0xfffff400
    47b4:	e1bd0200 			; <UNDEFINED> instruction: 0xe1bd0200
    47b8:	02000002 	andeq	r0, r0, #2
    47bc:	922b6691 	eorls	r6, fp, #152043520	; 0x9100000
    47c0:	fc200036 	stc2	0, cr0, [r0], #-216	; 0xffffff28
    47c4:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    47c8:	00001faa 	andeq	r1, r0, sl, lsr #31
    47cc:	02d1c102 	sbcseq	ip, r1, #-2147483648	; 0x80000000
    47d0:	91020000 	mrsls	r0, (UNDEF: 2)
    47d4:	36b02b6f 	ldrtcc	r2, [r0], pc, ror #22
    47d8:	00c82000 	sbceq	r2, r8, r0
    47dc:	a6290000 	strtge	r0, [r9], -r0
    47e0:	0200000a 	andeq	r0, r0, #10
    47e4:	000b72c5 	andeq	r7, fp, r5, asr #5
    47e8:	68910200 	ldmvs	r1, {r9}
    47ec:	2a000000 	bcs	47f4 <startup-0x1fffb80c>
    47f0:	00001e30 	andeq	r1, r0, r0, lsr lr
    47f4:	360ca802 	strcc	sl, [ip], -r2, lsl #16
    47f8:	006c2000 	rsbeq	r2, ip, r0
    47fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4800:	00000fdb 	ldrdeq	r0, [r0], -fp
    4804:	00362e2b 	eorseq	r2, r6, fp, lsr #28
    4808:	00003820 	andeq	r3, r0, r0, lsr #16
    480c:	1e5b2900 	vnmlsne.f16	s5, s22, s0	; <UNPREDICTABLE>
    4810:	ae020000 	cdpge	0, 0, cr0, cr2, cr0, {0}
    4814:	00000b05 	andeq	r0, r0, r5, lsl #22
    4818:	00649102 	rsbeq	r9, r4, r2, lsl #2
    481c:	1e4c2d00 	cdpne	13, 4, cr2, cr12, cr0, {0}
    4820:	8a020000 	bhi	84828 <startup-0x1ff7b7d8>
    4824:	000002d1 	ldrdeq	r0, [r0], -r1
    4828:	20003562 	andcs	r3, r0, r2, ror #10
    482c:	000000aa 	andeq	r0, r0, sl, lsr #1
    4830:	101b9c01 	andsne	r9, fp, r1, lsl #24
    4834:	6d2c0000 	stcvs	0, cr0, [ip, #-0]
    4838:	02006773 	andeq	r6, r0, #30146560	; 0x1cc0000
    483c:	00101b8a 	andseq	r1, r0, sl, lsl #23
    4840:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4844:	0035722b 	eorseq	r7, r5, fp, lsr #4
    4848:	00007220 	andeq	r7, r0, r0, lsr #4
    484c:	0aa62900 	beq	fe98ec54 <GPIO_Ports+0xde98afb4>
    4850:	8e020000 	cdphi	0, 0, cr0, cr2, cr0, {0}
    4854:	00000b72 	andeq	r0, r0, r2, ror fp
    4858:	00749102 	rsbseq	r9, r4, r2, lsl #2
    485c:	9d042100 	stflss	f2, [r4, #-0]
    4860:	2a00000a 	bcs	4890 <startup-0x1fffb770>
    4864:	00001f32 	andeq	r1, r0, r2, lsr pc
    4868:	35308102 	ldrcc	r8, [r0, #-258]!	; 0xfffffefe
    486c:	00322000 	eorseq	r2, r2, r0
    4870:	9c010000 	stcls	0, cr0, [r1], {-0}
    4874:	0000104f 	andeq	r1, r0, pc, asr #32
    4878:	0035362b 	eorseq	r3, r5, fp, lsr #12
    487c:	00002420 	andeq	r2, r0, r0, lsr #8
    4880:	1faa2900 	svcne	0x00aa2900
    4884:	82020000 	andhi	r0, r2, #0
    4888:	000002d1 	ldrdeq	r0, [r0], -r1
    488c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4890:	1e052a00 	vmlane.f32	s4, s10, s0
    4894:	73020000 	movwvc	r0, #8192	; 0x2000
    4898:	200034e0 	andcs	r3, r0, r0, ror #9
    489c:	00000050 	andeq	r0, r0, r0, asr r0
    48a0:	108b9c01 	addne	r9, fp, r1, lsl #24
    48a4:	aa2e0000 	bge	b848ac <startup-0x1f47b754>
    48a8:	0200001f 	andeq	r0, r0, #31
    48ac:	0002d173 	andeq	sp, r2, r3, ror r1
    48b0:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    48b4:	0034f42b 	eorseq	pc, r4, fp, lsr #8
    48b8:	00002e20 	andeq	r2, r0, r0, lsr #28
    48bc:	1e8a2900 	vdivne.f16	s4, s20, s0	; <UNPREDICTABLE>
    48c0:	78020000 	stmdavc	r2, {}	; <UNPREDICTABLE>
    48c4:	00000a31 	andeq	r0, r0, r1, lsr sl
    48c8:	00689102 	rsbeq	r9, r8, r2, lsl #2
    48cc:	1fb02d00 	svcne	0x00b02d00
    48d0:	4b020000 	blmi	848d8 <startup-0x1ff7b728>
    48d4:	000002d1 	ldrdeq	r0, [r0], -r1
    48d8:	200033b4 			; <UNDEFINED> instruction: 0x200033b4
    48dc:	0000012c 	andeq	r0, r0, ip, lsr #2
    48e0:	10ff9c01 	rscsne	r9, pc, r1, lsl #24
    48e4:	f22e0000 	vhadd.s32	d0, d14, d0
    48e8:	0200001d 	andeq	r0, r0, #29
    48ec:	000d964b 	andeq	r9, sp, fp, asr #12
    48f0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    48f4:	001fc42e 	andseq	ip, pc, lr, lsr #8
    48f8:	ff4b0200 			; <UNDEFINED> instruction: 0xff4b0200
    48fc:	02000010 	andeq	r0, r0, #16
    4900:	dc2e6091 	stcle	0, cr6, [lr], #-580	; 0xfffffdbc
    4904:	0200001e 	andeq	r0, r0, #30
    4908:	0010ff4b 	andseq	pc, r0, fp, asr #30
    490c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    4910:	0033c02b 	eorseq	ip, r3, fp, lsr #32
    4914:	00010220 	andeq	r0, r1, r0, lsr #4
    4918:	1faa2900 	svcne	0x00aa2900
    491c:	4c020000 	stcmi	0, cr0, [r2], {-0}
    4920:	000002d1 	ldrdeq	r0, [r0], -r1
    4924:	2b6f9102 	blcs	1be8d34 <startup-0x1e4172cc>
    4928:	200033e6 	andcs	r3, r0, r6, ror #7
    492c:	0000007c 	andeq	r0, r0, ip, ror r0
    4930:	000aa629 	andeq	sl, sl, r9, lsr #12
    4934:	72510200 	subsvc	r0, r1, #0, 4
    4938:	0200000b 	andeq	r0, r0, #11
    493c:	00006891 	muleq	r0, r1, r8
    4940:	c1042100 	mrsgt	r2, (UNDEF: 20)
    4944:	2a00000b 	bcs	4978 <startup-0x1fffb688>
    4948:	00001e71 	andeq	r1, r0, r1, ror lr
    494c:	331c3202 	tstcc	ip, #536870912	; 0x20000000
    4950:	00982000 	addseq	r2, r8, r0
    4954:	9c010000 	stcls	0, cr0, [r1], {-0}
    4958:	00001153 	andeq	r1, r0, r3, asr r1
    495c:	001faa2e 	andseq	sl, pc, lr, lsr #20
    4960:	d1320200 	teqle	r2, r0, lsl #4
    4964:	02000002 	andeq	r0, r0, #2
    4968:	c4295f91 	strtgt	r5, [r9], #-3985	; 0xfffff06f
    496c:	0200001e 	andeq	r0, r0, #30
    4970:	000d4136 	andeq	r4, sp, r6, lsr r1
    4974:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4978:	001fd529 	andseq	sp, pc, r9, lsr #10
    497c:	41360200 	teqmi	r6, r0, lsl #4
    4980:	0200000d 	andeq	r0, r0, #13
    4984:	8a297091 	bhi	a60bd0 <startup-0x1f59f430>
    4988:	0200001e 	andeq	r0, r0, #30
    498c:	000a313b 	andeq	r3, sl, fp, lsr r1
    4990:	60910200 	addsvs	r0, r1, r0, lsl #4
    4994:	1f5a2f00 	svcne	0x005a2f00
    4998:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
    499c:	000002d1 	ldrdeq	r0, [r0], -r1
    49a0:	200032d8 	ldrdcs	r3, [r0], -r8
    49a4:	00000044 	andeq	r0, r0, r4, asr #32
    49a8:	11859c01 	orrne	r9, r5, r1, lsl #24
    49ac:	de2b0000 	cdple	0, 2, cr0, cr11, cr0, {0}
    49b0:	30200032 	eorcc	r0, r0, r2, lsr r0
    49b4:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    49b8:	00001faa 	andeq	r1, r0, sl, lsr #31
    49bc:	02d12902 	sbcseq	r2, r1, #32768	; 0x8000
    49c0:	91020000 	mrsls	r0, (UNDEF: 2)
    49c4:	30000077 	andcc	r0, r0, r7, ror r0
    49c8:	00001bd5 	ldrdeq	r1, [r0], -r5
    49cc:	78065d01 	stmdavc	r6, {r0, r8, sl, fp, ip, lr}
    49d0:	60200032 	eorvs	r0, r0, r2, lsr r0
    49d4:	01000000 	mrseq	r0, (UNDEF: 0)
    49d8:	1b6e279c 	blne	1b8e850 <startup-0x1e4717b0>
    49dc:	5d010000 	stcpl	0, cr0, [r1, #-0]
    49e0:	00025a06 	andeq	r5, r2, r6, lsl #20
    49e4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    49e8:	00085927 	andeq	r5, r8, r7, lsr #18
    49ec:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    49f0:	00000301 	andeq	r0, r0, r1, lsl #6
    49f4:	00709102 	rsbseq	r9, r0, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	35050000 	strcc	r0, [r5, #-0]
  38:	00134900 	andseq	r4, r3, r0, lsl #18
  3c:	01010600 	tsteq	r1, r0, lsl #12
  40:	13011349 	movwne	r1, #4937	; 0x1349
  44:	21070000 	mrscs	r0, (UNDEF: 7)
  48:	2f134900 	svccs	0x00134900
  4c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
  50:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  58:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  5c:	0000193c 	andeq	r1, r0, ip, lsr r9
  60:	03003409 	movweq	r3, #1033	; 0x409
  64:	3b0b3a0e 	blcc	2ce8a4 <startup-0x1fd3175c>
  68:	3f13490b 	svccc	0x0013490b
  6c:	00193c19 	andseq	r3, r9, r9, lsl ip
  70:	01040a00 	tsteq	r4, r0, lsl #20
  74:	0b0b0b3e 	bleq	2c2d74 <startup-0x1fd3d28c>
  78:	0b3a1349 	bleq	e84da4 <startup-0x1f17b25c>
  7c:	1301053b 	movwne	r0, #5435	; 0x153b
  80:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
  84:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  88:	0c00000b 	stceq	0, cr0, [r0], {11}
  8c:	08030028 	stmdaeq	r3, {r3, r5}
  90:	00000b1c 	andeq	r0, r0, ip, lsl fp
  94:	0300160d 	movweq	r1, #1549	; 0x60d
  98:	3b0b3a0e 	blcc	2ce8d8 <startup-0x1fd31728>
  9c:	00134905 	andseq	r4, r3, r5, lsl #18
  a0:	01130e00 	tsteq	r3, r0, lsl #28
  a4:	0b3a0b0b 	bleq	e82cd8 <startup-0x1f17d328>
  a8:	1301053b 	movwne	r0, #5435	; 0x153b
  ac:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; b4 <startup-0x1fffff4c>
  b0:	3a080300 	bcc	200cb8 <startup-0x1fdff348>
  b4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  b8:	000b3813 	andeq	r3, fp, r3, lsl r8
  bc:	000d1000 	andeq	r1, sp, r0
  c0:	0b3a0e03 	bleq	e838d4 <startup-0x1f17c72c>
  c4:	1349053b 	movtne	r0, #38203	; 0x953b
  c8:	00000b38 	andeq	r0, r0, r8, lsr fp
  cc:	0b011311 	bleq	44d18 <startup-0x1ffbb2e8>
  d0:	3b0b3a05 	blcc	2ce8ec <startup-0x1fd31714>
  d4:	00130105 	andseq	r0, r3, r5, lsl #2
  d8:	000d1200 	andeq	r1, sp, r0, lsl #4
  dc:	0b3a0e03 	bleq	e838f0 <startup-0x1f17c710>
  e0:	1349053b 	movtne	r0, #38203	; 0x953b
  e4:	00000538 	andeq	r0, r0, r8, lsr r5
  e8:	03000d13 	movweq	r0, #3347	; 0xd13
  ec:	3b0b3a08 	blcc	2ce914 <startup-0x1fd316ec>
  f0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  f4:	14000005 	strne	r0, [r0], #-5
  f8:	0b0b0113 	bleq	2c054c <startup-0x1fd3fab4>
  fc:	0b3b0b3a 	bleq	ec2dec <startup-0x1f13d214>
 100:	00001301 	andeq	r1, r0, r1, lsl #6
 104:	03000d15 	movweq	r0, #3349	; 0xd15
 108:	3b0b3a0e 	blcc	2ce948 <startup-0x1fd316b8>
 10c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 110:	1600000b 	strne	r0, [r0], -fp
 114:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 118:	0b3b0b3a 	bleq	ec2e08 <startup-0x1f13d1f8>
 11c:	0b381349 	bleq	e04e48 <startup-0x1f1fb1b8>
 120:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 124:	3a0e0301 	bcc	380d30 <startup-0x1fc7f2d0>
 128:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 12c:	11134919 	tstne	r3, r9, lsl r9
 130:	40061201 	andmi	r1, r6, r1, lsl #4
 134:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 138:	00001301 	andeq	r1, r0, r1, lsl #6
 13c:	03000518 	movweq	r0, #1304	; 0x518
 140:	3b0b3a0e 	blcc	2ce980 <startup-0x1fd31680>
 144:	02134905 	andseq	r4, r3, #81920	; 0x14000
 148:	19000018 	stmdbne	r0, {r3, r4}
 14c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 150:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 154:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 158:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 15c:	03193f01 	tsteq	r9, #1, 30
 160:	3b0b3a0e 	blcc	2ce9a0 <startup-0x1fd31660>
 164:	11192705 	tstne	r9, r5, lsl #14
 168:	40061201 	andmi	r1, r6, r1, lsl #4
 16c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 170:	00001301 	andeq	r1, r0, r1, lsl #6
 174:	0b000f1b 	bleq	3de8 <startup-0x1fffc218>
 178:	0013490b 	andseq	r4, r3, fp, lsl #18
 17c:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
 180:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 184:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 188:	13491927 	movtne	r1, #39207	; 0x9927
 18c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 190:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 194:	00130119 	andseq	r0, r3, r9, lsl r1
 198:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
 19c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1a4:	13491927 	movtne	r1, #39207	; 0x9927
 1a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1ac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1b0:	00130119 	andseq	r0, r3, r9, lsl r1
 1b4:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
 1b8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1bc:	0b3b0b3a 	bleq	ec2eac <startup-0x1f13d154>
 1c0:	13491927 	movtne	r1, #39207	; 0x9927
 1c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1cc:	00130119 	andseq	r0, r3, r9, lsl r1
 1d0:	00051f00 	andeq	r1, r5, r0, lsl #30
 1d4:	0b3a0e03 	bleq	e839e8 <startup-0x1f17c618>
 1d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1dc:	00001802 	andeq	r1, r0, r2, lsl #16
 1e0:	03003420 	movweq	r3, #1056	; 0x420
 1e4:	3b0b3a0e 	blcc	2cea24 <startup-0x1fd315dc>
 1e8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1ec:	21000018 	tstcs	r0, r8, lsl r0
 1f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1f4:	0b3a0e03 	bleq	e83a08 <startup-0x1f17c5f8>
 1f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 200:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 204:	00000019 	andeq	r0, r0, r9, lsl r0
 208:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 20c:	030b130e 	movweq	r1, #45838	; 0xb30e
 210:	110e1b0e 	tstne	lr, lr, lsl #22
 214:	10061201 	andne	r1, r6, r1, lsl #4
 218:	02000017 	andeq	r0, r0, #23
 21c:	0b0b0024 	bleq	2c02b4 <startup-0x1fd3fd4c>
 220:	0e030b3e 	vmoveq.16	d3[0], r0
 224:	16030000 	strne	r0, [r3], -r0
 228:	3a0e0300 	bcc	380e30 <startup-0x1fc7f1d0>
 22c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 230:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 234:	0b0b0024 	bleq	2c02cc <startup-0x1fd3fd34>
 238:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 23c:	35050000 	strcc	r0, [r5, #-0]
 240:	00134900 	andseq	r4, r3, r0, lsl #18
 244:	00260600 	eoreq	r0, r6, r0, lsl #12
 248:	00001349 	andeq	r1, r0, r9, asr #6
 24c:	0b011307 	bleq	44e70 <startup-0x1ffbb190>
 250:	3b0b3a05 	blcc	2cea6c <startup-0x1fd31594>
 254:	00130105 	andseq	r0, r3, r5, lsl #2
 258:	000d0800 	andeq	r0, sp, r0, lsl #16
 25c:	0b3a0e03 	bleq	e83a70 <startup-0x1f17c590>
 260:	1349053b 	movtne	r0, #38203	; 0x953b
 264:	00000b38 	andeq	r0, r0, r8, lsr fp
 268:	03000d09 	movweq	r0, #3337	; 0xd09
 26c:	3b0b3a0e 	blcc	2ceaac <startup-0x1fd31554>
 270:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 274:	0a000005 	beq	290 <startup-0x1ffffd70>
 278:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 27c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 280:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 284:	010b0000 	mrseq	r0, (UNDEF: 11)
 288:	01134901 	tsteq	r3, r1, lsl #18
 28c:	0c000013 	stceq	0, cr0, [r0], {19}
 290:	13490021 	movtne	r0, #36897	; 0x9021
 294:	00000b2f 	andeq	r0, r0, pc, lsr #22
 298:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
 29c:	00052f13 	andeq	r2, r5, r3, lsl pc
 2a0:	00160e00 	andseq	r0, r6, r0, lsl #28
 2a4:	0b3a0e03 	bleq	e83ab8 <startup-0x1f17c548>
 2a8:	1349053b 	movtne	r0, #38203	; 0x953b
 2ac:	130f0000 	movwne	r0, #61440	; 0xf000
 2b0:	3a0b0b01 	bcc	2c2ebc <startup-0x1fd3d144>
 2b4:	01053b0b 	tsteq	r5, fp, lsl #22
 2b8:	10000013 	andne	r0, r0, r3, lsl r0
 2bc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 2c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2c4:	0b381349 	bleq	e04ff0 <startup-0x1f1fb010>
 2c8:	34110000 	ldrcc	r0, [r1], #-0
 2cc:	3a0e0300 	bcc	380ed4 <startup-0x1fc7f12c>
 2d0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 2d4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 2d8:	12000019 	andne	r0, r0, #25
 2dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2e0:	0b3b0b3a 	bleq	ec2fd0 <startup-0x1f13d030>
 2e4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 2e8:	0000193c 	andeq	r1, r0, ip, lsr r9
 2ec:	3e010413 	cfmvdlrcc	mvd1, r0
 2f0:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 2f4:	3b0b3a13 	blcc	2ceb48 <startup-0x1fd314b8>
 2f8:	00130105 	andseq	r0, r3, r5, lsl #2
 2fc:	00281400 	eoreq	r1, r8, r0, lsl #8
 300:	0b1c0e03 	bleq	703b14 <startup-0x1f8fc4ec>
 304:	13150000 	tstne	r5, #0
 308:	3a0b0b01 	bcc	2c2f14 <startup-0x1fd3d0ec>
 30c:	010b3b0b 	tsteq	fp, fp, lsl #22
 310:	16000013 			; <UNDEFINED> instruction: 0x16000013
 314:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 318:	0b3b0b3a 	bleq	ec3008 <startup-0x1f13cff8>
 31c:	0b381349 	bleq	e05048 <startup-0x1f1fafb8>
 320:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 324:	03193f01 	tsteq	r9, #1, 30
 328:	3b0b3a0e 	blcc	2ceb68 <startup-0x1fd31498>
 32c:	1119270b 	tstne	r9, fp, lsl #14
 330:	40061201 	andmi	r1, r6, r1, lsl #4
 334:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 338:	00001301 	andeq	r1, r0, r1, lsl #6
 33c:	03000518 	movweq	r0, #1304	; 0x518
 340:	3b0b3a0e 	blcc	2ceb80 <startup-0x1fd31480>
 344:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 348:	19000018 	stmdbne	r0, {r3, r4}
 34c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 350:	0b3b0b3a 	bleq	ec3040 <startup-0x1f13cfc0>
 354:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 358:	0f1a0000 	svceq	0x001a0000
 35c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 360:	1b000013 	blne	3b4 <startup-0x1ffffc4c>
 364:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 368:	0b3a0e03 	bleq	e83b7c <startup-0x1f17c484>
 36c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 370:	06120111 			; <UNDEFINED> instruction: 0x06120111
 374:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 378:	00000019 	andeq	r0, r0, r9, lsl r0
 37c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 380:	030b130e 	movweq	r1, #45838	; 0xb30e
 384:	110e1b0e 	tstne	lr, lr, lsl #22
 388:	10061201 	andne	r1, r6, r1, lsl #4
 38c:	02000017 	andeq	r0, r0, #23
 390:	0b0b0024 	bleq	2c0428 <startup-0x1fd3fbd8>
 394:	0e030b3e 	vmoveq.16	d3[0], r0
 398:	16030000 	strne	r0, [r3], -r0
 39c:	3a0e0300 	bcc	380fa4 <startup-0x1fc7f05c>
 3a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3a4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 3a8:	0b0b0024 	bleq	2c0440 <startup-0x1fd3fbc0>
 3ac:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 3b0:	35050000 	strcc	r0, [r5, #-0]
 3b4:	00134900 	andseq	r4, r3, r0, lsl #18
 3b8:	00340600 	eorseq	r0, r4, r0, lsl #12
 3bc:	0b3a0e03 	bleq	e83bd0 <startup-0x1f17c430>
 3c0:	1349053b 	movtne	r0, #38203	; 0x953b
 3c4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 3c8:	34070000 	strcc	r0, [r7], #-0
 3cc:	3a0e0300 	bcc	380fd4 <startup-0x1fc7f02c>
 3d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3d4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 3d8:	08000019 	stmdaeq	r0, {r0, r3, r4}
 3dc:	0b0b0113 	bleq	2c0830 <startup-0x1fd3f7d0>
 3e0:	0b3b0b3a 	bleq	ec30d0 <startup-0x1f13cf30>
 3e4:	00001301 	andeq	r1, r0, r1, lsl #6
 3e8:	03000d09 	movweq	r0, #3337	; 0xd09
 3ec:	3b0b3a0e 	blcc	2cec2c <startup-0x1fd313d4>
 3f0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 3f4:	0a00000b 	beq	428 <startup-0x1ffffbd8>
 3f8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 3fc:	0b3b0b3a 	bleq	ec30ec <startup-0x1f13cf14>
 400:	0b381349 	bleq	e0512c <startup-0x1f1faed4>
 404:	010b0000 	mrseq	r0, (UNDEF: 11)
 408:	01134901 	tsteq	r3, r1, lsl #18
 40c:	0c000013 	stceq	0, cr0, [r0], {19}
 410:	13490021 	movtne	r0, #36897	; 0x9021
 414:	00000b2f 	andeq	r0, r0, pc, lsr #22
 418:	03000d0d 	movweq	r0, #3341	; 0xd0d
 41c:	3b0b3a0e 	blcc	2cec5c <startup-0x1fd313a4>
 420:	0b13490b 	bleq	4d2854 <startup-0x1fb2d7ac>
 424:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
 428:	000b380b 	andeq	r3, fp, fp, lsl #16
 42c:	000d0e00 	andeq	r0, sp, r0, lsl #28
 430:	0b3a0803 	bleq	e82444 <startup-0x1f17dbbc>
 434:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 438:	0b0d0b0b 	bleq	34306c <startup-0x1fcbcf94>
 43c:	0b380b0c 	bleq	e03074 <startup-0x1f1fcf8c>
 440:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 444:	03193f01 	tsteq	r9, #1, 30
 448:	3b0b3a0e 	blcc	2cec88 <startup-0x1fd31378>
 44c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 450:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 454:	97184006 	ldrls	r4, [r8, -r6]
 458:	13011942 	movwne	r1, #6466	; 0x1942
 45c:	05100000 	ldreq	r0, [r0, #-0]
 460:	3a080300 	bcc	201068 <startup-0x1fdfef98>
 464:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 468:	00180213 	andseq	r0, r8, r3, lsl r2
 46c:	00051100 	andeq	r1, r5, r0, lsl #2
 470:	0b3a0e03 	bleq	e83c84 <startup-0x1f17c37c>
 474:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 478:	00001802 	andeq	r1, r0, r2, lsl #16
 47c:	03003412 	movweq	r3, #1042	; 0x412
 480:	3b0b3a0e 	blcc	2cecc0 <startup-0x1fd31340>
 484:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 488:	13000018 	movwne	r0, #24
 48c:	0b0b000f 	bleq	2c04d0 <startup-0x1fd3fb30>
 490:	00001349 	andeq	r1, r0, r9, asr #6
 494:	3f012e14 	svccc	0x00012e14
 498:	3a0e0319 	bcc	381104 <startup-0x1fc7eefc>
 49c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4a0:	11134919 	tstne	r3, r9, lsl r9
 4a4:	40061201 	andmi	r1, r6, r1, lsl #4
 4a8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4ac:	01000000 	mrseq	r0, (UNDEF: 0)
 4b0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 4b4:	0e030b13 	vmoveq.32	d3[0], r0
 4b8:	01110e1b 	tsteq	r1, fp, lsl lr
 4bc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 4c0:	24020000 	strcs	r0, [r2], #-0
 4c4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4c8:	000e030b 	andeq	r0, lr, fp, lsl #6
 4cc:	00160300 	andseq	r0, r6, r0, lsl #6
 4d0:	0b3a0e03 	bleq	e83ce4 <startup-0x1f17c31c>
 4d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4d8:	24040000 	strcs	r0, [r4], #-0
 4dc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4e0:	0008030b 	andeq	r0, r8, fp, lsl #6
 4e4:	00350500 	eorseq	r0, r5, r0, lsl #10
 4e8:	00001349 	andeq	r1, r0, r9, asr #6
 4ec:	03003406 	movweq	r3, #1030	; 0x406
 4f0:	3b0b3a0e 	blcc	2ced30 <startup-0x1fd312d0>
 4f4:	3f134905 	svccc	0x00134905
 4f8:	00193c19 	andseq	r3, r9, r9, lsl ip
 4fc:	00340700 	eorseq	r0, r4, r0, lsl #14
 500:	0b3a0e03 	bleq	e83d14 <startup-0x1f17c2ec>
 504:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 508:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 50c:	04080000 	streq	r0, [r8], #-0
 510:	0b0b3e01 	bleq	2cfd1c <startup-0x1fd302e4>
 514:	3a13490b 	bcc	4d2948 <startup-0x1fb2d6b8>
 518:	01053b0b 	tsteq	r5, fp, lsl #22
 51c:	09000013 	stmdbeq	r0, {r0, r1, r4}
 520:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 524:	00000b1c 	andeq	r0, r0, ip, lsl fp
 528:	0b01130a 	bleq	45158 <startup-0x1ffbaea8>
 52c:	3b0b3a0b 	blcc	2ced60 <startup-0x1fd312a0>
 530:	00130105 	andseq	r0, r3, r5, lsl #2
 534:	000d0b00 	andeq	r0, sp, r0, lsl #22
 538:	0b3a0e03 	bleq	e83d4c <startup-0x1f17c2b4>
 53c:	1349053b 	movtne	r0, #38203	; 0x953b
 540:	00000b38 	andeq	r0, r0, r8, lsr fp
 544:	03000d0c 	movweq	r0, #3340	; 0xd0c
 548:	3b0b3a08 	blcc	2ced70 <startup-0x1fd31290>
 54c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 550:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 554:	13490101 	movtne	r0, #37121	; 0x9101
 558:	00001301 	andeq	r1, r0, r1, lsl #6
 55c:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 560:	000b2f13 	andeq	r2, fp, r3, lsl pc
 564:	00160f00 	andseq	r0, r6, r0, lsl #30
 568:	0b3a0e03 	bleq	e83d7c <startup-0x1f17c284>
 56c:	1349053b 	movtne	r0, #38203	; 0x953b
 570:	04100000 	ldreq	r0, [r0], #-0
 574:	0b0b3e01 	bleq	2cfd80 <startup-0x1fd30280>
 578:	3a13490b 	bcc	4d29ac <startup-0x1fb2d654>
 57c:	010b3b0b 	tsteq	fp, fp, lsl #22
 580:	11000013 	tstne	r0, r3, lsl r0
 584:	0b0b0113 	bleq	2c09d8 <startup-0x1fd3f628>
 588:	0b3b0b3a 	bleq	ec3278 <startup-0x1f13cd88>
 58c:	00001301 	andeq	r1, r0, r1, lsl #6
 590:	03000d12 	movweq	r0, #3346	; 0xd12
 594:	3b0b3a0e 	blcc	2cedd4 <startup-0x1fd3122c>
 598:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 59c:	1300000b 	movwne	r0, #11
 5a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5a4:	0b3a0e03 	bleq	e83db8 <startup-0x1f17c248>
 5a8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 5ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5b0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5b4:	00130119 	andseq	r0, r3, r9, lsl r1
 5b8:	00051400 	andeq	r1, r5, r0, lsl #8
 5bc:	0b3a0e03 	bleq	e83dd0 <startup-0x1f17c230>
 5c0:	1349053b 	movtne	r0, #38203	; 0x953b
 5c4:	00001802 	andeq	r1, r0, r2, lsl #16
 5c8:	03003415 	movweq	r3, #1045	; 0x415
 5cc:	3b0b3a0e 	blcc	2cee0c <startup-0x1fd311f4>
 5d0:	02134905 	andseq	r4, r3, #81920	; 0x14000
 5d4:	16000018 			; <UNDEFINED> instruction: 0x16000018
 5d8:	0b0b000f 	bleq	2c061c <startup-0x1fd3f9e4>
 5dc:	00001349 	andeq	r1, r0, r9, asr #6
 5e0:	3f012e17 	svccc	0x00012e17
 5e4:	3a0e0319 	bcc	381250 <startup-0x1fc7edb0>
 5e8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 5ec:	11134919 	tstne	r3, r9, lsl r9
 5f0:	40061201 	andmi	r1, r6, r1, lsl #4
 5f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 5f8:	00001301 	andeq	r1, r0, r1, lsl #6
 5fc:	03003418 	movweq	r3, #1048	; 0x418
 600:	3b0b3a08 	blcc	2cee28 <startup-0x1fd311d8>
 604:	02134905 	andseq	r4, r3, #81920	; 0x14000
 608:	19000018 	stmdbne	r0, {r3, r4}
 60c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 610:	0b3a0e03 	bleq	e83e24 <startup-0x1f17c1dc>
 614:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 618:	06120111 			; <UNDEFINED> instruction: 0x06120111
 61c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 620:	00130119 	andseq	r0, r3, r9, lsl r1
 624:	00051a00 	andeq	r1, r5, r0, lsl #20
 628:	0b3a0e03 	bleq	e83e3c <startup-0x1f17c1c4>
 62c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 630:	00001802 	andeq	r1, r0, r2, lsl #16
 634:	0300341b 	movweq	r3, #1051	; 0x41b
 638:	3b0b3a0e 	blcc	2cee78 <startup-0x1fd31188>
 63c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 640:	1c000018 	stcne	0, cr0, [r0], {24}
 644:	08030034 	stmdaeq	r3, {r2, r4, r5}
 648:	0b3b0b3a 	bleq	ec3338 <startup-0x1f13ccc8>
 64c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 650:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 654:	03193f01 	tsteq	r9, #1, 30
 658:	3b0b3a0e 	blcc	2cee98 <startup-0x1fd31168>
 65c:	1119270b 	tstne	r9, fp, lsl #14
 660:	40061201 	andmi	r1, r6, r1, lsl #4
 664:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 668:	01000000 	mrseq	r0, (UNDEF: 0)
 66c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 670:	0e030b13 	vmoveq.32	d3[0], r0
 674:	01110e1b 	tsteq	r1, fp, lsl lr
 678:	17100612 			; <UNDEFINED> instruction: 0x17100612
 67c:	24020000 	strcs	r0, [r2], #-0
 680:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 684:	000e030b 	andeq	r0, lr, fp, lsl #6
 688:	00160300 	andseq	r0, r6, r0, lsl #6
 68c:	0b3a0e03 	bleq	e83ea0 <startup-0x1f17c160>
 690:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 694:	24040000 	strcs	r0, [r4], #-0
 698:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 69c:	0008030b 	andeq	r0, r8, fp, lsl #6
 6a0:	00350500 	eorseq	r0, r5, r0, lsl #10
 6a4:	00001349 	andeq	r1, r0, r9, asr #6
 6a8:	03003406 	movweq	r3, #1030	; 0x406
 6ac:	3b0b3a0e 	blcc	2ceeec <startup-0x1fd31114>
 6b0:	3f134905 	svccc	0x00134905
 6b4:	00193c19 	andseq	r3, r9, r9, lsl ip
 6b8:	00340700 	eorseq	r0, r4, r0, lsl #14
 6bc:	0b3a0e03 	bleq	e83ed0 <startup-0x1f17c130>
 6c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6c4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 6c8:	04080000 	streq	r0, [r8], #-0
 6cc:	0b0b3e01 	bleq	2cfed8 <startup-0x1fd30128>
 6d0:	3a13490b 	bcc	4d2b04 <startup-0x1fb2d4fc>
 6d4:	01053b0b 	tsteq	r5, fp, lsl #22
 6d8:	09000013 	stmdbeq	r0, {r0, r1, r4}
 6dc:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 6e0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 6e4:	0300280a 	movweq	r2, #2058	; 0x80a
 6e8:	000b1c08 	andeq	r1, fp, r8, lsl #24
 6ec:	00160b00 	andseq	r0, r6, r0, lsl #22
 6f0:	0b3a0e03 	bleq	e83f04 <startup-0x1f17c0fc>
 6f4:	1349053b 	movtne	r0, #38203	; 0x953b
 6f8:	130c0000 	movwne	r0, #49152	; 0xc000
 6fc:	3a0b0b01 	bcc	2c3308 <startup-0x1fd3ccf8>
 700:	01053b0b 	tsteq	r5, fp, lsl #22
 704:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 708:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 70c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 710:	0b381349 	bleq	e0543c <startup-0x1f1fabc4>
 714:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 718:	03193f01 	tsteq	r9, #1, 30
 71c:	3b0b3a0e 	blcc	2cef5c <startup-0x1fd310a4>
 720:	11192705 	tstne	r9, r5, lsl #14
 724:	40061201 	andmi	r1, r6, r1, lsl #4
 728:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 72c:	00001301 	andeq	r1, r0, r1, lsl #6
 730:	0300050f 	movweq	r0, #1295	; 0x50f
 734:	3b0b3a0e 	blcc	2cef74 <startup-0x1fd3108c>
 738:	02134905 	andseq	r4, r3, #81920	; 0x14000
 73c:	10000018 	andne	r0, r0, r8, lsl r0
 740:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 744:	0b3a0e03 	bleq	e83f58 <startup-0x1f17c0a8>
 748:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 74c:	01111349 	tsteq	r1, r9, asr #6
 750:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 754:	01194297 			; <UNDEFINED> instruction: 0x01194297
 758:	11000013 	tstne	r0, r3, lsl r0
 75c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 760:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 764:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 768:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 76c:	03193f00 	tsteq	r9, #0, 30
 770:	3b0b3a0e 	blcc	2cefb0 <startup-0x1fd31050>
 774:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 778:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 77c:	97184006 	ldrls	r4, [r8, -r6]
 780:	00001942 	andeq	r1, r0, r2, asr #18
 784:	3f012e13 	svccc	0x00012e13
 788:	3a0e0319 	bcc	3813f4 <startup-0x1fc7ec0c>
 78c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 790:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 794:	97184006 	ldrls	r4, [r8, -r6]
 798:	13011942 	movwne	r1, #6466	; 0x1942
 79c:	05140000 	ldreq	r0, [r4, #-0]
 7a0:	3a0e0300 	bcc	3813a8 <startup-0x1fc7ec58>
 7a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7a8:	00180213 	andseq	r0, r8, r3, lsl r2
 7ac:	002e1500 	eoreq	r1, lr, r0, lsl #10
 7b0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 7b4:	0b3b0b3a 	bleq	ec34a4 <startup-0x1f13cb5c>
 7b8:	01111927 	tsteq	r1, r7, lsr #18
 7bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7c0:	00194296 	mulseq	r9, r6, r2
 7c4:	11010000 	mrsne	r0, (UNDEF: 1)
 7c8:	130e2501 	movwne	r2, #58625	; 0xe501
 7cc:	1b0e030b 	blne	381400 <startup-0x1fc7ec00>
 7d0:	1117550e 	tstne	r7, lr, lsl #10
 7d4:	00171001 	andseq	r1, r7, r1
 7d8:	01040200 	mrseq	r0, R12_usr
 7dc:	0b3e0e03 	bleq	f83ff0 <startup-0x1f07c010>
 7e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 7e4:	0b3b0b3a 	bleq	ec34d4 <startup-0x1f13cb2c>
 7e8:	00001301 	andeq	r1, r0, r1, lsl #6
 7ec:	03002803 	movweq	r2, #2051	; 0x803
 7f0:	000d1c0e 	andeq	r1, sp, lr, lsl #24
 7f4:	00280400 	eoreq	r0, r8, r0, lsl #8
 7f8:	0b1c0e03 	bleq	70400c <startup-0x1f8fbff4>
 7fc:	24050000 	strcs	r0, [r5], #-0
 800:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 804:	000e030b 	andeq	r0, lr, fp, lsl #6
 808:	00160600 	andseq	r0, r6, r0, lsl #12
 80c:	0b3a0e03 	bleq	e84020 <startup-0x1f17bfe0>
 810:	1349053b 	movtne	r0, #38203	; 0x953b
 814:	16070000 	strne	r0, [r7], -r0
 818:	3a0e0300 	bcc	381420 <startup-0x1fc7ebe0>
 81c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 820:	08000013 	stmdaeq	r0, {r0, r1, r4}
 824:	0b0b0024 	bleq	2c08bc <startup-0x1fd3f744>
 828:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 82c:	35090000 	strcc	r0, [r9, #-0]
 830:	00134900 	andseq	r4, r3, r0, lsl #18
 834:	00260a00 	eoreq	r0, r6, r0, lsl #20
 838:	00001349 	andeq	r1, r0, r9, asr #6
 83c:	0b01130b 	bleq	45470 <startup-0x1ffbab90>
 840:	3b0b3a05 	blcc	2cf05c <startup-0x1fd30fa4>
 844:	00130105 	andseq	r0, r3, r5, lsl #2
 848:	000d0c00 	andeq	r0, sp, r0, lsl #24
 84c:	0b3a0e03 	bleq	e84060 <startup-0x1f17bfa0>
 850:	1349053b 	movtne	r0, #38203	; 0x953b
 854:	00000b38 	andeq	r0, r0, r8, lsr fp
 858:	03000d0d 	movweq	r0, #3341	; 0xd0d
 85c:	3b0b3a0e 	blcc	2cf09c <startup-0x1fd30f64>
 860:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 864:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
 868:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 86c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 870:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 874:	010f0000 	mrseq	r0, CPSR
 878:	01134901 	tsteq	r3, r1, lsl #18
 87c:	10000013 	andne	r0, r0, r3, lsl r0
 880:	13490021 	movtne	r0, #36897	; 0x9021
 884:	00000b2f 	andeq	r0, r0, pc, lsr #22
 888:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
 88c:	00052f13 	andeq	r2, r5, r3, lsl pc
 890:	01131200 	tsteq	r3, r0, lsl #4
 894:	0b3a0b0b 	bleq	e834c8 <startup-0x1f17cb38>
 898:	1301053b 	movwne	r0, #5435	; 0x153b
 89c:	0d130000 	ldceq	0, cr0, [r3, #-0]
 8a0:	3a080300 	bcc	2014a8 <startup-0x1fdfeb58>
 8a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 8a8:	000b3813 	andeq	r3, fp, r3, lsl r8
 8ac:	00341400 	eorseq	r1, r4, r0, lsl #8
 8b0:	0b3a0e03 	bleq	e840c4 <startup-0x1f17bf3c>
 8b4:	1349053b 	movtne	r0, #38203	; 0x953b
 8b8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 8bc:	34150000 	ldrcc	r0, [r5], #-0
 8c0:	3a0e0300 	bcc	3814c8 <startup-0x1fc7eb38>
 8c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8c8:	3c193f13 	ldccc	15, cr3, [r9], {19}
 8cc:	16000019 			; <UNDEFINED> instruction: 0x16000019
 8d0:	0b3e0104 	bleq	f80ce8 <startup-0x1f07f318>
 8d4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 8d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 8dc:	00001301 	andeq	r1, r0, r1, lsl #6
 8e0:	03002817 	movweq	r2, #2071	; 0x817
 8e4:	000b1c08 	andeq	r1, fp, r8, lsl #24
 8e8:	01131800 	tsteq	r3, r0, lsl #16
 8ec:	0b3a0b0b 	bleq	e83520 <startup-0x1f17cae0>
 8f0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 8f4:	0d190000 	ldceq	0, cr0, [r9, #-0]
 8f8:	3a0e0300 	bcc	381500 <startup-0x1fc7eb00>
 8fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 900:	000b3813 	andeq	r3, fp, r3, lsl r8
 904:	00341a00 	eorseq	r1, r4, r0, lsl #20
 908:	0b3a0e03 	bleq	e8411c <startup-0x1f17bee4>
 90c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 910:	00001802 	andeq	r1, r0, r2, lsl #16
 914:	3e01041b 	cfmvdlrcc	mvd1, r0
 918:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 91c:	3b0b3a13 	blcc	2cf170 <startup-0x1fd30e90>
 920:	0013010b 	andseq	r0, r3, fp, lsl #2
 924:	01131c00 	tsteq	r3, r0, lsl #24
 928:	0b0b0e03 	bleq	2c413c <startup-0x1fd3bec4>
 92c:	0b3b0b3a 	bleq	ec361c <startup-0x1f13c9e4>
 930:	00001301 	andeq	r1, r0, r1, lsl #6
 934:	03000d1d 	movweq	r0, #3357	; 0xd1d
 938:	3b0b3a08 	blcc	2cf160 <startup-0x1fd30ea0>
 93c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 940:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
 944:	0b0b000f 	bleq	2c0988 <startup-0x1fd3f678>
 948:	00001349 	andeq	r1, r0, r9, asr #6
 94c:	0300341f 	movweq	r3, #1055	; 0x41f
 950:	3b0b3a0e 	blcc	2cf190 <startup-0x1fd30e70>
 954:	3f13490b 	svccc	0x0013490b
 958:	00180219 	andseq	r0, r8, r9, lsl r2
 95c:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
 960:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 964:	0b3b0b3a 	bleq	ec3654 <startup-0x1f13c9ac>
 968:	01111927 	tsteq	r1, r7, lsr #18
 96c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 970:	01194296 			; <UNDEFINED> instruction: 0x01194296
 974:	21000013 	tstcs	r0, r3, lsl r0
 978:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 97c:	0b3b0b3a 	bleq	ec366c <startup-0x1f13c994>
 980:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 984:	0b220000 	bleq	88098c <startup-0x1f77f674>
 988:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 98c:	23000006 	movwcs	r0, #6
 990:	0111010b 	tsteq	r1, fp, lsl #2
 994:	13010612 	movwne	r0, #5650	; 0x1612
 998:	34240000 	strtcc	r0, [r4], #-0
 99c:	3a080300 	bcc	2015a4 <startup-0x1fdfea5c>
 9a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 9a4:	00180213 	andseq	r0, r8, r3, lsl r2
 9a8:	00212500 	eoreq	r2, r1, r0, lsl #10
 9ac:	182f1349 	stmdane	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 9b0:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
 9b4:	03193f00 	tsteq	r9, #0, 30
 9b8:	3b0b3a0e 	blcc	2cf1f8 <startup-0x1fd30e08>
 9bc:	1119270b 	tstne	r9, fp, lsl #14
 9c0:	40061201 	andmi	r1, r6, r1, lsl #4
 9c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 9c8:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
 9cc:	03193f01 	tsteq	r9, #1, 30
 9d0:	3b0b3a0e 	blcc	2cf210 <startup-0x1fd30df0>
 9d4:	1119270b 	tstne	r9, fp, lsl #14
 9d8:	40061201 	andmi	r1, r6, r1, lsl #4
 9dc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 9e0:	00001301 	andeq	r1, r0, r1, lsl #6
 9e4:	3f002e28 	svccc	0x00002e28
 9e8:	3a0e0319 	bcc	381654 <startup-0x1fc7e9ac>
 9ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 9f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 9f4:	97184006 	ldrls	r4, [r8, -r6]
 9f8:	00001942 	andeq	r1, r0, r2, asr #18
 9fc:	3f012e29 	svccc	0x00012e29
 a00:	3a0e0319 	bcc	38166c <startup-0x1fc7e994>
 a04:	110b3b0b 	tstne	fp, fp, lsl #22
 a08:	40061201 	andmi	r1, r6, r1, lsl #4
 a0c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 a10:	00001301 	andeq	r1, r0, r1, lsl #6
 a14:	3f012e2a 	svccc	0x00012e2a
 a18:	3a0e0319 	bcc	381684 <startup-0x1fc7e97c>
 a1c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 a20:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 a24:	97184006 	ldrls	r4, [r8, -r6]
 a28:	13011942 	movwne	r1, #6466	; 0x1942
 a2c:	052b0000 	streq	r0, [fp, #-0]!
 a30:	3a0e0300 	bcc	381638 <startup-0x1fc7e9c8>
 a34:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 a38:	00180213 	andseq	r0, r8, r3, lsl r2
 a3c:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
 a40:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 a44:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 a48:	13491927 	movtne	r1, #39207	; 0x9927
 a4c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 a50:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 a54:	00130119 	andseq	r0, r3, r9, lsl r1
 a58:	00342d00 	eorseq	r2, r4, r0, lsl #26
 a5c:	0b3a0e03 	bleq	e84270 <startup-0x1f17bd90>
 a60:	1349053b 	movtne	r0, #38203	; 0x953b
 a64:	00001802 	andeq	r1, r0, r2, lsl #16
 a68:	3f002e2e 	svccc	0x00002e2e
 a6c:	3a0e0319 	bcc	3816d8 <startup-0x1fc7e928>
 a70:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 a74:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 a78:	97184006 	ldrls	r4, [r8, -r6]
 a7c:	00001942 	andeq	r1, r0, r2, asr #18
 a80:	0300342f 	movweq	r3, #1071	; 0x42f
 a84:	3b0b3a08 	blcc	2cf2ac <startup-0x1fd30d54>
 a88:	02134905 	andseq	r4, r3, #81920	; 0x14000
 a8c:	30000018 	andcc	r0, r0, r8, lsl r0
 a90:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 a94:	0b3a0e03 	bleq	e842a8 <startup-0x1f17bd58>
 a98:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 a9c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 aa0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 aa4:	00130119 	andseq	r0, r3, r9, lsl r1
 aa8:	002e3100 	eoreq	r3, lr, r0, lsl #2
 aac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 ab0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 ab4:	13491927 	movtne	r1, #39207	; 0x9927
 ab8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 abc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 ac0:	32000019 	andcc	r0, r0, #25
 ac4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 ac8:	0b3a0e03 	bleq	e842dc <startup-0x1f17bd24>
 acc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 ad0:	01111349 	tsteq	r1, r9, asr #6
 ad4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 ad8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 adc:	33000013 	movwcc	r0, #19
 ae0:	0e03012e 	adfeqsp	f0, f3, #0.5
 ae4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 ae8:	13491927 	movtne	r1, #39207	; 0x9927
 aec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 af0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 af4:	00130119 	andseq	r0, r3, r9, lsl r1
 af8:	012e3400 			; <UNDEFINED> instruction: 0x012e3400
 afc:	0b3a0e03 	bleq	e84310 <startup-0x1f17bcf0>
 b00:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 b04:	06120111 			; <UNDEFINED> instruction: 0x06120111
 b08:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 b0c:	00000019 	andeq	r0, r0, r9, lsl r0
 b10:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 b14:	030b130e 	movweq	r1, #45838	; 0xb30e
 b18:	110e1b0e 	tstne	lr, lr, lsl #22
 b1c:	10061201 	andne	r1, r6, r1, lsl #4
 b20:	02000017 	andeq	r0, r0, #23
 b24:	0b0b0024 	bleq	2c0bbc <startup-0x1fd3f444>
 b28:	0e030b3e 	vmoveq.16	d3[0], r0
 b2c:	16030000 	strne	r0, [r3], -r0
 b30:	3a0e0300 	bcc	381738 <startup-0x1fc7e8c8>
 b34:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b38:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 b3c:	0b0b0024 	bleq	2c0bd4 <startup-0x1fd3f42c>
 b40:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 b44:	13050000 	movwne	r0, #20480	; 0x5000
 b48:	3a0b0b01 	bcc	2c3754 <startup-0x1fd3c8ac>
 b4c:	010b3b0b 	tsteq	fp, fp, lsl #22
 b50:	06000013 			; <UNDEFINED> instruction: 0x06000013
 b54:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 b58:	0b3b0b3a 	bleq	ec3848 <startup-0x1f13c7b8>
 b5c:	0b381349 	bleq	e05888 <startup-0x1f1fa778>
 b60:	0d070000 	stceq	0, cr0, [r7, #-0]
 b64:	3a080300 	bcc	20176c <startup-0x1fdfe894>
 b68:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b6c:	000b3813 	andeq	r3, fp, r3, lsl r8
 b70:	01010800 	tsteq	r1, r0, lsl #16
 b74:	13011349 	movwne	r1, #4937	; 0x1349
 b78:	21090000 	mrscs	r0, (UNDEF: 9)
 b7c:	2f134900 	svccs	0x00134900
 b80:	0a00000b 	beq	bb4 <startup-0x1ffff44c>
 b84:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b88:	0b3a0e03 	bleq	e8439c <startup-0x1f17bc64>
 b8c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b90:	01111349 	tsteq	r1, r9, asr #6
 b94:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 b98:	01194297 			; <UNDEFINED> instruction: 0x01194297
 b9c:	0b000013 	bleq	bf0 <startup-0x1ffff410>
 ba0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 ba4:	0b3b0b3a 	bleq	ec3894 <startup-0x1f13c76c>
 ba8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 bac:	0f0c0000 	svceq	0x000c0000
 bb0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 bb4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 bb8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 bbc:	0b3a0e03 	bleq	e843d0 <startup-0x1f17bc30>
 bc0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 bc4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 bc8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 bcc:	00130119 	andseq	r0, r3, r9, lsl r1
 bd0:	00340e00 	eorseq	r0, r4, r0, lsl #28
 bd4:	0b3a0e03 	bleq	e843e8 <startup-0x1f17bc18>
 bd8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 bdc:	00001802 	andeq	r1, r0, r2, lsl #16
 be0:	3f012e0f 	svccc	0x00012e0f
 be4:	3a0e0319 	bcc	381850 <startup-0x1fc7e7b0>
 be8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 bec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 bf0:	97184006 	ldrls	r4, [r8, -r6]
 bf4:	00001942 	andeq	r1, r0, r2, asr #18
 bf8:	01110100 	tsteq	r1, r0, lsl #2
 bfc:	0b130e25 	bleq	4c4498 <startup-0x1fb3bb68>
 c00:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 c04:	06120111 			; <UNDEFINED> instruction: 0x06120111
 c08:	00001710 	andeq	r1, r0, r0, lsl r7
 c0c:	03010402 	movweq	r0, #5122	; 0x1402
 c10:	0b0b3e0e 	bleq	2d0450 <startup-0x1fd2fbb0>
 c14:	3a13490b 	bcc	4d3048 <startup-0x1fb2cfb8>
 c18:	010b3b0b 	tsteq	fp, fp, lsl #22
 c1c:	03000013 	movweq	r0, #19
 c20:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 c24:	00000d1c 	andeq	r0, r0, ip, lsl sp
 c28:	03002804 	movweq	r2, #2052	; 0x804
 c2c:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 c30:	00240500 	eoreq	r0, r4, r0, lsl #10
 c34:	0b3e0b0b 	bleq	f83868 <startup-0x1f07c798>
 c38:	00000e03 	andeq	r0, r0, r3, lsl #28
 c3c:	03001606 	movweq	r1, #1542	; 0x606
 c40:	3b0b3a0e 	blcc	2cf480 <startup-0x1fd30b80>
 c44:	00134905 	andseq	r4, r3, r5, lsl #18
 c48:	00160700 	andseq	r0, r6, r0, lsl #14
 c4c:	0b3a0e03 	bleq	e84460 <startup-0x1f17bba0>
 c50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 c54:	24080000 	strcs	r0, [r8], #-0
 c58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 c5c:	0008030b 	andeq	r0, r8, fp, lsl #6
 c60:	00350900 	eorseq	r0, r5, r0, lsl #18
 c64:	00001349 	andeq	r1, r0, r9, asr #6
 c68:	4900260a 	stmdbmi	r0, {r1, r3, r9, sl, sp}
 c6c:	0b000013 	bleq	cc0 <startup-0x1ffff340>
 c70:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
 c74:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 c78:	00001301 	andeq	r1, r0, r1, lsl #6
 c7c:	03000d0c 	movweq	r0, #3340	; 0xd0c
 c80:	3b0b3a0e 	blcc	2cf4c0 <startup-0x1fd30b40>
 c84:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 c88:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 c8c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 c90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 c94:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 c98:	0d0e0000 	stceq	0, cr0, [lr, #-0]
 c9c:	3a080300 	bcc	2018a4 <startup-0x1fdfe75c>
 ca0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 ca4:	00053813 	andeq	r3, r5, r3, lsl r8
 ca8:	01010f00 	tsteq	r1, r0, lsl #30
 cac:	13011349 	movwne	r1, #4937	; 0x1349
 cb0:	21100000 	tstcs	r0, r0
 cb4:	2f134900 	svccs	0x00134900
 cb8:	1100000b 	tstne	r0, fp
 cbc:	13490021 	movtne	r0, #36897	; 0x9021
 cc0:	0000052f 	andeq	r0, r0, pc, lsr #10
 cc4:	0b011312 	bleq	45914 <startup-0x1ffba6ec>
 cc8:	3b0b3a0b 	blcc	2cf4fc <startup-0x1fd30b04>
 ccc:	00130105 	andseq	r0, r3, r5, lsl #2
 cd0:	000d1300 	andeq	r1, sp, r0, lsl #6
 cd4:	0b3a0803 	bleq	e82ce8 <startup-0x1f17d318>
 cd8:	1349053b 	movtne	r0, #38203	; 0x953b
 cdc:	00000b38 	andeq	r0, r0, r8, lsr fp
 ce0:	03003414 	movweq	r3, #1044	; 0x414
 ce4:	3b0b3a0e 	blcc	2cf524 <startup-0x1fd30adc>
 ce8:	3f134905 	svccc	0x00134905
 cec:	00193c19 	andseq	r3, r9, r9, lsl ip
 cf0:	00341500 	eorseq	r1, r4, r0, lsl #10
 cf4:	0b3a0e03 	bleq	e84508 <startup-0x1f17baf8>
 cf8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 cfc:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 d00:	04160000 	ldreq	r0, [r6], #-0
 d04:	0b0b3e01 	bleq	2d0510 <startup-0x1fd2faf0>
 d08:	3a13490b 	bcc	4d313c <startup-0x1fb2cec4>
 d0c:	01053b0b 	tsteq	r5, fp, lsl #22
 d10:	17000013 	smladne	r0, r3, r0, r0
 d14:	0b0b0113 	bleq	2c1168 <startup-0x1fd3ee98>
 d18:	0b3b0b3a 	bleq	ec3a08 <startup-0x1f13c5f8>
 d1c:	00001301 	andeq	r1, r0, r1, lsl #6
 d20:	03000d18 	movweq	r0, #3352	; 0xd18
 d24:	3b0b3a0e 	blcc	2cf564 <startup-0x1fd30a9c>
 d28:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 d2c:	1900000b 	stmdbne	r0, {r0, r1, r3}
 d30:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 d34:	0b3b0b3a 	bleq	ec3a24 <startup-0x1f13c5dc>
 d38:	0b381349 	bleq	e05a64 <startup-0x1f1fa59c>
 d3c:	0d1a0000 	ldceq	0, cr0, [sl, #-0]
 d40:	3a0e0300 	bcc	381948 <startup-0x1fc7e6b8>
 d44:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 d48:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
 d4c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
 d50:	1b00000b 	blne	d84 <startup-0x1ffff27c>
 d54:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 d58:	0b3b0b3a 	bleq	ec3a48 <startup-0x1f13c5b8>
 d5c:	0b0b1349 	bleq	2c5a88 <startup-0x1fd3a578>
 d60:	0b0c0b0d 	bleq	30399c <startup-0x1fcfc664>
 d64:	00000b38 	andeq	r0, r0, r8, lsr fp
 d68:	3e01041c 	cfmvdlrcc	mvd1, r0
 d6c:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 d70:	3b0b3a13 	blcc	2cf5c4 <startup-0x1fd30a3c>
 d74:	0013010b 	andseq	r0, r3, fp, lsl #2
 d78:	01171d00 	tsteq	r7, r0, lsl #26
 d7c:	0b3a0b0b 	bleq	e839b0 <startup-0x1f17c650>
 d80:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 d84:	0d1e0000 	ldceq	0, cr0, [lr, #-0]
 d88:	3a0e0300 	bcc	381990 <startup-0x1fc7e670>
 d8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 d90:	1f000013 	svcne	0x00000013
 d94:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 d98:	00001301 	andeq	r1, r0, r1, lsl #6
 d9c:	49000520 	stmdbmi	r0, {r5, r8, sl}
 da0:	21000013 	tstcs	r0, r3, lsl r0
 da4:	0b0b000f 	bleq	2c0de8 <startup-0x1fd3f218>
 da8:	00001349 	andeq	r1, r0, r9, asr #6
 dac:	03003422 	movweq	r3, #1058	; 0x422
 db0:	3b0b3a0e 	blcc	2cf5f0 <startup-0x1fd30a10>
 db4:	3f13490b 	svccc	0x0013490b
 db8:	00180219 	andseq	r0, r8, r9, lsl r2
 dbc:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
 dc0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 dc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 dc8:	13491927 	movtne	r1, #39207	; 0x9927
 dcc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 dd0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 dd4:	00130119 	andseq	r0, r3, r9, lsl r1
 dd8:	00052400 	andeq	r2, r5, r0, lsl #8
 ddc:	0b3a0803 	bleq	e82df0 <startup-0x1f17d210>
 de0:	1349053b 	movtne	r0, #38203	; 0x953b
 de4:	00001802 	andeq	r1, r0, r2, lsl #16
 de8:	03003425 	movweq	r3, #1061	; 0x425
 dec:	3b0b3a08 	blcc	2cf614 <startup-0x1fd309ec>
 df0:	02134905 	andseq	r4, r3, #81920	; 0x14000
 df4:	26000018 			; <UNDEFINED> instruction: 0x26000018
 df8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 dfc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 e00:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 e04:	05270000 	streq	r0, [r7, #-0]!
 e08:	3a0e0300 	bcc	381a10 <startup-0x1fc7e5f0>
 e0c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 e10:	00180213 	andseq	r0, r8, r3, lsl r2
 e14:	012e2800 			; <UNDEFINED> instruction: 0x012e2800
 e18:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 e1c:	0b3b0b3a 	bleq	ec3b0c <startup-0x1f13c4f4>
 e20:	01111349 	tsteq	r1, r9, asr #6
 e24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 e28:	01194296 			; <UNDEFINED> instruction: 0x01194296
 e2c:	29000013 	stmdbcs	r0, {r0, r1, r4}
 e30:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 e34:	0b3b0b3a 	bleq	ec3b24 <startup-0x1f13c4dc>
 e38:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 e3c:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
 e40:	03193f01 	tsteq	r9, #1, 30
 e44:	3b0b3a0e 	blcc	2cf684 <startup-0x1fd3097c>
 e48:	1119270b 	tstne	r9, fp, lsl #14
 e4c:	40061201 	andmi	r1, r6, r1, lsl #4
 e50:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 e54:	00001301 	andeq	r1, r0, r1, lsl #6
 e58:	11010b2b 	tstne	r1, fp, lsr #22
 e5c:	00061201 	andeq	r1, r6, r1, lsl #4
 e60:	00052c00 	andeq	r2, r5, r0, lsl #24
 e64:	0b3a0803 	bleq	e82e78 <startup-0x1f17d188>
 e68:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 e6c:	00001802 	andeq	r1, r0, r2, lsl #16
 e70:	3f012e2d 	svccc	0x00012e2d
 e74:	3a0e0319 	bcc	381ae0 <startup-0x1fc7e520>
 e78:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 e7c:	11134919 	tstne	r3, r9, lsl r9
 e80:	40061201 	andmi	r1, r6, r1, lsl #4
 e84:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 e88:	00001301 	andeq	r1, r0, r1, lsl #6
 e8c:	0300052e 	movweq	r0, #1326	; 0x52e
 e90:	3b0b3a0e 	blcc	2cf6d0 <startup-0x1fd30930>
 e94:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 e98:	2f000018 	svccs	0x00000018
 e9c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 ea0:	0b3a0e03 	bleq	e846b4 <startup-0x1f17b94c>
 ea4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 ea8:	01111349 	tsteq	r1, r9, asr #6
 eac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 eb0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 eb4:	30000013 	andcc	r0, r0, r3, lsl r0
 eb8:	0e03012e 	adfeqsp	f0, f3, #0.5
 ebc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 ec0:	01111927 	tsteq	r1, r7, lsr #18
 ec4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 ec8:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000011d2 	ldrdeq	r1, [r0], -r2
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	0baa0002 	bleq	fea80034 <GPIO_Ports+0xdea7c394>
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200011e4 	andcs	r1, r0, r4, ror #3
  34:	000001c4 	andeq	r0, r0, r4, asr #3
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	10f10002 	rscsne	r0, r1, r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	200013a8 	andcs	r1, r0, r8, lsr #7
  54:	000001da 	ldrdeq	r0, [r0], -sl
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	145b0002 	ldrbne	r0, [fp], #-2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	20001584 	andcs	r1, r0, r4, lsl #11
  74:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	1a820002 	bne	fe080094 <GPIO_Ports+0xde07c3f4>
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	20001a94 	mulcs	r0, r4, sl
  94:	00000174 	andeq	r0, r0, r4, ror r1
	...
  a0:	00000024 	andeq	r0, r0, r4, lsr #32
  a4:	1d130002 	ldcne	0, cr0, [r3, #-8]
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	20001c08 	andcs	r1, r0, r8, lsl #24
  b4:	00001546 	andeq	r1, r0, r6, asr #10
  b8:	20000000 	andcs	r0, r0, r0
  bc:	0000000c 	andeq	r0, r0, ip
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	36950002 	ldrcc	r0, [r5], r2
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20003150 	andcs	r3, r0, r0, asr r1
  dc:	00000128 	andeq	r0, r0, r8, lsr #2
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	38420002 	stmdacc	r2, {r1}^
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	20003278 	andcs	r3, r0, r8, ror r2
  fc:	000007e4 	andeq	r0, r0, r4, ror #15
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000421 	andeq	r0, r0, r1, lsr #8
       4:	01c70002 	biceq	r0, r7, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
      20:	2f737265 	svccs	0x00737265
      24:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
      28:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
      2c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
      30:	442f6576 	strtmi	r6, [pc], #-1398	; 38 <startup-0x1fffffc8>
      34:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
      38:	2f746e65 	svccs	0x00746e65
      3c:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
      40:	442f6275 	strtmi	r6, [pc], #-629	; 48 <startup-0x1fffffb8>
      44:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
      48:	614c2d30 	cmpvs	ip, r0, lsr sp
      4c:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
      50:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
      54:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 5c <startup-0x1fffffa4>
      58:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
      5c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
      60:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
      64:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      68:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
      6c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
      70:	535f7878 	cmppl	pc, #120, 16	; 0x780000
      74:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
      78:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
      7c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
      80:	2f726576 	svccs	0x00726576
      84:	00637273 	rsbeq	r7, r3, r3, ror r2
      88:	635c3a63 	cmpvs	ip, #405504	; 0x63000
      8c:	70616573 	rsbvc	r6, r1, r3, ror r5
      90:	6f635c70 	svcvs	0x00635c70
      94:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
      98:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
      9c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
      a0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
      a4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
      a8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
      ac:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      b0:	61652d65 	cmnvs	r5, r5, ror #26
      b4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
      b8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
      bc:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
      c0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
      c4:	6300656e 	movwvs	r6, #1390	; 0x56e
      c8:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
      cc:	70706165 	rsbsvc	r6, r0, r5, ror #2
      d0:	646f635c 	strbtvs	r6, [pc], #-860	; d8 <startup-0x1fffff28>
      d4:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
      d8:	6f745c65 	svcvs	0x00745c65
      dc:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
      e0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
      e4:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
      e8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      ec:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
      f0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      f4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
      f8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
      fc:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     100:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
     104:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     108:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     10c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     110:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     114:	534d432f 	movtpl	r4, #54063	; 0xd32f
     118:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     11c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     120:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     124:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     128:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     12c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     130:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     134:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     138:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     13c:	5f787834 	svcpl	0x00787834
     140:	50647453 	rsbpl	r7, r4, r3, asr r4
     144:	70697265 	rsbvc	r7, r9, r5, ror #4
     148:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     14c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     150:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     154:	74730000 	ldrbtvc	r0, [r3], #-0
     158:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     15c:	5f787834 	svcpl	0x00787834
     160:	2e6e6163 	powcsez	f6, f6, f3
     164:	00010063 	andeq	r0, r1, r3, rrx
     168:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     16c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     170:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     174:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     178:	00020068 	andeq	r0, r2, r8, rrx
     17c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     180:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     184:	0300682e 	movweq	r6, #2094	; 0x82e
     188:	6f630000 	svcvs	0x00630000
     18c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     190:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     194:	00000400 	andeq	r0, r0, r0, lsl #8
     198:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     19c:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     1a0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     1a4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     1a8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     1ac:	74730000 	ldrbtvc	r0, [r3], #-0
     1b0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     1b4:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     1b8:	00050068 	andeq	r0, r5, r8, rrx
     1bc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     1c0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     1c4:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
     1c8:	682e6e61 	stmdavs	lr!, {r0, r5, r6, r9, sl, fp, sp, lr}
     1cc:	00000500 	andeq	r0, r0, r0, lsl #10
     1d0:	02050000 	andeq	r0, r5, #0
     1d4:	20000010 	andcs	r0, r0, r0, lsl r0
     1d8:	0101a703 	tsteq	r1, r3, lsl #14
     1dc:	03684d4e 	cmneq	r8, #4992	; 0x1380
     1e0:	681b661b 	ldmdavs	fp, {r0, r1, r3, r4, r9, sl, sp, lr}
     1e4:	740d0369 	strvc	r0, [sp], #-873	; 0xfffffc97
     1e8:	10034b59 	andne	r4, r3, r9, asr fp
     1ec:	2269772e 	rsbcs	r7, r9, #12058624	; 0xb80000
     1f0:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
     1f4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     1f8:	4c5d6850 	mrrcmi	8, 5, r6, sp, cr0
     1fc:	784c7878 	stmdavc	ip, {r3, r4, r5, r6, fp, ip, sp, lr}^
     200:	78784c78 	ldmdavc	r8!, {r3, r4, r5, r6, sl, fp, lr}^
     204:	4c78784c 	ldclmi	8, cr7, [r8], #-304	; 0xfffffed0
     208:	784c7878 	stmdavc	ip, {r3, r4, r5, r6, fp, ip, sp, lr}^
     20c:	223b3d78 	eorscs	r3, fp, #120, 26	; 0x1e00
     210:	223b223b 	eorscs	r2, fp, #-1342177277	; 0xb0000003
     214:	77351d3b 			; <UNDEFINED> instruction: 0x77351d3b
     218:	003a2230 	eorseq	r2, sl, r0, lsr r2
     21c:	06010402 	streq	r0, [r1], -r2, lsl #8
     220:	68500666 	ldmdavs	r0, {r1, r2, r5, r6, r9, sl}^
     224:	033d4f5c 	teqeq	sp, #92, 30	; 0x170
     228:	4b7400e9 	blmi	1d005d4 <startup-0x1e2ffa2c>
     22c:	afa16936 	svcge	0x00a16936
     230:	3a3db14d 	bcc	f6c76c <startup-0x1f093894>
     234:	3d512d4b 	ldclcc	13, cr2, [r1, #-300]	; 0xfffffed4
     238:	6b2d4b3a 	blvs	b52f28 <startup-0x1f4ad0d8>
     23c:	3a3da14d 	bcc	f68778 <startup-0x1f097888>
     240:	3d4f2d4b 	stclcc	13, cr2, [pc, #-300]	; 11c <startup-0x1ffffee4>
     244:	6c2d4b3a 			; <UNDEFINED> instruction: 0x6c2d4b3a
     248:	4da2bf4d 	stcmi	15, cr11, [r2, #308]!	; 0x134
     24c:	4ca24daf 	stcmi	13, cr4, [r2], #700	; 0x2bc
     250:	0903ada2 	stmdbeq	r3, {r1, r5, r7, r8, sl, fp, sp, pc}
     254:	3f3f4e66 	svccc	0x003f4e66
     258:	3f3f3f3f 	svccc	0x003f3f3f
     25c:	3f3f3f3f 	svccc	0x003f3f3f
     260:	4a1f033d 	bmi	7c0f5c <startup-0x1f83f0a4>
     264:	bd9fa16b 	ldfltd	f2, [pc, #428]	; 418 <startup-0x1ffffbe8>
     268:	820d03ad 	andhi	r0, sp, #-1275068414	; 0xb4000002
     26c:	1e7b4d79 	mrcne	13, 3, r4, cr11, cr9, {3}
     270:	74100368 	ldrvc	r0, [r0], #-872	; 0xfffffc98
     274:	bb694d78 	bllt	1a5385c <startup-0x1e5ac7a4>
     278:	ba0c03bb 	blt	30116c <startup-0x1fcfee94>
     27c:	77207903 	strvc	r7, [r0, -r3, lsl #18]!
     280:	03aeadad 			; <UNDEFINED> instruction: 0x03aeadad
     284:	5259661f 	subspl	r6, r9, #32505856	; 0x1f00000
     288:	5a925a92 	bpl	fe496cd8 <GPIO_Ports+0xde493038>
     28c:	694d5c92 	stmdbvs	sp, {r1, r4, r7, sl, fp, ip, lr}^
     290:	2d9f4de5 	ldccs	13, cr4, [pc, #916]	; 62c <startup-0x1ffff9d4>
     294:	222d9f96 	eorcs	r9, sp, #600	; 0x258
     298:	757a1f2d 	ldrbvc	r1, [sl, #-3885]!	; 0xfffff0d3
     29c:	3f082f08 	svccc	0x00082f08
     2a0:	3b223b3d 	blcc	88ef9c <startup-0x1f771064>
     2a4:	2c303922 			; <UNDEFINED> instruction: 0x2c303922
     2a8:	223b3d78 	eorscs	r3, fp, #120, 26	; 0x1e00
     2ac:	3039223b 	eorscc	r2, r9, fp, lsr r2
     2b0:	3dd8792c 	vldrcc.16	s15, [r8, #88]	; 0x58	; <UNPREDICTABLE>
     2b4:	754a0b03 	strbvc	r0, [sl, #-2819]	; 0xfffff4fd
     2b8:	22598534 	subscs	r8, r9, #52, 10	; 0xd000000
     2bc:	22592259 	subscs	r2, r9, #-1879048187	; 0x90000005
     2c0:	9308222f 	movwls	r2, #33327	; 0x822f
     2c4:	212f222f 			; <UNDEFINED> instruction: 0x212f222f
     2c8:	222f212f 	eorcs	r2, pc, #-1073741813	; 0xc000000b
     2cc:	212f212f 			; <UNDEFINED> instruction: 0x212f212f
     2d0:	222f212f 	eorcs	r2, pc, #-1073741813	; 0xc000000b
     2d4:	080a032f 	stmdaeq	sl, {r0, r1, r2, r3, r5, r8, r9}
     2d8:	09037912 	stmdbeq	r3, {r1, r4, r8, fp, ip, sp, lr}
     2dc:	20790382 	rsbscs	r0, r9, r2, lsl #7
     2e0:	21752167 	cmncs	r5, r7, ror #2
     2e4:	20032475 	andcs	r2, r3, r5, ror r4
     2e8:	4cbb954a 	cfldr32mi	mvfx9, [fp], #296	; 0x128
     2ec:	d8cabdcc 	stmiale	sl, {r2, r3, r6, r7, r8, sl, fp, ip, sp, pc}^
     2f0:	c9c9bbca 	stmibgt	r9, {r1, r3, r6, r7, r8, r9, fp, ip, sp, pc}^
     2f4:	c9c9bbc9 	stmibgt	r9, {r0, r3, r6, r7, r8, r9, fp, ip, sp, pc}^
     2f8:	1e6d4ccb 	cdpne	12, 6, cr4, cr13, cr11, {6}
     2fc:	4a0a0368 	bmi	2810a4 <startup-0x1fd7ef5c>
     300:	1e6d4c79 	mcrne	12, 3, r4, cr13, cr9, {3}
     304:	4a0a0368 	bmi	2810ac <startup-0x1fd7ef54>
     308:	924c4e75 	subls	r4, ip, #1872	; 0x750
     30c:	3d4c944c 	cfstrdcc	mvd9, [ip, #-304]	; 0xfffffed0
     310:	754a2003 	strbvc	r2, [sl, #-3]
     314:	854d344d 	strbhi	r3, [sp, #-1101]	; 0xfffffbb3
     318:	02003a22 	andeq	r3, r0, #139264	; 0x22000
     31c:	66060104 	strvs	r0, [r6], -r4, lsl #2
     320:	5c684006 	stclpl	0, cr4, [r8], #-24	; 0xffffffe8
     324:	22774d5b 	rsbscs	r4, r7, #5824	; 0x16c0
     328:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
     32c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     330:	5b5c5a40 	blpl	1716c38 <startup-0x1e8e93c8>
     334:	3a22854d 	bcc	8a1870 <startup-0x1f75e790>
     338:	01040200 	mrseq	r0, R12_usr
     33c:	40066606 	andmi	r6, r6, r6, lsl #12
     340:	4d5d5c68 	ldclmi	12, cr5, [sp, #-416]	; 0xfffffe60
     344:	6609033d 			; <UNDEFINED> instruction: 0x6609033d
     348:	6985504b 	stmibvs	r5, {r0, r1, r3, r6, ip, lr}
     34c:	09033d4d 	stmdbeq	r3, {r0, r2, r3, r6, r8, sl, fp, ip, sp}
     350:	502f4b4a 	eorpl	r4, pc, sl, asr #22
     354:	003a2277 	eorseq	r2, sl, r7, ror r2
     358:	06010402 	streq	r0, [r1], -r2, lsl #8
     35c:	69400666 	stmdbvs	r0, {r1, r2, r5, r6, r9, sl}^
     360:	28033d4d 	stmdacs	r3, {r0, r2, r3, r6, r8, sl, fp, ip, sp}
     364:	85504b66 	ldrbhi	r4, [r0, #-2918]	; 0xfffff49a
     368:	4a0f033d 	bmi	3c1064 <startup-0x1fc3ef9c>
     36c:	2f5b504b 	svccs	0x005b504b
     370:	4b4a0a03 	blmi	1282b84 <startup-0x1ed7d47c>
     374:	032f5b50 			; <UNDEFINED> instruction: 0x032f5b50
     378:	7a4a01c3 	bvc	1280a8c <startup-0x1ed7f574>
     37c:	761e6d4d 	ldrvc	r6, [lr], -sp, asr #26
     380:	594a1903 	stmdbpl	sl, {r0, r1, r8, fp, ip}^
     384:	5d775b51 	fldmdbxpl	r7!, {d21-d60}	;@ Deprecated
     388:	5d775b5b 	fldmdbxpl	r7!, {d21-d65}	;@ Deprecated
     38c:	5d775b5b 	fldmdbxpl	r7!, {d21-d65}	;@ Deprecated
     390:	5d775b5b 	fldmdbxpl	r7!, {d21-d65}	;@ Deprecated
     394:	4e5d775e 	mrcmi	7, 2, r7, cr13, cr14, {2}
     398:	4a15033d 	bmi	541094 <startup-0x1fabef6c>
     39c:	034d3359 	movteq	r3, #54105	; 0xd359
     3a0:	69033c1b 	stmdbvs	r3, {r0, r1, r3, r4, sl, fp, ip, sp}
     3a4:	035b4c20 	cmpeq	fp, #32, 24	; 0x2000
     3a8:	70033c12 	andvc	r3, r3, r2, lsl ip
     3ac:	0d035b20 	vstreq	d5, [r3, #-128]	; 0xffffff80
     3b0:	2075033c 	rsbscs	r0, r5, ip, lsr r3
     3b4:	3f1d445b 	svccc	0x001d445b
     3b8:	59741903 	ldmdbpl	r4!, {r0, r1, r8, fp, ip}^
     3bc:	3b026950 	blcc	9a904 <startup-0x1ff656fc>
     3c0:	9f23ad16 	svcls	0x0023ad16
     3c4:	9f239f23 	svcls	0x00239f23
     3c8:	9f239f23 	svcls	0x00239f23
     3cc:	9f239f23 	svcls	0x00239f23
     3d0:	9f239f23 	svcls	0x00239f23
     3d4:	9f239f23 	svcls	0x00239f23
     3d8:	9f239f23 	svcls	0x00239f23
     3dc:	4e344b23 	vaddmi.f64	d4, d4, d19
     3e0:	6617033d 			; <UNDEFINED> instruction: 0x6617033d
     3e4:	f23b035d 	vcge.s<illegal width 64>	q0, <illegal reg q5.5>, <illegal reg q6.5>
     3e8:	03204503 			; <UNDEFINED> instruction: 0x03204503
     3ec:	45034a3b 	strmi	r4, [r3, #-2619]	; 0xfffff5c5
     3f0:	f23b0320 	vcgt.s<illegal width 64>	d0, d11, d16
     3f4:	03204503 			; <UNDEFINED> instruction: 0x03204503
     3f8:	4903ba3b 	stmdbmi	r3, {r0, r1, r3, r4, r5, r9, fp, ip, sp, pc}
     3fc:	3d233d20 	stccc	13, cr3, [r3, #-128]!	; 0xffffff80
     400:	3d233d23 	stccc	13, cr3, [r3, #-140]!	; 0xffffff74
     404:	3d233d23 	stccc	13, cr3, [r3, #-140]!	; 0xffffff74
     408:	3e233d23 	cdpcc	13, 2, cr3, cr3, cr3, {1}
     40c:	3e233e23 	cdpcc	14, 2, cr3, cr3, cr3, {1}
     410:	233d3e23 	teqcs	sp, #560	; 0x230
     414:	03243e3e 			; <UNDEFINED> instruction: 0x03243e3e
     418:	4c59740c 	cfldrdmi	mvd7, [r9], {12}
     41c:	3d4c5d4d 	stclcc	13, cr5, [ip, #-308]	; 0xfffffecc
     420:	01000402 	tsteq	r0, r2, lsl #8
     424:	0001fa01 	andeq	pc, r1, r1, lsl #20
     428:	b5000200 	strlt	r0, [r0, #-512]	; 0xfffffe00
     42c:	02000001 	andeq	r0, r0, #1
     430:	0d0efb01 	vstreq	d15, [lr, #-4]
     434:	01010100 	mrseq	r0, (UNDEF: 17)
     438:	00000001 	andeq	r0, r0, r1
     43c:	01000001 	tsteq	r0, r1
     440:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffa05 <GPIO_Ports+0xdfffbd65>
     444:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     448:	6164412f 	cmnvs	r4, pc, lsr #2
     44c:	4f2f746d 	svcmi	0x002f746d
     450:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     454:	2f657669 	svccs	0x00657669
     458:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     45c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     460:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     464:	2f627548 	svccs	0x00627548
     468:	32544144 	subscc	r4, r4, #68, 2
     46c:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     470:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     474:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     478:	6f6b2f6d 	svcvs	0x006b2f6d
     47c:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
     480:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     484:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     488:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     48c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     490:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     494:	5f787834 	svcpl	0x00787834
     498:	50647453 	rsbpl	r7, r4, r3, asr r4
     49c:	70697265 	rsbvc	r7, r9, r5, ror #4
     4a0:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     4a4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     4a8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     4ac:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     4b0:	61657363 	cmnvs	r5, r3, ror #6
     4b4:	635c7070 	cmpvs	ip, #112	; 0x70
     4b8:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     4bc:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     4c0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 2f8 <startup-0x1ffffd08>
     4c4:	63675c73 	cmnvs	r7, #29440	; 0x7300
     4c8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     4cc:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     4d0:	6f6e2d6d 	svcvs	0x006e2d6d
     4d4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     4d8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     4dc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     4e0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     4e4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     4e8:	00656e69 	rsbeq	r6, r5, r9, ror #28
     4ec:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     4f0:	70616573 	rsbvc	r6, r1, r3, ror r5
     4f4:	6f635c70 	svcvs	0x00635c70
     4f8:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     4fc:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     500:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     504:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     508:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     50c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     510:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     514:	61652d65 	cmnvs	r5, r5, ror #26
     518:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     51c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     520:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
     524:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
     528:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     52c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     530:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     534:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     538:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
     53c:	2f534953 	svccs	0x00534953
     540:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     544:	00656475 	rsbeq	r6, r5, r5, ror r4
     548:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 498 <startup-0x1ffffb68>
     54c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     550:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     554:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     558:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     55c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     560:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     564:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     568:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     56c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 574 <startup-0x1ffffa8c>
     570:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     574:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     578:	6d000063 	stcvs	0, cr0, [r0, #-396]	; 0xfffffe74
     57c:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
     580:	00010063 	andeq	r0, r1, r3, rrx
     584:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     588:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     58c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     590:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     594:	00020068 	andeq	r0, r2, r8, rrx
     598:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     59c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     5a0:	0300682e 	movweq	r6, #2094	; 0x82e
     5a4:	6f630000 	svcvs	0x00630000
     5a8:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     5ac:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     5b0:	00000400 	andeq	r0, r0, r0, lsl #8
     5b4:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     5b8:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     5bc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     5c0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     5c4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     5c8:	74730000 	ldrbtvc	r0, [r3], #-0
     5cc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     5d0:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     5d4:	00050068 	andeq	r0, r5, r8, rrx
     5d8:	73696d00 	cmnvc	r9, #0, 26
     5dc:	00682e63 	rsbeq	r2, r8, r3, ror #28
     5e0:	00000005 	andeq	r0, r0, r5
     5e4:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
     5e8:	03200011 			; <UNDEFINED> instruction: 0x03200011
     5ec:	4f0100f6 	svcmi	0x000100f6
     5f0:	900c0359 	andls	r0, ip, r9, asr r3
     5f4:	9f4dc14b 	svcls	0x004dc14b
     5f8:	ae919275 	mrcge	2, 4, r9, cr1, cr5, {3}
     5fc:	6757b05a 			; <UNDEFINED> instruction: 0x6757b05a
     600:	2e09032d 	cdpcs	3, 0, cr0, cr9, cr13, {1}
     604:	2d67571e 	stclcs	7, cr5, [r7, #-120]!	; 0xffffff88
     608:	900c034d 	andls	r0, ip, sp, asr #6
     60c:	0d03835d 	stceq	3, cr8, [r3, #-372]	; 0xfffffe8c
     610:	7a4c9590 	bvc	1325c58 <startup-0x1ecda3a8>
     614:	0b03841e 	bleq	e1694 <startup-0x1ff1e96c>
     618:	6c3e4d74 	ldcvs	13, cr4, [lr], #-464	; 0xfffffe30
     61c:	0602681e 			; <UNDEFINED> instruction: 0x0602681e
     620:	e7010100 	str	r0, [r1, -r0, lsl #2]
     624:	02000001 	andeq	r0, r0, #1
     628:	00019900 	andeq	r9, r1, r0, lsl #18
     62c:	fb010200 	blx	40e36 <startup-0x1ffbf1ca>
     630:	01000d0e 	tsteq	r0, lr, lsl #26
     634:	00010101 	andeq	r0, r1, r1, lsl #2
     638:	00010000 	andeq	r0, r1, r0
     63c:	3a430100 	bcc	10c0a44 <startup-0x1ef3f5bc>
     640:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     644:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     648:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     64c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     650:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     654:	6f442f65 	svcvs	0x00442f65
     658:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     65c:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     660:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     664:	41442f62 	cmpmi	r4, r2, ror #30
     668:	30393254 	eorscc	r3, r9, r4, asr r2
     66c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     670:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     674:	2f6d6574 	svccs	0x006d6574
     678:	2f646f6b 	svccs	0x00646f6b
     67c:	0062696c 	rsbeq	r6, r2, ip, ror #18
     680:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     684:	70616573 	rsbvc	r6, r1, r3, ror r5
     688:	6f635c70 	svcvs	0x00635c70
     68c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     690:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     694:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     698:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     69c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     6a0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     6a4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     6a8:	61652d65 	cmnvs	r5, r5, ror #26
     6ac:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     6b0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     6b4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     6b8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     6bc:	6300656e 	movwvs	r6, #1390	; 0x56e
     6c0:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     6c4:	70706165 	rsbsvc	r6, r0, r5, ror #2
     6c8:	646f635c 	strbtvs	r6, [pc], #-860	; 6d0 <startup-0x1ffff930>
     6cc:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     6d0:	6f745c65 	svcvs	0x00745c65
     6d4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     6d8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     6dc:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     6e0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     6e4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     6e8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     6ec:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     6f0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     6f4:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     6f8:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
     6fc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     700:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     704:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     708:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     70c:	534d432f 	movtpl	r4, #54063	; 0xd32f
     710:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     714:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     718:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     71c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     720:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     724:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     728:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     72c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     730:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     734:	5f787834 	svcpl	0x00787834
     738:	50647453 	rsbpl	r7, r4, r3, asr r4
     73c:	70697265 	rsbvc	r7, r9, r5, ror #4
     740:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     744:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     748:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     74c:	2f2e2e00 	svccs	0x002e2e00
     750:	0062696c 	rsbeq	r6, r2, ip, ror #18
     754:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     758:	6f636e45 	svcvs	0x00636e45
     75c:	632e6564 			; <UNDEFINED> instruction: 0x632e6564
     760:	00000100 	andeq	r0, r0, r0, lsl #2
     764:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     768:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     76c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     770:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     774:	00000200 	andeq	r0, r0, r0, lsl #4
     778:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     77c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     780:	00030068 	andeq	r0, r3, r8, rrx
     784:	726f6300 	rsbvc	r6, pc, #0, 6
     788:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     78c:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     790:	73000004 	movwvc	r0, #4
     794:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     798:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
     79c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     7a0:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     7a4:	00050068 	andeq	r0, r5, r8, rrx
     7a8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     7ac:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     7b0:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
     7b4:	682e6e61 	stmdavs	lr!, {r0, r5, r6, r9, sl, fp, sp, lr}
     7b8:	00000500 	andeq	r0, r0, r0, lsl #10
     7bc:	2e4e4143 	dvfcsem	f4, f6, f3
     7c0:	00060068 	andeq	r0, r6, r8, rrx
     7c4:	05000000 	streq	r0, [r0, #-0]
     7c8:	0013a802 	andseq	sl, r3, r2, lsl #16
     7cc:	00f31920 	rscseq	r1, r3, r0, lsr #18
     7d0:	06010402 	streq	r0, [r1], -r2, lsl #8
     7d4:	314b0666 	cmpcc	fp, r6, ror #12
     7d8:	f3912f3f 			; <UNDEFINED> instruction: 0xf3912f3f
     7dc:	5c4b3f5a 	mcrrpl	15, 5, r3, fp, cr10
     7e0:	00686975 	rsbeq	r6, r8, r5, ror r9
     7e4:	21010402 	tstcs	r1, r2, lsl #8
     7e8:	ad4a0903 	vstrge.16	s1, [sl, #-6]	; <UNPREDICTABLE>
     7ec:	59912f3f 	ldmibpl	r1, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, sp}
     7f0:	3f3d3e5c 	svccc	0x003d3e5c
     7f4:	6859594b 	ldmdavs	r9, {r0, r1, r3, r6, r8, fp, ip, lr}^
     7f8:	3f754c21 	svccc	0x00754c21
     7fc:	5a59912f 	bpl	1664cc0 <startup-0x1e99b340>
     800:	4b3f3d3e 	blmi	fcfd00 <startup-0x1f030300>
     804:	3f3e595a 	svccc	0x003e595a
     808:	0005024b 	andeq	r0, r5, fp, asr #4
     80c:	02b50101 	adcseq	r0, r5, #1073741824	; 0x40000000
     810:	00020000 	andeq	r0, r2, r0
     814:	000001c9 	andeq	r0, r0, r9, asr #3
     818:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     81c:	0101000d 	tsteq	r1, sp
     820:	00000101 	andeq	r0, r0, r1, lsl #2
     824:	00000100 	andeq	r0, r0, r0, lsl #2
     828:	2f3a4301 	svccs	0x003a4301
     82c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     830:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
     834:	2f746d61 	svccs	0x00746d61
     838:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     83c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     840:	6b6f442f 	blvs	1bd1904 <startup-0x1e42e6fc>
     844:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     848:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     84c:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     850:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
     854:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     858:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     85c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     860:	6b2f6d65 	blvs	bdbdfc <startup-0x1f424204>
     864:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 6b0 <startup-0x1ffff950>
     868:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     86c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     870:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     874:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     878:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     87c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     880:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     884:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     888:	445f6870 	ldrbmi	r6, [pc], #-2160	; 890 <startup-0x1ffff770>
     88c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     890:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     894:	3a630063 	bcc	18c0a28 <startup-0x1e73f5d8>
     898:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     89c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     8a0:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     8a4:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     8a8:	6f6f745c 	svcvs	0x006f745c
     8ac:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     8b0:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     8b4:	615c6d72 	cmpvs	ip, r2, ror sp
     8b8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     8bc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     8c0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     8c4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     8c8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     8cc:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
     8d0:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
     8d4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     8d8:	61657363 	cmnvs	r5, r3, ror #6
     8dc:	635c7070 	cmpvs	ip, #112	; 0x70
     8e0:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     8e4:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     8e8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 720 <startup-0x1ffff8e0>
     8ec:	63675c73 	cmnvs	r7, #29440	; 0x7300
     8f0:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     8f4:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     8f8:	6f6e2d6d 	svcvs	0x006e2d6d
     8fc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     900:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     904:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     908:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     90c:	00737973 	rsbseq	r7, r3, r3, ror r9
     910:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 860 <startup-0x1ffff7a0>
     914:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     918:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     91c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     920:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
     924:	5349534d 	movtpl	r5, #37709	; 0x934d
     928:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     92c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     930:	2f2e2e00 	svccs	0x002e2e00
     934:	2f62696c 	svccs	0x0062696c
     938:	334d5453 	movtcc	r5, #54355	; 0xd453
     93c:	5f344632 	svcpl	0x00344632
     940:	2f62696c 	svccs	0x0062696c
     944:	334d5453 	movtcc	r5, #54355	; 0xd453
     948:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     94c:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     950:	72655064 	rsbvc	r5, r5, #100	; 0x64
     954:	5f687069 	svcpl	0x00687069
     958:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     95c:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     960:	0000636e 	andeq	r6, r0, lr, ror #6
     964:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     968:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     96c:	70675f78 	rsbvc	r5, r7, r8, ror pc
     970:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
     974:	00000100 	andeq	r0, r0, r0, lsl #2
     978:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     97c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     980:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     984:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     988:	00000200 	andeq	r0, r0, r0, lsl #4
     98c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     990:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     994:	00030068 	andeq	r0, r3, r8, rrx
     998:	726f6300 	rsbvc	r6, pc, #0, 6
     99c:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     9a0:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     9a4:	73000004 	movwvc	r0, #4
     9a8:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     9ac:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
     9b0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     9b4:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     9b8:	00050068 	andeq	r0, r5, r8, rrx
     9bc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     9c0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     9c4:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     9c8:	00000500 	andeq	r0, r0, r0, lsl #10
     9cc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     9d0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     9d4:	70675f78 	rsbvc	r5, r7, r8, ror pc
     9d8:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     9dc:	00000500 	andeq	r0, r0, r0, lsl #10
     9e0:	02050000 	andeq	r0, r5, #0
     9e4:	20001584 	andcs	r1, r0, r4, lsl #11
     9e8:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
     9ec:	034b4c4e 	movteq	r4, #48206	; 0xbc4e
     9f0:	4a034a38 	bmi	d32d8 <startup-0x1ff2cd28>
     9f4:	034b4c20 	movteq	r4, #48160	; 0xbc20
     9f8:	4f034a33 	svcmi	0x00034a33
     9fc:	034b4c20 	movteq	r4, #48160	; 0xbc20
     a00:	54034a2e 	strpl	r4, [r3], #-2606	; 0xfffff5d2
     a04:	034b4c20 	movteq	r4, #48160	; 0xbc20
     a08:	59034a29 	stmdbpl	r3, {r0, r3, r5, r9, fp, lr}
     a0c:	034b4c20 	movteq	r4, #48160	; 0xbc20
     a10:	5e034a24 	vmlapl.f32	s8, s6, s9
     a14:	034b4c20 	movteq	r4, #48160	; 0xbc20
     a18:	63034a1f 	movwvs	r4, #14879	; 0x3a1f
     a1c:	034b4c20 	movteq	r4, #48160	; 0xbc20
     a20:	68034a1a 	stmdavs	r3, {r1, r3, r4, r9, fp, lr}
     a24:	034b4c20 	movteq	r4, #48160	; 0xbc20
     a28:	6e034a15 			; <UNDEFINED> instruction: 0x6e034a15
     a2c:	03674c20 	cmneq	r7, #32, 24	; 0x2000
     a30:	7303660f 	movwvc	r6, #13839	; 0x360f
     a34:	03674c20 	cmneq	r7, #32, 24	; 0x2000
     a38:	7a03660a 	bvc	da268 <startup-0x1ff25d98>
     a3c:	69674c20 	stmdbvs	r7!, {r5, sl, fp, lr}^
     a40:	90080c03 	andls	r0, r8, r3, lsl #24
     a44:	660a0359 			; <UNDEFINED> instruction: 0x660a0359
     a48:	4c5a5a3e 	vmovmi	r5, sl, s29, s30
     a4c:	0200bcad 	andeq	fp, r0, #44288	; 0xad00
     a50:	4a060104 	bmi	180e68 <startup-0x1fe7f198>
     a54:	c0ad5006 	adcgt	r5, sp, r6
     a58:	00bbccad 	adcseq	ip, fp, sp, lsr #25
     a5c:	03020402 	movweq	r0, #9218	; 0x2402
     a60:	0200ba62 	andeq	fp, r0, #401408	; 0x62000
     a64:	3c060104 	stfccs	f0, [r6], {4}
     a68:	3c210306 	stccc	3, cr0, [r1], #-24	; 0xffffffe8
     a6c:	3d3d4c52 	ldccc	12, cr4, [sp, #-328]!	; 0xfffffeb8
     a70:	033d3d3d 	teqeq	sp, #3904	; 0xf40
     a74:	42757410 	rsbsmi	r7, r5, #16, 8	; 0x10000000
     a78:	3e4c3e5a 	mcrcc	14, 2, r3, cr12, cr10, {2}
     a7c:	1c033d3e 	stcne	13, cr3, [r3], {62}	; 0x3e
     a80:	6850754a 	ldmdavs	r0, {r1, r3, r6, r8, sl, ip, sp, lr}^
     a84:	033d4c5c 	teqeq	sp, #92, 24	; 0x5c00
     a88:	3d4e4a0a 	vstrcc	s9, [lr, #-40]	; 0xffffffd8
     a8c:	754a0c03 	strbvc	r0, [sl, #-3075]	; 0xfffff3fd
     a90:	4c5c6850 	mrrcmi	8, 5, r6, ip, cr0
     a94:	4a0a033d 	bmi	281790 <startup-0x1fd7e870>
     a98:	0f033d4e 	svceq	0x00033d4e
     a9c:	034b794a 	movteq	r7, #47434	; 0xb94a
     aa0:	4b794a0f 	blmi	1e532e4 <startup-0x1e1acd1c>
     aa4:	c04a1003 	subgt	r1, sl, r3
     aa8:	4c1e504c 	ldcmi	0, cr5, [lr], {76}	; 0x4c
     aac:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
     ab0:	4a0b034b 	bmi	2c17e4 <startup-0x1fd3e81c>
     ab4:	ce037578 	cfrshl64gt	mvdx3, mvdx8, r7
     ab8:	2fbb4a00 	svccs	0x00bb4a00
     abc:	c9089f35 	stmdbgt	r8, {r0, r2, r4, r5, r8, r9, sl, fp, ip, pc}
     ac0:	04029fbb 	streq	r9, [r2], #-4027	; 0xfffff045
     ac4:	01010100 	mrseq	r0, (UNDEF: 17)
     ac8:	02000002 	andeq	r0, r0, #2
     acc:	0001b400 	andeq	fp, r1, r0, lsl #8
     ad0:	fb010200 	blx	412da <startup-0x1ffbed26>
     ad4:	01000d0e 	tsteq	r0, lr, lsl #26
     ad8:	00010101 	andeq	r0, r1, r1, lsl #2
     adc:	00010000 	andeq	r0, r1, r0
     ae0:	3a430100 	bcc	10c0ee8 <startup-0x1ef3f118>
     ae4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     ae8:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     aec:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     af0:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     af4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     af8:	6f442f65 	svcvs	0x00442f65
     afc:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     b00:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     b04:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     b08:	41442f62 	cmpmi	r4, r2, ror #30
     b0c:	30393254 	eorscc	r3, r9, r4, asr r2
     b10:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     b14:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     b18:	2f6d6574 	svccs	0x006d6574
     b1c:	2f646f6b 	svccs	0x00646f6b
     b20:	2f62696c 	svccs	0x0062696c
     b24:	334d5453 	movtcc	r5, #54355	; 0xd453
     b28:	5f344632 	svcpl	0x00344632
     b2c:	2f62696c 	svccs	0x0062696c
     b30:	334d5453 	movtcc	r5, #54355	; 0xd453
     b34:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     b38:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     b3c:	72655064 	rsbvc	r5, r5, #100	; 0x64
     b40:	5f687069 	svcpl	0x00687069
     b44:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     b48:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
     b4c:	63006372 	movwvs	r6, #882	; 0x372
     b50:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     b54:	70706165 	rsbsvc	r6, r0, r5, ror #2
     b58:	646f635c 	strbtvs	r6, [pc], #-860	; b60 <startup-0x1ffff4a0>
     b5c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     b60:	6f745c65 	svcvs	0x00745c65
     b64:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     b68:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     b6c:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     b70:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     b74:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     b78:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     b7c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     b80:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     b84:	616d5c65 	cmnvs	sp, r5, ror #24
     b88:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     b8c:	3a630065 	bcc	18c0d28 <startup-0x1e73f2d8>
     b90:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     b94:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     b98:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     b9c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     ba0:	6f6f745c 	svcvs	0x006f745c
     ba4:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     ba8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     bac:	615c6d72 	cmpvs	ip, r2, ror sp
     bb0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     bb4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     bb8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     bbc:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     bc0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     bc4:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     bc8:	2f2e2e00 	svccs	0x002e2e00
     bcc:	2f62696c 	svccs	0x0062696c
     bd0:	334d5453 	movtcc	r5, #54355	; 0xd453
     bd4:	5f344632 	svcpl	0x00344632
     bd8:	2f62696c 	svccs	0x0062696c
     bdc:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     be0:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
     be4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     be8:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     bec:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     bf0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     bf4:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     bf8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     bfc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     c00:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     c04:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     c08:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     c0c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     c10:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     c14:	2f726576 	svccs	0x00726576
     c18:	00636e69 	rsbeq	r6, r3, r9, ror #28
     c1c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     c20:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     c24:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
     c28:	632e676e 			; <UNDEFINED> instruction: 0x632e676e
     c2c:	00000100 	andeq	r0, r0, r0, lsl #2
     c30:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     c34:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     c38:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     c3c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     c40:	00000200 	andeq	r0, r0, r0, lsl #4
     c44:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     c48:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     c4c:	00030068 	andeq	r0, r3, r8, rrx
     c50:	726f6300 	rsbvc	r6, pc, #0, 6
     c54:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     c58:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     c5c:	73000004 	movwvc	r0, #4
     c60:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     c64:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
     c68:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     c6c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     c70:	00050068 	andeq	r0, r5, r8, rrx
     c74:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     c78:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     c7c:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     c80:	00000500 	andeq	r0, r0, r0, lsl #10
     c84:	02050000 	andeq	r0, r5, #0
     c88:	20001a94 	mulcs	r0, r4, sl
     c8c:	0100e303 	tsteq	r0, r3, lsl #6
     c90:	09034d31 	stmdbeq	r3, {r0, r4, r5, r8, sl, fp, lr}
     c94:	3c09034a 	stccc	3, cr0, [r9], {74}	; 0x4a
     c98:	1e6d4d6a 	cdpne	13, 6, cr4, cr13, cr10, {3}
     c9c:	66300368 	ldrtvs	r0, [r0], -r8, ror #6
     ca0:	d8032f30 	stmdale	r3, {r4, r5, r8, r9, sl, fp, sp}
     ca4:	4d6a6600 	stclmi	6, cr6, [sl, #-0]
     ca8:	03681e6d 	cmneq	r8, #1744	; 0x6d0
     cac:	4f67740c 	svcmi	0x0067740c
     cb0:	3d4d5d69 	stclcc	13, cr5, [sp, #-420]	; 0xfffffe5c
     cb4:	6a660f03 	bvs	19848c8 <startup-0x1e67b738>
     cb8:	660b0367 	strvs	r0, [fp], -r7, ror #6
     cbc:	5d694f67 	stclpl	15, cr4, [r9, #-412]!	; 0xfffffe64
     cc0:	0c033d4d 	stceq	13, cr3, [r3], {77}	; 0x4d
     cc4:	02676b66 	rsbeq	r6, r7, #104448	; 0x19800
     cc8:	01010006 	tsteq	r1, r6
     ccc:	000005a3 	andeq	r0, r0, r3, lsr #11
     cd0:	021a0002 	andseq	r0, sl, #2
     cd4:	01020000 	mrseq	r0, (UNDEF: 2)
     cd8:	000d0efb 	strdeq	r0, [sp], -fp
     cdc:	01010101 	tsteq	r1, r1, lsl #2
     ce0:	01000000 	mrseq	r0, (UNDEF: 0)
     ce4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     ce8:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     cec:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     cf0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     cf4:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     cf8:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
     cfc:	2f534953 	svccs	0x00534953
     d00:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     d04:	00656475 	rsbeq	r6, r5, r5, ror r4
     d08:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; c58 <startup-0x1ffff3a8>
     d0c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     d10:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     d14:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     d18:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     d1c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     d20:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     d24:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     d28:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     d2c:	445f6870 	ldrbmi	r6, [pc], #-2160	; d34 <startup-0x1ffff2cc>
     d30:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     d34:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     d38:	3a430063 	bcc	10c0ecc <startup-0x1ef3f134>
     d3c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     d40:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     d44:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     d48:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     d4c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     d50:	6f442f65 	svcvs	0x00442f65
     d54:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     d58:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     d5c:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     d60:	41442f62 	cmpmi	r4, r2, ror #30
     d64:	30393254 	eorscc	r3, r9, r4, asr r2
     d68:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     d6c:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     d70:	2f6d6574 	svccs	0x006d6574
     d74:	2f646f6b 	svccs	0x00646f6b
     d78:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
     d7c:	2f2e2e00 	svccs	0x002e2e00
     d80:	2f62696c 	svccs	0x0062696c
     d84:	334d5453 	movtcc	r5, #54355	; 0xd453
     d88:	5f344632 	svcpl	0x00344632
     d8c:	2f62696c 	svccs	0x0062696c
     d90:	334d5453 	movtcc	r5, #54355	; 0xd453
     d94:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     d98:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     d9c:	72655064 	rsbvc	r5, r5, #100	; 0x64
     da0:	5f687069 	svcpl	0x00687069
     da4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     da8:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     dac:	6300636e 	movwvs	r6, #878	; 0x36e
     db0:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     db4:	70706165 	rsbsvc	r6, r0, r5, ror #2
     db8:	646f635c 	strbtvs	r6, [pc], #-860	; dc0 <startup-0x1ffff240>
     dbc:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     dc0:	6f745c65 	svcvs	0x00745c65
     dc4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     dc8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     dcc:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     dd0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     dd4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     dd8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     ddc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     de0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     de4:	616d5c65 	cmnvs	sp, r5, ror #24
     de8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     dec:	3a630065 	bcc	18c0f88 <startup-0x1e73f078>
     df0:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     df4:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     df8:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     dfc:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     e00:	6f6f745c 	svcvs	0x006f745c
     e04:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     e08:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     e0c:	615c6d72 	cmpvs	ip, r2, ror sp
     e10:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     e14:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     e18:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     e1c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     e20:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     e24:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     e28:	6f630000 	svcvs	0x00630000
     e2c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     e30:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     e34:	00000100 	andeq	r0, r0, r0, lsl #2
     e38:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     e3c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     e40:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     e44:	00632e63 	rsbeq	r2, r3, r3, ror #28
     e48:	69000002 	stmdbvs	r0, {r1}
     e4c:	2e74696e 	vsubcs.f16	s13, s8, s29	; <UNPREDICTABLE>
     e50:	00030068 	andeq	r0, r3, r8, rrx
     e54:	61747300 	cmnvs	r4, r0, lsl #6
     e58:	70757472 	rsbsvc	r7, r5, r2, ror r4
     e5c:	0300632e 	movweq	r6, #814	; 0x32e
     e60:	74730000 	ldrbtvc	r0, [r3], #-0
     e64:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     e68:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     e6c:	00040068 	andeq	r0, r4, r8, rrx
     e70:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     e74:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     e78:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e7c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     e80:	00050068 	andeq	r0, r5, r8, rrx
     e84:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     e88:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     e8c:	0600682e 	streq	r6, [r0], -lr, lsr #16
     e90:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     e94:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     e98:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     e9c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     ea0:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     ea4:	00000400 	andeq	r0, r0, r0, lsl #8
     ea8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     eac:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     eb0:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     eb4:	00682e63 	rsbeq	r2, r8, r3, ror #28
     eb8:	73000004 	movwvc	r0, #4
     ebc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     ec0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     ec4:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     ec8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     ecc:	73000004 	movwvc	r0, #4
     ed0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     ed4:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
     ed8:	00000300 	andeq	r0, r0, r0, lsl #6
     edc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     ee0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     ee4:	61635f78 	smcvs	13816	; 0x35f8
     ee8:	00682e6e 	rsbeq	r2, r8, lr, ror #28
     eec:	00000004 	andeq	r0, r0, r4
     ef0:	08020500 	stmdaeq	r2, {r8, sl}
     ef4:	0320001c 			; <UNDEFINED> instruction: 0x0320001c
     ef8:	75010cdd 	strvc	r0, [r1, #-3293]	; 0xfffff323
     efc:	d81ecd4b 	ldmdale	lr, {r0, r1, r3, r6, r8, sl, fp, lr, pc}
     f00:	9000fc03 	andls	pc, r0, r3, lsl #24
     f04:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     f08:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     f0c:	3d674b30 	vstmdbcc	r7!, {d20-<overflow reg d43>}
     f10:	0204213f 	andeq	r2, r4, #-1073741809	; 0xc000000f
     f14:	8273f703 	rsbshi	pc, r3, #786432	; 0xc0000
     f18:	693f6930 	ldmdbvs	pc!, {r4, r5, r8, fp, sp, lr}	; <UNPREDICTABLE>
     f1c:	694e4f40 	stmdbvs	lr, {r6, r8, r9, sl, fp, lr}^
     f20:	1703503f 	smladxne	r3, pc, r0, r5	; <UNPREDICTABLE>
     f24:	4b3f6be4 	blmi	fdbebc <startup-0x1f024144>
     f28:	3d740f03 	ldclcc	15, cr0, [r4, #-12]!
     f2c:	02003d2f 	andeq	r3, r0, #3008	; 0xbc0
     f30:	00400204 	subeq	r0, r0, r4, lsl #4
     f34:	67020402 	strvs	r0, [r2, -r2, lsl #8]
     f38:	02040200 	andeq	r0, r4, #0, 4
     f3c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     f40:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     f44:	3e4e5a4c 	vmlscc.f32	s11, s28, s24
     f48:	4a0b032f 	bmi	2c1c0c <startup-0x1fd3e3f4>
     f4c:	4d3f3267 	lfmmi	f3, 4, [pc, #-412]!	; db8 <startup-0x1ffff248>
     f50:	15033d69 	strne	r3, [r3, #-3433]	; 0xfffff297
     f54:	034b6a74 	movteq	r6, #47732	; 0xba74
     f58:	3f6c6614 	svccc	0x006c6614
     f5c:	660b033f 			; <UNDEFINED> instruction: 0x660b033f
     f60:	3d207903 			; <UNDEFINED> instruction: 0x3d207903
     f64:	03243d23 			; <UNDEFINED> instruction: 0x03243d23
     f68:	4b6a740f 	blmi	1a9dfac <startup-0x1e562054>
     f6c:	6600de03 	strvs	sp, [r0], -r3, lsl #28
     f70:	3e2dbb7c 	vmovcc.16	d13[3], fp
     f74:	69660e03 	stmdbvs	r6!, {r0, r1, r9, sl, fp}^
     f78:	661a034b 	ldrvs	r0, [sl], -fp, asr #6
     f7c:	8503835d 	strhi	r8, [r3, #-861]	; 0xfffffca3
     f80:	4b697401 	blmi	1a5df8c <startup-0x1e5a2074>
     f84:	6600e903 	strvs	lr, [r0], -r3, lsl #18
     f88:	0d03ad6c 	stceq	13, cr10, [r3, #-432]	; 0xfffffe50
     f8c:	034b6974 	movteq	r6, #47476	; 0xb974
     f90:	4b69660e 	blmi	1a5a7d0 <startup-0x1e5a5830>
     f94:	59661503 	stmdbpl	r6!, {r0, r1, r8, sl, ip}^
     f98:	694d3f34 	stmdbvs	sp, {r2, r4, r5, r8, r9, sl, fp, ip, sp}^
     f9c:	90180341 	andsls	r0, r8, r1, asr #6
     fa0:	4d3f3459 	cfldrsmi	mvf3, [pc, #-356]!	; e44 <startup-0x1ffff1bc>
     fa4:	b3034169 	movwlt	r4, #12649	; 0x3169
     fa8:	334b7401 	movtcc	r7, #46081	; 0xb401
     fac:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
     fb0:	2f660d03 	svccs	0x00660d03
     fb4:	66170367 	ldrvs	r0, [r7], -r7, ror #6
     fb8:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; e94 <startup-0x1ffff16c>
     fbc:	0f033d4d 	svceq	0x00033d4d
     fc0:	3f334b66 	svccc	0x00334b66
     fc4:	033d4d4d 	teqeq	sp, #4928	; 0x1340
     fc8:	334b820f 	movtcc	r8, #45583	; 0xb20f
     fcc:	3d5b4d3f 	ldclcc	13, cr4, [fp, #-252]	; 0xffffff04
     fd0:	4b902403 	blmi	fe409fe4 <GPIO_Ports+0xde406344>
     fd4:	3d775ac0 	vldmdbcc	r7!, {s11-s202}
     fd8:	67263d22 	strvs	r3, [r6, -r2, lsr #26]!
     fdc:	cbdb3f5a 	blgt	ff6d0d4c <GPIO_Ports+0xdf6cd0ac>
     fe0:	1b038383 	blne	e1df4 <startup-0x1ff1e20c>
     fe4:	59253d20 	stmdbpl	r5!, {r5, r8, sl, fp, ip, sp}
     fe8:	6769683d 			; <UNDEFINED> instruction: 0x6769683d
     fec:	6769683d 			; <UNDEFINED> instruction: 0x6769683d
     ff0:	0367683d 	cmneq	r7, #3997696	; 0x3d0000
     ff4:	334bba3f 	movtcc	fp, #47679	; 0xba3f
     ff8:	694d3f84 	stmdbvs	sp, {r2, r7, r8, r9, sl, fp, ip, sp}^
     ffc:	0a038340 	beq	e1d04 <startup-0x1ff1e2fc>
    1000:	034b6a9e 	movteq	r6, #47774	; 0xba9e
    1004:	4b69660c 	blmi	1a5a83c <startup-0x1e5a57c4>
    1008:	6601b803 	strvs	fp, [r1], -r3, lsl #16
    100c:	16033d4e 	strne	r3, [r3], -lr, asr #26
    1010:	4d334b74 	vldmdbmi	r3!, {d4-<overflow reg d61>}
    1014:	034b4d4d 	movteq	r4, #48461	; 0xbd4d
    1018:	334b8214 	movtcc	r8, #45588	; 0xb214
    101c:	4b4d4d4d 	blmi	1354558 <startup-0x1ecabaa8>
    1020:	4b821103 	blmi	fe085434 <GPIO_Ports+0xde081794>
    1024:	5b4d4d33 	blpl	13544f8 <startup-0x1ecabb08>
    1028:	7410034b 	ldrvc	r0, [r0], #-843	; 0xfffffcb5
    102c:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
    1030:	d3034b69 	movwle	r4, #15209	; 0x3b69
    1034:	334b8200 	movtcc	r8, #45568	; 0xb200
    1038:	4b4d4d4d 	blmi	1354574 <startup-0x1ecaba8c>
    103c:	8200f003 	andhi	pc, r0, #3
    1040:	25033d4e 	strcs	r3, [r3, #-3406]	; 0xfffff2b2
    1044:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
    1048:	1303761e 	movwne	r7, #13854	; 0x361e
    104c:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
    1050:	1103761e 	tstne	r3, lr, lsl r6
    1054:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
    1058:	2c03761e 	stccs	6, cr7, [r3], {30}
    105c:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
    1060:	2703761e 	smladcs	r3, lr, r6, r7
    1064:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
    1068:	1d03761e 	stcne	6, cr7, [r3, #-120]	; 0xffffff88
    106c:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
    1070:	1003761e 	andne	r7, r3, lr, lsl r6
    1074:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
    1078:	0e03761e 	mcreq	6, 0, r7, cr3, cr14, {0}
    107c:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
    1080:	2903761e 	stmdbcs	r3, {r1, r2, r3, r4, r9, sl, ip, sp, lr}
    1084:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
    1088:	2303761e 	movwcs	r7, #13854	; 0x361e
    108c:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
    1090:	2503761e 	strcs	r7, [r3, #-1566]	; 0xfffff9e2
    1094:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
    1098:	1403761e 	strne	r7, [r3], #-1566	; 0xfffff9e2
    109c:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
    10a0:	1203761e 	andne	r7, r3, #31457280	; 0x1e00000
    10a4:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
    10a8:	2d03761e 	stccs	6, cr7, [r3, #-120]	; 0xffffff88
    10ac:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
    10b0:	2803761e 	stmdacs	r3, {r1, r2, r3, r4, r9, sl, ip, sp, lr}
    10b4:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
    10b8:	0c03761e 	stceq	6, cr7, [r3], {30}
    10bc:	6c4c6a74 	mcrrvs	10, 7, r6, ip, cr4
    10c0:	ac03681e 	stcge	8, cr6, [r3], {30}
    10c4:	4d947402 	cfldrsmi	mvf7, [r4, #8]
    10c8:	03ae1e97 			; <UNDEFINED> instruction: 0x03ae1e97
    10cc:	2f676617 	svccs	0x00676617
    10d0:	3e59502f 	cdpcc	0, 5, cr5, cr9, cr15, {1}
    10d4:	404e3e4c 	submi	r3, lr, ip, asr #28
    10d8:	4d5c7659 	ldclmi	6, cr7, [ip, #-356]	; 0xfffffe9c
    10dc:	660a033d 			; <UNDEFINED> instruction: 0x660a033d
    10e0:	11037530 	tstne	r3, r0, lsr r5
    10e4:	68506758 	ldmdavs	r0, {r3, r4, r6, r8, r9, sl, sp, lr}^
    10e8:	033d4d5c 	teqeq	sp, #92, 26	; 0x1700
    10ec:	4b6c6611 	blmi	1b1a938 <startup-0x1e4e56c8>
    10f0:	9d030304 	stcls	3, cr0, [r3, #-16]
    10f4:	4b406667 	blmi	101aa98 <startup-0x1efe5568>
    10f8:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
    10fc:	3d4b693d 	vstrcc.16	s13, [fp, #-122]	; 0xffffff86	; <UNPREDICTABLE>
    1100:	4b693d3d 	blmi	1a505fc <startup-0x1e5afa04>
    1104:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
    1108:	3d4b693d 	vstrcc.16	s13, [fp, #-122]	; 0xffffff86	; <UNPREDICTABLE>
    110c:	4b693d3d 	blmi	1a50608 <startup-0x1e5af9f8>
    1110:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
    1114:	3d4b693d 	vstrcc.16	s13, [fp, #-122]	; 0xffffff86	; <UNPREDICTABLE>
    1118:	4b693d3d 	blmi	1a50614 <startup-0x1e5af9ec>
    111c:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
    1120:	3d4b693d 	vstrcc.16	s13, [fp, #-122]	; 0xffffff86	; <UNPREDICTABLE>
    1124:	4b693d3d 	blmi	1a50620 <startup-0x1e5af9e0>
    1128:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
    112c:	0404673d 	streq	r6, [r4], #-1853	; 0xfffff8c3
    1130:	2e085503 	cfsh32cs	mvfx5, mvfx8, #3
    1134:	3e5a592f 	vnmlscc.f16	s11, s20, s31	; <UNPREDICTABLE>
    1138:	303e683e 	eorscc	r6, lr, lr, lsr r8
    113c:	00594bad 	subseq	r4, r9, sp, lsr #23
    1140:	06010402 	streq	r0, [r1], -r2, lsl #8
    1144:	76590620 	ldrbvc	r0, [r9], -r0, lsr #12
    1148:	423d4b2f 	eorsmi	r4, sp, #48128	; 0xbc00
    114c:	2f2f2f3d 	svccs	0x002f2f3d
    1150:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    1154:	06200601 	strteq	r0, [r0], -r1, lsl #12
    1158:	3e3e2f5d 	mrccc	15, 1, r2, cr14, cr13, {2}
    115c:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
    1160:	02003902 	andeq	r3, r0, #32768	; 0x8000
    1164:	3c060104 	stfccs	f0, [r6], {4}
    1168:	02040200 	andeq	r0, r4, #0, 4
    116c:	02003a06 	andeq	r3, r0, #24576	; 0x6000
    1170:	3c060104 	stfccs	f0, [r6], {4}
    1174:	3c090306 	stccc	3, cr0, [r9], {6}
    1178:	2f132f02 	svccs	0x00132f02
    117c:	adc93e3e 	stclge	14, cr3, [r9, #248]	; 0xf8
    1180:	757575bb 	ldrbvc	r7, [r5, #-1467]!	; 0xfffffa45
    1184:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
    1188:	3c760302 	ldclcc	3, cr0, [r6], #-8
    118c:	01040200 	mrseq	r0, R12_usr
    1190:	02003c06 	andeq	r3, r0, #1536	; 0x600
    1194:	3a060204 	bcc	1819ac <startup-0x1fe7e654>
    1198:	01040200 	mrseq	r0, R12_usr
    119c:	03063c06 	movweq	r3, #27654	; 0x6c06
    11a0:	00303c10 	eorseq	r3, r0, r0, lsl ip
    11a4:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
    11a8:	03040200 	movweq	r0, #16896	; 0x4200
    11ac:	040200f3 	streq	r0, [r2], #-243	; 0xffffff0d
    11b0:	02003903 	andeq	r3, r0, #49152	; 0xc000
    11b4:	3c060104 	stfccs	f0, [r6], {4}
    11b8:	02006c06 	andeq	r6, r0, #1536	; 0x600
    11bc:	005a0304 	subseq	r0, sl, r4, lsl #6
    11c0:	f3030402 	vshl.u8	d0, d2, d3
    11c4:	03040200 	movweq	r0, #16896	; 0x4200
    11c8:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
    11cc:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    11d0:	02003d41 	andeq	r3, r0, #4160	; 0x1040
    11d4:	003e0304 	eorseq	r0, lr, r4, lsl #6
    11d8:	f0030402 			; <UNDEFINED> instruction: 0xf0030402
    11dc:	01040200 	mrseq	r0, R12_usr
    11e0:	6a063c06 	bvs	190200 <startup-0x1fe6fe00>
    11e4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    11e8:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
    11ec:	00f00304 	rscseq	r0, r0, r4, lsl #6
    11f0:	06010402 	streq	r0, [r1], -r2, lsl #8
    11f4:	5c6c063c 	stclpl	6, cr0, [ip], #-240	; 0xffffff10
    11f8:	2108a03f 	tstcs	r8, pc, lsr r0
    11fc:	d89284e9 	ldmle	r2, {r0, r3, r5, r6, r7, sl, pc}
    1200:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    1204:	06900601 	ldreq	r0, [r0], r1, lsl #12
    1208:	22025a08 	andcs	r5, r2, #8, 20	; 0x8000
    120c:	0200f416 	andeq	pc, r0, #369098752	; 0x16000000
    1210:	90060104 	andls	r0, r6, r4, lsl #2
    1214:	02040200 	andeq	r0, r4, #0, 4
    1218:	92065808 	andls	r5, r6, #8, 16	; 0x80000
    121c:	040200d7 	streq	r0, [r2], #-215	; 0xffffff29
    1220:	08730302 	ldmdaeq	r3!, {r1, r8, r9}^
    1224:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
    1228:	003c0601 	eorseq	r0, ip, r1, lsl #12
    122c:	06020402 	streq	r0, [r2], -r2, lsl #8
    1230:	00746f03 	rsbseq	r6, r4, r3, lsl #30
    1234:	06010402 	streq	r0, [r1], -r2, lsl #8
    1238:	0306743c 	movweq	r7, #25660	; 0x643c
    123c:	673d6627 	ldrvs	r6, [sp, -r7, lsr #12]!
    1240:	01040200 	mrseq	r0, R12_usr
    1244:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1248:	49224901 	stmdbmi	r2!, {r0, r8, fp, lr}
    124c:	02004c22 	andeq	r4, r0, #8704	; 0x2200
    1250:	20060104 	andcs	r0, r6, r4, lsl #2
    1254:	9f925d06 	svcls	0x00925d06
    1258:	024baf08 	subeq	sl, fp, #8, 30
    125c:	01010007 	tsteq	r1, r7
    1260:	05000404 	streq	r0, [r0, #-1028]	; 0xfffffbfc
    1264:	00000002 	andeq	r0, r0, r2
    1268:	010f0320 	tsteq	pc, r0, lsr #6
    126c:	03025e13 	movweq	r5, #11795	; 0x2e13
    1270:	4e010100 	adfmis	f0, f1, f0
    1274:	02000001 	andeq	r0, r0, #1
    1278:	00010800 	andeq	r0, r1, r0, lsl #16
    127c:	fb010200 	blx	41a86 <startup-0x1ffbe57a>
    1280:	01000d0e 	tsteq	r0, lr, lsl #26
    1284:	00010101 	andeq	r0, r1, r1, lsl #2
    1288:	00010000 	andeq	r0, r1, r0
    128c:	3a430100 	bcc	10c1694 <startup-0x1ef3e96c>
    1290:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    1294:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
    1298:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
    129c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
    12a0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    12a4:	6f442f65 	svcvs	0x00442f65
    12a8:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
    12ac:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
    12b0:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
    12b4:	41442f62 	cmpmi	r4, r2, ror #30
    12b8:	30393254 	eorscc	r3, r9, r4, asr r2
    12bc:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
    12c0:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
    12c4:	2f6d6574 	svccs	0x006d6574
    12c8:	2f646f6b 	svccs	0x00646f6b
    12cc:	0062696c 	rsbeq	r6, r2, ip, ror #18
    12d0:	635c3a63 	cmpvs	ip, #405504	; 0x63000
    12d4:	70616573 	rsbvc	r6, r1, r3, ror r5
    12d8:	6f635c70 	svcvs	0x00635c70
    12dc:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
    12e0:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
    12e4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    12e8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    12ec:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    12f0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    12f4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    12f8:	61652d65 	cmnvs	r5, r5, ror #26
    12fc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    1300:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1304:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    1308:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    130c:	6300656e 	movwvs	r6, #1390	; 0x56e
    1310:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
    1314:	70706165 	rsbsvc	r6, r0, r5, ror #2
    1318:	646f635c 	strbtvs	r6, [pc], #-860	; 1320 <startup-0x1fffece0>
    131c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
    1320:	6f745c65 	svcvs	0x00745c65
    1324:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    1328:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    132c:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
    1330:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1334:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    1338:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    133c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    1340:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1344:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    1348:	62000073 	andvs	r0, r0, #115	; 0x73
    134c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1350:	00632e72 	rsbeq	r2, r3, r2, ror lr
    1354:	5f000001 	svcpl	0x00000001
    1358:	61666564 	cmnvs	r6, r4, ror #10
    135c:	5f746c75 	svcpl	0x00746c75
    1360:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1364:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1368:	5f000002 	svcpl	0x00000002
    136c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1370:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1374:	00000300 	andeq	r0, r0, r0, lsl #6
    1378:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    137c:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    1380:	00000100 	andeq	r0, r0, r0, lsl #2
    1384:	02050000 	andeq	r0, r5, #0
    1388:	20003150 	andcs	r3, r0, r0, asr r1
    138c:	4b4b4b15 	blmi	12d3fe8 <startup-0x1ed2c018>
    1390:	59764e4b 	ldmdbpl	r6!, {r0, r1, r3, r6, r9, sl, fp, lr}^
    1394:	5985c932 	stmibpl	r5, {r1, r4, r5, r8, fp, lr, pc}
    1398:	7a4e214c 	bvc	13898d0 <startup-0x1ec76730>
    139c:	01040200 	mrseq	r0, R12_usr
    13a0:	02005806 	andeq	r5, r0, #393216	; 0x60000
    13a4:	00660204 	rsbeq	r0, r6, r4, lsl #4
    13a8:	20040402 	andcs	r0, r4, r2, lsl #8
    13ac:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    13b0:	02003f06 	andeq	r3, r0, #6, 30
    13b4:	4e670404 	cdpmi	4, 6, cr0, cr7, cr4, {0}
    13b8:	c932595a 	ldmdbgt	r2!, {r1, r3, r4, r6, r8, fp, ip, lr}
    13bc:	214c5985 	smlalbbcs	r5, ip, r5, r9
    13c0:	01000402 	tsteq	r0, r2, lsl #8
    13c4:	0002cd01 	andeq	ip, r2, r1, lsl #26
    13c8:	b9000200 	stmdblt	r0, {r9}
    13cc:	02000001 	andeq	r0, r0, #1
    13d0:	0d0efb01 	vstreq	d15, [lr, #-4]
    13d4:	01010100 	mrseq	r0, (UNDEF: 17)
    13d8:	00000001 	andeq	r0, r0, r1
    13dc:	01000001 	tsteq	r0, r1
    13e0:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 1330 <startup-0x1fffecd0>
    13e4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    13e8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    13ec:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    13f0:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
    13f4:	5349534d 	movtpl	r5, #37709	; 0x934d
    13f8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    13fc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1400:	2f3a4300 	svccs	0x003a4300
    1404:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1408:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    140c:	2f746d61 	svccs	0x00746d61
    1410:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    1414:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1418:	6b6f442f 	blvs	1bd24dc <startup-0x1e42db24>
    141c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1420:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    1424:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    1428:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    142c:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    1430:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1434:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1438:	6b2f6d65 	blvs	bdc9d4 <startup-0x1f42362c>
    143c:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 1288 <startup-0x1fffed78>
    1440:	2e006269 	cdpcs	2, 0, cr6, cr0, cr9, {3}
    1444:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    1448:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    144c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1450:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1454:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1458:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    145c:	5f787834 	svcpl	0x00787834
    1460:	50647453 	rsbpl	r7, r4, r3, asr r4
    1464:	70697265 	rsbvc	r7, r9, r5, ror #4
    1468:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    146c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1470:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1474:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1478:	61657363 	cmnvs	r5, r3, ror #6
    147c:	635c7070 	cmpvs	ip, #112	; 0x70
    1480:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
    1484:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
    1488:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 12c0 <startup-0x1fffed40>
    148c:	63675c73 	cmnvs	r7, #29440	; 0x7300
    1490:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    1494:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
    1498:	6f6e2d6d 	svcvs	0x006e2d6d
    149c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    14a0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    14a4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    14a8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    14ac:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    14b0:	00656e69 	rsbeq	r6, r5, r9, ror #28
    14b4:	635c3a63 	cmpvs	ip, #405504	; 0x63000
    14b8:	70616573 	rsbvc	r6, r1, r3, ror r5
    14bc:	6f635c70 	svcvs	0x00635c70
    14c0:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
    14c4:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
    14c8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    14cc:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    14d0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    14d4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    14d8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    14dc:	61652d65 	cmnvs	r5, r5, ror #26
    14e0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    14e4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    14e8:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    14ec:	00007379 	andeq	r7, r0, r9, ror r3
    14f0:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    14f4:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
    14f8:	0100682e 	tsteq	r0, lr, lsr #16
    14fc:	41430000 	mrsmi	r0, (UNDEF: 67)
    1500:	00632e4e 	rsbeq	r2, r3, lr, asr #28
    1504:	73000002 	movwvc	r0, #2
    1508:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    150c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1510:	0300682e 	movweq	r6, #2094	; 0x82e
    1514:	645f0000 	ldrbvs	r0, [pc], #-0	; 151c <startup-0x1fffeae4>
    1518:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    151c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 1524 <startup-0x1fffeadc>
    1520:	73657079 	cmnvc	r5, #121	; 0x79
    1524:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1528:	735f0000 	cmpvc	pc, #0
    152c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1530:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1534:	73000005 	movwvc	r0, #5
    1538:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    153c:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
    1540:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1544:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    1548:	00030068 	andeq	r0, r3, r8, rrx
    154c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1550:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1554:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
    1558:	682e6e61 	stmdavs	lr!, {r0, r5, r6, r9, sl, fp, sp, lr}
    155c:	00000300 	andeq	r0, r0, r0, lsl #6
    1560:	2e4e4143 	dvfcsem	f4, f6, f3
    1564:	00020068 	andeq	r0, r2, r8, rrx
    1568:	73696d00 	cmnvc	r9, #0, 26
    156c:	00682e63 	rsbeq	r2, r8, r3, ror #28
    1570:	73000003 	movwvc	r0, #3
    1574:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1578:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    157c:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    1580:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    1584:	00000003 	andeq	r0, r0, r3
    1588:	78020500 	stmdavc	r2, {r8, sl}
    158c:	03200032 			; <UNDEFINED> instruction: 0x03200032
    1590:	75010cdd 	strvc	r0, [r1, #-3293]	; 0xfffff323
    1594:	d81ecd4b 	ldmdale	lr, {r0, r1, r3, r6, r8, sl, fp, lr, pc}
    1598:	c3030204 	movwgt	r0, #12804	; 0x3204
    159c:	4b3d9073 	blmi	f65770 <startup-0x1f09a890>
    15a0:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
    15a4:	02002c02 	andeq	r2, r0, #512	; 0x200
    15a8:	58060104 	stmdapl	r6, {r2, r8}
    15ac:	69214f06 	stmdbvs	r1!, {r1, r2, r8, r9, sl, fp, lr}
    15b0:	86838667 	strhi	r8, [r3], r7, ror #12
    15b4:	593d3d59 	ldmdbpl	sp!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
    15b8:	3d4b594b 	vstrcc.16	s11, [fp, #-150]	; 0xffffff6a	; <UNPREDICTABLE>
    15bc:	67794b3d 			; <UNDEFINED> instruction: 0x67794b3d
    15c0:	594fa059 	stmdbpl	pc, {r0, r3, r4, r6, sp, pc}^	; <UNPREDICTABLE>
    15c4:	bdc9675b 	stcllt	7, cr6, [r9, #364]	; 0x16c
    15c8:	9faf4b67 	svcls	0x00af4b67
    15cc:	00767791 			; <UNDEFINED> instruction: 0x00767791
    15d0:	03020402 	movweq	r0, #9218	; 0x2402
    15d4:	02004a63 	andeq	r4, r0, #405504	; 0x63000
    15d8:	66060104 	strvs	r0, [r6], -r4, lsl #2
    15dc:	58230306 	stmdapl	r3!, {r1, r2, r8, r9}
    15e0:	4b67d921 	blmi	19f7a6c <startup-0x1e608594>
    15e4:	3d3d5986 			; <UNDEFINED> instruction: 0x3d3d5986
    15e8:	003d774c 	eorseq	r7, sp, ip, asr #14
    15ec:	4b030402 	blmi	c25fc <startup-0x1ff3da04>
    15f0:	03040200 	movweq	r0, #16896	; 0x4200
    15f4:	04020057 	streq	r0, [r2], #-87	; 0xffffffa9
    15f8:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    15fc:	4f4c4f4d 	svcmi	0x004c4f4d
    1600:	c9673f4b 	stmdbgt	r7!, {r0, r1, r3, r6, r8, r9, sl, fp, ip, sp}^
    1604:	c9594b5d 	ldmdbgt	r9, {r0, r2, r3, r4, r6, r8, r9, fp, lr}^
    1608:	3ecc754e 	cdpcc	5, 12, cr7, cr12, cr14, {2}
    160c:	4b697776 	blmi	1a5f3ec <startup-0x1e5a0c14>
    1610:	67949591 			; <UNDEFINED> instruction: 0x67949591
    1614:	a35a4c3d 	cmpge	sl, #15616	; 0x3d00
    1618:	c99faf9f 	ldmibgt	pc, {r0, r1, r2, r3, r4, r7, r8, r9, sl, fp, sp, pc}	; <UNPREDICTABLE>
    161c:	084bbbf5 	stmdaeq	fp, {r0, r2, r4, r5, r6, r7, r8, r9, fp, ip, sp, pc}^
    1620:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    1624:	666c0302 	strbtvs	r0, [ip], -r2, lsl #6
    1628:	01040200 	mrseq	r0, R12_usr
    162c:	03066606 	movweq	r6, #26118	; 0x6606
    1630:	3de75817 	stclcc	8, cr5, [r7, #92]!	; 0x5c
    1634:	ad944c3e 	ldcge	12, cr4, [r4, #248]	; 0xf8
    1638:	0013084b 	andseq	r0, r3, fp, asr #16
    163c:	03020402 	movweq	r0, #9218	; 0x2402
    1640:	02005877 	andeq	r5, r0, #7798784	; 0x770000
    1644:	58060104 	stmdapl	r6, {r2, r8}
    1648:	4a0c0306 	bmi	302268 <startup-0x1fcfdd98>
    164c:	676741ae 	strbvs	r4, [r7, -lr, lsr #3]!
    1650:	676d674d 	strbvs	r6, [sp, -sp, asr #14]!
    1654:	3d3d4b68 	vldmdbcc	sp!, {d4-<overflow reg d55>}
    1658:	4b683d3d 	blmi	1a10b54 <startup-0x1e5ef4ac>
    165c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    1660:	3d3d3d68 	ldccc	13, cr3, [sp, #-416]!	; 0xfffffe60
    1664:	3d683d3d 	stclcc	13, cr3, [r8, #-244]!	; 0xffffff0c
    1668:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    166c:	3d3d4b68 	vldmdbcc	sp!, {d4-<overflow reg d55>}
    1670:	4b4d4d3d 	blmi	1354b6c <startup-0x1ecab494>
    1674:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    1678:	3d3d3f3d 	ldccc	15, cr3, [sp, #-244]!	; 0xffffff0c
    167c:	3fa0303f 	svccc	0x00a0303f
    1680:	2f30694b 	svccs	0x0030694b
    1684:	2f3e75be 	svccs	0x003e75be
    1688:	3f3e3d3e 	svccc	0x003e3d3e
    168c:	3e4c5021 	cdpcc	0, 4, cr5, cr12, cr1, {1}
    1690:	0005025b 	andeq	r0, r5, fp, asr r2
    1694:	Address 0x00001694 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5f4e4143 	svcpl	0x004e4143
       4:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
       8:	43007469 	movwmi	r7, #1129	; 0x469
       c:	78526e61 	ldmdavc	r2, {r0, r5, r6, r9, sl, fp, sp, lr}^
      10:	0067734d 	rsbeq	r7, r7, sp, asr #6
      14:	5f4e4143 	svcpl	0x004e4143
      18:	61656c43 	cmnvs	r5, r3, asr #24
      1c:	616c4672 	smcvs	50274	; 0xc462
      20:	78520067 	ldmdavc	r2, {r0, r1, r2, r5, r6}^
      24:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
      28:	00656761 	rsbeq	r6, r5, r1, ror #14
      2c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff5f1 <GPIO_Ports+0xdfffb951>
      30:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
      34:	6164412f 	cmnvs	r4, pc, lsr #2
      38:	4f2f746d 	svcmi	0x002f746d
      3c:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
      40:	2f657669 	svccs	0x00657669
      44:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
      48:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
      4c:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
      50:	2f627548 	svccs	0x00627548
      54:	32544144 	subscc	r4, r4, #68, 2
      58:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
      5c:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
      60:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
      64:	6f6b2f6d 	svcvs	0x006b2f6d
      68:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
      6c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
      70:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      74:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
      78:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
      7c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      80:	5f787834 	svcpl	0x00787834
      84:	50647453 	rsbpl	r7, r4, r3, asr r4
      88:	70697265 	rsbvc	r7, r9, r5, ror #4
      8c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
      90:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
      94:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
      98:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
      9c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
      a0:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
      a4:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
      a8:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff1b0 <GPIO_Ports+0xdfffb510>
      ac:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
      b0:	4300745f 	movwmi	r7, #1119	; 0x45f
      b4:	535f4e41 	cmppl	pc, #1040	; 0x410
      b8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
      bc:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
      c0:	41430074 	hvcmi	12292	; 0x3004
      c4:	79545f4e 	ldmdbvc	r4, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
      c8:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
      cc:	6c730066 	ldclvs	0, cr0, [r3], #-408	; 0xfffffe68
      d0:	73706565 	cmnvc	r0, #423624704	; 0x19400000
      d4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
      d8:	41430073 	hvcmi	12291	; 0x3003
      dc:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
      e0:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
      e4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
      e8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
      ec:	43007463 	movwmi	r7, #1123	; 0x463
      f0:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
      f4:	524f4649 	subpl	r4, pc, #76546048	; 0x4900000
      f8:	61656c65 	cmnvs	r5, r5, ror #24
      fc:	43006573 	movwmi	r6, #1395	; 0x573
     100:	545f4e41 	ldrbpl	r4, [pc], #-3649	; 108 <startup-0x1ffffef8>
     104:	6d6f4354 	stclvs	3, cr4, [pc, #-336]!	; ffffffbc <GPIO_Ports+0xdfffc31c>
     108:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     10c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     110:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     114:	5f656761 	svcpl	0x00656761
     118:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
     11c:	00676e69 	rsbeq	r6, r7, r9, ror #28
     120:	5f4e4143 	svcpl	0x004e4143
     124:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     128:	614d7265 	cmpvs	sp, r5, ror #4
     12c:	64496b73 	strbvs	r6, [r9], #-2931	; 0xfffff48d
     130:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     134:	4d544900 	vldrmi.16	s9, [r4, #-0]	; <UNPREDICTABLE>
     138:	4278525f 	rsbsmi	r5, r8, #-268435451	; 0xf0000005
     13c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     140:	41430072 	hvcmi	12290	; 0x3002
     144:	72545f4e 	subsvc	r5, r4, #312	; 0x138
     148:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
     14c:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
     150:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     154:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     158:	3153425f 	cmpcc	r3, pc, asr r2
     15c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     160:	3253425f 	subscc	r4, r3, #-268435451	; 0xf0000005
     164:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     168:	6f6c2067 	svcvs	0x006c2067
     16c:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     170:	4300746e 	movwmi	r7, #1134	; 0x46e
     174:	425f4e41 	subsmi	r4, pc, #1040	; 0x410
     178:	4e6b6e61 	cdpmi	14, 6, cr6, cr11, cr1, {3}
     17c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
     180:	41430072 	hvcmi	12290	; 0x3002
     184:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     188:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     18c:	6b73614d 	blvs	1cd86c8 <startup-0x1e327938>
     190:	6f4c6449 	svcvs	0x004c6449
     194:	41430077 	hvcmi	12295	; 0x3007
     198:	65475f4e 	strbvs	r5, [r7, #-3918]	; 0xfffff0b2
     19c:	42534c74 	subsmi	r4, r3, #116, 24	; 0x7400
     1a0:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
     1a4:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
     1a8:	6f727245 	svcvs	0x00727245
     1ac:	756f4372 	strbvc	r4, [pc, #-882]!	; fffffe42 <GPIO_Ports+0xdfffc1a2>
     1b0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     1b4:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     1b8:	6f6c2067 	svcvs	0x006c2067
     1bc:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
     1c0:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     1c4:	2064656e 	rsbcs	r6, r4, lr, ror #10
     1c8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     1cc:	5f4e4143 	svcpl	0x004e4143
     1d0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     1d4:	61747300 	cmnvs	r4, r0, lsl #6
     1d8:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
     1dc:	00524c44 	subseq	r4, r2, r4, asr #24
     1e0:	5f4e4143 	svcpl	0x004e4143
     1e4:	4c746547 	cfldr64mi	mvdx6, [r4], #-284	; 0xfffffee4
     1e8:	45747361 	ldrbmi	r7, [r4, #-865]!	; 0xfffffc9f
     1ec:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     1f0:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
     1f4:	414e4500 	cmpmi	lr, r0, lsl #10
     1f8:	00454c42 	subeq	r4, r5, r2, asr #24
     1fc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     200:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     204:	43007375 	movwmi	r7, #885	; 0x375
     208:	575f4e41 	ldrbpl	r4, [pc, -r1, asr #28]
     20c:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
     210:	654e0070 	strbvs	r0, [lr, #-112]	; 0xffffff90
     214:	61745377 	cmnvs	r4, r7, ror r3
     218:	52006574 	andpl	r6, r0, #116, 10	; 0x1d000000
     21c:	00523046 	subseq	r3, r2, r6, asr #32
     220:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     224:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
     228:	4300745f 	movwmi	r7, #1119	; 0x45f
     22c:	435f4e41 	cmpmi	pc, #1040	; 0x410
     230:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
     234:	6172546c 	cmnvs	r2, ip, ror #8
     238:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
     23c:	41430074 	hvcmi	12292	; 0x3004
     240:	6e495f4e 	cdpvs	15, 4, cr5, cr9, cr14, {2}
     244:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
     248:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
     24c:	4c445200 	sfmmi	f5, 2, [r4], {-0}
     250:	41430052 	qdaddmi	r0, r2, r3
     254:	42415f4e 	submi	r5, r1, #312	; 0x138
     258:	54004d4f 	strpl	r4, [r0], #-3407	; 0xfffff2b1
     25c:	73654d78 	cmnvc	r5, #120, 26	; 0x1e00
     260:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     264:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     268:	73654d5f 	cmnvc	r5, #6080	; 0x17c0
     26c:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     270:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
     274:	00676e69 	rsbeq	r6, r7, r9, ror #28
     278:	5f4e4143 	svcpl	0x004e4143
     27c:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
     280:	61745365 	cmnvs	r4, r5, ror #6
     284:	61427472 	hvcvs	10050	; 0x2742
     288:	73006b6e 	movwvc	r6, #2926	; 0xb6e
     28c:	614d7854 	cmpvs	sp, r4, asr r8
     290:	6f426c69 	svcvs	0x00426c69
     294:	41430078 	hvcmi	12296	; 0x3008
     298:	704f5f4e 	subvc	r5, pc, lr, asr #30
     29c:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
     2a0:	4d676e69 	stclmi	14, cr6, [r7, #-420]!	; 0xfffffe5c
     2a4:	5265646f 	rsbpl	r6, r5, #1862270976	; 0x6f000000
     2a8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     2ac:	74007473 	strvc	r7, [r0], #-1139	; 0xfffffb8d
     2b0:	6f656d69 	svcvs	0x00656d69
     2b4:	52007475 	andpl	r7, r0, #1962934272	; 0x75000000
     2b8:	00525444 	subseq	r5, r2, r4, asr #8
     2bc:	52315346 	eorspl	r5, r1, #402653185	; 0x18000001
     2c0:	6f687300 	svcvs	0x00687300
     2c4:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
     2c8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     2cc:	2064656e 	rsbcs	r6, r4, lr, ror #10
     2d0:	00746e69 	rsbseq	r6, r4, r9, ror #28
     2d4:	52314652 	eorspl	r4, r1, #85983232	; 0x5200000
     2d8:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     2dc:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
     2e0:	52726574 	rsbspl	r6, r2, #116, 10	; 0x1d000000
     2e4:	73696765 	cmnvc	r9, #26476544	; 0x1940000
     2e8:	5f726574 	svcpl	0x00726574
     2ec:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     2f0:	00666544 	rsbeq	r6, r6, r4, asr #10
     2f4:	49747845 	ldmdbmi	r4!, {r0, r2, r6, fp, ip, sp, lr}^
     2f8:	46730064 	ldrbtmi	r0, [r3], -r4, rrx
     2fc:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     300:	67655272 			; <UNDEFINED> instruction: 0x67655272
     304:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
     308:	41430072 	hvcmi	12290	; 0x3002
     30c:	72545f4e 	subsvc	r5, r4, #312	; 0x138
     310:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
     314:	46007469 	strmi	r7, [r0], -r9, ror #8
     318:	0052314d 	subseq	r3, r2, sp, asr #2
     31c:	52544454 	subspl	r4, r4, #84, 8	; 0x54000000
     320:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     324:	0054495f 	subseq	r4, r4, pc, asr r9
     328:	5f4e4143 	svcpl	0x004e4143
     32c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     330:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     334:	4649465f 			; <UNDEFINED> instruction: 0x4649465f
     338:	69614d4f 	stmdbvs	r1!, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^
     33c:	786f426c 	stmdavc	pc!, {r2, r3, r5, r6, r9, lr}^	; <UNPREDICTABLE>
     340:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     344:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     348:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     34c:	656c535f 	strbvs	r5, [ip, #-863]!	; 0xfffffca1
     350:	49007065 	stmdbmi	r0, {r0, r2, r5, r6, ip, sp, lr}
     354:	69425f74 	stmdbvs	r2, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     358:	41430074 	hvcmi	12292	; 0x3004
     35c:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     360:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     364:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     368:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     36c:	00666544 	rsbeq	r6, r6, r4, asr #10
     370:	20554e47 	subscs	r4, r5, r7, asr #28
     374:	20393943 	eorscs	r3, r9, r3, asr #18
     378:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
     37c:	30322031 	eorscc	r2, r2, r1, lsr r0
     380:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
     384:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
     388:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
     38c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     390:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
     394:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
     398:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
     39c:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
     3a0:	6172622d 	cmnvs	r2, sp, lsr #4
     3a4:	2068636e 	rsbcs	r6, r8, lr, ror #6
     3a8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     3ac:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
     3b0:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
     3b4:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
     3b8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     3bc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     3c0:	616d2d20 	cmnvs	sp, r0, lsr #26
     3c4:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     3c8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     3cc:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     3d0:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
     3d4:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
     3d8:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
     3dc:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
     3e0:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     3e4:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     3e8:	616d2d20 	cmnvs	sp, r0, lsr #26
     3ec:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     3f0:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     3f4:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     3f8:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     3fc:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
     400:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     404:	00393963 	eorseq	r3, r9, r3, ror #18
     408:	5f4e4143 	svcpl	0x004e4143
     40c:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     410:	754e7265 	strbvc	r7, [lr, #-613]	; 0xfffffd9b
     414:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     418:	6e754600 	cdpvs	6, 7, cr4, cr5, cr0, {0}
     41c:	6f697463 	svcvs	0x00697463
     420:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
     424:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     428:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     42c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     430:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
     434:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     438:	48445400 	stmdami	r4, {sl, ip, lr}^
     43c:	74530052 	ldrbvc	r0, [r3], #-82	; 0xffffffae
     440:	00644964 	rsbeq	r4, r4, r4, ror #18
     444:	31414646 	cmpcc	r1, r6, asr #12
     448:	41430052 	qdaddmi	r0, r2, r3
     44c:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     450:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     454:	6f4c6449 	svcvs	0x004c6449
     458:	79530077 	ldmdbvc	r3, {r0, r1, r2, r4, r5, r6}^
     45c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     460:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
     464:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     468:	4143006b 	cmpmi	r3, fp, rrx
     46c:	4c465f4e 	mcrrmi	15, 4, r5, r6, cr14
     470:	43004741 	movwmi	r4, #1857	; 0x741
     474:	505f4e41 	subspl	r4, pc, r1, asr #28
     478:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
     47c:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
     480:	53455200 	movtpl	r5, #20992	; 0x5200
     484:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     488:	52003044 	andpl	r3, r0, #68	; 0x44
     48c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     490:	31444556 	cmpcc	r4, r6, asr r5
     494:	53455200 	movtpl	r5, #20992	; 0x5200
     498:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     49c:	52003244 	andpl	r3, r0, #68, 4	; 0x40000004
     4a0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     4a4:	33444556 	movtcc	r4, #17750	; 0x4556
     4a8:	53455200 	movtpl	r5, #20992	; 0x5200
     4ac:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     4b0:	77003444 	strvc	r3, [r0, -r4, asr #8]
     4b4:	5f746961 	svcpl	0x00746961
     4b8:	6b616c73 	blvs	185b68c <startup-0x1e7a4974>
     4bc:	736e7500 	cmnvc	lr, #0, 10
     4c0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     4c4:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     4c8:	46007261 	strmi	r7, [r0], -r1, ror #4
     4cc:	4e4f4649 	cdpmi	6, 4, cr4, cr15, cr9, {2}
     4d0:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
     4d4:	68730072 	ldmdavs	r3!, {r1, r4, r5, r6}^
     4d8:	2074726f 	rsbscs	r7, r4, pc, ror #4
     4dc:	00746e69 	rsbseq	r6, r4, r9, ror #28
     4e0:	6f727265 	svcvs	0x00727265
     4e4:	646f6372 	strbtvs	r6, [pc], #-882	; 4ec <startup-0x1ffffb14>
     4e8:	65700065 	ldrbvs	r0, [r0, #-101]!	; 0xffffff9b
     4ec:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     4f0:	74696267 	strbtvc	r6, [r9], #-615	; 0xfffffd99
     4f4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     4f8:	43007375 	movwmi	r7, #885	; 0x375
     4fc:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     500:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     504:	48644972 	stmdami	r4!, {r1, r4, r5, r6, r8, fp, lr}^
     508:	00686769 	rsbeq	r6, r8, r9, ror #14
     50c:	41534944 	cmpmi	r3, r4, asr #18
     510:	00454c42 	subeq	r4, r5, r2, asr #24
     514:	5f4e4143 	svcpl	0x004e4143
     518:	00676552 	rsbeq	r6, r7, r2, asr r5
     51c:	5f4e4143 	svcpl	0x004e4143
     520:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     524:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     528:	00666544 	rsbeq	r6, r6, r4, asr #10
     52c:	5f4e4143 	svcpl	0x004e4143
     530:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     534:	49467265 	stmdbmi	r6, {r0, r2, r5, r6, r9, ip, sp, lr}^
     538:	73414f46 	movtvc	r4, #8006	; 0x1f46
     53c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     540:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     544:	53455200 	movtpl	r5, #20992	; 0x5200
     548:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     54c:	43003544 	movwmi	r3, #1348	; 0x544
     550:	545f4e41 	ldrbpl	r4, [pc], #-3649	; 558 <startup-0x1ffffaa8>
     554:	69614d78 	stmdbvs	r1!, {r3, r4, r5, r6, r8, sl, fp, lr}^
     558:	786f426c 	stmdavc	pc!, {r2, r3, r5, r6, r9, lr}^	; <UNPREDICTABLE>
     55c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     560:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     564:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     568:	4742445f 	smlsldmi	r4, r2, pc, r4	; <UNPREDICTABLE>
     56c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     570:	4300657a 	movwmi	r6, #1402	; 0x57a
     574:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     578:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     57c:	61635372 	smcvs	13618	; 0x3532
     580:	4300656c 	movwmi	r6, #1388	; 0x56c
     584:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     588:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     58c:	646f4d72 	strbtvs	r4, [pc], #-3442	; 594 <startup-0x1ffffa6c>
     590:	41430065 	cmpmi	r3, r5, rrx
     594:	704f5f4e 	subvc	r5, pc, lr, asr #30
     598:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
     59c:	4d676e69 	stclmi	14, cr6, [r7, #-420]!	; 0xfffffe5c
     5a0:	0065646f 	rsbeq	r6, r5, pc, ror #8
     5a4:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     5a8:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
     5ac:	5200745f 	andpl	r7, r0, #1593835520	; 0x5f000000
     5b0:	00524844 	subseq	r4, r2, r4, asr #16
     5b4:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     5b8:	00706d74 	rsbseq	r6, r0, r4, ror sp
     5bc:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
     5c0:	5f323374 	svcpl	0x00323374
     5c4:	41430074 	hvcmi	12292	; 0x3004
     5c8:	57415f4e 	strbpl	r5, [r1, -lr, asr #30]
     5cc:	73004d55 	movwvc	r4, #3413	; 0xd55
     5d0:	4f464946 	svcmi	0x00464946
     5d4:	6c69614d 	stfvse	f6, [r9], #-308	; 0xfffffecc
     5d8:	00786f42 	rsbseq	r6, r8, r2, asr #30
     5dc:	5f4e4143 	svcpl	0x004e4143
     5e0:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     5e4:	5367616c 	cmnpl	r7, #108, 2
     5e8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     5ec:	41430073 	hvcmi	12291	; 0x3003
     5f0:	46525f4e 	ldrbmi	r5, [r2], -lr, asr #30
     5f4:	43004d4c 	movwmi	r4, #3404	; 0xd4c
     5f8:	495f4e41 	ldmdbmi	pc, {r0, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     5fc:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
     600:	00676966 	rsbeq	r6, r7, r6, ror #18
     604:	784e4143 	stmdavc	lr, {r0, r1, r6, r8, lr}^
     608:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     60c:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
     610:	41726574 	cmnmi	r2, r4, ror r5
     614:	76697463 	strbtvc	r7, [r9], -r3, ror #8
     618:	6f697461 	svcvs	0x00697461
     61c:	4143006e 	cmpmi	r3, lr, rrx
     620:	65525f4e 	ldrbvs	r5, [r2, #-3918]	; 0xfffff0b2
     624:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     628:	72540065 	subsvc	r0, r4, #101	; 0x65
     62c:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
     630:	614d7469 	cmpvs	sp, r9, ror #8
     634:	6f626c69 	svcvs	0x00626c69
     638:	68430078 	stmdavs	r3, {r3, r4, r5, r6}^
     63c:	496b6365 	stmdbmi	fp!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     640:	61745354 	cmnvs	r4, r4, asr r3
     644:	00737574 	rsbseq	r7, r3, r4, ror r5
     648:	546e6143 	strbtpl	r6, [lr], #-323	; 0xfffffebd
     64c:	67734d78 			; <UNDEFINED> instruction: 0x67734d78
     650:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     654:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
     658:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
     65c:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
     660:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
     664:	43007469 	movwmi	r7, #1129	; 0x469
     668:	545f4e41 	ldrbpl	r4, [pc], #-3649	; 670 <startup-0x1ffff990>
     66c:	00504658 	subseq	r4, r0, r8, asr r6
     670:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
     674:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
     678:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
     67c:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     680:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     684:	4354545f 	cmpmi	r4, #1593835520	; 0x5f000000
     688:	4143004d 	cmpmi	r3, sp, asr #32
     68c:	65475f4e 	strbvs	r5, [r7, #-3918]	; 0xfffff0b2
     690:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
     694:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
     698:	6f727245 	svcvs	0x00727245
     69c:	756f4372 	strbvc	r4, [pc, #-882]!	; 332 <startup-0x1ffffcce>
     6a0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     6a4:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
     6a8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     6ac:	64415c73 	strbvs	r5, [r1], #-3187	; 0xfffff38d
     6b0:	5c746d61 	ldclpl	13, cr6, [r4], #-388	; 0xfffffe7c
     6b4:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     6b8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     6bc:	6b6f445c 	blvs	1bd1834 <startup-0x1e42e7cc>
     6c0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     6c4:	69475c74 	stmdbvs	r7, {r2, r4, r5, r6, sl, fp, ip, lr}^
     6c8:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     6cc:	5441445c 	strbpl	r4, [r1], #-1116	; 0xfffffba4
     6d0:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     6d4:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     6d8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     6dc:	6b5c6d65 	blvs	171bc78 <startup-0x1e8e4388>
     6e0:	445c646f 	ldrbmi	r6, [ip], #-1135	; 0xfffffb91
     6e4:	00726f6f 	rsbseq	r6, r2, pc, ror #30
     6e8:	746c6966 	strbtvc	r6, [ip], #-2406	; 0xfffff69a
     6ec:	6e5f7265 	cdpvs	2, 5, cr7, cr15, cr5, {3}
     6f0:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
     6f4:	69625f72 	stmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     6f8:	6f705f74 	svcvs	0x00705f74
     6fc:	41430073 	hvcmi	12291	; 0x3003
     700:	4a535f4e 	bmi	14d8440 <startup-0x1eb27bc0>
     704:	61770057 	cmnvs	r7, r7, asr r0
     708:	7075656b 	rsbsvc	r6, r5, fp, ror #10
     70c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     710:	43007375 	movwmi	r7, #885	; 0x375
     714:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     718:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     71c:	696e4972 	stmdbvs	lr!, {r1, r4, r5, r6, r8, fp, lr}^
     720:	41430074 	hvcmi	12292	; 0x3004
     724:	414e5f4e 	cmpmi	lr, lr, asr #30
     728:	77005452 	smlsdvc	r0, r2, r4, r5
     72c:	5f746961 	svcpl	0x00746961
     730:	006b6361 	rsbeq	r6, fp, r1, ror #6
     734:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
     738:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     73c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     740:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     744:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     748:	564e0066 	strbpl	r0, [lr], -r6, rrx
     74c:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     750:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     754:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
     758:	646d436c 	strbtvs	r4, [sp], #-876	; 0xfffffc94
     75c:	73795300 	cmnvc	r9, #0, 6
     760:	6b636954 	blvs	18dacb8 <startup-0x1e725348>
     764:	4b4c435f 	blmi	13114e8 <startup-0x1eceeb18>
     768:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     76c:	4e006563 	cfsh32mi	mvfx6, mvfx0, #51
     770:	5f434956 	svcpl	0x00434956
     774:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     778:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     77c:	4e007463 	cdpmi	4, 0, cr7, cr0, cr3, {3}
     780:	5f434956 	svcpl	0x00434956
     784:	6f697250 	svcvs	0x00697250
     788:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     78c:	756f7247 	strbvc	r7, [pc, #-583]!	; 54d <startup-0x1ffffab3>
     790:	4d4d0070 	stclmi	0, cr0, [sp, #-448]	; 0xfffffe40
     794:	00524146 	subseq	r4, r2, r6, asr #2
     798:	4349564e 	movtmi	r5, #38478	; 0x964e
     79c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     7a0:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
     7a4:	65727070 	ldrbvs	r7, [r2, #-112]!	; 0xffffff90
     7a8:	55504300 	ldrbpl	r4, [r0, #-768]	; 0xfffffd00
     7ac:	49004449 	stmdbmi	r0, {r0, r3, r6, sl, lr}
     7b0:	00524553 	subseq	r4, r2, r3, asr r5
     7b4:	5f424353 	svcpl	0x00424353
     7b8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     7bc:	49545300 	ldmdbmi	r4, {r8, r9, ip, lr}^
     7c0:	43490052 	movtmi	r0, #36946	; 0x9052
     7c4:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     7c8:	56524553 			; <UNDEFINED> instruction: 0x56524553
     7cc:	00314445 	eorseq	r4, r1, r5, asr #8
     7d0:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
     7d4:	42007465 	andmi	r7, r0, #1694498816	; 0x65000000
     7d8:	00524146 	subseq	r4, r2, r6, asr #2
     7dc:	52534643 	subspl	r4, r3, #70254592	; 0x4300000
     7e0:	52494100 	subpl	r4, r9, #0, 2
     7e4:	43005243 	movwmi	r5, #579	; 0x243
     7e8:	004c5254 	subeq	r5, ip, r4, asr r2
     7ec:	4349564e 	movtmi	r5, #38478	; 0x964e
     7f0:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     7f4:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
     7f8:	6154726f 	cmpvs	r4, pc, ror #4
     7fc:	00656c62 	rsbeq	r6, r5, r2, ror #24
     800:	52504349 	subspl	r4, r0, #603979777	; 0x24000001
     804:	4c414300 	mcrrmi	3, 0, r4, r1, cr0
     808:	53004249 	movwpl	r4, #585	; 0x249
     80c:	52534348 	subspl	r4, r3, #72, 6	; 0x20000001
     810:	45434900 	strbmi	r4, [r3, #-2304]	; 0xfffff700
     814:	6d740052 	ldclvs	0, cr0, [r4, #-328]!	; 0xfffffeb8
     818:	62757370 	rsbsvs	r7, r5, #112, 6	; 0xc0000001
     81c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     820:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     824:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     828:	6f43504c 	svcvs	0x0043504c
     82c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     830:	73795300 	cmnvc	r9, #0, 6
     834:	6b636954 	blvs	18dad8c <startup-0x1e725274>
     838:	4b4c435f 	blmi	13115bc <startup-0x1eceea44>
     83c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     840:	6f436563 	svcvs	0x00436563
     844:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     848:	73795300 	cmnvc	r9, #0, 6
     84c:	6b636954 	blvs	18dada4 <startup-0x1e72525c>
     850:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     854:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
     858:	69727070 	ldmdbvs	r2!, {r4, r5, r6, ip, sp, lr}^
     85c:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
     860:	54560079 	ldrbpl	r0, [r6], #-121	; 0xffffff87
     864:	4900524f 	stmdbmi	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
     868:	00524153 	subseq	r4, r2, r3, asr r1
     86c:	52505349 	subspl	r5, r0, #603979777	; 0x24000001
     870:	53464400 	movtpl	r4, #25600	; 0x6400
     874:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
     878:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     87c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     880:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
     884:	564e006c 	strbpl	r0, [lr], -ip, rrx
     888:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     88c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     890:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
     894:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
     898:	6f697250 	svcvs	0x00697250
     89c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     8a0:	53464800 	movtpl	r4, #26624	; 0x6800
     8a4:	4d4d0052 	stclmi	0, cr0, [sp, #-328]	; 0xfffffeb8
     8a8:	4e005246 	cdpmi	2, 0, cr5, cr0, cr6, {2}
     8ac:	5f434956 	svcpl	0x00434956
     8b0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     8b4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     8b8:	52495f43 	subpl	r5, r9, #268	; 0x10c
     8bc:	61684351 	cmnvs	r8, r1, asr r3
     8c0:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     8c4:	65657250 	strbvs	r7, [r5, #-592]!	; 0xfffffdb0
     8c8:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
     8cc:	72506e6f 	subsvc	r6, r0, #1776	; 0x6f0
     8d0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     8d4:	4e007974 			; <UNDEFINED> instruction: 0x4e007974
     8d8:	5f434956 	svcpl	0x00434956
     8dc:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
     8e0:	00626154 	rsbeq	r6, r2, r4, asr r1
     8e4:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xfffff0b4
     8e8:	2f3a4300 	svccs	0x003a4300
     8ec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     8f0:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
     8f4:	2f746d61 	svccs	0x00746d61
     8f8:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     8fc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     900:	6b6f442f 	blvs	1bd19c4 <startup-0x1e42e63c>
     904:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     908:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     90c:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     910:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
     914:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     918:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     91c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     920:	6b2f6d65 	blvs	bdbebc <startup-0x1f424144>
     924:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 770 <startup-0x1ffff890>
     928:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     92c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     930:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     934:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     938:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     93c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     940:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     944:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     948:	445f6870 	ldrbmi	r6, [pc], #-2160	; 950 <startup-0x1ffff6b0>
     94c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     950:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     954:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     958:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
     95c:	53464100 	movtpl	r4, #24832	; 0x6100
     960:	6f4c0052 	svcvs	0x004c0052
     964:	776f5077 			; <UNDEFINED> instruction: 0x776f5077
     968:	6f4d7265 	svcvs	0x004d7265
     96c:	43006564 	movwmi	r6, #1380	; 0x564
     970:	52434150 	subpl	r4, r3, #80, 2
     974:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     978:	72505f43 	subsvc	r5, r0, #268	; 0x10c
     97c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     980:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
     984:	4370756f 	cmnmi	r0, #465567744	; 0x1bc00000
     988:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     98c:	65730067 	ldrbvs	r0, [r3, #-103]!	; 0xffffff99
     990:	6f697373 	svcvs	0x00697373
     994:	0044496e 	subeq	r4, r4, lr, ror #18
     998:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     99c:	5f64695f 	svcpl	0x0064695f
     9a0:	6f640030 	svcvs	0x00640030
     9a4:	695f726f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     9a8:	00315f64 	eorseq	r5, r1, r4, ror #30
     9ac:	5467736d 	strbtpl	r7, [r7], #-877	; 0xfffffc93
     9b0:	00657079 	rsbeq	r7, r5, r9, ror r0
     9b4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     9b8:	7400305f 	strvc	r3, [r0], #-95	; 0xffffffa1
     9bc:	5f656d69 	svcpl	0x00656d69
     9c0:	736d0031 	cmnvc	sp, #49	; 0x31
     9c4:	6d754e67 	ldclvs	14, cr4, [r5, #-412]!	; 0xfffffe64
     9c8:	2f3a4300 	svccs	0x003a4300
     9cc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     9d0:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
     9d4:	2f746d61 	svccs	0x00746d61
     9d8:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     9dc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     9e0:	6b6f442f 	blvs	1bd1aa4 <startup-0x1e42e55c>
     9e4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     9e8:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     9ec:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     9f0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
     9f4:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     9f8:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     9fc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     a00:	6b2f6d65 	blvs	bdbf9c <startup-0x1f424064>
     a04:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 850 <startup-0x1ffff7b0>
     a08:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
     a0c:	6e454e41 	cdpvs	14, 4, cr4, cr5, cr1, {2}
     a10:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     a14:	6500632e 	strvs	r6, [r0, #-814]	; 0xfffffcd2
     a18:	646f636e 	strbtvs	r6, [pc], #-878	; a20 <startup-0x1ffff5e0>
     a1c:	73615f65 	cmnvc	r1, #404	; 0x194
     a20:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     a24:	0064695f 	rsbeq	r6, r4, pc, asr r9
     a28:	61746164 	cmnvs	r4, r4, ror #2
     a2c:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
     a30:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     a34:	636e6500 	cmnvs	lr, #0, 10
     a38:	5f65646f 	svcpl	0x0065646f
     a3c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     a40:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     a44:	00676966 	rsbeq	r6, r7, r6, ror #18
     a48:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
     a4c:	636f6c00 	cmnvs	pc, #0, 24
     a50:	0064656b 	rsbeq	r6, r4, fp, ror #10
     a54:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
     a58:	745f6563 	ldrbvc	r6, [pc], #-1379	; a60 <startup-0x1ffff5a0>
     a5c:	00657079 	rsbeq	r7, r5, r9, ror r0
     a60:	65436f74 	strbvs	r6, [r3, #-3956]	; 0xfffff08c
     a64:	6172746e 	cmnvs	r2, lr, ror #8
     a68:	6e65006c 	cdpvs	0, 6, cr0, cr5, cr12, {3}
     a6c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     a70:	7165725f 	cmnvc	r5, pc, asr r2
     a74:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
     a78:	0064695f 	rsbeq	r6, r4, pc, asr r9
     a7c:	635f6f74 	cmpvs	pc, #116, 30	; 0x1d0
     a80:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
     a84:	65006c61 	strvs	r6, [r0, #-3169]	; 0xfffff39f
     a88:	646f636e 	strbtvs	r6, [pc], #-878	; a90 <startup-0x1ffff570>
     a8c:	69645f65 	stmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     a90:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
     a94:	635f6563 	cmpvs	pc, #415236096	; 0x18c00000
     a98:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     a9c:	65740067 	ldrbvs	r0, [r4, #-103]!	; 0xffffff99
     aa0:	695f706d 	ldmdbvs	pc, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
     aa4:	65680064 	strbvs	r0, [r8, #-100]!	; 0xffffff9c
     aa8:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
     aac:	6c617600 	stclvs	6, cr7, [r1], #-0
     ab0:	305f6575 	subscc	r6, pc, r5, ror r5	; <UNPREDICTABLE>
     ab4:	6c617600 	stclvs	6, cr7, [r1], #-0
     ab8:	315f6575 	cmpcc	pc, r5, ror r5	; <UNPREDICTABLE>
     abc:	61654800 	cmnvs	r5, r0, lsl #16
     ac0:	00726564 	rsbseq	r6, r2, r4, ror #10
     ac4:	4f495047 	svcmi	0x00495047
     ac8:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     acc:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     ad0:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
     ad4:	00736f70 	rsbseq	r6, r3, r0, ror pc
     ad8:	4f495047 	svcmi	0x00495047
     adc:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     ae0:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
     ae4:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
     ae8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     aec:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
     af0:	754f6461 	strbvc	r6, [pc, #-1121]	; 697 <startup-0x1ffff969>
     af4:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
     af8:	61746144 	cmnvs	r4, r4, asr #2
     afc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     b00:	646f4d4f 	strbtvs	r4, [pc], #-3407	; b08 <startup-0x1ffff4f8>
     b04:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     b08:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     b0c:	50470066 	subpl	r0, r7, r6, rrx
     b10:	415f4f49 	cmpmi	pc, r9, asr #30
     b14:	65740046 	ldrbvs	r0, [r4, #-70]!	; 0xffffffba
     b18:	4700706d 	strmi	r7, [r0, -sp, rrx]
     b1c:	5f4f4950 	svcpl	0x004f4950
     b20:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     b24:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
     b28:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
     b2c:	61567469 	cmpvs	r6, r9, ror #8
     b30:	5047006c 	subpl	r0, r7, ip, rrx
     b34:	4f5f4f49 	svcmi	0x005f4f49
     b38:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     b3c:	00444f5f 	subeq	r4, r4, pc, asr pc
     b40:	5f746942 	svcpl	0x00746942
     b44:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     b48:	50470054 	subpl	r0, r7, r4, asr r0
     b4c:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
     b50:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     b54:	00746942 	rsbseq	r6, r4, r2, asr #18
     b58:	4f495047 	svcmi	0x00495047
     b5c:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     b60:	47006570 	smlsdxmi	r0, r0, r5, r6
     b64:	5f4f4950 	svcpl	0x004f4950
     b68:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     b6c:	0046415f 	subeq	r4, r6, pc, asr r1
     b70:	4f495047 	svcmi	0x00495047
     b74:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     b78:	73746942 	cmnvc	r4, #1081344	; 0x108000
     b7c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     b80:	70535f4f 	subsvc	r5, r3, pc, asr #30
     b84:	00646565 	rsbeq	r6, r4, r5, ror #10
     b88:	4f495047 	svcmi	0x00495047
     b8c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     b90:	50470074 	subpl	r0, r7, r4, ror r0
     b94:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; a78 <startup-0x1ffff588>
     b98:	5f65646f 	svcpl	0x0065646f
     b9c:	47004e41 	strmi	r4, [r0, -r1, asr #28]
     ba0:	5f4f4950 	svcpl	0x004f4950
     ba4:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     ba8:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
     bac:	434c0073 	movtmi	r0, #49267	; 0xc073
     bb0:	4700524b 	strmi	r5, [r0, -fp, asr #4]
     bb4:	4f4f4950 	svcmi	0x004f4950
     bb8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     bbc:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     bc0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     bc4:	59544f00 	ldmdbpl	r4, {r8, r9, sl, fp, lr}^
     bc8:	00524550 	subseq	r4, r2, r0, asr r5
     bcc:	552f3a43 	strpl	r3, [pc, #-2627]!	; 191 <startup-0x1ffffe6f>
     bd0:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     bd4:	6164412f 	cmnvs	r4, pc, lsr #2
     bd8:	4f2f746d 	svcmi	0x002f746d
     bdc:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     be0:	2f657669 	svccs	0x00657669
     be4:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     be8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     bec:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     bf0:	2f627548 	svccs	0x00627548
     bf4:	32544144 	subscc	r4, r4, #68, 2
     bf8:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     bfc:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     c00:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     c04:	6f6b2f6d 	svcvs	0x006b2f6d
     c08:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
     c0c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     c10:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     c14:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     c18:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     c1c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     c20:	5f787834 	svcpl	0x00787834
     c24:	50647453 	rsbpl	r7, r4, r3, asr r4
     c28:	70697265 	rsbvc	r7, r9, r5, ror #4
     c2c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     c30:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     c34:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     c38:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     c3c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     c40:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
     c44:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     c48:	50470063 	subpl	r0, r7, r3, rrx
     c4c:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; b30 <startup-0x1ffff4d0>
     c50:	5f65646f 	svcpl	0x0065646f
     c54:	0054554f 	subseq	r5, r4, pc, asr #10
     c58:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
     c5c:	50470052 	subpl	r0, r7, r2, asr r0
     c60:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; b44 <startup-0x1ffff4bc>
     c64:	5f65646f 	svcpl	0x0065646f
     c68:	47004e49 	strmi	r4, [r0, -r9, asr #28]
     c6c:	5f4f4950 	svcpl	0x004f4950
     c70:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
     c74:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
     c78:	48525253 	ldmdami	r2, {r0, r1, r4, r6, r9, ip, lr}^
     c7c:	444f4d00 	strbmi	r4, [pc], #-3328	; c84 <startup-0x1ffff37c>
     c80:	47005245 	strmi	r5, [r0, -r5, asr #4]
     c84:	5f4f4950 	svcpl	0x004f4950
     c88:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     c8c:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
     c90:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
     c94:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
     c98:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     c9c:	544f5f4f 	strbpl	r5, [pc], #-3919	; ca4 <startup-0x1ffff35c>
     ca0:	5f657079 	svcpl	0x00657079
     ca4:	47005050 	smlsdmi	r0, r0, r0, r5
     ca8:	5f4f4950 	svcpl	0x004f4950
     cac:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     cb0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     cb4:	50007463 	andpl	r7, r0, r3, ror #8
     cb8:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
     cbc:	47006c61 	strmi	r6, [r0, -r1, ror #24]
     cc0:	5f4f4950 	svcpl	0x004f4950
     cc4:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
     cc8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     ccc:	50470065 	subpl	r0, r7, r5, rrx
     cd0:	525f4f49 	subspl	r4, pc, #292	; 0x124
     cd4:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     cd8:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
     cdc:	61746144 	cmnvs	r4, r4, asr #2
     ce0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     ce4:	61465f4f 	cmpvs	r6, pc, asr #30
     ce8:	535f7473 	cmppl	pc, #1929379840	; 0x73000000
     cec:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     cf0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     cf4:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     cf8:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
     cfc:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
     d00:	00676966 	rsbeq	r6, r7, r6, ror #18
     d04:	41746942 	cmnmi	r4, r2, asr #18
     d08:	6f697463 	svcvs	0x00697463
     d0c:	7563006e 	strbvc	r0, [r3, #-110]!	; 0xffffff92
     d10:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     d14:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
     d18:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     d1c:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
     d20:	00657469 	rsbeq	r7, r5, r9, ror #8
     d24:	4f495047 	svcmi	0x00495047
     d28:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
     d2c:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     d30:	47006465 	strmi	r6, [r0, -r5, ror #8]
     d34:	5f4f4950 	svcpl	0x004f4950
     d38:	6964654d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
     d3c:	535f6d75 	cmppl	pc, #7488	; 0x1d40
     d40:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     d44:	50534f00 	subspl	r4, r3, r0, lsl #30
     d48:	52444545 	subpl	r4, r4, #289406976	; 0x11400000
     d4c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     d50:	4700784f 	strmi	r7, [r0, -pc, asr #16]
     d54:	534f4950 	movtpl	r4, #63824	; 0xf950
     d58:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     d5c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     d60:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     d64:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     d68:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     d6c:	445f6450 	ldrbmi	r6, [pc], #-1104	; d74 <startup-0x1ffff28c>
     d70:	004e574f 	subeq	r5, lr, pc, asr #14
     d74:	4f495047 	svcmi	0x00495047
     d78:	5075505f 	rsbspl	r5, r5, pc, asr r0
     d7c:	4f4e5f64 	svcmi	0x004e5f64
     d80:	4c4c5550 	cfstr64mi	mvdx5, [ip], {80}	; 0x50
     d84:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     d88:	6f545f4f 	svcvs	0x00545f4f
     d8c:	656c6767 	strbvs	r6, [ip, #-1895]!	; 0xfffff899
     d90:	73746942 	cmnvc	r4, #1081344	; 0x108000
     d94:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     d98:	00325f70 	eorseq	r5, r2, r0, ror pc
     d9c:	4f495047 	svcmi	0x00495047
     da0:	5075505f 	rsbspl	r5, r5, pc, asr r0
     da4:	50470064 	subpl	r0, r7, r4, rrx
     da8:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     dac:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
     db0:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     db4:	47006665 	strmi	r6, [r0, -r5, ror #12]
     db8:	5f4f4950 	svcpl	0x004f4950
     dbc:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     dc0:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     dc4:	47006465 	strmi	r6, [r0, -r5, ror #8]
     dc8:	504f4950 	subpl	r4, pc, r0, asr r9	; <UNPREDICTABLE>
     dcc:	5f645075 	svcpl	0x00645075
     dd0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     dd4:	00666544 	rsbeq	r6, r6, r4, asr #10
     dd8:	4f495047 	svcmi	0x00495047
     ddc:	5075505f 	rsbspl	r5, r5, pc, asr r0
     de0:	50555f64 	subspl	r5, r5, r4, ror #30
     de4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     de8:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     dec:	4346416e 	movtmi	r4, #24942	; 0x616e
     df0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     df4:	53420067 	movtpl	r0, #8295	; 0x2067
     df8:	004c5252 	subeq	r5, ip, r2, asr r2
     dfc:	4f495047 	svcmi	0x00495047
     e00:	6165525f 	cmnvs	r5, pc, asr r2
     e04:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xfffff09c
     e08:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
     e0c:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
     e10:	47007469 	strmi	r7, [r0, -r9, ror #8]
     e14:	5f4f4950 	svcpl	0x004f4950
     e18:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     e1c:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
     e20:	0054495f 	subseq	r4, r4, pc, asr r9
     e24:	5f474e52 	svcpl	0x00474e52
     e28:	6f435449 	svcvs	0x00435449
     e2c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     e30:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
     e34:	646d435f 	strbtvs	r4, [sp], #-863	; 0xfffffca1
     e38:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
     e3c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     e40:	646e6152 	strbtvs	r6, [lr], #-338	; 0xfffffeae
     e44:	754e6d6f 	strbvc	r6, [lr, #-3439]	; 0xfffff291
     e48:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     e4c:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
     e50:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     e54:	0074696e 	rsbseq	r6, r4, lr, ror #18
     e58:	5f474e52 	svcpl	0x00474e52
     e5c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     e60:	00666544 	rsbeq	r6, r6, r4, asr #10
     e64:	552f3a43 	strpl	r3, [pc, #-2627]!	; 429 <startup-0x1ffffbd7>
     e68:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     e6c:	6164412f 	cmnvs	r4, pc, lsr #2
     e70:	4f2f746d 	svcmi	0x002f746d
     e74:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     e78:	2f657669 	svccs	0x00657669
     e7c:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     e80:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     e84:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     e88:	2f627548 	svccs	0x00627548
     e8c:	32544144 	subscc	r4, r4, #68, 2
     e90:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     e94:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     e98:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     e9c:	6f6b2f6d 	svcvs	0x006b2f6d
     ea0:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
     ea4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     ea8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     eac:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     eb0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     eb4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     eb8:	5f787834 	svcpl	0x00787834
     ebc:	50647453 	rsbpl	r7, r4, r3, asr r4
     ec0:	70697265 	rsbvc	r7, r9, r5, ror #4
     ec4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     ec8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     ecc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     ed0:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     ed4:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     ed8:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
     edc:	632e676e 			; <UNDEFINED> instruction: 0x632e676e
     ee0:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
     ee4:	414c465f 	cmpmi	ip, pc, asr r6
     ee8:	4e520047 	cdpmi	0, 5, cr0, cr2, cr7, {2}
     eec:	6c435f47 	mcrrvs	15, 4, r5, r3, cr7
     ef0:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
     ef4:	0067616c 	rsbeq	r6, r7, ip, ror #2
     ef8:	5f474e52 	svcpl	0x00474e52
     efc:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     f00:	61745354 	cmnvs	r4, r4, asr r3
     f04:	00737574 	rsbseq	r7, r3, r4, ror r5
     f08:	5f474e52 	svcpl	0x00474e52
     f0c:	61656c43 	cmnvs	r5, r3, asr #24
     f10:	50544972 	subspl	r4, r4, r2, ror r9
     f14:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     f18:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     f1c:	4e520074 	mrcmi	0, 2, r0, cr2, cr4, {3}
     f20:	65475f47 	strbvs	r5, [r7, #-3911]	; 0xfffff0b9
     f24:	616c4674 	smcvs	50276	; 0xc464
     f28:	61745367 	cmnvs	r4, r7, ror #6
     f2c:	00737574 	rsbseq	r7, r3, r4, ror r5
     f30:	706c6c70 	rsbvc	r6, ip, r0, ror ip
     f34:	43545200 	cmpmi	r4, #0, 4
     f38:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
     f3c:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     f40:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     f44:	32495458 	subcc	r5, r9, #88, 8	; 0x58000000
     f48:	5152495f 	cmppl	r2, pc, asr r9
     f4c:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     f50:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     f54:	61657274 	smcvs	22308	; 0x5724
     f58:	495f366d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     f5c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     f60:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     f64:	5f50555f 	svcpl	0x0050555f
     f68:	314d4954 	cmpcc	sp, r4, asr r9
     f6c:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     f70:	50006e51 	andpl	r6, r0, r1, asr lr
     f74:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     f78:	47464353 	smlsldmi	r4, r6, r3, r3
     f7c:	43520052 	cmpmi	r2, #82	; 0x52
     f80:	32495f43 	subcc	r5, r9, #268	; 0x10c
     f84:	4b4c4353 	blmi	1311cd8 <startup-0x1ecee328>
     f88:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     f8c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     f90:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     f94:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
     f98:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
     f9c:	71657246 	cmnvc	r5, r6, asr #4
     fa0:	414d4400 	cmpmi	sp, r0, lsl #8
     fa4:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     fa8:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     fac:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     fb0:	48006e51 	stmdami	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     fb4:	5f4b4c43 	svcpl	0x004b4c43
     fb8:	71657246 	cmnvc	r5, r6, asr #4
     fbc:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
     fc0:	50530079 	subspl	r0, r3, r9, ror r0
     fc4:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     fc8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     fcc:	53414c46 	movtpl	r4, #7238	; 0x1c46
     fd0:	52495f48 	subpl	r5, r9, #72, 30	; 0x120
     fd4:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     fd8:	5f494d43 	svcpl	0x00494d43
     fdc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     fe0:	43435200 	movtmi	r5, #12800	; 0x3200
     fe4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     fe8:	72655032 	rsbvc	r5, r5, #50	; 0x32
     fec:	43687069 	cmnmi	r8, #105	; 0x69
     ff0:	6b636f6c 	blvs	18dcda8 <startup-0x1e723258>
     ff4:	6f4d504c 	svcvs	0x004d504c
     ff8:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     ffc:	43520064 	cmpmi	r2, #100	; 0x64
    1000:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1004:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    1008:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    100c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1010:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    1014:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1018:	6900646d 	stmdbvs	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    101c:	5f74696e 	svcpl	0x0074696e
    1020:	00676e72 	rsbeq	r6, r7, r2, ror lr
    1024:	5f434352 	svcpl	0x00434352
    1028:	31425041 	cmpcc	r2, r1, asr #32
    102c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1030:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    1034:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1038:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    103c:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; f38 <startup-0x1ffff0c8>
    1040:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1044:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
    1048:	5152495f 	cmppl	r2, pc, asr r9
    104c:	4352006e 	cmpmi	r2, #110	; 0x6e
    1050:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
    1054:	4b4c4343 	blmi	1311d68 <startup-0x1ecee298>
    1058:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    105c:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1060:	415f4343 	cmpmi	pc, r3, asr #6
    1064:	50324248 	eorspl	r4, r2, r8, asr #4
    1068:	70697265 	rsbvc	r7, r9, r5, ror #4
    106c:	6f6c4368 	svcvs	0x006c4368
    1070:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    1074:	65640064 	strbvs	r0, [r4, #-100]!	; 0xffffff9c
    1078:	0079616c 	rsbseq	r6, r9, ip, ror #2
    107c:	5f434352 	svcpl	0x00434352
    1080:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    1084:	6d435332 	stclvs	3, cr5, [r3, #-200]	; 0xffffff38
    1088:	43520064 	cmpmi	r2, #100	; 0x64
    108c:	43485f43 	movtmi	r5, #36675	; 0x8f43
    1090:	43004b4c 	movwmi	r4, #2892	; 0xb4c
    1094:	5f324e41 	svcpl	0x00324e41
    1098:	5f305852 	svcpl	0x00305852
    109c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    10a0:	41535500 	cmpmi	r3, r0, lsl #10
    10a4:	5f365452 	svcpl	0x00365452
    10a8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    10ac:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    10b0:	616c5f65 	cmnvs	ip, r5, ror #30
    10b4:	53006d72 	movwpl	r6, #3442	; 0xd72
    10b8:	5f324950 	svcpl	0x00324950
    10bc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    10c0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    10c4:	52425f38 	subpl	r5, r2, #56, 30	; 0xe0
    10c8:	49545f4b 	ldmdbmi	r4, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
    10cc:	5f32314d 	svcpl	0x0032314d
    10d0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    10d4:	42484100 	submi	r4, r8, #0, 2
    10d8:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
    10dc:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
    10e0:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    10e4:	4c504941 	mrrcmi	9, 4, r4, r0, cr1	; <UNPREDICTABLE>
    10e8:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    10ec:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xfffff3bd
    10f0:	6f437669 	svcvs	0x00437669
    10f4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    10f8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    10fc:	50475f74 	subpl	r5, r7, r4, ror pc
    1100:	505f4f49 	subspl	r4, pc, r9, asr #30
    1104:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
    1108:	73795300 	cmnvc	r9, #0, 6
    110c:	6b636954 	blvs	18db664 <startup-0x1e72499c>
    1110:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
    1114:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1118:	43435200 	movtmi	r5, #12800	; 0x3200
    111c:	44544c5f 	ldrbmi	r4, [r4], #-3167	; 0xfffff3a1
    1120:	4b4c4343 	blmi	1311e34 <startup-0x1ecee1cc>
    1124:	43766944 	cmnmi	r6, #68, 18	; 0x110000
    1128:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    112c:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    1130:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    1134:	61657274 	smcvs	22308	; 0x5724
    1138:	495f356d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
    113c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1140:	5f434352 	svcpl	0x00434352
    1144:	33424841 	movtcc	r4, #10305	; 0x2841
    1148:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    114c:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    1150:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1154:	5400646d 	strpl	r6, [r0], #-1133	; 0xfffffb93
    1158:	5f314d49 	svcpl	0x00314d49
    115c:	5f475254 	svcpl	0x00475254
    1160:	5f4d4f43 	svcpl	0x004d4f43
    1164:	314d4954 	cmpcc	sp, r4, asr r9
    1168:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    116c:	72006e51 	andvc	r6, r0, #1296	; 0x510
    1170:	00646e61 	rsbeq	r6, r4, r1, ror #28
    1174:	5f434352 	svcpl	0x00434352
    1178:	4b4c4350 	blmi	1311ec0 <startup-0x1ecee140>
    117c:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    1180:	00676966 	rsbeq	r6, r7, r6, ror #18
    1184:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    1188:	626c6f72 	rsbvs	r6, ip, #456	; 0x1c8
    118c:	00737469 	rsbseq	r7, r3, r9, ror #8
    1190:	5f434352 	svcpl	0x00434352
    1194:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1198:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
    119c:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    11a0:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
    11a4:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
    11a8:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    11ac:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    11b0:	50410067 	subpl	r0, r1, r7, rrx
    11b4:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
    11b8:	43520052 	cmpmi	r2, #82	; 0x52
    11bc:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    11c0:	53595374 	cmppl	r9, #116, 6	; 0xd0000001
    11c4:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    11c8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    11cc:	48410065 	stmdami	r1, {r0, r2, r5, r6}^
    11d0:	504c3142 	subpl	r3, ip, r2, asr #2
    11d4:	00524e45 	subseq	r4, r2, r5, asr #28
    11d8:	5f434352 	svcpl	0x00434352
    11dc:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    11e0:	69445332 	stmdbvs	r4, {r1, r4, r5, r8, r9, ip, lr}^
    11e4:	53005176 	movwpl	r5, #374	; 0x176
    11e8:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    11ec:	495f6b63 	ldmdbmi	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
    11f0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    11f4:	5f434352 	svcpl	0x00434352
    11f8:	33424841 	movtcc	r4, #10305	; 0x2841
    11fc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1200:	55006870 	strpl	r6, [r0, #-2160]	; 0xfffff790
    1204:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1208:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    120c:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
    1210:	46434b43 	strbmi	r4, [r3], -r3, asr #22
    1214:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
    1218:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 1114 <startup-0x1fffeeec>
    121c:	44324f43 	ldrtmi	r4, [r2], #-3907	; 0xfffff0bd
    1220:	52007669 	andpl	r7, r0, #110100480	; 0x6900000
    1224:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    1228:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    122c:	756f534b 	strbvc	r5, [pc, #-843]!	; ee9 <startup-0x1ffff117>
    1230:	00656372 	rsbeq	r6, r5, r2, ror r3
    1234:	31414d44 	cmpcc	r1, r4, asr #26
    1238:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    123c:	326d6165 	rsbcc	r6, sp, #1073741849	; 0x40000019
    1240:	5152495f 	cmppl	r2, pc, asr r9
    1244:	4352006e 	cmpmi	r2, #110	; 0x6e
    1248:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    124c:	756f534c 	strbvc	r5, [pc, #-844]!	; f08 <startup-0x1ffff0f8>
    1250:	00656372 	rsbeq	r6, r5, r2, ror r3
    1254:	5f434352 	svcpl	0x00434352
    1258:	31425041 	cmpcc	r2, r1, asr #32
    125c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1260:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    1264:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1268:	4400646d 	strmi	r6, [r0], #-1133	; 0xfffffb93
    126c:	5f32414d 	svcpl	0x0032414d
    1270:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    1274:	5f346d61 	svcpl	0x00346d61
    1278:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    127c:	53455200 	movtpl	r5, #20992	; 0x5200
    1280:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    1284:	49003644 	stmdbmi	r0, {r2, r6, r9, sl, ip, sp}
    1288:	5f314332 	svcpl	0x00314332
    128c:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    1290:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1294:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
    1298:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
    129c:	5152495f 	cmppl	r2, pc, asr r9
    12a0:	4352006e 	cmpmi	r2, #110	; 0x6e
    12a4:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    12a8:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    12ac:	00676966 	rsbeq	r6, r7, r6, ror #18
    12b0:	354d4954 	strbcc	r4, [sp, #-2388]	; 0xfffff6ac
    12b4:	5152495f 	cmppl	r2, pc, asr r9
    12b8:	7355006e 	cmpvc	r5, #110	; 0x6e
    12bc:	46656761 	strbtmi	r6, [r5], -r1, ror #14
    12c0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    12c4:	5152495f 	cmppl	r2, pc, asr r9
    12c8:	4841006e 	stmdami	r1, {r1, r2, r3, r5, r6}^
    12cc:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
    12d0:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
    12d4:	415f4343 	cmpmi	pc, r3, asr #6
    12d8:	50324250 	eorspl	r4, r2, r0, asr r2
    12dc:	70697265 	rsbvc	r7, r9, r5, ror #4
    12e0:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    12e4:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    12e8:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
    12ec:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
    12f0:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
    12f4:	43435200 	movtmi	r5, #12800	; 0x3200
    12f8:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    12fc:	72655033 	rsbvc	r5, r5, #51	; 0x33
    1300:	43687069 	cmnmi	r8, #105	; 0x69
    1304:	6b636f6c 	blvs	18dd0bc <startup-0x1e722f44>
    1308:	6f4d504c 	svcvs	0x004d504c
    130c:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    1310:	48410064 	stmdami	r1, {r2, r5, r6}^
    1314:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
    1318:	43500052 	cmpmi	r0, #82	; 0x52
    131c:	5f324b4c 	svcpl	0x00324b4c
    1320:	71657246 	cmnvc	r5, r6, asr #4
    1324:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    1328:	41430079 	hvcmi	12297	; 0x3009
    132c:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
    1330:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
    1334:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1338:	4f495047 	svcmi	0x00495047
    133c:	6165725f 	cmnvs	r5, pc, asr r2
    1340:	43520064 	cmpmi	r2, #100	; 0x64
    1344:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1348:	4b4c4353 	blmi	131209c <startup-0x1ecedf64>
    134c:	4c435000 	marmi	acc0, r5, r3
    1350:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
    1354:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    1358:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    135c:	4c4c5000 	marmi	acc0, r5, ip
    1360:	4c50004d 	mrrcmi	0, 4, r0, r0, cr13	; <UNPREDICTABLE>
    1364:	5000504c 	andpl	r5, r0, ip, asr #32
    1368:	00514c4c 	subseq	r4, r1, ip, asr #24
    136c:	5f434352 	svcpl	0x00434352
    1370:	4349534c 	movtmi	r5, #37708	; 0x934c
    1374:	7000646d 	andvc	r6, r0, sp, ror #8
    1378:	6f736c6c 	svcvs	0x00736c6c
    137c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1380:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1384:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    1388:	61006e51 	tstvs	r0, r1, asr lr
    138c:	6e756f6d 	cdpvs	15, 7, cr6, cr5, cr13, {3}
    1390:	41664f74 	smcmi	25844	; 0x64f4
    1394:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    1398:	6f6f4465 	svcvs	0x006f4465
    139c:	52007372 	andpl	r7, r0, #-939524095	; 0xc8000001
    13a0:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    13a4:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    13a8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    13ac:	43520067 	cmpmi	r2, #103	; 0x67
    13b0:	53485f43 	movtpl	r5, #36675	; 0x8f43
    13b4:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    13b8:	00676966 	rsbeq	r6, r7, r6, ror #18
    13bc:	52434442 	subpl	r4, r3, #1107296256	; 0x42000000
    13c0:	44565000 	ldrbmi	r5, [r6], #-0
    13c4:	5152495f 	cmppl	r2, pc, asr r9
    13c8:	4352006e 	cmpmi	r2, #110	; 0x6e
    13cc:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    13d0:	32490045 	subcc	r0, r9, #69	; 0x45
    13d4:	455f3143 	ldrbmi	r3, [pc, #-323]	; 1299 <startup-0x1fffed67>
    13d8:	52495f56 	subpl	r5, r9, #344	; 0x158
    13dc:	52006e51 	andpl	r6, r0, #1296	; 0x510
    13e0:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    13e4:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
    13e8:	416b636f 	cmnmi	fp, pc, ror #6
    13ec:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    13f0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    13f4:	74730067 	ldrbtvc	r0, [r3], #-103	; 0xffffff99
    13f8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    13fc:	756f6370 	strbvc	r6, [pc, #-880]!	; 1094 <startup-0x1fffef6c>
    1400:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1404:	43435200 	movtmi	r5, #12800	; 0x3200
    1408:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    140c:	43494153 	movtmi	r4, #37203	; 0x9153
    1410:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1414:	50470067 	subpl	r0, r7, r7, rrx
    1418:	505f4f49 	subspl	r4, pc, r9, asr #30
    141c:	00736e69 	rsbseq	r6, r3, r9, ror #28
    1420:	314d4954 	cmpcc	sp, r4, asr r9
    1424:	5f43435f 	svcpl	0x0043435f
    1428:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    142c:	53414800 	movtpl	r4, #6144	; 0x1800
    1430:	4e525f48 	cdpmi	15, 5, cr5, cr2, cr8, {2}
    1434:	52495f47 	subpl	r5, r9, #284	; 0x11c
    1438:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
    143c:	31495458 	cmpcc	r9, r8, asr r4
    1440:	5152495f 	cmppl	r2, pc, asr r9
    1444:	4143006e 	cmpmi	r3, lr, rrx
    1448:	545f314e 	ldrbpl	r3, [pc], #-334	; 1450 <startup-0x1fffebb0>
    144c:	52495f58 	subpl	r5, r9, #88, 30	; 0x160
    1450:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
    1454:	5f31414d 	svcpl	0x0031414d
    1458:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    145c:	5f356d61 	svcpl	0x00356d61
    1460:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1464:	43435200 	movtmi	r5, #12800	; 0x3200
    1468:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
    146c:	43435200 	movtmi	r5, #12800	; 0x3200
    1470:	4f434d5f 	svcmi	0x00434d5f
    1474:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    1478:	00676966 	rsbeq	r6, r7, r6, ror #18
    147c:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
    1480:	4752545f 			; <UNDEFINED> instruction: 0x4752545f
    1484:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 1310 <startup-0x1fffecf0>
    1488:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    148c:	495f3431 	ldmdbmi	pc, {r0, r4, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    1490:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1494:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    1498:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    149c:	376d6165 	strbcc	r6, [sp, -r5, ror #2]!
    14a0:	5152495f 	cmppl	r2, pc, asr r9
    14a4:	544f006e 	strbpl	r0, [pc], #-110	; 14ac <startup-0x1fffeb54>
    14a8:	53465f47 	movtpl	r5, #28487	; 0x6f47
    14ac:	5152495f 	cmppl	r2, pc, asr r9
    14b0:	6f4e006e 	svcvs	0x004e006e
    14b4:	73614d6e 	cmnvc	r1, #7040	; 0x1b80
    14b8:	6c62616b 	stfvse	f6, [r2], #-428	; 0xfffffe54
    14bc:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
    14c0:	5152495f 	cmppl	r2, pc, asr r9
    14c4:	5757006e 	ldrbpl	r0, [r7, -lr, rrx]
    14c8:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    14cc:	006e5152 	rsbeq	r5, lr, r2, asr r1
    14d0:	5f47544f 	svcpl	0x0047544f
    14d4:	575f5348 	ldrbpl	r5, [pc, -r8, asr #6]
    14d8:	5f50554b 	svcpl	0x0050554b
    14dc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    14e0:	43435200 	movtmi	r5, #12800	; 0x3200
    14e4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    14e8:	72655032 	rsbvc	r5, r5, #50	; 0x32
    14ec:	43687069 	cmnmi	r8, #105	; 0x69
    14f0:	6b636f6c 	blvs	18dd2a8 <startup-0x1e722d58>
    14f4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    14f8:	5f434352 	svcpl	0x00434352
    14fc:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1500:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
    1504:	52005176 	andpl	r5, r0, #-2147483619	; 0x8000001d
    1508:	505f4343 	subspl	r4, pc, r3, asr #6
    150c:	41534c4c 	cmpmi	r3, ip, asr #24
    1510:	76694449 	strbtvc	r4, [r9], -r9, asr #8
    1514:	43520052 	cmpmi	r2, #82	; 0x52
    1518:	41535f43 	cmpmi	r3, r3, asr #30
    151c:	6f6c4249 	svcvs	0x006c4249
    1520:	43426b63 	movtmi	r6, #11107	; 0x2b63
    1524:	6f534b4c 	svcvs	0x00534b4c
    1528:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    152c:	6d654d00 	stclvs	13, cr4, [r5, #-0]
    1530:	4d79726f 	lfmmi	f7, 2, [r9, #-444]!	; 0xfffffe44
    1534:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
    1538:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
    153c:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
    1540:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
    1544:	5f504d41 	svcpl	0x00504d41
    1548:	4d415453 	cfstrdmi	mvd5, [r1, #-332]	; 0xfffffeb4
    154c:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
    1550:	73006e51 	movwvc	r6, #3665	; 0xe51
    1554:	41646e65 	cmnmi	r4, r5, ror #28
    1558:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
    155c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1560:	43535f31 	cmpmi	r3, #49, 30	; 0xc4
    1564:	52495f45 	subpl	r5, r9, #276	; 0x114
    1568:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
    156c:	5f6e5152 	svcpl	0x006e5152
    1570:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1574:	414d4400 	cmpmi	sp, r0, lsl #8
    1578:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
    157c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1580:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    1584:	52006e51 	andpl	r6, r0, #1296	; 0x510
    1588:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 1484 <startup-0x1fffeb7c>
    158c:	43324f43 	teqmi	r2, #268	; 0x10c
    1590:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1594:	65670067 	strbvs	r0, [r7, #-103]!	; 0xffffff99
    1598:	00644974 	rsbeq	r4, r4, r4, ror r9
    159c:	5f434352 	svcpl	0x00434352
    15a0:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    15a4:	6f534b4c 	svcvs	0x00534b4c
    15a8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    15ac:	52524500 	subspl	r4, r2, #0, 10
    15b0:	4900524f 	stmdbmi	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
    15b4:	5f324332 	svcpl	0x00324332
    15b8:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    15bc:	006e5152 	rsbeq	r5, lr, r2, asr r1
    15c0:	6954736d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    15c4:	00736b63 	rsbseq	r6, r3, r3, ror #22
    15c8:	5f434352 	svcpl	0x00434352
    15cc:	4b4c4350 	blmi	1312314 <startup-0x1ecedcec>
    15d0:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    15d4:	00676966 	rsbeq	r6, r7, r6, ror #18
    15d8:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
    15dc:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    15e0:	5152495f 	cmppl	r2, pc, asr r9
    15e4:	6974006e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6}^
    15e8:	00736b63 	rsbseq	r6, r3, r3, ror #22
    15ec:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    15f0:	00524746 	subseq	r4, r2, r6, asr #14
    15f4:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    15f8:	0067734d 	rsbeq	r7, r7, sp, asr #6
    15fc:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    1600:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    1604:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
    1608:	5f314d49 	svcpl	0x00314d49
    160c:	5f4b5242 	svcpl	0x004b5242
    1610:	394d4954 	stmdbcc	sp, {r2, r4, r6, r8, fp, lr}^
    1614:	5152495f 	cmppl	r2, pc, asr r9
    1618:	4352006e 	cmpmi	r2, #110	; 0x6e
    161c:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1620:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    1624:	0067616c 	rsbeq	r6, r7, ip, ror #2
    1628:	41425041 	cmpmi	r2, r1, asr #32
    162c:	72504248 	subsvc	r4, r0, #72, 4	; 0x80000004
    1630:	54637365 	strbtpl	r7, [r3], #-869	; 0xfffffc9b
    1634:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1638:	43435200 	movtmi	r5, #12800	; 0x3200
    163c:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    1640:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    1644:	6c435332 	mcrrvs	3, 3, r5, r3, cr2
    1648:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
    164c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1650:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    1654:	5f374d49 	svcpl	0x00374d49
    1658:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    165c:	48544500 	ldmdami	r4, {r8, sl, lr}^
    1660:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
    1664:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
    1668:	4f006e51 	svcmi	0x00006e51
    166c:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    1670:	52495f53 	subpl	r5, r9, #332	; 0x14c
    1674:	53006e51 	movwpl	r6, #3665	; 0xe51
    1678:	52474353 	subpl	r4, r7, #1275068417	; 0x4c000001
    167c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1680:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    1684:	53006e51 	movwpl	r6, #3665	; 0xe51
    1688:	6c614356 	stclvs	3, cr4, [r1], #-344	; 0xfffffea8
    168c:	52495f6c 	subpl	r5, r9, #108, 30	; 0x1b0
    1690:	41006e51 	tstmi	r0, r1, asr lr
    1694:	52324250 	eorspl	r4, r2, #80, 4
    1698:	00525453 	subseq	r5, r2, r3, asr r4
    169c:	5f434352 	svcpl	0x00434352
    16a0:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    16a4:	5367616c 	cmnpl	r7, #108, 2
    16a8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    16ac:	43520073 	cmpmi	r2, #115	; 0x73
    16b0:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    16b4:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    16b8:	43435200 	movtmi	r5, #12800	; 0x3200
    16bc:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    16c0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    16c4:	43520067 	cmpmi	r2, #103	; 0x67
    16c8:	53485f43 	movtpl	r5, #36675	; 0x8f43
    16cc:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
    16d0:	55504600 	ldrbpl	r4, [r0, #-1536]	; 0xfffffa00
    16d4:	5152495f 	cmppl	r2, pc, asr r9
    16d8:	4352006e 	cmpmi	r2, #110	; 0x6e
    16dc:	64415f43 	strbvs	r5, [r1], #-3907	; 0xfffff0bd
    16e0:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    16e4:	43495348 	movtmi	r5, #37704	; 0x9348
    16e8:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
    16ec:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    16f0:	61566e6f 	cmpvs	r6, pc, ror #28
    16f4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    16f8:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    16fc:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    1700:	41006e51 	tstmi	r0, r1, asr lr
    1704:	4c324250 	lfmmi	f4, 4, [r2], #-320	; 0xfffffec0
    1708:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
    170c:	43435200 	movtmi	r5, #12800	; 0x3200
    1710:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1714:	72655031 	rsbvc	r5, r5, #49	; 0x31
    1718:	00687069 	rsbeq	r7, r8, r9, rrx
    171c:	5f434352 	svcpl	0x00434352
    1720:	43435452 	movtmi	r5, #13394	; 0x3452
    1724:	6f434b4c 	svcvs	0x00434b4c
    1728:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    172c:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
    1730:	5f53465f 	svcpl	0x0053465f
    1734:	50554b57 	subspl	r4, r5, r7, asr fp
    1738:	5152495f 	cmppl	r2, pc, asr r9
    173c:	4352006e 	cmpmi	r2, #110	; 0x6e
    1740:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
    1744:	52004741 	andpl	r4, r0, #17039360	; 0x1040000
    1748:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    174c:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
    1750:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1754:	45007375 	strmi	r7, [r0, #-885]	; 0xfffffc8b
    1758:	34495458 	strbcc	r5, [r9], #-1112	; 0xfffffba8
    175c:	5152495f 	cmppl	r2, pc, asr r9
    1760:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    1764:	445f364d 	ldrbmi	r3, [pc], #-1613	; 176c <startup-0x1fffe894>
    1768:	495f4341 	ldmdbmi	pc, {r0, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    176c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1770:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
    1774:	5f56455f 	svcpl	0x0056455f
    1778:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    177c:	43435200 	movtmi	r5, #12800	; 0x3200
    1780:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    1784:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
    1788:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    178c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1790:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
    1794:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1798:	6b636f6c 	blvs	18dd550 <startup-0x1e722ab0>
    179c:	75636553 	strbvc	r6, [r3, #-1363]!	; 0xfffffaad
    17a0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    17a4:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
    17a8:	6d436d65 	stclvs	13, cr6, [r3, #-404]	; 0xfffffe6c
    17ac:	43520064 	cmpmi	r2, #100	; 0x64
    17b0:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    17b4:	4b4c434d 	blmi	13124f0 <startup-0x1ecedb10>
    17b8:	73657250 	cmnvc	r5, #80, 4
    17bc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    17c0:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    17c4:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    17c8:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
    17cc:	416b636f 	cmnmi	fp, pc, ror #6
    17d0:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    17d4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    17d8:	79730065 	ldmdbvc	r3!, {r0, r2, r5, r6}^
    17dc:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
    17e0:	6e495f6b 	cdpvs	15, 4, cr5, cr9, cr11, {3}
    17e4:	73007469 	movwvc	r7, #1129	; 0x469
    17e8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    17ec:	67657273 			; <UNDEFINED> instruction: 0x67657273
    17f0:	43435200 	movtmi	r5, #12800	; 0x3200
    17f4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    17f8:	72655032 	rsbvc	r5, r5, #50	; 0x32
    17fc:	00687069 	rsbeq	r7, r8, r9, rrx
    1800:	31425041 	cmpcc	r2, r1, asr #32
    1804:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
    1808:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    180c:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    1810:	61657274 	smcvs	22308	; 0x5724
    1814:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    1818:	006e5152 	rsbeq	r5, lr, r2, asr r1
    181c:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    1820:	645f6576 	ldrbvs	r6, [pc], #-1398	; 1828 <startup-0x1fffe7d8>
    1824:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1828:	414d4400 	cmpmi	sp, r0, lsl #8
    182c:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
    1830:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1834:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    1838:	43006e51 	movwmi	r6, #3665	; 0xe51
    183c:	5441474b 	strbpl	r4, [r1], #-1867	; 0xfffff8b5
    1840:	00524e45 	subseq	r4, r2, r5, asr #28
    1844:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
    1848:	5f58545f 	svcpl	0x0058545f
    184c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1850:	4c4c5000 	marmi	acc0, r5, ip
    1854:	4e494153 	mcrmi	1, 2, r4, cr9, cr3, {2}
    1858:	4c4c5000 	marmi	acc0, r5, ip
    185c:	51494153 	cmppl	r9, r3, asr r1
    1860:	4c4c5000 	marmi	acc0, r5, ip
    1864:	52494153 	subpl	r4, r9, #-1073741804	; 0xc0000014
    1868:	43435200 	movtmi	r5, #12800	; 0x3200
    186c:	4f434d5f 	svcmi	0x00434d5f
    1870:	756f5331 	strbvc	r5, [pc, #-817]!	; 1547 <startup-0x1fffeab9>
    1874:	00656372 	rsbeq	r6, r5, r2, ror r3
    1878:	5f434352 	svcpl	0x00434352
    187c:	33424841 	movtcc	r4, #10305	; 0x2841
    1880:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1884:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    1888:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    188c:	7400646d 	strvc	r6, [r0], #-1133	; 0xfffffb93
    1890:	5f656d69 	svcpl	0x00656d69
    1894:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
    1898:	5f6c6172 	svcpl	0x006c6172
    189c:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
    18a0:	43435200 	movtmi	r5, #12800	; 0x3200
    18a4:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    18a8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    18ac:	5f434352 	svcpl	0x00434352
    18b0:	6b636142 	blvs	18d9dc0 <startup-0x1e726240>
    18b4:	65527075 	ldrbvs	r7, [r2, #-117]	; 0xffffff8b
    18b8:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    18bc:	4100646d 	tstmi	r0, sp, ror #8
    18c0:	52334248 	eorspl	r4, r3, #72, 4	; 0x80000004
    18c4:	00525453 	subseq	r5, r2, r3, asr r4
    18c8:	6f727245 	svcvs	0x00727245
    18cc:	61745372 	cmnvs	r4, r2, ror r3
    18d0:	00737574 	rsbseq	r7, r3, r4, ror r5
    18d4:	31414d44 	cmpcc	r1, r4, asr #26
    18d8:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    18dc:	306d6165 	rsbcc	r6, sp, r5, ror #2
    18e0:	5152495f 	cmppl	r2, pc, asr r9
    18e4:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0xffffff92
    18e8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    18ec:	43520070 	cmpmi	r2, #112	; 0x70
    18f0:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    18f4:	6f53324f 	svcvs	0x0053324f
    18f8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    18fc:	42504100 	subsmi	r4, r0, #0, 2
    1900:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
    1904:	54520052 	ldrbpl	r0, [r2], #-82	; 0xffffffae
    1908:	6c415f43 	mcrrvs	15, 4, r5, r1, cr3
    190c:	5f6d7261 	svcpl	0x006d7261
    1910:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1914:	42504100 	subsmi	r4, r0, #0, 2
    1918:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
    191c:	43324900 	teqmi	r2, #0, 18
    1920:	52455f33 	subpl	r5, r5, #51, 30	; 0xcc
    1924:	5152495f 	cmppl	r2, pc, asr r9
    1928:	5243006e 	subpl	r0, r3, #110	; 0x6e
    192c:	495f5059 	ldmdbmi	pc, {r0, r3, r4, r6, ip, lr}^	; <UNPREDICTABLE>
    1930:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1934:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1938:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
    193c:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    1940:	52006e51 	andpl	r6, r0, #1296	; 0x510
    1944:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 1840 <startup-0x1fffe7c0>
    1948:	44314f43 	ldrtmi	r4, [r1], #-3907	; 0xfffff0bd
    194c:	54007669 	strpl	r7, [r0], #-1641	; 0xfffff997
    1950:	5f334d49 	svcpl	0x00334d49
    1954:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1958:	41535500 	cmpmi	r3, r0, lsl #10
    195c:	5f315452 	svcpl	0x00315452
    1960:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1964:	43435200 	movtmi	r5, #12800	; 0x3200
    1968:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    196c:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
    1970:	53455348 	movtpl	r5, #21320	; 0x5348
    1974:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    1978:	53007055 	movwpl	r7, #85	; 0x55
    197c:	45434355 	strbmi	r4, [r3, #-853]	; 0xfffffcab
    1980:	43005353 	movwmi	r5, #851	; 0x353
    1984:	5f324e41 	svcpl	0x00324e41
    1988:	5f315852 	svcpl	0x00315852
    198c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1990:	43444100 	movtmi	r4, #16640	; 0x4100
    1994:	5152495f 	cmppl	r2, pc, asr r9
    1998:	4352006e 	cmpmi	r2, #110	; 0x6e
    199c:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    19a0:	646f4d45 	strbtvs	r4, [pc], #-3397	; 19a8 <startup-0x1fffe658>
    19a4:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    19a8:	00676966 	rsbeq	r6, r7, r6, ror #18
    19ac:	33424841 	movtcc	r4, #10305	; 0x2841
    19b0:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
    19b4:	79530052 	ldmdbvc	r3, {r1, r4, r6}^
    19b8:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    19bc:	6f435f6b 	svcvs	0x00435f6b
    19c0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    19c4:	2f3a4300 	svccs	0x003a4300
    19c8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    19cc:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    19d0:	2f746d61 	svccs	0x00746d61
    19d4:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    19d8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    19dc:	6b6f442f 	blvs	1bd2aa0 <startup-0x1e42d560>
    19e0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    19e4:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    19e8:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    19ec:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    19f0:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    19f4:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    19f8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    19fc:	6b2f6d65 	blvs	bdcf98 <startup-0x1f423068>
    1a00:	442f646f 	strtmi	r6, [pc], #-1135	; 1a08 <startup-0x1fffe5f8>
    1a04:	2f726f6f 	svccs	0x00726f6f
    1a08:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    1a0c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    1a10:	69740063 	ldmdbvs	r4!, {r0, r1, r5, r6}^
    1a14:	7400656d 	strvc	r6, [r0], #-1389	; 0xfffffa93
    1a18:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0xffffff93
    1a1c:	53460067 	movtpl	r0, #24679	; 0x6067
    1a20:	495f434d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1a24:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1a28:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1a2c:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    1a30:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
    1a34:	46434b43 	strbmi	r4, [r3], -r3, asr #22
    1a38:	00325247 	eorseq	r5, r2, r7, asr #4
    1a3c:	5f434352 	svcpl	0x00434352
    1a40:	31424841 	cmpcc	r2, r1, asr #16
    1a44:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1a48:	68006870 	stmdavs	r0, {r4, r5, r6, fp, sp, lr}
    1a4c:	74736573 	ldrbtvc	r6, [r3], #-1395	; 0xfffffa8d
    1a50:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1a54:	414d4400 	cmpmi	sp, r0, lsl #8
    1a58:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
    1a5c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1a60:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    1a64:	47006e51 	smlsdmi	r0, r1, lr, r6
    1a68:	5f4f4950 	svcpl	0x004f4950
    1a6c:	706d616c 	rsbvc	r6, sp, ip, ror #2
    1a70:	414d4400 	cmpmi	sp, r0, lsl #8
    1a74:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
    1a78:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1a7c:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
    1a80:	41006e51 	tstmi	r0, r1, asr lr
    1a84:	45314248 	ldrmi	r4, [r1, #-584]!	; 0xfffffdb8
    1a88:	4400524e 	strmi	r5, [r0], #-590	; 0xfffffdb2
    1a8c:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
    1a90:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    1a94:	5f726f74 	svcpl	0x00726f74
    1a98:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1a9c:	43435200 	movtmi	r5, #12800	; 0x3200
    1aa0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1aa4:	72655031 	rsbvc	r5, r5, #49	; 0x31
    1aa8:	52687069 	rsbpl	r7, r8, #105	; 0x69
    1aac:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1ab0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1ab4:	33433249 	movtcc	r3, #12873	; 0x3249
    1ab8:	5f56455f 	svcpl	0x0056455f
    1abc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1ac0:	42484100 	submi	r4, r8, #0, 2
    1ac4:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
    1ac8:	54450052 	strbpl	r0, [r5], #-82	; 0xffffffae
    1acc:	52495f48 	subpl	r5, r9, #72, 30	; 0x120
    1ad0:	52006e51 	andpl	r6, r0, #1296	; 0x510
    1ad4:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1ad8:	6b636f6c 	blvs	18dd890 <startup-0x1e722770>
    1adc:	70795473 	rsbsvc	r5, r9, r3, ror r4
    1ae0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1ae4:	43435200 	movtmi	r5, #12800	; 0x3200
    1ae8:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1aec:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1af0:	73617000 	cmnvc	r1, #0
    1af4:	726f7773 	rsbvc	r7, pc, #30146560	; 0x1cc0000
    1af8:	43520064 	cmpmi	r2, #100	; 0x64
    1afc:	52495f43 	subpl	r5, r9, #268	; 0x10c
    1b00:	52006e51 	andpl	r6, r0, #1296	; 0x510
    1b04:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1b08:	50470054 	subpl	r0, r7, r4, asr r0
    1b0c:	745f4f49 	ldrbvc	r4, [pc], #-3913	; 1b14 <startup-0x1fffe4ec>
    1b10:	00657079 	rsbeq	r7, r5, r9, ror r0
    1b14:	31414d44 	cmpcc	r1, r4, asr #26
    1b18:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1b1c:	336d6165 	cmncc	sp, #1073741849	; 0x40000019
    1b20:	5152495f 	cmppl	r2, pc, asr r9
    1b24:	5355006e 	cmppl	r5, #110	; 0x6e
    1b28:	32545241 	subscc	r5, r4, #268435460	; 0x10000004
    1b2c:	5152495f 	cmppl	r2, pc, asr r9
    1b30:	6974006e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6}^
    1b34:	7453656d 	ldrbvc	r6, [r3], #-1389	; 0xfffffa93
    1b38:	00706d61 	rsbseq	r6, r0, r1, ror #26
    1b3c:	766c6c70 			; <UNDEFINED> instruction: 0x766c6c70
    1b40:	52006f63 	andpl	r6, r0, #396	; 0x18c
    1b44:	415f4343 	cmpmi	pc, r3, asr #6
    1b48:	50314250 	eorspl	r4, r1, r0, asr r2
    1b4c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1b50:	6f6c4368 	svcvs	0x006c4368
    1b54:	504c6b63 	subpl	r6, ip, r3, ror #22
    1b58:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1b5c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1b60:	314d4954 	cmpcc	sp, r4, asr r9
    1b64:	5f50555f 	svcpl	0x0050555f
    1b68:	314d4954 	cmpcc	sp, r4, asr r9
    1b6c:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    1b70:	50006e51 	andpl	r6, r0, r1, asr lr
    1b74:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    1b78:	52004e53 	andpl	r4, r0, #1328	; 0x530
    1b7c:	415f4343 	cmpmi	pc, r3, asr #6
    1b80:	50314248 	eorspl	r4, r1, r8, asr #4
    1b84:	70697265 	rsbvc	r7, r9, r5, ror #4
    1b88:	6f6c4368 	svcvs	0x006c4368
    1b8c:	504c6b63 	subpl	r6, ip, r3, ror #22
    1b90:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1b94:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1b98:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    1b9c:	00525332 	subseq	r5, r2, r2, lsr r3
    1ba0:	6e69616d 	powvsez	f6, f1, #5.0
    1ba4:	6c696d00 	stclvs	13, cr6, [r9], #-0
    1ba8:	544f0069 	strbpl	r0, [pc], #-105	; 1bb0 <startup-0x1fffe450>
    1bac:	53485f47 	movtpl	r5, #36679	; 0x8f47
    1bb0:	3150455f 	cmpcc	r0, pc, asr r5
    1bb4:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
    1bb8:	5152495f 	cmppl	r2, pc, asr r9
    1bbc:	616c006e 	cmnvs	ip, lr, rrx
    1bc0:	69546d72 	ldmdbvs	r4, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1bc4:	52006b63 	andpl	r6, r0, #101376	; 0x18c00
    1bc8:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    1bcc:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    1bd0:	646d434b 	strbtvs	r4, [sp], #-843	; 0xfffffcb5
    1bd4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1bd8:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xfffff0bd
    1bdc:	69725074 	ldmdbvs	r2!, {r2, r4, r5, r6, ip, lr}^
    1be0:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    1be4:	41430079 	hvcmi	12297	; 0x3009
    1be8:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
    1bec:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    1bf0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1bf4:	5f434352 	svcpl	0x00434352
    1bf8:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    1bfc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1c00:	61006870 	tstvs	r0, r0, ror r8
    1c04:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
    1c08:	5f676e69 	svcpl	0x00676e69
    1c0c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1c10:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    1c14:	355f3949 	ldrbcc	r3, [pc, #-2377]	; 12d3 <startup-0x1fffed2d>
    1c18:	5152495f 	cmppl	r2, pc, asr r9
    1c1c:	4c50006e 	mrrcmi	0, 6, r0, r0, cr14	; <UNPREDICTABLE>
    1c20:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    1c24:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
    1c28:	4c4c5000 	marmi	acc0, r5, ip
    1c2c:	4352004e 	cmpmi	r2, #78	; 0x4e
    1c30:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1c34:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    1c38:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1c3c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1c40:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    1c44:	43435200 	movtmi	r5, #12800	; 0x3200
    1c48:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1c4c:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    1c50:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1c54:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1c58:	435f384d 	cmpmi	pc, #5046272	; 0x4d0000
    1c5c:	52495f43 	subpl	r5, r9, #268	; 0x10c
    1c60:	53006e51 	movwpl	r6, #3665	; 0xe51
    1c64:	5f4f4944 	svcpl	0x004f4944
    1c68:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1c6c:	53595300 	cmppl	r9, #0, 6
    1c70:	5f4b4c43 	svcpl	0x004b4c43
    1c74:	71657246 	cmnvc	r5, r6, asr #4
    1c78:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    1c7c:	58450079 	stmdapl	r5, {r0, r3, r4, r5, r6}^
    1c80:	5f334954 	svcpl	0x00334954
    1c84:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1c88:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
    1c8c:	5f565364 	svcpl	0x00565364
    1c90:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1c94:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
    1c98:	5f53485f 	svcpl	0x0053485f
    1c9c:	5f315045 	svcpl	0x00315045
    1ca0:	495f4e49 	ldmdbmi	pc, {r0, r3, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1ca4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1ca8:	31414d44 	cmpcc	r1, r4, asr #26
    1cac:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1cb0:	376d6165 	strbcc	r6, [sp, -r5, ror #2]!
    1cb4:	5152495f 	cmppl	r2, pc, asr r9
    1cb8:	4352006e 	cmpmi	r2, #110	; 0x6e
    1cbc:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1cc0:	4b4c434d 	blmi	13129fc <startup-0x1eced604>
    1cc4:	73657250 	cmnvc	r5, #80, 4
    1cc8:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    1ccc:	72700072 	rsbsvc	r0, r0, #114	; 0x72
    1cd0:	00637365 	rsbeq	r7, r3, r5, ror #6
    1cd4:	5f434352 	svcpl	0x00434352
    1cd8:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    1cdc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1ce0:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    1ce4:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1ce8:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1cec:	505f4343 	subspl	r4, pc, r3, asr #6
    1cf0:	41534c4c 	cmpmi	r3, ip, asr #24
    1cf4:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
    1cf8:	42484100 	submi	r4, r8, #0, 2
    1cfc:	524e4533 	subpl	r4, lr, #213909504	; 0xcc00000
    1d00:	43435200 	movtmi	r5, #12800	; 0x3200
    1d04:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    1d08:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1d0c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1d10:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    1d14:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    1d18:	61657274 	smcvs	22308	; 0x5724
    1d1c:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    1d20:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1d24:	5f434352 	svcpl	0x00434352
    1d28:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    1d2c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1d30:	6c700067 	ldclvs	0, cr0, [r0], #-412	; 0xfffffe64
    1d34:	62006d6c 	andvs	r6, r0, #108, 26	; 0x1b00
    1d38:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1d3c:	74755072 	ldrbtvc	r5, [r5], #-114	; 0xffffff8e
    1d40:	756f6300 	strbvc	r6, [pc, #-768]!	; 1a48 <startup-0x1fffe5b8>
    1d44:	4300746e 	movwmi	r7, #1134	; 0x46e
    1d48:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1d4c:	2f737265 	svccs	0x00737265
    1d50:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    1d54:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    1d58:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    1d5c:	442f6576 	strtmi	r6, [pc], #-1398	; 1d64 <startup-0x1fffe29c>
    1d60:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    1d64:	2f746e65 	svccs	0x00746e65
    1d68:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    1d6c:	442f6275 	strtmi	r6, [pc], #-629	; 1d74 <startup-0x1fffe28c>
    1d70:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    1d74:	614c2d30 	cmpvs	ip, r0, lsr sp
    1d78:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1d7c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1d80:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 1d88 <startup-0x1fffe278>
    1d84:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1d88:	6675622f 	ldrbtvs	r6, [r5], -pc, lsr #4
    1d8c:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
    1d90:	49460063 	stmdbmi	r6, {r0, r1, r5, r6}^
    1d94:	62004f46 	andvs	r4, r0, #280	; 0x118
    1d98:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1d9c:	65764f72 	ldrbvs	r4, [r6, #-3954]!	; 0xfffff08e
    1da0:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    1da4:	73614c65 	cmnvc	r1, #25856	; 0x6500
    1da8:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    1dac:	62007473 	andvs	r7, r0, #1929379840	; 0x73000000
    1db0:	00666675 	rsbeq	r6, r6, r5, ror r6
    1db4:	6d656c65 	stclvs	12, cr6, [r5, #-404]!	; 0xfffffe6c
    1db8:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    1dbc:	47726566 	ldrbmi	r6, [r2, -r6, ror #10]!
    1dc0:	62007465 	andvs	r7, r0, #1694498816	; 0x65000000
    1dc4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1dc8:	696e4972 	stmdbvs	lr!, {r1, r4, r5, r6, r8, fp, lr}^
    1dcc:	75620074 	strbvc	r0, [r2, #-116]!	; 0xffffff8c
    1dd0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1dd4:	65727000 	ldrbvs	r7, [r2, #-0]!
    1dd8:	646e4976 	strbtvs	r4, [lr], #-2422	; 0xfffff68a
    1ddc:	53007865 	movwpl	r7, #2149	; 0x865
    1de0:	69737365 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
    1de4:	44496e6f 	strbmi	r6, [r9], #-3695	; 0xfffff191
    1de8:	6e616300 	cdpvs	3, 6, cr6, cr1, cr0, {0}
    1dec:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1df0:	656e0074 	strbvs	r0, [lr, #-116]!	; 0xffffff8c
    1df4:	6e614877 	mcrvs	8, 3, r4, cr1, cr7, {3}
    1df8:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1dfc:	36317500 	ldrtcc	r7, [r1], -r0, lsl #10
    1e00:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1e04:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1e08:	61736964 	cmnvs	r3, r4, ror #18
    1e0c:	46656c62 	strbtmi	r6, [r5], -r2, ror #24
    1e10:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    1e14:	6e614872 	mcrvs	8, 3, r4, cr1, cr2, {3}
    1e18:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1e1c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1e20:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1e24:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1e28:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1e2c:	00657275 	rsbeq	r7, r5, r5, ror r2
    1e30:	5f6e6163 	svcpl	0x006e6163
    1e34:	5f717269 	svcpl	0x00717269
    1e38:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
    1e3c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1e40:	65536f6e 	ldrbvs	r6, [r3, #-3950]	; 0xfffff092
    1e44:	6f697373 	svcvs	0x00697373
    1e48:	0064496e 	rsbeq	r4, r4, lr, ror #18
    1e4c:	734e4143 	movtvc	r4, #57667	; 0xe143
    1e50:	4d646e65 	stclmi	14, cr6, [r4, #-404]!	; 0xfffffe6c
    1e54:	61737365 	cmnvs	r3, r5, ror #6
    1e58:	72006567 	andvc	r6, r0, #432013312	; 0x19c00000
    1e5c:	67734d78 			; <UNDEFINED> instruction: 0x67734d78
    1e60:	73655300 	cmnvc	r5, #0, 6
    1e64:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    1e68:	63414449 	movtvs	r4, #5193	; 0x1449
    1e6c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    1e70:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1e74:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    1e78:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
    1e7c:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    1e80:	61487265 	cmpvs	r8, r5, ror #4
    1e84:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1e88:	41430072 	hvcmi	12290	; 0x3002
    1e8c:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1e90:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1e94:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1e98:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1e9c:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    1ea0:	61630065 	cmnvs	r3, r5, rrx
    1ea4:	6e695f6e 	cdpvs	15, 6, cr5, cr9, cr14, {3}
    1ea8:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    1eac:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1eb0:	41430073 	hvcmi	12291	; 0x3003
    1eb4:	6e495f4e 	cdpvs	15, 4, cr5, cr9, cr14, {2}
    1eb8:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1ebc:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1ec0:	00657275 	rsbeq	r7, r5, r5, ror r2
    1ec4:	6f696e75 	svcvs	0x00696e75
    1ec8:	6c69466e 	stclvs	6, cr4, [r9], #-440	; 0xfffffe48
    1ecc:	00726574 	rsbseq	r6, r2, r4, ror r5
    1ed0:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
    1ed4:	4c72656c 	cfldr64mi	mvdx6, [r2], #-432	; 0xfffffe50
    1ed8:	00747369 	rsbseq	r7, r4, r9, ror #6
    1edc:	6b73616d 	blvs	1cda498 <startup-0x1e325b68>
    1ee0:	2f3a4300 	svccs	0x003a4300
    1ee4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1ee8:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    1eec:	2f746d61 	svccs	0x00746d61
    1ef0:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    1ef4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1ef8:	6b6f442f 	blvs	1bd2fbc <startup-0x1e42d044>
    1efc:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1f00:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    1f04:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    1f08:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    1f0c:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    1f10:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1f14:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1f18:	6b2f6d65 	blvs	bdd4b4 <startup-0x1f422b4c>
    1f1c:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 1d68 <startup-0x1fffe298>
    1f20:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
    1f24:	632e4e41 			; <UNDEFINED> instruction: 0x632e4e41
    1f28:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 1030 <startup-0x1fffefd0>
    1f2c:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
    1f30:	41430064 	cmpmi	r3, r4, rrx
    1f34:	7369644e 	cmnvc	r9, #1308622848	; 0x4e000000
    1f38:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1f3c:	466c6c41 	strbtmi	r6, [ip], -r1, asr #24
    1f40:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    1f44:	6e614872 	mcrvs	8, 3, r4, cr1, cr2, {3}
    1f48:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1f4c:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
    1f50:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1f54:	6f696e55 	svcvs	0x00696e55
    1f58:	4143006e 	cmpmi	r3, lr, rrx
    1f5c:	6e61684e 	cdpvs	8, 6, cr6, cr1, cr14, {2}
    1f60:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1f64:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    1f68:	46746f4e 	ldrbtmi	r6, [r4], -lr, asr #30
    1f6c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
    1f70:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
    1f74:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
    1f78:	65696365 	strbvs	r6, [r9, #-869]!	; 0xfffffc9b
    1f7c:	695f6576 	ldmdbvs	pc, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    1f80:	736d5f64 	cmnvc	sp, #100, 30	; 0x190
    1f84:	50470067 	subpl	r0, r7, r7, rrx
    1f88:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1f8c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1f90:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1f94:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    1f98:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1f9c:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    1fa0:	61487265 	cmpvs	r8, r5, ror #4
    1fa4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1fa8:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
    1fac:	00786564 	rsbseq	r6, r8, r4, ror #10
    1fb0:	614e4143 	cmpvs	lr, r3, asr #2
    1fb4:	69466464 	stmdbvs	r6, {r2, r5, r6, sl, sp, lr}^
    1fb8:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1fbc:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1fc0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1fc4:	746c6966 	strbtvc	r6, [ip], #-2406	; 0xfffff69a
    1fc8:	43007265 	movwmi	r7, #613	; 0x265
    1fcc:	69464e41 	stmdbvs	r6, {r0, r6, r9, sl, fp, lr}^
    1fd0:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1fd4:	696e7500 	stmdbvs	lr!, {r8, sl, ip, sp, lr}^
    1fd8:	614d6e6f 	cmpvs	sp, pc, ror #28
    1fdc:	64006b73 	strvs	r6, [r0], #-2931	; 0xfffff48d
    1fe0:	646f6365 	strbtvs	r6, [pc], #-869	; 1fe8 <startup-0x1fffe018>
    1fe4:	6f645f65 	svcvs	0x00645f65
    1fe8:	635f726f 	cmpvs	pc, #-268435450	; 0xf0000006
    1fec:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1ff0:	736d5f67 	cmnvc	sp, #412	; 0x19c
    1ff4:	65730067 	ldrbvs	r0, [r3, #-103]!	; 0xffffff99
    1ff8:	73655374 	cmnvc	r5, #116, 6	; 0xd0000001
    1ffc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    2000:	Address 0x00002000 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <GPIO_Ports+0xdfffb66e>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	20000010 	andcs	r0, r0, r0, lsl r0
      1c:	00000050 	andeq	r0, r0, r0, asr r0
      20:	40080e41 	andmi	r0, r8, r1, asr #28
      24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      28:	100e4101 	andne	r4, lr, r1, lsl #2
      2c:	00070d41 	andeq	r0, r7, r1, asr #26
      30:	0000001c 	andeq	r0, r0, ip, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	20000060 	andcs	r0, r0, r0, rrx
      3c:	000001c4 	andeq	r0, r0, r4, asr #3
      40:	40080e41 	andmi	r0, r8, r1, asr #28
      44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      48:	180e4101 	stmdane	lr, {r0, r8, lr}
      4c:	00070d41 	andeq	r0, r7, r1, asr #26
      50:	00000020 	andeq	r0, r0, r0, lsr #32
      54:	00000000 	andeq	r0, r0, r0
      58:	20000224 	andcs	r0, r0, r4, lsr #4
      5c:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
      60:	400c0e41 	andmi	r0, ip, r1, asr #28
      64:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
      68:	018e4002 	orreq	r4, lr, r2
      6c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
      70:	0000070d 	andeq	r0, r0, sp, lsl #14
      74:	0000001c 	andeq	r0, r0, ip, lsl r0
      78:	00000000 	andeq	r0, r0, r0
      7c:	200003d4 	ldrdcs	r0, [r0], -r4
      80:	00000052 	andeq	r0, r0, r2, asr r0
      84:	40080e41 	andmi	r0, r8, r1, asr #28
      88:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      8c:	100e4101 	andne	r4, lr, r1, lsl #2
      90:	00070d41 	andeq	r0, r7, r1, asr #26
      94:	0000001c 	andeq	r0, r0, ip, lsl r0
      98:	00000000 	andeq	r0, r0, r0
      9c:	20000426 	andcs	r0, r0, r6, lsr #8
      a0:	00000072 	andeq	r0, r0, r2, ror r0
      a4:	40080e41 	andmi	r0, r8, r1, asr #28
      a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      ac:	100e4101 	andne	r4, lr, r1, lsl #2
      b0:	00070d41 	andeq	r0, r7, r1, asr #26
      b4:	0000001c 	andeq	r0, r0, ip, lsl r0
      b8:	00000000 	andeq	r0, r0, r0
      bc:	20000498 	mulcs	r0, r8, r4
      c0:	00000040 	andeq	r0, r0, r0, asr #32
      c4:	40080e41 	andmi	r0, r8, r1, asr #28
      c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      cc:	100e4101 	andne	r4, lr, r1, lsl #2
      d0:	00070d41 	andeq	r0, r7, r1, asr #26
      d4:	0000001c 	andeq	r0, r0, ip, lsl r0
      d8:	00000000 	andeq	r0, r0, r0
      dc:	200004d8 	ldrdcs	r0, [r0], -r8
      e0:	000000c8 	andeq	r0, r0, r8, asr #1
      e4:	40080e41 	andmi	r0, r8, r1, asr #28
      e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      ec:	100e4101 	andne	r4, lr, r1, lsl #2
      f0:	00070d41 	andeq	r0, r7, r1, asr #26
      f4:	00000020 	andeq	r0, r0, r0, lsr #32
      f8:	00000000 	andeq	r0, r0, r0
      fc:	200005a0 	andcs	r0, r0, r0, lsr #11
     100:	000001e2 	andeq	r0, r0, r2, ror #3
     104:	400c0e41 	andmi	r0, ip, r1, asr #28
     108:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     10c:	018e4002 	orreq	r4, lr, r2
     110:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     114:	0000070d 	andeq	r0, r0, sp, lsl #14
     118:	0000001c 	andeq	r0, r0, ip, lsl r0
     11c:	00000000 	andeq	r0, r0, r0
     120:	20000782 	andcs	r0, r0, r2, lsl #15
     124:	000000d6 	ldrdeq	r0, [r0], -r6
     128:	40080e41 	andmi	r0, r8, r1, asr #28
     12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     130:	180e4101 	stmdane	lr, {r0, r8, lr}
     134:	00070d41 	andeq	r0, r7, r1, asr #26
     138:	0000001c 	andeq	r0, r0, ip, lsl r0
     13c:	00000000 	andeq	r0, r0, r0
     140:	20000858 	andcs	r0, r0, r8, asr r8
     144:	00000056 	andeq	r0, r0, r6, asr r0
     148:	40080e41 	andmi	r0, r8, r1, asr #28
     14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     150:	100e4101 	andne	r4, lr, r1, lsl #2
     154:	00070d41 	andeq	r0, r7, r1, asr #26
     158:	0000001c 	andeq	r0, r0, ip, lsl r0
     15c:	00000000 	andeq	r0, r0, r0
     160:	200008ae 	andcs	r0, r0, lr, lsr #17
     164:	000001aa 	andeq	r0, r0, sl, lsr #3
     168:	40080e41 	andmi	r0, r8, r1, asr #28
     16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     170:	180e4101 	stmdane	lr, {r0, r8, lr}
     174:	00070d41 	andeq	r0, r7, r1, asr #26
     178:	0000001c 	andeq	r0, r0, ip, lsl r0
     17c:	00000000 	andeq	r0, r0, r0
     180:	20000a58 	andcs	r0, r0, r8, asr sl
     184:	00000038 	andeq	r0, r0, r8, lsr r0
     188:	40080e41 	andmi	r0, r8, r1, asr #28
     18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     190:	100e4101 	andne	r4, lr, r1, lsl #2
     194:	00070d41 	andeq	r0, r7, r1, asr #26
     198:	0000001c 	andeq	r0, r0, ip, lsl r0
     19c:	00000000 	andeq	r0, r0, r0
     1a0:	20000a90 	mulcs	r0, r0, sl
     1a4:	00000060 	andeq	r0, r0, r0, rrx
     1a8:	40080e41 	andmi	r0, r8, r1, asr #28
     1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1b0:	180e4101 	stmdane	lr, {r0, r8, lr}
     1b4:	00070d41 	andeq	r0, r7, r1, asr #26
     1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     1bc:	00000000 	andeq	r0, r0, r0
     1c0:	20000af0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     1c4:	00000124 	andeq	r0, r0, r4, lsr #2
     1c8:	40080e41 	andmi	r0, r8, r1, asr #28
     1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1d0:	180e4101 	stmdane	lr, {r0, r8, lr}
     1d4:	00070d41 	andeq	r0, r7, r1, asr #26
     1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     1dc:	00000000 	andeq	r0, r0, r0
     1e0:	20000c14 	andcs	r0, r0, r4, lsl ip
     1e4:	00000042 	andeq	r0, r0, r2, asr #32
     1e8:	40080e41 	andmi	r0, r8, r1, asr #28
     1ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1f0:	180e4101 	stmdane	lr, {r0, r8, lr}
     1f4:	00070d41 	andeq	r0, r7, r1, asr #26
     1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     1fc:	00000000 	andeq	r0, r0, r0
     200:	20000c56 	andcs	r0, r0, r6, asr ip
     204:	00000062 	andeq	r0, r0, r2, rrx
     208:	40080e41 	andmi	r0, r8, r1, asr #28
     20c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     210:	180e4101 	stmdane	lr, {r0, r8, lr}
     214:	00070d41 	andeq	r0, r7, r1, asr #26
     218:	0000001c 	andeq	r0, r0, ip, lsl r0
     21c:	00000000 	andeq	r0, r0, r0
     220:	20000cb8 			; <UNDEFINED> instruction: 0x20000cb8
     224:	0000002e 	andeq	r0, r0, lr, lsr #32
     228:	40080e41 	andmi	r0, r8, r1, asr #28
     22c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     230:	180e4101 	stmdane	lr, {r0, r8, lr}
     234:	00070d41 	andeq	r0, r7, r1, asr #26
     238:	0000001c 	andeq	r0, r0, ip, lsl r0
     23c:	00000000 	andeq	r0, r0, r0
     240:	20000ce6 	andcs	r0, r0, r6, ror #25
     244:	00000026 	andeq	r0, r0, r6, lsr #32
     248:	40080e41 	andmi	r0, r8, r1, asr #28
     24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     250:	180e4101 	stmdane	lr, {r0, r8, lr}
     254:	00070d41 	andeq	r0, r7, r1, asr #26
     258:	0000001c 	andeq	r0, r0, ip, lsl r0
     25c:	00000000 	andeq	r0, r0, r0
     260:	20000d0c 	andcs	r0, r0, ip, lsl #26
     264:	00000026 	andeq	r0, r0, r6, lsr #32
     268:	40080e41 	andmi	r0, r8, r1, asr #28
     26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     270:	180e4101 	stmdane	lr, {r0, r8, lr}
     274:	00070d41 	andeq	r0, r7, r1, asr #26
     278:	0000001c 	andeq	r0, r0, ip, lsl r0
     27c:	00000000 	andeq	r0, r0, r0
     280:	20000d32 	andcs	r0, r0, r2, lsr sp
     284:	0000003a 	andeq	r0, r0, sl, lsr r0
     288:	40080e41 	andmi	r0, r8, r1, asr #28
     28c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     290:	180e4101 	stmdane	lr, {r0, r8, lr}
     294:	00070d41 	andeq	r0, r7, r1, asr #26
     298:	0000001c 	andeq	r0, r0, ip, lsl r0
     29c:	00000000 	andeq	r0, r0, r0
     2a0:	20000d6c 	andcs	r0, r0, ip, ror #26
     2a4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     2a8:	40080e41 	andmi	r0, r8, r1, asr #28
     2ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2b0:	180e4101 	stmdane	lr, {r0, r8, lr}
     2b4:	00070d41 	andeq	r0, r7, r1, asr #26
     2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2bc:	00000000 	andeq	r0, r0, r0
     2c0:	20000e5c 	andcs	r0, r0, ip, asr lr
     2c4:	00000070 	andeq	r0, r0, r0, ror r0
     2c8:	40080e41 	andmi	r0, r8, r1, asr #28
     2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2d0:	180e4101 	stmdane	lr, {r0, r8, lr}
     2d4:	00070d41 	andeq	r0, r7, r1, asr #26
     2d8:	00000020 	andeq	r0, r0, r0, lsr #32
     2dc:	00000000 	andeq	r0, r0, r0
     2e0:	20000ecc 	andcs	r0, r0, ip, asr #29
     2e4:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     2e8:	400c0e41 	andmi	r0, ip, r1, asr #28
     2ec:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     2f0:	018e4002 	orreq	r4, lr, r2
     2f4:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     2f8:	0000070d 	andeq	r0, r0, sp, lsl #14
     2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     300:	00000000 	andeq	r0, r0, r0
     304:	200010bc 	strhcs	r1, [r0], -ip
     308:	000000ec 	andeq	r0, r0, ip, ror #1
     30c:	40080e41 	andmi	r0, r8, r1, asr #28
     310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     314:	100e4101 	andne	r4, lr, r1, lsl #2
     318:	00070d41 	andeq	r0, r7, r1, asr #26
     31c:	0000001c 	andeq	r0, r0, ip, lsl r0
     320:	00000000 	andeq	r0, r0, r0
     324:	200011a8 	andcs	r1, r0, r8, lsr #3
     328:	0000003a 	andeq	r0, r0, sl, lsr r0
     32c:	40080e41 	andmi	r0, r8, r1, asr #28
     330:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     334:	180e4101 	stmdane	lr, {r0, r8, lr}
     338:	00070d41 	andeq	r0, r7, r1, asr #26
     33c:	0000000c 	andeq	r0, r0, ip
     340:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     344:	7c020001 	stcvc	0, cr0, [r2], {1}
     348:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     34c:	0000001c 	andeq	r0, r0, ip, lsl r0
     350:	0000033c 	andeq	r0, r0, ip, lsr r3
     354:	200011e4 	andcs	r1, r0, r4, ror #3
     358:	00000024 	andeq	r0, r0, r4, lsr #32
     35c:	40080e41 	andmi	r0, r8, r1, asr #28
     360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     364:	100e4101 	andne	r4, lr, r1, lsl #2
     368:	00070d41 	andeq	r0, r7, r1, asr #26
     36c:	00000024 	andeq	r0, r0, r4, lsr #32
     370:	0000033c 	andeq	r0, r0, ip, lsr r3
     374:	20001208 	andcs	r1, r0, r8, lsl #4
     378:	000000f8 	strdeq	r0, [r0], -r8
     37c:	40100e41 	andsmi	r0, r0, r1, asr #28
     380:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
     384:	02874003 	addeq	r4, r7, #3
     388:	41018e40 	tstmi	r1, r0, asr #28
     38c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     390:	00000007 	andeq	r0, r0, r7
     394:	0000001c 	andeq	r0, r0, ip, lsl r0
     398:	0000033c 	andeq	r0, r0, ip, lsr r3
     39c:	20001300 	andcs	r1, r0, r0, lsl #6
     3a0:	0000002c 	andeq	r0, r0, ip, lsr #32
     3a4:	40080e41 	andmi	r0, r8, r1, asr #28
     3a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3ac:	100e4101 	andne	r4, lr, r1, lsl #2
     3b0:	00070d41 	andeq	r0, r7, r1, asr #26
     3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3b8:	0000033c 	andeq	r0, r0, ip, lsr r3
     3bc:	2000132c 	andcs	r1, r0, ip, lsr #6
     3c0:	00000048 	andeq	r0, r0, r8, asr #32
     3c4:	40080e41 	andmi	r0, r8, r1, asr #28
     3c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3cc:	100e4101 	andne	r4, lr, r1, lsl #2
     3d0:	00070d41 	andeq	r0, r7, r1, asr #26
     3d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3d8:	0000033c 	andeq	r0, r0, ip, lsr r3
     3dc:	20001374 	andcs	r1, r0, r4, ror r3
     3e0:	00000034 	andeq	r0, r0, r4, lsr r0
     3e4:	40080e41 	andmi	r0, r8, r1, asr #28
     3e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3ec:	100e4101 	andne	r4, lr, r1, lsl #2
     3f0:	00070d41 	andeq	r0, r7, r1, asr #26
     3f4:	0000000c 	andeq	r0, r0, ip
     3f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     3fc:	7c020001 	stcvc	0, cr0, [r2], {1}
     400:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     404:	00000020 	andeq	r0, r0, r0, lsr #32
     408:	000003f4 	strdeq	r0, [r0], -r4
     40c:	200013a8 	andcs	r1, r0, r8, lsr #7
     410:	000000c6 	andeq	r0, r0, r6, asr #1
     414:	400c0e41 	andmi	r0, ip, r1, asr #28
     418:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     41c:	018e4002 	orreq	r4, lr, r2
     420:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     424:	0000070d 	andeq	r0, r0, sp, lsl #14
     428:	0000001c 	andeq	r0, r0, ip, lsl r0
     42c:	000003f4 	strdeq	r0, [r0], -r4
     430:	2000146e 	andcs	r1, r0, lr, ror #8
     434:	0000008a 	andeq	r0, r0, sl, lsl #1
     438:	40080e41 	andmi	r0, r8, r1, asr #28
     43c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     440:	200e4101 	andcs	r4, lr, r1, lsl #2
     444:	00070d41 	andeq	r0, r7, r1, asr #26
     448:	0000001c 	andeq	r0, r0, ip, lsl r0
     44c:	000003f4 	strdeq	r0, [r0], -r4
     450:	200014f8 	strdcs	r1, [r0], -r8
     454:	00000062 	andeq	r0, r0, r2, rrx
     458:	40080e41 	andmi	r0, r8, r1, asr #28
     45c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     460:	180e4101 	stmdane	lr, {r0, r8, lr}
     464:	00070d41 	andeq	r0, r7, r1, asr #26
     468:	0000001c 	andeq	r0, r0, ip, lsl r0
     46c:	000003f4 	strdeq	r0, [r0], -r4
     470:	2000155a 	andcs	r1, r0, sl, asr r5
     474:	00000028 	andeq	r0, r0, r8, lsr #32
     478:	40080e41 	andmi	r0, r8, r1, asr #28
     47c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     480:	180e4101 	stmdane	lr, {r0, r8, lr}
     484:	00070d41 	andeq	r0, r7, r1, asr #26
     488:	0000000c 	andeq	r0, r0, ip
     48c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     490:	7c020001 	stcvc	0, cr0, [r2], {1}
     494:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     498:	0000001c 	andeq	r0, r0, ip, lsl r0
     49c:	00000488 	andeq	r0, r0, r8, lsl #9
     4a0:	20001584 	andcs	r1, r0, r4, lsl #11
     4a4:	00000170 	andeq	r0, r0, r0, ror r1
     4a8:	40080e41 	andmi	r0, r8, r1, asr #28
     4ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4b0:	100e4101 	andne	r4, lr, r1, lsl #2
     4b4:	00070d41 	andeq	r0, r7, r1, asr #26
     4b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     4bc:	00000488 	andeq	r0, r0, r8, lsl #9
     4c0:	200016f4 	strdcs	r1, [r0], -r4
     4c4:	00000118 	andeq	r0, r0, r8, lsl r1
     4c8:	40080e41 	andmi	r0, r8, r1, asr #28
     4cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4d0:	200e4101 	andcs	r4, lr, r1, lsl #2
     4d4:	00070d41 	andeq	r0, r7, r1, asr #26
     4d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     4dc:	00000488 	andeq	r0, r0, r8, lsl #9
     4e0:	2000180c 	andcs	r1, r0, ip, lsl #16
     4e4:	00000034 	andeq	r0, r0, r4, lsr r0
     4e8:	40080e41 	andmi	r0, r8, r1, asr #28
     4ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4f0:	100e4101 	andne	r4, lr, r1, lsl #2
     4f4:	00070d41 	andeq	r0, r7, r1, asr #26
     4f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     4fc:	00000488 	andeq	r0, r0, r8, lsl #9
     500:	20001840 	andcs	r1, r0, r0, asr #16
     504:	00000046 	andeq	r0, r0, r6, asr #32
     508:	40080e41 	andmi	r0, r8, r1, asr #28
     50c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     510:	180e4101 	stmdane	lr, {r0, r8, lr}
     514:	00070d41 	andeq	r0, r7, r1, asr #26
     518:	0000001c 	andeq	r0, r0, ip, lsl r0
     51c:	00000488 	andeq	r0, r0, r8, lsl #9
     520:	20001886 	andcs	r1, r0, r6, lsl #17
     524:	00000042 	andeq	r0, r0, r2, asr #32
     528:	40080e41 	andmi	r0, r8, r1, asr #28
     52c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     530:	180e4101 	stmdane	lr, {r0, r8, lr}
     534:	00070d41 	andeq	r0, r7, r1, asr #26
     538:	0000001c 	andeq	r0, r0, ip, lsl r0
     53c:	00000488 	andeq	r0, r0, r8, lsl #9
     540:	200018c8 	andcs	r1, r0, r8, asr #17
     544:	00000016 	andeq	r0, r0, r6, lsl r0
     548:	40080e41 	andmi	r0, r8, r1, asr #28
     54c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     550:	100e4101 	andne	r4, lr, r1, lsl #2
     554:	00070d41 	andeq	r0, r7, r1, asr #26
     558:	0000001c 	andeq	r0, r0, ip, lsl r0
     55c:	00000488 	andeq	r0, r0, r8, lsl #9
     560:	200018de 	ldrdcs	r1, [r0], -lr
     564:	00000042 	andeq	r0, r0, r2, asr #32
     568:	40080e41 	andmi	r0, r8, r1, asr #28
     56c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     570:	180e4101 	stmdane	lr, {r0, r8, lr}
     574:	00070d41 	andeq	r0, r7, r1, asr #26
     578:	0000001c 	andeq	r0, r0, ip, lsl r0
     57c:	00000488 	andeq	r0, r0, r8, lsl #9
     580:	20001920 	andcs	r1, r0, r0, lsr #18
     584:	00000016 	andeq	r0, r0, r6, lsl r0
     588:	40080e41 	andmi	r0, r8, r1, asr #28
     58c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     590:	100e4101 	andne	r4, lr, r1, lsl #2
     594:	00070d41 	andeq	r0, r7, r1, asr #26
     598:	0000001c 	andeq	r0, r0, ip, lsl r0
     59c:	00000488 	andeq	r0, r0, r8, lsl #9
     5a0:	20001936 	andcs	r1, r0, r6, lsr r9
     5a4:	0000001e 	andeq	r0, r0, lr, lsl r0
     5a8:	40080e41 	andmi	r0, r8, r1, asr #28
     5ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5b0:	100e4101 	andne	r4, lr, r1, lsl #2
     5b4:	00070d41 	andeq	r0, r7, r1, asr #26
     5b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5bc:	00000488 	andeq	r0, r0, r8, lsl #9
     5c0:	20001954 	andcs	r1, r0, r4, asr r9
     5c4:	0000001e 	andeq	r0, r0, lr, lsl r0
     5c8:	40080e41 	andmi	r0, r8, r1, asr #28
     5cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5d0:	100e4101 	andne	r4, lr, r1, lsl #2
     5d4:	00070d41 	andeq	r0, r7, r1, asr #26
     5d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5dc:	00000488 	andeq	r0, r0, r8, lsl #9
     5e0:	20001972 	andcs	r1, r0, r2, ror r9
     5e4:	0000003a 	andeq	r0, r0, sl, lsr r0
     5e8:	40080e41 	andmi	r0, r8, r1, asr #28
     5ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5f0:	100e4101 	andne	r4, lr, r1, lsl #2
     5f4:	00070d41 	andeq	r0, r7, r1, asr #26
     5f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5fc:	00000488 	andeq	r0, r0, r8, lsl #9
     600:	200019ac 	andcs	r1, r0, ip, lsr #19
     604:	0000001e 	andeq	r0, r0, lr, lsl r0
     608:	40080e41 	andmi	r0, r8, r1, asr #28
     60c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     610:	100e4101 	andne	r4, lr, r1, lsl #2
     614:	00070d41 	andeq	r0, r7, r1, asr #26
     618:	0000001c 	andeq	r0, r0, ip, lsl r0
     61c:	00000488 	andeq	r0, r0, r8, lsl #9
     620:	200019ca 	andcs	r1, r0, sl, asr #19
     624:	00000024 	andeq	r0, r0, r4, lsr #32
     628:	40080e41 	andmi	r0, r8, r1, asr #28
     62c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     630:	100e4101 	andne	r4, lr, r1, lsl #2
     634:	00070d41 	andeq	r0, r7, r1, asr #26
     638:	0000001c 	andeq	r0, r0, ip, lsl r0
     63c:	00000488 	andeq	r0, r0, r8, lsl #9
     640:	200019ee 	andcs	r1, r0, lr, ror #19
     644:	000000a4 	andeq	r0, r0, r4, lsr #1
     648:	40080e41 	andmi	r0, r8, r1, asr #28
     64c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     650:	180e4101 	stmdane	lr, {r0, r8, lr}
     654:	00070d41 	andeq	r0, r7, r1, asr #26
     658:	0000000c 	andeq	r0, r0, ip
     65c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     660:	7c020001 	stcvc	0, cr0, [r2], {1}
     664:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     668:	00000018 	andeq	r0, r0, r8, lsl r0
     66c:	00000658 	andeq	r0, r0, r8, asr r6
     670:	20001a94 	mulcs	r0, r4, sl
     674:	0000001a 	andeq	r0, r0, sl, lsl r0
     678:	40080e41 	andmi	r0, r8, r1, asr #28
     67c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     680:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     684:	0000001c 	andeq	r0, r0, ip, lsl r0
     688:	00000658 	andeq	r0, r0, r8, asr r6
     68c:	20001aae 	andcs	r1, r0, lr, lsr #21
     690:	0000003a 	andeq	r0, r0, sl, lsr r0
     694:	40080e41 	andmi	r0, r8, r1, asr #28
     698:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     69c:	100e4101 	andne	r4, lr, r1, lsl #2
     6a0:	00070d41 	andeq	r0, r7, r1, asr #26
     6a4:	00000018 	andeq	r0, r0, r8, lsl r0
     6a8:	00000658 	andeq	r0, r0, r8, asr r6
     6ac:	20001ae8 	andcs	r1, r0, r8, ror #21
     6b0:	00000014 	andeq	r0, r0, r4, lsl r0
     6b4:	40080e41 	andmi	r0, r8, r1, asr #28
     6b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6c4:	00000658 	andeq	r0, r0, r8, asr r6
     6c8:	20001afc 	strdcs	r1, [r0], -ip
     6cc:	0000003c 	andeq	r0, r0, ip, lsr r0
     6d0:	40080e41 	andmi	r0, r8, r1, asr #28
     6d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6d8:	100e4101 	andne	r4, lr, r1, lsl #2
     6dc:	00070d41 	andeq	r0, r7, r1, asr #26
     6e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6e4:	00000658 	andeq	r0, r0, r8, asr r6
     6e8:	20001b38 	andcs	r1, r0, r8, lsr fp
     6ec:	00000044 	andeq	r0, r0, r4, asr #32
     6f0:	40080e41 	andmi	r0, r8, r1, asr #28
     6f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6f8:	180e4101 	stmdane	lr, {r0, r8, lr}
     6fc:	00070d41 	andeq	r0, r7, r1, asr #26
     700:	0000001c 	andeq	r0, r0, ip, lsl r0
     704:	00000658 	andeq	r0, r0, r8, asr r6
     708:	20001b7c 	andcs	r1, r0, ip, ror fp
     70c:	00000024 	andeq	r0, r0, r4, lsr #32
     710:	40080e41 	andmi	r0, r8, r1, asr #28
     714:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     718:	100e4101 	andne	r4, lr, r1, lsl #2
     71c:	00070d41 	andeq	r0, r7, r1, asr #26
     720:	0000001c 	andeq	r0, r0, ip, lsl r0
     724:	00000658 	andeq	r0, r0, r8, asr r6
     728:	20001ba0 	andcs	r1, r0, r0, lsr #23
     72c:	00000044 	andeq	r0, r0, r4, asr #32
     730:	40080e41 	andmi	r0, r8, r1, asr #28
     734:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     738:	180e4101 	stmdane	lr, {r0, r8, lr}
     73c:	00070d41 	andeq	r0, r7, r1, asr #26
     740:	0000001c 	andeq	r0, r0, ip, lsl r0
     744:	00000658 	andeq	r0, r0, r8, asr r6
     748:	20001be4 	andcs	r1, r0, r4, ror #23
     74c:	00000024 	andeq	r0, r0, r4, lsr #32
     750:	40080e41 	andmi	r0, r8, r1, asr #28
     754:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     758:	100e4101 	andne	r4, lr, r1, lsl #2
     75c:	00070d41 	andeq	r0, r7, r1, asr #26
     760:	0000000c 	andeq	r0, r0, ip
     764:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     768:	7c020001 	stcvc	0, cr0, [r2], {1}
     76c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     770:	0000001c 	andeq	r0, r0, ip, lsl r0
     774:	00000760 	andeq	r0, r0, r0, ror #14
     778:	20001c08 	andcs	r1, r0, r8, lsl #24
     77c:	00000060 	andeq	r0, r0, r0, rrx
     780:	40080e41 	andmi	r0, r8, r1, asr #28
     784:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     788:	100e4101 	andne	r4, lr, r1, lsl #2
     78c:	00070d41 	andeq	r0, r7, r1, asr #26
     790:	0000001c 	andeq	r0, r0, ip, lsl r0
     794:	00000760 	andeq	r0, r0, r0, ror #14
     798:	20001c68 	andcs	r1, r0, r8, ror #24
     79c:	00000048 	andeq	r0, r0, r8, asr #32
     7a0:	40080e41 	andmi	r0, r8, r1, asr #28
     7a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7a8:	100e4101 	andne	r4, lr, r1, lsl #2
     7ac:	00070d41 	andeq	r0, r7, r1, asr #26
     7b0:	00000018 	andeq	r0, r0, r8, lsl r0
     7b4:	00000760 	andeq	r0, r0, r0, ror #14
     7b8:	20001cb0 			; <UNDEFINED> instruction: 0x20001cb0
     7bc:	00000070 	andeq	r0, r0, r0, ror r0
     7c0:	40080e41 	andmi	r0, r8, r1, asr #28
     7c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7c8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     7cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     7d0:	00000760 	andeq	r0, r0, r0, ror #14
     7d4:	20001d20 	andcs	r1, r0, r0, lsr #26
     7d8:	00000028 	andeq	r0, r0, r8, lsr #32
     7dc:	40080e41 	andmi	r0, r8, r1, asr #28
     7e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7e4:	100e4101 	andne	r4, lr, r1, lsl #2
     7e8:	00070d41 	andeq	r0, r7, r1, asr #26
     7ec:	00000020 	andeq	r0, r0, r0, lsr #32
     7f0:	00000760 	andeq	r0, r0, r0, ror #14
     7f4:	20001d48 	andcs	r1, r0, r8, asr #26
     7f8:	0000005e 	andeq	r0, r0, lr, asr r0
     7fc:	400c0e41 	andmi	r0, ip, r1, asr #28
     800:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     804:	018e4002 	orreq	r4, lr, r2
     808:	41180e41 	tstmi	r8, r1, asr #28
     80c:	0000070d 	andeq	r0, r0, sp, lsl #14
     810:	0000001c 	andeq	r0, r0, ip, lsl r0
     814:	00000760 	andeq	r0, r0, r0, ror #14
     818:	20001da6 	andcs	r1, r0, r6, lsr #27
     81c:	0000003e 	andeq	r0, r0, lr, lsr r0
     820:	40080e41 	andmi	r0, r8, r1, asr #28
     824:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     828:	180e4101 	stmdane	lr, {r0, r8, lr}
     82c:	00070d41 	andeq	r0, r7, r1, asr #26
     830:	0000001c 	andeq	r0, r0, ip, lsl r0
     834:	00000760 	andeq	r0, r0, r0, ror #14
     838:	20001de4 	andcs	r1, r0, r4, ror #27
     83c:	00000020 	andeq	r0, r0, r0, lsr #32
     840:	40080e41 	andmi	r0, r8, r1, asr #28
     844:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     848:	100e4101 	andne	r4, lr, r1, lsl #2
     84c:	00070d41 	andeq	r0, r7, r1, asr #26
     850:	0000001c 	andeq	r0, r0, ip, lsl r0
     854:	00000760 	andeq	r0, r0, r0, ror #14
     858:	20001e04 	andcs	r1, r0, r4, lsl #28
     85c:	00000044 	andeq	r0, r0, r4, asr #32
     860:	40080e41 	andmi	r0, r8, r1, asr #28
     864:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     868:	100e4101 	andne	r4, lr, r1, lsl #2
     86c:	00070d41 	andeq	r0, r7, r1, asr #26
     870:	0000001c 	andeq	r0, r0, ip, lsl r0
     874:	00000760 	andeq	r0, r0, r0, ror #14
     878:	20001e48 	andcs	r1, r0, r8, asr #28
     87c:	00000020 	andeq	r0, r0, r0, lsr #32
     880:	40080e41 	andmi	r0, r8, r1, asr #28
     884:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     888:	100e4101 	andne	r4, lr, r1, lsl #2
     88c:	00070d41 	andeq	r0, r7, r1, asr #26
     890:	0000001c 	andeq	r0, r0, ip, lsl r0
     894:	00000760 	andeq	r0, r0, r0, ror #14
     898:	20001e68 	andcs	r1, r0, r8, ror #28
     89c:	0000003c 	andeq	r0, r0, ip, lsr r0
     8a0:	40080e41 	andmi	r0, r8, r1, asr #28
     8a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8a8:	180e4101 	stmdane	lr, {r0, r8, lr}
     8ac:	00070d41 	andeq	r0, r7, r1, asr #26
     8b0:	0000001c 	andeq	r0, r0, ip, lsl r0
     8b4:	00000760 	andeq	r0, r0, r0, ror #14
     8b8:	20001ea4 	andcs	r1, r0, r4, lsr #29
     8bc:	00000020 	andeq	r0, r0, r0, lsr #32
     8c0:	40080e41 	andmi	r0, r8, r1, asr #28
     8c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8c8:	100e4101 	andne	r4, lr, r1, lsl #2
     8cc:	00070d41 	andeq	r0, r7, r1, asr #26
     8d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     8d4:	00000760 	andeq	r0, r0, r0, ror #14
     8d8:	20001ec4 	andcs	r1, r0, r4, asr #29
     8dc:	00000028 	andeq	r0, r0, r8, lsr #32
     8e0:	40080e41 	andmi	r0, r8, r1, asr #28
     8e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8e8:	100e4101 	andne	r4, lr, r1, lsl #2
     8ec:	00070d41 	andeq	r0, r7, r1, asr #26
     8f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     8f4:	00000760 	andeq	r0, r0, r0, ror #14
     8f8:	20001eec 	andcs	r1, r0, ip, ror #29
     8fc:	00000020 	andeq	r0, r0, r0, lsr #32
     900:	40080e41 	andmi	r0, r8, r1, asr #28
     904:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     908:	100e4101 	andne	r4, lr, r1, lsl #2
     90c:	00070d41 	andeq	r0, r7, r1, asr #26
     910:	0000001c 	andeq	r0, r0, ip, lsl r0
     914:	00000760 	andeq	r0, r0, r0, ror #14
     918:	20001f0c 	andcs	r1, r0, ip, lsl #30
     91c:	00000030 	andeq	r0, r0, r0, lsr r0
     920:	40080e41 	andmi	r0, r8, r1, asr #28
     924:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     928:	180e4101 	stmdane	lr, {r0, r8, lr}
     92c:	00070d41 	andeq	r0, r7, r1, asr #26
     930:	0000001c 	andeq	r0, r0, ip, lsl r0
     934:	00000760 	andeq	r0, r0, r0, ror #14
     938:	20001f3c 	andcs	r1, r0, ip, lsr pc
     93c:	00000020 	andeq	r0, r0, r0, lsr #32
     940:	40080e41 	andmi	r0, r8, r1, asr #28
     944:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     948:	100e4101 	andne	r4, lr, r1, lsl #2
     94c:	00070d41 	andeq	r0, r7, r1, asr #26
     950:	0000001c 	andeq	r0, r0, ip, lsl r0
     954:	00000760 	andeq	r0, r0, r0, ror #14
     958:	20001f5c 	andcs	r1, r0, ip, asr pc
     95c:	00000020 	andeq	r0, r0, r0, lsr #32
     960:	40080e41 	andmi	r0, r8, r1, asr #28
     964:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     968:	100e4101 	andne	r4, lr, r1, lsl #2
     96c:	00070d41 	andeq	r0, r7, r1, asr #26
     970:	0000001c 	andeq	r0, r0, ip, lsl r0
     974:	00000760 	andeq	r0, r0, r0, ror #14
     978:	20001f7c 	andcs	r1, r0, ip, ror pc
     97c:	00000040 	andeq	r0, r0, r0, asr #32
     980:	40080e41 	andmi	r0, r8, r1, asr #28
     984:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     988:	180e4101 	stmdane	lr, {r0, r8, lr}
     98c:	00070d41 	andeq	r0, r7, r1, asr #26
     990:	0000001c 	andeq	r0, r0, ip, lsl r0
     994:	00000760 	andeq	r0, r0, r0, ror #14
     998:	20001fbc 			; <UNDEFINED> instruction: 0x20001fbc
     99c:	0000003c 	andeq	r0, r0, ip, lsr r0
     9a0:	40080e41 	andmi	r0, r8, r1, asr #28
     9a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9a8:	180e4101 	stmdane	lr, {r0, r8, lr}
     9ac:	00070d41 	andeq	r0, r7, r1, asr #26
     9b0:	0000001c 	andeq	r0, r0, ip, lsl r0
     9b4:	00000760 	andeq	r0, r0, r0, ror #14
     9b8:	20001ff8 	strdcs	r1, [r0], -r8
     9bc:	00000034 	andeq	r0, r0, r4, lsr r0
     9c0:	40080e41 	andmi	r0, r8, r1, asr #28
     9c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9c8:	180e4101 	stmdane	lr, {r0, r8, lr}
     9cc:	00070d41 	andeq	r0, r7, r1, asr #26
     9d0:	00000018 	andeq	r0, r0, r8, lsl r0
     9d4:	00000760 	andeq	r0, r0, r0, ror #14
     9d8:	2000202c 	andcs	r2, r0, ip, lsr #32
     9dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     9e0:	40080e41 	andmi	r0, r8, r1, asr #28
     9e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9e8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     9f0:	00000760 	andeq	r0, r0, r0, ror #14
     9f4:	20002048 	andcs	r2, r0, r8, asr #32
     9f8:	00000034 	andeq	r0, r0, r4, lsr r0
     9fc:	40080e41 	andmi	r0, r8, r1, asr #28
     a00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a04:	180e4101 	stmdane	lr, {r0, r8, lr}
     a08:	00070d41 	andeq	r0, r7, r1, asr #26
     a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a10:	00000760 	andeq	r0, r0, r0, ror #14
     a14:	2000207c 	andcs	r2, r0, ip, ror r0
     a18:	00000038 	andeq	r0, r0, r8, lsr r0
     a1c:	40080e41 	andmi	r0, r8, r1, asr #28
     a20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a24:	180e4101 	stmdane	lr, {r0, r8, lr}
     a28:	00070d41 	andeq	r0, r7, r1, asr #26
     a2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a30:	00000760 	andeq	r0, r0, r0, ror #14
     a34:	200020b4 	strhcs	r2, [r0], -r4
     a38:	0000003c 	andeq	r0, r0, ip, lsr r0
     a3c:	40080e41 	andmi	r0, r8, r1, asr #28
     a40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a44:	180e4101 	stmdane	lr, {r0, r8, lr}
     a48:	00070d41 	andeq	r0, r7, r1, asr #26
     a4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a50:	00000760 	andeq	r0, r0, r0, ror #14
     a54:	200020f0 	strdcs	r2, [r0], -r0
     a58:	00000158 	andeq	r0, r0, r8, asr r1
     a5c:	40080e41 	andmi	r0, r8, r1, asr #28
     a60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a64:	280e4101 	stmdacs	lr, {r0, r8, lr}
     a68:	00070d41 	andeq	r0, r7, r1, asr #26
     a6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a70:	00000760 	andeq	r0, r0, r0, ror #14
     a74:	20002248 	andcs	r2, r0, r8, asr #4
     a78:	00000060 	andeq	r0, r0, r0, rrx
     a7c:	40080e41 	andmi	r0, r8, r1, asr #28
     a80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a84:	180e4101 	stmdane	lr, {r0, r8, lr}
     a88:	00070d41 	andeq	r0, r7, r1, asr #26
     a8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a90:	00000760 	andeq	r0, r0, r0, ror #14
     a94:	200022a8 	andcs	r2, r0, r8, lsr #5
     a98:	00000020 	andeq	r0, r0, r0, lsr #32
     a9c:	40080e41 	andmi	r0, r8, r1, asr #28
     aa0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     aa4:	100e4101 	andne	r4, lr, r1, lsl #2
     aa8:	00070d41 	andeq	r0, r7, r1, asr #26
     aac:	0000001c 	andeq	r0, r0, ip, lsl r0
     ab0:	00000760 	andeq	r0, r0, r0, ror #14
     ab4:	200022c8 	andcs	r2, r0, r8, asr #5
     ab8:	00000020 	andeq	r0, r0, r0, lsr #32
     abc:	40080e41 	andmi	r0, r8, r1, asr #28
     ac0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ac4:	100e4101 	andne	r4, lr, r1, lsl #2
     ac8:	00070d41 	andeq	r0, r7, r1, asr #26
     acc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ad0:	00000760 	andeq	r0, r0, r0, ror #14
     ad4:	200022e8 	andcs	r2, r0, r8, ror #5
     ad8:	0000001c 	andeq	r0, r0, ip, lsl r0
     adc:	40080e41 	andmi	r0, r8, r1, asr #28
     ae0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ae4:	100e4101 	andne	r4, lr, r1, lsl #2
     ae8:	00070d41 	andeq	r0, r7, r1, asr #26
     aec:	0000001c 	andeq	r0, r0, ip, lsl r0
     af0:	00000760 	andeq	r0, r0, r0, ror #14
     af4:	20002304 	andcs	r2, r0, r4, lsl #6
     af8:	0000003c 	andeq	r0, r0, ip, lsr r0
     afc:	40080e41 	andmi	r0, r8, r1, asr #28
     b00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b04:	180e4101 	stmdane	lr, {r0, r8, lr}
     b08:	00070d41 	andeq	r0, r7, r1, asr #26
     b0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b10:	00000760 	andeq	r0, r0, r0, ror #14
     b14:	20002340 	andcs	r2, r0, r0, asr #6
     b18:	0000003c 	andeq	r0, r0, ip, lsr r0
     b1c:	40080e41 	andmi	r0, r8, r1, asr #28
     b20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b24:	180e4101 	stmdane	lr, {r0, r8, lr}
     b28:	00070d41 	andeq	r0, r7, r1, asr #26
     b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b30:	00000760 	andeq	r0, r0, r0, ror #14
     b34:	2000237c 	andcs	r2, r0, ip, ror r3
     b38:	0000003c 	andeq	r0, r0, ip, lsr r0
     b3c:	40080e41 	andmi	r0, r8, r1, asr #28
     b40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b44:	180e4101 	stmdane	lr, {r0, r8, lr}
     b48:	00070d41 	andeq	r0, r7, r1, asr #26
     b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b50:	00000760 	andeq	r0, r0, r0, ror #14
     b54:	200023b8 			; <UNDEFINED> instruction: 0x200023b8
     b58:	00000040 	andeq	r0, r0, r0, asr #32
     b5c:	40080e41 	andmi	r0, r8, r1, asr #28
     b60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b64:	180e4101 	stmdane	lr, {r0, r8, lr}
     b68:	00070d41 	andeq	r0, r7, r1, asr #26
     b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b70:	00000760 	andeq	r0, r0, r0, ror #14
     b74:	200023f8 	strdcs	r2, [r0], -r8
     b78:	0000003c 	andeq	r0, r0, ip, lsr r0
     b7c:	40080e41 	andmi	r0, r8, r1, asr #28
     b80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b84:	180e4101 	stmdane	lr, {r0, r8, lr}
     b88:	00070d41 	andeq	r0, r7, r1, asr #26
     b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b90:	00000760 	andeq	r0, r0, r0, ror #14
     b94:	20002434 	andcs	r2, r0, r4, lsr r4
     b98:	0000001c 	andeq	r0, r0, ip, lsl r0
     b9c:	40080e41 	andmi	r0, r8, r1, asr #28
     ba0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ba4:	100e4101 	andne	r4, lr, r1, lsl #2
     ba8:	00070d41 	andeq	r0, r7, r1, asr #26
     bac:	0000001c 	andeq	r0, r0, ip, lsl r0
     bb0:	00000760 	andeq	r0, r0, r0, ror #14
     bb4:	20002450 	andcs	r2, r0, r0, asr r4
     bb8:	00000040 	andeq	r0, r0, r0, asr #32
     bbc:	40080e41 	andmi	r0, r8, r1, asr #28
     bc0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     bc4:	100e4101 	andne	r4, lr, r1, lsl #2
     bc8:	00070d41 	andeq	r0, r7, r1, asr #26
     bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
     bd0:	00000760 	andeq	r0, r0, r0, ror #14
     bd4:	20002490 	mulcs	r0, r0, r4
     bd8:	00000040 	andeq	r0, r0, r0, asr #32
     bdc:	40080e41 	andmi	r0, r8, r1, asr #28
     be0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     be4:	100e4101 	andne	r4, lr, r1, lsl #2
     be8:	00070d41 	andeq	r0, r7, r1, asr #26
     bec:	0000001c 	andeq	r0, r0, ip, lsl r0
     bf0:	00000760 	andeq	r0, r0, r0, ror #14
     bf4:	200024d0 	ldrdcs	r2, [r0], -r0
     bf8:	00000040 	andeq	r0, r0, r0, asr #32
     bfc:	40080e41 	andmi	r0, r8, r1, asr #28
     c00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c04:	100e4101 	andne	r4, lr, r1, lsl #2
     c08:	00070d41 	andeq	r0, r7, r1, asr #26
     c0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c10:	00000760 	andeq	r0, r0, r0, ror #14
     c14:	20002510 	andcs	r2, r0, r0, lsl r5
     c18:	00000040 	andeq	r0, r0, r0, asr #32
     c1c:	40080e41 	andmi	r0, r8, r1, asr #28
     c20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c24:	100e4101 	andne	r4, lr, r1, lsl #2
     c28:	00070d41 	andeq	r0, r7, r1, asr #26
     c2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c30:	00000760 	andeq	r0, r0, r0, ror #14
     c34:	20002550 	andcs	r2, r0, r0, asr r5
     c38:	00000040 	andeq	r0, r0, r0, asr #32
     c3c:	40080e41 	andmi	r0, r8, r1, asr #28
     c40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c44:	100e4101 	andne	r4, lr, r1, lsl #2
     c48:	00070d41 	andeq	r0, r7, r1, asr #26
     c4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c50:	00000760 	andeq	r0, r0, r0, ror #14
     c54:	20002590 	mulcs	r0, r0, r5
     c58:	00000040 	andeq	r0, r0, r0, asr #32
     c5c:	40080e41 	andmi	r0, r8, r1, asr #28
     c60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c64:	100e4101 	andne	r4, lr, r1, lsl #2
     c68:	00070d41 	andeq	r0, r7, r1, asr #26
     c6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c70:	00000760 	andeq	r0, r0, r0, ror #14
     c74:	200025d0 	ldrdcs	r2, [r0], -r0
     c78:	00000040 	andeq	r0, r0, r0, asr #32
     c7c:	40080e41 	andmi	r0, r8, r1, asr #28
     c80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c84:	100e4101 	andne	r4, lr, r1, lsl #2
     c88:	00070d41 	andeq	r0, r7, r1, asr #26
     c8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c90:	00000760 	andeq	r0, r0, r0, ror #14
     c94:	20002610 	andcs	r2, r0, r0, lsl r6
     c98:	00000040 	andeq	r0, r0, r0, asr #32
     c9c:	40080e41 	andmi	r0, r8, r1, asr #28
     ca0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ca4:	100e4101 	andne	r4, lr, r1, lsl #2
     ca8:	00070d41 	andeq	r0, r7, r1, asr #26
     cac:	0000001c 	andeq	r0, r0, ip, lsl r0
     cb0:	00000760 	andeq	r0, r0, r0, ror #14
     cb4:	20002650 	andcs	r2, r0, r0, asr r6
     cb8:	00000040 	andeq	r0, r0, r0, asr #32
     cbc:	40080e41 	andmi	r0, r8, r1, asr #28
     cc0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     cc4:	100e4101 	andne	r4, lr, r1, lsl #2
     cc8:	00070d41 	andeq	r0, r7, r1, asr #26
     ccc:	0000001c 	andeq	r0, r0, ip, lsl r0
     cd0:	00000760 	andeq	r0, r0, r0, ror #14
     cd4:	20002690 	mulcs	r0, r0, r6
     cd8:	00000040 	andeq	r0, r0, r0, asr #32
     cdc:	40080e41 	andmi	r0, r8, r1, asr #28
     ce0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ce4:	100e4101 	andne	r4, lr, r1, lsl #2
     ce8:	00070d41 	andeq	r0, r7, r1, asr #26
     cec:	0000001c 	andeq	r0, r0, ip, lsl r0
     cf0:	00000760 	andeq	r0, r0, r0, ror #14
     cf4:	200026d0 	ldrdcs	r2, [r0], -r0
     cf8:	00000040 	andeq	r0, r0, r0, asr #32
     cfc:	40080e41 	andmi	r0, r8, r1, asr #28
     d00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d04:	100e4101 	andne	r4, lr, r1, lsl #2
     d08:	00070d41 	andeq	r0, r7, r1, asr #26
     d0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d10:	00000760 	andeq	r0, r0, r0, ror #14
     d14:	20002710 	andcs	r2, r0, r0, lsl r7
     d18:	00000040 	andeq	r0, r0, r0, asr #32
     d1c:	40080e41 	andmi	r0, r8, r1, asr #28
     d20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d24:	100e4101 	andne	r4, lr, r1, lsl #2
     d28:	00070d41 	andeq	r0, r7, r1, asr #26
     d2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d30:	00000760 	andeq	r0, r0, r0, ror #14
     d34:	20002750 	andcs	r2, r0, r0, asr r7
     d38:	00000040 	andeq	r0, r0, r0, asr #32
     d3c:	40080e41 	andmi	r0, r8, r1, asr #28
     d40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d44:	100e4101 	andne	r4, lr, r1, lsl #2
     d48:	00070d41 	andeq	r0, r7, r1, asr #26
     d4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d50:	00000760 	andeq	r0, r0, r0, ror #14
     d54:	20002790 	mulcs	r0, r0, r7
     d58:	00000040 	andeq	r0, r0, r0, asr #32
     d5c:	40080e41 	andmi	r0, r8, r1, asr #28
     d60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d64:	100e4101 	andne	r4, lr, r1, lsl #2
     d68:	00070d41 	andeq	r0, r7, r1, asr #26
     d6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d70:	00000760 	andeq	r0, r0, r0, ror #14
     d74:	200027d0 	ldrdcs	r2, [r0], -r0
     d78:	00000040 	andeq	r0, r0, r0, asr #32
     d7c:	40080e41 	andmi	r0, r8, r1, asr #28
     d80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d84:	100e4101 	andne	r4, lr, r1, lsl #2
     d88:	00070d41 	andeq	r0, r7, r1, asr #26
     d8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d90:	00000760 	andeq	r0, r0, r0, ror #14
     d94:	20002810 	andcs	r2, r0, r0, lsl r8
     d98:	0000003c 	andeq	r0, r0, ip, lsr r0
     d9c:	40080e41 	andmi	r0, r8, r1, asr #28
     da0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     da4:	100e4101 	andne	r4, lr, r1, lsl #2
     da8:	00070d41 	andeq	r0, r7, r1, asr #26
     dac:	0000001c 	andeq	r0, r0, ip, lsl r0
     db0:	00000760 	andeq	r0, r0, r0, ror #14
     db4:	2000284c 	andcs	r2, r0, ip, asr #16
     db8:	00000050 	andeq	r0, r0, r0, asr r0
     dbc:	40080e41 	andmi	r0, r8, r1, asr #28
     dc0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     dc4:	100e4101 	andne	r4, lr, r1, lsl #2
     dc8:	00070d41 	andeq	r0, r7, r1, asr #26
     dcc:	0000001c 	andeq	r0, r0, ip, lsl r0
     dd0:	00000760 	andeq	r0, r0, r0, ror #14
     dd4:	2000289c 	mulcs	r0, ip, r8
     dd8:	00000084 	andeq	r0, r0, r4, lsl #1
     ddc:	40080e41 	andmi	r0, r8, r1, asr #28
     de0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     de4:	200e4101 	andcs	r4, lr, r1, lsl #2
     de8:	00070d41 	andeq	r0, r7, r1, asr #26
     dec:	00000018 	andeq	r0, r0, r8, lsl r0
     df0:	00000760 	andeq	r0, r0, r0, ror #14
     df4:	20002920 	andcs	r2, r0, r0, lsr #18
     df8:	0000001c 	andeq	r0, r0, ip, lsl r0
     dfc:	40080e41 	andmi	r0, r8, r1, asr #28
     e00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e04:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     e08:	0000001c 	andeq	r0, r0, ip, lsl r0
     e0c:	00000760 	andeq	r0, r0, r0, ror #14
     e10:	2000293c 	andcs	r2, r0, ip, lsr r9
     e14:	00000044 	andeq	r0, r0, r4, asr #32
     e18:	40080e41 	andmi	r0, r8, r1, asr #28
     e1c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e20:	180e4101 	stmdane	lr, {r0, r8, lr}
     e24:	00070d41 	andeq	r0, r7, r1, asr #26
     e28:	0000001c 	andeq	r0, r0, ip, lsl r0
     e2c:	00000760 	andeq	r0, r0, r0, ror #14
     e30:	20002980 	andcs	r2, r0, r0, lsl #19
     e34:	00000020 	andeq	r0, r0, r0, lsr #32
     e38:	40080e41 	andmi	r0, r8, r1, asr #28
     e3c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e40:	100e4101 	andne	r4, lr, r1, lsl #2
     e44:	00070d41 	andeq	r0, r7, r1, asr #26
     e48:	0000001c 	andeq	r0, r0, ip, lsl r0
     e4c:	00000760 	andeq	r0, r0, r0, ror #14
     e50:	200029a0 	andcs	r2, r0, r0, lsr #19
     e54:	000001c8 	andeq	r0, r0, r8, asr #3
     e58:	40080e41 	andmi	r0, r8, r1, asr #28
     e5c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e60:	100e4101 	andne	r4, lr, r1, lsl #2
     e64:	00070d41 	andeq	r0, r7, r1, asr #26
     e68:	0000000c 	andeq	r0, r0, ip
     e6c:	00000760 	andeq	r0, r0, r0, ror #14
     e70:	20000000 	andcs	r0, r0, r0
     e74:	0000000c 	andeq	r0, r0, ip
     e78:	00000018 	andeq	r0, r0, r8, lsl r0
     e7c:	00000760 	andeq	r0, r0, r0, ror #14
     e80:	20002b68 	andcs	r2, r0, r8, ror #22
     e84:	00000018 	andeq	r0, r0, r8, lsl r0
     e88:	40080e41 	andmi	r0, r8, r1, asr #28
     e8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e90:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     e94:	0000001c 	andeq	r0, r0, ip, lsl r0
     e98:	00000760 	andeq	r0, r0, r0, ror #14
     e9c:	20002b80 	andcs	r2, r0, r0, lsl #23
     ea0:	00000038 	andeq	r0, r0, r8, lsr r0
     ea4:	40080e41 	andmi	r0, r8, r1, asr #28
     ea8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     eac:	100e4101 	andne	r4, lr, r1, lsl #2
     eb0:	00070d41 	andeq	r0, r7, r1, asr #26
     eb4:	0000001c 	andeq	r0, r0, ip, lsl r0
     eb8:	00000760 	andeq	r0, r0, r0, ror #14
     ebc:	20002bb8 			; <UNDEFINED> instruction: 0x20002bb8
     ec0:	0000002c 	andeq	r0, r0, ip, lsr #32
     ec4:	40080e41 	andmi	r0, r8, r1, asr #28
     ec8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ecc:	180e4101 	stmdane	lr, {r0, r8, lr}
     ed0:	00070d41 	andeq	r0, r7, r1, asr #26
     ed4:	00000018 	andeq	r0, r0, r8, lsl r0
     ed8:	00000760 	andeq	r0, r0, r0, ror #14
     edc:	20002be4 	andcs	r2, r0, r4, ror #23
     ee0:	00000018 	andeq	r0, r0, r8, lsl r0
     ee4:	40080e41 	andmi	r0, r8, r1, asr #28
     ee8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     eec:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     ef0:	00000028 	andeq	r0, r0, r8, lsr #32
     ef4:	00000760 	andeq	r0, r0, r0, ror #14
     ef8:	20002bfc 	strdcs	r2, [r0], -ip
     efc:	00000498 	muleq	r0, r8, r4
     f00:	40140e41 	andsmi	r0, r4, r1, asr #28
     f04:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
     f08:	03864004 	orreq	r4, r6, #4
     f0c:	40028740 	andmi	r8, r2, r0, asr #14
     f10:	0e41018e 	dvfeqd	f0, f1, #0.5
     f14:	070c4178 	smlsdxeq	ip, r8, r1, r4
     f18:	00000068 	andeq	r0, r0, r8, rrx
     f1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f20:	00000760 	andeq	r0, r0, r0, ror #14
     f24:	20003094 	mulcs	r0, r4, r0
     f28:	00000058 	andeq	r0, r0, r8, asr r0
     f2c:	40080e41 	andmi	r0, r8, r1, asr #28
     f30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f34:	100e4101 	andne	r4, lr, r1, lsl #2
     f38:	00070d41 	andeq	r0, r7, r1, asr #26
     f3c:	00000024 	andeq	r0, r0, r4, lsr #32
     f40:	00000760 	andeq	r0, r0, r0, ror #14
     f44:	200030ec 	andcs	r3, r0, ip, ror #1
     f48:	00000062 	andeq	r0, r0, r2, rrx
     f4c:	41100e41 	tstmi	r0, r1, asr #28
     f50:	84401c0e 	strbhi	r1, [r0], #-3086	; 0xfffff3f2
     f54:	06874007 	streq	r4, [r7], r7
     f58:	41058e40 	tstmi	r5, r0, asr #28
     f5c:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
     f60:	00000007 	andeq	r0, r0, r7
     f64:	0000000c 	andeq	r0, r0, ip
     f68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f6c:	7c020001 	stcvc	0, cr0, [r2], {1}
     f70:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f74:	0000001c 	andeq	r0, r0, ip, lsl r0
     f78:	00000f64 	andeq	r0, r0, r4, ror #30
     f7c:	20003150 	andcs	r3, r0, r0, asr r1
     f80:	00000028 	andeq	r0, r0, r8, lsr #32
     f84:	40080e41 	andmi	r0, r8, r1, asr #28
     f88:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f8c:	100e4101 	andne	r4, lr, r1, lsl #2
     f90:	00070d41 	andeq	r0, r7, r1, asr #26
     f94:	0000001c 	andeq	r0, r0, ip, lsl r0
     f98:	00000f64 	andeq	r0, r0, r4, ror #30
     f9c:	20003178 	andcs	r3, r0, r8, ror r1
     fa0:	00000062 	andeq	r0, r0, r2, rrx
     fa4:	40080e41 	andmi	r0, r8, r1, asr #28
     fa8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     fac:	100e4101 	andne	r4, lr, r1, lsl #2
     fb0:	00070d41 	andeq	r0, r7, r1, asr #26
     fb4:	0000001c 	andeq	r0, r0, ip, lsl r0
     fb8:	00000f64 	andeq	r0, r0, r4, ror #30
     fbc:	200031da 	ldrdcs	r3, [r0], -sl
     fc0:	00000040 	andeq	r0, r0, r0, asr #32
     fc4:	40080e41 	andmi	r0, r8, r1, asr #28
     fc8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     fcc:	180e4101 	stmdane	lr, {r0, r8, lr}
     fd0:	00070d41 	andeq	r0, r7, r1, asr #26
     fd4:	0000001c 	andeq	r0, r0, ip, lsl r0
     fd8:	00000f64 	andeq	r0, r0, r4, ror #30
     fdc:	2000321a 	andcs	r3, r0, sl, lsl r2
     fe0:	0000005e 	andeq	r0, r0, lr, asr r0
     fe4:	40080e41 	andmi	r0, r8, r1, asr #28
     fe8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     fec:	100e4101 	andne	r4, lr, r1, lsl #2
     ff0:	00070d41 	andeq	r0, r7, r1, asr #26
     ff4:	0000000c 	andeq	r0, r0, ip
     ff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ffc:	7c020001 	stcvc	0, cr0, [r2], {1}
    1000:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1004:	0000001c 	andeq	r0, r0, ip, lsl r0
    1008:	00000ff4 	strdeq	r0, [r0], -r4
    100c:	20003278 	andcs	r3, r0, r8, ror r2
    1010:	00000060 	andeq	r0, r0, r0, rrx
    1014:	40080e41 	andmi	r0, r8, r1, asr #28
    1018:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    101c:	100e4101 	andne	r4, lr, r1, lsl #2
    1020:	00070d41 	andeq	r0, r7, r1, asr #26
    1024:	0000001c 	andeq	r0, r0, ip, lsl r0
    1028:	00000ff4 	strdeq	r0, [r0], -r4
    102c:	200032d8 	ldrdcs	r3, [r0], -r8
    1030:	00000044 	andeq	r0, r0, r4, asr #32
    1034:	40080e41 	andmi	r0, r8, r1, asr #28
    1038:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    103c:	100e4101 	andne	r4, lr, r1, lsl #2
    1040:	00070d41 	andeq	r0, r7, r1, asr #26
    1044:	0000001c 	andeq	r0, r0, ip, lsl r0
    1048:	00000ff4 	strdeq	r0, [r0], -r4
    104c:	2000331c 	andcs	r3, r0, ip, lsl r3
    1050:	00000098 	muleq	r0, r8, r0
    1054:	40080e41 	andmi	r0, r8, r1, asr #28
    1058:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    105c:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1060:	00070d41 	andeq	r0, r7, r1, asr #26
    1064:	00000020 	andeq	r0, r0, r0, lsr #32
    1068:	00000ff4 	strdeq	r0, [r0], -r4
    106c:	200033b4 			; <UNDEFINED> instruction: 0x200033b4
    1070:	0000012c 	andeq	r0, r0, ip, lsr #2
    1074:	400c0e41 	andmi	r0, ip, r1, asr #28
    1078:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
    107c:	018e4002 	orreq	r4, lr, r2
    1080:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
    1084:	0000070d 	andeq	r0, r0, sp, lsl #14
    1088:	0000001c 	andeq	r0, r0, ip, lsl r0
    108c:	00000ff4 	strdeq	r0, [r0], -r4
    1090:	200034e0 	andcs	r3, r0, r0, ror #9
    1094:	00000050 	andeq	r0, r0, r0, asr r0
    1098:	40080e41 	andmi	r0, r8, r1, asr #28
    109c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10a0:	200e4101 	andcs	r4, lr, r1, lsl #2
    10a4:	00070d41 	andeq	r0, r7, r1, asr #26
    10a8:	0000001c 	andeq	r0, r0, ip, lsl r0
    10ac:	00000ff4 	strdeq	r0, [r0], -r4
    10b0:	20003530 	andcs	r3, r0, r0, lsr r5
    10b4:	00000032 	andeq	r0, r0, r2, lsr r0
    10b8:	40080e41 	andmi	r0, r8, r1, asr #28
    10bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10c0:	100e4101 	andne	r4, lr, r1, lsl #2
    10c4:	00070d41 	andeq	r0, r7, r1, asr #26
    10c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    10cc:	00000ff4 	strdeq	r0, [r0], -r4
    10d0:	20003562 	andcs	r3, r0, r2, ror #10
    10d4:	000000aa 	andeq	r0, r0, sl, lsr #1
    10d8:	40080e41 	andmi	r0, r8, r1, asr #28
    10dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10e0:	180e4101 	stmdane	lr, {r0, r8, lr}
    10e4:	00070d41 	andeq	r0, r7, r1, asr #26
    10e8:	0000001c 	andeq	r0, r0, ip, lsl r0
    10ec:	00000ff4 	strdeq	r0, [r0], -r4
    10f0:	2000360c 	andcs	r3, r0, ip, lsl #12
    10f4:	0000006c 	andeq	r0, r0, ip, rrx
    10f8:	40080e41 	andmi	r0, r8, r1, asr #28
    10fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1100:	200e4101 	andcs	r4, lr, r1, lsl #2
    1104:	00070d41 	andeq	r0, r7, r1, asr #26
    1108:	00000024 	andeq	r0, r0, r4, lsr #32
    110c:	00000ff4 	strdeq	r0, [r0], -r4
    1110:	20003678 	andcs	r3, r0, r8, ror r6
    1114:	00000134 	andeq	r0, r0, r4, lsr r1
    1118:	40100e41 	andsmi	r0, r0, r1, asr #28
    111c:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
    1120:	02874003 	addeq	r4, r7, #3
    1124:	41018e40 	tstmi	r1, r0, asr #28
    1128:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    112c:	00000007 	andeq	r0, r0, r7
    1130:	0000001c 	andeq	r0, r0, ip, lsl r0
    1134:	00000ff4 	strdeq	r0, [r0], -r4
    1138:	200037ac 	andcs	r3, r0, ip, lsr #15
    113c:	00000098 	muleq	r0, r8, r0
    1140:	40080e41 	andmi	r0, r8, r1, asr #28
    1144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1148:	100e4101 	andne	r4, lr, r1, lsl #2
    114c:	00070d41 	andeq	r0, r7, r1, asr #26
    1150:	00000024 	andeq	r0, r0, r4, lsr #32
    1154:	00000ff4 	strdeq	r0, [r0], -r4
    1158:	20003844 	andcs	r3, r0, r4, asr #16
    115c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    1160:	40140e41 	andsmi	r0, r4, r1, asr #28
    1164:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
    1168:	03864004 	orreq	r4, r6, #4
    116c:	40028740 	andmi	r8, r2, r0, asr #14
    1170:	0e41018e 	dvfeqd	f0, f1, #0.5
    1174:	070d4138 	smladxeq	sp, r8, r1, r4
    1178:	0000001c 	andeq	r0, r0, ip, lsl r0
    117c:	00000ff4 	strdeq	r0, [r0], -r4
    1180:	20003a00 	andcs	r3, r0, r0, lsl #20
    1184:	0000003a 	andeq	r0, r0, sl, lsr r0
    1188:	40080e41 	andmi	r0, r8, r1, asr #28
    118c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1190:	200e4101 	andcs	r4, lr, r1, lsl #2
    1194:	00070d41 	andeq	r0, r7, r1, asr #26
    1198:	0000001c 	andeq	r0, r0, ip, lsl r0
    119c:	00000ff4 	strdeq	r0, [r0], -r4
    11a0:	20003a3a 	andcs	r3, r0, sl, lsr sl
    11a4:	00000022 	andeq	r0, r0, r2, lsr #32
    11a8:	40080e41 	andmi	r0, r8, r1, asr #28
    11ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    11b0:	180e4101 	stmdane	lr, {r0, r8, lr}
    11b4:	00070d41 	andeq	r0, r7, r1, asr #26
    11b8:	0000000c 	andeq	r0, r0, ip
    11bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11c0:	7c010001 	stcvc	0, cr0, [r1], {1}
    11c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11c8:	0000000c 	andeq	r0, r0, ip
    11cc:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
    11d0:	20003a5d 	andcs	r3, r0, sp, asr sl
    11d4:	0000010a 	andeq	r0, r0, sl, lsl #2
    11d8:	0000000c 	andeq	r0, r0, ip
    11dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11e0:	7c020001 	stcvc	0, cr0, [r2], {1}
    11e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11e8:	0000000c 	andeq	r0, r0, ip
    11ec:	000011d8 	ldrdeq	r1, [r0], -r8
    11f0:	20003b74 	andcs	r3, r0, r4, ror fp
    11f4:	00000010 	andeq	r0, r0, r0, lsl r0

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20001c08 	andcs	r1, r0, r8, lsl #24
   4:	2000314e 	andcs	r3, r0, lr, asr #2
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
