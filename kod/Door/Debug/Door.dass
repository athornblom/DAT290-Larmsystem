
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 ffec 	bl	20000fe0 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	6039      	str	r1, [r7, #0]
2000001a:	1dfb      	adds	r3, r7, #7
2000001c:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000001e:	1dfb      	adds	r3, r7, #7
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	2b7f      	cmp	r3, #127	; 0x7f
20000024:	d90d      	bls.n	20000042 <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000026:	683b      	ldr	r3, [r7, #0]
20000028:	b2da      	uxtb	r2, r3
2000002a:	490f      	ldr	r1, [pc, #60]	; (20000068 <NVIC_SetPriority+0x58>)
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	781b      	ldrb	r3, [r3, #0]
20000030:	0018      	movs	r0, r3
20000032:	230f      	movs	r3, #15
20000034:	4003      	ands	r3, r0
20000036:	3b04      	subs	r3, #4
20000038:	0112      	lsls	r2, r2, #4
2000003a:	b2d2      	uxtb	r2, r2
2000003c:	18cb      	adds	r3, r1, r3
2000003e:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000040:	e00d      	b.n	2000005e <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000042:	683b      	ldr	r3, [r7, #0]
20000044:	b2db      	uxtb	r3, r3
20000046:	4909      	ldr	r1, [pc, #36]	; (2000006c <NVIC_SetPriority+0x5c>)
20000048:	1dfa      	adds	r2, r7, #7
2000004a:	7812      	ldrb	r2, [r2, #0]
2000004c:	b252      	sxtb	r2, r2
2000004e:	011b      	lsls	r3, r3, #4
20000050:	b2d8      	uxtb	r0, r3
20000052:	23c0      	movs	r3, #192	; 0xc0
20000054:	009b      	lsls	r3, r3, #2
20000056:	188a      	adds	r2, r1, r2
20000058:	18d3      	adds	r3, r2, r3
2000005a:	1c02      	adds	r2, r0, #0
2000005c:	701a      	strb	r2, [r3, #0]
}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	46bd      	mov	sp, r7
20000062:	b002      	add	sp, #8
20000064:	bd80      	pop	{r7, pc}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	e000ed00 	and	lr, r0, r0, lsl #26
2000006c:	e000e100 	and	lr, r0, r0, lsl #2

20000070 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20000070:	b580      	push	{r7, lr}
20000072:	b082      	sub	sp, #8
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	3b01      	subs	r3, #1
2000007c:	4a0c      	ldr	r2, [pc, #48]	; (200000b0 <SysTick_Config+0x40>)
2000007e:	4293      	cmp	r3, r2
20000080:	d901      	bls.n	20000086 <SysTick_Config+0x16>
20000082:	2301      	movs	r3, #1
20000084:	e010      	b.n	200000a8 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20000086:	4b0b      	ldr	r3, [pc, #44]	; (200000b4 <SysTick_Config+0x44>)
20000088:	687a      	ldr	r2, [r7, #4]
2000008a:	3a01      	subs	r2, #1
2000008c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000008e:	2301      	movs	r3, #1
20000090:	425b      	negs	r3, r3
20000092:	210f      	movs	r1, #15
20000094:	0018      	movs	r0, r3
20000096:	f7ff ffbb 	bl	20000010 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000009a:	4b06      	ldr	r3, [pc, #24]	; (200000b4 <SysTick_Config+0x44>)
2000009c:	2200      	movs	r2, #0
2000009e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200000a0:	4b04      	ldr	r3, [pc, #16]	; (200000b4 <SysTick_Config+0x44>)
200000a2:	2207      	movs	r2, #7
200000a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200000a6:	2300      	movs	r3, #0
}
200000a8:	0018      	movs	r0, r3
200000aa:	46bd      	mov	sp, r7
200000ac:	b002      	add	sp, #8
200000ae:	bd80      	pop	{r7, pc}
200000b0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200000b4:	e000e010 	and	lr, r0, r0, lsl r0

200000b8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200000bc:	4b14      	ldr	r3, [pc, #80]	; (20000110 <RCC_DeInit+0x58>)
200000be:	681a      	ldr	r2, [r3, #0]
200000c0:	4b13      	ldr	r3, [pc, #76]	; (20000110 <RCC_DeInit+0x58>)
200000c2:	2101      	movs	r1, #1
200000c4:	430a      	orrs	r2, r1
200000c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200000c8:	4b11      	ldr	r3, [pc, #68]	; (20000110 <RCC_DeInit+0x58>)
200000ca:	2200      	movs	r2, #0
200000cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
200000ce:	4b10      	ldr	r3, [pc, #64]	; (20000110 <RCC_DeInit+0x58>)
200000d0:	681a      	ldr	r2, [r3, #0]
200000d2:	4b0f      	ldr	r3, [pc, #60]	; (20000110 <RCC_DeInit+0x58>)
200000d4:	490f      	ldr	r1, [pc, #60]	; (20000114 <RCC_DeInit+0x5c>)
200000d6:	400a      	ands	r2, r1
200000d8:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200000da:	4b0d      	ldr	r3, [pc, #52]	; (20000110 <RCC_DeInit+0x58>)
200000dc:	4a0e      	ldr	r2, [pc, #56]	; (20000118 <RCC_DeInit+0x60>)
200000de:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
200000e0:	4a0b      	ldr	r2, [pc, #44]	; (20000110 <RCC_DeInit+0x58>)
200000e2:	2384      	movs	r3, #132	; 0x84
200000e4:	490d      	ldr	r1, [pc, #52]	; (2000011c <RCC_DeInit+0x64>)
200000e6:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
200000e8:	4a09      	ldr	r2, [pc, #36]	; (20000110 <RCC_DeInit+0x58>)
200000ea:	2388      	movs	r3, #136	; 0x88
200000ec:	490c      	ldr	r1, [pc, #48]	; (20000120 <RCC_DeInit+0x68>)
200000ee:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200000f0:	4b07      	ldr	r3, [pc, #28]	; (20000110 <RCC_DeInit+0x58>)
200000f2:	681a      	ldr	r2, [r3, #0]
200000f4:	4b06      	ldr	r3, [pc, #24]	; (20000110 <RCC_DeInit+0x58>)
200000f6:	490b      	ldr	r1, [pc, #44]	; (20000124 <RCC_DeInit+0x6c>)
200000f8:	400a      	ands	r2, r1
200000fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200000fc:	4b04      	ldr	r3, [pc, #16]	; (20000110 <RCC_DeInit+0x58>)
200000fe:	2200      	movs	r2, #0
20000100:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20000102:	4a03      	ldr	r2, [pc, #12]	; (20000110 <RCC_DeInit+0x58>)
20000104:	238c      	movs	r3, #140	; 0x8c
20000106:	2100      	movs	r1, #0
20000108:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	46bd      	mov	sp, r7
2000010e:	bd80      	pop	{r7, pc}
20000110:	40023800 	andmi	r3, r2, r0, lsl #16
20000114:	eaf6ffff 	b	1fdc0118 <startup-0x23fee8>
20000118:	24003010 	strcs	r3, [r0], #-16
2000011c:	20003000 	andcs	r3, r0, r0
20000120:	24003000 	strcs	r3, [r0], #-0
20000124:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000128 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000128:	b580      	push	{r7, lr}
2000012a:	b082      	sub	sp, #8
2000012c:	af00      	add	r7, sp, #0
2000012e:	0002      	movs	r2, r0
20000130:	1dfb      	adds	r3, r7, #7
20000132:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20000134:	4b05      	ldr	r3, [pc, #20]	; (2000014c <RCC_HSEConfig+0x24>)
20000136:	2200      	movs	r2, #0
20000138:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
2000013a:	4a04      	ldr	r2, [pc, #16]	; (2000014c <RCC_HSEConfig+0x24>)
2000013c:	1dfb      	adds	r3, r7, #7
2000013e:	781b      	ldrb	r3, [r3, #0]
20000140:	7013      	strb	r3, [r2, #0]
}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40023802 	andmi	r3, r2, r2, lsl #16

20000150 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20000156:	2300      	movs	r3, #0
20000158:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
2000015a:	1dfb      	adds	r3, r7, #7
2000015c:	2200      	movs	r2, #0
2000015e:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20000160:	1dbb      	adds	r3, r7, #6
20000162:	2200      	movs	r2, #0
20000164:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20000166:	1dbc      	adds	r4, r7, #6
20000168:	2031      	movs	r0, #49	; 0x31
2000016a:	f000 fd9b 	bl	20000ca4 <RCC_GetFlagStatus>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20000172:	683b      	ldr	r3, [r7, #0]
20000174:	3301      	adds	r3, #1
20000176:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20000178:	683a      	ldr	r2, [r7, #0]
2000017a:	23a0      	movs	r3, #160	; 0xa0
2000017c:	01db      	lsls	r3, r3, #7
2000017e:	429a      	cmp	r2, r3
20000180:	d003      	beq.n	2000018a <RCC_WaitForHSEStartUp+0x3a>
20000182:	1dbb      	adds	r3, r7, #6
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	2b00      	cmp	r3, #0
20000188:	d0ed      	beq.n	20000166 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
2000018a:	2031      	movs	r0, #49	; 0x31
2000018c:	f000 fd8a 	bl	20000ca4 <RCC_GetFlagStatus>
20000190:	1e03      	subs	r3, r0, #0
20000192:	d003      	beq.n	2000019c <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20000194:	1dfb      	adds	r3, r7, #7
20000196:	2201      	movs	r2, #1
20000198:	701a      	strb	r2, [r3, #0]
2000019a:	e002      	b.n	200001a2 <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	2200      	movs	r2, #0
200001a0:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200001a2:	1dfb      	adds	r3, r7, #7
200001a4:	781b      	ldrb	r3, [r3, #0]
}
200001a6:	0018      	movs	r0, r3
200001a8:	46bd      	mov	sp, r7
200001aa:	b003      	add	sp, #12
200001ac:	bd90      	pop	{r4, r7, pc}

200001ae <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
200001ae:	b580      	push	{r7, lr}
200001b0:	b084      	sub	sp, #16
200001b2:	af00      	add	r7, sp, #0
200001b4:	0002      	movs	r2, r0
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
200001ba:	2300      	movs	r3, #0
200001bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
200001be:	4b0a      	ldr	r3, [pc, #40]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001c0:	681b      	ldr	r3, [r3, #0]
200001c2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
200001c4:	68fb      	ldr	r3, [r7, #12]
200001c6:	22f8      	movs	r2, #248	; 0xf8
200001c8:	4393      	bics	r3, r2
200001ca:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
200001cc:	1dfb      	adds	r3, r7, #7
200001ce:	781b      	ldrb	r3, [r3, #0]
200001d0:	00db      	lsls	r3, r3, #3
200001d2:	68fa      	ldr	r2, [r7, #12]
200001d4:	4313      	orrs	r3, r2
200001d6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
200001d8:	4b03      	ldr	r3, [pc, #12]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001da:	68fa      	ldr	r2, [r7, #12]
200001dc:	601a      	str	r2, [r3, #0]
}
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	46bd      	mov	sp, r7
200001e2:	b004      	add	sp, #16
200001e4:	bd80      	pop	{r7, pc}
200001e6:	46c0      	nop			; (mov r8, r8)
200001e8:	40023800 	andmi	r3, r2, r0, lsl #16

200001ec <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b082      	sub	sp, #8
200001f0:	af00      	add	r7, sp, #0
200001f2:	0002      	movs	r2, r0
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
200001f8:	4b03      	ldr	r3, [pc, #12]	; (20000208 <RCC_HSICmd+0x1c>)
200001fa:	1dfa      	adds	r2, r7, #7
200001fc:	7812      	ldrb	r2, [r2, #0]
200001fe:	601a      	str	r2, [r3, #0]
}
20000200:	46c0      	nop			; (mov r8, r8)
20000202:	46bd      	mov	sp, r7
20000204:	b002      	add	sp, #8
20000206:	bd80      	pop	{r7, pc}
20000208:	42470000 	submi	r0, r7, #0

2000020c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
2000020c:	b580      	push	{r7, lr}
2000020e:	b082      	sub	sp, #8
20000210:	af00      	add	r7, sp, #0
20000212:	0002      	movs	r2, r0
20000214:	1dfb      	adds	r3, r7, #7
20000216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000218:	4b0c      	ldr	r3, [pc, #48]	; (2000024c <RCC_LSEConfig+0x40>)
2000021a:	2200      	movs	r2, #0
2000021c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <RCC_LSEConfig+0x40>)
20000220:	2200      	movs	r2, #0
20000222:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20000224:	1dfb      	adds	r3, r7, #7
20000226:	781b      	ldrb	r3, [r3, #0]
20000228:	2b01      	cmp	r3, #1
2000022a:	d002      	beq.n	20000232 <RCC_LSEConfig+0x26>
2000022c:	2b04      	cmp	r3, #4
2000022e:	d004      	beq.n	2000023a <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000230:	e007      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20000232:	4b06      	ldr	r3, [pc, #24]	; (2000024c <RCC_LSEConfig+0x40>)
20000234:	2201      	movs	r2, #1
20000236:	701a      	strb	r2, [r3, #0]
      break;
20000238:	e003      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
2000023a:	4b04      	ldr	r3, [pc, #16]	; (2000024c <RCC_LSEConfig+0x40>)
2000023c:	2205      	movs	r2, #5
2000023e:	701a      	strb	r2, [r3, #0]
      break;
20000240:	46c0      	nop			; (mov r8, r8)
  }
}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	46bd      	mov	sp, r7
20000246:	b002      	add	sp, #8
20000248:	bd80      	pop	{r7, pc}
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	40023870 	andmi	r3, r2, r0, ror r8

20000250 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20000250:	b580      	push	{r7, lr}
20000252:	b082      	sub	sp, #8
20000254:	af00      	add	r7, sp, #0
20000256:	0002      	movs	r2, r0
20000258:	1dfb      	adds	r3, r7, #7
2000025a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
2000025c:	4b03      	ldr	r3, [pc, #12]	; (2000026c <RCC_LSICmd+0x1c>)
2000025e:	1dfa      	adds	r2, r7, #7
20000260:	7812      	ldrb	r2, [r2, #0]
20000262:	601a      	str	r2, [r3, #0]
}
20000264:	46c0      	nop			; (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b002      	add	sp, #8
2000026a:	bd80      	pop	{r7, pc}
2000026c:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20000270 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20000270:	b580      	push	{r7, lr}
20000272:	b084      	sub	sp, #16
20000274:	af00      	add	r7, sp, #0
20000276:	60f8      	str	r0, [r7, #12]
20000278:	60b9      	str	r1, [r7, #8]
2000027a:	607a      	str	r2, [r7, #4]
2000027c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	019a      	lsls	r2, r3, #6
20000282:	68bb      	ldr	r3, [r7, #8]
20000284:	431a      	orrs	r2, r3
20000286:	683b      	ldr	r3, [r7, #0]
20000288:	085b      	lsrs	r3, r3, #1
2000028a:	3b01      	subs	r3, #1
2000028c:	041b      	lsls	r3, r3, #16
2000028e:	431a      	orrs	r2, r3
20000290:	68fb      	ldr	r3, [r7, #12]
20000292:	431a      	orrs	r2, r3
20000294:	0011      	movs	r1, r2
                 (PLLQ << 24);
20000296:	69bb      	ldr	r3, [r7, #24]
20000298:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000029a:	4b03      	ldr	r3, [pc, #12]	; (200002a8 <RCC_PLLConfig+0x38>)
2000029c:	430a      	orrs	r2, r1
2000029e:	605a      	str	r2, [r3, #4]
}
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	b004      	add	sp, #16
200002a6:	bd80      	pop	{r7, pc}
200002a8:	40023800 	andmi	r3, r2, r0, lsl #16

200002ac <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
200002ac:	b580      	push	{r7, lr}
200002ae:	b082      	sub	sp, #8
200002b0:	af00      	add	r7, sp, #0
200002b2:	0002      	movs	r2, r0
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
200002b8:	4b03      	ldr	r3, [pc, #12]	; (200002c8 <RCC_PLLCmd+0x1c>)
200002ba:	1dfa      	adds	r2, r7, #7
200002bc:	7812      	ldrb	r2, [r2, #0]
200002be:	601a      	str	r2, [r3, #0]
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b002      	add	sp, #8
200002c6:	bd80      	pop	{r7, pc}
200002c8:	42470060 	submi	r0, r7, #96	; 0x60

200002cc <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
200002cc:	b580      	push	{r7, lr}
200002ce:	b082      	sub	sp, #8
200002d0:	af00      	add	r7, sp, #0
200002d2:	6078      	str	r0, [r7, #4]
200002d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
200002d6:	687b      	ldr	r3, [r7, #4]
200002d8:	019a      	lsls	r2, r3, #6
200002da:	683b      	ldr	r3, [r7, #0]
200002dc:	071b      	lsls	r3, r3, #28
200002de:	4904      	ldr	r1, [pc, #16]	; (200002f0 <RCC_PLLI2SConfig+0x24>)
200002e0:	4313      	orrs	r3, r2
200002e2:	2284      	movs	r2, #132	; 0x84
200002e4:	508b      	str	r3, [r1, r2]
}
200002e6:	46c0      	nop			; (mov r8, r8)
200002e8:	46bd      	mov	sp, r7
200002ea:	b002      	add	sp, #8
200002ec:	bd80      	pop	{r7, pc}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	40023800 	andmi	r3, r2, r0, lsl #16

200002f4 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
200002f4:	b580      	push	{r7, lr}
200002f6:	b082      	sub	sp, #8
200002f8:	af00      	add	r7, sp, #0
200002fa:	0002      	movs	r2, r0
200002fc:	1dfb      	adds	r3, r7, #7
200002fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000300:	4b03      	ldr	r3, [pc, #12]	; (20000310 <RCC_PLLI2SCmd+0x1c>)
20000302:	1dfa      	adds	r2, r7, #7
20000304:	7812      	ldrb	r2, [r2, #0]
20000306:	601a      	str	r2, [r3, #0]
}
20000308:	46c0      	nop			; (mov r8, r8)
2000030a:	46bd      	mov	sp, r7
2000030c:	b002      	add	sp, #8
2000030e:	bd80      	pop	{r7, pc}
20000310:	42470068 	submi	r0, r7, #104	; 0x68

20000314 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000314:	b580      	push	{r7, lr}
20000316:	b084      	sub	sp, #16
20000318:	af00      	add	r7, sp, #0
2000031a:	60f8      	str	r0, [r7, #12]
2000031c:	60b9      	str	r1, [r7, #8]
2000031e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000320:	68fb      	ldr	r3, [r7, #12]
20000322:	019a      	lsls	r2, r3, #6
20000324:	68bb      	ldr	r3, [r7, #8]
20000326:	061b      	lsls	r3, r3, #24
20000328:	431a      	orrs	r2, r3
2000032a:	687b      	ldr	r3, [r7, #4]
2000032c:	071b      	lsls	r3, r3, #28
2000032e:	4904      	ldr	r1, [pc, #16]	; (20000340 <RCC_PLLSAIConfig+0x2c>)
20000330:	4313      	orrs	r3, r2
20000332:	2288      	movs	r2, #136	; 0x88
20000334:	508b      	str	r3, [r1, r2]
}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	46bd      	mov	sp, r7
2000033a:	b004      	add	sp, #16
2000033c:	bd80      	pop	{r7, pc}
2000033e:	46c0      	nop			; (mov r8, r8)
20000340:	40023800 	andmi	r3, r2, r0, lsl #16

20000344 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20000344:	b580      	push	{r7, lr}
20000346:	b082      	sub	sp, #8
20000348:	af00      	add	r7, sp, #0
2000034a:	0002      	movs	r2, r0
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20000350:	4b03      	ldr	r3, [pc, #12]	; (20000360 <RCC_PLLSAICmd+0x1c>)
20000352:	1dfa      	adds	r2, r7, #7
20000354:	7812      	ldrb	r2, [r2, #0]
20000356:	601a      	str	r2, [r3, #0]
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b002      	add	sp, #8
2000035e:	bd80      	pop	{r7, pc}
20000360:	42470070 	submi	r0, r7, #112	; 0x70

20000364 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20000364:	b580      	push	{r7, lr}
20000366:	b082      	sub	sp, #8
20000368:	af00      	add	r7, sp, #0
2000036a:	0002      	movs	r2, r0
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20000370:	4b03      	ldr	r3, [pc, #12]	; (20000380 <RCC_ClockSecuritySystemCmd+0x1c>)
20000372:	1dfa      	adds	r2, r7, #7
20000374:	7812      	ldrb	r2, [r2, #0]
20000376:	601a      	str	r2, [r3, #0]
}
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	46bd      	mov	sp, r7
2000037c:	b002      	add	sp, #8
2000037e:	bd80      	pop	{r7, pc}
20000380:	4247004c 	submi	r0, r7, #76	; 0x4c

20000384 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20000384:	b580      	push	{r7, lr}
20000386:	b084      	sub	sp, #16
20000388:	af00      	add	r7, sp, #0
2000038a:	6078      	str	r0, [r7, #4]
2000038c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
2000038e:	2300      	movs	r3, #0
20000390:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20000392:	4b0a      	ldr	r3, [pc, #40]	; (200003bc <RCC_MCO1Config+0x38>)
20000394:	689b      	ldr	r3, [r3, #8]
20000396:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20000398:	68fb      	ldr	r3, [r7, #12]
2000039a:	4a09      	ldr	r2, [pc, #36]	; (200003c0 <RCC_MCO1Config+0x3c>)
2000039c:	4013      	ands	r3, r2
2000039e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200003a0:	687a      	ldr	r2, [r7, #4]
200003a2:	683b      	ldr	r3, [r7, #0]
200003a4:	4313      	orrs	r3, r2
200003a6:	68fa      	ldr	r2, [r7, #12]
200003a8:	4313      	orrs	r3, r2
200003aa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ac:	4b03      	ldr	r3, [pc, #12]	; (200003bc <RCC_MCO1Config+0x38>)
200003ae:	68fa      	ldr	r2, [r7, #12]
200003b0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	46bd      	mov	sp, r7
200003b6:	b004      	add	sp, #16
200003b8:	bd80      	pop	{r7, pc}
200003ba:	46c0      	nop			; (mov r8, r8)
200003bc:	40023800 	andmi	r3, r2, r0, lsl #16
200003c0:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

200003c4 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
200003c4:	b580      	push	{r7, lr}
200003c6:	b084      	sub	sp, #16
200003c8:	af00      	add	r7, sp, #0
200003ca:	6078      	str	r0, [r7, #4]
200003cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200003ce:	2300      	movs	r3, #0
200003d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
200003d2:	4b0a      	ldr	r3, [pc, #40]	; (200003fc <RCC_MCO2Config+0x38>)
200003d4:	689b      	ldr	r3, [r3, #8]
200003d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
200003d8:	68fb      	ldr	r3, [r7, #12]
200003da:	015b      	lsls	r3, r3, #5
200003dc:	095b      	lsrs	r3, r3, #5
200003de:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
200003e0:	687a      	ldr	r2, [r7, #4]
200003e2:	683b      	ldr	r3, [r7, #0]
200003e4:	4313      	orrs	r3, r2
200003e6:	68fa      	ldr	r2, [r7, #12]
200003e8:	4313      	orrs	r3, r2
200003ea:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ec:	4b03      	ldr	r3, [pc, #12]	; (200003fc <RCC_MCO2Config+0x38>)
200003ee:	68fa      	ldr	r2, [r7, #12]
200003f0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003f2:	46c0      	nop			; (mov r8, r8)
200003f4:	46bd      	mov	sp, r7
200003f6:	b004      	add	sp, #16
200003f8:	bd80      	pop	{r7, pc}
200003fa:	46c0      	nop			; (mov r8, r8)
200003fc:	40023800 	andmi	r3, r2, r0, lsl #16

20000400 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000400:	b580      	push	{r7, lr}
20000402:	b084      	sub	sp, #16
20000404:	af00      	add	r7, sp, #0
20000406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000408:	2300      	movs	r3, #0
2000040a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
2000040c:	4b08      	ldr	r3, [pc, #32]	; (20000430 <RCC_SYSCLKConfig+0x30>)
2000040e:	689b      	ldr	r3, [r3, #8]
20000410:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000412:	68fb      	ldr	r3, [r7, #12]
20000414:	2203      	movs	r2, #3
20000416:	4393      	bics	r3, r2
20000418:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
2000041a:	68fa      	ldr	r2, [r7, #12]
2000041c:	687b      	ldr	r3, [r7, #4]
2000041e:	4313      	orrs	r3, r2
20000420:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000422:	4b03      	ldr	r3, [pc, #12]	; (20000430 <RCC_SYSCLKConfig+0x30>)
20000424:	68fa      	ldr	r2, [r7, #12]
20000426:	609a      	str	r2, [r3, #8]
}
20000428:	46c0      	nop			; (mov r8, r8)
2000042a:	46bd      	mov	sp, r7
2000042c:	b004      	add	sp, #16
2000042e:	bd80      	pop	{r7, pc}
20000430:	40023800 	andmi	r3, r2, r0, lsl #16

20000434 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000434:	b580      	push	{r7, lr}
20000436:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000438:	4b04      	ldr	r3, [pc, #16]	; (2000044c <RCC_GetSYSCLKSource+0x18>)
2000043a:	689b      	ldr	r3, [r3, #8]
2000043c:	b2db      	uxtb	r3, r3
2000043e:	220c      	movs	r2, #12
20000440:	4013      	ands	r3, r2
20000442:	b2db      	uxtb	r3, r3
}
20000444:	0018      	movs	r0, r3
20000446:	46bd      	mov	sp, r7
20000448:	bd80      	pop	{r7, pc}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	40023800 	andmi	r3, r2, r0, lsl #16

20000450 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20000450:	b580      	push	{r7, lr}
20000452:	b084      	sub	sp, #16
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000458:	2300      	movs	r3, #0
2000045a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
2000045c:	4b08      	ldr	r3, [pc, #32]	; (20000480 <RCC_HCLKConfig+0x30>)
2000045e:	689b      	ldr	r3, [r3, #8]
20000460:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20000462:	68fb      	ldr	r3, [r7, #12]
20000464:	22f0      	movs	r2, #240	; 0xf0
20000466:	4393      	bics	r3, r2
20000468:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
2000046a:	68fa      	ldr	r2, [r7, #12]
2000046c:	687b      	ldr	r3, [r7, #4]
2000046e:	4313      	orrs	r3, r2
20000470:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000472:	4b03      	ldr	r3, [pc, #12]	; (20000480 <RCC_HCLKConfig+0x30>)
20000474:	68fa      	ldr	r2, [r7, #12]
20000476:	609a      	str	r2, [r3, #8]
}
20000478:	46c0      	nop			; (mov r8, r8)
2000047a:	46bd      	mov	sp, r7
2000047c:	b004      	add	sp, #16
2000047e:	bd80      	pop	{r7, pc}
20000480:	40023800 	andmi	r3, r2, r0, lsl #16

20000484 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20000484:	b580      	push	{r7, lr}
20000486:	b084      	sub	sp, #16
20000488:	af00      	add	r7, sp, #0
2000048a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000048c:	2300      	movs	r3, #0
2000048e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000490:	4b08      	ldr	r3, [pc, #32]	; (200004b4 <RCC_PCLK1Config+0x30>)
20000492:	689b      	ldr	r3, [r3, #8]
20000494:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20000496:	68fb      	ldr	r3, [r7, #12]
20000498:	4a07      	ldr	r2, [pc, #28]	; (200004b8 <RCC_PCLK1Config+0x34>)
2000049a:	4013      	ands	r3, r2
2000049c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
2000049e:	68fa      	ldr	r2, [r7, #12]
200004a0:	687b      	ldr	r3, [r7, #4]
200004a2:	4313      	orrs	r3, r2
200004a4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004a6:	4b03      	ldr	r3, [pc, #12]	; (200004b4 <RCC_PCLK1Config+0x30>)
200004a8:	68fa      	ldr	r2, [r7, #12]
200004aa:	609a      	str	r2, [r3, #8]
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b004      	add	sp, #16
200004b2:	bd80      	pop	{r7, pc}
200004b4:	40023800 	andmi	r3, r2, r0, lsl #16
200004b8:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

200004bc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
200004bc:	b580      	push	{r7, lr}
200004be:	b084      	sub	sp, #16
200004c0:	af00      	add	r7, sp, #0
200004c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200004c4:	2300      	movs	r3, #0
200004c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200004c8:	4b09      	ldr	r3, [pc, #36]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004ca:	689b      	ldr	r3, [r3, #8]
200004cc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	4a08      	ldr	r2, [pc, #32]	; (200004f4 <RCC_PCLK2Config+0x38>)
200004d2:	4013      	ands	r3, r2
200004d4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
200004d6:	687b      	ldr	r3, [r7, #4]
200004d8:	00db      	lsls	r3, r3, #3
200004da:	68fa      	ldr	r2, [r7, #12]
200004dc:	4313      	orrs	r3, r2
200004de:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004e0:	4b03      	ldr	r3, [pc, #12]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004e2:	68fa      	ldr	r2, [r7, #12]
200004e4:	609a      	str	r2, [r3, #8]
}
200004e6:	46c0      	nop			; (mov r8, r8)
200004e8:	46bd      	mov	sp, r7
200004ea:	b004      	add	sp, #16
200004ec:	bd80      	pop	{r7, pc}
200004ee:	46c0      	nop			; (mov r8, r8)
200004f0:	40023800 	andmi	r3, r2, r0, lsl #16
200004f4:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

200004f8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
200004f8:	b580      	push	{r7, lr}
200004fa:	b088      	sub	sp, #32
200004fc:	af00      	add	r7, sp, #0
200004fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000500:	2300      	movs	r3, #0
20000502:	61bb      	str	r3, [r7, #24]
20000504:	2300      	movs	r3, #0
20000506:	617b      	str	r3, [r7, #20]
20000508:	2300      	movs	r3, #0
2000050a:	61fb      	str	r3, [r7, #28]
2000050c:	2302      	movs	r3, #2
2000050e:	613b      	str	r3, [r7, #16]
20000510:	2300      	movs	r3, #0
20000512:	60fb      	str	r3, [r7, #12]
20000514:	2302      	movs	r3, #2
20000516:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000518:	4b49      	ldr	r3, [pc, #292]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000051a:	689b      	ldr	r3, [r3, #8]
2000051c:	220c      	movs	r2, #12
2000051e:	4013      	ands	r3, r2
20000520:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000522:	69bb      	ldr	r3, [r7, #24]
20000524:	2b04      	cmp	r3, #4
20000526:	d007      	beq.n	20000538 <RCC_GetClocksFreq+0x40>
20000528:	2b08      	cmp	r3, #8
2000052a:	d009      	beq.n	20000540 <RCC_GetClocksFreq+0x48>
2000052c:	2b00      	cmp	r3, #0
2000052e:	d141      	bne.n	200005b4 <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	4a44      	ldr	r2, [pc, #272]	; (20000644 <RCC_GetClocksFreq+0x14c>)
20000534:	601a      	str	r2, [r3, #0]
    break;
20000536:	e041      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	4a43      	ldr	r2, [pc, #268]	; (20000648 <RCC_GetClocksFreq+0x150>)
2000053c:	601a      	str	r2, [r3, #0]
    break;
2000053e:	e03d      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000540:	4b3f      	ldr	r3, [pc, #252]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000542:	685b      	ldr	r3, [r3, #4]
20000544:	0d9b      	lsrs	r3, r3, #22
20000546:	2201      	movs	r2, #1
20000548:	4013      	ands	r3, r2
2000054a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000054c:	4b3c      	ldr	r3, [pc, #240]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000054e:	685b      	ldr	r3, [r3, #4]
20000550:	223f      	movs	r2, #63	; 0x3f
20000552:	4013      	ands	r3, r2
20000554:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000556:	68fb      	ldr	r3, [r7, #12]
20000558:	2b00      	cmp	r3, #0
2000055a:	d00d      	beq.n	20000578 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
2000055c:	68b9      	ldr	r1, [r7, #8]
2000055e:	483a      	ldr	r0, [pc, #232]	; (20000648 <RCC_GetClocksFreq+0x150>)
20000560:	f002 fd62 	bl	20003028 <__udivsi3>
20000564:	0003      	movs	r3, r0
20000566:	001a      	movs	r2, r3
20000568:	4b35      	ldr	r3, [pc, #212]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000056a:	685b      	ldr	r3, [r3, #4]
2000056c:	099b      	lsrs	r3, r3, #6
2000056e:	05db      	lsls	r3, r3, #23
20000570:	0ddb      	lsrs	r3, r3, #23
20000572:	4353      	muls	r3, r2
20000574:	61fb      	str	r3, [r7, #28]
20000576:	e00c      	b.n	20000592 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000578:	68b9      	ldr	r1, [r7, #8]
2000057a:	4832      	ldr	r0, [pc, #200]	; (20000644 <RCC_GetClocksFreq+0x14c>)
2000057c:	f002 fd54 	bl	20003028 <__udivsi3>
20000580:	0003      	movs	r3, r0
20000582:	001a      	movs	r2, r3
20000584:	4b2e      	ldr	r3, [pc, #184]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000586:	685b      	ldr	r3, [r3, #4]
20000588:	099b      	lsrs	r3, r3, #6
2000058a:	05db      	lsls	r3, r3, #23
2000058c:	0ddb      	lsrs	r3, r3, #23
2000058e:	4353      	muls	r3, r2
20000590:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000592:	4b2b      	ldr	r3, [pc, #172]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000594:	685b      	ldr	r3, [r3, #4]
20000596:	0c1b      	lsrs	r3, r3, #16
20000598:	2203      	movs	r2, #3
2000059a:	4013      	ands	r3, r2
2000059c:	3301      	adds	r3, #1
2000059e:	005b      	lsls	r3, r3, #1
200005a0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200005a2:	6939      	ldr	r1, [r7, #16]
200005a4:	69f8      	ldr	r0, [r7, #28]
200005a6:	f002 fd3f 	bl	20003028 <__udivsi3>
200005aa:	0003      	movs	r3, r0
200005ac:	001a      	movs	r2, r3
200005ae:	687b      	ldr	r3, [r7, #4]
200005b0:	601a      	str	r2, [r3, #0]
    break;
200005b2:	e003      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
200005b4:	687b      	ldr	r3, [r7, #4]
200005b6:	4a23      	ldr	r2, [pc, #140]	; (20000644 <RCC_GetClocksFreq+0x14c>)
200005b8:	601a      	str	r2, [r3, #0]
    break;
200005ba:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
200005bc:	4b20      	ldr	r3, [pc, #128]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005be:	689b      	ldr	r3, [r3, #8]
200005c0:	22f0      	movs	r2, #240	; 0xf0
200005c2:	4013      	ands	r3, r2
200005c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
200005c6:	69bb      	ldr	r3, [r7, #24]
200005c8:	091b      	lsrs	r3, r3, #4
200005ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005cc:	4a1f      	ldr	r2, [pc, #124]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005ce:	69bb      	ldr	r3, [r7, #24]
200005d0:	18d3      	adds	r3, r2, r3
200005d2:	781b      	ldrb	r3, [r3, #0]
200005d4:	b2db      	uxtb	r3, r3
200005d6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
200005d8:	687b      	ldr	r3, [r7, #4]
200005da:	681a      	ldr	r2, [r3, #0]
200005dc:	697b      	ldr	r3, [r7, #20]
200005de:	40da      	lsrs	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
200005e4:	4b16      	ldr	r3, [pc, #88]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005e6:	689a      	ldr	r2, [r3, #8]
200005e8:	23e0      	movs	r3, #224	; 0xe0
200005ea:	015b      	lsls	r3, r3, #5
200005ec:	4013      	ands	r3, r2
200005ee:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
200005f0:	69bb      	ldr	r3, [r7, #24]
200005f2:	0a9b      	lsrs	r3, r3, #10
200005f4:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005f6:	4a15      	ldr	r2, [pc, #84]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005f8:	69bb      	ldr	r3, [r7, #24]
200005fa:	18d3      	adds	r3, r2, r3
200005fc:	781b      	ldrb	r3, [r3, #0]
200005fe:	b2db      	uxtb	r3, r3
20000600:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000602:	687b      	ldr	r3, [r7, #4]
20000604:	685a      	ldr	r2, [r3, #4]
20000606:	697b      	ldr	r3, [r7, #20]
20000608:	40da      	lsrs	r2, r3
2000060a:	687b      	ldr	r3, [r7, #4]
2000060c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
2000060e:	4b0c      	ldr	r3, [pc, #48]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000610:	689a      	ldr	r2, [r3, #8]
20000612:	23e0      	movs	r3, #224	; 0xe0
20000614:	021b      	lsls	r3, r3, #8
20000616:	4013      	ands	r3, r2
20000618:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
2000061a:	69bb      	ldr	r3, [r7, #24]
2000061c:	0b5b      	lsrs	r3, r3, #13
2000061e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000620:	4a0a      	ldr	r2, [pc, #40]	; (2000064c <RCC_GetClocksFreq+0x154>)
20000622:	69bb      	ldr	r3, [r7, #24]
20000624:	18d3      	adds	r3, r2, r3
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	b2db      	uxtb	r3, r3
2000062a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	685a      	ldr	r2, [r3, #4]
20000630:	697b      	ldr	r3, [r7, #20]
20000632:	40da      	lsrs	r2, r3
20000634:	687b      	ldr	r3, [r7, #4]
20000636:	60da      	str	r2, [r3, #12]
}
20000638:	46c0      	nop			; (mov r8, r8)
2000063a:	46bd      	mov	sp, r7
2000063c:	b008      	add	sp, #32
2000063e:	bd80      	pop	{r7, pc}
20000640:	40023800 	andmi	r3, r2, r0, lsl #16
20000644:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000648:	017d7840 	cmneq	sp, r0, asr #16
2000064c:	20003168 	andcs	r3, r0, r8, ror #2

20000650 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000650:	b580      	push	{r7, lr}
20000652:	b084      	sub	sp, #16
20000654:	af00      	add	r7, sp, #0
20000656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000658:	2300      	movs	r3, #0
2000065a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
2000065c:	687a      	ldr	r2, [r7, #4]
2000065e:	23c0      	movs	r3, #192	; 0xc0
20000660:	009b      	lsls	r3, r3, #2
20000662:	401a      	ands	r2, r3
20000664:	23c0      	movs	r3, #192	; 0xc0
20000666:	009b      	lsls	r3, r3, #2
20000668:	429a      	cmp	r2, r3
2000066a:	d10f      	bne.n	2000068c <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
2000066c:	4b0d      	ldr	r3, [pc, #52]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000066e:	689b      	ldr	r3, [r3, #8]
20000670:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	4a0c      	ldr	r2, [pc, #48]	; (200006a8 <RCC_RTCCLKConfig+0x58>)
20000676:	4013      	ands	r3, r2
20000678:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
2000067a:	687b      	ldr	r3, [r7, #4]
2000067c:	4a0b      	ldr	r2, [pc, #44]	; (200006ac <RCC_RTCCLKConfig+0x5c>)
2000067e:	4013      	ands	r3, r2
20000680:	68fa      	ldr	r2, [r7, #12]
20000682:	4313      	orrs	r3, r2
20000684:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000686:	4b07      	ldr	r3, [pc, #28]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000688:	68fa      	ldr	r2, [r7, #12]
2000068a:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
2000068c:	4b05      	ldr	r3, [pc, #20]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000068e:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	051b      	lsls	r3, r3, #20
20000694:	0d1a      	lsrs	r2, r3, #20
20000696:	4b03      	ldr	r3, [pc, #12]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000698:	430a      	orrs	r2, r1
2000069a:	671a      	str	r2, [r3, #112]	; 0x70
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b004      	add	sp, #16
200006a2:	bd80      	pop	{r7, pc}
200006a4:	40023800 	andmi	r3, r2, r0, lsl #16
200006a8:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
200006ac:	0ffffcff 	svceq	0x00fffcff

200006b0 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
200006b0:	b580      	push	{r7, lr}
200006b2:	b082      	sub	sp, #8
200006b4:	af00      	add	r7, sp, #0
200006b6:	0002      	movs	r2, r0
200006b8:	1dfb      	adds	r3, r7, #7
200006ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
200006bc:	4b03      	ldr	r3, [pc, #12]	; (200006cc <RCC_RTCCLKCmd+0x1c>)
200006be:	1dfa      	adds	r2, r7, #7
200006c0:	7812      	ldrb	r2, [r2, #0]
200006c2:	601a      	str	r2, [r3, #0]
}
200006c4:	46c0      	nop			; (mov r8, r8)
200006c6:	46bd      	mov	sp, r7
200006c8:	b002      	add	sp, #8
200006ca:	bd80      	pop	{r7, pc}
200006cc:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

200006d0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
200006d0:	b580      	push	{r7, lr}
200006d2:	b082      	sub	sp, #8
200006d4:	af00      	add	r7, sp, #0
200006d6:	0002      	movs	r2, r0
200006d8:	1dfb      	adds	r3, r7, #7
200006da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
200006dc:	4b03      	ldr	r3, [pc, #12]	; (200006ec <RCC_BackupResetCmd+0x1c>)
200006de:	1dfa      	adds	r2, r7, #7
200006e0:	7812      	ldrb	r2, [r2, #0]
200006e2:	601a      	str	r2, [r3, #0]
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46bd      	mov	sp, r7
200006e8:	b002      	add	sp, #8
200006ea:	bd80      	pop	{r7, pc}
200006ec:	42470e40 	submi	r0, r7, #64, 28	; 0x400

200006f0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
200006f0:	b580      	push	{r7, lr}
200006f2:	b082      	sub	sp, #8
200006f4:	af00      	add	r7, sp, #0
200006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
200006f8:	4b03      	ldr	r3, [pc, #12]	; (20000708 <RCC_I2SCLKConfig+0x18>)
200006fa:	687a      	ldr	r2, [r7, #4]
200006fc:	601a      	str	r2, [r3, #0]
}
200006fe:	46c0      	nop			; (mov r8, r8)
20000700:	46bd      	mov	sp, r7
20000702:	b002      	add	sp, #8
20000704:	bd80      	pop	{r7, pc}
20000706:	46c0      	nop			; (mov r8, r8)
20000708:	4247015c 	submi	r0, r7, #92, 2

2000070c <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
2000070c:	b580      	push	{r7, lr}
2000070e:	b084      	sub	sp, #16
20000710:	af00      	add	r7, sp, #0
20000712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000714:	2300      	movs	r3, #0
20000716:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000718:	4a09      	ldr	r2, [pc, #36]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
2000071a:	238c      	movs	r3, #140	; 0x8c
2000071c:	58d3      	ldr	r3, [r2, r3]
2000071e:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000720:	68fb      	ldr	r3, [r7, #12]
20000722:	4a08      	ldr	r2, [pc, #32]	; (20000744 <RCC_SAIBlockACLKConfig+0x38>)
20000724:	4013      	ands	r3, r2
20000726:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000728:	68fa      	ldr	r2, [r7, #12]
2000072a:	687b      	ldr	r3, [r7, #4]
2000072c:	4313      	orrs	r3, r2
2000072e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000730:	4903      	ldr	r1, [pc, #12]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
20000732:	228c      	movs	r2, #140	; 0x8c
20000734:	68fb      	ldr	r3, [r7, #12]
20000736:	508b      	str	r3, [r1, r2]
}
20000738:	46c0      	nop			; (mov r8, r8)
2000073a:	46bd      	mov	sp, r7
2000073c:	b004      	add	sp, #16
2000073e:	bd80      	pop	{r7, pc}
20000740:	40023800 	andmi	r3, r2, r0, lsl #16
20000744:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000748 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000748:	b580      	push	{r7, lr}
2000074a:	b084      	sub	sp, #16
2000074c:	af00      	add	r7, sp, #0
2000074e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000750:	2300      	movs	r3, #0
20000752:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000754:	4a09      	ldr	r2, [pc, #36]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
20000756:	238c      	movs	r3, #140	; 0x8c
20000758:	58d3      	ldr	r3, [r2, r3]
2000075a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
2000075c:	68fb      	ldr	r3, [r7, #12]
2000075e:	4a08      	ldr	r2, [pc, #32]	; (20000780 <RCC_SAIBlockBCLKConfig+0x38>)
20000760:	4013      	ands	r3, r2
20000762:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000764:	68fa      	ldr	r2, [r7, #12]
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	4313      	orrs	r3, r2
2000076a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000076c:	4903      	ldr	r1, [pc, #12]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
2000076e:	228c      	movs	r2, #140	; 0x8c
20000770:	68fb      	ldr	r3, [r7, #12]
20000772:	508b      	str	r3, [r1, r2]
}
20000774:	46c0      	nop			; (mov r8, r8)
20000776:	46bd      	mov	sp, r7
20000778:	b004      	add	sp, #16
2000077a:	bd80      	pop	{r7, pc}
2000077c:	40023800 	andmi	r3, r2, r0, lsl #16
20000780:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000784 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000784:	b580      	push	{r7, lr}
20000786:	b084      	sub	sp, #16
20000788:	af00      	add	r7, sp, #0
2000078a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000078c:	2300      	movs	r3, #0
2000078e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000790:	4a0a      	ldr	r2, [pc, #40]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000792:	238c      	movs	r3, #140	; 0x8c
20000794:	58d3      	ldr	r3, [r2, r3]
20000796:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000798:	68fb      	ldr	r3, [r7, #12]
2000079a:	221f      	movs	r2, #31
2000079c:	4393      	bics	r3, r2
2000079e:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	3b01      	subs	r3, #1
200007a4:	68fa      	ldr	r2, [r7, #12]
200007a6:	4313      	orrs	r3, r2
200007a8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007aa:	4904      	ldr	r1, [pc, #16]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
200007ac:	228c      	movs	r2, #140	; 0x8c
200007ae:	68fb      	ldr	r3, [r7, #12]
200007b0:	508b      	str	r3, [r1, r2]
}
200007b2:	46c0      	nop			; (mov r8, r8)
200007b4:	46bd      	mov	sp, r7
200007b6:	b004      	add	sp, #16
200007b8:	bd80      	pop	{r7, pc}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	40023800 	andmi	r3, r2, r0, lsl #16

200007c0 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b084      	sub	sp, #16
200007c4:	af00      	add	r7, sp, #0
200007c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200007c8:	2300      	movs	r3, #0
200007ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200007cc:	4a0a      	ldr	r2, [pc, #40]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ce:	238c      	movs	r3, #140	; 0x8c
200007d0:	58d3      	ldr	r3, [r2, r3]
200007d2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200007d4:	68fb      	ldr	r3, [r7, #12]
200007d6:	4a09      	ldr	r2, [pc, #36]	; (200007fc <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200007d8:	4013      	ands	r3, r2
200007da:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	3b01      	subs	r3, #1
200007e0:	021b      	lsls	r3, r3, #8
200007e2:	68fa      	ldr	r2, [r7, #12]
200007e4:	4313      	orrs	r3, r2
200007e6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007e8:	4903      	ldr	r1, [pc, #12]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ea:	228c      	movs	r2, #140	; 0x8c
200007ec:	68fb      	ldr	r3, [r7, #12]
200007ee:	508b      	str	r3, [r1, r2]
}
200007f0:	46c0      	nop			; (mov r8, r8)
200007f2:	46bd      	mov	sp, r7
200007f4:	b004      	add	sp, #16
200007f6:	bd80      	pop	{r7, pc}
200007f8:	40023800 	andmi	r3, r2, r0, lsl #16
200007fc:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000800 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000800:	b580      	push	{r7, lr}
20000802:	b084      	sub	sp, #16
20000804:	af00      	add	r7, sp, #0
20000806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000808:	2300      	movs	r3, #0
2000080a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
2000080c:	4a09      	ldr	r2, [pc, #36]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
2000080e:	238c      	movs	r3, #140	; 0x8c
20000810:	58d3      	ldr	r3, [r2, r3]
20000812:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000814:	68fb      	ldr	r3, [r7, #12]
20000816:	4a08      	ldr	r2, [pc, #32]	; (20000838 <RCC_LTDCCLKDivConfig+0x38>)
20000818:	4013      	ands	r3, r2
2000081a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
2000081c:	68fa      	ldr	r2, [r7, #12]
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	4313      	orrs	r3, r2
20000822:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000824:	4903      	ldr	r1, [pc, #12]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
20000826:	228c      	movs	r2, #140	; 0x8c
20000828:	68fb      	ldr	r3, [r7, #12]
2000082a:	508b      	str	r3, [r1, r2]
}
2000082c:	46c0      	nop			; (mov r8, r8)
2000082e:	46bd      	mov	sp, r7
20000830:	b004      	add	sp, #16
20000832:	bd80      	pop	{r7, pc}
20000834:	40023800 	andmi	r3, r2, r0, lsl #16
20000838:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

2000083c <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
2000083c:	b580      	push	{r7, lr}
2000083e:	b082      	sub	sp, #8
20000840:	af00      	add	r7, sp, #0
20000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20000844:	4b03      	ldr	r3, [pc, #12]	; (20000854 <RCC_TIMCLKPresConfig+0x18>)
20000846:	687a      	ldr	r2, [r7, #4]
20000848:	601a      	str	r2, [r3, #0]
}
2000084a:	46c0      	nop			; (mov r8, r8)
2000084c:	46bd      	mov	sp, r7
2000084e:	b002      	add	sp, #8
20000850:	bd80      	pop	{r7, pc}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20000858 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000858:	b580      	push	{r7, lr}
2000085a:	b082      	sub	sp, #8
2000085c:	af00      	add	r7, sp, #0
2000085e:	6078      	str	r0, [r7, #4]
20000860:	000a      	movs	r2, r1
20000862:	1cfb      	adds	r3, r7, #3
20000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000866:	1cfb      	adds	r3, r7, #3
20000868:	781b      	ldrb	r3, [r3, #0]
2000086a:	2b00      	cmp	r3, #0
2000086c:	d006      	beq.n	2000087c <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
2000086e:	4b09      	ldr	r3, [pc, #36]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000870:	6b19      	ldr	r1, [r3, #48]	; 0x30
20000872:	4b08      	ldr	r3, [pc, #32]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000874:	687a      	ldr	r2, [r7, #4]
20000876:	430a      	orrs	r2, r1
20000878:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
2000087a:	e006      	b.n	2000088a <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
2000087c:	4b05      	ldr	r3, [pc, #20]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
2000087e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000880:	687b      	ldr	r3, [r7, #4]
20000882:	43d9      	mvns	r1, r3
20000884:	4b03      	ldr	r3, [pc, #12]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000886:	400a      	ands	r2, r1
20000888:	631a      	str	r2, [r3, #48]	; 0x30
}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	46bd      	mov	sp, r7
2000088e:	b002      	add	sp, #8
20000890:	bd80      	pop	{r7, pc}
20000892:	46c0      	nop			; (mov r8, r8)
20000894:	40023800 	andmi	r3, r2, r0, lsl #16

20000898 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000898:	b580      	push	{r7, lr}
2000089a:	b082      	sub	sp, #8
2000089c:	af00      	add	r7, sp, #0
2000089e:	6078      	str	r0, [r7, #4]
200008a0:	000a      	movs	r2, r1
200008a2:	1cfb      	adds	r3, r7, #3
200008a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008a6:	1cfb      	adds	r3, r7, #3
200008a8:	781b      	ldrb	r3, [r3, #0]
200008aa:	2b00      	cmp	r3, #0
200008ac:	d006      	beq.n	200008bc <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
200008ae:	4b09      	ldr	r3, [pc, #36]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
200008b2:	4b08      	ldr	r3, [pc, #32]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b4:	687a      	ldr	r2, [r7, #4]
200008b6:	430a      	orrs	r2, r1
200008b8:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
200008ba:	e006      	b.n	200008ca <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
200008bc:	4b05      	ldr	r3, [pc, #20]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	43d9      	mvns	r1, r3
200008c4:	4b03      	ldr	r3, [pc, #12]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008c6:	400a      	ands	r2, r1
200008c8:	635a      	str	r2, [r3, #52]	; 0x34
}
200008ca:	46c0      	nop			; (mov r8, r8)
200008cc:	46bd      	mov	sp, r7
200008ce:	b002      	add	sp, #8
200008d0:	bd80      	pop	{r7, pc}
200008d2:	46c0      	nop			; (mov r8, r8)
200008d4:	40023800 	andmi	r3, r2, r0, lsl #16

200008d8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200008d8:	b580      	push	{r7, lr}
200008da:	b082      	sub	sp, #8
200008dc:	af00      	add	r7, sp, #0
200008de:	6078      	str	r0, [r7, #4]
200008e0:	000a      	movs	r2, r1
200008e2:	1cfb      	adds	r3, r7, #3
200008e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008e6:	1cfb      	adds	r3, r7, #3
200008e8:	781b      	ldrb	r3, [r3, #0]
200008ea:	2b00      	cmp	r3, #0
200008ec:	d006      	beq.n	200008fc <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
200008ee:	4b09      	ldr	r3, [pc, #36]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
200008f2:	4b08      	ldr	r3, [pc, #32]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f4:	687a      	ldr	r2, [r7, #4]
200008f6:	430a      	orrs	r2, r1
200008f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
200008fa:	e006      	b.n	2000090a <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
200008fc:	4b05      	ldr	r3, [pc, #20]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	43d9      	mvns	r1, r3
20000904:	4b03      	ldr	r3, [pc, #12]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
20000906:	400a      	ands	r2, r1
20000908:	639a      	str	r2, [r3, #56]	; 0x38
}
2000090a:	46c0      	nop			; (mov r8, r8)
2000090c:	46bd      	mov	sp, r7
2000090e:	b002      	add	sp, #8
20000910:	bd80      	pop	{r7, pc}
20000912:	46c0      	nop			; (mov r8, r8)
20000914:	40023800 	andmi	r3, r2, r0, lsl #16

20000918 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000918:	b580      	push	{r7, lr}
2000091a:	b082      	sub	sp, #8
2000091c:	af00      	add	r7, sp, #0
2000091e:	6078      	str	r0, [r7, #4]
20000920:	000a      	movs	r2, r1
20000922:	1cfb      	adds	r3, r7, #3
20000924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000926:	1cfb      	adds	r3, r7, #3
20000928:	781b      	ldrb	r3, [r3, #0]
2000092a:	2b00      	cmp	r3, #0
2000092c:	d006      	beq.n	2000093c <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
2000092e:	4b09      	ldr	r3, [pc, #36]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000930:	6c19      	ldr	r1, [r3, #64]	; 0x40
20000932:	4b08      	ldr	r3, [pc, #32]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000934:	687a      	ldr	r2, [r7, #4]
20000936:	430a      	orrs	r2, r1
20000938:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
2000093a:	e006      	b.n	2000094a <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
2000093c:	4b05      	ldr	r3, [pc, #20]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
2000093e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000940:	687b      	ldr	r3, [r7, #4]
20000942:	43d9      	mvns	r1, r3
20000944:	4b03      	ldr	r3, [pc, #12]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000946:	400a      	ands	r2, r1
20000948:	641a      	str	r2, [r3, #64]	; 0x40
}
2000094a:	46c0      	nop			; (mov r8, r8)
2000094c:	46bd      	mov	sp, r7
2000094e:	b002      	add	sp, #8
20000950:	bd80      	pop	{r7, pc}
20000952:	46c0      	nop			; (mov r8, r8)
20000954:	40023800 	andmi	r3, r2, r0, lsl #16

20000958 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000958:	b580      	push	{r7, lr}
2000095a:	b082      	sub	sp, #8
2000095c:	af00      	add	r7, sp, #0
2000095e:	6078      	str	r0, [r7, #4]
20000960:	000a      	movs	r2, r1
20000962:	1cfb      	adds	r3, r7, #3
20000964:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000966:	1cfb      	adds	r3, r7, #3
20000968:	781b      	ldrb	r3, [r3, #0]
2000096a:	2b00      	cmp	r3, #0
2000096c:	d006      	beq.n	2000097c <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
2000096e:	4b09      	ldr	r3, [pc, #36]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000970:	6c59      	ldr	r1, [r3, #68]	; 0x44
20000972:	4b08      	ldr	r3, [pc, #32]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000974:	687a      	ldr	r2, [r7, #4]
20000976:	430a      	orrs	r2, r1
20000978:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
2000097a:	e006      	b.n	2000098a <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
2000097c:	4b05      	ldr	r3, [pc, #20]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
2000097e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000980:	687b      	ldr	r3, [r7, #4]
20000982:	43d9      	mvns	r1, r3
20000984:	4b03      	ldr	r3, [pc, #12]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000986:	400a      	ands	r2, r1
20000988:	645a      	str	r2, [r3, #68]	; 0x44
}
2000098a:	46c0      	nop			; (mov r8, r8)
2000098c:	46bd      	mov	sp, r7
2000098e:	b002      	add	sp, #8
20000990:	bd80      	pop	{r7, pc}
20000992:	46c0      	nop			; (mov r8, r8)
20000994:	40023800 	andmi	r3, r2, r0, lsl #16

20000998 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000998:	b580      	push	{r7, lr}
2000099a:	b082      	sub	sp, #8
2000099c:	af00      	add	r7, sp, #0
2000099e:	6078      	str	r0, [r7, #4]
200009a0:	000a      	movs	r2, r1
200009a2:	1cfb      	adds	r3, r7, #3
200009a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009a6:	1cfb      	adds	r3, r7, #3
200009a8:	781b      	ldrb	r3, [r3, #0]
200009aa:	2b00      	cmp	r3, #0
200009ac:	d006      	beq.n	200009bc <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
200009ae:	4b09      	ldr	r3, [pc, #36]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b0:	6919      	ldr	r1, [r3, #16]
200009b2:	4b08      	ldr	r3, [pc, #32]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b4:	687a      	ldr	r2, [r7, #4]
200009b6:	430a      	orrs	r2, r1
200009b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
200009ba:	e006      	b.n	200009ca <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
200009bc:	4b05      	ldr	r3, [pc, #20]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009be:	691a      	ldr	r2, [r3, #16]
200009c0:	687b      	ldr	r3, [r7, #4]
200009c2:	43d9      	mvns	r1, r3
200009c4:	4b03      	ldr	r3, [pc, #12]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009c6:	400a      	ands	r2, r1
200009c8:	611a      	str	r2, [r3, #16]
}
200009ca:	46c0      	nop			; (mov r8, r8)
200009cc:	46bd      	mov	sp, r7
200009ce:	b002      	add	sp, #8
200009d0:	bd80      	pop	{r7, pc}
200009d2:	46c0      	nop			; (mov r8, r8)
200009d4:	40023800 	andmi	r3, r2, r0, lsl #16

200009d8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200009d8:	b580      	push	{r7, lr}
200009da:	b082      	sub	sp, #8
200009dc:	af00      	add	r7, sp, #0
200009de:	6078      	str	r0, [r7, #4]
200009e0:	000a      	movs	r2, r1
200009e2:	1cfb      	adds	r3, r7, #3
200009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009e6:	1cfb      	adds	r3, r7, #3
200009e8:	781b      	ldrb	r3, [r3, #0]
200009ea:	2b00      	cmp	r3, #0
200009ec:	d006      	beq.n	200009fc <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
200009ee:	4b09      	ldr	r3, [pc, #36]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f0:	6959      	ldr	r1, [r3, #20]
200009f2:	4b08      	ldr	r3, [pc, #32]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f4:	687a      	ldr	r2, [r7, #4]
200009f6:	430a      	orrs	r2, r1
200009f8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
200009fa:	e006      	b.n	20000a0a <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
200009fc:	4b05      	ldr	r3, [pc, #20]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009fe:	695a      	ldr	r2, [r3, #20]
20000a00:	687b      	ldr	r3, [r7, #4]
20000a02:	43d9      	mvns	r1, r3
20000a04:	4b03      	ldr	r3, [pc, #12]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
20000a06:	400a      	ands	r2, r1
20000a08:	615a      	str	r2, [r3, #20]
}
20000a0a:	46c0      	nop			; (mov r8, r8)
20000a0c:	46bd      	mov	sp, r7
20000a0e:	b002      	add	sp, #8
20000a10:	bd80      	pop	{r7, pc}
20000a12:	46c0      	nop			; (mov r8, r8)
20000a14:	40023800 	andmi	r3, r2, r0, lsl #16

20000a18 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000a18:	b580      	push	{r7, lr}
20000a1a:	b082      	sub	sp, #8
20000a1c:	af00      	add	r7, sp, #0
20000a1e:	6078      	str	r0, [r7, #4]
20000a20:	000a      	movs	r2, r1
20000a22:	1cfb      	adds	r3, r7, #3
20000a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000a26:	1cfb      	adds	r3, r7, #3
20000a28:	781b      	ldrb	r3, [r3, #0]
20000a2a:	2b00      	cmp	r3, #0
20000a2c:	d006      	beq.n	20000a3c <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000a2e:	4b09      	ldr	r3, [pc, #36]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a30:	6999      	ldr	r1, [r3, #24]
20000a32:	4b08      	ldr	r3, [pc, #32]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a34:	687a      	ldr	r2, [r7, #4]
20000a36:	430a      	orrs	r2, r1
20000a38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000a3a:	e006      	b.n	20000a4a <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000a3c:	4b05      	ldr	r3, [pc, #20]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a3e:	699a      	ldr	r2, [r3, #24]
20000a40:	687b      	ldr	r3, [r7, #4]
20000a42:	43d9      	mvns	r1, r3
20000a44:	4b03      	ldr	r3, [pc, #12]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a46:	400a      	ands	r2, r1
20000a48:	619a      	str	r2, [r3, #24]
}
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b002      	add	sp, #8
20000a50:	bd80      	pop	{r7, pc}
20000a52:	46c0      	nop			; (mov r8, r8)
20000a54:	40023800 	andmi	r3, r2, r0, lsl #16

20000a58 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000a58:	b580      	push	{r7, lr}
20000a5a:	b082      	sub	sp, #8
20000a5c:	af00      	add	r7, sp, #0
20000a5e:	6078      	str	r0, [r7, #4]
20000a60:	000a      	movs	r2, r1
20000a62:	1cfb      	adds	r3, r7, #3
20000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a66:	1cfb      	adds	r3, r7, #3
20000a68:	781b      	ldrb	r3, [r3, #0]
20000a6a:	2b00      	cmp	r3, #0
20000a6c:	d006      	beq.n	20000a7c <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20000a6e:	4b09      	ldr	r3, [pc, #36]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a70:	6a19      	ldr	r1, [r3, #32]
20000a72:	4b08      	ldr	r3, [pc, #32]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a74:	687a      	ldr	r2, [r7, #4]
20000a76:	430a      	orrs	r2, r1
20000a78:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20000a7a:	e006      	b.n	20000a8a <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20000a7c:	4b05      	ldr	r3, [pc, #20]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a7e:	6a1a      	ldr	r2, [r3, #32]
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	43d9      	mvns	r1, r3
20000a84:	4b03      	ldr	r3, [pc, #12]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a86:	400a      	ands	r2, r1
20000a88:	621a      	str	r2, [r3, #32]
}
20000a8a:	46c0      	nop			; (mov r8, r8)
20000a8c:	46bd      	mov	sp, r7
20000a8e:	b002      	add	sp, #8
20000a90:	bd80      	pop	{r7, pc}
20000a92:	46c0      	nop			; (mov r8, r8)
20000a94:	40023800 	andmi	r3, r2, r0, lsl #16

20000a98 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000a98:	b580      	push	{r7, lr}
20000a9a:	b082      	sub	sp, #8
20000a9c:	af00      	add	r7, sp, #0
20000a9e:	6078      	str	r0, [r7, #4]
20000aa0:	000a      	movs	r2, r1
20000aa2:	1cfb      	adds	r3, r7, #3
20000aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000aa6:	1cfb      	adds	r3, r7, #3
20000aa8:	781b      	ldrb	r3, [r3, #0]
20000aaa:	2b00      	cmp	r3, #0
20000aac:	d006      	beq.n	20000abc <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000aae:	4b09      	ldr	r3, [pc, #36]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab0:	6a59      	ldr	r1, [r3, #36]	; 0x24
20000ab2:	4b08      	ldr	r3, [pc, #32]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab4:	687a      	ldr	r2, [r7, #4]
20000ab6:	430a      	orrs	r2, r1
20000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20000aba:	e006      	b.n	20000aca <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20000abc:	4b05      	ldr	r3, [pc, #20]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	43d9      	mvns	r1, r3
20000ac4:	4b03      	ldr	r3, [pc, #12]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ac6:	400a      	ands	r2, r1
20000ac8:	625a      	str	r2, [r3, #36]	; 0x24
}
20000aca:	46c0      	nop			; (mov r8, r8)
20000acc:	46bd      	mov	sp, r7
20000ace:	b002      	add	sp, #8
20000ad0:	bd80      	pop	{r7, pc}
20000ad2:	46c0      	nop			; (mov r8, r8)
20000ad4:	40023800 	andmi	r3, r2, r0, lsl #16

20000ad8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000ad8:	b580      	push	{r7, lr}
20000ada:	b082      	sub	sp, #8
20000adc:	af00      	add	r7, sp, #0
20000ade:	6078      	str	r0, [r7, #4]
20000ae0:	000a      	movs	r2, r1
20000ae2:	1cfb      	adds	r3, r7, #3
20000ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ae6:	1cfb      	adds	r3, r7, #3
20000ae8:	781b      	ldrb	r3, [r3, #0]
20000aea:	2b00      	cmp	r3, #0
20000aec:	d006      	beq.n	20000afc <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20000aee:	4b09      	ldr	r3, [pc, #36]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af0:	6d19      	ldr	r1, [r3, #80]	; 0x50
20000af2:	4b08      	ldr	r3, [pc, #32]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af4:	687a      	ldr	r2, [r7, #4]
20000af6:	430a      	orrs	r2, r1
20000af8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20000afa:	e006      	b.n	20000b0a <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20000afc:	4b05      	ldr	r3, [pc, #20]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20000b00:	687b      	ldr	r3, [r7, #4]
20000b02:	43d9      	mvns	r1, r3
20000b04:	4b03      	ldr	r3, [pc, #12]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000b06:	400a      	ands	r2, r1
20000b08:	651a      	str	r2, [r3, #80]	; 0x50
}
20000b0a:	46c0      	nop			; (mov r8, r8)
20000b0c:	46bd      	mov	sp, r7
20000b0e:	b002      	add	sp, #8
20000b10:	bd80      	pop	{r7, pc}
20000b12:	46c0      	nop			; (mov r8, r8)
20000b14:	40023800 	andmi	r3, r2, r0, lsl #16

20000b18 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000b18:	b580      	push	{r7, lr}
20000b1a:	b082      	sub	sp, #8
20000b1c:	af00      	add	r7, sp, #0
20000b1e:	6078      	str	r0, [r7, #4]
20000b20:	000a      	movs	r2, r1
20000b22:	1cfb      	adds	r3, r7, #3
20000b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b26:	1cfb      	adds	r3, r7, #3
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	2b00      	cmp	r3, #0
20000b2c:	d006      	beq.n	20000b3c <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20000b2e:	4b09      	ldr	r3, [pc, #36]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
20000b32:	4b08      	ldr	r3, [pc, #32]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b34:	687a      	ldr	r2, [r7, #4]
20000b36:	430a      	orrs	r2, r1
20000b38:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20000b3a:	e006      	b.n	20000b4a <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20000b3c:	4b05      	ldr	r3, [pc, #20]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20000b40:	687b      	ldr	r3, [r7, #4]
20000b42:	43d9      	mvns	r1, r3
20000b44:	4b03      	ldr	r3, [pc, #12]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b46:	400a      	ands	r2, r1
20000b48:	655a      	str	r2, [r3, #84]	; 0x54
}
20000b4a:	46c0      	nop			; (mov r8, r8)
20000b4c:	46bd      	mov	sp, r7
20000b4e:	b002      	add	sp, #8
20000b50:	bd80      	pop	{r7, pc}
20000b52:	46c0      	nop			; (mov r8, r8)
20000b54:	40023800 	andmi	r3, r2, r0, lsl #16

20000b58 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000b58:	b580      	push	{r7, lr}
20000b5a:	b082      	sub	sp, #8
20000b5c:	af00      	add	r7, sp, #0
20000b5e:	6078      	str	r0, [r7, #4]
20000b60:	000a      	movs	r2, r1
20000b62:	1cfb      	adds	r3, r7, #3
20000b64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b66:	1cfb      	adds	r3, r7, #3
20000b68:	781b      	ldrb	r3, [r3, #0]
20000b6a:	2b00      	cmp	r3, #0
20000b6c:	d006      	beq.n	20000b7c <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20000b6e:	4b09      	ldr	r3, [pc, #36]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b70:	6d99      	ldr	r1, [r3, #88]	; 0x58
20000b72:	4b08      	ldr	r3, [pc, #32]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b74:	687a      	ldr	r2, [r7, #4]
20000b76:	430a      	orrs	r2, r1
20000b78:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20000b7a:	e006      	b.n	20000b8a <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20000b7c:	4b05      	ldr	r3, [pc, #20]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20000b80:	687b      	ldr	r3, [r7, #4]
20000b82:	43d9      	mvns	r1, r3
20000b84:	4b03      	ldr	r3, [pc, #12]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b86:	400a      	ands	r2, r1
20000b88:	659a      	str	r2, [r3, #88]	; 0x58
}
20000b8a:	46c0      	nop			; (mov r8, r8)
20000b8c:	46bd      	mov	sp, r7
20000b8e:	b002      	add	sp, #8
20000b90:	bd80      	pop	{r7, pc}
20000b92:	46c0      	nop			; (mov r8, r8)
20000b94:	40023800 	andmi	r3, r2, r0, lsl #16

20000b98 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000b98:	b580      	push	{r7, lr}
20000b9a:	b082      	sub	sp, #8
20000b9c:	af00      	add	r7, sp, #0
20000b9e:	6078      	str	r0, [r7, #4]
20000ba0:	000a      	movs	r2, r1
20000ba2:	1cfb      	adds	r3, r7, #3
20000ba4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ba6:	1cfb      	adds	r3, r7, #3
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	2b00      	cmp	r3, #0
20000bac:	d006      	beq.n	20000bbc <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20000bae:	4b09      	ldr	r3, [pc, #36]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb0:	6e19      	ldr	r1, [r3, #96]	; 0x60
20000bb2:	4b08      	ldr	r3, [pc, #32]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb4:	687a      	ldr	r2, [r7, #4]
20000bb6:	430a      	orrs	r2, r1
20000bb8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20000bba:	e006      	b.n	20000bca <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20000bbc:	4b05      	ldr	r3, [pc, #20]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	43d9      	mvns	r1, r3
20000bc4:	4b03      	ldr	r3, [pc, #12]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bc6:	400a      	ands	r2, r1
20000bc8:	661a      	str	r2, [r3, #96]	; 0x60
}
20000bca:	46c0      	nop			; (mov r8, r8)
20000bcc:	46bd      	mov	sp, r7
20000bce:	b002      	add	sp, #8
20000bd0:	bd80      	pop	{r7, pc}
20000bd2:	46c0      	nop			; (mov r8, r8)
20000bd4:	40023800 	andmi	r3, r2, r0, lsl #16

20000bd8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000bd8:	b580      	push	{r7, lr}
20000bda:	b082      	sub	sp, #8
20000bdc:	af00      	add	r7, sp, #0
20000bde:	6078      	str	r0, [r7, #4]
20000be0:	000a      	movs	r2, r1
20000be2:	1cfb      	adds	r3, r7, #3
20000be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000be6:	1cfb      	adds	r3, r7, #3
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	2b00      	cmp	r3, #0
20000bec:	d006      	beq.n	20000bfc <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20000bee:	4b09      	ldr	r3, [pc, #36]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf0:	6e59      	ldr	r1, [r3, #100]	; 0x64
20000bf2:	4b08      	ldr	r3, [pc, #32]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf4:	687a      	ldr	r2, [r7, #4]
20000bf6:	430a      	orrs	r2, r1
20000bf8:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20000bfa:	e006      	b.n	20000c0a <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20000bfc:	4b05      	ldr	r3, [pc, #20]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20000c00:	687b      	ldr	r3, [r7, #4]
20000c02:	43d9      	mvns	r1, r3
20000c04:	4b03      	ldr	r3, [pc, #12]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000c06:	400a      	ands	r2, r1
20000c08:	665a      	str	r2, [r3, #100]	; 0x64
}
20000c0a:	46c0      	nop			; (mov r8, r8)
20000c0c:	46bd      	mov	sp, r7
20000c0e:	b002      	add	sp, #8
20000c10:	bd80      	pop	{r7, pc}
20000c12:	46c0      	nop			; (mov r8, r8)
20000c14:	40023800 	andmi	r3, r2, r0, lsl #16

20000c18 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20000c18:	b580      	push	{r7, lr}
20000c1a:	b082      	sub	sp, #8
20000c1c:	af00      	add	r7, sp, #0
20000c1e:	0002      	movs	r2, r0
20000c20:	1dfb      	adds	r3, r7, #7
20000c22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20000c24:	1dfb      	adds	r3, r7, #7
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	2b01      	cmp	r3, #1
20000c2a:	d106      	bne.n	20000c3a <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c2c:	4b08      	ldr	r3, [pc, #32]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c30:	4b07      	ldr	r3, [pc, #28]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c32:	2108      	movs	r1, #8
20000c34:	430a      	orrs	r2, r1
20000c36:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20000c38:	e005      	b.n	20000c46 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c3a:	4b05      	ldr	r3, [pc, #20]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c3e:	4b04      	ldr	r3, [pc, #16]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c40:	2108      	movs	r1, #8
20000c42:	438a      	bics	r2, r1
20000c44:	671a      	str	r2, [r3, #112]	; 0x70
}
20000c46:	46c0      	nop			; (mov r8, r8)
20000c48:	46bd      	mov	sp, r7
20000c4a:	b002      	add	sp, #8
20000c4c:	bd80      	pop	{r7, pc}
20000c4e:	46c0      	nop			; (mov r8, r8)
20000c50:	40023800 	andmi	r3, r2, r0, lsl #16

20000c54 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20000c54:	b580      	push	{r7, lr}
20000c56:	b082      	sub	sp, #8
20000c58:	af00      	add	r7, sp, #0
20000c5a:	0002      	movs	r2, r0
20000c5c:	1dfb      	adds	r3, r7, #7
20000c5e:	701a      	strb	r2, [r3, #0]
20000c60:	1dbb      	adds	r3, r7, #6
20000c62:	1c0a      	adds	r2, r1, #0
20000c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000c66:	1dbb      	adds	r3, r7, #6
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	2b00      	cmp	r3, #0
20000c6c:	d009      	beq.n	20000c82 <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20000c6e:	4b0c      	ldr	r3, [pc, #48]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c70:	781b      	ldrb	r3, [r3, #0]
20000c72:	b2da      	uxtb	r2, r3
20000c74:	490a      	ldr	r1, [pc, #40]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c76:	1dfb      	adds	r3, r7, #7
20000c78:	781b      	ldrb	r3, [r3, #0]
20000c7a:	4313      	orrs	r3, r2
20000c7c:	b2db      	uxtb	r3, r3
20000c7e:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20000c80:	e00a      	b.n	20000c98 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20000c82:	4b07      	ldr	r3, [pc, #28]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c84:	781b      	ldrb	r3, [r3, #0]
20000c86:	b2db      	uxtb	r3, r3
20000c88:	1dfa      	adds	r2, r7, #7
20000c8a:	7812      	ldrb	r2, [r2, #0]
20000c8c:	43d2      	mvns	r2, r2
20000c8e:	b2d2      	uxtb	r2, r2
20000c90:	4903      	ldr	r1, [pc, #12]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c92:	4013      	ands	r3, r2
20000c94:	b2db      	uxtb	r3, r3
20000c96:	700b      	strb	r3, [r1, #0]
}
20000c98:	46c0      	nop			; (mov r8, r8)
20000c9a:	46bd      	mov	sp, r7
20000c9c:	b002      	add	sp, #8
20000c9e:	bd80      	pop	{r7, pc}
20000ca0:	4002380d 	andmi	r3, r2, sp, lsl #16

20000ca4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b086      	sub	sp, #24
20000ca8:	af00      	add	r7, sp, #0
20000caa:	0002      	movs	r2, r0
20000cac:	1dfb      	adds	r3, r7, #7
20000cae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20000cb0:	2300      	movs	r3, #0
20000cb2:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20000cb4:	2300      	movs	r3, #0
20000cb6:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20000cb8:	2313      	movs	r3, #19
20000cba:	18fb      	adds	r3, r7, r3
20000cbc:	2200      	movs	r2, #0
20000cbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20000cc0:	1dfb      	adds	r3, r7, #7
20000cc2:	781b      	ldrb	r3, [r3, #0]
20000cc4:	095b      	lsrs	r3, r3, #5
20000cc6:	b2db      	uxtb	r3, r3
20000cc8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20000cca:	68fb      	ldr	r3, [r7, #12]
20000ccc:	2b01      	cmp	r3, #1
20000cce:	d103      	bne.n	20000cd8 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20000cd0:	4b14      	ldr	r3, [pc, #80]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000cd2:	681b      	ldr	r3, [r3, #0]
20000cd4:	617b      	str	r3, [r7, #20]
20000cd6:	e009      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20000cd8:	68fb      	ldr	r3, [r7, #12]
20000cda:	2b02      	cmp	r3, #2
20000cdc:	d103      	bne.n	20000ce6 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20000cde:	4b11      	ldr	r3, [pc, #68]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20000ce2:	617b      	str	r3, [r7, #20]
20000ce4:	e002      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20000ce6:	4b0f      	ldr	r3, [pc, #60]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000cea:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20000cec:	1dfb      	adds	r3, r7, #7
20000cee:	781b      	ldrb	r3, [r3, #0]
20000cf0:	221f      	movs	r2, #31
20000cf2:	4013      	ands	r3, r2
20000cf4:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20000cf6:	697a      	ldr	r2, [r7, #20]
20000cf8:	68fb      	ldr	r3, [r7, #12]
20000cfa:	40da      	lsrs	r2, r3
20000cfc:	0013      	movs	r3, r2
20000cfe:	2201      	movs	r2, #1
20000d00:	4013      	ands	r3, r2
20000d02:	d004      	beq.n	20000d0e <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20000d04:	2313      	movs	r3, #19
20000d06:	18fb      	adds	r3, r7, r3
20000d08:	2201      	movs	r2, #1
20000d0a:	701a      	strb	r2, [r3, #0]
20000d0c:	e003      	b.n	20000d16 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20000d0e:	2313      	movs	r3, #19
20000d10:	18fb      	adds	r3, r7, r3
20000d12:	2200      	movs	r2, #0
20000d14:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20000d16:	2313      	movs	r3, #19
20000d18:	18fb      	adds	r3, r7, r3
20000d1a:	781b      	ldrb	r3, [r3, #0]
}
20000d1c:	0018      	movs	r0, r3
20000d1e:	46bd      	mov	sp, r7
20000d20:	b006      	add	sp, #24
20000d22:	bd80      	pop	{r7, pc}
20000d24:	40023800 	andmi	r3, r2, r0, lsl #16

20000d28 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20000d28:	b580      	push	{r7, lr}
20000d2a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20000d2c:	4b04      	ldr	r3, [pc, #16]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20000d30:	4b03      	ldr	r3, [pc, #12]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d32:	2180      	movs	r1, #128	; 0x80
20000d34:	0449      	lsls	r1, r1, #17
20000d36:	430a      	orrs	r2, r1
20000d38:	675a      	str	r2, [r3, #116]	; 0x74
}
20000d3a:	46c0      	nop			; (mov r8, r8)
20000d3c:	46bd      	mov	sp, r7
20000d3e:	bd80      	pop	{r7, pc}
20000d40:	40023800 	andmi	r3, r2, r0, lsl #16

20000d44 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20000d44:	b580      	push	{r7, lr}
20000d46:	b084      	sub	sp, #16
20000d48:	af00      	add	r7, sp, #0
20000d4a:	0002      	movs	r2, r0
20000d4c:	1dfb      	adds	r3, r7, #7
20000d4e:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20000d50:	230f      	movs	r3, #15
20000d52:	18fb      	adds	r3, r7, r3
20000d54:	2200      	movs	r2, #0
20000d56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20000d58:	4b0a      	ldr	r3, [pc, #40]	; (20000d84 <RCC_GetITStatus+0x40>)
20000d5a:	68db      	ldr	r3, [r3, #12]
20000d5c:	1dfa      	adds	r2, r7, #7
20000d5e:	7812      	ldrb	r2, [r2, #0]
20000d60:	4013      	ands	r3, r2
20000d62:	d004      	beq.n	20000d6e <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20000d64:	230f      	movs	r3, #15
20000d66:	18fb      	adds	r3, r7, r3
20000d68:	2201      	movs	r2, #1
20000d6a:	701a      	strb	r2, [r3, #0]
20000d6c:	e003      	b.n	20000d76 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20000d6e:	230f      	movs	r3, #15
20000d70:	18fb      	adds	r3, r7, r3
20000d72:	2200      	movs	r2, #0
20000d74:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20000d76:	230f      	movs	r3, #15
20000d78:	18fb      	adds	r3, r7, r3
20000d7a:	781b      	ldrb	r3, [r3, #0]
}
20000d7c:	0018      	movs	r0, r3
20000d7e:	46bd      	mov	sp, r7
20000d80:	b004      	add	sp, #16
20000d82:	bd80      	pop	{r7, pc}
20000d84:	40023800 	andmi	r3, r2, r0, lsl #16

20000d88 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20000d88:	b580      	push	{r7, lr}
20000d8a:	b082      	sub	sp, #8
20000d8c:	af00      	add	r7, sp, #0
20000d8e:	0002      	movs	r2, r0
20000d90:	1dfb      	adds	r3, r7, #7
20000d92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20000d94:	4a03      	ldr	r2, [pc, #12]	; (20000da4 <RCC_ClearITPendingBit+0x1c>)
20000d96:	1dfb      	adds	r3, r7, #7
20000d98:	781b      	ldrb	r3, [r3, #0]
20000d9a:	7013      	strb	r3, [r2, #0]
}
20000d9c:	46c0      	nop			; (mov r8, r8)
20000d9e:	46bd      	mov	sp, r7
20000da0:	b002      	add	sp, #8
20000da2:	bd80      	pop	{r7, pc}
20000da4:	4002380e 	andmi	r3, r2, lr, lsl #16

20000da8 <init_GPIO_Ports>:
//======================================GPIO=========================================================
void init_GPIO_Ports()
{
20000da8:	b580      	push	{r7, lr}
20000daa:	b082      	sub	sp, #8
20000dac:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO E UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000dae:	2101      	movs	r1, #1
20000db0:	2010      	movs	r0, #16
20000db2:	f7ff fd51 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000db6:	003b      	movs	r3, r7
20000db8:	0018      	movs	r0, r3
20000dba:	f001 f97b 	bl	200020b4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000dbe:	003b      	movs	r3, r7
20000dc0:	4a64      	ldr	r2, [pc, #400]	; (20000f54 <init_GPIO_Ports+0x1ac>)
20000dc2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000dc4:	003b      	movs	r3, r7
20000dc6:	2201      	movs	r2, #1
20000dc8:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000dca:	003b      	movs	r3, r7
20000dcc:	2200      	movs	r2, #0
20000dce:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000dd0:	003b      	movs	r3, r7
20000dd2:	2200      	movs	r2, #0
20000dd4:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20000dd6:	003b      	movs	r3, r7
20000dd8:	4a5f      	ldr	r2, [pc, #380]	; (20000f58 <init_GPIO_Ports+0x1b0>)
20000dda:	0019      	movs	r1, r3
20000ddc:	0010      	movs	r0, r2
20000dde:	f001 f8dd 	bl	20001f9c <GPIO_Init>
	
	//konfigurerar inport GPIO E
	GPIO_StructInit(&init);
20000de2:	003b      	movs	r3, r7
20000de4:	0018      	movs	r0, r3
20000de6:	f001 f965 	bl	200020b4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000dea:	003b      	movs	r3, r7
20000dec:	4a5b      	ldr	r2, [pc, #364]	; (20000f5c <init_GPIO_Ports+0x1b4>)
20000dee:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000df0:	003b      	movs	r3, r7
20000df2:	2200      	movs	r2, #0
20000df4:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000df6:	003b      	movs	r3, r7
20000df8:	2201      	movs	r2, #1
20000dfa:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20000dfc:	003b      	movs	r3, r7
20000dfe:	4a56      	ldr	r2, [pc, #344]	; (20000f58 <init_GPIO_Ports+0x1b0>)
20000e00:	0019      	movs	r1, r3
20000e02:	0010      	movs	r0, r2
20000e04:	f001 f8ca 	bl	20001f9c <GPIO_Init>

    //GPIOA UTPORTAR
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000e08:	2101      	movs	r1, #1
20000e0a:	2001      	movs	r0, #1
20000e0c:	f7ff fd24 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000e10:	003b      	movs	r3, r7
20000e12:	0018      	movs	r0, r3
20000e14:	f001 f94e 	bl	200020b4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000e18:	003b      	movs	r3, r7
20000e1a:	4a4e      	ldr	r2, [pc, #312]	; (20000f54 <init_GPIO_Ports+0x1ac>)
20000e1c:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000e1e:	003b      	movs	r3, r7
20000e20:	2201      	movs	r2, #1
20000e22:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000e24:	003b      	movs	r3, r7
20000e26:	2200      	movs	r2, #0
20000e28:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000e2a:	003b      	movs	r3, r7
20000e2c:	2200      	movs	r2, #0
20000e2e:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20000e30:	003b      	movs	r3, r7
20000e32:	4a4b      	ldr	r2, [pc, #300]	; (20000f60 <init_GPIO_Ports+0x1b8>)
20000e34:	0019      	movs	r1, r3
20000e36:	0010      	movs	r0, r2
20000e38:	f001 f8b0 	bl	20001f9c <GPIO_Init>
	
	//konfigurerar inport GPIO a
	GPIO_StructInit(&init);
20000e3c:	003b      	movs	r3, r7
20000e3e:	0018      	movs	r0, r3
20000e40:	f001 f938 	bl	200020b4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000e44:	003b      	movs	r3, r7
20000e46:	4a45      	ldr	r2, [pc, #276]	; (20000f5c <init_GPIO_Ports+0x1b4>)
20000e48:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000e4a:	003b      	movs	r3, r7
20000e4c:	2200      	movs	r2, #0
20000e4e:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000e50:	003b      	movs	r3, r7
20000e52:	2201      	movs	r2, #1
20000e54:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20000e56:	003b      	movs	r3, r7
20000e58:	4a41      	ldr	r2, [pc, #260]	; (20000f60 <init_GPIO_Ports+0x1b8>)
20000e5a:	0019      	movs	r1, r3
20000e5c:	0010      	movs	r0, r2
20000e5e:	f001 f89d 	bl	20001f9c <GPIO_Init>

	//GPIO C UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20000e62:	2101      	movs	r1, #1
20000e64:	2004      	movs	r0, #4
20000e66:	f7ff fcf7 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000e6a:	003b      	movs	r3, r7
20000e6c:	0018      	movs	r0, r3
20000e6e:	f001 f921 	bl	200020b4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000e72:	003b      	movs	r3, r7
20000e74:	4a37      	ldr	r2, [pc, #220]	; (20000f54 <init_GPIO_Ports+0x1ac>)
20000e76:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000e78:	003b      	movs	r3, r7
20000e7a:	2201      	movs	r2, #1
20000e7c:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000e7e:	003b      	movs	r3, r7
20000e80:	2200      	movs	r2, #0
20000e82:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000e84:	003b      	movs	r3, r7
20000e86:	2200      	movs	r2, #0
20000e88:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
20000e8a:	003b      	movs	r3, r7
20000e8c:	4a35      	ldr	r2, [pc, #212]	; (20000f64 <init_GPIO_Ports+0x1bc>)
20000e8e:	0019      	movs	r1, r3
20000e90:	0010      	movs	r0, r2
20000e92:	f001 f883 	bl	20001f9c <GPIO_Init>
	
	//konfigurerar inport GPIO C
	GPIO_StructInit(&init);
20000e96:	003b      	movs	r3, r7
20000e98:	0018      	movs	r0, r3
20000e9a:	f001 f90b 	bl	200020b4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000e9e:	003b      	movs	r3, r7
20000ea0:	4a2e      	ldr	r2, [pc, #184]	; (20000f5c <init_GPIO_Ports+0x1b4>)
20000ea2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000ea4:	003b      	movs	r3, r7
20000ea6:	2200      	movs	r2, #0
20000ea8:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000eaa:	003b      	movs	r3, r7
20000eac:	2201      	movs	r2, #1
20000eae:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
20000eb0:	003b      	movs	r3, r7
20000eb2:	4a2c      	ldr	r2, [pc, #176]	; (20000f64 <init_GPIO_Ports+0x1bc>)
20000eb4:	0019      	movs	r1, r3
20000eb6:	0010      	movs	r0, r2
20000eb8:	f001 f870 	bl	20001f9c <GPIO_Init>

	//GPIO D UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20000ebc:	2101      	movs	r1, #1
20000ebe:	2008      	movs	r0, #8
20000ec0:	f7ff fcca 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000ec4:	003b      	movs	r3, r7
20000ec6:	0018      	movs	r0, r3
20000ec8:	f001 f8f4 	bl	200020b4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000ecc:	003b      	movs	r3, r7
20000ece:	4a21      	ldr	r2, [pc, #132]	; (20000f54 <init_GPIO_Ports+0x1ac>)
20000ed0:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000ed2:	003b      	movs	r3, r7
20000ed4:	2201      	movs	r2, #1
20000ed6:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000ed8:	003b      	movs	r3, r7
20000eda:	2200      	movs	r2, #0
20000edc:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000ede:	003b      	movs	r3, r7
20000ee0:	2200      	movs	r2, #0
20000ee2:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
20000ee4:	003b      	movs	r3, r7
20000ee6:	4a20      	ldr	r2, [pc, #128]	; (20000f68 <init_GPIO_Ports+0x1c0>)
20000ee8:	0019      	movs	r1, r3
20000eea:	0010      	movs	r0, r2
20000eec:	f001 f856 	bl	20001f9c <GPIO_Init>
	
	//konfigurerar inport GPIO D
	GPIO_StructInit(&init);
20000ef0:	003b      	movs	r3, r7
20000ef2:	0018      	movs	r0, r3
20000ef4:	f001 f8de 	bl	200020b4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000ef8:	003b      	movs	r3, r7
20000efa:	4a18      	ldr	r2, [pc, #96]	; (20000f5c <init_GPIO_Ports+0x1b4>)
20000efc:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000efe:	003b      	movs	r3, r7
20000f00:	2200      	movs	r2, #0
20000f02:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000f04:	003b      	movs	r3, r7
20000f06:	2201      	movs	r2, #1
20000f08:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
20000f0a:	003b      	movs	r3, r7
20000f0c:	4a16      	ldr	r2, [pc, #88]	; (20000f68 <init_GPIO_Ports+0x1c0>)
20000f0e:	0019      	movs	r1, r3
20000f10:	0010      	movs	r0, r2
20000f12:	f001 f843 	bl	20001f9c <GPIO_Init>

	//GPIO B UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20000f16:	2101      	movs	r1, #1
20000f18:	2002      	movs	r0, #2
20000f1a:	f7ff fc9d 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000f1e:	003b      	movs	r3, r7
20000f20:	0018      	movs	r0, r3
20000f22:	f001 f8c7 	bl	200020b4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_2;
20000f26:	003b      	movs	r3, r7
20000f28:	2204      	movs	r2, #4
20000f2a:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000f2c:	003b      	movs	r3, r7
20000f2e:	2201      	movs	r2, #1
20000f30:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000f32:	003b      	movs	r3, r7
20000f34:	2200      	movs	r2, #0
20000f36:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000f38:	003b      	movs	r3, r7
20000f3a:	2200      	movs	r2, #0
20000f3c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &init);
20000f3e:	003b      	movs	r3, r7
20000f40:	4a0a      	ldr	r2, [pc, #40]	; (20000f6c <init_GPIO_Ports+0x1c4>)
20000f42:	0019      	movs	r1, r3
20000f44:	0010      	movs	r0, r2
20000f46:	f001 f829 	bl	20001f9c <GPIO_Init>
20000f4a:	46c0      	nop			; (mov r8, r8)
20000f4c:	46bd      	mov	sp, r7
20000f4e:	b002      	add	sp, #8
20000f50:	bd80      	pop	{r7, pc}
20000f52:	46c0      	nop			; (mov r8, r8)
20000f54:	0000aaaa 	andeq	sl, r0, sl, lsr #21
20000f58:	40021000 	andmi	r1, r2, r0
20000f5c:	00005555 	andeq	r5, r0, r5, asr r5
20000f60:	40020000 	andmi	r0, r2, r0
20000f64:	40020800 	andmi	r0, r2, r0, lsl #16
20000f68:	40020c00 	andmi	r0, r2, r0, lsl #24
20000f6c:	40020400 	andmi	r0, r2, r0, lsl #8

20000f70 <SysTick_Handler>:
GPIO_TypeDef* GPIO_Ports[] = {GPIOE, GPIOA, GPIOC, GPIOD};

// ========================================= SYSTICK ================================================
volatile uint32_t msTicks = 0; /* Variable to store millisecond ticks */
void SysTick_Handler(void)
{ /* SysTick interrupt Handler. */
20000f70:	b580      	push	{r7, lr}
20000f72:	af00      	add	r7, sp, #0
	msTicks++;
20000f74:	4b03      	ldr	r3, [pc, #12]	; (20000f84 <SysTick_Handler+0x14>)
20000f76:	681b      	ldr	r3, [r3, #0]
20000f78:	1c5a      	adds	r2, r3, #1
20000f7a:	4b02      	ldr	r3, [pc, #8]	; (20000f84 <SysTick_Handler+0x14>)
20000f7c:	601a      	str	r2, [r3, #0]
}
20000f7e:	46c0      	nop			; (mov r8, r8)
20000f80:	46bd      	mov	sp, r7
20000f82:	bd80      	pop	{r7, pc}
20000f84:	20003164 	andcs	r3, r0, r4, ror #2

20000f88 <systick_Init>:
void systick_Init(void)
{
20000f88:	b580      	push	{r7, lr}
20000f8a:	b082      	sub	sp, #8
20000f8c:	af00      	add	r7, sp, #0
	// Initiera SysTick.
	*((void (**)(void))0x2001C03C) = SysTick_Handler;
20000f8e:	4b06      	ldr	r3, [pc, #24]	; (20000fa8 <systick_Init+0x20>)
20000f90:	4a06      	ldr	r2, [pc, #24]	; (20000fac <systick_Init+0x24>)
20000f92:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	returnCode = SysTick_Config(168000000 / 1000); // Genererar ett SysTick-avbrott varje ms.
20000f94:	4b06      	ldr	r3, [pc, #24]	; (20000fb0 <systick_Init+0x28>)
20000f96:	0018      	movs	r0, r3
20000f98:	f7ff f86a 	bl	20000070 <SysTick_Config>
20000f9c:	0003      	movs	r3, r0
20000f9e:	607b      	str	r3, [r7, #4]

	if (returnCode != 0)
	{   // Om inte SysTick_Config lyckas...
		//typ reboot? bootloops är alltid kul
	}
}
20000fa0:	46c0      	nop			; (mov r8, r8)
20000fa2:	46bd      	mov	sp, r7
20000fa4:	b002      	add	sp, #8
20000fa6:	bd80      	pop	{r7, pc}
20000fa8:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000fac:	20000f71 	andcs	r0, r0, r1, ror pc
20000fb0:	00029040 	andeq	r9, r2, r0, asr #32

20000fb4 <delay>:
void delay (int mili){
20000fb4:	b580      	push	{r7, lr}
20000fb6:	b084      	sub	sp, #16
20000fb8:	af00      	add	r7, sp, #0
20000fba:	6078      	str	r0, [r7, #4]
		int time = msTicks + mili;
20000fbc:	4b07      	ldr	r3, [pc, #28]	; (20000fdc <delay+0x28>)
20000fbe:	681a      	ldr	r2, [r3, #0]
20000fc0:	687b      	ldr	r3, [r7, #4]
20000fc2:	18d3      	adds	r3, r2, r3
20000fc4:	60fb      	str	r3, [r7, #12]
		while(time > msTicks);
20000fc6:	46c0      	nop			; (mov r8, r8)
20000fc8:	68fa      	ldr	r2, [r7, #12]
20000fca:	4b04      	ldr	r3, [pc, #16]	; (20000fdc <delay+0x28>)
20000fcc:	681b      	ldr	r3, [r3, #0]
20000fce:	429a      	cmp	r2, r3
20000fd0:	d8fa      	bhi.n	20000fc8 <delay+0x14>
	}
20000fd2:	46c0      	nop			; (mov r8, r8)
20000fd4:	46bd      	mov	sp, r7
20000fd6:	b004      	add	sp, #16
20000fd8:	bd80      	pop	{r7, pc}
20000fda:	46c0      	nop			; (mov r8, r8)
20000fdc:	20003164 	andcs	r3, r0, r4, ror #2

20000fe0 <main>:

void main(void)
{
20000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
20000fe2:	46c6      	mov	lr, r8
20000fe4:	b500      	push	{lr}
20000fe6:	4cfd      	ldr	r4, [pc, #1012]	; (200013dc <main+0x3fc>)
20000fe8:	44a5      	add	sp, r4
20000fea:	af00      	add	r7, sp, #0
	init_GPIO_Ports();
20000fec:	f7ff fedc 	bl	20000da8 <init_GPIO_Ports>
	systick_Init();
20000ff0:	f7ff ffca 	bl	20000f88 <systick_Init>
	while(msTicks < 2000);
20000ff4:	46c0      	nop			; (mov r8, r8)
20000ff6:	4bfa      	ldr	r3, [pc, #1000]	; (200013e0 <main+0x400>)
20000ff8:	681b      	ldr	r3, [r3, #0]
20000ffa:	4afa      	ldr	r2, [pc, #1000]	; (200013e4 <main+0x404>)
20000ffc:	4293      	cmp	r3, r2
20000ffe:	d9fa      	bls.n	20000ff6 <main+0x16>

	door door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16, door17, door18, door19, door20, door21, door22, door23, door24 ,door25, door26, door27, door28,door29,door30,door31,door32;
	door all_doors[32] = {door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16, door17, door18, door19, door20, door21, door22, door23, door24 ,door25, door26, door27, door28,door29,door30,door31,door32};
20001000:	4bf9      	ldr	r3, [pc, #996]	; (200013e8 <main+0x408>)
20001002:	4afa      	ldr	r2, [pc, #1000]	; (200013ec <main+0x40c>)
20001004:	4694      	mov	ip, r2
20001006:	2218      	movs	r2, #24
20001008:	4690      	mov	r8, r2
2000100a:	44b8      	add	r8, r7
2000100c:	44c4      	add	ip, r8
2000100e:	4463      	add	r3, ip
20001010:	0018      	movs	r0, r3
20001012:	2380      	movs	r3, #128	; 0x80
20001014:	00db      	lsls	r3, r3, #3
20001016:	001a      	movs	r2, r3
20001018:	2100      	movs	r1, #0
2000101a:	f002 f89a 	bl	20003152 <memset>
2000101e:	4bf2      	ldr	r3, [pc, #968]	; (200013e8 <main+0x408>)
20001020:	4ef2      	ldr	r6, [pc, #968]	; (200013ec <main+0x40c>)
20001022:	2218      	movs	r2, #24
20001024:	18b9      	adds	r1, r7, r2
20001026:	198a      	adds	r2, r1, r6
20001028:	18d2      	adds	r2, r2, r3
2000102a:	23f8      	movs	r3, #248	; 0xf8
2000102c:	00db      	lsls	r3, r3, #3
2000102e:	2118      	movs	r1, #24
20001030:	468c      	mov	ip, r1
20001032:	44bc      	add	ip, r7
20001034:	4463      	add	r3, ip
20001036:	0010      	movs	r0, r2
20001038:	0019      	movs	r1, r3
2000103a:	2320      	movs	r3, #32
2000103c:	001a      	movs	r2, r3
2000103e:	f002 f87f 	bl	20003140 <memcpy>
20001042:	4be9      	ldr	r3, [pc, #932]	; (200013e8 <main+0x408>)
20001044:	4ae9      	ldr	r2, [pc, #932]	; (200013ec <main+0x40c>)
20001046:	4694      	mov	ip, r2
20001048:	2118      	movs	r1, #24
2000104a:	4688      	mov	r8, r1
2000104c:	44b8      	add	r8, r7
2000104e:	44c4      	add	ip, r8
20001050:	4463      	add	r3, ip
20001052:	22f4      	movs	r2, #244	; 0xf4
20001054:	00d2      	lsls	r2, r2, #3
20001056:	2118      	movs	r1, #24
20001058:	468c      	mov	ip, r1
2000105a:	44bc      	add	ip, r7
2000105c:	4462      	add	r2, ip
2000105e:	3320      	adds	r3, #32
20001060:	0011      	movs	r1, r2
20001062:	2220      	movs	r2, #32
20001064:	0018      	movs	r0, r3
20001066:	f002 f86b 	bl	20003140 <memcpy>
2000106a:	4bdf      	ldr	r3, [pc, #892]	; (200013e8 <main+0x408>)
2000106c:	4adf      	ldr	r2, [pc, #892]	; (200013ec <main+0x40c>)
2000106e:	4694      	mov	ip, r2
20001070:	2118      	movs	r1, #24
20001072:	4688      	mov	r8, r1
20001074:	44b8      	add	r8, r7
20001076:	44c4      	add	ip, r8
20001078:	4463      	add	r3, ip
2000107a:	22f0      	movs	r2, #240	; 0xf0
2000107c:	00d2      	lsls	r2, r2, #3
2000107e:	2118      	movs	r1, #24
20001080:	468c      	mov	ip, r1
20001082:	44bc      	add	ip, r7
20001084:	4462      	add	r2, ip
20001086:	3340      	adds	r3, #64	; 0x40
20001088:	0011      	movs	r1, r2
2000108a:	2220      	movs	r2, #32
2000108c:	0018      	movs	r0, r3
2000108e:	f002 f857 	bl	20003140 <memcpy>
20001092:	4bd5      	ldr	r3, [pc, #852]	; (200013e8 <main+0x408>)
20001094:	4ad5      	ldr	r2, [pc, #852]	; (200013ec <main+0x40c>)
20001096:	4694      	mov	ip, r2
20001098:	2118      	movs	r1, #24
2000109a:	4688      	mov	r8, r1
2000109c:	44b8      	add	r8, r7
2000109e:	44c4      	add	ip, r8
200010a0:	4463      	add	r3, ip
200010a2:	22ec      	movs	r2, #236	; 0xec
200010a4:	00d2      	lsls	r2, r2, #3
200010a6:	2118      	movs	r1, #24
200010a8:	468c      	mov	ip, r1
200010aa:	44bc      	add	ip, r7
200010ac:	4462      	add	r2, ip
200010ae:	3360      	adds	r3, #96	; 0x60
200010b0:	0011      	movs	r1, r2
200010b2:	2220      	movs	r2, #32
200010b4:	0018      	movs	r0, r3
200010b6:	f002 f843 	bl	20003140 <memcpy>
200010ba:	4bcb      	ldr	r3, [pc, #812]	; (200013e8 <main+0x408>)
200010bc:	4acb      	ldr	r2, [pc, #812]	; (200013ec <main+0x40c>)
200010be:	4694      	mov	ip, r2
200010c0:	2118      	movs	r1, #24
200010c2:	4688      	mov	r8, r1
200010c4:	44b8      	add	r8, r7
200010c6:	44c4      	add	ip, r8
200010c8:	4463      	add	r3, ip
200010ca:	22e8      	movs	r2, #232	; 0xe8
200010cc:	00d2      	lsls	r2, r2, #3
200010ce:	2118      	movs	r1, #24
200010d0:	468c      	mov	ip, r1
200010d2:	44bc      	add	ip, r7
200010d4:	4462      	add	r2, ip
200010d6:	3380      	adds	r3, #128	; 0x80
200010d8:	0011      	movs	r1, r2
200010da:	2220      	movs	r2, #32
200010dc:	0018      	movs	r0, r3
200010de:	f002 f82f 	bl	20003140 <memcpy>
200010e2:	4bc1      	ldr	r3, [pc, #772]	; (200013e8 <main+0x408>)
200010e4:	4ac1      	ldr	r2, [pc, #772]	; (200013ec <main+0x40c>)
200010e6:	4694      	mov	ip, r2
200010e8:	2118      	movs	r1, #24
200010ea:	4688      	mov	r8, r1
200010ec:	44b8      	add	r8, r7
200010ee:	44c4      	add	ip, r8
200010f0:	4463      	add	r3, ip
200010f2:	22a0      	movs	r2, #160	; 0xa0
200010f4:	21e4      	movs	r1, #228	; 0xe4
200010f6:	00c9      	lsls	r1, r1, #3
200010f8:	2018      	movs	r0, #24
200010fa:	4684      	mov	ip, r0
200010fc:	44bc      	add	ip, r7
200010fe:	4461      	add	r1, ip
20001100:	189b      	adds	r3, r3, r2
20001102:	2220      	movs	r2, #32
20001104:	0018      	movs	r0, r3
20001106:	f002 f81b 	bl	20003140 <memcpy>
2000110a:	4bb7      	ldr	r3, [pc, #732]	; (200013e8 <main+0x408>)
2000110c:	4ab7      	ldr	r2, [pc, #732]	; (200013ec <main+0x40c>)
2000110e:	4694      	mov	ip, r2
20001110:	2118      	movs	r1, #24
20001112:	4688      	mov	r8, r1
20001114:	44b8      	add	r8, r7
20001116:	44c4      	add	ip, r8
20001118:	4463      	add	r3, ip
2000111a:	22c0      	movs	r2, #192	; 0xc0
2000111c:	49b4      	ldr	r1, [pc, #720]	; (200013f0 <main+0x410>)
2000111e:	48b3      	ldr	r0, [pc, #716]	; (200013ec <main+0x40c>)
20001120:	4684      	mov	ip, r0
20001122:	2018      	movs	r0, #24
20001124:	4680      	mov	r8, r0
20001126:	44b8      	add	r8, r7
20001128:	44c4      	add	ip, r8
2000112a:	4461      	add	r1, ip
2000112c:	189b      	adds	r3, r3, r2
2000112e:	2220      	movs	r2, #32
20001130:	0018      	movs	r0, r3
20001132:	f002 f805 	bl	20003140 <memcpy>
20001136:	4bac      	ldr	r3, [pc, #688]	; (200013e8 <main+0x408>)
20001138:	4aac      	ldr	r2, [pc, #688]	; (200013ec <main+0x40c>)
2000113a:	4694      	mov	ip, r2
2000113c:	2118      	movs	r1, #24
2000113e:	4688      	mov	r8, r1
20001140:	44b8      	add	r8, r7
20001142:	44c4      	add	ip, r8
20001144:	4463      	add	r3, ip
20001146:	22e0      	movs	r2, #224	; 0xe0
20001148:	49aa      	ldr	r1, [pc, #680]	; (200013f4 <main+0x414>)
2000114a:	48a8      	ldr	r0, [pc, #672]	; (200013ec <main+0x40c>)
2000114c:	4684      	mov	ip, r0
2000114e:	2018      	movs	r0, #24
20001150:	4680      	mov	r8, r0
20001152:	44b8      	add	r8, r7
20001154:	44c4      	add	ip, r8
20001156:	4461      	add	r1, ip
20001158:	189b      	adds	r3, r3, r2
2000115a:	2220      	movs	r2, #32
2000115c:	0018      	movs	r0, r3
2000115e:	f001 ffef 	bl	20003140 <memcpy>
20001162:	4ba1      	ldr	r3, [pc, #644]	; (200013e8 <main+0x408>)
20001164:	2218      	movs	r2, #24
20001166:	18b9      	adds	r1, r7, r2
20001168:	198a      	adds	r2, r1, r6
2000116a:	18d2      	adds	r2, r2, r3
2000116c:	2380      	movs	r3, #128	; 0x80
2000116e:	005b      	lsls	r3, r3, #1
20001170:	49a1      	ldr	r1, [pc, #644]	; (200013f8 <main+0x418>)
20001172:	489e      	ldr	r0, [pc, #632]	; (200013ec <main+0x40c>)
20001174:	4684      	mov	ip, r0
20001176:	2018      	movs	r0, #24
20001178:	4680      	mov	r8, r0
2000117a:	44b8      	add	r8, r7
2000117c:	44c4      	add	ip, r8
2000117e:	4461      	add	r1, ip
20001180:	18d3      	adds	r3, r2, r3
20001182:	2220      	movs	r2, #32
20001184:	0018      	movs	r0, r3
20001186:	f001 ffdb 	bl	20003140 <memcpy>
2000118a:	4b97      	ldr	r3, [pc, #604]	; (200013e8 <main+0x408>)
2000118c:	2218      	movs	r2, #24
2000118e:	18b9      	adds	r1, r7, r2
20001190:	198a      	adds	r2, r1, r6
20001192:	18d2      	adds	r2, r2, r3
20001194:	2390      	movs	r3, #144	; 0x90
20001196:	005b      	lsls	r3, r3, #1
20001198:	4998      	ldr	r1, [pc, #608]	; (200013fc <main+0x41c>)
2000119a:	4894      	ldr	r0, [pc, #592]	; (200013ec <main+0x40c>)
2000119c:	4684      	mov	ip, r0
2000119e:	2018      	movs	r0, #24
200011a0:	4680      	mov	r8, r0
200011a2:	44b8      	add	r8, r7
200011a4:	44c4      	add	ip, r8
200011a6:	4461      	add	r1, ip
200011a8:	18d3      	adds	r3, r2, r3
200011aa:	2220      	movs	r2, #32
200011ac:	0018      	movs	r0, r3
200011ae:	f001 ffc7 	bl	20003140 <memcpy>
200011b2:	4b8d      	ldr	r3, [pc, #564]	; (200013e8 <main+0x408>)
200011b4:	2218      	movs	r2, #24
200011b6:	18b9      	adds	r1, r7, r2
200011b8:	198a      	adds	r2, r1, r6
200011ba:	18d2      	adds	r2, r2, r3
200011bc:	23a0      	movs	r3, #160	; 0xa0
200011be:	005b      	lsls	r3, r3, #1
200011c0:	498f      	ldr	r1, [pc, #572]	; (20001400 <main+0x420>)
200011c2:	488a      	ldr	r0, [pc, #552]	; (200013ec <main+0x40c>)
200011c4:	4684      	mov	ip, r0
200011c6:	2018      	movs	r0, #24
200011c8:	4680      	mov	r8, r0
200011ca:	44b8      	add	r8, r7
200011cc:	44c4      	add	ip, r8
200011ce:	4461      	add	r1, ip
200011d0:	18d3      	adds	r3, r2, r3
200011d2:	2220      	movs	r2, #32
200011d4:	0018      	movs	r0, r3
200011d6:	f001 ffb3 	bl	20003140 <memcpy>
200011da:	4b83      	ldr	r3, [pc, #524]	; (200013e8 <main+0x408>)
200011dc:	2218      	movs	r2, #24
200011de:	18b9      	adds	r1, r7, r2
200011e0:	198a      	adds	r2, r1, r6
200011e2:	18d2      	adds	r2, r2, r3
200011e4:	23b0      	movs	r3, #176	; 0xb0
200011e6:	005b      	lsls	r3, r3, #1
200011e8:	4986      	ldr	r1, [pc, #536]	; (20001404 <main+0x424>)
200011ea:	4880      	ldr	r0, [pc, #512]	; (200013ec <main+0x40c>)
200011ec:	4684      	mov	ip, r0
200011ee:	2018      	movs	r0, #24
200011f0:	4680      	mov	r8, r0
200011f2:	44b8      	add	r8, r7
200011f4:	44c4      	add	ip, r8
200011f6:	4461      	add	r1, ip
200011f8:	18d3      	adds	r3, r2, r3
200011fa:	2220      	movs	r2, #32
200011fc:	0018      	movs	r0, r3
200011fe:	f001 ff9f 	bl	20003140 <memcpy>
20001202:	4b79      	ldr	r3, [pc, #484]	; (200013e8 <main+0x408>)
20001204:	2218      	movs	r2, #24
20001206:	18b9      	adds	r1, r7, r2
20001208:	198a      	adds	r2, r1, r6
2000120a:	18d2      	adds	r2, r2, r3
2000120c:	23c0      	movs	r3, #192	; 0xc0
2000120e:	005b      	lsls	r3, r3, #1
20001210:	497d      	ldr	r1, [pc, #500]	; (20001408 <main+0x428>)
20001212:	4876      	ldr	r0, [pc, #472]	; (200013ec <main+0x40c>)
20001214:	4684      	mov	ip, r0
20001216:	2018      	movs	r0, #24
20001218:	4680      	mov	r8, r0
2000121a:	44b8      	add	r8, r7
2000121c:	44c4      	add	ip, r8
2000121e:	4461      	add	r1, ip
20001220:	18d3      	adds	r3, r2, r3
20001222:	2220      	movs	r2, #32
20001224:	0018      	movs	r0, r3
20001226:	f001 ff8b 	bl	20003140 <memcpy>
2000122a:	4b6f      	ldr	r3, [pc, #444]	; (200013e8 <main+0x408>)
2000122c:	2218      	movs	r2, #24
2000122e:	18b9      	adds	r1, r7, r2
20001230:	198a      	adds	r2, r1, r6
20001232:	18d2      	adds	r2, r2, r3
20001234:	23d0      	movs	r3, #208	; 0xd0
20001236:	005b      	lsls	r3, r3, #1
20001238:	4974      	ldr	r1, [pc, #464]	; (2000140c <main+0x42c>)
2000123a:	486c      	ldr	r0, [pc, #432]	; (200013ec <main+0x40c>)
2000123c:	4684      	mov	ip, r0
2000123e:	2018      	movs	r0, #24
20001240:	4680      	mov	r8, r0
20001242:	44b8      	add	r8, r7
20001244:	44c4      	add	ip, r8
20001246:	4461      	add	r1, ip
20001248:	18d3      	adds	r3, r2, r3
2000124a:	2220      	movs	r2, #32
2000124c:	0018      	movs	r0, r3
2000124e:	f001 ff77 	bl	20003140 <memcpy>
20001252:	4b65      	ldr	r3, [pc, #404]	; (200013e8 <main+0x408>)
20001254:	2218      	movs	r2, #24
20001256:	18b9      	adds	r1, r7, r2
20001258:	198a      	adds	r2, r1, r6
2000125a:	18d2      	adds	r2, r2, r3
2000125c:	23e0      	movs	r3, #224	; 0xe0
2000125e:	005b      	lsls	r3, r3, #1
20001260:	496b      	ldr	r1, [pc, #428]	; (20001410 <main+0x430>)
20001262:	4862      	ldr	r0, [pc, #392]	; (200013ec <main+0x40c>)
20001264:	4684      	mov	ip, r0
20001266:	2018      	movs	r0, #24
20001268:	4680      	mov	r8, r0
2000126a:	44b8      	add	r8, r7
2000126c:	44c4      	add	ip, r8
2000126e:	4461      	add	r1, ip
20001270:	18d3      	adds	r3, r2, r3
20001272:	2220      	movs	r2, #32
20001274:	0018      	movs	r0, r3
20001276:	f001 ff63 	bl	20003140 <memcpy>
2000127a:	4b5b      	ldr	r3, [pc, #364]	; (200013e8 <main+0x408>)
2000127c:	2218      	movs	r2, #24
2000127e:	18b9      	adds	r1, r7, r2
20001280:	198a      	adds	r2, r1, r6
20001282:	18d2      	adds	r2, r2, r3
20001284:	23f0      	movs	r3, #240	; 0xf0
20001286:	005b      	lsls	r3, r3, #1
20001288:	4962      	ldr	r1, [pc, #392]	; (20001414 <main+0x434>)
2000128a:	4858      	ldr	r0, [pc, #352]	; (200013ec <main+0x40c>)
2000128c:	4684      	mov	ip, r0
2000128e:	2018      	movs	r0, #24
20001290:	4680      	mov	r8, r0
20001292:	44b8      	add	r8, r7
20001294:	44c4      	add	ip, r8
20001296:	4461      	add	r1, ip
20001298:	18d3      	adds	r3, r2, r3
2000129a:	2220      	movs	r2, #32
2000129c:	0018      	movs	r0, r3
2000129e:	f001 ff4f 	bl	20003140 <memcpy>
200012a2:	4b51      	ldr	r3, [pc, #324]	; (200013e8 <main+0x408>)
200012a4:	2218      	movs	r2, #24
200012a6:	18b9      	adds	r1, r7, r2
200012a8:	198a      	adds	r2, r1, r6
200012aa:	18d2      	adds	r2, r2, r3
200012ac:	2380      	movs	r3, #128	; 0x80
200012ae:	009b      	lsls	r3, r3, #2
200012b0:	4959      	ldr	r1, [pc, #356]	; (20001418 <main+0x438>)
200012b2:	484e      	ldr	r0, [pc, #312]	; (200013ec <main+0x40c>)
200012b4:	4684      	mov	ip, r0
200012b6:	2018      	movs	r0, #24
200012b8:	4680      	mov	r8, r0
200012ba:	44b8      	add	r8, r7
200012bc:	44c4      	add	ip, r8
200012be:	4461      	add	r1, ip
200012c0:	18d3      	adds	r3, r2, r3
200012c2:	2220      	movs	r2, #32
200012c4:	0018      	movs	r0, r3
200012c6:	f001 ff3b 	bl	20003140 <memcpy>
200012ca:	4b47      	ldr	r3, [pc, #284]	; (200013e8 <main+0x408>)
200012cc:	2218      	movs	r2, #24
200012ce:	18b9      	adds	r1, r7, r2
200012d0:	198a      	adds	r2, r1, r6
200012d2:	18d2      	adds	r2, r2, r3
200012d4:	2388      	movs	r3, #136	; 0x88
200012d6:	009b      	lsls	r3, r3, #2
200012d8:	4950      	ldr	r1, [pc, #320]	; (2000141c <main+0x43c>)
200012da:	4844      	ldr	r0, [pc, #272]	; (200013ec <main+0x40c>)
200012dc:	4684      	mov	ip, r0
200012de:	2018      	movs	r0, #24
200012e0:	4680      	mov	r8, r0
200012e2:	44b8      	add	r8, r7
200012e4:	44c4      	add	ip, r8
200012e6:	4461      	add	r1, ip
200012e8:	18d3      	adds	r3, r2, r3
200012ea:	2220      	movs	r2, #32
200012ec:	0018      	movs	r0, r3
200012ee:	f001 ff27 	bl	20003140 <memcpy>
200012f2:	4b3d      	ldr	r3, [pc, #244]	; (200013e8 <main+0x408>)
200012f4:	2218      	movs	r2, #24
200012f6:	18b9      	adds	r1, r7, r2
200012f8:	198a      	adds	r2, r1, r6
200012fa:	18d2      	adds	r2, r2, r3
200012fc:	2390      	movs	r3, #144	; 0x90
200012fe:	009b      	lsls	r3, r3, #2
20001300:	4947      	ldr	r1, [pc, #284]	; (20001420 <main+0x440>)
20001302:	483a      	ldr	r0, [pc, #232]	; (200013ec <main+0x40c>)
20001304:	4684      	mov	ip, r0
20001306:	2018      	movs	r0, #24
20001308:	4680      	mov	r8, r0
2000130a:	44b8      	add	r8, r7
2000130c:	44c4      	add	ip, r8
2000130e:	4461      	add	r1, ip
20001310:	18d3      	adds	r3, r2, r3
20001312:	2220      	movs	r2, #32
20001314:	0018      	movs	r0, r3
20001316:	f001 ff13 	bl	20003140 <memcpy>
2000131a:	4b33      	ldr	r3, [pc, #204]	; (200013e8 <main+0x408>)
2000131c:	2218      	movs	r2, #24
2000131e:	18b9      	adds	r1, r7, r2
20001320:	198a      	adds	r2, r1, r6
20001322:	18d2      	adds	r2, r2, r3
20001324:	2398      	movs	r3, #152	; 0x98
20001326:	009b      	lsls	r3, r3, #2
20001328:	493e      	ldr	r1, [pc, #248]	; (20001424 <main+0x444>)
2000132a:	4830      	ldr	r0, [pc, #192]	; (200013ec <main+0x40c>)
2000132c:	4684      	mov	ip, r0
2000132e:	2018      	movs	r0, #24
20001330:	4680      	mov	r8, r0
20001332:	44b8      	add	r8, r7
20001334:	44c4      	add	ip, r8
20001336:	4461      	add	r1, ip
20001338:	18d3      	adds	r3, r2, r3
2000133a:	2220      	movs	r2, #32
2000133c:	0018      	movs	r0, r3
2000133e:	f001 feff 	bl	20003140 <memcpy>
20001342:	4b29      	ldr	r3, [pc, #164]	; (200013e8 <main+0x408>)
20001344:	2218      	movs	r2, #24
20001346:	18b9      	adds	r1, r7, r2
20001348:	198a      	adds	r2, r1, r6
2000134a:	18d2      	adds	r2, r2, r3
2000134c:	23a0      	movs	r3, #160	; 0xa0
2000134e:	009b      	lsls	r3, r3, #2
20001350:	4935      	ldr	r1, [pc, #212]	; (20001428 <main+0x448>)
20001352:	4826      	ldr	r0, [pc, #152]	; (200013ec <main+0x40c>)
20001354:	4684      	mov	ip, r0
20001356:	2018      	movs	r0, #24
20001358:	4680      	mov	r8, r0
2000135a:	44b8      	add	r8, r7
2000135c:	44c4      	add	ip, r8
2000135e:	4461      	add	r1, ip
20001360:	18d3      	adds	r3, r2, r3
20001362:	2220      	movs	r2, #32
20001364:	0018      	movs	r0, r3
20001366:	f001 feeb 	bl	20003140 <memcpy>
2000136a:	4b1f      	ldr	r3, [pc, #124]	; (200013e8 <main+0x408>)
2000136c:	2218      	movs	r2, #24
2000136e:	18b9      	adds	r1, r7, r2
20001370:	198a      	adds	r2, r1, r6
20001372:	18d2      	adds	r2, r2, r3
20001374:	23a8      	movs	r3, #168	; 0xa8
20001376:	009b      	lsls	r3, r3, #2
20001378:	492c      	ldr	r1, [pc, #176]	; (2000142c <main+0x44c>)
2000137a:	481c      	ldr	r0, [pc, #112]	; (200013ec <main+0x40c>)
2000137c:	4684      	mov	ip, r0
2000137e:	2018      	movs	r0, #24
20001380:	4680      	mov	r8, r0
20001382:	44b8      	add	r8, r7
20001384:	44c4      	add	ip, r8
20001386:	4461      	add	r1, ip
20001388:	18d3      	adds	r3, r2, r3
2000138a:	2220      	movs	r2, #32
2000138c:	0018      	movs	r0, r3
2000138e:	f001 fed7 	bl	20003140 <memcpy>
20001392:	4b15      	ldr	r3, [pc, #84]	; (200013e8 <main+0x408>)
20001394:	2218      	movs	r2, #24
20001396:	18b9      	adds	r1, r7, r2
20001398:	198a      	adds	r2, r1, r6
2000139a:	18d2      	adds	r2, r2, r3
2000139c:	23b0      	movs	r3, #176	; 0xb0
2000139e:	009b      	lsls	r3, r3, #2
200013a0:	4923      	ldr	r1, [pc, #140]	; (20001430 <main+0x450>)
200013a2:	4812      	ldr	r0, [pc, #72]	; (200013ec <main+0x40c>)
200013a4:	4684      	mov	ip, r0
200013a6:	2018      	movs	r0, #24
200013a8:	4680      	mov	r8, r0
200013aa:	44b8      	add	r8, r7
200013ac:	44c4      	add	ip, r8
200013ae:	4461      	add	r1, ip
200013b0:	18d3      	adds	r3, r2, r3
200013b2:	2220      	movs	r2, #32
200013b4:	0018      	movs	r0, r3
200013b6:	f001 fec3 	bl	20003140 <memcpy>
200013ba:	4b0b      	ldr	r3, [pc, #44]	; (200013e8 <main+0x408>)
200013bc:	2218      	movs	r2, #24
200013be:	18b9      	adds	r1, r7, r2
200013c0:	198a      	adds	r2, r1, r6
200013c2:	18d2      	adds	r2, r2, r3
200013c4:	23b8      	movs	r3, #184	; 0xb8
200013c6:	009b      	lsls	r3, r3, #2
200013c8:	491a      	ldr	r1, [pc, #104]	; (20001434 <main+0x454>)
200013ca:	4808      	ldr	r0, [pc, #32]	; (200013ec <main+0x40c>)
200013cc:	4684      	mov	ip, r0
200013ce:	2018      	movs	r0, #24
200013d0:	4680      	mov	r8, r0
200013d2:	44b8      	add	r8, r7
200013d4:	44c4      	add	ip, r8
200013d6:	4461      	add	r1, ip
200013d8:	18d3      	adds	r3, r2, r3
200013da:	e02d      	b.n	20001438 <main+0x458>
200013dc:	fffff7d0 			; <UNDEFINED> instruction: 0xfffff7d0
200013e0:	20003164 	andcs	r3, r0, r4, ror #2
200013e4:	000007cf 	andeq	r0, r0, pc, asr #15
200013e8:	fffff7e8 			; <UNDEFINED> instruction: 0xfffff7e8
200013ec:	00000818 	andeq	r0, r0, r8, lsl r8
200013f0:	fffffee8 			; <UNDEFINED> instruction: 0xfffffee8
200013f4:	fffffec8 			; <UNDEFINED> instruction: 0xfffffec8
200013f8:	fffffea8 			; <UNDEFINED> instruction: 0xfffffea8
200013fc:	fffffe88 			; <UNDEFINED> instruction: 0xfffffe88
20001400:	fffffe68 			; <UNDEFINED> instruction: 0xfffffe68
20001404:	fffffe48 			; <UNDEFINED> instruction: 0xfffffe48
20001408:	fffffe28 			; <UNDEFINED> instruction: 0xfffffe28
2000140c:	fffffe08 			; <UNDEFINED> instruction: 0xfffffe08
20001410:	fffffde8 			; <UNDEFINED> instruction: 0xfffffde8
20001414:	fffffdc8 			; <UNDEFINED> instruction: 0xfffffdc8
20001418:	fffffda8 			; <UNDEFINED> instruction: 0xfffffda8
2000141c:	fffffd88 			; <UNDEFINED> instruction: 0xfffffd88
20001420:	fffffd68 			; <UNDEFINED> instruction: 0xfffffd68
20001424:	fffffd48 			; <UNDEFINED> instruction: 0xfffffd48
20001428:	fffffd28 			; <UNDEFINED> instruction: 0xfffffd28
2000142c:	fffffd08 			; <UNDEFINED> instruction: 0xfffffd08
20001430:	fffffce8 			; <UNDEFINED> instruction: 0xfffffce8
20001434:	fffffcc8 			; <UNDEFINED> instruction: 0xfffffcc8
20001438:	2220      	movs	r2, #32
2000143a:	0018      	movs	r0, r3
2000143c:	f001 fe80 	bl	20003140 <memcpy>
20001440:	4ba2      	ldr	r3, [pc, #648]	; (200016cc <main+0x6ec>)
20001442:	2218      	movs	r2, #24
20001444:	18b9      	adds	r1, r7, r2
20001446:	198a      	adds	r2, r1, r6
20001448:	18d2      	adds	r2, r2, r3
2000144a:	23c0      	movs	r3, #192	; 0xc0
2000144c:	009b      	lsls	r3, r3, #2
2000144e:	49a0      	ldr	r1, [pc, #640]	; (200016d0 <main+0x6f0>)
20001450:	48a0      	ldr	r0, [pc, #640]	; (200016d4 <main+0x6f4>)
20001452:	4684      	mov	ip, r0
20001454:	2018      	movs	r0, #24
20001456:	4680      	mov	r8, r0
20001458:	44b8      	add	r8, r7
2000145a:	44c4      	add	ip, r8
2000145c:	4461      	add	r1, ip
2000145e:	18d3      	adds	r3, r2, r3
20001460:	2220      	movs	r2, #32
20001462:	0018      	movs	r0, r3
20001464:	f001 fe6c 	bl	20003140 <memcpy>
20001468:	4b98      	ldr	r3, [pc, #608]	; (200016cc <main+0x6ec>)
2000146a:	2218      	movs	r2, #24
2000146c:	18b9      	adds	r1, r7, r2
2000146e:	198a      	adds	r2, r1, r6
20001470:	18d2      	adds	r2, r2, r3
20001472:	23c8      	movs	r3, #200	; 0xc8
20001474:	009b      	lsls	r3, r3, #2
20001476:	4998      	ldr	r1, [pc, #608]	; (200016d8 <main+0x6f8>)
20001478:	4896      	ldr	r0, [pc, #600]	; (200016d4 <main+0x6f4>)
2000147a:	4684      	mov	ip, r0
2000147c:	2018      	movs	r0, #24
2000147e:	4680      	mov	r8, r0
20001480:	44b8      	add	r8, r7
20001482:	44c4      	add	ip, r8
20001484:	4461      	add	r1, ip
20001486:	18d3      	adds	r3, r2, r3
20001488:	2220      	movs	r2, #32
2000148a:	0018      	movs	r0, r3
2000148c:	f001 fe58 	bl	20003140 <memcpy>
20001490:	4b8e      	ldr	r3, [pc, #568]	; (200016cc <main+0x6ec>)
20001492:	2218      	movs	r2, #24
20001494:	18b9      	adds	r1, r7, r2
20001496:	198a      	adds	r2, r1, r6
20001498:	18d2      	adds	r2, r2, r3
2000149a:	23d0      	movs	r3, #208	; 0xd0
2000149c:	009b      	lsls	r3, r3, #2
2000149e:	498f      	ldr	r1, [pc, #572]	; (200016dc <main+0x6fc>)
200014a0:	488c      	ldr	r0, [pc, #560]	; (200016d4 <main+0x6f4>)
200014a2:	4684      	mov	ip, r0
200014a4:	2018      	movs	r0, #24
200014a6:	4680      	mov	r8, r0
200014a8:	44b8      	add	r8, r7
200014aa:	44c4      	add	ip, r8
200014ac:	4461      	add	r1, ip
200014ae:	18d3      	adds	r3, r2, r3
200014b0:	2220      	movs	r2, #32
200014b2:	0018      	movs	r0, r3
200014b4:	f001 fe44 	bl	20003140 <memcpy>
200014b8:	4b84      	ldr	r3, [pc, #528]	; (200016cc <main+0x6ec>)
200014ba:	2218      	movs	r2, #24
200014bc:	18b9      	adds	r1, r7, r2
200014be:	198a      	adds	r2, r1, r6
200014c0:	18d2      	adds	r2, r2, r3
200014c2:	23d8      	movs	r3, #216	; 0xd8
200014c4:	009b      	lsls	r3, r3, #2
200014c6:	4986      	ldr	r1, [pc, #536]	; (200016e0 <main+0x700>)
200014c8:	4882      	ldr	r0, [pc, #520]	; (200016d4 <main+0x6f4>)
200014ca:	4684      	mov	ip, r0
200014cc:	2018      	movs	r0, #24
200014ce:	4680      	mov	r8, r0
200014d0:	44b8      	add	r8, r7
200014d2:	44c4      	add	ip, r8
200014d4:	4461      	add	r1, ip
200014d6:	18d3      	adds	r3, r2, r3
200014d8:	2220      	movs	r2, #32
200014da:	0018      	movs	r0, r3
200014dc:	f001 fe30 	bl	20003140 <memcpy>
200014e0:	4b7a      	ldr	r3, [pc, #488]	; (200016cc <main+0x6ec>)
200014e2:	2218      	movs	r2, #24
200014e4:	18b9      	adds	r1, r7, r2
200014e6:	198a      	adds	r2, r1, r6
200014e8:	18d2      	adds	r2, r2, r3
200014ea:	23e0      	movs	r3, #224	; 0xe0
200014ec:	009b      	lsls	r3, r3, #2
200014ee:	497d      	ldr	r1, [pc, #500]	; (200016e4 <main+0x704>)
200014f0:	4878      	ldr	r0, [pc, #480]	; (200016d4 <main+0x6f4>)
200014f2:	4684      	mov	ip, r0
200014f4:	2018      	movs	r0, #24
200014f6:	4680      	mov	r8, r0
200014f8:	44b8      	add	r8, r7
200014fa:	44c4      	add	ip, r8
200014fc:	4461      	add	r1, ip
200014fe:	18d3      	adds	r3, r2, r3
20001500:	2220      	movs	r2, #32
20001502:	0018      	movs	r0, r3
20001504:	f001 fe1c 	bl	20003140 <memcpy>
20001508:	4b70      	ldr	r3, [pc, #448]	; (200016cc <main+0x6ec>)
2000150a:	2218      	movs	r2, #24
2000150c:	18b9      	adds	r1, r7, r2
2000150e:	198a      	adds	r2, r1, r6
20001510:	18d2      	adds	r2, r2, r3
20001512:	23e8      	movs	r3, #232	; 0xe8
20001514:	009b      	lsls	r3, r3, #2
20001516:	4974      	ldr	r1, [pc, #464]	; (200016e8 <main+0x708>)
20001518:	486e      	ldr	r0, [pc, #440]	; (200016d4 <main+0x6f4>)
2000151a:	4684      	mov	ip, r0
2000151c:	2018      	movs	r0, #24
2000151e:	4680      	mov	r8, r0
20001520:	44b8      	add	r8, r7
20001522:	44c4      	add	ip, r8
20001524:	4461      	add	r1, ip
20001526:	18d3      	adds	r3, r2, r3
20001528:	2220      	movs	r2, #32
2000152a:	0018      	movs	r0, r3
2000152c:	f001 fe08 	bl	20003140 <memcpy>
20001530:	4b66      	ldr	r3, [pc, #408]	; (200016cc <main+0x6ec>)
20001532:	2218      	movs	r2, #24
20001534:	18ba      	adds	r2, r7, r2
20001536:	1992      	adds	r2, r2, r6
20001538:	18d2      	adds	r2, r2, r3
2000153a:	23f0      	movs	r3, #240	; 0xf0
2000153c:	009b      	lsls	r3, r3, #2
2000153e:	496b      	ldr	r1, [pc, #428]	; (200016ec <main+0x70c>)
20001540:	4864      	ldr	r0, [pc, #400]	; (200016d4 <main+0x6f4>)
20001542:	4684      	mov	ip, r0
20001544:	2018      	movs	r0, #24
20001546:	4680      	mov	r8, r0
20001548:	44b8      	add	r8, r7
2000154a:	44c4      	add	ip, r8
2000154c:	4461      	add	r1, ip
2000154e:	18d3      	adds	r3, r2, r3
20001550:	2220      	movs	r2, #32
20001552:	0018      	movs	r0, r3
20001554:	f001 fdf4 	bl	20003140 <memcpy>

	int amountOfActiveDoors = 0;
20001558:	2300      	movs	r3, #0
2000155a:	4a65      	ldr	r2, [pc, #404]	; (200016f0 <main+0x710>)
2000155c:	2118      	movs	r1, #24
2000155e:	468c      	mov	ip, r1
20001560:	44bc      	add	ip, r7
20001562:	4462      	add	r2, ip
20001564:	6013      	str	r3, [r2, #0]
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20001566:	2300      	movs	r3, #0
20001568:	2281      	movs	r2, #129	; 0x81
2000156a:	0112      	lsls	r2, r2, #4
2000156c:	2118      	movs	r1, #24
2000156e:	468c      	mov	ip, r1
20001570:	44bc      	add	ip, r7
20001572:	4462      	add	r2, ip
20001574:	6013      	str	r3, [r2, #0]
20001576:	e049      	b.n	2000160c <main+0x62c>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20001578:	2300      	movs	r3, #0
2000157a:	4a5e      	ldr	r2, [pc, #376]	; (200016f4 <main+0x714>)
2000157c:	2118      	movs	r1, #24
2000157e:	468c      	mov	ip, r1
20001580:	44bc      	add	ip, r7
20001582:	4462      	add	r2, ip
20001584:	6013      	str	r3, [r2, #0]
20001586:	e02d      	b.n	200015e4 <main+0x604>
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
20001588:	4b5b      	ldr	r3, [pc, #364]	; (200016f8 <main+0x718>)
2000158a:	2281      	movs	r2, #129	; 0x81
2000158c:	0112      	lsls	r2, r2, #4
2000158e:	2118      	movs	r1, #24
20001590:	468c      	mov	ip, r1
20001592:	44bc      	add	ip, r7
20001594:	4462      	add	r2, ip
20001596:	6812      	ldr	r2, [r2, #0]
20001598:	0092      	lsls	r2, r2, #2
2000159a:	58d0      	ldr	r0, [r2, r3]
2000159c:	4b57      	ldr	r3, [pc, #348]	; (200016fc <main+0x71c>)
2000159e:	4a55      	ldr	r2, [pc, #340]	; (200016f4 <main+0x714>)
200015a0:	2118      	movs	r1, #24
200015a2:	468c      	mov	ip, r1
200015a4:	44bc      	add	ip, r7
200015a6:	4462      	add	r2, ip
200015a8:	6812      	ldr	r2, [r2, #0]
200015aa:	0052      	lsls	r2, r2, #1
200015ac:	5ad3      	ldrh	r3, [r2, r3]
200015ae:	0019      	movs	r1, r3
200015b0:	f000 fdbd 	bl	2000212e <GPIO_ReadInputDataBit>
200015b4:	1e03      	subs	r3, r0, #0
200015b6:	d10a      	bne.n	200015ce <main+0x5ee>
				amountOfActiveDoors++;
200015b8:	4a4d      	ldr	r2, [pc, #308]	; (200016f0 <main+0x710>)
200015ba:	2318      	movs	r3, #24
200015bc:	18fb      	adds	r3, r7, r3
200015be:	189b      	adds	r3, r3, r2
200015c0:	681b      	ldr	r3, [r3, #0]
200015c2:	3301      	adds	r3, #1
200015c4:	2118      	movs	r1, #24
200015c6:	468c      	mov	ip, r1
200015c8:	44bc      	add	ip, r7
200015ca:	4462      	add	r2, ip
200015cc:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
200015ce:	4a49      	ldr	r2, [pc, #292]	; (200016f4 <main+0x714>)
200015d0:	2318      	movs	r3, #24
200015d2:	18fb      	adds	r3, r7, r3
200015d4:	189b      	adds	r3, r3, r2
200015d6:	681b      	ldr	r3, [r3, #0]
200015d8:	3302      	adds	r3, #2
200015da:	2118      	movs	r1, #24
200015dc:	468c      	mov	ip, r1
200015de:	44bc      	add	ip, r7
200015e0:	4462      	add	r2, ip
200015e2:	6013      	str	r3, [r2, #0]
200015e4:	4b43      	ldr	r3, [pc, #268]	; (200016f4 <main+0x714>)
200015e6:	2218      	movs	r2, #24
200015e8:	4694      	mov	ip, r2
200015ea:	44bc      	add	ip, r7
200015ec:	4463      	add	r3, ip
200015ee:	681b      	ldr	r3, [r3, #0]
200015f0:	2b0f      	cmp	r3, #15
200015f2:	d9c9      	bls.n	20001588 <main+0x5a8>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
200015f4:	2281      	movs	r2, #129	; 0x81
200015f6:	0112      	lsls	r2, r2, #4
200015f8:	2318      	movs	r3, #24
200015fa:	18fb      	adds	r3, r7, r3
200015fc:	189b      	adds	r3, r3, r2
200015fe:	681b      	ldr	r3, [r3, #0]
20001600:	3301      	adds	r3, #1
20001602:	2118      	movs	r1, #24
20001604:	468c      	mov	ip, r1
20001606:	44bc      	add	ip, r7
20001608:	4462      	add	r2, ip
2000160a:	6013      	str	r3, [r2, #0]
2000160c:	2381      	movs	r3, #129	; 0x81
2000160e:	011b      	lsls	r3, r3, #4
20001610:	2218      	movs	r2, #24
20001612:	4694      	mov	ip, r2
20001614:	44bc      	add	ip, r7
20001616:	4463      	add	r3, ip
20001618:	681b      	ldr	r3, [r3, #0]
2000161a:	2b03      	cmp	r3, #3
2000161c:	d9ac      	bls.n	20001578 <main+0x598>
			}
		}
	}
	door active_doors[amountOfActiveDoors];
2000161e:	4b34      	ldr	r3, [pc, #208]	; (200016f0 <main+0x710>)
20001620:	2218      	movs	r2, #24
20001622:	4694      	mov	ip, r2
20001624:	44bc      	add	ip, r7
20001626:	4463      	add	r3, ip
20001628:	681e      	ldr	r6, [r3, #0]
2000162a:	1e73      	subs	r3, r6, #1
2000162c:	4a34      	ldr	r2, [pc, #208]	; (20001700 <main+0x720>)
2000162e:	2118      	movs	r1, #24
20001630:	468c      	mov	ip, r1
20001632:	44bc      	add	ip, r7
20001634:	4462      	add	r2, ip
20001636:	6013      	str	r3, [r2, #0]
20001638:	0033      	movs	r3, r6
2000163a:	60bb      	str	r3, [r7, #8]
2000163c:	2300      	movs	r3, #0
2000163e:	60fb      	str	r3, [r7, #12]
20001640:	68b9      	ldr	r1, [r7, #8]
20001642:	68fa      	ldr	r2, [r7, #12]
20001644:	000b      	movs	r3, r1
20001646:	0e1b      	lsrs	r3, r3, #24
20001648:	0010      	movs	r0, r2
2000164a:	0200      	lsls	r0, r0, #8
2000164c:	6178      	str	r0, [r7, #20]
2000164e:	6978      	ldr	r0, [r7, #20]
20001650:	4318      	orrs	r0, r3
20001652:	6178      	str	r0, [r7, #20]
20001654:	000b      	movs	r3, r1
20001656:	021b      	lsls	r3, r3, #8
20001658:	613b      	str	r3, [r7, #16]
2000165a:	0033      	movs	r3, r6
2000165c:	603b      	str	r3, [r7, #0]
2000165e:	2300      	movs	r3, #0
20001660:	607b      	str	r3, [r7, #4]
20001662:	6839      	ldr	r1, [r7, #0]
20001664:	687a      	ldr	r2, [r7, #4]
20001666:	000b      	movs	r3, r1
20001668:	0e1b      	lsrs	r3, r3, #24
2000166a:	0010      	movs	r0, r2
2000166c:	0205      	lsls	r5, r0, #8
2000166e:	431d      	orrs	r5, r3
20001670:	000b      	movs	r3, r1
20001672:	021c      	lsls	r4, r3, #8
20001674:	0033      	movs	r3, r6
20001676:	015b      	lsls	r3, r3, #5
20001678:	3303      	adds	r3, #3
2000167a:	3307      	adds	r3, #7
2000167c:	08db      	lsrs	r3, r3, #3
2000167e:	00db      	lsls	r3, r3, #3
20001680:	466a      	mov	r2, sp
20001682:	1ad3      	subs	r3, r2, r3
20001684:	469d      	mov	sp, r3
20001686:	466b      	mov	r3, sp
20001688:	3303      	adds	r3, #3
2000168a:	089b      	lsrs	r3, r3, #2
2000168c:	009b      	lsls	r3, r3, #2
2000168e:	22fc      	movs	r2, #252	; 0xfc
20001690:	00d2      	lsls	r2, r2, #3
20001692:	2118      	movs	r1, #24
20001694:	468c      	mov	ip, r1
20001696:	44bc      	add	ip, r7
20001698:	4462      	add	r2, ip
2000169a:	6013      	str	r3, [r2, #0]
	int counter = 0;
2000169c:	2300      	movs	r3, #0
2000169e:	4a19      	ldr	r2, [pc, #100]	; (20001704 <main+0x724>)
200016a0:	2118      	movs	r1, #24
200016a2:	468c      	mov	ip, r1
200016a4:	44bc      	add	ip, r7
200016a6:	4462      	add	r2, ip
200016a8:	6013      	str	r3, [r2, #0]
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
200016aa:	2300      	movs	r3, #0
200016ac:	4a16      	ldr	r2, [pc, #88]	; (20001708 <main+0x728>)
200016ae:	2118      	movs	r1, #24
200016b0:	468c      	mov	ip, r1
200016b2:	44bc      	add	ip, r7
200016b4:	4462      	add	r2, ip
200016b6:	6013      	str	r3, [r2, #0]
200016b8:	e0f0      	b.n	2000189c <main+0x8bc>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
200016ba:	2300      	movs	r3, #0
200016bc:	2280      	movs	r2, #128	; 0x80
200016be:	0112      	lsls	r2, r2, #4
200016c0:	2118      	movs	r1, #24
200016c2:	468c      	mov	ip, r1
200016c4:	44bc      	add	ip, r7
200016c6:	4462      	add	r2, ip
200016c8:	6013      	str	r3, [r2, #0]
200016ca:	e0d2      	b.n	20001872 <main+0x892>
200016cc:	fffff7e8 			; <UNDEFINED> instruction: 0xfffff7e8
200016d0:	fffffca8 			; <UNDEFINED> instruction: 0xfffffca8
200016d4:	00000818 	andeq	r0, r0, r8, lsl r8
200016d8:	fffffc88 			; <UNDEFINED> instruction: 0xfffffc88
200016dc:	fffffc68 			; <UNDEFINED> instruction: 0xfffffc68
200016e0:	fffffc48 			; <UNDEFINED> instruction: 0xfffffc48
200016e4:	fffffc28 			; <UNDEFINED> instruction: 0xfffffc28
200016e8:	fffffc08 			; <UNDEFINED> instruction: 0xfffffc08
200016ec:	fffffbe8 			; <UNDEFINED> instruction: 0xfffffbe8
200016f0:	0000080c 	andeq	r0, r0, ip, lsl #16
200016f4:	00000814 	andeq	r0, r0, r4, lsl r8
200016f8:	20003198 	mulcs	r0, r8, r1
200016fc:	20003178 	andcs	r3, r0, r8, ror r1
20001700:	000007e4 	andeq	r0, r0, r4, ror #15
20001704:	00000808 	andeq	r0, r0, r8, lsl #16
20001708:	00000804 	andeq	r0, r0, r4, lsl #16
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
2000170c:	4be7      	ldr	r3, [pc, #924]	; (20001aac <main+0xacc>)
2000170e:	4ae8      	ldr	r2, [pc, #928]	; (20001ab0 <main+0xad0>)
20001710:	2118      	movs	r1, #24
20001712:	468c      	mov	ip, r1
20001714:	44bc      	add	ip, r7
20001716:	4462      	add	r2, ip
20001718:	6812      	ldr	r2, [r2, #0]
2000171a:	0092      	lsls	r2, r2, #2
2000171c:	58d0      	ldr	r0, [r2, r3]
2000171e:	4be5      	ldr	r3, [pc, #916]	; (20001ab4 <main+0xad4>)
20001720:	2280      	movs	r2, #128	; 0x80
20001722:	0112      	lsls	r2, r2, #4
20001724:	2118      	movs	r1, #24
20001726:	468c      	mov	ip, r1
20001728:	44bc      	add	ip, r7
2000172a:	4462      	add	r2, ip
2000172c:	6812      	ldr	r2, [r2, #0]
2000172e:	0052      	lsls	r2, r2, #1
20001730:	5ad3      	ldrh	r3, [r2, r3]
20001732:	0019      	movs	r1, r3
20001734:	f000 fcfb 	bl	2000212e <GPIO_ReadInputDataBit>
20001738:	1e03      	subs	r3, r0, #0
2000173a:	d000      	beq.n	2000173e <main+0x75e>
2000173c:	e08d      	b.n	2000185a <main+0x87a>
				all_doors[counter].GPIO_read = GPIO_Pins[i];
2000173e:	4bdd      	ldr	r3, [pc, #884]	; (20001ab4 <main+0xad4>)
20001740:	2580      	movs	r5, #128	; 0x80
20001742:	012d      	lsls	r5, r5, #4
20001744:	2018      	movs	r0, #24
20001746:	183a      	adds	r2, r7, r0
20001748:	1952      	adds	r2, r2, r5
2000174a:	6812      	ldr	r2, [r2, #0]
2000174c:	0052      	lsls	r2, r2, #1
2000174e:	5ad3      	ldrh	r3, [r2, r3]
20001750:	0019      	movs	r1, r3
20001752:	4bd9      	ldr	r3, [pc, #868]	; (20001ab8 <main+0xad8>)
20001754:	4cd9      	ldr	r4, [pc, #868]	; (20001abc <main+0xadc>)
20001756:	183a      	adds	r2, r7, r0
20001758:	1912      	adds	r2, r2, r4
2000175a:	18d2      	adds	r2, r2, r3
2000175c:	48d8      	ldr	r0, [pc, #864]	; (20001ac0 <main+0xae0>)
2000175e:	2318      	movs	r3, #24
20001760:	18fb      	adds	r3, r7, r3
20001762:	181b      	adds	r3, r3, r0
20001764:	681b      	ldr	r3, [r3, #0]
20001766:	015b      	lsls	r3, r3, #5
20001768:	18d3      	adds	r3, r2, r3
2000176a:	3314      	adds	r3, #20
2000176c:	6019      	str	r1, [r3, #0]
				all_doors[counter].GPIO_lamp = GPIO_Pins[i+1];
2000176e:	2318      	movs	r3, #24
20001770:	18fb      	adds	r3, r7, r3
20001772:	195b      	adds	r3, r3, r5
20001774:	681b      	ldr	r3, [r3, #0]
20001776:	1c5a      	adds	r2, r3, #1
20001778:	4bce      	ldr	r3, [pc, #824]	; (20001ab4 <main+0xad4>)
2000177a:	0052      	lsls	r2, r2, #1
2000177c:	5ad3      	ldrh	r3, [r2, r3]
2000177e:	0019      	movs	r1, r3
20001780:	4bcd      	ldr	r3, [pc, #820]	; (20001ab8 <main+0xad8>)
20001782:	0025      	movs	r5, r4
20001784:	2418      	movs	r4, #24
20001786:	193a      	adds	r2, r7, r4
20001788:	1952      	adds	r2, r2, r5
2000178a:	18d2      	adds	r2, r2, r3
2000178c:	193b      	adds	r3, r7, r4
2000178e:	181b      	adds	r3, r3, r0
20001790:	681b      	ldr	r3, [r3, #0]
20001792:	015b      	lsls	r3, r3, #5
20001794:	18d3      	adds	r3, r2, r3
20001796:	3310      	adds	r3, #16
20001798:	6019      	str	r1, [r3, #0]
				all_doors[counter].controlbits = 0;
2000179a:	4bc7      	ldr	r3, [pc, #796]	; (20001ab8 <main+0xad8>)
2000179c:	0021      	movs	r1, r4
2000179e:	187a      	adds	r2, r7, r1
200017a0:	1952      	adds	r2, r2, r5
200017a2:	18d2      	adds	r2, r2, r3
200017a4:	187b      	adds	r3, r7, r1
200017a6:	181b      	adds	r3, r3, r0
200017a8:	681b      	ldr	r3, [r3, #0]
200017aa:	015b      	lsls	r3, r3, #5
200017ac:	18d3      	adds	r3, r2, r3
200017ae:	3304      	adds	r3, #4
200017b0:	2200      	movs	r2, #0
200017b2:	601a      	str	r2, [r3, #0]
				all_doors[counter].time_larm = 0;
200017b4:	4bc0      	ldr	r3, [pc, #768]	; (20001ab8 <main+0xad8>)
200017b6:	187a      	adds	r2, r7, r1
200017b8:	1952      	adds	r2, r2, r5
200017ba:	18d2      	adds	r2, r2, r3
200017bc:	187b      	adds	r3, r7, r1
200017be:	181b      	adds	r3, r3, r0
200017c0:	681b      	ldr	r3, [r3, #0]
200017c2:	015b      	lsls	r3, r3, #5
200017c4:	18d3      	adds	r3, r2, r3
200017c6:	3308      	adds	r3, #8
200017c8:	2200      	movs	r2, #0
200017ca:	701a      	strb	r2, [r3, #0]
				all_doors[counter].time_central_larm = 2;
200017cc:	4bba      	ldr	r3, [pc, #744]	; (20001ab8 <main+0xad8>)
200017ce:	187a      	adds	r2, r7, r1
200017d0:	1952      	adds	r2, r2, r5
200017d2:	18d2      	adds	r2, r2, r3
200017d4:	187b      	adds	r3, r7, r1
200017d6:	181b      	adds	r3, r3, r0
200017d8:	681b      	ldr	r3, [r3, #0]
200017da:	015b      	lsls	r3, r3, #5
200017dc:	18d3      	adds	r3, r2, r3
200017de:	3309      	adds	r3, #9
200017e0:	2202      	movs	r2, #2
200017e2:	701a      	strb	r2, [r3, #0]
				all_doors[counter].GPIO_type = GPIO_Ports[j];
200017e4:	4bb1      	ldr	r3, [pc, #708]	; (20001aac <main+0xacc>)
200017e6:	4ab2      	ldr	r2, [pc, #712]	; (20001ab0 <main+0xad0>)
200017e8:	2418      	movs	r4, #24
200017ea:	46a4      	mov	ip, r4
200017ec:	44bc      	add	ip, r7
200017ee:	4462      	add	r2, ip
200017f0:	6812      	ldr	r2, [r2, #0]
200017f2:	0092      	lsls	r2, r2, #2
200017f4:	58d2      	ldr	r2, [r2, r3]
200017f6:	4bb0      	ldr	r3, [pc, #704]	; (20001ab8 <main+0xad8>)
200017f8:	187c      	adds	r4, r7, r1
200017fa:	1961      	adds	r1, r4, r5
200017fc:	18c9      	adds	r1, r1, r3
200017fe:	0004      	movs	r4, r0
20001800:	2318      	movs	r3, #24
20001802:	18fb      	adds	r3, r7, r3
20001804:	181b      	adds	r3, r3, r0
20001806:	681b      	ldr	r3, [r3, #0]
20001808:	015b      	lsls	r3, r3, #5
2000180a:	18cb      	adds	r3, r1, r3
2000180c:	331c      	adds	r3, #28
2000180e:	601a      	str	r2, [r3, #0]
				active_doors[counter] = all_doors[counter];
20001810:	23fc      	movs	r3, #252	; 0xfc
20001812:	00db      	lsls	r3, r3, #3
20001814:	2218      	movs	r2, #24
20001816:	4694      	mov	ip, r2
20001818:	44bc      	add	ip, r7
2000181a:	4463      	add	r3, ip
2000181c:	6818      	ldr	r0, [r3, #0]
2000181e:	2118      	movs	r1, #24
20001820:	187b      	adds	r3, r7, r1
20001822:	191b      	adds	r3, r3, r4
20001824:	681b      	ldr	r3, [r3, #0]
20001826:	015b      	lsls	r3, r3, #5
20001828:	4aa3      	ldr	r2, [pc, #652]	; (20001ab8 <main+0xad8>)
2000182a:	1879      	adds	r1, r7, r1
2000182c:	1949      	adds	r1, r1, r5
2000182e:	1889      	adds	r1, r1, r2
20001830:	2218      	movs	r2, #24
20001832:	18bd      	adds	r5, r7, r2
20001834:	192a      	adds	r2, r5, r4
20001836:	6812      	ldr	r2, [r2, #0]
20001838:	0152      	lsls	r2, r2, #5
2000183a:	18c3      	adds	r3, r0, r3
2000183c:	188a      	adds	r2, r1, r2
2000183e:	ca23      	ldmia	r2!, {r0, r1, r5}
20001840:	c323      	stmia	r3!, {r0, r1, r5}
20001842:	ca23      	ldmia	r2!, {r0, r1, r5}
20001844:	c323      	stmia	r3!, {r0, r1, r5}
20001846:	ca03      	ldmia	r2!, {r0, r1}
20001848:	c303      	stmia	r3!, {r0, r1}
				counter++;
2000184a:	2218      	movs	r2, #24
2000184c:	18bb      	adds	r3, r7, r2
2000184e:	191b      	adds	r3, r3, r4
20001850:	681b      	ldr	r3, [r3, #0]
20001852:	3301      	adds	r3, #1
20001854:	18ba      	adds	r2, r7, r2
20001856:	1912      	adds	r2, r2, r4
20001858:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
2000185a:	2280      	movs	r2, #128	; 0x80
2000185c:	0112      	lsls	r2, r2, #4
2000185e:	2318      	movs	r3, #24
20001860:	18fb      	adds	r3, r7, r3
20001862:	189b      	adds	r3, r3, r2
20001864:	681b      	ldr	r3, [r3, #0]
20001866:	3302      	adds	r3, #2
20001868:	2118      	movs	r1, #24
2000186a:	468c      	mov	ip, r1
2000186c:	44bc      	add	ip, r7
2000186e:	4462      	add	r2, ip
20001870:	6013      	str	r3, [r2, #0]
20001872:	2380      	movs	r3, #128	; 0x80
20001874:	011b      	lsls	r3, r3, #4
20001876:	2218      	movs	r2, #24
20001878:	4694      	mov	ip, r2
2000187a:	44bc      	add	ip, r7
2000187c:	4463      	add	r3, ip
2000187e:	681b      	ldr	r3, [r3, #0]
20001880:	2b0f      	cmp	r3, #15
20001882:	d800      	bhi.n	20001886 <main+0x8a6>
20001884:	e742      	b.n	2000170c <main+0x72c>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20001886:	4a8a      	ldr	r2, [pc, #552]	; (20001ab0 <main+0xad0>)
20001888:	2318      	movs	r3, #24
2000188a:	18fb      	adds	r3, r7, r3
2000188c:	189b      	adds	r3, r3, r2
2000188e:	681b      	ldr	r3, [r3, #0]
20001890:	3301      	adds	r3, #1
20001892:	2118      	movs	r1, #24
20001894:	468c      	mov	ip, r1
20001896:	44bc      	add	ip, r7
20001898:	4462      	add	r2, ip
2000189a:	6013      	str	r3, [r2, #0]
2000189c:	4b84      	ldr	r3, [pc, #528]	; (20001ab0 <main+0xad0>)
2000189e:	2218      	movs	r2, #24
200018a0:	4694      	mov	ip, r2
200018a2:	44bc      	add	ip, r7
200018a4:	4463      	add	r3, ip
200018a6:	681b      	ldr	r3, [r3, #0]
200018a8:	2b03      	cmp	r3, #3
200018aa:	d800      	bhi.n	200018ae <main+0x8ce>
200018ac:	e705      	b.n	200016ba <main+0x6da>
			}
		}
	}
	// ================================== LIGHTS =========================================================
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
200018ae:	2300      	movs	r3, #0
200018b0:	4a84      	ldr	r2, [pc, #528]	; (20001ac4 <main+0xae4>)
200018b2:	2118      	movs	r1, #24
200018b4:	468c      	mov	ip, r1
200018b6:	44bc      	add	ip, r7
200018b8:	4462      	add	r2, ip
200018ba:	6013      	str	r3, [r2, #0]
200018bc:	e027      	b.n	2000190e <main+0x92e>
	{
		GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
200018be:	24fc      	movs	r4, #252	; 0xfc
200018c0:	00e4      	lsls	r4, r4, #3
200018c2:	2518      	movs	r5, #24
200018c4:	197b      	adds	r3, r7, r5
200018c6:	191b      	adds	r3, r3, r4
200018c8:	681a      	ldr	r2, [r3, #0]
200018ca:	497e      	ldr	r1, [pc, #504]	; (20001ac4 <main+0xae4>)
200018cc:	197b      	adds	r3, r7, r5
200018ce:	185b      	adds	r3, r3, r1
200018d0:	681b      	ldr	r3, [r3, #0]
200018d2:	015b      	lsls	r3, r3, #5
200018d4:	18d3      	adds	r3, r2, r3
200018d6:	331c      	adds	r3, #28
200018d8:	6818      	ldr	r0, [r3, #0]
200018da:	197b      	adds	r3, r7, r5
200018dc:	191b      	adds	r3, r3, r4
200018de:	681a      	ldr	r2, [r3, #0]
200018e0:	000c      	movs	r4, r1
200018e2:	197b      	adds	r3, r7, r5
200018e4:	185b      	adds	r3, r3, r1
200018e6:	681b      	ldr	r3, [r3, #0]
200018e8:	015b      	lsls	r3, r3, #5
200018ea:	18d3      	adds	r3, r2, r3
200018ec:	3310      	adds	r3, #16
200018ee:	681b      	ldr	r3, [r3, #0]
200018f0:	b29b      	uxth	r3, r3
200018f2:	0019      	movs	r1, r3
200018f4:	f000 fc73 	bl	200021de <GPIO_SetBits>
		delay(100);	
200018f8:	2064      	movs	r0, #100	; 0x64
200018fa:	f7ff fb5b 	bl	20000fb4 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
200018fe:	0021      	movs	r1, r4
20001900:	197b      	adds	r3, r7, r5
20001902:	185b      	adds	r3, r3, r1
20001904:	681b      	ldr	r3, [r3, #0]
20001906:	3301      	adds	r3, #1
20001908:	197a      	adds	r2, r7, r5
2000190a:	1852      	adds	r2, r2, r1
2000190c:	6013      	str	r3, [r2, #0]
2000190e:	0033      	movs	r3, r6
20001910:	015b      	lsls	r3, r3, #5
20001912:	095a      	lsrs	r2, r3, #5
20001914:	4b6b      	ldr	r3, [pc, #428]	; (20001ac4 <main+0xae4>)
20001916:	2118      	movs	r1, #24
20001918:	468c      	mov	ip, r1
2000191a:	44bc      	add	ip, r7
2000191c:	4463      	add	r3, ip
2000191e:	681b      	ldr	r3, [r3, #0]
20001920:	429a      	cmp	r2, r3
20001922:	d8cc      	bhi.n	200018be <main+0x8de>
		
	}
	for (int i = sizeof(active_doors)/sizeof(active_doors[0]); i > 0 ; i--) //CHRISTMAST LIGHTS FTW
20001924:	0033      	movs	r3, r6
20001926:	015b      	lsls	r3, r3, #5
20001928:	095b      	lsrs	r3, r3, #5
2000192a:	22ff      	movs	r2, #255	; 0xff
2000192c:	00d2      	lsls	r2, r2, #3
2000192e:	2118      	movs	r1, #24
20001930:	468c      	mov	ip, r1
20001932:	44bc      	add	ip, r7
20001934:	4462      	add	r2, ip
20001936:	6013      	str	r3, [r2, #0]
20001938:	e028      	b.n	2000198c <main+0x9ac>
	{
		GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
2000193a:	24fc      	movs	r4, #252	; 0xfc
2000193c:	00e4      	lsls	r4, r4, #3
2000193e:	2518      	movs	r5, #24
20001940:	197b      	adds	r3, r7, r5
20001942:	191b      	adds	r3, r3, r4
20001944:	681a      	ldr	r2, [r3, #0]
20001946:	21ff      	movs	r1, #255	; 0xff
20001948:	00c9      	lsls	r1, r1, #3
2000194a:	197b      	adds	r3, r7, r5
2000194c:	185b      	adds	r3, r3, r1
2000194e:	681b      	ldr	r3, [r3, #0]
20001950:	015b      	lsls	r3, r3, #5
20001952:	18d3      	adds	r3, r2, r3
20001954:	331c      	adds	r3, #28
20001956:	6818      	ldr	r0, [r3, #0]
20001958:	197b      	adds	r3, r7, r5
2000195a:	191b      	adds	r3, r3, r4
2000195c:	681a      	ldr	r2, [r3, #0]
2000195e:	000c      	movs	r4, r1
20001960:	197b      	adds	r3, r7, r5
20001962:	185b      	adds	r3, r3, r1
20001964:	681b      	ldr	r3, [r3, #0]
20001966:	015b      	lsls	r3, r3, #5
20001968:	18d3      	adds	r3, r2, r3
2000196a:	3310      	adds	r3, #16
2000196c:	681b      	ldr	r3, [r3, #0]
2000196e:	b29b      	uxth	r3, r3
20001970:	0019      	movs	r1, r3
20001972:	f000 fc43 	bl	200021fc <GPIO_ResetBits>
		delay(100);
20001976:	2064      	movs	r0, #100	; 0x64
20001978:	f7ff fb1c 	bl	20000fb4 <delay>
	for (int i = sizeof(active_doors)/sizeof(active_doors[0]); i > 0 ; i--) //CHRISTMAST LIGHTS FTW
2000197c:	0021      	movs	r1, r4
2000197e:	197b      	adds	r3, r7, r5
20001980:	185b      	adds	r3, r3, r1
20001982:	681b      	ldr	r3, [r3, #0]
20001984:	3b01      	subs	r3, #1
20001986:	197a      	adds	r2, r7, r5
20001988:	1852      	adds	r2, r2, r1
2000198a:	6013      	str	r3, [r2, #0]
2000198c:	23ff      	movs	r3, #255	; 0xff
2000198e:	00db      	lsls	r3, r3, #3
20001990:	2218      	movs	r2, #24
20001992:	4694      	mov	ip, r2
20001994:	44bc      	add	ip, r7
20001996:	4463      	add	r3, ip
20001998:	681b      	ldr	r3, [r3, #0]
2000199a:	2b00      	cmp	r3, #0
2000199c:	dccd      	bgt.n	2000193a <main+0x95a>
	}
	delay(100);
2000199e:	2064      	movs	r0, #100	; 0x64
200019a0:	f7ff fb08 	bl	20000fb4 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
200019a4:	2300      	movs	r3, #0
200019a6:	4a48      	ldr	r2, [pc, #288]	; (20001ac8 <main+0xae8>)
200019a8:	2118      	movs	r1, #24
200019aa:	468c      	mov	ip, r1
200019ac:	44bc      	add	ip, r7
200019ae:	4462      	add	r2, ip
200019b0:	6013      	str	r3, [r2, #0]
200019b2:	e024      	b.n	200019fe <main+0xa1e>
	{
		GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
200019b4:	24fc      	movs	r4, #252	; 0xfc
200019b6:	00e4      	lsls	r4, r4, #3
200019b8:	2518      	movs	r5, #24
200019ba:	197b      	adds	r3, r7, r5
200019bc:	191b      	adds	r3, r3, r4
200019be:	681a      	ldr	r2, [r3, #0]
200019c0:	4941      	ldr	r1, [pc, #260]	; (20001ac8 <main+0xae8>)
200019c2:	197b      	adds	r3, r7, r5
200019c4:	185b      	adds	r3, r3, r1
200019c6:	681b      	ldr	r3, [r3, #0]
200019c8:	015b      	lsls	r3, r3, #5
200019ca:	18d3      	adds	r3, r2, r3
200019cc:	331c      	adds	r3, #28
200019ce:	6818      	ldr	r0, [r3, #0]
200019d0:	197b      	adds	r3, r7, r5
200019d2:	191b      	adds	r3, r3, r4
200019d4:	681a      	ldr	r2, [r3, #0]
200019d6:	000c      	movs	r4, r1
200019d8:	197b      	adds	r3, r7, r5
200019da:	185b      	adds	r3, r3, r1
200019dc:	681b      	ldr	r3, [r3, #0]
200019de:	015b      	lsls	r3, r3, #5
200019e0:	18d3      	adds	r3, r2, r3
200019e2:	3310      	adds	r3, #16
200019e4:	681b      	ldr	r3, [r3, #0]
200019e6:	b29b      	uxth	r3, r3
200019e8:	0019      	movs	r1, r3
200019ea:	f000 fbf8 	bl	200021de <GPIO_SetBits>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
200019ee:	0021      	movs	r1, r4
200019f0:	197b      	adds	r3, r7, r5
200019f2:	185b      	adds	r3, r3, r1
200019f4:	681b      	ldr	r3, [r3, #0]
200019f6:	3301      	adds	r3, #1
200019f8:	197a      	adds	r2, r7, r5
200019fa:	1852      	adds	r2, r2, r1
200019fc:	6013      	str	r3, [r2, #0]
200019fe:	0033      	movs	r3, r6
20001a00:	015b      	lsls	r3, r3, #5
20001a02:	095a      	lsrs	r2, r3, #5
20001a04:	4b30      	ldr	r3, [pc, #192]	; (20001ac8 <main+0xae8>)
20001a06:	2118      	movs	r1, #24
20001a08:	468c      	mov	ip, r1
20001a0a:	44bc      	add	ip, r7
20001a0c:	4463      	add	r3, ip
20001a0e:	681b      	ldr	r3, [r3, #0]
20001a10:	429a      	cmp	r2, r3
20001a12:	d8cf      	bhi.n	200019b4 <main+0x9d4>
	}
	delay(3000);
20001a14:	4b2d      	ldr	r3, [pc, #180]	; (20001acc <main+0xaec>)
20001a16:	0018      	movs	r0, r3
20001a18:	f7ff facc 	bl	20000fb4 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20001a1c:	2300      	movs	r3, #0
20001a1e:	22fe      	movs	r2, #254	; 0xfe
20001a20:	00d2      	lsls	r2, r2, #3
20001a22:	2118      	movs	r1, #24
20001a24:	468c      	mov	ip, r1
20001a26:	44bc      	add	ip, r7
20001a28:	4462      	add	r2, ip
20001a2a:	6013      	str	r3, [r2, #0]
20001a2c:	e025      	b.n	20001a7a <main+0xa9a>
	{
		GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20001a2e:	24fc      	movs	r4, #252	; 0xfc
20001a30:	00e4      	lsls	r4, r4, #3
20001a32:	2518      	movs	r5, #24
20001a34:	197b      	adds	r3, r7, r5
20001a36:	191b      	adds	r3, r3, r4
20001a38:	681a      	ldr	r2, [r3, #0]
20001a3a:	21fe      	movs	r1, #254	; 0xfe
20001a3c:	00c9      	lsls	r1, r1, #3
20001a3e:	197b      	adds	r3, r7, r5
20001a40:	185b      	adds	r3, r3, r1
20001a42:	681b      	ldr	r3, [r3, #0]
20001a44:	015b      	lsls	r3, r3, #5
20001a46:	18d3      	adds	r3, r2, r3
20001a48:	331c      	adds	r3, #28
20001a4a:	6818      	ldr	r0, [r3, #0]
20001a4c:	197b      	adds	r3, r7, r5
20001a4e:	191b      	adds	r3, r3, r4
20001a50:	681a      	ldr	r2, [r3, #0]
20001a52:	000c      	movs	r4, r1
20001a54:	197b      	adds	r3, r7, r5
20001a56:	185b      	adds	r3, r3, r1
20001a58:	681b      	ldr	r3, [r3, #0]
20001a5a:	015b      	lsls	r3, r3, #5
20001a5c:	18d3      	adds	r3, r2, r3
20001a5e:	3310      	adds	r3, #16
20001a60:	681b      	ldr	r3, [r3, #0]
20001a62:	b29b      	uxth	r3, r3
20001a64:	0019      	movs	r1, r3
20001a66:	f000 fbc9 	bl	200021fc <GPIO_ResetBits>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20001a6a:	0021      	movs	r1, r4
20001a6c:	197b      	adds	r3, r7, r5
20001a6e:	185b      	adds	r3, r3, r1
20001a70:	681b      	ldr	r3, [r3, #0]
20001a72:	3301      	adds	r3, #1
20001a74:	197a      	adds	r2, r7, r5
20001a76:	1852      	adds	r2, r2, r1
20001a78:	6013      	str	r3, [r2, #0]
20001a7a:	0033      	movs	r3, r6
20001a7c:	015b      	lsls	r3, r3, #5
20001a7e:	095a      	lsrs	r2, r3, #5
20001a80:	23fe      	movs	r3, #254	; 0xfe
20001a82:	00db      	lsls	r3, r3, #3
20001a84:	2118      	movs	r1, #24
20001a86:	468c      	mov	ip, r1
20001a88:	44bc      	add	ip, r7
20001a8a:	4463      	add	r3, ip
20001a8c:	681b      	ldr	r3, [r3, #0]
20001a8e:	429a      	cmp	r2, r3
20001a90:	d8cd      	bhi.n	20001a2e <main+0xa4e>
	}
	

	GPIO_SetBits(GPIOB, GPIO_Pin_2);
20001a92:	4b0f      	ldr	r3, [pc, #60]	; (20001ad0 <main+0xaf0>)
20001a94:	2104      	movs	r1, #4
20001a96:	0018      	movs	r0, r3
20001a98:	f000 fba1 	bl	200021de <GPIO_SetBits>
	//active_doors[2].controlbits |= 4;
	while (1)
	{
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20001a9c:	2300      	movs	r3, #0
20001a9e:	4a0d      	ldr	r2, [pc, #52]	; (20001ad4 <main+0xaf4>)
20001aa0:	2118      	movs	r1, #24
20001aa2:	468c      	mov	ip, r1
20001aa4:	44bc      	add	ip, r7
20001aa6:	4462      	add	r2, ip
20001aa8:	6013      	str	r3, [r2, #0]
20001aaa:	e1aa      	b.n	20001e02 <main+0xe22>
20001aac:	20003198 	mulcs	r0, r8, r1
20001ab0:	00000804 	andeq	r0, r0, r4, lsl #16
20001ab4:	20003178 	andcs	r3, r0, r8, ror r1
20001ab8:	fffff7e8 			; <UNDEFINED> instruction: 0xfffff7e8
20001abc:	00000818 	andeq	r0, r0, r8, lsl r8
20001ac0:	00000808 	andeq	r0, r0, r8, lsl #16
20001ac4:	000007fc 	strdeq	r0, [r0], -ip
20001ac8:	000007f4 	strdeq	r0, [r0], -r4
20001acc:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
20001ad0:	40020400 	andmi	r0, r2, r0, lsl #8
20001ad4:	000007ec 	andeq	r0, r0, ip, ror #15
		{
			if (!(active_doors[i].controlbits & 4))
20001ad8:	23fc      	movs	r3, #252	; 0xfc
20001ada:	00db      	lsls	r3, r3, #3
20001adc:	2218      	movs	r2, #24
20001ade:	4694      	mov	ip, r2
20001ae0:	44bc      	add	ip, r7
20001ae2:	4463      	add	r3, ip
20001ae4:	681a      	ldr	r2, [r3, #0]
20001ae6:	4bcd      	ldr	r3, [pc, #820]	; (20001e1c <main+0xe3c>)
20001ae8:	2118      	movs	r1, #24
20001aea:	468c      	mov	ip, r1
20001aec:	44bc      	add	ip, r7
20001aee:	4463      	add	r3, ip
20001af0:	681b      	ldr	r3, [r3, #0]
20001af2:	015b      	lsls	r3, r3, #5
20001af4:	18d3      	adds	r3, r2, r3
20001af6:	3304      	adds	r3, #4
20001af8:	681b      	ldr	r3, [r3, #0]
20001afa:	2204      	movs	r2, #4
20001afc:	4013      	ands	r3, r2
20001afe:	d000      	beq.n	20001b02 <main+0xb22>
20001b00:	e174      	b.n	20001dec <main+0xe0c>
				{
				if (!GPIO_ReadInputDataBit(active_doors[i].GPIO_type, active_doors[i].GPIO_read)){ //GPIO pinnen är noll ifall dörren är stängd därför !
20001b02:	21fc      	movs	r1, #252	; 0xfc
20001b04:	00c9      	lsls	r1, r1, #3
20001b06:	2518      	movs	r5, #24
20001b08:	197b      	adds	r3, r7, r5
20001b0a:	185b      	adds	r3, r3, r1
20001b0c:	681a      	ldr	r2, [r3, #0]
20001b0e:	4cc3      	ldr	r4, [pc, #780]	; (20001e1c <main+0xe3c>)
20001b10:	197b      	adds	r3, r7, r5
20001b12:	191b      	adds	r3, r3, r4
20001b14:	681b      	ldr	r3, [r3, #0]
20001b16:	015b      	lsls	r3, r3, #5
20001b18:	18d3      	adds	r3, r2, r3
20001b1a:	331c      	adds	r3, #28
20001b1c:	6818      	ldr	r0, [r3, #0]
20001b1e:	197b      	adds	r3, r7, r5
20001b20:	185b      	adds	r3, r3, r1
20001b22:	681a      	ldr	r2, [r3, #0]
20001b24:	197b      	adds	r3, r7, r5
20001b26:	191b      	adds	r3, r3, r4
20001b28:	681b      	ldr	r3, [r3, #0]
20001b2a:	015b      	lsls	r3, r3, #5
20001b2c:	18d3      	adds	r3, r2, r3
20001b2e:	3314      	adds	r3, #20
20001b30:	681b      	ldr	r3, [r3, #0]
20001b32:	b29b      	uxth	r3, r3
20001b34:	0019      	movs	r1, r3
20001b36:	f000 fafa 	bl	2000212e <GPIO_ReadInputDataBit>
20001b3a:	1e03      	subs	r3, r0, #0
20001b3c:	d11a      	bne.n	20001b74 <main+0xb94>
					active_doors[i].controlbits &= 0xFFFC; //Nollställer kontrollbiten för ifall en dörr är öppen och spam kontrollbiten för 
20001b3e:	21fc      	movs	r1, #252	; 0xfc
20001b40:	00c9      	lsls	r1, r1, #3
20001b42:	2418      	movs	r4, #24
20001b44:	193b      	adds	r3, r7, r4
20001b46:	185b      	adds	r3, r3, r1
20001b48:	681a      	ldr	r2, [r3, #0]
20001b4a:	48b4      	ldr	r0, [pc, #720]	; (20001e1c <main+0xe3c>)
20001b4c:	193b      	adds	r3, r7, r4
20001b4e:	181b      	adds	r3, r3, r0
20001b50:	681b      	ldr	r3, [r3, #0]
20001b52:	015b      	lsls	r3, r3, #5
20001b54:	18d3      	adds	r3, r2, r3
20001b56:	3304      	adds	r3, #4
20001b58:	681b      	ldr	r3, [r3, #0]
20001b5a:	4ab1      	ldr	r2, [pc, #708]	; (20001e20 <main+0xe40>)
20001b5c:	401a      	ands	r2, r3
20001b5e:	193b      	adds	r3, r7, r4
20001b60:	185b      	adds	r3, r3, r1
20001b62:	6819      	ldr	r1, [r3, #0]
20001b64:	193b      	adds	r3, r7, r4
20001b66:	181b      	adds	r3, r3, r0
20001b68:	681b      	ldr	r3, [r3, #0]
20001b6a:	015b      	lsls	r3, r3, #5
20001b6c:	18cb      	adds	r3, r1, r3
20001b6e:	3304      	adds	r3, #4
20001b70:	601a      	str	r2, [r3, #0]
20001b72:	e040      	b.n	20001bf6 <main+0xc16>
					//att skicka medelande till centralenheten, när den detekteras som stängd
					
				}
				else{
					if (!active_doors[i].controlbits & 1) // Kollar så att dörren inte larmar sen innan så larmtick inte uppdateras hela tiden
20001b74:	23fc      	movs	r3, #252	; 0xfc
20001b76:	00db      	lsls	r3, r3, #3
20001b78:	2218      	movs	r2, #24
20001b7a:	4694      	mov	ip, r2
20001b7c:	44bc      	add	ip, r7
20001b7e:	4463      	add	r3, ip
20001b80:	681a      	ldr	r2, [r3, #0]
20001b82:	4ba6      	ldr	r3, [pc, #664]	; (20001e1c <main+0xe3c>)
20001b84:	2118      	movs	r1, #24
20001b86:	468c      	mov	ip, r1
20001b88:	44bc      	add	ip, r7
20001b8a:	4463      	add	r3, ip
20001b8c:	681b      	ldr	r3, [r3, #0]
20001b8e:	015b      	lsls	r3, r3, #5
20001b90:	18d3      	adds	r3, r2, r3
20001b92:	3304      	adds	r3, #4
20001b94:	681b      	ldr	r3, [r3, #0]
20001b96:	2b00      	cmp	r3, #0
20001b98:	d113      	bne.n	20001bc2 <main+0xbe2>
					{
						active_doors[i].larmTick = msTicks;
20001b9a:	4ba2      	ldr	r3, [pc, #648]	; (20001e24 <main+0xe44>)
20001b9c:	681b      	ldr	r3, [r3, #0]
20001b9e:	0019      	movs	r1, r3
20001ba0:	23fc      	movs	r3, #252	; 0xfc
20001ba2:	00db      	lsls	r3, r3, #3
20001ba4:	2218      	movs	r2, #24
20001ba6:	4694      	mov	ip, r2
20001ba8:	44bc      	add	ip, r7
20001baa:	4463      	add	r3, ip
20001bac:	681a      	ldr	r2, [r3, #0]
20001bae:	4b9b      	ldr	r3, [pc, #620]	; (20001e1c <main+0xe3c>)
20001bb0:	2018      	movs	r0, #24
20001bb2:	4684      	mov	ip, r0
20001bb4:	44bc      	add	ip, r7
20001bb6:	4463      	add	r3, ip
20001bb8:	681b      	ldr	r3, [r3, #0]
20001bba:	015b      	lsls	r3, r3, #5
20001bbc:	18d3      	adds	r3, r2, r3
20001bbe:	3318      	adds	r3, #24
20001bc0:	6019      	str	r1, [r3, #0]
					}
					active_doors[i].controlbits |= 1; // sätter dörrens larm kontrollbit till 1.
20001bc2:	21fc      	movs	r1, #252	; 0xfc
20001bc4:	00c9      	lsls	r1, r1, #3
20001bc6:	2418      	movs	r4, #24
20001bc8:	193b      	adds	r3, r7, r4
20001bca:	185b      	adds	r3, r3, r1
20001bcc:	681a      	ldr	r2, [r3, #0]
20001bce:	4893      	ldr	r0, [pc, #588]	; (20001e1c <main+0xe3c>)
20001bd0:	193b      	adds	r3, r7, r4
20001bd2:	181b      	adds	r3, r3, r0
20001bd4:	681b      	ldr	r3, [r3, #0]
20001bd6:	015b      	lsls	r3, r3, #5
20001bd8:	18d3      	adds	r3, r2, r3
20001bda:	3304      	adds	r3, #4
20001bdc:	681b      	ldr	r3, [r3, #0]
20001bde:	2201      	movs	r2, #1
20001be0:	431a      	orrs	r2, r3
20001be2:	193b      	adds	r3, r7, r4
20001be4:	185b      	adds	r3, r3, r1
20001be6:	6819      	ldr	r1, [r3, #0]
20001be8:	193b      	adds	r3, r7, r4
20001bea:	181b      	adds	r3, r3, r0
20001bec:	681b      	ldr	r3, [r3, #0]
20001bee:	015b      	lsls	r3, r3, #5
20001bf0:	18cb      	adds	r3, r1, r3
20001bf2:	3304      	adds	r3, #4
20001bf4:	601a      	str	r2, [r3, #0]
				}
				for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20001bf6:	2300      	movs	r3, #0
20001bf8:	22fd      	movs	r2, #253	; 0xfd
20001bfa:	00d2      	lsls	r2, r2, #3
20001bfc:	2118      	movs	r1, #24
20001bfe:	468c      	mov	ip, r1
20001c00:	44bc      	add	ip, r7
20001c02:	4462      	add	r2, ip
20001c04:	6013      	str	r3, [r2, #0]
20001c06:	e0e4      	b.n	20001dd2 <main+0xdf2>
				{
					if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_larm))
20001c08:	23fc      	movs	r3, #252	; 0xfc
20001c0a:	00db      	lsls	r3, r3, #3
20001c0c:	2218      	movs	r2, #24
20001c0e:	4694      	mov	ip, r2
20001c10:	44bc      	add	ip, r7
20001c12:	4463      	add	r3, ip
20001c14:	681a      	ldr	r2, [r3, #0]
20001c16:	23fd      	movs	r3, #253	; 0xfd
20001c18:	00db      	lsls	r3, r3, #3
20001c1a:	2118      	movs	r1, #24
20001c1c:	468c      	mov	ip, r1
20001c1e:	44bc      	add	ip, r7
20001c20:	4463      	add	r3, ip
20001c22:	681b      	ldr	r3, [r3, #0]
20001c24:	015b      	lsls	r3, r3, #5
20001c26:	18d3      	adds	r3, r2, r3
20001c28:	3304      	adds	r3, #4
20001c2a:	681b      	ldr	r3, [r3, #0]
20001c2c:	2201      	movs	r2, #1
20001c2e:	4013      	ands	r3, r2
20001c30:	d03f      	beq.n	20001cb2 <main+0xcd2>
20001c32:	21fc      	movs	r1, #252	; 0xfc
20001c34:	00c9      	lsls	r1, r1, #3
20001c36:	2418      	movs	r4, #24
20001c38:	193b      	adds	r3, r7, r4
20001c3a:	185b      	adds	r3, r3, r1
20001c3c:	681a      	ldr	r2, [r3, #0]
20001c3e:	20fd      	movs	r0, #253	; 0xfd
20001c40:	00c0      	lsls	r0, r0, #3
20001c42:	193b      	adds	r3, r7, r4
20001c44:	181b      	adds	r3, r3, r0
20001c46:	681b      	ldr	r3, [r3, #0]
20001c48:	015b      	lsls	r3, r3, #5
20001c4a:	18d3      	adds	r3, r2, r3
20001c4c:	3318      	adds	r3, #24
20001c4e:	681a      	ldr	r2, [r3, #0]
20001c50:	193b      	adds	r3, r7, r4
20001c52:	185b      	adds	r3, r3, r1
20001c54:	6819      	ldr	r1, [r3, #0]
20001c56:	193b      	adds	r3, r7, r4
20001c58:	181b      	adds	r3, r3, r0
20001c5a:	681b      	ldr	r3, [r3, #0]
20001c5c:	015b      	lsls	r3, r3, #5
20001c5e:	18cb      	adds	r3, r1, r3
20001c60:	3308      	adds	r3, #8
20001c62:	781b      	ldrb	r3, [r3, #0]
20001c64:	0019      	movs	r1, r3
20001c66:	4b70      	ldr	r3, [pc, #448]	; (20001e28 <main+0xe48>)
20001c68:	434b      	muls	r3, r1
20001c6a:	18d3      	adds	r3, r2, r3
20001c6c:	001a      	movs	r2, r3
20001c6e:	4b6d      	ldr	r3, [pc, #436]	; (20001e24 <main+0xe44>)
20001c70:	681b      	ldr	r3, [r3, #0]
20001c72:	429a      	cmp	r2, r3
20001c74:	d21d      	bcs.n	20001cb2 <main+0xcd2>
					{
						GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp); // tänder lampan ifall tiden för att dörren ska larma har gått
20001c76:	21fc      	movs	r1, #252	; 0xfc
20001c78:	00c9      	lsls	r1, r1, #3
20001c7a:	2518      	movs	r5, #24
20001c7c:	197b      	adds	r3, r7, r5
20001c7e:	185b      	adds	r3, r3, r1
20001c80:	681a      	ldr	r2, [r3, #0]
20001c82:	24fd      	movs	r4, #253	; 0xfd
20001c84:	00e4      	lsls	r4, r4, #3
20001c86:	197b      	adds	r3, r7, r5
20001c88:	191b      	adds	r3, r3, r4
20001c8a:	681b      	ldr	r3, [r3, #0]
20001c8c:	015b      	lsls	r3, r3, #5
20001c8e:	18d3      	adds	r3, r2, r3
20001c90:	331c      	adds	r3, #28
20001c92:	6818      	ldr	r0, [r3, #0]
20001c94:	197b      	adds	r3, r7, r5
20001c96:	185b      	adds	r3, r3, r1
20001c98:	681a      	ldr	r2, [r3, #0]
20001c9a:	197b      	adds	r3, r7, r5
20001c9c:	191b      	adds	r3, r3, r4
20001c9e:	681b      	ldr	r3, [r3, #0]
20001ca0:	015b      	lsls	r3, r3, #5
20001ca2:	18d3      	adds	r3, r2, r3
20001ca4:	3310      	adds	r3, #16
20001ca6:	681b      	ldr	r3, [r3, #0]
20001ca8:	b29b      	uxth	r3, r3
20001caa:	0019      	movs	r1, r3
20001cac:	f000 fa97 	bl	200021de <GPIO_SetBits>
20001cb0:	e01c      	b.n	20001cec <main+0xd0c>
					}
					else
					{
						GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);	// släcker lampan annars
20001cb2:	21fc      	movs	r1, #252	; 0xfc
20001cb4:	00c9      	lsls	r1, r1, #3
20001cb6:	2518      	movs	r5, #24
20001cb8:	197b      	adds	r3, r7, r5
20001cba:	185b      	adds	r3, r3, r1
20001cbc:	681a      	ldr	r2, [r3, #0]
20001cbe:	24fd      	movs	r4, #253	; 0xfd
20001cc0:	00e4      	lsls	r4, r4, #3
20001cc2:	197b      	adds	r3, r7, r5
20001cc4:	191b      	adds	r3, r3, r4
20001cc6:	681b      	ldr	r3, [r3, #0]
20001cc8:	015b      	lsls	r3, r3, #5
20001cca:	18d3      	adds	r3, r2, r3
20001ccc:	331c      	adds	r3, #28
20001cce:	6818      	ldr	r0, [r3, #0]
20001cd0:	197b      	adds	r3, r7, r5
20001cd2:	185b      	adds	r3, r3, r1
20001cd4:	681a      	ldr	r2, [r3, #0]
20001cd6:	197b      	adds	r3, r7, r5
20001cd8:	191b      	adds	r3, r3, r4
20001cda:	681b      	ldr	r3, [r3, #0]
20001cdc:	015b      	lsls	r3, r3, #5
20001cde:	18d3      	adds	r3, r2, r3
20001ce0:	3310      	adds	r3, #16
20001ce2:	681b      	ldr	r3, [r3, #0]
20001ce4:	b29b      	uxth	r3, r3
20001ce6:	0019      	movs	r1, r3
20001ce8:	f000 fa88 	bl	200021fc <GPIO_ResetBits>
					}
					if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_central_larm) && active_doors[i].controlbits & 2)
20001cec:	23fc      	movs	r3, #252	; 0xfc
20001cee:	00db      	lsls	r3, r3, #3
20001cf0:	2218      	movs	r2, #24
20001cf2:	4694      	mov	ip, r2
20001cf4:	44bc      	add	ip, r7
20001cf6:	4463      	add	r3, ip
20001cf8:	681a      	ldr	r2, [r3, #0]
20001cfa:	23fd      	movs	r3, #253	; 0xfd
20001cfc:	00db      	lsls	r3, r3, #3
20001cfe:	2118      	movs	r1, #24
20001d00:	468c      	mov	ip, r1
20001d02:	44bc      	add	ip, r7
20001d04:	4463      	add	r3, ip
20001d06:	681b      	ldr	r3, [r3, #0]
20001d08:	015b      	lsls	r3, r3, #5
20001d0a:	18d3      	adds	r3, r2, r3
20001d0c:	3304      	adds	r3, #4
20001d0e:	681b      	ldr	r3, [r3, #0]
20001d10:	2201      	movs	r2, #1
20001d12:	4013      	ands	r3, r2
20001d14:	d051      	beq.n	20001dba <main+0xdda>
20001d16:	21fc      	movs	r1, #252	; 0xfc
20001d18:	00c9      	lsls	r1, r1, #3
20001d1a:	2418      	movs	r4, #24
20001d1c:	193b      	adds	r3, r7, r4
20001d1e:	185b      	adds	r3, r3, r1
20001d20:	681a      	ldr	r2, [r3, #0]
20001d22:	20fd      	movs	r0, #253	; 0xfd
20001d24:	00c0      	lsls	r0, r0, #3
20001d26:	193b      	adds	r3, r7, r4
20001d28:	181b      	adds	r3, r3, r0
20001d2a:	681b      	ldr	r3, [r3, #0]
20001d2c:	015b      	lsls	r3, r3, #5
20001d2e:	18d3      	adds	r3, r2, r3
20001d30:	3318      	adds	r3, #24
20001d32:	681a      	ldr	r2, [r3, #0]
20001d34:	193b      	adds	r3, r7, r4
20001d36:	185b      	adds	r3, r3, r1
20001d38:	6819      	ldr	r1, [r3, #0]
20001d3a:	193b      	adds	r3, r7, r4
20001d3c:	181b      	adds	r3, r3, r0
20001d3e:	681b      	ldr	r3, [r3, #0]
20001d40:	015b      	lsls	r3, r3, #5
20001d42:	18cb      	adds	r3, r1, r3
20001d44:	3309      	adds	r3, #9
20001d46:	781b      	ldrb	r3, [r3, #0]
20001d48:	0019      	movs	r1, r3
20001d4a:	4b37      	ldr	r3, [pc, #220]	; (20001e28 <main+0xe48>)
20001d4c:	434b      	muls	r3, r1
20001d4e:	18d3      	adds	r3, r2, r3
20001d50:	001a      	movs	r2, r3
20001d52:	4b34      	ldr	r3, [pc, #208]	; (20001e24 <main+0xe44>)
20001d54:	681b      	ldr	r3, [r3, #0]
20001d56:	429a      	cmp	r2, r3
20001d58:	d22f      	bcs.n	20001dba <main+0xdda>
20001d5a:	23fc      	movs	r3, #252	; 0xfc
20001d5c:	00db      	lsls	r3, r3, #3
20001d5e:	2218      	movs	r2, #24
20001d60:	4694      	mov	ip, r2
20001d62:	44bc      	add	ip, r7
20001d64:	4463      	add	r3, ip
20001d66:	681a      	ldr	r2, [r3, #0]
20001d68:	23fd      	movs	r3, #253	; 0xfd
20001d6a:	00db      	lsls	r3, r3, #3
20001d6c:	2118      	movs	r1, #24
20001d6e:	468c      	mov	ip, r1
20001d70:	44bc      	add	ip, r7
20001d72:	4463      	add	r3, ip
20001d74:	681b      	ldr	r3, [r3, #0]
20001d76:	015b      	lsls	r3, r3, #5
20001d78:	18d3      	adds	r3, r2, r3
20001d7a:	3304      	adds	r3, #4
20001d7c:	681b      	ldr	r3, [r3, #0]
20001d7e:	2202      	movs	r2, #2
20001d80:	4013      	ands	r3, r2
20001d82:	d01a      	beq.n	20001dba <main+0xdda>
					{
						active_doors[i].controlbits |= 2;
20001d84:	21fc      	movs	r1, #252	; 0xfc
20001d86:	00c9      	lsls	r1, r1, #3
20001d88:	2418      	movs	r4, #24
20001d8a:	193b      	adds	r3, r7, r4
20001d8c:	185b      	adds	r3, r3, r1
20001d8e:	681a      	ldr	r2, [r3, #0]
20001d90:	20fd      	movs	r0, #253	; 0xfd
20001d92:	00c0      	lsls	r0, r0, #3
20001d94:	193b      	adds	r3, r7, r4
20001d96:	181b      	adds	r3, r3, r0
20001d98:	681b      	ldr	r3, [r3, #0]
20001d9a:	015b      	lsls	r3, r3, #5
20001d9c:	18d3      	adds	r3, r2, r3
20001d9e:	3304      	adds	r3, #4
20001da0:	681b      	ldr	r3, [r3, #0]
20001da2:	2202      	movs	r2, #2
20001da4:	431a      	orrs	r2, r3
20001da6:	193b      	adds	r3, r7, r4
20001da8:	185b      	adds	r3, r3, r1
20001daa:	6819      	ldr	r1, [r3, #0]
20001dac:	193b      	adds	r3, r7, r4
20001dae:	181b      	adds	r3, r3, r0
20001db0:	681b      	ldr	r3, [r3, #0]
20001db2:	015b      	lsls	r3, r3, #5
20001db4:	18cb      	adds	r3, r1, r3
20001db6:	3304      	adds	r3, #4
20001db8:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20001dba:	22fd      	movs	r2, #253	; 0xfd
20001dbc:	00d2      	lsls	r2, r2, #3
20001dbe:	2318      	movs	r3, #24
20001dc0:	18fb      	adds	r3, r7, r3
20001dc2:	189b      	adds	r3, r3, r2
20001dc4:	681b      	ldr	r3, [r3, #0]
20001dc6:	3301      	adds	r3, #1
20001dc8:	2118      	movs	r1, #24
20001dca:	468c      	mov	ip, r1
20001dcc:	44bc      	add	ip, r7
20001dce:	4462      	add	r2, ip
20001dd0:	6013      	str	r3, [r2, #0]
20001dd2:	0033      	movs	r3, r6
20001dd4:	015b      	lsls	r3, r3, #5
20001dd6:	095a      	lsrs	r2, r3, #5
20001dd8:	23fd      	movs	r3, #253	; 0xfd
20001dda:	00db      	lsls	r3, r3, #3
20001ddc:	2118      	movs	r1, #24
20001dde:	468c      	mov	ip, r1
20001de0:	44bc      	add	ip, r7
20001de2:	4463      	add	r3, ip
20001de4:	681b      	ldr	r3, [r3, #0]
20001de6:	429a      	cmp	r2, r3
20001de8:	d900      	bls.n	20001dec <main+0xe0c>
20001dea:	e70d      	b.n	20001c08 <main+0xc28>
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20001dec:	4a0b      	ldr	r2, [pc, #44]	; (20001e1c <main+0xe3c>)
20001dee:	2318      	movs	r3, #24
20001df0:	18fb      	adds	r3, r7, r3
20001df2:	189b      	adds	r3, r3, r2
20001df4:	681b      	ldr	r3, [r3, #0]
20001df6:	3301      	adds	r3, #1
20001df8:	2118      	movs	r1, #24
20001dfa:	468c      	mov	ip, r1
20001dfc:	44bc      	add	ip, r7
20001dfe:	4462      	add	r2, ip
20001e00:	6013      	str	r3, [r2, #0]
20001e02:	0033      	movs	r3, r6
20001e04:	015b      	lsls	r3, r3, #5
20001e06:	095a      	lsrs	r2, r3, #5
20001e08:	4b04      	ldr	r3, [pc, #16]	; (20001e1c <main+0xe3c>)
20001e0a:	2118      	movs	r1, #24
20001e0c:	468c      	mov	ip, r1
20001e0e:	44bc      	add	ip, r7
20001e10:	4463      	add	r3, ip
20001e12:	681b      	ldr	r3, [r3, #0]
20001e14:	429a      	cmp	r2, r3
20001e16:	d900      	bls.n	20001e1a <main+0xe3a>
20001e18:	e65e      	b.n	20001ad8 <main+0xaf8>
20001e1a:	e63f      	b.n	20001a9c <main+0xabc>
20001e1c:	000007ec 	andeq	r0, r0, ip, ror #15
20001e20:	0000fffc 	strdeq	pc, [r0], -ip
20001e24:	20003164 	andcs	r3, r0, r4, ror #2
20001e28:	00002710 	andeq	r2, r0, r0, lsl r7

20001e2c <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
20001e2c:	b580      	push	{r7, lr}
20001e2e:	b082      	sub	sp, #8
20001e30:	af00      	add	r7, sp, #0
20001e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
20001e34:	687b      	ldr	r3, [r7, #4]
20001e36:	4a4e      	ldr	r2, [pc, #312]	; (20001f70 <GPIO_DeInit+0x144>)
20001e38:	4293      	cmp	r3, r2
20001e3a:	d108      	bne.n	20001e4e <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20001e3c:	2101      	movs	r1, #1
20001e3e:	2001      	movs	r0, #1
20001e40:	f7fe fdaa 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20001e44:	2100      	movs	r1, #0
20001e46:	2001      	movs	r0, #1
20001e48:	f7fe fda6 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
20001e4c:	e08c      	b.n	20001f68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
20001e4e:	687b      	ldr	r3, [r7, #4]
20001e50:	4a48      	ldr	r2, [pc, #288]	; (20001f74 <GPIO_DeInit+0x148>)
20001e52:	4293      	cmp	r3, r2
20001e54:	d108      	bne.n	20001e68 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20001e56:	2101      	movs	r1, #1
20001e58:	2002      	movs	r0, #2
20001e5a:	f7fe fd9d 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
20001e5e:	2100      	movs	r1, #0
20001e60:	2002      	movs	r0, #2
20001e62:	f7fe fd99 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001e66:	e07f      	b.n	20001f68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20001e68:	687b      	ldr	r3, [r7, #4]
20001e6a:	4a43      	ldr	r2, [pc, #268]	; (20001f78 <GPIO_DeInit+0x14c>)
20001e6c:	4293      	cmp	r3, r2
20001e6e:	d108      	bne.n	20001e82 <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20001e70:	2101      	movs	r1, #1
20001e72:	2004      	movs	r0, #4
20001e74:	f7fe fd90 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20001e78:	2100      	movs	r1, #0
20001e7a:	2004      	movs	r0, #4
20001e7c:	f7fe fd8c 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001e80:	e072      	b.n	20001f68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
20001e82:	687b      	ldr	r3, [r7, #4]
20001e84:	4a3d      	ldr	r2, [pc, #244]	; (20001f7c <GPIO_DeInit+0x150>)
20001e86:	4293      	cmp	r3, r2
20001e88:	d108      	bne.n	20001e9c <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20001e8a:	2101      	movs	r1, #1
20001e8c:	2008      	movs	r0, #8
20001e8e:	f7fe fd83 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
20001e92:	2100      	movs	r1, #0
20001e94:	2008      	movs	r0, #8
20001e96:	f7fe fd7f 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001e9a:	e065      	b.n	20001f68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
20001e9c:	687b      	ldr	r3, [r7, #4]
20001e9e:	4a38      	ldr	r2, [pc, #224]	; (20001f80 <GPIO_DeInit+0x154>)
20001ea0:	4293      	cmp	r3, r2
20001ea2:	d108      	bne.n	20001eb6 <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20001ea4:	2101      	movs	r1, #1
20001ea6:	2010      	movs	r0, #16
20001ea8:	f7fe fd76 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20001eac:	2100      	movs	r1, #0
20001eae:	2010      	movs	r0, #16
20001eb0:	f7fe fd72 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001eb4:	e058      	b.n	20001f68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
20001eb6:	687b      	ldr	r3, [r7, #4]
20001eb8:	4a32      	ldr	r2, [pc, #200]	; (20001f84 <GPIO_DeInit+0x158>)
20001eba:	4293      	cmp	r3, r2
20001ebc:	d108      	bne.n	20001ed0 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
20001ebe:	2101      	movs	r1, #1
20001ec0:	2020      	movs	r0, #32
20001ec2:	f7fe fd69 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20001ec6:	2100      	movs	r1, #0
20001ec8:	2020      	movs	r0, #32
20001eca:	f7fe fd65 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001ece:	e04b      	b.n	20001f68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20001ed0:	687b      	ldr	r3, [r7, #4]
20001ed2:	4a2d      	ldr	r2, [pc, #180]	; (20001f88 <GPIO_DeInit+0x15c>)
20001ed4:	4293      	cmp	r3, r2
20001ed6:	d108      	bne.n	20001eea <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20001ed8:	2101      	movs	r1, #1
20001eda:	2040      	movs	r0, #64	; 0x40
20001edc:	f7fe fd5c 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20001ee0:	2100      	movs	r1, #0
20001ee2:	2040      	movs	r0, #64	; 0x40
20001ee4:	f7fe fd58 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001ee8:	e03e      	b.n	20001f68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
20001eea:	687b      	ldr	r3, [r7, #4]
20001eec:	4a27      	ldr	r2, [pc, #156]	; (20001f8c <GPIO_DeInit+0x160>)
20001eee:	4293      	cmp	r3, r2
20001ef0:	d108      	bne.n	20001f04 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
20001ef2:	2101      	movs	r1, #1
20001ef4:	2080      	movs	r0, #128	; 0x80
20001ef6:	f7fe fd4f 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
20001efa:	2100      	movs	r1, #0
20001efc:	2080      	movs	r0, #128	; 0x80
20001efe:	f7fe fd4b 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001f02:	e031      	b.n	20001f68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
20001f04:	687b      	ldr	r3, [r7, #4]
20001f06:	4a22      	ldr	r2, [pc, #136]	; (20001f90 <GPIO_DeInit+0x164>)
20001f08:	4293      	cmp	r3, r2
20001f0a:	d10c      	bne.n	20001f26 <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
20001f0c:	2380      	movs	r3, #128	; 0x80
20001f0e:	005b      	lsls	r3, r3, #1
20001f10:	2101      	movs	r1, #1
20001f12:	0018      	movs	r0, r3
20001f14:	f7fe fd40 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20001f18:	2380      	movs	r3, #128	; 0x80
20001f1a:	005b      	lsls	r3, r3, #1
20001f1c:	2100      	movs	r1, #0
20001f1e:	0018      	movs	r0, r3
20001f20:	f7fe fd3a 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001f24:	e020      	b.n	20001f68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
20001f26:	687b      	ldr	r3, [r7, #4]
20001f28:	4a1a      	ldr	r2, [pc, #104]	; (20001f94 <GPIO_DeInit+0x168>)
20001f2a:	4293      	cmp	r3, r2
20001f2c:	d10c      	bne.n	20001f48 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
20001f2e:	2380      	movs	r3, #128	; 0x80
20001f30:	009b      	lsls	r3, r3, #2
20001f32:	2101      	movs	r1, #1
20001f34:	0018      	movs	r0, r3
20001f36:	f7fe fd2f 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
20001f3a:	2380      	movs	r3, #128	; 0x80
20001f3c:	009b      	lsls	r3, r3, #2
20001f3e:	2100      	movs	r1, #0
20001f40:	0018      	movs	r0, r3
20001f42:	f7fe fd29 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001f46:	e00f      	b.n	20001f68 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20001f48:	687b      	ldr	r3, [r7, #4]
20001f4a:	4a13      	ldr	r2, [pc, #76]	; (20001f98 <GPIO_DeInit+0x16c>)
20001f4c:	4293      	cmp	r3, r2
20001f4e:	d10b      	bne.n	20001f68 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
20001f50:	2380      	movs	r3, #128	; 0x80
20001f52:	00db      	lsls	r3, r3, #3
20001f54:	2101      	movs	r1, #1
20001f56:	0018      	movs	r0, r3
20001f58:	f7fe fd1e 	bl	20000998 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20001f5c:	2380      	movs	r3, #128	; 0x80
20001f5e:	00db      	lsls	r3, r3, #3
20001f60:	2100      	movs	r1, #0
20001f62:	0018      	movs	r0, r3
20001f64:	f7fe fd18 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001f68:	46c0      	nop			; (mov r8, r8)
20001f6a:	46bd      	mov	sp, r7
20001f6c:	b002      	add	sp, #8
20001f6e:	bd80      	pop	{r7, pc}
20001f70:	40020000 	andmi	r0, r2, r0
20001f74:	40020400 	andmi	r0, r2, r0, lsl #8
20001f78:	40020800 	andmi	r0, r2, r0, lsl #16
20001f7c:	40020c00 	andmi	r0, r2, r0, lsl #24
20001f80:	40021000 	andmi	r1, r2, r0
20001f84:	40021400 	andmi	r1, r2, r0, lsl #8
20001f88:	40021800 	andmi	r1, r2, r0, lsl #16
20001f8c:	40021c00 	andmi	r1, r2, r0, lsl #24
20001f90:	40022000 	andmi	r2, r2, r0
20001f94:	40022400 	andmi	r2, r2, r0, lsl #8
20001f98:	40022800 	andmi	r2, r2, r0, lsl #16

20001f9c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
20001f9c:	b580      	push	{r7, lr}
20001f9e:	b086      	sub	sp, #24
20001fa0:	af00      	add	r7, sp, #0
20001fa2:	6078      	str	r0, [r7, #4]
20001fa4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
20001fa6:	2300      	movs	r3, #0
20001fa8:	617b      	str	r3, [r7, #20]
20001faa:	2300      	movs	r3, #0
20001fac:	613b      	str	r3, [r7, #16]
20001fae:	2300      	movs	r3, #0
20001fb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20001fb2:	2300      	movs	r3, #0
20001fb4:	617b      	str	r3, [r7, #20]
20001fb6:	e076      	b.n	200020a6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20001fb8:	2201      	movs	r2, #1
20001fba:	697b      	ldr	r3, [r7, #20]
20001fbc:	409a      	lsls	r2, r3
20001fbe:	0013      	movs	r3, r2
20001fc0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
20001fc2:	683b      	ldr	r3, [r7, #0]
20001fc4:	681a      	ldr	r2, [r3, #0]
20001fc6:	693b      	ldr	r3, [r7, #16]
20001fc8:	4013      	ands	r3, r2
20001fca:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20001fcc:	68fa      	ldr	r2, [r7, #12]
20001fce:	693b      	ldr	r3, [r7, #16]
20001fd0:	429a      	cmp	r2, r3
20001fd2:	d165      	bne.n	200020a0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
20001fd4:	687b      	ldr	r3, [r7, #4]
20001fd6:	681b      	ldr	r3, [r3, #0]
20001fd8:	697a      	ldr	r2, [r7, #20]
20001fda:	0052      	lsls	r2, r2, #1
20001fdc:	2103      	movs	r1, #3
20001fde:	4091      	lsls	r1, r2
20001fe0:	000a      	movs	r2, r1
20001fe2:	43d2      	mvns	r2, r2
20001fe4:	401a      	ands	r2, r3
20001fe6:	687b      	ldr	r3, [r7, #4]
20001fe8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
20001fea:	687b      	ldr	r3, [r7, #4]
20001fec:	681a      	ldr	r2, [r3, #0]
20001fee:	683b      	ldr	r3, [r7, #0]
20001ff0:	791b      	ldrb	r3, [r3, #4]
20001ff2:	0019      	movs	r1, r3
20001ff4:	697b      	ldr	r3, [r7, #20]
20001ff6:	005b      	lsls	r3, r3, #1
20001ff8:	4099      	lsls	r1, r3
20001ffa:	000b      	movs	r3, r1
20001ffc:	431a      	orrs	r2, r3
20001ffe:	687b      	ldr	r3, [r7, #4]
20002000:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
20002002:	683b      	ldr	r3, [r7, #0]
20002004:	791b      	ldrb	r3, [r3, #4]
20002006:	2b01      	cmp	r3, #1
20002008:	d003      	beq.n	20002012 <GPIO_Init+0x76>
2000200a:	683b      	ldr	r3, [r7, #0]
2000200c:	791b      	ldrb	r3, [r3, #4]
2000200e:	2b02      	cmp	r3, #2
20002010:	d12e      	bne.n	20002070 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
20002012:	687b      	ldr	r3, [r7, #4]
20002014:	689b      	ldr	r3, [r3, #8]
20002016:	697a      	ldr	r2, [r7, #20]
20002018:	0052      	lsls	r2, r2, #1
2000201a:	2103      	movs	r1, #3
2000201c:	4091      	lsls	r1, r2
2000201e:	000a      	movs	r2, r1
20002020:	43d2      	mvns	r2, r2
20002022:	401a      	ands	r2, r3
20002024:	687b      	ldr	r3, [r7, #4]
20002026:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
20002028:	687b      	ldr	r3, [r7, #4]
2000202a:	689a      	ldr	r2, [r3, #8]
2000202c:	683b      	ldr	r3, [r7, #0]
2000202e:	795b      	ldrb	r3, [r3, #5]
20002030:	0019      	movs	r1, r3
20002032:	697b      	ldr	r3, [r7, #20]
20002034:	005b      	lsls	r3, r3, #1
20002036:	4099      	lsls	r1, r3
20002038:	000b      	movs	r3, r1
2000203a:	431a      	orrs	r2, r3
2000203c:	687b      	ldr	r3, [r7, #4]
2000203e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
20002040:	687b      	ldr	r3, [r7, #4]
20002042:	685b      	ldr	r3, [r3, #4]
20002044:	697a      	ldr	r2, [r7, #20]
20002046:	b292      	uxth	r2, r2
20002048:	0011      	movs	r1, r2
2000204a:	2201      	movs	r2, #1
2000204c:	408a      	lsls	r2, r1
2000204e:	43d2      	mvns	r2, r2
20002050:	401a      	ands	r2, r3
20002052:	687b      	ldr	r3, [r7, #4]
20002054:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
20002056:	687b      	ldr	r3, [r7, #4]
20002058:	685b      	ldr	r3, [r3, #4]
2000205a:	683a      	ldr	r2, [r7, #0]
2000205c:	7992      	ldrb	r2, [r2, #6]
2000205e:	0011      	movs	r1, r2
20002060:	697a      	ldr	r2, [r7, #20]
20002062:	b292      	uxth	r2, r2
20002064:	4091      	lsls	r1, r2
20002066:	000a      	movs	r2, r1
20002068:	b292      	uxth	r2, r2
2000206a:	431a      	orrs	r2, r3
2000206c:	687b      	ldr	r3, [r7, #4]
2000206e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20002070:	687b      	ldr	r3, [r7, #4]
20002072:	68db      	ldr	r3, [r3, #12]
20002074:	697a      	ldr	r2, [r7, #20]
20002076:	b292      	uxth	r2, r2
20002078:	0052      	lsls	r2, r2, #1
2000207a:	2103      	movs	r1, #3
2000207c:	4091      	lsls	r1, r2
2000207e:	000a      	movs	r2, r1
20002080:	43d2      	mvns	r2, r2
20002082:	401a      	ands	r2, r3
20002084:	687b      	ldr	r3, [r7, #4]
20002086:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20002088:	687b      	ldr	r3, [r7, #4]
2000208a:	68da      	ldr	r2, [r3, #12]
2000208c:	683b      	ldr	r3, [r7, #0]
2000208e:	79db      	ldrb	r3, [r3, #7]
20002090:	0019      	movs	r1, r3
20002092:	697b      	ldr	r3, [r7, #20]
20002094:	005b      	lsls	r3, r3, #1
20002096:	4099      	lsls	r1, r3
20002098:	000b      	movs	r3, r1
2000209a:	431a      	orrs	r2, r3
2000209c:	687b      	ldr	r3, [r7, #4]
2000209e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
200020a0:	697b      	ldr	r3, [r7, #20]
200020a2:	3301      	adds	r3, #1
200020a4:	617b      	str	r3, [r7, #20]
200020a6:	697b      	ldr	r3, [r7, #20]
200020a8:	2b0f      	cmp	r3, #15
200020aa:	d985      	bls.n	20001fb8 <GPIO_Init+0x1c>
    }
  }
}
200020ac:	46c0      	nop			; (mov r8, r8)
200020ae:	46bd      	mov	sp, r7
200020b0:	b006      	add	sp, #24
200020b2:	bd80      	pop	{r7, pc}

200020b4 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
200020b4:	b580      	push	{r7, lr}
200020b6:	b082      	sub	sp, #8
200020b8:	af00      	add	r7, sp, #0
200020ba:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
200020bc:	687b      	ldr	r3, [r7, #4]
200020be:	4a09      	ldr	r2, [pc, #36]	; (200020e4 <GPIO_StructInit+0x30>)
200020c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
200020c2:	687b      	ldr	r3, [r7, #4]
200020c4:	2200      	movs	r2, #0
200020c6:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
200020c8:	687b      	ldr	r3, [r7, #4]
200020ca:	2200      	movs	r2, #0
200020cc:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
200020ce:	687b      	ldr	r3, [r7, #4]
200020d0:	2200      	movs	r2, #0
200020d2:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
200020d4:	687b      	ldr	r3, [r7, #4]
200020d6:	2200      	movs	r2, #0
200020d8:	71da      	strb	r2, [r3, #7]
}
200020da:	46c0      	nop			; (mov r8, r8)
200020dc:	46bd      	mov	sp, r7
200020de:	b002      	add	sp, #8
200020e0:	bd80      	pop	{r7, pc}
200020e2:	46c0      	nop			; (mov r8, r8)
200020e4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

200020e8 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200020e8:	b580      	push	{r7, lr}
200020ea:	b084      	sub	sp, #16
200020ec:	af00      	add	r7, sp, #0
200020ee:	6078      	str	r0, [r7, #4]
200020f0:	000a      	movs	r2, r1
200020f2:	1cbb      	adds	r3, r7, #2
200020f4:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
200020f6:	2380      	movs	r3, #128	; 0x80
200020f8:	025b      	lsls	r3, r3, #9
200020fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
200020fc:	1cbb      	adds	r3, r7, #2
200020fe:	881a      	ldrh	r2, [r3, #0]
20002100:	68fb      	ldr	r3, [r7, #12]
20002102:	4313      	orrs	r3, r2
20002104:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20002106:	68fa      	ldr	r2, [r7, #12]
20002108:	687b      	ldr	r3, [r7, #4]
2000210a:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
2000210c:	1cbb      	adds	r3, r7, #2
2000210e:	881a      	ldrh	r2, [r3, #0]
20002110:	687b      	ldr	r3, [r7, #4]
20002112:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20002114:	68fa      	ldr	r2, [r7, #12]
20002116:	687b      	ldr	r3, [r7, #4]
20002118:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
2000211a:	687b      	ldr	r3, [r7, #4]
2000211c:	69db      	ldr	r3, [r3, #28]
2000211e:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20002120:	687b      	ldr	r3, [r7, #4]
20002122:	69db      	ldr	r3, [r3, #28]
20002124:	60fb      	str	r3, [r7, #12]
}
20002126:	46c0      	nop			; (mov r8, r8)
20002128:	46bd      	mov	sp, r7
2000212a:	b004      	add	sp, #16
2000212c:	bd80      	pop	{r7, pc}

2000212e <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000212e:	b580      	push	{r7, lr}
20002130:	b084      	sub	sp, #16
20002132:	af00      	add	r7, sp, #0
20002134:	6078      	str	r0, [r7, #4]
20002136:	000a      	movs	r2, r1
20002138:	1cbb      	adds	r3, r7, #2
2000213a:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
2000213c:	230f      	movs	r3, #15
2000213e:	18fb      	adds	r3, r7, r3
20002140:	2200      	movs	r2, #0
20002142:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20002144:	687b      	ldr	r3, [r7, #4]
20002146:	691b      	ldr	r3, [r3, #16]
20002148:	1cba      	adds	r2, r7, #2
2000214a:	8812      	ldrh	r2, [r2, #0]
2000214c:	4013      	ands	r3, r2
2000214e:	d004      	beq.n	2000215a <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20002150:	230f      	movs	r3, #15
20002152:	18fb      	adds	r3, r7, r3
20002154:	2201      	movs	r2, #1
20002156:	701a      	strb	r2, [r3, #0]
20002158:	e003      	b.n	20002162 <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
2000215a:	230f      	movs	r3, #15
2000215c:	18fb      	adds	r3, r7, r3
2000215e:	2200      	movs	r2, #0
20002160:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20002162:	230f      	movs	r3, #15
20002164:	18fb      	adds	r3, r7, r3
20002166:	781b      	ldrb	r3, [r3, #0]
}
20002168:	0018      	movs	r0, r3
2000216a:	46bd      	mov	sp, r7
2000216c:	b004      	add	sp, #16
2000216e:	bd80      	pop	{r7, pc}

20002170 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20002170:	b580      	push	{r7, lr}
20002172:	b082      	sub	sp, #8
20002174:	af00      	add	r7, sp, #0
20002176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20002178:	687b      	ldr	r3, [r7, #4]
2000217a:	691b      	ldr	r3, [r3, #16]
2000217c:	b29b      	uxth	r3, r3
}
2000217e:	0018      	movs	r0, r3
20002180:	46bd      	mov	sp, r7
20002182:	b002      	add	sp, #8
20002184:	bd80      	pop	{r7, pc}

20002186 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20002186:	b580      	push	{r7, lr}
20002188:	b084      	sub	sp, #16
2000218a:	af00      	add	r7, sp, #0
2000218c:	6078      	str	r0, [r7, #4]
2000218e:	000a      	movs	r2, r1
20002190:	1cbb      	adds	r3, r7, #2
20002192:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20002194:	230f      	movs	r3, #15
20002196:	18fb      	adds	r3, r7, r3
20002198:	2200      	movs	r2, #0
2000219a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
2000219c:	687b      	ldr	r3, [r7, #4]
2000219e:	695b      	ldr	r3, [r3, #20]
200021a0:	1cba      	adds	r2, r7, #2
200021a2:	8812      	ldrh	r2, [r2, #0]
200021a4:	4013      	ands	r3, r2
200021a6:	d004      	beq.n	200021b2 <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
200021a8:	230f      	movs	r3, #15
200021aa:	18fb      	adds	r3, r7, r3
200021ac:	2201      	movs	r2, #1
200021ae:	701a      	strb	r2, [r3, #0]
200021b0:	e003      	b.n	200021ba <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
200021b2:	230f      	movs	r3, #15
200021b4:	18fb      	adds	r3, r7, r3
200021b6:	2200      	movs	r2, #0
200021b8:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200021ba:	230f      	movs	r3, #15
200021bc:	18fb      	adds	r3, r7, r3
200021be:	781b      	ldrb	r3, [r3, #0]
}
200021c0:	0018      	movs	r0, r3
200021c2:	46bd      	mov	sp, r7
200021c4:	b004      	add	sp, #16
200021c6:	bd80      	pop	{r7, pc}

200021c8 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
200021c8:	b580      	push	{r7, lr}
200021ca:	b082      	sub	sp, #8
200021cc:	af00      	add	r7, sp, #0
200021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
200021d0:	687b      	ldr	r3, [r7, #4]
200021d2:	695b      	ldr	r3, [r3, #20]
200021d4:	b29b      	uxth	r3, r3
}
200021d6:	0018      	movs	r0, r3
200021d8:	46bd      	mov	sp, r7
200021da:	b002      	add	sp, #8
200021dc:	bd80      	pop	{r7, pc}

200021de <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200021de:	b580      	push	{r7, lr}
200021e0:	b082      	sub	sp, #8
200021e2:	af00      	add	r7, sp, #0
200021e4:	6078      	str	r0, [r7, #4]
200021e6:	000a      	movs	r2, r1
200021e8:	1cbb      	adds	r3, r7, #2
200021ea:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
200021ec:	687b      	ldr	r3, [r7, #4]
200021ee:	1cba      	adds	r2, r7, #2
200021f0:	8812      	ldrh	r2, [r2, #0]
200021f2:	831a      	strh	r2, [r3, #24]
}
200021f4:	46c0      	nop			; (mov r8, r8)
200021f6:	46bd      	mov	sp, r7
200021f8:	b002      	add	sp, #8
200021fa:	bd80      	pop	{r7, pc}

200021fc <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200021fc:	b580      	push	{r7, lr}
200021fe:	b082      	sub	sp, #8
20002200:	af00      	add	r7, sp, #0
20002202:	6078      	str	r0, [r7, #4]
20002204:	000a      	movs	r2, r1
20002206:	1cbb      	adds	r3, r7, #2
20002208:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
2000220a:	687b      	ldr	r3, [r7, #4]
2000220c:	1cba      	adds	r2, r7, #2
2000220e:	8812      	ldrh	r2, [r2, #0]
20002210:	835a      	strh	r2, [r3, #26]
}
20002212:	46c0      	nop			; (mov r8, r8)
20002214:	46bd      	mov	sp, r7
20002216:	b002      	add	sp, #8
20002218:	bd80      	pop	{r7, pc}

2000221a <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
2000221a:	b580      	push	{r7, lr}
2000221c:	b082      	sub	sp, #8
2000221e:	af00      	add	r7, sp, #0
20002220:	6078      	str	r0, [r7, #4]
20002222:	0008      	movs	r0, r1
20002224:	0011      	movs	r1, r2
20002226:	1cbb      	adds	r3, r7, #2
20002228:	1c02      	adds	r2, r0, #0
2000222a:	801a      	strh	r2, [r3, #0]
2000222c:	1c7b      	adds	r3, r7, #1
2000222e:	1c0a      	adds	r2, r1, #0
20002230:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
20002232:	1c7b      	adds	r3, r7, #1
20002234:	781b      	ldrb	r3, [r3, #0]
20002236:	2b00      	cmp	r3, #0
20002238:	d004      	beq.n	20002244 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
2000223a:	687b      	ldr	r3, [r7, #4]
2000223c:	1cba      	adds	r2, r7, #2
2000223e:	8812      	ldrh	r2, [r2, #0]
20002240:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
20002242:	e003      	b.n	2000224c <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
20002244:	687b      	ldr	r3, [r7, #4]
20002246:	1cba      	adds	r2, r7, #2
20002248:	8812      	ldrh	r2, [r2, #0]
2000224a:	835a      	strh	r2, [r3, #26]
}
2000224c:	46c0      	nop			; (mov r8, r8)
2000224e:	46bd      	mov	sp, r7
20002250:	b002      	add	sp, #8
20002252:	bd80      	pop	{r7, pc}

20002254 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
20002254:	b580      	push	{r7, lr}
20002256:	b082      	sub	sp, #8
20002258:	af00      	add	r7, sp, #0
2000225a:	6078      	str	r0, [r7, #4]
2000225c:	000a      	movs	r2, r1
2000225e:	1cbb      	adds	r3, r7, #2
20002260:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
20002262:	1cbb      	adds	r3, r7, #2
20002264:	881a      	ldrh	r2, [r3, #0]
20002266:	687b      	ldr	r3, [r7, #4]
20002268:	615a      	str	r2, [r3, #20]
}
2000226a:	46c0      	nop			; (mov r8, r8)
2000226c:	46bd      	mov	sp, r7
2000226e:	b002      	add	sp, #8
20002270:	bd80      	pop	{r7, pc}

20002272 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20002272:	b580      	push	{r7, lr}
20002274:	b082      	sub	sp, #8
20002276:	af00      	add	r7, sp, #0
20002278:	6078      	str	r0, [r7, #4]
2000227a:	000a      	movs	r2, r1
2000227c:	1cbb      	adds	r3, r7, #2
2000227e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20002280:	687b      	ldr	r3, [r7, #4]
20002282:	695a      	ldr	r2, [r3, #20]
20002284:	1cbb      	adds	r3, r7, #2
20002286:	881b      	ldrh	r3, [r3, #0]
20002288:	405a      	eors	r2, r3
2000228a:	687b      	ldr	r3, [r7, #4]
2000228c:	615a      	str	r2, [r3, #20]
}
2000228e:	46c0      	nop			; (mov r8, r8)
20002290:	46bd      	mov	sp, r7
20002292:	b002      	add	sp, #8
20002294:	bd80      	pop	{r7, pc}

20002296 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
20002296:	b580      	push	{r7, lr}
20002298:	b084      	sub	sp, #16
2000229a:	af00      	add	r7, sp, #0
2000229c:	6078      	str	r0, [r7, #4]
2000229e:	0008      	movs	r0, r1
200022a0:	0011      	movs	r1, r2
200022a2:	1cbb      	adds	r3, r7, #2
200022a4:	1c02      	adds	r2, r0, #0
200022a6:	801a      	strh	r2, [r3, #0]
200022a8:	1c7b      	adds	r3, r7, #1
200022aa:	1c0a      	adds	r2, r1, #0
200022ac:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
200022ae:	2300      	movs	r3, #0
200022b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
200022b2:	2300      	movs	r3, #0
200022b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
200022b6:	1c7b      	adds	r3, r7, #1
200022b8:	781a      	ldrb	r2, [r3, #0]
200022ba:	1cbb      	adds	r3, r7, #2
200022bc:	881b      	ldrh	r3, [r3, #0]
200022be:	2107      	movs	r1, #7
200022c0:	400b      	ands	r3, r1
200022c2:	009b      	lsls	r3, r3, #2
200022c4:	409a      	lsls	r2, r3
200022c6:	0013      	movs	r3, r2
200022c8:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
200022ca:	1cbb      	adds	r3, r7, #2
200022cc:	881b      	ldrh	r3, [r3, #0]
200022ce:	08db      	lsrs	r3, r3, #3
200022d0:	b29b      	uxth	r3, r3
200022d2:	001a      	movs	r2, r3
200022d4:	687b      	ldr	r3, [r7, #4]
200022d6:	3208      	adds	r2, #8
200022d8:	0092      	lsls	r2, r2, #2
200022da:	58d3      	ldr	r3, [r2, r3]
200022dc:	1cba      	adds	r2, r7, #2
200022de:	8812      	ldrh	r2, [r2, #0]
200022e0:	2107      	movs	r1, #7
200022e2:	400a      	ands	r2, r1
200022e4:	0092      	lsls	r2, r2, #2
200022e6:	210f      	movs	r1, #15
200022e8:	4091      	lsls	r1, r2
200022ea:	000a      	movs	r2, r1
200022ec:	43d2      	mvns	r2, r2
200022ee:	1cb9      	adds	r1, r7, #2
200022f0:	8809      	ldrh	r1, [r1, #0]
200022f2:	08c9      	lsrs	r1, r1, #3
200022f4:	b289      	uxth	r1, r1
200022f6:	0008      	movs	r0, r1
200022f8:	401a      	ands	r2, r3
200022fa:	0011      	movs	r1, r2
200022fc:	687b      	ldr	r3, [r7, #4]
200022fe:	0002      	movs	r2, r0
20002300:	3208      	adds	r2, #8
20002302:	0092      	lsls	r2, r2, #2
20002304:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
20002306:	1cbb      	adds	r3, r7, #2
20002308:	881b      	ldrh	r3, [r3, #0]
2000230a:	08db      	lsrs	r3, r3, #3
2000230c:	b29b      	uxth	r3, r3
2000230e:	001a      	movs	r2, r3
20002310:	687b      	ldr	r3, [r7, #4]
20002312:	3208      	adds	r2, #8
20002314:	0092      	lsls	r2, r2, #2
20002316:	58d3      	ldr	r3, [r2, r3]
20002318:	68fa      	ldr	r2, [r7, #12]
2000231a:	4313      	orrs	r3, r2
2000231c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
2000231e:	1cbb      	adds	r3, r7, #2
20002320:	881b      	ldrh	r3, [r3, #0]
20002322:	08db      	lsrs	r3, r3, #3
20002324:	b29b      	uxth	r3, r3
20002326:	001a      	movs	r2, r3
20002328:	687b      	ldr	r3, [r7, #4]
2000232a:	3208      	adds	r2, #8
2000232c:	0092      	lsls	r2, r2, #2
2000232e:	68b9      	ldr	r1, [r7, #8]
20002330:	50d1      	str	r1, [r2, r3]
}
20002332:	46c0      	nop			; (mov r8, r8)
20002334:	46bd      	mov	sp, r7
20002336:	b004      	add	sp, #16
20002338:	bd80      	pop	{r7, pc}
2000233a:	46c0      	nop			; (mov r8, r8)

2000233c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
2000233c:	b580      	push	{r7, lr}
2000233e:	b082      	sub	sp, #8
20002340:	af00      	add	r7, sp, #0
20002342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
20002344:	4b04      	ldr	r3, [pc, #16]	; (20002358 <NVIC_PriorityGroupConfig+0x1c>)
20002346:	687a      	ldr	r2, [r7, #4]
20002348:	4904      	ldr	r1, [pc, #16]	; (2000235c <NVIC_PriorityGroupConfig+0x20>)
2000234a:	430a      	orrs	r2, r1
2000234c:	60da      	str	r2, [r3, #12]
}
2000234e:	46c0      	nop			; (mov r8, r8)
20002350:	46bd      	mov	sp, r7
20002352:	b002      	add	sp, #8
20002354:	bd80      	pop	{r7, pc}
20002356:	46c0      	nop			; (mov r8, r8)
20002358:	e000ed00 	and	lr, r0, r0, lsl #26
2000235c:	05fa0000 	ldrbeq	r0, [sl, #0]!

20002360 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
20002360:	b5b0      	push	{r4, r5, r7, lr}
20002362:	b084      	sub	sp, #16
20002364:	af00      	add	r7, sp, #0
20002366:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
20002368:	230f      	movs	r3, #15
2000236a:	18fb      	adds	r3, r7, r3
2000236c:	2200      	movs	r2, #0
2000236e:	701a      	strb	r2, [r3, #0]
20002370:	230e      	movs	r3, #14
20002372:	18fb      	adds	r3, r7, r3
20002374:	2200      	movs	r2, #0
20002376:	701a      	strb	r2, [r3, #0]
20002378:	230d      	movs	r3, #13
2000237a:	18fb      	adds	r3, r7, r3
2000237c:	220f      	movs	r2, #15
2000237e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
20002380:	687b      	ldr	r3, [r7, #4]
20002382:	78db      	ldrb	r3, [r3, #3]
20002384:	2b00      	cmp	r3, #0
20002386:	d04d      	beq.n	20002424 <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
20002388:	4b31      	ldr	r3, [pc, #196]	; (20002450 <NVIC_Init+0xf0>)
2000238a:	68db      	ldr	r3, [r3, #12]
2000238c:	43db      	mvns	r3, r3
2000238e:	0a1b      	lsrs	r3, r3, #8
20002390:	b2da      	uxtb	r2, r3
20002392:	200f      	movs	r0, #15
20002394:	183b      	adds	r3, r7, r0
20002396:	2107      	movs	r1, #7
20002398:	400a      	ands	r2, r1
2000239a:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
2000239c:	250e      	movs	r5, #14
2000239e:	197b      	adds	r3, r7, r5
200023a0:	183a      	adds	r2, r7, r0
200023a2:	7812      	ldrb	r2, [r2, #0]
200023a4:	2104      	movs	r1, #4
200023a6:	1a8a      	subs	r2, r1, r2
200023a8:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
200023aa:	240d      	movs	r4, #13
200023ac:	193b      	adds	r3, r7, r4
200023ae:	781a      	ldrb	r2, [r3, #0]
200023b0:	0001      	movs	r1, r0
200023b2:	187b      	adds	r3, r7, r1
200023b4:	781b      	ldrb	r3, [r3, #0]
200023b6:	411a      	asrs	r2, r3
200023b8:	193b      	adds	r3, r7, r4
200023ba:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
200023bc:	687b      	ldr	r3, [r7, #4]
200023be:	785b      	ldrb	r3, [r3, #1]
200023c0:	001a      	movs	r2, r3
200023c2:	197b      	adds	r3, r7, r5
200023c4:	781b      	ldrb	r3, [r3, #0]
200023c6:	409a      	lsls	r2, r3
200023c8:	0008      	movs	r0, r1
200023ca:	187b      	adds	r3, r7, r1
200023cc:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
200023ce:	687b      	ldr	r3, [r7, #4]
200023d0:	789b      	ldrb	r3, [r3, #2]
200023d2:	193a      	adds	r2, r7, r4
200023d4:	7812      	ldrb	r2, [r2, #0]
200023d6:	4013      	ands	r3, r2
200023d8:	b2d9      	uxtb	r1, r3
200023da:	183b      	adds	r3, r7, r0
200023dc:	183a      	adds	r2, r7, r0
200023de:	7812      	ldrb	r2, [r2, #0]
200023e0:	430a      	orrs	r2, r1
200023e2:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
200023e4:	183b      	adds	r3, r7, r0
200023e6:	183a      	adds	r2, r7, r0
200023e8:	7812      	ldrb	r2, [r2, #0]
200023ea:	0112      	lsls	r2, r2, #4
200023ec:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
200023ee:	4a19      	ldr	r2, [pc, #100]	; (20002454 <NVIC_Init+0xf4>)
200023f0:	687b      	ldr	r3, [r7, #4]
200023f2:	781b      	ldrb	r3, [r3, #0]
200023f4:	0019      	movs	r1, r3
200023f6:	23c0      	movs	r3, #192	; 0xc0
200023f8:	009b      	lsls	r3, r3, #2
200023fa:	1852      	adds	r2, r2, r1
200023fc:	18d3      	adds	r3, r2, r3
200023fe:	183a      	adds	r2, r7, r0
20002400:	7812      	ldrb	r2, [r2, #0]
20002402:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20002404:	687b      	ldr	r3, [r7, #4]
20002406:	781b      	ldrb	r3, [r3, #0]
20002408:	001a      	movs	r2, r3
2000240a:	231f      	movs	r3, #31
2000240c:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
2000240e:	4911      	ldr	r1, [pc, #68]	; (20002454 <NVIC_Init+0xf4>)
20002410:	687a      	ldr	r2, [r7, #4]
20002412:	7812      	ldrb	r2, [r2, #0]
20002414:	0952      	lsrs	r2, r2, #5
20002416:	b2d2      	uxtb	r2, r2
20002418:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
2000241a:	2201      	movs	r2, #1
2000241c:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
2000241e:	0083      	lsls	r3, r0, #2
20002420:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
20002422:	e010      	b.n	20002446 <NVIC_Init+0xe6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20002424:	687b      	ldr	r3, [r7, #4]
20002426:	781b      	ldrb	r3, [r3, #0]
20002428:	001a      	movs	r2, r3
2000242a:	231f      	movs	r3, #31
2000242c:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
2000242e:	4909      	ldr	r1, [pc, #36]	; (20002454 <NVIC_Init+0xf4>)
20002430:	687a      	ldr	r2, [r7, #4]
20002432:	7812      	ldrb	r2, [r2, #0]
20002434:	0952      	lsrs	r2, r2, #5
20002436:	b2d2      	uxtb	r2, r2
20002438:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
2000243a:	2201      	movs	r2, #1
2000243c:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
2000243e:	0003      	movs	r3, r0
20002440:	3320      	adds	r3, #32
20002442:	009b      	lsls	r3, r3, #2
20002444:	505a      	str	r2, [r3, r1]
}
20002446:	46c0      	nop			; (mov r8, r8)
20002448:	46bd      	mov	sp, r7
2000244a:	b004      	add	sp, #16
2000244c:	bdb0      	pop	{r4, r5, r7, pc}
2000244e:	46c0      	nop			; (mov r8, r8)
20002450:	e000ed00 	and	lr, r0, r0, lsl #26
20002454:	e000e100 	and	lr, r0, r0, lsl #2

20002458 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
20002458:	b580      	push	{r7, lr}
2000245a:	b082      	sub	sp, #8
2000245c:	af00      	add	r7, sp, #0
2000245e:	6078      	str	r0, [r7, #4]
20002460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
20002462:	683b      	ldr	r3, [r7, #0]
20002464:	4a05      	ldr	r2, [pc, #20]	; (2000247c <NVIC_SetVectorTable+0x24>)
20002466:	4013      	ands	r3, r2
20002468:	0019      	movs	r1, r3
2000246a:	4b05      	ldr	r3, [pc, #20]	; (20002480 <NVIC_SetVectorTable+0x28>)
2000246c:	687a      	ldr	r2, [r7, #4]
2000246e:	430a      	orrs	r2, r1
20002470:	609a      	str	r2, [r3, #8]
}
20002472:	46c0      	nop			; (mov r8, r8)
20002474:	46bd      	mov	sp, r7
20002476:	b002      	add	sp, #8
20002478:	bd80      	pop	{r7, pc}
2000247a:	46c0      	nop			; (mov r8, r8)
2000247c:	1fffff80 	svcne	0x00ffff80
20002480:	e000ed00 	and	lr, r0, r0, lsl #26

20002484 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
20002484:	b580      	push	{r7, lr}
20002486:	b082      	sub	sp, #8
20002488:	af00      	add	r7, sp, #0
2000248a:	0002      	movs	r2, r0
2000248c:	1dfb      	adds	r3, r7, #7
2000248e:	701a      	strb	r2, [r3, #0]
20002490:	1dbb      	adds	r3, r7, #6
20002492:	1c0a      	adds	r2, r1, #0
20002494:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
20002496:	1dbb      	adds	r3, r7, #6
20002498:	781b      	ldrb	r3, [r3, #0]
2000249a:	2b00      	cmp	r3, #0
2000249c:	d007      	beq.n	200024ae <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
2000249e:	4b0a      	ldr	r3, [pc, #40]	; (200024c8 <NVIC_SystemLPConfig+0x44>)
200024a0:	6919      	ldr	r1, [r3, #16]
200024a2:	1dfb      	adds	r3, r7, #7
200024a4:	781a      	ldrb	r2, [r3, #0]
200024a6:	4b08      	ldr	r3, [pc, #32]	; (200024c8 <NVIC_SystemLPConfig+0x44>)
200024a8:	430a      	orrs	r2, r1
200024aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
200024ac:	e007      	b.n	200024be <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
200024ae:	4b06      	ldr	r3, [pc, #24]	; (200024c8 <NVIC_SystemLPConfig+0x44>)
200024b0:	691a      	ldr	r2, [r3, #16]
200024b2:	1dfb      	adds	r3, r7, #7
200024b4:	781b      	ldrb	r3, [r3, #0]
200024b6:	43d9      	mvns	r1, r3
200024b8:	4b03      	ldr	r3, [pc, #12]	; (200024c8 <NVIC_SystemLPConfig+0x44>)
200024ba:	400a      	ands	r2, r1
200024bc:	611a      	str	r2, [r3, #16]
}
200024be:	46c0      	nop			; (mov r8, r8)
200024c0:	46bd      	mov	sp, r7
200024c2:	b002      	add	sp, #8
200024c4:	bd80      	pop	{r7, pc}
200024c6:	46c0      	nop			; (mov r8, r8)
200024c8:	e000ed00 	and	lr, r0, r0, lsl #26

200024cc <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
200024cc:	b580      	push	{r7, lr}
200024ce:	b082      	sub	sp, #8
200024d0:	af00      	add	r7, sp, #0
200024d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
200024d4:	687b      	ldr	r3, [r7, #4]
200024d6:	2b04      	cmp	r3, #4
200024d8:	d106      	bne.n	200024e8 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
200024da:	4b08      	ldr	r3, [pc, #32]	; (200024fc <SysTick_CLKSourceConfig+0x30>)
200024dc:	681a      	ldr	r2, [r3, #0]
200024de:	4b07      	ldr	r3, [pc, #28]	; (200024fc <SysTick_CLKSourceConfig+0x30>)
200024e0:	2104      	movs	r1, #4
200024e2:	430a      	orrs	r2, r1
200024e4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
200024e6:	e005      	b.n	200024f4 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
200024e8:	4b04      	ldr	r3, [pc, #16]	; (200024fc <SysTick_CLKSourceConfig+0x30>)
200024ea:	681a      	ldr	r2, [r3, #0]
200024ec:	4b03      	ldr	r3, [pc, #12]	; (200024fc <SysTick_CLKSourceConfig+0x30>)
200024ee:	2104      	movs	r1, #4
200024f0:	438a      	bics	r2, r1
200024f2:	601a      	str	r2, [r3, #0]
}
200024f4:	46c0      	nop			; (mov r8, r8)
200024f6:	46bd      	mov	sp, r7
200024f8:	b002      	add	sp, #8
200024fa:	bd80      	pop	{r7, pc}
200024fc:	e000e010 	and	lr, r0, r0, lsl r0

20002500 <bufferInit>:
#include "buffer.h"

//Nollställer bufferten
void bufferInit(FIFO *buffer) {
20002500:	b580      	push	{r7, lr}
20002502:	b082      	sub	sp, #8
20002504:	af00      	add	r7, sp, #0
20002506:	6078      	str	r0, [r7, #4]
    buffer->count = 0;
20002508:	687b      	ldr	r3, [r7, #4]
2000250a:	2264      	movs	r2, #100	; 0x64
2000250c:	2100      	movs	r1, #0
2000250e:	5499      	strb	r1, [r3, r2]
    buffer->in = 0;
20002510:	687b      	ldr	r3, [r7, #4]
20002512:	2265      	movs	r2, #101	; 0x65
20002514:	2100      	movs	r1, #0
20002516:	5499      	strb	r1, [r3, r2]
    buffer->out = 0;
20002518:	687b      	ldr	r3, [r7, #4]
2000251a:	2266      	movs	r2, #102	; 0x66
2000251c:	2100      	movs	r1, #0
2000251e:	5499      	strb	r1, [r3, r2]
}
20002520:	46c0      	nop			; (mov r8, r8)
20002522:	46bd      	mov	sp, r7
20002524:	b002      	add	sp, #8
20002526:	bd80      	pop	{r7, pc}

20002528 <bufferPut>:

//Lägger till ett elem i buffern.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferPut ( FIFO *buffer, uint8_t elem) {
20002528:	b580      	push	{r7, lr}
2000252a:	b082      	sub	sp, #8
2000252c:	af00      	add	r7, sp, #0
2000252e:	6078      	str	r0, [r7, #4]
20002530:	000a      	movs	r2, r1
20002532:	1cfb      	adds	r3, r7, #3
20002534:	701a      	strb	r2, [r3, #0]
    //Kollar om bufferten är full.
    if (buffer->count == BUFFERSIZE){
20002536:	687b      	ldr	r3, [r7, #4]
20002538:	2264      	movs	r2, #100	; 0x64
2000253a:	5c9b      	ldrb	r3, [r3, r2]
2000253c:	2b64      	cmp	r3, #100	; 0x64
2000253e:	d101      	bne.n	20002544 <bufferPut+0x1c>
        return 0;
20002540:	2300      	movs	r3, #0
20002542:	e01e      	b.n	20002582 <bufferPut+0x5a>
    }

    //Lägger elem i bufferten
    buffer->buff[buffer->in++] = elem;
20002544:	687b      	ldr	r3, [r7, #4]
20002546:	2265      	movs	r2, #101	; 0x65
20002548:	5c9b      	ldrb	r3, [r3, r2]
2000254a:	1c5a      	adds	r2, r3, #1
2000254c:	b2d0      	uxtb	r0, r2
2000254e:	687a      	ldr	r2, [r7, #4]
20002550:	2165      	movs	r1, #101	; 0x65
20002552:	5450      	strb	r0, [r2, r1]
20002554:	0019      	movs	r1, r3
20002556:	687b      	ldr	r3, [r7, #4]
20002558:	1cfa      	adds	r2, r7, #3
2000255a:	7812      	ldrb	r2, [r2, #0]
2000255c:	545a      	strb	r2, [r3, r1]
    buffer->count++;
2000255e:	687b      	ldr	r3, [r7, #4]
20002560:	2264      	movs	r2, #100	; 0x64
20002562:	5c9b      	ldrb	r3, [r3, r2]
20002564:	3301      	adds	r3, #1
20002566:	b2d9      	uxtb	r1, r3
20002568:	687b      	ldr	r3, [r7, #4]
2000256a:	2264      	movs	r2, #100	; 0x64
2000256c:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->in == BUFFERSIZE)
2000256e:	687b      	ldr	r3, [r7, #4]
20002570:	2265      	movs	r2, #101	; 0x65
20002572:	5c9b      	ldrb	r3, [r3, r2]
20002574:	2b64      	cmp	r3, #100	; 0x64
20002576:	d103      	bne.n	20002580 <bufferPut+0x58>
        buffer->in = 0;
20002578:	687b      	ldr	r3, [r7, #4]
2000257a:	2265      	movs	r2, #101	; 0x65
2000257c:	2100      	movs	r1, #0
2000257e:	5499      	strb	r1, [r3, r2]

    return 1;
20002580:	2301      	movs	r3, #1
}
20002582:	0018      	movs	r0, r3
20002584:	46bd      	mov	sp, r7
20002586:	b002      	add	sp, #8
20002588:	bd80      	pop	{r7, pc}

2000258a <bufferOverrideLast>:

//Skriver över föregående elem i buffern.
//Ändrar inga indexeringsvariabler
void bufferOverrideLast ( FIFO *buffer, uint8_t elem) {
2000258a:	b580      	push	{r7, lr}
2000258c:	b084      	sub	sp, #16
2000258e:	af00      	add	r7, sp, #0
20002590:	6078      	str	r0, [r7, #4]
20002592:	000a      	movs	r2, r1
20002594:	1cfb      	adds	r3, r7, #3
20002596:	701a      	strb	r2, [r3, #0]
    //Index för föregående element i buffern
    uint8_t prevIndex;

    //Om index för nästa element är 0 så blir föregående BUFFERSIZE - 1
    //annars buffer->in - 1
    prevIndex =  (buffer->in == 0) ? BUFFERSIZE - 1 : buffer->in - 1;
20002598:	687b      	ldr	r3, [r7, #4]
2000259a:	2265      	movs	r2, #101	; 0x65
2000259c:	5c9b      	ldrb	r3, [r3, r2]
2000259e:	2b00      	cmp	r3, #0
200025a0:	d005      	beq.n	200025ae <bufferOverrideLast+0x24>
200025a2:	687b      	ldr	r3, [r7, #4]
200025a4:	2265      	movs	r2, #101	; 0x65
200025a6:	5c9b      	ldrb	r3, [r3, r2]
200025a8:	3b01      	subs	r3, #1
200025aa:	b2da      	uxtb	r2, r3
200025ac:	e000      	b.n	200025b0 <bufferOverrideLast+0x26>
200025ae:	2263      	movs	r2, #99	; 0x63
200025b0:	210f      	movs	r1, #15
200025b2:	187b      	adds	r3, r7, r1
200025b4:	701a      	strb	r2, [r3, #0]

    //Skriver över elem i bufferten
    buffer->buff[prevIndex] = elem;
200025b6:	187b      	adds	r3, r7, r1
200025b8:	781b      	ldrb	r3, [r3, #0]
200025ba:	687a      	ldr	r2, [r7, #4]
200025bc:	1cf9      	adds	r1, r7, #3
200025be:	7809      	ldrb	r1, [r1, #0]
200025c0:	54d1      	strb	r1, [r2, r3]
}
200025c2:	46c0      	nop			; (mov r8, r8)
200025c4:	46bd      	mov	sp, r7
200025c6:	b004      	add	sp, #16
200025c8:	bd80      	pop	{r7, pc}

200025ca <bufferGet>:

//Hämtar ett element från buffern till dest.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferGet ( FIFO *buffer, uint8_t *dest) {
200025ca:	b580      	push	{r7, lr}
200025cc:	b082      	sub	sp, #8
200025ce:	af00      	add	r7, sp, #0
200025d0:	6078      	str	r0, [r7, #4]
200025d2:	6039      	str	r1, [r7, #0]
    //Kollar om bufferten är tom
    if (!buffer->count){
200025d4:	687b      	ldr	r3, [r7, #4]
200025d6:	2264      	movs	r2, #100	; 0x64
200025d8:	5c9b      	ldrb	r3, [r3, r2]
200025da:	2b00      	cmp	r3, #0
200025dc:	d101      	bne.n	200025e2 <bufferGet+0x18>
        return 0;
200025de:	2300      	movs	r3, #0
200025e0:	e01e      	b.n	20002620 <bufferGet+0x56>
    }

    //Hämtar element ur buffern till dest
    *dest = buffer->buff[buffer->out++];
200025e2:	687b      	ldr	r3, [r7, #4]
200025e4:	2266      	movs	r2, #102	; 0x66
200025e6:	5c9b      	ldrb	r3, [r3, r2]
200025e8:	1c5a      	adds	r2, r3, #1
200025ea:	b2d0      	uxtb	r0, r2
200025ec:	687a      	ldr	r2, [r7, #4]
200025ee:	2166      	movs	r1, #102	; 0x66
200025f0:	5450      	strb	r0, [r2, r1]
200025f2:	001a      	movs	r2, r3
200025f4:	687b      	ldr	r3, [r7, #4]
200025f6:	5c9a      	ldrb	r2, [r3, r2]
200025f8:	683b      	ldr	r3, [r7, #0]
200025fa:	701a      	strb	r2, [r3, #0]
    buffer->count--;
200025fc:	687b      	ldr	r3, [r7, #4]
200025fe:	2264      	movs	r2, #100	; 0x64
20002600:	5c9b      	ldrb	r3, [r3, r2]
20002602:	3b01      	subs	r3, #1
20002604:	b2d9      	uxtb	r1, r3
20002606:	687b      	ldr	r3, [r7, #4]
20002608:	2264      	movs	r2, #100	; 0x64
2000260a:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->out == BUFFERSIZE)
2000260c:	687b      	ldr	r3, [r7, #4]
2000260e:	2266      	movs	r2, #102	; 0x66
20002610:	5c9b      	ldrb	r3, [r3, r2]
20002612:	2b64      	cmp	r3, #100	; 0x64
20002614:	d103      	bne.n	2000261e <bufferGet+0x54>
        buffer->out = 0;
20002616:	687b      	ldr	r3, [r7, #4]
20002618:	2266      	movs	r2, #102	; 0x66
2000261a:	2100      	movs	r1, #0
2000261c:	5499      	strb	r1, [r3, r2]

    return 1;
2000261e:	2301      	movs	r3, #1
20002620:	0018      	movs	r0, r3
20002622:	46bd      	mov	sp, r7
20002624:	b002      	add	sp, #8
20002626:	bd80      	pop	{r7, pc}

20002628 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
20002628:	b580      	push	{r7, lr}
2000262a:	b082      	sub	sp, #8
2000262c:	af00      	add	r7, sp, #0
2000262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
20002630:	687b      	ldr	r3, [r7, #4]
20002632:	4a41      	ldr	r2, [pc, #260]	; (20002738 <USART_DeInit+0x110>)
20002634:	4293      	cmp	r3, r2
20002636:	d108      	bne.n	2000264a <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
20002638:	2101      	movs	r1, #1
2000263a:	2010      	movs	r0, #16
2000263c:	f7fe fa2c 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
20002640:	2100      	movs	r1, #0
20002642:	2010      	movs	r0, #16
20002644:	f7fe fa28 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
20002648:	e071      	b.n	2000272e <USART_DeInit+0x106>
  else if (USARTx == USART2)
2000264a:	687b      	ldr	r3, [r7, #4]
2000264c:	4a3b      	ldr	r2, [pc, #236]	; (2000273c <USART_DeInit+0x114>)
2000264e:	4293      	cmp	r3, r2
20002650:	d10c      	bne.n	2000266c <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
20002652:	2380      	movs	r3, #128	; 0x80
20002654:	029b      	lsls	r3, r3, #10
20002656:	2101      	movs	r1, #1
20002658:	0018      	movs	r0, r3
2000265a:	f7fe f9fd 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
2000265e:	2380      	movs	r3, #128	; 0x80
20002660:	029b      	lsls	r3, r3, #10
20002662:	2100      	movs	r1, #0
20002664:	0018      	movs	r0, r3
20002666:	f7fe f9f7 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
2000266a:	e060      	b.n	2000272e <USART_DeInit+0x106>
  else if (USARTx == USART3)
2000266c:	687b      	ldr	r3, [r7, #4]
2000266e:	4a34      	ldr	r2, [pc, #208]	; (20002740 <USART_DeInit+0x118>)
20002670:	4293      	cmp	r3, r2
20002672:	d10c      	bne.n	2000268e <USART_DeInit+0x66>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
20002674:	2380      	movs	r3, #128	; 0x80
20002676:	02db      	lsls	r3, r3, #11
20002678:	2101      	movs	r1, #1
2000267a:	0018      	movs	r0, r3
2000267c:	f7fe f9ec 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
20002680:	2380      	movs	r3, #128	; 0x80
20002682:	02db      	lsls	r3, r3, #11
20002684:	2100      	movs	r1, #0
20002686:	0018      	movs	r0, r3
20002688:	f7fe f9e6 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
2000268c:	e04f      	b.n	2000272e <USART_DeInit+0x106>
  else if (USARTx == UART4)
2000268e:	687b      	ldr	r3, [r7, #4]
20002690:	4a2c      	ldr	r2, [pc, #176]	; (20002744 <USART_DeInit+0x11c>)
20002692:	4293      	cmp	r3, r2
20002694:	d10c      	bne.n	200026b0 <USART_DeInit+0x88>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
20002696:	2380      	movs	r3, #128	; 0x80
20002698:	031b      	lsls	r3, r3, #12
2000269a:	2101      	movs	r1, #1
2000269c:	0018      	movs	r0, r3
2000269e:	f7fe f9db 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
200026a2:	2380      	movs	r3, #128	; 0x80
200026a4:	031b      	lsls	r3, r3, #12
200026a6:	2100      	movs	r1, #0
200026a8:	0018      	movs	r0, r3
200026aa:	f7fe f9d5 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
200026ae:	e03e      	b.n	2000272e <USART_DeInit+0x106>
  else if (USARTx == UART5)
200026b0:	687b      	ldr	r3, [r7, #4]
200026b2:	4a25      	ldr	r2, [pc, #148]	; (20002748 <USART_DeInit+0x120>)
200026b4:	4293      	cmp	r3, r2
200026b6:	d10c      	bne.n	200026d2 <USART_DeInit+0xaa>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
200026b8:	2380      	movs	r3, #128	; 0x80
200026ba:	035b      	lsls	r3, r3, #13
200026bc:	2101      	movs	r1, #1
200026be:	0018      	movs	r0, r3
200026c0:	f7fe f9ca 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
200026c4:	2380      	movs	r3, #128	; 0x80
200026c6:	035b      	lsls	r3, r3, #13
200026c8:	2100      	movs	r1, #0
200026ca:	0018      	movs	r0, r3
200026cc:	f7fe f9c4 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
200026d0:	e02d      	b.n	2000272e <USART_DeInit+0x106>
  else if (USARTx == USART6)
200026d2:	687b      	ldr	r3, [r7, #4]
200026d4:	4a1d      	ldr	r2, [pc, #116]	; (2000274c <USART_DeInit+0x124>)
200026d6:	4293      	cmp	r3, r2
200026d8:	d108      	bne.n	200026ec <USART_DeInit+0xc4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
200026da:	2101      	movs	r1, #1
200026dc:	2020      	movs	r0, #32
200026de:	f7fe f9db 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
200026e2:	2100      	movs	r1, #0
200026e4:	2020      	movs	r0, #32
200026e6:	f7fe f9d7 	bl	20000a98 <RCC_APB2PeriphResetCmd>
}
200026ea:	e020      	b.n	2000272e <USART_DeInit+0x106>
  else if (USARTx == UART7)
200026ec:	687b      	ldr	r3, [r7, #4]
200026ee:	4a18      	ldr	r2, [pc, #96]	; (20002750 <USART_DeInit+0x128>)
200026f0:	4293      	cmp	r3, r2
200026f2:	d10c      	bne.n	2000270e <USART_DeInit+0xe6>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
200026f4:	2380      	movs	r3, #128	; 0x80
200026f6:	05db      	lsls	r3, r3, #23
200026f8:	2101      	movs	r1, #1
200026fa:	0018      	movs	r0, r3
200026fc:	f7fe f9ac 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
20002700:	2380      	movs	r3, #128	; 0x80
20002702:	05db      	lsls	r3, r3, #23
20002704:	2100      	movs	r1, #0
20002706:	0018      	movs	r0, r3
20002708:	f7fe f9a6 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
2000270c:	e00f      	b.n	2000272e <USART_DeInit+0x106>
    if (USARTx == UART8)
2000270e:	687b      	ldr	r3, [r7, #4]
20002710:	4a10      	ldr	r2, [pc, #64]	; (20002754 <USART_DeInit+0x12c>)
20002712:	4293      	cmp	r3, r2
20002714:	d10b      	bne.n	2000272e <USART_DeInit+0x106>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
20002716:	2380      	movs	r3, #128	; 0x80
20002718:	061b      	lsls	r3, r3, #24
2000271a:	2101      	movs	r1, #1
2000271c:	0018      	movs	r0, r3
2000271e:	f7fe f99b 	bl	20000a58 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
20002722:	2380      	movs	r3, #128	; 0x80
20002724:	061b      	lsls	r3, r3, #24
20002726:	2100      	movs	r1, #0
20002728:	0018      	movs	r0, r3
2000272a:	f7fe f995 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
2000272e:	46c0      	nop			; (mov r8, r8)
20002730:	46bd      	mov	sp, r7
20002732:	b002      	add	sp, #8
20002734:	bd80      	pop	{r7, pc}
20002736:	46c0      	nop			; (mov r8, r8)
20002738:	40011000 	andmi	r1, r1, r0
2000273c:	40004400 	andmi	r4, r0, r0, lsl #8
20002740:	40004800 	andmi	r4, r0, r0, lsl #16
20002744:	40004c00 	andmi	r4, r0, r0, lsl #24
20002748:	40005000 	andmi	r5, r0, r0
2000274c:	40011400 	andmi	r1, r1, r0, lsl #8
20002750:	40007800 	andmi	r7, r0, r0, lsl #16
20002754:	40007c00 	andmi	r7, r0, r0, lsl #24

20002758 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
20002758:	b580      	push	{r7, lr}
2000275a:	b08a      	sub	sp, #40	; 0x28
2000275c:	af00      	add	r7, sp, #0
2000275e:	6078      	str	r0, [r7, #4]
20002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
20002762:	2300      	movs	r3, #0
20002764:	627b      	str	r3, [r7, #36]	; 0x24
20002766:	2300      	movs	r3, #0
20002768:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
2000276a:	2300      	movs	r3, #0
2000276c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
2000276e:	2300      	movs	r3, #0
20002770:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
20002772:	687b      	ldr	r3, [r7, #4]
20002774:	8a1b      	ldrh	r3, [r3, #16]
20002776:	b29b      	uxth	r3, r3
20002778:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
2000277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000277c:	4a56      	ldr	r2, [pc, #344]	; (200028d8 <USART_Init+0x180>)
2000277e:	4013      	ands	r3, r2
20002780:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
20002782:	683b      	ldr	r3, [r7, #0]
20002784:	88db      	ldrh	r3, [r3, #6]
20002786:	001a      	movs	r2, r3
20002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000278a:	4313      	orrs	r3, r2
2000278c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
2000278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002790:	b29a      	uxth	r2, r3
20002792:	687b      	ldr	r3, [r7, #4]
20002794:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
20002796:	687b      	ldr	r3, [r7, #4]
20002798:	899b      	ldrh	r3, [r3, #12]
2000279a:	b29b      	uxth	r3, r3
2000279c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
2000279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200027a0:	4a4e      	ldr	r2, [pc, #312]	; (200028dc <USART_Init+0x184>)
200027a2:	4013      	ands	r3, r2
200027a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
200027a6:	683b      	ldr	r3, [r7, #0]
200027a8:	889a      	ldrh	r2, [r3, #4]
200027aa:	683b      	ldr	r3, [r7, #0]
200027ac:	891b      	ldrh	r3, [r3, #8]
200027ae:	4313      	orrs	r3, r2
200027b0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
200027b2:	683b      	ldr	r3, [r7, #0]
200027b4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
200027b6:	4313      	orrs	r3, r2
200027b8:	b29b      	uxth	r3, r3
200027ba:	001a      	movs	r2, r3
200027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200027be:	4313      	orrs	r3, r2
200027c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
200027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200027c4:	b29a      	uxth	r2, r3
200027c6:	687b      	ldr	r3, [r7, #4]
200027c8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
200027ca:	687b      	ldr	r3, [r7, #4]
200027cc:	8a9b      	ldrh	r3, [r3, #20]
200027ce:	b29b      	uxth	r3, r3
200027d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
200027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200027d4:	4a42      	ldr	r2, [pc, #264]	; (200028e0 <USART_Init+0x188>)
200027d6:	4013      	ands	r3, r2
200027d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
200027da:	683b      	ldr	r3, [r7, #0]
200027dc:	899b      	ldrh	r3, [r3, #12]
200027de:	001a      	movs	r2, r3
200027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200027e2:	4313      	orrs	r3, r2
200027e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
200027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200027e8:	b29a      	uxth	r2, r3
200027ea:	687b      	ldr	r3, [r7, #4]
200027ec:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
200027ee:	2308      	movs	r3, #8
200027f0:	18fb      	adds	r3, r7, r3
200027f2:	0018      	movs	r0, r3
200027f4:	f7fd fe80 	bl	200004f8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
200027f8:	687b      	ldr	r3, [r7, #4]
200027fa:	4a3a      	ldr	r2, [pc, #232]	; (200028e4 <USART_Init+0x18c>)
200027fc:	4293      	cmp	r3, r2
200027fe:	d003      	beq.n	20002808 <USART_Init+0xb0>
20002800:	687b      	ldr	r3, [r7, #4]
20002802:	4a39      	ldr	r2, [pc, #228]	; (200028e8 <USART_Init+0x190>)
20002804:	4293      	cmp	r3, r2
20002806:	d104      	bne.n	20002812 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
20002808:	2308      	movs	r3, #8
2000280a:	18fb      	adds	r3, r7, r3
2000280c:	68db      	ldr	r3, [r3, #12]
2000280e:	623b      	str	r3, [r7, #32]
20002810:	e003      	b.n	2000281a <USART_Init+0xc2>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
20002812:	2308      	movs	r3, #8
20002814:	18fb      	adds	r3, r7, r3
20002816:	689b      	ldr	r3, [r3, #8]
20002818:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
2000281a:	687b      	ldr	r3, [r7, #4]
2000281c:	899b      	ldrh	r3, [r3, #12]
2000281e:	b29b      	uxth	r3, r3
20002820:	b21b      	sxth	r3, r3
20002822:	2b00      	cmp	r3, #0
20002824:	da0f      	bge.n	20002846 <USART_Init+0xee>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
20002826:	6a3a      	ldr	r2, [r7, #32]
20002828:	0013      	movs	r3, r2
2000282a:	009b      	lsls	r3, r3, #2
2000282c:	189b      	adds	r3, r3, r2
2000282e:	009a      	lsls	r2, r3, #2
20002830:	189a      	adds	r2, r3, r2
20002832:	683b      	ldr	r3, [r7, #0]
20002834:	681b      	ldr	r3, [r3, #0]
20002836:	005b      	lsls	r3, r3, #1
20002838:	0019      	movs	r1, r3
2000283a:	0010      	movs	r0, r2
2000283c:	f000 fbf4 	bl	20003028 <__udivsi3>
20002840:	0003      	movs	r3, r0
20002842:	61fb      	str	r3, [r7, #28]
20002844:	e00e      	b.n	20002864 <USART_Init+0x10c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
20002846:	6a3a      	ldr	r2, [r7, #32]
20002848:	0013      	movs	r3, r2
2000284a:	009b      	lsls	r3, r3, #2
2000284c:	189b      	adds	r3, r3, r2
2000284e:	009a      	lsls	r2, r3, #2
20002850:	189a      	adds	r2, r3, r2
20002852:	683b      	ldr	r3, [r7, #0]
20002854:	681b      	ldr	r3, [r3, #0]
20002856:	009b      	lsls	r3, r3, #2
20002858:	0019      	movs	r1, r3
2000285a:	0010      	movs	r0, r2
2000285c:	f000 fbe4 	bl	20003028 <__udivsi3>
20002860:	0003      	movs	r3, r0
20002862:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
20002864:	69fb      	ldr	r3, [r7, #28]
20002866:	2164      	movs	r1, #100	; 0x64
20002868:	0018      	movs	r0, r3
2000286a:	f000 fbdd 	bl	20003028 <__udivsi3>
2000286e:	0003      	movs	r3, r0
20002870:	011b      	lsls	r3, r3, #4
20002872:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
20002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002876:	091b      	lsrs	r3, r3, #4
20002878:	2264      	movs	r2, #100	; 0x64
2000287a:	4353      	muls	r3, r2
2000287c:	69fa      	ldr	r2, [r7, #28]
2000287e:	1ad3      	subs	r3, r2, r3
20002880:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
20002882:	687b      	ldr	r3, [r7, #4]
20002884:	899b      	ldrh	r3, [r3, #12]
20002886:	b29b      	uxth	r3, r3
20002888:	b21b      	sxth	r3, r3
2000288a:	2b00      	cmp	r3, #0
2000288c:	da0e      	bge.n	200028ac <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
2000288e:	69bb      	ldr	r3, [r7, #24]
20002890:	00db      	lsls	r3, r3, #3
20002892:	3332      	adds	r3, #50	; 0x32
20002894:	2164      	movs	r1, #100	; 0x64
20002896:	0018      	movs	r0, r3
20002898:	f000 fbc6 	bl	20003028 <__udivsi3>
2000289c:	0003      	movs	r3, r0
2000289e:	001a      	movs	r2, r3
200028a0:	2307      	movs	r3, #7
200028a2:	4013      	ands	r3, r2
200028a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200028a6:	4313      	orrs	r3, r2
200028a8:	627b      	str	r3, [r7, #36]	; 0x24
200028aa:	e00d      	b.n	200028c8 <USART_Init+0x170>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
200028ac:	69bb      	ldr	r3, [r7, #24]
200028ae:	011b      	lsls	r3, r3, #4
200028b0:	3332      	adds	r3, #50	; 0x32
200028b2:	2164      	movs	r1, #100	; 0x64
200028b4:	0018      	movs	r0, r3
200028b6:	f000 fbb7 	bl	20003028 <__udivsi3>
200028ba:	0003      	movs	r3, r0
200028bc:	001a      	movs	r2, r3
200028be:	230f      	movs	r3, #15
200028c0:	4013      	ands	r3, r2
200028c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200028c4:	4313      	orrs	r3, r2
200028c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
200028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200028ca:	b29a      	uxth	r2, r3
200028cc:	687b      	ldr	r3, [r7, #4]
200028ce:	811a      	strh	r2, [r3, #8]
}
200028d0:	46c0      	nop			; (mov r8, r8)
200028d2:	46bd      	mov	sp, r7
200028d4:	b00a      	add	sp, #40	; 0x28
200028d6:	bd80      	pop	{r7, pc}
200028d8:	ffffcfff 			; <UNDEFINED> instruction: 0xffffcfff
200028dc:	ffffe9f3 			; <UNDEFINED> instruction: 0xffffe9f3
200028e0:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
200028e4:	40011000 	andmi	r1, r1, r0
200028e8:	40011400 	andmi	r1, r1, r0, lsl #8

200028ec <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
200028ec:	b580      	push	{r7, lr}
200028ee:	b082      	sub	sp, #8
200028f0:	af00      	add	r7, sp, #0
200028f2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
200028f4:	687b      	ldr	r3, [r7, #4]
200028f6:	2296      	movs	r2, #150	; 0x96
200028f8:	0192      	lsls	r2, r2, #6
200028fa:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
200028fc:	687b      	ldr	r3, [r7, #4]
200028fe:	2200      	movs	r2, #0
20002900:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
20002902:	687b      	ldr	r3, [r7, #4]
20002904:	2200      	movs	r2, #0
20002906:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
20002908:	687b      	ldr	r3, [r7, #4]
2000290a:	2200      	movs	r2, #0
2000290c:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
2000290e:	687b      	ldr	r3, [r7, #4]
20002910:	220c      	movs	r2, #12
20002912:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
20002914:	687b      	ldr	r3, [r7, #4]
20002916:	2200      	movs	r2, #0
20002918:	819a      	strh	r2, [r3, #12]
}
2000291a:	46c0      	nop			; (mov r8, r8)
2000291c:	46bd      	mov	sp, r7
2000291e:	b002      	add	sp, #8
20002920:	bd80      	pop	{r7, pc}

20002922 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20002922:	b580      	push	{r7, lr}
20002924:	b084      	sub	sp, #16
20002926:	af00      	add	r7, sp, #0
20002928:	6078      	str	r0, [r7, #4]
2000292a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
2000292c:	2300      	movs	r3, #0
2000292e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
20002930:	687b      	ldr	r3, [r7, #4]
20002932:	8a1b      	ldrh	r3, [r3, #16]
20002934:	b29b      	uxth	r3, r3
20002936:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
20002938:	68fb      	ldr	r3, [r7, #12]
2000293a:	4a0e      	ldr	r2, [pc, #56]	; (20002974 <USART_ClockInit+0x52>)
2000293c:	4013      	ands	r3, r2
2000293e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20002940:	683b      	ldr	r3, [r7, #0]
20002942:	881a      	ldrh	r2, [r3, #0]
20002944:	683b      	ldr	r3, [r7, #0]
20002946:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
20002948:	4313      	orrs	r3, r2
2000294a:	b29a      	uxth	r2, r3
2000294c:	683b      	ldr	r3, [r7, #0]
2000294e:	889b      	ldrh	r3, [r3, #4]
20002950:	4313      	orrs	r3, r2
20002952:	b29a      	uxth	r2, r3
20002954:	683b      	ldr	r3, [r7, #0]
20002956:	88db      	ldrh	r3, [r3, #6]
20002958:	4313      	orrs	r3, r2
2000295a:	b29b      	uxth	r3, r3
2000295c:	001a      	movs	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
2000295e:	68fb      	ldr	r3, [r7, #12]
20002960:	4313      	orrs	r3, r2
20002962:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
20002964:	68fb      	ldr	r3, [r7, #12]
20002966:	b29a      	uxth	r2, r3
20002968:	687b      	ldr	r3, [r7, #4]
2000296a:	821a      	strh	r2, [r3, #16]
}
2000296c:	46c0      	nop			; (mov r8, r8)
2000296e:	46bd      	mov	sp, r7
20002970:	b004      	add	sp, #16
20002972:	bd80      	pop	{r7, pc}
20002974:	fffff0ff 			; <UNDEFINED> instruction: 0xfffff0ff

20002978 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20002978:	b580      	push	{r7, lr}
2000297a:	b082      	sub	sp, #8
2000297c:	af00      	add	r7, sp, #0
2000297e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
20002980:	687b      	ldr	r3, [r7, #4]
20002982:	2200      	movs	r2, #0
20002984:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
20002986:	687b      	ldr	r3, [r7, #4]
20002988:	2200      	movs	r2, #0
2000298a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
2000298c:	687b      	ldr	r3, [r7, #4]
2000298e:	2200      	movs	r2, #0
20002990:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
20002992:	687b      	ldr	r3, [r7, #4]
20002994:	2200      	movs	r2, #0
20002996:	80da      	strh	r2, [r3, #6]
}
20002998:	46c0      	nop			; (mov r8, r8)
2000299a:	46bd      	mov	sp, r7
2000299c:	b002      	add	sp, #8
2000299e:	bd80      	pop	{r7, pc}

200029a0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
200029a0:	b580      	push	{r7, lr}
200029a2:	b082      	sub	sp, #8
200029a4:	af00      	add	r7, sp, #0
200029a6:	6078      	str	r0, [r7, #4]
200029a8:	000a      	movs	r2, r1
200029aa:	1cfb      	adds	r3, r7, #3
200029ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
200029ae:	1cfb      	adds	r3, r7, #3
200029b0:	781b      	ldrb	r3, [r3, #0]
200029b2:	2b00      	cmp	r3, #0
200029b4:	d009      	beq.n	200029ca <USART_Cmd+0x2a>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
200029b6:	687b      	ldr	r3, [r7, #4]
200029b8:	899b      	ldrh	r3, [r3, #12]
200029ba:	b29b      	uxth	r3, r3
200029bc:	2280      	movs	r2, #128	; 0x80
200029be:	0192      	lsls	r2, r2, #6
200029c0:	4313      	orrs	r3, r2
200029c2:	b29a      	uxth	r2, r3
200029c4:	687b      	ldr	r3, [r7, #4]
200029c6:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
200029c8:	e007      	b.n	200029da <USART_Cmd+0x3a>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
200029ca:	687b      	ldr	r3, [r7, #4]
200029cc:	899b      	ldrh	r3, [r3, #12]
200029ce:	b29b      	uxth	r3, r3
200029d0:	4a04      	ldr	r2, [pc, #16]	; (200029e4 <USART_Cmd+0x44>)
200029d2:	4013      	ands	r3, r2
200029d4:	b29a      	uxth	r2, r3
200029d6:	687b      	ldr	r3, [r7, #4]
200029d8:	819a      	strh	r2, [r3, #12]
}
200029da:	46c0      	nop			; (mov r8, r8)
200029dc:	46bd      	mov	sp, r7
200029de:	b002      	add	sp, #8
200029e0:	bd80      	pop	{r7, pc}
200029e2:	46c0      	nop			; (mov r8, r8)
200029e4:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

200029e8 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
200029e8:	b580      	push	{r7, lr}
200029ea:	b082      	sub	sp, #8
200029ec:	af00      	add	r7, sp, #0
200029ee:	6078      	str	r0, [r7, #4]
200029f0:	000a      	movs	r2, r1
200029f2:	1cfb      	adds	r3, r7, #3
200029f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
200029f6:	687b      	ldr	r3, [r7, #4]
200029f8:	8b1b      	ldrh	r3, [r3, #24]
200029fa:	b29b      	uxth	r3, r3
200029fc:	22ff      	movs	r2, #255	; 0xff
200029fe:	4393      	bics	r3, r2
20002a00:	b29a      	uxth	r2, r3
20002a02:	687b      	ldr	r3, [r7, #4]
20002a04:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
20002a06:	687b      	ldr	r3, [r7, #4]
20002a08:	8b1b      	ldrh	r3, [r3, #24]
20002a0a:	b29a      	uxth	r2, r3
20002a0c:	1cfb      	adds	r3, r7, #3
20002a0e:	781b      	ldrb	r3, [r3, #0]
20002a10:	b29b      	uxth	r3, r3
20002a12:	4313      	orrs	r3, r2
20002a14:	b29a      	uxth	r2, r3
20002a16:	687b      	ldr	r3, [r7, #4]
20002a18:	831a      	strh	r2, [r3, #24]
}
20002a1a:	46c0      	nop			; (mov r8, r8)
20002a1c:	46bd      	mov	sp, r7
20002a1e:	b002      	add	sp, #8
20002a20:	bd80      	pop	{r7, pc}

20002a22 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002a22:	b580      	push	{r7, lr}
20002a24:	b082      	sub	sp, #8
20002a26:	af00      	add	r7, sp, #0
20002a28:	6078      	str	r0, [r7, #4]
20002a2a:	000a      	movs	r2, r1
20002a2c:	1cfb      	adds	r3, r7, #3
20002a2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002a30:	1cfb      	adds	r3, r7, #3
20002a32:	781b      	ldrb	r3, [r3, #0]
20002a34:	2b00      	cmp	r3, #0
20002a36:	d008      	beq.n	20002a4a <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
20002a38:	687b      	ldr	r3, [r7, #4]
20002a3a:	899b      	ldrh	r3, [r3, #12]
20002a3c:	b29b      	uxth	r3, r3
20002a3e:	4a09      	ldr	r2, [pc, #36]	; (20002a64 <USART_OverSampling8Cmd+0x42>)
20002a40:	4313      	orrs	r3, r2
20002a42:	b29a      	uxth	r2, r3
20002a44:	687b      	ldr	r3, [r7, #4]
20002a46:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
20002a48:	e007      	b.n	20002a5a <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
20002a4a:	687b      	ldr	r3, [r7, #4]
20002a4c:	899b      	ldrh	r3, [r3, #12]
20002a4e:	b29b      	uxth	r3, r3
20002a50:	045b      	lsls	r3, r3, #17
20002a52:	0c5b      	lsrs	r3, r3, #17
20002a54:	b29a      	uxth	r2, r3
20002a56:	687b      	ldr	r3, [r7, #4]
20002a58:	819a      	strh	r2, [r3, #12]
}  
20002a5a:	46c0      	nop			; (mov r8, r8)
20002a5c:	46bd      	mov	sp, r7
20002a5e:	b002      	add	sp, #8
20002a60:	bd80      	pop	{r7, pc}
20002a62:	46c0      	nop			; (mov r8, r8)
20002a64:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000

20002a68 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002a68:	b580      	push	{r7, lr}
20002a6a:	b082      	sub	sp, #8
20002a6c:	af00      	add	r7, sp, #0
20002a6e:	6078      	str	r0, [r7, #4]
20002a70:	000a      	movs	r2, r1
20002a72:	1cfb      	adds	r3, r7, #3
20002a74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002a76:	1cfb      	adds	r3, r7, #3
20002a78:	781b      	ldrb	r3, [r3, #0]
20002a7a:	2b00      	cmp	r3, #0
20002a7c:	d009      	beq.n	20002a92 <USART_OneBitMethodCmd+0x2a>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
20002a7e:	687b      	ldr	r3, [r7, #4]
20002a80:	8a9b      	ldrh	r3, [r3, #20]
20002a82:	b29b      	uxth	r3, r3
20002a84:	2280      	movs	r2, #128	; 0x80
20002a86:	0112      	lsls	r2, r2, #4
20002a88:	4313      	orrs	r3, r2
20002a8a:	b29a      	uxth	r2, r3
20002a8c:	687b      	ldr	r3, [r7, #4]
20002a8e:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
  }
}
20002a90:	e007      	b.n	20002aa2 <USART_OneBitMethodCmd+0x3a>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
20002a92:	687b      	ldr	r3, [r7, #4]
20002a94:	8a9b      	ldrh	r3, [r3, #20]
20002a96:	b29b      	uxth	r3, r3
20002a98:	4a04      	ldr	r2, [pc, #16]	; (20002aac <USART_OneBitMethodCmd+0x44>)
20002a9a:	4013      	ands	r3, r2
20002a9c:	b29a      	uxth	r2, r3
20002a9e:	687b      	ldr	r3, [r7, #4]
20002aa0:	829a      	strh	r2, [r3, #20]
}
20002aa2:	46c0      	nop			; (mov r8, r8)
20002aa4:	46bd      	mov	sp, r7
20002aa6:	b002      	add	sp, #8
20002aa8:	bd80      	pop	{r7, pc}
20002aaa:	46c0      	nop			; (mov r8, r8)
20002aac:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20002ab0 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
20002ab0:	b580      	push	{r7, lr}
20002ab2:	b082      	sub	sp, #8
20002ab4:	af00      	add	r7, sp, #0
20002ab6:	6078      	str	r0, [r7, #4]
20002ab8:	000a      	movs	r2, r1
20002aba:	1cbb      	adds	r3, r7, #2
20002abc:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
20002abe:	1cbb      	adds	r3, r7, #2
20002ac0:	881b      	ldrh	r3, [r3, #0]
20002ac2:	05db      	lsls	r3, r3, #23
20002ac4:	0ddb      	lsrs	r3, r3, #23
20002ac6:	b29a      	uxth	r2, r3
20002ac8:	687b      	ldr	r3, [r7, #4]
20002aca:	809a      	strh	r2, [r3, #4]
}
20002acc:	46c0      	nop			; (mov r8, r8)
20002ace:	46bd      	mov	sp, r7
20002ad0:	b002      	add	sp, #8
20002ad2:	bd80      	pop	{r7, pc}

20002ad4 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
20002ad4:	b580      	push	{r7, lr}
20002ad6:	b082      	sub	sp, #8
20002ad8:	af00      	add	r7, sp, #0
20002ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
20002adc:	687b      	ldr	r3, [r7, #4]
20002ade:	889b      	ldrh	r3, [r3, #4]
20002ae0:	b29b      	uxth	r3, r3
20002ae2:	05db      	lsls	r3, r3, #23
20002ae4:	0ddb      	lsrs	r3, r3, #23
20002ae6:	b29b      	uxth	r3, r3
}
20002ae8:	0018      	movs	r0, r3
20002aea:	46bd      	mov	sp, r7
20002aec:	b002      	add	sp, #8
20002aee:	bd80      	pop	{r7, pc}

20002af0 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
20002af0:	b580      	push	{r7, lr}
20002af2:	b082      	sub	sp, #8
20002af4:	af00      	add	r7, sp, #0
20002af6:	6078      	str	r0, [r7, #4]
20002af8:	000a      	movs	r2, r1
20002afa:	1cfb      	adds	r3, r7, #3
20002afc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
20002afe:	687b      	ldr	r3, [r7, #4]
20002b00:	8a1b      	ldrh	r3, [r3, #16]
20002b02:	b29b      	uxth	r3, r3
20002b04:	220f      	movs	r2, #15
20002b06:	4393      	bics	r3, r2
20002b08:	b29a      	uxth	r2, r3
20002b0a:	687b      	ldr	r3, [r7, #4]
20002b0c:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
20002b0e:	687b      	ldr	r3, [r7, #4]
20002b10:	8a1b      	ldrh	r3, [r3, #16]
20002b12:	b29a      	uxth	r2, r3
20002b14:	1cfb      	adds	r3, r7, #3
20002b16:	781b      	ldrb	r3, [r3, #0]
20002b18:	b29b      	uxth	r3, r3
20002b1a:	4313      	orrs	r3, r2
20002b1c:	b29a      	uxth	r2, r3
20002b1e:	687b      	ldr	r3, [r7, #4]
20002b20:	821a      	strh	r2, [r3, #16]
}
20002b22:	46c0      	nop			; (mov r8, r8)
20002b24:	46bd      	mov	sp, r7
20002b26:	b002      	add	sp, #8
20002b28:	bd80      	pop	{r7, pc}

20002b2a <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002b2a:	b580      	push	{r7, lr}
20002b2c:	b082      	sub	sp, #8
20002b2e:	af00      	add	r7, sp, #0
20002b30:	6078      	str	r0, [r7, #4]
20002b32:	000a      	movs	r2, r1
20002b34:	1cfb      	adds	r3, r7, #3
20002b36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
20002b38:	1cfb      	adds	r3, r7, #3
20002b3a:	781b      	ldrb	r3, [r3, #0]
20002b3c:	2b00      	cmp	r3, #0
20002b3e:	d008      	beq.n	20002b52 <USART_ReceiverWakeUpCmd+0x28>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
20002b40:	687b      	ldr	r3, [r7, #4]
20002b42:	899b      	ldrh	r3, [r3, #12]
20002b44:	b29b      	uxth	r3, r3
20002b46:	2202      	movs	r2, #2
20002b48:	4313      	orrs	r3, r2
20002b4a:	b29a      	uxth	r2, r3
20002b4c:	687b      	ldr	r3, [r7, #4]
20002b4e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
  }
}
20002b50:	e007      	b.n	20002b62 <USART_ReceiverWakeUpCmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
20002b52:	687b      	ldr	r3, [r7, #4]
20002b54:	899b      	ldrh	r3, [r3, #12]
20002b56:	b29b      	uxth	r3, r3
20002b58:	2202      	movs	r2, #2
20002b5a:	4393      	bics	r3, r2
20002b5c:	b29a      	uxth	r2, r3
20002b5e:	687b      	ldr	r3, [r7, #4]
20002b60:	819a      	strh	r2, [r3, #12]
}
20002b62:	46c0      	nop			; (mov r8, r8)
20002b64:	46bd      	mov	sp, r7
20002b66:	b002      	add	sp, #8
20002b68:	bd80      	pop	{r7, pc}

20002b6a <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
20002b6a:	b580      	push	{r7, lr}
20002b6c:	b082      	sub	sp, #8
20002b6e:	af00      	add	r7, sp, #0
20002b70:	6078      	str	r0, [r7, #4]
20002b72:	000a      	movs	r2, r1
20002b74:	1cbb      	adds	r3, r7, #2
20002b76:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
20002b78:	687b      	ldr	r3, [r7, #4]
20002b7a:	899b      	ldrh	r3, [r3, #12]
20002b7c:	b29b      	uxth	r3, r3
20002b7e:	4a09      	ldr	r2, [pc, #36]	; (20002ba4 <USART_WakeUpConfig+0x3a>)
20002b80:	4013      	ands	r3, r2
20002b82:	b29a      	uxth	r2, r3
20002b84:	687b      	ldr	r3, [r7, #4]
20002b86:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
20002b88:	687b      	ldr	r3, [r7, #4]
20002b8a:	899b      	ldrh	r3, [r3, #12]
20002b8c:	b29a      	uxth	r2, r3
20002b8e:	1cbb      	adds	r3, r7, #2
20002b90:	881b      	ldrh	r3, [r3, #0]
20002b92:	4313      	orrs	r3, r2
20002b94:	b29a      	uxth	r2, r3
20002b96:	687b      	ldr	r3, [r7, #4]
20002b98:	819a      	strh	r2, [r3, #12]
}
20002b9a:	46c0      	nop			; (mov r8, r8)
20002b9c:	46bd      	mov	sp, r7
20002b9e:	b002      	add	sp, #8
20002ba0:	bd80      	pop	{r7, pc}
20002ba2:	46c0      	nop			; (mov r8, r8)
20002ba4:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20002ba8 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
20002ba8:	b580      	push	{r7, lr}
20002baa:	b082      	sub	sp, #8
20002bac:	af00      	add	r7, sp, #0
20002bae:	6078      	str	r0, [r7, #4]
20002bb0:	000a      	movs	r2, r1
20002bb2:	1cbb      	adds	r3, r7, #2
20002bb4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
20002bb6:	687b      	ldr	r3, [r7, #4]
20002bb8:	8a1b      	ldrh	r3, [r3, #16]
20002bba:	b29b      	uxth	r3, r3
20002bbc:	2220      	movs	r2, #32
20002bbe:	4393      	bics	r3, r2
20002bc0:	b29a      	uxth	r2, r3
20002bc2:	687b      	ldr	r3, [r7, #4]
20002bc4:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
20002bc6:	687b      	ldr	r3, [r7, #4]
20002bc8:	8a1b      	ldrh	r3, [r3, #16]
20002bca:	b29a      	uxth	r2, r3
20002bcc:	1cbb      	adds	r3, r7, #2
20002bce:	881b      	ldrh	r3, [r3, #0]
20002bd0:	4313      	orrs	r3, r2
20002bd2:	b29a      	uxth	r2, r3
20002bd4:	687b      	ldr	r3, [r7, #4]
20002bd6:	821a      	strh	r2, [r3, #16]
}
20002bd8:	46c0      	nop			; (mov r8, r8)
20002bda:	46bd      	mov	sp, r7
20002bdc:	b002      	add	sp, #8
20002bde:	bd80      	pop	{r7, pc}

20002be0 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002be0:	b580      	push	{r7, lr}
20002be2:	b082      	sub	sp, #8
20002be4:	af00      	add	r7, sp, #0
20002be6:	6078      	str	r0, [r7, #4]
20002be8:	000a      	movs	r2, r1
20002bea:	1cfb      	adds	r3, r7, #3
20002bec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002bee:	1cfb      	adds	r3, r7, #3
20002bf0:	781b      	ldrb	r3, [r3, #0]
20002bf2:	2b00      	cmp	r3, #0
20002bf4:	d009      	beq.n	20002c0a <USART_LINCmd+0x2a>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
20002bf6:	687b      	ldr	r3, [r7, #4]
20002bf8:	8a1b      	ldrh	r3, [r3, #16]
20002bfa:	b29b      	uxth	r3, r3
20002bfc:	2280      	movs	r2, #128	; 0x80
20002bfe:	01d2      	lsls	r2, r2, #7
20002c00:	4313      	orrs	r3, r2
20002c02:	b29a      	uxth	r2, r3
20002c04:	687b      	ldr	r3, [r7, #4]
20002c06:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
  }
}
20002c08:	e007      	b.n	20002c1a <USART_LINCmd+0x3a>
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
20002c0a:	687b      	ldr	r3, [r7, #4]
20002c0c:	8a1b      	ldrh	r3, [r3, #16]
20002c0e:	b29b      	uxth	r3, r3
20002c10:	4a04      	ldr	r2, [pc, #16]	; (20002c24 <USART_LINCmd+0x44>)
20002c12:	4013      	ands	r3, r2
20002c14:	b29a      	uxth	r2, r3
20002c16:	687b      	ldr	r3, [r7, #4]
20002c18:	821a      	strh	r2, [r3, #16]
}
20002c1a:	46c0      	nop			; (mov r8, r8)
20002c1c:	46bd      	mov	sp, r7
20002c1e:	b002      	add	sp, #8
20002c20:	bd80      	pop	{r7, pc}
20002c22:	46c0      	nop			; (mov r8, r8)
20002c24:	ffffbfff 			; <UNDEFINED> instruction: 0xffffbfff

20002c28 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
20002c28:	b580      	push	{r7, lr}
20002c2a:	b082      	sub	sp, #8
20002c2c:	af00      	add	r7, sp, #0
20002c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
20002c30:	687b      	ldr	r3, [r7, #4]
20002c32:	899b      	ldrh	r3, [r3, #12]
20002c34:	b29b      	uxth	r3, r3
20002c36:	2201      	movs	r2, #1
20002c38:	4313      	orrs	r3, r2
20002c3a:	b29a      	uxth	r2, r3
20002c3c:	687b      	ldr	r3, [r7, #4]
20002c3e:	819a      	strh	r2, [r3, #12]
}
20002c40:	46c0      	nop			; (mov r8, r8)
20002c42:	46bd      	mov	sp, r7
20002c44:	b002      	add	sp, #8
20002c46:	bd80      	pop	{r7, pc}

20002c48 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002c48:	b580      	push	{r7, lr}
20002c4a:	b082      	sub	sp, #8
20002c4c:	af00      	add	r7, sp, #0
20002c4e:	6078      	str	r0, [r7, #4]
20002c50:	000a      	movs	r2, r1
20002c52:	1cfb      	adds	r3, r7, #3
20002c54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002c56:	1cfb      	adds	r3, r7, #3
20002c58:	781b      	ldrb	r3, [r3, #0]
20002c5a:	2b00      	cmp	r3, #0
20002c5c:	d008      	beq.n	20002c70 <USART_HalfDuplexCmd+0x28>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
20002c5e:	687b      	ldr	r3, [r7, #4]
20002c60:	8a9b      	ldrh	r3, [r3, #20]
20002c62:	b29b      	uxth	r3, r3
20002c64:	2208      	movs	r2, #8
20002c66:	4313      	orrs	r3, r2
20002c68:	b29a      	uxth	r2, r3
20002c6a:	687b      	ldr	r3, [r7, #4]
20002c6c:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
20002c6e:	e007      	b.n	20002c80 <USART_HalfDuplexCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
20002c70:	687b      	ldr	r3, [r7, #4]
20002c72:	8a9b      	ldrh	r3, [r3, #20]
20002c74:	b29b      	uxth	r3, r3
20002c76:	2208      	movs	r2, #8
20002c78:	4393      	bics	r3, r2
20002c7a:	b29a      	uxth	r2, r3
20002c7c:	687b      	ldr	r3, [r7, #4]
20002c7e:	829a      	strh	r2, [r3, #20]
}
20002c80:	46c0      	nop			; (mov r8, r8)
20002c82:	46bd      	mov	sp, r7
20002c84:	b002      	add	sp, #8
20002c86:	bd80      	pop	{r7, pc}

20002c88 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
20002c88:	b580      	push	{r7, lr}
20002c8a:	b082      	sub	sp, #8
20002c8c:	af00      	add	r7, sp, #0
20002c8e:	6078      	str	r0, [r7, #4]
20002c90:	000a      	movs	r2, r1
20002c92:	1cfb      	adds	r3, r7, #3
20002c94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
20002c96:	687b      	ldr	r3, [r7, #4]
20002c98:	8b1b      	ldrh	r3, [r3, #24]
20002c9a:	b29b      	uxth	r3, r3
20002c9c:	22ff      	movs	r2, #255	; 0xff
20002c9e:	4013      	ands	r3, r2
20002ca0:	b29a      	uxth	r2, r3
20002ca2:	687b      	ldr	r3, [r7, #4]
20002ca4:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
20002ca6:	687b      	ldr	r3, [r7, #4]
20002ca8:	8b1b      	ldrh	r3, [r3, #24]
20002caa:	b29a      	uxth	r2, r3
20002cac:	1cfb      	adds	r3, r7, #3
20002cae:	781b      	ldrb	r3, [r3, #0]
20002cb0:	b29b      	uxth	r3, r3
20002cb2:	021b      	lsls	r3, r3, #8
20002cb4:	b29b      	uxth	r3, r3
20002cb6:	4313      	orrs	r3, r2
20002cb8:	b29a      	uxth	r2, r3
20002cba:	687b      	ldr	r3, [r7, #4]
20002cbc:	831a      	strh	r2, [r3, #24]
}
20002cbe:	46c0      	nop			; (mov r8, r8)
20002cc0:	46bd      	mov	sp, r7
20002cc2:	b002      	add	sp, #8
20002cc4:	bd80      	pop	{r7, pc}

20002cc6 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002cc6:	b580      	push	{r7, lr}
20002cc8:	b082      	sub	sp, #8
20002cca:	af00      	add	r7, sp, #0
20002ccc:	6078      	str	r0, [r7, #4]
20002cce:	000a      	movs	r2, r1
20002cd0:	1cfb      	adds	r3, r7, #3
20002cd2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002cd4:	1cfb      	adds	r3, r7, #3
20002cd6:	781b      	ldrb	r3, [r3, #0]
20002cd8:	2b00      	cmp	r3, #0
20002cda:	d008      	beq.n	20002cee <USART_SmartCardCmd+0x28>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
20002cdc:	687b      	ldr	r3, [r7, #4]
20002cde:	8a9b      	ldrh	r3, [r3, #20]
20002ce0:	b29b      	uxth	r3, r3
20002ce2:	2220      	movs	r2, #32
20002ce4:	4313      	orrs	r3, r2
20002ce6:	b29a      	uxth	r2, r3
20002ce8:	687b      	ldr	r3, [r7, #4]
20002cea:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
  }
}
20002cec:	e007      	b.n	20002cfe <USART_SmartCardCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
20002cee:	687b      	ldr	r3, [r7, #4]
20002cf0:	8a9b      	ldrh	r3, [r3, #20]
20002cf2:	b29b      	uxth	r3, r3
20002cf4:	2220      	movs	r2, #32
20002cf6:	4393      	bics	r3, r2
20002cf8:	b29a      	uxth	r2, r3
20002cfa:	687b      	ldr	r3, [r7, #4]
20002cfc:	829a      	strh	r2, [r3, #20]
}
20002cfe:	46c0      	nop			; (mov r8, r8)
20002d00:	46bd      	mov	sp, r7
20002d02:	b002      	add	sp, #8
20002d04:	bd80      	pop	{r7, pc}

20002d06 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002d06:	b580      	push	{r7, lr}
20002d08:	b082      	sub	sp, #8
20002d0a:	af00      	add	r7, sp, #0
20002d0c:	6078      	str	r0, [r7, #4]
20002d0e:	000a      	movs	r2, r1
20002d10:	1cfb      	adds	r3, r7, #3
20002d12:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002d14:	1cfb      	adds	r3, r7, #3
20002d16:	781b      	ldrb	r3, [r3, #0]
20002d18:	2b00      	cmp	r3, #0
20002d1a:	d008      	beq.n	20002d2e <USART_SmartCardNACKCmd+0x28>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
20002d1c:	687b      	ldr	r3, [r7, #4]
20002d1e:	8a9b      	ldrh	r3, [r3, #20]
20002d20:	b29b      	uxth	r3, r3
20002d22:	2210      	movs	r2, #16
20002d24:	4313      	orrs	r3, r2
20002d26:	b29a      	uxth	r2, r3
20002d28:	687b      	ldr	r3, [r7, #4]
20002d2a:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
  }
}
20002d2c:	e007      	b.n	20002d3e <USART_SmartCardNACKCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
20002d2e:	687b      	ldr	r3, [r7, #4]
20002d30:	8a9b      	ldrh	r3, [r3, #20]
20002d32:	b29b      	uxth	r3, r3
20002d34:	2210      	movs	r2, #16
20002d36:	4393      	bics	r3, r2
20002d38:	b29a      	uxth	r2, r3
20002d3a:	687b      	ldr	r3, [r7, #4]
20002d3c:	829a      	strh	r2, [r3, #20]
}
20002d3e:	46c0      	nop			; (mov r8, r8)
20002d40:	46bd      	mov	sp, r7
20002d42:	b002      	add	sp, #8
20002d44:	bd80      	pop	{r7, pc}

20002d46 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
20002d46:	b580      	push	{r7, lr}
20002d48:	b082      	sub	sp, #8
20002d4a:	af00      	add	r7, sp, #0
20002d4c:	6078      	str	r0, [r7, #4]
20002d4e:	000a      	movs	r2, r1
20002d50:	1cbb      	adds	r3, r7, #2
20002d52:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
20002d54:	687b      	ldr	r3, [r7, #4]
20002d56:	8a9b      	ldrh	r3, [r3, #20]
20002d58:	b29b      	uxth	r3, r3
20002d5a:	2204      	movs	r2, #4
20002d5c:	4393      	bics	r3, r2
20002d5e:	b29a      	uxth	r2, r3
20002d60:	687b      	ldr	r3, [r7, #4]
20002d62:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
20002d64:	687b      	ldr	r3, [r7, #4]
20002d66:	8a9b      	ldrh	r3, [r3, #20]
20002d68:	b29a      	uxth	r2, r3
20002d6a:	1cbb      	adds	r3, r7, #2
20002d6c:	881b      	ldrh	r3, [r3, #0]
20002d6e:	4313      	orrs	r3, r2
20002d70:	b29a      	uxth	r2, r3
20002d72:	687b      	ldr	r3, [r7, #4]
20002d74:	829a      	strh	r2, [r3, #20]
}
20002d76:	46c0      	nop			; (mov r8, r8)
20002d78:	46bd      	mov	sp, r7
20002d7a:	b002      	add	sp, #8
20002d7c:	bd80      	pop	{r7, pc}

20002d7e <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002d7e:	b580      	push	{r7, lr}
20002d80:	b082      	sub	sp, #8
20002d82:	af00      	add	r7, sp, #0
20002d84:	6078      	str	r0, [r7, #4]
20002d86:	000a      	movs	r2, r1
20002d88:	1cfb      	adds	r3, r7, #3
20002d8a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
20002d8c:	1cfb      	adds	r3, r7, #3
20002d8e:	781b      	ldrb	r3, [r3, #0]
20002d90:	2b00      	cmp	r3, #0
20002d92:	d008      	beq.n	20002da6 <USART_IrDACmd+0x28>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
20002d94:	687b      	ldr	r3, [r7, #4]
20002d96:	8a9b      	ldrh	r3, [r3, #20]
20002d98:	b29b      	uxth	r3, r3
20002d9a:	2202      	movs	r2, #2
20002d9c:	4313      	orrs	r3, r2
20002d9e:	b29a      	uxth	r2, r3
20002da0:	687b      	ldr	r3, [r7, #4]
20002da2:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
  }
}
20002da4:	e007      	b.n	20002db6 <USART_IrDACmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
20002da6:	687b      	ldr	r3, [r7, #4]
20002da8:	8a9b      	ldrh	r3, [r3, #20]
20002daa:	b29b      	uxth	r3, r3
20002dac:	2202      	movs	r2, #2
20002dae:	4393      	bics	r3, r2
20002db0:	b29a      	uxth	r2, r3
20002db2:	687b      	ldr	r3, [r7, #4]
20002db4:	829a      	strh	r2, [r3, #20]
}
20002db6:	46c0      	nop			; (mov r8, r8)
20002db8:	46bd      	mov	sp, r7
20002dba:	b002      	add	sp, #8
20002dbc:	bd80      	pop	{r7, pc}

20002dbe <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
20002dbe:	b580      	push	{r7, lr}
20002dc0:	b082      	sub	sp, #8
20002dc2:	af00      	add	r7, sp, #0
20002dc4:	6078      	str	r0, [r7, #4]
20002dc6:	0008      	movs	r0, r1
20002dc8:	0011      	movs	r1, r2
20002dca:	1cbb      	adds	r3, r7, #2
20002dcc:	1c02      	adds	r2, r0, #0
20002dce:	801a      	strh	r2, [r3, #0]
20002dd0:	1c7b      	adds	r3, r7, #1
20002dd2:	1c0a      	adds	r2, r1, #0
20002dd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
20002dd6:	1c7b      	adds	r3, r7, #1
20002dd8:	781b      	ldrb	r3, [r3, #0]
20002dda:	2b00      	cmp	r3, #0
20002ddc:	d009      	beq.n	20002df2 <USART_DMACmd+0x34>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
20002dde:	687b      	ldr	r3, [r7, #4]
20002de0:	8a9b      	ldrh	r3, [r3, #20]
20002de2:	b29a      	uxth	r2, r3
20002de4:	1cbb      	adds	r3, r7, #2
20002de6:	881b      	ldrh	r3, [r3, #0]
20002de8:	4313      	orrs	r3, r2
20002dea:	b29a      	uxth	r2, r3
20002dec:	687b      	ldr	r3, [r7, #4]
20002dee:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
20002df0:	e00a      	b.n	20002e08 <USART_DMACmd+0x4a>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
20002df2:	687b      	ldr	r3, [r7, #4]
20002df4:	8a9b      	ldrh	r3, [r3, #20]
20002df6:	b29b      	uxth	r3, r3
20002df8:	1cba      	adds	r2, r7, #2
20002dfa:	8812      	ldrh	r2, [r2, #0]
20002dfc:	43d2      	mvns	r2, r2
20002dfe:	b292      	uxth	r2, r2
20002e00:	4013      	ands	r3, r2
20002e02:	b29a      	uxth	r2, r3
20002e04:	687b      	ldr	r3, [r7, #4]
20002e06:	829a      	strh	r2, [r3, #20]
}
20002e08:	46c0      	nop			; (mov r8, r8)
20002e0a:	46bd      	mov	sp, r7
20002e0c:	b002      	add	sp, #8
20002e0e:	bd80      	pop	{r7, pc}

20002e10 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
20002e10:	b580      	push	{r7, lr}
20002e12:	b086      	sub	sp, #24
20002e14:	af00      	add	r7, sp, #0
20002e16:	6078      	str	r0, [r7, #4]
20002e18:	0008      	movs	r0, r1
20002e1a:	0011      	movs	r1, r2
20002e1c:	1cbb      	adds	r3, r7, #2
20002e1e:	1c02      	adds	r2, r0, #0
20002e20:	801a      	strh	r2, [r3, #0]
20002e22:	1c7b      	adds	r3, r7, #1
20002e24:	1c0a      	adds	r2, r1, #0
20002e26:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
20002e28:	2300      	movs	r3, #0
20002e2a:	613b      	str	r3, [r7, #16]
20002e2c:	2300      	movs	r3, #0
20002e2e:	60fb      	str	r3, [r7, #12]
20002e30:	2300      	movs	r3, #0
20002e32:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
20002e34:	2300      	movs	r3, #0
20002e36:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
20002e38:	687b      	ldr	r3, [r7, #4]
20002e3a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
20002e3c:	1cbb      	adds	r3, r7, #2
20002e3e:	881b      	ldrh	r3, [r3, #0]
20002e40:	b2db      	uxtb	r3, r3
20002e42:	095b      	lsrs	r3, r3, #5
20002e44:	b2db      	uxtb	r3, r3
20002e46:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
20002e48:	1cbb      	adds	r3, r7, #2
20002e4a:	881b      	ldrh	r3, [r3, #0]
20002e4c:	221f      	movs	r2, #31
20002e4e:	4013      	ands	r3, r2
20002e50:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
20002e52:	2201      	movs	r2, #1
20002e54:	68fb      	ldr	r3, [r7, #12]
20002e56:	409a      	lsls	r2, r3
20002e58:	0013      	movs	r3, r2
20002e5a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
20002e5c:	693b      	ldr	r3, [r7, #16]
20002e5e:	2b01      	cmp	r3, #1
20002e60:	d103      	bne.n	20002e6a <USART_ITConfig+0x5a>
  {
    usartxbase += 0x0C;
20002e62:	697b      	ldr	r3, [r7, #20]
20002e64:	330c      	adds	r3, #12
20002e66:	617b      	str	r3, [r7, #20]
20002e68:	e009      	b.n	20002e7e <USART_ITConfig+0x6e>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
20002e6a:	693b      	ldr	r3, [r7, #16]
20002e6c:	2b02      	cmp	r3, #2
20002e6e:	d103      	bne.n	20002e78 <USART_ITConfig+0x68>
  {
    usartxbase += 0x10;
20002e70:	697b      	ldr	r3, [r7, #20]
20002e72:	3310      	adds	r3, #16
20002e74:	617b      	str	r3, [r7, #20]
20002e76:	e002      	b.n	20002e7e <USART_ITConfig+0x6e>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
20002e78:	697b      	ldr	r3, [r7, #20]
20002e7a:	3314      	adds	r3, #20
20002e7c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
20002e7e:	1c7b      	adds	r3, r7, #1
20002e80:	781b      	ldrb	r3, [r3, #0]
20002e82:	2b00      	cmp	r3, #0
20002e84:	d006      	beq.n	20002e94 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
20002e86:	697b      	ldr	r3, [r7, #20]
20002e88:	6819      	ldr	r1, [r3, #0]
20002e8a:	697b      	ldr	r3, [r7, #20]
20002e8c:	68ba      	ldr	r2, [r7, #8]
20002e8e:	430a      	orrs	r2, r1
20002e90:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
20002e92:	e006      	b.n	20002ea2 <USART_ITConfig+0x92>
    *(__IO uint32_t*)usartxbase &= ~itmask;
20002e94:	697b      	ldr	r3, [r7, #20]
20002e96:	681a      	ldr	r2, [r3, #0]
20002e98:	68bb      	ldr	r3, [r7, #8]
20002e9a:	43d9      	mvns	r1, r3
20002e9c:	697b      	ldr	r3, [r7, #20]
20002e9e:	400a      	ands	r2, r1
20002ea0:	601a      	str	r2, [r3, #0]
}
20002ea2:	46c0      	nop			; (mov r8, r8)
20002ea4:	46bd      	mov	sp, r7
20002ea6:	b006      	add	sp, #24
20002ea8:	bd80      	pop	{r7, pc}

20002eaa <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
20002eaa:	b580      	push	{r7, lr}
20002eac:	b084      	sub	sp, #16
20002eae:	af00      	add	r7, sp, #0
20002eb0:	6078      	str	r0, [r7, #4]
20002eb2:	000a      	movs	r2, r1
20002eb4:	1cbb      	adds	r3, r7, #2
20002eb6:	801a      	strh	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
20002eb8:	230f      	movs	r3, #15
20002eba:	18fb      	adds	r3, r7, r3
20002ebc:	2200      	movs	r2, #0
20002ebe:	701a      	strb	r2, [r3, #0]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
20002ec0:	687b      	ldr	r3, [r7, #4]
20002ec2:	881b      	ldrh	r3, [r3, #0]
20002ec4:	b29b      	uxth	r3, r3
20002ec6:	1cba      	adds	r2, r7, #2
20002ec8:	8812      	ldrh	r2, [r2, #0]
20002eca:	4013      	ands	r3, r2
20002ecc:	b29b      	uxth	r3, r3
20002ece:	2b00      	cmp	r3, #0
20002ed0:	d004      	beq.n	20002edc <USART_GetFlagStatus+0x32>
  {
    bitstatus = SET;
20002ed2:	230f      	movs	r3, #15
20002ed4:	18fb      	adds	r3, r7, r3
20002ed6:	2201      	movs	r2, #1
20002ed8:	701a      	strb	r2, [r3, #0]
20002eda:	e003      	b.n	20002ee4 <USART_GetFlagStatus+0x3a>
  }
  else
  {
    bitstatus = RESET;
20002edc:	230f      	movs	r3, #15
20002ede:	18fb      	adds	r3, r7, r3
20002ee0:	2200      	movs	r2, #0
20002ee2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20002ee4:	230f      	movs	r3, #15
20002ee6:	18fb      	adds	r3, r7, r3
20002ee8:	781b      	ldrb	r3, [r3, #0]
}
20002eea:	0018      	movs	r0, r3
20002eec:	46bd      	mov	sp, r7
20002eee:	b004      	add	sp, #16
20002ef0:	bd80      	pop	{r7, pc}

20002ef2 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
20002ef2:	b580      	push	{r7, lr}
20002ef4:	b082      	sub	sp, #8
20002ef6:	af00      	add	r7, sp, #0
20002ef8:	6078      	str	r0, [r7, #4]
20002efa:	000a      	movs	r2, r1
20002efc:	1cbb      	adds	r3, r7, #2
20002efe:	801a      	strh	r2, [r3, #0]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
20002f00:	1cbb      	adds	r3, r7, #2
20002f02:	881b      	ldrh	r3, [r3, #0]
20002f04:	43db      	mvns	r3, r3
20002f06:	b29a      	uxth	r2, r3
20002f08:	687b      	ldr	r3, [r7, #4]
20002f0a:	801a      	strh	r2, [r3, #0]
}
20002f0c:	46c0      	nop			; (mov r8, r8)
20002f0e:	46bd      	mov	sp, r7
20002f10:	b002      	add	sp, #8
20002f12:	bd80      	pop	{r7, pc}

20002f14 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
20002f14:	b580      	push	{r7, lr}
20002f16:	b086      	sub	sp, #24
20002f18:	af00      	add	r7, sp, #0
20002f1a:	6078      	str	r0, [r7, #4]
20002f1c:	000a      	movs	r2, r1
20002f1e:	1cbb      	adds	r3, r7, #2
20002f20:	801a      	strh	r2, [r3, #0]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
20002f22:	2300      	movs	r3, #0
20002f24:	60fb      	str	r3, [r7, #12]
20002f26:	2300      	movs	r3, #0
20002f28:	617b      	str	r3, [r7, #20]
20002f2a:	2300      	movs	r3, #0
20002f2c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
20002f2e:	2313      	movs	r3, #19
20002f30:	18fb      	adds	r3, r7, r3
20002f32:	2200      	movs	r2, #0
20002f34:	701a      	strb	r2, [r3, #0]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
20002f36:	1cbb      	adds	r3, r7, #2
20002f38:	881b      	ldrh	r3, [r3, #0]
20002f3a:	b2db      	uxtb	r3, r3
20002f3c:	095b      	lsrs	r3, r3, #5
20002f3e:	b2db      	uxtb	r3, r3
20002f40:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
20002f42:	1cbb      	adds	r3, r7, #2
20002f44:	881b      	ldrh	r3, [r3, #0]
20002f46:	221f      	movs	r2, #31
20002f48:	4013      	ands	r3, r2
20002f4a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
20002f4c:	2201      	movs	r2, #1
20002f4e:	697b      	ldr	r3, [r7, #20]
20002f50:	409a      	lsls	r2, r3
20002f52:	0013      	movs	r3, r2
20002f54:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
20002f56:	68bb      	ldr	r3, [r7, #8]
20002f58:	2b01      	cmp	r3, #1
20002f5a:	d107      	bne.n	20002f6c <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
20002f5c:	687b      	ldr	r3, [r7, #4]
20002f5e:	899b      	ldrh	r3, [r3, #12]
20002f60:	b29b      	uxth	r3, r3
20002f62:	001a      	movs	r2, r3
20002f64:	697b      	ldr	r3, [r7, #20]
20002f66:	4013      	ands	r3, r2
20002f68:	617b      	str	r3, [r7, #20]
20002f6a:	e011      	b.n	20002f90 <USART_GetITStatus+0x7c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
20002f6c:	68bb      	ldr	r3, [r7, #8]
20002f6e:	2b02      	cmp	r3, #2
20002f70:	d107      	bne.n	20002f82 <USART_GetITStatus+0x6e>
  {
    itmask &= USARTx->CR2;
20002f72:	687b      	ldr	r3, [r7, #4]
20002f74:	8a1b      	ldrh	r3, [r3, #16]
20002f76:	b29b      	uxth	r3, r3
20002f78:	001a      	movs	r2, r3
20002f7a:	697b      	ldr	r3, [r7, #20]
20002f7c:	4013      	ands	r3, r2
20002f7e:	617b      	str	r3, [r7, #20]
20002f80:	e006      	b.n	20002f90 <USART_GetITStatus+0x7c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
20002f82:	687b      	ldr	r3, [r7, #4]
20002f84:	8a9b      	ldrh	r3, [r3, #20]
20002f86:	b29b      	uxth	r3, r3
20002f88:	001a      	movs	r2, r3
20002f8a:	697b      	ldr	r3, [r7, #20]
20002f8c:	4013      	ands	r3, r2
20002f8e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
20002f90:	1cbb      	adds	r3, r7, #2
20002f92:	881b      	ldrh	r3, [r3, #0]
20002f94:	0a1b      	lsrs	r3, r3, #8
20002f96:	b29b      	uxth	r3, r3
20002f98:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
20002f9a:	2201      	movs	r2, #1
20002f9c:	68fb      	ldr	r3, [r7, #12]
20002f9e:	409a      	lsls	r2, r3
20002fa0:	0013      	movs	r3, r2
20002fa2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
20002fa4:	687b      	ldr	r3, [r7, #4]
20002fa6:	881b      	ldrh	r3, [r3, #0]
20002fa8:	b29b      	uxth	r3, r3
20002faa:	001a      	movs	r2, r3
20002fac:	68fb      	ldr	r3, [r7, #12]
20002fae:	4013      	ands	r3, r2
20002fb0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
20002fb2:	697b      	ldr	r3, [r7, #20]
20002fb4:	2b00      	cmp	r3, #0
20002fb6:	d007      	beq.n	20002fc8 <USART_GetITStatus+0xb4>
20002fb8:	68fb      	ldr	r3, [r7, #12]
20002fba:	2b00      	cmp	r3, #0
20002fbc:	d004      	beq.n	20002fc8 <USART_GetITStatus+0xb4>
  {
    bitstatus = SET;
20002fbe:	2313      	movs	r3, #19
20002fc0:	18fb      	adds	r3, r7, r3
20002fc2:	2201      	movs	r2, #1
20002fc4:	701a      	strb	r2, [r3, #0]
20002fc6:	e003      	b.n	20002fd0 <USART_GetITStatus+0xbc>
  }
  else
  {
    bitstatus = RESET;
20002fc8:	2313      	movs	r3, #19
20002fca:	18fb      	adds	r3, r7, r3
20002fcc:	2200      	movs	r2, #0
20002fce:	701a      	strb	r2, [r3, #0]
  }
  
  return bitstatus;  
20002fd0:	2313      	movs	r3, #19
20002fd2:	18fb      	adds	r3, r7, r3
20002fd4:	781b      	ldrb	r3, [r3, #0]
}
20002fd6:	0018      	movs	r0, r3
20002fd8:	46bd      	mov	sp, r7
20002fda:	b006      	add	sp, #24
20002fdc:	bd80      	pop	{r7, pc}

20002fde <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
20002fde:	b580      	push	{r7, lr}
20002fe0:	b084      	sub	sp, #16
20002fe2:	af00      	add	r7, sp, #0
20002fe4:	6078      	str	r0, [r7, #4]
20002fe6:	000a      	movs	r2, r1
20002fe8:	1cbb      	adds	r3, r7, #2
20002fea:	801a      	strh	r2, [r3, #0]
  uint16_t bitpos = 0x00, itmask = 0x00;
20002fec:	210e      	movs	r1, #14
20002fee:	187b      	adds	r3, r7, r1
20002ff0:	2200      	movs	r2, #0
20002ff2:	801a      	strh	r2, [r3, #0]
20002ff4:	200c      	movs	r0, #12
20002ff6:	183b      	adds	r3, r7, r0
20002ff8:	2200      	movs	r2, #0
20002ffa:	801a      	strh	r2, [r3, #0]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
20002ffc:	187b      	adds	r3, r7, r1
20002ffe:	1cba      	adds	r2, r7, #2
20003000:	8812      	ldrh	r2, [r2, #0]
20003002:	0a12      	lsrs	r2, r2, #8
20003004:	801a      	strh	r2, [r3, #0]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
20003006:	187b      	adds	r3, r7, r1
20003008:	881b      	ldrh	r3, [r3, #0]
2000300a:	2201      	movs	r2, #1
2000300c:	409a      	lsls	r2, r3
2000300e:	183b      	adds	r3, r7, r0
20003010:	801a      	strh	r2, [r3, #0]
  USARTx->SR = (uint16_t)~itmask;
20003012:	183b      	adds	r3, r7, r0
20003014:	881b      	ldrh	r3, [r3, #0]
20003016:	43db      	mvns	r3, r3
20003018:	b29a      	uxth	r2, r3
2000301a:	687b      	ldr	r3, [r7, #4]
2000301c:	801a      	strh	r2, [r3, #0]
}
2000301e:	46c0      	nop			; (mov r8, r8)
20003020:	46bd      	mov	sp, r7
20003022:	b004      	add	sp, #16
20003024:	bd80      	pop	{r7, pc}
20003026:	46c0      	nop			; (mov r8, r8)

20003028 <__udivsi3>:
20003028:	2200      	movs	r2, #0
2000302a:	0843      	lsrs	r3, r0, #1
2000302c:	428b      	cmp	r3, r1
2000302e:	d374      	bcc.n	2000311a <__udivsi3+0xf2>
20003030:	0903      	lsrs	r3, r0, #4
20003032:	428b      	cmp	r3, r1
20003034:	d35f      	bcc.n	200030f6 <__udivsi3+0xce>
20003036:	0a03      	lsrs	r3, r0, #8
20003038:	428b      	cmp	r3, r1
2000303a:	d344      	bcc.n	200030c6 <__udivsi3+0x9e>
2000303c:	0b03      	lsrs	r3, r0, #12
2000303e:	428b      	cmp	r3, r1
20003040:	d328      	bcc.n	20003094 <__udivsi3+0x6c>
20003042:	0c03      	lsrs	r3, r0, #16
20003044:	428b      	cmp	r3, r1
20003046:	d30d      	bcc.n	20003064 <__udivsi3+0x3c>
20003048:	22ff      	movs	r2, #255	; 0xff
2000304a:	0209      	lsls	r1, r1, #8
2000304c:	ba12      	rev	r2, r2
2000304e:	0c03      	lsrs	r3, r0, #16
20003050:	428b      	cmp	r3, r1
20003052:	d302      	bcc.n	2000305a <__udivsi3+0x32>
20003054:	1212      	asrs	r2, r2, #8
20003056:	0209      	lsls	r1, r1, #8
20003058:	d065      	beq.n	20003126 <__udivsi3+0xfe>
2000305a:	0b03      	lsrs	r3, r0, #12
2000305c:	428b      	cmp	r3, r1
2000305e:	d319      	bcc.n	20003094 <__udivsi3+0x6c>
20003060:	e000      	b.n	20003064 <__udivsi3+0x3c>
20003062:	0a09      	lsrs	r1, r1, #8
20003064:	0bc3      	lsrs	r3, r0, #15
20003066:	428b      	cmp	r3, r1
20003068:	d301      	bcc.n	2000306e <__udivsi3+0x46>
2000306a:	03cb      	lsls	r3, r1, #15
2000306c:	1ac0      	subs	r0, r0, r3
2000306e:	4152      	adcs	r2, r2
20003070:	0b83      	lsrs	r3, r0, #14
20003072:	428b      	cmp	r3, r1
20003074:	d301      	bcc.n	2000307a <__udivsi3+0x52>
20003076:	038b      	lsls	r3, r1, #14
20003078:	1ac0      	subs	r0, r0, r3
2000307a:	4152      	adcs	r2, r2
2000307c:	0b43      	lsrs	r3, r0, #13
2000307e:	428b      	cmp	r3, r1
20003080:	d301      	bcc.n	20003086 <__udivsi3+0x5e>
20003082:	034b      	lsls	r3, r1, #13
20003084:	1ac0      	subs	r0, r0, r3
20003086:	4152      	adcs	r2, r2
20003088:	0b03      	lsrs	r3, r0, #12
2000308a:	428b      	cmp	r3, r1
2000308c:	d301      	bcc.n	20003092 <__udivsi3+0x6a>
2000308e:	030b      	lsls	r3, r1, #12
20003090:	1ac0      	subs	r0, r0, r3
20003092:	4152      	adcs	r2, r2
20003094:	0ac3      	lsrs	r3, r0, #11
20003096:	428b      	cmp	r3, r1
20003098:	d301      	bcc.n	2000309e <__udivsi3+0x76>
2000309a:	02cb      	lsls	r3, r1, #11
2000309c:	1ac0      	subs	r0, r0, r3
2000309e:	4152      	adcs	r2, r2
200030a0:	0a83      	lsrs	r3, r0, #10
200030a2:	428b      	cmp	r3, r1
200030a4:	d301      	bcc.n	200030aa <__udivsi3+0x82>
200030a6:	028b      	lsls	r3, r1, #10
200030a8:	1ac0      	subs	r0, r0, r3
200030aa:	4152      	adcs	r2, r2
200030ac:	0a43      	lsrs	r3, r0, #9
200030ae:	428b      	cmp	r3, r1
200030b0:	d301      	bcc.n	200030b6 <__udivsi3+0x8e>
200030b2:	024b      	lsls	r3, r1, #9
200030b4:	1ac0      	subs	r0, r0, r3
200030b6:	4152      	adcs	r2, r2
200030b8:	0a03      	lsrs	r3, r0, #8
200030ba:	428b      	cmp	r3, r1
200030bc:	d301      	bcc.n	200030c2 <__udivsi3+0x9a>
200030be:	020b      	lsls	r3, r1, #8
200030c0:	1ac0      	subs	r0, r0, r3
200030c2:	4152      	adcs	r2, r2
200030c4:	d2cd      	bcs.n	20003062 <__udivsi3+0x3a>
200030c6:	09c3      	lsrs	r3, r0, #7
200030c8:	428b      	cmp	r3, r1
200030ca:	d301      	bcc.n	200030d0 <__udivsi3+0xa8>
200030cc:	01cb      	lsls	r3, r1, #7
200030ce:	1ac0      	subs	r0, r0, r3
200030d0:	4152      	adcs	r2, r2
200030d2:	0983      	lsrs	r3, r0, #6
200030d4:	428b      	cmp	r3, r1
200030d6:	d301      	bcc.n	200030dc <__udivsi3+0xb4>
200030d8:	018b      	lsls	r3, r1, #6
200030da:	1ac0      	subs	r0, r0, r3
200030dc:	4152      	adcs	r2, r2
200030de:	0943      	lsrs	r3, r0, #5
200030e0:	428b      	cmp	r3, r1
200030e2:	d301      	bcc.n	200030e8 <__udivsi3+0xc0>
200030e4:	014b      	lsls	r3, r1, #5
200030e6:	1ac0      	subs	r0, r0, r3
200030e8:	4152      	adcs	r2, r2
200030ea:	0903      	lsrs	r3, r0, #4
200030ec:	428b      	cmp	r3, r1
200030ee:	d301      	bcc.n	200030f4 <__udivsi3+0xcc>
200030f0:	010b      	lsls	r3, r1, #4
200030f2:	1ac0      	subs	r0, r0, r3
200030f4:	4152      	adcs	r2, r2
200030f6:	08c3      	lsrs	r3, r0, #3
200030f8:	428b      	cmp	r3, r1
200030fa:	d301      	bcc.n	20003100 <__udivsi3+0xd8>
200030fc:	00cb      	lsls	r3, r1, #3
200030fe:	1ac0      	subs	r0, r0, r3
20003100:	4152      	adcs	r2, r2
20003102:	0883      	lsrs	r3, r0, #2
20003104:	428b      	cmp	r3, r1
20003106:	d301      	bcc.n	2000310c <__udivsi3+0xe4>
20003108:	008b      	lsls	r3, r1, #2
2000310a:	1ac0      	subs	r0, r0, r3
2000310c:	4152      	adcs	r2, r2
2000310e:	0843      	lsrs	r3, r0, #1
20003110:	428b      	cmp	r3, r1
20003112:	d301      	bcc.n	20003118 <__udivsi3+0xf0>
20003114:	004b      	lsls	r3, r1, #1
20003116:	1ac0      	subs	r0, r0, r3
20003118:	4152      	adcs	r2, r2
2000311a:	1a41      	subs	r1, r0, r1
2000311c:	d200      	bcs.n	20003120 <__udivsi3+0xf8>
2000311e:	4601      	mov	r1, r0
20003120:	4152      	adcs	r2, r2
20003122:	4610      	mov	r0, r2
20003124:	4770      	bx	lr
20003126:	e7ff      	b.n	20003128 <__udivsi3+0x100>
20003128:	b501      	push	{r0, lr}
2000312a:	2000      	movs	r0, #0
2000312c:	f000 f806 	bl	2000313c <__aeabi_idiv0>
20003130:	bd02      	pop	{r1, pc}
20003132:	46c0      	nop			; (mov r8, r8)

20003134 <__aeabi_uidivmod>:
20003134:	2900      	cmp	r1, #0
20003136:	d0f7      	beq.n	20003128 <__udivsi3+0x100>
20003138:	e776      	b.n	20003028 <__udivsi3>
2000313a:	4770      	bx	lr

2000313c <__aeabi_idiv0>:
2000313c:	4770      	bx	lr
2000313e:	46c0      	nop			; (mov r8, r8)

20003140 <memcpy>:
20003140:	2300      	movs	r3, #0
20003142:	b510      	push	{r4, lr}
20003144:	429a      	cmp	r2, r3
20003146:	d100      	bne.n	2000314a <memcpy+0xa>
20003148:	bd10      	pop	{r4, pc}
2000314a:	5ccc      	ldrb	r4, [r1, r3]
2000314c:	54c4      	strb	r4, [r0, r3]
2000314e:	3301      	adds	r3, #1
20003150:	e7f8      	b.n	20003144 <memcpy+0x4>

20003152 <memset>:
20003152:	0003      	movs	r3, r0
20003154:	1812      	adds	r2, r2, r0
20003156:	4293      	cmp	r3, r2
20003158:	d100      	bne.n	2000315c <memset+0xa>
2000315a:	4770      	bx	lr
2000315c:	7019      	strb	r1, [r3, #0]
2000315e:	3301      	adds	r3, #1
20003160:	e7f9      	b.n	20003156 <memset+0x4>
	...

20003164 <msTicks>:
20003164:	00000000 	andeq	r0, r0, r0

20003168 <APBAHBPrescTable>:
20003168:	00000000 	andeq	r0, r0, r0
2000316c:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003170:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003174:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20003178 <GPIO_Pins>:
20003178:	00020001 	andeq	r0, r2, r1
2000317c:	00080004 	andeq	r0, r8, r4
20003180:	00200010 	eoreq	r0, r0, r0, lsl r0
20003184:	00800040 	addeq	r0, r0, r0, asr #32
20003188:	02000100 	andeq	r0, r0, #0, 2
2000318c:	08000400 	stmdaeq	r0, {sl}
20003190:	20001000 	andcs	r1, r0, r0
20003194:	80004000 	andhi	r4, r0, r0

20003198 <GPIO_Ports>:
20003198:	40021000 	andmi	r1, r2, r0
2000319c:	40020000 	andmi	r0, r2, r0
200031a0:	40020800 	andmi	r0, r2, r0, lsl #16
200031a4:	40020c00 	andmi	r0, r2, r0, lsl #24

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001a74 	andeq	r1, r0, r4, ror sl
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000061a 	andeq	r0, r0, sl, lsl r6
      10:	000e380c 	andeq	r3, lr, ip, lsl #16
      14:	00056e00 	andeq	r6, r5, r0, lsl #28
	...
      24:	10940200 	addsne	r0, r4, r0, lsl #4
      28:	01050000 	mrseq	r0, (UNDEF: 5)
      2c:	00000253 	andeq	r0, r0, r3, asr r2
      30:	0253c805 	subseq	ip, r3, #327680	; 0x50000
      34:	00030000 	andeq	r0, r3, r0
      38:	72000008 	andvc	r0, r0, #8
      3c:	00087b03 	andeq	r7, r8, r3, lsl #22
      40:	4d037400 	cfstrsmi	mvf7, [r3, #-0]
      44:	75000009 	strvc	r0, [r0, #-9]
      48:	00049203 	andeq	r9, r4, r3, lsl #4
      4c:	2a037600 	bcs	dd854 <startup-0x1ff227ac>
      50:	7b00000a 	blvc	80 <startup-0x1fffff80>
      54:	000f6203 	andeq	r6, pc, r3, lsl #4
      58:	e6037c00 	str	r7, [r3], -r0, lsl #24
      5c:	7e000011 	mcrvc	0, 0, r0, cr0, cr1, {0}
      60:	00033e03 	andeq	r3, r3, r3, lsl #28
      64:	14047f00 	strne	r7, [r4], #-3840	; 0xfffff100
      68:	00000008 	andeq	r0, r0, r8
      6c:	0006fc04 	andeq	pc, r6, r4, lsl #24
      70:	a1040100 	mrsge	r0, (UNDEF: 20)
      74:	02000008 	andeq	r0, r0, #8
      78:	00001c04 	andeq	r1, r0, r4, lsl #24
      7c:	c9040300 	stmdbgt	r4, {r8, r9}
      80:	04000000 	streq	r0, [r0], #-0
      84:	00100704 	andseq	r0, r0, r4, lsl #14
      88:	b2040500 	andlt	r0, r4, #0, 10
      8c:	0600000e 	streq	r0, [r0], -lr
      90:	00078904 	andeq	r8, r7, r4, lsl #18
      94:	2a040700 	bcs	101c9c <startup-0x1fefe364>
      98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      9c:	0011db04 	andseq	sp, r1, r4, lsl #22
      a0:	16040900 	strne	r0, [r4], -r0, lsl #18
      a4:	0a00000b 	beq	d8 <startup-0x1fffff28>
      a8:	000cbe04 	andeq	fp, ip, r4, lsl #28
      ac:	e7040b00 	str	r0, [r4, -r0, lsl #22]
      b0:	0c00000b 	stceq	0, cr0, [r0], {11}
      b4:	0003af04 	andeq	sl, r3, r4, lsl #30
      b8:	26040d00 	strcs	r0, [r4], -r0, lsl #26
      bc:	0e000010 	mcreq	0, 0, r0, cr0, cr0, {0}
      c0:	000ee404 	andeq	lr, lr, r4, lsl #8
      c4:	a1040f00 	tstge	r4, r0, lsl #30
      c8:	10000007 	andne	r0, r0, r7
      cc:	00003504 	andeq	r3, r0, r4, lsl #10
      d0:	b6041100 	strlt	r1, [r4], -r0, lsl #2
      d4:	1200000d 	andne	r0, r0, #13
      d8:	00079404 	andeq	r9, r7, r4, lsl #8
      dc:	60041300 	andvs	r1, r4, r0, lsl #6
      e0:	14000005 	strne	r0, [r0], #-5
      e4:	00111f04 	andseq	r1, r1, r4, lsl #30
      e8:	b1041500 	tstlt	r4, r0, lsl #10
      ec:	16000008 	strne	r0, [r0], -r8
      f0:	00114904 	andseq	r4, r1, r4, lsl #18
      f4:	74041700 	strvc	r1, [r4], #-1792	; 0xfffff900
      f8:	18000009 	stmdane	r0, {r0, r3}
      fc:	00108604 	andseq	r8, r0, r4, lsl #12
     100:	a6041900 	strge	r1, [r4], -r0, lsl #18
     104:	1a000002 	bne	114 <startup-0x1ffffeec>
     108:	00076e04 	andeq	r6, r7, r4, lsl #28
     10c:	5c041b00 			; <UNDEFINED> instruction: 0x5c041b00
     110:	1c000001 	stcne	0, cr0, [r0], {1}
     114:	000d6a04 	andeq	r6, sp, r4, lsl #20
     118:	10041d00 	andne	r1, r4, r0, lsl #26
     11c:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
     120:	00071204 	andeq	r1, r7, r4, lsl #4
     124:	4b041f00 	blmi	107d2c <startup-0x1fef82d4>
     128:	20000004 	andcs	r0, r0, r4
     12c:	000b4804 	andeq	r4, fp, r4, lsl #16
     130:	20042100 	andcs	r2, r4, r0, lsl #2
     134:	22000009 	andcs	r0, r0, #9
     138:	000a1804 	andeq	r1, sl, r4, lsl #16
     13c:	de042300 	cdple	3, 0, cr2, cr4, cr0, {0}
     140:	24000001 	strcs	r0, [r0], #-1
     144:	000d7404 	andeq	r7, sp, r4, lsl #8
     148:	38042500 	stmdacc	r4, {r8, sl, sp}
     14c:	26000010 			; <UNDEFINED> instruction: 0x26000010
     150:	00035a04 	andeq	r5, r3, r4, lsl #20
     154:	38042700 	stmdacc	r4, {r8, r9, sl, sp}
     158:	2800000d 	stmdacs	r0, {r0, r2, r3}
     15c:	000cf004 	andeq	pc, ip, r4
     160:	ec042900 			; <UNDEFINED> instruction: 0xec042900
     164:	2a00000a 	bcs	194 <startup-0x1ffffe6c>
     168:	0001e804 	andeq	lr, r1, r4, lsl #16
     16c:	47042b00 	strmi	r2, [r4, -r0, lsl #22]
     170:	2c000000 	stccs	0, cr0, [r0], {-0}
     174:	0007ca04 	andeq	ip, r7, r4, lsl #20
     178:	a1042d00 	tstge	r4, r0, lsl #26
     17c:	2e000011 	mcrcs	0, 0, r0, cr0, cr1, {0}
     180:	00120504 	andseq	r0, r2, r4, lsl #10
     184:	a3042f00 	movwge	r2, #20224	; 0x4f00
     188:	3000000e 	andcc	r0, r0, lr
     18c:	0011ae04 	andseq	sl, r1, r4, lsl #28
     190:	88043100 	stmdahi	r4, {r8, ip, sp}
     194:	32000004 	andcc	r0, r0, #4
     198:	0000bf04 	andeq	fp, r0, r4, lsl #30
     19c:	b7043300 	strlt	r3, [r4, -r0, lsl #6]
     1a0:	3400000a 	strcc	r0, [r0], #-10
     1a4:	00096904 	andeq	r6, r9, r4, lsl #18
     1a8:	26043500 	strcs	r3, [r4], -r0, lsl #10
     1ac:	3600000b 	strcc	r0, [r0], -fp
     1b0:	0009da04 	andeq	sp, r9, r4, lsl #20
     1b4:	dc043700 	stcle	7, cr3, [r4], {-0}
     1b8:	38000008 	stmdacc	r0, {r3}
     1bc:	00008804 	andeq	r8, r0, r4, lsl #16
     1c0:	7e043900 	vmlavc.f16	s6, s8, s0	; <UNPREDICTABLE>
     1c4:	3a000012 	bcc	214 <startup-0x1ffffdec>
     1c8:	000c0604 	andeq	r0, ip, r4, lsl #12
     1cc:	08043b00 	stmdaeq	r4, {r8, r9, fp, ip, sp}
     1d0:	3c000004 	stccc	0, cr0, [r0], {4}
     1d4:	000fb404 	andeq	fp, pc, r4, lsl #8
     1d8:	f2043d00 	vadd.f32	d3, d4, d0
     1dc:	3e000009 	cdpcc	0, 0, cr0, cr0, cr9, {0}
     1e0:	000c2104 	andeq	r2, ip, r4, lsl #2
     1e4:	b0043f00 	andlt	r3, r4, r0, lsl #30
     1e8:	40000001 	andmi	r0, r0, r1
     1ec:	000da804 	andeq	sl, sp, r4, lsl #16
     1f0:	58044100 	stmdapl	r4, {r8, lr}
     1f4:	42000004 	andmi	r0, r0, #4
     1f8:	0007f404 	andeq	pc, r7, r4, lsl #8
     1fc:	70044300 	andvc	r4, r4, r0, lsl #6
     200:	44000002 	strmi	r0, [r0], #-2
     204:	000f2304 	andeq	r2, pc, r4, lsl #6
     208:	e2044500 	and	r4, r4, #0, 10
     20c:	46000007 	strmi	r0, [r0], -r7
     210:	0001be04 	andeq	fp, r1, r4, lsl #28
     214:	94044700 	strls	r4, [r4], #-1792	; 0xfffff900
     218:	4800000f 	stmdami	r0, {r0, r1, r2, r3}
     21c:	000d2104 	andeq	r2, sp, r4, lsl #2
     220:	dd044900 	vstrle.16	s8, [r4, #-0]	; <UNPREDICTABLE>
     224:	4a000010 	bmi	26c <startup-0x1ffffd94>
     228:	0011f204 	andseq	pc, r1, r4, lsl #4
     22c:	1e044b00 	vmlane.f64	d4, d4, d0
     230:	4c000008 	stcmi	0, cr0, [r0], {8}
     234:	000a0004 	andeq	r0, sl, r4
     238:	db044d00 	blle	113640 <startup-0x1feec9c0>
     23c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     240:	000d2e04 	andeq	r2, sp, r4, lsl #28
     244:	7b044f00 	blvc	113e4c <startup-0x1feec1b4>
     248:	50000007 	andpl	r0, r0, r7
     24c:	000a9004 	andeq	r9, sl, r4
     250:	05005100 	streq	r5, [r0, #-256]	; 0xffffff00
     254:	03fc0601 	mvnseq	r0, #1048576	; 0x100000
     258:	c5060000 	strgt	r0, [r6, #-0]
     25c:	05000008 	streq	r0, [r0, #-8]
     260:	0025032f 	eoreq	r0, r5, pc, lsr #6
     264:	d4070000 	strle	r0, [r7], #-0
     268:	06000001 	streq	r0, [r0], -r1
     26c:	0002712b 	andeq	r7, r2, fp, lsr #2
     270:	08010500 	stmdaeq	r1, {r8, sl}
     274:	000003fa 	strdeq	r0, [r0], -sl
     278:	f4050205 	vst1.8	{d0-d3}, [r5], r5
     27c:	0700000f 	streq	r0, [r0, -pc]
     280:	0000052e 	andeq	r0, r0, lr, lsr #10
     284:	028a3906 	addeq	r3, sl, #98304	; 0x18000
     288:	02050000 	andeq	r0, r5, #0
     28c:	00117d07 	andseq	r7, r1, r7, lsl #26
     290:	12170700 	andsne	r0, r7, #0, 14
     294:	4d060000 	stcmi	0, cr0, [r6, #-0]
     298:	0000029c 	muleq	r0, ip, r2
     29c:	e9050405 	stmdb	r5, {r0, r2, sl}
     2a0:	07000009 	streq	r0, [r0, -r9]
     2a4:	00000992 	muleq	r0, r2, r9
     2a8:	02ae4f06 	adceq	r4, lr, #6, 30
     2ac:	04050000 	streq	r0, [r5], #-0
     2b0:	000d4c07 	andeq	r4, sp, r7, lsl #24
     2b4:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
     2b8:	000009e4 	andeq	r0, r0, r4, ror #19
     2bc:	47070805 	strmi	r0, [r7, -r5, lsl #16]
     2c0:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     2c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     2c8:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     2cc:	000d5107 	andeq	r5, sp, r7, lsl #2
     2d0:	01d60700 	bicseq	r0, r6, r0, lsl #14
     2d4:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
     2d8:	00000266 	andeq	r0, r0, r6, ror #4
     2dc:	0002d109 	andeq	sp, r2, r9, lsl #2
     2e0:	02d10a00 	sbcseq	r0, r1, #0, 20
     2e4:	e1090000 	mrs	r0, (UNDEF: 9)
     2e8:	07000002 	streq	r0, [r0, -r2]
     2ec:	00000530 	andeq	r0, r0, r0, lsr r5
     2f0:	027f2407 	rsbseq	r2, pc, #117440512	; 0x7000000
     2f4:	eb090000 	bl	2402fc <startup-0x1fdbfd04>
     2f8:	07000002 	streq	r0, [r0, -r2]
     2fc:	00001219 	andeq	r1, r0, r9, lsl r2
     300:	02912c07 	addseq	r2, r1, #1792	; 0x700
     304:	fb090000 	blx	24030e <startup-0x1fdbfcf2>
     308:	07000002 	streq	r0, [r0, -r2]
     30c:	00000994 	muleq	r0, r4, r9
     310:	02a33007 	adceq	r3, r3, #7
     314:	0b090000 	bleq	24031c <startup-0x1fdbfce4>
     318:	0a000003 	beq	32c <startup-0x1ffffcd4>
     31c:	00000316 	andeq	r0, r0, r6, lsl r3
     320:	010e040b 	tsteq	lr, fp, lsl #8
     324:	03dc01a0 	bicseq	r0, ip, #160, 2	; 0x28
     328:	350c0000 	strcc	r0, [ip, #-0]
     32c:	01000012 	tsteq	r0, r2, lsl r0
     330:	03ec01a2 	mvneq	r0, #-2147483608	; 0x80000028
     334:	0c000000 	stceq	0, cr0, [r0], {-0}
     338:	000003e6 	andeq	r0, r0, r6, ror #7
     33c:	f101a301 			; <UNDEFINED> instruction: 0xf101a301
     340:	20000003 	andcs	r0, r0, r3
     344:	000dd10c 	andeq	sp, sp, ip, lsl #2
     348:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
     34c:	000003ec 	andeq	r0, r0, ip, ror #7
     350:	00050c80 	andeq	r0, r5, r0, lsl #25
     354:	a5010000 	strge	r0, [r1, #-0]
     358:	0003f101 	andeq	pc, r3, r1, lsl #2
     35c:	c50da000 	strgt	sl, [sp, #-0]
     360:	01000011 	tsteq	r0, r1, lsl r0
     364:	03ec01a6 	mvneq	r0, #-2147483607	; 0x80000029
     368:	01000000 	mrseq	r0, (UNDEF: 0)
     36c:	0004740d 	andeq	r7, r4, sp, lsl #8
     370:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     374:	000003f1 	strdeq	r0, [r0], -r1
     378:	8e0d0120 	adfhiep	f0, f5, f0
     37c:	01000001 	tsteq	r0, r1
     380:	03ec01a8 	mvneq	r0, #168, 2	; 0x2a
     384:	01800000 	orreq	r0, r0, r0
     388:	00047e0d 	andeq	r7, r4, sp, lsl #28
     38c:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
     390:	000003f1 	strdeq	r0, [r0], -r1
     394:	380d01a0 	stmdacc	sp, {r5, r7, r8}
     398:	01000004 	tsteq	r0, r4
     39c:	03ec01aa 	mvneq	r0, #-2147483606	; 0x8000002a
     3a0:	02000000 	andeq	r0, r0, #0
     3a4:	00041a0d 	andeq	r1, r4, sp, lsl #20
     3a8:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
     3ac:	00000401 	andeq	r0, r0, r1, lsl #8
     3b0:	490e0220 	stmdbmi	lr, {r5, r9}
     3b4:	ac010050 	stcge	0, cr0, [r1], {80}	; 0x50
     3b8:	00042101 	andeq	r2, r4, r1, lsl #2
     3bc:	0d030000 	stceq	0, cr0, [r3, #-0]
     3c0:	00000424 	andeq	r0, r0, r4, lsr #8
     3c4:	2601ad01 	strcs	sl, [r1], -r1, lsl #26
     3c8:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     3cc:	070d0d03 	streq	r0, [sp, -r3, lsl #26]
     3d0:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     3d4:	00031601 	andeq	r1, r3, r1, lsl #12
     3d8:	000e0000 	andeq	r0, lr, r0
     3dc:	0003160f 	andeq	r1, r3, pc, lsl #12
     3e0:	0003ec00 	andeq	lr, r3, r0, lsl #24
     3e4:	02ca1000 	sbceq	r1, sl, #0
     3e8:	00070000 	andeq	r0, r7, r0
     3ec:	0003dc09 	andeq	sp, r3, r9, lsl #24
     3f0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     3f4:	04010000 	streq	r0, [r1], #-0
     3f8:	ca100000 	bgt	400400 <startup-0x1fbffc00>
     3fc:	17000002 	strne	r0, [r0, -r2]
     400:	030b0f00 	movweq	r0, #48896	; 0xbf00
     404:	04110000 	ldreq	r0, [r1], #-0
     408:	ca100000 	bgt	400410 <startup-0x1fbffbf0>
     40c:	37000002 	strcc	r0, [r0, -r2]
     410:	02dc0f00 	sbcseq	r0, ip, #0, 30
     414:	04210000 	strteq	r0, [r1], #-0
     418:	ca100000 	bgt	400420 <startup-0x1fbffbe0>
     41c:	ef000002 	svc	0x00000002
     420:	04110900 	ldreq	r0, [r1], #-2304	; 0xfffff700
     424:	0b0f0000 	bleq	3c042c <startup-0x1fc3fbd4>
     428:	37000003 	strcc	r0, [r0, -r3]
     42c:	11000004 	tstne	r0, r4
     430:	000002ca 	andeq	r0, r0, sl, asr #5
     434:	06000283 	streq	r0, [r0], -r3, lsl #5
     438:	00000d07 	andeq	r0, r0, r7, lsl #26
     43c:	2001af01 	andcs	sl, r1, r1, lsl #30
     440:	12000003 	andne	r0, r0, #3
     444:	01c0018c 	biceq	r0, r0, ip, lsl #3
     448:	0000055e 	andeq	r0, r0, lr, asr r5
     44c:	0002450c 	andeq	r4, r2, ip, lsl #10
     450:	01c20100 	biceq	r0, r2, r0, lsl #2
     454:	0000031b 	andeq	r0, r0, fp, lsl r3
     458:	036e0c00 	cmneq	lr, #0, 24
     45c:	c3010000 	movwgt	r0, #4096	; 0x1000
     460:	00031601 	andeq	r1, r3, r1, lsl #12
     464:	ba0c0400 	blt	30146c <startup-0x1fcfeb94>
     468:	01000000 	mrseq	r0, (UNDEF: 0)
     46c:	031601c4 	tsteq	r6, #196, 2	; 0x31
     470:	0c080000 	stceq	0, cr0, [r8], {-0}
     474:	00000215 	andeq	r0, r0, r5, lsl r2
     478:	1601c501 	strne	ip, [r1], -r1, lsl #10
     47c:	0c000003 	stceq	0, cr0, [r0], {3}
     480:	52435313 	subpl	r5, r3, #1275068416	; 0x4c000000
     484:	01c60100 	biceq	r0, r6, r0, lsl #2
     488:	00000316 	andeq	r0, r0, r6, lsl r3
     48c:	43431310 	movtmi	r1, #13072	; 0x3310
     490:	c7010052 	smlsdgt	r1, r2, r0, r0
     494:	00031601 	andeq	r1, r3, r1, lsl #12
     498:	53131400 	tstpl	r3, #0, 8
     49c:	01005048 	tsteq	r0, r8, asr #32
     4a0:	056e01c8 	strbeq	r0, [lr, #-456]!	; 0xfffffe38
     4a4:	0c180000 	ldceq	0, cr0, [r8], {-0}
     4a8:	000006f6 	strdeq	r0, [r0], -r6
     4ac:	1601c901 	strne	ip, [r1], -r1, lsl #18
     4b0:	24000003 	strcs	r0, [r0], #-3
     4b4:	000ec60c 	andeq	ip, lr, ip, lsl #12
     4b8:	01ca0100 	biceq	r0, sl, r0, lsl #2
     4bc:	00000316 	andeq	r0, r0, r6, lsl r3
     4c0:	05b10c28 	ldreq	r0, [r1, #3112]!	; 0xc28
     4c4:	cb010000 	blgt	404cc <startup-0x1ffbfb34>
     4c8:	00031601 	andeq	r1, r3, r1, lsl #12
     4cc:	bc0c2c00 	stclt	12, cr2, [ip], {-0}
     4d0:	01000004 	tsteq	r0, r4
     4d4:	031601cc 	tsteq	r6, #204, 2	; 0x33
     4d8:	0c300000 	ldceq	0, cr0, [r0], #-0
     4dc:	00000fee 	andeq	r0, r0, lr, ror #31
     4e0:	1601cd01 	strne	ip, [r1], -r1, lsl #26
     4e4:	34000003 	strcc	r0, [r0], #-3
     4e8:	000bd80c 	andeq	sp, fp, ip, lsl #16
     4ec:	01ce0100 	biceq	r0, lr, r0, lsl #2
     4f0:	00000316 	andeq	r0, r0, r6, lsl r3
     4f4:	0e850c38 	mcreq	12, 4, r0, cr5, cr8, {1}
     4f8:	cf010000 	svcgt	0x00010000
     4fc:	00031601 	andeq	r1, r3, r1, lsl #12
     500:	50133c00 	andspl	r3, r3, r0, lsl #24
     504:	01005246 	tsteq	r0, r6, asr #4
     508:	058801d0 	streq	r0, [r8, #464]	; 0x1d0
     50c:	13400000 	movtne	r0, #0
     510:	00524644 	subseq	r4, r2, r4, asr #12
     514:	1b01d101 	blne	74920 <startup-0x1ff8b6e0>
     518:	48000003 	stmdami	r0, {r0, r1}
     51c:	52444113 	subpl	r4, r4, #-1073741820	; 0xc0000004
     520:	01d20100 	bicseq	r0, r2, r0, lsl #2
     524:	0000031b 	andeq	r0, r0, fp, lsl r3
     528:	0fcf0c4c 	svceq	0x00cf0c4c
     52c:	d3010000 	movwle	r0, #4096	; 0x1000
     530:	0005a201 	andeq	sl, r5, r1, lsl #4
     534:	170c5000 	strne	r5, [ip, -r0]
     538:	01000010 	tsteq	r0, r0, lsl r0
     53c:	05bc01d4 	ldreq	r0, [ip, #468]!	; 0x1d4
     540:	0c600000 	stcleq	0, cr0, [r0], #-0
     544:	000003e6 	andeq	r0, r0, r6, ror #7
     548:	c101d501 	tstgt	r1, r1, lsl #10
     54c:	74000005 	strvc	r0, [r0], #-5
     550:	0011b80c 	andseq	fp, r1, ip, lsl #16
     554:	01d60100 	bicseq	r0, r6, r0, lsl #2
     558:	00000316 	andeq	r0, r0, r6, lsl r3
     55c:	dc0f0088 	stcle	0, cr0, [pc], {136}	; 0x88
     560:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
     564:	10000005 	andne	r0, r0, r5
     568:	000002ca 	andeq	r0, r0, sl, asr #5
     56c:	5e09000b 	cdppl	0, 0, cr0, cr9, cr11, {0}
     570:	0f000005 	svceq	0x00000005
     574:	0000031b 	andeq	r0, r0, fp, lsl r3
     578:	00000583 	andeq	r0, r0, r3, lsl #11
     57c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     580:	0a000100 	beq	988 <startup-0x1ffff678>
     584:	00000573 	andeq	r0, r0, r3, ror r5
     588:	00058309 	andeq	r8, r5, r9, lsl #6
     58c:	031b0f00 	tsteq	fp, #0, 30
     590:	059d0000 	ldreq	r0, [sp]
     594:	ca100000 	bgt	40059c <startup-0x1fbffa64>
     598:	03000002 	movweq	r0, #2
     59c:	058d0a00 	streq	r0, [sp, #2560]	; 0xa00
     5a0:	9d090000 	stcls	0, cr0, [r9, #-0]
     5a4:	0f000005 	svceq	0x00000005
     5a8:	0000031b 	andeq	r0, r0, fp, lsl r3
     5ac:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     5b0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5b4:	0a000400 	beq	15bc <startup-0x1fffea44>
     5b8:	000005a7 	andeq	r0, r0, r7, lsr #11
     5bc:	0005b709 	andeq	fp, r5, r9, lsl #14
     5c0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     5c4:	05d10000 	ldrbeq	r0, [r1]
     5c8:	ca100000 	bgt	4005d0 <startup-0x1fbffa30>
     5cc:	04000002 	streq	r0, [r0], #-2
     5d0:	04a20600 	strteq	r0, [r2], #1536	; 0x600
     5d4:	d7010000 	strle	r0, [r1, -r0]
     5d8:	00044301 	andeq	r4, r4, r1, lsl #6
     5dc:	01101200 	tsteq	r0, r0, lsl #4
     5e0:	061b02bf 			; <UNDEFINED> instruction: 0x061b02bf
     5e4:	210c0000 	mrscs	r0, (UNDEF: 12)
     5e8:	0100000b 	tsteq	r0, fp
     5ec:	031602c1 	tsteq	r6, #268435468	; 0x1000000c
     5f0:	0c000000 	stceq	0, cr0, [r0], {-0}
     5f4:	00000f4b 	andeq	r0, r0, fp, asr #30
     5f8:	1602c201 	strne	ip, [r2], -r1, lsl #4
     5fc:	04000003 	streq	r0, [r0], #-3
     600:	4c415613 	mcrrmi	6, 1, r5, r1, cr3
     604:	02c30100 	sbceq	r0, r3, #0, 2
     608:	00000316 	andeq	r0, r0, r6, lsl r3
     60c:	0e910c08 	cdpeq	12, 9, cr0, cr1, cr8, {0}
     610:	c4010000 	strgt	r0, [r1], #-0
     614:	00031b02 	andeq	r1, r3, r2, lsl #22
     618:	06000c00 	streq	r0, [r0], -r0, lsl #24
     61c:	00000c6c 	andeq	r0, r0, ip, ror #24
     620:	dd02c501 	cfstr32le	mvfx12, [r2, #-4]
     624:	0f000005 	svceq	0x00000005
     628:	0000030b 	andeq	r0, r0, fp, lsl #6
     62c:	00000637 	andeq	r0, r0, r7, lsr r6
     630:	0002ca10 	andeq	ip, r2, r0, lsl sl
     634:	14000100 	strne	r0, [r0], #-256	; 0xffffff00
     638:	00001099 	muleq	r0, r9, r0
     63c:	0606fa01 	streq	pc, [r6], -r1, lsl #20
     640:	15000003 	strne	r0, [r0, #-3]
     644:	00000891 	muleq	r0, r1, r8
     648:	030b3b08 	movweq	r3, #47880	; 0xbb08
     64c:	07160000 	ldreq	r0, [r6, -r0]
     650:	00027101 	andeq	r7, r2, r1, lsl #2
     654:	035d0500 	cmpeq	sp, #0, 10
     658:	00000669 	andeq	r0, r0, r9, ror #12
     65c:	0012fe04 	andseq	pc, r2, r4, lsl #28
     660:	53170000 	tstpl	r7, #0
     664:	01005445 	tsteq	r0, r5, asr #8
     668:	0a4c0600 	beq	1301e70 <startup-0x1ecfe190>
     66c:	5d050000 	stcpl	0, cr0, [r5, #-0]
     670:	00064e03 	andeq	r4, r6, r3, lsl #28
     674:	0b0d0600 	bleq	341e7c <startup-0x1fcbe184>
     678:	5d050000 	stcpl	0, cr0, [r5, #-0]
     67c:	00064e03 	andeq	r4, r6, r3, lsl #28
     680:	01071600 	tsteq	r7, r0, lsl #12
     684:	00000271 	andeq	r0, r0, r1, ror r2
     688:	9c035f05 	stcls	15, cr5, [r3], {5}
     68c:	04000006 	streq	r0, [r0], #-6
     690:	00000a22 	andeq	r0, r0, r2, lsr #20
     694:	104e0400 	subne	r0, lr, r0, lsl #8
     698:	00010000 	andeq	r0, r1, r0
     69c:	000d1106 	andeq	r1, sp, r6, lsl #2
     6a0:	035f0500 	cmpeq	pc, #0, 10
     6a4:	00000681 	andeq	r0, r0, r1, lsl #13
     6a8:	71010716 	tstvc	r1, r6, lsl r7
     6ac:	05000002 	streq	r0, [r0, #-2]
     6b0:	06c30362 	strbeq	r0, [r3], r2, ror #6
     6b4:	1a040000 	bne	1006bc <startup-0x1feff944>
     6b8:	00000009 	andeq	r0, r0, r9
     6bc:	000d9604 	andeq	r9, sp, r4, lsl #12
     6c0:	06000100 	streq	r0, [r0], -r0, lsl #2
     6c4:	00000cb2 			; <UNDEFINED> instruction: 0x00000cb2
     6c8:	a8036205 	stmdage	r3, {r0, r2, r9, sp, lr}
     6cc:	12000006 	andne	r0, r0, #6
     6d0:	05c30528 	strbeq	r0, [r3, #1320]	; 0x528
     6d4:	0000075b 	andeq	r0, r0, fp, asr r7
     6d8:	0011080c 	andseq	r0, r1, ip, lsl #16
     6dc:	05c50500 	strbeq	r0, [r5, #1280]	; 0x500
     6e0:	00000316 	andeq	r0, r0, r6, lsl r3
     6e4:	0e8a0c00 	cdpeq	12, 8, cr0, cr10, cr0, {0}
     6e8:	c6050000 	strgt	r0, [r5], -r0
     6ec:	00031605 	andeq	r1, r3, r5, lsl #12
     6f0:	450c0400 	strmi	r0, [ip, #-1024]	; 0xfffffc00
     6f4:	05000009 	streq	r0, [r0, #-9]
     6f8:	031605c7 	tsteq	r6, #834666496	; 0x31c00000
     6fc:	0c080000 	stceq	0, cr0, [r8], {-0}
     700:	00000a0c 	andeq	r0, r0, ip, lsl #20
     704:	1605c805 	strne	ip, [r5], -r5, lsl #16
     708:	0c000003 	stceq	0, cr0, [r0], {3}
     70c:	52444913 	subpl	r4, r4, #311296	; 0x4c000
     710:	05c90500 	strbeq	r0, [r9, #1280]	; 0x500
     714:	00000316 	andeq	r0, r0, r6, lsl r3
     718:	444f1310 	strbmi	r1, [pc], #-784	; 720 <startup-0x1ffff8e0>
     71c:	ca050052 	bgt	14086c <startup-0x1febf794>
     720:	00031605 	andeq	r1, r3, r5, lsl #12
     724:	620c1400 	andvs	r1, ip, #0, 8
     728:	0500000a 	streq	r0, [r0, #-10]
     72c:	02f605cb 	rscseq	r0, r6, #851443712	; 0x32c00000
     730:	0c180000 	ldceq	0, cr0, [r8], {-0}
     734:	00000a3f 	andeq	r0, r0, pc, lsr sl
     738:	f605cc05 			; <UNDEFINED> instruction: 0xf605cc05
     73c:	1a000002 	bne	74c <startup-0x1ffff8b4>
     740:	0009040c 	andeq	r0, r9, ip, lsl #8
     744:	05cd0500 	strbeq	r0, [sp, #1280]	; 0x500
     748:	00000316 	andeq	r0, r0, r6, lsl r3
     74c:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
     750:	ce050052 	mcrgt	0, 0, r0, cr5, cr2, {2}
     754:	00076b05 	andeq	r6, r7, r5, lsl #22
     758:	0f002000 	svceq	0x00002000
     75c:	00000316 	andeq	r0, r0, r6, lsl r3
     760:	0000076b 	andeq	r0, r0, fp, ror #14
     764:	0002ca10 	andeq	ip, r2, r0, lsl sl
     768:	09000100 	stmdbeq	r0, {r8}
     76c:	0000075b 	andeq	r0, r0, fp, asr r7
     770:	00107906 	andseq	r7, r0, r6, lsl #18
     774:	05cf0500 	strbeq	r0, [pc, #1280]	; c7c <startup-0x1ffff384>
     778:	000006cf 	andeq	r0, r0, pc, asr #13
     77c:	64059812 	strvs	r9, [r5], #-2066	; 0xfffff7ee
     780:	00093f06 	andeq	r3, r9, r6, lsl #30
     784:	52431300 	subpl	r1, r3, #0, 6
     788:	06660500 	strbteq	r0, [r6], -r0, lsl #10
     78c:	00000316 	andeq	r0, r0, r6, lsl r3
     790:	09610c00 	stmdbeq	r1!, {sl, fp}^
     794:	67050000 	strvs	r0, [r5, -r0]
     798:	00031606 	andeq	r1, r3, r6, lsl #12
     79c:	5c0c0400 	cfstrspl	mvf0, [ip], {-0}
     7a0:	05000011 	streq	r0, [r0, #-17]	; 0xffffffef
     7a4:	03160668 	tsteq	r6, #104, 12	; 0x6800000
     7a8:	13080000 	movwne	r0, #32768	; 0x8000
     7ac:	00524943 	subseq	r4, r2, r3, asr #18
     7b0:	16066905 	strne	r6, [r6], -r5, lsl #18
     7b4:	0c000003 	stceq	0, cr0, [r0], {3}
     7b8:	0004c10c 	andeq	ip, r4, ip, lsl #2
     7bc:	066a0500 	strbteq	r0, [sl], -r0, lsl #10
     7c0:	00000316 	andeq	r0, r0, r6, lsl r3
     7c4:	0fab0c10 	svceq	0x00ab0c10
     7c8:	6b050000 	blvs	1407d0 <startup-0x1febf830>
     7cc:	00031606 	andeq	r1, r3, r6, lsl #12
     7d0:	a90c1400 	stmdbge	ip, {sl, ip}
     7d4:	0500000c 	streq	r0, [r0, #-12]
     7d8:	0316066c 	tsteq	r6, #108, 12	; 0x6c00000
     7dc:	0c180000 	ldceq	0, cr0, [r8], {-0}
     7e0:	000003e6 	andeq	r0, r0, r6, ror #7
     7e4:	0b066d05 	bleq	19bc00 <startup-0x1fe64400>
     7e8:	1c000003 	stcne	0, cr0, [r0], {3}
     7ec:	000ce70c 	andeq	lr, ip, ip, lsl #14
     7f0:	066e0500 	strbteq	r0, [lr], -r0, lsl #10
     7f4:	00000316 	andeq	r0, r0, r6, lsl r3
     7f8:	0a360c20 	beq	d83880 <startup-0x1f27c780>
     7fc:	6f050000 	svcvs	0x00050000
     800:	00031606 	andeq	r1, r3, r6, lsl #12
     804:	f00c2400 			; <UNDEFINED> instruction: 0xf00c2400
     808:	05000003 	streq	r0, [r0, #-3]
     80c:	06270670 			; <UNDEFINED> instruction: 0x06270670
     810:	0c280000 	stceq	0, cr0, [r8], #-0
     814:	00000f35 	andeq	r0, r0, r5, lsr pc
     818:	16067105 	strne	r7, [r6], -r5, lsl #2
     81c:	30000003 	andcc	r0, r0, r3
     820:	0005390c 	andeq	r3, r5, ip, lsl #18
     824:	06720500 	ldrbteq	r0, [r2], -r0, lsl #10
     828:	00000316 	andeq	r0, r0, r6, lsl r3
     82c:	12650c34 	rsbne	r0, r5, #52, 24	; 0x3400
     830:	73050000 	movwvc	r0, #20480	; 0x5000
     834:	00031606 	andeq	r1, r3, r6, lsl #12
     838:	740c3800 	strvc	r3, [ip], #-2048	; 0xfffff800
     83c:	05000004 	streq	r0, [r0, #-4]
     840:	030b0674 	movweq	r0, #46708	; 0xb674
     844:	0c3c0000 	ldceq	0, cr0, [ip], #-0
     848:	00000cff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     84c:	16067505 	strne	r7, [r6], -r5, lsl #10
     850:	40000003 	andmi	r0, r0, r3
     854:	0003090c 	andeq	r0, r3, ip, lsl #18
     858:	06760500 	ldrbteq	r0, [r6], -r0, lsl #10
     85c:	00000316 	andeq	r0, r0, r6, lsl r3
     860:	047e0c44 	ldrbteq	r0, [lr], #-3140	; 0xfffff3bc
     864:	77050000 	strvc	r0, [r5, -r0]
     868:	00062706 	andeq	r2, r6, r6, lsl #14
     86c:	250c4800 	strcs	r4, [ip, #-2048]	; 0xfffff800
     870:	05000003 	streq	r0, [r0, #-3]
     874:	03160678 	tsteq	r6, #120, 12	; 0x7800000
     878:	0c500000 	mraeq	r0, r0, acc0
     87c:	000001fc 	strdeq	r0, [r0], -ip
     880:	16067905 	strne	r7, [r6], -r5, lsl #18
     884:	54000003 	strpl	r0, [r0], #-3
     888:	000dd60c 	andeq	sp, sp, ip, lsl #12
     88c:	067a0500 	ldrbteq	r0, [sl], -r0, lsl #10
     890:	00000316 	andeq	r0, r0, r6, lsl r3
     894:	041a0c58 	ldreq	r0, [sl], #-3160	; 0xfffff3a8
     898:	7b050000 	blvc	1408a0 <startup-0x1febf760>
     89c:	00030b06 	andeq	r0, r3, r6, lsl #22
     8a0:	dd0c5c00 	stcle	12, cr5, [ip, #-0]
     8a4:	0500000b 	streq	r0, [r0, #-11]
     8a8:	0316067c 	tsteq	r6, #124, 12	; 0x7c00000
     8ac:	0c600000 	stcleq	0, cr0, [r0], #-0
     8b0:	00000ac2 	andeq	r0, r0, r2, asr #21
     8b4:	16067d05 	strne	r7, [r6], -r5, lsl #26
     8b8:	64000003 	strvs	r0, [r0], #-3
     8bc:	0004240c 	andeq	r2, r4, ip, lsl #8
     8c0:	067e0500 	ldrbteq	r0, [lr], -r0, lsl #10
     8c4:	00000627 	andeq	r0, r0, r7, lsr #12
     8c8:	06f10c68 	ldrbteq	r0, [r1], r8, ror #24
     8cc:	7f050000 	svcvc	0x00050000
     8d0:	00031606 	andeq	r1, r3, r6, lsl #12
     8d4:	43137000 	tstmi	r3, #0
     8d8:	05005253 	streq	r5, [r0, #-595]	; 0xfffffdad
     8dc:	03160680 	tsteq	r6, #128, 12	; 0x8000000
     8e0:	0c740000 	ldcleq	0, cr0, [r4], #-0
     8e4:	0000042e 	andeq	r0, r0, lr, lsr #8
     8e8:	27068105 	strcs	r8, [r6, -r5, lsl #2]
     8ec:	78000006 	stmdavc	r0, {r1, r2}
     8f0:	000a120c 	andeq	r1, sl, ip, lsl #4
     8f4:	06820500 	streq	r0, [r2], r0, lsl #10
     8f8:	00000316 	andeq	r0, r0, r6, lsl r3
     8fc:	005a0c80 	subseq	r0, sl, r0, lsl #25
     900:	83050000 	movwhi	r0, #20480	; 0x5000
     904:	00031606 	andeq	r1, r3, r6, lsl #12
     908:	560c8400 	strpl	r8, [ip], -r0, lsl #8
     90c:	05000011 	streq	r0, [r0, #-17]	; 0xffffffef
     910:	03160684 	tsteq	r6, #132, 12	; 0x8400000
     914:	0c880000 	stceq	0, cr0, [r8], {0}
     918:	00000366 	andeq	r0, r0, r6, ror #6
     91c:	16068505 	strne	r8, [r6], -r5, lsl #10
     920:	8c000003 	stchi	0, cr0, [r0], {3}
     924:	000c180c 	andeq	r1, ip, ip, lsl #16
     928:	06860500 	streq	r0, [r6], r0, lsl #10
     92c:	00000316 	andeq	r0, r0, r6, lsl r3
     930:	0ebd0c90 	mrceq	12, 5, r0, cr13, cr0, {4}
     934:	87050000 	strhi	r0, [r5, -r0]
     938:	00031606 	andeq	r1, r3, r6, lsl #12
     93c:	06009400 	streq	r9, [r0], -r0, lsl #8
     940:	00000fd4 	ldrdeq	r0, [r0], -r4
     944:	7c068905 			; <UNDEFINED> instruction: 0x7c068905
     948:	18000007 	stmdane	r0, {r0, r1, r2}
     94c:	84300910 	ldrthi	r0, [r0], #-2320	; 0xfffff6f0
     950:	19000009 	stmdbne	r0, {r0, r3}
     954:	000011ca 	andeq	r1, r0, sl, asr #3
     958:	030b3209 	movweq	r3, #45577	; 0xb209
     95c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     960:	0000009a 	muleq	r0, sl, r0
     964:	030b3309 	movweq	r3, #45833	; 0xb309
     968:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     96c:	000005cb 	andeq	r0, r0, fp, asr #11
     970:	030b3409 	movweq	r3, #46089	; 0xb409
     974:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     978:	00000541 	andeq	r0, r0, r1, asr #10
     97c:	030b3509 	movweq	r3, #46345	; 0xb509
     980:	000c0000 	andeq	r0, ip, r0
     984:	000fbd07 	andeq	fp, pc, r7, lsl #26
     988:	4b360900 	blmi	d82d90 <startup-0x1f27d270>
     98c:	0f000009 	svceq	0x00000009
     990:	000002e6 	andeq	r0, r0, r6, ror #5
     994:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
     998:	0002ca10 	andeq	ip, r2, r0, lsl sl
     99c:	0a000f00 	beq	45a4 <startup-0x1fffba5c>
     9a0:	0000098f 	andeq	r0, r0, pc, lsl #19
     9a4:	00099f09 	andeq	r9, r9, r9, lsl #30
     9a8:	099d1a00 	ldmibeq	sp, {r9, fp, ip}
     9ac:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
     9b0:	000009a4 	andeq	r0, r0, r4, lsr #19
     9b4:	31680305 	cmncc	r8, r5, lsl #6
     9b8:	071b2000 	ldreq	r2, [fp, -r0]
     9bc:	00027101 	andeq	r7, r2, r1, lsl #2
     9c0:	e0420a00 	sub	r0, r2, r0, lsl #20
     9c4:	04000009 	streq	r0, [r0], #-9
     9c8:	000008cf 	andeq	r0, r0, pc, asr #17
     9cc:	07600400 	strbeq	r0, [r0, -r0, lsl #8]!
     9d0:	04010000 	streq	r0, [r1], #-0
     9d4:	00000282 	andeq	r0, r0, r2, lsl #5
     9d8:	02be0402 	adcseq	r0, lr, #33554432	; 0x2000000
     9dc:	00030000 	andeq	r0, r3, r0
     9e0:	000df507 	andeq	pc, sp, r7, lsl #10
     9e4:	ba470a00 	blt	11c31ec <startup-0x1ee3ce14>
     9e8:	1b000009 	blne	a14 <startup-0x1ffff5ec>
     9ec:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
     9f0:	4f0a0000 	svcmi	0x000a0000
     9f4:	00000a05 	andeq	r0, r0, r5, lsl #20
     9f8:	00043d04 	andeq	r3, r4, r4, lsl #26
     9fc:	7f040000 	svcvc	0x00040000
     a00:	01000003 	tsteq	r0, r3
     a04:	012a0700 			; <UNDEFINED> instruction: 0x012a0700
     a08:	520a0000 	andpl	r0, sl, #0
     a0c:	000009eb 	andeq	r0, r0, fp, ror #19
     a10:	7101071b 	tstvc	r1, fp, lsl r7
     a14:	0a000002 	beq	a24 <startup-0x1ffff5dc>
     a18:	000a365a 	andeq	r3, sl, sl, asr r6
     a1c:	05510400 	ldrbeq	r0, [r1, #-1024]	; 0xfffffc00
     a20:	04000000 	streq	r0, [r0], #-0
     a24:	000009ae 	andeq	r0, r0, lr, lsr #19
     a28:	12900401 	addsne	r0, r0, #16777216	; 0x1000000
     a2c:	04020000 	streq	r0, [r2], #-0
     a30:	00000a68 	andeq	r0, r0, r8, ror #20
     a34:	50070003 	andpl	r0, r7, r3
     a38:	0a00000f 	beq	a7c <startup-0x1ffff584>
     a3c:	000a105f 	andeq	r1, sl, pc, asr r0
     a40:	01071b00 	tsteq	r7, r0, lsl #22
     a44:	00000271 	andeq	r0, r0, r1, ror r2
     a48:	0a616e0a 	beq	185c278 <startup-0x1e7a3d88>
     a4c:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
     a50:	00000000 	andeq	r0, r0, r0
     a54:	00113c04 	andseq	r3, r1, r4, lsl #24
     a58:	06040100 	streq	r0, [r4], -r0, lsl #2
     a5c:	02000002 	andeq	r0, r0, #2
     a60:	04ab0700 	strteq	r0, [fp], #1792	; 0x700
     a64:	720a0000 	andvc	r0, sl, #0
     a68:	00000a41 	andeq	r0, r0, r1, asr #20
     a6c:	840a0818 	strhi	r0, [sl], #-2072	; 0xfffff7e8
     a70:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     a74:	000f7419 	andeq	r7, pc, r9, lsl r4	; <UNPREDICTABLE>
     a78:	0b860a00 	bleq	fe183280 <GPIO_Ports+0xde1800e8>
     a7c:	00000003 	andeq	r0, r0, r3
     a80:	000d9e19 	andeq	r9, sp, r9, lsl lr
     a84:	e0890a00 	add	r0, r9, r0, lsl #20
     a88:	04000009 	streq	r0, [r0], #-9
     a8c:	000b3d19 	andeq	r3, fp, r9, lsl sp
     a90:	368c0a00 	strcc	r0, [ip], r0, lsl #20
     a94:	0500000a 	streq	r0, [r0, #-10]
     a98:	00098719 	andeq	r8, r9, r9, lsl r7
     a9c:	058f0a00 	streq	r0, [pc, #2560]	; 14a4 <startup-0x1fffeb5c>
     aa0:	0600000a 	streq	r0, [r0], -sl
     aa4:	000fa119 	andeq	sl, pc, r9, lsl r1	; <UNPREDICTABLE>
     aa8:	61920a00 	orrsvs	r0, r2, r0, lsl #20
     aac:	0700000a 	streq	r0, [r0, -sl]
     ab0:	038d0700 	orreq	r0, sp, #0, 14
     ab4:	940a0000 	strls	r0, [sl], #-0
     ab8:	00000a6c 	andeq	r0, r0, ip, ror #20
     abc:	0008bf1c 	andeq	fp, r8, ip, lsl pc
     ac0:	010b2000 	mrseq	r2, (UNDEF: 11)
     ac4:	00000b34 	andeq	r0, r0, r4, lsr fp
     ac8:	0064691d 	rsbeq	r6, r4, sp, lsl r9
     acc:	0b34030b 	bleq	d01700 <startup-0x1f2fe900>
     ad0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     ad4:	000002db 	ldrdeq	r0, [r0], -fp
     ad8:	02c3040b 	sbceq	r0, r3, #184549376	; 0xb000000
     adc:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     ae0:	000001ca 	andeq	r0, r0, sl, asr #3
     ae4:	0b34050b 	bleq	d01f18 <startup-0x1f2fe0e8>
     ae8:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     aec:	00000c79 	andeq	r0, r0, r9, ror ip
     af0:	0b34060b 	bleq	d02324 <startup-0x1f2fdcdc>
     af4:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
     af8:	00000ffe 	strdeq	r0, [r0], -lr
     afc:	02c3070b 	sbceq	r0, r3, #2883584	; 0x2c0000
     b00:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     b04:	00000f19 	andeq	r0, r0, r9, lsl pc
     b08:	02c3080b 	sbceq	r0, r3, #720896	; 0xb0000
     b0c:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
     b10:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
     b14:	02c3090b 	sbceq	r0, r3, #180224	; 0x2c000
     b18:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     b1c:	000010f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
     b20:	02c30a0b 	sbceq	r0, r3, #45056	; 0xb000
     b24:	19180000 	ldmdbne	r8, {}	; <UNPREDICTABLE>
     b28:	0000101c 	andeq	r1, r0, ip, lsl r0
     b2c:	0b3b0b0b 	bleq	ec3760 <startup-0x1f13c8a0>
     b30:	001c0000 	andseq	r0, ip, r0
     b34:	03080105 	movweq	r0, #33029	; 0x8105
     b38:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
     b3c:	00077004 	andeq	r7, r7, r4
     b40:	08c00700 	stmiaeq	r0, {r8, r9, sl}^
     b44:	0c0b0000 	stceq	0, cr0, [fp], {-0}
     b48:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     b4c:	0002eb0f 	andeq	lr, r2, pc, lsl #22
     b50:	000b5c00 	andeq	r5, fp, r0, lsl #24
     b54:	02ca1000 	sbceq	r1, sl, #0
     b58:	000f0000 	andeq	r0, pc, r0
     b5c:	0007561f 	andeq	r5, r7, pc, lsl r6
     b60:	4c170400 	cfldrsmi	mvf0, [r7], {-0}
     b64:	0500000b 	streq	r0, [r0, #-11]
     b68:	00317803 	eorseq	r7, r1, r3, lsl #16
     b6c:	0b3b0f20 	bleq	ec47f4 <startup-0x1f13b80c>
     b70:	0b7d0000 	bleq	1f40b78 <startup-0x1e0bf488>
     b74:	ca100000 	bgt	400b7c <startup-0x1fbff484>
     b78:	03000002 	movweq	r0, #2
     b7c:	023a1f00 	eorseq	r1, sl, #0, 30
     b80:	1c040000 	stcne	0, cr0, [r4], {-0}
     b84:	00000b6d 	andeq	r0, r0, sp, ror #22
     b88:	31980305 	orrscc	r0, r8, r5, lsl #6
     b8c:	2d1f2000 	ldccs	0, cr2, [pc, #-0]	; b94 <startup-0x1ffff46c>
     b90:	04000009 	streq	r0, [r0], #-9
     b94:	0003161f 	andeq	r1, r3, pc, lsl r6
     b98:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
     b9c:	20200031 	eorcs	r0, r0, r1, lsr r0
     ba0:	000010d3 	ldrdeq	r1, [r0], -r3
     ba4:	0fe03504 	svceq	0x00e03504
     ba8:	0e4c2000 	cdpeq	0, 4, cr2, cr12, cr0, {0}
     bac:	9c010000 	stcls	0, cr0, [r1], {-0}
     bb0:	00000eb7 			; <UNDEFINED> instruction: 0x00000eb7
     bb4:	0004e11a 	andeq	lr, r4, sl, lsl r1
     bb8:	413b0400 	teqmi	fp, r0, lsl #8
     bbc:	0300000b 	movweq	r0, #11
     bc0:	1a7f9091 	bne	1fe4e0c <startup-0x1e01b1f4>
     bc4:	000004e7 	andeq	r0, r0, r7, ror #9
     bc8:	0b413b04 	bleq	104f7e0 <startup-0x1efb0820>
     bcc:	91030000 	mrsls	r0, (UNDEF: 3)
     bd0:	ed1a7ef0 	ldc	14, cr7, [sl, #-960]	; 0xfffffc40
     bd4:	04000004 	streq	r0, [r0], #-4
     bd8:	000b413b 	andeq	r4, fp, fp, lsr r1
     bdc:	d0910300 	addsle	r0, r1, r0, lsl #6
     be0:	04f31a7e 	ldrbteq	r1, [r3], #2686	; 0xa7e
     be4:	3b040000 	blcc	100bec <startup-0x1feff414>
     be8:	00000b41 	andeq	r0, r0, r1, asr #22
     bec:	7eb09103 	asnvcs	f1, f3
     bf0:	0004f91a 	andeq	pc, r4, sl, lsl r9	; <UNPREDICTABLE>
     bf4:	413b0400 	teqmi	fp, r0, lsl #8
     bf8:	0300000b 	movweq	r0, #11
     bfc:	1a7e9091 	bne	1fa4e48 <startup-0x1e05b1b8>
     c00:	000004ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     c04:	0b413b04 	bleq	104f81c <startup-0x1efb07e4>
     c08:	91030000 	mrsls	r0, (UNDEF: 3)
     c0c:	051a7df0 	ldreq	r7, [sl, #-3568]	; 0xfffff210
     c10:	04000005 	streq	r0, [r0], #-5
     c14:	000b413b 	andeq	r4, fp, fp, lsr r1
     c18:	d0910300 	addsle	r0, r1, r0, lsl #6
     c1c:	050b1a7d 	streq	r1, [fp, #-2685]	; 0xfffff583
     c20:	3b040000 	blcc	100c28 <startup-0x1feff3d8>
     c24:	00000b41 	andeq	r0, r0, r1, asr #22
     c28:	7db09103 	ldfvcd	f1, [r0, #12]!
     c2c:	000de01a 	andeq	lr, sp, sl, lsl r0
     c30:	413b0400 	teqmi	fp, r0, lsl #8
     c34:	0300000b 	movweq	r0, #11
     c38:	1a7d9091 	bne	1f64e84 <startup-0x1e09b17c>
     c3c:	00000de7 	andeq	r0, r0, r7, ror #27
     c40:	0b413b04 	bleq	104f858 <startup-0x1efb07a8>
     c44:	91030000 	mrsls	r0, (UNDEF: 3)
     c48:	ee1a7cf0 	mrc	12, 0, r7, cr10, cr0, {7}
     c4c:	0400000d 	streq	r0, [r0], #-13
     c50:	000b413b 	andeq	r4, fp, fp, lsr r1
     c54:	d0910300 	addsle	r0, r1, r0, lsl #6
     c58:	05db1a7c 	ldrbeq	r1, [fp, #2684]	; 0xa7c
     c5c:	3b040000 	blcc	100c64 <startup-0x1feff39c>
     c60:	00000b41 	andeq	r0, r0, r1, asr #22
     c64:	7cb09103 	ldfvcd	f1, [r0], #12
     c68:	000e061a 	andeq	r0, lr, sl, lsl r6
     c6c:	413b0400 	teqmi	fp, r0, lsl #8
     c70:	0300000b 	movweq	r0, #11
     c74:	1a7c9091 	bne	1f24ec0 <startup-0x1e0db140>
     c78:	00000e0d 	andeq	r0, r0, sp, lsl #28
     c7c:	0b413b04 	bleq	104f894 <startup-0x1efb076c>
     c80:	91030000 	mrsls	r0, (UNDEF: 3)
     c84:	141a7bf0 	ldrne	r7, [sl], #-3056	; 0xfffff410
     c88:	0400000e 	streq	r0, [r0], #-14
     c8c:	000b413b 	andeq	r4, fp, fp, lsr r1
     c90:	d0910300 	addsle	r0, r1, r0, lsl #6
     c94:	11be1a7b 			; <UNDEFINED> instruction: 0x11be1a7b
     c98:	3b040000 	blcc	100ca0 <startup-0x1feff360>
     c9c:	00000b41 	andeq	r0, r0, r1, asr #22
     ca0:	7bb09103 	blvc	fec250b4 <GPIO_Ports+0xdec21f1c>
     ca4:	000e1b1a 	andeq	r1, lr, sl, lsl fp
     ca8:	413b0400 	teqmi	fp, r0, lsl #8
     cac:	0300000b 	movweq	r0, #11
     cb0:	1a7b9091 	bne	1ee4efc <startup-0x1e11b104>
     cb4:	00000e22 	andeq	r0, r0, r2, lsr #28
     cb8:	0b413b04 	bleq	104f8d0 <startup-0x1efb0730>
     cbc:	91030000 	mrsls	r0, (UNDEF: 3)
     cc0:	f61a7af0 			; <UNDEFINED> instruction: 0xf61a7af0
     cc4:	0400000e 	streq	r0, [r0], #-14
     cc8:	000b413b 	andeq	r4, fp, fp, lsr r1
     ccc:	d0910300 	addsle	r0, r1, r0, lsl #6
     cd0:	0efd1a7a 			; <UNDEFINED> instruction: 0x0efd1a7a
     cd4:	3b040000 	blcc	100cdc <startup-0x1feff324>
     cd8:	00000b41 	andeq	r0, r0, r1, asr #22
     cdc:	7ab09103 	bvc	fec250f0 <GPIO_Ports+0xdec21f58>
     ce0:	000f041a 	andeq	r0, pc, sl, lsl r4	; <UNPREDICTABLE>
     ce4:	413b0400 	teqmi	fp, r0, lsl #8
     ce8:	0300000b 	movweq	r0, #11
     cec:	1a7a9091 	bne	1ea4f38 <startup-0x1e15b0c8>
     cf0:	00000f0b 	andeq	r0, r0, fp, lsl #30
     cf4:	0b413b04 	bleq	104f90c <startup-0x1efb06f4>
     cf8:	91030000 	mrsls	r0, (UNDEF: 3)
     cfc:	121a79f0 	andsne	r7, sl, #240, 18	; 0x3c0000
     d00:	0400000f 	streq	r0, [r0], #-15
     d04:	000b413b 	andeq	r4, fp, fp, lsr r1
     d08:	d0910300 	addsle	r0, r1, r0, lsl #6
     d0c:	000e1a79 	andeq	r1, lr, r9, ror sl
     d10:	3b040000 	blcc	100d18 <startup-0x1feff2e8>
     d14:	00000b41 	andeq	r0, r0, r1, asr #22
     d18:	79b09103 	ldmibvc	r0!, {r0, r1, r8, ip, pc}
     d1c:	0000151a 	andeq	r1, r0, sl, lsl r5
     d20:	413b0400 	teqmi	fp, r0, lsl #8
     d24:	0300000b 	movweq	r0, #11
     d28:	1a799091 	bne	1e64f74 <startup-0x1e19b08c>
     d2c:	000008fd 	strdeq	r0, [r0], -sp
     d30:	0b413b04 	bleq	104f948 <startup-0x1efb06b8>
     d34:	91030000 	mrsls	r0, (UNDEF: 3)
     d38:	3d1a78f0 	ldccc	8, cr7, [sl, #-960]	; 0xfffffc40
     d3c:	0400000f 	streq	r0, [r0], #-15
     d40:	000b413b 	andeq	r4, fp, fp, lsr r1
     d44:	d0910300 	addsle	r0, r1, r0, lsl #6
     d48:	0f441a78 	svceq	0x00441a78
     d4c:	3b040000 	blcc	100d54 <startup-0x1feff2ac>
     d50:	00000b41 	andeq	r0, r0, r1, asr #22
     d54:	78b09103 	ldmvc	r0!, {r0, r1, r8, ip, pc}
     d58:	000fe01a 	andeq	lr, pc, sl, lsl r0	; <UNPREDICTABLE>
     d5c:	413b0400 	teqmi	fp, r0, lsl #8
     d60:	0300000b 	movweq	r0, #11
     d64:	1a789091 	bne	1e24fb0 <startup-0x1e1db050>
     d68:	00000fe7 	andeq	r0, r0, r7, ror #31
     d6c:	0b413b04 	bleq	104f984 <startup-0x1efb067c>
     d70:	91030000 	mrsls	r0, (UNDEF: 3)
     d74:	d41a77f0 	ldrle	r7, [sl], #-2032	; 0xfffff810
     d78:	04000000 	streq	r0, [r0], #-0
     d7c:	000b413b 	andeq	r4, fp, fp, lsr r1
     d80:	d0910300 	addsle	r0, r1, r0, lsl #6
     d84:	05e71a77 	strbeq	r1, [r7, #2679]!	; 0xa77
     d88:	3c040000 	stccc	0, cr0, [r4], {-0}
     d8c:	00000eb7 			; <UNDEFINED> instruction: 0x00000eb7
     d90:	6fd09103 	svcvs	0x00d09103
     d94:	0006b21a 	andeq	fp, r6, sl, lsl r2
     d98:	c33e0400 	teqgt	lr, #0, 8
     d9c:	02000002 	andeq	r0, r0, #2
     da0:	f91a5c91 			; <UNDEFINED> instruction: 0xf91a5c91
     da4:	0400000b 	streq	r0, [r0], #-11
     da8:	000ec748 	andeq	ip, lr, r8, asr #14
     dac:	b0910400 	addslt	r0, r1, r0, lsl #8
     db0:	3d1a067f 	ldccc	6, cr0, [sl, #-508]	; 0xfffffe04
     db4:	04000007 	streq	r0, [r0], #-7
     db8:	0002c349 	andeq	ip, r2, r9, asr #6
     dbc:	58910200 	ldmpl	r1, {r9}
     dc0:	00156621 	andseq	r6, r5, r1, lsr #12
     dc4:	0000b820 	andeq	fp, r0, r0, lsr #16
     dc8:	000df000 	andeq	pc, sp, r0
     dcc:	006a2200 	rsbeq	r2, sl, r0, lsl #4
     dd0:	02c33f04 	sbceq	r3, r3, #4, 30
     dd4:	91020000 	mrsls	r0, (UNDEF: 2)
     dd8:	15782360 	ldrbne	r2, [r8, #-864]!	; 0xfffffca0
     ddc:	007c2000 	rsbseq	r2, ip, r0
     de0:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
     de4:	c3410400 	movtgt	r0, #5120	; 0x1400
     de8:	02000002 	andeq	r0, r0, #2
     dec:	00006491 	muleq	r0, r1, r4
     df0:	0016aa21 	andseq	sl, r6, r1, lsr #20
     df4:	00020420 	andeq	r0, r2, r0, lsr #8
     df8:	000e2000 	andeq	r2, lr, r0
     dfc:	006a2200 	rsbeq	r2, sl, r0, lsl #4
     e00:	02c34a04 	sbceq	r4, r3, #4, 20	; 0x4000
     e04:	91020000 	mrsls	r0, (UNDEF: 2)
     e08:	16ba2354 	ssatne	r2, #27, r4, asr #6
     e0c:	01cc2000 	biceq	r2, ip, r0
     e10:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
     e14:	c34c0400 	movtgt	r0, #50176	; 0xc400
     e18:	02000002 	andeq	r0, r0, #2
     e1c:	00005091 	muleq	r0, r1, r0
     e20:	0018ae21 	andseq	sl, r8, r1, lsr #28
     e24:	00007620 	andeq	r7, r0, r0, lsr #12
     e28:	000e3a00 	andeq	r3, lr, r0, lsl #20
     e2c:	00692200 	rsbeq	r2, r9, r0, lsl #4
     e30:	02c35b04 	sbceq	r5, r3, #4, 22	; 0x1000
     e34:	91020000 	mrsls	r0, (UNDEF: 2)
     e38:	2421004c 	strtcs	r0, [r1], #-76	; 0xffffffb4
     e3c:	7a200019 	bvc	800ea8 <startup-0x1f7ff158>
     e40:	54000000 	strpl	r0, [r0], #-0
     e44:	2200000e 	andcs	r0, r0, #14
     e48:	61040069 	tstvs	r4, r9, rrx
     e4c:	000002c3 	andeq	r0, r0, r3, asr #5
     e50:	00489102 	subeq	r9, r8, r2, lsl #2
     e54:	0019a421 	andseq	sl, r9, r1, lsr #8
     e58:	00007020 	andeq	r7, r0, r0, lsr #32
     e5c:	000e6e00 	andeq	r6, lr, r0, lsl #28
     e60:	00692200 	rsbeq	r2, r9, r0, lsl #4
     e64:	02c36704 	sbceq	r6, r3, #4, 14	; 0x100000
     e68:	91020000 	mrsls	r0, (UNDEF: 2)
     e6c:	1c210044 	stcne	0, cr0, [r1], #-272	; 0xfffffef0
     e70:	7620001a 			; <UNDEFINED> instruction: 0x7620001a
     e74:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     e78:	2200000e 	andcs	r0, r0, #14
     e7c:	6c040069 	stcvs	0, cr0, [r4], {105}	; 0x69
     e80:	000002c3 	andeq	r0, r0, r3, asr #5
     e84:	00409102 	subeq	r9, r0, r2, lsl #2
     e88:	001a9c23 	andseq	r9, sl, r3, lsr #24
     e8c:	00037e20 	andeq	r7, r3, r0, lsr #28
     e90:	00692200 	rsbeq	r2, r9, r0, lsl #4
     e94:	02c37604 	sbceq	r7, r3, #4, 12	; 0x400000
     e98:	91030000 	mrsls	r0, (UNDEF: 3)
     e9c:	f6237fbc 			; <UNDEFINED> instruction: 0xf6237fbc
     ea0:	f620001b 			; <UNDEFINED> instruction: 0xf620001b
     ea4:	22000001 	andcs	r0, r0, #1
     ea8:	86040069 	strhi	r0, [r4], -r9, rrx
     eac:	000002c3 	andeq	r0, r0, r3, asr #5
     eb0:	7fb89103 	svcvc	0x00b89103
     eb4:	0f000000 	svceq	0x00000000
     eb8:	00000b41 	andeq	r0, r0, r1, asr #22
     ebc:	00000ec7 	andeq	r0, r0, r7, asr #29
     ec0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     ec4:	0f001f00 	svceq	0x00001f00
     ec8:	00000b41 	andeq	r0, r0, r1, asr #22
     ecc:	00000edb 	ldrdeq	r0, [r0], -fp
     ed0:	0002ca24 	andeq	ip, r2, r4, lsr #20
     ed4:	b4910400 	ldrlt	r0, [r1], #1024	; 0x400
     ed8:	2500067f 	strcs	r0, [r0, #-1663]	; 0xfffff981
     edc:	00000193 	muleq	r0, r3, r1
     ee0:	0fb43004 	svceq	0x00b43004
     ee4:	002c2000 	eoreq	r2, ip, r0
     ee8:	9c010000 	stcls	0, cr0, [r1], {-0}
     eec:	00000f0d 	andeq	r0, r0, sp, lsl #30
     ef0:	0010d826 	andseq	sp, r0, r6, lsr #16
     ef4:	c3300400 	teqgt	r0, #0, 8
     ef8:	02000002 	andeq	r0, r0, #2
     efc:	971a6c91 			; <UNDEFINED> instruction: 0x971a6c91
     f00:	0400000e 	streq	r0, [r0], #-14
     f04:	0002c331 	andeq	ip, r2, r1, lsr r3
     f08:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f0c:	0bb22000 	bleq	fec88f14 <GPIO_Ports+0xdec85d7c>
     f10:	24040000 	strcs	r0, [r4], #-0
     f14:	20000f88 	andcs	r0, r0, r8, lsl #31
     f18:	0000002c 	andeq	r0, r0, ip, lsr #32
     f1c:	0f319c01 	svceq	0x00319c01
     f20:	1f1a0000 	svcne	0x001a0000
     f24:	04000001 	streq	r0, [r0], #-1
     f28:	00030b28 	andeq	r0, r3, r8, lsr #22
     f2c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f30:	024b2700 	subeq	r2, fp, #0, 14
     f34:	20040000 	andcs	r0, r4, r0
     f38:	20000f70 	andcs	r0, r0, r0, ror pc
     f3c:	00000018 	andeq	r0, r0, r8, lsl r0
     f40:	d0279c01 	eorle	r9, r7, r1, lsl #24
     f44:	0400000c 	streq	r0, [r0], #-12
     f48:	0000000d 	andeq	r0, r0, sp
     f4c:	00000c20 	andeq	r0, r0, r0, lsr #24
     f50:	289c0100 	ldmcs	ip, {r8}
     f54:	00000235 	andeq	r0, r0, r5, lsr r2
     f58:	0da80203 	sfmeq	f0, 4, [r8, #12]!
     f5c:	01c82000 	biceq	r2, r8, r0
     f60:	9c010000 	stcls	0, cr0, [r1], {-0}
     f64:	00000f77 	andeq	r0, r0, r7, ror pc
     f68:	000ead1a 	andeq	sl, lr, sl, lsl sp
     f6c:	b1050300 	mrslt	r0, SP_abt
     f70:	0200000a 	andeq	r0, r0, #10
     f74:	29007091 	stmdbcs	r0, {r0, r4, r7, ip, sp, lr}
     f78:	00000b55 	andeq	r0, r0, r5, asr fp
     f7c:	880c5e02 	stmdahi	ip, {r1, r9, sl, fp, ip, lr}
     f80:	2020000d 	eorcs	r0, r0, sp
     f84:	01000000 	mrseq	r0, (UNDEF: 0)
     f88:	000f9d9c 	muleq	pc, ip, sp	; <UNPREDICTABLE>
     f8c:	10102a00 	andsne	r2, r0, r0, lsl #20
     f90:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
     f94:	0002d10c 	andeq	sp, r2, ip, lsl #2
     f98:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     f9c:	0b062b00 	bleq	18bba4 <startup-0x1fe7445c>
     fa0:	3c020000 	stccc	0, cr0, [r2], {-0}
     fa4:	0006750c 	andeq	r7, r6, ip, lsl #10
     fa8:	000d4400 	andeq	r4, sp, r0, lsl #8
     fac:	00004420 	andeq	r4, r0, r0, lsr #8
     fb0:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
     fb4:	2a00000f 	bcs	ff8 <startup-0x1ffff008>
     fb8:	00001010 	andeq	r1, r0, r0, lsl r0
     fbc:	d10c3c02 	tstle	ip, r2, lsl #24
     fc0:	02000002 	andeq	r0, r0, #2
     fc4:	442c6f91 	strtmi	r6, [ip], #-3985	; 0xfffff06f
     fc8:	02000010 	andeq	r0, r0, #16
     fcc:	06750c3e 			; <UNDEFINED> instruction: 0x06750c3e
     fd0:	91020000 	mrsls	r0, (UNDEF: 2)
     fd4:	d52d0077 	strle	r0, [sp, #-119]!	; 0xffffff89
     fd8:	02000006 	andeq	r0, r0, #6
     fdc:	0d280c28 	stceq	12, cr0, [r8, #-160]!	; 0xffffff60
     fe0:	001c2000 	andseq	r2, ip, r0
     fe4:	9c010000 	stcls	0, cr0, [r1], {-0}
     fe8:	000a452b 	andeq	r4, sl, fp, lsr #10
     fec:	0bfb0200 	bleq	ffec17f4 <GPIO_Ports+0xdfebe65c>
     ff0:	00000669 	andeq	r0, r0, r9, ror #12
     ff4:	20000ca4 	andcs	r0, r0, r4, lsr #25
     ff8:	00000084 	andeq	r0, r0, r4, lsl #1
     ffc:	103f9c01 	eorsne	r9, pc, r1, lsl #24
    1000:	fd2a0000 	stc2	0, cr0, [sl, #-0]
    1004:	0200000a 	andeq	r0, r0, #10
    1008:	02d10bfb 	sbcseq	r0, r1, #257024	; 0x3ec00
    100c:	91020000 	mrsls	r0, (UNDEF: 2)
    1010:	6d742e67 	ldclvs	14, cr2, [r4, #-412]!	; 0xfffffe64
    1014:	fd020070 	stc2	0, cr0, [r2, #-448]	; 0xfffffe40
    1018:	00030b0b 	andeq	r0, r3, fp, lsl #22
    101c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1020:	000bbf2c 	andeq	fp, fp, ip, lsr #30
    1024:	0bfe0200 	bleq	fff8182c <GPIO_Ports+0xdff7e694>
    1028:	0000030b 	andeq	r0, r0, fp, lsl #6
    102c:	2c749102 	ldfcsp	f1, [r4], #-8
    1030:	00001044 	andeq	r1, r0, r4, asr #32
    1034:	690bff02 	stmdbvs	fp, {r1, r8, r9, sl, fp, ip, sp, lr, pc}
    1038:	02000006 	andeq	r0, r0, #6
    103c:	29007391 	stmdbcs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    1040:	00000a78 	andeq	r0, r0, r8, ror sl
    1044:	540bd602 	strpl	sp, [fp], #-1538	; 0xfffff9fe
    1048:	5020000c 	eorpl	r0, r0, ip
    104c:	01000000 	mrseq	r0, (UNDEF: 0)
    1050:	0010749c 	mulseq	r0, ip, r4
    1054:	10102a00 	andsne	r2, r0, r0, lsl #20
    1058:	d6020000 	strle	r0, [r2], -r0
    105c:	0002d10b 	andeq	sp, r2, fp, lsl #2
    1060:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1064:	000b342a 	andeq	r3, fp, sl, lsr #8
    1068:	0bd60200 	bleq	ff581870 <GPIO_Ports+0xdf57e6d8>
    106c:	0000069c 	muleq	r0, ip, r6
    1070:	00769102 	rsbseq	r9, r6, r2, lsl #2
    1074:	000dbf29 	andeq	fp, sp, r9, lsr #30
    1078:	0a9e0200 	beq	fe781880 <GPIO_Ports+0xde77e6e8>
    107c:	20000c18 	andcs	r0, r0, r8, lsl ip
    1080:	0000003c 	andeq	r0, r0, ip, lsr r0
    1084:	109a9c01 	addsne	r9, sl, r1, lsl #24
    1088:	532a0000 			; <UNDEFINED> instruction: 0x532a0000
    108c:	02000001 	andeq	r0, r0, #1
    1090:	02d10a9e 	sbcseq	r0, r1, #647168	; 0x9e000
    1094:	91020000 	mrsls	r0, (UNDEF: 2)
    1098:	e5290077 	str	r0, [r9, #-119]!	; 0xffffff89
    109c:	02000000 	andeq	r0, r0, #0
    10a0:	0bd80a86 	bleq	ff603ac0 <GPIO_Ports+0xdf600928>
    10a4:	00402000 	subeq	r2, r0, r0
    10a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    10ac:	000010cf 	andeq	r1, r0, pc, asr #1
    10b0:	000bc92a 	andeq	ip, fp, sl, lsr #18
    10b4:	0a860200 	beq	fe1818bc <GPIO_Ports+0xde17e724>
    10b8:	0000030b 	andeq	r0, r0, fp, lsl #6
    10bc:	2a749102 	bcs	1d254cc <startup-0x1e2dab34>
    10c0:	00000b34 	andeq	r0, r0, r4, lsr fp
    10c4:	9c0a8602 	stcls	6, cr8, [sl], {2}
    10c8:	02000006 	andeq	r0, r0, #6
    10cc:	29007391 	stmdbcs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    10d0:	0000105c 	andeq	r1, r0, ip, asr r0
    10d4:	980a5202 	stmdals	sl, {r1, r9, ip, lr}
    10d8:	4020000b 	eormi	r0, r0, fp
    10dc:	01000000 	mrseq	r0, (UNDEF: 0)
    10e0:	0011049c 	mulseq	r1, ip, r4
    10e4:	0acc2a00 	beq	ff30b8ec <GPIO_Ports+0xdf308754>
    10e8:	52020000 	andpl	r0, r2, #0
    10ec:	00030b0a 	andeq	r0, r3, sl, lsl #22
    10f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    10f4:	000b342a 	andeq	r3, fp, sl, lsr #8
    10f8:	0a520200 	beq	1481900 <startup-0x1eb7e700>
    10fc:	0000069c 	muleq	r0, ip, r6
    1100:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1104:	00051129 	andeq	r1, r5, r9, lsr #2
    1108:	0a190200 	beq	641910 <startup-0x1f9be6f0>
    110c:	20000b58 	andcs	r0, r0, r8, asr fp
    1110:	00000040 	andeq	r0, r0, r0, asr #32
    1114:	11399c01 	teqne	r9, r1, lsl #24
    1118:	4b2a0000 	blmi	a81120 <startup-0x1f57eee0>
    111c:	02000003 	andeq	r0, r0, #3
    1120:	030b0a19 	movweq	r0, #47641	; 0xba19
    1124:	91020000 	mrsls	r0, (UNDEF: 2)
    1128:	0b342a74 	bleq	d0bb00 <startup-0x1f2f4500>
    112c:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    1130:	00069c0a 	andeq	r9, r6, sl, lsl #24
    1134:	73910200 	orrsvc	r0, r1, #0, 4
    1138:	01022900 	tsteq	r2, r0, lsl #18
    113c:	fb020000 	blx	81146 <startup-0x1ff7eeba>
    1140:	000b1809 	andeq	r1, fp, r9, lsl #16
    1144:	00004020 	andeq	r4, r0, r0, lsr #32
    1148:	6e9c0100 	fmlvse	f0, f4, f0
    114c:	2a000011 	bcs	1198 <startup-0x1fffee68>
    1150:	0000112d 	andeq	r1, r0, sp, lsr #2
    1154:	0b09fb02 	bleq	27fd64 <startup-0x1fd8029c>
    1158:	02000003 	andeq	r0, r0, #3
    115c:	342a7491 	strtcc	r7, [sl], #-1169	; 0xfffffb6f
    1160:	0200000b 	andeq	r0, r0, #11
    1164:	069c09fb 			; <UNDEFINED> instruction: 0x069c09fb
    1168:	91020000 	mrsls	r0, (UNDEF: 2)
    116c:	ae290073 	mcrge	0, 1, r0, cr9, cr3, {3}
    1170:	02000010 	andeq	r0, r0, #16
    1174:	0ad809db 	beq	ff6038e8 <GPIO_Ports+0xdf600750>
    1178:	00402000 	subeq	r2, r0, r0
    117c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1180:	000011a3 	andeq	r1, r0, r3, lsr #3
    1184:	000ecb2a 	andeq	ip, lr, sl, lsr #22
    1188:	09db0200 	ldmibeq	fp, {r9}^
    118c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1190:	2a749102 	bcs	1d255a0 <startup-0x1e2daa60>
    1194:	00000b34 	andeq	r0, r0, r4, lsr fp
    1198:	9c09db02 			; <UNDEFINED> instruction: 0x9c09db02
    119c:	02000006 	andeq	r0, r0, #6
    11a0:	29007391 	stmdbcs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    11a4:	000004ca 	andeq	r0, r0, sl, asr #9
    11a8:	9809aa02 	stmdals	r9, {r1, r9, fp, sp, pc}
    11ac:	4020000a 	eormi	r0, r0, sl
    11b0:	01000000 	mrseq	r0, (UNDEF: 0)
    11b4:	0011d89c 	mulseq	r1, ip, r8
    11b8:	0bc92a00 	bleq	ff24b9c0 <GPIO_Ports+0xdf248828>
    11bc:	aa020000 	bge	811c4 <startup-0x1ff7ee3c>
    11c0:	00030b09 	andeq	r0, r3, r9, lsl #22
    11c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    11c8:	000b342a 	andeq	r3, fp, sl, lsr #8
    11cc:	09aa0200 	stmibeq	sl!, {r9}
    11d0:	0000069c 	muleq	r0, ip, r6
    11d4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    11d8:	00013c29 	andeq	r3, r1, r9, lsr #24
    11dc:	097b0200 	ldmdbeq	fp!, {r9}^
    11e0:	20000a58 	andcs	r0, r0, r8, asr sl
    11e4:	00000040 	andeq	r0, r0, r0, asr #32
    11e8:	120d9c01 	andne	r9, sp, #256	; 0x100
    11ec:	cc2a0000 	stcgt	0, cr0, [sl], #-0
    11f0:	0200000a 	andeq	r0, r0, #10
    11f4:	030b097b 	movweq	r0, #47483	; 0xb97b
    11f8:	91020000 	mrsls	r0, (UNDEF: 2)
    11fc:	0b342a74 	bleq	d0bbd4 <startup-0x1f2f442c>
    1200:	7b020000 	blvc	81208 <startup-0x1ff7edf8>
    1204:	00069c09 	andeq	r9, r6, r9, lsl #24
    1208:	73910200 	orrsvc	r0, r1, #0, 4
    120c:	028f2900 	addeq	r2, pc, #0, 18
    1210:	45020000 	strmi	r0, [r2, #-0]
    1214:	000a1809 	andeq	r1, sl, r9, lsl #16
    1218:	00004020 	andeq	r4, r0, r0, lsr #32
    121c:	429c0100 	addsmi	r0, ip, #0, 2
    1220:	2a000012 	bcs	1270 <startup-0x1fffed90>
    1224:	0000034b 	andeq	r0, r0, fp, asr #6
    1228:	0b094502 	bleq	252638 <startup-0x1fdad9c8>
    122c:	02000003 	andeq	r0, r0, #3
    1230:	342a7491 	strtcc	r7, [sl], #-1169	; 0xfffffb6f
    1234:	0200000b 	andeq	r0, r0, #11
    1238:	069c0945 	ldreq	r0, [ip], r5, asr #18
    123c:	91020000 	mrsls	r0, (UNDEF: 2)
    1240:	40290073 	eormi	r0, r9, r3, ror r0
    1244:	02000012 	andeq	r0, r0, #18
    1248:	09d8092a 	ldmibeq	r8, {r1, r3, r5, r8, fp}^
    124c:	00402000 	subeq	r2, r0, r0
    1250:	9c010000 	stcls	0, cr0, [r1], {-0}
    1254:	00001277 	andeq	r1, r0, r7, ror r2
    1258:	00112d2a 	andseq	r2, r1, sl, lsr #26
    125c:	092a0200 	stmdbeq	sl!, {r9}
    1260:	0000030b 	andeq	r0, r0, fp, lsl #6
    1264:	2a749102 	bcs	1d25674 <startup-0x1e2da98c>
    1268:	00000b34 	andeq	r0, r0, r4, lsr fp
    126c:	9c092a02 			; <UNDEFINED> instruction: 0x9c092a02
    1270:	02000006 	andeq	r0, r0, #6
    1274:	29007391 	stmdbcs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    1278:	00000f7d 	andeq	r0, r0, sp, ror pc
    127c:	98090d02 	stmdals	r9, {r1, r8, sl, fp}
    1280:	40200009 	eormi	r0, r0, r9
    1284:	01000000 	mrseq	r0, (UNDEF: 0)
    1288:	0012ac9c 	mulseq	r2, ip, ip
    128c:	0ecb2a00 	vdiveq.f32	s5, s22, s0
    1290:	0d020000 	stceq	0, cr0, [r2, #-0]
    1294:	00030b09 	andeq	r0, r3, r9, lsl #22
    1298:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    129c:	000b342a 	andeq	r3, fp, sl, lsr #8
    12a0:	090d0200 	stmdbeq	sp, {r9}
    12a4:	0000069c 	muleq	r0, ip, r6
    12a8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    12ac:	00082f29 	andeq	r2, r8, r9, lsr #30
    12b0:	08e30200 	stmiaeq	r3!, {r9}^
    12b4:	20000958 	andcs	r0, r0, r8, asr r9
    12b8:	00000040 	andeq	r0, r0, r0, asr #32
    12bc:	12e19c01 	rscne	r9, r1, #256	; 0x100
    12c0:	c92a0000 	stmdbgt	sl!, {}	; <UNPREDICTABLE>
    12c4:	0200000b 	andeq	r0, r0, #11
    12c8:	030b08e3 	movweq	r0, #47331	; 0xb8e3
    12cc:	91020000 	mrsls	r0, (UNDEF: 2)
    12d0:	0b342a74 	bleq	d0bca8 <startup-0x1f2f4358>
    12d4:	e3020000 	movw	r0, #8192	; 0x2000
    12d8:	00069c08 	andeq	r9, r6, r8, lsl #24
    12dc:	73910200 	orrsvc	r0, r1, #0, 4
    12e0:	03cf2900 	biceq	r2, pc, #0, 18
    12e4:	af020000 	svcge	0x00020000
    12e8:	00091808 	andeq	r1, r9, r8, lsl #16
    12ec:	00004020 	andeq	r4, r0, r0, lsr #32
    12f0:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    12f4:	2a000013 	bcs	1348 <startup-0x1fffecb8>
    12f8:	00000acc 	andeq	r0, r0, ip, asr #21
    12fc:	0b08af02 	bleq	22cf0c <startup-0x1fdd30f4>
    1300:	02000003 	andeq	r0, r0, #3
    1304:	342a7491 	strtcc	r7, [sl], #-1169	; 0xfffffb6f
    1308:	0200000b 	andeq	r0, r0, #11
    130c:	069c08af 	ldreq	r0, [ip], pc, lsr #17
    1310:	91020000 	mrsls	r0, (UNDEF: 2)
    1314:	55290073 	strpl	r0, [r9, #-115]!	; 0xffffff8d
    1318:	0200000c 	andeq	r0, r0, #12
    131c:	08d80876 	ldmeq	r8, {r1, r2, r4, r5, r6, fp}^
    1320:	00402000 	subeq	r2, r0, r0
    1324:	9c010000 	stcls	0, cr0, [r1], {-0}
    1328:	0000134b 	andeq	r1, r0, fp, asr #6
    132c:	00034b2a 	andeq	r4, r3, sl, lsr #22
    1330:	08760200 	ldmdaeq	r6!, {r9}^
    1334:	0000030b 	andeq	r0, r0, fp, lsl #6
    1338:	2a749102 	bcs	1d25748 <startup-0x1e2da8b8>
    133c:	00000b34 	andeq	r0, r0, r4, lsr fp
    1340:	9c087602 	stcls	6, cr7, [r8], {2}
    1344:	02000006 	andeq	r0, r0, #6
    1348:	29007391 	stmdbcs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    134c:	00000177 	andeq	r0, r0, r7, ror r1
    1350:	98085802 	stmdals	r8, {r1, fp, ip, lr}
    1354:	40200008 	eormi	r0, r0, r8
    1358:	01000000 	mrseq	r0, (UNDEF: 0)
    135c:	0013809c 	mulseq	r3, ip, r0
    1360:	112d2a00 			; <UNDEFINED> instruction: 0x112d2a00
    1364:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    1368:	00030b08 	andeq	r0, r3, r8, lsl #22
    136c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1370:	000b342a 	andeq	r3, fp, sl, lsr #8
    1374:	08580200 	ldmdaeq	r8, {r9}^
    1378:	0000069c 	muleq	r0, ip, r6
    137c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1380:	00116629 	andseq	r6, r1, r9, lsr #12
    1384:	08380200 	ldmdaeq	r8!, {r9}
    1388:	20000858 	andcs	r0, r0, r8, asr r8
    138c:	00000040 	andeq	r0, r0, r0, asr #32
    1390:	13b59c01 			; <UNDEFINED> instruction: 0x13b59c01
    1394:	cb2a0000 	blgt	a8139c <startup-0x1f57ec64>
    1398:	0200000e 	andeq	r0, r0, #14
    139c:	030b0838 	movweq	r0, #47160	; 0xb838
    13a0:	91020000 	mrsls	r0, (UNDEF: 2)
    13a4:	0b342a74 	bleq	d0bd7c <startup-0x1f2f4284>
    13a8:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    13ac:	00069c08 	andeq	r9, r6, r8, lsl #24
    13b0:	73910200 	orrsvc	r0, r1, #0, 4
    13b4:	0b862900 	bleq	fe18b7bc <GPIO_Ports+0xde188624>
    13b8:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    13bc:	00083c08 	andeq	r3, r8, r8, lsl #24
    13c0:	00001c20 	andeq	r1, r0, r0, lsr #24
    13c4:	db9c0100 	blle	fe7017cc <GPIO_Ports+0xde6fe634>
    13c8:	2a000013 	bcs	141c <startup-0x1fffebe4>
    13cc:	00001221 	andeq	r1, r0, r1, lsr #4
    13d0:	0b080e02 	bleq	204be0 <startup-0x1fdfb420>
    13d4:	02000003 	andeq	r0, r0, #3
    13d8:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    13dc:	0000025b 	andeq	r0, r0, fp, asr r2
    13e0:	00078e02 	andeq	r8, r7, r2, lsl #28
    13e4:	3c200008 	stccc	0, cr0, [r0], #-32	; 0xffffffe0
    13e8:	01000000 	mrseq	r0, (UNDEF: 0)
    13ec:	0014109c 	mulseq	r4, ip, r0
    13f0:	08552a00 	ldmdaeq	r5, {r9, fp, sp}^
    13f4:	8e020000 	cdphi	0, 0, cr0, cr2, cr0, {0}
    13f8:	00030b07 	andeq	r0, r3, r7, lsl #22
    13fc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1400:	000e9c2c 	andeq	r9, lr, ip, lsr #24
    1404:	07900200 	ldreq	r0, [r0, r0, lsl #4]
    1408:	0000030b 	andeq	r0, r0, fp, lsl #6
    140c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1410:	00021b29 	andeq	r1, r2, r9, lsr #22
    1414:	072b0200 	streq	r0, [fp, -r0, lsl #4]!
    1418:	200007c0 	andcs	r0, r0, r0, asr #15
    141c:	00000040 	andeq	r0, r0, r0, asr #32
    1420:	14459c01 	strbne	r9, [r5], #-3073	; 0xfffff3ff
    1424:	462a0000 	strtmi	r0, [sl], -r0
    1428:	02000008 	andeq	r0, r0, #8
    142c:	030b072b 	movweq	r0, #46891	; 0xb72b
    1430:	91020000 	mrsls	r0, (UNDEF: 2)
    1434:	0e9c2c6c 	cdpeq	12, 9, cr2, cr12, cr12, {3}
    1438:	2d020000 	stccs	0, cr0, [r2, #-0]
    143c:	00030b07 	andeq	r0, r3, r7, lsl #22
    1440:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1444:	09c02900 	stmibeq	r0, {r8, fp, sp}^
    1448:	0b020000 	bleq	81450 <startup-0x1ff7ebb0>
    144c:	00078407 	andeq	r8, r7, r7, lsl #8
    1450:	00003c20 	andeq	r3, r0, r0, lsr #24
    1454:	7a9c0100 	bvc	fe70185c <GPIO_Ports+0xde6fe6c4>
    1458:	2a000014 	bcs	14b0 <startup-0x1fffeb50>
    145c:	0000032f 	andeq	r0, r0, pc, lsr #6
    1460:	0b070b02 	bleq	1c4070 <startup-0x1fe3bf90>
    1464:	02000003 	andeq	r0, r0, #3
    1468:	9c2c6c91 	stcls	12, cr6, [ip], #-580	; 0xfffffdbc
    146c:	0200000e 	andeq	r0, r0, #14
    1470:	030b070d 	movweq	r0, #46861	; 0xb70d
    1474:	91020000 	mrsls	r0, (UNDEF: 2)
    1478:	f2290074 	vqadd.s32	q0, <illegal reg q4.5>, q10
    147c:	02000002 	andeq	r0, r0, #2
    1480:	074806ea 	strbeq	r0, [r8, -sl, ror #13]
    1484:	003c2000 	eorseq	r2, ip, r0
    1488:	9c010000 	stcls	0, cr0, [r1], {-0}
    148c:	000014af 	andeq	r1, r0, pc, lsr #9
    1490:	0008642a 	andeq	r6, r8, sl, lsr #8
    1494:	06ea0200 	strbteq	r0, [sl], r0, lsl #4
    1498:	0000030b 	andeq	r0, r0, fp, lsl #6
    149c:	2c6c9102 	stfcsp	f1, [ip], #-8
    14a0:	00000e9c 	muleq	r0, ip, lr
    14a4:	0b06ec02 	bleq	1bc4b4 <startup-0x1fe43b4c>
    14a8:	02000003 	andeq	r0, r0, #3
    14ac:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    14b0:	0000071f 	andeq	r0, r0, pc, lsl r7
    14b4:	0c06c602 	stceq	6, cr12, [r6], {2}
    14b8:	3c200007 	stccc	0, cr0, [r0], #-28	; 0xffffffe4
    14bc:	01000000 	mrseq	r0, (UNDEF: 0)
    14c0:	0014e49c 	mulseq	r4, ip, r4
    14c4:	0b9b2a00 	bleq	fe6cbccc <GPIO_Ports+0xde6c8b34>
    14c8:	c6020000 	strgt	r0, [r2], -r0
    14cc:	00030b06 	andeq	r0, r3, r6, lsl #22
    14d0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    14d4:	000e9c2c 	andeq	r9, lr, ip, lsr #24
    14d8:	06c80200 	strbeq	r0, [r8], r0, lsl #4
    14dc:	0000030b 	andeq	r0, r0, fp, lsl #6
    14e0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    14e4:	00006529 	andeq	r6, r0, r9, lsr #10
    14e8:	06ab0200 	strteq	r0, [fp], r0, lsl #4
    14ec:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    14f0:	0000001c 	andeq	r0, r0, ip, lsl r0
    14f4:	150a9c01 	strne	r9, [sl, #-3073]	; 0xfffff3ff
    14f8:	092a0000 	stmdbeq	sl!, {}	; <UNPREDICTABLE>
    14fc:	02000009 	andeq	r0, r0, #9
    1500:	030b06ab 	movweq	r0, #46763	; 0xb6ab
    1504:	91020000 	mrsls	r0, (UNDEF: 2)
    1508:	96290074 			; <UNDEFINED> instruction: 0x96290074
    150c:	0200000c 	andeq	r0, r0, #12
    1510:	06d005ef 	ldrbeq	r0, [r0], pc, ror #11
    1514:	00202000 	eoreq	r2, r0, r0
    1518:	9c010000 	stcls	0, cr0, [r1], {-0}
    151c:	00001530 	andeq	r1, r0, r0, lsr r5
    1520:	000b342a 	andeq	r3, fp, sl, lsr #8
    1524:	05ef0200 	strbeq	r0, [pc, #512]!	; 172c <startup-0x1fffe8d4>
    1528:	0000069c 	muleq	r0, ip, r6
    152c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1530:	0010fa29 	andseq	pc, r0, r9, lsr #20
    1534:	05de0200 	ldrbeq	r0, [lr, #512]	; 0x200
    1538:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
    153c:	00000020 	andeq	r0, r0, r0, lsr #32
    1540:	15569c01 	ldrbne	r9, [r6, #-3073]	; 0xfffff3ff
    1544:	342a0000 	strtcc	r0, [sl], #-0
    1548:	0200000b 	andeq	r0, r0, #11
    154c:	069c05de 			; <UNDEFINED> instruction: 0x069c05de
    1550:	91020000 	mrsls	r0, (UNDEF: 2)
    1554:	db290077 	blle	a41738 <startup-0x1f5be8c8>
    1558:	0200000a 	andeq	r0, r0, #10
    155c:	065005be 			; <UNDEFINED> instruction: 0x065005be
    1560:	00602000 	rsbeq	r2, r0, r0
    1564:	9c010000 	stcls	0, cr0, [r1], {-0}
    1568:	0000158b 	andeq	r1, r0, fp, lsl #11
    156c:	0001662a 	andeq	r6, r1, sl, lsr #12
    1570:	05be0200 	ldreq	r0, [lr, #512]!	; 0x200
    1574:	0000030b 	andeq	r0, r0, fp, lsl #6
    1578:	2c6c9102 	stfcsp	f1, [ip], #-8
    157c:	00000e9c 	muleq	r0, ip, lr
    1580:	0b05c002 	bleq	171590 <startup-0x1fe8ea70>
    1584:	02000003 	andeq	r0, r0, #3
    1588:	2f007491 	svccs	0x00007491
    158c:	00000076 	andeq	r0, r0, r6, ror r0
    1590:	f8052502 			; <UNDEFINED> instruction: 0xf8052502
    1594:	58200004 	stmdapl	r0!, {r2}
    1598:	01000001 	tsteq	r0, r1
    159c:	00160b9c 	mulseq	r6, ip, fp
    15a0:	0a572a00 	beq	15cbda8 <startup-0x1ea34258>
    15a4:	25020000 	strcs	r0, [r2, #-0]
    15a8:	00160b05 	andseq	r0, r6, r5, lsl #22
    15ac:	5c910200 	lfmpl	f0, 4, [r1], {0}
    15b0:	706d742e 	rsbvc	r7, sp, lr, lsr #8
    15b4:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    15b8:	0000030b 	andeq	r0, r0, fp, lsl #6
    15bc:	2c709102 	ldfcsp	f1, [r0], #-8
    15c0:	0000123a 	andeq	r1, r0, sl, lsr r2
    15c4:	0b052702 	bleq	14b1d4 <startup-0x1feb4e2c>
    15c8:	02000003 	andeq	r0, r0, #3
    15cc:	552c6c91 	strpl	r6, [ip, #-3217]!	; 0xfffff36f
    15d0:	02000010 	andeq	r0, r0, #16
    15d4:	030b0527 	movweq	r0, #46375	; 0xb527
    15d8:	91020000 	mrsls	r0, (UNDEF: 2)
    15dc:	00002c74 	andeq	r2, r0, r4, ror ip
    15e0:	27020000 	strcs	r0, [r2, -r0]
    15e4:	00030b05 	andeq	r0, r3, r5, lsl #22
    15e8:	68910200 	ldmvs	r1, {r9}
    15ec:	0006062c 	andeq	r0, r6, ip, lsr #12
    15f0:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    15f4:	0000030b 	andeq	r0, r0, fp, lsl #6
    15f8:	2c649102 	stfcsp	f1, [r4], #-8
    15fc:	000012ae 	andeq	r1, r0, lr, lsr #5
    1600:	0b052702 	bleq	14b210 <startup-0x1feb4df0>
    1604:	02000003 	andeq	r0, r0, #3
    1608:	1e006091 	mcrne	0, 0, r6, cr0, cr1, {4}
    160c:	00098404 	andeq	r8, r9, r4, lsl #8
    1610:	02cb2900 	sbceq	r2, fp, #0, 18
    1614:	f1020000 	cps	#0
    1618:	0004bc04 	andeq	fp, r4, r4, lsl #24
    161c:	00003c20 	andeq	r3, r0, r0, lsr #24
    1620:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
    1624:	2a000016 	bcs	1684 <startup-0x1fffe97c>
    1628:	000001a7 	andeq	r0, r0, r7, lsr #3
    162c:	0b04f102 	bleq	13da3c <startup-0x1fec25c4>
    1630:	02000003 	andeq	r0, r0, #3
    1634:	9c2c6c91 	stcls	12, cr6, [ip], #-580	; 0xfffffdbc
    1638:	0200000e 	andeq	r0, r0, #14
    163c:	030b04f3 	movweq	r0, #46323	; 0xb4f3
    1640:	91020000 	mrsls	r0, (UNDEF: 2)
    1644:	35290074 	strcc	r0, [r9, #-116]!	; 0xffffff8c
    1648:	02000009 	andeq	r0, r0, #9
    164c:	048404d2 	streq	r0, [r4], #1234	; 0x4d2
    1650:	00382000 	eorseq	r2, r8, r0
    1654:	9c010000 	stcls	0, cr0, [r1], {-0}
    1658:	0000167b 	andeq	r1, r0, fp, ror r6
    165c:	0001a72a 	andeq	sl, r1, sl, lsr #14
    1660:	04d20200 	ldrbeq	r0, [r2], #512	; 0x200
    1664:	0000030b 	andeq	r0, r0, fp, lsl #6
    1668:	2c6c9102 	stfcsp	f1, [ip], #-8
    166c:	00000e9c 	muleq	r0, ip, lr
    1670:	0b04d402 	bleq	136680 <startup-0x1fec9980>
    1674:	02000003 	andeq	r0, r0, #3
    1678:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    167c:	000006c6 	andeq	r0, r0, r6, asr #13
    1680:	5004b302 	andpl	fp, r4, r2, lsl #6
    1684:	34200004 	strtcc	r0, [r0], #-4
    1688:	01000000 	mrseq	r0, (UNDEF: 0)
    168c:	0016b09c 	mulseq	r6, ip, r0
    1690:	05c02a00 	strbeq	r2, [r0, #2560]	; 0xa00
    1694:	b3020000 	movwlt	r0, #8192	; 0x2000
    1698:	00030b04 	andeq	r0, r3, r4, lsl #22
    169c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    16a0:	000e9c2c 	andeq	r9, lr, ip, lsr #24
    16a4:	04b50200 	ldrteq	r0, [r5], #512	; 0x200
    16a8:	0000030b 	andeq	r0, r0, fp, lsl #6
    16ac:	00749102 	rsbseq	r9, r4, r2, lsl #2
    16b0:	00031130 	andeq	r1, r3, r0, lsr r1
    16b4:	049a0200 	ldreq	r0, [sl], #512	; 0x200
    16b8:	000002d1 	ldrdeq	r0, [r0], -r1
    16bc:	20000434 	andcs	r0, r0, r4, lsr r4
    16c0:	0000001c 	andeq	r0, r0, ip, lsl r0
    16c4:	6d299c01 	stcvs	12, cr9, [r9, #-4]!
    16c8:	02000012 	andeq	r0, r0, #18
    16cc:	0400047d 	streq	r0, [r0], #-1149	; 0xfffffb83
    16d0:	00342000 	eorseq	r2, r4, r0
    16d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    16d8:	000016fb 	strdeq	r1, [r0], -fp
    16dc:	00039e2a 	andeq	r9, r3, sl, lsr #28
    16e0:	047d0200 	ldrbteq	r0, [sp], #-512	; 0xfffffe00
    16e4:	0000030b 	andeq	r0, r0, fp, lsl #6
    16e8:	2c6c9102 	stfcsp	f1, [ip], #-8
    16ec:	00000e9c 	muleq	r0, ip, lr
    16f0:	0b047f02 	bleq	121300 <startup-0x1feded00>
    16f4:	02000003 	andeq	r0, r0, #3
    16f8:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    16fc:	000008ee 	andeq	r0, r0, lr, ror #17
    1700:	c403b502 	strgt	fp, [r3], #-1282	; 0xfffffafe
    1704:	3c200003 	stccc	0, cr0, [r0], #-12
    1708:	01000000 	mrseq	r0, (UNDEF: 0)
    170c:	00173f9c 	mulseq	r7, ip, pc	; <UNPREDICTABLE>
    1710:	0cd82a00 	vldmiaeq	r8, {s5-s4}
    1714:	b5020000 	strlt	r0, [r2, #-0]
    1718:	00030b03 	andeq	r0, r3, r3, lsl #22
    171c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1720:	0003732a 	andeq	r7, r3, sl, lsr #6
    1724:	03b50200 			; <UNDEFINED> instruction: 0x03b50200
    1728:	0000030b 	andeq	r0, r0, fp, lsl #6
    172c:	2c689102 	stfcsp	f1, [r8], #-8
    1730:	00000e9c 	muleq	r0, ip, lr
    1734:	0b03b702 	bleq	ef344 <startup-0x1ff10cbc>
    1738:	02000003 	andeq	r0, r0, #3
    173c:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    1740:	000007bb 			; <UNDEFINED> instruction: 0x000007bb
    1744:	84038802 	strhi	r8, [r3], #-2050	; 0xfffff7fe
    1748:	40200003 	eormi	r0, r0, r3
    174c:	01000000 	mrseq	r0, (UNDEF: 0)
    1750:	0017839c 	mulseq	r7, ip, r3
    1754:	0c462a00 	mcrreq	10, 0, r2, r6, cr0
    1758:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    175c:	00030b03 	andeq	r0, r3, r3, lsl #22
    1760:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1764:	000d5e2a 	andeq	r5, sp, sl, lsr #28
    1768:	03880200 	orreq	r0, r8, #0, 4
    176c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1770:	2c689102 	stfcsp	f1, [r8], #-8
    1774:	00000e9c 	muleq	r0, ip, lr
    1778:	0b038a02 	bleq	e3f88 <startup-0x1ff1c078>
    177c:	02000003 	andeq	r0, r0, #3
    1780:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    1784:	00000b6b 	andeq	r0, r0, fp, ror #22
    1788:	64036f02 	strvs	r6, [r3], #-3842	; 0xfffff0fe
    178c:	20200003 	eorcs	r0, r0, r3
    1790:	01000000 	mrseq	r0, (UNDEF: 0)
    1794:	0017a99c 	mulseq	r7, ip, r9
    1798:	0b342a00 	bleq	d0bfa0 <startup-0x1f2f4060>
    179c:	6f020000 	svcvs	0x00020000
    17a0:	00069c03 	andeq	r9, r6, r3, lsl #24
    17a4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    17a8:	12572900 	subsne	r2, r7, #0, 18
    17ac:	5d020000 	stcpl	0, cr0, [r2, #-0]
    17b0:	00034403 	andeq	r4, r3, r3, lsl #8
    17b4:	00002020 	andeq	r2, r0, r0, lsr #32
    17b8:	cf9c0100 	svcgt	0x009c0100
    17bc:	2a000017 	bcs	1820 <startup-0x1fffe7e0>
    17c0:	00000b34 	andeq	r0, r0, r4, lsr fp
    17c4:	9c035d02 	stcls	13, cr5, [r3], {2}
    17c8:	02000006 	andeq	r0, r0, #6
    17cc:	29007791 	stmdbcs	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    17d0:	00000745 	andeq	r0, r0, r5, asr #14
    17d4:	14034902 	strne	r4, [r3], #-2306	; 0xfffff6fe
    17d8:	30200003 	eorcc	r0, r0, r3
    17dc:	01000000 	mrseq	r0, (UNDEF: 0)
    17e0:	0018139c 	mulseq	r8, ip, r3
    17e4:	0c2e2a00 			; <UNDEFINED> instruction: 0x0c2e2a00
    17e8:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    17ec:	00030b03 	andeq	r0, r3, r3, lsl #22
    17f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    17f4:	000c362a 	andeq	r3, ip, sl, lsr #12
    17f8:	03490200 	movteq	r0, #37376	; 0x9200
    17fc:	0000030b 	andeq	r0, r0, fp, lsl #6
    1800:	2a709102 	bcs	1c25c10 <startup-0x1e3da3f0>
    1804:	00000c3e 	andeq	r0, r0, lr, lsr ip
    1808:	0b034902 	bleq	d3c18 <startup-0x1ff2c3e8>
    180c:	02000003 	andeq	r0, r0, #3
    1810:	29006c91 	stmdbcs	r0, {r0, r4, r7, sl, fp, sp, lr}
    1814:	00000199 	muleq	r0, r9, r1
    1818:	f402dc02 			; <UNDEFINED> instruction: 0xf402dc02
    181c:	20200002 	eorcs	r0, r0, r2
    1820:	01000000 	mrseq	r0, (UNDEF: 0)
    1824:	0018399c 	mulseq	r8, ip, r9
    1828:	0b342a00 	bleq	d0c030 <startup-0x1f2f3fd0>
    182c:	dc020000 	stcle	0, cr0, [r2], {-0}
    1830:	00069c02 	andeq	r9, r6, r2, lsl #24
    1834:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1838:	11902900 	orrsne	r2, r0, r0, lsl #18
    183c:	51020000 	mrspl	r0, (UNDEF: 2)
    1840:	0002cc02 	andeq	ip, r2, r2, lsl #24
    1844:	00002820 	andeq	r2, r0, r0, lsr #16
    1848:	6e9c0100 	fmlvse	f0, f4, f0
    184c:	2a000018 	bcs	18b4 <startup-0x1fffe74c>
    1850:	000010a6 	andeq	r1, r0, r6, lsr #1
    1854:	0b025102 	bleq	95c64 <startup-0x1ff6a39c>
    1858:	02000003 	andeq	r0, r0, #3
    185c:	cb2a7491 	blgt	a9eaa8 <startup-0x1f561558>
    1860:	02000010 	andeq	r0, r0, #16
    1864:	030b0251 	movweq	r0, #45649	; 0xb251
    1868:	91020000 	mrsls	r0, (UNDEF: 2)
    186c:	8b290070 	blhi	a41a34 <startup-0x1f5be5cc>
    1870:	0200000c 	andeq	r0, r0, #12
    1874:	02ac0233 	adceq	r0, ip, #805306371	; 0x30000003
    1878:	00202000 	eoreq	r2, r0, r0
    187c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1880:	00001894 	muleq	r0, r4, r8
    1884:	000b342a 	andeq	r3, fp, sl, lsr #8
    1888:	02330200 	eorseq	r0, r3, #0, 4
    188c:	0000069c 	muleq	r0, ip, r6
    1890:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1894:	0012a029 	andseq	sl, r2, r9, lsr #32
    1898:	021b0200 	andseq	r0, fp, #0, 4
    189c:	20000270 	andcs	r0, r0, r0, ror r2
    18a0:	0000003c 	andeq	r0, r0, ip, lsr r0
    18a4:	18f69c01 	ldmne	r6!, {r0, sl, fp, ip, pc}^
    18a8:	c12a0000 			; <UNDEFINED> instruction: 0xc12a0000
    18ac:	02000003 	andeq	r0, r0, #3
    18b0:	030b021b 	movweq	r0, #45595	; 0xb21b
    18b4:	91020000 	mrsls	r0, (UNDEF: 2)
    18b8:	05e22a74 	strbeq	r2, [r2, #2676]!	; 0xa74
    18bc:	1b020000 	blne	818c4 <startup-0x1ff7e73c>
    18c0:	00030b02 	andeq	r0, r3, r2, lsl #22
    18c4:	70910200 	addsvc	r0, r1, r0, lsl #4
    18c8:	0011612a 	andseq	r6, r1, sl, lsr #2
    18cc:	021b0200 	andseq	r0, fp, #0, 4
    18d0:	0000030b 	andeq	r0, r0, fp, lsl #6
    18d4:	2a6c9102 	bcs	1b25ce4 <startup-0x1e4da31c>
    18d8:	000005f1 	strdeq	r0, [r0], -r1
    18dc:	0b021b02 	bleq	884ec <startup-0x1ff77b14>
    18e0:	02000003 	andeq	r0, r0, #3
    18e4:	f62a6891 			; <UNDEFINED> instruction: 0xf62a6891
    18e8:	02000005 	andeq	r0, r0, #5
    18ec:	030b021b 	movweq	r0, #45595	; 0xb21b
    18f0:	91020000 	mrsls	r0, (UNDEF: 2)
    18f4:	fb290000 	blx	a418fe <startup-0x1f5be702>
    18f8:	02000005 	andeq	r0, r0, #5
    18fc:	025001b8 	subseq	r0, r0, #184, 2	; 0x2e
    1900:	00202000 	eoreq	r2, r0, r0
    1904:	9c010000 	stcls	0, cr0, [r1], {-0}
    1908:	0000191c 	andeq	r1, r0, ip, lsl r9
    190c:	000b342a 	andeq	r3, fp, sl, lsr #8
    1910:	01b80200 			; <UNDEFINED> instruction: 0x01b80200
    1914:	0000069c 	muleq	r0, ip, r6
    1918:	00779102 	rsbseq	r9, r7, r2, lsl #2
    191c:	00046629 	andeq	r6, r4, r9, lsr #12
    1920:	01900200 	orrseq	r0, r0, r0, lsl #4
    1924:	2000020c 	andcs	r0, r0, ip, lsl #4
    1928:	00000044 	andeq	r0, r0, r4, asr #32
    192c:	19429c01 	stmdbne	r2, {r0, sl, fp, ip, pc}^
    1930:	052a0000 	streq	r0, [sl, #-0]!
    1934:	02000007 	andeq	r0, r0, #7
    1938:	02d10190 	sbcseq	r0, r1, #144, 2	; 0x24
    193c:	91020000 	mrsls	r0, (UNDEF: 2)
    1940:	85290077 	strhi	r0, [r9, #-119]!	; 0xffffff89
    1944:	0200000a 	andeq	r0, r0, #10
    1948:	01ec0177 	mvneq	r0, r7, ror r1
    194c:	00202000 	eoreq	r2, r0, r0
    1950:	9c010000 	stcls	0, cr0, [r1], {-0}
    1954:	00001968 	andeq	r1, r0, r8, ror #18
    1958:	000b342a 	andeq	r3, fp, sl, lsr #8
    195c:	01770200 	cmneq	r7, r0, lsl #4
    1960:	0000069c 	muleq	r0, ip, r6
    1964:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1968:	000a9929 	andeq	r9, sl, r9, lsr #18
    196c:	01530200 	cmpeq	r3, r0, lsl #4
    1970:	200001ae 	andcs	r0, r0, lr, lsr #3
    1974:	0000003e 	andeq	r0, r0, lr, lsr r0
    1978:	199d9c01 	ldmibne	sp, {r0, sl, fp, ip, pc}
    197c:	a32a0000 			; <UNDEFINED> instruction: 0xa32a0000
    1980:	0200000a 	andeq	r0, r0, #10
    1984:	02d10153 	sbcseq	r0, r1, #-1073741804	; 0xc0000014
    1988:	91020000 	mrsls	r0, (UNDEF: 2)
    198c:	0e9c2c6f 	cdpeq	12, 9, cr2, cr12, cr15, {3}
    1990:	55020000 	strpl	r0, [r2, #-0]
    1994:	00030b01 	andeq	r0, r3, r1, lsl #22
    1998:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    199c:	0d803100 	stfeqs	f3, [r0]
    19a0:	34020000 	strcc	r0, [r2], #-0
    19a4:	0006c301 	andeq	ip, r6, r1, lsl #6
    19a8:	00015000 	andeq	r5, r1, r0
    19ac:	00005e20 	andeq	r5, r0, r0, lsr #28
    19b0:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    19b4:	2c000019 	stccs	0, cr0, [r0], {25}
    19b8:	00000736 	andeq	r0, r0, r6, lsr r7
    19bc:	16013602 	strne	r3, [r1], -r2, lsl #12
    19c0:	02000003 	andeq	r0, r0, #3
    19c4:	dd2c6891 	stcle	8, cr6, [ip, #-580]!	; 0xfffffdbc
    19c8:	0200000e 	andeq	r0, r0, #14
    19cc:	06c30137 			; <UNDEFINED> instruction: 0x06c30137
    19d0:	91020000 	mrsls	r0, (UNDEF: 2)
    19d4:	0eda2c6f 	cdpeq	12, 13, cr2, cr10, cr15, {3}
    19d8:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    19dc:	00066901 	andeq	r6, r6, r1, lsl #18
    19e0:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    19e4:	06e32900 	strbteq	r2, [r3], r0, lsl #18
    19e8:	1c020000 	stcne	0, cr0, [r2], {-0}
    19ec:	00012801 	andeq	r2, r1, r1, lsl #16
    19f0:	00002820 	andeq	r2, r0, r0, lsr #16
    19f4:	0b9c0100 	bleq	fe701dfc <GPIO_Ports+0xde6fec64>
    19f8:	2a00001a 	bcs	1a68 <startup-0x1fffe598>
    19fc:	000007b3 			; <UNDEFINED> instruction: 0x000007b3
    1a00:	d1011c02 	tstle	r1, r2, lsl #24
    1a04:	02000002 	andeq	r0, r0, #2
    1a08:	27007791 			; <UNDEFINED> instruction: 0x27007791
    1a0c:	000002e7 	andeq	r0, r0, r7, ror #5
    1a10:	00b8e102 	adcseq	lr, r8, r2, lsl #2
    1a14:	00702000 	rsbseq	r2, r0, r0
    1a18:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a1c:	000e2932 	andeq	r2, lr, r2, lsr r9
    1a20:	06e00100 	strbteq	r0, [r0], r0, lsl #2
    1a24:	0000030b 	andeq	r0, r0, fp, lsl #6
    1a28:	20000070 	andcs	r0, r0, r0, ror r0
    1a2c:	00000048 	andeq	r0, r0, r8, asr #32
    1a30:	1a469c01 	bne	11a8a3c <startup-0x1ee575c4>
    1a34:	5b2a0000 	blpl	a81a3c <startup-0x1f57e5c4>
    1a38:	01000009 	tsteq	r0, r9
    1a3c:	030b06e0 	movweq	r0, #46816	; 0xb6e0
    1a40:	91020000 	mrsls	r0, (UNDEF: 2)
    1a44:	0e330074 	mrceq	0, 1, r0, cr3, cr4, {3}
    1a48:	01000011 	tsteq	r0, r1, lsl r0
    1a4c:	0010065d 	andseq	r0, r0, sp, asr r6
    1a50:	00602000 	rsbeq	r2, r0, r0
    1a54:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a58:	0010942a 	andseq	r9, r0, sl, lsr #8
    1a5c:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    1a60:	0000025a 	andeq	r0, r0, sl, asr r2
    1a64:	2a779102 	bcs	1de5e74 <startup-0x1e21a18c>
    1a68:	00001545 	andeq	r1, r0, r5, asr #10
    1a6c:	0b065d01 	bleq	198e78 <startup-0x1fe67188>
    1a70:	02000003 	andeq	r0, r0, #3
    1a74:	00007091 	muleq	r0, r1, r0
    1a78:	00000623 	andeq	r0, r0, r3, lsr #12
    1a7c:	03320004 	teqeq	r2, #4
    1a80:	01040000 	mrseq	r0, (UNDEF: 4)
    1a84:	0000061a 	andeq	r0, r0, sl, lsl r6
    1a88:	0013380c 	andseq	r3, r3, ip, lsl #16
    1a8c:	00056e00 	andeq	r6, r5, r0, lsl #28
    1a90:	001e2c00 	andseq	r2, lr, r0, lsl #24
    1a94:	00050e20 	andeq	r0, r5, r0, lsr #28
    1a98:	00058500 	andeq	r8, r5, r0, lsl #10
    1a9c:	06010200 	streq	r0, [r1], -r0, lsl #4
    1aa0:	000003fc 	strdeq	r0, [r0], -ip
    1aa4:	0001d403 	andeq	sp, r1, r3, lsl #8
    1aa8:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    1aac:	02000000 	andeq	r0, r0, #0
    1ab0:	03fa0801 	mvnseq	r0, #65536	; 0x10000
    1ab4:	02020000 	andeq	r0, r2, #0
    1ab8:	000ff405 	andeq	pc, pc, r5, lsl #8
    1abc:	052e0300 	streq	r0, [lr, #-768]!	; 0xfffffd00
    1ac0:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    1ac4:	00000050 	andeq	r0, r0, r0, asr r0
    1ac8:	7d070202 	sfmvc	f0, 4, [r7, #-8]
    1acc:	03000011 	movweq	r0, #17
    1ad0:	00001217 	andeq	r1, r0, r7, lsl r2
    1ad4:	00624d02 	rsbeq	r4, r2, r2, lsl #26
    1ad8:	04020000 	streq	r0, [r2], #-0
    1adc:	0009e905 	andeq	lr, r9, r5, lsl #18
    1ae0:	09920300 	ldmibeq	r2, {r8, r9}
    1ae4:	4f020000 	svcmi	0x00020000
    1ae8:	00000074 	andeq	r0, r0, r4, ror r0
    1aec:	4c070402 	cfstrsmi	mvf0, [r7], {2}
    1af0:	0200000d 	andeq	r0, r0, #13
    1af4:	09e40508 	stmibeq	r4!, {r3, r8, sl}^
    1af8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1afc:	000d4707 	andeq	r4, sp, r7, lsl #14
    1b00:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    1b04:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1b08:	51070402 	tstpl	r7, r2, lsl #8
    1b0c:	0300000d 	movweq	r0, #13
    1b10:	000001d6 	ldrdeq	r0, [r0], -r6
    1b14:	002c1803 	eoreq	r1, ip, r3, lsl #16
    1b18:	30030000 	andcc	r0, r3, r0
    1b1c:	03000005 	movweq	r0, #5
    1b20:	00004524 	andeq	r4, r0, r4, lsr #10
    1b24:	00a20500 	adceq	r0, r2, r0, lsl #10
    1b28:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
    1b2c:	03000012 	movweq	r0, #18
    1b30:	0000572c 	andeq	r5, r0, ip, lsr #14
    1b34:	00b20500 	adcseq	r0, r2, r0, lsl #10
    1b38:	94030000 	strls	r0, [r3], #-0
    1b3c:	03000009 	movweq	r0, #9
    1b40:	00006930 	andeq	r6, r0, r0, lsr r9
    1b44:	00c20500 	sbceq	r0, r2, r0, lsl #10
    1b48:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    1b4c:	04000010 	streq	r0, [r0], #-16
    1b50:	00bd06fa 	ldrshteq	r0, [sp], sl
    1b54:	91070000 	mrsls	r0, (UNDEF: 7)
    1b58:	05000008 	streq	r0, [r0, #-8]
    1b5c:	0000c23b 	andeq	ip, r0, fp, lsr r2
    1b60:	01070800 	tsteq	r7, r0, lsl #16
    1b64:	00000037 	andeq	r0, r0, r7, lsr r0
    1b68:	04035f06 	streq	r5, [r3], #-3846	; 0xfffff0fa
    1b6c:	09000001 	stmdbeq	r0, {r0}
    1b70:	00000a22 	andeq	r0, r0, r2, lsr #20
    1b74:	104e0900 	subne	r0, lr, r0, lsl #18
    1b78:	00010000 	andeq	r0, r1, r0
    1b7c:	c306280a 	movwgt	r2, #26634	; 0x680a
    1b80:	00019005 	andeq	r9, r1, r5
    1b84:	11080b00 	tstne	r8, r0, lsl #22
    1b88:	c5060000 	strgt	r0, [r6, #-0]
    1b8c:	0000cd05 	andeq	ip, r0, r5, lsl #26
    1b90:	8a0b0000 	bhi	2c1b98 <startup-0x1fd3e468>
    1b94:	0600000e 	streq	r0, [r0], -lr
    1b98:	00cd05c6 	sbceq	r0, sp, r6, asr #11
    1b9c:	0b040000 	bleq	101ba4 <startup-0x1fefe45c>
    1ba0:	00000945 	andeq	r0, r0, r5, asr #18
    1ba4:	cd05c706 	stcgt	7, cr12, [r5, #-24]	; 0xffffffe8
    1ba8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1bac:	000a0c0b 	andeq	r0, sl, fp, lsl #24
    1bb0:	05c80600 	strbeq	r0, [r8, #1536]	; 0x600
    1bb4:	000000cd 	andeq	r0, r0, sp, asr #1
    1bb8:	44490c0c 	strbmi	r0, [r9], #-3084	; 0xfffff3f4
    1bbc:	c9060052 	stmdbgt	r6, {r1, r4, r6}
    1bc0:	0000cd05 	andeq	ip, r0, r5, lsl #26
    1bc4:	4f0c1000 	svcmi	0x000c1000
    1bc8:	06005244 	streq	r5, [r0], -r4, asr #4
    1bcc:	00cd05ca 	sbceq	r0, sp, sl, asr #11
    1bd0:	0b140000 	bleq	501bd8 <startup-0x1fafe428>
    1bd4:	00000a62 	andeq	r0, r0, r2, ror #20
    1bd8:	ad05cb06 	vstrge	d12, [r5, #-24]	; 0xffffffe8
    1bdc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1be0:	000a3f0b 	andeq	r3, sl, fp, lsl #30
    1be4:	05cc0600 	strbeq	r0, [ip, #1536]	; 0x600
    1be8:	000000ad 	andeq	r0, r0, sp, lsr #1
    1bec:	09040b1a 	stmdbeq	r4, {r1, r3, r4, r8, r9, fp}
    1bf0:	cd060000 	stcgt	0, cr0, [r6, #-0]
    1bf4:	0000cd05 	andeq	ip, r0, r5, lsl #26
    1bf8:	410c1c00 	tstmi	ip, r0, lsl #24
    1bfc:	06005246 	streq	r5, [r0], -r6, asr #4
    1c00:	01a005ce 	asreq	r0, lr, #11
    1c04:	00200000 	eoreq	r0, r0, r0
    1c08:	0000cd0d 	andeq	ip, r0, sp, lsl #26
    1c0c:	0001a000 	andeq	sl, r1, r0
    1c10:	00900e00 	addseq	r0, r0, r0, lsl #28
    1c14:	00010000 	andeq	r0, r1, r0
    1c18:	00019005 	andeq	r9, r1, r5
    1c1c:	10790f00 	rsbsne	r0, r9, r0, lsl #30
    1c20:	cf060000 	svcgt	0x00060000
    1c24:	00010405 	andeq	r0, r1, r5, lsl #8
    1c28:	01071000 	mrseq	r1, (UNDEF: 7)
    1c2c:	00000037 	andeq	r0, r0, r7, lsr r0
    1c30:	01d74207 	bicseq	r4, r7, r7, lsl #4
    1c34:	cf090000 	svcgt	0x00090000
    1c38:	00000008 	andeq	r0, r0, r8
    1c3c:	00076009 	andeq	r6, r7, r9
    1c40:	82090100 	andhi	r0, r9, #0, 2
    1c44:	02000002 	andeq	r0, r0, #2
    1c48:	0002be09 	andeq	fp, r2, r9, lsl #28
    1c4c:	03000300 	movweq	r0, #768	; 0x300
    1c50:	00000df5 	strdeq	r0, [r0], -r5
    1c54:	01b14707 			; <UNDEFINED> instruction: 0x01b14707
    1c58:	07100000 	ldreq	r0, [r0, -r0]
    1c5c:	00003701 	andeq	r3, r0, r1, lsl #14
    1c60:	fc4f0700 	mcrr2	7, 0, r0, pc, cr0	; <UNPREDICTABLE>
    1c64:	09000001 	stmdbeq	r0, {r0}
    1c68:	0000043d 	andeq	r0, r0, sp, lsr r4
    1c6c:	037f0900 	cmneq	pc, #0, 18
    1c70:	00010000 	andeq	r0, r1, r0
    1c74:	00012a03 	andeq	r2, r1, r3, lsl #20
    1c78:	e2520700 	subs	r0, r2, #0, 14
    1c7c:	10000001 	andne	r0, r0, r1
    1c80:	00370107 	eorseq	r0, r7, r7, lsl #2
    1c84:	5a070000 	bpl	1c1c8c <startup-0x1fe3e374>
    1c88:	0000022d 	andeq	r0, r0, sp, lsr #4
    1c8c:	00055109 	andeq	r5, r5, r9, lsl #2
    1c90:	ae090000 	cdpge	0, 0, cr0, cr9, cr0, {0}
    1c94:	01000009 	tsteq	r0, r9
    1c98:	00129009 	andseq	r9, r2, r9
    1c9c:	68090200 	stmdavs	r9, {r9}
    1ca0:	0300000a 	movweq	r0, #10
    1ca4:	0f500300 	svceq	0x00500300
    1ca8:	5f070000 	svcpl	0x00070000
    1cac:	00000207 	andeq	r0, r0, r7, lsl #4
    1cb0:	37010710 	smladcc	r1, r0, r7, r0
    1cb4:	07000000 	streq	r0, [r0, -r0]
    1cb8:	0002586e 	andeq	r5, r2, lr, ror #16
    1cbc:	00a90900 	adceq	r0, r9, r0, lsl #18
    1cc0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1cc4:	0000113c 	andeq	r1, r0, ip, lsr r1
    1cc8:	02060901 	andeq	r0, r6, #16384	; 0x4000
    1ccc:	00020000 	andeq	r0, r2, r0
    1cd0:	0004ab03 	andeq	sl, r4, r3, lsl #22
    1cd4:	38720700 	ldmdacc	r2!, {r8, r9, sl}^
    1cd8:	10000002 	andne	r0, r0, r2
    1cdc:	00370107 	eorseq	r0, r7, r7, lsl #2
    1ce0:	7a070000 	bvc	1c1ce8 <startup-0x1fe3e318>
    1ce4:	0000027d 	andeq	r0, r0, sp, ror r2
    1ce8:	0012fa09 	andseq	pc, r2, r9, lsl #20
    1cec:	ba090000 	blt	241cf4 <startup-0x1fdbe30c>
    1cf0:	01000012 	tsteq	r0, r2, lsl r0
    1cf4:	14250300 	strtne	r0, [r5], #-768	; 0xfffffd00
    1cf8:	7d070000 	stcvc	0, cr0, [r7, #-0]
    1cfc:	00000263 	andeq	r0, r0, r3, ror #4
    1d00:	84070811 	strhi	r0, [r7], #-2065	; 0xfffff7ef
    1d04:	000002cd 	andeq	r0, r0, sp, asr #5
    1d08:	000f7412 	andeq	r7, pc, r2, lsl r4	; <UNPREDICTABLE>
    1d0c:	c2860700 	addgt	r0, r6, #0, 14
    1d10:	00000000 	andeq	r0, r0, r0
    1d14:	000d9e12 	andeq	r9, sp, r2, lsl lr
    1d18:	d7890700 	strle	r0, [r9, r0, lsl #14]
    1d1c:	04000001 	streq	r0, [r0], #-1
    1d20:	000b3d12 	andeq	r3, fp, r2, lsl sp
    1d24:	2d8c0700 	stccs	7, cr0, [ip]
    1d28:	05000002 	streq	r0, [r0, #-2]
    1d2c:	00098712 	andeq	r8, r9, r2, lsl r7
    1d30:	fc8f0700 	stc2	7, cr0, [pc], {0}
    1d34:	06000001 	streq	r0, [r0], -r1
    1d38:	000fa112 	andeq	sl, pc, r2, lsl r1	; <UNPREDICTABLE>
    1d3c:	58920700 	ldmpl	r2, {r8, r9, sl}
    1d40:	07000002 	streq	r0, [r0, -r2]
    1d44:	038d0300 	orreq	r0, sp, #0, 6
    1d48:	94070000 	strls	r0, [r7], #-0
    1d4c:	00000288 	andeq	r0, r0, r8, lsl #5
    1d50:	00146213 	andseq	r6, r4, r3, lsl r2
    1d54:	02430100 	subeq	r0, r3, #0, 2
    1d58:	20002296 	mulcs	r0, r6, r2
    1d5c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1d60:	033a9c01 	teqeq	sl, #256	; 0x100
    1d64:	45140000 	ldrmi	r0, [r4, #-0]
    1d68:	01000014 	tsteq	r0, r4, lsl r0
    1d6c:	033a0243 	teqeq	sl, #805306372	; 0x30000004
    1d70:	91020000 	mrsls	r0, (UNDEF: 2)
    1d74:	13f0146c 	mvnsne	r1, #108, 8	; 0x6c000000
    1d78:	43010000 	movwmi	r0, #4096	; 0x1000
    1d7c:	0000a202 	andeq	sl, r0, r2, lsl #4
    1d80:	6a910200 	bvs	fe442588 <GPIO_Ports+0xde43f3f0>
    1d84:	0012d614 	andseq	sp, r2, r4, lsl r6
    1d88:	02430100 	subeq	r0, r3, #0, 2
    1d8c:	00000097 	muleq	r0, r7, r0
    1d90:	15699102 	strbne	r9, [r9, #-258]!	; 0xfffffefe
    1d94:	000012de 	ldrdeq	r1, [r0], -lr
    1d98:	c2024501 	andgt	r4, r2, #4194304	; 0x400000
    1d9c:	02000000 	andeq	r0, r0, #0
    1da0:	5b157491 	blpl	55efec <startup-0x1faa1014>
    1da4:	01000014 	tsteq	r0, r4, lsl r0
    1da8:	00c20246 	sbceq	r0, r2, r6, asr #4
    1dac:	91020000 	mrsls	r0, (UNDEF: 2)
    1db0:	04160070 	ldreq	r0, [r6], #-112	; 0xffffff90
    1db4:	000001a5 	andeq	r0, r0, r5, lsr #3
    1db8:	00144b13 	andseq	r4, r4, r3, lsl fp
    1dbc:	01f00100 	mvnseq	r0, r0, lsl #2
    1dc0:	20002272 	andcs	r2, r0, r2, ror r2
    1dc4:	00000024 	andeq	r0, r0, r4, lsr #32
    1dc8:	03759c01 	cmneq	r5, #256	; 0x100
    1dcc:	45140000 	ldrmi	r0, [r4, #-0]
    1dd0:	01000014 	tsteq	r0, r4, lsl r0
    1dd4:	033a01f0 	teqeq	sl, #240, 2	; 0x3c
    1dd8:	91020000 	mrsls	r0, (UNDEF: 2)
    1ddc:	0f741474 	svceq	0x00741474
    1de0:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1de4:	0000a201 	andeq	sl, r0, r1, lsl #4
    1de8:	72910200 	addsvc	r0, r1, #0, 4
    1dec:	143a1300 	ldrtne	r1, [sl], #-768	; 0xfffffd00
    1df0:	e0010000 	and	r0, r1, r0
    1df4:	00225401 	eoreq	r5, r2, r1, lsl #8
    1df8:	00001e20 	andeq	r1, r0, r0, lsr #28
    1dfc:	aa9c0100 	bge	fe702204 <GPIO_Ports+0xde6ff06c>
    1e00:	14000003 	strne	r0, [r0], #-3
    1e04:	00001445 	andeq	r1, r0, r5, asr #8
    1e08:	3a01e001 	bcc	79e14 <startup-0x1ff861ec>
    1e0c:	02000003 	andeq	r0, r0, #3
    1e10:	e8147491 	ldmda	r4, {r0, r4, r7, sl, ip, sp, lr}
    1e14:	01000013 	tsteq	r0, r3, lsl r0
    1e18:	00a201e0 	adceq	r0, r2, r0, ror #3
    1e1c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e20:	04130072 	ldreq	r0, [r3], #-114	; 0xffffff8e
    1e24:	01000013 	tsteq	r0, r3, lsl r0
    1e28:	221a01c7 	andscs	r0, sl, #-1073741775	; 0xc0000031
    1e2c:	003a2000 	eorseq	r2, sl, r0
    1e30:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e34:	000003ee 	andeq	r0, r0, lr, ror #7
    1e38:	00144514 	andseq	r4, r4, r4, lsl r5
    1e3c:	01c70100 	biceq	r0, r7, r0, lsl #2
    1e40:	0000033a 	andeq	r0, r0, sl, lsr r3
    1e44:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    1e48:	00000f74 	andeq	r0, r0, r4, ror pc
    1e4c:	a201c701 	andge	ip, r1, #262144	; 0x40000
    1e50:	02000000 	andeq	r0, r0, #0
    1e54:	f3147291 	vqsub.u16	d7, d20, d1
    1e58:	01000012 	tsteq	r0, r2, lsl r0
    1e5c:	027d01c7 	rsbseq	r0, sp, #-1073741775	; 0xc0000031
    1e60:	91020000 	mrsls	r0, (UNDEF: 2)
    1e64:	29130071 	ldmdbcs	r3, {r0, r4, r5, r6}
    1e68:	01000013 	tsteq	r0, r3, lsl r0
    1e6c:	21fc01b1 	ldrhcs	r0, [ip, #17]!
    1e70:	001e2000 	andseq	r2, lr, r0
    1e74:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e78:	00000423 	andeq	r0, r0, r3, lsr #8
    1e7c:	00144514 	andseq	r4, r4, r4, lsl r5
    1e80:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    1e84:	0000033a 	andeq	r0, r0, sl, lsr r3
    1e88:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    1e8c:	00000f74 	andeq	r0, r0, r4, ror pc
    1e90:	a201b101 	andge	fp, r1, #1073741824	; 0x40000000
    1e94:	02000000 	andeq	r0, r0, #0
    1e98:	13007291 	movwne	r7, #657	; 0x291
    1e9c:	00001312 	andeq	r1, r0, r2, lsl r3
    1ea0:	de019c01 	cdple	12, 0, cr9, cr1, cr1, {0}
    1ea4:	1e200021 	cdpne	0, 2, cr0, cr0, cr1, {1}
    1ea8:	01000000 	mrseq	r0, (UNDEF: 0)
    1eac:	0004589c 	muleq	r4, ip, r8
    1eb0:	14451400 	strbne	r1, [r5], #-1024	; 0xfffffc00
    1eb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1eb8:	00033a01 	andeq	r3, r3, r1, lsl #20
    1ebc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1ec0:	000f7414 	andeq	r7, pc, r4, lsl r4	; <UNPREDICTABLE>
    1ec4:	019c0100 	orrseq	r0, ip, r0, lsl #2
    1ec8:	000000a2 	andeq	r0, r0, r2, lsr #1
    1ecc:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1ed0:	0012c217 	andseq	ip, r2, r7, lsl r2
    1ed4:	01880100 	orreq	r0, r8, r0, lsl #2
    1ed8:	000000a2 	andeq	r0, r0, r2, lsr #1
    1edc:	200021c8 	andcs	r2, r0, r8, asr #3
    1ee0:	00000016 	andeq	r0, r0, r6, lsl r0
    1ee4:	04829c01 	streq	r9, [r2], #3073	; 0xc01
    1ee8:	45140000 	ldrmi	r0, [r4, #-0]
    1eec:	01000014 	tsteq	r0, r4, lsl r0
    1ef0:	033a0188 	teqeq	sl, #136, 2	; 0x22
    1ef4:	91020000 	mrsls	r0, (UNDEF: 2)
    1ef8:	73170074 	tstvc	r7, #116	; 0x74
    1efc:	01000014 	tsteq	r0, r4, lsl r0
    1f00:	0097016e 	addseq	r0, r7, lr, ror #2
    1f04:	21860000 	orrcs	r0, r6, r0
    1f08:	00422000 	subeq	r2, r2, r0
    1f0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f10:	000004ca 	andeq	r0, r0, sl, asr #9
    1f14:	00144514 	andseq	r4, r4, r4, lsl r5
    1f18:	016e0100 	cmneq	lr, r0, lsl #2
    1f1c:	0000033a 	andeq	r0, r0, sl, lsr r3
    1f20:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1f24:	00000f74 	andeq	r0, r0, r4, ror pc
    1f28:	a2016e01 	andge	r6, r1, #1, 28
    1f2c:	02000000 	andeq	r0, r0, #0
    1f30:	44156a91 	ldrmi	r6, [r5], #-2705	; 0xfffff56f
    1f34:	01000010 	tsteq	r0, r0, lsl r0
    1f38:	00970170 	addseq	r0, r7, r0, ror r1
    1f3c:	91020000 	mrsls	r0, (UNDEF: 2)
    1f40:	ff170077 			; <UNDEFINED> instruction: 0xff170077
    1f44:	01000013 	tsteq	r0, r3, lsl r0
    1f48:	00a2015d 	adceq	r0, r2, sp, asr r1
    1f4c:	21700000 	cmncs	r0, r0
    1f50:	00162000 	andseq	r2, r6, r0
    1f54:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f58:	000004f4 	strdeq	r0, [r0], -r4
    1f5c:	00144514 	andseq	r4, r4, r4, lsl r5
    1f60:	015d0100 	cmpeq	sp, r0, lsl #2
    1f64:	0000033a 	andeq	r0, r0, sl, lsr r3
    1f68:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1f6c:	0013c217 	andseq	ip, r3, r7, lsl r2
    1f70:	01430100 	mrseq	r0, (UNDEF: 83)
    1f74:	00000097 	muleq	r0, r7, r0
    1f78:	2000212e 	andcs	r2, r0, lr, lsr #2
    1f7c:	00000042 	andeq	r0, r0, r2, asr #32
    1f80:	053c9c01 	ldreq	r9, [ip, #-3073]!	; 0xfffff3ff
    1f84:	45140000 	ldrmi	r0, [r4, #-0]
    1f88:	01000014 	tsteq	r0, r4, lsl r0
    1f8c:	033a0143 	teqeq	sl, #-1073741808	; 0xc0000010
    1f90:	91020000 	mrsls	r0, (UNDEF: 2)
    1f94:	0f74146c 	svceq	0x0074146c
    1f98:	43010000 	movwmi	r0, #4096	; 0x1000
    1f9c:	0000a201 	andeq	sl, r0, r1, lsl #4
    1fa0:	6a910200 	bvs	fe4427a8 <GPIO_Ports+0xde43f610>
    1fa4:	00104415 	andseq	r4, r0, r5, lsl r4
    1fa8:	01450100 	mrseq	r0, (UNDEF: 85)
    1fac:	00000097 	muleq	r0, r7, r0
    1fb0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1fb4:	00141213 	andseq	r1, r4, r3, lsl r2
    1fb8:	01150100 	tsteq	r5, r0, lsl #2
    1fbc:	200020e8 	andcs	r2, r0, r8, ror #1
    1fc0:	00000046 	andeq	r0, r0, r6, asr #32
    1fc4:	05809c01 	streq	r9, [r0, #3073]	; 0xc01
    1fc8:	45140000 	ldrmi	r0, [r4, #-0]
    1fcc:	01000014 	tsteq	r0, r4, lsl r0
    1fd0:	033a0115 	teqeq	sl, #1073741829	; 0x40000005
    1fd4:	91020000 	mrsls	r0, (UNDEF: 2)
    1fd8:	0f74146c 	svceq	0x0074146c
    1fdc:	15010000 	strne	r0, [r1, #-0]
    1fe0:	0000a201 	andeq	sl, r0, r1, lsl #4
    1fe4:	6a910200 	bvs	fe4427ec <GPIO_Ports+0xde43f654>
    1fe8:	706d7418 	rsbvc	r7, sp, r8, lsl r4
    1fec:	01170100 	tsteq	r7, r0, lsl #2
    1ff0:	000000cd 	andeq	r0, r0, sp, asr #1
    1ff4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1ff8:	0012e319 	andseq	lr, r2, r9, lsl r3
    1ffc:	b4fe0100 	ldrbtlt	r0, [lr], #256	; 0x100
    2000:	34200020 	strtcc	r0, [r0], #-32	; 0xffffffe0
    2004:	01000000 	mrseq	r0, (UNDEF: 0)
    2008:	0005a49c 	muleq	r5, ip, r4
    200c:	13d81a00 	bicsne	r1, r8, #0, 20
    2010:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    2014:	000005a4 	andeq	r0, r0, r4, lsr #11
    2018:	00749102 	rsbseq	r9, r4, r2, lsl #2
    201c:	02cd0416 	sbceq	r0, sp, #369098752	; 0x16000000
    2020:	1f190000 	svcne	0x00190000
    2024:	01000013 	tsteq	r0, r3, lsl r0
    2028:	001f9cca 	andseq	r9, pc, sl, asr #25
    202c:	00011820 	andeq	r1, r1, r0, lsr #16
    2030:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    2034:	1a000006 	bne	2054 <startup-0x1fffdfac>
    2038:	00001445 	andeq	r1, r0, r5, asr #8
    203c:	033aca01 	teqeq	sl, #4096	; 0x1000
    2040:	91020000 	mrsls	r0, (UNDEF: 2)
    2044:	13d81a64 	bicsne	r1, r8, #100, 20	; 0x64000
    2048:	ca010000 	bgt	42050 <startup-0x1ffbdfb0>
    204c:	000005a4 	andeq	r0, r0, r4, lsr #11
    2050:	1b609102 	blne	1826460 <startup-0x1e7d9ba0>
    2054:	000012b3 			; <UNDEFINED> instruction: 0x000012b3
    2058:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
    205c:	91020000 	mrsls	r0, (UNDEF: 2)
    2060:	6f701c74 	svcvs	0x00701c74
    2064:	cc010073 	stcgt	0, cr0, [r1], {115}	; 0x73
    2068:	000000c2 	andeq	r0, r0, r2, asr #1
    206c:	1b709102 	blne	1c2647c <startup-0x1e3d9b84>
    2070:	0000142f 	andeq	r1, r0, pc, lsr #8
    2074:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
    2078:	91020000 	mrsls	r0, (UNDEF: 2)
    207c:	b61d006c 	ldrlt	r0, [sp], -ip, rrx
    2080:	01000013 	tsteq	r0, r3, lsl r0
    2084:	001e2c7f 	andseq	r2, lr, pc, ror ip
    2088:	00017020 	andeq	r7, r1, r0, lsr #32
    208c:	1a9c0100 	bne	fe702494 <GPIO_Ports+0xde6ff2fc>
    2090:	00001445 	andeq	r1, r0, r5, asr #8
    2094:	033a7f01 	teqeq	sl, #1, 30
    2098:	91020000 	mrsls	r0, (UNDEF: 2)
    209c:	43000074 	movwmi	r0, #116	; 0x74
    20a0:	04000005 	streq	r0, [r0], #-5
    20a4:	0004ee00 	andeq	lr, r4, r0, lsl #28
    20a8:	1a010400 	bne	430b0 <startup-0x1ffbcf50>
    20ac:	0c000006 	stceq	0, cr0, [r0], {6}
    20b0:	000015a8 	andeq	r1, r0, r8, lsr #11
    20b4:	0000056e 	andeq	r0, r0, lr, ror #10
    20b8:	2000233c 	andcs	r2, r0, ip, lsr r3
    20bc:	000001c4 	andeq	r0, r0, r4, asr #3
    20c0:	0000083e 	andeq	r0, r0, lr, lsr r8
    20c4:	fc060102 	stc2	1, cr0, [r6], {2}
    20c8:	03000003 	movweq	r0, #3
    20cc:	000001d4 	ldrdeq	r0, [r0], -r4
    20d0:	00372b02 	eorseq	r2, r7, r2, lsl #22
    20d4:	01020000 	mrseq	r0, (UNDEF: 2)
    20d8:	0003fa08 	andeq	pc, r3, r8, lsl #20
    20dc:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    20e0:	00000ff4 	strdeq	r0, [r0], -r4
    20e4:	7d070202 	sfmvc	f0, 4, [r7, #-8]
    20e8:	03000011 	movweq	r0, #17
    20ec:	00001217 	andeq	r1, r0, r7, lsl r2
    20f0:	00574d02 	subseq	r4, r7, r2, lsl #26
    20f4:	04020000 	streq	r0, [r2], #-0
    20f8:	0009e905 	andeq	lr, r9, r5, lsl #18
    20fc:	09920300 	ldmibeq	r2, {r8, r9}
    2100:	4f020000 	svcmi	0x00020000
    2104:	00000069 	andeq	r0, r0, r9, rrx
    2108:	4c070402 	cfstrsmi	mvf0, [r7], {2}
    210c:	0200000d 	andeq	r0, r0, #13
    2110:	09e40508 	stmibeq	r4!, {r3, r8, sl}^
    2114:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2118:	000d4707 	andeq	r4, sp, r7, lsl #14
    211c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    2120:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2124:	51070402 	tstpl	r7, r2, lsl #8
    2128:	0300000d 	movweq	r0, #13
    212c:	000001d6 	ldrdeq	r0, [r0], -r6
    2130:	002c1803 	eoreq	r1, ip, r3, lsl #16
    2134:	8c050000 	stchi	0, cr0, [r5], {-0}
    2138:	03000000 	movweq	r0, #0
    213c:	00001219 	andeq	r1, r0, r9, lsl r2
    2140:	004c2c03 	subeq	r2, ip, r3, lsl #24
    2144:	9c050000 	stcls	0, cr0, [r5], {-0}
    2148:	03000000 	movweq	r0, #0
    214c:	00000994 	muleq	r0, r4, r9
    2150:	005e3003 	subseq	r3, lr, r3
    2154:	ac050000 	stcge	0, cr0, [r5], {-0}
    2158:	06000000 	streq	r0, [r0], -r0
    215c:	000000b7 	strheq	r0, [r0], -r7
    2160:	040e0407 	streq	r0, [lr], #-1031	; 0xfffffbf9
    2164:	017d01a0 	cmneq	sp, r0, lsr #3
    2168:	35080000 	strcc	r0, [r8, #-0]
    216c:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    2170:	018d01a2 	orreq	r0, sp, r2, lsr #3
    2174:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2178:	000003e6 	andeq	r0, r0, r6, ror #7
    217c:	9201a304 	andls	sl, r1, #4, 6	; 0x10000000
    2180:	20000001 	andcs	r0, r0, r1
    2184:	000dd108 	andeq	sp, sp, r8, lsl #2
    2188:	01a40400 			; <UNDEFINED> instruction: 0x01a40400
    218c:	0000018d 	andeq	r0, r0, sp, lsl #3
    2190:	00050880 	andeq	r0, r5, r0, lsl #17
    2194:	a5040000 	strge	r0, [r4, #-0]
    2198:	00019201 	andeq	r9, r1, r1, lsl #4
    219c:	c509a000 	strgt	sl, [r9, #-0]
    21a0:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    21a4:	018d01a6 	orreq	r0, sp, r6, lsr #3
    21a8:	01000000 	mrseq	r0, (UNDEF: 0)
    21ac:	00047409 	andeq	r7, r4, r9, lsl #8
    21b0:	01a70400 			; <UNDEFINED> instruction: 0x01a70400
    21b4:	00000192 	muleq	r0, r2, r1
    21b8:	8e090120 	adfhiep	f0, f1, f0
    21bc:	04000001 	streq	r0, [r0], #-1
    21c0:	018d01a8 	orreq	r0, sp, r8, lsr #3
    21c4:	01800000 	orreq	r0, r0, r0
    21c8:	00047e09 	andeq	r7, r4, r9, lsl #28
    21cc:	01a90400 			; <UNDEFINED> instruction: 0x01a90400
    21d0:	00000192 	muleq	r0, r2, r1
    21d4:	380901a0 	stmdacc	r9, {r5, r7, r8}
    21d8:	04000004 	streq	r0, [r0], #-4
    21dc:	018d01aa 	orreq	r0, sp, sl, lsr #3
    21e0:	02000000 	andeq	r0, r0, #0
    21e4:	00041a09 	andeq	r1, r4, r9, lsl #20
    21e8:	01ab0400 			; <UNDEFINED> instruction: 0x01ab0400
    21ec:	000001a2 	andeq	r0, r0, r2, lsr #3
    21f0:	490a0220 	stmdbmi	sl, {r5, r9}
    21f4:	ac040050 	stcge	0, cr0, [r4], {80}	; 0x50
    21f8:	0001c201 	andeq	ip, r1, r1, lsl #4
    21fc:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    2200:	00000424 	andeq	r0, r0, r4, lsr #8
    2204:	c701ad04 	strgt	sl, [r1, -r4, lsl #26]
    2208:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
    220c:	070d0903 	streq	r0, [sp, -r3, lsl #18]
    2210:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
    2214:	0000b701 	andeq	fp, r0, r1, lsl #14
    2218:	000e0000 	andeq	r0, lr, r0
    221c:	0000b70b 	andeq	fp, r0, fp, lsl #14
    2220:	00018d00 	andeq	r8, r1, r0, lsl #26
    2224:	00850c00 	addeq	r0, r5, r0, lsl #24
    2228:	00070000 	andeq	r0, r7, r0
    222c:	00017d05 	andeq	r7, r1, r5, lsl #26
    2230:	00ac0b00 	adceq	r0, ip, r0, lsl #22
    2234:	01a20000 			; <UNDEFINED> instruction: 0x01a20000
    2238:	850c0000 	strhi	r0, [ip, #-0]
    223c:	17000000 	strne	r0, [r0, -r0]
    2240:	00ac0b00 	adceq	r0, ip, r0, lsl #22
    2244:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    2248:	850c0000 	strhi	r0, [ip, #-0]
    224c:	37000000 	strcc	r0, [r0, -r0]
    2250:	00970b00 	addseq	r0, r7, r0, lsl #22
    2254:	01c20000 	biceq	r0, r2, r0
    2258:	850c0000 	strhi	r0, [ip, #-0]
    225c:	ef000000 	svc	0x00000000
    2260:	01b20500 			; <UNDEFINED> instruction: 0x01b20500
    2264:	ac0b0000 	stcge	0, cr0, [fp], {-0}
    2268:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    226c:	0d000001 	stceq	0, cr0, [r0, #-4]
    2270:	00000085 	andeq	r0, r0, r5, lsl #1
    2274:	0e000283 	cdpeq	2, 0, cr0, cr0, cr3, {4}
    2278:	00000d07 	andeq	r0, r0, r7, lsl #26
    227c:	c101af04 	tstgt	r1, r4, lsl #30
    2280:	0f000000 	svceq	0x00000000
    2284:	01c0048c 	biceq	r0, r0, ip, lsl #9
    2288:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    228c:	00024508 	andeq	r4, r2, r8, lsl #10
    2290:	01c20400 	biceq	r0, r2, r0, lsl #8
    2294:	000000bc 	strheq	r0, [r0], -ip
    2298:	036e0800 	cmneq	lr, #0, 16
    229c:	c3040000 	movwgt	r0, #16384	; 0x4000
    22a0:	0000b701 	andeq	fp, r0, r1, lsl #14
    22a4:	ba080400 	blt	2032ac <startup-0x1fdfcd54>
    22a8:	04000000 	streq	r0, [r0], #-0
    22ac:	00b701c4 	adcseq	r0, r7, r4, asr #3
    22b0:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    22b4:	00000215 	andeq	r0, r0, r5, lsl r2
    22b8:	b701c504 	strlt	ip, [r1, -r4, lsl #10]
    22bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    22c0:	52435310 	subpl	r5, r3, #16, 6	; 0x40000000
    22c4:	01c60400 	biceq	r0, r6, r0, lsl #8
    22c8:	000000b7 	strheq	r0, [r0], -r7
    22cc:	43431010 	movtmi	r1, #12304	; 0x3010
    22d0:	c7040052 	smlsdgt	r4, r2, r0, r0
    22d4:	0000b701 	andeq	fp, r0, r1, lsl #14
    22d8:	53101400 	tstpl	r0, #0, 8
    22dc:	04005048 	streq	r5, [r0], #-72	; 0xffffffb8
    22e0:	030f01c8 	movweq	r0, #61896	; 0xf1c8
    22e4:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    22e8:	000006f6 	strdeq	r0, [r0], -r6
    22ec:	b701c904 	strlt	ip, [r1, -r4, lsl #18]
    22f0:	24000000 	strcs	r0, [r0], #-0
    22f4:	000ec608 	andeq	ip, lr, r8, lsl #12
    22f8:	01ca0400 	biceq	r0, sl, r0, lsl #8
    22fc:	000000b7 	strheq	r0, [r0], -r7
    2300:	05b10828 	ldreq	r0, [r1, #2088]!	; 0x828
    2304:	cb040000 	blgt	10230c <startup-0x1fefdcf4>
    2308:	0000b701 	andeq	fp, r0, r1, lsl #14
    230c:	bc082c00 	stclt	12, cr2, [r8], {-0}
    2310:	04000004 	streq	r0, [r0], #-4
    2314:	00b701cc 	adcseq	r0, r7, ip, asr #3
    2318:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    231c:	00000fee 	andeq	r0, r0, lr, ror #31
    2320:	b701cd04 	strlt	ip, [r1, -r4, lsl #26]
    2324:	34000000 	strcc	r0, [r0], #-0
    2328:	000bd808 	andeq	sp, fp, r8, lsl #16
    232c:	01ce0400 	biceq	r0, lr, r0, lsl #8
    2330:	000000b7 	strheq	r0, [r0], -r7
    2334:	0e850838 	mcreq	8, 4, r0, cr5, cr8, {1}
    2338:	cf040000 	svcgt	0x00040000
    233c:	0000b701 	andeq	fp, r0, r1, lsl #14
    2340:	50103c00 	andspl	r3, r0, r0, lsl #24
    2344:	04005246 	streq	r5, [r0], #-582	; 0xfffffdba
    2348:	032901d0 			; <UNDEFINED> instruction: 0x032901d0
    234c:	10400000 	subne	r0, r0, r0
    2350:	00524644 	subseq	r4, r2, r4, asr #12
    2354:	bc01d104 	stfltd	f5, [r1], {4}
    2358:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    235c:	52444110 	subpl	r4, r4, #16, 2
    2360:	01d20400 	bicseq	r0, r2, r0, lsl #8
    2364:	000000bc 	strheq	r0, [r0], -ip
    2368:	0fcf084c 	svceq	0x00cf084c
    236c:	d3040000 	movwle	r0, #16384	; 0x4000
    2370:	00034301 	andeq	r4, r3, r1, lsl #6
    2374:	17085000 	strne	r5, [r8, -r0]
    2378:	04000010 	streq	r0, [r0], #-16
    237c:	035d01d4 	cmpeq	sp, #212, 2	; 0x35
    2380:	08600000 	stmdaeq	r0!, {}^	; <UNPREDICTABLE>
    2384:	000003e6 	andeq	r0, r0, r6, ror #7
    2388:	6201d504 	andvs	sp, r1, #4, 10	; 0x1000000
    238c:	74000003 	strvc	r0, [r0], #-3
    2390:	0011b808 	andseq	fp, r1, r8, lsl #16
    2394:	01d60400 	bicseq	r0, r6, r0, lsl #8
    2398:	000000b7 	strheq	r0, [r0], -r7
    239c:	970b0088 	strls	r0, [fp, -r8, lsl #1]
    23a0:	0f000000 	svceq	0x00000000
    23a4:	0c000003 	stceq	0, cr0, [r0], {3}
    23a8:	00000085 	andeq	r0, r0, r5, lsl #1
    23ac:	ff05000b 			; <UNDEFINED> instruction: 0xff05000b
    23b0:	0b000002 	bleq	23c0 <startup-0x1fffdc40>
    23b4:	000000bc 	strheq	r0, [r0], -ip
    23b8:	00000324 	andeq	r0, r0, r4, lsr #6
    23bc:	0000850c 	andeq	r8, r0, ip, lsl #10
    23c0:	06000100 	streq	r0, [r0], -r0, lsl #2
    23c4:	00000314 	andeq	r0, r0, r4, lsl r3
    23c8:	00032405 	andeq	r2, r3, r5, lsl #8
    23cc:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    23d0:	033e0000 	teqeq	lr, #0
    23d4:	850c0000 	strhi	r0, [ip, #-0]
    23d8:	03000000 	movweq	r0, #0
    23dc:	032e0600 			; <UNDEFINED> instruction: 0x032e0600
    23e0:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    23e4:	0b000003 	bleq	23f8 <startup-0x1fffdc08>
    23e8:	000000bc 	strheq	r0, [r0], -ip
    23ec:	00000358 	andeq	r0, r0, r8, asr r3
    23f0:	0000850c 	andeq	r8, r0, ip, lsl #10
    23f4:	06000400 	streq	r0, [r0], -r0, lsl #8
    23f8:	00000348 	andeq	r0, r0, r8, asr #6
    23fc:	00035805 	andeq	r5, r3, r5, lsl #16
    2400:	00ac0b00 	adceq	r0, ip, r0, lsl #22
    2404:	03720000 	cmneq	r2, #0
    2408:	850c0000 	strhi	r0, [ip, #-0]
    240c:	04000000 	streq	r0, [r0], #-0
    2410:	04a20e00 	strteq	r0, [r2], #3584	; 0xe00
    2414:	d7040000 	strle	r0, [r4, -r0]
    2418:	0001e401 	andeq	lr, r1, r1, lsl #8
    241c:	04100f00 	ldreq	r0, [r0], #-3840	; 0xfffff100
    2420:	03bc02bf 			; <UNDEFINED> instruction: 0x03bc02bf
    2424:	21080000 	mrscs	r0, (UNDEF: 8)
    2428:	0400000b 	streq	r0, [r0], #-11
    242c:	00b702c1 	adcseq	r0, r7, r1, asr #5
    2430:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2434:	00000f4b 	andeq	r0, r0, fp, asr #30
    2438:	b702c204 	strlt	ip, [r2, -r4, lsl #4]
    243c:	04000000 	streq	r0, [r0], #-0
    2440:	4c415610 	mcrrmi	6, 1, r5, r1, cr0
    2444:	02c30400 	sbceq	r0, r3, #0, 8
    2448:	000000b7 	strheq	r0, [r0], -r7
    244c:	0e910808 	cdpeq	8, 9, cr0, cr1, cr8, {0}
    2450:	c4040000 	strgt	r0, [r4], #-0
    2454:	0000bc02 	andeq	fp, r0, r2, lsl #24
    2458:	0e000c00 	cdpeq	12, 0, cr0, cr0, cr0, {0}
    245c:	00000c6c 	andeq	r0, r0, ip, ror #24
    2460:	7e02c504 	cfsh32vc	mvfx12, mvfx2, #4
    2464:	11000003 	tstne	r0, r3
    2468:	00001099 	muleq	r0, r9, r0
    246c:	a706fa04 	strge	pc, [r6, -r4, lsl #20]
    2470:	12000000 	andne	r0, r0, #0
    2474:	00000891 	muleq	r0, r1, r8
    2478:	00ac3b05 	adceq	r3, ip, r5, lsl #22
    247c:	07130000 	ldreq	r0, [r3, -r0]
    2480:	00003701 	andeq	r3, r0, r1, lsl #14
    2484:	035f0600 	cmpeq	pc, #0, 12
    2488:	000003fa 	strdeq	r0, [r0], -sl
    248c:	000a2214 	andeq	r2, sl, r4, lsl r2
    2490:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
    2494:	01000010 	tsteq	r0, r0, lsl r0
    2498:	0d110e00 	ldceq	14, cr0, [r1, #-0]
    249c:	5f060000 	svcpl	0x00060000
    24a0:	0003df03 	andeq	sp, r3, r3, lsl #30
    24a4:	07041500 	streq	r1, [r4, -r0, lsl #10]
    24a8:	00043f36 	andeq	r3, r4, r6, lsr pc
    24ac:	154e1600 	strbne	r1, [lr, #-1536]	; 0xfffffa00
    24b0:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
    24b4:	0000008c 	andeq	r0, r0, ip, lsl #1
    24b8:	15791600 	ldrbne	r1, [r9, #-1536]!	; 0xfffffa00
    24bc:	3d070000 	stccc	0, cr0, [r7, #-0]
    24c0:	0000008c 	andeq	r0, r0, ip, lsl #1
    24c4:	155e1601 	ldrbne	r1, [lr, #-1537]	; 0xfffff9ff
    24c8:	42070000 	andmi	r0, r7, #0
    24cc:	0000008c 	andeq	r0, r0, ip, lsl #1
    24d0:	149b1602 	ldrne	r1, [fp], #1538	; 0x602
    24d4:	47070000 	strmi	r0, [r7, -r0]
    24d8:	000003fa 	strdeq	r0, [r0], -sl
    24dc:	8a030003 	bhi	c24f0 <startup-0x1ff3db10>
    24e0:	07000014 	smladeq	r0, r4, r0, r0
    24e4:	0004064a 	andeq	r0, r4, sl, asr #12
    24e8:	152a1700 	strne	r1, [sl, #-1792]!	; 0xfffff900
    24ec:	df010000 	svcle	0x00010000
    24f0:	200024cc 	andcs	r2, r0, ip, asr #9
    24f4:	00000034 	andeq	r0, r0, r4, lsr r0
    24f8:	046e9c01 	strbteq	r9, [lr], #-3073	; 0xfffff3ff
    24fc:	ae180000 	cdpge	0, 1, cr0, cr8, cr0, {0}
    2500:	01000014 	tsteq	r0, r4, lsl r0
    2504:	0000acdf 	ldrdeq	sl, [r0], -pc	; <UNPREDICTABLE>
    2508:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    250c:	15161700 	ldrne	r1, [r6, #-1792]	; 0xfffff900
    2510:	c7010000 	strgt	r0, [r1, -r0]
    2514:	20002484 	andcs	r2, r0, r4, lsl #9
    2518:	00000048 	andeq	r0, r0, r8, asr #32
    251c:	04a09c01 	strteq	r9, [r0], #3073	; 0xc01
    2520:	1c180000 	ldcne	0, cr0, [r8], {-0}
    2524:	01000016 	tsteq	r0, r6, lsl r0
    2528:	00008cc7 	andeq	r8, r0, r7, asr #25
    252c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2530:	000b3418 	andeq	r3, fp, r8, lsl r4
    2534:	fac70100 	blx	ff1c293c <GPIO_Ports+0xdf1bf7a4>
    2538:	02000003 	andeq	r0, r0, #3
    253c:	17007691 			; <UNDEFINED> instruction: 0x17007691
    2540:	000014fb 	strdeq	r1, [r0], -fp
    2544:	2458b401 	ldrbcs	fp, [r8], #-1025	; 0xfffffbff
    2548:	002c2000 	eoreq	r2, ip, r0
    254c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2550:	000004d2 	ldrdeq	r0, [r0], -r2
    2554:	00159b18 	andseq	r9, r5, r8, lsl fp
    2558:	acb40100 	ldfges	f0, [r4]
    255c:	02000000 	andeq	r0, r0, #0
    2560:	f4187491 			; <UNDEFINED> instruction: 0xf4187491
    2564:	01000014 	tsteq	r0, r4, lsl r0
    2568:	0000acb4 			; <UNDEFINED> instruction: 0x0000acb4
    256c:	70910200 	addsvc	r0, r1, r0, lsl #4
    2570:	14e31700 	strbtne	r1, [r3], #1792	; 0x700
    2574:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    2578:	20002360 	andcs	r2, r0, r0, ror #6
    257c:	000000f8 	strdeq	r0, [r0], -r8
    2580:	05209c01 	streq	r9, [r0, #-3073]!	; 0xfffff3ff
    2584:	c0180000 	andsgt	r0, r8, r0
    2588:	01000014 	tsteq	r0, r4, lsl r0
    258c:	00052088 	andeq	r2, r5, r8, lsl #1
    2590:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2594:	00154219 	andseq	r4, r5, r9, lsl r2
    2598:	8c8a0100 	stfhis	f0, [sl], {0}
    259c:	02000000 	andeq	r0, r0, #0
    25a0:	ed196f91 	ldc	15, cr6, [r9, #-580]	; 0xfffffdbc
    25a4:	01000014 	tsteq	r0, r4, lsl r0
    25a8:	00008c8a 	andeq	r8, r0, sl, lsl #25
    25ac:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    25b0:	00150f19 	andseq	r0, r5, r9, lsl pc
    25b4:	8c8a0100 	stfhis	f0, [sl], {0}
    25b8:	02000000 	andeq	r0, r0, #0
    25bc:	1a006d91 	bne	1dc08 <startup-0x1ffe23f8>
    25c0:	00043f04 	andeq	r3, r4, r4, lsl #30
    25c4:	16291b00 	strtne	r1, [r9], -r0, lsl #22
    25c8:	76010000 	strvc	r0, [r1], -r0
    25cc:	2000233c 	andcs	r2, r0, ip, lsr r3
    25d0:	00000024 	andeq	r0, r0, r4, lsr #32
    25d4:	d0189c01 	andsle	r9, r8, r1, lsl #24
    25d8:	01000014 	tsteq	r0, r4, lsl r0
    25dc:	0000ac76 	andeq	sl, r0, r6, ror ip
    25e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    25e4:	01a90000 			; <UNDEFINED> instruction: 0x01a90000
    25e8:	00040000 	andeq	r0, r4, r0
    25ec:	00000662 	andeq	r0, r0, r2, ror #12
    25f0:	061a0104 	ldreq	r0, [sl], -r4, lsl #2
    25f4:	520c0000 	andpl	r0, ip, #0
    25f8:	6e000016 	mcrvs	0, 0, r0, cr0, cr6, {0}
    25fc:	00000005 	andeq	r0, r0, r5
    2600:	28200025 	stmdacs	r0!, {r0, r2, r5}
    2604:	3c000001 	stccc	0, cr0, [r0], {1}
    2608:	0200000a 	andeq	r0, r0, #10
    260c:	03fc0601 	mvnseq	r0, #1048576	; 0x100000
    2610:	d4030000 	strle	r0, [r3], #-0
    2614:	02000001 	andeq	r0, r0, #1
    2618:	0000372b 	andeq	r3, r0, fp, lsr #14
    261c:	08010200 	stmdaeq	r1, {r9}
    2620:	000003fa 	strdeq	r0, [r0], -sl
    2624:	f4050202 	vst1.8	{d0-d3}, [r5], r2
    2628:	0200000f 	andeq	r0, r0, #15
    262c:	117d0702 	cmnne	sp, r2, lsl #14
    2630:	04020000 	streq	r0, [r2], #-0
    2634:	0009e905 	andeq	lr, r9, r5, lsl #18
    2638:	07040200 	streq	r0, [r4, -r0, lsl #4]
    263c:	00000d4c 	andeq	r0, r0, ip, asr #26
    2640:	e4050802 	str	r0, [r5], #-2050	; 0xfffff7fe
    2644:	02000009 	andeq	r0, r0, #9
    2648:	0d470708 	stcleq	7, cr0, [r7, #-32]	; 0xffffffe0
    264c:	04040000 	streq	r0, [r4], #-0
    2650:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2654:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2658:	00000d51 	andeq	r0, r0, r1, asr sp
    265c:	0001d603 	andeq	sp, r1, r3, lsl #12
    2660:	2c180300 	ldccs	3, cr0, [r8], {-0}
    2664:	05000000 	streq	r0, [r0, #-0]
    2668:	b90c0467 	stmdblt	ip, {r0, r1, r2, r5, r6, sl}
    266c:	06000000 	streq	r0, [r0], -r0
    2670:	000016ba 			; <UNDEFINED> instruction: 0x000016ba
    2674:	00b90e04 	adcseq	r0, r9, r4, lsl #28
    2678:	06000000 	streq	r0, [r0], -r0
    267c:	0000164c 	andeq	r1, r0, ip, asr #12
    2680:	00761104 	rsbseq	r1, r6, r4, lsl #2
    2684:	07640000 	strbeq	r0, [r4, -r0]!
    2688:	04006e69 	streq	r6, [r0], #-3689	; 0xfffff197
    268c:	00007614 	andeq	r7, r0, r4, lsl r6
    2690:	6f076500 	svcvs	0x00076500
    2694:	04007475 	streq	r7, [r0], #-1141	; 0xfffffb8b
    2698:	00007617 	andeq	r7, r0, r7, lsl r6
    269c:	08006600 	stmdaeq	r0, {r9, sl, sp, lr}
    26a0:	00000076 	andeq	r0, r0, r6, ror r0
    26a4:	000000c9 	andeq	r0, r0, r9, asr #1
    26a8:	00006f09 	andeq	r6, r0, r9, lsl #30
    26ac:	03006300 	movweq	r6, #768	; 0x300
    26b0:	0000169d 	muleq	r0, sp, r6
    26b4:	00811804 	addeq	r1, r1, r4, lsl #16
    26b8:	c40a0000 	strgt	r0, [sl], #-0
    26bc:	01000016 	tsteq	r0, r6, lsl r0
    26c0:	0000762d 	andeq	r7, r0, sp, lsr #12
    26c4:	0025ca00 	eoreq	ip, r5, r0, lsl #20
    26c8:	00005e20 	andeq	r5, r0, r0, lsr #28
    26cc:	0a9c0100 	beq	fe702ad4 <GPIO_Ports+0xde6ff93c>
    26d0:	0b000001 	bleq	26dc <startup-0x1fffd924>
    26d4:	000016d9 	ldrdeq	r1, [r0], -r9
    26d8:	010a2d01 	tsteq	sl, r1, lsl #26
    26dc:	91020000 	mrsls	r0, (UNDEF: 2)
    26e0:	16b50b74 			; <UNDEFINED> instruction: 0x16b50b74
    26e4:	2d010000 	stccs	0, cr0, [r1, #-0]
    26e8:	00000110 	andeq	r0, r0, r0, lsl r1
    26ec:	00709102 	rsbseq	r9, r0, r2, lsl #2
    26f0:	00c9040c 	sbceq	r0, r9, ip, lsl #8
    26f4:	040c0000 	streq	r0, [ip], #-0
    26f8:	00000076 	andeq	r0, r0, r6, ror r0
    26fc:	0016a20d 	andseq	sl, r6, sp, lsl #4
    2700:	8a1f0100 	bhi	7c2b08 <startup-0x1f83d4f8>
    2704:	40200025 	eormi	r0, r0, r5, lsr #32
    2708:	01000000 	mrseq	r0, (UNDEF: 0)
    270c:	0001569c 	muleq	r1, ip, r6
    2710:	16d90b00 	ldrbne	r0, [r9], r0, lsl #22
    2714:	1f010000 	svcne	0x00010000
    2718:	0000010a 	andeq	r0, r0, sl, lsl #2
    271c:	0b6c9102 	bleq	1b26b2c <startup-0x1e4d94d4>
    2720:	000016bf 			; <UNDEFINED> instruction: 0x000016bf
    2724:	00761f01 	rsbseq	r1, r6, r1, lsl #30
    2728:	91020000 	mrsls	r0, (UNDEF: 2)
    272c:	16e00e6b 	strbtne	r0, [r0], fp, ror #28
    2730:	21010000 	mrscs	r0, (UNDEF: 1)
    2734:	00000076 	andeq	r0, r0, r6, ror r0
    2738:	00779102 	rsbseq	r9, r7, r2, lsl #2
    273c:	0016420a 	andseq	r4, r6, sl, lsl #4
    2740:	760c0100 	strvc	r0, [ip], -r0, lsl #2
    2744:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    2748:	62200025 	eorvs	r0, r0, #37	; 0x25
    274c:	01000000 	mrseq	r0, (UNDEF: 0)
    2750:	00018c9c 	muleq	r1, ip, ip
    2754:	16d90b00 	ldrbne	r0, [r9], r0, lsl #22
    2758:	0c010000 	stceq	0, cr0, [r1], {-0}
    275c:	0000010a 	andeq	r0, r0, sl, lsl #2
    2760:	0b749102 	bleq	1d26b70 <startup-0x1e2d9490>
    2764:	000016bf 			; <UNDEFINED> instruction: 0x000016bf
    2768:	00760c01 	rsbseq	r0, r6, r1, lsl #24
    276c:	91020000 	mrsls	r0, (UNDEF: 2)
    2770:	ce0f0073 	mcrgt	0, 0, r0, cr15, cr3, {3}
    2774:	01000016 	tsteq	r0, r6, lsl r0
    2778:	00250004 	eoreq	r0, r5, r4
    277c:	00002820 	andeq	r2, r0, r0, lsr #16
    2780:	0b9c0100 	bleq	fe702b88 <GPIO_Ports+0xde6ff9f0>
    2784:	000016d9 	ldrdeq	r1, [r0], -r9
    2788:	010a0401 	tsteq	sl, r1, lsl #8
    278c:	91020000 	mrsls	r0, (UNDEF: 2)
    2790:	cc000074 	stcgt	0, cr0, [r0], {116}	; 0x74
    2794:	04000009 	streq	r0, [r0], #-9
    2798:	00074b00 	andeq	r4, r7, r0, lsl #22
    279c:	1a010400 	bne	437a4 <startup-0x1ffbc85c>
    27a0:	0c000006 	stceq	0, cr0, [r0], {6}
    27a4:	00001abb 			; <UNDEFINED> instruction: 0x00001abb
    27a8:	0000056e 	andeq	r0, r0, lr, ror #10
    27ac:	20002628 	andcs	r2, r0, r8, lsr #12
    27b0:	000009fe 	strdeq	r0, [r0], -lr
    27b4:	00000b8e 	andeq	r0, r0, lr, lsl #23
    27b8:	fc060102 	stc2	1, cr0, [r6], {2}
    27bc:	03000003 	movweq	r0, #3
    27c0:	000001d4 	ldrdeq	r0, [r0], -r4
    27c4:	00372b02 	eorseq	r2, r7, r2, lsl #22
    27c8:	01020000 	mrseq	r0, (UNDEF: 2)
    27cc:	0003fa08 	andeq	pc, r3, r8, lsl #20
    27d0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    27d4:	00000ff4 	strdeq	r0, [r0], -r4
    27d8:	00052e03 	andeq	r2, r5, r3, lsl #28
    27dc:	50390200 	eorspl	r0, r9, r0, lsl #4
    27e0:	02000000 	andeq	r0, r0, #0
    27e4:	117d0702 	cmnne	sp, r2, lsl #14
    27e8:	17030000 	strne	r0, [r3, -r0]
    27ec:	02000012 	andeq	r0, r0, #18
    27f0:	0000624d 	andeq	r6, r0, sp, asr #4
    27f4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    27f8:	000009e9 	andeq	r0, r0, r9, ror #19
    27fc:	00099203 	andeq	r9, r9, r3, lsl #4
    2800:	744f0200 	strbvc	r0, [pc], #-512	; 2808 <startup-0x1fffd7f8>
    2804:	02000000 	andeq	r0, r0, #0
    2808:	0d4c0704 	stcleq	7, cr0, [ip, #-16]
    280c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2810:	0009e405 	andeq	lr, r9, r5, lsl #8
    2814:	07080200 	streq	r0, [r8, -r0, lsl #4]
    2818:	00000d47 	andeq	r0, r0, r7, asr #26
    281c:	69050404 	stmdbvs	r5, {r2, sl}
    2820:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    2824:	0d510704 	ldcleq	7, cr0, [r1, #-16]
    2828:	d6030000 	strle	r0, [r3], -r0
    282c:	03000001 	movweq	r0, #1
    2830:	00002c18 	andeq	r2, r0, r8, lsl ip
    2834:	05300300 	ldreq	r0, [r0, #-768]!	; 0xfffffd00
    2838:	24030000 	strcs	r0, [r3], #-0
    283c:	00000045 	andeq	r0, r0, r5, asr #32
    2840:	0000a205 	andeq	sl, r0, r5, lsl #4
    2844:	12190300 	andsne	r0, r9, #0, 6
    2848:	2c030000 	stccs	0, cr0, [r3], {-0}
    284c:	00000057 	andeq	r0, r0, r7, asr r0
    2850:	0000b205 	andeq	fp, r0, r5, lsl #4
    2854:	09940300 	ldmibeq	r4, {r8, r9}
    2858:	30030000 	andcc	r0, r3, r0
    285c:	00000069 	andeq	r0, r0, r9, rrx
    2860:	00109906 	andseq	r9, r0, r6, lsl #18
    2864:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    2868:	000000bd 	strheq	r0, [r0], -sp
    286c:	00089107 	andeq	r9, r8, r7, lsl #2
    2870:	c23b0500 	eorsgt	r0, fp, #0, 10
    2874:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2878:	00370107 	eorseq	r0, r7, r7, lsl #2
    287c:	5d060000 	stcpl	0, cr0, [r6, #-0]
    2880:	0000ff03 	andeq	pc, r0, r3, lsl #30
    2884:	12fe0900 	rscsne	r0, lr, #0, 18
    2888:	0a000000 	beq	2890 <startup-0x1fffd770>
    288c:	00544553 	subseq	r4, r4, r3, asr r5
    2890:	4c0b0001 	stcmi	0, cr0, [fp], {1}
    2894:	0600000a 	streq	r0, [r0], -sl
    2898:	00e4035d 	rsceq	r0, r4, sp, asr r3
    289c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    28a0:	0600000b 	streq	r0, [r0], -fp
    28a4:	00e4035d 	rsceq	r0, r4, sp, asr r3
    28a8:	07080000 	streq	r0, [r8, -r0]
    28ac:	00003701 	andeq	r3, r0, r1, lsl #14
    28b0:	035f0600 	cmpeq	pc, #0, 12
    28b4:	00000132 	andeq	r0, r0, r2, lsr r1
    28b8:	000a2209 	andeq	r2, sl, r9, lsl #4
    28bc:	4e090000 	cdpmi	0, 0, cr0, cr9, cr0, {0}
    28c0:	01000010 	tsteq	r0, r0, lsl r0
    28c4:	0d110b00 	vldreq	d0, [r1, #-0]
    28c8:	5f060000 	svcpl	0x00060000
    28cc:	00011703 	andeq	r1, r1, r3, lsl #14
    28d0:	061c0c00 	ldreq	r0, [ip], -r0, lsl #24
    28d4:	01fc0773 	mvnseq	r0, r3, ror r7
    28d8:	530d0000 	movwpl	r0, #53248	; 0xd000
    28dc:	75060052 	strvc	r0, [r6, #-82]	; 0xffffffae
    28e0:	0000ad07 	andeq	sl, r0, r7, lsl #26
    28e4:	e60e0000 	str	r0, [lr], -r0
    28e8:	06000003 	streq	r0, [r0], -r3
    28ec:	00a20776 	adceq	r0, r2, r6, ror r7
    28f0:	0d020000 	stceq	0, cr0, [r2, #-0]
    28f4:	06005244 	streq	r5, [r0], -r4, asr #4
    28f8:	00ad0777 	adceq	r0, sp, r7, ror r7
    28fc:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    2900:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2904:	a2077806 	andge	r7, r7, #393216	; 0x60000
    2908:	06000000 	streq	r0, [r0], -r0
    290c:	5252420d 	subspl	r4, r2, #-805306368	; 0xd0000000
    2910:	07790600 	ldrbeq	r0, [r9, -r0, lsl #12]!
    2914:	000000ad 	andeq	r0, r0, sp, lsr #1
    2918:	04740e08 	ldrbteq	r0, [r4], #-3592	; 0xfffff1f8
    291c:	7a060000 	bvc	182924 <startup-0x1fe7d6dc>
    2920:	0000a207 	andeq	sl, r0, r7, lsl #4
    2924:	430d0a00 	movwmi	r0, #55808	; 0xda00
    2928:	06003152 			; <UNDEFINED> instruction: 0x06003152
    292c:	00ad077b 	adceq	r0, sp, fp, ror r7
    2930:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    2934:	0000047e 	andeq	r0, r0, lr, ror r4
    2938:	a2077c06 	andge	r7, r7, #1536	; 0x600
    293c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2940:	3252430d 	subscc	r4, r2, #872415232	; 0x34000000
    2944:	077d0600 	ldrbeq	r0, [sp, -r0, lsl #12]!
    2948:	000000ad 	andeq	r0, r0, sp, lsr #1
    294c:	041a0e10 	ldreq	r0, [sl], #-3600	; 0xfffff1f0
    2950:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
    2954:	0000a207 	andeq	sl, r0, r7, lsl #4
    2958:	430d1200 	movwmi	r1, #53760	; 0xd200
    295c:	06003352 			; <UNDEFINED> instruction: 0x06003352
    2960:	00ad077f 	adceq	r0, sp, pc, ror r7
    2964:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    2968:	00000424 	andeq	r0, r0, r4, lsr #8
    296c:	a2078006 	andge	r8, r7, #6
    2970:	16000000 	strne	r0, [r0], -r0
    2974:	0017040e 	andseq	r0, r7, lr, lsl #8
    2978:	07810600 	streq	r0, [r1, r0, lsl #12]
    297c:	000000ad 	andeq	r0, r0, sp, lsr #1
    2980:	042e0e18 	strteq	r0, [lr], #-3608	; 0xfffff1e8
    2984:	82060000 	andhi	r0, r6, #0
    2988:	0000a207 	andeq	sl, r0, r7, lsl #4
    298c:	0b001a00 	bleq	9194 <startup-0x1fff6e6c>
    2990:	00001770 	andeq	r1, r0, r0, ror r7
    2994:	3e078306 	cdpcc	3, 0, cr8, cr7, cr6, {0}
    2998:	0f000001 	svceq	0x00000001
    299c:	59360710 	ldmdbpl	r6!, {r4, r8, r9, sl}
    29a0:	10000002 	andne	r0, r0, r2
    29a4:	000017f6 	strdeq	r1, [r0], -r6
    29a8:	00c23807 	sbceq	r3, r2, r7, lsl #16
    29ac:	10000000 	andne	r0, r0, r0
    29b0:	000017ca 	andeq	r1, r0, sl, asr #15
    29b4:	00a23e07 	adceq	r3, r2, r7, lsl #28
    29b8:	10040000 	andne	r0, r4, r0
    29bc:	0000177e 	andeq	r1, r0, lr, ror r7
    29c0:	00a24107 	adceq	r4, r2, r7, lsl #2
    29c4:	10060000 	andne	r0, r6, r0
    29c8:	00001894 	muleq	r0, r4, r8
    29cc:	00a24407 	adceq	r4, r2, r7, lsl #8
    29d0:	10080000 	andne	r0, r8, r0
    29d4:	00001968 	andeq	r1, r0, r8, ror #18
    29d8:	00a24b07 	adceq	r4, r2, r7, lsl #22
    29dc:	100a0000 	andne	r0, sl, r0
    29e0:	0000193b 	andeq	r1, r0, fp, lsr r9
    29e4:	00a24e07 	adceq	r4, r2, r7, lsl #28
    29e8:	000c0000 	andeq	r0, ip, r0
    29ec:	00190603 	andseq	r0, r9, r3, lsl #12
    29f0:	08510700 	ldmdaeq	r1, {r8, r9, sl}^
    29f4:	0f000002 	svceq	0x00000002
    29f8:	9d570708 	ldclls	7, cr0, [r7, #-32]	; 0xffffffe0
    29fc:	10000002 	andne	r0, r0, r2
    2a00:	000019cf 	andeq	r1, r0, pc, asr #19
    2a04:	00a25a07 	adceq	r5, r2, r7, lsl #20
    2a08:	10000000 	andne	r0, r0, r0
    2a0c:	00001aa9 	andeq	r1, r0, r9, lsr #21
    2a10:	00a25d07 	adceq	r5, r2, r7, lsl #26
    2a14:	10020000 	andne	r0, r2, r0
    2a18:	000016f9 	strdeq	r1, [r0], -r9
    2a1c:	00a26007 	adceq	r6, r2, r7
    2a20:	10040000 	andne	r0, r4, r0
    2a24:	000017e8 	andeq	r1, r0, r8, ror #15
    2a28:	00a26307 	adceq	r6, r2, r7, lsl #6
    2a2c:	00060000 	andeq	r0, r6, r0
    2a30:	00178d03 	andseq	r8, r7, r3, lsl #26
    2a34:	64660700 	strbtvs	r0, [r6], #-1792	; 0xfffff900
    2a38:	0f000002 	svceq	0x00000002
    2a3c:	e1300810 	teq	r0, r0, lsl r8
    2a40:	10000002 	andne	r0, r0, r2
    2a44:	000011ca 	andeq	r1, r0, sl, asr #3
    2a48:	00c23208 	sbceq	r3, r2, r8, lsl #4
    2a4c:	10000000 	andne	r0, r0, r0
    2a50:	0000009a 	muleq	r0, sl, r0
    2a54:	00c23308 	sbceq	r3, r2, r8, lsl #6
    2a58:	10040000 	andne	r0, r4, r0
    2a5c:	000005cb 	andeq	r0, r0, fp, asr #11
    2a60:	00c23408 	sbceq	r3, r2, r8, lsl #8
    2a64:	10080000 	andne	r0, r8, r0
    2a68:	00000541 	andeq	r0, r0, r1, asr #10
    2a6c:	00c23508 	sbceq	r3, r2, r8, lsl #10
    2a70:	000c0000 	andeq	r0, ip, r0
    2a74:	000fbd03 	andeq	fp, pc, r3, lsl #26
    2a78:	a8360800 	ldmdage	r6!, {fp}
    2a7c:	11000002 	tstne	r0, r2
    2a80:	0000181d 	andeq	r1, r0, sp, lsl r8
    2a84:	de05ac01 	cdple	12, 0, cr10, cr5, cr1, {0}
    2a88:	4820002f 	stmdami	r0!, {r0, r1, r2, r3, r5}
    2a8c:	01000000 	mrseq	r0, (UNDEF: 0)
    2a90:	00033f9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
    2a94:	19341200 	ldmdbne	r4!, {r9, ip}
    2a98:	ac010000 	stcge	0, cr0, [r1], {-0}
    2a9c:	00033f05 	andeq	r3, r3, r5, lsl #30
    2aa0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2aa4:	001a2612 	andseq	r2, sl, r2, lsl r6
    2aa8:	05ac0100 	streq	r0, [ip, #256]!	; 0x100
    2aac:	000000a2 	andeq	r0, r0, r2, lsr #1
    2ab0:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    2ab4:	00001981 	andeq	r1, r0, r1, lsl #19
    2ab8:	a205ae01 	andge	sl, r5, #1, 28
    2abc:	02000000 	andeq	r0, r0, #0
    2ac0:	b4137691 	ldrlt	r7, [r3], #-1681	; 0xfffff96f
    2ac4:	0100001a 	tsteq	r0, sl, lsl r0
    2ac8:	00a205ae 	adceq	r0, r2, lr, lsr #11
    2acc:	91020000 	mrsls	r0, (UNDEF: 2)
    2ad0:	04140074 	ldreq	r0, [r4], #-116	; 0xffffff8c
    2ad4:	000001fc 	strdeq	r0, [r0], -ip
    2ad8:	00199f15 	andseq	r9, r9, r5, lsl pc
    2adc:	05620100 	strbeq	r0, [r2, #-256]!	; 0xffffff00
    2ae0:	0000010b 	andeq	r0, r0, fp, lsl #2
    2ae4:	20002f14 	andcs	r2, r0, r4, lsl pc
    2ae8:	000000ca 	andeq	r0, r0, sl, asr #1
    2aec:	03ba9c01 			; <UNDEFINED> instruction: 0x03ba9c01
    2af0:	34120000 	ldrcc	r0, [r2], #-0
    2af4:	01000019 	tsteq	r0, r9, lsl r0
    2af8:	033f0562 	teqeq	pc, #411041792	; 0x18800000
    2afc:	91020000 	mrsls	r0, (UNDEF: 2)
    2b00:	1a261264 	bne	987498 <startup-0x1f678b68>
    2b04:	62010000 	andvs	r0, r1, #0
    2b08:	0000a205 	andeq	sl, r0, r5, lsl #4
    2b0c:	62910200 	addsvs	r0, r1, #0, 4
    2b10:	00198113 	andseq	r8, r9, r3, lsl r1
    2b14:	05640100 	strbeq	r0, [r4, #-256]!	; 0xffffff00
    2b18:	000000c2 	andeq	r0, r0, r2, asr #1
    2b1c:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    2b20:	00001ab4 			; <UNDEFINED> instruction: 0x00001ab4
    2b24:	c2056401 	andgt	r6, r5, #16777216	; 0x1000000
    2b28:	02000000 	andeq	r0, r0, #0
    2b2c:	4c137491 	cfldrsmi	mvf7, [r3], {145}	; 0x91
    2b30:	0100001b 	tsteq	r0, fp, lsl r0
    2b34:	00c20564 	sbceq	r0, r2, r4, ror #10
    2b38:	91020000 	mrsls	r0, (UNDEF: 2)
    2b3c:	10441368 	subne	r1, r4, r8, ror #6
    2b40:	65010000 	strvs	r0, [r1, #-0]
    2b44:	00010b05 	andeq	r0, r1, r5, lsl #22
    2b48:	73910200 	orrsvc	r0, r1, #0, 4
    2b4c:	18c21100 	stmiane	r2, {r8, ip}^
    2b50:	40010000 	andmi	r0, r1, r0
    2b54:	002ef205 	eoreq	pc, lr, r5, lsl #4
    2b58:	00002220 	andeq	r2, r0, r0, lsr #4
    2b5c:	ef9c0100 	svc	0x009c0100
    2b60:	12000003 	andne	r0, r0, #3
    2b64:	00001934 	andeq	r1, r0, r4, lsr r9
    2b68:	3f054001 	svccc	0x00054001
    2b6c:	02000003 	andeq	r0, r0, #3
    2b70:	66127491 			; <UNDEFINED> instruction: 0x66127491
    2b74:	01000018 	tsteq	r0, r8, lsl r0
    2b78:	00a20540 	adceq	r0, r2, r0, asr #10
    2b7c:	91020000 	mrsls	r0, (UNDEF: 2)
    2b80:	12150072 	andsne	r0, r5, #114	; 0x72
    2b84:	0100001a 	tsteq	r0, sl, lsl r0
    2b88:	00ff050f 	rscseq	r0, pc, pc, lsl #10
    2b8c:	2eaa0000 	cdpcs	0, 10, cr0, cr10, cr0, {0}
    2b90:	00482000 	subeq	r2, r8, r0
    2b94:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b98:	00000437 	andeq	r0, r0, r7, lsr r4
    2b9c:	00193412 	andseq	r3, r9, r2, lsl r4
    2ba0:	050f0100 	streq	r0, [pc, #-256]	; 2aa8 <startup-0x1fffd558>
    2ba4:	0000033f 	andeq	r0, r0, pc, lsr r3
    2ba8:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    2bac:	00001866 	andeq	r1, r0, r6, ror #16
    2bb0:	a2050f01 	andge	r0, r5, #1, 30
    2bb4:	02000000 	andeq	r0, r0, #0
    2bb8:	44136a91 	ldrmi	r6, [r3], #-2705	; 0xfffff56f
    2bbc:	01000010 	tsteq	r0, r0, lsl r0
    2bc0:	00ff0511 	rscseq	r0, pc, r1, lsl r5	; <UNPREDICTABLE>
    2bc4:	91020000 	mrsls	r0, (UNDEF: 2)
    2bc8:	18110077 	ldmdane	r1, {r0, r1, r2, r4, r5, r6}
    2bcc:	01000019 	tsteq	r0, r9, lsl r0
    2bd0:	2e1004cf 	cdpcs	4, 1, cr0, cr0, cr15, {6}
    2bd4:	009a2000 	addseq	r2, sl, r0
    2bd8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bdc:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    2be0:	00193412 	andseq	r3, r9, r2, lsl r4
    2be4:	04cf0100 	strbeq	r0, [pc], #256	; 2bec <startup-0x1fffd414>
    2be8:	0000033f 	andeq	r0, r0, pc, lsr r3
    2bec:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    2bf0:	00001a26 	andeq	r1, r0, r6, lsr #20
    2bf4:	a204cf01 	andge	ip, r4, #1, 30
    2bf8:	02000000 	andeq	r0, r0, #0
    2bfc:	34126291 	ldrcc	r6, [r2], #-657	; 0xfffffd6f
    2c00:	0100000b 	tsteq	r0, fp
    2c04:	013204cf 	teqeq	r2, pc, asr #9
    2c08:	91020000 	mrsls	r0, (UNDEF: 2)
    2c0c:	1b4c1361 	blne	1307998 <startup-0x1ecf8668>
    2c10:	d1010000 	mrsle	r0, (UNDEF: 1)
    2c14:	0000c204 	andeq	ip, r0, r4, lsl #4
    2c18:	70910200 	addsvc	r0, r1, r0, lsl #4
    2c1c:	00198213 	andseq	r8, r9, r3, lsl r2
    2c20:	04d10100 	ldrbeq	r0, [r1], #256	; 0x100
    2c24:	000000c2 	andeq	r0, r0, r2, asr #1
    2c28:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    2c2c:	00001ab4 			; <UNDEFINED> instruction: 0x00001ab4
    2c30:	c204d101 	andgt	sp, r4, #1073741824	; 0x40000000
    2c34:	02000000 	andeq	r0, r0, #0
    2c38:	b7136891 			; <UNDEFINED> instruction: 0xb7136891
    2c3c:	01000018 	tsteq	r0, r8, lsl r0
    2c40:	00c204d2 	ldrdeq	r0, [r2], #66	; 0x42
    2c44:	91020000 	mrsls	r0, (UNDEF: 2)
    2c48:	db110074 	blle	442e20 <startup-0x1fbbd1e0>
    2c4c:	01000017 	tsteq	r0, r7, lsl r0
    2c50:	2dbe044b 	cfldrscs	mvf0, [lr, #300]!	; 0x12c
    2c54:	00522000 	subseq	r2, r2, r0
    2c58:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c5c:	000004fb 	strdeq	r0, [r0], -fp
    2c60:	00193412 	andseq	r3, r9, r2, lsl r4
    2c64:	044b0100 	strbeq	r0, [fp], #-256	; 0xffffff00
    2c68:	0000033f 	andeq	r0, r0, pc, lsr r3
    2c6c:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2c70:	00001927 	andeq	r1, r0, r7, lsr #18
    2c74:	a2044b01 	andge	r4, r4, #1024	; 0x400
    2c78:	02000000 	andeq	r0, r0, #0
    2c7c:	34127291 	ldrcc	r7, [r2], #-657	; 0xfffffd6f
    2c80:	0100000b 	tsteq	r0, fp
    2c84:	0132044b 	teqeq	r2, fp, asr #8
    2c88:	91020000 	mrsls	r0, (UNDEF: 2)
    2c8c:	db110071 	blle	442e58 <startup-0x1fbbd1a8>
    2c90:	01000019 	tsteq	r0, r9, lsl r0
    2c94:	2d7e041d 	cfldrdcs	mvd0, [lr, #-116]!	; 0xffffff8c
    2c98:	00402000 	subeq	r2, r0, r0
    2c9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ca0:	00000530 	andeq	r0, r0, r0, lsr r5
    2ca4:	00193412 	andseq	r3, r9, r2, lsl r4
    2ca8:	041d0100 	ldreq	r0, [sp], #-256	; 0xffffff00
    2cac:	0000033f 	andeq	r0, r0, pc, lsr r3
    2cb0:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2cb4:	00000b34 	andeq	r0, r0, r4, lsr fp
    2cb8:	32041d01 	andcc	r1, r4, #1, 26	; 0x40
    2cbc:	02000001 	andeq	r0, r0, #1
    2cc0:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2cc4:	000019be 			; <UNDEFINED> instruction: 0x000019be
    2cc8:	46040b01 	strmi	r0, [r4], -r1, lsl #22
    2ccc:	3820002d 	stmdacc	r0!, {r0, r2, r3, r5}
    2cd0:	01000000 	mrseq	r0, (UNDEF: 0)
    2cd4:	0005659c 	muleq	r5, ip, r5
    2cd8:	19341200 	ldmdbne	r4!, {r9, ip}
    2cdc:	0b010000 	bleq	42ce4 <startup-0x1ffbd31c>
    2ce0:	00033f04 	andeq	r3, r3, r4, lsl #30
    2ce4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ce8:	00180512 	andseq	r0, r8, r2, lsl r5
    2cec:	040b0100 	streq	r0, [fp], #-256	; 0xffffff00
    2cf0:	000000a2 	andeq	r0, r0, r2, lsr #1
    2cf4:	00729102 	rsbseq	r9, r2, r2, lsl #2
    2cf8:	0019fb11 	andseq	pc, r9, r1, lsl fp	; <UNPREDICTABLE>
    2cfc:	03c40100 	biceq	r0, r4, #0, 2
    2d00:	20002d06 	andcs	r2, r0, r6, lsl #26
    2d04:	00000040 	andeq	r0, r0, r0, asr #32
    2d08:	059a9c01 	ldreq	r9, [sl, #3073]	; 0xc01
    2d0c:	34120000 	ldrcc	r0, [r2], #-0
    2d10:	01000019 	tsteq	r0, r9, lsl r0
    2d14:	033f03c4 	teqeq	pc, #196, 6	; 0x10000003
    2d18:	91020000 	mrsls	r0, (UNDEF: 2)
    2d1c:	0b341274 	bleq	d076f4 <startup-0x1f2f890c>
    2d20:	c4010000 	strgt	r0, [r1], #-0
    2d24:	00013203 	andeq	r3, r1, r3, lsl #4
    2d28:	73910200 	orrsvc	r0, r1, #0, 4
    2d2c:	19551100 	ldmdbne	r5, {r8, ip}^
    2d30:	ab010000 	blge	42d38 <startup-0x1ffbd2c8>
    2d34:	002cc603 	eoreq	ip, ip, r3, lsl #12
    2d38:	00004020 	andeq	r4, r0, r0, lsr #32
    2d3c:	cf9c0100 	svcgt	0x009c0100
    2d40:	12000005 	andne	r0, r0, #5
    2d44:	00001934 	andeq	r1, r0, r4, lsr r9
    2d48:	3f03ab01 	svccc	0x0003ab01
    2d4c:	02000003 	andeq	r0, r0, #3
    2d50:	34127491 	ldrcc	r7, [r2], #-1169	; 0xfffffb6f
    2d54:	0100000b 	tsteq	r0, fp
    2d58:	013203ab 	teqeq	r2, fp, lsr #7
    2d5c:	91020000 	mrsls	r0, (UNDEF: 2)
    2d60:	e3110073 	tst	r1, #115	; 0x73
    2d64:	01000018 	tsteq	r0, r8, lsl r0
    2d68:	2c880398 	stccs	3, cr0, [r8], {152}	; 0x98
    2d6c:	003e2000 	eorseq	r2, lr, r0
    2d70:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d74:	00000604 	andeq	r0, r0, r4, lsl #12
    2d78:	00193412 	andseq	r3, r9, r2, lsl r4
    2d7c:	03980100 	orrseq	r0, r8, #0, 2
    2d80:	0000033f 	andeq	r0, r0, pc, lsr r3
    2d84:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2d88:	00001835 	andeq	r1, r0, r5, lsr r8
    2d8c:	97039801 	strls	r9, [r3, -r1, lsl #16]
    2d90:	02000000 	andeq	r0, r0, #0
    2d94:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2d98:	00001a74 	andeq	r1, r0, r4, ror sl
    2d9c:	48034401 	stmdami	r3, {r0, sl, lr}
    2da0:	4020002c 	eormi	r0, r0, ip, lsr #32
    2da4:	01000000 	mrseq	r0, (UNDEF: 0)
    2da8:	0006399c 	muleq	r6, ip, r9
    2dac:	19341200 	ldmdbne	r4!, {r9, ip}
    2db0:	44010000 	strmi	r0, [r1], #-0
    2db4:	00033f03 	andeq	r3, r3, r3, lsl #30
    2db8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2dbc:	000b3412 	andeq	r3, fp, r2, lsl r4
    2dc0:	03440100 	movteq	r0, #16640	; 0x4100
    2dc4:	00000132 	andeq	r0, r0, r2, lsr r1
    2dc8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2dcc:	0018f611 	andseq	pc, r8, r1, lsl r6	; <UNPREDICTABLE>
    2dd0:	030f0100 	movweq	r0, #61696	; 0xf100
    2dd4:	20002c28 	andcs	r2, r0, r8, lsr #24
    2dd8:	00000020 	andeq	r0, r0, r0, lsr #32
    2ddc:	065f9c01 	ldrbeq	r9, [pc], -r1, lsl #24
    2de0:	34120000 	ldrcc	r0, [r2], #-0
    2de4:	01000019 	tsteq	r0, r9, lsl r0
    2de8:	033f030f 	teqeq	pc, #1006632960	; 0x3c000000
    2dec:	91020000 	mrsls	r0, (UNDEF: 2)
    2df0:	b1110074 	tstlt	r1, r4, ror r0
    2df4:	01000019 	tsteq	r0, r9, lsl r0
    2df8:	2be002f7 	blcs	ff8039dc <GPIO_Ports+0xdf800844>
    2dfc:	00482000 	subeq	r2, r8, r0
    2e00:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e04:	00000694 	muleq	r0, r4, r6
    2e08:	00193412 	andseq	r3, r9, r2, lsl r4
    2e0c:	02f70100 	rscseq	r0, r7, #0, 2
    2e10:	0000033f 	andeq	r0, r0, pc, lsr r3
    2e14:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2e18:	00000b34 	andeq	r0, r0, r4, lsr fp
    2e1c:	3202f701 	andcc	pc, r2, #262144	; 0x40000
    2e20:	02000001 	andeq	r0, r0, #1
    2e24:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2e28:	00001845 	andeq	r1, r0, r5, asr #16
    2e2c:	a802e501 	stmdage	r2, {r0, r8, sl, sp, lr, pc}
    2e30:	3820002b 	stmdacc	r0!, {r0, r1, r3, r5}
    2e34:	01000000 	mrseq	r0, (UNDEF: 0)
    2e38:	0006c99c 	muleq	r6, ip, r9
    2e3c:	19341200 	ldmdbne	r4!, {r9, ip}
    2e40:	e5010000 	str	r0, [r1, #-0]
    2e44:	00033f02 	andeq	r3, r3, r2, lsl #30
    2e48:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2e4c:	00173f12 	andseq	r3, r7, r2, lsl pc
    2e50:	02e50100 	rsceq	r0, r5, #0, 2
    2e54:	000000a2 	andeq	r0, r0, r2, lsr #1
    2e58:	00729102 	rsbseq	r9, r2, r2, lsl #2
    2e5c:	001a6111 	andseq	r6, sl, r1, lsl r1
    2e60:	02a00100 	adceq	r0, r0, #0, 2
    2e64:	20002b6a 	andcs	r2, r0, sl, ror #22
    2e68:	0000003e 	andeq	r0, r0, lr, lsr r0
    2e6c:	06fe9c01 	ldrbteq	r9, [lr], r1, lsl #24
    2e70:	34120000 	ldrcc	r0, [r2], #-0
    2e74:	01000019 	tsteq	r0, r9, lsl r0
    2e78:	033f02a0 	teqeq	pc, #160, 4
    2e7c:	91020000 	mrsls	r0, (UNDEF: 2)
    2e80:	17bd1274 			; <UNDEFINED> instruction: 0x17bd1274
    2e84:	a0010000 	andge	r0, r1, r0
    2e88:	0000a202 	andeq	sl, r0, r2, lsl #4
    2e8c:	72910200 	addsvc	r0, r1, #0, 4
    2e90:	17091100 	strne	r1, [r9, -r0, lsl #2]
    2e94:	85010000 	strhi	r0, [r1, #-0]
    2e98:	002b2a02 	eoreq	r2, fp, r2, lsl #20
    2e9c:	00004020 	andeq	r4, r0, r0, lsr #32
    2ea0:	339c0100 	orrscc	r0, ip, #0, 2
    2ea4:	12000007 	andne	r0, r0, #7
    2ea8:	00001934 	andeq	r1, r0, r4, lsr r9
    2eac:	3f028501 	svccc	0x00028501
    2eb0:	02000003 	andeq	r0, r0, #3
    2eb4:	34127491 	ldrcc	r7, [r2], #-1169	; 0xfffffb6f
    2eb8:	0100000b 	tsteq	r0, fp
    2ebc:	01320285 	teqeq	r2, r5, lsl #5
    2ec0:	91020000 	mrsls	r0, (UNDEF: 2)
    2ec4:	d2110073 	andsle	r0, r1, #115	; 0x73
    2ec8:	01000018 	tsteq	r0, r8, lsl r0
    2ecc:	2af00271 	bcs	ffc03898 <GPIO_Ports+0xdfc00700>
    2ed0:	003a2000 	eorseq	r2, sl, r0
    2ed4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ed8:	00000768 	andeq	r0, r0, r8, ror #14
    2edc:	00193412 	andseq	r3, r9, r2, lsl r4
    2ee0:	02710100 	rsbseq	r0, r1, #0, 2
    2ee4:	0000033f 	andeq	r0, r0, pc, lsr r3
    2ee8:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2eec:	00001973 	andeq	r1, r0, r3, ror r9
    2ef0:	97027101 	strls	r7, [r2, -r1, lsl #2]
    2ef4:	02000000 	andeq	r0, r0, #0
    2ef8:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
    2efc:	00001b3a 	andeq	r1, r0, sl, lsr fp
    2f00:	a2023d01 	andge	r3, r2, #1, 26	; 0x40
    2f04:	d4000000 	strle	r0, [r0], #-0
    2f08:	1c20002a 	stcne	0, cr0, [r0], #-168	; 0xffffff58
    2f0c:	01000000 	mrseq	r0, (UNDEF: 0)
    2f10:	0007929c 	muleq	r7, ip, r2
    2f14:	19341200 	ldmdbne	r4!, {r9, ip}
    2f18:	3d010000 	stccc	0, cr0, [r1, #-0]
    2f1c:	00033f02 	andeq	r3, r3, r2, lsl #30
    2f20:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2f24:	17ae1100 	strne	r1, [lr, r0, lsl #2]!
    2f28:	2d010000 	stccs	0, cr0, [r1, #-0]
    2f2c:	002ab002 	eoreq	fp, sl, r2
    2f30:	00002420 	andeq	r2, r0, r0, lsr #8
    2f34:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    2f38:	12000007 	andne	r0, r0, #7
    2f3c:	00001934 	andeq	r1, r0, r4, lsr r9
    2f40:	3f022d01 	svccc	0x00022d01
    2f44:	02000003 	andeq	r0, r0, #3
    2f48:	b8127491 	ldmdalt	r2, {r0, r4, r7, sl, ip, sp, lr}
    2f4c:	01000017 	tsteq	r0, r7, lsl r0
    2f50:	00a2022d 	adceq	r0, r2, sp, lsr #4
    2f54:	91020000 	mrsls	r0, (UNDEF: 2)
    2f58:	5a110072 	bpl	443128 <startup-0x1fbbced8>
    2f5c:	01000017 	tsteq	r0, r7, lsl r0
    2f60:	2a6801f4 	bcs	1a03738 <startup-0x1e5fc8c8>
    2f64:	00482000 	subeq	r2, r8, r0
    2f68:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f6c:	000007fc 	strdeq	r0, [r0], -ip
    2f70:	00193412 	andseq	r3, r9, r2, lsl r4
    2f74:	01f40100 	mvnseq	r0, r0, lsl #2
    2f78:	0000033f 	andeq	r0, r0, pc, lsr r3
    2f7c:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2f80:	00000b34 	andeq	r0, r0, r4, lsr fp
    2f84:	3201f401 	andcc	pc, r1, #16777216	; 0x1000000
    2f88:	02000001 	andeq	r0, r0, #1
    2f8c:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2f90:	00001988 	andeq	r1, r0, r8, lsl #19
    2f94:	2201da01 	andcs	sp, r1, #4096	; 0x1000
    2f98:	4620002a 	strtmi	r0, [r0], -sl, lsr #32
    2f9c:	01000000 	mrseq	r0, (UNDEF: 0)
    2fa0:	0008319c 	muleq	r8, ip, r1
    2fa4:	19341200 	ldmdbne	r4!, {r9, ip}
    2fa8:	da010000 	ble	42fb0 <startup-0x1ffbd050>
    2fac:	00033f01 	andeq	r3, r3, r1, lsl #30
    2fb0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2fb4:	000b3412 	andeq	r3, fp, r2, lsl r4
    2fb8:	01da0100 	bicseq	r0, sl, r0, lsl #2
    2fbc:	00000132 	andeq	r0, r0, r2, lsr r1
    2fc0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2fc4:	00172111 	andseq	r2, r7, r1, lsl r1
    2fc8:	01c50100 	biceq	r0, r5, r0, lsl #2
    2fcc:	200029e8 	andcs	r2, r0, r8, ror #19
    2fd0:	0000003a 	andeq	r0, r0, sl, lsr r0
    2fd4:	08669c01 	stmdaeq	r6!, {r0, sl, fp, ip, pc}^
    2fd8:	34120000 	ldrcc	r0, [r2], #-0
    2fdc:	01000019 	tsteq	r0, r9, lsl r0
    2fe0:	033f01c5 	teqeq	pc, #1073741873	; 0x40000031
    2fe4:	91020000 	mrsls	r0, (UNDEF: 2)
    2fe8:	1a991274 	bne	fe6479c0 <GPIO_Ports+0xde644828>
    2fec:	c5010000 	strgt	r0, [r1, #-0]
    2ff0:	00009701 	andeq	r9, r0, r1, lsl #14
    2ff4:	73910200 	orrsvc	r0, r1, #0, 4
    2ff8:	17a41100 	strne	r1, [r4, r0, lsl #2]!
    2ffc:	ab010000 	blge	43004 <startup-0x1ffbcffc>
    3000:	0029a001 	eoreq	sl, r9, r1
    3004:	00004820 	andeq	r4, r0, r0, lsr #16
    3008:	9b9c0100 	blls	fe703410 <GPIO_Ports+0xde700278>
    300c:	12000008 	andne	r0, r0, #8
    3010:	00001934 	andeq	r1, r0, r4, lsr r9
    3014:	3f01ab01 	svccc	0x0001ab01
    3018:	02000003 	andeq	r0, r0, #3
    301c:	34127491 	ldrcc	r7, [r2], #-1169	; 0xfffffb6f
    3020:	0100000b 	tsteq	r0, fp
    3024:	013201ab 	teqeq	r2, fp, lsr #3
    3028:	91020000 	mrsls	r0, (UNDEF: 2)
    302c:	a1110073 	tstge	r1, r3, ror r0
    3030:	01000018 	tsteq	r0, r8, lsl r0
    3034:	2978019a 	ldmdbcs	r8!, {r1, r3, r4, r7, r8}^
    3038:	00282000 	eoreq	r2, r8, r0
    303c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3040:	000008c1 	andeq	r0, r0, r1, asr #17
    3044:	00187e12 	andseq	r7, r8, r2, lsl lr
    3048:	019a0100 	orrseq	r0, sl, r0, lsl #2
    304c:	000008c1 	andeq	r0, r0, r1, asr #17
    3050:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3054:	029d0414 	addseq	r0, sp, #20, 8	; 0x14000000
    3058:	51110000 	tstpl	r1, r0
    305c:	0100001a 	tsteq	r0, sl, lsl r0
    3060:	2922017b 	stmdbcs	r2!, {r0, r1, r3, r4, r5, r6, r8}
    3064:	00562000 	subseq	r2, r6, r0
    3068:	9c010000 	stcls	0, cr0, [r1], {-0}
    306c:	0000090b 	andeq	r0, r0, fp, lsl #18
    3070:	00193412 	andseq	r3, r9, r2, lsl r4
    3074:	017b0100 	cmneq	fp, r0, lsl #2
    3078:	0000033f 	andeq	r0, r0, pc, lsr r3
    307c:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    3080:	0000187e 	andeq	r1, r0, lr, ror r8
    3084:	c1017b01 	tstgt	r1, r1, lsl #22
    3088:	02000008 	andeq	r0, r0, #8
    308c:	9c136891 	ldcls	8, cr6, [r3], {145}	; 0x91
    3090:	0100000e 	tsteq	r0, lr
    3094:	00c2017d 	sbceq	r0, r2, sp, ror r1
    3098:	91020000 	mrsls	r0, (UNDEF: 2)
    309c:	88110074 	ldmdahi	r1, {r2, r4, r5, r6}
    30a0:	0100001a 	tsteq	r0, sl, lsl r0
    30a4:	28ec0167 	stmiacs	ip!, {r0, r1, r2, r5, r6, r8}^
    30a8:	00362000 	eorseq	r2, r6, r0
    30ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    30b0:	00000931 	andeq	r0, r0, r1, lsr r9
    30b4:	001a2f12 	andseq	r2, sl, r2, lsl pc
    30b8:	01670100 	cmneq	r7, r0, lsl #2
    30bc:	00000931 	andeq	r0, r0, r1, lsr r9
    30c0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    30c4:	02590414 	subseq	r0, r9, #20, 8	; 0x14000000
    30c8:	34160000 	ldrcc	r0, [r6], #-0
    30cc:	01000017 	tsteq	r0, r7, lsl r0
    30d0:	002758f6 	strdeq	r5, [r7], -r6	; <UNPREDICTABLE>
    30d4:	00019420 	andeq	r9, r1, r0, lsr #8
    30d8:	af9c0100 	svcge	0x009c0100
    30dc:	17000009 	strne	r0, [r0, -r9]
    30e0:	00001934 	andeq	r1, r0, r4, lsr r9
    30e4:	033ff601 	teqeq	pc, #1048576	; 0x100000	; <UNPREDICTABLE>
    30e8:	91020000 	mrsls	r0, (UNDEF: 2)
    30ec:	1a2f1754 	bne	bc8e44 <startup-0x1f4371bc>
    30f0:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    30f4:	00000931 	andeq	r0, r0, r1, lsr r9
    30f8:	18509102 	ldmdane	r0, {r1, r8, ip, pc}^
    30fc:	00000e9c 	muleq	r0, ip, lr
    3100:	00c2f801 	sbceq	pc, r2, r1, lsl #16
    3104:	91020000 	mrsls	r0, (UNDEF: 2)
    3108:	18141874 	ldmdane	r4, {r2, r4, r5, r6, fp, ip}
    310c:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    3110:	000000c2 	andeq	r0, r0, r2, asr #1
    3114:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
    3118:	000016ea 	andeq	r1, r0, sl, ror #13
    311c:	00c2f901 	sbceq	pc, r2, r1, lsl #18
    3120:	91020000 	mrsls	r0, (UNDEF: 2)
    3124:	19e9186c 	stmibne	r9!, {r2, r3, r5, r6, fp, ip}^
    3128:	fa010000 	blx	43130 <startup-0x1ffbced0>
    312c:	000000c2 	andeq	r0, r0, r2, asr #1
    3130:	18689102 	stmdane	r8!, {r1, r8, ip, pc}^
    3134:	00001a40 	andeq	r1, r0, r0, asr #20
    3138:	02e1fb01 	rsceq	pc, r1, #1024	; 0x400
    313c:	91020000 	mrsls	r0, (UNDEF: 2)
    3140:	71190058 	tstvc	r9, r8, asr r0
    3144:	01000018 	tsteq	r0, r8, lsl r0
    3148:	002628bb 	strhteq	r2, [r6], -fp
    314c:	00013020 	andeq	r3, r1, r0, lsr #32
    3150:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    3154:	00001934 	andeq	r1, r0, r4, lsr r9
    3158:	033fbb01 	teqeq	pc, #1024	; 0x400
    315c:	91020000 	mrsls	r0, (UNDEF: 2)
    3160:	Address 0x00003160 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030104 	adfeqs	f0, f3, f4
  18:	0b0b0b3e 	bleq	2c2d18 <startup-0x1fd3d2e8>
  1c:	0b3a1349 	bleq	e84d48 <startup-0x1f17b2b8>
  20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
  28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  2c:	0400000d 	streq	r0, [r0], #-13
  30:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  34:	00000b1c 	andeq	r0, r0, ip, lsl fp
  38:	0b002405 	bleq	9054 <startup-0x1fff6fac>
  3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  40:	0600000e 	streq	r0, [r0], -lr
  44:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  4c:	00001349 	andeq	r1, r0, r9, asr #6
  50:	03001607 	movweq	r1, #1543	; 0x607
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0013490b 	andseq	r4, r3, fp, lsl #18
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	13490026 	movtne	r0, #36902	; 0x9026
  74:	130b0000 	movwne	r0, #45056	; 0xb000
  78:	3a050b01 	bcc	142c84 <startup-0x1febd37c>
  7c:	01053b0b 	tsteq	r5, fp, lsl #22
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  8c:	0b381349 	bleq	e04db8 <startup-0x1f1fb248>
  90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
  94:	3a0e0300 	bcc	380c9c <startup-0x1fc7f364>
  98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  9c:	00053813 	andeq	r3, r5, r3, lsl r8
  a0:	000d0e00 	andeq	r0, sp, r0, lsl #28
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	1349053b 	movtne	r0, #38203	; 0x953b
  ac:	00000538 	andeq	r0, r0, r8, lsr r5
  b0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
  b4:	00130113 	andseq	r0, r3, r3, lsl r1
  b8:	00211000 	eoreq	r1, r1, r0
  bc:	0b2f1349 	bleq	bc4de8 <startup-0x1f43b218>
  c0:	21110000 	tstcs	r1, r0
  c4:	2f134900 	svccs	0x00134900
  c8:	12000005 	andne	r0, r0, #5
  cc:	0b0b0113 	bleq	2c0520 <startup-0x1fd3fae0>
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	03000d13 	movweq	r0, #3347	; 0xd13
  dc:	3b0b3a08 	blcc	2ce904 <startup-0x1fd316fc>
  e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  e4:	1400000b 	strne	r0, [r0], #-11
  e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f4:	0000193c 	andeq	r1, r0, ip, lsr r9
  f8:	03003415 	movweq	r3, #1045	; 0x415
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	3f13490b 	svccc	0x0013490b
 104:	00193c19 	andseq	r3, r9, r9, lsl ip
 108:	01041600 	tsteq	r4, r0, lsl #12
 10c:	0b0b0b3e 	bleq	2c2e0c <startup-0x1fd3d1f4>
 110:	0b3a1349 	bleq	e84e3c <startup-0x1f17b1c4>
 114:	1301053b 	movwne	r0, #5435	; 0x153b
 118:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
 11c:	1c080300 	stcne	3, cr0, [r8], {-0}
 120:	1800000b 	stmdane	r0, {r0, r1, r3}
 124:	0b0b0113 	bleq	2c0578 <startup-0x1fd3fa88>
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	00001301 	andeq	r1, r0, r1, lsl #6
 130:	03000d19 	movweq	r0, #3353	; 0xd19
 134:	3b0b3a0e 	blcc	2ce974 <startup-0x1fd3168c>
 138:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 13c:	1a00000b 	bne	170 <startup-0x1ffffe90>
 140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 14c:	041b0000 	ldreq	r0, [fp], #-0
 150:	0b0b3e01 	bleq	2cf95c <startup-0x1fd306a4>
 154:	3a13490b 	bcc	4d2588 <startup-0x1fb2da78>
 158:	010b3b0b 	tsteq	fp, fp, lsl #22
 15c:	1c000013 	stcne	0, cr0, [r0], {19}
 160:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 164:	0b3a0b0b 	bleq	e82d98 <startup-0x1f17d268>
 168:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 16c:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
 170:	3a080300 	bcc	200d78 <startup-0x1fdff288>
 174:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 178:	000b3813 	andeq	r3, fp, r3, lsl r8
 17c:	000f1e00 	andeq	r1, pc, r0, lsl #28
 180:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 184:	341f0000 	ldrcc	r0, [pc], #-0	; 18c <startup-0x1ffffe74>
 188:	3a0e0300 	bcc	380d90 <startup-0x1fc7f270>
 18c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 190:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 194:	20000018 	andcs	r0, r0, r8, lsl r0
 198:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 19c:	0b3a0e03 	bleq	e839b0 <startup-0x1f17c650>
 1a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1ac:	00130119 	andseq	r0, r3, r9, lsl r1
 1b0:	010b2100 	mrseq	r2, (UNDEF: 27)
 1b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1b8:	00001301 	andeq	r1, r0, r1, lsl #6
 1bc:	03003422 	movweq	r3, #1058	; 0x422
 1c0:	3b0b3a08 	blcc	2ce9e8 <startup-0x1fd31618>
 1c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1c8:	23000018 	movwcs	r0, #24
 1cc:	0111010b 	tsteq	r1, fp, lsl #2
 1d0:	00000612 	andeq	r0, r0, r2, lsl r6
 1d4:	49002124 	stmdbmi	r0, {r2, r5, r8, sp}
 1d8:	00182f13 	andseq	r2, r8, r3, lsl pc
 1dc:	012e2500 			; <UNDEFINED> instruction: 0x012e2500
 1e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e4:	0b3b0b3a 	bleq	ec2ed4 <startup-0x1f13d12c>
 1e8:	01111927 	tsteq	r1, r7, lsr #18
 1ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1f0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1f4:	26000013 			; <UNDEFINED> instruction: 0x26000013
 1f8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 1fc:	0b3b0b3a 	bleq	ec2eec <startup-0x1f13d114>
 200:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 204:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
 208:	03193f00 	tsteq	r9, #0, 30
 20c:	3b0b3a0e 	blcc	2cea4c <startup-0x1fd315b4>
 210:	1119270b 	tstne	r9, fp, lsl #14
 214:	40061201 	andmi	r1, r6, r1, lsl #4
 218:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 21c:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
 220:	03193f01 	tsteq	r9, #1, 30
 224:	3b0b3a0e 	blcc	2cea64 <startup-0x1fd3159c>
 228:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 22c:	96184006 	ldrls	r4, [r8], -r6
 230:	13011942 	movwne	r1, #6466	; 0x1942
 234:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
 238:	03193f01 	tsteq	r9, #1, 30
 23c:	3b0b3a0e 	blcc	2cea7c <startup-0x1fd31584>
 240:	11192705 	tstne	r9, r5, lsl #14
 244:	40061201 	andmi	r1, r6, r1, lsl #4
 248:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 24c:	00001301 	andeq	r1, r0, r1, lsl #6
 250:	0300052a 	movweq	r0, #1322	; 0x52a
 254:	3b0b3a0e 	blcc	2cea94 <startup-0x1fd3156c>
 258:	02134905 	andseq	r4, r3, #81920	; 0x14000
 25c:	2b000018 	blcs	2c4 <startup-0x1ffffd3c>
 260:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 264:	0b3a0e03 	bleq	e83a78 <startup-0x1f17c588>
 268:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 26c:	01111349 	tsteq	r1, r9, asr #6
 270:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 274:	01194297 			; <UNDEFINED> instruction: 0x01194297
 278:	2c000013 	stccs	0, cr0, [r0], {19}
 27c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 280:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 284:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 288:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
 28c:	03193f00 	tsteq	r9, #0, 30
 290:	3b0b3a0e 	blcc	2cead0 <startup-0x1fd31530>
 294:	11192705 	tstne	r9, r5, lsl #14
 298:	40061201 	andmi	r1, r6, r1, lsl #4
 29c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2a0:	342e0000 	strtcc	r0, [lr], #-0
 2a4:	3a080300 	bcc	200eac <startup-0x1fdff154>
 2a8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 2ac:	00180213 	andseq	r0, r8, r3, lsl r2
 2b0:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
 2b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2bc:	01111927 	tsteq	r1, r7, lsr #18
 2c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2c8:	30000013 	andcc	r0, r0, r3, lsl r0
 2cc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2d0:	0b3a0e03 	bleq	e83ae4 <startup-0x1f17c51c>
 2d4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 2d8:	01111349 	tsteq	r1, r9, asr #6
 2dc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2e0:	00194297 	mulseq	r9, r7, r2
 2e4:	012e3100 			; <UNDEFINED> instruction: 0x012e3100
 2e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2f0:	13491927 	movtne	r1, #39207	; 0x9927
 2f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2fc:	00130119 	andseq	r0, r3, r9, lsl r1
 300:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
 304:	0b3a0e03 	bleq	e83b18 <startup-0x1f17c4e8>
 308:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 30c:	01111349 	tsteq	r1, r9, asr #6
 310:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 314:	01194296 			; <UNDEFINED> instruction: 0x01194296
 318:	33000013 	movwcc	r0, #19
 31c:	0e03012e 	adfeqsp	f0, f3, #0.5
 320:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 324:	01111927 	tsteq	r1, r7, lsr #18
 328:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 32c:	00194297 	mulseq	r9, r7, r2
 330:	11010000 	mrsne	r0, (UNDEF: 1)
 334:	130e2501 	movwne	r2, #58625	; 0xe501
 338:	1b0e030b 	blne	380f6c <startup-0x1fc7f094>
 33c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 340:	00171006 	andseq	r1, r7, r6
 344:	00240200 	eoreq	r0, r4, r0, lsl #4
 348:	0b3e0b0b 	bleq	f82f7c <startup-0x1f07d084>
 34c:	00000e03 	andeq	r0, r0, r3, lsl #28
 350:	03001603 	movweq	r1, #1539	; 0x603
 354:	3b0b3a0e 	blcc	2ceb94 <startup-0x1fd3146c>
 358:	0013490b 	andseq	r4, r3, fp, lsl #18
 35c:	00240400 	eoreq	r0, r4, r0, lsl #8
 360:	0b3e0b0b 	bleq	f82f94 <startup-0x1f07d06c>
 364:	00000803 	andeq	r0, r0, r3, lsl #16
 368:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 36c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 370:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 374:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 378:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 37c:	0000193c 	andeq	r1, r0, ip, lsr r9
 380:	03003407 	movweq	r3, #1031	; 0x407
 384:	3b0b3a0e 	blcc	2cebc4 <startup-0x1fd3143c>
 388:	3f13490b 	svccc	0x0013490b
 38c:	00193c19 	andseq	r3, r9, r9, lsl ip
 390:	01040800 	tsteq	r4, r0, lsl #16
 394:	0b0b0b3e 	bleq	2c3094 <startup-0x1fd3cf6c>
 398:	0b3a1349 	bleq	e850c4 <startup-0x1f17af3c>
 39c:	1301053b 	movwne	r0, #5435	; 0x153b
 3a0:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 3a4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 3a8:	0a00000b 	beq	3dc <startup-0x1ffffc24>
 3ac:	0b0b0113 	bleq	2c0800 <startup-0x1fd3f800>
 3b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3b4:	00001301 	andeq	r1, r0, r1, lsl #6
 3b8:	03000d0b 	movweq	r0, #3339	; 0xd0b
 3bc:	3b0b3a0e 	blcc	2cebfc <startup-0x1fd31404>
 3c0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 3c4:	0c00000b 	stceq	0, cr0, [r0], {11}
 3c8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 3cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3d0:	0b381349 	bleq	e050fc <startup-0x1f1faf04>
 3d4:	010d0000 	mrseq	r0, (UNDEF: 13)
 3d8:	01134901 	tsteq	r3, r1, lsl #18
 3dc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 3e0:	13490021 	movtne	r0, #36897	; 0x9021
 3e4:	00000b2f 	andeq	r0, r0, pc, lsr #22
 3e8:	0300160f 	movweq	r1, #1551	; 0x60f
 3ec:	3b0b3a0e 	blcc	2cec2c <startup-0x1fd313d4>
 3f0:	00134905 	andseq	r4, r3, r5, lsl #18
 3f4:	01041000 	mrseq	r1, (UNDEF: 4)
 3f8:	0b0b0b3e 	bleq	2c30f8 <startup-0x1fd3cf08>
 3fc:	0b3a1349 	bleq	e85128 <startup-0x1f17aed8>
 400:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 404:	13110000 	tstne	r1, #0
 408:	3a0b0b01 	bcc	2c3014 <startup-0x1fd3cfec>
 40c:	010b3b0b 	tsteq	fp, fp, lsl #22
 410:	12000013 	andne	r0, r0, #19
 414:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 418:	0b3b0b3a 	bleq	ec3108 <startup-0x1f13cef8>
 41c:	0b381349 	bleq	e05148 <startup-0x1f1faeb8>
 420:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 424:	03193f01 	tsteq	r9, #1, 30
 428:	3b0b3a0e 	blcc	2cec68 <startup-0x1fd31398>
 42c:	11192705 	tstne	r9, r5, lsl #14
 430:	40061201 	andmi	r1, r6, r1, lsl #4
 434:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 438:	00001301 	andeq	r1, r0, r1, lsl #6
 43c:	03000514 	movweq	r0, #1300	; 0x514
 440:	3b0b3a0e 	blcc	2cec80 <startup-0x1fd31380>
 444:	02134905 	andseq	r4, r3, #81920	; 0x14000
 448:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 44c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 450:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 454:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 458:	0f160000 	svceq	0x00160000
 45c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 460:	17000013 	smladne	r0, r3, r0, r0
 464:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 468:	0b3a0e03 	bleq	e83c7c <startup-0x1f17c384>
 46c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 470:	01111349 	tsteq	r1, r9, asr #6
 474:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 478:	01194297 			; <UNDEFINED> instruction: 0x01194297
 47c:	18000013 	stmdane	r0, {r0, r1, r4}
 480:	08030034 	stmdaeq	r3, {r2, r4, r5}
 484:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 488:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 48c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 490:	03193f01 	tsteq	r9, #1, 30
 494:	3b0b3a0e 	blcc	2cecd4 <startup-0x1fd3132c>
 498:	1119270b 	tstne	r9, fp, lsl #14
 49c:	40061201 	andmi	r1, r6, r1, lsl #4
 4a0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4a4:	00001301 	andeq	r1, r0, r1, lsl #6
 4a8:	0300051a 	movweq	r0, #1306	; 0x51a
 4ac:	3b0b3a0e 	blcc	2cecec <startup-0x1fd31314>
 4b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4b4:	1b000018 	blne	51c <startup-0x1ffffae4>
 4b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 4bc:	0b3b0b3a 	bleq	ec31ac <startup-0x1f13ce54>
 4c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4c4:	341c0000 	ldrcc	r0, [ip], #-0
 4c8:	3a080300 	bcc	2010d0 <startup-0x1fdfef30>
 4cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4d0:	00180213 	andseq	r0, r8, r3, lsl r2
 4d4:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
 4d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4dc:	0b3b0b3a 	bleq	ec31cc <startup-0x1f13ce34>
 4e0:	01111927 	tsteq	r1, r7, lsr #18
 4e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4e8:	00194296 	mulseq	r9, r6, r2
 4ec:	11010000 	mrsne	r0, (UNDEF: 1)
 4f0:	130e2501 	movwne	r2, #58625	; 0xe501
 4f4:	1b0e030b 	blne	381128 <startup-0x1fc7eed8>
 4f8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 4fc:	00171006 	andseq	r1, r7, r6
 500:	00240200 	eoreq	r0, r4, r0, lsl #4
 504:	0b3e0b0b 	bleq	f83138 <startup-0x1f07cec8>
 508:	00000e03 	andeq	r0, r0, r3, lsl #28
 50c:	03001603 	movweq	r1, #1539	; 0x603
 510:	3b0b3a0e 	blcc	2ced50 <startup-0x1fd312b0>
 514:	0013490b 	andseq	r4, r3, fp, lsl #18
 518:	00240400 	eoreq	r0, r4, r0, lsl #8
 51c:	0b3e0b0b 	bleq	f83150 <startup-0x1f07ceb0>
 520:	00000803 	andeq	r0, r0, r3, lsl #16
 524:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 528:	06000013 			; <UNDEFINED> instruction: 0x06000013
 52c:	13490026 	movtne	r0, #36902	; 0x9026
 530:	13070000 	movwne	r0, #28672	; 0x7000
 534:	3a050b01 	bcc	143140 <startup-0x1febcec0>
 538:	01053b0b 	tsteq	r5, fp, lsl #22
 53c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 540:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 544:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 548:	0b381349 	bleq	e05274 <startup-0x1f1fad8c>
 54c:	0d090000 	stceq	0, cr0, [r9, #-0]
 550:	3a0e0300 	bcc	381158 <startup-0x1fc7eea8>
 554:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 558:	00053813 	andeq	r3, r5, r3, lsl r8
 55c:	000d0a00 	andeq	r0, sp, r0, lsl #20
 560:	0b3a0803 	bleq	e82574 <startup-0x1f17da8c>
 564:	1349053b 	movtne	r0, #38203	; 0x953b
 568:	00000538 	andeq	r0, r0, r8, lsr r5
 56c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 570:	00130113 	andseq	r0, r3, r3, lsl r1
 574:	00210c00 	eoreq	r0, r1, r0, lsl #24
 578:	0b2f1349 	bleq	bc52a4 <startup-0x1f43ad5c>
 57c:	210d0000 	mrscs	r0, (UNDEF: 13)
 580:	2f134900 	svccs	0x00134900
 584:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
 588:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 58c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 590:	00001349 	andeq	r1, r0, r9, asr #6
 594:	0b01130f 	bleq	451d8 <startup-0x1ffbae28>
 598:	3b0b3a0b 	blcc	2cedcc <startup-0x1fd31234>
 59c:	00130105 	andseq	r0, r3, r5, lsl #2
 5a0:	000d1000 	andeq	r1, sp, r0
 5a4:	0b3a0803 	bleq	e825b8 <startup-0x1f17da48>
 5a8:	1349053b 	movtne	r0, #38203	; 0x953b
 5ac:	00000b38 	andeq	r0, r0, r8, lsr fp
 5b0:	03003411 	movweq	r3, #1041	; 0x411
 5b4:	3b0b3a0e 	blcc	2cedf4 <startup-0x1fd3120c>
 5b8:	3f134905 	svccc	0x00134905
 5bc:	00193c19 	andseq	r3, r9, r9, lsl ip
 5c0:	00341200 	eorseq	r1, r4, r0, lsl #4
 5c4:	0b3a0e03 	bleq	e83dd8 <startup-0x1f17c228>
 5c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5cc:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 5d0:	04130000 	ldreq	r0, [r3], #-0
 5d4:	0b0b3e01 	bleq	2cfde0 <startup-0x1fd30220>
 5d8:	3a13490b 	bcc	4d2a0c <startup-0x1fb2d5f4>
 5dc:	01053b0b 	tsteq	r5, fp, lsl #22
 5e0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 5e4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 5e8:	00000b1c 	andeq	r0, r0, ip, lsl fp
 5ec:	0b011315 	bleq	45248 <startup-0x1ffbadb8>
 5f0:	3b0b3a0b 	blcc	2cee24 <startup-0x1fd311dc>
 5f4:	0013010b 	andseq	r0, r3, fp, lsl #2
 5f8:	000d1600 	andeq	r1, sp, r0, lsl #12
 5fc:	0b3a0e03 	bleq	e83e10 <startup-0x1f17c1f0>
 600:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 604:	00000b38 	andeq	r0, r0, r8, lsr fp
 608:	3f012e17 	svccc	0x00012e17
 60c:	3a0e0319 	bcc	381278 <startup-0x1fc7ed88>
 610:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 614:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 618:	97184006 	ldrls	r4, [r8, -r6]
 61c:	13011942 	movwne	r1, #6466	; 0x1942
 620:	05180000 	ldreq	r0, [r8, #-0]
 624:	3a0e0300 	bcc	38122c <startup-0x1fc7edd4>
 628:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 62c:	00180213 	andseq	r0, r8, r3, lsl r2
 630:	00341900 	eorseq	r1, r4, r0, lsl #18
 634:	0b3a0e03 	bleq	e83e48 <startup-0x1f17c1b8>
 638:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 63c:	00001802 	andeq	r1, r0, r2, lsl #16
 640:	0b000f1a 	bleq	42b0 <startup-0x1fffbd50>
 644:	0013490b 	andseq	r4, r3, fp, lsl #18
 648:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 64c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 650:	0b3b0b3a 	bleq	ec3340 <startup-0x1f13ccc0>
 654:	01111927 	tsteq	r1, r7, lsr #18
 658:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 65c:	00194297 	mulseq	r9, r7, r2
 660:	11010000 	mrsne	r0, (UNDEF: 1)
 664:	130e2501 	movwne	r2, #58625	; 0xe501
 668:	1b0e030b 	blne	38129c <startup-0x1fc7ed64>
 66c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 670:	00171006 	andseq	r1, r7, r6
 674:	00240200 	eoreq	r0, r4, r0, lsl #4
 678:	0b3e0b0b 	bleq	f832ac <startup-0x1f07cd54>
 67c:	00000e03 	andeq	r0, r0, r3, lsl #28
 680:	03001603 	movweq	r1, #1539	; 0x603
 684:	3b0b3a0e 	blcc	2ceec4 <startup-0x1fd3113c>
 688:	0013490b 	andseq	r4, r3, fp, lsl #18
 68c:	00240400 	eoreq	r0, r4, r0, lsl #8
 690:	0b3e0b0b 	bleq	f832c4 <startup-0x1f07cd3c>
 694:	00000803 	andeq	r0, r0, r3, lsl #16
 698:	0b011305 	bleq	452b4 <startup-0x1ffbad4c>
 69c:	3b0b3a0b 	blcc	2ceed0 <startup-0x1fd31130>
 6a0:	0013010b 	andseq	r0, r3, fp, lsl #2
 6a4:	000d0600 	andeq	r0, sp, r0, lsl #12
 6a8:	0b3a0e03 	bleq	e83ebc <startup-0x1f17c144>
 6ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6b0:	00000b38 	andeq	r0, r0, r8, lsr fp
 6b4:	03000d07 	movweq	r0, #3335	; 0xd07
 6b8:	3b0b3a08 	blcc	2ceee0 <startup-0x1fd31120>
 6bc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 6c0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 6c4:	13490101 	movtne	r0, #37121	; 0x9101
 6c8:	00001301 	andeq	r1, r0, r1, lsl #6
 6cc:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 6d0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 6d4:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
 6d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6dc:	0b3b0b3a 	bleq	ec33cc <startup-0x1f13cc34>
 6e0:	13491927 	movtne	r1, #39207	; 0x9927
 6e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 6ec:	00130119 	andseq	r0, r3, r9, lsl r1
 6f0:	00050b00 	andeq	r0, r5, r0, lsl #22
 6f4:	0b3a0e03 	bleq	e83f08 <startup-0x1f17c0f8>
 6f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6fc:	00001802 	andeq	r1, r0, r2, lsl #16
 700:	0b000f0c 	bleq	4338 <startup-0x1fffbcc8>
 704:	0013490b 	andseq	r4, r3, fp, lsl #18
 708:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 70c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 710:	0b3b0b3a 	bleq	ec3400 <startup-0x1f13cc00>
 714:	01111927 	tsteq	r1, r7, lsr #18
 718:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 71c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 720:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 724:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 728:	0b3b0b3a 	bleq	ec3418 <startup-0x1f13cbe8>
 72c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 730:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 734:	03193f01 	tsteq	r9, #1, 30
 738:	3b0b3a0e 	blcc	2cef78 <startup-0x1fd31088>
 73c:	1119270b 	tstne	r9, fp, lsl #14
 740:	40061201 	andmi	r1, r6, r1, lsl #4
 744:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 748:	01000000 	mrseq	r0, (UNDEF: 0)
 74c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 750:	0e030b13 	vmoveq.32	d3[0], r0
 754:	01110e1b 	tsteq	r1, fp, lsl lr
 758:	17100612 			; <UNDEFINED> instruction: 0x17100612
 75c:	24020000 	strcs	r0, [r2], #-0
 760:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 764:	000e030b 	andeq	r0, lr, fp, lsl #6
 768:	00160300 	andseq	r0, r6, r0, lsl #6
 76c:	0b3a0e03 	bleq	e83f80 <startup-0x1f17c080>
 770:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 774:	24040000 	strcs	r0, [r4], #-0
 778:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 77c:	0008030b 	andeq	r0, r8, fp, lsl #6
 780:	00350500 	eorseq	r0, r5, r0, lsl #10
 784:	00001349 	andeq	r1, r0, r9, asr #6
 788:	03003406 	movweq	r3, #1030	; 0x406
 78c:	3b0b3a0e 	blcc	2cefcc <startup-0x1fd31034>
 790:	3f134905 	svccc	0x00134905
 794:	00193c19 	andseq	r3, r9, r9, lsl ip
 798:	00340700 	eorseq	r0, r4, r0, lsl #14
 79c:	0b3a0e03 	bleq	e83fb0 <startup-0x1f17c050>
 7a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7a4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 7a8:	04080000 	streq	r0, [r8], #-0
 7ac:	0b0b3e01 	bleq	2cffb8 <startup-0x1fd30048>
 7b0:	3a13490b 	bcc	4d2be4 <startup-0x1fb2d41c>
 7b4:	01053b0b 	tsteq	r5, fp, lsl #22
 7b8:	09000013 	stmdbeq	r0, {r0, r1, r4}
 7bc:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 7c0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 7c4:	0300280a 	movweq	r2, #2058	; 0x80a
 7c8:	000b1c08 	andeq	r1, fp, r8, lsl #24
 7cc:	00160b00 	andseq	r0, r6, r0, lsl #22
 7d0:	0b3a0e03 	bleq	e83fe4 <startup-0x1f17c01c>
 7d4:	1349053b 	movtne	r0, #38203	; 0x953b
 7d8:	130c0000 	movwne	r0, #49152	; 0xc000
 7dc:	3a0b0b01 	bcc	2c33e8 <startup-0x1fd3cc18>
 7e0:	01053b0b 	tsteq	r5, fp, lsl #22
 7e4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 7e8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 7ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 7f0:	0b381349 	bleq	e0551c <startup-0x1f1faae4>
 7f4:	0d0e0000 	stceq	0, cr0, [lr, #-0]
 7f8:	3a0e0300 	bcc	381400 <startup-0x1fc7ec00>
 7fc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 800:	000b3813 	andeq	r3, fp, r3, lsl r8
 804:	01130f00 	tsteq	r3, r0, lsl #30
 808:	0b3a0b0b 	bleq	e8343c <startup-0x1f17cbc4>
 80c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 810:	0d100000 	ldceq	0, cr0, [r0, #-0]
 814:	3a0e0300 	bcc	38141c <startup-0x1fc7ebe4>
 818:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 81c:	000b3813 	andeq	r3, fp, r3, lsl r8
 820:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 824:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 828:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 82c:	01111927 	tsteq	r1, r7, lsr #18
 830:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 834:	01194297 			; <UNDEFINED> instruction: 0x01194297
 838:	12000013 	andne	r0, r0, #19
 83c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 840:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 844:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 848:	34130000 	ldrcc	r0, [r3], #-0
 84c:	3a0e0300 	bcc	381454 <startup-0x1fc7ebac>
 850:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 854:	00180213 	andseq	r0, r8, r3, lsl r2
 858:	000f1400 	andeq	r1, pc, r0, lsl #8
 85c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 860:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 864:	03193f01 	tsteq	r9, #1, 30
 868:	3b0b3a0e 	blcc	2cf0a8 <startup-0x1fd30f58>
 86c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 870:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 874:	97184006 	ldrls	r4, [r8, -r6]
 878:	13011942 	movwne	r1, #6466	; 0x1942
 87c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 880:	03193f01 	tsteq	r9, #1, 30
 884:	3b0b3a0e 	blcc	2cf0c4 <startup-0x1fd30f3c>
 888:	1119270b 	tstne	r9, fp, lsl #14
 88c:	40061201 	andmi	r1, r6, r1, lsl #4
 890:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 894:	00001301 	andeq	r1, r0, r1, lsl #6
 898:	03000517 	movweq	r0, #1303	; 0x517
 89c:	3b0b3a0e 	blcc	2cf0dc <startup-0x1fd30f24>
 8a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 8a4:	18000018 	stmdane	r0, {r3, r4}
 8a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 8ac:	0b3b0b3a 	bleq	ec359c <startup-0x1f13ca64>
 8b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 8b4:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 8b8:	03193f01 	tsteq	r9, #1, 30
 8bc:	3b0b3a0e 	blcc	2cf0fc <startup-0x1fd30f04>
 8c0:	1119270b 	tstne	r9, fp, lsl #14
 8c4:	40061201 	andmi	r1, r6, r1, lsl #4
 8c8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 8cc:	Address 0x000008cc is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00001e1c 	andeq	r1, r0, ip, lsl lr
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	1a780002 	bne	1e0003c <startup-0x1e1fffc4>
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20001e2c 	andcs	r1, r0, ip, lsr #28
  3c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	209f0002 	addscs	r0, pc, r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	2000233c 	andcs	r2, r0, ip, lsr r3
  5c:	000001c4 	andeq	r0, r0, r4, asr #3
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	25e60002 	strbcs	r0, [r6, #2]!
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20002500 	andcs	r2, r0, r0, lsl #10
  7c:	00000128 	andeq	r0, r0, r8, lsr #2
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	27930002 	ldrcs	r0, [r3, r2]
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20002628 	andcs	r2, r0, r8, lsr #12
  9c:	000009fe 	strdeq	r0, [r0], -lr
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20001e2c 	andcs	r1, r0, ip, lsr #28
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000581 	andeq	r0, r0, r1, lsl #11
   4:	02070002 	andeq	r0, r7, #2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
  1c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
  20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
  24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
  28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
  2c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
  30:	2f534953 	svccs	0x00534953
  34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  38:	00656475 	rsbeq	r6, r5, r5, ror r4
  3c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; ffffff8c <GPIO_Ports+0xdfffcdf4>
  40:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  44:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  48:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
  4c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  50:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  54:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
  58:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
  5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
  60:	445f6870 	ldrbmi	r6, [pc], #-2160	; 68 <startup-0x1fffff98>
  64:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  68:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
  6c:	3a430063 	bcc	10c0200 <startup-0x1ef3fe00>
  70:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  74:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
  78:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
  7c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
  80:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  84:	6f442f65 	svcvs	0x00442f65
  88:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
  8c:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
  90:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
  94:	41442f62 	cmpmi	r4, r2, ror #30
  98:	30393254 	eorscc	r3, r9, r4, asr r2
  9c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
  a0:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
  a4:	2f6d6574 	svccs	0x006d6574
  a8:	2f646f6b 	svccs	0x00646f6b
  ac:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
  b0:	2f2e2e00 	svccs	0x002e2e00
  b4:	2f62696c 	svccs	0x0062696c
  b8:	334d5453 	movtcc	r5, #54355	; 0xd453
  bc:	5f344632 	svcpl	0x00344632
  c0:	2f62696c 	svccs	0x0062696c
  c4:	334d5453 	movtcc	r5, #54355	; 0xd453
  c8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
  cc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
  d0:	72655064 	rsbvc	r5, r5, #100	; 0x64
  d4:	5f687069 	svcpl	0x00687069
  d8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  dc:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
  e0:	6300636e 	movwvs	r6, #878	; 0x36e
  e4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
  e8:	70706165 	rsbsvc	r6, r0, r5, ror #2
  ec:	646f635c 	strbtvs	r6, [pc], #-860	; f4 <startup-0x1fffff0c>
  f0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  f4:	6f745c65 	svcvs	0x00745c65
  f8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
  fc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 100:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 104:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 108:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 10c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 110:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 114:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 118:	616d5c65 	cmnvs	sp, r5, ror #24
 11c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 120:	3a630065 	bcc	18c02bc <startup-0x1e73fd44>
 124:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 128:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 12c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 130:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 134:	6f6f745c 	svcvs	0x006f745c
 138:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 13c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 140:	615c6d72 	cmpvs	ip, r2, ror sp
 144:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 148:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 14c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 150:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 154:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 158:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 15c:	6f630000 	svcvs	0x00630000
 160:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 164:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 168:	00000100 	andeq	r0, r0, r0, lsl #2
 16c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 170:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 174:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
 178:	00632e63 	rsbeq	r2, r3, r3, ror #28
 17c:	69000002 	stmdbvs	r0, {r1}
 180:	2e74696e 	vsubcs.f16	s13, s8, s29	; <UNPREDICTABLE>
 184:	00030068 	andeq	r0, r3, r8, rrx
 188:	61747300 	cmnvs	r4, r0, lsl #6
 18c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 190:	0300632e 	movweq	r6, #814	; 0x32e
 194:	74730000 	ldrbtvc	r0, [r3], #-0
 198:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 19c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 1a0:	00040068 	andeq	r0, r4, r8, rrx
 1a4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 1a8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 1ac:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1b0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 1b4:	00050068 	andeq	r0, r5, r8, rrx
 1b8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 1bc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 1c0:	0600682e 	streq	r6, [r0], -lr, lsr #16
 1c4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 1c8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 1cc:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
 1d0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 1d4:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 1d8:	00000400 	andeq	r0, r0, r0, lsl #8
 1dc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 1e0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 1e4:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
 1e8:	00682e63 	rsbeq	r2, r8, r3, ror #28
 1ec:	73000004 	movwvc	r0, #4
 1f0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 1f4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 1f8:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 1fc:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 200:	73000004 	movwvc	r0, #4
 204:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 208:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
 20c:	00000300 	andeq	r0, r0, r0, lsl #6
 210:	02050000 	andeq	r0, r5, #0
 214:	20000010 	andcs	r0, r0, r0, lsl r0
 218:	010cdd03 	tsteq	ip, r3, lsl #26
 21c:	1ecd4b75 			; <UNDEFINED> instruction: 0x1ecd4b75
 220:	00fc03d8 	ldrsbteq	r0, [ip], #56	; 0x38
 224:	02004b90 	andeq	r4, r0, #144, 22	; 0x24000
 228:	58060104 	stmdapl	r6, {r2, r8}
 22c:	674b3006 	strbvs	r3, [fp, -r6]
 230:	04213f3d 	strteq	r3, [r1], #-3901	; 0xfffff0c3
 234:	73f70302 	mvnsvc	r0, #134217728	; 0x8000000
 238:	3f693082 	svccc	0x00693082
 23c:	4e4f4069 	cdpmi	0, 4, cr4, cr15, cr9, {3}
 240:	03503f69 	cmpeq	r0, #420	; 0x1a4
 244:	3f6be417 	svccc	0x006be417
 248:	740f034b 	strvc	r0, [pc], #-843	; 250 <startup-0x1ffffdb0>
 24c:	003d2f3d 	eorseq	r2, sp, sp, lsr pc
 250:	40020402 	andmi	r0, r2, r2, lsl #8
 254:	02040200 	andeq	r0, r4, #0, 4
 258:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 25c:	02003d02 	andeq	r3, r0, #2, 26	; 0x80
 260:	58060104 	stmdapl	r6, {r2, r8}
 264:	4e5a4c06 	cdpmi	12, 5, cr4, cr10, cr6, {0}
 268:	0b032f3e 	bleq	cbf68 <startup-0x1ff34098>
 26c:	3f32674a 	svccc	0x0032674a
 270:	033d694d 	teqeq	sp, #1261568	; 0x134000
 274:	4b6a7415 	blmi	1a9d2d0 <startup-0x1e562d30>
 278:	6c661403 	cfstrdvs	mvd1, [r6], #-12
 27c:	0b033f3f 	bleq	cff80 <startup-0x1ff30080>
 280:	20790366 	rsbscs	r0, r9, r6, ror #6
 284:	243d233d 	ldrtcs	r2, [sp], #-829	; 0xfffffcc3
 288:	6a740f03 	bvs	1d03e9c <startup-0x1e2fc164>
 28c:	00de034b 	sbcseq	r0, lr, fp, asr #6
 290:	2dbb7c66 	ldccs	12, cr7, [fp, #408]!	; 0x198
 294:	660e033e 			; <UNDEFINED> instruction: 0x660e033e
 298:	1a034b69 	bne	d3044 <startup-0x1ff2cfbc>
 29c:	03835d66 	orreq	r5, r3, #6528	; 0x1980
 2a0:	69740185 	ldmdbvs	r4!, {r0, r2, r7, r8}^
 2a4:	00e9034b 	rsceq	r0, r9, fp, asr #6
 2a8:	03ad6c66 			; <UNDEFINED> instruction: 0x03ad6c66
 2ac:	4b69740d 	blmi	1a5d2e8 <startup-0x1e5a2d18>
 2b0:	69660e03 	stmdbvs	r6!, {r0, r1, r9, sl, fp}^
 2b4:	6615034b 	ldrvs	r0, [r5], -fp, asr #6
 2b8:	4d3f3459 	cfldrsmi	mvf3, [pc, #-356]!	; 15c <startup-0x1ffffea4>
 2bc:	18034169 	stmdane	r3, {r0, r3, r5, r6, r8, lr}
 2c0:	3f345990 	svccc	0x00345990
 2c4:	0341694d 	movteq	r6, #6477	; 0x194d
 2c8:	4b7401b3 	blmi	1d0099c <startup-0x1e2ff664>
 2cc:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
 2d0:	660d033d 			; <UNDEFINED> instruction: 0x660d033d
 2d4:	1703672f 	strne	r6, [r3, -pc, lsr #14]
 2d8:	3f334b66 	svccc	0x00334b66
 2dc:	033d4d4d 	teqeq	sp, #4928	; 0x1340
 2e0:	334b660f 	movtcc	r6, #46607	; 0xb60f
 2e4:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
 2e8:	4b820f03 	blmi	fe083efc <GPIO_Ports+0xde080d64>
 2ec:	5b4d3f33 	blpl	134ffc0 <startup-0x1ecb0040>
 2f0:	9024033d 	eorls	r0, r4, sp, lsr r3
 2f4:	775ac04b 	ldrbvc	ip, [sl, -fp, asr #32]
 2f8:	263d223d 			; <UNDEFINED> instruction: 0x263d223d
 2fc:	db3f5a67 	blle	fd6ca0 <startup-0x1f029360>
 300:	038383cb 	orreq	r8, r3, #738197507	; 0x2c000003
 304:	253d201b 	ldrcs	r2, [sp, #-27]!	; 0xffffffe5
 308:	69683d59 	stmdbvs	r8!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}^
 30c:	69683d67 	stmdbvs	r8!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}^
 310:	67683d67 	strbvs	r3, [r8, -r7, ror #26]!
 314:	4bba3f03 	blmi	fee8ff28 <GPIO_Ports+0xdee8cd90>
 318:	4d3f8433 	cfldrsmi	mvf8, [pc, #-204]!	; 254 <startup-0x1ffffdac>
 31c:	03834069 	orreq	r4, r3, #105	; 0x69
 320:	4b6a9e0a 	blmi	1aa7b50 <startup-0x1e5584b0>
 324:	69660c03 	stmdbvs	r6!, {r0, r1, sl, fp}^
 328:	01b8034b 			; <UNDEFINED> instruction: 0x01b8034b
 32c:	033d4e66 	teqeq	sp, #1632	; 0x660
 330:	334b7416 	movtcc	r7, #46102	; 0xb416
 334:	4b4d4d4d 	blmi	1353870 <startup-0x1ecac790>
 338:	4b821403 	blmi	fe08534c <GPIO_Ports+0xde0821b4>
 33c:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 340:	8211034b 	andshi	r0, r1, #738197505	; 0x2c000001
 344:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 348:	10034b5b 	andne	r4, r3, fp, asr fp
 34c:	4d334b74 	vldmdbmi	r3!, {d4-<overflow reg d61>}
 350:	034b694d 	movteq	r6, #47437	; 0xb94d
 354:	4b8200d3 	blmi	fe0806a8 <GPIO_Ports+0xde07d510>
 358:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 35c:	00f0034b 	rscseq	r0, r0, fp, asr #6
 360:	033d4e82 	teqeq	sp, #2080	; 0x820
 364:	4c797425 	cfldrdmi	mvd7, [r9], #-148	; 0xffffff6c
 368:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 36c:	4c797413 	cfldrdmi	mvd7, [r9], #-76	; 0xffffffb4
 370:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 374:	4c797411 	cfldrdmi	mvd7, [r9], #-68	; 0xffffffbc
 378:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 37c:	4c79742c 	cfldrdmi	mvd7, [r9], #-176	; 0xffffff50
 380:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 384:	4c797427 	cfldrdmi	mvd7, [r9], #-156	; 0xffffff64
 388:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 38c:	4c79741d 	cfldrdmi	mvd7, [r9], #-116	; 0xffffff8c
 390:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 394:	4c797410 	cfldrdmi	mvd7, [r9], #-64	; 0xffffffc0
 398:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 39c:	4c79740e 	cfldrdmi	mvd7, [r9], #-56	; 0xffffffc8
 3a0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3a4:	4c787429 	cfldrdmi	mvd7, [r8], #-164	; 0xffffff5c
 3a8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3ac:	4c787423 	cfldrdmi	mvd7, [r8], #-140	; 0xffffff74
 3b0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3b4:	4c787425 	cfldrdmi	mvd7, [r8], #-148	; 0xffffff6c
 3b8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3bc:	4c787414 	cfldrdmi	mvd7, [r8], #-80	; 0xffffffb0
 3c0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3c4:	4c787412 	cfldrdmi	mvd7, [r8], #-72	; 0xffffffb8
 3c8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3cc:	4c78742d 	cfldrdmi	mvd7, [r8], #-180	; 0xffffff4c
 3d0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3d4:	4c787428 	cfldrdmi	mvd7, [r8], #-160	; 0xffffff60
 3d8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3dc:	4c6a740c 	cfstrdmi	mvd7, [sl], #-48	; 0xffffffd0
 3e0:	03681e6c 	cmneq	r8, #108, 28	; 0x6c0
 3e4:	947402ac 	ldrbtls	r0, [r4], #-684	; 0xfffffd54
 3e8:	ae1e974d 	cdpge	7, 1, cr9, cr14, cr13, {2}
 3ec:	67661703 	strbvs	r1, [r6, -r3, lsl #14]!
 3f0:	59502f2f 	ldmdbpl	r0, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 3f4:	4e3e4c3e 	mrcmi	12, 1, r4, cr14, cr14, {1}
 3f8:	5c765940 			; <UNDEFINED> instruction: 0x5c765940
 3fc:	0a033d4d 	beq	cf938 <startup-0x1ff306c8>
 400:	03753066 	cmneq	r5, #102	; 0x66
 404:	50675811 	rsbpl	r5, r7, r1, lsl r8
 408:	3d4d5c68 	stclcc	12, cr5, [sp, #-416]	; 0xfffffe60
 40c:	6c661103 	stfvse	f1, [r6], #-12
 410:	0303044b 	movweq	r0, #13387	; 0x344b
 414:	4066679d 	mlsmi	r6, sp, r7, r6
 418:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 41c:	4b693d3d 	blmi	1a4f918 <startup-0x1e5b06e8>
 420:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 424:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 428:	4b693d3d 	blmi	1a4f924 <startup-0x1e5b06dc>
 42c:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 430:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 434:	4b693d3d 	blmi	1a4f930 <startup-0x1e5b06d0>
 438:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 43c:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 440:	4b693d3d 	blmi	1a4f93c <startup-0x1e5b06c4>
 444:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 448:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 44c:	04673d3d 	strbteq	r3, [r7], #-3389	; 0xfffff2c3
 450:	08530304 	ldmdaeq	r3, {r2, r8, r9}^
 454:	5a592f2e 	bpl	164c114 <startup-0x1e9b3eec>
 458:	9f6c3e3e 	svcls	0x006c3e3e
 45c:	0200594b 	andeq	r5, r0, #1228800	; 0x12c000
 460:	20060104 	andcs	r0, r6, r4, lsl #2
 464:	67775906 	ldrbvs	r5, [r7, -r6, lsl #18]!
 468:	02002f2f 	andeq	r2, r0, #47, 30	; 0xbc
 46c:	20060104 	andcs	r0, r6, r4, lsl #2
 470:	ac025b06 			; <UNDEFINED> instruction: 0xac025b06
 474:	92751405 	rsbsls	r1, r5, #83886080	; 0x5000000
 478:	00750884 	rsbseq	r0, r5, r4, lsl #17
 47c:	a9020402 	stmdbge	r2, {r1, sl}
 480:	01040200 	mrseq	r0, R12_usr
 484:	0200ac06 	andeq	sl, r0, #1536	; 0x600
 488:	80060204 	andhi	r0, r6, r4, lsl #4
 48c:	01040200 	mrseq	r0, R12_usr
 490:	0306ba06 	movweq	fp, #27142	; 0x6a06
 494:	3f029009 	svccc	0x00029009
 498:	02847513 	addeq	r7, r4, #79691776	; 0x4c00000
 49c:	83081429 	movwhi	r1, #33833	; 0x8429
 4a0:	59087508 	stmdbpl	r8, {r3, r8, sl, ip, sp, lr}
 4a4:	08bbbbc9 	ldmeq	fp!, {r0, r3, r6, r7, r8, r9, fp, ip, sp, pc}
 4a8:	00bb0859 	adcseq	r0, fp, r9, asr r8
 4ac:	03020402 	movweq	r0, #9218	; 0x2402
 4b0:	02008276 	andeq	r8, r0, #1610612743	; 0x60000007
 4b4:	ba060104 	blt	1808cc <startup-0x1fe7f734>
 4b8:	02040200 	andeq	r0, r4, #0, 4
 4bc:	02009c06 	andeq	r9, r0, #1536	; 0x600
 4c0:	ac060104 	stfges	f0, [r6], {4}
 4c4:	90110306 	andsls	r0, r1, r6, lsl #6
 4c8:	03040200 	movweq	r0, #16896	; 0x4200
 4cc:	04020084 	streq	r0, [r2], #-132	; 0xffffff7c
 4d0:	00bb0803 	adcseq	r0, fp, r3, lsl #16
 4d4:	39030402 	stmdbcc	r3, {r1, sl}
 4d8:	01040200 	mrseq	r0, R12_usr
 4dc:	b2068206 	andlt	r8, r6, #1610612736	; 0x60000000
 4e0:	03040200 	movweq	r0, #16896	; 0x4200
 4e4:	040200ae 	streq	r0, [r2], #-174	; 0xffffff52
 4e8:	00c90803 	sbceq	r0, r9, r3, lsl #16
 4ec:	39030402 	stmdbcc	r3, {r1, sl}
 4f0:	01040200 	mrseq	r0, R12_usr
 4f4:	95068206 	strls	r8, [r6, #-518]	; 0xfffffdfa
 4f8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 4fc:	02008403 	andeq	r8, r0, #50331648	; 0x3000000
 500:	b8080304 	stmdalt	r8, {r2, r8, r9}
 504:	01040200 	mrseq	r0, R12_usr
 508:	b0068206 	andlt	r8, r6, r6, lsl #4
 50c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 510:	02009203 	andeq	r9, r0, #805306368	; 0x30000000
 514:	c6080304 	strgt	r0, [r8], -r4, lsl #6
 518:	01040200 	mrseq	r0, R12_usr
 51c:	c0068206 	andgt	r8, r6, r6, lsl #4
 520:	08ca085c 	stmiaeq	sl, {r2, r3, r4, r6, fp}^
 524:	08c9084c 	stmiaeq	r9, {r2, r3, r6, fp}^
 528:	083008a3 	ldmdaeq	r0!, {r0, r1, r5, r7, fp}
 52c:	9292083e 	addsls	r0, r2, #4063232	; 0x3e0000
 530:	01040200 	mrseq	r0, R12_usr
 534:	064a0806 	strbeq	r0, [sl], -r6, lsl #16
 538:	08142202 	ldmdaeq	r4, {r1, r9, sp}
 53c:	00bc08cc 	adcseq	r0, ip, ip, asr #17
 540:	06010402 	streq	r0, [r1], -r2, lsl #8
 544:	02004a08 	andeq	r4, r0, #8, 20	; 0x8000
 548:	22020204 	andcs	r0, r2, #4, 4	; 0x40000000
 54c:	4c080612 	stcmi	6, cr0, [r8], {18}
 550:	02040200 	andeq	r0, r4, #0, 4
 554:	9e087403 	cdpls	4, 0, cr7, cr8, cr3, {0}
 558:	01040200 	mrseq	r0, R12_usr
 55c:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
 560:	03060204 	movweq	r0, #25092	; 0x6204
 564:	0200c870 	andeq	ip, r0, #112, 16	; 0x700000
 568:	ac060104 	stfges	f0, [r6], {4}
 56c:	000902ba 			; <UNDEFINED> instruction: 0x000902ba
 570:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
 574:	00020500 	andeq	r0, r2, r0, lsl #10
 578:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 57c:	5e13010d 	mufpls	f0, f3, #5.0
 580:	01000302 	tsteq	r0, r2, lsl #6
 584:	0002b501 	andeq	fp, r2, r1, lsl #10
 588:	c9000200 	stmdbgt	r0, {r9}
 58c:	02000001 	andeq	r0, r0, #1
 590:	0d0efb01 	vstreq	d15, [lr, #-4]
 594:	01010100 	mrseq	r0, (UNDEF: 17)
 598:	00000001 	andeq	r0, r0, r1
 59c:	01000001 	tsteq	r0, r1
 5a0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffb65 <GPIO_Ports+0xdfffc9cd>
 5a4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 5a8:	6164412f 	cmnvs	r4, pc, lsr #2
 5ac:	4f2f746d 	svcmi	0x002f746d
 5b0:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 5b4:	2f657669 	svccs	0x00657669
 5b8:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 5bc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 5c0:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 5c4:	2f627548 	svccs	0x00627548
 5c8:	32544144 	subscc	r4, r4, #68, 2
 5cc:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
 5d0:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
 5d4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 5d8:	6f6b2f6d 	svcvs	0x006b2f6d
 5dc:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
 5e0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 5e4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 5e8:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 5ec:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 5f0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 5f4:	5f787834 	svcpl	0x00787834
 5f8:	50647453 	rsbpl	r7, r4, r3, asr r4
 5fc:	70697265 	rsbvc	r7, r9, r5, ror #4
 600:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 604:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 608:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 60c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 610:	61657363 	cmnvs	r5, r3, ror #6
 614:	635c7070 	cmpvs	ip, #112	; 0x70
 618:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 61c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 620:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 458 <startup-0x1ffffba8>
 624:	63675c73 	cmnvs	r7, #29440	; 0x7300
 628:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 62c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 630:	6f6e2d6d 	svcvs	0x006e2d6d
 634:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 638:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 63c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 640:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 644:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 648:	00656e69 	rsbeq	r6, r5, r9, ror #28
 64c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 650:	70616573 	rsbvc	r6, r1, r3, ror r5
 654:	6f635c70 	svcvs	0x00635c70
 658:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 65c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 660:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 664:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 668:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 66c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 670:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 674:	61652d65 	cmnvs	r5, r5, ror #26
 678:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 67c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 680:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 684:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
 688:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 68c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 690:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 694:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 698:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
 69c:	2f534953 	svccs	0x00534953
 6a0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 6a4:	00656475 	rsbeq	r6, r5, r5, ror r4
 6a8:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 5f8 <startup-0x1ffffa08>
 6ac:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 6b0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 6b4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 6b8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 6bc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 6c0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 6c4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 6c8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 6cc:	445f6870 	ldrbmi	r6, [pc], #-2160	; 6d4 <startup-0x1ffff92c>
 6d0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 6d4:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
 6d8:	73000063 	movwvc	r0, #99	; 0x63
 6dc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 6e0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 6e4:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 6e8:	00632e6f 	rsbeq	r2, r3, pc, ror #28
 6ec:	5f000001 	svcpl	0x00000001
 6f0:	61666564 	cmnvs	r6, r4, ror #10
 6f4:	5f746c75 	svcpl	0x00746c75
 6f8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 6fc:	00682e73 	rsbeq	r2, r8, r3, ror lr
 700:	5f000002 	svcpl	0x00000002
 704:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 708:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 70c:	00000300 	andeq	r0, r0, r0, lsl #6
 710:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 714:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
 718:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 71c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 720:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 724:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
 728:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 72c:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 730:	00000500 	andeq	r0, r0, r0, lsl #10
 734:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 738:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 73c:	00682e78 	rsbeq	r2, r8, r8, ror lr
 740:	73000005 	movwvc	r0, #5
 744:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 748:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 74c:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 750:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 754:	00000005 	andeq	r0, r0, r5
 758:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
 75c:	0320001e 			; <UNDEFINED> instruction: 0x0320001e
 760:	4e0100ff 	mcrmi	0, 0, r0, cr1, cr15, {7}
 764:	38034b4c 	stmdacc	r3, {r2, r3, r6, r8, r9, fp, lr}
 768:	204a034a 	subcs	r0, sl, sl, asr #6
 76c:	33034b4c 	movwcc	r4, #15180	; 0x3b4c
 770:	204f034a 	subcs	r0, pc, sl, asr #6
 774:	2e034b4c 	vmlscs.f64	d4, d3, d12
 778:	2054034a 	subscs	r0, r4, sl, asr #6
 77c:	29034b4c 	stmdbcs	r3, {r2, r3, r6, r8, r9, fp, lr}
 780:	2059034a 	subscs	r0, r9, sl, asr #6
 784:	24034b4c 	strcs	r4, [r3], #-2892	; 0xfffff4b4
 788:	205e034a 	subscs	r0, lr, sl, asr #6
 78c:	1f034b4c 	svcne	0x00034b4c
 790:	2063034a 	rsbcs	r0, r3, sl, asr #6
 794:	1a034b4c 	bne	d34cc <startup-0x1ff2cb34>
 798:	2068034a 	rsbcs	r0, r8, sl, asr #6
 79c:	15034b4c 	strne	r4, [r3, #-2892]	; 0xfffff4b4
 7a0:	206e034a 	rsbcs	r0, lr, sl, asr #6
 7a4:	0f03674c 	svceq	0x0003674c
 7a8:	20730366 	rsbscs	r0, r3, r6, ror #6
 7ac:	0a03674c 	beq	da4e4 <startup-0x1ff25b1c>
 7b0:	207a0366 	rsbscs	r0, sl, r6, ror #6
 7b4:	0369674c 	cmneq	r9, #76, 14	; 0x1300000
 7b8:	5990080c 	ldmibpl	r0, {r2, r3, fp}
 7bc:	3e660a03 	vmulcc.f32	s1, s12, s6
 7c0:	ad4c5a5a 	vstrge	s11, [ip, #-360]	; 0xfffffe98
 7c4:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
 7c8:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 7cc:	adc0ad50 	stclge	13, cr10, [r0, #320]	; 0x140
 7d0:	0200bbcc 	andeq	fp, r0, #204, 22	; 0x33000
 7d4:	62030204 	andvs	r0, r3, #4, 4	; 0x40000000
 7d8:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
 7dc:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 7e0:	523c2103 	eorspl	r2, ip, #-1073741824	; 0xc0000000
 7e4:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
 7e8:	10033d3d 	andne	r3, r3, sp, lsr sp
 7ec:	5a427574 	bpl	109ddc4 <startup-0x1ef6223c>
 7f0:	3e3e4c3e 	mrccc	12, 1, r4, cr14, cr14, {1}
 7f4:	4a1c033d 	bmi	7014f0 <startup-0x1f8feb10>
 7f8:	5c685075 	stclpl	0, cr5, [r8], #-468	; 0xfffffe2c
 7fc:	0a033d4c 	beq	cfd34 <startup-0x1ff302cc>
 800:	033d4e4a 	teqeq	sp, #1184	; 0x4a0
 804:	50754a0c 	rsbspl	r4, r5, ip, lsl #20
 808:	3d4c5c68 	stclcc	12, cr5, [ip, #-416]	; 0xfffffe60
 80c:	4e4a0a03 	vmlami.f32	s1, s20, s6
 810:	4a0f033d 	bmi	3c150c <startup-0x1fc3eaf4>
 814:	0f034b79 	svceq	0x00034b79
 818:	034b794a 	movteq	r7, #47434	; 0xb94a
 81c:	4cc04a10 	vstmiami	r0, {s9-s24}
 820:	034c1e50 	movteq	r1, #52816	; 0xce50
 824:	4b784a0b 	blmi	1e13058 <startup-0x1e1ecfa8>
 828:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
 82c:	00ce0375 	sbceq	r0, lr, r5, ror r3
 830:	352fbb4a 	strcc	fp, [pc, #-2890]!	; fffffcee <GPIO_Ports+0xdfffcb56>
 834:	bbc9089f 	bllt	ff242ab8 <GPIO_Ports+0xdf23f920>
 838:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
 83c:	01fa0101 	mvnseq	r0, r1, lsl #2
 840:	00020000 	andeq	r0, r2, r0
 844:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
 848:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 84c:	0101000d 	tsteq	r1, sp
 850:	00000101 	andeq	r0, r0, r1, lsl #2
 854:	00000100 	andeq	r0, r0, r0, lsl #2
 858:	2f3a4301 	svccs	0x003a4301
 85c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 860:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
 864:	2f746d61 	svccs	0x00746d61
 868:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
 86c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 870:	6b6f442f 	blvs	1bd1934 <startup-0x1e42e6cc>
 874:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 878:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
 87c:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
 880:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 884:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
 888:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
 88c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 890:	6b2f6d65 	blvs	bdbe2c <startup-0x1f4241d4>
 894:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 6e0 <startup-0x1ffff920>
 898:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 89c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 8a0:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 8a4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 8a8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 8ac:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 8b0:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 8b4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 8b8:	445f6870 	ldrbmi	r6, [pc], #-2160	; 8c0 <startup-0x1ffff740>
 8bc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 8c0:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
 8c4:	3a630063 	bcc	18c0a58 <startup-0x1e73f5a8>
 8c8:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 8cc:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 8d0:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 8d4:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 8d8:	6f6f745c 	svcvs	0x006f745c
 8dc:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 8e0:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 8e4:	615c6d72 	cmpvs	ip, r2, ror sp
 8e8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 8ec:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 8f0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 8f4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 8f8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 8fc:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 900:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 904:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 908:	61657363 	cmnvs	r5, r3, ror #6
 90c:	635c7070 	cmpvs	ip, #112	; 0x70
 910:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 914:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 918:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 750 <startup-0x1ffff8b0>
 91c:	63675c73 	cmnvs	r7, #29440	; 0x7300
 920:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 924:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 928:	6f6e2d6d 	svcvs	0x006e2d6d
 92c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 930:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 934:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 938:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 93c:	00737973 	rsbseq	r7, r3, r3, ror r9
 940:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 890 <startup-0x1ffff770>
 944:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 948:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 94c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 950:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
 954:	5349534d 	movtpl	r5, #37709	; 0x934d
 958:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 95c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 960:	2f2e2e00 	svccs	0x002e2e00
 964:	2f62696c 	svccs	0x0062696c
 968:	334d5453 	movtcc	r5, #54355	; 0xd453
 96c:	5f344632 	svcpl	0x00344632
 970:	2f62696c 	svccs	0x0062696c
 974:	334d5453 	movtcc	r5, #54355	; 0xd453
 978:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 97c:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 980:	72655064 	rsbvc	r5, r5, #100	; 0x64
 984:	5f687069 	svcpl	0x00687069
 988:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 98c:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 990:	0000636e 	andeq	r6, r0, lr, ror #6
 994:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
 998:	0100632e 	tsteq	r0, lr, lsr #6
 99c:	645f0000 	ldrbvs	r0, [pc], #-0	; 9a4 <startup-0x1ffff65c>
 9a0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 9a4:	745f746c 	ldrbvc	r7, [pc], #-1132	; 9ac <startup-0x1ffff654>
 9a8:	73657079 	cmnvc	r5, #121	; 0x79
 9ac:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 9b0:	735f0000 	cmpvc	pc, #0
 9b4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 9b8:	00682e74 	rsbeq	r2, r8, r4, ror lr
 9bc:	63000003 	movwvs	r0, #3
 9c0:	5f65726f 	svcpl	0x0065726f
 9c4:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
 9c8:	00040068 	andeq	r0, r4, r8, rrx
 9cc:	73797300 	cmnvc	r9, #0, 6
 9d0:	5f6d6574 	svcpl	0x006d6574
 9d4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 9d8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 9dc:	00682e78 	rsbeq	r2, r8, r8, ror lr
 9e0:	73000005 	movwvc	r0, #5
 9e4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 9e8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 9ec:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 9f0:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
 9f4:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
 9f8:	00000500 	andeq	r0, r0, r0, lsl #10
 9fc:	02050000 	andeq	r0, r5, #0
 a00:	2000233c 	andcs	r2, r0, ip, lsr r3
 a04:	0100f603 	tsteq	r0, r3, lsl #12	; <UNPREDICTABLE>
 a08:	0c03594f 			; <UNDEFINED> instruction: 0x0c03594f
 a0c:	4dc14b90 	vstrmi	d20, [r1, #576]	; 0x240
 a10:	9192759f 			; <UNDEFINED> instruction: 0x9192759f
 a14:	57b05aae 	ldrpl	r5, [r0, lr, lsr #21]!
 a18:	09032d67 	stmdbeq	r3, {r0, r1, r2, r5, r6, r8, sl, fp, sp}
 a1c:	67571e2e 	ldrbvs	r1, [r7, -lr, lsr #28]
 a20:	0c034d2d 	stceq	13, cr4, [r3], {45}	; 0x2d
 a24:	03835d90 	orreq	r5, r3, #144, 26	; 0x2400
 a28:	4c95900d 	ldcmi	0, cr9, [r5], {13}
 a2c:	03841e7a 	orreq	r1, r4, #1952	; 0x7a0
 a30:	3e4d740b 	cdpcc	4, 4, cr7, cr13, cr11, {0}
 a34:	02681e6c 	rsbeq	r1, r8, #108, 28	; 0x6c0
 a38:	01010006 	tsteq	r1, r6
 a3c:	0000014e 	andeq	r0, r0, lr, asr #2
 a40:	01080002 	tsteq	r8, r2
 a44:	01020000 	mrseq	r0, (UNDEF: 2)
 a48:	000d0efb 	strdeq	r0, [sp], -fp
 a4c:	01010101 	tsteq	r1, r1, lsl #2
 a50:	01000000 	mrseq	r0, (UNDEF: 0)
 a54:	43010000 	movwmi	r0, #4096	; 0x1000
 a58:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 a5c:	2f737265 	svccs	0x00737265
 a60:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
 a64:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
 a68:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
 a6c:	442f6576 	strtmi	r6, [pc], #-1398	; a74 <startup-0x1ffff58c>
 a70:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
 a74:	2f746e65 	svccs	0x00746e65
 a78:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
 a7c:	442f6275 	strtmi	r6, [pc], #-629	; a84 <startup-0x1ffff57c>
 a80:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
 a84:	614c2d30 	cmpvs	ip, r0, lsr sp
 a88:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
 a8c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 a90:	646f6b2f 	strbtvs	r6, [pc], #-2863	; a98 <startup-0x1ffff568>
 a94:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 a98:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 a9c:	61657363 	cmnvs	r5, r3, ror #6
 aa0:	635c7070 	cmpvs	ip, #112	; 0x70
 aa4:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 aa8:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 aac:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 8e4 <startup-0x1ffff71c>
 ab0:	63675c73 	cmnvs	r7, #29440	; 0x7300
 ab4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 ab8:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 abc:	6f6e2d6d 	svcvs	0x006e2d6d
 ac0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 ac4:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 ac8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 acc:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 ad0:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 ad4:	00656e69 	rsbeq	r6, r5, r9, ror #28
 ad8:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 adc:	70616573 	rsbvc	r6, r1, r3, ror r5
 ae0:	6f635c70 	svcvs	0x00635c70
 ae4:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 ae8:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 aec:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 af0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 af4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 af8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 afc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 b00:	61652d65 	cmnvs	r5, r5, ror #26
 b04:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 b08:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 b0c:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 b10:	00007379 	andeq	r7, r0, r9, ror r3
 b14:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 b18:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
 b1c:	00000100 	andeq	r0, r0, r0, lsl #2
 b20:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 b24:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 b28:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 b2c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 b30:	00000200 	andeq	r0, r0, r0, lsl #4
 b34:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 b38:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 b3c:	00030068 	andeq	r0, r3, r8, rrx
 b40:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
 b44:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
 b48:	00010068 	andeq	r0, r1, r8, rrx
 b4c:	05000000 	streq	r0, [r0, #-0]
 b50:	00250002 	eoreq	r0, r5, r2
 b54:	4b4b1520 	blmi	12c5fdc <startup-0x1ed3a024>
 b58:	764e4b4b 	strbvc	r4, [lr], -fp, asr #22
 b5c:	85c93259 	strbhi	r3, [r9, #601]	; 0x259
 b60:	4e214c59 	mcrmi	12, 1, r4, cr1, cr9, {2}
 b64:	0402007a 	streq	r0, [r2], #-122	; 0xffffff86
 b68:	00580601 	subseq	r0, r8, r1, lsl #12
 b6c:	66020402 	strvs	r0, [r2], -r2, lsl #8
 b70:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 b74:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 b78:	003f0604 	eorseq	r0, pc, r4, lsl #12
 b7c:	67040402 	strvs	r0, [r4, -r2, lsl #8]
 b80:	32595a4e 	subscc	r5, r9, #319488	; 0x4e000
 b84:	4c5985c9 	cfldr64mi	mvdx8, [r9], {201}	; 0xc9
 b88:	00040221 	andeq	r0, r4, r1, lsr #4
 b8c:	034f0101 	movteq	r0, #61697	; 0xf101
 b90:	00020000 	andeq	r0, r2, r0
 b94:	000001de 	ldrdeq	r0, [r0], -lr
 b98:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 b9c:	0101000d 	tsteq	r1, sp
 ba0:	00000101 	andeq	r0, r0, r1, lsl #2
 ba4:	00000100 	andeq	r0, r0, r0, lsl #2
 ba8:	2f3a4301 	svccs	0x003a4301
 bac:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 bb0:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
 bb4:	2f746d61 	svccs	0x00746d61
 bb8:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
 bbc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 bc0:	6b6f442f 	blvs	1bd1c84 <startup-0x1e42e37c>
 bc4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 bc8:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
 bcc:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
 bd0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 bd4:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
 bd8:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
 bdc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 be0:	6b2f6d65 	blvs	bdc17c <startup-0x1f423e84>
 be4:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; a30 <startup-0x1ffff5d0>
 be8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 bec:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 bf0:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 bf4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 bf8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 bfc:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 c00:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 c04:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 c08:	445f6870 	ldrbmi	r6, [pc], #-2160	; c10 <startup-0x1ffff3f0>
 c0c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 c10:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
 c14:	3a630063 	bcc	18c0da8 <startup-0x1e73f258>
 c18:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 c1c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 c20:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 c24:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 c28:	6f6f745c 	svcvs	0x006f745c
 c2c:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 c30:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 c34:	615c6d72 	cmpvs	ip, r2, ror sp
 c38:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 c3c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 c40:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 c44:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 c48:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 c4c:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 c50:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 c54:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 c58:	61657363 	cmnvs	r5, r3, ror #6
 c5c:	635c7070 	cmpvs	ip, #112	; 0x70
 c60:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 c64:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 c68:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; aa0 <startup-0x1ffff560>
 c6c:	63675c73 	cmnvs	r7, #29440	; 0x7300
 c70:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 c74:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 c78:	6f6e2d6d 	svcvs	0x006e2d6d
 c7c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 c80:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 c84:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 c88:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 c8c:	00737973 	rsbseq	r7, r3, r3, ror r9
 c90:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; be0 <startup-0x1ffff420>
 c94:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 c98:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 c9c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 ca0:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
 ca4:	5349534d 	movtpl	r5, #37709	; 0x934d
 ca8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 cac:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 cb0:	2f2e2e00 	svccs	0x002e2e00
 cb4:	2f62696c 	svccs	0x0062696c
 cb8:	334d5453 	movtcc	r5, #54355	; 0xd453
 cbc:	5f344632 	svcpl	0x00344632
 cc0:	2f62696c 	svccs	0x0062696c
 cc4:	334d5453 	movtcc	r5, #54355	; 0xd453
 cc8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 ccc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 cd0:	72655064 	rsbvc	r5, r5, #100	; 0x64
 cd4:	5f687069 	svcpl	0x00687069
 cd8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 cdc:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 ce0:	0000636e 	andeq	r6, r0, lr, ror #6
 ce4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 ce8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 cec:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
 cf0:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 cf4:	00010063 	andeq	r0, r1, r3, rrx
 cf8:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 cfc:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 d00:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 d04:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 d08:	00020068 	andeq	r0, r2, r8, rrx
 d0c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 d10:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 d14:	0300682e 	movweq	r6, #2094	; 0x82e
 d18:	6f630000 	svcvs	0x00630000
 d1c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 d20:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 d24:	00000400 	andeq	r0, r0, r0, lsl #8
 d28:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 d2c:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 d30:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 d34:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 d38:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 d3c:	74730000 	ldrbtvc	r0, [r3], #-0
 d40:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 d44:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 d48:	00050068 	andeq	r0, r5, r8, rrx
 d4c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 d50:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 d54:	755f7878 	ldrbvc	r7, [pc, #-2168]	; 4e4 <startup-0x1ffffb1c>
 d58:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
 d5c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 d60:	74730000 	ldrbtvc	r0, [r3], #-0
 d64:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 d68:	5f787834 	svcpl	0x00787834
 d6c:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
 d70:	00050068 	andeq	r0, r5, r8, rrx
 d74:	05000000 	streq	r0, [r0, #-0]
 d78:	00262802 	eoreq	r2, r6, r2, lsl #16
 d7c:	01bb0320 			; <UNDEFINED> instruction: 0x01bb0320
 d80:	4b4c4e01 	blmi	131458c <startup-0x1eceba74>
 d84:	034a2803 	movteq	r2, #43011	; 0xa803
 d88:	674c205a 	smlsldvs	r2, ip, sl, r0
 d8c:	03662303 	cmneq	r6, #201326592	; 0xc000000
 d90:	674c205f 	smlsldvs	r2, ip, pc, r0	; <UNPREDICTABLE>
 d94:	03661e03 	cmneq	r6, #3, 28	; 0x30
 d98:	674c2064 	strbvs	r2, [ip, -r4, rrx]
 d9c:	03661903 	cmneq	r6, #49152	; 0xc000
 da0:	674c2069 	strbvs	r2, [ip, -r9, rrx]
 da4:	03661403 	cmneq	r6, #50331648	; 0x3000000
 da8:	4b4c206e 	blmi	1308f68 <startup-0x1ecf7098>
 dac:	034a0f03 	movteq	r0, #44803	; 0xaf03
 db0:	674c2073 	smlsldxvs	r2, ip, r3, r0
 db4:	03660a03 	cmneq	r6, #12288	; 0x3000
 db8:	674c207a 	smlsldxvs	r2, ip, sl, r0
 dbc:	080c0369 	stmdaeq	ip, {r0, r3, r5, r6, r8, r9}
 dc0:	2f4b594a 	svccs	0x004b594a
 dc4:	4d2e1303 	stcmi	3, cr1, [lr, #-12]!
 dc8:	4d4d694e 	vstrmi.16	s13, [sp, #-156]	; 0xffffff64	; <UNPREDICTABLE>
 dcc:	6a2d6750 	bvs	b5ab14 <startup-0x1f4a54ec>
 dd0:	694e4d4d 	stmdbvs	lr, {r0, r2, r3, r6, r8, sl, fp, lr}^
 dd4:	02005a4e 	andeq	r5, r0, #319488	; 0x4e000
 dd8:	4a060104 	bmi	1811f0 <startup-0x1fe7ee10>
 ddc:	4e5c4c06 	cdpmi	12, 5, cr4, cr12, cr6, {0}
 de0:	85e6f769 	strbhi	pc, [r6, #1897]!	; 0x769	; <UNPREDICTABLE>
 de4:	dae86877 	ble	ffa1afc8 <GPIO_Ports+0xdfa17e30>
 de8:	d609034b 	strle	r0, [r9], -fp, asr #6
 dec:	3d3d4b4c 	vldmdbcc	sp!, {d4-<overflow reg d41>}
 df0:	033d3d3d 	teqeq	sp, #3904	; 0xf40
 df4:	03594a0c 	cmpeq	r9, #12, 20	; 0xc000
 df8:	504c2e09 	subpl	r2, ip, r9, lsl #28
 dfc:	4b3fab4b 	blmi	febb30 <startup-0x1f0144d0>
 e00:	4c660903 			; <UNDEFINED> instruction: 0x4c660903
 e04:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 e08:	794a0b03 	stmdbvc	sl, {r0, r1, r8, r9, fp}^
 e0c:	841e974d 	ldrhi	r9, [lr], #-1869	; 0xfffff8b3
 e10:	79740b03 	ldmdbvc	r4!, {r0, r1, r8, r9, fp}^
 e14:	0d039f84 	stceq	15, cr9, [r3, #-528]	; 0xfffffdf0
 e18:	894d794a 	stmdbhi	sp, {r1, r3, r6, r8, fp, ip, sp, lr}^
 e1c:	0b03841e 	bleq	e1e9c <startup-0x1ff1e164>
 e20:	974d7974 	smlsldxls	r7, sp, r4, r9
 e24:	2a03841e 	bcs	e1ea4 <startup-0x1ff1e15c>
 e28:	03757a74 	cmneq	r5, #116, 20	; 0x74000
 e2c:	674f4a09 	strbvs	r4, [pc, -r9, lsl #20]
 e30:	7a4a2e03 	bvc	128c644 <startup-0x1ed739bc>
 e34:	0b039f84 	bleq	e8c4c <startup-0x1ff173b4>
 e38:	894d794a 	stmdbhi	sp, {r1, r3, r6, r8, fp, ip, sp, lr}^
 e3c:	0c03841e 	cfstrseq	mvf8, [r3], {30}
 e40:	9183794a 	orrls	r7, r3, sl, asr #18
 e44:	79743e03 	ldmdbvc	r4!, {r0, r1, r9, sl, fp, ip, sp}^
 e48:	0b039183 	bleq	e545c <startup-0x1ff1aba4>
 e4c:	974d794a 	strbls	r7, [sp, -sl, asr #18]
 e50:	0903841e 	stmdbeq	r3, {r1, r2, r3, r4, sl, pc}
 e54:	03834f74 	orreq	r4, r3, #116, 30	; 0x1d0
 e58:	4d794a2f 	vldmdbmi	r9!, {s9-s55}
 e5c:	03841e89 	orreq	r1, r4, #2192	; 0x890
 e60:	794a00c5 	stmdbvc	sl, {r0, r2, r6, r7}^
 e64:	0b03bb84 	bleq	efc7c <startup-0x1ff10384>
 e68:	894d784a 	stmdbhi	sp, {r1, r3, r6, fp, ip, sp, lr}^
 e6c:	0b03841e 	bleq	e1eec <startup-0x1ff1e114>
 e70:	894d784a 	stmdbhi	sp, {r1, r3, r6, fp, ip, sp, lr}^
 e74:	3903841e 	stmdbcc	r3, {r1, r2, r3, r4, sl, pc}
 e78:	9183794a 	orrls	r7, r3, sl, asr #18
 e7c:	794a0b03 	stmdbvc	sl, {r0, r1, r8, r9, fp}^
 e80:	841e894d 	ldrhi	r8, [lr], #-2381	; 0xfffff6b3
 e84:	c04a1f03 	subgt	r1, sl, r3, lsl #30
 e88:	ae1e984e 	cdpge	8, 1, cr9, cr14, cr14, {2}
 e8c:	4a00f203 	bmi	3d6a0 <startup-0x1ffc2960>
 e90:	0c0367bb 	stceq	7, cr6, [r3], {187}	; 0xbb
 e94:	5969312e 	stmdbpl	r9!, {r1, r2, r3, r5, r8, ip, sp}^
 e98:	3e4c3e5a 	mcrcc	14, 2, r3, cr12, cr10, {2}
 e9c:	6c4c3e4e 	mcrrvs	14, 4, r3, ip, cr14
 ea0:	1503761e 	strne	r7, [r3, #-1566]	; 0xfffff9e2
 ea4:	0b03754a 	bleq	de3d4 <startup-0x1ff21c2c>
 ea8:	4c5c924a 	lfmmi	f1, 3, [ip], {74}	; 0x4a
 eac:	4a1c033d 	bmi	701ba8 <startup-0x1f8fe458>
 eb0:	67740b03 	ldrbvs	r0, [r4, -r3, lsl #22]!
 eb4:	754a1603 	strbvc	r1, [sl, #-1539]	; 0xfffff9fd
 eb8:	4a0c0367 	bmi	301c5c <startup-0x1fcfe3a4>
 ebc:	3e5a5968 	vnmlacc.f16	s11, s20, s17	; <UNPREDICTABLE>
 ec0:	77863e84 	strvc	r3, [r6, r4, lsl #29]
 ec4:	00755959 	rsbseq	r5, r5, r9, asr r9
 ec8:	06010402 	streq	r0, [r1], -r2, lsl #8
 ecc:	5c3e063c 	ldcpl	6, cr0, [lr], #-240	; 0xffffff10
 ed0:	1d033d4d 	stcne	13, cr3, [r3, #-308]	; 0xfffffecc
 ed4:	0b03754a 	bleq	de404 <startup-0x1ff21bfc>
 ed8:	67675982 	strbvs	r5, [r7, -r2, lsl #19]!
 edc:	01000402 	tsteq	r0, r2, lsl #8
 ee0:	Address 0x00000ee0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	706c6c70 	rsbvc	r6, ip, r0, ror ip
       4:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
       8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
       c:	6f640031 	svcvs	0x00640031
      10:	3532726f 	ldrcc	r7, [r2, #-623]!	; 0xfffffd91
      14:	6f6f6400 	svcvs	0x006f6400
      18:	00363272 	eorseq	r3, r6, r2, ror r2
      1c:	5f435452 	svcpl	0x00435452
      20:	50554b57 	subspl	r4, r5, r7, asr fp
      24:	5152495f 	cmppl	r2, pc, asr r9
      28:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
      2c:	5f324954 	svcpl	0x00324954
      30:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      34:	414d4400 	cmpmi	sp, r0, lsl #8
      38:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
      3c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
      40:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
      44:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
      48:	5f384d49 	svcpl	0x00384d49
      4c:	545f5055 	ldrbpl	r5, [pc], #-85	; 54 <startup-0x1fffffac>
      50:	33314d49 	teqcc	r1, #4672	; 0x1240
      54:	5152495f 	cmppl	r2, pc, asr r9
      58:	4c50006e 	mrrcmi	0, 6, r0, r0, cr14	; <UNPREDICTABLE>
      5c:	5332494c 	teqpl	r2, #76, 18	; 0x130000
      60:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
      64:	43435200 	movtmi	r5, #12800	; 0x3200
      68:	5332495f 	teqpl	r2, #1556480	; 0x17c000
      6c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
      70:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      74:	43520067 	cmpmi	r2, #103	; 0x67
      78:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
      7c:	6f6c4374 	svcvs	0x006c4374
      80:	46736b63 	ldrbtmi	r6, [r3], -r3, ror #22
      84:	00716572 	rsbseq	r6, r1, r2, ror r5
      88:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
      8c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
      90:	316d6165 	cmncc	sp, r5, ror #2
      94:	5152495f 	cmppl	r2, pc, asr r9
      98:	4348006e 	movtmi	r0, #32878	; 0x806e
      9c:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
      a0:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
      a4:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
      a8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      ac:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
      b0:	4e5f6450 	mrcmi	4, 2, r6, cr15, cr0, {2}
      b4:	4c55504f 	mrrcmi	0, 4, r5, r5, cr15	; <UNPREDICTABLE>
      b8:	5456004c 	ldrbpl	r0, [r6], #-76	; 0xffffffb4
      bc:	5300524f 	movwpl	r5, #591	; 0x24f
      c0:	5f334950 	svcpl	0x00334950
      c4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      c8:	414c4600 	cmpmi	ip, r0, lsl #12
      cc:	495f4853 	ldmdbmi	pc, {r0, r1, r4, r6, fp, lr}^	; <UNPREDICTABLE>
      d0:	006e5152 	rsbeq	r5, lr, r2, asr r1
      d4:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
      d8:	44003233 	strmi	r3, [r0], #-563	; 0xfffffdcd
      dc:	5f494d43 	svcpl	0x00494d43
      e0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      e4:	43435200 	movtmi	r5, #12800	; 0x3200
      e8:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
      ec:	72655032 	rsbvc	r5, r5, #50	; 0x32
      f0:	43687069 	cmnmi	r8, #105	; 0x69
      f4:	6b636f6c 	blvs	18dbeac <startup-0x1e724154>
      f8:	6f4d504c 	svcvs	0x004d504c
      fc:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     100:	43520064 	cmpmi	r2, #100	; 0x64
     104:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     108:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     10c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     110:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     114:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
     118:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
     11c:	7200646d 	andvc	r6, r0, #1828716544	; 0x6d000000
     120:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
     124:	646f436e 	strbtvs	r4, [pc], #-878	; 12c <startup-0x1ffffed4>
     128:	50470065 	subpl	r0, r7, r5, rrx
     12c:	544f4f49 	strbpl	r4, [pc], #-3913	; 134 <startup-0x1ffffecc>
     130:	5f657079 	svcpl	0x00657079
     134:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     138:	00666544 	rsbeq	r6, r6, r4, asr #10
     13c:	5f434352 	svcpl	0x00434352
     140:	31425041 	cmpcc	r2, r1, asr #32
     144:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     148:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     14c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     150:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     154:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 50 <startup-0x1fffffb0>
     158:	0065646f 	rsbeq	r6, r5, pc, ror #8
     15c:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
     160:	5152495f 	cmppl	r2, pc, asr r9
     164:	4352006e 	cmpmi	r2, #110	; 0x6e
     168:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     16c:	4b4c4343 	blmi	1310e80 <startup-0x1ecef180>
     170:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     174:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     178:	415f4343 	cmpmi	pc, r3, asr #6
     17c:	50324248 	eorspl	r4, r2, r8, asr #4
     180:	70697265 	rsbvc	r7, r9, r5, ror #4
     184:	6f6c4368 	svcvs	0x006c4368
     188:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     18c:	43490064 	movtmi	r0, #36964	; 0x9064
     190:	64005250 	strvs	r5, [r0], #-592	; 0xfffffdb0
     194:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     198:	43435200 	movtmi	r5, #12800	; 0x3200
     19c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     1a0:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     1a4:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     1a8:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     1ac:	004b4c43 	subeq	r4, fp, r3, asr #24
     1b0:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     1b4:	3058525f 	subscc	r5, r8, pc, asr r2
     1b8:	5152495f 	cmppl	r2, pc, asr r9
     1bc:	5355006e 	cmppl	r5, #110	; 0x6e
     1c0:	36545241 	ldrbcc	r5, [r4], -r1, asr #4
     1c4:	5152495f 	cmppl	r2, pc, asr r9
     1c8:	6974006e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6}^
     1cc:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
     1d0:	006d7261 	rsbeq	r7, sp, r1, ror #4
     1d4:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     1d8:	5f38746e 	svcpl	0x0038746e
     1dc:	50530074 	subspl	r0, r3, r4, ror r0
     1e0:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     1e4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     1e8:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     1ec:	4b52425f 	blmi	1490b70 <startup-0x1eb6f490>
     1f0:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     1f4:	495f3231 	ldmdbmi	pc, {r0, r4, r5, r9, ip, sp}^	; <UNPREDICTABLE>
     1f8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     1fc:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     200:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     204:	50470052 	subpl	r0, r7, r2, asr r0
     208:	505f4f49 	subspl	r4, pc, r9, asr #30
     20c:	5f645075 	svcpl	0x00645075
     210:	4e574f44 	cdpmi	15, 5, cr4, cr7, cr4, {2}
     214:	52494100 	subpl	r4, r9, #0, 2
     218:	52005243 	andpl	r5, r0, #805306372	; 0x30000004
     21c:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     220:	4c504941 	mrrcmi	9, 4, r4, r0, cr1	; <UNPREDICTABLE>
     224:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     228:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xfffff3bd
     22c:	6f437669 	svcvs	0x00437669
     230:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     234:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     238:	50475f74 	subpl	r5, r7, r4, ror pc
     23c:	505f4f49 	subspl	r4, pc, r9, asr #30
     240:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
     244:	55504300 	ldrbpl	r4, [r0, #-768]	; 0xfffffd00
     248:	53004449 	movwpl	r4, #1097	; 0x449
     24c:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     250:	485f6b63 	ldmdami	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
     254:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     258:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     25c:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     260:	43434454 	movtmi	r4, #13396	; 0x3454
     264:	69444b4c 	stmdbvs	r4, {r2, r3, r6, r8, r9, fp, lr}^
     268:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     26c:	00676966 	rsbeq	r6, r7, r6, ror #18
     270:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     274:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     278:	356d6165 	strbcc	r6, [sp, #-357]!	; 0xfffffe9b
     27c:	5152495f 	cmppl	r2, pc, asr r9
     280:	5047006e 	subpl	r0, r7, lr, rrx
     284:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 168 <startup-0x1ffffe98>
     288:	5f65646f 	svcpl	0x0065646f
     28c:	52004641 	andpl	r4, r0, #68157440	; 0x4100000
     290:	415f4343 	cmpmi	pc, r3, asr #6
     294:	50334248 	eorspl	r4, r3, r8, asr #4
     298:	70697265 	rsbvc	r7, r9, r5, ror #4
     29c:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     2a0:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     2a4:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
     2a8:	545f314d 	ldrbpl	r3, [pc], #-333	; 2b0 <startup-0x1ffffd50>
     2ac:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     2b0:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 2b8 <startup-0x1ffffd48>
     2b4:	31314d49 	teqcc	r1, r9, asr #26
     2b8:	5152495f 	cmppl	r2, pc, asr r9
     2bc:	5047006e 	subpl	r0, r7, lr, rrx
     2c0:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 1a4 <startup-0x1ffffe5c>
     2c4:	5f65646f 	svcpl	0x0065646f
     2c8:	52004e41 	andpl	r4, r0, #1040	; 0x410
     2cc:	505f4343 	subspl	r4, pc, r3, asr #6
     2d0:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
     2d4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     2d8:	63006769 	movwvs	r6, #1897	; 0x769
     2dc:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     2e0:	69626c6f 	stmdbvs	r2!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
     2e4:	52007374 	andpl	r7, r0, #116, 6	; 0xd0000001
     2e8:	445f4343 	ldrbmi	r4, [pc], #-835	; 2f0 <startup-0x1ffffd10>
     2ec:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     2f0:	43520074 	cmpmi	r2, #116	; 0x74
     2f4:	41535f43 	cmpmi	r3, r3, asr #30
     2f8:	6f6c4249 	svcvs	0x006c4249
     2fc:	43426b63 	movtmi	r6, #11107	; 0x2b63
     300:	6f434b4c 	svcvs	0x00434b4c
     304:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     308:	42504100 	subsmi	r4, r0, #0, 2
     30c:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     310:	43435200 	movtmi	r5, #12800	; 0x3200
     314:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     318:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     31c:	6f534b4c 	svcvs	0x00534b4c
     320:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     324:	42484100 	submi	r4, r8, #0, 2
     328:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
     32c:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     330:	505f4343 	subspl	r4, pc, r3, asr #6
     334:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     338:	76694453 			; <UNDEFINED> instruction: 0x76694453
     33c:	79530051 	ldmdbvc	r3, {r0, r4, r6}^
     340:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     344:	52495f6b 	subpl	r5, r9, #428	; 0x1ac
     348:	52006e51 	andpl	r6, r0, #1296	; 0x510
     34c:	415f4343 	cmpmi	pc, r3, asr #6
     350:	50334248 	eorspl	r4, r3, r8, asr #4
     354:	70697265 	rsbvc	r7, r9, r5, ror #4
     358:	53550068 	cmppl	r5, #104	; 0x68
     35c:	33545241 	cmpcc	r4, #268435460	; 0x10000004
     360:	5152495f 	cmppl	r2, pc, asr r9
     364:	4344006e 	movtmi	r0, #16494	; 0x406e
     368:	4746434b 	strbmi	r4, [r6, -fp, asr #6]
     36c:	43490052 	movtmi	r0, #36946	; 0x9052
     370:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     374:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 270 <startup-0x1ffffd90>
     378:	44324f43 	ldrtmi	r4, [r2], #-3907	; 0xfffff0bd
     37c:	47007669 	strmi	r7, [r0, -r9, ror #12]
     380:	5f4f4950 	svcpl	0x004f4950
     384:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     388:	444f5f65 	strbmi	r5, [pc], #-3941	; 390 <startup-0x1ffffc70>
     38c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     390:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     394:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     398:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     39c:	43520066 	cmpmi	r2, #102	; 0x66
     3a0:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     3a4:	4b4c4353 	blmi	13110f8 <startup-0x1eceef08>
     3a8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     3ac:	44006563 	strmi	r6, [r0], #-1379	; 0xfffffa9d
     3b0:	5f31414d 	svcpl	0x0031414d
     3b4:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     3b8:	5f326d61 	svcpl	0x00326d61
     3bc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     3c0:	43435200 	movtmi	r5, #12800	; 0x3200
     3c4:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     3c8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     3cc:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     3d0:	415f4343 	cmpmi	pc, r3, asr #6
     3d4:	50314250 	eorspl	r4, r1, r0, asr r2
     3d8:	70697265 	rsbvc	r7, r9, r5, ror #4
     3dc:	6f6c4368 	svcvs	0x006c4368
     3e0:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     3e4:	45520064 	ldrbmi	r0, [r2, #-100]	; 0xffffff9c
     3e8:	56524553 			; <UNDEFINED> instruction: 0x56524553
     3ec:	00304445 	eorseq	r4, r0, r5, asr #8
     3f0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     3f4:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     3f8:	6e750031 	mrcvs	0, 3, r0, cr5, cr1, {1}
     3fc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     400:	63206465 			; <UNDEFINED> instruction: 0x63206465
     404:	00726168 	rsbseq	r6, r2, r8, ror #2
     408:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     40c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     410:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
     414:	5152495f 	cmppl	r2, pc, asr r9
     418:	4552006e 	ldrbmi	r0, [r2, #-110]	; 0xffffff92
     41c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     420:	00344445 	eorseq	r4, r4, r5, asr #8
     424:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     428:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     42c:	45520035 	ldrbmi	r0, [r2, #-53]	; 0xffffffcb
     430:	56524553 			; <UNDEFINED> instruction: 0x56524553
     434:	00364445 	eorseq	r4, r6, r5, asr #8
     438:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
     43c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     440:	544f5f4f 	strbpl	r5, [pc], #-3919	; 448 <startup-0x1ffffbb8>
     444:	5f657079 	svcpl	0x00657079
     448:	49005050 	stmdbmi	r0, {r4, r6, ip, lr}
     44c:	5f314332 	svcpl	0x00314332
     450:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     454:	006e5152 	rsbeq	r5, lr, r2, asr r1
     458:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     45c:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
     460:	5152495f 	cmppl	r2, pc, asr r9
     464:	4352006e 	cmpmi	r2, #110	; 0x6e
     468:	534c5f43 	movtpl	r5, #53059	; 0xcf43
     46c:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
     470:	00676966 	rsbeq	r6, r7, r6, ror #18
     474:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     478:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     47c:	45520032 	ldrbmi	r0, [r2, #-50]	; 0xffffffce
     480:	56524553 			; <UNDEFINED> instruction: 0x56524553
     484:	00334445 	eorseq	r4, r3, r5, asr #8
     488:	354d4954 	strbcc	r4, [sp, #-2388]	; 0xfffff6ac
     48c:	5152495f 	cmppl	r2, pc, asr r9
     490:	7355006e 	cmpvc	r5, #110	; 0x6e
     494:	46656761 	strbtmi	r6, [r5], -r1, ror #14
     498:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     49c:	5152495f 	cmppl	r2, pc, asr r9
     4a0:	4353006e 	cmpmi	r3, #110	; 0x6e
     4a4:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
     4a8:	47006570 	smlsdxmi	r0, r0, r5, r6
     4ac:	504f4950 	subpl	r4, pc, r0, asr r9	; <UNPREDICTABLE>
     4b0:	5f645075 	svcpl	0x00645075
     4b4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     4b8:	00666544 	rsbeq	r6, r6, r4, asr #10
     4bc:	52534644 	subspl	r4, r3, #68, 12	; 0x4400000
     4c0:	42484100 	submi	r4, r8, #0, 2
     4c4:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
     4c8:	43520052 	cmpmi	r2, #82	; 0x52
     4cc:	50415f43 	subpl	r5, r1, r3, asr #30
     4d0:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     4d4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     4d8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     4dc:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     4e0:	6f6f6400 	svcvs	0x006f6400
     4e4:	64003172 	strvs	r3, [r0], #-370	; 0xfffffe8e
     4e8:	32726f6f 	rsbscc	r6, r2, #444	; 0x1bc
     4ec:	6f6f6400 	svcvs	0x006f6400
     4f0:	64003372 	strvs	r3, [r0], #-882	; 0xfffffc8e
     4f4:	34726f6f 	ldrbtcc	r6, [r2], #-3951	; 0xfffff091
     4f8:	6f6f6400 	svcvs	0x006f6400
     4fc:	64003572 	strvs	r3, [r0], #-1394	; 0xfffffa8e
     500:	36726f6f 	ldrbtcc	r6, [r2], -pc, ror #30
     504:	6f6f6400 	svcvs	0x006f6400
     508:	64003872 	strvs	r3, [r0], #-2162	; 0xfffff78e
     50c:	39726f6f 	ldmdbcc	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     510:	43435200 	movtmi	r5, #12800	; 0x3200
     514:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     518:	72655033 	rsbvc	r5, r5, #51	; 0x33
     51c:	43687069 	cmnmi	r8, #105	; 0x69
     520:	6b636f6c 	blvs	18dc2d8 <startup-0x1e723d28>
     524:	6f4d504c 	svcvs	0x004d504c
     528:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     52c:	5f5f0064 	svcpl	0x005f0064
     530:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     534:	745f3631 	ldrbvc	r3, [pc], #-1585	; 53c <startup-0x1ffffac4>
     538:	42484100 	submi	r4, r8, #0, 2
     53c:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     540:	4c435000 	marmi	acc0, r5, r3
     544:	465f324b 	ldrbmi	r3, [pc], -fp, asr #4
     548:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
     54c:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     550:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     554:	6f4c5f4f 	svcvs	0x004c5f4f
     558:	70535f77 	subsvc	r5, r3, r7, ror pc
     55c:	00646565 	rsbeq	r6, r4, r5, ror #10
     560:	314e4143 	cmpcc	lr, r3, asr #2
     564:	3058525f 	subscc	r5, r8, pc, asr r2
     568:	5152495f 	cmppl	r2, pc, asr r9
     56c:	3a43006e 	bcc	10c072c <startup-0x1ef3f8d4>
     570:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
     574:	415c7372 	cmpmi	ip, r2, ror r3
     578:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     57c:	656e4f5c 	strbvs	r4, [lr, #-3932]!	; 0xfffff0a4
     580:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     584:	6f445c65 	svcvs	0x00445c65
     588:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     58c:	475c746e 	ldrbmi	r7, [ip, -lr, ror #8]
     590:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     594:	41445c62 	cmpmi	r4, r2, ror #24
     598:	30393254 	eorscc	r3, r9, r4, asr r2
     59c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     5a0:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     5a4:	5c6d6574 	cfstr64pl	mvdx6, [sp], #-464	; 0xfffffe30
     5a8:	5c646f6b 	stclpl	15, cr6, [r4], #-428	; 0xfffffe54
     5ac:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
     5b0:	53464800 	movtpl	r4, #26624	; 0x6800
     5b4:	50470052 	subpl	r0, r7, r2, asr r0
     5b8:	725f4f49 	subsvc	r4, pc, #292	; 0x124
     5bc:	00646165 	rsbeq	r6, r4, r5, ror #2
     5c0:	5f434352 	svcpl	0x00434352
     5c4:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     5c8:	50004b4c 	andpl	r4, r0, ip, asr #22
     5cc:	314b4c43 	cmpcc	fp, r3, asr #24
     5d0:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
     5d4:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
     5d8:	64007963 	strvs	r7, [r0], #-2403	; 0xfffff69d
     5dc:	31726f6f 	cmncc	r2, pc, ror #30
     5e0:	4c500033 	mrrcmi	0, 3, r0, r0, cr3	; <UNPREDICTABLE>
     5e4:	61004d4c 	tstvs	r0, ip, asr #26
     5e8:	645f6c6c 	ldrbvs	r6, [pc], #-3180	; 5f0 <startup-0x1ffffa10>
     5ec:	73726f6f 	cmnvc	r2, #444	; 0x1bc
     5f0:	4c4c5000 	marmi	acc0, r5, ip
     5f4:	4c500050 	mrrcmi	0, 5, r0, r0, cr0	; <UNPREDICTABLE>
     5f8:	5200514c 	andpl	r5, r0, #76, 2
     5fc:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     600:	6d434953 	vstrvs.16	s9, [r3, #-166]	; 0xffffff5a	; <UNPREDICTABLE>
     604:	6c700064 	ldclvs	0, cr0, [r0], #-400	; 0xfffffe70
     608:	756f736c 	strbvc	r7, [pc, #-876]!	; 2a4 <startup-0x1ffffd5c>
     60c:	00656372 	rsbeq	r6, r5, r2, ror r3
     610:	344d4954 	strbcc	r4, [sp], #-2388	; 0xfffff6ac
     614:	5152495f 	cmppl	r2, pc, asr r9
     618:	4e47006e 	cdpmi	0, 4, cr0, cr7, cr14, {3}
     61c:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
     620:	2e372039 	mrccs	0, 1, r2, cr7, cr9, {1}
     624:	20312e32 	eorscs	r2, r1, r2, lsr lr
     628:	37313032 			; <UNDEFINED> instruction: 0x37313032
     62c:	34303930 	ldrtcc	r3, [r0], #-2352	; 0xfffff6d0
     630:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
     634:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     638:	5b202965 	blpl	80abd4 <startup-0x1f7f542c>
     63c:	2f4d5241 	svccs	0x004d5241
     640:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
     644:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
     648:	622d372d 	eorvs	r3, sp, #11796480	; 0xb40000
     64c:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
     650:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
     654:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     658:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
     65c:	30323535 	eorscc	r3, r2, r5, lsr r5
     660:	2d205d34 	stccs	13, cr5, [r0, #-208]!	; 0xffffff30
     664:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
     668:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
     66c:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
     670:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
     674:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
     678:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
     67c:	616f6c66 	cmnvs	pc, r6, ror #24
     680:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
     684:	6f733d69 	svcvs	0x00733d69
     688:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
     68c:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
     690:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
     694:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
     698:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
     69c:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
     6a0:	672d206d 	strvs	r2, [sp, -sp, rrx]!
     6a4:	304f2d20 	subcc	r2, pc, r0, lsr #26
     6a8:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
     6ac:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
     6b0:	6d610039 	stclvs	0, cr0, [r1, #-228]!	; 0xffffff1c
     6b4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     6b8:	6341664f 	movtvs	r6, #5711	; 0x164f
     6bc:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
     6c0:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
     6c4:	43520073 	cmpmi	r2, #115	; 0x73
     6c8:	43485f43 	movtmi	r5, #36675	; 0x8f43
     6cc:	6f434b4c 	svcvs	0x00434b4c
     6d0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     6d4:	43435200 	movtmi	r5, #12800	; 0x3200
     6d8:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
     6dc:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
     6e0:	52006761 	andpl	r6, r0, #25427968	; 0x1840000
     6e4:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     6e8:	6f434553 	svcvs	0x00434553
     6ec:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     6f0:	43444200 	movtmi	r4, #16896	; 0x4200
     6f4:	48530052 	ldmdami	r3, {r1, r4, r6}^
     6f8:	00525343 	subseq	r5, r2, r3, asr #6
     6fc:	5f445650 	svcpl	0x00445650
     700:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     704:	43435200 	movtmi	r5, #12800	; 0x3200
     708:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
     70c:	49545300 	ldmdbmi	r4, {r8, r9, ip, lr}^
     710:	32490052 	subcc	r0, r9, #82	; 0x52
     714:	455f3143 	ldrbmi	r3, [pc, #-323]	; 5d9 <startup-0x1ffffa27>
     718:	52495f56 	subpl	r5, r9, #344	; 0x158
     71c:	52006e51 	andpl	r6, r0, #1296	; 0x510
     720:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     724:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     728:	416b636f 	cmnmi	fp, pc, ror #6
     72c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     730:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     734:	74730067 	ldrbtvc	r0, [r3], #-103	; 0xffffff99
     738:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     73c:	756f6370 	strbvc	r6, [pc, #-880]!	; 3d4 <startup-0x1ffffc2c>
     740:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     744:	43435200 	movtmi	r5, #12800	; 0x3200
     748:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     74c:	43494153 	movtmi	r4, #37203	; 0x9153
     750:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     754:	50470067 	subpl	r0, r7, r7, rrx
     758:	505f4f49 	subspl	r4, pc, r9, asr #30
     75c:	00736e69 	rsbseq	r6, r3, r9, ror #28
     760:	4f495047 	svcmi	0x00495047
     764:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 76c <startup-0x1ffff894>
     768:	554f5f65 	strbpl	r5, [pc, #-3941]	; fffff80b <GPIO_Ports+0xdfffc673>
     76c:	49540054 	ldmdbmi	r4, {r2, r4, r6}^
     770:	435f314d 	cmpmi	pc, #1073741843	; 0x40000013
     774:	52495f43 	subpl	r5, r9, #268	; 0x10c
     778:	48006e51 	stmdami	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     77c:	5f485341 	svcpl	0x00485341
     780:	5f474e52 	svcpl	0x00474e52
     784:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     788:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     78c:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     790:	006e5152 	rsbeq	r5, lr, r2, asr r1
     794:	314e4143 	cmpcc	lr, r3, asr #2
     798:	5f58545f 	svcpl	0x0058545f
     79c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7a0:	414d4400 	cmpmi	sp, r0, lsl #8
     7a4:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     7a8:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     7ac:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     7b0:	52006e51 	andpl	r6, r0, #1296	; 0x510
     7b4:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     7b8:	52004553 	andpl	r4, r0, #348127232	; 0x14c00000
     7bc:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 6b8 <startup-0x1ffff948>
     7c0:	43314f43 	teqmi	r1, #268	; 0x10c
     7c4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     7c8:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
     7cc:	545f384d 	ldrbpl	r3, [pc], #-2125	; 7d4 <startup-0x1ffff82c>
     7d0:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     7d4:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 7dc <startup-0x1ffff824>
     7d8:	34314d49 	ldrtcc	r4, [r1], #-3401	; 0xfffff2b7
     7dc:	5152495f 	cmppl	r2, pc, asr r9
     7e0:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     7e4:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     7e8:	61657274 	smcvs	22308	; 0x5724
     7ec:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     7f0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7f4:	5f47544f 	svcpl	0x0047544f
     7f8:	495f5346 	ldmdbmi	pc, {r1, r2, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     7fc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     800:	4d6e6f4e 	stclmi	15, cr6, [lr, #-312]!	; 0xfffffec8
     804:	616b7361 	cmnvs	fp, r1, ror #6
     808:	49656c62 	stmdbmi	r5!, {r1, r5, r6, sl, fp, sp, lr}^
     80c:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     810:	006e5152 	rsbeq	r5, lr, r2, asr r1
     814:	47445757 	smlsldmi	r5, r4, r7, r7
     818:	5152495f 	cmppl	r2, pc, asr r9
     81c:	544f006e 	strbpl	r0, [pc], #-110	; 824 <startup-0x1ffff7dc>
     820:	53485f47 	movtpl	r5, #36679	; 0x8f47
     824:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
     828:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     82c:	52006e51 	andpl	r6, r0, #1296	; 0x510
     830:	415f4343 	cmpmi	pc, r3, asr #6
     834:	50324250 	eorspl	r4, r2, r0, asr r2
     838:	70697265 	rsbvc	r7, r9, r5, ror #4
     83c:	6f6c4368 	svcvs	0x006c4368
     840:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     844:	43520064 	cmpmi	r2, #100	; 0x64
     848:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     84c:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     850:	51766944 	cmnpl	r6, r4, asr #18
     854:	43435200 	movtmi	r5, #12800	; 0x3200
     858:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     85c:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
     860:	00527669 	subseq	r7, r2, r9, ror #12
     864:	5f434352 	svcpl	0x00434352
     868:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
     86c:	6b636f6c 	blvs	18dc624 <startup-0x1e7239dc>
     870:	4b4c4342 	blmi	1311580 <startup-0x1eceea80>
     874:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     878:	4d006563 	cfstr32mi	mvfx6, [r0, #-396]	; 0xfffffe74
     87c:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
     880:	6e614d79 	mcrvs	13, 3, r4, cr1, cr9, {3}
     884:	6d656761 	stclvs	7, cr6, [r5, #-388]!	; 0xfffffe7c
     888:	5f746e65 	svcpl	0x00746e65
     88c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     890:	73795300 	cmnvc	r9, #0, 6
     894:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     898:	4365726f 	cmnmi	r5, #-268435450	; 0xf0000006
     89c:	6b636f6c 	blvs	18dc654 <startup-0x1e7239ac>
     8a0:	4d415400 	cfstrdmi	mvd5, [r1, #-0]
     8a4:	54535f50 	ldrbpl	r5, [r3], #-3920	; 0xfffff0b0
     8a8:	5f504d41 	svcpl	0x00504d41
     8ac:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8b0:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     8b4:	43535f31 	cmpmi	r3, #49, 30	; 0xc4
     8b8:	52495f45 	subpl	r5, r9, #276	; 0x114
     8bc:	5f006e51 	svcpl	0x00006e51
     8c0:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     8c4:	51524900 	cmppl	r2, r0, lsl #18
     8c8:	79545f6e 	ldmdbvc	r4, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     8cc:	47006570 	smlsdxmi	r0, r0, r5, r6
     8d0:	5f4f4950 	svcpl	0x004f4950
     8d4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     8d8:	004e495f 	subeq	r4, lr, pc, asr r9
     8dc:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     8e0:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     8e4:	306d6165 	rsbcc	r6, sp, r5, ror #2
     8e8:	5152495f 	cmppl	r2, pc, asr r9
     8ec:	4352006e 	cmpmi	r2, #110	; 0x6e
     8f0:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     8f4:	6f43324f 	svcvs	0x0043324f
     8f8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     8fc:	6f6f6400 	svcvs	0x006f6400
     900:	00373272 	eorseq	r3, r7, r2, ror r2
     904:	524b434c 	subpl	r4, fp, #76, 6	; 0x30000001
     908:	43435200 	movtmi	r5, #12800	; 0x3200
     90c:	5332495f 	teqpl	r2, #1556480	; 0x17c000
     910:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     914:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     918:	52450065 	subpl	r0, r5, #101	; 0x65
     91c:	00524f52 	subseq	r4, r2, r2, asr pc
     920:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     924:	5f52455f 	svcpl	0x0052455f
     928:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     92c:	54736d00 	ldrbtpl	r6, [r3], #-3328	; 0xfffff300
     930:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     934:	43435200 	movtmi	r5, #12800	; 0x3200
     938:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
     93c:	6f43314b 	svcvs	0x0043314b
     940:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     944:	50534f00 	subspl	r4, r3, r0, lsl #30
     948:	52444545 	subpl	r4, r4, #289406976	; 0x11400000
     94c:	73754200 	cmnvc	r5, #0, 4
     950:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
     954:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     958:	74006e51 	strvc	r6, [r0], #-3665	; 0xfffff1af
     95c:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     960:	4c4c5000 	marmi	acc0, r5, ip
     964:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     968:	52415500 	subpl	r5, r1, #0, 10
     96c:	495f3554 	ldmdbmi	pc, {r2, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     970:	006e5152 	rsbeq	r5, lr, r2, asr r1
     974:	314d4954 	cmpcc	sp, r4, asr r9
     978:	4b52425f 	blmi	14912fc <startup-0x1eb6ed04>
     97c:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     980:	52495f39 	subpl	r5, r9, #57, 30	; 0xe4
     984:	47006e51 	smlsdmi	r0, r1, lr, r6
     988:	5f4f4950 	svcpl	0x004f4950
     98c:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     990:	5f5f0065 	svcpl	0x005f0065
     994:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     998:	745f3233 	ldrbvc	r3, [pc], #-563	; 9a0 <startup-0x1ffff660>
     99c:	42504100 	subsmi	r4, r0, #0, 2
     9a0:	50424841 	subpl	r4, r2, r1, asr #16
     9a4:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
     9a8:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
     9ac:	50470065 	subpl	r0, r7, r5, rrx
     9b0:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 894 <startup-0x1ffff76c>
     9b4:	75696465 	strbvc	r6, [r9, #-1125]!	; 0xfffffb9b
     9b8:	70535f6d 	subsvc	r5, r3, sp, ror #30
     9bc:	00646565 	rsbeq	r6, r4, r5, ror #10
     9c0:	5f434352 	svcpl	0x00434352
     9c4:	50494153 	subpl	r4, r9, r3, asr r1
     9c8:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     9cc:	6b6c4353 	blvs	1b11720 <startup-0x1e4ee8e0>
     9d0:	43766944 	cmnmi	r6, #68, 18	; 0x110000
     9d4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     9d8:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
     9dc:	495f374d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     9e0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9e4:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     9e8:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     9ec:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
     9f0:	54450074 	strbpl	r0, [r5], #-116	; 0xffffff8c
     9f4:	4b575f48 	blmi	15d871c <startup-0x1ea278e4>
     9f8:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     9fc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a00:	5f47544f 	svcpl	0x0047544f
     a04:	495f5348 	ldmdbmi	pc, {r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     a08:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a0c:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
     a10:	53530052 	cmppl	r3, #82	; 0x52
     a14:	00524743 	subseq	r4, r2, r3, asr #14
     a18:	31495053 	qdaddcc	r5, r3, r9
     a1c:	5152495f 	cmppl	r2, pc, asr r9
     a20:	4944006e 	stmdbmi	r4, {r1, r2, r3, r5, r6}^
     a24:	4c424153 	stfmie	f4, [r2], {83}	; 0x53
     a28:	56530045 	ldrbpl	r0, [r3], -r5, asr #32
     a2c:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
     a30:	5152495f 	cmppl	r2, pc, asr r9
     a34:	5041006e 	subpl	r0, r1, lr, rrx
     a38:	53523242 	cmppl	r2, #536870916	; 0x20000004
     a3c:	42005254 	andmi	r5, r0, #84, 4	; 0x40000005
     a40:	48525253 	ldmdami	r2, {r0, r1, r4, r6, r9, ip, lr}^
     a44:	43435200 	movtmi	r5, #12800	; 0x3200
     a48:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     a4c:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     a50:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     a54:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
     a58:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     a5c:	6b636f6c 	blvs	18dc814 <startup-0x1e7237ec>
     a60:	53420073 	movtpl	r0, #8307	; 0x2073
     a64:	004c5252 	subeq	r5, ip, r2, asr r2
     a68:	4f495047 	svcmi	0x00495047
     a6c:	6769485f 			; <UNDEFINED> instruction: 0x6769485f
     a70:	70535f68 	subsvc	r5, r3, r8, ror #30
     a74:	00646565 	rsbeq	r6, r4, r5, ror #10
     a78:	5f434352 	svcpl	0x00434352
     a7c:	6f435449 	svcvs	0x00435449
     a80:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     a84:	43435200 	movtmi	r5, #12800	; 0x3200
     a88:	4953485f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, fp, lr}^
     a8c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     a90:	5f555046 	svcpl	0x00555046
     a94:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a98:	43435200 	movtmi	r5, #12800	; 0x3200
     a9c:	6a64415f 	bvs	1911020 <startup-0x1e6eefe0>
     aa0:	48747375 	ldmdami	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
     aa4:	61434953 	cmpvs	r3, r3, asr r9
     aa8:	7262696c 	rsbvc	r6, r2, #108, 18	; 0x1b0000
     aac:	6f697461 	svcvs	0x00697461
     ab0:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
     ab4:	55006575 	strpl	r6, [r0, #-1397]	; 0xfffffa8b
     ab8:	34545241 	ldrbcc	r5, [r4], #-577	; 0xfffffdbf
     abc:	5152495f 	cmppl	r2, pc, asr r9
     ac0:	5041006e 	subpl	r0, r1, lr, rrx
     ac4:	504c3242 	subpl	r3, ip, r2, asr #4
     ac8:	00524e45 	subseq	r4, r2, r5, asr #28
     acc:	5f434352 	svcpl	0x00434352
     ad0:	31425041 	cmpcc	r2, r1, asr #32
     ad4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     ad8:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
     adc:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
     ae0:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
     ae4:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     ae8:	00676966 	rsbeq	r6, r7, r6, ror #18
     aec:	5f47544f 	svcpl	0x0047544f
     af0:	575f5346 	ldrbpl	r5, [pc, -r6, asr #6]
     af4:	5f50554b 	svcpl	0x0050554b
     af8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     afc:	43435200 	movtmi	r5, #12800	; 0x3200
     b00:	414c465f 	cmpmi	ip, pc, asr r6
     b04:	43520047 	cmpmi	r2, #71	; 0x47
     b08:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
     b0c:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
     b10:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     b14:	58450073 	stmdapl	r5, {r0, r1, r4, r5, r6}^
     b18:	5f344954 	svcpl	0x00344954
     b1c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     b20:	52544300 	subspl	r4, r4, #0, 6
     b24:	4954004c 	ldmdbmi	r4, {r2, r3, r6}^
     b28:	445f364d 	ldrbmi	r3, [pc], #-1613	; b30 <startup-0x1ffff4d0>
     b2c:	495f4341 	ldmdbmi	pc, {r0, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     b30:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b34:	5377654e 	cmnpl	r7, #327155712	; 0x13800000
     b38:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     b3c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     b40:	70535f4f 	subsvc	r5, r3, pc, asr #30
     b44:	00646565 	rsbeq	r6, r4, r5, ror #10
     b48:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     b4c:	5f56455f 	svcpl	0x0056455f
     b50:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     b54:	43435200 	movtmi	r5, #12800	; 0x3200
     b58:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
     b5c:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
     b60:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
     b64:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
     b68:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     b6c:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     b70:	6b636f6c 	blvs	18dc928 <startup-0x1e7236d8>
     b74:	75636553 	strbvc	r6, [r3, #-1363]!	; 0xfffffaad
     b78:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     b7c:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
     b80:	6d436d65 	stclvs	13, cr6, [r3, #-404]	; 0xfffffe6c
     b84:	43520064 	cmpmi	r2, #100	; 0x64
     b88:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     b8c:	4b4c434d 	blmi	13118c8 <startup-0x1ecee738>
     b90:	73657250 	cmnvc	r5, #80, 4
     b94:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     b98:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     b9c:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     ba0:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     ba4:	416b636f 	cmnmi	fp, pc, ror #6
     ba8:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     bac:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     bb0:	79730065 	ldmdbvc	r3!, {r0, r2, r5, r6}^
     bb4:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
     bb8:	6e495f6b 	cdpvs	15, 4, cr5, cr9, cr11, {3}
     bbc:	73007469 	movwvc	r7, #1129	; 0x469
     bc0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     bc4:	67657273 			; <UNDEFINED> instruction: 0x67657273
     bc8:	43435200 	movtmi	r5, #12800	; 0x3200
     bcc:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     bd0:	72655032 	rsbvc	r5, r5, #50	; 0x32
     bd4:	00687069 	rsbeq	r7, r8, r9, rrx
     bd8:	52414642 	subpl	r4, r1, #69206016	; 0x4200000
     bdc:	42504100 	subsmi	r4, r0, #0, 2
     be0:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
     be4:	4400524e 	strmi	r5, [r0], #-590	; 0xfffffdb2
     be8:	5f31414d 	svcpl	0x0031414d
     bec:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     bf0:	5f316d61 	svcpl	0x00316d61
     bf4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     bf8:	74636100 	strbtvc	r6, [r3], #-256	; 0xffffff00
     bfc:	5f657669 	svcpl	0x00657669
     c00:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     c04:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
     c08:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     c0c:	61657274 	smcvs	22308	; 0x5724
     c10:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     c14:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c18:	41474b43 	cmpmi	r7, r3, asr #22
     c1c:	524e4554 	subpl	r4, lr, #84, 10	; 0x15000000
     c20:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     c24:	58545f32 	ldmdapl	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     c28:	5152495f 	cmppl	r2, pc, asr r9
     c2c:	4c50006e 	mrrcmi	0, 6, r0, r0, cr14	; <UNPREDICTABLE>
     c30:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     c34:	4c50004e 	mrrcmi	0, 4, r0, r0, cr14	; <UNPREDICTABLE>
     c38:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     c3c:	4c500051 	mrrcmi	0, 5, r0, r0, cr1	; <UNPREDICTABLE>
     c40:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     c44:	43520052 	cmpmi	r2, #82	; 0x52
     c48:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     c4c:	6f53314f 	svcvs	0x0053314f
     c50:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     c54:	43435200 	movtmi	r5, #12800	; 0x3200
     c58:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     c5c:	72655033 	rsbvc	r5, r5, #51	; 0x33
     c60:	43687069 	cmnmi	r8, #105	; 0x69
     c64:	6b636f6c 	blvs	18dca1c <startup-0x1e7235e4>
     c68:	00646d43 	rsbeq	r6, r4, r3, asr #26
     c6c:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
     c70:	5f6b6369 	svcpl	0x006b6369
     c74:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     c78:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
     c7c:	65635f65 	strbvs	r5, [r3, #-3941]!	; 0xfffff09b
     c80:	6172746e 	cmnvs	r2, lr, ror #8
     c84:	616c5f6c 	cmnvs	ip, ip, ror #30
     c88:	52006d72 	andpl	r6, r0, #7296	; 0x1c80
     c8c:	505f4343 	subspl	r4, pc, r3, asr #6
     c90:	6d434c4c 	stclvs	12, cr4, [r3, #-304]	; 0xfffffed0
     c94:	43520064 	cmpmi	r2, #100	; 0x64
     c98:	61425f43 	cmpvs	r2, r3, asr #30
     c9c:	70756b63 	rsbsvc	r6, r5, r3, ror #22
     ca0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     ca4:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     ca8:	42484100 	submi	r4, r8, #0, 2
     cac:	54535233 	ldrbpl	r5, [r3], #-563	; 0xfffffdcd
     cb0:	72450052 	subvc	r0, r5, #82	; 0x52
     cb4:	53726f72 	cmnpl	r2, #456	; 0x1c8
     cb8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     cbc:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
     cc0:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     cc4:	61657274 	smcvs	22308	; 0x5724
     cc8:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
     ccc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cd0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     cd4:	00707574 	rsbseq	r7, r0, r4, ror r5
     cd8:	5f434352 	svcpl	0x00434352
     cdc:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
     ce0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     ce4:	41006563 	tstmi	r0, r3, ror #10
     ce8:	52314250 	eorspl	r4, r1, #80, 4
     cec:	00525453 	subseq	r5, r2, r3, asr r4
     cf0:	5f435452 	svcpl	0x00435452
     cf4:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
     cf8:	52495f6d 	subpl	r5, r9, #436	; 0x1b4
     cfc:	41006e51 	tstmi	r0, r1, asr lr
     d00:	45314250 	ldrmi	r4, [r1, #-592]!	; 0xfffffdb0
     d04:	4e00524e 	cdpmi	2, 0, cr5, cr0, cr14, {2}
     d08:	5f434956 	svcpl	0x00434956
     d0c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     d10:	6e754600 	cdpvs	6, 7, cr4, cr5, cr0, {0}
     d14:	6f697463 	svcvs	0x00697463
     d18:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
     d1c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     d20:	43324900 	teqmi	r2, #0, 18
     d24:	52455f33 	subpl	r5, r5, #51, 30	; 0xcc
     d28:	5152495f 	cmppl	r2, pc, asr r9
     d2c:	5243006e 	subpl	r0, r3, #110	; 0x6e
     d30:	495f5059 	ldmdbmi	pc, {r0, r3, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     d34:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d38:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     d3c:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
     d40:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     d44:	6c006e51 	stcvs	14, cr6, [r0], {81}	; 0x51
     d48:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     d4c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     d50:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     d54:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     d58:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     d5c:	43520074 	cmpmi	r2, #116	; 0x74
     d60:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     d64:	6944314f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r8, ip, sp}^
     d68:	49540076 	ldmdbmi	r4, {r1, r2, r4, r5, r6}^
     d6c:	495f334d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     d70:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d74:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     d78:	495f3154 	ldmdbmi	pc, {r2, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     d7c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d80:	5f434352 	svcpl	0x00434352
     d84:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     d88:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
     d8c:	74534553 	ldrbvc	r4, [r3], #-1363	; 0xfffffaad
     d90:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0xfffffd9f
     d94:	55530070 	ldrbpl	r0, [r3, #-112]	; 0xffffff90
     d98:	53454343 	movtpl	r4, #21315	; 0x5343
     d9c:	50470053 	subpl	r0, r7, r3, asr r0
     da0:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; c84 <startup-0x1ffff37c>
     da4:	0065646f 	rsbeq	r6, r5, pc, ror #8
     da8:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     dac:	3158525f 	cmpcc	r8, pc, asr r2
     db0:	5152495f 	cmppl	r2, pc, asr r9
     db4:	4441006e 	strbmi	r0, [r1], #-110	; 0xffffff92
     db8:	52495f43 	subpl	r5, r9, #268	; 0x10c
     dbc:	52006e51 	andpl	r6, r0, #1296	; 0x510
     dc0:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     dc4:	6f4d4553 	svcvs	0x004d4553
     dc8:	6f436564 	svcvs	0x00436564
     dcc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     dd0:	45434900 	strbmi	r4, [r3, #-2304]	; 0xfffff700
     dd4:	48410052 	stmdami	r1, {r1, r4, r6}^
     dd8:	504c3342 	subpl	r3, ip, r2, asr #6
     ddc:	00524e45 	subseq	r4, r2, r5, asr #28
     de0:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     de4:	64003031 	strvs	r3, [r0], #-49	; 0xffffffcf
     de8:	31726f6f 	cmncc	r2, pc, ror #30
     dec:	6f640031 	svcvs	0x00640031
     df0:	3231726f 	eorscc	r7, r1, #-268435450	; 0xf0000006
     df4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     df8:	646f4d4f 	strbtvs	r4, [pc], #-3407	; e00 <startup-0x1ffff200>
     dfc:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     e00:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     e04:	6f640066 	svcvs	0x00640066
     e08:	3431726f 	ldrtcc	r7, [r1], #-623	; 0xfffffd91
     e0c:	6f6f6400 	svcvs	0x006f6400
     e10:	00353172 	eorseq	r3, r5, r2, ror r1
     e14:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     e18:	64003631 	strvs	r3, [r0], #-1585	; 0xfffff9cf
     e1c:	31726f6f 	cmncc	r2, pc, ror #30
     e20:	6f640038 	svcvs	0x00640038
     e24:	3931726f 	ldmdbcc	r1!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
     e28:	73795300 	cmnvc	r9, #0, 6
     e2c:	6b636954 	blvs	18db384 <startup-0x1e724c7c>
     e30:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     e34:	00676966 	rsbeq	r6, r7, r6, ror #18
     e38:	552f3a43 	strpl	r3, [pc, #-2627]!	; 3fd <startup-0x1ffffc03>
     e3c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     e40:	6164412f 	cmnvs	r4, pc, lsr #2
     e44:	4f2f746d 	svcmi	0x002f746d
     e48:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     e4c:	2f657669 	svccs	0x00657669
     e50:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     e54:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     e58:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     e5c:	2f627548 	svccs	0x00627548
     e60:	32544144 	subscc	r4, r4, #68, 2
     e64:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     e68:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     e6c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     e70:	6f6b2f6d 	svcvs	0x006b2f6d
     e74:	6f442f64 	svcvs	0x00442f64
     e78:	732f726f 			; <UNDEFINED> instruction: 0x732f726f
     e7c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     e80:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
     e84:	53464100 	movtpl	r4, #24832	; 0x6100
     e88:	544f0052 	strbpl	r0, [pc], #-82	; e90 <startup-0x1ffff170>
     e8c:	52455059 	subpl	r5, r5, #89	; 0x59
     e90:	4c414300 	mcrrmi	3, 0, r4, r1, cr0
     e94:	74004249 	strvc	r4, [r0], #-585	; 0xfffffdb7
     e98:	00656d69 	rsbeq	r6, r5, r9, ror #26
     e9c:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
     ea0:	46006765 	strmi	r6, [r0], -r5, ror #14
     ea4:	5f434d53 	svcpl	0x00434d53
     ea8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     eac:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     eb0:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
     eb4:	5f304954 	svcpl	0x00304954
     eb8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ebc:	4b434400 	blmi	10d1ec4 <startup-0x1ef2e13c>
     ec0:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     ec4:	46430032 			; <UNDEFINED> instruction: 0x46430032
     ec8:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     ecc:	415f4343 	cmpmi	pc, r3, asr #6
     ed0:	50314248 	eorspl	r4, r1, r8, asr #4
     ed4:	70697265 	rsbvc	r7, r9, r5, ror #4
     ed8:	73680068 	cmnvc	r8, #104	; 0x68
     edc:	61747365 	cmnvs	r4, r5, ror #6
     ee0:	00737574 	rsbseq	r7, r3, r4, ror r5
     ee4:	31414d44 	cmpcc	r1, r4, asr #26
     ee8:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     eec:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
     ef0:	5152495f 	cmppl	r2, pc, asr r9
     ef4:	6f64006e 	svcvs	0x0064006e
     ef8:	3032726f 	eorscc	r7, r2, pc, ror #4
     efc:	6f6f6400 	svcvs	0x006f6400
     f00:	00313272 	eorseq	r3, r1, r2, ror r2
     f04:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     f08:	64003232 	strvs	r3, [r0], #-562	; 0xfffffdce
     f0c:	32726f6f 	rsbscc	r6, r2, #444	; 0x1bc
     f10:	6f640033 	svcvs	0x00640033
     f14:	3432726f 	ldrtcc	r7, [r2], #-623	; 0xfffffd91
     f18:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     f1c:	616c5f4f 	cmnvs	ip, pc, asr #30
     f20:	4400706d 	strmi	r7, [r0], #-109	; 0xffffff93
     f24:	5f32414d 	svcpl	0x0032414d
     f28:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     f2c:	5f366d61 	svcpl	0x00366d61
     f30:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f34:	42484100 	submi	r4, r8, #0, 2
     f38:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
     f3c:	6f6f6400 	svcvs	0x006f6400
     f40:	00383272 	eorseq	r3, r8, r2, ror r2
     f44:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     f48:	4c003932 			; <UNDEFINED> instruction: 0x4c003932
     f4c:	0044414f 	subeq	r4, r4, pc, asr #2
     f50:	4f495047 	svcmi	0x00495047
     f54:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     f58:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     f5c:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     f60:	65440066 	strbvs	r0, [r4, #-102]	; 0xffffff9a
     f64:	4d677562 	cfstr64mi	mvdx7, [r7, #-392]!	; 0xfffffe78
     f68:	74696e6f 	strbtvc	r6, [r9], #-3695	; 0xfffff191
     f6c:	495f726f 	ldmdbmi	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     f70:	006e5152 	rsbeq	r5, lr, r2, asr r1
     f74:	4f495047 	svcmi	0x00495047
     f78:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     f7c:	43435200 	movtmi	r5, #12800	; 0x3200
     f80:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     f84:	72655031 	rsbvc	r5, r5, #49	; 0x31
     f88:	52687069 	rsbpl	r7, r8, #105	; 0x69
     f8c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     f90:	00646d43 	rsbeq	r6, r4, r3, asr #26
     f94:	33433249 	movtcc	r3, #12873	; 0x3249
     f98:	5f56455f 	svcpl	0x0056455f
     f9c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     fa0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     fa4:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     fa8:	41006450 	tstmi	r0, r0, asr r4
     fac:	52324248 	eorspl	r4, r2, #72, 4	; 0x80000004
     fb0:	00525453 	subseq	r5, r2, r3, asr r4
     fb4:	5f485445 	svcpl	0x00485445
     fb8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     fbc:	43435200 	movtmi	r5, #12800	; 0x3200
     fc0:	6f6c435f 	svcvs	0x006c435f
     fc4:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
     fc8:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     fcc:	4d006665 	stcmi	6, cr6, [r0, #-404]	; 0xfffffe6c
     fd0:	0052464d 	subseq	r4, r2, sp, asr #12
     fd4:	5f434352 	svcpl	0x00434352
     fd8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     fdc:	00666544 	rsbeq	r6, r6, r4, asr #10
     fe0:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     fe4:	64003033 	strvs	r3, [r0], #-51	; 0xffffffcd
     fe8:	33726f6f 	cmncc	r2, #444	; 0x1bc
     fec:	4d4d0031 	stclmi	0, cr0, [sp, #-196]	; 0xffffff3c
     ff0:	00524146 	subseq	r4, r2, r6, asr #2
     ff4:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     ff8:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     ffc:	61700074 	cmnvs	r0, r4, ror r0
    1000:	6f777373 	svcvs	0x00777373
    1004:	52006472 	andpl	r6, r0, #1912602624	; 0x72000000
    1008:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    100c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1010:	5f434352 	svcpl	0x00434352
    1014:	49005449 	stmdbmi	r0, {r0, r3, r6, sl, ip, lr}
    1018:	00524153 	subseq	r4, r2, r3, asr r1
    101c:	4f495047 	svcmi	0x00495047
    1020:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1024:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
    1028:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    102c:	61657274 	smcvs	22308	; 0x5724
    1030:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    1034:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1038:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    103c:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    1040:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1044:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1048:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    104c:	4e450073 	mcrmi	0, 2, r0, cr5, cr3, {3}
    1050:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
    1054:	6c6c7000 	stclvs	0, cr7, [ip], #-0
    1058:	006f6376 	rsbeq	r6, pc, r6, ror r3	; <UNPREDICTABLE>
    105c:	5f434352 	svcpl	0x00434352
    1060:	31425041 	cmpcc	r2, r1, asr #32
    1064:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1068:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    106c:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    1070:	646f4d50 	strbtvs	r4, [pc], #-3408	; 1078 <startup-0x1fffef88>
    1074:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
    1078:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    107c:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1080:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    1084:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    1088:	555f314d 	ldrbpl	r3, [pc, #-333]	; f43 <startup-0x1ffff0bd>
    108c:	49545f50 	ldmdbmi	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    1090:	5f30314d 	svcpl	0x0030314d
    1094:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1098:	4d544900 	vldrmi.16	s9, [r4, #-0]	; <UNPREDICTABLE>
    109c:	4278525f 	rsbsmi	r5, r8, #-268435451	; 0xf0000005
    10a0:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    10a4:	4c500072 	mrrcmi	0, 7, r0, r0, cr2	; <UNPREDICTABLE>
    10a8:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    10ac:	4352004e 	cmpmi	r2, #78	; 0x4e
    10b0:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    10b4:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    10b8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    10bc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    10c0:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    10c4:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    10c8:	5000646d 	andpl	r6, r0, sp, ror #8
    10cc:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    10d0:	6d005253 	sfmvs	f5, 4, [r0, #-332]	; 0xfffffeb4
    10d4:	006e6961 	rsbeq	r6, lr, r1, ror #18
    10d8:	696c696d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    10dc:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
    10e0:	5f53485f 	svcpl	0x0053485f
    10e4:	5f315045 	svcpl	0x00315045
    10e8:	5f54554f 	svcpl	0x0054554f
    10ec:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    10f0:	72616c00 	rsbvc	r6, r1, #0, 24
    10f4:	6369546d 	cmnvs	r9, #1828716544	; 0x6d000000
    10f8:	4352006b 	cmpmi	r2, #107	; 0x6b
    10fc:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
    1100:	4b4c4343 	blmi	1311e14 <startup-0x1ecee1ec>
    1104:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1108:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
    110c:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    1110:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1114:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    1118:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    111c:	43007974 	movwmi	r7, #2420	; 0x974
    1120:	5f314e41 	svcpl	0x00314e41
    1124:	5f315852 	svcpl	0x00315852
    1128:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    112c:	43435200 	movtmi	r5, #12800	; 0x3200
    1130:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1134:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1138:	00687069 	rsbeq	r7, r8, r9, rrx
    113c:	4f495047 	svcmi	0x00495047
    1140:	5075505f 	rsbspl	r5, r5, pc, asr r0
    1144:	50555f64 	subspl	r5, r5, r4, ror #30
    1148:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    114c:	355f3949 	ldrbcc	r3, [pc, #-2377]	; 80b <startup-0x1ffff7f5>
    1150:	5152495f 	cmppl	r2, pc, asr r9
    1154:	4c50006e 	mrrcmi	0, 6, r0, r0, cr14	; <UNPREDICTABLE>
    1158:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    115c:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
    1160:	4c4c5000 	marmi	acc0, r5, ip
    1164:	4352004e 	cmpmi	r2, #78	; 0x4e
    1168:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    116c:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    1170:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1174:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1178:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    117c:	6f687300 	svcvs	0x00687300
    1180:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
    1184:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
    1188:	2064656e 	rsbcs	r6, r4, lr, ror #10
    118c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1190:	5f434352 	svcpl	0x00434352
    1194:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    1198:	6f435332 	svcvs	0x00435332
    119c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    11a0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    11a4:	43435f38 	movtmi	r5, #16184	; 0x3f38
    11a8:	5152495f 	cmppl	r2, pc, asr r9
    11ac:	4453006e 	ldrbmi	r0, [r3], #-110	; 0xffffff92
    11b0:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    11b4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    11b8:	43415043 	movtmi	r5, #4163	; 0x1043
    11bc:	6f640052 	svcvs	0x00640052
    11c0:	3731726f 	ldrcc	r7, [r1, -pc, ror #4]!
    11c4:	50534900 	subspl	r4, r3, r0, lsl #18
    11c8:	59530052 	ldmdbpl	r3, {r1, r4, r6}^
    11cc:	4b4c4353 	blmi	1311f20 <startup-0x1ecee0e0>
    11d0:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
    11d4:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    11d8:	45007963 	strmi	r7, [r0, #-2403]	; 0xfffff69d
    11dc:	33495458 	movtcc	r5, #37976	; 0x9458
    11e0:	5152495f 	cmppl	r2, pc, asr r9
    11e4:	6550006e 	ldrbvs	r0, [r0, #-110]	; 0xffffff92
    11e8:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
    11ec:	5152495f 	cmppl	r2, pc, asr r9
    11f0:	544f006e 	strbpl	r0, [pc], #-110	; 11f8 <startup-0x1fffee08>
    11f4:	53485f47 	movtpl	r5, #36679	; 0x8f47
    11f8:	3150455f 	cmpcc	r0, pc, asr r5
    11fc:	5f4e495f 	svcpl	0x004e495f
    1200:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1204:	414d4400 	cmpmi	sp, r0, lsl #8
    1208:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
    120c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1210:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
    1214:	5f006e51 	svcpl	0x00006e51
    1218:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    121c:	745f3233 	ldrbvc	r3, [pc], #-563	; 1224 <startup-0x1fffeddc>
    1220:	43435200 	movtmi	r5, #12800	; 0x3200
    1224:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    1228:	504b4c43 	subpl	r4, fp, r3, asr #24
    122c:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1230:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1234:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0xfffff700
    1238:	72700052 	rsbsvc	r0, r0, #82	; 0x52
    123c:	00637365 	rsbeq	r7, r3, r5, ror #6
    1240:	5f434352 	svcpl	0x00434352
    1244:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    1248:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    124c:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    1250:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1254:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1258:	505f4343 	subspl	r4, pc, r3, asr #6
    125c:	41534c4c 	cmpmi	r3, ip, asr #24
    1260:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
    1264:	42484100 	submi	r4, r8, #0, 2
    1268:	524e4533 	subpl	r4, lr, #213909504	; 0xcc00000
    126c:	43435200 	movtmi	r5, #12800	; 0x3200
    1270:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    1274:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1278:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    127c:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    1280:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    1284:	61657274 	smcvs	22308	; 0x5724
    1288:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    128c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1290:	4f495047 	svcmi	0x00495047
    1294:	7361465f 	cmnvc	r1, #99614720	; 0x5f00000
    1298:	70535f74 	subsvc	r5, r3, r4, ror pc
    129c:	00646565 	rsbeq	r6, r4, r5, ror #10
    12a0:	5f434352 	svcpl	0x00434352
    12a4:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    12a8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    12ac:	6c700067 	ldclvs	0, cr0, [r0], #-412	; 0xfffffe64
    12b0:	70006d6c 	andvc	r6, r0, ip, ror #26
    12b4:	6f706e69 	svcvs	0x00706e69
    12b8:	69420073 	stmdbvs	r2, {r0, r1, r4, r5, r6}^
    12bc:	45535f74 	ldrbmi	r5, [r3, #-3956]	; 0xfffff08c
    12c0:	50470054 	subpl	r0, r7, r4, asr r0
    12c4:	525f4f49 	subspl	r4, pc, #292	; 0x124
    12c8:	4f646165 	svcmi	0x00646165
    12cc:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    12d0:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    12d4:	50470061 	subpl	r0, r7, r1, rrx
    12d8:	415f4f49 	cmpmi	pc, r9, asr #30
    12dc:	65740046 	ldrbvs	r0, [r4, #-70]!	; 0xffffffba
    12e0:	4700706d 	strmi	r7, [r0, -sp, rrx]
    12e4:	5f4f4950 	svcpl	0x004f4950
    12e8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    12ec:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    12f0:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
    12f4:	61567469 	cmpvs	r6, r9, ror #8
    12f8:	6942006c 	stmdbvs	r2, {r2, r3, r5, r6}^
    12fc:	45525f74 	ldrbmi	r5, [r2, #-3956]	; 0xfffff08c
    1300:	00544553 	subseq	r4, r4, r3, asr r5
    1304:	4f495047 	svcmi	0x00495047
    1308:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    130c:	69426574 	stmdbvs	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1310:	50470074 	subpl	r0, r7, r4, ror r0
    1314:	535f4f49 	cmppl	pc, #292	; 0x124
    1318:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    131c:	47007374 	smlsdxmi	r0, r4, r3, r7
    1320:	5f4f4950 	svcpl	0x004f4950
    1324:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1328:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    132c:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    1330:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
    1334:	00737469 	rsbseq	r7, r3, r9, ror #8
    1338:	552f3a43 	strpl	r3, [pc, #-2627]!	; 8fd <startup-0x1ffff703>
    133c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1340:	6164412f 	cmnvs	r4, pc, lsr #2
    1344:	4f2f746d 	svcmi	0x002f746d
    1348:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    134c:	2f657669 	svccs	0x00657669
    1350:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    1354:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1358:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    135c:	2f627548 	svccs	0x00627548
    1360:	32544144 	subscc	r4, r4, #68, 2
    1364:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1368:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    136c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1370:	6f6b2f6d 	svcvs	0x006b2f6d
    1374:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1378:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    137c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1380:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1384:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1388:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    138c:	5f787834 	svcpl	0x00787834
    1390:	50647453 	rsbpl	r7, r4, r3, asr r4
    1394:	70697265 	rsbvc	r7, r9, r5, ror #4
    1398:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    139c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    13a0:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    13a4:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    13a8:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    13ac:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
    13b0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    13b4:	50470063 	subpl	r0, r7, r3, rrx
    13b8:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 13c0 <startup-0x1fffec40>
    13bc:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    13c0:	50470074 	subpl	r0, r7, r4, ror r0
    13c4:	525f4f49 	subspl	r4, pc, #292	; 0x124
    13c8:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    13cc:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    13d0:	61746144 	cmnvs	r4, r4, asr #2
    13d4:	00746942 	rsbseq	r6, r4, r2, asr #18
    13d8:	4f495047 	svcmi	0x00495047
    13dc:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    13e0:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    13e4:	00746375 	rsbseq	r6, r4, r5, ror r3
    13e8:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    13ec:	006c6156 	rsbeq	r6, ip, r6, asr r1
    13f0:	4f495047 	svcmi	0x00495047
    13f4:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    13f8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    13fc:	47006563 	strmi	r6, [r0, -r3, ror #10]
    1400:	5f4f4950 	svcpl	0x004f4950
    1404:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1408:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    140c:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1410:	50470061 	subpl	r0, r7, r1, rrx
    1414:	505f4f49 	subspl	r4, pc, r9, asr #30
    1418:	6f4c6e69 	svcvs	0x004c6e69
    141c:	6f436b63 	svcvs	0x00436b63
    1420:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1424:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    1428:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    142c:	63006e6f 	movwvs	r6, #3695	; 0xe6f
    1430:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    1434:	6970746e 	ldmdbvs	r0!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1438:	5047006e 	subpl	r0, r7, lr, rrx
    143c:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    1440:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1444:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1448:	4700784f 	strmi	r7, [r0, -pc, asr #16]
    144c:	5f4f4950 	svcpl	0x004f4950
    1450:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
    1454:	6942656c 	stmdbvs	r2, {r2, r3, r5, r6, r8, sl, sp, lr}^
    1458:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    145c:	5f706d65 	svcpl	0x00706d65
    1460:	50470032 	subpl	r0, r7, r2, lsr r0
    1464:	505f4f49 	subspl	r4, pc, r9, asr #30
    1468:	46416e69 	strbmi	r6, [r1], -r9, ror #28
    146c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1470:	47006769 	strmi	r6, [r0, -r9, ror #14]
    1474:	5f4f4950 	svcpl	0x004f4950
    1478:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    147c:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1480:	61447475 	hvcvs	18245	; 0x4745
    1484:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
    1488:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
    148c:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1490:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
    1494:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1498:	4e006665 	cfmadd32mi	mvax3, mvfx6, mvfx0, mvfx5
    149c:	5f434956 	svcpl	0x00434956
    14a0:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    14a4:	6e6e6168 	powvsez	f6, f6, #0.0
    14a8:	6d436c65 	stclvs	12, cr6, [r3, #-404]	; 0xfffffe6c
    14ac:	79530064 	ldmdbvc	r3, {r2, r5, r6}^
    14b0:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    14b4:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
    14b8:	756f534b 	strbvc	r5, [pc, #-843]!	; 1175 <startup-0x1fffee8b>
    14bc:	00656372 	rsbeq	r6, r5, r2, ror r3
    14c0:	4349564e 	movtmi	r5, #38478	; 0x964e
    14c4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    14c8:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    14cc:	00746375 	rsbseq	r6, r4, r5, ror r3
    14d0:	4349564e 	movtmi	r5, #38478	; 0x964e
    14d4:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    14d8:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    14dc:	6f724779 	svcvs	0x00724779
    14e0:	4e007075 	mcrmi	0, 0, r7, cr0, cr5, {3}
    14e4:	5f434956 	svcpl	0x00434956
    14e8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    14ec:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    14f0:	00657270 	rsbeq	r7, r5, r0, ror r2
    14f4:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    14f8:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    14fc:	5f434956 	svcpl	0x00434956
    1500:	56746553 			; <UNDEFINED> instruction: 0x56746553
    1504:	6f746365 	svcvs	0x00746365
    1508:	62615472 	rsbvs	r5, r1, #1912602624	; 0x72000000
    150c:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
    1510:	7573706d 	ldrbvc	r7, [r3, #-109]!	; 0xffffff93
    1514:	564e0062 	strbpl	r0, [lr], -r2, rrx
    1518:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    151c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1520:	43504c6d 	cmpmi	r0, #27904	; 0x6d00
    1524:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1528:	79530067 	ldmdbvc	r3, {r0, r1, r2, r5, r6}^
    152c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1530:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
    1534:	756f534b 	strbvc	r5, [pc, #-843]!	; 11f1 <startup-0x1fffee0f>
    1538:	43656372 	cmnmi	r5, #-939524095	; 0xc8000001
    153c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1540:	6d740067 	ldclvs	0, cr0, [r4, #-412]!	; 0xfffffe64
    1544:	69727070 	ldmdbvs	r2!, {r4, r5, r6, ip, sp, lr}^
    1548:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    154c:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    1550:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1554:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1558:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    155c:	564e006c 	strbpl	r0, [lr], -ip, rrx
    1560:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1564:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1568:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    156c:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
    1570:	6f697250 	svcvs	0x00697250
    1574:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1578:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    157c:	52495f43 	subpl	r5, r9, #268	; 0x10c
    1580:	61684351 	cmnvs	r8, r1, asr r3
    1584:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1588:	65657250 	strbvs	r7, [r5, #-592]!	; 0xfffffdb0
    158c:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    1590:	72506e6f 	subsvc	r6, r0, #1776	; 0x6f0
    1594:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1598:	4e007974 			; <UNDEFINED> instruction: 0x4e007974
    159c:	5f434956 	svcpl	0x00434956
    15a0:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    15a4:	00626154 	rsbeq	r6, r2, r4, asr r1
    15a8:	552f3a43 	strpl	r3, [pc, #-2627]!	; b6d <startup-0x1ffff493>
    15ac:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    15b0:	6164412f 	cmnvs	r4, pc, lsr #2
    15b4:	4f2f746d 	svcmi	0x002f746d
    15b8:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    15bc:	2f657669 	svccs	0x00657669
    15c0:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    15c4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    15c8:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    15cc:	2f627548 	svccs	0x00627548
    15d0:	32544144 	subscc	r4, r4, #68, 2
    15d4:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    15d8:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    15dc:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    15e0:	6f6b2f6d 	svcvs	0x006b2f6d
    15e4:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    15e8:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    15ec:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    15f0:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    15f4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    15f8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    15fc:	5f787834 	svcpl	0x00787834
    1600:	50647453 	rsbpl	r7, r4, r3, asr r4
    1604:	70697265 	rsbvc	r7, r9, r5, ror #4
    1608:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    160c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1610:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1614:	73696d2f 	cmnvc	r9, #3008	; 0xbc0
    1618:	00632e63 	rsbeq	r2, r3, r3, ror #28
    161c:	50776f4c 	rsbspl	r6, r7, ip, asr #30
    1620:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    1624:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1628:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    162c:	72505f43 	subsvc	r5, r0, #268	; 0x10c
    1630:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1634:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
    1638:	4370756f 	cmnmi	r0, #465567744	; 0x1bc00000
    163c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1640:	75620067 	strbvc	r0, [r2, #-103]!	; 0xffffff99
    1644:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1648:	00747550 	rsbseq	r7, r4, r0, asr r5
    164c:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    1650:	3a430074 	bcc	10c1828 <startup-0x1ef3e7d8>
    1654:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    1658:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
    165c:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
    1660:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
    1664:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1668:	6f442f65 	svcvs	0x00442f65
    166c:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
    1670:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
    1674:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
    1678:	41442f62 	cmpmi	r4, r2, ror #30
    167c:	30393254 	eorscc	r3, r9, r4, asr r2
    1680:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
    1684:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
    1688:	2f6d6574 	svccs	0x006d6574
    168c:	2f646f6b 	svccs	0x00646f6b
    1690:	2f62696c 	svccs	0x0062696c
    1694:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1698:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
    169c:	46494600 	strbmi	r4, [r9], -r0, lsl #12
    16a0:	7562004f 	strbvc	r0, [r2, #-79]!	; 0xffffffb1
    16a4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    16a8:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    16ac:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
    16b0:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0xfffffeb4
    16b4:	73656400 	cmnvc	r5, #0, 8
    16b8:	75620074 	strbvc	r0, [r2, #-116]!	; 0xffffff8c
    16bc:	65006666 	strvs	r6, [r0, #-1638]	; 0xfffff99a
    16c0:	006d656c 	rsbeq	r6, sp, ip, ror #10
    16c4:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    16c8:	65477265 	strbvs	r7, [r7, #-613]	; 0xfffffd9b
    16cc:	75620074 	strbvc	r0, [r2, #-116]!	; 0xffffff8c
    16d0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    16d4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    16d8:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    16dc:	00726566 	rsbseq	r6, r2, r6, ror #10
    16e0:	76657270 			; <UNDEFINED> instruction: 0x76657270
    16e4:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    16e8:	6e690078 	mcrvs	0, 3, r0, cr9, cr8, {3}
    16ec:	65676574 	strbvs	r6, [r7, #-1396]!	; 0xfffffa8c
    16f0:	76696472 			; <UNDEFINED> instruction: 0x76696472
    16f4:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    16f8:	41535500 	cmpmi	r3, r0, lsl #10
    16fc:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1700:	00414850 	subeq	r4, r1, r0, asr r8
    1704:	52505447 	subspl	r5, r0, #1191182336	; 0x47000000
    1708:	41535500 	cmpmi	r3, r0, lsl #10
    170c:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    1710:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1714:	57726576 			; <UNDEFINED> instruction: 0x57726576
    1718:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
    171c:	646d4370 	strbtvs	r4, [sp], #-880	; 0xfffffc90
    1720:	41535500 	cmpmi	r3, r0, lsl #10
    1724:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    1728:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    172c:	61637365 	cmnvs	r3, r5, ror #6
    1730:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1734:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1738:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    173c:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    1740:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1744:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    1748:	61657242 	cmnvs	r5, r2, asr #4
    174c:	7465446b 	strbtvc	r4, [r5], #-1131	; 0xfffffb95
    1750:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    1754:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    1758:	53550068 	cmppl	r5, #104	; 0x68
    175c:	5f545241 	svcpl	0x00545241
    1760:	42656e4f 	rsbmi	r6, r5, #1264	; 0x4f0
    1764:	654d7469 	strbvs	r7, [sp, #-1129]	; 0xfffffb97
    1768:	646f6874 	strbtvs	r6, [pc], #-2164	; 1770 <startup-0x1fffe890>
    176c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1770:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1774:	79545f54 	ldmdbvc	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    1778:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    177c:	53550066 	cmppl	r5, #102	; 0x66
    1780:	5f545241 	svcpl	0x00545241
    1784:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
    1788:	73746942 	cmnvc	r4, #1081344	; 0x108000
    178c:	41535500 	cmpmi	r3, r0, lsl #10
    1790:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1794:	6b636f6c 	blvs	18dd54c <startup-0x1e722ab4>
    1798:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    179c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    17a0:	00666544 	rsbeq	r6, r6, r4, asr #10
    17a4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    17a8:	6d435f54 	stclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    17ac:	53550064 	cmppl	r5, #100	; 0x64
    17b0:	5f545241 	svcpl	0x00545241
    17b4:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    17b8:	61746144 	cmnvs	r4, r4, asr #2
    17bc:	41535500 	cmpmi	r3, r0, lsl #10
    17c0:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    17c4:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
    17c8:	53550070 	cmppl	r5, #112	; 0x70
    17cc:	5f545241 	svcpl	0x00545241
    17d0:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xfffff0a9
    17d4:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    17d8:	55006874 	strpl	r6, [r0, #-2164]	; 0xfffff78c
    17dc:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    17e0:	414d445f 	cmpmi	sp, pc, asr r4
    17e4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    17e8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    17ec:	614c5f54 	cmpvs	ip, r4, asr pc
    17f0:	69427473 	stmdbvs	r2, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    17f4:	53550074 	cmppl	r5, #116	; 0x74
    17f8:	5f545241 	svcpl	0x00545241
    17fc:	64756142 	ldrbtvs	r6, [r5], #-322	; 0xfffffebe
    1800:	65746152 	ldrbvs	r6, [r4, #-338]!	; 0xfffffeae
    1804:	41535500 	cmpmi	r3, r0, lsl #10
    1808:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    180c:	4d414472 	cfstrdmi	mvd4, [r1, #-456]	; 0xfffffe38
    1810:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1814:	63627061 	cmnvs	r2, #97	; 0x61
    1818:	6b636f6c 	blvs	18dd5d0 <startup-0x1e722a30>
    181c:	41535500 	cmpmi	r3, r0, lsl #10
    1820:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1824:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1828:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
    182c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1830:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    1834:	41535500 	cmpmi	r3, r0, lsl #10
    1838:	475f5452 			; <UNDEFINED> instruction: 0x475f5452
    183c:	64726175 	ldrbtvs	r6, [r2], #-373	; 0xfffffe8b
    1840:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    1844:	41535500 	cmpmi	r3, r0, lsl #10
    1848:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    184c:	72424e49 	subvc	r4, r2, #1168	; 0x490
    1850:	446b6165 	strbtmi	r6, [fp], #-357	; 0xfffffe9b
    1854:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
    1858:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    185c:	43687467 	cmnmi	r8, #1728053248	; 0x67000000
    1860:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1864:	53550067 	cmppl	r5, #103	; 0x67
    1868:	5f545241 	svcpl	0x00545241
    186c:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    1870:	41535500 	cmpmi	r3, r0, lsl #10
    1874:	445f5452 	ldrbmi	r5, [pc], #-1106	; 187c <startup-0x1fffe784>
    1878:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    187c:	53550074 	cmppl	r5, #116	; 0x74
    1880:	5f545241 	svcpl	0x00545241
    1884:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1888:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    188c:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1890:	00746375 	rsbseq	r6, r4, r5, ror r3
    1894:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1898:	61505f54 	cmpvs	r0, r4, asr pc
    189c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    18a0:	41535500 	cmpmi	r3, r0, lsl #10
    18a4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    18a8:	6b636f6c 	blvs	18dd660 <startup-0x1e7229a0>
    18ac:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    18b0:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    18b4:	75007469 	strvc	r7, [r0, #-1129]	; 0xfffffb97
    18b8:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
    18bc:	73616278 	cmnvc	r1, #120, 4	; 0x80000007
    18c0:	53550065 	cmppl	r5, #101	; 0x65
    18c4:	5f545241 	svcpl	0x00545241
    18c8:	61656c43 	cmnvs	r5, r3, asr #24
    18cc:	616c4672 	smcvs	50274	; 0xc462
    18d0:	53550067 	cmppl	r5, #103	; 0x67
    18d4:	5f545241 	svcpl	0x00545241
    18d8:	41746553 	cmnmi	r4, r3, asr r5
    18dc:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    18e0:	55007373 	strpl	r7, [r0, #-883]	; 0xfffffc8d
    18e4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    18e8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    18ec:	72617547 	rsbvc	r7, r1, #297795584	; 0x11c00000
    18f0:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    18f4:	53550065 	cmppl	r5, #101	; 0x65
    18f8:	5f545241 	svcpl	0x00545241
    18fc:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    1900:	61657242 	cmnvs	r5, r2, asr #4
    1904:	5355006b 	cmppl	r5, #107	; 0x6b
    1908:	5f545241 	svcpl	0x00545241
    190c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1910:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1914:	00666544 	rsbeq	r6, r6, r4, asr #10
    1918:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    191c:	54495f54 	strbpl	r5, [r9], #-3924	; 0xfffff0ac
    1920:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1924:	55006769 	strpl	r6, [r0, #-1897]	; 0xfffff897
    1928:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    192c:	414d445f 	cmpmi	sp, pc, asr r4
    1930:	00716552 	rsbseq	r6, r1, r2, asr r5
    1934:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1938:	55007854 	strpl	r7, [r0, #-2132]	; 0xfffff7ac
    193c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1940:	7261485f 	rsbvc	r4, r1, #6225920	; 0x5f0000
    1944:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
    1948:	6f6c4665 	svcvs	0x006c4665
    194c:	6e6f4377 	mcrvs	3, 3, r4, cr15, cr7, {3}
    1950:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1788 <startup-0x1fffe878>
    1954:	41535500 	cmpmi	r3, r0, lsl #10
    1958:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    195c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1960:	64726143 	ldrbtvs	r6, [r2], #-323	; 0xfffffebd
    1964:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1968:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    196c:	6f4d5f54 	svcvs	0x004d5f54
    1970:	55006564 	strpl	r6, [r0, #-1380]	; 0xfffffa9c
    1974:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1978:	6464415f 	strbtvs	r4, [r4], #-351	; 0xfffffea1
    197c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1980:	74696200 	strbtvc	r6, [r9], #-512	; 0xfffffe00
    1984:	00736f70 	rsbseq	r6, r3, r0, ror pc
    1988:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    198c:	764f5f54 			; <UNDEFINED> instruction: 0x764f5f54
    1990:	61537265 	cmpvs	r3, r5, ror #4
    1994:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    1998:	4338676e 	teqmi	r8, #28835840	; 0x1b80000
    199c:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    19a0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    19a4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    19a8:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
    19ac:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    19b0:	41535500 	cmpmi	r3, r0, lsl #10
    19b4:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    19b8:	6d434e49 	stclvs	14, cr4, [r3, #-292]	; 0xfffffedc
    19bc:	53550064 	cmppl	r5, #100	; 0x64
    19c0:	5f545241 	svcpl	0x00545241
    19c4:	41447249 	cmpmi	r4, r9, asr #4
    19c8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    19cc:	55006769 	strpl	r6, [r0, #-1897]	; 0xfffff897
    19d0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    19d4:	6f6c435f 	svcvs	0x006c435f
    19d8:	55006b63 	strpl	r6, [r0, #-2915]	; 0xfffff49d
    19dc:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    19e0:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0xfffff6a1
    19e4:	646d4341 	strbtvs	r4, [sp], #-833	; 0xfffffcbf
    19e8:	61726600 	cmnvs	r2, r0, lsl #12
    19ec:	6f697463 	svcvs	0x00697463
    19f0:	646c616e 	strbtvs	r6, [ip], #-366	; 0xfffffe92
    19f4:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
    19f8:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
    19fc:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1a00:	616d535f 	cmnvs	sp, pc, asr r3
    1a04:	61437472 	hvcvs	14146	; 0x3742
    1a08:	414e6472 	hvcmi	58946	; 0xe642
    1a0c:	6d434b43 	vstrvs	d20, [r3, #-268]	; 0xfffffef4
    1a10:	53550064 	cmppl	r5, #100	; 0x64
    1a14:	5f545241 	svcpl	0x00545241
    1a18:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1a1c:	5367616c 	cmnpl	r7, #108, 2
    1a20:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1a24:	53550073 	cmppl	r5, #115	; 0x73
    1a28:	5f545241 	svcpl	0x00545241
    1a2c:	55005449 	strpl	r5, [r0, #-1097]	; 0xfffffbb7
    1a30:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1a34:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1a38:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1a3c:	00746375 	rsbseq	r6, r4, r5, ror r3
    1a40:	5f434352 	svcpl	0x00434352
    1a44:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1a48:	7453736b 	ldrbvc	r7, [r3], #-875	; 0xfffffc95
    1a4c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1a50:	41535500 	cmpmi	r3, r0, lsl #10
    1a54:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1a58:	6b636f6c 	blvs	18dd810 <startup-0x1e7227f0>
    1a5c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1a60:	41535500 	cmpmi	r3, r0, lsl #10
    1a64:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    1a68:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
    1a6c:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    1a70:	00676966 	rsbeq	r6, r7, r6, ror #18
    1a74:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1a78:	61485f54 	cmpvs	r8, r4, asr pc
    1a7c:	7544666c 	strbvc	r6, [r4, #-1644]	; 0xfffff994
    1a80:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    1a84:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1a88:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1a8c:	74535f54 	ldrbvc	r5, [r3], #-3924	; 0xfffff0ac
    1a90:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1a94:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1a98:	41535500 	cmpmi	r3, r0, lsl #10
    1a9c:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
    1aa0:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1aa4:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1aa8:	41535500 	cmpmi	r3, r0, lsl #10
    1aac:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1ab0:	004c4f50 	subeq	r4, ip, r0, asr pc
    1ab4:	616d7469 	cmnvs	sp, r9, ror #8
    1ab8:	43006b73 	movwmi	r6, #2931	; 0xb73
    1abc:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1ac0:	2f737265 	svccs	0x00737265
    1ac4:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    1ac8:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    1acc:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    1ad0:	442f6576 	strtmi	r6, [pc], #-1398	; 1ad8 <startup-0x1fffe528>
    1ad4:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    1ad8:	2f746e65 	svccs	0x00746e65
    1adc:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    1ae0:	442f6275 	strtmi	r6, [pc], #-629	; 1ae8 <startup-0x1fffe518>
    1ae4:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    1ae8:	614c2d30 	cmpvs	ip, r0, lsr sp
    1aec:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1af0:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1af4:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 1afc <startup-0x1fffe504>
    1af8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1afc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1b00:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1b04:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1b08:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1b0c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1b10:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1b14:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    1b18:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1b1c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1b20:	2f726576 	svccs	0x00726576
    1b24:	2f637273 	svccs	0x00637273
    1b28:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1b2c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1b30:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
    1b34:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    1b38:	53550063 	cmppl	r5, #99	; 0x63
    1b3c:	5f545241 	svcpl	0x00545241
    1b40:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1b44:	44657669 	strbtmi	r7, [r5], #-1641	; 0xfffff997
    1b48:	00617461 	rsbeq	r7, r1, r1, ror #8
    1b4c:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    1b50:	67657274 			; <UNDEFINED> instruction: 0x67657274
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <GPIO_Ports+0xdfffc176>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000060 	andeq	r0, r0, r0, rrx
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000070 	andcs	r0, r0, r0, ror r0
  3c:	00000048 	andeq	r0, r0, r8, asr #32
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	00000018 	andeq	r0, r0, r8, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000b8 	strhcs	r0, [r0], -r8
  5c:	00000070 	andeq	r0, r0, r0, ror r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	20000128 	andcs	r0, r0, r8, lsr #2
  78:	00000028 	andeq	r0, r0, r8, lsr #32
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	100e4101 	andne	r4, lr, r1, lsl #2
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	00000020 	andeq	r0, r0, r0, lsr #32
  90:	00000000 	andeq	r0, r0, r0
  94:	20000150 	andcs	r0, r0, r0, asr r1
  98:	0000005e 	andeq	r0, r0, lr, asr r0
  9c:	400c0e41 	andmi	r0, ip, r1, asr #28
  a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  a4:	018e4002 	orreq	r4, lr, r2
  a8:	41180e41 	tstmi	r8, r1, asr #28
  ac:	0000070d 	andeq	r0, r0, sp, lsl #14
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200001ae 	andcs	r0, r0, lr, lsr #3
  bc:	0000003e 	andeq	r0, r0, lr, lsr r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	180e4101 	stmdane	lr, {r0, r8, lr}
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200001ec 	andcs	r0, r0, ip, ror #3
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	2000020c 	andcs	r0, r0, ip, lsl #4
  fc:	00000044 	andeq	r0, r0, r4, asr #32
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20000250 	andcs	r0, r0, r0, asr r2
 11c:	00000020 	andeq	r0, r0, r0, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000270 	andcs	r0, r0, r0, ror r2
 13c:	0000003c 	andeq	r0, r0, ip, lsr r0
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	180e4101 	stmdane	lr, {r0, r8, lr}
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200002ac 	andcs	r0, r0, ip, lsr #5
 15c:	00000020 	andeq	r0, r0, r0, lsr #32
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	200002cc 	andcs	r0, r0, ip, asr #5
 17c:	00000028 	andeq	r0, r0, r8, lsr #32
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	100e4101 	andne	r4, lr, r1, lsl #2
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200002f4 	strdcs	r0, [r0], -r4
 19c:	00000020 	andeq	r0, r0, r0, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20000314 	andcs	r0, r0, r4, lsl r3
 1bc:	00000030 	andeq	r0, r0, r0, lsr r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000344 	andcs	r0, r0, r4, asr #6
 1dc:	00000020 	andeq	r0, r0, r0, lsr #32
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20000364 	andcs	r0, r0, r4, ror #6
 1fc:	00000020 	andeq	r0, r0, r0, lsr #32
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000384 	andcs	r0, r0, r4, lsl #7
 21c:	00000040 	andeq	r0, r0, r0, asr #32
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	200003c4 	andcs	r0, r0, r4, asr #7
 23c:	0000003c 	andeq	r0, r0, ip, lsr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000000 	andeq	r0, r0, r0
 258:	20000400 	andcs	r0, r0, r0, lsl #8
 25c:	00000034 	andeq	r0, r0, r4, lsr r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	180e4101 	stmdane	lr, {r0, r8, lr}
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	00000018 	andeq	r0, r0, r8, lsl r0
 274:	00000000 	andeq	r0, r0, r0
 278:	20000434 	andcs	r0, r0, r4, lsr r4
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	20000450 	andcs	r0, r0, r0, asr r4
 298:	00000034 	andeq	r0, r0, r4, lsr r0
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	20000484 	andcs	r0, r0, r4, lsl #9
 2b8:	00000038 	andeq	r0, r0, r8, lsr r0
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c8:	00070d41 	andeq	r0, r7, r1, asr #26
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
 2d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	200004f8 	strdcs	r0, [r0], -r8
 2f8:	00000158 	andeq	r0, r0, r8, asr r1
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	280e4101 	stmdacs	lr, {r0, r8, lr}
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	20000650 	andcs	r0, r0, r0, asr r6
 318:	00000060 	andeq	r0, r0, r0, rrx
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	180e4101 	stmdane	lr, {r0, r8, lr}
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 358:	00000020 	andeq	r0, r0, r0, lsr #32
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	100e4101 	andne	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	100e4101 	andne	r4, lr, r1, lsl #2
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	2000070c 	andcs	r0, r0, ip, lsl #14
 398:	0000003c 	andeq	r0, r0, ip, lsr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	20000748 	andcs	r0, r0, r8, asr #14
 3b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c8:	00070d41 	andeq	r0, r7, r1, asr #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	20000784 	andcs	r0, r0, r4, lsl #15
 3d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	200007c0 	andcs	r0, r0, r0, asr #15
 3f8:	00000040 	andeq	r0, r0, r0, asr #32
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	180e4101 	stmdane	lr, {r0, r8, lr}
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	20000800 	andcs	r0, r0, r0, lsl #16
 418:	0000003c 	andeq	r0, r0, ip, lsr r0
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	180e4101 	stmdane	lr, {r0, r8, lr}
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	2000083c 	andcs	r0, r0, ip, lsr r8
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	100e4101 	andne	r4, lr, r1, lsl #2
 448:	00070d41 	andeq	r0, r7, r1, asr #26
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000000 	andeq	r0, r0, r0
 454:	20000858 	andcs	r0, r0, r8, asr r8
 458:	00000040 	andeq	r0, r0, r0, asr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	100e4101 	andne	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	20000898 	mulcs	r0, r8, r8
 478:	00000040 	andeq	r0, r0, r0, asr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	200008d8 	ldrdcs	r0, [r0], -r8
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	100e4101 	andne	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	20000918 	andcs	r0, r0, r8, lsl r9
 4b8:	00000040 	andeq	r0, r0, r0, asr #32
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	20000958 	andcs	r0, r0, r8, asr r9
 4d8:	00000040 	andeq	r0, r0, r0, asr #32
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	100e4101 	andne	r4, lr, r1, lsl #2
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	20000998 	mulcs	r0, r8, r9
 4f8:	00000040 	andeq	r0, r0, r0, asr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	100e4101 	andne	r4, lr, r1, lsl #2
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	00000000 	andeq	r0, r0, r0
 514:	200009d8 	ldrdcs	r0, [r0], -r8
 518:	00000040 	andeq	r0, r0, r0, asr #32
 51c:	40080e41 	andmi	r0, r8, r1, asr #28
 520:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 524:	100e4101 	andne	r4, lr, r1, lsl #2
 528:	00070d41 	andeq	r0, r7, r1, asr #26
 52c:	0000001c 	andeq	r0, r0, ip, lsl r0
 530:	00000000 	andeq	r0, r0, r0
 534:	20000a18 	andcs	r0, r0, r8, lsl sl
 538:	00000040 	andeq	r0, r0, r0, asr #32
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	100e4101 	andne	r4, lr, r1, lsl #2
 548:	00070d41 	andeq	r0, r7, r1, asr #26
 54c:	0000001c 	andeq	r0, r0, ip, lsl r0
 550:	00000000 	andeq	r0, r0, r0
 554:	20000a58 	andcs	r0, r0, r8, asr sl
 558:	00000040 	andeq	r0, r0, r0, asr #32
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	100e4101 	andne	r4, lr, r1, lsl #2
 568:	00070d41 	andeq	r0, r7, r1, asr #26
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	00000000 	andeq	r0, r0, r0
 574:	20000a98 	mulcs	r0, r8, sl
 578:	00000040 	andeq	r0, r0, r0, asr #32
 57c:	40080e41 	andmi	r0, r8, r1, asr #28
 580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 584:	100e4101 	andne	r4, lr, r1, lsl #2
 588:	00070d41 	andeq	r0, r7, r1, asr #26
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000000 	andeq	r0, r0, r0
 594:	20000ad8 	ldrdcs	r0, [r0], -r8
 598:	00000040 	andeq	r0, r0, r0, asr #32
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	100e4101 	andne	r4, lr, r1, lsl #2
 5a8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	20000b18 	andcs	r0, r0, r8, lsl fp
 5b8:	00000040 	andeq	r0, r0, r0, asr #32
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	100e4101 	andne	r4, lr, r1, lsl #2
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	20000b58 	andcs	r0, r0, r8, asr fp
 5d8:	00000040 	andeq	r0, r0, r0, asr #32
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	100e4101 	andne	r4, lr, r1, lsl #2
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	20000b98 	mulcs	r0, r8, fp
 5f8:	00000040 	andeq	r0, r0, r0, asr #32
 5fc:	40080e41 	andmi	r0, r8, r1, asr #28
 600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 604:	100e4101 	andne	r4, lr, r1, lsl #2
 608:	00070d41 	andeq	r0, r7, r1, asr #26
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	00000000 	andeq	r0, r0, r0
 614:	20000bd8 	ldrdcs	r0, [r0], -r8
 618:	00000040 	andeq	r0, r0, r0, asr #32
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	100e4101 	andne	r4, lr, r1, lsl #2
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	20000c18 	andcs	r0, r0, r8, lsl ip
 638:	0000003c 	andeq	r0, r0, ip, lsr r0
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	100e4101 	andne	r4, lr, r1, lsl #2
 648:	00070d41 	andeq	r0, r7, r1, asr #26
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	20000c54 	andcs	r0, r0, r4, asr ip
 658:	00000050 	andeq	r0, r0, r0, asr r0
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	100e4101 	andne	r4, lr, r1, lsl #2
 668:	00070d41 	andeq	r0, r7, r1, asr #26
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	00000000 	andeq	r0, r0, r0
 674:	20000ca4 	andcs	r0, r0, r4, lsr #25
 678:	00000084 	andeq	r0, r0, r4, lsl #1
 67c:	40080e41 	andmi	r0, r8, r1, asr #28
 680:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 684:	200e4101 	andcs	r4, lr, r1, lsl #2
 688:	00070d41 	andeq	r0, r7, r1, asr #26
 68c:	00000018 	andeq	r0, r0, r8, lsl r0
 690:	00000000 	andeq	r0, r0, r0
 694:	20000d28 	andcs	r0, r0, r8, lsr #26
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	40080e41 	andmi	r0, r8, r1, asr #28
 6a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ac:	00000000 	andeq	r0, r0, r0
 6b0:	20000d44 	andcs	r0, r0, r4, asr #26
 6b4:	00000044 	andeq	r0, r0, r4, asr #32
 6b8:	40080e41 	andmi	r0, r8, r1, asr #28
 6bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 6c4:	00070d41 	andeq	r0, r7, r1, asr #26
 6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6cc:	00000000 	andeq	r0, r0, r0
 6d0:	20000d88 	andcs	r0, r0, r8, lsl #27
 6d4:	00000020 	andeq	r0, r0, r0, lsr #32
 6d8:	40080e41 	andmi	r0, r8, r1, asr #28
 6dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e0:	100e4101 	andne	r4, lr, r1, lsl #2
 6e4:	00070d41 	andeq	r0, r7, r1, asr #26
 6e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ec:	00000000 	andeq	r0, r0, r0
 6f0:	20000da8 	andcs	r0, r0, r8, lsr #27
 6f4:	000001c8 	andeq	r0, r0, r8, asr #3
 6f8:	40080e41 	andmi	r0, r8, r1, asr #28
 6fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 700:	100e4101 	andne	r4, lr, r1, lsl #2
 704:	00070d41 	andeq	r0, r7, r1, asr #26
 708:	0000000c 	andeq	r0, r0, ip
 70c:	00000000 	andeq	r0, r0, r0
 710:	20000000 	andcs	r0, r0, r0
 714:	0000000c 	andeq	r0, r0, ip
 718:	00000018 	andeq	r0, r0, r8, lsl r0
 71c:	00000000 	andeq	r0, r0, r0
 720:	20000f70 	andcs	r0, r0, r0, ror pc
 724:	00000018 	andeq	r0, r0, r8, lsl r0
 728:	40080e41 	andmi	r0, r8, r1, asr #28
 72c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 730:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 734:	0000001c 	andeq	r0, r0, ip, lsl r0
 738:	00000000 	andeq	r0, r0, r0
 73c:	20000f88 	andcs	r0, r0, r8, lsl #31
 740:	0000002c 	andeq	r0, r0, ip, lsr #32
 744:	40080e41 	andmi	r0, r8, r1, asr #28
 748:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 74c:	100e4101 	andne	r4, lr, r1, lsl #2
 750:	00070d41 	andeq	r0, r7, r1, asr #26
 754:	0000001c 	andeq	r0, r0, ip, lsl r0
 758:	00000000 	andeq	r0, r0, r0
 75c:	20000fb4 			; <UNDEFINED> instruction: 0x20000fb4
 760:	0000002c 	andeq	r0, r0, ip, lsr #32
 764:	40080e41 	andmi	r0, r8, r1, asr #28
 768:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 76c:	180e4101 	stmdane	lr, {r0, r8, lr}
 770:	00070d41 	andeq	r0, r7, r1, asr #26
 774:	0000002c 	andeq	r0, r0, ip, lsr #32
 778:	00000000 	andeq	r0, r0, r0
 77c:	20000fe0 	andcs	r0, r0, r0, ror #31
 780:	00000e4c 	andeq	r0, r0, ip, asr #28
 784:	40140e41 	andsmi	r0, r4, r1, asr #28
 788:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 78c:	03864004 	orreq	r4, r6, #4
 790:	40028740 	andmi	r8, r2, r0, asr #14
 794:	0e42018e 	dvfeqd	f0, f2, #0.5
 798:	06884018 	pkhbteq	r4, r8, r8
 79c:	10c80e42 	sbcne	r0, r8, r2, asr #28
 7a0:	00070d41 	andeq	r0, r7, r1, asr #26
 7a4:	0000000c 	andeq	r0, r0, ip
 7a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 7b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b8:	000007a4 	andeq	r0, r0, r4, lsr #15
 7bc:	20001e2c 	andcs	r1, r0, ip, lsr #28
 7c0:	00000170 	andeq	r0, r0, r0, ror r1
 7c4:	40080e41 	andmi	r0, r8, r1, asr #28
 7c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7cc:	100e4101 	andne	r4, lr, r1, lsl #2
 7d0:	00070d41 	andeq	r0, r7, r1, asr #26
 7d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7d8:	000007a4 	andeq	r0, r0, r4, lsr #15
 7dc:	20001f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
 7e0:	00000118 	andeq	r0, r0, r8, lsl r1
 7e4:	40080e41 	andmi	r0, r8, r1, asr #28
 7e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7ec:	200e4101 	andcs	r4, lr, r1, lsl #2
 7f0:	00070d41 	andeq	r0, r7, r1, asr #26
 7f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7f8:	000007a4 	andeq	r0, r0, r4, lsr #15
 7fc:	200020b4 	strhcs	r2, [r0], -r4
 800:	00000034 	andeq	r0, r0, r4, lsr r0
 804:	40080e41 	andmi	r0, r8, r1, asr #28
 808:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 80c:	100e4101 	andne	r4, lr, r1, lsl #2
 810:	00070d41 	andeq	r0, r7, r1, asr #26
 814:	0000001c 	andeq	r0, r0, ip, lsl r0
 818:	000007a4 	andeq	r0, r0, r4, lsr #15
 81c:	200020e8 	andcs	r2, r0, r8, ror #1
 820:	00000046 	andeq	r0, r0, r6, asr #32
 824:	40080e41 	andmi	r0, r8, r1, asr #28
 828:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 82c:	180e4101 	stmdane	lr, {r0, r8, lr}
 830:	00070d41 	andeq	r0, r7, r1, asr #26
 834:	0000001c 	andeq	r0, r0, ip, lsl r0
 838:	000007a4 	andeq	r0, r0, r4, lsr #15
 83c:	2000212e 	andcs	r2, r0, lr, lsr #2
 840:	00000042 	andeq	r0, r0, r2, asr #32
 844:	40080e41 	andmi	r0, r8, r1, asr #28
 848:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 84c:	180e4101 	stmdane	lr, {r0, r8, lr}
 850:	00070d41 	andeq	r0, r7, r1, asr #26
 854:	0000001c 	andeq	r0, r0, ip, lsl r0
 858:	000007a4 	andeq	r0, r0, r4, lsr #15
 85c:	20002170 	andcs	r2, r0, r0, ror r1
 860:	00000016 	andeq	r0, r0, r6, lsl r0
 864:	40080e41 	andmi	r0, r8, r1, asr #28
 868:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 86c:	100e4101 	andne	r4, lr, r1, lsl #2
 870:	00070d41 	andeq	r0, r7, r1, asr #26
 874:	0000001c 	andeq	r0, r0, ip, lsl r0
 878:	000007a4 	andeq	r0, r0, r4, lsr #15
 87c:	20002186 	andcs	r2, r0, r6, lsl #3
 880:	00000042 	andeq	r0, r0, r2, asr #32
 884:	40080e41 	andmi	r0, r8, r1, asr #28
 888:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 88c:	180e4101 	stmdane	lr, {r0, r8, lr}
 890:	00070d41 	andeq	r0, r7, r1, asr #26
 894:	0000001c 	andeq	r0, r0, ip, lsl r0
 898:	000007a4 	andeq	r0, r0, r4, lsr #15
 89c:	200021c8 	andcs	r2, r0, r8, asr #3
 8a0:	00000016 	andeq	r0, r0, r6, lsl r0
 8a4:	40080e41 	andmi	r0, r8, r1, asr #28
 8a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8ac:	100e4101 	andne	r4, lr, r1, lsl #2
 8b0:	00070d41 	andeq	r0, r7, r1, asr #26
 8b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8b8:	000007a4 	andeq	r0, r0, r4, lsr #15
 8bc:	200021de 	ldrdcs	r2, [r0], -lr
 8c0:	0000001e 	andeq	r0, r0, lr, lsl r0
 8c4:	40080e41 	andmi	r0, r8, r1, asr #28
 8c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8cc:	100e4101 	andne	r4, lr, r1, lsl #2
 8d0:	00070d41 	andeq	r0, r7, r1, asr #26
 8d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8d8:	000007a4 	andeq	r0, r0, r4, lsr #15
 8dc:	200021fc 	strdcs	r2, [r0], -ip
 8e0:	0000001e 	andeq	r0, r0, lr, lsl r0
 8e4:	40080e41 	andmi	r0, r8, r1, asr #28
 8e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8ec:	100e4101 	andne	r4, lr, r1, lsl #2
 8f0:	00070d41 	andeq	r0, r7, r1, asr #26
 8f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8f8:	000007a4 	andeq	r0, r0, r4, lsr #15
 8fc:	2000221a 	andcs	r2, r0, sl, lsl r2
 900:	0000003a 	andeq	r0, r0, sl, lsr r0
 904:	40080e41 	andmi	r0, r8, r1, asr #28
 908:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 90c:	100e4101 	andne	r4, lr, r1, lsl #2
 910:	00070d41 	andeq	r0, r7, r1, asr #26
 914:	0000001c 	andeq	r0, r0, ip, lsl r0
 918:	000007a4 	andeq	r0, r0, r4, lsr #15
 91c:	20002254 	andcs	r2, r0, r4, asr r2
 920:	0000001e 	andeq	r0, r0, lr, lsl r0
 924:	40080e41 	andmi	r0, r8, r1, asr #28
 928:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 92c:	100e4101 	andne	r4, lr, r1, lsl #2
 930:	00070d41 	andeq	r0, r7, r1, asr #26
 934:	0000001c 	andeq	r0, r0, ip, lsl r0
 938:	000007a4 	andeq	r0, r0, r4, lsr #15
 93c:	20002272 	andcs	r2, r0, r2, ror r2
 940:	00000024 	andeq	r0, r0, r4, lsr #32
 944:	40080e41 	andmi	r0, r8, r1, asr #28
 948:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 94c:	100e4101 	andne	r4, lr, r1, lsl #2
 950:	00070d41 	andeq	r0, r7, r1, asr #26
 954:	0000001c 	andeq	r0, r0, ip, lsl r0
 958:	000007a4 	andeq	r0, r0, r4, lsr #15
 95c:	20002296 	mulcs	r0, r6, r2
 960:	000000a4 	andeq	r0, r0, r4, lsr #1
 964:	40080e41 	andmi	r0, r8, r1, asr #28
 968:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 96c:	180e4101 	stmdane	lr, {r0, r8, lr}
 970:	00070d41 	andeq	r0, r7, r1, asr #26
 974:	0000000c 	andeq	r0, r0, ip
 978:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 97c:	7c020001 	stcvc	0, cr0, [r2], {1}
 980:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 984:	0000001c 	andeq	r0, r0, ip, lsl r0
 988:	00000974 	andeq	r0, r0, r4, ror r9
 98c:	2000233c 	andcs	r2, r0, ip, lsr r3
 990:	00000024 	andeq	r0, r0, r4, lsr #32
 994:	40080e41 	andmi	r0, r8, r1, asr #28
 998:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 99c:	100e4101 	andne	r4, lr, r1, lsl #2
 9a0:	00070d41 	andeq	r0, r7, r1, asr #26
 9a4:	00000024 	andeq	r0, r0, r4, lsr #32
 9a8:	00000974 	andeq	r0, r0, r4, ror r9
 9ac:	20002360 	andcs	r2, r0, r0, ror #6
 9b0:	000000f8 	strdeq	r0, [r0], -r8
 9b4:	40100e41 	andsmi	r0, r0, r1, asr #28
 9b8:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 9bc:	02874003 	addeq	r4, r7, #3
 9c0:	41018e40 	tstmi	r1, r0, asr #28
 9c4:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 9c8:	00000007 	andeq	r0, r0, r7
 9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d0:	00000974 	andeq	r0, r0, r4, ror r9
 9d4:	20002458 	andcs	r2, r0, r8, asr r4
 9d8:	0000002c 	andeq	r0, r0, ip, lsr #32
 9dc:	40080e41 	andmi	r0, r8, r1, asr #28
 9e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9e4:	100e4101 	andne	r4, lr, r1, lsl #2
 9e8:	00070d41 	andeq	r0, r7, r1, asr #26
 9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f0:	00000974 	andeq	r0, r0, r4, ror r9
 9f4:	20002484 	andcs	r2, r0, r4, lsl #9
 9f8:	00000048 	andeq	r0, r0, r8, asr #32
 9fc:	40080e41 	andmi	r0, r8, r1, asr #28
 a00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a04:	100e4101 	andne	r4, lr, r1, lsl #2
 a08:	00070d41 	andeq	r0, r7, r1, asr #26
 a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a10:	00000974 	andeq	r0, r0, r4, ror r9
 a14:	200024cc 	andcs	r2, r0, ip, asr #9
 a18:	00000034 	andeq	r0, r0, r4, lsr r0
 a1c:	40080e41 	andmi	r0, r8, r1, asr #28
 a20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a24:	100e4101 	andne	r4, lr, r1, lsl #2
 a28:	00070d41 	andeq	r0, r7, r1, asr #26
 a2c:	0000000c 	andeq	r0, r0, ip
 a30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a34:	7c020001 	stcvc	0, cr0, [r2], {1}
 a38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a40:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a44:	20002500 	andcs	r2, r0, r0, lsl #10
 a48:	00000028 	andeq	r0, r0, r8, lsr #32
 a4c:	40080e41 	andmi	r0, r8, r1, asr #28
 a50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a54:	100e4101 	andne	r4, lr, r1, lsl #2
 a58:	00070d41 	andeq	r0, r7, r1, asr #26
 a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a60:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a64:	20002528 	andcs	r2, r0, r8, lsr #10
 a68:	00000062 	andeq	r0, r0, r2, rrx
 a6c:	40080e41 	andmi	r0, r8, r1, asr #28
 a70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a74:	100e4101 	andne	r4, lr, r1, lsl #2
 a78:	00070d41 	andeq	r0, r7, r1, asr #26
 a7c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a80:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a84:	2000258a 	andcs	r2, r0, sl, lsl #11
 a88:	00000040 	andeq	r0, r0, r0, asr #32
 a8c:	40080e41 	andmi	r0, r8, r1, asr #28
 a90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a94:	180e4101 	stmdane	lr, {r0, r8, lr}
 a98:	00070d41 	andeq	r0, r7, r1, asr #26
 a9c:	0000001c 	andeq	r0, r0, ip, lsl r0
 aa0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 aa4:	200025ca 	andcs	r2, r0, sl, asr #11
 aa8:	0000005e 	andeq	r0, r0, lr, asr r0
 aac:	40080e41 	andmi	r0, r8, r1, asr #28
 ab0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ab4:	100e4101 	andne	r4, lr, r1, lsl #2
 ab8:	00070d41 	andeq	r0, r7, r1, asr #26
 abc:	0000000c 	andeq	r0, r0, ip
 ac0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 ac4:	7c020001 	stcvc	0, cr0, [r2], {1}
 ac8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 acc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ad0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 ad4:	20002628 	andcs	r2, r0, r8, lsr #12
 ad8:	00000130 	andeq	r0, r0, r0, lsr r1
 adc:	40080e41 	andmi	r0, r8, r1, asr #28
 ae0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ae4:	100e4101 	andne	r4, lr, r1, lsl #2
 ae8:	00070d41 	andeq	r0, r7, r1, asr #26
 aec:	0000001c 	andeq	r0, r0, ip, lsl r0
 af0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 af4:	20002758 	andcs	r2, r0, r8, asr r7
 af8:	00000194 	muleq	r0, r4, r1
 afc:	40080e41 	andmi	r0, r8, r1, asr #28
 b00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b04:	300e4101 	andcc	r4, lr, r1, lsl #2
 b08:	00070d41 	andeq	r0, r7, r1, asr #26
 b0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b10:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 b14:	200028ec 	andcs	r2, r0, ip, ror #17
 b18:	00000036 	andeq	r0, r0, r6, lsr r0
 b1c:	40080e41 	andmi	r0, r8, r1, asr #28
 b20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b24:	100e4101 	andne	r4, lr, r1, lsl #2
 b28:	00070d41 	andeq	r0, r7, r1, asr #26
 b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b30:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 b34:	20002922 	andcs	r2, r0, r2, lsr #18
 b38:	00000056 	andeq	r0, r0, r6, asr r0
 b3c:	40080e41 	andmi	r0, r8, r1, asr #28
 b40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b44:	180e4101 	stmdane	lr, {r0, r8, lr}
 b48:	00070d41 	andeq	r0, r7, r1, asr #26
 b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b50:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 b54:	20002978 	andcs	r2, r0, r8, ror r9
 b58:	00000028 	andeq	r0, r0, r8, lsr #32
 b5c:	40080e41 	andmi	r0, r8, r1, asr #28
 b60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b64:	100e4101 	andne	r4, lr, r1, lsl #2
 b68:	00070d41 	andeq	r0, r7, r1, asr #26
 b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b70:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 b74:	200029a0 	andcs	r2, r0, r0, lsr #19
 b78:	00000048 	andeq	r0, r0, r8, asr #32
 b7c:	40080e41 	andmi	r0, r8, r1, asr #28
 b80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b84:	100e4101 	andne	r4, lr, r1, lsl #2
 b88:	00070d41 	andeq	r0, r7, r1, asr #26
 b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b90:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 b94:	200029e8 	andcs	r2, r0, r8, ror #19
 b98:	0000003a 	andeq	r0, r0, sl, lsr r0
 b9c:	40080e41 	andmi	r0, r8, r1, asr #28
 ba0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ba4:	100e4101 	andne	r4, lr, r1, lsl #2
 ba8:	00070d41 	andeq	r0, r7, r1, asr #26
 bac:	0000001c 	andeq	r0, r0, ip, lsl r0
 bb0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 bb4:	20002a22 	andcs	r2, r0, r2, lsr #20
 bb8:	00000046 	andeq	r0, r0, r6, asr #32
 bbc:	40080e41 	andmi	r0, r8, r1, asr #28
 bc0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bc4:	100e4101 	andne	r4, lr, r1, lsl #2
 bc8:	00070d41 	andeq	r0, r7, r1, asr #26
 bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
 bd0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 bd4:	20002a68 	andcs	r2, r0, r8, ror #20
 bd8:	00000048 	andeq	r0, r0, r8, asr #32
 bdc:	40080e41 	andmi	r0, r8, r1, asr #28
 be0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 be4:	100e4101 	andne	r4, lr, r1, lsl #2
 be8:	00070d41 	andeq	r0, r7, r1, asr #26
 bec:	0000001c 	andeq	r0, r0, ip, lsl r0
 bf0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 bf4:	20002ab0 			; <UNDEFINED> instruction: 0x20002ab0
 bf8:	00000024 	andeq	r0, r0, r4, lsr #32
 bfc:	40080e41 	andmi	r0, r8, r1, asr #28
 c00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c04:	100e4101 	andne	r4, lr, r1, lsl #2
 c08:	00070d41 	andeq	r0, r7, r1, asr #26
 c0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c10:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 c14:	20002ad4 	ldrdcs	r2, [r0], -r4
 c18:	0000001c 	andeq	r0, r0, ip, lsl r0
 c1c:	40080e41 	andmi	r0, r8, r1, asr #28
 c20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c24:	100e4101 	andne	r4, lr, r1, lsl #2
 c28:	00070d41 	andeq	r0, r7, r1, asr #26
 c2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c30:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 c34:	20002af0 	strdcs	r2, [r0], -r0
 c38:	0000003a 	andeq	r0, r0, sl, lsr r0
 c3c:	40080e41 	andmi	r0, r8, r1, asr #28
 c40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c44:	100e4101 	andne	r4, lr, r1, lsl #2
 c48:	00070d41 	andeq	r0, r7, r1, asr #26
 c4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c50:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 c54:	20002b2a 	andcs	r2, r0, sl, lsr #22
 c58:	00000040 	andeq	r0, r0, r0, asr #32
 c5c:	40080e41 	andmi	r0, r8, r1, asr #28
 c60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c64:	100e4101 	andne	r4, lr, r1, lsl #2
 c68:	00070d41 	andeq	r0, r7, r1, asr #26
 c6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c70:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 c74:	20002b6a 	andcs	r2, r0, sl, ror #22
 c78:	0000003e 	andeq	r0, r0, lr, lsr r0
 c7c:	40080e41 	andmi	r0, r8, r1, asr #28
 c80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c84:	100e4101 	andne	r4, lr, r1, lsl #2
 c88:	00070d41 	andeq	r0, r7, r1, asr #26
 c8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c90:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 c94:	20002ba8 	andcs	r2, r0, r8, lsr #23
 c98:	00000038 	andeq	r0, r0, r8, lsr r0
 c9c:	40080e41 	andmi	r0, r8, r1, asr #28
 ca0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ca4:	100e4101 	andne	r4, lr, r1, lsl #2
 ca8:	00070d41 	andeq	r0, r7, r1, asr #26
 cac:	0000001c 	andeq	r0, r0, ip, lsl r0
 cb0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 cb4:	20002be0 	andcs	r2, r0, r0, ror #23
 cb8:	00000048 	andeq	r0, r0, r8, asr #32
 cbc:	40080e41 	andmi	r0, r8, r1, asr #28
 cc0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cc4:	100e4101 	andne	r4, lr, r1, lsl #2
 cc8:	00070d41 	andeq	r0, r7, r1, asr #26
 ccc:	0000001c 	andeq	r0, r0, ip, lsl r0
 cd0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 cd4:	20002c28 	andcs	r2, r0, r8, lsr #24
 cd8:	00000020 	andeq	r0, r0, r0, lsr #32
 cdc:	40080e41 	andmi	r0, r8, r1, asr #28
 ce0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ce4:	100e4101 	andne	r4, lr, r1, lsl #2
 ce8:	00070d41 	andeq	r0, r7, r1, asr #26
 cec:	0000001c 	andeq	r0, r0, ip, lsl r0
 cf0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 cf4:	20002c48 	andcs	r2, r0, r8, asr #24
 cf8:	00000040 	andeq	r0, r0, r0, asr #32
 cfc:	40080e41 	andmi	r0, r8, r1, asr #28
 d00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d04:	100e4101 	andne	r4, lr, r1, lsl #2
 d08:	00070d41 	andeq	r0, r7, r1, asr #26
 d0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d10:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 d14:	20002c88 	andcs	r2, r0, r8, lsl #25
 d18:	0000003e 	andeq	r0, r0, lr, lsr r0
 d1c:	40080e41 	andmi	r0, r8, r1, asr #28
 d20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d24:	100e4101 	andne	r4, lr, r1, lsl #2
 d28:	00070d41 	andeq	r0, r7, r1, asr #26
 d2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d30:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 d34:	20002cc6 	andcs	r2, r0, r6, asr #25
 d38:	00000040 	andeq	r0, r0, r0, asr #32
 d3c:	40080e41 	andmi	r0, r8, r1, asr #28
 d40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d44:	100e4101 	andne	r4, lr, r1, lsl #2
 d48:	00070d41 	andeq	r0, r7, r1, asr #26
 d4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d50:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 d54:	20002d06 	andcs	r2, r0, r6, lsl #26
 d58:	00000040 	andeq	r0, r0, r0, asr #32
 d5c:	40080e41 	andmi	r0, r8, r1, asr #28
 d60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d64:	100e4101 	andne	r4, lr, r1, lsl #2
 d68:	00070d41 	andeq	r0, r7, r1, asr #26
 d6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d70:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 d74:	20002d46 	andcs	r2, r0, r6, asr #26
 d78:	00000038 	andeq	r0, r0, r8, lsr r0
 d7c:	40080e41 	andmi	r0, r8, r1, asr #28
 d80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d84:	100e4101 	andne	r4, lr, r1, lsl #2
 d88:	00070d41 	andeq	r0, r7, r1, asr #26
 d8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d90:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 d94:	20002d7e 	andcs	r2, r0, lr, ror sp
 d98:	00000040 	andeq	r0, r0, r0, asr #32
 d9c:	40080e41 	andmi	r0, r8, r1, asr #28
 da0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 da4:	100e4101 	andne	r4, lr, r1, lsl #2
 da8:	00070d41 	andeq	r0, r7, r1, asr #26
 dac:	0000001c 	andeq	r0, r0, ip, lsl r0
 db0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 db4:	20002dbe 			; <UNDEFINED> instruction: 0x20002dbe
 db8:	00000052 	andeq	r0, r0, r2, asr r0
 dbc:	40080e41 	andmi	r0, r8, r1, asr #28
 dc0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 dc4:	100e4101 	andne	r4, lr, r1, lsl #2
 dc8:	00070d41 	andeq	r0, r7, r1, asr #26
 dcc:	0000001c 	andeq	r0, r0, ip, lsl r0
 dd0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 dd4:	20002e10 	andcs	r2, r0, r0, lsl lr
 dd8:	0000009a 	muleq	r0, sl, r0
 ddc:	40080e41 	andmi	r0, r8, r1, asr #28
 de0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 de4:	200e4101 	andcs	r4, lr, r1, lsl #2
 de8:	00070d41 	andeq	r0, r7, r1, asr #26
 dec:	0000001c 	andeq	r0, r0, ip, lsl r0
 df0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 df4:	20002eaa 	andcs	r2, r0, sl, lsr #29
 df8:	00000048 	andeq	r0, r0, r8, asr #32
 dfc:	40080e41 	andmi	r0, r8, r1, asr #28
 e00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e04:	180e4101 	stmdane	lr, {r0, r8, lr}
 e08:	00070d41 	andeq	r0, r7, r1, asr #26
 e0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 e10:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 e14:	20002ef2 	strdcs	r2, [r0], -r2	; <UNPREDICTABLE>
 e18:	00000022 	andeq	r0, r0, r2, lsr #32
 e1c:	40080e41 	andmi	r0, r8, r1, asr #28
 e20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e24:	100e4101 	andne	r4, lr, r1, lsl #2
 e28:	00070d41 	andeq	r0, r7, r1, asr #26
 e2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 e30:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 e34:	20002f14 	andcs	r2, r0, r4, lsl pc
 e38:	000000ca 	andeq	r0, r0, sl, asr #1
 e3c:	40080e41 	andmi	r0, r8, r1, asr #28
 e40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e44:	200e4101 	andcs	r4, lr, r1, lsl #2
 e48:	00070d41 	andeq	r0, r7, r1, asr #26
 e4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 e50:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
 e54:	20002fde 	ldrdcs	r2, [r0], -lr
 e58:	00000048 	andeq	r0, r0, r8, asr #32
 e5c:	40080e41 	andmi	r0, r8, r1, asr #28
 e60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e64:	180e4101 	stmdane	lr, {r0, r8, lr}
 e68:	00070d41 	andeq	r0, r7, r1, asr #26
 e6c:	0000000c 	andeq	r0, r0, ip
 e70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 e74:	7c010001 	stcvc	0, cr0, [r1], {1}
 e78:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 e7c:	0000000c 	andeq	r0, r0, ip
 e80:	00000e6c 	andeq	r0, r0, ip, ror #28
 e84:	20003029 	andcs	r3, r0, r9, lsr #32
 e88:	0000010a 	andeq	r0, r0, sl, lsl #2
 e8c:	0000000c 	andeq	r0, r0, ip
 e90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 e94:	7c020001 	stcvc	0, cr0, [r2], {1}
 e98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 e9c:	00000014 	andeq	r0, r0, r4, lsl r0
 ea0:	00000e8c 	andeq	r0, r0, ip, lsl #29
 ea4:	20003140 	andcs	r3, r0, r0, asr #2
 ea8:	00000012 	andeq	r0, r0, r2, lsl r0
 eac:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 eb0:	00018e02 	andeq	r8, r1, r2, lsl #28
 eb4:	0000000c 	andeq	r0, r0, ip
 eb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 ebc:	7c020001 	stcvc	0, cr0, [r2], {1}
 ec0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ec4:	0000000c 	andeq	r0, r0, ip
 ec8:	00000eb4 			; <UNDEFINED> instruction: 0x00000eb4
 ecc:	20003152 	andcs	r3, r0, r2, asr r1
 ed0:	00000010 	andeq	r0, r0, r0, lsl r0
