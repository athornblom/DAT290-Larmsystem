
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fff2 	bl	20000fec <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	6039      	str	r1, [r7, #0]
2000001a:	1dfb      	adds	r3, r7, #7
2000001c:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000001e:	1dfb      	adds	r3, r7, #7
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	2b7f      	cmp	r3, #127	; 0x7f
20000024:	d90d      	bls.n	20000042 <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000026:	683b      	ldr	r3, [r7, #0]
20000028:	b2da      	uxtb	r2, r3
2000002a:	490f      	ldr	r1, [pc, #60]	; (20000068 <NVIC_SetPriority+0x58>)
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	781b      	ldrb	r3, [r3, #0]
20000030:	0018      	movs	r0, r3
20000032:	230f      	movs	r3, #15
20000034:	4003      	ands	r3, r0
20000036:	3b04      	subs	r3, #4
20000038:	0112      	lsls	r2, r2, #4
2000003a:	b2d2      	uxtb	r2, r2
2000003c:	18cb      	adds	r3, r1, r3
2000003e:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000040:	e00d      	b.n	2000005e <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000042:	683b      	ldr	r3, [r7, #0]
20000044:	b2db      	uxtb	r3, r3
20000046:	4909      	ldr	r1, [pc, #36]	; (2000006c <NVIC_SetPriority+0x5c>)
20000048:	1dfa      	adds	r2, r7, #7
2000004a:	7812      	ldrb	r2, [r2, #0]
2000004c:	b252      	sxtb	r2, r2
2000004e:	011b      	lsls	r3, r3, #4
20000050:	b2d8      	uxtb	r0, r3
20000052:	23c0      	movs	r3, #192	; 0xc0
20000054:	009b      	lsls	r3, r3, #2
20000056:	188a      	adds	r2, r1, r2
20000058:	18d3      	adds	r3, r2, r3
2000005a:	1c02      	adds	r2, r0, #0
2000005c:	701a      	strb	r2, [r3, #0]
}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	46bd      	mov	sp, r7
20000062:	b002      	add	sp, #8
20000064:	bd80      	pop	{r7, pc}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	e000ed00 	and	lr, r0, r0, lsl #26
2000006c:	e000e100 	and	lr, r0, r0, lsl #2

20000070 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20000070:	b580      	push	{r7, lr}
20000072:	b082      	sub	sp, #8
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	3b01      	subs	r3, #1
2000007c:	4a0c      	ldr	r2, [pc, #48]	; (200000b0 <SysTick_Config+0x40>)
2000007e:	4293      	cmp	r3, r2
20000080:	d901      	bls.n	20000086 <SysTick_Config+0x16>
20000082:	2301      	movs	r3, #1
20000084:	e010      	b.n	200000a8 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20000086:	4b0b      	ldr	r3, [pc, #44]	; (200000b4 <SysTick_Config+0x44>)
20000088:	687a      	ldr	r2, [r7, #4]
2000008a:	3a01      	subs	r2, #1
2000008c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000008e:	2301      	movs	r3, #1
20000090:	425b      	negs	r3, r3
20000092:	210f      	movs	r1, #15
20000094:	0018      	movs	r0, r3
20000096:	f7ff ffbb 	bl	20000010 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000009a:	4b06      	ldr	r3, [pc, #24]	; (200000b4 <SysTick_Config+0x44>)
2000009c:	2200      	movs	r2, #0
2000009e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200000a0:	4b04      	ldr	r3, [pc, #16]	; (200000b4 <SysTick_Config+0x44>)
200000a2:	2207      	movs	r2, #7
200000a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200000a6:	2300      	movs	r3, #0
}
200000a8:	0018      	movs	r0, r3
200000aa:	46bd      	mov	sp, r7
200000ac:	b002      	add	sp, #8
200000ae:	bd80      	pop	{r7, pc}
200000b0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200000b4:	e000e010 	and	lr, r0, r0, lsl r0

200000b8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200000bc:	4b14      	ldr	r3, [pc, #80]	; (20000110 <RCC_DeInit+0x58>)
200000be:	681a      	ldr	r2, [r3, #0]
200000c0:	4b13      	ldr	r3, [pc, #76]	; (20000110 <RCC_DeInit+0x58>)
200000c2:	2101      	movs	r1, #1
200000c4:	430a      	orrs	r2, r1
200000c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200000c8:	4b11      	ldr	r3, [pc, #68]	; (20000110 <RCC_DeInit+0x58>)
200000ca:	2200      	movs	r2, #0
200000cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
200000ce:	4b10      	ldr	r3, [pc, #64]	; (20000110 <RCC_DeInit+0x58>)
200000d0:	681a      	ldr	r2, [r3, #0]
200000d2:	4b0f      	ldr	r3, [pc, #60]	; (20000110 <RCC_DeInit+0x58>)
200000d4:	490f      	ldr	r1, [pc, #60]	; (20000114 <RCC_DeInit+0x5c>)
200000d6:	400a      	ands	r2, r1
200000d8:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200000da:	4b0d      	ldr	r3, [pc, #52]	; (20000110 <RCC_DeInit+0x58>)
200000dc:	4a0e      	ldr	r2, [pc, #56]	; (20000118 <RCC_DeInit+0x60>)
200000de:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
200000e0:	4a0b      	ldr	r2, [pc, #44]	; (20000110 <RCC_DeInit+0x58>)
200000e2:	2384      	movs	r3, #132	; 0x84
200000e4:	490d      	ldr	r1, [pc, #52]	; (2000011c <RCC_DeInit+0x64>)
200000e6:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
200000e8:	4a09      	ldr	r2, [pc, #36]	; (20000110 <RCC_DeInit+0x58>)
200000ea:	2388      	movs	r3, #136	; 0x88
200000ec:	490c      	ldr	r1, [pc, #48]	; (20000120 <RCC_DeInit+0x68>)
200000ee:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200000f0:	4b07      	ldr	r3, [pc, #28]	; (20000110 <RCC_DeInit+0x58>)
200000f2:	681a      	ldr	r2, [r3, #0]
200000f4:	4b06      	ldr	r3, [pc, #24]	; (20000110 <RCC_DeInit+0x58>)
200000f6:	490b      	ldr	r1, [pc, #44]	; (20000124 <RCC_DeInit+0x6c>)
200000f8:	400a      	ands	r2, r1
200000fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200000fc:	4b04      	ldr	r3, [pc, #16]	; (20000110 <RCC_DeInit+0x58>)
200000fe:	2200      	movs	r2, #0
20000100:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20000102:	4a03      	ldr	r2, [pc, #12]	; (20000110 <RCC_DeInit+0x58>)
20000104:	238c      	movs	r3, #140	; 0x8c
20000106:	2100      	movs	r1, #0
20000108:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	46bd      	mov	sp, r7
2000010e:	bd80      	pop	{r7, pc}
20000110:	40023800 	andmi	r3, r2, r0, lsl #16
20000114:	eaf6ffff 	b	1fdc0118 <startup-0x23fee8>
20000118:	24003010 	strcs	r3, [r0], #-16
2000011c:	20003000 	andcs	r3, r0, r0
20000120:	24003000 	strcs	r3, [r0], #-0
20000124:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000128 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000128:	b580      	push	{r7, lr}
2000012a:	b082      	sub	sp, #8
2000012c:	af00      	add	r7, sp, #0
2000012e:	0002      	movs	r2, r0
20000130:	1dfb      	adds	r3, r7, #7
20000132:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20000134:	4b05      	ldr	r3, [pc, #20]	; (2000014c <RCC_HSEConfig+0x24>)
20000136:	2200      	movs	r2, #0
20000138:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
2000013a:	4a04      	ldr	r2, [pc, #16]	; (2000014c <RCC_HSEConfig+0x24>)
2000013c:	1dfb      	adds	r3, r7, #7
2000013e:	781b      	ldrb	r3, [r3, #0]
20000140:	7013      	strb	r3, [r2, #0]
}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40023802 	andmi	r3, r2, r2, lsl #16

20000150 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20000156:	2300      	movs	r3, #0
20000158:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
2000015a:	1dfb      	adds	r3, r7, #7
2000015c:	2200      	movs	r2, #0
2000015e:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20000160:	1dbb      	adds	r3, r7, #6
20000162:	2200      	movs	r2, #0
20000164:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20000166:	1dbc      	adds	r4, r7, #6
20000168:	2031      	movs	r0, #49	; 0x31
2000016a:	f000 fd9b 	bl	20000ca4 <RCC_GetFlagStatus>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20000172:	683b      	ldr	r3, [r7, #0]
20000174:	3301      	adds	r3, #1
20000176:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20000178:	683a      	ldr	r2, [r7, #0]
2000017a:	23a0      	movs	r3, #160	; 0xa0
2000017c:	01db      	lsls	r3, r3, #7
2000017e:	429a      	cmp	r2, r3
20000180:	d003      	beq.n	2000018a <RCC_WaitForHSEStartUp+0x3a>
20000182:	1dbb      	adds	r3, r7, #6
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	2b00      	cmp	r3, #0
20000188:	d0ed      	beq.n	20000166 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
2000018a:	2031      	movs	r0, #49	; 0x31
2000018c:	f000 fd8a 	bl	20000ca4 <RCC_GetFlagStatus>
20000190:	1e03      	subs	r3, r0, #0
20000192:	d003      	beq.n	2000019c <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20000194:	1dfb      	adds	r3, r7, #7
20000196:	2201      	movs	r2, #1
20000198:	701a      	strb	r2, [r3, #0]
2000019a:	e002      	b.n	200001a2 <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	2200      	movs	r2, #0
200001a0:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200001a2:	1dfb      	adds	r3, r7, #7
200001a4:	781b      	ldrb	r3, [r3, #0]
}
200001a6:	0018      	movs	r0, r3
200001a8:	46bd      	mov	sp, r7
200001aa:	b003      	add	sp, #12
200001ac:	bd90      	pop	{r4, r7, pc}

200001ae <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
200001ae:	b580      	push	{r7, lr}
200001b0:	b084      	sub	sp, #16
200001b2:	af00      	add	r7, sp, #0
200001b4:	0002      	movs	r2, r0
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
200001ba:	2300      	movs	r3, #0
200001bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
200001be:	4b0a      	ldr	r3, [pc, #40]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001c0:	681b      	ldr	r3, [r3, #0]
200001c2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
200001c4:	68fb      	ldr	r3, [r7, #12]
200001c6:	22f8      	movs	r2, #248	; 0xf8
200001c8:	4393      	bics	r3, r2
200001ca:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
200001cc:	1dfb      	adds	r3, r7, #7
200001ce:	781b      	ldrb	r3, [r3, #0]
200001d0:	00db      	lsls	r3, r3, #3
200001d2:	68fa      	ldr	r2, [r7, #12]
200001d4:	4313      	orrs	r3, r2
200001d6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
200001d8:	4b03      	ldr	r3, [pc, #12]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001da:	68fa      	ldr	r2, [r7, #12]
200001dc:	601a      	str	r2, [r3, #0]
}
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	46bd      	mov	sp, r7
200001e2:	b004      	add	sp, #16
200001e4:	bd80      	pop	{r7, pc}
200001e6:	46c0      	nop			; (mov r8, r8)
200001e8:	40023800 	andmi	r3, r2, r0, lsl #16

200001ec <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b082      	sub	sp, #8
200001f0:	af00      	add	r7, sp, #0
200001f2:	0002      	movs	r2, r0
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
200001f8:	4b03      	ldr	r3, [pc, #12]	; (20000208 <RCC_HSICmd+0x1c>)
200001fa:	1dfa      	adds	r2, r7, #7
200001fc:	7812      	ldrb	r2, [r2, #0]
200001fe:	601a      	str	r2, [r3, #0]
}
20000200:	46c0      	nop			; (mov r8, r8)
20000202:	46bd      	mov	sp, r7
20000204:	b002      	add	sp, #8
20000206:	bd80      	pop	{r7, pc}
20000208:	42470000 	submi	r0, r7, #0

2000020c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
2000020c:	b580      	push	{r7, lr}
2000020e:	b082      	sub	sp, #8
20000210:	af00      	add	r7, sp, #0
20000212:	0002      	movs	r2, r0
20000214:	1dfb      	adds	r3, r7, #7
20000216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000218:	4b0c      	ldr	r3, [pc, #48]	; (2000024c <RCC_LSEConfig+0x40>)
2000021a:	2200      	movs	r2, #0
2000021c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <RCC_LSEConfig+0x40>)
20000220:	2200      	movs	r2, #0
20000222:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20000224:	1dfb      	adds	r3, r7, #7
20000226:	781b      	ldrb	r3, [r3, #0]
20000228:	2b01      	cmp	r3, #1
2000022a:	d002      	beq.n	20000232 <RCC_LSEConfig+0x26>
2000022c:	2b04      	cmp	r3, #4
2000022e:	d004      	beq.n	2000023a <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000230:	e007      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20000232:	4b06      	ldr	r3, [pc, #24]	; (2000024c <RCC_LSEConfig+0x40>)
20000234:	2201      	movs	r2, #1
20000236:	701a      	strb	r2, [r3, #0]
      break;
20000238:	e003      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
2000023a:	4b04      	ldr	r3, [pc, #16]	; (2000024c <RCC_LSEConfig+0x40>)
2000023c:	2205      	movs	r2, #5
2000023e:	701a      	strb	r2, [r3, #0]
      break;
20000240:	46c0      	nop			; (mov r8, r8)
  }
}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	46bd      	mov	sp, r7
20000246:	b002      	add	sp, #8
20000248:	bd80      	pop	{r7, pc}
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	40023870 	andmi	r3, r2, r0, ror r8

20000250 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20000250:	b580      	push	{r7, lr}
20000252:	b082      	sub	sp, #8
20000254:	af00      	add	r7, sp, #0
20000256:	0002      	movs	r2, r0
20000258:	1dfb      	adds	r3, r7, #7
2000025a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
2000025c:	4b03      	ldr	r3, [pc, #12]	; (2000026c <RCC_LSICmd+0x1c>)
2000025e:	1dfa      	adds	r2, r7, #7
20000260:	7812      	ldrb	r2, [r2, #0]
20000262:	601a      	str	r2, [r3, #0]
}
20000264:	46c0      	nop			; (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b002      	add	sp, #8
2000026a:	bd80      	pop	{r7, pc}
2000026c:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20000270 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20000270:	b580      	push	{r7, lr}
20000272:	b084      	sub	sp, #16
20000274:	af00      	add	r7, sp, #0
20000276:	60f8      	str	r0, [r7, #12]
20000278:	60b9      	str	r1, [r7, #8]
2000027a:	607a      	str	r2, [r7, #4]
2000027c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	019a      	lsls	r2, r3, #6
20000282:	68bb      	ldr	r3, [r7, #8]
20000284:	431a      	orrs	r2, r3
20000286:	683b      	ldr	r3, [r7, #0]
20000288:	085b      	lsrs	r3, r3, #1
2000028a:	3b01      	subs	r3, #1
2000028c:	041b      	lsls	r3, r3, #16
2000028e:	431a      	orrs	r2, r3
20000290:	68fb      	ldr	r3, [r7, #12]
20000292:	431a      	orrs	r2, r3
20000294:	0011      	movs	r1, r2
                 (PLLQ << 24);
20000296:	69bb      	ldr	r3, [r7, #24]
20000298:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000029a:	4b03      	ldr	r3, [pc, #12]	; (200002a8 <RCC_PLLConfig+0x38>)
2000029c:	430a      	orrs	r2, r1
2000029e:	605a      	str	r2, [r3, #4]
}
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	b004      	add	sp, #16
200002a6:	bd80      	pop	{r7, pc}
200002a8:	40023800 	andmi	r3, r2, r0, lsl #16

200002ac <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
200002ac:	b580      	push	{r7, lr}
200002ae:	b082      	sub	sp, #8
200002b0:	af00      	add	r7, sp, #0
200002b2:	0002      	movs	r2, r0
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
200002b8:	4b03      	ldr	r3, [pc, #12]	; (200002c8 <RCC_PLLCmd+0x1c>)
200002ba:	1dfa      	adds	r2, r7, #7
200002bc:	7812      	ldrb	r2, [r2, #0]
200002be:	601a      	str	r2, [r3, #0]
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b002      	add	sp, #8
200002c6:	bd80      	pop	{r7, pc}
200002c8:	42470060 	submi	r0, r7, #96	; 0x60

200002cc <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
200002cc:	b580      	push	{r7, lr}
200002ce:	b082      	sub	sp, #8
200002d0:	af00      	add	r7, sp, #0
200002d2:	6078      	str	r0, [r7, #4]
200002d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
200002d6:	687b      	ldr	r3, [r7, #4]
200002d8:	019a      	lsls	r2, r3, #6
200002da:	683b      	ldr	r3, [r7, #0]
200002dc:	071b      	lsls	r3, r3, #28
200002de:	4904      	ldr	r1, [pc, #16]	; (200002f0 <RCC_PLLI2SConfig+0x24>)
200002e0:	4313      	orrs	r3, r2
200002e2:	2284      	movs	r2, #132	; 0x84
200002e4:	508b      	str	r3, [r1, r2]
}
200002e6:	46c0      	nop			; (mov r8, r8)
200002e8:	46bd      	mov	sp, r7
200002ea:	b002      	add	sp, #8
200002ec:	bd80      	pop	{r7, pc}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	40023800 	andmi	r3, r2, r0, lsl #16

200002f4 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
200002f4:	b580      	push	{r7, lr}
200002f6:	b082      	sub	sp, #8
200002f8:	af00      	add	r7, sp, #0
200002fa:	0002      	movs	r2, r0
200002fc:	1dfb      	adds	r3, r7, #7
200002fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000300:	4b03      	ldr	r3, [pc, #12]	; (20000310 <RCC_PLLI2SCmd+0x1c>)
20000302:	1dfa      	adds	r2, r7, #7
20000304:	7812      	ldrb	r2, [r2, #0]
20000306:	601a      	str	r2, [r3, #0]
}
20000308:	46c0      	nop			; (mov r8, r8)
2000030a:	46bd      	mov	sp, r7
2000030c:	b002      	add	sp, #8
2000030e:	bd80      	pop	{r7, pc}
20000310:	42470068 	submi	r0, r7, #104	; 0x68

20000314 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000314:	b580      	push	{r7, lr}
20000316:	b084      	sub	sp, #16
20000318:	af00      	add	r7, sp, #0
2000031a:	60f8      	str	r0, [r7, #12]
2000031c:	60b9      	str	r1, [r7, #8]
2000031e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000320:	68fb      	ldr	r3, [r7, #12]
20000322:	019a      	lsls	r2, r3, #6
20000324:	68bb      	ldr	r3, [r7, #8]
20000326:	061b      	lsls	r3, r3, #24
20000328:	431a      	orrs	r2, r3
2000032a:	687b      	ldr	r3, [r7, #4]
2000032c:	071b      	lsls	r3, r3, #28
2000032e:	4904      	ldr	r1, [pc, #16]	; (20000340 <RCC_PLLSAIConfig+0x2c>)
20000330:	4313      	orrs	r3, r2
20000332:	2288      	movs	r2, #136	; 0x88
20000334:	508b      	str	r3, [r1, r2]
}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	46bd      	mov	sp, r7
2000033a:	b004      	add	sp, #16
2000033c:	bd80      	pop	{r7, pc}
2000033e:	46c0      	nop			; (mov r8, r8)
20000340:	40023800 	andmi	r3, r2, r0, lsl #16

20000344 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20000344:	b580      	push	{r7, lr}
20000346:	b082      	sub	sp, #8
20000348:	af00      	add	r7, sp, #0
2000034a:	0002      	movs	r2, r0
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20000350:	4b03      	ldr	r3, [pc, #12]	; (20000360 <RCC_PLLSAICmd+0x1c>)
20000352:	1dfa      	adds	r2, r7, #7
20000354:	7812      	ldrb	r2, [r2, #0]
20000356:	601a      	str	r2, [r3, #0]
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b002      	add	sp, #8
2000035e:	bd80      	pop	{r7, pc}
20000360:	42470070 	submi	r0, r7, #112	; 0x70

20000364 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20000364:	b580      	push	{r7, lr}
20000366:	b082      	sub	sp, #8
20000368:	af00      	add	r7, sp, #0
2000036a:	0002      	movs	r2, r0
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20000370:	4b03      	ldr	r3, [pc, #12]	; (20000380 <RCC_ClockSecuritySystemCmd+0x1c>)
20000372:	1dfa      	adds	r2, r7, #7
20000374:	7812      	ldrb	r2, [r2, #0]
20000376:	601a      	str	r2, [r3, #0]
}
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	46bd      	mov	sp, r7
2000037c:	b002      	add	sp, #8
2000037e:	bd80      	pop	{r7, pc}
20000380:	4247004c 	submi	r0, r7, #76	; 0x4c

20000384 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20000384:	b580      	push	{r7, lr}
20000386:	b084      	sub	sp, #16
20000388:	af00      	add	r7, sp, #0
2000038a:	6078      	str	r0, [r7, #4]
2000038c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
2000038e:	2300      	movs	r3, #0
20000390:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20000392:	4b0a      	ldr	r3, [pc, #40]	; (200003bc <RCC_MCO1Config+0x38>)
20000394:	689b      	ldr	r3, [r3, #8]
20000396:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20000398:	68fb      	ldr	r3, [r7, #12]
2000039a:	4a09      	ldr	r2, [pc, #36]	; (200003c0 <RCC_MCO1Config+0x3c>)
2000039c:	4013      	ands	r3, r2
2000039e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200003a0:	687a      	ldr	r2, [r7, #4]
200003a2:	683b      	ldr	r3, [r7, #0]
200003a4:	4313      	orrs	r3, r2
200003a6:	68fa      	ldr	r2, [r7, #12]
200003a8:	4313      	orrs	r3, r2
200003aa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ac:	4b03      	ldr	r3, [pc, #12]	; (200003bc <RCC_MCO1Config+0x38>)
200003ae:	68fa      	ldr	r2, [r7, #12]
200003b0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	46bd      	mov	sp, r7
200003b6:	b004      	add	sp, #16
200003b8:	bd80      	pop	{r7, pc}
200003ba:	46c0      	nop			; (mov r8, r8)
200003bc:	40023800 	andmi	r3, r2, r0, lsl #16
200003c0:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

200003c4 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
200003c4:	b580      	push	{r7, lr}
200003c6:	b084      	sub	sp, #16
200003c8:	af00      	add	r7, sp, #0
200003ca:	6078      	str	r0, [r7, #4]
200003cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200003ce:	2300      	movs	r3, #0
200003d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
200003d2:	4b0a      	ldr	r3, [pc, #40]	; (200003fc <RCC_MCO2Config+0x38>)
200003d4:	689b      	ldr	r3, [r3, #8]
200003d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
200003d8:	68fb      	ldr	r3, [r7, #12]
200003da:	015b      	lsls	r3, r3, #5
200003dc:	095b      	lsrs	r3, r3, #5
200003de:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
200003e0:	687a      	ldr	r2, [r7, #4]
200003e2:	683b      	ldr	r3, [r7, #0]
200003e4:	4313      	orrs	r3, r2
200003e6:	68fa      	ldr	r2, [r7, #12]
200003e8:	4313      	orrs	r3, r2
200003ea:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ec:	4b03      	ldr	r3, [pc, #12]	; (200003fc <RCC_MCO2Config+0x38>)
200003ee:	68fa      	ldr	r2, [r7, #12]
200003f0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003f2:	46c0      	nop			; (mov r8, r8)
200003f4:	46bd      	mov	sp, r7
200003f6:	b004      	add	sp, #16
200003f8:	bd80      	pop	{r7, pc}
200003fa:	46c0      	nop			; (mov r8, r8)
200003fc:	40023800 	andmi	r3, r2, r0, lsl #16

20000400 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000400:	b580      	push	{r7, lr}
20000402:	b084      	sub	sp, #16
20000404:	af00      	add	r7, sp, #0
20000406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000408:	2300      	movs	r3, #0
2000040a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
2000040c:	4b08      	ldr	r3, [pc, #32]	; (20000430 <RCC_SYSCLKConfig+0x30>)
2000040e:	689b      	ldr	r3, [r3, #8]
20000410:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000412:	68fb      	ldr	r3, [r7, #12]
20000414:	2203      	movs	r2, #3
20000416:	4393      	bics	r3, r2
20000418:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
2000041a:	68fa      	ldr	r2, [r7, #12]
2000041c:	687b      	ldr	r3, [r7, #4]
2000041e:	4313      	orrs	r3, r2
20000420:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000422:	4b03      	ldr	r3, [pc, #12]	; (20000430 <RCC_SYSCLKConfig+0x30>)
20000424:	68fa      	ldr	r2, [r7, #12]
20000426:	609a      	str	r2, [r3, #8]
}
20000428:	46c0      	nop			; (mov r8, r8)
2000042a:	46bd      	mov	sp, r7
2000042c:	b004      	add	sp, #16
2000042e:	bd80      	pop	{r7, pc}
20000430:	40023800 	andmi	r3, r2, r0, lsl #16

20000434 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000434:	b580      	push	{r7, lr}
20000436:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000438:	4b04      	ldr	r3, [pc, #16]	; (2000044c <RCC_GetSYSCLKSource+0x18>)
2000043a:	689b      	ldr	r3, [r3, #8]
2000043c:	b2db      	uxtb	r3, r3
2000043e:	220c      	movs	r2, #12
20000440:	4013      	ands	r3, r2
20000442:	b2db      	uxtb	r3, r3
}
20000444:	0018      	movs	r0, r3
20000446:	46bd      	mov	sp, r7
20000448:	bd80      	pop	{r7, pc}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	40023800 	andmi	r3, r2, r0, lsl #16

20000450 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20000450:	b580      	push	{r7, lr}
20000452:	b084      	sub	sp, #16
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000458:	2300      	movs	r3, #0
2000045a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
2000045c:	4b08      	ldr	r3, [pc, #32]	; (20000480 <RCC_HCLKConfig+0x30>)
2000045e:	689b      	ldr	r3, [r3, #8]
20000460:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20000462:	68fb      	ldr	r3, [r7, #12]
20000464:	22f0      	movs	r2, #240	; 0xf0
20000466:	4393      	bics	r3, r2
20000468:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
2000046a:	68fa      	ldr	r2, [r7, #12]
2000046c:	687b      	ldr	r3, [r7, #4]
2000046e:	4313      	orrs	r3, r2
20000470:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000472:	4b03      	ldr	r3, [pc, #12]	; (20000480 <RCC_HCLKConfig+0x30>)
20000474:	68fa      	ldr	r2, [r7, #12]
20000476:	609a      	str	r2, [r3, #8]
}
20000478:	46c0      	nop			; (mov r8, r8)
2000047a:	46bd      	mov	sp, r7
2000047c:	b004      	add	sp, #16
2000047e:	bd80      	pop	{r7, pc}
20000480:	40023800 	andmi	r3, r2, r0, lsl #16

20000484 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20000484:	b580      	push	{r7, lr}
20000486:	b084      	sub	sp, #16
20000488:	af00      	add	r7, sp, #0
2000048a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000048c:	2300      	movs	r3, #0
2000048e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000490:	4b08      	ldr	r3, [pc, #32]	; (200004b4 <RCC_PCLK1Config+0x30>)
20000492:	689b      	ldr	r3, [r3, #8]
20000494:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20000496:	68fb      	ldr	r3, [r7, #12]
20000498:	4a07      	ldr	r2, [pc, #28]	; (200004b8 <RCC_PCLK1Config+0x34>)
2000049a:	4013      	ands	r3, r2
2000049c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
2000049e:	68fa      	ldr	r2, [r7, #12]
200004a0:	687b      	ldr	r3, [r7, #4]
200004a2:	4313      	orrs	r3, r2
200004a4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004a6:	4b03      	ldr	r3, [pc, #12]	; (200004b4 <RCC_PCLK1Config+0x30>)
200004a8:	68fa      	ldr	r2, [r7, #12]
200004aa:	609a      	str	r2, [r3, #8]
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b004      	add	sp, #16
200004b2:	bd80      	pop	{r7, pc}
200004b4:	40023800 	andmi	r3, r2, r0, lsl #16
200004b8:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

200004bc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
200004bc:	b580      	push	{r7, lr}
200004be:	b084      	sub	sp, #16
200004c0:	af00      	add	r7, sp, #0
200004c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200004c4:	2300      	movs	r3, #0
200004c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200004c8:	4b09      	ldr	r3, [pc, #36]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004ca:	689b      	ldr	r3, [r3, #8]
200004cc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	4a08      	ldr	r2, [pc, #32]	; (200004f4 <RCC_PCLK2Config+0x38>)
200004d2:	4013      	ands	r3, r2
200004d4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
200004d6:	687b      	ldr	r3, [r7, #4]
200004d8:	00db      	lsls	r3, r3, #3
200004da:	68fa      	ldr	r2, [r7, #12]
200004dc:	4313      	orrs	r3, r2
200004de:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004e0:	4b03      	ldr	r3, [pc, #12]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004e2:	68fa      	ldr	r2, [r7, #12]
200004e4:	609a      	str	r2, [r3, #8]
}
200004e6:	46c0      	nop			; (mov r8, r8)
200004e8:	46bd      	mov	sp, r7
200004ea:	b004      	add	sp, #16
200004ec:	bd80      	pop	{r7, pc}
200004ee:	46c0      	nop			; (mov r8, r8)
200004f0:	40023800 	andmi	r3, r2, r0, lsl #16
200004f4:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

200004f8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
200004f8:	b580      	push	{r7, lr}
200004fa:	b088      	sub	sp, #32
200004fc:	af00      	add	r7, sp, #0
200004fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000500:	2300      	movs	r3, #0
20000502:	61bb      	str	r3, [r7, #24]
20000504:	2300      	movs	r3, #0
20000506:	617b      	str	r3, [r7, #20]
20000508:	2300      	movs	r3, #0
2000050a:	61fb      	str	r3, [r7, #28]
2000050c:	2302      	movs	r3, #2
2000050e:	613b      	str	r3, [r7, #16]
20000510:	2300      	movs	r3, #0
20000512:	60fb      	str	r3, [r7, #12]
20000514:	2302      	movs	r3, #2
20000516:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000518:	4b49      	ldr	r3, [pc, #292]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000051a:	689b      	ldr	r3, [r3, #8]
2000051c:	220c      	movs	r2, #12
2000051e:	4013      	ands	r3, r2
20000520:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000522:	69bb      	ldr	r3, [r7, #24]
20000524:	2b04      	cmp	r3, #4
20000526:	d007      	beq.n	20000538 <RCC_GetClocksFreq+0x40>
20000528:	2b08      	cmp	r3, #8
2000052a:	d009      	beq.n	20000540 <RCC_GetClocksFreq+0x48>
2000052c:	2b00      	cmp	r3, #0
2000052e:	d141      	bne.n	200005b4 <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	4a44      	ldr	r2, [pc, #272]	; (20000644 <RCC_GetClocksFreq+0x14c>)
20000534:	601a      	str	r2, [r3, #0]
    break;
20000536:	e041      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	4a43      	ldr	r2, [pc, #268]	; (20000648 <RCC_GetClocksFreq+0x150>)
2000053c:	601a      	str	r2, [r3, #0]
    break;
2000053e:	e03d      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000540:	4b3f      	ldr	r3, [pc, #252]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000542:	685b      	ldr	r3, [r3, #4]
20000544:	0d9b      	lsrs	r3, r3, #22
20000546:	2201      	movs	r2, #1
20000548:	4013      	ands	r3, r2
2000054a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000054c:	4b3c      	ldr	r3, [pc, #240]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000054e:	685b      	ldr	r3, [r3, #4]
20000550:	223f      	movs	r2, #63	; 0x3f
20000552:	4013      	ands	r3, r2
20000554:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000556:	68fb      	ldr	r3, [r7, #12]
20000558:	2b00      	cmp	r3, #0
2000055a:	d00d      	beq.n	20000578 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
2000055c:	68b9      	ldr	r1, [r7, #8]
2000055e:	483a      	ldr	r0, [pc, #232]	; (20000648 <RCC_GetClocksFreq+0x150>)
20000560:	f002 f86e 	bl	20002640 <__udivsi3>
20000564:	0003      	movs	r3, r0
20000566:	001a      	movs	r2, r3
20000568:	4b35      	ldr	r3, [pc, #212]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000056a:	685b      	ldr	r3, [r3, #4]
2000056c:	099b      	lsrs	r3, r3, #6
2000056e:	05db      	lsls	r3, r3, #23
20000570:	0ddb      	lsrs	r3, r3, #23
20000572:	4353      	muls	r3, r2
20000574:	61fb      	str	r3, [r7, #28]
20000576:	e00c      	b.n	20000592 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000578:	68b9      	ldr	r1, [r7, #8]
2000057a:	4832      	ldr	r0, [pc, #200]	; (20000644 <RCC_GetClocksFreq+0x14c>)
2000057c:	f002 f860 	bl	20002640 <__udivsi3>
20000580:	0003      	movs	r3, r0
20000582:	001a      	movs	r2, r3
20000584:	4b2e      	ldr	r3, [pc, #184]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000586:	685b      	ldr	r3, [r3, #4]
20000588:	099b      	lsrs	r3, r3, #6
2000058a:	05db      	lsls	r3, r3, #23
2000058c:	0ddb      	lsrs	r3, r3, #23
2000058e:	4353      	muls	r3, r2
20000590:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000592:	4b2b      	ldr	r3, [pc, #172]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000594:	685b      	ldr	r3, [r3, #4]
20000596:	0c1b      	lsrs	r3, r3, #16
20000598:	2203      	movs	r2, #3
2000059a:	4013      	ands	r3, r2
2000059c:	3301      	adds	r3, #1
2000059e:	005b      	lsls	r3, r3, #1
200005a0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200005a2:	6939      	ldr	r1, [r7, #16]
200005a4:	69f8      	ldr	r0, [r7, #28]
200005a6:	f002 f84b 	bl	20002640 <__udivsi3>
200005aa:	0003      	movs	r3, r0
200005ac:	001a      	movs	r2, r3
200005ae:	687b      	ldr	r3, [r7, #4]
200005b0:	601a      	str	r2, [r3, #0]
    break;
200005b2:	e003      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
200005b4:	687b      	ldr	r3, [r7, #4]
200005b6:	4a23      	ldr	r2, [pc, #140]	; (20000644 <RCC_GetClocksFreq+0x14c>)
200005b8:	601a      	str	r2, [r3, #0]
    break;
200005ba:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
200005bc:	4b20      	ldr	r3, [pc, #128]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005be:	689b      	ldr	r3, [r3, #8]
200005c0:	22f0      	movs	r2, #240	; 0xf0
200005c2:	4013      	ands	r3, r2
200005c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
200005c6:	69bb      	ldr	r3, [r7, #24]
200005c8:	091b      	lsrs	r3, r3, #4
200005ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005cc:	4a1f      	ldr	r2, [pc, #124]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005ce:	69bb      	ldr	r3, [r7, #24]
200005d0:	18d3      	adds	r3, r2, r3
200005d2:	781b      	ldrb	r3, [r3, #0]
200005d4:	b2db      	uxtb	r3, r3
200005d6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
200005d8:	687b      	ldr	r3, [r7, #4]
200005da:	681a      	ldr	r2, [r3, #0]
200005dc:	697b      	ldr	r3, [r7, #20]
200005de:	40da      	lsrs	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
200005e4:	4b16      	ldr	r3, [pc, #88]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005e6:	689a      	ldr	r2, [r3, #8]
200005e8:	23e0      	movs	r3, #224	; 0xe0
200005ea:	015b      	lsls	r3, r3, #5
200005ec:	4013      	ands	r3, r2
200005ee:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
200005f0:	69bb      	ldr	r3, [r7, #24]
200005f2:	0a9b      	lsrs	r3, r3, #10
200005f4:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005f6:	4a15      	ldr	r2, [pc, #84]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005f8:	69bb      	ldr	r3, [r7, #24]
200005fa:	18d3      	adds	r3, r2, r3
200005fc:	781b      	ldrb	r3, [r3, #0]
200005fe:	b2db      	uxtb	r3, r3
20000600:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000602:	687b      	ldr	r3, [r7, #4]
20000604:	685a      	ldr	r2, [r3, #4]
20000606:	697b      	ldr	r3, [r7, #20]
20000608:	40da      	lsrs	r2, r3
2000060a:	687b      	ldr	r3, [r7, #4]
2000060c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
2000060e:	4b0c      	ldr	r3, [pc, #48]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000610:	689a      	ldr	r2, [r3, #8]
20000612:	23e0      	movs	r3, #224	; 0xe0
20000614:	021b      	lsls	r3, r3, #8
20000616:	4013      	ands	r3, r2
20000618:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
2000061a:	69bb      	ldr	r3, [r7, #24]
2000061c:	0b5b      	lsrs	r3, r3, #13
2000061e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000620:	4a0a      	ldr	r2, [pc, #40]	; (2000064c <RCC_GetClocksFreq+0x154>)
20000622:	69bb      	ldr	r3, [r7, #24]
20000624:	18d3      	adds	r3, r2, r3
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	b2db      	uxtb	r3, r3
2000062a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	685a      	ldr	r2, [r3, #4]
20000630:	697b      	ldr	r3, [r7, #20]
20000632:	40da      	lsrs	r2, r3
20000634:	687b      	ldr	r3, [r7, #4]
20000636:	60da      	str	r2, [r3, #12]
}
20000638:	46c0      	nop			; (mov r8, r8)
2000063a:	46bd      	mov	sp, r7
2000063c:	b008      	add	sp, #32
2000063e:	bd80      	pop	{r7, pc}
20000640:	40023800 	andmi	r3, r2, r0, lsl #16
20000644:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000648:	017d7840 	cmneq	sp, r0, asr #16
2000064c:	2000275c 	andcs	r2, r0, ip, asr r7

20000650 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000650:	b580      	push	{r7, lr}
20000652:	b084      	sub	sp, #16
20000654:	af00      	add	r7, sp, #0
20000656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000658:	2300      	movs	r3, #0
2000065a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
2000065c:	687a      	ldr	r2, [r7, #4]
2000065e:	23c0      	movs	r3, #192	; 0xc0
20000660:	009b      	lsls	r3, r3, #2
20000662:	401a      	ands	r2, r3
20000664:	23c0      	movs	r3, #192	; 0xc0
20000666:	009b      	lsls	r3, r3, #2
20000668:	429a      	cmp	r2, r3
2000066a:	d10f      	bne.n	2000068c <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
2000066c:	4b0d      	ldr	r3, [pc, #52]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000066e:	689b      	ldr	r3, [r3, #8]
20000670:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	4a0c      	ldr	r2, [pc, #48]	; (200006a8 <RCC_RTCCLKConfig+0x58>)
20000676:	4013      	ands	r3, r2
20000678:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
2000067a:	687b      	ldr	r3, [r7, #4]
2000067c:	4a0b      	ldr	r2, [pc, #44]	; (200006ac <RCC_RTCCLKConfig+0x5c>)
2000067e:	4013      	ands	r3, r2
20000680:	68fa      	ldr	r2, [r7, #12]
20000682:	4313      	orrs	r3, r2
20000684:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000686:	4b07      	ldr	r3, [pc, #28]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000688:	68fa      	ldr	r2, [r7, #12]
2000068a:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
2000068c:	4b05      	ldr	r3, [pc, #20]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000068e:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	051b      	lsls	r3, r3, #20
20000694:	0d1a      	lsrs	r2, r3, #20
20000696:	4b03      	ldr	r3, [pc, #12]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000698:	430a      	orrs	r2, r1
2000069a:	671a      	str	r2, [r3, #112]	; 0x70
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b004      	add	sp, #16
200006a2:	bd80      	pop	{r7, pc}
200006a4:	40023800 	andmi	r3, r2, r0, lsl #16
200006a8:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
200006ac:	0ffffcff 	svceq	0x00fffcff

200006b0 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
200006b0:	b580      	push	{r7, lr}
200006b2:	b082      	sub	sp, #8
200006b4:	af00      	add	r7, sp, #0
200006b6:	0002      	movs	r2, r0
200006b8:	1dfb      	adds	r3, r7, #7
200006ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
200006bc:	4b03      	ldr	r3, [pc, #12]	; (200006cc <RCC_RTCCLKCmd+0x1c>)
200006be:	1dfa      	adds	r2, r7, #7
200006c0:	7812      	ldrb	r2, [r2, #0]
200006c2:	601a      	str	r2, [r3, #0]
}
200006c4:	46c0      	nop			; (mov r8, r8)
200006c6:	46bd      	mov	sp, r7
200006c8:	b002      	add	sp, #8
200006ca:	bd80      	pop	{r7, pc}
200006cc:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

200006d0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
200006d0:	b580      	push	{r7, lr}
200006d2:	b082      	sub	sp, #8
200006d4:	af00      	add	r7, sp, #0
200006d6:	0002      	movs	r2, r0
200006d8:	1dfb      	adds	r3, r7, #7
200006da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
200006dc:	4b03      	ldr	r3, [pc, #12]	; (200006ec <RCC_BackupResetCmd+0x1c>)
200006de:	1dfa      	adds	r2, r7, #7
200006e0:	7812      	ldrb	r2, [r2, #0]
200006e2:	601a      	str	r2, [r3, #0]
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46bd      	mov	sp, r7
200006e8:	b002      	add	sp, #8
200006ea:	bd80      	pop	{r7, pc}
200006ec:	42470e40 	submi	r0, r7, #64, 28	; 0x400

200006f0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
200006f0:	b580      	push	{r7, lr}
200006f2:	b082      	sub	sp, #8
200006f4:	af00      	add	r7, sp, #0
200006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
200006f8:	4b03      	ldr	r3, [pc, #12]	; (20000708 <RCC_I2SCLKConfig+0x18>)
200006fa:	687a      	ldr	r2, [r7, #4]
200006fc:	601a      	str	r2, [r3, #0]
}
200006fe:	46c0      	nop			; (mov r8, r8)
20000700:	46bd      	mov	sp, r7
20000702:	b002      	add	sp, #8
20000704:	bd80      	pop	{r7, pc}
20000706:	46c0      	nop			; (mov r8, r8)
20000708:	4247015c 	submi	r0, r7, #92, 2

2000070c <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
2000070c:	b580      	push	{r7, lr}
2000070e:	b084      	sub	sp, #16
20000710:	af00      	add	r7, sp, #0
20000712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000714:	2300      	movs	r3, #0
20000716:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000718:	4a09      	ldr	r2, [pc, #36]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
2000071a:	238c      	movs	r3, #140	; 0x8c
2000071c:	58d3      	ldr	r3, [r2, r3]
2000071e:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000720:	68fb      	ldr	r3, [r7, #12]
20000722:	4a08      	ldr	r2, [pc, #32]	; (20000744 <RCC_SAIBlockACLKConfig+0x38>)
20000724:	4013      	ands	r3, r2
20000726:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000728:	68fa      	ldr	r2, [r7, #12]
2000072a:	687b      	ldr	r3, [r7, #4]
2000072c:	4313      	orrs	r3, r2
2000072e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000730:	4903      	ldr	r1, [pc, #12]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
20000732:	228c      	movs	r2, #140	; 0x8c
20000734:	68fb      	ldr	r3, [r7, #12]
20000736:	508b      	str	r3, [r1, r2]
}
20000738:	46c0      	nop			; (mov r8, r8)
2000073a:	46bd      	mov	sp, r7
2000073c:	b004      	add	sp, #16
2000073e:	bd80      	pop	{r7, pc}
20000740:	40023800 	andmi	r3, r2, r0, lsl #16
20000744:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000748 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000748:	b580      	push	{r7, lr}
2000074a:	b084      	sub	sp, #16
2000074c:	af00      	add	r7, sp, #0
2000074e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000750:	2300      	movs	r3, #0
20000752:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000754:	4a09      	ldr	r2, [pc, #36]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
20000756:	238c      	movs	r3, #140	; 0x8c
20000758:	58d3      	ldr	r3, [r2, r3]
2000075a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
2000075c:	68fb      	ldr	r3, [r7, #12]
2000075e:	4a08      	ldr	r2, [pc, #32]	; (20000780 <RCC_SAIBlockBCLKConfig+0x38>)
20000760:	4013      	ands	r3, r2
20000762:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000764:	68fa      	ldr	r2, [r7, #12]
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	4313      	orrs	r3, r2
2000076a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000076c:	4903      	ldr	r1, [pc, #12]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
2000076e:	228c      	movs	r2, #140	; 0x8c
20000770:	68fb      	ldr	r3, [r7, #12]
20000772:	508b      	str	r3, [r1, r2]
}
20000774:	46c0      	nop			; (mov r8, r8)
20000776:	46bd      	mov	sp, r7
20000778:	b004      	add	sp, #16
2000077a:	bd80      	pop	{r7, pc}
2000077c:	40023800 	andmi	r3, r2, r0, lsl #16
20000780:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000784 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000784:	b580      	push	{r7, lr}
20000786:	b084      	sub	sp, #16
20000788:	af00      	add	r7, sp, #0
2000078a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000078c:	2300      	movs	r3, #0
2000078e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000790:	4a0a      	ldr	r2, [pc, #40]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000792:	238c      	movs	r3, #140	; 0x8c
20000794:	58d3      	ldr	r3, [r2, r3]
20000796:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000798:	68fb      	ldr	r3, [r7, #12]
2000079a:	221f      	movs	r2, #31
2000079c:	4393      	bics	r3, r2
2000079e:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	3b01      	subs	r3, #1
200007a4:	68fa      	ldr	r2, [r7, #12]
200007a6:	4313      	orrs	r3, r2
200007a8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007aa:	4904      	ldr	r1, [pc, #16]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
200007ac:	228c      	movs	r2, #140	; 0x8c
200007ae:	68fb      	ldr	r3, [r7, #12]
200007b0:	508b      	str	r3, [r1, r2]
}
200007b2:	46c0      	nop			; (mov r8, r8)
200007b4:	46bd      	mov	sp, r7
200007b6:	b004      	add	sp, #16
200007b8:	bd80      	pop	{r7, pc}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	40023800 	andmi	r3, r2, r0, lsl #16

200007c0 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b084      	sub	sp, #16
200007c4:	af00      	add	r7, sp, #0
200007c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200007c8:	2300      	movs	r3, #0
200007ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200007cc:	4a0a      	ldr	r2, [pc, #40]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ce:	238c      	movs	r3, #140	; 0x8c
200007d0:	58d3      	ldr	r3, [r2, r3]
200007d2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200007d4:	68fb      	ldr	r3, [r7, #12]
200007d6:	4a09      	ldr	r2, [pc, #36]	; (200007fc <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200007d8:	4013      	ands	r3, r2
200007da:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	3b01      	subs	r3, #1
200007e0:	021b      	lsls	r3, r3, #8
200007e2:	68fa      	ldr	r2, [r7, #12]
200007e4:	4313      	orrs	r3, r2
200007e6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007e8:	4903      	ldr	r1, [pc, #12]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ea:	228c      	movs	r2, #140	; 0x8c
200007ec:	68fb      	ldr	r3, [r7, #12]
200007ee:	508b      	str	r3, [r1, r2]
}
200007f0:	46c0      	nop			; (mov r8, r8)
200007f2:	46bd      	mov	sp, r7
200007f4:	b004      	add	sp, #16
200007f6:	bd80      	pop	{r7, pc}
200007f8:	40023800 	andmi	r3, r2, r0, lsl #16
200007fc:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000800 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000800:	b580      	push	{r7, lr}
20000802:	b084      	sub	sp, #16
20000804:	af00      	add	r7, sp, #0
20000806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000808:	2300      	movs	r3, #0
2000080a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
2000080c:	4a09      	ldr	r2, [pc, #36]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
2000080e:	238c      	movs	r3, #140	; 0x8c
20000810:	58d3      	ldr	r3, [r2, r3]
20000812:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000814:	68fb      	ldr	r3, [r7, #12]
20000816:	4a08      	ldr	r2, [pc, #32]	; (20000838 <RCC_LTDCCLKDivConfig+0x38>)
20000818:	4013      	ands	r3, r2
2000081a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
2000081c:	68fa      	ldr	r2, [r7, #12]
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	4313      	orrs	r3, r2
20000822:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000824:	4903      	ldr	r1, [pc, #12]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
20000826:	228c      	movs	r2, #140	; 0x8c
20000828:	68fb      	ldr	r3, [r7, #12]
2000082a:	508b      	str	r3, [r1, r2]
}
2000082c:	46c0      	nop			; (mov r8, r8)
2000082e:	46bd      	mov	sp, r7
20000830:	b004      	add	sp, #16
20000832:	bd80      	pop	{r7, pc}
20000834:	40023800 	andmi	r3, r2, r0, lsl #16
20000838:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

2000083c <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
2000083c:	b580      	push	{r7, lr}
2000083e:	b082      	sub	sp, #8
20000840:	af00      	add	r7, sp, #0
20000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20000844:	4b03      	ldr	r3, [pc, #12]	; (20000854 <RCC_TIMCLKPresConfig+0x18>)
20000846:	687a      	ldr	r2, [r7, #4]
20000848:	601a      	str	r2, [r3, #0]
}
2000084a:	46c0      	nop			; (mov r8, r8)
2000084c:	46bd      	mov	sp, r7
2000084e:	b002      	add	sp, #8
20000850:	bd80      	pop	{r7, pc}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20000858 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000858:	b580      	push	{r7, lr}
2000085a:	b082      	sub	sp, #8
2000085c:	af00      	add	r7, sp, #0
2000085e:	6078      	str	r0, [r7, #4]
20000860:	000a      	movs	r2, r1
20000862:	1cfb      	adds	r3, r7, #3
20000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000866:	1cfb      	adds	r3, r7, #3
20000868:	781b      	ldrb	r3, [r3, #0]
2000086a:	2b00      	cmp	r3, #0
2000086c:	d006      	beq.n	2000087c <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
2000086e:	4b09      	ldr	r3, [pc, #36]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000870:	6b19      	ldr	r1, [r3, #48]	; 0x30
20000872:	4b08      	ldr	r3, [pc, #32]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000874:	687a      	ldr	r2, [r7, #4]
20000876:	430a      	orrs	r2, r1
20000878:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
2000087a:	e006      	b.n	2000088a <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
2000087c:	4b05      	ldr	r3, [pc, #20]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
2000087e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000880:	687b      	ldr	r3, [r7, #4]
20000882:	43d9      	mvns	r1, r3
20000884:	4b03      	ldr	r3, [pc, #12]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000886:	400a      	ands	r2, r1
20000888:	631a      	str	r2, [r3, #48]	; 0x30
}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	46bd      	mov	sp, r7
2000088e:	b002      	add	sp, #8
20000890:	bd80      	pop	{r7, pc}
20000892:	46c0      	nop			; (mov r8, r8)
20000894:	40023800 	andmi	r3, r2, r0, lsl #16

20000898 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000898:	b580      	push	{r7, lr}
2000089a:	b082      	sub	sp, #8
2000089c:	af00      	add	r7, sp, #0
2000089e:	6078      	str	r0, [r7, #4]
200008a0:	000a      	movs	r2, r1
200008a2:	1cfb      	adds	r3, r7, #3
200008a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008a6:	1cfb      	adds	r3, r7, #3
200008a8:	781b      	ldrb	r3, [r3, #0]
200008aa:	2b00      	cmp	r3, #0
200008ac:	d006      	beq.n	200008bc <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
200008ae:	4b09      	ldr	r3, [pc, #36]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
200008b2:	4b08      	ldr	r3, [pc, #32]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b4:	687a      	ldr	r2, [r7, #4]
200008b6:	430a      	orrs	r2, r1
200008b8:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
200008ba:	e006      	b.n	200008ca <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
200008bc:	4b05      	ldr	r3, [pc, #20]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	43d9      	mvns	r1, r3
200008c4:	4b03      	ldr	r3, [pc, #12]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008c6:	400a      	ands	r2, r1
200008c8:	635a      	str	r2, [r3, #52]	; 0x34
}
200008ca:	46c0      	nop			; (mov r8, r8)
200008cc:	46bd      	mov	sp, r7
200008ce:	b002      	add	sp, #8
200008d0:	bd80      	pop	{r7, pc}
200008d2:	46c0      	nop			; (mov r8, r8)
200008d4:	40023800 	andmi	r3, r2, r0, lsl #16

200008d8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200008d8:	b580      	push	{r7, lr}
200008da:	b082      	sub	sp, #8
200008dc:	af00      	add	r7, sp, #0
200008de:	6078      	str	r0, [r7, #4]
200008e0:	000a      	movs	r2, r1
200008e2:	1cfb      	adds	r3, r7, #3
200008e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008e6:	1cfb      	adds	r3, r7, #3
200008e8:	781b      	ldrb	r3, [r3, #0]
200008ea:	2b00      	cmp	r3, #0
200008ec:	d006      	beq.n	200008fc <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
200008ee:	4b09      	ldr	r3, [pc, #36]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
200008f2:	4b08      	ldr	r3, [pc, #32]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f4:	687a      	ldr	r2, [r7, #4]
200008f6:	430a      	orrs	r2, r1
200008f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
200008fa:	e006      	b.n	2000090a <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
200008fc:	4b05      	ldr	r3, [pc, #20]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	43d9      	mvns	r1, r3
20000904:	4b03      	ldr	r3, [pc, #12]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
20000906:	400a      	ands	r2, r1
20000908:	639a      	str	r2, [r3, #56]	; 0x38
}
2000090a:	46c0      	nop			; (mov r8, r8)
2000090c:	46bd      	mov	sp, r7
2000090e:	b002      	add	sp, #8
20000910:	bd80      	pop	{r7, pc}
20000912:	46c0      	nop			; (mov r8, r8)
20000914:	40023800 	andmi	r3, r2, r0, lsl #16

20000918 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000918:	b580      	push	{r7, lr}
2000091a:	b082      	sub	sp, #8
2000091c:	af00      	add	r7, sp, #0
2000091e:	6078      	str	r0, [r7, #4]
20000920:	000a      	movs	r2, r1
20000922:	1cfb      	adds	r3, r7, #3
20000924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000926:	1cfb      	adds	r3, r7, #3
20000928:	781b      	ldrb	r3, [r3, #0]
2000092a:	2b00      	cmp	r3, #0
2000092c:	d006      	beq.n	2000093c <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
2000092e:	4b09      	ldr	r3, [pc, #36]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000930:	6c19      	ldr	r1, [r3, #64]	; 0x40
20000932:	4b08      	ldr	r3, [pc, #32]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000934:	687a      	ldr	r2, [r7, #4]
20000936:	430a      	orrs	r2, r1
20000938:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
2000093a:	e006      	b.n	2000094a <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
2000093c:	4b05      	ldr	r3, [pc, #20]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
2000093e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000940:	687b      	ldr	r3, [r7, #4]
20000942:	43d9      	mvns	r1, r3
20000944:	4b03      	ldr	r3, [pc, #12]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000946:	400a      	ands	r2, r1
20000948:	641a      	str	r2, [r3, #64]	; 0x40
}
2000094a:	46c0      	nop			; (mov r8, r8)
2000094c:	46bd      	mov	sp, r7
2000094e:	b002      	add	sp, #8
20000950:	bd80      	pop	{r7, pc}
20000952:	46c0      	nop			; (mov r8, r8)
20000954:	40023800 	andmi	r3, r2, r0, lsl #16

20000958 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000958:	b580      	push	{r7, lr}
2000095a:	b082      	sub	sp, #8
2000095c:	af00      	add	r7, sp, #0
2000095e:	6078      	str	r0, [r7, #4]
20000960:	000a      	movs	r2, r1
20000962:	1cfb      	adds	r3, r7, #3
20000964:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000966:	1cfb      	adds	r3, r7, #3
20000968:	781b      	ldrb	r3, [r3, #0]
2000096a:	2b00      	cmp	r3, #0
2000096c:	d006      	beq.n	2000097c <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
2000096e:	4b09      	ldr	r3, [pc, #36]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000970:	6c59      	ldr	r1, [r3, #68]	; 0x44
20000972:	4b08      	ldr	r3, [pc, #32]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000974:	687a      	ldr	r2, [r7, #4]
20000976:	430a      	orrs	r2, r1
20000978:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
2000097a:	e006      	b.n	2000098a <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
2000097c:	4b05      	ldr	r3, [pc, #20]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
2000097e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000980:	687b      	ldr	r3, [r7, #4]
20000982:	43d9      	mvns	r1, r3
20000984:	4b03      	ldr	r3, [pc, #12]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000986:	400a      	ands	r2, r1
20000988:	645a      	str	r2, [r3, #68]	; 0x44
}
2000098a:	46c0      	nop			; (mov r8, r8)
2000098c:	46bd      	mov	sp, r7
2000098e:	b002      	add	sp, #8
20000990:	bd80      	pop	{r7, pc}
20000992:	46c0      	nop			; (mov r8, r8)
20000994:	40023800 	andmi	r3, r2, r0, lsl #16

20000998 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000998:	b580      	push	{r7, lr}
2000099a:	b082      	sub	sp, #8
2000099c:	af00      	add	r7, sp, #0
2000099e:	6078      	str	r0, [r7, #4]
200009a0:	000a      	movs	r2, r1
200009a2:	1cfb      	adds	r3, r7, #3
200009a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009a6:	1cfb      	adds	r3, r7, #3
200009a8:	781b      	ldrb	r3, [r3, #0]
200009aa:	2b00      	cmp	r3, #0
200009ac:	d006      	beq.n	200009bc <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
200009ae:	4b09      	ldr	r3, [pc, #36]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b0:	6919      	ldr	r1, [r3, #16]
200009b2:	4b08      	ldr	r3, [pc, #32]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b4:	687a      	ldr	r2, [r7, #4]
200009b6:	430a      	orrs	r2, r1
200009b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
200009ba:	e006      	b.n	200009ca <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
200009bc:	4b05      	ldr	r3, [pc, #20]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009be:	691a      	ldr	r2, [r3, #16]
200009c0:	687b      	ldr	r3, [r7, #4]
200009c2:	43d9      	mvns	r1, r3
200009c4:	4b03      	ldr	r3, [pc, #12]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009c6:	400a      	ands	r2, r1
200009c8:	611a      	str	r2, [r3, #16]
}
200009ca:	46c0      	nop			; (mov r8, r8)
200009cc:	46bd      	mov	sp, r7
200009ce:	b002      	add	sp, #8
200009d0:	bd80      	pop	{r7, pc}
200009d2:	46c0      	nop			; (mov r8, r8)
200009d4:	40023800 	andmi	r3, r2, r0, lsl #16

200009d8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200009d8:	b580      	push	{r7, lr}
200009da:	b082      	sub	sp, #8
200009dc:	af00      	add	r7, sp, #0
200009de:	6078      	str	r0, [r7, #4]
200009e0:	000a      	movs	r2, r1
200009e2:	1cfb      	adds	r3, r7, #3
200009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009e6:	1cfb      	adds	r3, r7, #3
200009e8:	781b      	ldrb	r3, [r3, #0]
200009ea:	2b00      	cmp	r3, #0
200009ec:	d006      	beq.n	200009fc <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
200009ee:	4b09      	ldr	r3, [pc, #36]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f0:	6959      	ldr	r1, [r3, #20]
200009f2:	4b08      	ldr	r3, [pc, #32]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f4:	687a      	ldr	r2, [r7, #4]
200009f6:	430a      	orrs	r2, r1
200009f8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
200009fa:	e006      	b.n	20000a0a <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
200009fc:	4b05      	ldr	r3, [pc, #20]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009fe:	695a      	ldr	r2, [r3, #20]
20000a00:	687b      	ldr	r3, [r7, #4]
20000a02:	43d9      	mvns	r1, r3
20000a04:	4b03      	ldr	r3, [pc, #12]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
20000a06:	400a      	ands	r2, r1
20000a08:	615a      	str	r2, [r3, #20]
}
20000a0a:	46c0      	nop			; (mov r8, r8)
20000a0c:	46bd      	mov	sp, r7
20000a0e:	b002      	add	sp, #8
20000a10:	bd80      	pop	{r7, pc}
20000a12:	46c0      	nop			; (mov r8, r8)
20000a14:	40023800 	andmi	r3, r2, r0, lsl #16

20000a18 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000a18:	b580      	push	{r7, lr}
20000a1a:	b082      	sub	sp, #8
20000a1c:	af00      	add	r7, sp, #0
20000a1e:	6078      	str	r0, [r7, #4]
20000a20:	000a      	movs	r2, r1
20000a22:	1cfb      	adds	r3, r7, #3
20000a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000a26:	1cfb      	adds	r3, r7, #3
20000a28:	781b      	ldrb	r3, [r3, #0]
20000a2a:	2b00      	cmp	r3, #0
20000a2c:	d006      	beq.n	20000a3c <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000a2e:	4b09      	ldr	r3, [pc, #36]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a30:	6999      	ldr	r1, [r3, #24]
20000a32:	4b08      	ldr	r3, [pc, #32]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a34:	687a      	ldr	r2, [r7, #4]
20000a36:	430a      	orrs	r2, r1
20000a38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000a3a:	e006      	b.n	20000a4a <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000a3c:	4b05      	ldr	r3, [pc, #20]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a3e:	699a      	ldr	r2, [r3, #24]
20000a40:	687b      	ldr	r3, [r7, #4]
20000a42:	43d9      	mvns	r1, r3
20000a44:	4b03      	ldr	r3, [pc, #12]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a46:	400a      	ands	r2, r1
20000a48:	619a      	str	r2, [r3, #24]
}
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b002      	add	sp, #8
20000a50:	bd80      	pop	{r7, pc}
20000a52:	46c0      	nop			; (mov r8, r8)
20000a54:	40023800 	andmi	r3, r2, r0, lsl #16

20000a58 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000a58:	b580      	push	{r7, lr}
20000a5a:	b082      	sub	sp, #8
20000a5c:	af00      	add	r7, sp, #0
20000a5e:	6078      	str	r0, [r7, #4]
20000a60:	000a      	movs	r2, r1
20000a62:	1cfb      	adds	r3, r7, #3
20000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a66:	1cfb      	adds	r3, r7, #3
20000a68:	781b      	ldrb	r3, [r3, #0]
20000a6a:	2b00      	cmp	r3, #0
20000a6c:	d006      	beq.n	20000a7c <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20000a6e:	4b09      	ldr	r3, [pc, #36]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a70:	6a19      	ldr	r1, [r3, #32]
20000a72:	4b08      	ldr	r3, [pc, #32]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a74:	687a      	ldr	r2, [r7, #4]
20000a76:	430a      	orrs	r2, r1
20000a78:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20000a7a:	e006      	b.n	20000a8a <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20000a7c:	4b05      	ldr	r3, [pc, #20]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a7e:	6a1a      	ldr	r2, [r3, #32]
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	43d9      	mvns	r1, r3
20000a84:	4b03      	ldr	r3, [pc, #12]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a86:	400a      	ands	r2, r1
20000a88:	621a      	str	r2, [r3, #32]
}
20000a8a:	46c0      	nop			; (mov r8, r8)
20000a8c:	46bd      	mov	sp, r7
20000a8e:	b002      	add	sp, #8
20000a90:	bd80      	pop	{r7, pc}
20000a92:	46c0      	nop			; (mov r8, r8)
20000a94:	40023800 	andmi	r3, r2, r0, lsl #16

20000a98 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000a98:	b580      	push	{r7, lr}
20000a9a:	b082      	sub	sp, #8
20000a9c:	af00      	add	r7, sp, #0
20000a9e:	6078      	str	r0, [r7, #4]
20000aa0:	000a      	movs	r2, r1
20000aa2:	1cfb      	adds	r3, r7, #3
20000aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000aa6:	1cfb      	adds	r3, r7, #3
20000aa8:	781b      	ldrb	r3, [r3, #0]
20000aaa:	2b00      	cmp	r3, #0
20000aac:	d006      	beq.n	20000abc <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000aae:	4b09      	ldr	r3, [pc, #36]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab0:	6a59      	ldr	r1, [r3, #36]	; 0x24
20000ab2:	4b08      	ldr	r3, [pc, #32]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab4:	687a      	ldr	r2, [r7, #4]
20000ab6:	430a      	orrs	r2, r1
20000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20000aba:	e006      	b.n	20000aca <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20000abc:	4b05      	ldr	r3, [pc, #20]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	43d9      	mvns	r1, r3
20000ac4:	4b03      	ldr	r3, [pc, #12]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ac6:	400a      	ands	r2, r1
20000ac8:	625a      	str	r2, [r3, #36]	; 0x24
}
20000aca:	46c0      	nop			; (mov r8, r8)
20000acc:	46bd      	mov	sp, r7
20000ace:	b002      	add	sp, #8
20000ad0:	bd80      	pop	{r7, pc}
20000ad2:	46c0      	nop			; (mov r8, r8)
20000ad4:	40023800 	andmi	r3, r2, r0, lsl #16

20000ad8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000ad8:	b580      	push	{r7, lr}
20000ada:	b082      	sub	sp, #8
20000adc:	af00      	add	r7, sp, #0
20000ade:	6078      	str	r0, [r7, #4]
20000ae0:	000a      	movs	r2, r1
20000ae2:	1cfb      	adds	r3, r7, #3
20000ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ae6:	1cfb      	adds	r3, r7, #3
20000ae8:	781b      	ldrb	r3, [r3, #0]
20000aea:	2b00      	cmp	r3, #0
20000aec:	d006      	beq.n	20000afc <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20000aee:	4b09      	ldr	r3, [pc, #36]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af0:	6d19      	ldr	r1, [r3, #80]	; 0x50
20000af2:	4b08      	ldr	r3, [pc, #32]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af4:	687a      	ldr	r2, [r7, #4]
20000af6:	430a      	orrs	r2, r1
20000af8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20000afa:	e006      	b.n	20000b0a <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20000afc:	4b05      	ldr	r3, [pc, #20]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20000b00:	687b      	ldr	r3, [r7, #4]
20000b02:	43d9      	mvns	r1, r3
20000b04:	4b03      	ldr	r3, [pc, #12]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000b06:	400a      	ands	r2, r1
20000b08:	651a      	str	r2, [r3, #80]	; 0x50
}
20000b0a:	46c0      	nop			; (mov r8, r8)
20000b0c:	46bd      	mov	sp, r7
20000b0e:	b002      	add	sp, #8
20000b10:	bd80      	pop	{r7, pc}
20000b12:	46c0      	nop			; (mov r8, r8)
20000b14:	40023800 	andmi	r3, r2, r0, lsl #16

20000b18 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000b18:	b580      	push	{r7, lr}
20000b1a:	b082      	sub	sp, #8
20000b1c:	af00      	add	r7, sp, #0
20000b1e:	6078      	str	r0, [r7, #4]
20000b20:	000a      	movs	r2, r1
20000b22:	1cfb      	adds	r3, r7, #3
20000b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b26:	1cfb      	adds	r3, r7, #3
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	2b00      	cmp	r3, #0
20000b2c:	d006      	beq.n	20000b3c <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20000b2e:	4b09      	ldr	r3, [pc, #36]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
20000b32:	4b08      	ldr	r3, [pc, #32]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b34:	687a      	ldr	r2, [r7, #4]
20000b36:	430a      	orrs	r2, r1
20000b38:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20000b3a:	e006      	b.n	20000b4a <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20000b3c:	4b05      	ldr	r3, [pc, #20]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20000b40:	687b      	ldr	r3, [r7, #4]
20000b42:	43d9      	mvns	r1, r3
20000b44:	4b03      	ldr	r3, [pc, #12]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b46:	400a      	ands	r2, r1
20000b48:	655a      	str	r2, [r3, #84]	; 0x54
}
20000b4a:	46c0      	nop			; (mov r8, r8)
20000b4c:	46bd      	mov	sp, r7
20000b4e:	b002      	add	sp, #8
20000b50:	bd80      	pop	{r7, pc}
20000b52:	46c0      	nop			; (mov r8, r8)
20000b54:	40023800 	andmi	r3, r2, r0, lsl #16

20000b58 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000b58:	b580      	push	{r7, lr}
20000b5a:	b082      	sub	sp, #8
20000b5c:	af00      	add	r7, sp, #0
20000b5e:	6078      	str	r0, [r7, #4]
20000b60:	000a      	movs	r2, r1
20000b62:	1cfb      	adds	r3, r7, #3
20000b64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b66:	1cfb      	adds	r3, r7, #3
20000b68:	781b      	ldrb	r3, [r3, #0]
20000b6a:	2b00      	cmp	r3, #0
20000b6c:	d006      	beq.n	20000b7c <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20000b6e:	4b09      	ldr	r3, [pc, #36]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b70:	6d99      	ldr	r1, [r3, #88]	; 0x58
20000b72:	4b08      	ldr	r3, [pc, #32]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b74:	687a      	ldr	r2, [r7, #4]
20000b76:	430a      	orrs	r2, r1
20000b78:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20000b7a:	e006      	b.n	20000b8a <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20000b7c:	4b05      	ldr	r3, [pc, #20]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20000b80:	687b      	ldr	r3, [r7, #4]
20000b82:	43d9      	mvns	r1, r3
20000b84:	4b03      	ldr	r3, [pc, #12]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b86:	400a      	ands	r2, r1
20000b88:	659a      	str	r2, [r3, #88]	; 0x58
}
20000b8a:	46c0      	nop			; (mov r8, r8)
20000b8c:	46bd      	mov	sp, r7
20000b8e:	b002      	add	sp, #8
20000b90:	bd80      	pop	{r7, pc}
20000b92:	46c0      	nop			; (mov r8, r8)
20000b94:	40023800 	andmi	r3, r2, r0, lsl #16

20000b98 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000b98:	b580      	push	{r7, lr}
20000b9a:	b082      	sub	sp, #8
20000b9c:	af00      	add	r7, sp, #0
20000b9e:	6078      	str	r0, [r7, #4]
20000ba0:	000a      	movs	r2, r1
20000ba2:	1cfb      	adds	r3, r7, #3
20000ba4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ba6:	1cfb      	adds	r3, r7, #3
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	2b00      	cmp	r3, #0
20000bac:	d006      	beq.n	20000bbc <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20000bae:	4b09      	ldr	r3, [pc, #36]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb0:	6e19      	ldr	r1, [r3, #96]	; 0x60
20000bb2:	4b08      	ldr	r3, [pc, #32]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb4:	687a      	ldr	r2, [r7, #4]
20000bb6:	430a      	orrs	r2, r1
20000bb8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20000bba:	e006      	b.n	20000bca <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20000bbc:	4b05      	ldr	r3, [pc, #20]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	43d9      	mvns	r1, r3
20000bc4:	4b03      	ldr	r3, [pc, #12]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bc6:	400a      	ands	r2, r1
20000bc8:	661a      	str	r2, [r3, #96]	; 0x60
}
20000bca:	46c0      	nop			; (mov r8, r8)
20000bcc:	46bd      	mov	sp, r7
20000bce:	b002      	add	sp, #8
20000bd0:	bd80      	pop	{r7, pc}
20000bd2:	46c0      	nop			; (mov r8, r8)
20000bd4:	40023800 	andmi	r3, r2, r0, lsl #16

20000bd8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000bd8:	b580      	push	{r7, lr}
20000bda:	b082      	sub	sp, #8
20000bdc:	af00      	add	r7, sp, #0
20000bde:	6078      	str	r0, [r7, #4]
20000be0:	000a      	movs	r2, r1
20000be2:	1cfb      	adds	r3, r7, #3
20000be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000be6:	1cfb      	adds	r3, r7, #3
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	2b00      	cmp	r3, #0
20000bec:	d006      	beq.n	20000bfc <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20000bee:	4b09      	ldr	r3, [pc, #36]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf0:	6e59      	ldr	r1, [r3, #100]	; 0x64
20000bf2:	4b08      	ldr	r3, [pc, #32]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf4:	687a      	ldr	r2, [r7, #4]
20000bf6:	430a      	orrs	r2, r1
20000bf8:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20000bfa:	e006      	b.n	20000c0a <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20000bfc:	4b05      	ldr	r3, [pc, #20]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20000c00:	687b      	ldr	r3, [r7, #4]
20000c02:	43d9      	mvns	r1, r3
20000c04:	4b03      	ldr	r3, [pc, #12]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000c06:	400a      	ands	r2, r1
20000c08:	665a      	str	r2, [r3, #100]	; 0x64
}
20000c0a:	46c0      	nop			; (mov r8, r8)
20000c0c:	46bd      	mov	sp, r7
20000c0e:	b002      	add	sp, #8
20000c10:	bd80      	pop	{r7, pc}
20000c12:	46c0      	nop			; (mov r8, r8)
20000c14:	40023800 	andmi	r3, r2, r0, lsl #16

20000c18 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20000c18:	b580      	push	{r7, lr}
20000c1a:	b082      	sub	sp, #8
20000c1c:	af00      	add	r7, sp, #0
20000c1e:	0002      	movs	r2, r0
20000c20:	1dfb      	adds	r3, r7, #7
20000c22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20000c24:	1dfb      	adds	r3, r7, #7
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	2b01      	cmp	r3, #1
20000c2a:	d106      	bne.n	20000c3a <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c2c:	4b08      	ldr	r3, [pc, #32]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c30:	4b07      	ldr	r3, [pc, #28]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c32:	2108      	movs	r1, #8
20000c34:	430a      	orrs	r2, r1
20000c36:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20000c38:	e005      	b.n	20000c46 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c3a:	4b05      	ldr	r3, [pc, #20]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c3e:	4b04      	ldr	r3, [pc, #16]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c40:	2108      	movs	r1, #8
20000c42:	438a      	bics	r2, r1
20000c44:	671a      	str	r2, [r3, #112]	; 0x70
}
20000c46:	46c0      	nop			; (mov r8, r8)
20000c48:	46bd      	mov	sp, r7
20000c4a:	b002      	add	sp, #8
20000c4c:	bd80      	pop	{r7, pc}
20000c4e:	46c0      	nop			; (mov r8, r8)
20000c50:	40023800 	andmi	r3, r2, r0, lsl #16

20000c54 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20000c54:	b580      	push	{r7, lr}
20000c56:	b082      	sub	sp, #8
20000c58:	af00      	add	r7, sp, #0
20000c5a:	0002      	movs	r2, r0
20000c5c:	1dfb      	adds	r3, r7, #7
20000c5e:	701a      	strb	r2, [r3, #0]
20000c60:	1dbb      	adds	r3, r7, #6
20000c62:	1c0a      	adds	r2, r1, #0
20000c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000c66:	1dbb      	adds	r3, r7, #6
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	2b00      	cmp	r3, #0
20000c6c:	d009      	beq.n	20000c82 <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20000c6e:	4b0c      	ldr	r3, [pc, #48]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c70:	781b      	ldrb	r3, [r3, #0]
20000c72:	b2da      	uxtb	r2, r3
20000c74:	490a      	ldr	r1, [pc, #40]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c76:	1dfb      	adds	r3, r7, #7
20000c78:	781b      	ldrb	r3, [r3, #0]
20000c7a:	4313      	orrs	r3, r2
20000c7c:	b2db      	uxtb	r3, r3
20000c7e:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20000c80:	e00a      	b.n	20000c98 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20000c82:	4b07      	ldr	r3, [pc, #28]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c84:	781b      	ldrb	r3, [r3, #0]
20000c86:	b2db      	uxtb	r3, r3
20000c88:	1dfa      	adds	r2, r7, #7
20000c8a:	7812      	ldrb	r2, [r2, #0]
20000c8c:	43d2      	mvns	r2, r2
20000c8e:	b2d2      	uxtb	r2, r2
20000c90:	4903      	ldr	r1, [pc, #12]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c92:	4013      	ands	r3, r2
20000c94:	b2db      	uxtb	r3, r3
20000c96:	700b      	strb	r3, [r1, #0]
}
20000c98:	46c0      	nop			; (mov r8, r8)
20000c9a:	46bd      	mov	sp, r7
20000c9c:	b002      	add	sp, #8
20000c9e:	bd80      	pop	{r7, pc}
20000ca0:	4002380d 	andmi	r3, r2, sp, lsl #16

20000ca4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b086      	sub	sp, #24
20000ca8:	af00      	add	r7, sp, #0
20000caa:	0002      	movs	r2, r0
20000cac:	1dfb      	adds	r3, r7, #7
20000cae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20000cb0:	2300      	movs	r3, #0
20000cb2:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20000cb4:	2300      	movs	r3, #0
20000cb6:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20000cb8:	2313      	movs	r3, #19
20000cba:	18fb      	adds	r3, r7, r3
20000cbc:	2200      	movs	r2, #0
20000cbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20000cc0:	1dfb      	adds	r3, r7, #7
20000cc2:	781b      	ldrb	r3, [r3, #0]
20000cc4:	095b      	lsrs	r3, r3, #5
20000cc6:	b2db      	uxtb	r3, r3
20000cc8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20000cca:	68fb      	ldr	r3, [r7, #12]
20000ccc:	2b01      	cmp	r3, #1
20000cce:	d103      	bne.n	20000cd8 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20000cd0:	4b14      	ldr	r3, [pc, #80]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000cd2:	681b      	ldr	r3, [r3, #0]
20000cd4:	617b      	str	r3, [r7, #20]
20000cd6:	e009      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20000cd8:	68fb      	ldr	r3, [r7, #12]
20000cda:	2b02      	cmp	r3, #2
20000cdc:	d103      	bne.n	20000ce6 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20000cde:	4b11      	ldr	r3, [pc, #68]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20000ce2:	617b      	str	r3, [r7, #20]
20000ce4:	e002      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20000ce6:	4b0f      	ldr	r3, [pc, #60]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000cea:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20000cec:	1dfb      	adds	r3, r7, #7
20000cee:	781b      	ldrb	r3, [r3, #0]
20000cf0:	221f      	movs	r2, #31
20000cf2:	4013      	ands	r3, r2
20000cf4:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20000cf6:	697a      	ldr	r2, [r7, #20]
20000cf8:	68fb      	ldr	r3, [r7, #12]
20000cfa:	40da      	lsrs	r2, r3
20000cfc:	0013      	movs	r3, r2
20000cfe:	2201      	movs	r2, #1
20000d00:	4013      	ands	r3, r2
20000d02:	d004      	beq.n	20000d0e <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20000d04:	2313      	movs	r3, #19
20000d06:	18fb      	adds	r3, r7, r3
20000d08:	2201      	movs	r2, #1
20000d0a:	701a      	strb	r2, [r3, #0]
20000d0c:	e003      	b.n	20000d16 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20000d0e:	2313      	movs	r3, #19
20000d10:	18fb      	adds	r3, r7, r3
20000d12:	2200      	movs	r2, #0
20000d14:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20000d16:	2313      	movs	r3, #19
20000d18:	18fb      	adds	r3, r7, r3
20000d1a:	781b      	ldrb	r3, [r3, #0]
}
20000d1c:	0018      	movs	r0, r3
20000d1e:	46bd      	mov	sp, r7
20000d20:	b006      	add	sp, #24
20000d22:	bd80      	pop	{r7, pc}
20000d24:	40023800 	andmi	r3, r2, r0, lsl #16

20000d28 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20000d28:	b580      	push	{r7, lr}
20000d2a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20000d2c:	4b04      	ldr	r3, [pc, #16]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20000d30:	4b03      	ldr	r3, [pc, #12]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d32:	2180      	movs	r1, #128	; 0x80
20000d34:	0449      	lsls	r1, r1, #17
20000d36:	430a      	orrs	r2, r1
20000d38:	675a      	str	r2, [r3, #116]	; 0x74
}
20000d3a:	46c0      	nop			; (mov r8, r8)
20000d3c:	46bd      	mov	sp, r7
20000d3e:	bd80      	pop	{r7, pc}
20000d40:	40023800 	andmi	r3, r2, r0, lsl #16

20000d44 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20000d44:	b580      	push	{r7, lr}
20000d46:	b084      	sub	sp, #16
20000d48:	af00      	add	r7, sp, #0
20000d4a:	0002      	movs	r2, r0
20000d4c:	1dfb      	adds	r3, r7, #7
20000d4e:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20000d50:	230f      	movs	r3, #15
20000d52:	18fb      	adds	r3, r7, r3
20000d54:	2200      	movs	r2, #0
20000d56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20000d58:	4b0a      	ldr	r3, [pc, #40]	; (20000d84 <RCC_GetITStatus+0x40>)
20000d5a:	68db      	ldr	r3, [r3, #12]
20000d5c:	1dfa      	adds	r2, r7, #7
20000d5e:	7812      	ldrb	r2, [r2, #0]
20000d60:	4013      	ands	r3, r2
20000d62:	d004      	beq.n	20000d6e <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20000d64:	230f      	movs	r3, #15
20000d66:	18fb      	adds	r3, r7, r3
20000d68:	2201      	movs	r2, #1
20000d6a:	701a      	strb	r2, [r3, #0]
20000d6c:	e003      	b.n	20000d76 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20000d6e:	230f      	movs	r3, #15
20000d70:	18fb      	adds	r3, r7, r3
20000d72:	2200      	movs	r2, #0
20000d74:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20000d76:	230f      	movs	r3, #15
20000d78:	18fb      	adds	r3, r7, r3
20000d7a:	781b      	ldrb	r3, [r3, #0]
}
20000d7c:	0018      	movs	r0, r3
20000d7e:	46bd      	mov	sp, r7
20000d80:	b004      	add	sp, #16
20000d82:	bd80      	pop	{r7, pc}
20000d84:	40023800 	andmi	r3, r2, r0, lsl #16

20000d88 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20000d88:	b580      	push	{r7, lr}
20000d8a:	b082      	sub	sp, #8
20000d8c:	af00      	add	r7, sp, #0
20000d8e:	0002      	movs	r2, r0
20000d90:	1dfb      	adds	r3, r7, #7
20000d92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20000d94:	4a03      	ldr	r2, [pc, #12]	; (20000da4 <RCC_ClearITPendingBit+0x1c>)
20000d96:	1dfb      	adds	r3, r7, #7
20000d98:	781b      	ldrb	r3, [r3, #0]
20000d9a:	7013      	strb	r3, [r2, #0]
}
20000d9c:	46c0      	nop			; (mov r8, r8)
20000d9e:	46bd      	mov	sp, r7
20000da0:	b002      	add	sp, #8
20000da2:	bd80      	pop	{r7, pc}
20000da4:	4002380e 	andmi	r3, r2, lr, lsl #16

20000da8 <init_GPIO_Ports>:
//======================================GPIO=========================================================
void init_GPIO_Ports()
{
20000da8:	b580      	push	{r7, lr}
20000daa:	b082      	sub	sp, #8
20000dac:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO E UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000dae:	2101      	movs	r1, #1
20000db0:	2010      	movs	r0, #16
20000db2:	f7ff fd51 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000db6:	003b      	movs	r3, r7
20000db8:	0018      	movs	r0, r3
20000dba:	f000 fc87 	bl	200016cc <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000dbe:	003b      	movs	r3, r7
20000dc0:	4a64      	ldr	r2, [pc, #400]	; (20000f54 <init_GPIO_Ports+0x1ac>)
20000dc2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000dc4:	003b      	movs	r3, r7
20000dc6:	2201      	movs	r2, #1
20000dc8:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000dca:	003b      	movs	r3, r7
20000dcc:	2200      	movs	r2, #0
20000dce:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000dd0:	003b      	movs	r3, r7
20000dd2:	2200      	movs	r2, #0
20000dd4:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20000dd6:	003b      	movs	r3, r7
20000dd8:	4a5f      	ldr	r2, [pc, #380]	; (20000f58 <init_GPIO_Ports+0x1b0>)
20000dda:	0019      	movs	r1, r3
20000ddc:	0010      	movs	r0, r2
20000dde:	f000 fbe9 	bl	200015b4 <GPIO_Init>
	
	//konfigurerar inport GPIO E
	GPIO_StructInit(&init);
20000de2:	003b      	movs	r3, r7
20000de4:	0018      	movs	r0, r3
20000de6:	f000 fc71 	bl	200016cc <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000dea:	003b      	movs	r3, r7
20000dec:	4a5b      	ldr	r2, [pc, #364]	; (20000f5c <init_GPIO_Ports+0x1b4>)
20000dee:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000df0:	003b      	movs	r3, r7
20000df2:	2200      	movs	r2, #0
20000df4:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000df6:	003b      	movs	r3, r7
20000df8:	2201      	movs	r2, #1
20000dfa:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20000dfc:	003b      	movs	r3, r7
20000dfe:	4a56      	ldr	r2, [pc, #344]	; (20000f58 <init_GPIO_Ports+0x1b0>)
20000e00:	0019      	movs	r1, r3
20000e02:	0010      	movs	r0, r2
20000e04:	f000 fbd6 	bl	200015b4 <GPIO_Init>

    //GPIOA UTPORTAR
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000e08:	2101      	movs	r1, #1
20000e0a:	2001      	movs	r0, #1
20000e0c:	f7ff fd24 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000e10:	003b      	movs	r3, r7
20000e12:	0018      	movs	r0, r3
20000e14:	f000 fc5a 	bl	200016cc <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000e18:	003b      	movs	r3, r7
20000e1a:	4a4e      	ldr	r2, [pc, #312]	; (20000f54 <init_GPIO_Ports+0x1ac>)
20000e1c:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000e1e:	003b      	movs	r3, r7
20000e20:	2201      	movs	r2, #1
20000e22:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000e24:	003b      	movs	r3, r7
20000e26:	2200      	movs	r2, #0
20000e28:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000e2a:	003b      	movs	r3, r7
20000e2c:	2200      	movs	r2, #0
20000e2e:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20000e30:	003b      	movs	r3, r7
20000e32:	4a4b      	ldr	r2, [pc, #300]	; (20000f60 <init_GPIO_Ports+0x1b8>)
20000e34:	0019      	movs	r1, r3
20000e36:	0010      	movs	r0, r2
20000e38:	f000 fbbc 	bl	200015b4 <GPIO_Init>
	
	//konfigurerar inport GPIO a
	GPIO_StructInit(&init);
20000e3c:	003b      	movs	r3, r7
20000e3e:	0018      	movs	r0, r3
20000e40:	f000 fc44 	bl	200016cc <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000e44:	003b      	movs	r3, r7
20000e46:	4a45      	ldr	r2, [pc, #276]	; (20000f5c <init_GPIO_Ports+0x1b4>)
20000e48:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000e4a:	003b      	movs	r3, r7
20000e4c:	2200      	movs	r2, #0
20000e4e:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000e50:	003b      	movs	r3, r7
20000e52:	2201      	movs	r2, #1
20000e54:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20000e56:	003b      	movs	r3, r7
20000e58:	4a41      	ldr	r2, [pc, #260]	; (20000f60 <init_GPIO_Ports+0x1b8>)
20000e5a:	0019      	movs	r1, r3
20000e5c:	0010      	movs	r0, r2
20000e5e:	f000 fba9 	bl	200015b4 <GPIO_Init>

	//GPIO C UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20000e62:	2101      	movs	r1, #1
20000e64:	2004      	movs	r0, #4
20000e66:	f7ff fcf7 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000e6a:	003b      	movs	r3, r7
20000e6c:	0018      	movs	r0, r3
20000e6e:	f000 fc2d 	bl	200016cc <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000e72:	003b      	movs	r3, r7
20000e74:	4a37      	ldr	r2, [pc, #220]	; (20000f54 <init_GPIO_Ports+0x1ac>)
20000e76:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000e78:	003b      	movs	r3, r7
20000e7a:	2201      	movs	r2, #1
20000e7c:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000e7e:	003b      	movs	r3, r7
20000e80:	2200      	movs	r2, #0
20000e82:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000e84:	003b      	movs	r3, r7
20000e86:	2200      	movs	r2, #0
20000e88:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
20000e8a:	003b      	movs	r3, r7
20000e8c:	4a35      	ldr	r2, [pc, #212]	; (20000f64 <init_GPIO_Ports+0x1bc>)
20000e8e:	0019      	movs	r1, r3
20000e90:	0010      	movs	r0, r2
20000e92:	f000 fb8f 	bl	200015b4 <GPIO_Init>
	
	//konfigurerar inport GPIO C
	GPIO_StructInit(&init);
20000e96:	003b      	movs	r3, r7
20000e98:	0018      	movs	r0, r3
20000e9a:	f000 fc17 	bl	200016cc <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000e9e:	003b      	movs	r3, r7
20000ea0:	4a2e      	ldr	r2, [pc, #184]	; (20000f5c <init_GPIO_Ports+0x1b4>)
20000ea2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000ea4:	003b      	movs	r3, r7
20000ea6:	2200      	movs	r2, #0
20000ea8:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000eaa:	003b      	movs	r3, r7
20000eac:	2201      	movs	r2, #1
20000eae:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
20000eb0:	003b      	movs	r3, r7
20000eb2:	4a2c      	ldr	r2, [pc, #176]	; (20000f64 <init_GPIO_Ports+0x1bc>)
20000eb4:	0019      	movs	r1, r3
20000eb6:	0010      	movs	r0, r2
20000eb8:	f000 fb7c 	bl	200015b4 <GPIO_Init>

	//GPIO D UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20000ebc:	2101      	movs	r1, #1
20000ebe:	2008      	movs	r0, #8
20000ec0:	f7ff fcca 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000ec4:	003b      	movs	r3, r7
20000ec6:	0018      	movs	r0, r3
20000ec8:	f000 fc00 	bl	200016cc <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000ecc:	003b      	movs	r3, r7
20000ece:	4a21      	ldr	r2, [pc, #132]	; (20000f54 <init_GPIO_Ports+0x1ac>)
20000ed0:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000ed2:	003b      	movs	r3, r7
20000ed4:	2201      	movs	r2, #1
20000ed6:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000ed8:	003b      	movs	r3, r7
20000eda:	2200      	movs	r2, #0
20000edc:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000ede:	003b      	movs	r3, r7
20000ee0:	2200      	movs	r2, #0
20000ee2:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
20000ee4:	003b      	movs	r3, r7
20000ee6:	4a20      	ldr	r2, [pc, #128]	; (20000f68 <init_GPIO_Ports+0x1c0>)
20000ee8:	0019      	movs	r1, r3
20000eea:	0010      	movs	r0, r2
20000eec:	f000 fb62 	bl	200015b4 <GPIO_Init>
	
	//konfigurerar inport GPIO D
	GPIO_StructInit(&init);
20000ef0:	003b      	movs	r3, r7
20000ef2:	0018      	movs	r0, r3
20000ef4:	f000 fbea 	bl	200016cc <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000ef8:	003b      	movs	r3, r7
20000efa:	4a18      	ldr	r2, [pc, #96]	; (20000f5c <init_GPIO_Ports+0x1b4>)
20000efc:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000efe:	003b      	movs	r3, r7
20000f00:	2200      	movs	r2, #0
20000f02:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000f04:	003b      	movs	r3, r7
20000f06:	2201      	movs	r2, #1
20000f08:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
20000f0a:	003b      	movs	r3, r7
20000f0c:	4a16      	ldr	r2, [pc, #88]	; (20000f68 <init_GPIO_Ports+0x1c0>)
20000f0e:	0019      	movs	r1, r3
20000f10:	0010      	movs	r0, r2
20000f12:	f000 fb4f 	bl	200015b4 <GPIO_Init>

	//GPIO B UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20000f16:	2101      	movs	r1, #1
20000f18:	2002      	movs	r0, #2
20000f1a:	f7ff fc9d 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000f1e:	003b      	movs	r3, r7
20000f20:	0018      	movs	r0, r3
20000f22:	f000 fbd3 	bl	200016cc <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_2;
20000f26:	003b      	movs	r3, r7
20000f28:	2204      	movs	r2, #4
20000f2a:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000f2c:	003b      	movs	r3, r7
20000f2e:	2201      	movs	r2, #1
20000f30:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000f32:	003b      	movs	r3, r7
20000f34:	2200      	movs	r2, #0
20000f36:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000f38:	003b      	movs	r3, r7
20000f3a:	2200      	movs	r2, #0
20000f3c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &init);
20000f3e:	003b      	movs	r3, r7
20000f40:	4a0a      	ldr	r2, [pc, #40]	; (20000f6c <init_GPIO_Ports+0x1c4>)
20000f42:	0019      	movs	r1, r3
20000f44:	0010      	movs	r0, r2
20000f46:	f000 fb35 	bl	200015b4 <GPIO_Init>
20000f4a:	46c0      	nop			; (mov r8, r8)
20000f4c:	46bd      	mov	sp, r7
20000f4e:	b002      	add	sp, #8
20000f50:	bd80      	pop	{r7, pc}
20000f52:	46c0      	nop			; (mov r8, r8)
20000f54:	0000aaaa 	andeq	sl, r0, sl, lsr #21
20000f58:	40021000 	andmi	r1, r2, r0
20000f5c:	00005555 	andeq	r5, r0, r5, asr r5
20000f60:	40020000 	andmi	r0, r2, r0
20000f64:	40020800 	andmi	r0, r2, r0, lsl #16
20000f68:	40020c00 	andmi	r0, r2, r0, lsl #24
20000f6c:	40020400 	andmi	r0, r2, r0, lsl #8

20000f70 <SysTick_Handler>:
GPIO_TypeDef* GPIO_Ports[] = {GPIOE, GPIOA, GPIOC, GPIOD};

// ========================================= SYSTICK ================================================
volatile uint32_t msTicks = 0; /* Variable to store millisecond ticks */
void SysTick_Handler(void)
{ /* SysTick interrupt Handler. */
20000f70:	b580      	push	{r7, lr}
20000f72:	af00      	add	r7, sp, #0
	msTicks++;
20000f74:	4b03      	ldr	r3, [pc, #12]	; (20000f84 <SysTick_Handler+0x14>)
20000f76:	681b      	ldr	r3, [r3, #0]
20000f78:	1c5a      	adds	r2, r3, #1
20000f7a:	4b02      	ldr	r3, [pc, #8]	; (20000f84 <SysTick_Handler+0x14>)
20000f7c:	601a      	str	r2, [r3, #0]
}
20000f7e:	46c0      	nop			; (mov r8, r8)
20000f80:	46bd      	mov	sp, r7
20000f82:	bd80      	pop	{r7, pc}
20000f84:	20002758 	andcs	r2, r0, r8, asr r7

20000f88 <systick_Init>:
void systick_Init(void)
{
20000f88:	b580      	push	{r7, lr}
20000f8a:	b082      	sub	sp, #8
20000f8c:	af00      	add	r7, sp, #0
	// Initiera SysTick.
	*((void (**)(void))0x2001C03C) = SysTick_Handler;
20000f8e:	4b09      	ldr	r3, [pc, #36]	; (20000fb4 <systick_Init+0x2c>)
20000f90:	4a09      	ldr	r2, [pc, #36]	; (20000fb8 <systick_Init+0x30>)
20000f92:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	returnCode = SysTick_Config(168000000 / 1000); // Genererar ett SysTick-avbrott varje ms.
20000f94:	4b09      	ldr	r3, [pc, #36]	; (20000fbc <systick_Init+0x34>)
20000f96:	0018      	movs	r0, r3
20000f98:	f7ff f86a 	bl	20000070 <SysTick_Config>
20000f9c:	0003      	movs	r3, r0
20000f9e:	607b      	str	r3, [r7, #4]

	if (returnCode != 0)
20000fa0:	687b      	ldr	r3, [r7, #4]
20000fa2:	2b00      	cmp	r3, #0
20000fa4:	d001      	beq.n	20000faa <systick_Init+0x22>
	{   
		systick_Init();
20000fa6:	f7ff ffef 	bl	20000f88 <systick_Init>
	}
}
20000faa:	46c0      	nop			; (mov r8, r8)
20000fac:	46bd      	mov	sp, r7
20000fae:	b002      	add	sp, #8
20000fb0:	bd80      	pop	{r7, pc}
20000fb2:	46c0      	nop			; (mov r8, r8)
20000fb4:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000fb8:	20000f71 	andcs	r0, r0, r1, ror pc
20000fbc:	00029040 	andeq	r9, r2, r0, asr #32

20000fc0 <delay>:
void delay (int mili){
20000fc0:	b580      	push	{r7, lr}
20000fc2:	b084      	sub	sp, #16
20000fc4:	af00      	add	r7, sp, #0
20000fc6:	6078      	str	r0, [r7, #4]
		int time = msTicks + mili;
20000fc8:	4b07      	ldr	r3, [pc, #28]	; (20000fe8 <delay+0x28>)
20000fca:	681a      	ldr	r2, [r3, #0]
20000fcc:	687b      	ldr	r3, [r7, #4]
20000fce:	18d3      	adds	r3, r2, r3
20000fd0:	60fb      	str	r3, [r7, #12]
		while(time > msTicks);
20000fd2:	46c0      	nop			; (mov r8, r8)
20000fd4:	68fa      	ldr	r2, [r7, #12]
20000fd6:	4b04      	ldr	r3, [pc, #16]	; (20000fe8 <delay+0x28>)
20000fd8:	681b      	ldr	r3, [r3, #0]
20000fda:	429a      	cmp	r2, r3
20000fdc:	d8fa      	bhi.n	20000fd4 <delay+0x14>
	}
20000fde:	46c0      	nop			; (mov r8, r8)
20000fe0:	46bd      	mov	sp, r7
20000fe2:	b004      	add	sp, #16
20000fe4:	bd80      	pop	{r7, pc}
20000fe6:	46c0      	nop			; (mov r8, r8)
20000fe8:	20002758 	andcs	r2, r0, r8, asr r7

20000fec <main>:

void main(void)
{
20000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
20000fee:	b095      	sub	sp, #84	; 0x54
20000ff0:	af00      	add	r7, sp, #0
	init_GPIO_Ports();
20000ff2:	f7ff fed9 	bl	20000da8 <init_GPIO_Ports>
	systick_Init();
20000ff6:	f7ff ffc7 	bl	20000f88 <systick_Init>
	while(msTicks < 2000);
20000ffa:	46c0      	nop			; (mov r8, r8)
20000ffc:	4bd9      	ldr	r3, [pc, #868]	; (20001364 <main+0x378>)
20000ffe:	681b      	ldr	r3, [r3, #0]
20001000:	4ad9      	ldr	r2, [pc, #868]	; (20001368 <main+0x37c>)
20001002:	4293      	cmp	r3, r2
20001004:	d9fa      	bls.n	20000ffc <main+0x10>

	//door door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16, door17, door18, door19, door20, door21, door22, door23, door24 ,door25, door26, door27, door28,door29,door30,door31,door32;
	//door all_doors[32] = {door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16, door17, door18, door19, door20, door21, door22, door23, door24 ,door25, door26, door27, door28,door29,door30,door31,door32};

	volatile int amountOfActiveDoors = 0;
20001006:	2300      	movs	r3, #0
20001008:	61bb      	str	r3, [r7, #24]
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
2000100a:	2300      	movs	r3, #0
2000100c:	647b      	str	r3, [r7, #68]	; 0x44
2000100e:	e01b      	b.n	20001048 <main+0x5c>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20001010:	2300      	movs	r3, #0
20001012:	64bb      	str	r3, [r7, #72]	; 0x48
20001014:	e012      	b.n	2000103c <main+0x50>
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
20001016:	4bd5      	ldr	r3, [pc, #852]	; (2000136c <main+0x380>)
20001018:	6c7a      	ldr	r2, [r7, #68]	; 0x44
2000101a:	0092      	lsls	r2, r2, #2
2000101c:	58d0      	ldr	r0, [r2, r3]
2000101e:	4bd4      	ldr	r3, [pc, #848]	; (20001370 <main+0x384>)
20001020:	6cba      	ldr	r2, [r7, #72]	; 0x48
20001022:	0052      	lsls	r2, r2, #1
20001024:	5ad3      	ldrh	r3, [r2, r3]
20001026:	0019      	movs	r1, r3
20001028:	f000 fb8d 	bl	20001746 <GPIO_ReadInputDataBit>
2000102c:	1e03      	subs	r3, r0, #0
2000102e:	d102      	bne.n	20001036 <main+0x4a>
				amountOfActiveDoors++;
20001030:	69bb      	ldr	r3, [r7, #24]
20001032:	3301      	adds	r3, #1
20001034:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20001036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
20001038:	3302      	adds	r3, #2
2000103a:	64bb      	str	r3, [r7, #72]	; 0x48
2000103c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2000103e:	2b0f      	cmp	r3, #15
20001040:	d9e9      	bls.n	20001016 <main+0x2a>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20001042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
20001044:	3301      	adds	r3, #1
20001046:	647b      	str	r3, [r7, #68]	; 0x44
20001048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
2000104a:	2b03      	cmp	r3, #3
2000104c:	d9e0      	bls.n	20001010 <main+0x24>
			}
		}
	}
	volatile door active_doors[amountOfActiveDoors];
2000104e:	69be      	ldr	r6, [r7, #24]
20001050:	1e73      	subs	r3, r6, #1
20001052:	623b      	str	r3, [r7, #32]
20001054:	0033      	movs	r3, r6
20001056:	60bb      	str	r3, [r7, #8]
20001058:	2300      	movs	r3, #0
2000105a:	60fb      	str	r3, [r7, #12]
2000105c:	68b9      	ldr	r1, [r7, #8]
2000105e:	68fa      	ldr	r2, [r7, #12]
20001060:	000b      	movs	r3, r1
20001062:	0e1b      	lsrs	r3, r3, #24
20001064:	0010      	movs	r0, r2
20001066:	0200      	lsls	r0, r0, #8
20001068:	6178      	str	r0, [r7, #20]
2000106a:	6978      	ldr	r0, [r7, #20]
2000106c:	4318      	orrs	r0, r3
2000106e:	6178      	str	r0, [r7, #20]
20001070:	000b      	movs	r3, r1
20001072:	021b      	lsls	r3, r3, #8
20001074:	613b      	str	r3, [r7, #16]
20001076:	0033      	movs	r3, r6
20001078:	603b      	str	r3, [r7, #0]
2000107a:	2300      	movs	r3, #0
2000107c:	607b      	str	r3, [r7, #4]
2000107e:	6839      	ldr	r1, [r7, #0]
20001080:	687a      	ldr	r2, [r7, #4]
20001082:	000b      	movs	r3, r1
20001084:	0e1b      	lsrs	r3, r3, #24
20001086:	0010      	movs	r0, r2
20001088:	0205      	lsls	r5, r0, #8
2000108a:	431d      	orrs	r5, r3
2000108c:	000b      	movs	r3, r1
2000108e:	021c      	lsls	r4, r3, #8
20001090:	0033      	movs	r3, r6
20001092:	015b      	lsls	r3, r3, #5
20001094:	3303      	adds	r3, #3
20001096:	3307      	adds	r3, #7
20001098:	08db      	lsrs	r3, r3, #3
2000109a:	00db      	lsls	r3, r3, #3
2000109c:	466a      	mov	r2, sp
2000109e:	1ad3      	subs	r3, r2, r3
200010a0:	469d      	mov	sp, r3
200010a2:	466b      	mov	r3, sp
200010a4:	3303      	adds	r3, #3
200010a6:	089b      	lsrs	r3, r3, #2
200010a8:	009b      	lsls	r3, r3, #2
200010aa:	61fb      	str	r3, [r7, #28]
	int counter = 0;
200010ac:	2300      	movs	r3, #0
200010ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
200010b0:	2300      	movs	r3, #0
200010b2:	643b      	str	r3, [r7, #64]	; 0x40
200010b4:	e051      	b.n	2000115a <main+0x16e>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
200010b6:	2300      	movs	r3, #0
200010b8:	63fb      	str	r3, [r7, #60]	; 0x3c
200010ba:	e048      	b.n	2000114e <main+0x162>
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
200010bc:	4bab      	ldr	r3, [pc, #684]	; (2000136c <main+0x380>)
200010be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
200010c0:	0092      	lsls	r2, r2, #2
200010c2:	58d0      	ldr	r0, [r2, r3]
200010c4:	4baa      	ldr	r3, [pc, #680]	; (20001370 <main+0x384>)
200010c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
200010c8:	0052      	lsls	r2, r2, #1
200010ca:	5ad3      	ldrh	r3, [r2, r3]
200010cc:	0019      	movs	r1, r3
200010ce:	f000 fb3a 	bl	20001746 <GPIO_ReadInputDataBit>
200010d2:	1e03      	subs	r3, r0, #0
200010d4:	d138      	bne.n	20001148 <main+0x15c>
				active_doors[counter].GPIO_read = GPIO_Pins[i];
200010d6:	4ba6      	ldr	r3, [pc, #664]	; (20001370 <main+0x384>)
200010d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
200010da:	0052      	lsls	r2, r2, #1
200010dc:	5ad3      	ldrh	r3, [r2, r3]
200010de:	0019      	movs	r1, r3
200010e0:	69fa      	ldr	r2, [r7, #28]
200010e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
200010e4:	015b      	lsls	r3, r3, #5
200010e6:	18d3      	adds	r3, r2, r3
200010e8:	3314      	adds	r3, #20
200010ea:	6019      	str	r1, [r3, #0]
				active_doors[counter].GPIO_lamp = GPIO_Pins[i+1];
200010ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
200010ee:	1c5a      	adds	r2, r3, #1
200010f0:	4b9f      	ldr	r3, [pc, #636]	; (20001370 <main+0x384>)
200010f2:	0052      	lsls	r2, r2, #1
200010f4:	5ad3      	ldrh	r3, [r2, r3]
200010f6:	0019      	movs	r1, r3
200010f8:	69fa      	ldr	r2, [r7, #28]
200010fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
200010fc:	015b      	lsls	r3, r3, #5
200010fe:	18d3      	adds	r3, r2, r3
20001100:	3310      	adds	r3, #16
20001102:	6019      	str	r1, [r3, #0]
				active_doors[counter].controlbits = 0;
20001104:	69fa      	ldr	r2, [r7, #28]
20001106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20001108:	015b      	lsls	r3, r3, #5
2000110a:	18d3      	adds	r3, r2, r3
2000110c:	3304      	adds	r3, #4
2000110e:	2200      	movs	r2, #0
20001110:	601a      	str	r2, [r3, #0]
				active_doors[counter].time_larm = 1;
20001112:	69fa      	ldr	r2, [r7, #28]
20001114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20001116:	015b      	lsls	r3, r3, #5
20001118:	18d3      	adds	r3, r2, r3
2000111a:	3308      	adds	r3, #8
2000111c:	2201      	movs	r2, #1
2000111e:	701a      	strb	r2, [r3, #0]
				active_doors[counter].time_central_larm = 2;
20001120:	69fa      	ldr	r2, [r7, #28]
20001122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20001124:	015b      	lsls	r3, r3, #5
20001126:	18d3      	adds	r3, r2, r3
20001128:	3309      	adds	r3, #9
2000112a:	2202      	movs	r2, #2
2000112c:	701a      	strb	r2, [r3, #0]
				active_doors[counter].GPIO_type = GPIO_Ports[j];
2000112e:	4b8f      	ldr	r3, [pc, #572]	; (2000136c <main+0x380>)
20001130:	6c3a      	ldr	r2, [r7, #64]	; 0x40
20001132:	0092      	lsls	r2, r2, #2
20001134:	58d2      	ldr	r2, [r2, r3]
20001136:	69f9      	ldr	r1, [r7, #28]
20001138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
2000113a:	015b      	lsls	r3, r3, #5
2000113c:	18cb      	adds	r3, r1, r3
2000113e:	331c      	adds	r3, #28
20001140:	601a      	str	r2, [r3, #0]
				//active_doors[counter] = all_doors[counter];
				counter++;
20001142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20001144:	3301      	adds	r3, #1
20001146:	64fb      	str	r3, [r7, #76]	; 0x4c
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20001148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
2000114a:	3302      	adds	r3, #2
2000114c:	63fb      	str	r3, [r7, #60]	; 0x3c
2000114e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20001150:	2b0f      	cmp	r3, #15
20001152:	d9b3      	bls.n	200010bc <main+0xd0>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20001154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20001156:	3301      	adds	r3, #1
20001158:	643b      	str	r3, [r7, #64]	; 0x40
2000115a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
2000115c:	2b03      	cmp	r3, #3
2000115e:	d9aa      	bls.n	200010b6 <main+0xca>
			}
		}
	}
	// ================================== LIGHTS =========================================================
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20001160:	2300      	movs	r3, #0
20001162:	63bb      	str	r3, [r7, #56]	; 0x38
20001164:	e015      	b.n	20001192 <main+0x1a6>
	{
		GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20001166:	69fa      	ldr	r2, [r7, #28]
20001168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000116a:	015b      	lsls	r3, r3, #5
2000116c:	18d3      	adds	r3, r2, r3
2000116e:	331c      	adds	r3, #28
20001170:	6818      	ldr	r0, [r3, #0]
20001172:	69fa      	ldr	r2, [r7, #28]
20001174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001176:	015b      	lsls	r3, r3, #5
20001178:	18d3      	adds	r3, r2, r3
2000117a:	3310      	adds	r3, #16
2000117c:	681b      	ldr	r3, [r3, #0]
2000117e:	b29b      	uxth	r3, r3
20001180:	0019      	movs	r1, r3
20001182:	f000 fb38 	bl	200017f6 <GPIO_SetBits>
		delay(100);	
20001186:	2064      	movs	r0, #100	; 0x64
20001188:	f7ff ff1a 	bl	20000fc0 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
2000118c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000118e:	3301      	adds	r3, #1
20001190:	63bb      	str	r3, [r7, #56]	; 0x38
20001192:	0033      	movs	r3, r6
20001194:	015b      	lsls	r3, r3, #5
20001196:	095a      	lsrs	r2, r3, #5
20001198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000119a:	429a      	cmp	r2, r3
2000119c:	d8e3      	bhi.n	20001166 <main+0x17a>
		
	}
	for (int i = sizeof(active_doors)/sizeof(active_doors[0]); i >= 0 ; i--) //CHRISTMAST LIGHTS FTW
2000119e:	0033      	movs	r3, r6
200011a0:	015b      	lsls	r3, r3, #5
200011a2:	095b      	lsrs	r3, r3, #5
200011a4:	637b      	str	r3, [r7, #52]	; 0x34
200011a6:	e015      	b.n	200011d4 <main+0x1e8>
	{
		GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
200011a8:	69fa      	ldr	r2, [r7, #28]
200011aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200011ac:	015b      	lsls	r3, r3, #5
200011ae:	18d3      	adds	r3, r2, r3
200011b0:	331c      	adds	r3, #28
200011b2:	6818      	ldr	r0, [r3, #0]
200011b4:	69fa      	ldr	r2, [r7, #28]
200011b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200011b8:	015b      	lsls	r3, r3, #5
200011ba:	18d3      	adds	r3, r2, r3
200011bc:	3310      	adds	r3, #16
200011be:	681b      	ldr	r3, [r3, #0]
200011c0:	b29b      	uxth	r3, r3
200011c2:	0019      	movs	r1, r3
200011c4:	f000 fb26 	bl	20001814 <GPIO_ResetBits>
		delay(100);
200011c8:	2064      	movs	r0, #100	; 0x64
200011ca:	f7ff fef9 	bl	20000fc0 <delay>
	for (int i = sizeof(active_doors)/sizeof(active_doors[0]); i >= 0 ; i--) //CHRISTMAST LIGHTS FTW
200011ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200011d0:	3b01      	subs	r3, #1
200011d2:	637b      	str	r3, [r7, #52]	; 0x34
200011d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200011d6:	2b00      	cmp	r3, #0
200011d8:	dae6      	bge.n	200011a8 <main+0x1bc>
	}
	delay(200);
200011da:	20c8      	movs	r0, #200	; 0xc8
200011dc:	f7ff fef0 	bl	20000fc0 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
200011e0:	2300      	movs	r3, #0
200011e2:	633b      	str	r3, [r7, #48]	; 0x30
200011e4:	e012      	b.n	2000120c <main+0x220>
	{
		GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
200011e6:	69fa      	ldr	r2, [r7, #28]
200011e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200011ea:	015b      	lsls	r3, r3, #5
200011ec:	18d3      	adds	r3, r2, r3
200011ee:	331c      	adds	r3, #28
200011f0:	6818      	ldr	r0, [r3, #0]
200011f2:	69fa      	ldr	r2, [r7, #28]
200011f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200011f6:	015b      	lsls	r3, r3, #5
200011f8:	18d3      	adds	r3, r2, r3
200011fa:	3310      	adds	r3, #16
200011fc:	681b      	ldr	r3, [r3, #0]
200011fe:	b29b      	uxth	r3, r3
20001200:	0019      	movs	r1, r3
20001202:	f000 faf8 	bl	200017f6 <GPIO_SetBits>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20001206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001208:	3301      	adds	r3, #1
2000120a:	633b      	str	r3, [r7, #48]	; 0x30
2000120c:	0033      	movs	r3, r6
2000120e:	015b      	lsls	r3, r3, #5
20001210:	095a      	lsrs	r2, r3, #5
20001212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001214:	429a      	cmp	r2, r3
20001216:	d8e6      	bhi.n	200011e6 <main+0x1fa>
	}
	delay(3000);
20001218:	4b56      	ldr	r3, [pc, #344]	; (20001374 <main+0x388>)
2000121a:	0018      	movs	r0, r3
2000121c:	f7ff fed0 	bl	20000fc0 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20001220:	2300      	movs	r3, #0
20001222:	62fb      	str	r3, [r7, #44]	; 0x2c
20001224:	e012      	b.n	2000124c <main+0x260>
	{
		GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20001226:	69fa      	ldr	r2, [r7, #28]
20001228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000122a:	015b      	lsls	r3, r3, #5
2000122c:	18d3      	adds	r3, r2, r3
2000122e:	331c      	adds	r3, #28
20001230:	6818      	ldr	r0, [r3, #0]
20001232:	69fa      	ldr	r2, [r7, #28]
20001234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001236:	015b      	lsls	r3, r3, #5
20001238:	18d3      	adds	r3, r2, r3
2000123a:	3310      	adds	r3, #16
2000123c:	681b      	ldr	r3, [r3, #0]
2000123e:	b29b      	uxth	r3, r3
20001240:	0019      	movs	r1, r3
20001242:	f000 fae7 	bl	20001814 <GPIO_ResetBits>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20001246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001248:	3301      	adds	r3, #1
2000124a:	62fb      	str	r3, [r7, #44]	; 0x2c
2000124c:	0033      	movs	r3, r6
2000124e:	015b      	lsls	r3, r3, #5
20001250:	095a      	lsrs	r2, r3, #5
20001252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001254:	429a      	cmp	r2, r3
20001256:	d8e6      	bhi.n	20001226 <main+0x23a>
	}
	

	GPIO_SetBits(GPIOB, GPIO_Pin_2);
20001258:	4b47      	ldr	r3, [pc, #284]	; (20001378 <main+0x38c>)
2000125a:	2104      	movs	r1, #4
2000125c:	0018      	movs	r0, r3
2000125e:	f000 faca 	bl	200017f6 <GPIO_SetBits>
	//active_doors[2].controlbits |= 4;
	while (1)
	{
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20001262:	2300      	movs	r3, #0
20001264:	62bb      	str	r3, [r7, #40]	; 0x28
20001266:	e0e0      	b.n	2000142a <main+0x43e>
		{
			if (!(active_doors[i].controlbits & 4))
20001268:	69fa      	ldr	r2, [r7, #28]
2000126a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000126c:	015b      	lsls	r3, r3, #5
2000126e:	18d3      	adds	r3, r2, r3
20001270:	3304      	adds	r3, #4
20001272:	681b      	ldr	r3, [r3, #0]
20001274:	2204      	movs	r2, #4
20001276:	4013      	ands	r3, r2
20001278:	d000      	beq.n	2000127c <main+0x290>
2000127a:	e0d3      	b.n	20001424 <main+0x438>
				{
				if (!GPIO_ReadInputDataBit(active_doors[i].GPIO_type, active_doors[i].GPIO_read)){ //GPIO pinnen är noll ifall dörren är stängd därför !
2000127c:	69fa      	ldr	r2, [r7, #28]
2000127e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001280:	015b      	lsls	r3, r3, #5
20001282:	18d3      	adds	r3, r2, r3
20001284:	331c      	adds	r3, #28
20001286:	6818      	ldr	r0, [r3, #0]
20001288:	69fa      	ldr	r2, [r7, #28]
2000128a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000128c:	015b      	lsls	r3, r3, #5
2000128e:	18d3      	adds	r3, r2, r3
20001290:	3314      	adds	r3, #20
20001292:	681b      	ldr	r3, [r3, #0]
20001294:	b29b      	uxth	r3, r3
20001296:	0019      	movs	r1, r3
20001298:	f000 fa55 	bl	20001746 <GPIO_ReadInputDataBit>
2000129c:	1e03      	subs	r3, r0, #0
2000129e:	d10e      	bne.n	200012be <main+0x2d2>
					active_doors[i].controlbits &= 0xFFFC; //Nollställer kontrollbiten för ifall en dörr är öppen och spam kontrollbiten för 
200012a0:	69fa      	ldr	r2, [r7, #28]
200012a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
200012a4:	015b      	lsls	r3, r3, #5
200012a6:	18d3      	adds	r3, r2, r3
200012a8:	3304      	adds	r3, #4
200012aa:	681b      	ldr	r3, [r3, #0]
200012ac:	4a33      	ldr	r2, [pc, #204]	; (2000137c <main+0x390>)
200012ae:	401a      	ands	r2, r3
200012b0:	69f9      	ldr	r1, [r7, #28]
200012b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
200012b4:	015b      	lsls	r3, r3, #5
200012b6:	18cb      	adds	r3, r1, r3
200012b8:	3304      	adds	r3, #4
200012ba:	601a      	str	r2, [r3, #0]
200012bc:	e01e      	b.n	200012fc <main+0x310>
					//att skicka medelande till centralenheten, när den detekteras som stängd
					
				}
				else{
					if (!active_doors[i].controlbits & 1) // Kollar så att dörren inte larmar sen innan så larmtick inte uppdateras hela tiden
200012be:	69fa      	ldr	r2, [r7, #28]
200012c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
200012c2:	015b      	lsls	r3, r3, #5
200012c4:	18d3      	adds	r3, r2, r3
200012c6:	3304      	adds	r3, #4
200012c8:	681b      	ldr	r3, [r3, #0]
200012ca:	2b00      	cmp	r3, #0
200012cc:	d108      	bne.n	200012e0 <main+0x2f4>
					{
						active_doors[i].larmTick = msTicks;
200012ce:	4b25      	ldr	r3, [pc, #148]	; (20001364 <main+0x378>)
200012d0:	681b      	ldr	r3, [r3, #0]
200012d2:	0019      	movs	r1, r3
200012d4:	69fa      	ldr	r2, [r7, #28]
200012d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
200012d8:	015b      	lsls	r3, r3, #5
200012da:	18d3      	adds	r3, r2, r3
200012dc:	3318      	adds	r3, #24
200012de:	6019      	str	r1, [r3, #0]
					}
					active_doors[i].controlbits |= 1; // sätter dörrens larm kontrollbit till 1.
200012e0:	69fa      	ldr	r2, [r7, #28]
200012e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
200012e4:	015b      	lsls	r3, r3, #5
200012e6:	18d3      	adds	r3, r2, r3
200012e8:	3304      	adds	r3, #4
200012ea:	681b      	ldr	r3, [r3, #0]
200012ec:	2201      	movs	r2, #1
200012ee:	431a      	orrs	r2, r3
200012f0:	69f9      	ldr	r1, [r7, #28]
200012f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
200012f4:	015b      	lsls	r3, r3, #5
200012f6:	18cb      	adds	r3, r1, r3
200012f8:	3304      	adds	r3, #4
200012fa:	601a      	str	r2, [r3, #0]
				}
				for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
200012fc:	2300      	movs	r3, #0
200012fe:	627b      	str	r3, [r7, #36]	; 0x24
20001300:	e089      	b.n	20001416 <main+0x42a>
				{
					if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_larm))
20001302:	69fa      	ldr	r2, [r7, #28]
20001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001306:	015b      	lsls	r3, r3, #5
20001308:	18d3      	adds	r3, r2, r3
2000130a:	3304      	adds	r3, #4
2000130c:	681b      	ldr	r3, [r3, #0]
2000130e:	2201      	movs	r2, #1
20001310:	4013      	ands	r3, r2
20001312:	d037      	beq.n	20001384 <main+0x398>
20001314:	69fa      	ldr	r2, [r7, #28]
20001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001318:	015b      	lsls	r3, r3, #5
2000131a:	18d3      	adds	r3, r2, r3
2000131c:	3318      	adds	r3, #24
2000131e:	681a      	ldr	r2, [r3, #0]
20001320:	69f9      	ldr	r1, [r7, #28]
20001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001324:	015b      	lsls	r3, r3, #5
20001326:	18cb      	adds	r3, r1, r3
20001328:	3308      	adds	r3, #8
2000132a:	781b      	ldrb	r3, [r3, #0]
2000132c:	b2db      	uxtb	r3, r3
2000132e:	0019      	movs	r1, r3
20001330:	4b13      	ldr	r3, [pc, #76]	; (20001380 <main+0x394>)
20001332:	434b      	muls	r3, r1
20001334:	18d3      	adds	r3, r2, r3
20001336:	001a      	movs	r2, r3
20001338:	4b0a      	ldr	r3, [pc, #40]	; (20001364 <main+0x378>)
2000133a:	681b      	ldr	r3, [r3, #0]
2000133c:	429a      	cmp	r2, r3
2000133e:	d221      	bcs.n	20001384 <main+0x398>
					{
						GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp); // tänder lampan ifall tiden för att dörren ska larma har gått
20001340:	69fa      	ldr	r2, [r7, #28]
20001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001344:	015b      	lsls	r3, r3, #5
20001346:	18d3      	adds	r3, r2, r3
20001348:	331c      	adds	r3, #28
2000134a:	6818      	ldr	r0, [r3, #0]
2000134c:	69fa      	ldr	r2, [r7, #28]
2000134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001350:	015b      	lsls	r3, r3, #5
20001352:	18d3      	adds	r3, r2, r3
20001354:	3310      	adds	r3, #16
20001356:	681b      	ldr	r3, [r3, #0]
20001358:	b29b      	uxth	r3, r3
2000135a:	0019      	movs	r1, r3
2000135c:	f000 fa4b 	bl	200017f6 <GPIO_SetBits>
20001360:	e020      	b.n	200013a4 <main+0x3b8>
20001362:	46c0      	nop			; (mov r8, r8)
20001364:	20002758 	andcs	r2, r0, r8, asr r7
20001368:	000007cf 	andeq	r0, r0, pc, asr #15
2000136c:	2000278c 	andcs	r2, r0, ip, lsl #15
20001370:	2000276c 	andcs	r2, r0, ip, ror #14
20001374:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
20001378:	40020400 	andmi	r0, r2, r0, lsl #8
2000137c:	0000fffc 	strdeq	pc, [r0], -ip
20001380:	00002710 	andeq	r2, r0, r0, lsl r7
					}
					else
					{
						GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);	// släcker lampan annars
20001384:	69fa      	ldr	r2, [r7, #28]
20001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001388:	015b      	lsls	r3, r3, #5
2000138a:	18d3      	adds	r3, r2, r3
2000138c:	331c      	adds	r3, #28
2000138e:	6818      	ldr	r0, [r3, #0]
20001390:	69fa      	ldr	r2, [r7, #28]
20001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001394:	015b      	lsls	r3, r3, #5
20001396:	18d3      	adds	r3, r2, r3
20001398:	3310      	adds	r3, #16
2000139a:	681b      	ldr	r3, [r3, #0]
2000139c:	b29b      	uxth	r3, r3
2000139e:	0019      	movs	r1, r3
200013a0:	f000 fa38 	bl	20001814 <GPIO_ResetBits>
					}
					if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_central_larm) && active_doors[i].controlbits & 2)
200013a4:	69fa      	ldr	r2, [r7, #28]
200013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200013a8:	015b      	lsls	r3, r3, #5
200013aa:	18d3      	adds	r3, r2, r3
200013ac:	3304      	adds	r3, #4
200013ae:	681b      	ldr	r3, [r3, #0]
200013b0:	2201      	movs	r2, #1
200013b2:	4013      	ands	r3, r2
200013b4:	d02c      	beq.n	20001410 <main+0x424>
200013b6:	69fa      	ldr	r2, [r7, #28]
200013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200013ba:	015b      	lsls	r3, r3, #5
200013bc:	18d3      	adds	r3, r2, r3
200013be:	3318      	adds	r3, #24
200013c0:	681a      	ldr	r2, [r3, #0]
200013c2:	69f9      	ldr	r1, [r7, #28]
200013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200013c6:	015b      	lsls	r3, r3, #5
200013c8:	18cb      	adds	r3, r1, r3
200013ca:	3309      	adds	r3, #9
200013cc:	781b      	ldrb	r3, [r3, #0]
200013ce:	b2db      	uxtb	r3, r3
200013d0:	0019      	movs	r1, r3
200013d2:	4b1a      	ldr	r3, [pc, #104]	; (2000143c <main+0x450>)
200013d4:	434b      	muls	r3, r1
200013d6:	18d3      	adds	r3, r2, r3
200013d8:	001a      	movs	r2, r3
200013da:	4b19      	ldr	r3, [pc, #100]	; (20001440 <main+0x454>)
200013dc:	681b      	ldr	r3, [r3, #0]
200013de:	429a      	cmp	r2, r3
200013e0:	d216      	bcs.n	20001410 <main+0x424>
200013e2:	69fa      	ldr	r2, [r7, #28]
200013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200013e6:	015b      	lsls	r3, r3, #5
200013e8:	18d3      	adds	r3, r2, r3
200013ea:	3304      	adds	r3, #4
200013ec:	681b      	ldr	r3, [r3, #0]
200013ee:	2202      	movs	r2, #2
200013f0:	4013      	ands	r3, r2
200013f2:	d00d      	beq.n	20001410 <main+0x424>
					{
						active_doors[i].controlbits |= 2;
200013f4:	69fa      	ldr	r2, [r7, #28]
200013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200013f8:	015b      	lsls	r3, r3, #5
200013fa:	18d3      	adds	r3, r2, r3
200013fc:	3304      	adds	r3, #4
200013fe:	681b      	ldr	r3, [r3, #0]
20001400:	2202      	movs	r2, #2
20001402:	431a      	orrs	r2, r3
20001404:	69f9      	ldr	r1, [r7, #28]
20001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001408:	015b      	lsls	r3, r3, #5
2000140a:	18cb      	adds	r3, r1, r3
2000140c:	3304      	adds	r3, #4
2000140e:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001412:	3301      	adds	r3, #1
20001414:	627b      	str	r3, [r7, #36]	; 0x24
20001416:	0033      	movs	r3, r6
20001418:	015b      	lsls	r3, r3, #5
2000141a:	095a      	lsrs	r2, r3, #5
2000141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000141e:	429a      	cmp	r2, r3
20001420:	d900      	bls.n	20001424 <main+0x438>
20001422:	e76e      	b.n	20001302 <main+0x316>
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20001424:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001426:	3301      	adds	r3, #1
20001428:	62bb      	str	r3, [r7, #40]	; 0x28
2000142a:	0033      	movs	r3, r6
2000142c:	015b      	lsls	r3, r3, #5
2000142e:	095a      	lsrs	r2, r3, #5
20001430:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001432:	429a      	cmp	r2, r3
20001434:	d900      	bls.n	20001438 <main+0x44c>
20001436:	e717      	b.n	20001268 <main+0x27c>
20001438:	e713      	b.n	20001262 <main+0x276>
2000143a:	46c0      	nop			; (mov r8, r8)
2000143c:	00002710 	andeq	r2, r0, r0, lsl r7
20001440:	20002758 	andcs	r2, r0, r8, asr r7

20001444 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
20001444:	b580      	push	{r7, lr}
20001446:	b082      	sub	sp, #8
20001448:	af00      	add	r7, sp, #0
2000144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
2000144c:	687b      	ldr	r3, [r7, #4]
2000144e:	4a4e      	ldr	r2, [pc, #312]	; (20001588 <GPIO_DeInit+0x144>)
20001450:	4293      	cmp	r3, r2
20001452:	d108      	bne.n	20001466 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20001454:	2101      	movs	r1, #1
20001456:	2001      	movs	r0, #1
20001458:	f7ff fa9e 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
2000145c:	2100      	movs	r1, #0
2000145e:	2001      	movs	r0, #1
20001460:	f7ff fa9a 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
20001464:	e08c      	b.n	20001580 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
20001466:	687b      	ldr	r3, [r7, #4]
20001468:	4a48      	ldr	r2, [pc, #288]	; (2000158c <GPIO_DeInit+0x148>)
2000146a:	4293      	cmp	r3, r2
2000146c:	d108      	bne.n	20001480 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
2000146e:	2101      	movs	r1, #1
20001470:	2002      	movs	r0, #2
20001472:	f7ff fa91 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
20001476:	2100      	movs	r1, #0
20001478:	2002      	movs	r0, #2
2000147a:	f7ff fa8d 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
2000147e:	e07f      	b.n	20001580 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20001480:	687b      	ldr	r3, [r7, #4]
20001482:	4a43      	ldr	r2, [pc, #268]	; (20001590 <GPIO_DeInit+0x14c>)
20001484:	4293      	cmp	r3, r2
20001486:	d108      	bne.n	2000149a <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20001488:	2101      	movs	r1, #1
2000148a:	2004      	movs	r0, #4
2000148c:	f7ff fa84 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20001490:	2100      	movs	r1, #0
20001492:	2004      	movs	r0, #4
20001494:	f7ff fa80 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001498:	e072      	b.n	20001580 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
2000149a:	687b      	ldr	r3, [r7, #4]
2000149c:	4a3d      	ldr	r2, [pc, #244]	; (20001594 <GPIO_DeInit+0x150>)
2000149e:	4293      	cmp	r3, r2
200014a0:	d108      	bne.n	200014b4 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
200014a2:	2101      	movs	r1, #1
200014a4:	2008      	movs	r0, #8
200014a6:	f7ff fa77 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
200014aa:	2100      	movs	r1, #0
200014ac:	2008      	movs	r0, #8
200014ae:	f7ff fa73 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200014b2:	e065      	b.n	20001580 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
200014b4:	687b      	ldr	r3, [r7, #4]
200014b6:	4a38      	ldr	r2, [pc, #224]	; (20001598 <GPIO_DeInit+0x154>)
200014b8:	4293      	cmp	r3, r2
200014ba:	d108      	bne.n	200014ce <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
200014bc:	2101      	movs	r1, #1
200014be:	2010      	movs	r0, #16
200014c0:	f7ff fa6a 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
200014c4:	2100      	movs	r1, #0
200014c6:	2010      	movs	r0, #16
200014c8:	f7ff fa66 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200014cc:	e058      	b.n	20001580 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
200014ce:	687b      	ldr	r3, [r7, #4]
200014d0:	4a32      	ldr	r2, [pc, #200]	; (2000159c <GPIO_DeInit+0x158>)
200014d2:	4293      	cmp	r3, r2
200014d4:	d108      	bne.n	200014e8 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
200014d6:	2101      	movs	r1, #1
200014d8:	2020      	movs	r0, #32
200014da:	f7ff fa5d 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
200014de:	2100      	movs	r1, #0
200014e0:	2020      	movs	r0, #32
200014e2:	f7ff fa59 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200014e6:	e04b      	b.n	20001580 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
200014e8:	687b      	ldr	r3, [r7, #4]
200014ea:	4a2d      	ldr	r2, [pc, #180]	; (200015a0 <GPIO_DeInit+0x15c>)
200014ec:	4293      	cmp	r3, r2
200014ee:	d108      	bne.n	20001502 <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
200014f0:	2101      	movs	r1, #1
200014f2:	2040      	movs	r0, #64	; 0x40
200014f4:	f7ff fa50 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
200014f8:	2100      	movs	r1, #0
200014fa:	2040      	movs	r0, #64	; 0x40
200014fc:	f7ff fa4c 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001500:	e03e      	b.n	20001580 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
20001502:	687b      	ldr	r3, [r7, #4]
20001504:	4a27      	ldr	r2, [pc, #156]	; (200015a4 <GPIO_DeInit+0x160>)
20001506:	4293      	cmp	r3, r2
20001508:	d108      	bne.n	2000151c <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
2000150a:	2101      	movs	r1, #1
2000150c:	2080      	movs	r0, #128	; 0x80
2000150e:	f7ff fa43 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
20001512:	2100      	movs	r1, #0
20001514:	2080      	movs	r0, #128	; 0x80
20001516:	f7ff fa3f 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
2000151a:	e031      	b.n	20001580 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
2000151c:	687b      	ldr	r3, [r7, #4]
2000151e:	4a22      	ldr	r2, [pc, #136]	; (200015a8 <GPIO_DeInit+0x164>)
20001520:	4293      	cmp	r3, r2
20001522:	d10c      	bne.n	2000153e <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
20001524:	2380      	movs	r3, #128	; 0x80
20001526:	005b      	lsls	r3, r3, #1
20001528:	2101      	movs	r1, #1
2000152a:	0018      	movs	r0, r3
2000152c:	f7ff fa34 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20001530:	2380      	movs	r3, #128	; 0x80
20001532:	005b      	lsls	r3, r3, #1
20001534:	2100      	movs	r1, #0
20001536:	0018      	movs	r0, r3
20001538:	f7ff fa2e 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
2000153c:	e020      	b.n	20001580 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
2000153e:	687b      	ldr	r3, [r7, #4]
20001540:	4a1a      	ldr	r2, [pc, #104]	; (200015ac <GPIO_DeInit+0x168>)
20001542:	4293      	cmp	r3, r2
20001544:	d10c      	bne.n	20001560 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
20001546:	2380      	movs	r3, #128	; 0x80
20001548:	009b      	lsls	r3, r3, #2
2000154a:	2101      	movs	r1, #1
2000154c:	0018      	movs	r0, r3
2000154e:	f7ff fa23 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
20001552:	2380      	movs	r3, #128	; 0x80
20001554:	009b      	lsls	r3, r3, #2
20001556:	2100      	movs	r1, #0
20001558:	0018      	movs	r0, r3
2000155a:	f7ff fa1d 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
2000155e:	e00f      	b.n	20001580 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20001560:	687b      	ldr	r3, [r7, #4]
20001562:	4a13      	ldr	r2, [pc, #76]	; (200015b0 <GPIO_DeInit+0x16c>)
20001564:	4293      	cmp	r3, r2
20001566:	d10b      	bne.n	20001580 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
20001568:	2380      	movs	r3, #128	; 0x80
2000156a:	00db      	lsls	r3, r3, #3
2000156c:	2101      	movs	r1, #1
2000156e:	0018      	movs	r0, r3
20001570:	f7ff fa12 	bl	20000998 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20001574:	2380      	movs	r3, #128	; 0x80
20001576:	00db      	lsls	r3, r3, #3
20001578:	2100      	movs	r1, #0
2000157a:	0018      	movs	r0, r3
2000157c:	f7ff fa0c 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001580:	46c0      	nop			; (mov r8, r8)
20001582:	46bd      	mov	sp, r7
20001584:	b002      	add	sp, #8
20001586:	bd80      	pop	{r7, pc}
20001588:	40020000 	andmi	r0, r2, r0
2000158c:	40020400 	andmi	r0, r2, r0, lsl #8
20001590:	40020800 	andmi	r0, r2, r0, lsl #16
20001594:	40020c00 	andmi	r0, r2, r0, lsl #24
20001598:	40021000 	andmi	r1, r2, r0
2000159c:	40021400 	andmi	r1, r2, r0, lsl #8
200015a0:	40021800 	andmi	r1, r2, r0, lsl #16
200015a4:	40021c00 	andmi	r1, r2, r0, lsl #24
200015a8:	40022000 	andmi	r2, r2, r0
200015ac:	40022400 	andmi	r2, r2, r0, lsl #8
200015b0:	40022800 	andmi	r2, r2, r0, lsl #16

200015b4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
200015b4:	b580      	push	{r7, lr}
200015b6:	b086      	sub	sp, #24
200015b8:	af00      	add	r7, sp, #0
200015ba:	6078      	str	r0, [r7, #4]
200015bc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
200015be:	2300      	movs	r3, #0
200015c0:	617b      	str	r3, [r7, #20]
200015c2:	2300      	movs	r3, #0
200015c4:	613b      	str	r3, [r7, #16]
200015c6:	2300      	movs	r3, #0
200015c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
200015ca:	2300      	movs	r3, #0
200015cc:	617b      	str	r3, [r7, #20]
200015ce:	e076      	b.n	200016be <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
200015d0:	2201      	movs	r2, #1
200015d2:	697b      	ldr	r3, [r7, #20]
200015d4:	409a      	lsls	r2, r3
200015d6:	0013      	movs	r3, r2
200015d8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
200015da:	683b      	ldr	r3, [r7, #0]
200015dc:	681a      	ldr	r2, [r3, #0]
200015de:	693b      	ldr	r3, [r7, #16]
200015e0:	4013      	ands	r3, r2
200015e2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
200015e4:	68fa      	ldr	r2, [r7, #12]
200015e6:	693b      	ldr	r3, [r7, #16]
200015e8:	429a      	cmp	r2, r3
200015ea:	d165      	bne.n	200016b8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
200015ec:	687b      	ldr	r3, [r7, #4]
200015ee:	681b      	ldr	r3, [r3, #0]
200015f0:	697a      	ldr	r2, [r7, #20]
200015f2:	0052      	lsls	r2, r2, #1
200015f4:	2103      	movs	r1, #3
200015f6:	4091      	lsls	r1, r2
200015f8:	000a      	movs	r2, r1
200015fa:	43d2      	mvns	r2, r2
200015fc:	401a      	ands	r2, r3
200015fe:	687b      	ldr	r3, [r7, #4]
20001600:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
20001602:	687b      	ldr	r3, [r7, #4]
20001604:	681a      	ldr	r2, [r3, #0]
20001606:	683b      	ldr	r3, [r7, #0]
20001608:	791b      	ldrb	r3, [r3, #4]
2000160a:	0019      	movs	r1, r3
2000160c:	697b      	ldr	r3, [r7, #20]
2000160e:	005b      	lsls	r3, r3, #1
20001610:	4099      	lsls	r1, r3
20001612:	000b      	movs	r3, r1
20001614:	431a      	orrs	r2, r3
20001616:	687b      	ldr	r3, [r7, #4]
20001618:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
2000161a:	683b      	ldr	r3, [r7, #0]
2000161c:	791b      	ldrb	r3, [r3, #4]
2000161e:	2b01      	cmp	r3, #1
20001620:	d003      	beq.n	2000162a <GPIO_Init+0x76>
20001622:	683b      	ldr	r3, [r7, #0]
20001624:	791b      	ldrb	r3, [r3, #4]
20001626:	2b02      	cmp	r3, #2
20001628:	d12e      	bne.n	20001688 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
2000162a:	687b      	ldr	r3, [r7, #4]
2000162c:	689b      	ldr	r3, [r3, #8]
2000162e:	697a      	ldr	r2, [r7, #20]
20001630:	0052      	lsls	r2, r2, #1
20001632:	2103      	movs	r1, #3
20001634:	4091      	lsls	r1, r2
20001636:	000a      	movs	r2, r1
20001638:	43d2      	mvns	r2, r2
2000163a:	401a      	ands	r2, r3
2000163c:	687b      	ldr	r3, [r7, #4]
2000163e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
20001640:	687b      	ldr	r3, [r7, #4]
20001642:	689a      	ldr	r2, [r3, #8]
20001644:	683b      	ldr	r3, [r7, #0]
20001646:	795b      	ldrb	r3, [r3, #5]
20001648:	0019      	movs	r1, r3
2000164a:	697b      	ldr	r3, [r7, #20]
2000164c:	005b      	lsls	r3, r3, #1
2000164e:	4099      	lsls	r1, r3
20001650:	000b      	movs	r3, r1
20001652:	431a      	orrs	r2, r3
20001654:	687b      	ldr	r3, [r7, #4]
20001656:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
20001658:	687b      	ldr	r3, [r7, #4]
2000165a:	685b      	ldr	r3, [r3, #4]
2000165c:	697a      	ldr	r2, [r7, #20]
2000165e:	b292      	uxth	r2, r2
20001660:	0011      	movs	r1, r2
20001662:	2201      	movs	r2, #1
20001664:	408a      	lsls	r2, r1
20001666:	43d2      	mvns	r2, r2
20001668:	401a      	ands	r2, r3
2000166a:	687b      	ldr	r3, [r7, #4]
2000166c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
2000166e:	687b      	ldr	r3, [r7, #4]
20001670:	685b      	ldr	r3, [r3, #4]
20001672:	683a      	ldr	r2, [r7, #0]
20001674:	7992      	ldrb	r2, [r2, #6]
20001676:	0011      	movs	r1, r2
20001678:	697a      	ldr	r2, [r7, #20]
2000167a:	b292      	uxth	r2, r2
2000167c:	4091      	lsls	r1, r2
2000167e:	000a      	movs	r2, r1
20001680:	b292      	uxth	r2, r2
20001682:	431a      	orrs	r2, r3
20001684:	687b      	ldr	r3, [r7, #4]
20001686:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20001688:	687b      	ldr	r3, [r7, #4]
2000168a:	68db      	ldr	r3, [r3, #12]
2000168c:	697a      	ldr	r2, [r7, #20]
2000168e:	b292      	uxth	r2, r2
20001690:	0052      	lsls	r2, r2, #1
20001692:	2103      	movs	r1, #3
20001694:	4091      	lsls	r1, r2
20001696:	000a      	movs	r2, r1
20001698:	43d2      	mvns	r2, r2
2000169a:	401a      	ands	r2, r3
2000169c:	687b      	ldr	r3, [r7, #4]
2000169e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
200016a0:	687b      	ldr	r3, [r7, #4]
200016a2:	68da      	ldr	r2, [r3, #12]
200016a4:	683b      	ldr	r3, [r7, #0]
200016a6:	79db      	ldrb	r3, [r3, #7]
200016a8:	0019      	movs	r1, r3
200016aa:	697b      	ldr	r3, [r7, #20]
200016ac:	005b      	lsls	r3, r3, #1
200016ae:	4099      	lsls	r1, r3
200016b0:	000b      	movs	r3, r1
200016b2:	431a      	orrs	r2, r3
200016b4:	687b      	ldr	r3, [r7, #4]
200016b6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
200016b8:	697b      	ldr	r3, [r7, #20]
200016ba:	3301      	adds	r3, #1
200016bc:	617b      	str	r3, [r7, #20]
200016be:	697b      	ldr	r3, [r7, #20]
200016c0:	2b0f      	cmp	r3, #15
200016c2:	d985      	bls.n	200015d0 <GPIO_Init+0x1c>
    }
  }
}
200016c4:	46c0      	nop			; (mov r8, r8)
200016c6:	46bd      	mov	sp, r7
200016c8:	b006      	add	sp, #24
200016ca:	bd80      	pop	{r7, pc}

200016cc <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
200016cc:	b580      	push	{r7, lr}
200016ce:	b082      	sub	sp, #8
200016d0:	af00      	add	r7, sp, #0
200016d2:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
200016d4:	687b      	ldr	r3, [r7, #4]
200016d6:	4a09      	ldr	r2, [pc, #36]	; (200016fc <GPIO_StructInit+0x30>)
200016d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
200016da:	687b      	ldr	r3, [r7, #4]
200016dc:	2200      	movs	r2, #0
200016de:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
200016e0:	687b      	ldr	r3, [r7, #4]
200016e2:	2200      	movs	r2, #0
200016e4:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
200016e6:	687b      	ldr	r3, [r7, #4]
200016e8:	2200      	movs	r2, #0
200016ea:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
200016ec:	687b      	ldr	r3, [r7, #4]
200016ee:	2200      	movs	r2, #0
200016f0:	71da      	strb	r2, [r3, #7]
}
200016f2:	46c0      	nop			; (mov r8, r8)
200016f4:	46bd      	mov	sp, r7
200016f6:	b002      	add	sp, #8
200016f8:	bd80      	pop	{r7, pc}
200016fa:	46c0      	nop			; (mov r8, r8)
200016fc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001700 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001700:	b580      	push	{r7, lr}
20001702:	b084      	sub	sp, #16
20001704:	af00      	add	r7, sp, #0
20001706:	6078      	str	r0, [r7, #4]
20001708:	000a      	movs	r2, r1
2000170a:	1cbb      	adds	r3, r7, #2
2000170c:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
2000170e:	2380      	movs	r3, #128	; 0x80
20001710:	025b      	lsls	r3, r3, #9
20001712:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
20001714:	1cbb      	adds	r3, r7, #2
20001716:	881a      	ldrh	r2, [r3, #0]
20001718:	68fb      	ldr	r3, [r7, #12]
2000171a:	4313      	orrs	r3, r2
2000171c:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
2000171e:	68fa      	ldr	r2, [r7, #12]
20001720:	687b      	ldr	r3, [r7, #4]
20001722:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
20001724:	1cbb      	adds	r3, r7, #2
20001726:	881a      	ldrh	r2, [r3, #0]
20001728:	687b      	ldr	r3, [r7, #4]
2000172a:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
2000172c:	68fa      	ldr	r2, [r7, #12]
2000172e:	687b      	ldr	r3, [r7, #4]
20001730:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20001732:	687b      	ldr	r3, [r7, #4]
20001734:	69db      	ldr	r3, [r3, #28]
20001736:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20001738:	687b      	ldr	r3, [r7, #4]
2000173a:	69db      	ldr	r3, [r3, #28]
2000173c:	60fb      	str	r3, [r7, #12]
}
2000173e:	46c0      	nop			; (mov r8, r8)
20001740:	46bd      	mov	sp, r7
20001742:	b004      	add	sp, #16
20001744:	bd80      	pop	{r7, pc}

20001746 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001746:	b580      	push	{r7, lr}
20001748:	b084      	sub	sp, #16
2000174a:	af00      	add	r7, sp, #0
2000174c:	6078      	str	r0, [r7, #4]
2000174e:	000a      	movs	r2, r1
20001750:	1cbb      	adds	r3, r7, #2
20001752:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20001754:	230f      	movs	r3, #15
20001756:	18fb      	adds	r3, r7, r3
20001758:	2200      	movs	r2, #0
2000175a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
2000175c:	687b      	ldr	r3, [r7, #4]
2000175e:	691b      	ldr	r3, [r3, #16]
20001760:	1cba      	adds	r2, r7, #2
20001762:	8812      	ldrh	r2, [r2, #0]
20001764:	4013      	ands	r3, r2
20001766:	d004      	beq.n	20001772 <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001768:	230f      	movs	r3, #15
2000176a:	18fb      	adds	r3, r7, r3
2000176c:	2201      	movs	r2, #1
2000176e:	701a      	strb	r2, [r3, #0]
20001770:	e003      	b.n	2000177a <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20001772:	230f      	movs	r3, #15
20001774:	18fb      	adds	r3, r7, r3
20001776:	2200      	movs	r2, #0
20001778:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
2000177a:	230f      	movs	r3, #15
2000177c:	18fb      	adds	r3, r7, r3
2000177e:	781b      	ldrb	r3, [r3, #0]
}
20001780:	0018      	movs	r0, r3
20001782:	46bd      	mov	sp, r7
20001784:	b004      	add	sp, #16
20001786:	bd80      	pop	{r7, pc}

20001788 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20001788:	b580      	push	{r7, lr}
2000178a:	b082      	sub	sp, #8
2000178c:	af00      	add	r7, sp, #0
2000178e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20001790:	687b      	ldr	r3, [r7, #4]
20001792:	691b      	ldr	r3, [r3, #16]
20001794:	b29b      	uxth	r3, r3
}
20001796:	0018      	movs	r0, r3
20001798:	46bd      	mov	sp, r7
2000179a:	b002      	add	sp, #8
2000179c:	bd80      	pop	{r7, pc}

2000179e <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000179e:	b580      	push	{r7, lr}
200017a0:	b084      	sub	sp, #16
200017a2:	af00      	add	r7, sp, #0
200017a4:	6078      	str	r0, [r7, #4]
200017a6:	000a      	movs	r2, r1
200017a8:	1cbb      	adds	r3, r7, #2
200017aa:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
200017ac:	230f      	movs	r3, #15
200017ae:	18fb      	adds	r3, r7, r3
200017b0:	2200      	movs	r2, #0
200017b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
200017b4:	687b      	ldr	r3, [r7, #4]
200017b6:	695b      	ldr	r3, [r3, #20]
200017b8:	1cba      	adds	r2, r7, #2
200017ba:	8812      	ldrh	r2, [r2, #0]
200017bc:	4013      	ands	r3, r2
200017be:	d004      	beq.n	200017ca <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
200017c0:	230f      	movs	r3, #15
200017c2:	18fb      	adds	r3, r7, r3
200017c4:	2201      	movs	r2, #1
200017c6:	701a      	strb	r2, [r3, #0]
200017c8:	e003      	b.n	200017d2 <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
200017ca:	230f      	movs	r3, #15
200017cc:	18fb      	adds	r3, r7, r3
200017ce:	2200      	movs	r2, #0
200017d0:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200017d2:	230f      	movs	r3, #15
200017d4:	18fb      	adds	r3, r7, r3
200017d6:	781b      	ldrb	r3, [r3, #0]
}
200017d8:	0018      	movs	r0, r3
200017da:	46bd      	mov	sp, r7
200017dc:	b004      	add	sp, #16
200017de:	bd80      	pop	{r7, pc}

200017e0 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
200017e0:	b580      	push	{r7, lr}
200017e2:	b082      	sub	sp, #8
200017e4:	af00      	add	r7, sp, #0
200017e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
200017e8:	687b      	ldr	r3, [r7, #4]
200017ea:	695b      	ldr	r3, [r3, #20]
200017ec:	b29b      	uxth	r3, r3
}
200017ee:	0018      	movs	r0, r3
200017f0:	46bd      	mov	sp, r7
200017f2:	b002      	add	sp, #8
200017f4:	bd80      	pop	{r7, pc}

200017f6 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200017f6:	b580      	push	{r7, lr}
200017f8:	b082      	sub	sp, #8
200017fa:	af00      	add	r7, sp, #0
200017fc:	6078      	str	r0, [r7, #4]
200017fe:	000a      	movs	r2, r1
20001800:	1cbb      	adds	r3, r7, #2
20001802:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
20001804:	687b      	ldr	r3, [r7, #4]
20001806:	1cba      	adds	r2, r7, #2
20001808:	8812      	ldrh	r2, [r2, #0]
2000180a:	831a      	strh	r2, [r3, #24]
}
2000180c:	46c0      	nop			; (mov r8, r8)
2000180e:	46bd      	mov	sp, r7
20001810:	b002      	add	sp, #8
20001812:	bd80      	pop	{r7, pc}

20001814 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001814:	b580      	push	{r7, lr}
20001816:	b082      	sub	sp, #8
20001818:	af00      	add	r7, sp, #0
2000181a:	6078      	str	r0, [r7, #4]
2000181c:	000a      	movs	r2, r1
2000181e:	1cbb      	adds	r3, r7, #2
20001820:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
20001822:	687b      	ldr	r3, [r7, #4]
20001824:	1cba      	adds	r2, r7, #2
20001826:	8812      	ldrh	r2, [r2, #0]
20001828:	835a      	strh	r2, [r3, #26]
}
2000182a:	46c0      	nop			; (mov r8, r8)
2000182c:	46bd      	mov	sp, r7
2000182e:	b002      	add	sp, #8
20001830:	bd80      	pop	{r7, pc}

20001832 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
20001832:	b580      	push	{r7, lr}
20001834:	b082      	sub	sp, #8
20001836:	af00      	add	r7, sp, #0
20001838:	6078      	str	r0, [r7, #4]
2000183a:	0008      	movs	r0, r1
2000183c:	0011      	movs	r1, r2
2000183e:	1cbb      	adds	r3, r7, #2
20001840:	1c02      	adds	r2, r0, #0
20001842:	801a      	strh	r2, [r3, #0]
20001844:	1c7b      	adds	r3, r7, #1
20001846:	1c0a      	adds	r2, r1, #0
20001848:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
2000184a:	1c7b      	adds	r3, r7, #1
2000184c:	781b      	ldrb	r3, [r3, #0]
2000184e:	2b00      	cmp	r3, #0
20001850:	d004      	beq.n	2000185c <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
20001852:	687b      	ldr	r3, [r7, #4]
20001854:	1cba      	adds	r2, r7, #2
20001856:	8812      	ldrh	r2, [r2, #0]
20001858:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
2000185a:	e003      	b.n	20001864 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
2000185c:	687b      	ldr	r3, [r7, #4]
2000185e:	1cba      	adds	r2, r7, #2
20001860:	8812      	ldrh	r2, [r2, #0]
20001862:	835a      	strh	r2, [r3, #26]
}
20001864:	46c0      	nop			; (mov r8, r8)
20001866:	46bd      	mov	sp, r7
20001868:	b002      	add	sp, #8
2000186a:	bd80      	pop	{r7, pc}

2000186c <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
2000186c:	b580      	push	{r7, lr}
2000186e:	b082      	sub	sp, #8
20001870:	af00      	add	r7, sp, #0
20001872:	6078      	str	r0, [r7, #4]
20001874:	000a      	movs	r2, r1
20001876:	1cbb      	adds	r3, r7, #2
20001878:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
2000187a:	1cbb      	adds	r3, r7, #2
2000187c:	881a      	ldrh	r2, [r3, #0]
2000187e:	687b      	ldr	r3, [r7, #4]
20001880:	615a      	str	r2, [r3, #20]
}
20001882:	46c0      	nop			; (mov r8, r8)
20001884:	46bd      	mov	sp, r7
20001886:	b002      	add	sp, #8
20001888:	bd80      	pop	{r7, pc}

2000188a <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000188a:	b580      	push	{r7, lr}
2000188c:	b082      	sub	sp, #8
2000188e:	af00      	add	r7, sp, #0
20001890:	6078      	str	r0, [r7, #4]
20001892:	000a      	movs	r2, r1
20001894:	1cbb      	adds	r3, r7, #2
20001896:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20001898:	687b      	ldr	r3, [r7, #4]
2000189a:	695a      	ldr	r2, [r3, #20]
2000189c:	1cbb      	adds	r3, r7, #2
2000189e:	881b      	ldrh	r3, [r3, #0]
200018a0:	405a      	eors	r2, r3
200018a2:	687b      	ldr	r3, [r7, #4]
200018a4:	615a      	str	r2, [r3, #20]
}
200018a6:	46c0      	nop			; (mov r8, r8)
200018a8:	46bd      	mov	sp, r7
200018aa:	b002      	add	sp, #8
200018ac:	bd80      	pop	{r7, pc}

200018ae <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
200018ae:	b580      	push	{r7, lr}
200018b0:	b084      	sub	sp, #16
200018b2:	af00      	add	r7, sp, #0
200018b4:	6078      	str	r0, [r7, #4]
200018b6:	0008      	movs	r0, r1
200018b8:	0011      	movs	r1, r2
200018ba:	1cbb      	adds	r3, r7, #2
200018bc:	1c02      	adds	r2, r0, #0
200018be:	801a      	strh	r2, [r3, #0]
200018c0:	1c7b      	adds	r3, r7, #1
200018c2:	1c0a      	adds	r2, r1, #0
200018c4:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
200018c6:	2300      	movs	r3, #0
200018c8:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
200018ca:	2300      	movs	r3, #0
200018cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
200018ce:	1c7b      	adds	r3, r7, #1
200018d0:	781a      	ldrb	r2, [r3, #0]
200018d2:	1cbb      	adds	r3, r7, #2
200018d4:	881b      	ldrh	r3, [r3, #0]
200018d6:	2107      	movs	r1, #7
200018d8:	400b      	ands	r3, r1
200018da:	009b      	lsls	r3, r3, #2
200018dc:	409a      	lsls	r2, r3
200018de:	0013      	movs	r3, r2
200018e0:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
200018e2:	1cbb      	adds	r3, r7, #2
200018e4:	881b      	ldrh	r3, [r3, #0]
200018e6:	08db      	lsrs	r3, r3, #3
200018e8:	b29b      	uxth	r3, r3
200018ea:	001a      	movs	r2, r3
200018ec:	687b      	ldr	r3, [r7, #4]
200018ee:	3208      	adds	r2, #8
200018f0:	0092      	lsls	r2, r2, #2
200018f2:	58d3      	ldr	r3, [r2, r3]
200018f4:	1cba      	adds	r2, r7, #2
200018f6:	8812      	ldrh	r2, [r2, #0]
200018f8:	2107      	movs	r1, #7
200018fa:	400a      	ands	r2, r1
200018fc:	0092      	lsls	r2, r2, #2
200018fe:	210f      	movs	r1, #15
20001900:	4091      	lsls	r1, r2
20001902:	000a      	movs	r2, r1
20001904:	43d2      	mvns	r2, r2
20001906:	1cb9      	adds	r1, r7, #2
20001908:	8809      	ldrh	r1, [r1, #0]
2000190a:	08c9      	lsrs	r1, r1, #3
2000190c:	b289      	uxth	r1, r1
2000190e:	0008      	movs	r0, r1
20001910:	401a      	ands	r2, r3
20001912:	0011      	movs	r1, r2
20001914:	687b      	ldr	r3, [r7, #4]
20001916:	0002      	movs	r2, r0
20001918:	3208      	adds	r2, #8
2000191a:	0092      	lsls	r2, r2, #2
2000191c:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
2000191e:	1cbb      	adds	r3, r7, #2
20001920:	881b      	ldrh	r3, [r3, #0]
20001922:	08db      	lsrs	r3, r3, #3
20001924:	b29b      	uxth	r3, r3
20001926:	001a      	movs	r2, r3
20001928:	687b      	ldr	r3, [r7, #4]
2000192a:	3208      	adds	r2, #8
2000192c:	0092      	lsls	r2, r2, #2
2000192e:	58d3      	ldr	r3, [r2, r3]
20001930:	68fa      	ldr	r2, [r7, #12]
20001932:	4313      	orrs	r3, r2
20001934:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
20001936:	1cbb      	adds	r3, r7, #2
20001938:	881b      	ldrh	r3, [r3, #0]
2000193a:	08db      	lsrs	r3, r3, #3
2000193c:	b29b      	uxth	r3, r3
2000193e:	001a      	movs	r2, r3
20001940:	687b      	ldr	r3, [r7, #4]
20001942:	3208      	adds	r2, #8
20001944:	0092      	lsls	r2, r2, #2
20001946:	68b9      	ldr	r1, [r7, #8]
20001948:	50d1      	str	r1, [r2, r3]
}
2000194a:	46c0      	nop			; (mov r8, r8)
2000194c:	46bd      	mov	sp, r7
2000194e:	b004      	add	sp, #16
20001950:	bd80      	pop	{r7, pc}
20001952:	46c0      	nop			; (mov r8, r8)

20001954 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
20001954:	b580      	push	{r7, lr}
20001956:	b082      	sub	sp, #8
20001958:	af00      	add	r7, sp, #0
2000195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
2000195c:	4b04      	ldr	r3, [pc, #16]	; (20001970 <NVIC_PriorityGroupConfig+0x1c>)
2000195e:	687a      	ldr	r2, [r7, #4]
20001960:	4904      	ldr	r1, [pc, #16]	; (20001974 <NVIC_PriorityGroupConfig+0x20>)
20001962:	430a      	orrs	r2, r1
20001964:	60da      	str	r2, [r3, #12]
}
20001966:	46c0      	nop			; (mov r8, r8)
20001968:	46bd      	mov	sp, r7
2000196a:	b002      	add	sp, #8
2000196c:	bd80      	pop	{r7, pc}
2000196e:	46c0      	nop			; (mov r8, r8)
20001970:	e000ed00 	and	lr, r0, r0, lsl #26
20001974:	05fa0000 	ldrbeq	r0, [sl, #0]!

20001978 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
20001978:	b5b0      	push	{r4, r5, r7, lr}
2000197a:	b084      	sub	sp, #16
2000197c:	af00      	add	r7, sp, #0
2000197e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
20001980:	230f      	movs	r3, #15
20001982:	18fb      	adds	r3, r7, r3
20001984:	2200      	movs	r2, #0
20001986:	701a      	strb	r2, [r3, #0]
20001988:	230e      	movs	r3, #14
2000198a:	18fb      	adds	r3, r7, r3
2000198c:	2200      	movs	r2, #0
2000198e:	701a      	strb	r2, [r3, #0]
20001990:	230d      	movs	r3, #13
20001992:	18fb      	adds	r3, r7, r3
20001994:	220f      	movs	r2, #15
20001996:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
20001998:	687b      	ldr	r3, [r7, #4]
2000199a:	78db      	ldrb	r3, [r3, #3]
2000199c:	2b00      	cmp	r3, #0
2000199e:	d04d      	beq.n	20001a3c <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
200019a0:	4b31      	ldr	r3, [pc, #196]	; (20001a68 <NVIC_Init+0xf0>)
200019a2:	68db      	ldr	r3, [r3, #12]
200019a4:	43db      	mvns	r3, r3
200019a6:	0a1b      	lsrs	r3, r3, #8
200019a8:	b2da      	uxtb	r2, r3
200019aa:	200f      	movs	r0, #15
200019ac:	183b      	adds	r3, r7, r0
200019ae:	2107      	movs	r1, #7
200019b0:	400a      	ands	r2, r1
200019b2:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
200019b4:	250e      	movs	r5, #14
200019b6:	197b      	adds	r3, r7, r5
200019b8:	183a      	adds	r2, r7, r0
200019ba:	7812      	ldrb	r2, [r2, #0]
200019bc:	2104      	movs	r1, #4
200019be:	1a8a      	subs	r2, r1, r2
200019c0:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
200019c2:	240d      	movs	r4, #13
200019c4:	193b      	adds	r3, r7, r4
200019c6:	781a      	ldrb	r2, [r3, #0]
200019c8:	0001      	movs	r1, r0
200019ca:	187b      	adds	r3, r7, r1
200019cc:	781b      	ldrb	r3, [r3, #0]
200019ce:	411a      	asrs	r2, r3
200019d0:	193b      	adds	r3, r7, r4
200019d2:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
200019d4:	687b      	ldr	r3, [r7, #4]
200019d6:	785b      	ldrb	r3, [r3, #1]
200019d8:	001a      	movs	r2, r3
200019da:	197b      	adds	r3, r7, r5
200019dc:	781b      	ldrb	r3, [r3, #0]
200019de:	409a      	lsls	r2, r3
200019e0:	0008      	movs	r0, r1
200019e2:	187b      	adds	r3, r7, r1
200019e4:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
200019e6:	687b      	ldr	r3, [r7, #4]
200019e8:	789b      	ldrb	r3, [r3, #2]
200019ea:	193a      	adds	r2, r7, r4
200019ec:	7812      	ldrb	r2, [r2, #0]
200019ee:	4013      	ands	r3, r2
200019f0:	b2d9      	uxtb	r1, r3
200019f2:	183b      	adds	r3, r7, r0
200019f4:	183a      	adds	r2, r7, r0
200019f6:	7812      	ldrb	r2, [r2, #0]
200019f8:	430a      	orrs	r2, r1
200019fa:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
200019fc:	183b      	adds	r3, r7, r0
200019fe:	183a      	adds	r2, r7, r0
20001a00:	7812      	ldrb	r2, [r2, #0]
20001a02:	0112      	lsls	r2, r2, #4
20001a04:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
20001a06:	4a19      	ldr	r2, [pc, #100]	; (20001a6c <NVIC_Init+0xf4>)
20001a08:	687b      	ldr	r3, [r7, #4]
20001a0a:	781b      	ldrb	r3, [r3, #0]
20001a0c:	0019      	movs	r1, r3
20001a0e:	23c0      	movs	r3, #192	; 0xc0
20001a10:	009b      	lsls	r3, r3, #2
20001a12:	1852      	adds	r2, r2, r1
20001a14:	18d3      	adds	r3, r2, r3
20001a16:	183a      	adds	r2, r7, r0
20001a18:	7812      	ldrb	r2, [r2, #0]
20001a1a:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001a1c:	687b      	ldr	r3, [r7, #4]
20001a1e:	781b      	ldrb	r3, [r3, #0]
20001a20:	001a      	movs	r2, r3
20001a22:	231f      	movs	r3, #31
20001a24:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20001a26:	4911      	ldr	r1, [pc, #68]	; (20001a6c <NVIC_Init+0xf4>)
20001a28:	687a      	ldr	r2, [r7, #4]
20001a2a:	7812      	ldrb	r2, [r2, #0]
20001a2c:	0952      	lsrs	r2, r2, #5
20001a2e:	b2d2      	uxtb	r2, r2
20001a30:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001a32:	2201      	movs	r2, #1
20001a34:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20001a36:	0083      	lsls	r3, r0, #2
20001a38:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
20001a3a:	e010      	b.n	20001a5e <NVIC_Init+0xe6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001a3c:	687b      	ldr	r3, [r7, #4]
20001a3e:	781b      	ldrb	r3, [r3, #0]
20001a40:	001a      	movs	r2, r3
20001a42:	231f      	movs	r3, #31
20001a44:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20001a46:	4909      	ldr	r1, [pc, #36]	; (20001a6c <NVIC_Init+0xf4>)
20001a48:	687a      	ldr	r2, [r7, #4]
20001a4a:	7812      	ldrb	r2, [r2, #0]
20001a4c:	0952      	lsrs	r2, r2, #5
20001a4e:	b2d2      	uxtb	r2, r2
20001a50:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001a52:	2201      	movs	r2, #1
20001a54:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20001a56:	0003      	movs	r3, r0
20001a58:	3320      	adds	r3, #32
20001a5a:	009b      	lsls	r3, r3, #2
20001a5c:	505a      	str	r2, [r3, r1]
}
20001a5e:	46c0      	nop			; (mov r8, r8)
20001a60:	46bd      	mov	sp, r7
20001a62:	b004      	add	sp, #16
20001a64:	bdb0      	pop	{r4, r5, r7, pc}
20001a66:	46c0      	nop			; (mov r8, r8)
20001a68:	e000ed00 	and	lr, r0, r0, lsl #26
20001a6c:	e000e100 	and	lr, r0, r0, lsl #2

20001a70 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
20001a70:	b580      	push	{r7, lr}
20001a72:	b082      	sub	sp, #8
20001a74:	af00      	add	r7, sp, #0
20001a76:	6078      	str	r0, [r7, #4]
20001a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
20001a7a:	683b      	ldr	r3, [r7, #0]
20001a7c:	4a05      	ldr	r2, [pc, #20]	; (20001a94 <NVIC_SetVectorTable+0x24>)
20001a7e:	4013      	ands	r3, r2
20001a80:	0019      	movs	r1, r3
20001a82:	4b05      	ldr	r3, [pc, #20]	; (20001a98 <NVIC_SetVectorTable+0x28>)
20001a84:	687a      	ldr	r2, [r7, #4]
20001a86:	430a      	orrs	r2, r1
20001a88:	609a      	str	r2, [r3, #8]
}
20001a8a:	46c0      	nop			; (mov r8, r8)
20001a8c:	46bd      	mov	sp, r7
20001a8e:	b002      	add	sp, #8
20001a90:	bd80      	pop	{r7, pc}
20001a92:	46c0      	nop			; (mov r8, r8)
20001a94:	1fffff80 	svcne	0x00ffff80
20001a98:	e000ed00 	and	lr, r0, r0, lsl #26

20001a9c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
20001a9c:	b580      	push	{r7, lr}
20001a9e:	b082      	sub	sp, #8
20001aa0:	af00      	add	r7, sp, #0
20001aa2:	0002      	movs	r2, r0
20001aa4:	1dfb      	adds	r3, r7, #7
20001aa6:	701a      	strb	r2, [r3, #0]
20001aa8:	1dbb      	adds	r3, r7, #6
20001aaa:	1c0a      	adds	r2, r1, #0
20001aac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
20001aae:	1dbb      	adds	r3, r7, #6
20001ab0:	781b      	ldrb	r3, [r3, #0]
20001ab2:	2b00      	cmp	r3, #0
20001ab4:	d007      	beq.n	20001ac6 <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
20001ab6:	4b0a      	ldr	r3, [pc, #40]	; (20001ae0 <NVIC_SystemLPConfig+0x44>)
20001ab8:	6919      	ldr	r1, [r3, #16]
20001aba:	1dfb      	adds	r3, r7, #7
20001abc:	781a      	ldrb	r2, [r3, #0]
20001abe:	4b08      	ldr	r3, [pc, #32]	; (20001ae0 <NVIC_SystemLPConfig+0x44>)
20001ac0:	430a      	orrs	r2, r1
20001ac2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
20001ac4:	e007      	b.n	20001ad6 <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
20001ac6:	4b06      	ldr	r3, [pc, #24]	; (20001ae0 <NVIC_SystemLPConfig+0x44>)
20001ac8:	691a      	ldr	r2, [r3, #16]
20001aca:	1dfb      	adds	r3, r7, #7
20001acc:	781b      	ldrb	r3, [r3, #0]
20001ace:	43d9      	mvns	r1, r3
20001ad0:	4b03      	ldr	r3, [pc, #12]	; (20001ae0 <NVIC_SystemLPConfig+0x44>)
20001ad2:	400a      	ands	r2, r1
20001ad4:	611a      	str	r2, [r3, #16]
}
20001ad6:	46c0      	nop			; (mov r8, r8)
20001ad8:	46bd      	mov	sp, r7
20001ada:	b002      	add	sp, #8
20001adc:	bd80      	pop	{r7, pc}
20001ade:	46c0      	nop			; (mov r8, r8)
20001ae0:	e000ed00 	and	lr, r0, r0, lsl #26

20001ae4 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
20001ae4:	b580      	push	{r7, lr}
20001ae6:	b082      	sub	sp, #8
20001ae8:	af00      	add	r7, sp, #0
20001aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
20001aec:	687b      	ldr	r3, [r7, #4]
20001aee:	2b04      	cmp	r3, #4
20001af0:	d106      	bne.n	20001b00 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
20001af2:	4b08      	ldr	r3, [pc, #32]	; (20001b14 <SysTick_CLKSourceConfig+0x30>)
20001af4:	681a      	ldr	r2, [r3, #0]
20001af6:	4b07      	ldr	r3, [pc, #28]	; (20001b14 <SysTick_CLKSourceConfig+0x30>)
20001af8:	2104      	movs	r1, #4
20001afa:	430a      	orrs	r2, r1
20001afc:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
20001afe:	e005      	b.n	20001b0c <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
20001b00:	4b04      	ldr	r3, [pc, #16]	; (20001b14 <SysTick_CLKSourceConfig+0x30>)
20001b02:	681a      	ldr	r2, [r3, #0]
20001b04:	4b03      	ldr	r3, [pc, #12]	; (20001b14 <SysTick_CLKSourceConfig+0x30>)
20001b06:	2104      	movs	r1, #4
20001b08:	438a      	bics	r2, r1
20001b0a:	601a      	str	r2, [r3, #0]
}
20001b0c:	46c0      	nop			; (mov r8, r8)
20001b0e:	46bd      	mov	sp, r7
20001b10:	b002      	add	sp, #8
20001b12:	bd80      	pop	{r7, pc}
20001b14:	e000e010 	and	lr, r0, r0, lsl r0

20001b18 <bufferInit>:
#include "buffer.h"

//Nollställer bufferten
void bufferInit(FIFO *buffer) {
20001b18:	b580      	push	{r7, lr}
20001b1a:	b082      	sub	sp, #8
20001b1c:	af00      	add	r7, sp, #0
20001b1e:	6078      	str	r0, [r7, #4]
    buffer->count = 0;
20001b20:	687b      	ldr	r3, [r7, #4]
20001b22:	2264      	movs	r2, #100	; 0x64
20001b24:	2100      	movs	r1, #0
20001b26:	5499      	strb	r1, [r3, r2]
    buffer->in = 0;
20001b28:	687b      	ldr	r3, [r7, #4]
20001b2a:	2265      	movs	r2, #101	; 0x65
20001b2c:	2100      	movs	r1, #0
20001b2e:	5499      	strb	r1, [r3, r2]
    buffer->out = 0;
20001b30:	687b      	ldr	r3, [r7, #4]
20001b32:	2266      	movs	r2, #102	; 0x66
20001b34:	2100      	movs	r1, #0
20001b36:	5499      	strb	r1, [r3, r2]
}
20001b38:	46c0      	nop			; (mov r8, r8)
20001b3a:	46bd      	mov	sp, r7
20001b3c:	b002      	add	sp, #8
20001b3e:	bd80      	pop	{r7, pc}

20001b40 <bufferPut>:

//Lägger till ett elem i buffern.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferPut ( FIFO *buffer, uint8_t elem) {
20001b40:	b580      	push	{r7, lr}
20001b42:	b082      	sub	sp, #8
20001b44:	af00      	add	r7, sp, #0
20001b46:	6078      	str	r0, [r7, #4]
20001b48:	000a      	movs	r2, r1
20001b4a:	1cfb      	adds	r3, r7, #3
20001b4c:	701a      	strb	r2, [r3, #0]
    //Kollar om bufferten är full.
    if (buffer->count == BUFFERSIZE){
20001b4e:	687b      	ldr	r3, [r7, #4]
20001b50:	2264      	movs	r2, #100	; 0x64
20001b52:	5c9b      	ldrb	r3, [r3, r2]
20001b54:	2b64      	cmp	r3, #100	; 0x64
20001b56:	d101      	bne.n	20001b5c <bufferPut+0x1c>
        return 0;
20001b58:	2300      	movs	r3, #0
20001b5a:	e01e      	b.n	20001b9a <bufferPut+0x5a>
    }

    //Lägger elem i bufferten
    buffer->buff[buffer->in++] = elem;
20001b5c:	687b      	ldr	r3, [r7, #4]
20001b5e:	2265      	movs	r2, #101	; 0x65
20001b60:	5c9b      	ldrb	r3, [r3, r2]
20001b62:	1c5a      	adds	r2, r3, #1
20001b64:	b2d0      	uxtb	r0, r2
20001b66:	687a      	ldr	r2, [r7, #4]
20001b68:	2165      	movs	r1, #101	; 0x65
20001b6a:	5450      	strb	r0, [r2, r1]
20001b6c:	0019      	movs	r1, r3
20001b6e:	687b      	ldr	r3, [r7, #4]
20001b70:	1cfa      	adds	r2, r7, #3
20001b72:	7812      	ldrb	r2, [r2, #0]
20001b74:	545a      	strb	r2, [r3, r1]
    buffer->count++;
20001b76:	687b      	ldr	r3, [r7, #4]
20001b78:	2264      	movs	r2, #100	; 0x64
20001b7a:	5c9b      	ldrb	r3, [r3, r2]
20001b7c:	3301      	adds	r3, #1
20001b7e:	b2d9      	uxtb	r1, r3
20001b80:	687b      	ldr	r3, [r7, #4]
20001b82:	2264      	movs	r2, #100	; 0x64
20001b84:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->in == BUFFERSIZE)
20001b86:	687b      	ldr	r3, [r7, #4]
20001b88:	2265      	movs	r2, #101	; 0x65
20001b8a:	5c9b      	ldrb	r3, [r3, r2]
20001b8c:	2b64      	cmp	r3, #100	; 0x64
20001b8e:	d103      	bne.n	20001b98 <bufferPut+0x58>
        buffer->in = 0;
20001b90:	687b      	ldr	r3, [r7, #4]
20001b92:	2265      	movs	r2, #101	; 0x65
20001b94:	2100      	movs	r1, #0
20001b96:	5499      	strb	r1, [r3, r2]

    return 1;
20001b98:	2301      	movs	r3, #1
}
20001b9a:	0018      	movs	r0, r3
20001b9c:	46bd      	mov	sp, r7
20001b9e:	b002      	add	sp, #8
20001ba0:	bd80      	pop	{r7, pc}

20001ba2 <bufferOverrideLast>:

//Skriver över föregående elem i buffern.
//Ändrar inga indexeringsvariabler
void bufferOverrideLast ( FIFO *buffer, uint8_t elem) {
20001ba2:	b580      	push	{r7, lr}
20001ba4:	b084      	sub	sp, #16
20001ba6:	af00      	add	r7, sp, #0
20001ba8:	6078      	str	r0, [r7, #4]
20001baa:	000a      	movs	r2, r1
20001bac:	1cfb      	adds	r3, r7, #3
20001bae:	701a      	strb	r2, [r3, #0]
    //Index för föregående element i buffern
    uint8_t prevIndex;

    //Om index för nästa element är 0 så blir föregående BUFFERSIZE - 1
    //annars buffer->in - 1
    prevIndex =  (buffer->in == 0) ? BUFFERSIZE - 1 : buffer->in - 1;
20001bb0:	687b      	ldr	r3, [r7, #4]
20001bb2:	2265      	movs	r2, #101	; 0x65
20001bb4:	5c9b      	ldrb	r3, [r3, r2]
20001bb6:	2b00      	cmp	r3, #0
20001bb8:	d005      	beq.n	20001bc6 <bufferOverrideLast+0x24>
20001bba:	687b      	ldr	r3, [r7, #4]
20001bbc:	2265      	movs	r2, #101	; 0x65
20001bbe:	5c9b      	ldrb	r3, [r3, r2]
20001bc0:	3b01      	subs	r3, #1
20001bc2:	b2da      	uxtb	r2, r3
20001bc4:	e000      	b.n	20001bc8 <bufferOverrideLast+0x26>
20001bc6:	2263      	movs	r2, #99	; 0x63
20001bc8:	210f      	movs	r1, #15
20001bca:	187b      	adds	r3, r7, r1
20001bcc:	701a      	strb	r2, [r3, #0]

    //Skriver över elem i bufferten
    buffer->buff[prevIndex] = elem;
20001bce:	187b      	adds	r3, r7, r1
20001bd0:	781b      	ldrb	r3, [r3, #0]
20001bd2:	687a      	ldr	r2, [r7, #4]
20001bd4:	1cf9      	adds	r1, r7, #3
20001bd6:	7809      	ldrb	r1, [r1, #0]
20001bd8:	54d1      	strb	r1, [r2, r3]
}
20001bda:	46c0      	nop			; (mov r8, r8)
20001bdc:	46bd      	mov	sp, r7
20001bde:	b004      	add	sp, #16
20001be0:	bd80      	pop	{r7, pc}

20001be2 <bufferGet>:

//Hämtar ett element från buffern till dest.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferGet ( FIFO *buffer, uint8_t *dest) {
20001be2:	b580      	push	{r7, lr}
20001be4:	b082      	sub	sp, #8
20001be6:	af00      	add	r7, sp, #0
20001be8:	6078      	str	r0, [r7, #4]
20001bea:	6039      	str	r1, [r7, #0]
    //Kollar om bufferten är tom
    if (!buffer->count){
20001bec:	687b      	ldr	r3, [r7, #4]
20001bee:	2264      	movs	r2, #100	; 0x64
20001bf0:	5c9b      	ldrb	r3, [r3, r2]
20001bf2:	2b00      	cmp	r3, #0
20001bf4:	d101      	bne.n	20001bfa <bufferGet+0x18>
        return 0;
20001bf6:	2300      	movs	r3, #0
20001bf8:	e01e      	b.n	20001c38 <bufferGet+0x56>
    }

    //Hämtar element ur buffern till dest
    *dest = buffer->buff[buffer->out++];
20001bfa:	687b      	ldr	r3, [r7, #4]
20001bfc:	2266      	movs	r2, #102	; 0x66
20001bfe:	5c9b      	ldrb	r3, [r3, r2]
20001c00:	1c5a      	adds	r2, r3, #1
20001c02:	b2d0      	uxtb	r0, r2
20001c04:	687a      	ldr	r2, [r7, #4]
20001c06:	2166      	movs	r1, #102	; 0x66
20001c08:	5450      	strb	r0, [r2, r1]
20001c0a:	001a      	movs	r2, r3
20001c0c:	687b      	ldr	r3, [r7, #4]
20001c0e:	5c9a      	ldrb	r2, [r3, r2]
20001c10:	683b      	ldr	r3, [r7, #0]
20001c12:	701a      	strb	r2, [r3, #0]
    buffer->count--;
20001c14:	687b      	ldr	r3, [r7, #4]
20001c16:	2264      	movs	r2, #100	; 0x64
20001c18:	5c9b      	ldrb	r3, [r3, r2]
20001c1a:	3b01      	subs	r3, #1
20001c1c:	b2d9      	uxtb	r1, r3
20001c1e:	687b      	ldr	r3, [r7, #4]
20001c20:	2264      	movs	r2, #100	; 0x64
20001c22:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->out == BUFFERSIZE)
20001c24:	687b      	ldr	r3, [r7, #4]
20001c26:	2266      	movs	r2, #102	; 0x66
20001c28:	5c9b      	ldrb	r3, [r3, r2]
20001c2a:	2b64      	cmp	r3, #100	; 0x64
20001c2c:	d103      	bne.n	20001c36 <bufferGet+0x54>
        buffer->out = 0;
20001c2e:	687b      	ldr	r3, [r7, #4]
20001c30:	2266      	movs	r2, #102	; 0x66
20001c32:	2100      	movs	r1, #0
20001c34:	5499      	strb	r1, [r3, r2]

    return 1;
20001c36:	2301      	movs	r3, #1
20001c38:	0018      	movs	r0, r3
20001c3a:	46bd      	mov	sp, r7
20001c3c:	b002      	add	sp, #8
20001c3e:	bd80      	pop	{r7, pc}

20001c40 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
20001c40:	b580      	push	{r7, lr}
20001c42:	b082      	sub	sp, #8
20001c44:	af00      	add	r7, sp, #0
20001c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
20001c48:	687b      	ldr	r3, [r7, #4]
20001c4a:	4a41      	ldr	r2, [pc, #260]	; (20001d50 <USART_DeInit+0x110>)
20001c4c:	4293      	cmp	r3, r2
20001c4e:	d108      	bne.n	20001c62 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
20001c50:	2101      	movs	r1, #1
20001c52:	2010      	movs	r0, #16
20001c54:	f7fe ff20 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
20001c58:	2100      	movs	r1, #0
20001c5a:	2010      	movs	r0, #16
20001c5c:	f7fe ff1c 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
20001c60:	e071      	b.n	20001d46 <USART_DeInit+0x106>
  else if (USARTx == USART2)
20001c62:	687b      	ldr	r3, [r7, #4]
20001c64:	4a3b      	ldr	r2, [pc, #236]	; (20001d54 <USART_DeInit+0x114>)
20001c66:	4293      	cmp	r3, r2
20001c68:	d10c      	bne.n	20001c84 <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
20001c6a:	2380      	movs	r3, #128	; 0x80
20001c6c:	029b      	lsls	r3, r3, #10
20001c6e:	2101      	movs	r1, #1
20001c70:	0018      	movs	r0, r3
20001c72:	f7fe fef1 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
20001c76:	2380      	movs	r3, #128	; 0x80
20001c78:	029b      	lsls	r3, r3, #10
20001c7a:	2100      	movs	r1, #0
20001c7c:	0018      	movs	r0, r3
20001c7e:	f7fe feeb 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001c82:	e060      	b.n	20001d46 <USART_DeInit+0x106>
  else if (USARTx == USART3)
20001c84:	687b      	ldr	r3, [r7, #4]
20001c86:	4a34      	ldr	r2, [pc, #208]	; (20001d58 <USART_DeInit+0x118>)
20001c88:	4293      	cmp	r3, r2
20001c8a:	d10c      	bne.n	20001ca6 <USART_DeInit+0x66>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
20001c8c:	2380      	movs	r3, #128	; 0x80
20001c8e:	02db      	lsls	r3, r3, #11
20001c90:	2101      	movs	r1, #1
20001c92:	0018      	movs	r0, r3
20001c94:	f7fe fee0 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
20001c98:	2380      	movs	r3, #128	; 0x80
20001c9a:	02db      	lsls	r3, r3, #11
20001c9c:	2100      	movs	r1, #0
20001c9e:	0018      	movs	r0, r3
20001ca0:	f7fe feda 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001ca4:	e04f      	b.n	20001d46 <USART_DeInit+0x106>
  else if (USARTx == UART4)
20001ca6:	687b      	ldr	r3, [r7, #4]
20001ca8:	4a2c      	ldr	r2, [pc, #176]	; (20001d5c <USART_DeInit+0x11c>)
20001caa:	4293      	cmp	r3, r2
20001cac:	d10c      	bne.n	20001cc8 <USART_DeInit+0x88>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
20001cae:	2380      	movs	r3, #128	; 0x80
20001cb0:	031b      	lsls	r3, r3, #12
20001cb2:	2101      	movs	r1, #1
20001cb4:	0018      	movs	r0, r3
20001cb6:	f7fe fecf 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
20001cba:	2380      	movs	r3, #128	; 0x80
20001cbc:	031b      	lsls	r3, r3, #12
20001cbe:	2100      	movs	r1, #0
20001cc0:	0018      	movs	r0, r3
20001cc2:	f7fe fec9 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001cc6:	e03e      	b.n	20001d46 <USART_DeInit+0x106>
  else if (USARTx == UART5)
20001cc8:	687b      	ldr	r3, [r7, #4]
20001cca:	4a25      	ldr	r2, [pc, #148]	; (20001d60 <USART_DeInit+0x120>)
20001ccc:	4293      	cmp	r3, r2
20001cce:	d10c      	bne.n	20001cea <USART_DeInit+0xaa>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
20001cd0:	2380      	movs	r3, #128	; 0x80
20001cd2:	035b      	lsls	r3, r3, #13
20001cd4:	2101      	movs	r1, #1
20001cd6:	0018      	movs	r0, r3
20001cd8:	f7fe febe 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
20001cdc:	2380      	movs	r3, #128	; 0x80
20001cde:	035b      	lsls	r3, r3, #13
20001ce0:	2100      	movs	r1, #0
20001ce2:	0018      	movs	r0, r3
20001ce4:	f7fe feb8 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001ce8:	e02d      	b.n	20001d46 <USART_DeInit+0x106>
  else if (USARTx == USART6)
20001cea:	687b      	ldr	r3, [r7, #4]
20001cec:	4a1d      	ldr	r2, [pc, #116]	; (20001d64 <USART_DeInit+0x124>)
20001cee:	4293      	cmp	r3, r2
20001cf0:	d108      	bne.n	20001d04 <USART_DeInit+0xc4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
20001cf2:	2101      	movs	r1, #1
20001cf4:	2020      	movs	r0, #32
20001cf6:	f7fe fecf 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
20001cfa:	2100      	movs	r1, #0
20001cfc:	2020      	movs	r0, #32
20001cfe:	f7fe fecb 	bl	20000a98 <RCC_APB2PeriphResetCmd>
}
20001d02:	e020      	b.n	20001d46 <USART_DeInit+0x106>
  else if (USARTx == UART7)
20001d04:	687b      	ldr	r3, [r7, #4]
20001d06:	4a18      	ldr	r2, [pc, #96]	; (20001d68 <USART_DeInit+0x128>)
20001d08:	4293      	cmp	r3, r2
20001d0a:	d10c      	bne.n	20001d26 <USART_DeInit+0xe6>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
20001d0c:	2380      	movs	r3, #128	; 0x80
20001d0e:	05db      	lsls	r3, r3, #23
20001d10:	2101      	movs	r1, #1
20001d12:	0018      	movs	r0, r3
20001d14:	f7fe fea0 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
20001d18:	2380      	movs	r3, #128	; 0x80
20001d1a:	05db      	lsls	r3, r3, #23
20001d1c:	2100      	movs	r1, #0
20001d1e:	0018      	movs	r0, r3
20001d20:	f7fe fe9a 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001d24:	e00f      	b.n	20001d46 <USART_DeInit+0x106>
    if (USARTx == UART8)
20001d26:	687b      	ldr	r3, [r7, #4]
20001d28:	4a10      	ldr	r2, [pc, #64]	; (20001d6c <USART_DeInit+0x12c>)
20001d2a:	4293      	cmp	r3, r2
20001d2c:	d10b      	bne.n	20001d46 <USART_DeInit+0x106>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
20001d2e:	2380      	movs	r3, #128	; 0x80
20001d30:	061b      	lsls	r3, r3, #24
20001d32:	2101      	movs	r1, #1
20001d34:	0018      	movs	r0, r3
20001d36:	f7fe fe8f 	bl	20000a58 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
20001d3a:	2380      	movs	r3, #128	; 0x80
20001d3c:	061b      	lsls	r3, r3, #24
20001d3e:	2100      	movs	r1, #0
20001d40:	0018      	movs	r0, r3
20001d42:	f7fe fe89 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001d46:	46c0      	nop			; (mov r8, r8)
20001d48:	46bd      	mov	sp, r7
20001d4a:	b002      	add	sp, #8
20001d4c:	bd80      	pop	{r7, pc}
20001d4e:	46c0      	nop			; (mov r8, r8)
20001d50:	40011000 	andmi	r1, r1, r0
20001d54:	40004400 	andmi	r4, r0, r0, lsl #8
20001d58:	40004800 	andmi	r4, r0, r0, lsl #16
20001d5c:	40004c00 	andmi	r4, r0, r0, lsl #24
20001d60:	40005000 	andmi	r5, r0, r0
20001d64:	40011400 	andmi	r1, r1, r0, lsl #8
20001d68:	40007800 	andmi	r7, r0, r0, lsl #16
20001d6c:	40007c00 	andmi	r7, r0, r0, lsl #24

20001d70 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
20001d70:	b580      	push	{r7, lr}
20001d72:	b08a      	sub	sp, #40	; 0x28
20001d74:	af00      	add	r7, sp, #0
20001d76:	6078      	str	r0, [r7, #4]
20001d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
20001d7a:	2300      	movs	r3, #0
20001d7c:	627b      	str	r3, [r7, #36]	; 0x24
20001d7e:	2300      	movs	r3, #0
20001d80:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
20001d82:	2300      	movs	r3, #0
20001d84:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
20001d86:	2300      	movs	r3, #0
20001d88:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
20001d8a:	687b      	ldr	r3, [r7, #4]
20001d8c:	8a1b      	ldrh	r3, [r3, #16]
20001d8e:	b29b      	uxth	r3, r3
20001d90:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
20001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001d94:	4a56      	ldr	r2, [pc, #344]	; (20001ef0 <USART_Init+0x180>)
20001d96:	4013      	ands	r3, r2
20001d98:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
20001d9a:	683b      	ldr	r3, [r7, #0]
20001d9c:	88db      	ldrh	r3, [r3, #6]
20001d9e:	001a      	movs	r2, r3
20001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001da2:	4313      	orrs	r3, r2
20001da4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
20001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001da8:	b29a      	uxth	r2, r3
20001daa:	687b      	ldr	r3, [r7, #4]
20001dac:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
20001dae:	687b      	ldr	r3, [r7, #4]
20001db0:	899b      	ldrh	r3, [r3, #12]
20001db2:	b29b      	uxth	r3, r3
20001db4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
20001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001db8:	4a4e      	ldr	r2, [pc, #312]	; (20001ef4 <USART_Init+0x184>)
20001dba:	4013      	ands	r3, r2
20001dbc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
20001dbe:	683b      	ldr	r3, [r7, #0]
20001dc0:	889a      	ldrh	r2, [r3, #4]
20001dc2:	683b      	ldr	r3, [r7, #0]
20001dc4:	891b      	ldrh	r3, [r3, #8]
20001dc6:	4313      	orrs	r3, r2
20001dc8:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
20001dca:	683b      	ldr	r3, [r7, #0]
20001dcc:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
20001dce:	4313      	orrs	r3, r2
20001dd0:	b29b      	uxth	r3, r3
20001dd2:	001a      	movs	r2, r3
20001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001dd6:	4313      	orrs	r3, r2
20001dd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
20001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ddc:	b29a      	uxth	r2, r3
20001dde:	687b      	ldr	r3, [r7, #4]
20001de0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
20001de2:	687b      	ldr	r3, [r7, #4]
20001de4:	8a9b      	ldrh	r3, [r3, #20]
20001de6:	b29b      	uxth	r3, r3
20001de8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
20001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001dec:	4a42      	ldr	r2, [pc, #264]	; (20001ef8 <USART_Init+0x188>)
20001dee:	4013      	ands	r3, r2
20001df0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
20001df2:	683b      	ldr	r3, [r7, #0]
20001df4:	899b      	ldrh	r3, [r3, #12]
20001df6:	001a      	movs	r2, r3
20001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001dfa:	4313      	orrs	r3, r2
20001dfc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
20001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001e00:	b29a      	uxth	r2, r3
20001e02:	687b      	ldr	r3, [r7, #4]
20001e04:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
20001e06:	2308      	movs	r3, #8
20001e08:	18fb      	adds	r3, r7, r3
20001e0a:	0018      	movs	r0, r3
20001e0c:	f7fe fb74 	bl	200004f8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
20001e10:	687b      	ldr	r3, [r7, #4]
20001e12:	4a3a      	ldr	r2, [pc, #232]	; (20001efc <USART_Init+0x18c>)
20001e14:	4293      	cmp	r3, r2
20001e16:	d003      	beq.n	20001e20 <USART_Init+0xb0>
20001e18:	687b      	ldr	r3, [r7, #4]
20001e1a:	4a39      	ldr	r2, [pc, #228]	; (20001f00 <USART_Init+0x190>)
20001e1c:	4293      	cmp	r3, r2
20001e1e:	d104      	bne.n	20001e2a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
20001e20:	2308      	movs	r3, #8
20001e22:	18fb      	adds	r3, r7, r3
20001e24:	68db      	ldr	r3, [r3, #12]
20001e26:	623b      	str	r3, [r7, #32]
20001e28:	e003      	b.n	20001e32 <USART_Init+0xc2>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
20001e2a:	2308      	movs	r3, #8
20001e2c:	18fb      	adds	r3, r7, r3
20001e2e:	689b      	ldr	r3, [r3, #8]
20001e30:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
20001e32:	687b      	ldr	r3, [r7, #4]
20001e34:	899b      	ldrh	r3, [r3, #12]
20001e36:	b29b      	uxth	r3, r3
20001e38:	b21b      	sxth	r3, r3
20001e3a:	2b00      	cmp	r3, #0
20001e3c:	da0f      	bge.n	20001e5e <USART_Init+0xee>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
20001e3e:	6a3a      	ldr	r2, [r7, #32]
20001e40:	0013      	movs	r3, r2
20001e42:	009b      	lsls	r3, r3, #2
20001e44:	189b      	adds	r3, r3, r2
20001e46:	009a      	lsls	r2, r3, #2
20001e48:	189a      	adds	r2, r3, r2
20001e4a:	683b      	ldr	r3, [r7, #0]
20001e4c:	681b      	ldr	r3, [r3, #0]
20001e4e:	005b      	lsls	r3, r3, #1
20001e50:	0019      	movs	r1, r3
20001e52:	0010      	movs	r0, r2
20001e54:	f000 fbf4 	bl	20002640 <__udivsi3>
20001e58:	0003      	movs	r3, r0
20001e5a:	61fb      	str	r3, [r7, #28]
20001e5c:	e00e      	b.n	20001e7c <USART_Init+0x10c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
20001e5e:	6a3a      	ldr	r2, [r7, #32]
20001e60:	0013      	movs	r3, r2
20001e62:	009b      	lsls	r3, r3, #2
20001e64:	189b      	adds	r3, r3, r2
20001e66:	009a      	lsls	r2, r3, #2
20001e68:	189a      	adds	r2, r3, r2
20001e6a:	683b      	ldr	r3, [r7, #0]
20001e6c:	681b      	ldr	r3, [r3, #0]
20001e6e:	009b      	lsls	r3, r3, #2
20001e70:	0019      	movs	r1, r3
20001e72:	0010      	movs	r0, r2
20001e74:	f000 fbe4 	bl	20002640 <__udivsi3>
20001e78:	0003      	movs	r3, r0
20001e7a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
20001e7c:	69fb      	ldr	r3, [r7, #28]
20001e7e:	2164      	movs	r1, #100	; 0x64
20001e80:	0018      	movs	r0, r3
20001e82:	f000 fbdd 	bl	20002640 <__udivsi3>
20001e86:	0003      	movs	r3, r0
20001e88:	011b      	lsls	r3, r3, #4
20001e8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
20001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001e8e:	091b      	lsrs	r3, r3, #4
20001e90:	2264      	movs	r2, #100	; 0x64
20001e92:	4353      	muls	r3, r2
20001e94:	69fa      	ldr	r2, [r7, #28]
20001e96:	1ad3      	subs	r3, r2, r3
20001e98:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
20001e9a:	687b      	ldr	r3, [r7, #4]
20001e9c:	899b      	ldrh	r3, [r3, #12]
20001e9e:	b29b      	uxth	r3, r3
20001ea0:	b21b      	sxth	r3, r3
20001ea2:	2b00      	cmp	r3, #0
20001ea4:	da0e      	bge.n	20001ec4 <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
20001ea6:	69bb      	ldr	r3, [r7, #24]
20001ea8:	00db      	lsls	r3, r3, #3
20001eaa:	3332      	adds	r3, #50	; 0x32
20001eac:	2164      	movs	r1, #100	; 0x64
20001eae:	0018      	movs	r0, r3
20001eb0:	f000 fbc6 	bl	20002640 <__udivsi3>
20001eb4:	0003      	movs	r3, r0
20001eb6:	001a      	movs	r2, r3
20001eb8:	2307      	movs	r3, #7
20001eba:	4013      	ands	r3, r2
20001ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001ebe:	4313      	orrs	r3, r2
20001ec0:	627b      	str	r3, [r7, #36]	; 0x24
20001ec2:	e00d      	b.n	20001ee0 <USART_Init+0x170>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
20001ec4:	69bb      	ldr	r3, [r7, #24]
20001ec6:	011b      	lsls	r3, r3, #4
20001ec8:	3332      	adds	r3, #50	; 0x32
20001eca:	2164      	movs	r1, #100	; 0x64
20001ecc:	0018      	movs	r0, r3
20001ece:	f000 fbb7 	bl	20002640 <__udivsi3>
20001ed2:	0003      	movs	r3, r0
20001ed4:	001a      	movs	r2, r3
20001ed6:	230f      	movs	r3, #15
20001ed8:	4013      	ands	r3, r2
20001eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001edc:	4313      	orrs	r3, r2
20001ede:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
20001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ee2:	b29a      	uxth	r2, r3
20001ee4:	687b      	ldr	r3, [r7, #4]
20001ee6:	811a      	strh	r2, [r3, #8]
}
20001ee8:	46c0      	nop			; (mov r8, r8)
20001eea:	46bd      	mov	sp, r7
20001eec:	b00a      	add	sp, #40	; 0x28
20001eee:	bd80      	pop	{r7, pc}
20001ef0:	ffffcfff 			; <UNDEFINED> instruction: 0xffffcfff
20001ef4:	ffffe9f3 			; <UNDEFINED> instruction: 0xffffe9f3
20001ef8:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
20001efc:	40011000 	andmi	r1, r1, r0
20001f00:	40011400 	andmi	r1, r1, r0, lsl #8

20001f04 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
20001f04:	b580      	push	{r7, lr}
20001f06:	b082      	sub	sp, #8
20001f08:	af00      	add	r7, sp, #0
20001f0a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
20001f0c:	687b      	ldr	r3, [r7, #4]
20001f0e:	2296      	movs	r2, #150	; 0x96
20001f10:	0192      	lsls	r2, r2, #6
20001f12:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
20001f14:	687b      	ldr	r3, [r7, #4]
20001f16:	2200      	movs	r2, #0
20001f18:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
20001f1a:	687b      	ldr	r3, [r7, #4]
20001f1c:	2200      	movs	r2, #0
20001f1e:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
20001f20:	687b      	ldr	r3, [r7, #4]
20001f22:	2200      	movs	r2, #0
20001f24:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
20001f26:	687b      	ldr	r3, [r7, #4]
20001f28:	220c      	movs	r2, #12
20001f2a:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
20001f2c:	687b      	ldr	r3, [r7, #4]
20001f2e:	2200      	movs	r2, #0
20001f30:	819a      	strh	r2, [r3, #12]
}
20001f32:	46c0      	nop			; (mov r8, r8)
20001f34:	46bd      	mov	sp, r7
20001f36:	b002      	add	sp, #8
20001f38:	bd80      	pop	{r7, pc}

20001f3a <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20001f3a:	b580      	push	{r7, lr}
20001f3c:	b084      	sub	sp, #16
20001f3e:	af00      	add	r7, sp, #0
20001f40:	6078      	str	r0, [r7, #4]
20001f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
20001f44:	2300      	movs	r3, #0
20001f46:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
20001f48:	687b      	ldr	r3, [r7, #4]
20001f4a:	8a1b      	ldrh	r3, [r3, #16]
20001f4c:	b29b      	uxth	r3, r3
20001f4e:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
20001f50:	68fb      	ldr	r3, [r7, #12]
20001f52:	4a0e      	ldr	r2, [pc, #56]	; (20001f8c <USART_ClockInit+0x52>)
20001f54:	4013      	ands	r3, r2
20001f56:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20001f58:	683b      	ldr	r3, [r7, #0]
20001f5a:	881a      	ldrh	r2, [r3, #0]
20001f5c:	683b      	ldr	r3, [r7, #0]
20001f5e:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
20001f60:	4313      	orrs	r3, r2
20001f62:	b29a      	uxth	r2, r3
20001f64:	683b      	ldr	r3, [r7, #0]
20001f66:	889b      	ldrh	r3, [r3, #4]
20001f68:	4313      	orrs	r3, r2
20001f6a:	b29a      	uxth	r2, r3
20001f6c:	683b      	ldr	r3, [r7, #0]
20001f6e:	88db      	ldrh	r3, [r3, #6]
20001f70:	4313      	orrs	r3, r2
20001f72:	b29b      	uxth	r3, r3
20001f74:	001a      	movs	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20001f76:	68fb      	ldr	r3, [r7, #12]
20001f78:	4313      	orrs	r3, r2
20001f7a:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
20001f7c:	68fb      	ldr	r3, [r7, #12]
20001f7e:	b29a      	uxth	r2, r3
20001f80:	687b      	ldr	r3, [r7, #4]
20001f82:	821a      	strh	r2, [r3, #16]
}
20001f84:	46c0      	nop			; (mov r8, r8)
20001f86:	46bd      	mov	sp, r7
20001f88:	b004      	add	sp, #16
20001f8a:	bd80      	pop	{r7, pc}
20001f8c:	fffff0ff 			; <UNDEFINED> instruction: 0xfffff0ff

20001f90 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20001f90:	b580      	push	{r7, lr}
20001f92:	b082      	sub	sp, #8
20001f94:	af00      	add	r7, sp, #0
20001f96:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
20001f98:	687b      	ldr	r3, [r7, #4]
20001f9a:	2200      	movs	r2, #0
20001f9c:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
20001f9e:	687b      	ldr	r3, [r7, #4]
20001fa0:	2200      	movs	r2, #0
20001fa2:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
20001fa4:	687b      	ldr	r3, [r7, #4]
20001fa6:	2200      	movs	r2, #0
20001fa8:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
20001faa:	687b      	ldr	r3, [r7, #4]
20001fac:	2200      	movs	r2, #0
20001fae:	80da      	strh	r2, [r3, #6]
}
20001fb0:	46c0      	nop			; (mov r8, r8)
20001fb2:	46bd      	mov	sp, r7
20001fb4:	b002      	add	sp, #8
20001fb6:	bd80      	pop	{r7, pc}

20001fb8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001fb8:	b580      	push	{r7, lr}
20001fba:	b082      	sub	sp, #8
20001fbc:	af00      	add	r7, sp, #0
20001fbe:	6078      	str	r0, [r7, #4]
20001fc0:	000a      	movs	r2, r1
20001fc2:	1cfb      	adds	r3, r7, #3
20001fc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001fc6:	1cfb      	adds	r3, r7, #3
20001fc8:	781b      	ldrb	r3, [r3, #0]
20001fca:	2b00      	cmp	r3, #0
20001fcc:	d009      	beq.n	20001fe2 <USART_Cmd+0x2a>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
20001fce:	687b      	ldr	r3, [r7, #4]
20001fd0:	899b      	ldrh	r3, [r3, #12]
20001fd2:	b29b      	uxth	r3, r3
20001fd4:	2280      	movs	r2, #128	; 0x80
20001fd6:	0192      	lsls	r2, r2, #6
20001fd8:	4313      	orrs	r3, r2
20001fda:	b29a      	uxth	r2, r3
20001fdc:	687b      	ldr	r3, [r7, #4]
20001fde:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
20001fe0:	e007      	b.n	20001ff2 <USART_Cmd+0x3a>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
20001fe2:	687b      	ldr	r3, [r7, #4]
20001fe4:	899b      	ldrh	r3, [r3, #12]
20001fe6:	b29b      	uxth	r3, r3
20001fe8:	4a04      	ldr	r2, [pc, #16]	; (20001ffc <USART_Cmd+0x44>)
20001fea:	4013      	ands	r3, r2
20001fec:	b29a      	uxth	r2, r3
20001fee:	687b      	ldr	r3, [r7, #4]
20001ff0:	819a      	strh	r2, [r3, #12]
}
20001ff2:	46c0      	nop			; (mov r8, r8)
20001ff4:	46bd      	mov	sp, r7
20001ff6:	b002      	add	sp, #8
20001ff8:	bd80      	pop	{r7, pc}
20001ffa:	46c0      	nop			; (mov r8, r8)
20001ffc:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

20002000 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
20002000:	b580      	push	{r7, lr}
20002002:	b082      	sub	sp, #8
20002004:	af00      	add	r7, sp, #0
20002006:	6078      	str	r0, [r7, #4]
20002008:	000a      	movs	r2, r1
2000200a:	1cfb      	adds	r3, r7, #3
2000200c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
2000200e:	687b      	ldr	r3, [r7, #4]
20002010:	8b1b      	ldrh	r3, [r3, #24]
20002012:	b29b      	uxth	r3, r3
20002014:	22ff      	movs	r2, #255	; 0xff
20002016:	4393      	bics	r3, r2
20002018:	b29a      	uxth	r2, r3
2000201a:	687b      	ldr	r3, [r7, #4]
2000201c:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
2000201e:	687b      	ldr	r3, [r7, #4]
20002020:	8b1b      	ldrh	r3, [r3, #24]
20002022:	b29a      	uxth	r2, r3
20002024:	1cfb      	adds	r3, r7, #3
20002026:	781b      	ldrb	r3, [r3, #0]
20002028:	b29b      	uxth	r3, r3
2000202a:	4313      	orrs	r3, r2
2000202c:	b29a      	uxth	r2, r3
2000202e:	687b      	ldr	r3, [r7, #4]
20002030:	831a      	strh	r2, [r3, #24]
}
20002032:	46c0      	nop			; (mov r8, r8)
20002034:	46bd      	mov	sp, r7
20002036:	b002      	add	sp, #8
20002038:	bd80      	pop	{r7, pc}

2000203a <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
2000203a:	b580      	push	{r7, lr}
2000203c:	b082      	sub	sp, #8
2000203e:	af00      	add	r7, sp, #0
20002040:	6078      	str	r0, [r7, #4]
20002042:	000a      	movs	r2, r1
20002044:	1cfb      	adds	r3, r7, #3
20002046:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002048:	1cfb      	adds	r3, r7, #3
2000204a:	781b      	ldrb	r3, [r3, #0]
2000204c:	2b00      	cmp	r3, #0
2000204e:	d008      	beq.n	20002062 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
20002050:	687b      	ldr	r3, [r7, #4]
20002052:	899b      	ldrh	r3, [r3, #12]
20002054:	b29b      	uxth	r3, r3
20002056:	4a09      	ldr	r2, [pc, #36]	; (2000207c <USART_OverSampling8Cmd+0x42>)
20002058:	4313      	orrs	r3, r2
2000205a:	b29a      	uxth	r2, r3
2000205c:	687b      	ldr	r3, [r7, #4]
2000205e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
20002060:	e007      	b.n	20002072 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
20002062:	687b      	ldr	r3, [r7, #4]
20002064:	899b      	ldrh	r3, [r3, #12]
20002066:	b29b      	uxth	r3, r3
20002068:	045b      	lsls	r3, r3, #17
2000206a:	0c5b      	lsrs	r3, r3, #17
2000206c:	b29a      	uxth	r2, r3
2000206e:	687b      	ldr	r3, [r7, #4]
20002070:	819a      	strh	r2, [r3, #12]
}  
20002072:	46c0      	nop			; (mov r8, r8)
20002074:	46bd      	mov	sp, r7
20002076:	b002      	add	sp, #8
20002078:	bd80      	pop	{r7, pc}
2000207a:	46c0      	nop			; (mov r8, r8)
2000207c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000

20002080 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002080:	b580      	push	{r7, lr}
20002082:	b082      	sub	sp, #8
20002084:	af00      	add	r7, sp, #0
20002086:	6078      	str	r0, [r7, #4]
20002088:	000a      	movs	r2, r1
2000208a:	1cfb      	adds	r3, r7, #3
2000208c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
2000208e:	1cfb      	adds	r3, r7, #3
20002090:	781b      	ldrb	r3, [r3, #0]
20002092:	2b00      	cmp	r3, #0
20002094:	d009      	beq.n	200020aa <USART_OneBitMethodCmd+0x2a>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
20002096:	687b      	ldr	r3, [r7, #4]
20002098:	8a9b      	ldrh	r3, [r3, #20]
2000209a:	b29b      	uxth	r3, r3
2000209c:	2280      	movs	r2, #128	; 0x80
2000209e:	0112      	lsls	r2, r2, #4
200020a0:	4313      	orrs	r3, r2
200020a2:	b29a      	uxth	r2, r3
200020a4:	687b      	ldr	r3, [r7, #4]
200020a6:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
  }
}
200020a8:	e007      	b.n	200020ba <USART_OneBitMethodCmd+0x3a>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
200020aa:	687b      	ldr	r3, [r7, #4]
200020ac:	8a9b      	ldrh	r3, [r3, #20]
200020ae:	b29b      	uxth	r3, r3
200020b0:	4a04      	ldr	r2, [pc, #16]	; (200020c4 <USART_OneBitMethodCmd+0x44>)
200020b2:	4013      	ands	r3, r2
200020b4:	b29a      	uxth	r2, r3
200020b6:	687b      	ldr	r3, [r7, #4]
200020b8:	829a      	strh	r2, [r3, #20]
}
200020ba:	46c0      	nop			; (mov r8, r8)
200020bc:	46bd      	mov	sp, r7
200020be:	b002      	add	sp, #8
200020c0:	bd80      	pop	{r7, pc}
200020c2:	46c0      	nop			; (mov r8, r8)
200020c4:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

200020c8 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
200020c8:	b580      	push	{r7, lr}
200020ca:	b082      	sub	sp, #8
200020cc:	af00      	add	r7, sp, #0
200020ce:	6078      	str	r0, [r7, #4]
200020d0:	000a      	movs	r2, r1
200020d2:	1cbb      	adds	r3, r7, #2
200020d4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
200020d6:	1cbb      	adds	r3, r7, #2
200020d8:	881b      	ldrh	r3, [r3, #0]
200020da:	05db      	lsls	r3, r3, #23
200020dc:	0ddb      	lsrs	r3, r3, #23
200020de:	b29a      	uxth	r2, r3
200020e0:	687b      	ldr	r3, [r7, #4]
200020e2:	809a      	strh	r2, [r3, #4]
}
200020e4:	46c0      	nop			; (mov r8, r8)
200020e6:	46bd      	mov	sp, r7
200020e8:	b002      	add	sp, #8
200020ea:	bd80      	pop	{r7, pc}

200020ec <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
200020ec:	b580      	push	{r7, lr}
200020ee:	b082      	sub	sp, #8
200020f0:	af00      	add	r7, sp, #0
200020f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
200020f4:	687b      	ldr	r3, [r7, #4]
200020f6:	889b      	ldrh	r3, [r3, #4]
200020f8:	b29b      	uxth	r3, r3
200020fa:	05db      	lsls	r3, r3, #23
200020fc:	0ddb      	lsrs	r3, r3, #23
200020fe:	b29b      	uxth	r3, r3
}
20002100:	0018      	movs	r0, r3
20002102:	46bd      	mov	sp, r7
20002104:	b002      	add	sp, #8
20002106:	bd80      	pop	{r7, pc}

20002108 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
20002108:	b580      	push	{r7, lr}
2000210a:	b082      	sub	sp, #8
2000210c:	af00      	add	r7, sp, #0
2000210e:	6078      	str	r0, [r7, #4]
20002110:	000a      	movs	r2, r1
20002112:	1cfb      	adds	r3, r7, #3
20002114:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
20002116:	687b      	ldr	r3, [r7, #4]
20002118:	8a1b      	ldrh	r3, [r3, #16]
2000211a:	b29b      	uxth	r3, r3
2000211c:	220f      	movs	r2, #15
2000211e:	4393      	bics	r3, r2
20002120:	b29a      	uxth	r2, r3
20002122:	687b      	ldr	r3, [r7, #4]
20002124:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
20002126:	687b      	ldr	r3, [r7, #4]
20002128:	8a1b      	ldrh	r3, [r3, #16]
2000212a:	b29a      	uxth	r2, r3
2000212c:	1cfb      	adds	r3, r7, #3
2000212e:	781b      	ldrb	r3, [r3, #0]
20002130:	b29b      	uxth	r3, r3
20002132:	4313      	orrs	r3, r2
20002134:	b29a      	uxth	r2, r3
20002136:	687b      	ldr	r3, [r7, #4]
20002138:	821a      	strh	r2, [r3, #16]
}
2000213a:	46c0      	nop			; (mov r8, r8)
2000213c:	46bd      	mov	sp, r7
2000213e:	b002      	add	sp, #8
20002140:	bd80      	pop	{r7, pc}

20002142 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002142:	b580      	push	{r7, lr}
20002144:	b082      	sub	sp, #8
20002146:	af00      	add	r7, sp, #0
20002148:	6078      	str	r0, [r7, #4]
2000214a:	000a      	movs	r2, r1
2000214c:	1cfb      	adds	r3, r7, #3
2000214e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
20002150:	1cfb      	adds	r3, r7, #3
20002152:	781b      	ldrb	r3, [r3, #0]
20002154:	2b00      	cmp	r3, #0
20002156:	d008      	beq.n	2000216a <USART_ReceiverWakeUpCmd+0x28>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
20002158:	687b      	ldr	r3, [r7, #4]
2000215a:	899b      	ldrh	r3, [r3, #12]
2000215c:	b29b      	uxth	r3, r3
2000215e:	2202      	movs	r2, #2
20002160:	4313      	orrs	r3, r2
20002162:	b29a      	uxth	r2, r3
20002164:	687b      	ldr	r3, [r7, #4]
20002166:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
  }
}
20002168:	e007      	b.n	2000217a <USART_ReceiverWakeUpCmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
2000216a:	687b      	ldr	r3, [r7, #4]
2000216c:	899b      	ldrh	r3, [r3, #12]
2000216e:	b29b      	uxth	r3, r3
20002170:	2202      	movs	r2, #2
20002172:	4393      	bics	r3, r2
20002174:	b29a      	uxth	r2, r3
20002176:	687b      	ldr	r3, [r7, #4]
20002178:	819a      	strh	r2, [r3, #12]
}
2000217a:	46c0      	nop			; (mov r8, r8)
2000217c:	46bd      	mov	sp, r7
2000217e:	b002      	add	sp, #8
20002180:	bd80      	pop	{r7, pc}

20002182 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
20002182:	b580      	push	{r7, lr}
20002184:	b082      	sub	sp, #8
20002186:	af00      	add	r7, sp, #0
20002188:	6078      	str	r0, [r7, #4]
2000218a:	000a      	movs	r2, r1
2000218c:	1cbb      	adds	r3, r7, #2
2000218e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
20002190:	687b      	ldr	r3, [r7, #4]
20002192:	899b      	ldrh	r3, [r3, #12]
20002194:	b29b      	uxth	r3, r3
20002196:	4a09      	ldr	r2, [pc, #36]	; (200021bc <USART_WakeUpConfig+0x3a>)
20002198:	4013      	ands	r3, r2
2000219a:	b29a      	uxth	r2, r3
2000219c:	687b      	ldr	r3, [r7, #4]
2000219e:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
200021a0:	687b      	ldr	r3, [r7, #4]
200021a2:	899b      	ldrh	r3, [r3, #12]
200021a4:	b29a      	uxth	r2, r3
200021a6:	1cbb      	adds	r3, r7, #2
200021a8:	881b      	ldrh	r3, [r3, #0]
200021aa:	4313      	orrs	r3, r2
200021ac:	b29a      	uxth	r2, r3
200021ae:	687b      	ldr	r3, [r7, #4]
200021b0:	819a      	strh	r2, [r3, #12]
}
200021b2:	46c0      	nop			; (mov r8, r8)
200021b4:	46bd      	mov	sp, r7
200021b6:	b002      	add	sp, #8
200021b8:	bd80      	pop	{r7, pc}
200021ba:	46c0      	nop			; (mov r8, r8)
200021bc:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

200021c0 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
200021c0:	b580      	push	{r7, lr}
200021c2:	b082      	sub	sp, #8
200021c4:	af00      	add	r7, sp, #0
200021c6:	6078      	str	r0, [r7, #4]
200021c8:	000a      	movs	r2, r1
200021ca:	1cbb      	adds	r3, r7, #2
200021cc:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
200021ce:	687b      	ldr	r3, [r7, #4]
200021d0:	8a1b      	ldrh	r3, [r3, #16]
200021d2:	b29b      	uxth	r3, r3
200021d4:	2220      	movs	r2, #32
200021d6:	4393      	bics	r3, r2
200021d8:	b29a      	uxth	r2, r3
200021da:	687b      	ldr	r3, [r7, #4]
200021dc:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
200021de:	687b      	ldr	r3, [r7, #4]
200021e0:	8a1b      	ldrh	r3, [r3, #16]
200021e2:	b29a      	uxth	r2, r3
200021e4:	1cbb      	adds	r3, r7, #2
200021e6:	881b      	ldrh	r3, [r3, #0]
200021e8:	4313      	orrs	r3, r2
200021ea:	b29a      	uxth	r2, r3
200021ec:	687b      	ldr	r3, [r7, #4]
200021ee:	821a      	strh	r2, [r3, #16]
}
200021f0:	46c0      	nop			; (mov r8, r8)
200021f2:	46bd      	mov	sp, r7
200021f4:	b002      	add	sp, #8
200021f6:	bd80      	pop	{r7, pc}

200021f8 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
200021f8:	b580      	push	{r7, lr}
200021fa:	b082      	sub	sp, #8
200021fc:	af00      	add	r7, sp, #0
200021fe:	6078      	str	r0, [r7, #4]
20002200:	000a      	movs	r2, r1
20002202:	1cfb      	adds	r3, r7, #3
20002204:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002206:	1cfb      	adds	r3, r7, #3
20002208:	781b      	ldrb	r3, [r3, #0]
2000220a:	2b00      	cmp	r3, #0
2000220c:	d009      	beq.n	20002222 <USART_LINCmd+0x2a>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
2000220e:	687b      	ldr	r3, [r7, #4]
20002210:	8a1b      	ldrh	r3, [r3, #16]
20002212:	b29b      	uxth	r3, r3
20002214:	2280      	movs	r2, #128	; 0x80
20002216:	01d2      	lsls	r2, r2, #7
20002218:	4313      	orrs	r3, r2
2000221a:	b29a      	uxth	r2, r3
2000221c:	687b      	ldr	r3, [r7, #4]
2000221e:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
  }
}
20002220:	e007      	b.n	20002232 <USART_LINCmd+0x3a>
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
20002222:	687b      	ldr	r3, [r7, #4]
20002224:	8a1b      	ldrh	r3, [r3, #16]
20002226:	b29b      	uxth	r3, r3
20002228:	4a04      	ldr	r2, [pc, #16]	; (2000223c <USART_LINCmd+0x44>)
2000222a:	4013      	ands	r3, r2
2000222c:	b29a      	uxth	r2, r3
2000222e:	687b      	ldr	r3, [r7, #4]
20002230:	821a      	strh	r2, [r3, #16]
}
20002232:	46c0      	nop			; (mov r8, r8)
20002234:	46bd      	mov	sp, r7
20002236:	b002      	add	sp, #8
20002238:	bd80      	pop	{r7, pc}
2000223a:	46c0      	nop			; (mov r8, r8)
2000223c:	ffffbfff 			; <UNDEFINED> instruction: 0xffffbfff

20002240 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
20002240:	b580      	push	{r7, lr}
20002242:	b082      	sub	sp, #8
20002244:	af00      	add	r7, sp, #0
20002246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
20002248:	687b      	ldr	r3, [r7, #4]
2000224a:	899b      	ldrh	r3, [r3, #12]
2000224c:	b29b      	uxth	r3, r3
2000224e:	2201      	movs	r2, #1
20002250:	4313      	orrs	r3, r2
20002252:	b29a      	uxth	r2, r3
20002254:	687b      	ldr	r3, [r7, #4]
20002256:	819a      	strh	r2, [r3, #12]
}
20002258:	46c0      	nop			; (mov r8, r8)
2000225a:	46bd      	mov	sp, r7
2000225c:	b002      	add	sp, #8
2000225e:	bd80      	pop	{r7, pc}

20002260 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002260:	b580      	push	{r7, lr}
20002262:	b082      	sub	sp, #8
20002264:	af00      	add	r7, sp, #0
20002266:	6078      	str	r0, [r7, #4]
20002268:	000a      	movs	r2, r1
2000226a:	1cfb      	adds	r3, r7, #3
2000226c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
2000226e:	1cfb      	adds	r3, r7, #3
20002270:	781b      	ldrb	r3, [r3, #0]
20002272:	2b00      	cmp	r3, #0
20002274:	d008      	beq.n	20002288 <USART_HalfDuplexCmd+0x28>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
20002276:	687b      	ldr	r3, [r7, #4]
20002278:	8a9b      	ldrh	r3, [r3, #20]
2000227a:	b29b      	uxth	r3, r3
2000227c:	2208      	movs	r2, #8
2000227e:	4313      	orrs	r3, r2
20002280:	b29a      	uxth	r2, r3
20002282:	687b      	ldr	r3, [r7, #4]
20002284:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
20002286:	e007      	b.n	20002298 <USART_HalfDuplexCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
20002288:	687b      	ldr	r3, [r7, #4]
2000228a:	8a9b      	ldrh	r3, [r3, #20]
2000228c:	b29b      	uxth	r3, r3
2000228e:	2208      	movs	r2, #8
20002290:	4393      	bics	r3, r2
20002292:	b29a      	uxth	r2, r3
20002294:	687b      	ldr	r3, [r7, #4]
20002296:	829a      	strh	r2, [r3, #20]
}
20002298:	46c0      	nop			; (mov r8, r8)
2000229a:	46bd      	mov	sp, r7
2000229c:	b002      	add	sp, #8
2000229e:	bd80      	pop	{r7, pc}

200022a0 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
200022a0:	b580      	push	{r7, lr}
200022a2:	b082      	sub	sp, #8
200022a4:	af00      	add	r7, sp, #0
200022a6:	6078      	str	r0, [r7, #4]
200022a8:	000a      	movs	r2, r1
200022aa:	1cfb      	adds	r3, r7, #3
200022ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
200022ae:	687b      	ldr	r3, [r7, #4]
200022b0:	8b1b      	ldrh	r3, [r3, #24]
200022b2:	b29b      	uxth	r3, r3
200022b4:	22ff      	movs	r2, #255	; 0xff
200022b6:	4013      	ands	r3, r2
200022b8:	b29a      	uxth	r2, r3
200022ba:	687b      	ldr	r3, [r7, #4]
200022bc:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
200022be:	687b      	ldr	r3, [r7, #4]
200022c0:	8b1b      	ldrh	r3, [r3, #24]
200022c2:	b29a      	uxth	r2, r3
200022c4:	1cfb      	adds	r3, r7, #3
200022c6:	781b      	ldrb	r3, [r3, #0]
200022c8:	b29b      	uxth	r3, r3
200022ca:	021b      	lsls	r3, r3, #8
200022cc:	b29b      	uxth	r3, r3
200022ce:	4313      	orrs	r3, r2
200022d0:	b29a      	uxth	r2, r3
200022d2:	687b      	ldr	r3, [r7, #4]
200022d4:	831a      	strh	r2, [r3, #24]
}
200022d6:	46c0      	nop			; (mov r8, r8)
200022d8:	46bd      	mov	sp, r7
200022da:	b002      	add	sp, #8
200022dc:	bd80      	pop	{r7, pc}

200022de <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
200022de:	b580      	push	{r7, lr}
200022e0:	b082      	sub	sp, #8
200022e2:	af00      	add	r7, sp, #0
200022e4:	6078      	str	r0, [r7, #4]
200022e6:	000a      	movs	r2, r1
200022e8:	1cfb      	adds	r3, r7, #3
200022ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200022ec:	1cfb      	adds	r3, r7, #3
200022ee:	781b      	ldrb	r3, [r3, #0]
200022f0:	2b00      	cmp	r3, #0
200022f2:	d008      	beq.n	20002306 <USART_SmartCardCmd+0x28>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
200022f4:	687b      	ldr	r3, [r7, #4]
200022f6:	8a9b      	ldrh	r3, [r3, #20]
200022f8:	b29b      	uxth	r3, r3
200022fa:	2220      	movs	r2, #32
200022fc:	4313      	orrs	r3, r2
200022fe:	b29a      	uxth	r2, r3
20002300:	687b      	ldr	r3, [r7, #4]
20002302:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
  }
}
20002304:	e007      	b.n	20002316 <USART_SmartCardCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
20002306:	687b      	ldr	r3, [r7, #4]
20002308:	8a9b      	ldrh	r3, [r3, #20]
2000230a:	b29b      	uxth	r3, r3
2000230c:	2220      	movs	r2, #32
2000230e:	4393      	bics	r3, r2
20002310:	b29a      	uxth	r2, r3
20002312:	687b      	ldr	r3, [r7, #4]
20002314:	829a      	strh	r2, [r3, #20]
}
20002316:	46c0      	nop			; (mov r8, r8)
20002318:	46bd      	mov	sp, r7
2000231a:	b002      	add	sp, #8
2000231c:	bd80      	pop	{r7, pc}

2000231e <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
2000231e:	b580      	push	{r7, lr}
20002320:	b082      	sub	sp, #8
20002322:	af00      	add	r7, sp, #0
20002324:	6078      	str	r0, [r7, #4]
20002326:	000a      	movs	r2, r1
20002328:	1cfb      	adds	r3, r7, #3
2000232a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000232c:	1cfb      	adds	r3, r7, #3
2000232e:	781b      	ldrb	r3, [r3, #0]
20002330:	2b00      	cmp	r3, #0
20002332:	d008      	beq.n	20002346 <USART_SmartCardNACKCmd+0x28>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
20002334:	687b      	ldr	r3, [r7, #4]
20002336:	8a9b      	ldrh	r3, [r3, #20]
20002338:	b29b      	uxth	r3, r3
2000233a:	2210      	movs	r2, #16
2000233c:	4313      	orrs	r3, r2
2000233e:	b29a      	uxth	r2, r3
20002340:	687b      	ldr	r3, [r7, #4]
20002342:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
  }
}
20002344:	e007      	b.n	20002356 <USART_SmartCardNACKCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
20002346:	687b      	ldr	r3, [r7, #4]
20002348:	8a9b      	ldrh	r3, [r3, #20]
2000234a:	b29b      	uxth	r3, r3
2000234c:	2210      	movs	r2, #16
2000234e:	4393      	bics	r3, r2
20002350:	b29a      	uxth	r2, r3
20002352:	687b      	ldr	r3, [r7, #4]
20002354:	829a      	strh	r2, [r3, #20]
}
20002356:	46c0      	nop			; (mov r8, r8)
20002358:	46bd      	mov	sp, r7
2000235a:	b002      	add	sp, #8
2000235c:	bd80      	pop	{r7, pc}

2000235e <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
2000235e:	b580      	push	{r7, lr}
20002360:	b082      	sub	sp, #8
20002362:	af00      	add	r7, sp, #0
20002364:	6078      	str	r0, [r7, #4]
20002366:	000a      	movs	r2, r1
20002368:	1cbb      	adds	r3, r7, #2
2000236a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
2000236c:	687b      	ldr	r3, [r7, #4]
2000236e:	8a9b      	ldrh	r3, [r3, #20]
20002370:	b29b      	uxth	r3, r3
20002372:	2204      	movs	r2, #4
20002374:	4393      	bics	r3, r2
20002376:	b29a      	uxth	r2, r3
20002378:	687b      	ldr	r3, [r7, #4]
2000237a:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
2000237c:	687b      	ldr	r3, [r7, #4]
2000237e:	8a9b      	ldrh	r3, [r3, #20]
20002380:	b29a      	uxth	r2, r3
20002382:	1cbb      	adds	r3, r7, #2
20002384:	881b      	ldrh	r3, [r3, #0]
20002386:	4313      	orrs	r3, r2
20002388:	b29a      	uxth	r2, r3
2000238a:	687b      	ldr	r3, [r7, #4]
2000238c:	829a      	strh	r2, [r3, #20]
}
2000238e:	46c0      	nop			; (mov r8, r8)
20002390:	46bd      	mov	sp, r7
20002392:	b002      	add	sp, #8
20002394:	bd80      	pop	{r7, pc}

20002396 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002396:	b580      	push	{r7, lr}
20002398:	b082      	sub	sp, #8
2000239a:	af00      	add	r7, sp, #0
2000239c:	6078      	str	r0, [r7, #4]
2000239e:	000a      	movs	r2, r1
200023a0:	1cfb      	adds	r3, r7, #3
200023a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
200023a4:	1cfb      	adds	r3, r7, #3
200023a6:	781b      	ldrb	r3, [r3, #0]
200023a8:	2b00      	cmp	r3, #0
200023aa:	d008      	beq.n	200023be <USART_IrDACmd+0x28>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
200023ac:	687b      	ldr	r3, [r7, #4]
200023ae:	8a9b      	ldrh	r3, [r3, #20]
200023b0:	b29b      	uxth	r3, r3
200023b2:	2202      	movs	r2, #2
200023b4:	4313      	orrs	r3, r2
200023b6:	b29a      	uxth	r2, r3
200023b8:	687b      	ldr	r3, [r7, #4]
200023ba:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
  }
}
200023bc:	e007      	b.n	200023ce <USART_IrDACmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
200023be:	687b      	ldr	r3, [r7, #4]
200023c0:	8a9b      	ldrh	r3, [r3, #20]
200023c2:	b29b      	uxth	r3, r3
200023c4:	2202      	movs	r2, #2
200023c6:	4393      	bics	r3, r2
200023c8:	b29a      	uxth	r2, r3
200023ca:	687b      	ldr	r3, [r7, #4]
200023cc:	829a      	strh	r2, [r3, #20]
}
200023ce:	46c0      	nop			; (mov r8, r8)
200023d0:	46bd      	mov	sp, r7
200023d2:	b002      	add	sp, #8
200023d4:	bd80      	pop	{r7, pc}

200023d6 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
200023d6:	b580      	push	{r7, lr}
200023d8:	b082      	sub	sp, #8
200023da:	af00      	add	r7, sp, #0
200023dc:	6078      	str	r0, [r7, #4]
200023de:	0008      	movs	r0, r1
200023e0:	0011      	movs	r1, r2
200023e2:	1cbb      	adds	r3, r7, #2
200023e4:	1c02      	adds	r2, r0, #0
200023e6:	801a      	strh	r2, [r3, #0]
200023e8:	1c7b      	adds	r3, r7, #1
200023ea:	1c0a      	adds	r2, r1, #0
200023ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
200023ee:	1c7b      	adds	r3, r7, #1
200023f0:	781b      	ldrb	r3, [r3, #0]
200023f2:	2b00      	cmp	r3, #0
200023f4:	d009      	beq.n	2000240a <USART_DMACmd+0x34>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
200023f6:	687b      	ldr	r3, [r7, #4]
200023f8:	8a9b      	ldrh	r3, [r3, #20]
200023fa:	b29a      	uxth	r2, r3
200023fc:	1cbb      	adds	r3, r7, #2
200023fe:	881b      	ldrh	r3, [r3, #0]
20002400:	4313      	orrs	r3, r2
20002402:	b29a      	uxth	r2, r3
20002404:	687b      	ldr	r3, [r7, #4]
20002406:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
20002408:	e00a      	b.n	20002420 <USART_DMACmd+0x4a>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
2000240a:	687b      	ldr	r3, [r7, #4]
2000240c:	8a9b      	ldrh	r3, [r3, #20]
2000240e:	b29b      	uxth	r3, r3
20002410:	1cba      	adds	r2, r7, #2
20002412:	8812      	ldrh	r2, [r2, #0]
20002414:	43d2      	mvns	r2, r2
20002416:	b292      	uxth	r2, r2
20002418:	4013      	ands	r3, r2
2000241a:	b29a      	uxth	r2, r3
2000241c:	687b      	ldr	r3, [r7, #4]
2000241e:	829a      	strh	r2, [r3, #20]
}
20002420:	46c0      	nop			; (mov r8, r8)
20002422:	46bd      	mov	sp, r7
20002424:	b002      	add	sp, #8
20002426:	bd80      	pop	{r7, pc}

20002428 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
20002428:	b580      	push	{r7, lr}
2000242a:	b086      	sub	sp, #24
2000242c:	af00      	add	r7, sp, #0
2000242e:	6078      	str	r0, [r7, #4]
20002430:	0008      	movs	r0, r1
20002432:	0011      	movs	r1, r2
20002434:	1cbb      	adds	r3, r7, #2
20002436:	1c02      	adds	r2, r0, #0
20002438:	801a      	strh	r2, [r3, #0]
2000243a:	1c7b      	adds	r3, r7, #1
2000243c:	1c0a      	adds	r2, r1, #0
2000243e:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
20002440:	2300      	movs	r3, #0
20002442:	613b      	str	r3, [r7, #16]
20002444:	2300      	movs	r3, #0
20002446:	60fb      	str	r3, [r7, #12]
20002448:	2300      	movs	r3, #0
2000244a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
2000244c:	2300      	movs	r3, #0
2000244e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
20002450:	687b      	ldr	r3, [r7, #4]
20002452:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
20002454:	1cbb      	adds	r3, r7, #2
20002456:	881b      	ldrh	r3, [r3, #0]
20002458:	b2db      	uxtb	r3, r3
2000245a:	095b      	lsrs	r3, r3, #5
2000245c:	b2db      	uxtb	r3, r3
2000245e:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
20002460:	1cbb      	adds	r3, r7, #2
20002462:	881b      	ldrh	r3, [r3, #0]
20002464:	221f      	movs	r2, #31
20002466:	4013      	ands	r3, r2
20002468:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
2000246a:	2201      	movs	r2, #1
2000246c:	68fb      	ldr	r3, [r7, #12]
2000246e:	409a      	lsls	r2, r3
20002470:	0013      	movs	r3, r2
20002472:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
20002474:	693b      	ldr	r3, [r7, #16]
20002476:	2b01      	cmp	r3, #1
20002478:	d103      	bne.n	20002482 <USART_ITConfig+0x5a>
  {
    usartxbase += 0x0C;
2000247a:	697b      	ldr	r3, [r7, #20]
2000247c:	330c      	adds	r3, #12
2000247e:	617b      	str	r3, [r7, #20]
20002480:	e009      	b.n	20002496 <USART_ITConfig+0x6e>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
20002482:	693b      	ldr	r3, [r7, #16]
20002484:	2b02      	cmp	r3, #2
20002486:	d103      	bne.n	20002490 <USART_ITConfig+0x68>
  {
    usartxbase += 0x10;
20002488:	697b      	ldr	r3, [r7, #20]
2000248a:	3310      	adds	r3, #16
2000248c:	617b      	str	r3, [r7, #20]
2000248e:	e002      	b.n	20002496 <USART_ITConfig+0x6e>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
20002490:	697b      	ldr	r3, [r7, #20]
20002492:	3314      	adds	r3, #20
20002494:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
20002496:	1c7b      	adds	r3, r7, #1
20002498:	781b      	ldrb	r3, [r3, #0]
2000249a:	2b00      	cmp	r3, #0
2000249c:	d006      	beq.n	200024ac <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
2000249e:	697b      	ldr	r3, [r7, #20]
200024a0:	6819      	ldr	r1, [r3, #0]
200024a2:	697b      	ldr	r3, [r7, #20]
200024a4:	68ba      	ldr	r2, [r7, #8]
200024a6:	430a      	orrs	r2, r1
200024a8:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
200024aa:	e006      	b.n	200024ba <USART_ITConfig+0x92>
    *(__IO uint32_t*)usartxbase &= ~itmask;
200024ac:	697b      	ldr	r3, [r7, #20]
200024ae:	681a      	ldr	r2, [r3, #0]
200024b0:	68bb      	ldr	r3, [r7, #8]
200024b2:	43d9      	mvns	r1, r3
200024b4:	697b      	ldr	r3, [r7, #20]
200024b6:	400a      	ands	r2, r1
200024b8:	601a      	str	r2, [r3, #0]
}
200024ba:	46c0      	nop			; (mov r8, r8)
200024bc:	46bd      	mov	sp, r7
200024be:	b006      	add	sp, #24
200024c0:	bd80      	pop	{r7, pc}

200024c2 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
200024c2:	b580      	push	{r7, lr}
200024c4:	b084      	sub	sp, #16
200024c6:	af00      	add	r7, sp, #0
200024c8:	6078      	str	r0, [r7, #4]
200024ca:	000a      	movs	r2, r1
200024cc:	1cbb      	adds	r3, r7, #2
200024ce:	801a      	strh	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
200024d0:	230f      	movs	r3, #15
200024d2:	18fb      	adds	r3, r7, r3
200024d4:	2200      	movs	r2, #0
200024d6:	701a      	strb	r2, [r3, #0]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
200024d8:	687b      	ldr	r3, [r7, #4]
200024da:	881b      	ldrh	r3, [r3, #0]
200024dc:	b29b      	uxth	r3, r3
200024de:	1cba      	adds	r2, r7, #2
200024e0:	8812      	ldrh	r2, [r2, #0]
200024e2:	4013      	ands	r3, r2
200024e4:	b29b      	uxth	r3, r3
200024e6:	2b00      	cmp	r3, #0
200024e8:	d004      	beq.n	200024f4 <USART_GetFlagStatus+0x32>
  {
    bitstatus = SET;
200024ea:	230f      	movs	r3, #15
200024ec:	18fb      	adds	r3, r7, r3
200024ee:	2201      	movs	r2, #1
200024f0:	701a      	strb	r2, [r3, #0]
200024f2:	e003      	b.n	200024fc <USART_GetFlagStatus+0x3a>
  }
  else
  {
    bitstatus = RESET;
200024f4:	230f      	movs	r3, #15
200024f6:	18fb      	adds	r3, r7, r3
200024f8:	2200      	movs	r2, #0
200024fa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200024fc:	230f      	movs	r3, #15
200024fe:	18fb      	adds	r3, r7, r3
20002500:	781b      	ldrb	r3, [r3, #0]
}
20002502:	0018      	movs	r0, r3
20002504:	46bd      	mov	sp, r7
20002506:	b004      	add	sp, #16
20002508:	bd80      	pop	{r7, pc}

2000250a <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
2000250a:	b580      	push	{r7, lr}
2000250c:	b082      	sub	sp, #8
2000250e:	af00      	add	r7, sp, #0
20002510:	6078      	str	r0, [r7, #4]
20002512:	000a      	movs	r2, r1
20002514:	1cbb      	adds	r3, r7, #2
20002516:	801a      	strh	r2, [r3, #0]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
20002518:	1cbb      	adds	r3, r7, #2
2000251a:	881b      	ldrh	r3, [r3, #0]
2000251c:	43db      	mvns	r3, r3
2000251e:	b29a      	uxth	r2, r3
20002520:	687b      	ldr	r3, [r7, #4]
20002522:	801a      	strh	r2, [r3, #0]
}
20002524:	46c0      	nop			; (mov r8, r8)
20002526:	46bd      	mov	sp, r7
20002528:	b002      	add	sp, #8
2000252a:	bd80      	pop	{r7, pc}

2000252c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
2000252c:	b580      	push	{r7, lr}
2000252e:	b086      	sub	sp, #24
20002530:	af00      	add	r7, sp, #0
20002532:	6078      	str	r0, [r7, #4]
20002534:	000a      	movs	r2, r1
20002536:	1cbb      	adds	r3, r7, #2
20002538:	801a      	strh	r2, [r3, #0]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
2000253a:	2300      	movs	r3, #0
2000253c:	60fb      	str	r3, [r7, #12]
2000253e:	2300      	movs	r3, #0
20002540:	617b      	str	r3, [r7, #20]
20002542:	2300      	movs	r3, #0
20002544:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
20002546:	2313      	movs	r3, #19
20002548:	18fb      	adds	r3, r7, r3
2000254a:	2200      	movs	r2, #0
2000254c:	701a      	strb	r2, [r3, #0]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
2000254e:	1cbb      	adds	r3, r7, #2
20002550:	881b      	ldrh	r3, [r3, #0]
20002552:	b2db      	uxtb	r3, r3
20002554:	095b      	lsrs	r3, r3, #5
20002556:	b2db      	uxtb	r3, r3
20002558:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
2000255a:	1cbb      	adds	r3, r7, #2
2000255c:	881b      	ldrh	r3, [r3, #0]
2000255e:	221f      	movs	r2, #31
20002560:	4013      	ands	r3, r2
20002562:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
20002564:	2201      	movs	r2, #1
20002566:	697b      	ldr	r3, [r7, #20]
20002568:	409a      	lsls	r2, r3
2000256a:	0013      	movs	r3, r2
2000256c:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
2000256e:	68bb      	ldr	r3, [r7, #8]
20002570:	2b01      	cmp	r3, #1
20002572:	d107      	bne.n	20002584 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
20002574:	687b      	ldr	r3, [r7, #4]
20002576:	899b      	ldrh	r3, [r3, #12]
20002578:	b29b      	uxth	r3, r3
2000257a:	001a      	movs	r2, r3
2000257c:	697b      	ldr	r3, [r7, #20]
2000257e:	4013      	ands	r3, r2
20002580:	617b      	str	r3, [r7, #20]
20002582:	e011      	b.n	200025a8 <USART_GetITStatus+0x7c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
20002584:	68bb      	ldr	r3, [r7, #8]
20002586:	2b02      	cmp	r3, #2
20002588:	d107      	bne.n	2000259a <USART_GetITStatus+0x6e>
  {
    itmask &= USARTx->CR2;
2000258a:	687b      	ldr	r3, [r7, #4]
2000258c:	8a1b      	ldrh	r3, [r3, #16]
2000258e:	b29b      	uxth	r3, r3
20002590:	001a      	movs	r2, r3
20002592:	697b      	ldr	r3, [r7, #20]
20002594:	4013      	ands	r3, r2
20002596:	617b      	str	r3, [r7, #20]
20002598:	e006      	b.n	200025a8 <USART_GetITStatus+0x7c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
2000259a:	687b      	ldr	r3, [r7, #4]
2000259c:	8a9b      	ldrh	r3, [r3, #20]
2000259e:	b29b      	uxth	r3, r3
200025a0:	001a      	movs	r2, r3
200025a2:	697b      	ldr	r3, [r7, #20]
200025a4:	4013      	ands	r3, r2
200025a6:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
200025a8:	1cbb      	adds	r3, r7, #2
200025aa:	881b      	ldrh	r3, [r3, #0]
200025ac:	0a1b      	lsrs	r3, r3, #8
200025ae:	b29b      	uxth	r3, r3
200025b0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
200025b2:	2201      	movs	r2, #1
200025b4:	68fb      	ldr	r3, [r7, #12]
200025b6:	409a      	lsls	r2, r3
200025b8:	0013      	movs	r3, r2
200025ba:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
200025bc:	687b      	ldr	r3, [r7, #4]
200025be:	881b      	ldrh	r3, [r3, #0]
200025c0:	b29b      	uxth	r3, r3
200025c2:	001a      	movs	r2, r3
200025c4:	68fb      	ldr	r3, [r7, #12]
200025c6:	4013      	ands	r3, r2
200025c8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
200025ca:	697b      	ldr	r3, [r7, #20]
200025cc:	2b00      	cmp	r3, #0
200025ce:	d007      	beq.n	200025e0 <USART_GetITStatus+0xb4>
200025d0:	68fb      	ldr	r3, [r7, #12]
200025d2:	2b00      	cmp	r3, #0
200025d4:	d004      	beq.n	200025e0 <USART_GetITStatus+0xb4>
  {
    bitstatus = SET;
200025d6:	2313      	movs	r3, #19
200025d8:	18fb      	adds	r3, r7, r3
200025da:	2201      	movs	r2, #1
200025dc:	701a      	strb	r2, [r3, #0]
200025de:	e003      	b.n	200025e8 <USART_GetITStatus+0xbc>
  }
  else
  {
    bitstatus = RESET;
200025e0:	2313      	movs	r3, #19
200025e2:	18fb      	adds	r3, r7, r3
200025e4:	2200      	movs	r2, #0
200025e6:	701a      	strb	r2, [r3, #0]
  }
  
  return bitstatus;  
200025e8:	2313      	movs	r3, #19
200025ea:	18fb      	adds	r3, r7, r3
200025ec:	781b      	ldrb	r3, [r3, #0]
}
200025ee:	0018      	movs	r0, r3
200025f0:	46bd      	mov	sp, r7
200025f2:	b006      	add	sp, #24
200025f4:	bd80      	pop	{r7, pc}

200025f6 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
200025f6:	b580      	push	{r7, lr}
200025f8:	b084      	sub	sp, #16
200025fa:	af00      	add	r7, sp, #0
200025fc:	6078      	str	r0, [r7, #4]
200025fe:	000a      	movs	r2, r1
20002600:	1cbb      	adds	r3, r7, #2
20002602:	801a      	strh	r2, [r3, #0]
  uint16_t bitpos = 0x00, itmask = 0x00;
20002604:	210e      	movs	r1, #14
20002606:	187b      	adds	r3, r7, r1
20002608:	2200      	movs	r2, #0
2000260a:	801a      	strh	r2, [r3, #0]
2000260c:	200c      	movs	r0, #12
2000260e:	183b      	adds	r3, r7, r0
20002610:	2200      	movs	r2, #0
20002612:	801a      	strh	r2, [r3, #0]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
20002614:	187b      	adds	r3, r7, r1
20002616:	1cba      	adds	r2, r7, #2
20002618:	8812      	ldrh	r2, [r2, #0]
2000261a:	0a12      	lsrs	r2, r2, #8
2000261c:	801a      	strh	r2, [r3, #0]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
2000261e:	187b      	adds	r3, r7, r1
20002620:	881b      	ldrh	r3, [r3, #0]
20002622:	2201      	movs	r2, #1
20002624:	409a      	lsls	r2, r3
20002626:	183b      	adds	r3, r7, r0
20002628:	801a      	strh	r2, [r3, #0]
  USARTx->SR = (uint16_t)~itmask;
2000262a:	183b      	adds	r3, r7, r0
2000262c:	881b      	ldrh	r3, [r3, #0]
2000262e:	43db      	mvns	r3, r3
20002630:	b29a      	uxth	r2, r3
20002632:	687b      	ldr	r3, [r7, #4]
20002634:	801a      	strh	r2, [r3, #0]
}
20002636:	46c0      	nop			; (mov r8, r8)
20002638:	46bd      	mov	sp, r7
2000263a:	b004      	add	sp, #16
2000263c:	bd80      	pop	{r7, pc}
2000263e:	46c0      	nop			; (mov r8, r8)

20002640 <__udivsi3>:
20002640:	2200      	movs	r2, #0
20002642:	0843      	lsrs	r3, r0, #1
20002644:	428b      	cmp	r3, r1
20002646:	d374      	bcc.n	20002732 <__udivsi3+0xf2>
20002648:	0903      	lsrs	r3, r0, #4
2000264a:	428b      	cmp	r3, r1
2000264c:	d35f      	bcc.n	2000270e <__udivsi3+0xce>
2000264e:	0a03      	lsrs	r3, r0, #8
20002650:	428b      	cmp	r3, r1
20002652:	d344      	bcc.n	200026de <__udivsi3+0x9e>
20002654:	0b03      	lsrs	r3, r0, #12
20002656:	428b      	cmp	r3, r1
20002658:	d328      	bcc.n	200026ac <__udivsi3+0x6c>
2000265a:	0c03      	lsrs	r3, r0, #16
2000265c:	428b      	cmp	r3, r1
2000265e:	d30d      	bcc.n	2000267c <__udivsi3+0x3c>
20002660:	22ff      	movs	r2, #255	; 0xff
20002662:	0209      	lsls	r1, r1, #8
20002664:	ba12      	rev	r2, r2
20002666:	0c03      	lsrs	r3, r0, #16
20002668:	428b      	cmp	r3, r1
2000266a:	d302      	bcc.n	20002672 <__udivsi3+0x32>
2000266c:	1212      	asrs	r2, r2, #8
2000266e:	0209      	lsls	r1, r1, #8
20002670:	d065      	beq.n	2000273e <__udivsi3+0xfe>
20002672:	0b03      	lsrs	r3, r0, #12
20002674:	428b      	cmp	r3, r1
20002676:	d319      	bcc.n	200026ac <__udivsi3+0x6c>
20002678:	e000      	b.n	2000267c <__udivsi3+0x3c>
2000267a:	0a09      	lsrs	r1, r1, #8
2000267c:	0bc3      	lsrs	r3, r0, #15
2000267e:	428b      	cmp	r3, r1
20002680:	d301      	bcc.n	20002686 <__udivsi3+0x46>
20002682:	03cb      	lsls	r3, r1, #15
20002684:	1ac0      	subs	r0, r0, r3
20002686:	4152      	adcs	r2, r2
20002688:	0b83      	lsrs	r3, r0, #14
2000268a:	428b      	cmp	r3, r1
2000268c:	d301      	bcc.n	20002692 <__udivsi3+0x52>
2000268e:	038b      	lsls	r3, r1, #14
20002690:	1ac0      	subs	r0, r0, r3
20002692:	4152      	adcs	r2, r2
20002694:	0b43      	lsrs	r3, r0, #13
20002696:	428b      	cmp	r3, r1
20002698:	d301      	bcc.n	2000269e <__udivsi3+0x5e>
2000269a:	034b      	lsls	r3, r1, #13
2000269c:	1ac0      	subs	r0, r0, r3
2000269e:	4152      	adcs	r2, r2
200026a0:	0b03      	lsrs	r3, r0, #12
200026a2:	428b      	cmp	r3, r1
200026a4:	d301      	bcc.n	200026aa <__udivsi3+0x6a>
200026a6:	030b      	lsls	r3, r1, #12
200026a8:	1ac0      	subs	r0, r0, r3
200026aa:	4152      	adcs	r2, r2
200026ac:	0ac3      	lsrs	r3, r0, #11
200026ae:	428b      	cmp	r3, r1
200026b0:	d301      	bcc.n	200026b6 <__udivsi3+0x76>
200026b2:	02cb      	lsls	r3, r1, #11
200026b4:	1ac0      	subs	r0, r0, r3
200026b6:	4152      	adcs	r2, r2
200026b8:	0a83      	lsrs	r3, r0, #10
200026ba:	428b      	cmp	r3, r1
200026bc:	d301      	bcc.n	200026c2 <__udivsi3+0x82>
200026be:	028b      	lsls	r3, r1, #10
200026c0:	1ac0      	subs	r0, r0, r3
200026c2:	4152      	adcs	r2, r2
200026c4:	0a43      	lsrs	r3, r0, #9
200026c6:	428b      	cmp	r3, r1
200026c8:	d301      	bcc.n	200026ce <__udivsi3+0x8e>
200026ca:	024b      	lsls	r3, r1, #9
200026cc:	1ac0      	subs	r0, r0, r3
200026ce:	4152      	adcs	r2, r2
200026d0:	0a03      	lsrs	r3, r0, #8
200026d2:	428b      	cmp	r3, r1
200026d4:	d301      	bcc.n	200026da <__udivsi3+0x9a>
200026d6:	020b      	lsls	r3, r1, #8
200026d8:	1ac0      	subs	r0, r0, r3
200026da:	4152      	adcs	r2, r2
200026dc:	d2cd      	bcs.n	2000267a <__udivsi3+0x3a>
200026de:	09c3      	lsrs	r3, r0, #7
200026e0:	428b      	cmp	r3, r1
200026e2:	d301      	bcc.n	200026e8 <__udivsi3+0xa8>
200026e4:	01cb      	lsls	r3, r1, #7
200026e6:	1ac0      	subs	r0, r0, r3
200026e8:	4152      	adcs	r2, r2
200026ea:	0983      	lsrs	r3, r0, #6
200026ec:	428b      	cmp	r3, r1
200026ee:	d301      	bcc.n	200026f4 <__udivsi3+0xb4>
200026f0:	018b      	lsls	r3, r1, #6
200026f2:	1ac0      	subs	r0, r0, r3
200026f4:	4152      	adcs	r2, r2
200026f6:	0943      	lsrs	r3, r0, #5
200026f8:	428b      	cmp	r3, r1
200026fa:	d301      	bcc.n	20002700 <__udivsi3+0xc0>
200026fc:	014b      	lsls	r3, r1, #5
200026fe:	1ac0      	subs	r0, r0, r3
20002700:	4152      	adcs	r2, r2
20002702:	0903      	lsrs	r3, r0, #4
20002704:	428b      	cmp	r3, r1
20002706:	d301      	bcc.n	2000270c <__udivsi3+0xcc>
20002708:	010b      	lsls	r3, r1, #4
2000270a:	1ac0      	subs	r0, r0, r3
2000270c:	4152      	adcs	r2, r2
2000270e:	08c3      	lsrs	r3, r0, #3
20002710:	428b      	cmp	r3, r1
20002712:	d301      	bcc.n	20002718 <__udivsi3+0xd8>
20002714:	00cb      	lsls	r3, r1, #3
20002716:	1ac0      	subs	r0, r0, r3
20002718:	4152      	adcs	r2, r2
2000271a:	0883      	lsrs	r3, r0, #2
2000271c:	428b      	cmp	r3, r1
2000271e:	d301      	bcc.n	20002724 <__udivsi3+0xe4>
20002720:	008b      	lsls	r3, r1, #2
20002722:	1ac0      	subs	r0, r0, r3
20002724:	4152      	adcs	r2, r2
20002726:	0843      	lsrs	r3, r0, #1
20002728:	428b      	cmp	r3, r1
2000272a:	d301      	bcc.n	20002730 <__udivsi3+0xf0>
2000272c:	004b      	lsls	r3, r1, #1
2000272e:	1ac0      	subs	r0, r0, r3
20002730:	4152      	adcs	r2, r2
20002732:	1a41      	subs	r1, r0, r1
20002734:	d200      	bcs.n	20002738 <__udivsi3+0xf8>
20002736:	4601      	mov	r1, r0
20002738:	4152      	adcs	r2, r2
2000273a:	4610      	mov	r0, r2
2000273c:	4770      	bx	lr
2000273e:	e7ff      	b.n	20002740 <__udivsi3+0x100>
20002740:	b501      	push	{r0, lr}
20002742:	2000      	movs	r0, #0
20002744:	f000 f806 	bl	20002754 <__aeabi_idiv0>
20002748:	bd02      	pop	{r1, pc}
2000274a:	46c0      	nop			; (mov r8, r8)

2000274c <__aeabi_uidivmod>:
2000274c:	2900      	cmp	r1, #0
2000274e:	d0f7      	beq.n	20002740 <__udivsi3+0x100>
20002750:	e776      	b.n	20002640 <__udivsi3>
20002752:	4770      	bx	lr

20002754 <__aeabi_idiv0>:
20002754:	4770      	bx	lr
20002756:	46c0      	nop			; (mov r8, r8)

20002758 <msTicks>:
20002758:	00000000 	andeq	r0, r0, r0

2000275c <APBAHBPrescTable>:
2000275c:	00000000 	andeq	r0, r0, r0
20002760:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20002764:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20002768:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

2000276c <GPIO_Pins>:
2000276c:	00020001 	andeq	r0, r2, r1
20002770:	00080004 	andeq	r0, r8, r4
20002774:	00200010 	eoreq	r0, r0, r0, lsl r0
20002778:	00800040 	addeq	r0, r0, r0, asr #32
2000277c:	02000100 	andeq	r0, r0, #0, 2
20002780:	08000400 	stmdaeq	r0, {sl}
20002784:	20001000 	andcs	r1, r0, r0
20002788:	80004000 	andhi	r4, r0, r0

2000278c <GPIO_Ports>:
2000278c:	40021000 	andmi	r1, r2, r0
20002790:	40020000 	andmi	r0, r2, r0
20002794:	40020800 	andmi	r0, r2, r0, lsl #16
20002798:	40020c00 	andmi	r0, r2, r0, lsl #24

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001893 	muleq	r0, r3, r8
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000005c9 	andeq	r0, r0, r9, asr #11
      10:	000da80c 	andeq	sl, sp, ip, lsl #16
      14:	00052900 	andeq	r2, r5, r0, lsl #18
	...
      24:	0fc50200 	svceq	0x00c50200
      28:	01050000 	mrseq	r0, (UNDEF: 5)
      2c:	00000253 	andeq	r0, r0, r3, asr r2
      30:	0253c805 	subseq	ip, r3, #327680	; 0x50000
      34:	af030000 	svcge	0x00030000
      38:	72000007 	andvc	r0, r0, #7
      3c:	00082a03 	andeq	r2, r8, r3, lsl #20
      40:	f5037400 			; <UNDEFINED> instruction: 0xf5037400
      44:	75000008 	strvc	r0, [r0, #-8]
      48:	00047203 	andeq	r7, r4, r3, lsl #4
      4c:	d2037600 	andle	r7, r3, #0, 12
      50:	7b000009 	blvc	7c <startup-0x1fffff84>
      54:	000ea103 	andeq	sl, lr, r3, lsl #2
      58:	0b037c00 	bleq	df060 <startup-0x1ff20fa0>
      5c:	7e000011 	mcrvc	0, 0, r0, cr0, cr1, {0}
      60:	00031e03 	andeq	r1, r3, r3, lsl #28
      64:	c3047f00 	movwgt	r7, #20224	; 0x4f00
      68:	00000007 	andeq	r0, r0, r7
      6c:	0006ab04 	andeq	sl, r6, r4, lsl #22
      70:	50040100 	andpl	r0, r4, r0, lsl #2
      74:	02000008 	andeq	r0, r0, #8
      78:	00000e04 	andeq	r0, r0, r4, lsl #28
      7c:	bb040300 	bllt	100c84 <startup-0x1feff37c>
      80:	04000000 	streq	r0, [r0], #-0
      84:	000f3804 	andeq	r3, pc, r4, lsl #16
      88:	22040500 	andcs	r0, r4, #0, 10
      8c:	0600000e 	streq	r0, [r0], -lr
      90:	00073804 	andeq	r3, r7, r4, lsl #16
      94:	1c040700 	stcne	7, cr0, [r4], {-0}
      98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      9c:	00110004 	andseq	r0, r1, r4
      a0:	be040900 	vmlalt.f16	s0, s8, s0	; <UNPREDICTABLE>
      a4:	0a00000a 	beq	d4 <startup-0x1fffff2c>
      a8:	000c6604 	andeq	r6, ip, r4, lsl #12
      ac:	8f040b00 	svchi	0x00040b00
      b0:	0c00000b 	stceq	0, cr0, [r0], {11}
      b4:	00038f04 	andeq	r8, r3, r4, lsl #30
      b8:	57040d00 	strpl	r0, [r4, -r0, lsl #26]
      bc:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
      c0:	000e5404 	andeq	r5, lr, r4, lsl #8
      c4:	50040f00 	andpl	r0, r4, r0, lsl #30
      c8:	10000007 	andne	r0, r0, r7
      cc:	00002704 	andeq	r2, r0, r4, lsl #14
      d0:	5e041100 	adfpls	f1, f4, f0
      d4:	1200000d 	andne	r0, r0, #13
      d8:	00074304 	andeq	r4, r7, r4, lsl #6
      dc:	1b041300 	blne	104ce4 <startup-0x1fefb31c>
      e0:	14000005 	strne	r0, [r0], #-5
      e4:	00105004 	andseq	r5, r0, r4
      e8:	60041500 	andvs	r1, r4, r0, lsl #10
      ec:	16000008 	strne	r0, [r0], -r8
      f0:	00107a04 	andseq	r7, r0, r4, lsl #20
      f4:	1c041700 	stcne	7, cr1, [r4], {-0}
      f8:	18000009 	stmdane	r0, {r0, r3}
      fc:	000fb704 	andeq	fp, pc, r4, lsl #14
     100:	86041900 	strhi	r1, [r4], -r0, lsl #18
     104:	1a000002 	bne	114 <startup-0x1ffffeec>
     108:	00071d04 	andeq	r1, r7, r4, lsl #26
     10c:	3c041b00 			; <UNDEFINED> instruction: 0x3c041b00
     110:	1c000001 	stcne	0, cr0, [r0], {1}
     114:	000d1204 	andeq	r1, sp, r4, lsl #4
     118:	bf041d00 	svclt	0x00041d00
     11c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
     120:	0006c104 	andeq	ip, r6, r4, lsl #2
     124:	2b041f00 	blcs	107d2c <startup-0x1fef82d4>
     128:	20000004 	andcs	r0, r0, r4
     12c:	000af004 	andeq	pc, sl, r4
     130:	c8042100 	stmdagt	r4, {r8, sp}
     134:	22000008 	andcs	r0, r0, #8
     138:	0009c004 	andeq	ip, r9, r4
     13c:	be042300 	cdplt	3, 0, cr2, cr4, cr0, {0}
     140:	24000001 	strcs	r0, [r0], #-1
     144:	000d1c04 	andeq	r1, sp, r4, lsl #24
     148:	69042500 	stmdbvs	r4, {r8, sl, sp}
     14c:	2600000f 	strcs	r0, [r0], -pc
     150:	00033a04 	andeq	r3, r3, r4, lsl #20
     154:	e0042700 	and	r2, r4, r0, lsl #14
     158:	2800000c 	stmdacs	r0, {r2, r3}
     15c:	000c9804 	andeq	r9, ip, r4, lsl #16
     160:	94042900 	strls	r2, [r4], #-2304	; 0xfffff700
     164:	2a00000a 	bcs	194 <startup-0x1ffffe6c>
     168:	0001c804 	andeq	ip, r1, r4, lsl #16
     16c:	39042b00 	stmdbcc	r4, {r8, r9, fp, sp}
     170:	2c000000 	stccs	0, cr0, [r0], {-0}
     174:	00077904 	andeq	r7, r7, r4, lsl #18
     178:	cd042d00 	stcgt	13, cr2, [r4, #-0]
     17c:	2e000010 	mcrcs	0, 0, r0, cr0, cr0, {0}
     180:	00112a04 	andseq	r2, r1, r4, lsl #20
     184:	13042f00 	movwne	r2, #20224	; 0x4f00
     188:	3000000e 	andcc	r0, r0, lr
     18c:	0010da04 	andseq	sp, r0, r4, lsl #20
     190:	68043100 	stmdavs	r4, {r8, ip, sp}
     194:	32000004 	andcc	r0, r0, #4
     198:	0000b104 	andeq	fp, r0, r4, lsl #2
     19c:	5f043300 	svcpl	0x00043300
     1a0:	3400000a 	strcc	r0, [r0], #-10
     1a4:	00091104 	andeq	r1, r9, r4, lsl #2
     1a8:	ce043500 	cfsh32gt	mvfx3, mvfx4, #0
     1ac:	3600000a 	strcc	r0, [r0], -sl
     1b0:	00098204 	andeq	r8, r9, r4, lsl #4
     1b4:	8b043700 	blhi	10ddbc <startup-0x1fef2244>
     1b8:	38000008 	stmdacc	r0, {r3}
     1bc:	00007a04 	andeq	r7, r0, r4, lsl #20
     1c0:	a3043900 	movwge	r3, #18688	; 0x4900
     1c4:	3a000011 	bcc	210 <startup-0x1ffffdf0>
     1c8:	000bae04 	andeq	sl, fp, r4, lsl #28
     1cc:	e8043b00 	stmda	r4, {r8, r9, fp, ip, sp}
     1d0:	3c000003 	stccc	0, cr0, [r0], {3}
     1d4:	000ef304 	andeq	pc, lr, r4, lsl #6
     1d8:	9a043d00 	bls	10f5e0 <startup-0x1fef0a20>
     1dc:	3e000009 	cdpcc	0, 0, cr0, cr0, cr9, {0}
     1e0:	000bc904 	andeq	ip, fp, r4, lsl #18
     1e4:	90043f00 	andls	r3, r4, r0, lsl #30
     1e8:	40000001 	andmi	r0, r0, r1
     1ec:	000d5004 	andeq	r5, sp, r4
     1f0:	38044100 	stmdacc	r4, {r8, lr}
     1f4:	42000004 	andmi	r0, r0, #4
     1f8:	0007a304 	andeq	sl, r7, r4, lsl #6
     1fc:	50044300 	andpl	r4, r4, r0, lsl #6
     200:	44000002 	strmi	r0, [r0], #-2
     204:	000e7004 	andeq	r7, lr, r4
     208:	91044500 	tstls	r4, r0, lsl #10
     20c:	46000007 	strmi	r0, [r0], -r7
     210:	00019e04 	andeq	r9, r1, r4, lsl #28
     214:	d3044700 	movwle	r4, #18176	; 0x4700
     218:	4800000e 	stmdami	r0, {r1, r2, r3}
     21c:	000cc904 	andeq	ip, ip, r4, lsl #18
     220:	0e044900 	vmlaeq.f16	s8, s8, s0	; <UNPREDICTABLE>
     224:	4a000010 	bmi	26c <startup-0x1ffffd94>
     228:	00111704 	andseq	r1, r1, r4, lsl #14
     22c:	cd044b00 	vstrgt	d4, [r4, #-0]
     230:	4c000007 	stcmi	0, cr0, [r0], {7}
     234:	0009a804 	andeq	sl, r9, r4, lsl #16
     238:	c6044d00 	strgt	r4, [r4], -r0, lsl #26
     23c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     240:	000cd604 	andeq	sp, ip, r4, lsl #12
     244:	2a044f00 	bcs	113e4c <startup-0x1feec1b4>
     248:	50000007 	andpl	r0, r0, r7
     24c:	000a3804 	andeq	r3, sl, r4, lsl #16
     250:	05005100 	streq	r5, [r0, #-256]	; 0xffffff00
     254:	03dc0601 	bicseq	r0, ip, #1048576	; 0x100000
     258:	74060000 	strvc	r0, [r6], #-0
     25c:	05000008 	streq	r0, [r0, #-8]
     260:	0025032f 	eoreq	r0, r5, pc, lsr #6
     264:	b4070000 	strlt	r0, [r7], #-0
     268:	06000001 	streq	r0, [r0], -r1
     26c:	0002712b 	andeq	r7, r2, fp, lsr #2
     270:	08010500 	stmdaeq	r1, {r8, sl}
     274:	000003da 	ldrdeq	r0, [r0], -sl
     278:	25050205 	strcs	r0, [r5, #-517]	; 0xfffffdfb
     27c:	0700000f 	streq	r0, [r0, -pc]
     280:	000004e9 	andeq	r0, r0, r9, ror #9
     284:	028a3906 	addeq	r3, sl, #98304	; 0x18000
     288:	02050000 	andeq	r0, r5, #0
     28c:	0010a907 	andseq	sl, r0, r7, lsl #18
     290:	113c0700 	teqne	ip, r0, lsl #14
     294:	4d060000 	stcmi	0, cr0, [r6, #-0]
     298:	0000029c 	muleq	r0, ip, r2
     29c:	91050405 	tstls	r5, r5, lsl #8
     2a0:	07000009 	streq	r0, [r0, -r9]
     2a4:	0000093a 	andeq	r0, r0, sl, lsr r9
     2a8:	02ae4f06 	adceq	r4, lr, #6, 30
     2ac:	04050000 	streq	r0, [r5], #-0
     2b0:	000cf407 	andeq	pc, ip, r7, lsl #8
     2b4:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
     2b8:	0000098c 	andeq	r0, r0, ip, lsl #19
     2bc:	ef070805 	svc	0x00070805
     2c0:	0800000c 	stmdaeq	r0, {r2, r3}
     2c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     2c8:	c3090074 	movwgt	r0, #36980	; 0x9074
     2cc:	05000002 	streq	r0, [r0, #-2]
     2d0:	0cf90704 	ldcleq	7, cr0, [r9], #16
     2d4:	b6070000 	strlt	r0, [r7], -r0
     2d8:	07000001 	streq	r0, [r0, -r1]
     2dc:	00026618 	andeq	r6, r2, r8, lsl r6
     2e0:	02d60900 	sbcseq	r0, r6, #0, 18
     2e4:	d60a0000 	strle	r0, [sl], -r0
     2e8:	09000002 	stmdbeq	r0, {r1}
     2ec:	000002e6 	andeq	r0, r0, r6, ror #5
     2f0:	0004eb07 	andeq	lr, r4, r7, lsl #22
     2f4:	7f240700 	svcvc	0x00240700
     2f8:	09000002 	stmdbeq	r0, {r1}
     2fc:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     300:	00113e07 	andseq	r3, r1, r7, lsl #28
     304:	912c0700 			; <UNDEFINED> instruction: 0x912c0700
     308:	09000002 	stmdbeq	r0, {r1}
     30c:	00000300 	andeq	r0, r0, r0, lsl #6
     310:	00093c07 	andeq	r3, r9, r7, lsl #24
     314:	a3300700 	teqge	r0, #0, 14
     318:	09000002 	stmdbeq	r0, {r1}
     31c:	00000310 	andeq	r0, r0, r0, lsl r3
     320:	00031b0a 	andeq	r1, r3, sl, lsl #22
     324:	0e040b00 	vmlaeq.f64	d0, d4, d0
     328:	e101a001 	tst	r1, r1
     32c:	0c000003 	stceq	0, cr0, [r0], {3}
     330:	0000115a 	andeq	r1, r0, sl, asr r1
     334:	f101a201 			; <UNDEFINED> instruction: 0xf101a201
     338:	00000003 	andeq	r0, r0, r3
     33c:	0003c60c 	andeq	ip, r3, ip, lsl #12
     340:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
     344:	000003f6 	strdeq	r0, [r0], -r6
     348:	0d790c20 	ldcleq	12, cr0, [r9, #-128]!	; 0xffffff80
     34c:	a4010000 	strge	r0, [r1], #-0
     350:	0003f101 	andeq	pc, r3, r1, lsl #2
     354:	050c8000 	streq	r8, [ip, #-0]
     358:	01000000 	mrseq	r0, (UNDEF: 0)
     35c:	03f601a5 	mvnseq	r0, #1073741865	; 0x40000029
     360:	0da00000 	stceq	0, cr0, [r0]
     364:	000010ea 	andeq	r1, r0, sl, ror #1
     368:	f101a601 			; <UNDEFINED> instruction: 0xf101a601
     36c:	00000003 	andeq	r0, r0, r3
     370:	04540d01 	ldrbeq	r0, [r4], #-3329	; 0xfffff2ff
     374:	a7010000 	strge	r0, [r1, -r0]
     378:	0003f601 	andeq	pc, r3, r1, lsl #12
     37c:	0d012000 	stceq	0, cr2, [r1, #-0]
     380:	0000016e 	andeq	r0, r0, lr, ror #2
     384:	f101a801 			; <UNDEFINED> instruction: 0xf101a801
     388:	80000003 	andhi	r0, r0, r3
     38c:	045e0d01 	ldrbeq	r0, [lr], #-3329	; 0xfffff2ff
     390:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
     394:	0003f601 	andeq	pc, r3, r1, lsl #12
     398:	0d01a000 	stceq	0, cr10, [r1, #-0]
     39c:	00000418 	andeq	r0, r0, r8, lsl r4
     3a0:	f101aa01 			; <UNDEFINED> instruction: 0xf101aa01
     3a4:	00000003 	andeq	r0, r0, r3
     3a8:	03fa0d02 	mvnseq	r0, #2, 26	; 0x80
     3ac:	ab010000 	blge	403b4 <startup-0x1ffbfc4c>
     3b0:	00040601 	andeq	r0, r4, r1, lsl #12
     3b4:	0e022000 	cdpeq	0, 0, cr2, cr2, cr0, {0}
     3b8:	01005049 	tsteq	r0, r9, asr #32
     3bc:	042601ac 	strteq	r0, [r6], #-428	; 0xfffffe54
     3c0:	03000000 	movweq	r0, #0
     3c4:	0004040d 	andeq	r0, r4, sp, lsl #8
     3c8:	01ad0100 			; <UNDEFINED> instruction: 0x01ad0100
     3cc:	0000042b 	andeq	r0, r0, fp, lsr #8
     3d0:	bc0d03f0 	stclt	3, cr0, [sp], {240}	; 0xf0
     3d4:	01000006 	tsteq	r0, r6
     3d8:	031b01ae 	tsteq	fp, #-2147483605	; 0x8000002b
     3dc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     3e0:	031b0f00 	tsteq	fp, #0, 30
     3e4:	03f10000 	mvnseq	r0, #0
     3e8:	cf100000 	svcgt	0x00100000
     3ec:	07000002 	streq	r0, [r0, -r2]
     3f0:	03e10900 	mvneq	r0, #0, 18
     3f4:	100f0000 	andne	r0, pc, r0
     3f8:	06000003 	streq	r0, [r0], -r3
     3fc:	10000004 	andne	r0, r0, r4
     400:	000002cf 	andeq	r0, r0, pc, asr #5
     404:	100f0017 	andne	r0, pc, r7, lsl r0	; <UNPREDICTABLE>
     408:	16000003 	strne	r0, [r0], -r3
     40c:	10000004 	andne	r0, r0, r4
     410:	000002cf 	andeq	r0, r0, pc, asr #5
     414:	e10f0037 	tst	pc, r7, lsr r0	; <UNPREDICTABLE>
     418:	26000002 	strcs	r0, [r0], -r2
     41c:	10000004 	andne	r0, r0, r4
     420:	000002cf 	andeq	r0, r0, pc, asr #5
     424:	160900ef 	strne	r0, [r9], -pc, ror #1
     428:	0f000004 	svceq	0x00000004
     42c:	00000310 	andeq	r0, r0, r0, lsl r3
     430:	0000043c 	andeq	r0, r0, ip, lsr r4
     434:	0002cf11 	andeq	ip, r2, r1, lsl pc
     438:	00028300 	andeq	r8, r2, r0, lsl #6
     43c:	000caf06 	andeq	sl, ip, r6, lsl #30
     440:	01af0100 			; <UNDEFINED> instruction: 0x01af0100
     444:	00000325 	andeq	r0, r0, r5, lsr #6
     448:	c0018c12 	andgt	r8, r1, r2, lsl ip
     44c:	00056301 	andeq	r6, r5, r1, lsl #6
     450:	02250c00 	eoreq	r0, r5, #0, 24
     454:	c2010000 	andgt	r0, r1, #0
     458:	00032001 	andeq	r2, r3, r1
     45c:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
     460:	01000003 	tsteq	r0, r3
     464:	031b01c3 	tsteq	fp, #-1073741776	; 0xc0000030
     468:	0c040000 	stceq	0, cr0, [r4], {-0}
     46c:	000000ac 	andeq	r0, r0, ip, lsr #1
     470:	1b01c401 	blne	7147c <startup-0x1ff8eb84>
     474:	08000003 	stmdaeq	r0, {r0, r1}
     478:	0001f50c 	andeq	pc, r1, ip, lsl #10
     47c:	01c50100 	biceq	r0, r5, r0, lsl #2
     480:	0000031b 	andeq	r0, r0, fp, lsl r3
     484:	4353130c 	cmpmi	r3, #12, 6	; 0x30000000
     488:	c6010052 			; <UNDEFINED> instruction: 0xc6010052
     48c:	00031b01 	andeq	r1, r3, r1, lsl #22
     490:	43131000 	tstmi	r3, #0
     494:	01005243 	tsteq	r0, r3, asr #4
     498:	031b01c7 	tsteq	fp, #-1073741775	; 0xc0000031
     49c:	13140000 	tstne	r4, #0
     4a0:	00504853 	subseq	r4, r0, r3, asr r8
     4a4:	7301c801 	movwvc	ip, #6145	; 0x1801
     4a8:	18000005 	stmdane	r0, {r0, r2}
     4ac:	0006a50c 	andeq	sl, r6, ip, lsl #10
     4b0:	01c90100 	biceq	r0, r9, r0, lsl #2
     4b4:	0000031b 	andeq	r0, r0, fp, lsl r3
     4b8:	0e360c24 	cdpeq	12, 3, cr0, cr6, cr4, {1}
     4bc:	ca010000 	bgt	404c4 <startup-0x1ffbfb3c>
     4c0:	00031b01 	andeq	r1, r3, r1, lsl #22
     4c4:	6c0c2800 	stcvs	8, cr2, [ip], {-0}
     4c8:	01000005 	tsteq	r0, r5
     4cc:	031b01cb 	tsteq	fp, #-1073741774	; 0xc0000032
     4d0:	0c2c0000 	stceq	0, cr0, [ip], #-0
     4d4:	0000049c 	muleq	r0, ip, r4
     4d8:	1b01cc01 	blne	734e4 <startup-0x1ff8cb1c>
     4dc:	30000003 	andcc	r0, r0, r3
     4e0:	000f1f0c 	andeq	r1, pc, ip, lsl #30
     4e4:	01cd0100 	biceq	r0, sp, r0, lsl #2
     4e8:	0000031b 	andeq	r0, r0, fp, lsl r3
     4ec:	0b800c34 	bleq	fe0035c4 <GPIO_Ports+0xde000e38>
     4f0:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
     4f4:	00031b01 	andeq	r1, r3, r1, lsl #22
     4f8:	f50c3800 			; <UNDEFINED> instruction: 0xf50c3800
     4fc:	0100000d 	tsteq	r0, sp
     500:	031b01cf 	tsteq	fp, #-1073741773	; 0xc0000033
     504:	133c0000 	teqne	ip, #0
     508:	00524650 	subseq	r4, r2, r0, asr r6
     50c:	8d01d001 	stchi	0, cr13, [r1, #-4]
     510:	40000005 	andmi	r0, r0, r5
     514:	52464413 	subpl	r4, r6, #318767104	; 0x13000000
     518:	01d10100 	bicseq	r0, r1, r0, lsl #2
     51c:	00000320 	andeq	r0, r0, r0, lsr #6
     520:	44411348 	strbmi	r1, [r1], #-840	; 0xfffffcb8
     524:	d2010052 	andle	r0, r1, #82	; 0x52
     528:	00032001 	andeq	r2, r3, r1
     52c:	0e0c4c00 	cdpeq	12, 0, cr4, cr12, cr0, {0}
     530:	0100000f 	tsteq	r0, pc
     534:	05a701d3 	streq	r0, [r7, #467]!	; 0x1d3
     538:	0c500000 	mraeq	r0, r0, acc0
     53c:	00000f48 	andeq	r0, r0, r8, asr #30
     540:	c101d401 	tstgt	r1, r1, lsl #8
     544:	60000005 	andvs	r0, r0, r5
     548:	0003c60c 	andeq	ip, r3, ip, lsl #12
     54c:	01d50100 	bicseq	r0, r5, r0, lsl #2
     550:	000005c6 	andeq	r0, r0, r6, asr #11
     554:	10e40c74 	rscne	r0, r4, r4, ror ip
     558:	d6010000 	strle	r0, [r1], -r0
     55c:	00031b01 	andeq	r1, r3, r1, lsl #22
     560:	0f008800 	svceq	0x00008800
     564:	000002e1 	andeq	r0, r0, r1, ror #5
     568:	00000573 	andeq	r0, r0, r3, ror r5
     56c:	0002cf10 	andeq	ip, r2, r0, lsl pc
     570:	09000b00 	stmdbeq	r0, {r8, r9, fp}
     574:	00000563 	andeq	r0, r0, r3, ror #10
     578:	0003200f 	andeq	r2, r3, pc
     57c:	00058800 	andeq	r8, r5, r0, lsl #16
     580:	02cf1000 	sbceq	r1, pc, #0
     584:	00010000 	andeq	r0, r1, r0
     588:	0005780a 	andeq	r7, r5, sl, lsl #16
     58c:	05880900 	streq	r0, [r8, #2304]	; 0x900
     590:	200f0000 	andcs	r0, pc, r0
     594:	a2000003 	andge	r0, r0, #3
     598:	10000005 	andne	r0, r0, r5
     59c:	000002cf 	andeq	r0, r0, pc, asr #5
     5a0:	920a0003 	andls	r0, sl, #3
     5a4:	09000005 	stmdbeq	r0, {r0, r2}
     5a8:	000005a2 	andeq	r0, r0, r2, lsr #11
     5ac:	0003200f 	andeq	r2, r3, pc
     5b0:	0005bc00 	andeq	fp, r5, r0, lsl #24
     5b4:	02cf1000 	sbceq	r1, pc, #0
     5b8:	00040000 	andeq	r0, r4, r0
     5bc:	0005ac0a 	andeq	sl, r5, sl, lsl #24
     5c0:	05bc0900 	ldreq	r0, [ip, #2304]!	; 0x900
     5c4:	100f0000 	andne	r0, pc, r0
     5c8:	d6000003 	strle	r0, [r0], -r3
     5cc:	10000005 	andne	r0, r0, r5
     5d0:	000002cf 	andeq	r0, r0, pc, asr #5
     5d4:	82060004 	andhi	r0, r6, #4
     5d8:	01000004 	tsteq	r0, r4
     5dc:	044801d7 	strbeq	r0, [r8], #-471	; 0xfffffe29
     5e0:	10120000 	andsne	r0, r2, r0
     5e4:	2002bf01 	andcs	fp, r2, r1, lsl #30
     5e8:	0c000006 	stceq	0, cr0, [r0], {6}
     5ec:	00000ac9 	andeq	r0, r0, r9, asr #21
     5f0:	1b02c101 	blne	b09fc <startup-0x1ff4f604>
     5f4:	00000003 	andeq	r0, r0, r3
     5f8:	000e8a0c 	andeq	r8, lr, ip, lsl #20
     5fc:	02c20100 	sbceq	r0, r2, #0, 2
     600:	0000031b 	andeq	r0, r0, fp, lsl r3
     604:	41561304 	cmpmi	r6, r4, lsl #6
     608:	c301004c 	movwgt	r0, #4172	; 0x104c
     60c:	00031b02 	andeq	r1, r3, r2, lsl #22
     610:	010c0800 	tsteq	ip, r0, lsl #16
     614:	0100000e 	tsteq	r0, lr
     618:	032002c4 			; <UNDEFINED> instruction: 0x032002c4
     61c:	000c0000 	andeq	r0, ip, r0
     620:	000c1406 	andeq	r1, ip, r6, lsl #8
     624:	02c50100 	sbceq	r0, r5, #0, 2
     628:	000005e2 	andeq	r0, r0, r2, ror #11
     62c:	0003100f 	andeq	r1, r3, pc
     630:	00063c00 	andeq	r3, r6, r0, lsl #24
     634:	02cf1000 	sbceq	r1, pc, #0
     638:	00010000 	andeq	r0, r1, r0
     63c:	000fca14 	andeq	ip, pc, r4, lsl sl	; <UNPREDICTABLE>
     640:	06fa0100 	ldrbteq	r0, [sl], r0, lsl #2
     644:	0000030b 	andeq	r0, r0, fp, lsl #6
     648:	00084015 	andeq	r4, r8, r5, lsl r0
     64c:	103b0800 	eorsne	r0, fp, r0, lsl #16
     650:	16000003 	strne	r0, [r0], -r3
     654:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
     658:	5d050000 	stcpl	0, cr0, [r5, #-0]
     65c:	00066e03 	andeq	r6, r6, r3, lsl #28
     660:	12230400 	eorne	r0, r3, #0, 8
     664:	17000000 	strne	r0, [r0, -r0]
     668:	00544553 	subseq	r4, r4, r3, asr r5
     66c:	f4060001 	vst4.8	{d0-d3}, [r6], r1
     670:	05000009 	streq	r0, [r0, #-9]
     674:	0653035d 			; <UNDEFINED> instruction: 0x0653035d
     678:	b5060000 	strlt	r0, [r6, #-0]
     67c:	0500000a 	streq	r0, [r0, #-10]
     680:	0653035d 			; <UNDEFINED> instruction: 0x0653035d
     684:	07160000 	ldreq	r0, [r6, -r0]
     688:	00027101 	andeq	r7, r2, r1, lsl #2
     68c:	035f0500 	cmpeq	pc, #0, 10
     690:	000006a1 	andeq	r0, r0, r1, lsr #13
     694:	0009ca04 	andeq	ip, r9, r4, lsl #20
     698:	7f040000 	svcvc	0x00040000
     69c:	0100000f 	tsteq	r0, pc
     6a0:	0cb90600 	ldceq	6, cr0, [r9]
     6a4:	5f050000 	svcpl	0x00050000
     6a8:	00068603 	andeq	r8, r6, r3, lsl #12
     6ac:	01071600 	tsteq	r7, r0, lsl #12
     6b0:	00000271 	andeq	r0, r0, r1, ror r2
     6b4:	c8036205 	stmdagt	r3, {r0, r2, r9, sp, lr}
     6b8:	04000006 	streq	r0, [r0], #-6
     6bc:	000008c2 	andeq	r0, r0, r2, asr #17
     6c0:	0d3e0400 	cfldrseq	mvf0, [lr, #-0]
     6c4:	00010000 	andeq	r0, r1, r0
     6c8:	000c5a06 	andeq	r5, ip, r6, lsl #20
     6cc:	03620500 	cmneq	r2, #0, 10
     6d0:	000006ad 	andeq	r0, r0, sp, lsr #13
     6d4:	c3052812 	movwgt	r2, #22546	; 0x5812
     6d8:	00076005 	andeq	r6, r7, r5
     6dc:	10390c00 	eorsne	r0, r9, r0, lsl #24
     6e0:	c5050000 	strgt	r0, [r5, #-0]
     6e4:	00031b05 	andeq	r1, r3, r5, lsl #22
     6e8:	fa0c0000 	blx	3006f0 <startup-0x1fcff910>
     6ec:	0500000d 	streq	r0, [r0, #-13]
     6f0:	031b05c6 	tsteq	fp, #830472192	; 0x31800000
     6f4:	0c040000 	stceq	0, cr0, [r4], {-0}
     6f8:	000008ed 	andeq	r0, r0, sp, ror #17
     6fc:	1b05c705 	blne	172318 <startup-0x1fe8dce8>
     700:	08000003 	stmdaeq	r0, {r0, r1}
     704:	0009b40c 	andeq	fp, r9, ip, lsl #8
     708:	05c80500 	strbeq	r0, [r8, #1280]	; 0x500
     70c:	0000031b 	andeq	r0, r0, fp, lsl r3
     710:	4449130c 	strbmi	r1, [r9], #-780	; 0xfffffcf4
     714:	c9050052 	stmdbgt	r5, {r1, r4, r6}
     718:	00031b05 	andeq	r1, r3, r5, lsl #22
     71c:	4f131000 	svcmi	0x00131000
     720:	05005244 	streq	r5, [r0, #-580]	; 0xfffffdbc
     724:	031b05ca 	tsteq	fp, #847249408	; 0x32800000
     728:	0c140000 	ldceq	0, cr0, [r4], {-0}
     72c:	00000a0a 	andeq	r0, r0, sl, lsl #20
     730:	fb05cb05 	blx	17334e <startup-0x1fe8ccb2>
     734:	18000002 	stmdane	r0, {r1}
     738:	0009e70c 	andeq	lr, r9, ip, lsl #14
     73c:	05cc0500 	strbeq	r0, [ip, #1280]	; 0x500
     740:	000002fb 	strdeq	r0, [r0], -fp
     744:	08ac0c1a 	stmiaeq	ip!, {r1, r3, r4, sl, fp}
     748:	cd050000 	stcgt	0, cr0, [r5, #-0]
     74c:	00031b05 	andeq	r1, r3, r5, lsl #22
     750:	41131c00 	tstmi	r3, r0, lsl #24
     754:	05005246 	streq	r5, [r0, #-582]	; 0xfffffdba
     758:	077005ce 	ldrbeq	r0, [r0, -lr, asr #11]!
     75c:	00200000 	eoreq	r0, r0, r0
     760:	00031b0f 	andeq	r1, r3, pc, lsl #22
     764:	00077000 	andeq	r7, r7, r0
     768:	02cf1000 	sbceq	r1, pc, #0
     76c:	00010000 	andeq	r0, r1, r0
     770:	00076009 	andeq	r6, r7, r9
     774:	0faa0600 	svceq	0x00aa0600
     778:	cf050000 	svcgt	0x00050000
     77c:	0006d405 	andeq	sp, r6, r5, lsl #8
     780:	05981200 	ldreq	r1, [r8, #512]	; 0x200
     784:	09440664 	stmdbeq	r4, {r2, r5, r6, r9, sl}^
     788:	43130000 	tstmi	r3, #0
     78c:	66050052 			; <UNDEFINED> instruction: 0x66050052
     790:	00031b06 	andeq	r1, r3, r6, lsl #22
     794:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
     798:	05000009 	streq	r0, [r0, #-9]
     79c:	031b0667 	tsteq	fp, #108003328	; 0x6700000
     7a0:	0c040000 	stceq	0, cr0, [r4], {-0}
     7a4:	0000108d 	andeq	r1, r0, sp, lsl #1
     7a8:	1b066805 	blne	19a7c4 <startup-0x1fe6583c>
     7ac:	08000003 	stmdaeq	r0, {r0, r1}
     7b0:	52494313 	subpl	r4, r9, #1275068416	; 0x4c000000
     7b4:	06690500 	strbteq	r0, [r9], -r0, lsl #10
     7b8:	0000031b 	andeq	r0, r0, fp, lsl r3
     7bc:	04a10c0c 	strteq	r0, [r1], #3084	; 0xc0c
     7c0:	6a050000 	bvs	1407c8 <startup-0x1febf838>
     7c4:	00031b06 	andeq	r1, r3, r6, lsl #22
     7c8:	ea0c1000 	b	3047d0 <startup-0x1fcfb830>
     7cc:	0500000e 	streq	r0, [r0, #-14]
     7d0:	031b066b 	tsteq	fp, #112197632	; 0x6b00000
     7d4:	0c140000 	ldceq	0, cr0, [r4], {-0}
     7d8:	00000c51 	andeq	r0, r0, r1, asr ip
     7dc:	1b066c05 	blne	19b7f8 <startup-0x1fe64808>
     7e0:	18000003 	stmdane	r0, {r0, r1}
     7e4:	0003c60c 	andeq	ip, r3, ip, lsl #12
     7e8:	066d0500 	strbteq	r0, [sp], -r0, lsl #10
     7ec:	00000310 	andeq	r0, r0, r0, lsl r3
     7f0:	0c8f0c1c 	stceq	12, cr0, [pc], {28}
     7f4:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
     7f8:	00031b06 	andeq	r1, r3, r6, lsl #22
     7fc:	de0c2000 	cdple	0, 0, cr2, cr12, cr0, {0}
     800:	05000009 	streq	r0, [r0, #-9]
     804:	031b066f 	tsteq	fp, #116391936	; 0x6f00000
     808:	0c240000 	stceq	0, cr0, [r4], #-0
     80c:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     810:	2c067005 	stccs	0, cr7, [r6], {5}
     814:	28000006 	stmdacs	r0, {r1, r2}
     818:	000e820c 	andeq	r8, lr, ip, lsl #4
     81c:	06710500 	ldrbteq	r0, [r1], -r0, lsl #10
     820:	0000031b 	andeq	r0, r0, fp, lsl r3
     824:	04f40c30 	ldrbteq	r0, [r4], #3120	; 0xc30
     828:	72050000 	andvc	r0, r5, #0
     82c:	00031b06 	andeq	r1, r3, r6, lsl #22
     830:	8a0c3400 	bhi	30d838 <startup-0x1fcf27c8>
     834:	05000011 	streq	r0, [r0, #-17]	; 0xffffffef
     838:	031b0673 	tsteq	fp, #120586240	; 0x7300000
     83c:	0c380000 	ldceq	0, cr0, [r8], #-0
     840:	00000454 	andeq	r0, r0, r4, asr r4
     844:	10067405 	andne	r7, r6, r5, lsl #8
     848:	3c000003 	stccc	0, cr0, [r0], {3}
     84c:	000ca70c 	andeq	sl, ip, ip, lsl #14
     850:	06750500 	ldrbteq	r0, [r5], -r0, lsl #10
     854:	0000031b 	andeq	r0, r0, fp, lsl r3
     858:	02e90c40 	rsceq	r0, r9, #64, 24	; 0x4000
     85c:	76050000 	strvc	r0, [r5], -r0
     860:	00031b06 	andeq	r1, r3, r6, lsl #22
     864:	5e0c4400 	cfcpyspl	mvf4, mvf12
     868:	05000004 	streq	r0, [r0, #-4]
     86c:	062c0677 			; <UNDEFINED> instruction: 0x062c0677
     870:	0c480000 	mareq	acc0, r0, r8
     874:	00000305 	andeq	r0, r0, r5, lsl #6
     878:	1b067805 	blne	19e894 <startup-0x1fe6176c>
     87c:	50000003 	andpl	r0, r0, r3
     880:	0001dc0c 	andeq	sp, r1, ip, lsl #24
     884:	06790500 	ldrbteq	r0, [r9], -r0, lsl #10
     888:	0000031b 	andeq	r0, r0, fp, lsl r3
     88c:	0d7e0c54 	ldcleq	12, cr0, [lr, #-336]!	; 0xfffffeb0
     890:	7a050000 	bvc	140898 <startup-0x1febf768>
     894:	00031b06 	andeq	r1, r3, r6, lsl #22
     898:	fa0c5800 	blx	3168a0 <startup-0x1fce9760>
     89c:	05000003 	streq	r0, [r0, #-3]
     8a0:	0310067b 	tsteq	r0, #128974848	; 0x7b00000
     8a4:	0c5c0000 	mraeq	r0, ip, acc0
     8a8:	00000b85 	andeq	r0, r0, r5, lsl #23
     8ac:	1b067c05 	blne	19f8c8 <startup-0x1fe60738>
     8b0:	60000003 	andvs	r0, r0, r3
     8b4:	000a6a0c 	andeq	r6, sl, ip, lsl #20
     8b8:	067d0500 	ldrbteq	r0, [sp], -r0, lsl #10
     8bc:	0000031b 	andeq	r0, r0, fp, lsl r3
     8c0:	04040c64 	streq	r0, [r4], #-3172	; 0xfffff39c
     8c4:	7e050000 	cdpvc	0, 0, cr0, cr5, cr0, {0}
     8c8:	00062c06 	andeq	r2, r6, r6, lsl #24
     8cc:	a00c6800 	andge	r6, ip, r0, lsl #16
     8d0:	05000006 	streq	r0, [r0, #-6]
     8d4:	031b067f 	tsteq	fp, #133169152	; 0x7f00000
     8d8:	13700000 	cmnne	r0, #0
     8dc:	00525343 	subseq	r5, r2, r3, asr #6
     8e0:	1b068005 	blne	1a08fc <startup-0x1fe5f704>
     8e4:	74000003 	strvc	r0, [r0], #-3
     8e8:	00040e0c 	andeq	r0, r4, ip, lsl #28
     8ec:	06810500 	streq	r0, [r1], r0, lsl #10
     8f0:	0000062c 	andeq	r0, r0, ip, lsr #12
     8f4:	09ba0c78 	ldmibeq	sl!, {r3, r4, r5, r6, sl, fp}
     8f8:	82050000 	andhi	r0, r5, #0
     8fc:	00031b06 	andeq	r1, r3, r6, lsl #22
     900:	4c0c8000 	stcmi	0, cr8, [ip], {-0}
     904:	05000000 	streq	r0, [r0, #-0]
     908:	031b0683 	tsteq	fp, #137363456	; 0x8300000
     90c:	0c840000 	stceq	0, cr0, [r4], {0}
     910:	00001087 	andeq	r1, r0, r7, lsl #1
     914:	1b068405 	blne	1a1930 <startup-0x1fe5e6d0>
     918:	88000003 	stmdahi	r0, {r0, r1}
     91c:	0003460c 	andeq	r4, r3, ip, lsl #12
     920:	06850500 	streq	r0, [r5], r0, lsl #10
     924:	0000031b 	andeq	r0, r0, fp, lsl r3
     928:	0bc00c8c 	bleq	ff003b60 <GPIO_Ports+0xdf0013d4>
     92c:	86050000 	strhi	r0, [r5], -r0
     930:	00031b06 	andeq	r1, r3, r6, lsl #22
     934:	2d0c9000 	stccs	0, cr9, [ip, #-0]
     938:	0500000e 	streq	r0, [r0, #-14]
     93c:	031b0687 	tsteq	fp, #141557760	; 0x8700000
     940:	00940000 	addseq	r0, r4, r0
     944:	000f1306 	andeq	r1, pc, r6, lsl #6
     948:	06890500 	streq	r0, [r9], r0, lsl #10
     94c:	00000781 	andeq	r0, r0, r1, lsl #15
     950:	30091018 	andcc	r1, r9, r8, lsl r0
     954:	00000989 	andeq	r0, r0, r9, lsl #19
     958:	0010ef19 	andseq	lr, r0, r9, lsl pc
     95c:	10320900 	eorsne	r0, r2, r0, lsl #18
     960:	00000003 	andeq	r0, r0, r3
     964:	00008c19 	andeq	r8, r0, r9, lsl ip
     968:	10330900 	eorsne	r0, r3, r0, lsl #18
     96c:	04000003 	streq	r0, [r0], #-3
     970:	00058619 	andeq	r8, r5, r9, lsl r6
     974:	10340900 	eorsne	r0, r4, r0, lsl #18
     978:	08000003 	stmdaeq	r0, {r0, r1}
     97c:	0004fc19 	andeq	pc, r4, r9, lsl ip	; <UNPREDICTABLE>
     980:	10350900 	eorsne	r0, r5, r0, lsl #18
     984:	0c000003 	stceq	0, cr0, [r0], {3}
     988:	0efc0700 	cdpeq	7, 15, cr0, cr12, cr0, {0}
     98c:	36090000 	strcc	r0, [r9], -r0
     990:	00000950 	andeq	r0, r0, r0, asr r9
     994:	0002eb0f 	andeq	lr, r2, pc, lsl #22
     998:	0009a400 	andeq	sl, r9, r0, lsl #8
     99c:	02cf1000 	sbceq	r1, pc, #0
     9a0:	000f0000 	andeq	r0, pc, r0
     9a4:	0009940a 	andeq	r9, r9, sl, lsl #8
     9a8:	09a40900 	stmibeq	r4!, {r8, fp}
     9ac:	451a0000 	ldrmi	r0, [sl, #-0]
     9b0:	02000009 	andeq	r0, r0, #9
     9b4:	0009a999 	muleq	r9, r9, r9
     9b8:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
     9bc:	1b200027 	blne	800a60 <startup-0x1f7ff5a0>
     9c0:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
     9c4:	420a0000 	andmi	r0, sl, #0
     9c8:	000009e5 	andeq	r0, r0, r5, ror #19
     9cc:	00087e04 	andeq	r7, r8, r4, lsl #28
     9d0:	0f040000 	svceq	0x00040000
     9d4:	01000007 	tsteq	r0, r7
     9d8:	00026204 	andeq	r6, r2, r4, lsl #4
     9dc:	9e040200 	cdpls	2, 0, cr0, cr4, cr0, {0}
     9e0:	03000002 	movweq	r0, #2
     9e4:	0d880700 	stceq	7, cr0, [r8]
     9e8:	470a0000 	strmi	r0, [sl, -r0]
     9ec:	000009bf 			; <UNDEFINED> instruction: 0x000009bf
     9f0:	7101071b 	tstvc	r1, fp, lsl r7
     9f4:	0a000002 	beq	a04 <startup-0x1ffff5fc>
     9f8:	000a0a4f 	andeq	r0, sl, pc, asr #20
     9fc:	041d0400 	ldreq	r0, [sp], #-1024	; 0xfffffc00
     a00:	04000000 	streq	r0, [r0], #-0
     a04:	0000035f 	andeq	r0, r0, pc, asr r3
     a08:	0a070001 	beq	1c0a14 <startup-0x1fe3f5ec>
     a0c:	0a000001 	beq	a18 <startup-0x1ffff5e8>
     a10:	0009f052 	andeq	pc, r9, r2, asr r0	; <UNPREDICTABLE>
     a14:	01071b00 	tsteq	r7, r0, lsl #22
     a18:	00000271 	andeq	r0, r0, r1, ror r2
     a1c:	0a3b5a0a 	beq	ed724c <startup-0x1f128db4>
     a20:	0c040000 	stceq	0, cr0, [r4], {-0}
     a24:	00000005 	andeq	r0, r0, r5
     a28:	00095604 	andeq	r5, r9, r4, lsl #12
     a2c:	b5040100 	strlt	r0, [r4, #-256]	; 0xffffff00
     a30:	02000011 	andeq	r0, r0, #17
     a34:	000a1004 	andeq	r1, sl, r4
     a38:	07000300 	streq	r0, [r0, -r0, lsl #6]
     a3c:	00000e8f 	andeq	r0, r0, pc, lsl #29
     a40:	0a155f0a 	beq	558670 <startup-0x1faa7990>
     a44:	071b0000 	ldreq	r0, [fp, -r0]
     a48:	00027101 	andeq	r7, r2, r1, lsl #2
     a4c:	666e0a00 	strbtvs	r0, [lr], -r0, lsl #20
     a50:	0400000a 	streq	r0, [r0], #-10
     a54:	0000009b 	muleq	r0, fp, r0
     a58:	106d0400 	rsbne	r0, sp, r0, lsl #8
     a5c:	04010000 	streq	r0, [r1], #-0
     a60:	000001e6 	andeq	r0, r0, r6, ror #3
     a64:	8b070002 	blhi	1c0a74 <startup-0x1fe3f58c>
     a68:	0a000004 	beq	a80 <startup-0x1ffff580>
     a6c:	000a4672 	andeq	r4, sl, r2, ror r6
     a70:	0a081800 	beq	206a78 <startup-0x1fdf9588>
     a74:	000ab684 	andeq	fp, sl, r4, lsl #13
     a78:	0eb31900 	vmoveq.f16	s2, #48	; 0x41800000  16.0	; <UNPREDICTABLE>
     a7c:	860a0000 	strhi	r0, [sl], -r0
     a80:	00000310 	andeq	r0, r0, r0, lsl r3
     a84:	0d461900 	vstreq.16	s3, [r6, #-0]	; <UNPREDICTABLE>
     a88:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
     a8c:	000009e5 	andeq	r0, r0, r5, ror #19
     a90:	0ae51904 	beq	ff946ea8 <GPIO_Ports+0xdf94471c>
     a94:	8c0a0000 	stchi	0, cr0, [sl], {-0}
     a98:	00000a3b 	andeq	r0, r0, fp, lsr sl
     a9c:	092f1905 	stmdbeq	pc!, {r0, r2, r8, fp, ip}	; <UNPREDICTABLE>
     aa0:	8f0a0000 	svchi	0x000a0000
     aa4:	00000a0a 	andeq	r0, r0, sl, lsl #20
     aa8:	0ee01906 	vfmaeq.f16	s3, s0, s12	; <UNPREDICTABLE>
     aac:	920a0000 	andls	r0, sl, #0
     ab0:	00000a66 	andeq	r0, r0, r6, ror #20
     ab4:	6d070007 	stcvs	0, cr0, [r7, #-28]	; 0xffffffe4
     ab8:	0a000003 	beq	acc <startup-0x1ffff534>
     abc:	000a7194 	muleq	sl, r4, r1
     ac0:	086e1c00 	stmdaeq	lr!, {sl, fp, ip}^
     ac4:	0b200000 	bleq	800acc <startup-0x1f7ff534>
     ac8:	000b3901 	andeq	r3, fp, r1, lsl #18
     acc:	64691d00 	strbtvs	r1, [r9], #-3328	; 0xfffff300
     ad0:	39030b00 	stmdbcc	r3, {r8, r9, fp}
     ad4:	0000000b 	andeq	r0, r0, fp
     ad8:	0002bb19 	andeq	fp, r2, r9, lsl fp
     adc:	c3040b00 	movwgt	r0, #19200	; 0x4b00
     ae0:	04000002 	streq	r0, [r0], #-2
     ae4:	0001aa19 	andeq	sl, r1, r9, lsl sl
     ae8:	39050b00 	stmdbcc	r5, {r8, r9, fp}
     aec:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     af0:	000c2119 	andeq	r2, ip, r9, lsl r1
     af4:	39060b00 	stmdbcc	r6, {r8, r9, fp}
     af8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     afc:	000f2f19 	andeq	r2, pc, r9, lsl pc	; <UNPREDICTABLE>
     b00:	c3070b00 	movwgt	r0, #31488	; 0x7b00
     b04:	0c000002 	stceq	0, cr0, [r0], {2}
     b08:	000e6619 	andeq	r6, lr, r9, lsl r6
     b0c:	c3080b00 	movwgt	r0, #35584	; 0x8b00
     b10:	10000002 	andne	r0, r0, r2
     b14:	00057119 	andeq	r7, r5, r9, lsl r1
     b18:	c3090b00 	movwgt	r0, #39680	; 0x9b00
     b1c:	14000002 	strne	r0, [r0], #-2
     b20:	00102219 	andseq	r2, r0, r9, lsl r2
     b24:	c30a0b00 	movwgt	r0, #43776	; 0xab00
     b28:	18000002 	stmdane	r0, {r1}
     b2c:	000f4d19 	andeq	r4, pc, r9, lsl sp	; <UNPREDICTABLE>
     b30:	400b0b00 	andmi	r0, fp, r0, lsl #22
     b34:	1c00000b 	stcne	0, cr0, [r0], {11}
     b38:	08010500 	stmdaeq	r1, {r8, sl}
     b3c:	000003e3 	andeq	r0, r0, r3, ror #7
     b40:	0775041e 			; <UNDEFINED> instruction: 0x0775041e
     b44:	6f070000 	svcvs	0x00070000
     b48:	0b000008 	bleq	b70 <startup-0x1ffff490>
     b4c:	000ac10c 	andeq	ip, sl, ip, lsl #2
     b50:	0b460900 	bleq	1182f58 <startup-0x1ee7d0a8>
     b54:	f00f0000 			; <UNDEFINED> instruction: 0xf00f0000
     b58:	66000002 	strvs	r0, [r0], -r2
     b5c:	1000000b 	andne	r0, r0, fp
     b60:	000002cf 	andeq	r0, r0, pc, asr #5
     b64:	051f000f 	ldreq	r0, [pc, #-15]	; b5d <startup-0x1ffff4a3>
     b68:	04000007 	streq	r0, [r0], #-7
     b6c:	000b5617 	andeq	r5, fp, r7, lsl r6
     b70:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
     b74:	0f200027 	svceq	0x00200027
     b78:	00000b40 	andeq	r0, r0, r0, asr #22
     b7c:	00000b87 	andeq	r0, r0, r7, lsl #23
     b80:	0002cf10 	andeq	ip, r2, r0, lsl pc
     b84:	1f000300 	svcne	0x00000300
     b88:	0000021a 	andeq	r0, r0, sl, lsl r2
     b8c:	0b771c04 	bleq	1dc7ba4 <startup-0x1e23845c>
     b90:	03050000 	movweq	r0, #20480	; 0x5000
     b94:	2000278c 	andcs	r2, r0, ip, lsl #15
     b98:	0008d51f 	andeq	sp, r8, pc, lsl r5
     b9c:	1b1f0400 	blne	7c1ba4 <startup-0x1f83e45c>
     ba0:	05000003 	streq	r0, [r0, #-3]
     ba4:	00275803 	eoreq	r5, r7, r3, lsl #16
     ba8:	10042020 	andne	r2, r4, r0, lsr #32
     bac:	35040000 	strcc	r0, [r4, #-0]
     bb0:	20000fec 	andcs	r0, r0, ip, ror #31
     bb4:	00000458 	andeq	r0, r0, r8, asr r4
     bb8:	0ce19c01 	stcleq	12, cr9, [r1], #4
     bbc:	611a0000 	tstvs	sl, r0
     bc0:	04000006 	streq	r0, [r0], #-6
     bc4:	0002ca3e 	andeq	ip, r2, lr, lsr sl
     bc8:	b0910300 	addslt	r0, r1, r0, lsl #6
     bcc:	0ba11a7f 	bleq	fe8475d0 <GPIO_Ports+0xde844e44>
     bd0:	48040000 	stmdami	r4, {}	; <UNPREDICTABLE>
     bd4:	00000cf5 	strdeq	r0, [r0], -r5
     bd8:	7fb49104 	svcvc	0x00b49104
     bdc:	06ec1a06 	strbteq	r1, [ip], r6, lsl #20
     be0:	49040000 	stmdbmi	r4, {}	; <UNPREDICTABLE>
     be4:	000002c3 	andeq	r0, r0, r3, asr #5
     be8:	21649102 	cmncs	r4, r2, lsl #2
     bec:	2000100a 	andcs	r1, r0, sl
     bf0:	00000044 	andeq	r0, r0, r4, asr #32
     bf4:	00000c1b 	andeq	r0, r0, fp, lsl ip
     bf8:	04006a22 	streq	r6, [r0], #-2594	; 0xfffff5de
     bfc:	0002c33f 	andeq	ip, r2, pc, lsr r3
     c00:	5c910200 	lfmpl	f0, 4, [r1], {0}
     c04:	00101023 	andseq	r1, r0, r3, lsr #32
     c08:	00003220 	andeq	r3, r0, r0, lsr #4
     c0c:	00692200 	rsbeq	r2, r9, r0, lsl #4
     c10:	02c34104 	sbceq	r4, r3, #4, 2
     c14:	91020000 	mrsls	r0, (UNDEF: 2)
     c18:	21000060 	tstcs	r0, r0, rrx
     c1c:	200010b0 	strhcs	r1, [r0], -r0
     c20:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     c24:	00000c4b 	andeq	r0, r0, fp, asr #24
     c28:	04006a22 	streq	r6, [r0], #-2594	; 0xfffff5de
     c2c:	0002c34a 	andeq	ip, r2, sl, asr #6
     c30:	58910200 	ldmpl	r1, {r9}
     c34:	0010b623 	andseq	fp, r0, r3, lsr #12
     c38:	00009e20 	andeq	r9, r0, r0, lsr #28
     c3c:	00692200 	rsbeq	r2, r9, r0, lsl #4
     c40:	02c34c04 	sbceq	r4, r3, #4, 24	; 0x400
     c44:	91020000 	mrsls	r0, (UNDEF: 2)
     c48:	21000054 	qaddcs	r0, r4, r0
     c4c:	20001160 	andcs	r1, r0, r0, ror #2
     c50:	0000003e 	andeq	r0, r0, lr, lsr r0
     c54:	00000c65 	andeq	r0, r0, r5, ror #24
     c58:	04006922 	streq	r6, [r0], #-2338	; 0xfffff6de
     c5c:	0002c35b 	andeq	ip, r2, fp, asr r3
     c60:	50910200 	addspl	r0, r1, r0, lsl #4
     c64:	119e2100 	orrsne	r2, lr, r0, lsl #2
     c68:	003c2000 	eorseq	r2, ip, r0
     c6c:	0c7f0000 	ldcleq	0, cr0, [pc], #-0	; c74 <startup-0x1ffff38c>
     c70:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
     c74:	c3610400 	cmngt	r1, #0, 8
     c78:	02000002 	andeq	r0, r0, #2
     c7c:	21004c91 			; <UNDEFINED> instruction: 0x21004c91
     c80:	200011e0 	andcs	r1, r0, r0, ror #3
     c84:	00000038 	andeq	r0, r0, r8, lsr r0
     c88:	00000c99 	muleq	r0, r9, ip
     c8c:	04006922 	streq	r6, [r0], #-2338	; 0xfffff6de
     c90:	0002c367 	andeq	ip, r2, r7, ror #6
     c94:	48910200 	ldmmi	r1, {r9}
     c98:	12202100 	eorne	r2, r0, #0, 2
     c9c:	00382000 	eorseq	r2, r8, r0
     ca0:	0cb30000 	ldceq	0, cr0, [r3]
     ca4:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
     ca8:	c36c0400 	cmngt	ip, #0, 8
     cac:	02000002 	andeq	r0, r0, #2
     cb0:	23004491 	movwcs	r4, #1169	; 0x491
     cb4:	20001262 	andcs	r1, r0, r2, ror #4
     cb8:	000001d6 	ldrdeq	r0, [r0], -r6
     cbc:	04006922 	streq	r6, [r0], #-2338	; 0xfffff6de
     cc0:	0002c376 	andeq	ip, r2, r6, ror r3
     cc4:	40910200 	addsmi	r0, r1, r0, lsl #4
     cc8:	0012fc23 	andseq	pc, r2, r3, lsr #24
     ccc:	00012820 	andeq	r2, r1, r0, lsr #16
     cd0:	00692200 	rsbeq	r2, r9, r0, lsl #4
     cd4:	02c38604 	sbceq	r8, r3, #4, 12	; 0x400000
     cd8:	91030000 	mrsls	r0, (UNDEF: 3)
     cdc:	00007fbc 			; <UNDEFINED> instruction: 0x00007fbc
     ce0:	0b510f00 	bleq	14448e8 <startup-0x1ebbb718>
     ce4:	0cf50000 	ldcleq	0, cr0, [r5]
     ce8:	cf240000 	svcgt	0x00240000
     cec:	04000002 	streq	r0, [r0], #-2
     cf0:	067fb891 			; <UNDEFINED> instruction: 0x067fb891
     cf4:	0ce10900 			; <UNDEFINED> instruction: 0x0ce10900
     cf8:	73250000 			; <UNDEFINED> instruction: 0x73250000
     cfc:	04000001 	streq	r0, [r0], #-1
     d00:	000fc030 	andeq	ip, pc, r0, lsr r0	; <UNPREDICTABLE>
     d04:	00002c20 	andeq	r2, r0, r0, lsr #24
     d08:	2c9c0100 	ldfcss	f0, [ip], {0}
     d0c:	2600000d 	strcs	r0, [r0], -sp
     d10:	00001009 	andeq	r1, r0, r9
     d14:	02c33004 	sbceq	r3, r3, #4
     d18:	91020000 	mrsls	r0, (UNDEF: 2)
     d1c:	0e071a6c 	vmlseq.f32	s2, s14, s25
     d20:	31040000 	mrscc	r0, (UNDEF: 4)
     d24:	000002c3 	andeq	r0, r0, r3, asr #5
     d28:	00749102 	rsbseq	r9, r4, r2, lsl #2
     d2c:	000b5a20 	andeq	r5, fp, r0, lsr #20
     d30:	88240400 	stmdahi	r4!, {sl}
     d34:	3820000f 	stmdacc	r0!, {r0, r1, r2, r3}
     d38:	01000000 	mrseq	r0, (UNDEF: 0)
     d3c:	000d509c 	muleq	sp, ip, r0
     d40:	04c11a00 	strbeq	r1, [r1], #2560	; 0xa00
     d44:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
     d48:	00000310 	andeq	r0, r0, r0, lsl r3
     d4c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     d50:	00022b27 	andeq	r2, r2, r7, lsr #22
     d54:	70200400 	eorvc	r0, r0, r0, lsl #8
     d58:	1820000f 	stmdane	r0!, {r0, r1, r2, r3}
     d5c:	01000000 	mrseq	r0, (UNDEF: 0)
     d60:	0c78279c 	ldcleq	7, cr2, [r8], #-624	; 0xfffffd90
     d64:	0d040000 	stceq	0, cr0, [r4, #-0]
     d68:	20000000 	andcs	r0, r0, r0
     d6c:	0000000c 	andeq	r0, r0, ip
     d70:	15289c01 	strne	r9, [r8, #-3073]!	; 0xfffff3ff
     d74:	03000002 	movweq	r0, #2
     d78:	000da802 	andeq	sl, sp, r2, lsl #16
     d7c:	0001c820 	andeq	ip, r1, r0, lsr #16
     d80:	969c0100 	ldrls	r0, [ip], r0, lsl #2
     d84:	1a00000d 	bne	dc0 <startup-0x1ffff240>
     d88:	00000e1d 	andeq	r0, r0, sp, lsl lr
     d8c:	0ab60503 	beq	fed821a0 <GPIO_Ports+0xded7fa14>
     d90:	91020000 	mrsls	r0, (UNDEF: 2)
     d94:	fd290070 	stc2	0, cr0, [r9, #-448]!	; 0xfffffe40
     d98:	0200000a 	andeq	r0, r0, #10
     d9c:	0d880c5e 	stceq	12, cr0, [r8, #376]	; 0x178
     da0:	00202000 	eoreq	r2, r0, r0
     da4:	9c010000 	stcls	0, cr0, [r1], {-0}
     da8:	00000dbc 			; <UNDEFINED> instruction: 0x00000dbc
     dac:	000f412a 	andeq	r4, pc, sl, lsr #2
     db0:	0c5e0200 	lfmeq	f0, 2, [lr], {-0}
     db4:	000002d6 	ldrdeq	r0, [r0], -r6
     db8:	00779102 	rsbseq	r9, r7, r2, lsl #2
     dbc:	000aae2b 	andeq	sl, sl, fp, lsr #28
     dc0:	0c3c0200 	lfmeq	f0, 4, [ip], #-0
     dc4:	0000067a 	andeq	r0, r0, sl, ror r6
     dc8:	20000d44 	andcs	r0, r0, r4, asr #26
     dcc:	00000044 	andeq	r0, r0, r4, asr #32
     dd0:	0df59c01 	ldcleq	12, cr9, [r5, #4]!
     dd4:	412a0000 			; <UNDEFINED> instruction: 0x412a0000
     dd8:	0200000f 	andeq	r0, r0, #15
     ddc:	02d60c3c 	sbcseq	r0, r6, #60, 24	; 0x3c00
     de0:	91020000 	mrsls	r0, (UNDEF: 2)
     de4:	0f752c6f 	svceq	0x00752c6f
     de8:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
     dec:	00067a0c 	andeq	r7, r6, ip, lsl #20
     df0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     df4:	06842d00 	streq	r2, [r4], r0, lsl #26
     df8:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
     dfc:	000d280c 	andeq	r2, sp, ip, lsl #16
     e00:	00001c20 	andeq	r1, r0, r0, lsr #24
     e04:	2b9c0100 	blcs	fe70120c <GPIO_Ports+0xde6fea80>
     e08:	000009ed 	andeq	r0, r0, sp, ror #19
     e0c:	6e0bfb02 	vmlavs.f64	d15, d11, d2
     e10:	a4000006 	strge	r0, [r0], #-6
     e14:	8420000c 	strthi	r0, [r0], #-12
     e18:	01000000 	mrseq	r0, (UNDEF: 0)
     e1c:	000e5e9c 	muleq	lr, ip, lr
     e20:	0aa52a00 	beq	fe94b628 <GPIO_Ports+0xde948e9c>
     e24:	fb020000 	blx	80e2e <startup-0x1ff7f1d2>
     e28:	0002d60b 	andeq	sp, r2, fp, lsl #12
     e2c:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
     e30:	706d742e 	rsbvc	r7, sp, lr, lsr #8
     e34:	0bfd0200 	bleq	fff4163c <GPIO_Ports+0xdff3eeb0>
     e38:	00000310 	andeq	r0, r0, r0, lsl r3
     e3c:	2c6c9102 	stfcsp	f1, [ip], #-8
     e40:	00000b67 	andeq	r0, r0, r7, ror #22
     e44:	100bfe02 	andne	pc, fp, r2, lsl #28
     e48:	02000003 	andeq	r0, r0, #3
     e4c:	752c7491 	strvc	r7, [ip, #-1169]!	; 0xfffffb6f
     e50:	0200000f 	andeq	r0, r0, #15
     e54:	066e0bff 			; <UNDEFINED> instruction: 0x066e0bff
     e58:	91020000 	mrsls	r0, (UNDEF: 2)
     e5c:	20290073 	eorcs	r0, r9, r3, ror r0
     e60:	0200000a 	andeq	r0, r0, #10
     e64:	0c540bd6 	mrrceq	11, 13, r0, r4, cr6
     e68:	00502000 	subseq	r2, r0, r0
     e6c:	9c010000 	stcls	0, cr0, [r1], {-0}
     e70:	00000e93 	muleq	r0, r3, lr
     e74:	000f412a 	andeq	r4, pc, sl, lsr #2
     e78:	0bd60200 	bleq	ff581680 <GPIO_Ports+0xdf57eef4>
     e7c:	000002d6 	ldrdeq	r0, [r0], -r6
     e80:	2a779102 	bcs	1de5290 <startup-0x1e21ad70>
     e84:	00000adc 	ldrdeq	r0, [r0], -ip
     e88:	a10bd602 	tstge	fp, r2, lsl #12
     e8c:	02000006 	andeq	r0, r0, #6
     e90:	29007691 	stmdbcs	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
     e94:	00000d67 	andeq	r0, r0, r7, ror #26
     e98:	180a9e02 	stmdane	sl, {r1, r9, sl, fp, ip, pc}
     e9c:	3c20000c 	stccc	0, cr0, [r0], #-48	; 0xffffffd0
     ea0:	01000000 	mrseq	r0, (UNDEF: 0)
     ea4:	000eb99c 	muleq	lr, ip, r9
     ea8:	01332a00 	teqeq	r3, r0, lsl #20
     eac:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
     eb0:	0002d60a 	andeq	sp, r2, sl, lsl #12
     eb4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     eb8:	00d02900 	sbcseq	r2, r0, r0, lsl #18
     ebc:	86020000 	strhi	r0, [r2], -r0
     ec0:	000bd80a 	andeq	sp, fp, sl, lsl #16
     ec4:	00004020 	andeq	r4, r0, r0, lsr #32
     ec8:	ee9c0100 	fmle	f0, f4, f0
     ecc:	2a00000e 	bcs	f0c <startup-0x1ffff0f4>
     ed0:	00000b71 	andeq	r0, r0, r1, ror fp
     ed4:	100a8602 	andne	r8, sl, r2, lsl #12
     ed8:	02000003 	andeq	r0, r0, #3
     edc:	dc2a7491 	cfstrsle	mvf7, [sl], #-580	; 0xfffffdbc
     ee0:	0200000a 	andeq	r0, r0, #10
     ee4:	06a10a86 	strteq	r0, [r1], r6, lsl #21
     ee8:	91020000 	mrsls	r0, (UNDEF: 2)
     eec:	8d290073 	stchi	0, cr0, [r9, #-460]!	; 0xfffffe34
     ef0:	0200000f 	andeq	r0, r0, #15
     ef4:	0b980a52 	bleq	fe603844 <GPIO_Ports+0xde6010b8>
     ef8:	00402000 	subeq	r2, r0, r0
     efc:	9c010000 	stcls	0, cr0, [r1], {-0}
     f00:	00000f23 	andeq	r0, r0, r3, lsr #30
     f04:	000a742a 	andeq	r7, sl, sl, lsr #8
     f08:	0a520200 	beq	1481710 <startup-0x1eb7e8f0>
     f0c:	00000310 	andeq	r0, r0, r0, lsl r3
     f10:	2a749102 	bcs	1d25320 <startup-0x1e2dace0>
     f14:	00000adc 	ldrdeq	r0, [r0], -ip
     f18:	a10a5202 	tstge	sl, r2, lsl #4
     f1c:	02000006 	andeq	r0, r0, #6
     f20:	29007391 	stmdbcs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
     f24:	000004cc 	andeq	r0, r0, ip, asr #9
     f28:	580a1902 	stmdapl	sl, {r1, r8, fp, ip}
     f2c:	4020000b 	eormi	r0, r0, fp
     f30:	01000000 	mrseq	r0, (UNDEF: 0)
     f34:	000f589c 	muleq	pc, ip, r8	; <UNPREDICTABLE>
     f38:	032b2a00 			; <UNDEFINED> instruction: 0x032b2a00
     f3c:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     f40:	0003100a 	andeq	r1, r3, sl
     f44:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f48:	000adc2a 	andeq	sp, sl, sl, lsr #24
     f4c:	0a190200 	beq	641754 <startup-0x1f9be8ac>
     f50:	000006a1 	andeq	r0, r0, r1, lsr #13
     f54:	00739102 	rsbseq	r9, r3, r2, lsl #2
     f58:	0000ed29 	andeq	lr, r0, r9, lsr #26
     f5c:	09fb0200 	ldmibeq	fp!, {r9}^
     f60:	20000b18 	andcs	r0, r0, r8, lsl fp
     f64:	00000040 	andeq	r0, r0, r0, asr #32
     f68:	0f8d9c01 	svceq	0x008d9c01
     f6c:	5e2a0000 	cdppl	0, 2, cr0, cr10, cr0, {0}
     f70:	02000010 	andeq	r0, r0, #16
     f74:	031009fb 	tsteq	r0, #4112384	; 0x3ec000
     f78:	91020000 	mrsls	r0, (UNDEF: 2)
     f7c:	0adc2a74 	beq	ff70b954 <GPIO_Ports+0xdf7091c8>
     f80:	fb020000 	blx	80f8a <startup-0x1ff7f076>
     f84:	0006a109 	andeq	sl, r6, r9, lsl #2
     f88:	73910200 	orrsvc	r0, r1, #0, 4
     f8c:	0fdf2900 	svceq	0x00df2900
     f90:	db020000 	blle	80f98 <startup-0x1ff7f068>
     f94:	000ad809 	andeq	sp, sl, r9, lsl #16
     f98:	00004020 	andeq	r4, r0, r0, lsr #32
     f9c:	c29c0100 	addsgt	r0, ip, #0, 2
     fa0:	2a00000f 	bcs	fe4 <startup-0x1ffff01c>
     fa4:	00000e3b 	andeq	r0, r0, fp, lsr lr
     fa8:	1009db02 	andne	sp, r9, r2, lsl #22
     fac:	02000003 	andeq	r0, r0, #3
     fb0:	dc2a7491 	cfstrsle	mvf7, [sl], #-580	; 0xfffffdbc
     fb4:	0200000a 	andeq	r0, r0, #10
     fb8:	06a109db 	ssateq	r0, #2, fp, asr #19
     fbc:	91020000 	mrsls	r0, (UNDEF: 2)
     fc0:	aa290073 	bge	a41194 <startup-0x1f5bee6c>
     fc4:	02000004 	andeq	r0, r0, #4
     fc8:	0a9809aa 	beq	fe603678 <GPIO_Ports+0xde600eec>
     fcc:	00402000 	subeq	r2, r0, r0
     fd0:	9c010000 	stcls	0, cr0, [r1], {-0}
     fd4:	00000ff7 	strdeq	r0, [r0], -r7
     fd8:	000b712a 	andeq	r7, fp, sl, lsr #2
     fdc:	09aa0200 	stmibeq	sl!, {r9}
     fe0:	00000310 	andeq	r0, r0, r0, lsl r3
     fe4:	2a749102 	bcs	1d253f4 <startup-0x1e2dac0c>
     fe8:	00000adc 	ldrdeq	r0, [r0], -ip
     fec:	a109aa02 	tstge	r9, r2, lsl #20
     ff0:	02000006 	andeq	r0, r0, #6
     ff4:	29007391 	stmdbcs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
     ff8:	0000011c 	andeq	r0, r0, ip, lsl r1
     ffc:	58097b02 	stmdapl	r9, {r1, r8, r9, fp, ip, sp, lr}
    1000:	4020000a 	eormi	r0, r0, sl
    1004:	01000000 	mrseq	r0, (UNDEF: 0)
    1008:	00102c9c 	mulseq	r0, ip, ip
    100c:	0a742a00 	beq	1d0b814 <startup-0x1e2f47ec>
    1010:	7b020000 	blvc	81018 <startup-0x1ff7efe8>
    1014:	00031009 	andeq	r1, r3, r9
    1018:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    101c:	000adc2a 	andeq	sp, sl, sl, lsr #24
    1020:	097b0200 	ldmdbeq	fp!, {r9}^
    1024:	000006a1 	andeq	r0, r0, r1, lsr #13
    1028:	00739102 	rsbseq	r9, r3, r2, lsl #2
    102c:	00026f29 	andeq	r6, r2, r9, lsr #30
    1030:	09450200 	stmdbeq	r5, {r9}^
    1034:	20000a18 	andcs	r0, r0, r8, lsl sl
    1038:	00000040 	andeq	r0, r0, r0, asr #32
    103c:	10619c01 	rsbne	r9, r1, r1, lsl #24
    1040:	2b2a0000 	blcs	a81048 <startup-0x1f57efb8>
    1044:	02000003 	andeq	r0, r0, #3
    1048:	03100945 	tsteq	r0, #1130496	; 0x114000
    104c:	91020000 	mrsls	r0, (UNDEF: 2)
    1050:	0adc2a74 	beq	ff70ba28 <GPIO_Ports+0xdf70929c>
    1054:	45020000 	strmi	r0, [r2, #-0]
    1058:	0006a109 	andeq	sl, r6, r9, lsl #2
    105c:	73910200 	orrsvc	r0, r1, #0, 4
    1060:	11652900 	cmnne	r5, r0, lsl #18
    1064:	2a020000 	bcs	8106c <startup-0x1ff7ef94>
    1068:	0009d809 	andeq	sp, r9, r9, lsl #16
    106c:	00004020 	andeq	r4, r0, r0, lsr #32
    1070:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    1074:	2a000010 	bcs	10bc <startup-0x1fffef44>
    1078:	0000105e 	andeq	r1, r0, lr, asr r0
    107c:	10092a02 	andne	r2, r9, r2, lsl #20
    1080:	02000003 	andeq	r0, r0, #3
    1084:	dc2a7491 	cfstrsle	mvf7, [sl], #-580	; 0xfffffdbc
    1088:	0200000a 	andeq	r0, r0, #10
    108c:	06a1092a 	strteq	r0, [r1], sl, lsr #18
    1090:	91020000 	mrsls	r0, (UNDEF: 2)
    1094:	bc290073 	stclt	0, cr0, [r9], #-460	; 0xfffffe34
    1098:	0200000e 	andeq	r0, r0, #14
    109c:	0998090d 	ldmibeq	r8, {r0, r2, r3, r8, fp}
    10a0:	00402000 	subeq	r2, r0, r0
    10a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    10a8:	000010cb 	andeq	r1, r0, fp, asr #1
    10ac:	000e3b2a 	andeq	r3, lr, sl, lsr #22
    10b0:	090d0200 	stmdbeq	sp, {r9}
    10b4:	00000310 	andeq	r0, r0, r0, lsl r3
    10b8:	2a749102 	bcs	1d254c8 <startup-0x1e2dab38>
    10bc:	00000adc 	ldrdeq	r0, [r0], -ip
    10c0:	a1090d02 	tstge	r9, r2, lsl #26
    10c4:	02000006 	andeq	r0, r0, #6
    10c8:	29007391 	stmdbcs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    10cc:	000007de 	ldrdeq	r0, [r0], -lr
    10d0:	5808e302 	stmdapl	r8, {r1, r8, r9, sp, lr, pc}
    10d4:	40200009 	eormi	r0, r0, r9
    10d8:	01000000 	mrseq	r0, (UNDEF: 0)
    10dc:	0011009c 	mulseq	r1, ip, r0
    10e0:	0b712a00 	bleq	1c4b8e8 <startup-0x1e3b4718>
    10e4:	e3020000 	movw	r0, #8192	; 0x2000
    10e8:	00031008 	andeq	r1, r3, r8
    10ec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    10f0:	000adc2a 	andeq	sp, sl, sl, lsr #24
    10f4:	08e30200 	stmiaeq	r3!, {r9}^
    10f8:	000006a1 	andeq	r0, r0, r1, lsr #13
    10fc:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1100:	0003af29 	andeq	sl, r3, r9, lsr #30
    1104:	08af0200 	stmiaeq	pc!, {r9}	; <UNPREDICTABLE>
    1108:	20000918 	andcs	r0, r0, r8, lsl r9
    110c:	00000040 	andeq	r0, r0, r0, asr #32
    1110:	11359c01 	teqne	r5, r1, lsl #24
    1114:	742a0000 	strtvc	r0, [sl], #-0
    1118:	0200000a 	andeq	r0, r0, #10
    111c:	031008af 	tsteq	r0, #11468800	; 0xaf0000
    1120:	91020000 	mrsls	r0, (UNDEF: 2)
    1124:	0adc2a74 	beq	ff70bafc <GPIO_Ports+0xdf709370>
    1128:	af020000 	svcge	0x00020000
    112c:	0006a108 	andeq	sl, r6, r8, lsl #2
    1130:	73910200 	orrsvc	r0, r1, #0, 4
    1134:	0bfd2900 	bleq	fff4b53c <GPIO_Ports+0xdff48db0>
    1138:	76020000 	strvc	r0, [r2], -r0
    113c:	0008d808 	andeq	sp, r8, r8, lsl #16
    1140:	00004020 	andeq	r4, r0, r0, lsr #32
    1144:	6a9c0100 	bvs	fe70154c <GPIO_Ports+0xde6fedc0>
    1148:	2a000011 	bcs	1194 <startup-0x1fffee6c>
    114c:	0000032b 	andeq	r0, r0, fp, lsr #6
    1150:	10087602 	andne	r7, r8, r2, lsl #12
    1154:	02000003 	andeq	r0, r0, #3
    1158:	dc2a7491 	cfstrsle	mvf7, [sl], #-580	; 0xfffffdbc
    115c:	0200000a 	andeq	r0, r0, #10
    1160:	06a10876 	sxtabeq	r0, r1, r6, ror #16
    1164:	91020000 	mrsls	r0, (UNDEF: 2)
    1168:	57290073 			; <UNDEFINED> instruction: 0x57290073
    116c:	02000001 	andeq	r0, r0, #1
    1170:	08980858 	ldmeq	r8, {r3, r4, r6, fp}
    1174:	00402000 	subeq	r2, r0, r0
    1178:	9c010000 	stcls	0, cr0, [r1], {-0}
    117c:	0000119f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    1180:	00105e2a 	andseq	r5, r0, sl, lsr #28
    1184:	08580200 	ldmdaeq	r8, {r9}^
    1188:	00000310 	andeq	r0, r0, r0, lsl r3
    118c:	2a749102 	bcs	1d2559c <startup-0x1e2daa64>
    1190:	00000adc 	ldrdeq	r0, [r0], -ip
    1194:	a1085802 	tstge	r8, r2, lsl #16
    1198:	02000006 	andeq	r0, r0, #6
    119c:	29007391 	stmdbcs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    11a0:	00001092 	muleq	r0, r2, r0
    11a4:	58083802 	stmdapl	r8, {r1, fp, ip, sp}
    11a8:	40200008 	eormi	r0, r0, r8
    11ac:	01000000 	mrseq	r0, (UNDEF: 0)
    11b0:	0011d49c 	mulseq	r1, ip, r4
    11b4:	0e3b2a00 	vaddeq.f32	s4, s22, s0
    11b8:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    11bc:	00031008 	andeq	r1, r3, r8
    11c0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    11c4:	000adc2a 	andeq	sp, sl, sl, lsr #24
    11c8:	08380200 	ldmdaeq	r8!, {r9}
    11cc:	000006a1 	andeq	r0, r0, r1, lsr #13
    11d0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    11d4:	000b2e29 	andeq	r2, fp, r9, lsr #28
    11d8:	080e0200 	stmdaeq	lr, {r9}
    11dc:	2000083c 	andcs	r0, r0, ip, lsr r8
    11e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    11e4:	11fa9c01 	mvnsne	r9, r1, lsl #24
    11e8:	462a0000 	strtmi	r0, [sl], -r0
    11ec:	02000011 	andeq	r0, r0, #17
    11f0:	0310080e 	tsteq	r0, #917504	; 0xe0000
    11f4:	91020000 	mrsls	r0, (UNDEF: 2)
    11f8:	3b290074 	blcc	a413d0 <startup-0x1f5bec30>
    11fc:	02000002 	andeq	r0, r0, #2
    1200:	0800078e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl}
    1204:	003c2000 	eorseq	r2, ip, r0
    1208:	9c010000 	stcls	0, cr0, [r1], {-0}
    120c:	0000122f 	andeq	r1, r0, pc, lsr #4
    1210:	0008042a 	andeq	r0, r8, sl, lsr #8
    1214:	078e0200 	streq	r0, [lr, r0, lsl #4]
    1218:	00000310 	andeq	r0, r0, r0, lsl r3
    121c:	2c6c9102 	stfcsp	f1, [ip], #-8
    1220:	00000e0c 	andeq	r0, r0, ip, lsl #28
    1224:	10079002 	andne	r9, r7, r2
    1228:	02000003 	andeq	r0, r0, #3
    122c:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    1230:	000001fb 	strdeq	r0, [r0], -fp
    1234:	c0072b02 	andgt	r2, r7, r2, lsl #22
    1238:	40200007 	eormi	r0, r0, r7
    123c:	01000000 	mrseq	r0, (UNDEF: 0)
    1240:	0012649c 	mulseq	r2, ip, r4
    1244:	07f52a00 	ldrbeq	r2, [r5, r0, lsl #20]!
    1248:	2b020000 	blcs	81250 <startup-0x1ff7edb0>
    124c:	00031007 	andeq	r1, r3, r7
    1250:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1254:	000e0c2c 	andeq	r0, lr, ip, lsr #24
    1258:	072d0200 	streq	r0, [sp, -r0, lsl #4]!
    125c:	00000310 	andeq	r0, r0, r0, lsl r3
    1260:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1264:	00096829 	andeq	r6, r9, r9, lsr #16
    1268:	070b0200 	streq	r0, [fp, -r0, lsl #4]
    126c:	20000784 	andcs	r0, r0, r4, lsl #15
    1270:	0000003c 	andeq	r0, r0, ip, lsr r0
    1274:	12999c01 	addsne	r9, r9, #256	; 0x100
    1278:	0f2a0000 	svceq	0x002a0000
    127c:	02000003 	andeq	r0, r0, #3
    1280:	0310070b 	tsteq	r0, #2883584	; 0x2c0000
    1284:	91020000 	mrsls	r0, (UNDEF: 2)
    1288:	0e0c2c6c 	cdpeq	12, 0, cr2, cr12, cr12, {3}
    128c:	0d020000 	stceq	0, cr0, [r2, #-0]
    1290:	00031007 	andeq	r1, r3, r7
    1294:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1298:	02d22900 	sbcseq	r2, r2, #0, 18
    129c:	ea020000 	b	812a4 <startup-0x1ff7ed5c>
    12a0:	00074806 	andeq	r4, r7, r6, lsl #16
    12a4:	00003c20 	andeq	r3, r0, r0, lsr #24
    12a8:	ce9c0100 	fmlgte	f0, f4, f0
    12ac:	2a000012 	bcs	12fc <startup-0x1fffed04>
    12b0:	00000813 	andeq	r0, r0, r3, lsl r8
    12b4:	1006ea02 	andne	lr, r6, r2, lsl #20
    12b8:	02000003 	andeq	r0, r0, #3
    12bc:	0c2c6c91 	stceq	12, cr6, [ip], #-580	; 0xfffffdbc
    12c0:	0200000e 	andeq	r0, r0, #14
    12c4:	031006ec 	tsteq	r0, #236, 12	; 0xec00000
    12c8:	91020000 	mrsls	r0, (UNDEF: 2)
    12cc:	ce290074 	mcrgt	0, 1, r0, cr9, cr4, {3}
    12d0:	02000006 	andeq	r0, r0, #6
    12d4:	070c06c6 	streq	r0, [ip, -r6, asr #13]
    12d8:	003c2000 	eorseq	r2, ip, r0
    12dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    12e0:	00001303 	andeq	r1, r0, r3, lsl #6
    12e4:	000b432a 	andeq	r4, fp, sl, lsr #6
    12e8:	06c60200 	strbeq	r0, [r6], r0, lsl #4
    12ec:	00000310 	andeq	r0, r0, r0, lsl r3
    12f0:	2c6c9102 	stfcsp	f1, [ip], #-8
    12f4:	00000e0c 	andeq	r0, r0, ip, lsl #28
    12f8:	1006c802 	andne	ip, r6, r2, lsl #16
    12fc:	02000003 	andeq	r0, r0, #3
    1300:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    1304:	00000057 	andeq	r0, r0, r7, asr r0
    1308:	f006ab02 			; <UNDEFINED> instruction: 0xf006ab02
    130c:	1c200006 	stcne	0, cr0, [r0], #-24	; 0xffffffe8
    1310:	01000000 	mrseq	r0, (UNDEF: 0)
    1314:	0013299c 	mulseq	r3, ip, r9
    1318:	08b12a00 	ldmeq	r1!, {r9, fp, sp}
    131c:	ab020000 	blge	81324 <startup-0x1ff7ecdc>
    1320:	00031006 	andeq	r1, r3, r6
    1324:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1328:	0c3e2900 			; <UNDEFINED> instruction: 0x0c3e2900
    132c:	ef020000 	svc	0x00020000
    1330:	0006d005 	andeq	sp, r6, r5
    1334:	00002020 	andeq	r2, r0, r0, lsr #32
    1338:	4f9c0100 	svcmi	0x009c0100
    133c:	2a000013 	bcs	1390 <startup-0x1fffec70>
    1340:	00000adc 	ldrdeq	r0, [r0], -ip
    1344:	a105ef02 	tstge	r5, r2, lsl #30
    1348:	02000006 	andeq	r0, r0, #6
    134c:	29007791 	stmdbcs	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    1350:	0000102b 	andeq	r1, r0, fp, lsr #32
    1354:	b005de02 	andlt	sp, r5, r2, lsl #28
    1358:	20200006 	eorcs	r0, r0, r6
    135c:	01000000 	mrseq	r0, (UNDEF: 0)
    1360:	0013759c 	mulseq	r3, ip, r5
    1364:	0adc2a00 	beq	ff70bb6c <GPIO_Ports+0xdf7093e0>
    1368:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    136c:	0006a105 	andeq	sl, r6, r5, lsl #2
    1370:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1374:	0a832900 	beq	fe0cb77c <GPIO_Ports+0xde0c8ff0>
    1378:	be020000 	cdplt	0, 0, cr0, cr2, cr0, {0}
    137c:	00065005 	andeq	r5, r6, r5
    1380:	00006020 	andeq	r6, r0, r0, lsr #32
    1384:	aa9c0100 	bge	fe70178c <GPIO_Ports+0xde6ff000>
    1388:	2a000013 	bcs	13dc <startup-0x1fffec24>
    138c:	00000146 	andeq	r0, r0, r6, asr #2
    1390:	1005be02 	andne	fp, r5, r2, lsl #28
    1394:	02000003 	andeq	r0, r0, #3
    1398:	0c2c6c91 	stceq	12, cr6, [ip], #-580	; 0xfffffdbc
    139c:	0200000e 	andeq	r0, r0, #14
    13a0:	031005c0 	tsteq	r0, #192, 10	; 0x30000000
    13a4:	91020000 	mrsls	r0, (UNDEF: 2)
    13a8:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
    13ac:	02000000 	andeq	r0, r0, #0
    13b0:	04f80525 	ldrbteq	r0, [r8], #1317	; 0x525
    13b4:	01582000 	cmpeq	r8, r0
    13b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    13bc:	0000142a 	andeq	r1, r0, sl, lsr #8
    13c0:	0009ff2a 	andeq	pc, r9, sl, lsr #30
    13c4:	05250200 	streq	r0, [r5, #-512]!	; 0xfffffe00
    13c8:	0000142a 	andeq	r1, r0, sl, lsr #8
    13cc:	2e5c9102 	logcse	f1, f2
    13d0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    13d4:	10052702 	andne	r2, r5, r2, lsl #14
    13d8:	02000003 	andeq	r0, r0, #3
    13dc:	5f2c7091 	svcpl	0x002c7091
    13e0:	02000011 	andeq	r0, r0, #17
    13e4:	03100527 	tsteq	r0, #163577856	; 0x9c00000
    13e8:	91020000 	mrsls	r0, (UNDEF: 2)
    13ec:	0f862c6c 	svceq	0x00862c6c
    13f0:	27020000 	strcs	r0, [r2, -r0]
    13f4:	00031005 	andeq	r1, r3, r5
    13f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    13fc:	0000002c 	andeq	r0, r0, ip, lsr #32
    1400:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    1404:	00000310 	andeq	r0, r0, r0, lsl r3
    1408:	2c689102 	stfcsp	f1, [r8], #-8
    140c:	000005b5 			; <UNDEFINED> instruction: 0x000005b5
    1410:	10052702 	andne	r2, r5, r2, lsl #14
    1414:	02000003 	andeq	r0, r0, #3
    1418:	d32c6491 			; <UNDEFINED> instruction: 0xd32c6491
    141c:	02000011 	andeq	r0, r0, #17
    1420:	03100527 	tsteq	r0, #163577856	; 0x9c00000
    1424:	91020000 	mrsls	r0, (UNDEF: 2)
    1428:	041e0060 	ldreq	r0, [lr], #-96	; 0xffffffa0
    142c:	00000989 	andeq	r0, r0, r9, lsl #19
    1430:	0002ab29 	andeq	sl, r2, r9, lsr #22
    1434:	04f10200 	ldrbteq	r0, [r1], #512	; 0x200
    1438:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
    143c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1440:	14659c01 	strbtne	r9, [r5], #-3073	; 0xfffff3ff
    1444:	872a0000 	strhi	r0, [sl, -r0]!
    1448:	02000001 	andeq	r0, r0, #1
    144c:	031004f1 	tsteq	r0, #-251658240	; 0xf1000000
    1450:	91020000 	mrsls	r0, (UNDEF: 2)
    1454:	0e0c2c6c 	cdpeq	12, 0, cr2, cr12, cr12, {3}
    1458:	f3020000 	vhadd.u8	d0, d2, d0
    145c:	00031004 	andeq	r1, r3, r4
    1460:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1464:	08dd2900 	ldmeq	sp, {r8, fp, sp}^
    1468:	d2020000 	andle	r0, r2, #0
    146c:	00048404 	andeq	r8, r4, r4, lsl #8
    1470:	00003820 	andeq	r3, r0, r0, lsr #16
    1474:	9a9c0100 	bls	fe70187c <GPIO_Ports+0xde6ff0f0>
    1478:	2a000014 	bcs	14d0 <startup-0x1fffeb30>
    147c:	00000187 	andeq	r0, r0, r7, lsl #3
    1480:	1004d202 	andne	sp, r4, r2, lsl #4
    1484:	02000003 	andeq	r0, r0, #3
    1488:	0c2c6c91 	stceq	12, cr6, [ip], #-580	; 0xfffffdbc
    148c:	0200000e 	andeq	r0, r0, #14
    1490:	031004d4 	tsteq	r0, #212, 8	; 0xd4000000
    1494:	91020000 	mrsls	r0, (UNDEF: 2)
    1498:	75290074 	strvc	r0, [r9, #-116]!	; 0xffffff8c
    149c:	02000006 	andeq	r0, r0, #6
    14a0:	045004b3 	ldrbeq	r0, [r0], #-1203	; 0xfffffb4d
    14a4:	00342000 	eorseq	r2, r4, r0
    14a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    14ac:	000014cf 	andeq	r1, r0, pc, asr #9
    14b0:	00057b2a 	andeq	r7, r5, sl, lsr #22
    14b4:	04b30200 	ldrteq	r0, [r3], #512	; 0x200
    14b8:	00000310 	andeq	r0, r0, r0, lsl r3
    14bc:	2c6c9102 	stfcsp	f1, [ip], #-8
    14c0:	00000e0c 	andeq	r0, r0, ip, lsl #28
    14c4:	1004b502 	andne	fp, r4, r2, lsl #10
    14c8:	02000003 	andeq	r0, r0, #3
    14cc:	30007491 	mulcc	r0, r1, r4
    14d0:	000002f1 	strdeq	r0, [r0], -r1
    14d4:	d6049a02 	strle	r9, [r4], -r2, lsl #20
    14d8:	34000002 	strcc	r0, [r0], #-2
    14dc:	1c200004 	stcne	0, cr0, [r0], #-16
    14e0:	01000000 	mrseq	r0, (UNDEF: 0)
    14e4:	1192299c 			; <UNDEFINED> instruction: 0x1192299c
    14e8:	7d020000 	stcvc	0, cr0, [r2, #-0]
    14ec:	00040004 	andeq	r0, r4, r4
    14f0:	00003420 	andeq	r3, r0, r0, lsr #8
    14f4:	1a9c0100 	bne	fe7018fc <GPIO_Ports+0xde6ff170>
    14f8:	2a000015 	bcs	1554 <startup-0x1fffeaac>
    14fc:	0000037e 	andeq	r0, r0, lr, ror r3
    1500:	10047d02 	andne	r7, r4, r2, lsl #26
    1504:	02000003 	andeq	r0, r0, #3
    1508:	0c2c6c91 	stceq	12, cr6, [ip], #-580	; 0xfffffdbc
    150c:	0200000e 	andeq	r0, r0, #14
    1510:	0310047f 	tsteq	r0, #2130706432	; 0x7f000000
    1514:	91020000 	mrsls	r0, (UNDEF: 2)
    1518:	9d290074 	stcls	0, cr0, [r9, #-464]!	; 0xfffffe30
    151c:	02000008 	andeq	r0, r0, #8
    1520:	03c403b5 	biceq	r0, r4, #-738197502	; 0xd4000002
    1524:	003c2000 	eorseq	r2, ip, r0
    1528:	9c010000 	stcls	0, cr0, [r1], {-0}
    152c:	0000155e 	andeq	r1, r0, lr, asr r5
    1530:	000c802a 	andeq	r8, ip, sl, lsr #32
    1534:	03b50200 			; <UNDEFINED> instruction: 0x03b50200
    1538:	00000310 	andeq	r0, r0, r0, lsl r3
    153c:	2a6c9102 	bcs	1b2594c <startup-0x1e4da6b4>
    1540:	00000353 	andeq	r0, r0, r3, asr r3
    1544:	1003b502 	andne	fp, r3, r2, lsl #10
    1548:	02000003 	andeq	r0, r0, #3
    154c:	0c2c6891 	stceq	8, cr6, [ip], #-580	; 0xfffffdbc
    1550:	0200000e 	andeq	r0, r0, #14
    1554:	031003b7 	tsteq	r0, #-603979774	; 0xdc000002
    1558:	91020000 	mrsls	r0, (UNDEF: 2)
    155c:	6a290074 	bvs	a41734 <startup-0x1f5be8cc>
    1560:	02000007 	andeq	r0, r0, #7
    1564:	03840388 	orreq	r0, r4, #136, 6	; 0x20000002
    1568:	00402000 	subeq	r2, r0, r0
    156c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1570:	000015a2 	andeq	r1, r0, r2, lsr #11
    1574:	000bee2a 	andeq	lr, fp, sl, lsr #28
    1578:	03880200 	orreq	r0, r8, #0, 4
    157c:	00000310 	andeq	r0, r0, r0, lsl r3
    1580:	2a6c9102 	bcs	1b25990 <startup-0x1e4da670>
    1584:	00000d06 	andeq	r0, r0, r6, lsl #26
    1588:	10038802 	andne	r8, r3, r2, lsl #16
    158c:	02000003 	andeq	r0, r0, #3
    1590:	0c2c6891 	stceq	8, cr6, [ip], #-580	; 0xfffffdbc
    1594:	0200000e 	andeq	r0, r0, #14
    1598:	0310038a 	tsteq	r0, #671088642	; 0x28000002
    159c:	91020000 	mrsls	r0, (UNDEF: 2)
    15a0:	13290074 			; <UNDEFINED> instruction: 0x13290074
    15a4:	0200000b 	andeq	r0, r0, #11
    15a8:	0364036f 	cmneq	r4, #-1140850687	; 0xbc000001
    15ac:	00202000 	eoreq	r2, r0, r0
    15b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    15b4:	000015c8 	andeq	r1, r0, r8, asr #11
    15b8:	000adc2a 	andeq	sp, sl, sl, lsr #24
    15bc:	036f0200 	cmneq	pc, #0, 4
    15c0:	000006a1 	andeq	r0, r0, r1, lsr #13
    15c4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    15c8:	00117c29 	andseq	r7, r1, r9, lsr #24
    15cc:	035d0200 	cmpeq	sp, #0, 4
    15d0:	20000344 	andcs	r0, r0, r4, asr #6
    15d4:	00000020 	andeq	r0, r0, r0, lsr #32
    15d8:	15ee9c01 	strbne	r9, [lr, #3073]!	; 0xc01
    15dc:	dc2a0000 	stcle	0, cr0, [sl], #-0
    15e0:	0200000a 	andeq	r0, r0, #10
    15e4:	06a1035d 	ssateq	r0, #2, sp, asr #6
    15e8:	91020000 	mrsls	r0, (UNDEF: 2)
    15ec:	f4290077 	vld4.16	{d0-d3}, [r9 :256], r7
    15f0:	02000006 	andeq	r0, r0, #6
    15f4:	03140349 	tsteq	r4, #603979777	; 0x24000001
    15f8:	00302000 	eorseq	r2, r0, r0
    15fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1600:	00001632 	andeq	r1, r0, r2, lsr r6
    1604:	000bd62a 	andeq	sp, fp, sl, lsr #12
    1608:	03490200 	movteq	r0, #37376	; 0x9200
    160c:	00000310 	andeq	r0, r0, r0, lsl r3
    1610:	2a749102 	bcs	1d25a20 <startup-0x1e2da5e0>
    1614:	00000bde 	ldrdeq	r0, [r0], -lr
    1618:	10034902 	andne	r4, r3, r2, lsl #18
    161c:	02000003 	andeq	r0, r0, #3
    1620:	e62a7091 			; <UNDEFINED> instruction: 0xe62a7091
    1624:	0200000b 	andeq	r0, r0, #11
    1628:	03100349 	tsteq	r0, #603979777	; 0x24000001
    162c:	91020000 	mrsls	r0, (UNDEF: 2)
    1630:	7929006c 	stmdbvc	r9!, {r2, r3, r5, r6}
    1634:	02000001 	andeq	r0, r0, #1
    1638:	02f402dc 	rscseq	r0, r4, #220, 4	; 0xc000000d
    163c:	00202000 	eoreq	r2, r0, r0
    1640:	9c010000 	stcls	0, cr0, [r1], {-0}
    1644:	00001658 	andeq	r1, r0, r8, asr r6
    1648:	000adc2a 	andeq	sp, sl, sl, lsr #24
    164c:	02dc0200 	sbcseq	r0, ip, #0, 4
    1650:	000006a1 	andeq	r0, r0, r1, lsr #13
    1654:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1658:	0010bc29 	andseq	fp, r0, r9, lsr #24
    165c:	02510200 	subseq	r0, r1, #0, 4
    1660:	200002cc 	andcs	r0, r0, ip, asr #5
    1664:	00000028 	andeq	r0, r0, r8, lsr #32
    1668:	168d9c01 	strne	r9, [sp], r1, lsl #24
    166c:	d72a0000 	strle	r0, [sl, -r0]!
    1670:	0200000f 	andeq	r0, r0, #15
    1674:	03100251 	tsteq	r0, #268435461	; 0x10000005
    1678:	91020000 	mrsls	r0, (UNDEF: 2)
    167c:	0ffc2a74 	svceq	0x00fc2a74
    1680:	51020000 	mrspl	r0, (UNDEF: 2)
    1684:	00031002 	andeq	r1, r3, r2
    1688:	70910200 	addsvc	r0, r1, r0, lsl #4
    168c:	0c332900 			; <UNDEFINED> instruction: 0x0c332900
    1690:	33020000 	movwcc	r0, #8192	; 0x2000
    1694:	0002ac02 	andeq	sl, r2, r2, lsl #24
    1698:	00002020 	andeq	r2, r0, r0, lsr #32
    169c:	b39c0100 	orrslt	r0, ip, #0, 2
    16a0:	2a000016 	bcs	1700 <startup-0x1fffe900>
    16a4:	00000adc 	ldrdeq	r0, [r0], -ip
    16a8:	a1023302 	tstge	r2, r2, lsl #6
    16ac:	02000006 	andeq	r0, r0, #6
    16b0:	29007791 	stmdbcs	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    16b4:	000011c5 	andeq	r1, r0, r5, asr #3
    16b8:	70021b02 	andvc	r1, r2, r2, lsl #22
    16bc:	3c200002 	stccc	0, cr0, [r0], #-8
    16c0:	01000000 	mrseq	r0, (UNDEF: 0)
    16c4:	0017159c 	mulseq	r7, ip, r5
    16c8:	03a12a00 			; <UNDEFINED> instruction: 0x03a12a00
    16cc:	1b020000 	blne	816d4 <startup-0x1ff7e92c>
    16d0:	00031002 	andeq	r1, r3, r2
    16d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    16d8:	0005962a 	andeq	r9, r5, sl, lsr #12
    16dc:	021b0200 	andseq	r0, fp, #0, 4
    16e0:	00000310 	andeq	r0, r0, r0, lsl r3
    16e4:	2a709102 	bcs	1c25af4 <startup-0x1e3da50c>
    16e8:	0000059b 	muleq	r0, fp, r5
    16ec:	10021b02 	andne	r1, r2, r2, lsl #22
    16f0:	02000003 	andeq	r0, r0, #3
    16f4:	a02a6c91 	mlage	sl, r1, ip, r6
    16f8:	02000005 	andeq	r0, r0, #5
    16fc:	0310021b 	tsteq	r0, #-1342177279	; 0xb0000001
    1700:	91020000 	mrsls	r0, (UNDEF: 2)
    1704:	05a52a68 	streq	r2, [r5, #2664]!	; 0xa68
    1708:	1b020000 	blne	81710 <startup-0x1ff7e8f0>
    170c:	00031002 	andeq	r1, r3, r2
    1710:	00910200 	addseq	r0, r1, r0, lsl #4
    1714:	05aa2900 	streq	r2, [sl, #2304]!	; 0x900
    1718:	b8020000 	stmdalt	r2, {}	; <UNPREDICTABLE>
    171c:	00025001 	andeq	r5, r2, r1
    1720:	00002020 	andeq	r2, r0, r0, lsr #32
    1724:	3b9c0100 	blcc	fe701b2c <GPIO_Ports+0xde6ff3a0>
    1728:	2a000017 	bcs	178c <startup-0x1fffe874>
    172c:	00000adc 	ldrdeq	r0, [r0], -ip
    1730:	a101b802 	tstge	r1, r2, lsl #16
    1734:	02000006 	andeq	r0, r0, #6
    1738:	29007791 	stmdbcs	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    173c:	00000446 	andeq	r0, r0, r6, asr #8
    1740:	0c019002 	stceq	0, cr9, [r1], {2}
    1744:	44200002 	strtmi	r0, [r0], #-2
    1748:	01000000 	mrseq	r0, (UNDEF: 0)
    174c:	0017619c 	mulseq	r7, ip, r1
    1750:	06b42a00 	ldrteq	r2, [r4], r0, lsl #20
    1754:	90020000 	andls	r0, r2, r0
    1758:	0002d601 	andeq	sp, r2, r1, lsl #12
    175c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1760:	0a2d2900 	beq	b4bb68 <startup-0x1f4b4498>
    1764:	77020000 	strvc	r0, [r2, -r0]
    1768:	0001ec01 	andeq	lr, r1, r1, lsl #24
    176c:	00002020 	andeq	r2, r0, r0, lsr #32
    1770:	879c0100 	ldrhi	r0, [ip, r0, lsl #2]
    1774:	2a000017 	bcs	17d8 <startup-0x1fffe828>
    1778:	00000adc 	ldrdeq	r0, [r0], -ip
    177c:	a1017702 	tstge	r1, r2, lsl #14
    1780:	02000006 	andeq	r0, r0, #6
    1784:	29007791 	stmdbcs	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    1788:	00000a41 	andeq	r0, r0, r1, asr #20
    178c:	ae015302 	cdpge	3, 0, cr5, cr1, cr2, {0}
    1790:	3e200001 	cdpcc	0, 2, cr0, cr0, cr1, {0}
    1794:	01000000 	mrseq	r0, (UNDEF: 0)
    1798:	0017bc9c 	mulseq	r7, ip, ip
    179c:	0a4b2a00 	beq	12cbfa4 <startup-0x1ed3405c>
    17a0:	53020000 	movwpl	r0, #8192	; 0x2000
    17a4:	0002d601 	andeq	sp, r2, r1, lsl #12
    17a8:	6f910200 	svcvs	0x00910200
    17ac:	000e0c2c 	andeq	r0, lr, ip, lsr #24
    17b0:	01550200 	cmpeq	r5, r0, lsl #4
    17b4:	00000310 	andeq	r0, r0, r0, lsl r3
    17b8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    17bc:	000d2831 	andeq	r2, sp, r1, lsr r8
    17c0:	01340200 	teqeq	r4, r0, lsl #4
    17c4:	000006c8 	andeq	r0, r0, r8, asr #13
    17c8:	20000150 	andcs	r0, r0, r0, asr r1
    17cc:	0000005e 	andeq	r0, r0, lr, asr r0
    17d0:	18049c01 	stmdane	r4, {r0, sl, fp, ip, pc}
    17d4:	e52c0000 	str	r0, [ip, #-0]!
    17d8:	02000006 	andeq	r0, r0, #6
    17dc:	031b0136 	tsteq	fp, #-2147483635	; 0x8000000d
    17e0:	91020000 	mrsls	r0, (UNDEF: 2)
    17e4:	0e4d2c68 	cdpeq	12, 4, cr2, cr13, cr8, {3}
    17e8:	37020000 	strcc	r0, [r2, -r0]
    17ec:	0006c801 	andeq	ip, r6, r1, lsl #16
    17f0:	6f910200 	svcvs	0x00910200
    17f4:	000e4a2c 	andeq	r4, lr, ip, lsr #20
    17f8:	01380200 	teqeq	r8, r0, lsl #4
    17fc:	0000066e 	andeq	r0, r0, lr, ror #12
    1800:	006e9102 	rsbeq	r9, lr, r2, lsl #2
    1804:	00069229 	andeq	r9, r6, r9, lsr #4
    1808:	011c0200 	tsteq	ip, r0, lsl #4
    180c:	20000128 	andcs	r0, r0, r8, lsr #2
    1810:	00000028 	andeq	r0, r0, r8, lsr #32
    1814:	182a9c01 	stmdane	sl!, {r0, sl, fp, ip, pc}
    1818:	622a0000 	eorvs	r0, sl, #0
    181c:	02000007 	andeq	r0, r0, #7
    1820:	02d6011c 	sbcseq	r0, r6, #28, 2
    1824:	91020000 	mrsls	r0, (UNDEF: 2)
    1828:	c7270077 			; <UNDEFINED> instruction: 0xc7270077
    182c:	02000002 	andeq	r0, r0, #2
    1830:	0000b8e1 	andeq	fp, r0, r1, ror #17
    1834:	00007020 	andeq	r7, r0, r0, lsr #32
    1838:	329c0100 	addscc	r0, ip, #0, 2
    183c:	00000d99 	muleq	r0, r9, sp
    1840:	1006e001 	andne	lr, r6, r1
    1844:	70000003 	andvc	r0, r0, r3
    1848:	48200000 	stmdami	r0!, {}	; <UNPREDICTABLE>
    184c:	01000000 	mrseq	r0, (UNDEF: 0)
    1850:	0018659c 	mulseq	r8, ip, r5
    1854:	09032a00 	stmdbeq	r3, {r9, fp, sp}
    1858:	e0010000 	and	r0, r1, r0
    185c:	00031006 	andeq	r1, r3, r6
    1860:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1864:	103f3300 	eorsne	r3, pc, r0, lsl #6
    1868:	5d010000 	stcpl	0, cr0, [r1, #-0]
    186c:	00001006 	andeq	r1, r0, r6
    1870:	00006020 	andeq	r6, r0, r0, lsr #32
    1874:	2a9c0100 	bcs	fe701c7c <GPIO_Ports+0xde6ff4f0>
    1878:	00000fc5 	andeq	r0, r0, r5, asr #31
    187c:	5a065d01 	bpl	198c88 <startup-0x1fe67378>
    1880:	02000002 	andeq	r0, r0, #2
    1884:	6a2a7791 	bvs	a9f6d0 <startup-0x1f560930>
    1888:	01000014 	tsteq	r0, r4, lsl r0
    188c:	0310065d 	tsteq	r0, #97517568	; 0x5d00000
    1890:	91020000 	mrsls	r0, (UNDEF: 2)
    1894:	23000070 	movwcs	r0, #112	; 0x70
    1898:	04000006 	streq	r0, [r0], #-6
    189c:	00033200 	andeq	r3, r3, r0, lsl #4
    18a0:	c9010400 	stmdbgt	r1, {sl}
    18a4:	0c000005 	stceq	0, cr0, [r0], {5}
    18a8:	0000125d 	andeq	r1, r0, sp, asr r2
    18ac:	00000529 	andeq	r0, r0, r9, lsr #10
    18b0:	20001444 	andcs	r1, r0, r4, asr #8
    18b4:	0000050e 	andeq	r0, r0, lr, lsl #10
    18b8:	0000056a 	andeq	r0, r0, sl, ror #10
    18bc:	dc060102 	stfles	f0, [r6], {2}
    18c0:	03000003 	movweq	r0, #3
    18c4:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    18c8:	00372b02 	eorseq	r2, r7, r2, lsl #22
    18cc:	01020000 	mrseq	r0, (UNDEF: 2)
    18d0:	0003da08 	andeq	sp, r3, r8, lsl #20
    18d4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    18d8:	00000f25 	andeq	r0, r0, r5, lsr #30
    18dc:	0004e903 	andeq	lr, r4, r3, lsl #18
    18e0:	50390200 	eorspl	r0, r9, r0, lsl #4
    18e4:	02000000 	andeq	r0, r0, #0
    18e8:	10a90702 	adcne	r0, r9, r2, lsl #14
    18ec:	3c030000 	stccc	0, cr0, [r3], {-0}
    18f0:	02000011 	andeq	r0, r0, #17
    18f4:	0000624d 	andeq	r6, r0, sp, asr #4
    18f8:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    18fc:	00000991 	muleq	r0, r1, r9
    1900:	00093a03 	andeq	r3, r9, r3, lsl #20
    1904:	744f0200 	strbvc	r0, [pc], #-512	; 190c <startup-0x1fffe6f4>
    1908:	02000000 	andeq	r0, r0, #0
    190c:	0cf40704 	ldcleq	7, cr0, [r4], #16
    1910:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1914:	00098c05 	andeq	r8, r9, r5, lsl #24
    1918:	07080200 	streq	r0, [r8, -r0, lsl #4]
    191c:	00000cef 	andeq	r0, r0, pc, ror #25
    1920:	69050404 	stmdbvs	r5, {r2, sl}
    1924:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1928:	0cf90704 	ldcleq	7, cr0, [r9], #16
    192c:	b6030000 	strlt	r0, [r3], -r0
    1930:	03000001 	movweq	r0, #1
    1934:	00002c18 	andeq	r2, r0, r8, lsl ip
    1938:	04eb0300 	strbteq	r0, [fp], #768	; 0x300
    193c:	24030000 	strcs	r0, [r3], #-0
    1940:	00000045 	andeq	r0, r0, r5, asr #32
    1944:	0000a205 	andeq	sl, r0, r5, lsl #4
    1948:	113e0300 	teqne	lr, r0, lsl #6
    194c:	2c030000 	stccs	0, cr0, [r3], {-0}
    1950:	00000057 	andeq	r0, r0, r7, asr r0
    1954:	0000b205 	andeq	fp, r0, r5, lsl #4
    1958:	093c0300 	ldmdbeq	ip!, {r8, r9}
    195c:	30030000 	andcc	r0, r3, r0
    1960:	00000069 	andeq	r0, r0, r9, rrx
    1964:	0000c205 	andeq	ip, r0, r5, lsl #4
    1968:	0fca0600 	svceq	0x00ca0600
    196c:	fa040000 	blx	101974 <startup-0x1fefe68c>
    1970:	0000bd06 	andeq	fp, r0, r6, lsl #26
    1974:	08400700 	stmdaeq	r0, {r8, r9, sl}^
    1978:	3b050000 	blcc	141980 <startup-0x1febe680>
    197c:	000000c2 	andeq	r0, r0, r2, asr #1
    1980:	37010708 	strcc	r0, [r1, -r8, lsl #14]
    1984:	06000000 	streq	r0, [r0], -r0
    1988:	0104035f 	tsteq	r4, pc, asr r3
    198c:	ca090000 	bgt	241994 <startup-0x1fdbe66c>
    1990:	00000009 	andeq	r0, r0, r9
    1994:	000f7f09 	andeq	r7, pc, r9, lsl #30
    1998:	0a000100 	beq	1da0 <startup-0x1fffe260>
    199c:	05c30628 	strbeq	r0, [r3, #1576]	; 0x628
    19a0:	00000190 	muleq	r0, r0, r1
    19a4:	0010390b 	andseq	r3, r0, fp, lsl #18
    19a8:	05c50600 	strbeq	r0, [r5, #1536]	; 0x600
    19ac:	000000cd 	andeq	r0, r0, sp, asr #1
    19b0:	0dfa0b00 			; <UNDEFINED> instruction: 0x0dfa0b00
    19b4:	c6060000 	strgt	r0, [r6], -r0
    19b8:	0000cd05 	andeq	ip, r0, r5, lsl #26
    19bc:	ed0b0400 	cfstrs	mvf0, [fp, #-0]
    19c0:	06000008 	streq	r0, [r0], -r8
    19c4:	00cd05c7 	sbceq	r0, sp, r7, asr #11
    19c8:	0b080000 	bleq	2019d0 <startup-0x1fdfe630>
    19cc:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
    19d0:	cd05c806 	stcgt	8, cr12, [r5, #-24]	; 0xffffffe8
    19d4:	0c000000 	stceq	0, cr0, [r0], {-0}
    19d8:	5244490c 	subpl	r4, r4, #12, 18	; 0x30000
    19dc:	05c90600 	strbeq	r0, [r9, #1536]	; 0x600
    19e0:	000000cd 	andeq	r0, r0, sp, asr #1
    19e4:	444f0c10 	strbmi	r0, [pc], #-3088	; 19ec <startup-0x1fffe614>
    19e8:	ca060052 	bgt	181b38 <startup-0x1fe7e4c8>
    19ec:	0000cd05 	andeq	ip, r0, r5, lsl #26
    19f0:	0a0b1400 	beq	2c69f8 <startup-0x1fd39608>
    19f4:	0600000a 	streq	r0, [r0], -sl
    19f8:	00ad05cb 	adceq	r0, sp, fp, asr #11
    19fc:	0b180000 	bleq	601a04 <startup-0x1f9fe5fc>
    1a00:	000009e7 	andeq	r0, r0, r7, ror #19
    1a04:	ad05cc06 	stcge	12, cr12, [r5, #-24]	; 0xffffffe8
    1a08:	1a000000 	bne	1a10 <startup-0x1fffe5f0>
    1a0c:	0008ac0b 	andeq	sl, r8, fp, lsl #24
    1a10:	05cd0600 	strbeq	r0, [sp, #1536]	; 0x600
    1a14:	000000cd 	andeq	r0, r0, sp, asr #1
    1a18:	46410c1c 			; <UNDEFINED> instruction: 0x46410c1c
    1a1c:	ce060052 	mcrgt	0, 0, r0, cr6, cr2, {2}
    1a20:	0001a005 	andeq	sl, r1, r5
    1a24:	0d002000 	stceq	0, cr2, [r0, #-0]
    1a28:	000000cd 	andeq	r0, r0, sp, asr #1
    1a2c:	000001a0 	andeq	r0, r0, r0, lsr #3
    1a30:	0000900e 	andeq	r9, r0, lr
    1a34:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
    1a38:	00000190 	muleq	r0, r0, r1
    1a3c:	000faa0f 	andeq	sl, pc, pc, lsl #20
    1a40:	05cf0600 	strbeq	r0, [pc, #1536]	; 2048 <startup-0x1fffdfb8>
    1a44:	00000104 	andeq	r0, r0, r4, lsl #2
    1a48:	37010710 	smladcc	r1, r0, r7, r0
    1a4c:	07000000 	streq	r0, [r0, -r0]
    1a50:	0001d742 	andeq	sp, r1, r2, asr #14
    1a54:	087e0900 	ldmdaeq	lr!, {r8, fp}^
    1a58:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1a5c:	0000070f 	andeq	r0, r0, pc, lsl #14
    1a60:	02620901 	rsbeq	r0, r2, #16384	; 0x4000
    1a64:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1a68:	0000029e 	muleq	r0, lr, r2
    1a6c:	88030003 	stmdahi	r3, {r0, r1}
    1a70:	0700000d 	streq	r0, [r0, -sp]
    1a74:	0001b147 	andeq	fp, r1, r7, asr #2
    1a78:	01071000 	mrseq	r1, (UNDEF: 7)
    1a7c:	00000037 	andeq	r0, r0, r7, lsr r0
    1a80:	01fc4f07 	mvnseq	r4, r7, lsl #30
    1a84:	1d090000 	stcne	0, cr0, [r9, #-0]
    1a88:	00000004 	andeq	r0, r0, r4
    1a8c:	00035f09 	andeq	r5, r3, r9, lsl #30
    1a90:	03000100 	movweq	r0, #256	; 0x100
    1a94:	0000010a 	andeq	r0, r0, sl, lsl #2
    1a98:	01e25207 	mvneq	r5, r7, lsl #4
    1a9c:	07100000 	ldreq	r0, [r0, -r0]
    1aa0:	00003701 	andeq	r3, r0, r1, lsl #14
    1aa4:	2d5a0700 	ldclcs	7, cr0, [sl, #-0]
    1aa8:	09000002 	stmdbeq	r0, {r1}
    1aac:	0000050c 	andeq	r0, r0, ip, lsl #10
    1ab0:	09560900 	ldmdbeq	r6, {r8, fp}^
    1ab4:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1ab8:	000011b5 			; <UNDEFINED> instruction: 0x000011b5
    1abc:	0a100902 	beq	403ecc <startup-0x1fbfc134>
    1ac0:	00030000 	andeq	r0, r3, r0
    1ac4:	000e8f03 	andeq	r8, lr, r3, lsl #30
    1ac8:	075f0700 	ldrbeq	r0, [pc, -r0, lsl #14]
    1acc:	10000002 	andne	r0, r0, r2
    1ad0:	00370107 	eorseq	r0, r7, r7, lsl #2
    1ad4:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    1ad8:	00000258 	andeq	r0, r0, r8, asr r2
    1adc:	00009b09 	andeq	r9, r0, r9, lsl #22
    1ae0:	6d090000 	stcvs	0, cr0, [r9, #-0]
    1ae4:	01000010 	tsteq	r0, r0, lsl r0
    1ae8:	0001e609 	andeq	lr, r1, r9, lsl #12
    1aec:	03000200 	movweq	r0, #512	; 0x200
    1af0:	0000048b 	andeq	r0, r0, fp, lsl #9
    1af4:	02387207 	eorseq	r7, r8, #1879048192	; 0x70000000
    1af8:	07100000 	ldreq	r0, [r0, -r0]
    1afc:	00003701 	andeq	r3, r0, r1, lsl #14
    1b00:	7d7a0700 	ldclvc	7, cr0, [sl, #-0]
    1b04:	09000002 	stmdbeq	r0, {r1}
    1b08:	0000121f 	andeq	r1, r0, pc, lsl r2
    1b0c:	11df0900 	bicsne	r0, pc, r0, lsl #18
    1b10:	00010000 	andeq	r0, r1, r0
    1b14:	00134a03 	andseq	r4, r3, r3, lsl #20
    1b18:	637d0700 	cmnvs	sp, #0, 14
    1b1c:	11000002 	tstne	r0, r2
    1b20:	cd840708 	stcgt	7, cr0, [r4, #32]
    1b24:	12000002 	andne	r0, r0, #2
    1b28:	00000eb3 			; <UNDEFINED> instruction: 0x00000eb3
    1b2c:	00c28607 	sbceq	r8, r2, r7, lsl #12
    1b30:	12000000 	andne	r0, r0, #0
    1b34:	00000d46 	andeq	r0, r0, r6, asr #26
    1b38:	01d78907 	bicseq	r8, r7, r7, lsl #18
    1b3c:	12040000 	andne	r0, r4, #0
    1b40:	00000ae5 	andeq	r0, r0, r5, ror #21
    1b44:	022d8c07 	eoreq	r8, sp, #1792	; 0x700
    1b48:	12050000 	andne	r0, r5, #0
    1b4c:	0000092f 	andeq	r0, r0, pc, lsr #18
    1b50:	01fc8f07 	mvnseq	r8, r7, lsl #30
    1b54:	12060000 	andne	r0, r6, #0
    1b58:	00000ee0 	andeq	r0, r0, r0, ror #29
    1b5c:	02589207 	subseq	r9, r8, #1879048192	; 0x70000000
    1b60:	00070000 	andeq	r0, r7, r0
    1b64:	00036d03 	andeq	r6, r3, r3, lsl #26
    1b68:	88940700 	ldmhi	r4, {r8, r9, sl}
    1b6c:	13000002 	movwne	r0, #2
    1b70:	00001387 	andeq	r1, r0, r7, lsl #7
    1b74:	ae024301 	cdpge	3, 0, cr4, cr2, cr1, {0}
    1b78:	a4200018 	strtge	r0, [r0], #-24	; 0xffffffe8
    1b7c:	01000000 	mrseq	r0, (UNDEF: 0)
    1b80:	00033a9c 	muleq	r3, ip, sl
    1b84:	136a1400 	cmnne	sl, #0, 8
    1b88:	43010000 	movwmi	r0, #4096	; 0x1000
    1b8c:	00033a02 	andeq	r3, r3, r2, lsl #20
    1b90:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1b94:	00131514 	andseq	r1, r3, r4, lsl r5
    1b98:	02430100 	subeq	r0, r3, #0, 2
    1b9c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1ba0:	146a9102 	strbtne	r9, [sl], #-258	; 0xfffffefe
    1ba4:	000011fb 	strdeq	r1, [r0], -fp
    1ba8:	97024301 	strls	r4, [r2, -r1, lsl #6]
    1bac:	02000000 	andeq	r0, r0, #0
    1bb0:	03156991 	tsteq	r5, #2375680	; 0x244000
    1bb4:	01000012 	tsteq	r0, r2, lsl r0
    1bb8:	00c20245 	sbceq	r0, r2, r5, asr #4
    1bbc:	91020000 	mrsls	r0, (UNDEF: 2)
    1bc0:	13801574 	orrne	r1, r0, #116, 10	; 0x1d000000
    1bc4:	46010000 	strmi	r0, [r1], -r0
    1bc8:	0000c202 	andeq	ip, r0, r2, lsl #4
    1bcc:	70910200 	addsvc	r0, r1, r0, lsl #4
    1bd0:	a5041600 	strge	r1, [r4, #-1536]	; 0xfffffa00
    1bd4:	13000001 	movwne	r0, #1
    1bd8:	00001370 	andeq	r1, r0, r0, ror r3
    1bdc:	8a01f001 	bhi	7dbe8 <startup-0x1ff82418>
    1be0:	24200018 	strtcs	r0, [r0], #-24	; 0xffffffe8
    1be4:	01000000 	mrseq	r0, (UNDEF: 0)
    1be8:	0003759c 	muleq	r3, ip, r5
    1bec:	136a1400 	cmnne	sl, #0, 8
    1bf0:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1bf4:	00033a01 	andeq	r3, r3, r1, lsl #20
    1bf8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1bfc:	000eb314 	andeq	fp, lr, r4, lsl r3
    1c00:	01f00100 	mvnseq	r0, r0, lsl #2
    1c04:	000000a2 	andeq	r0, r0, r2, lsr #1
    1c08:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1c0c:	00135f13 	andseq	r5, r3, r3, lsl pc
    1c10:	01e00100 	mvneq	r0, r0, lsl #2
    1c14:	2000186c 	andcs	r1, r0, ip, ror #16
    1c18:	0000001e 	andeq	r0, r0, lr, lsl r0
    1c1c:	03aa9c01 			; <UNDEFINED> instruction: 0x03aa9c01
    1c20:	6a140000 	bvs	501c28 <startup-0x1fafe3d8>
    1c24:	01000013 	tsteq	r0, r3, lsl r0
    1c28:	033a01e0 	teqeq	sl, #224, 2	; 0x38
    1c2c:	91020000 	mrsls	r0, (UNDEF: 2)
    1c30:	130d1474 	movwne	r1, #54388	; 0xd474
    1c34:	e0010000 	and	r0, r1, r0
    1c38:	0000a201 	andeq	sl, r0, r1, lsl #4
    1c3c:	72910200 	addsvc	r0, r1, #0, 4
    1c40:	12291300 	eorne	r1, r9, #0, 6
    1c44:	c7010000 	strgt	r0, [r1, -r0]
    1c48:	00183201 	andseq	r3, r8, r1, lsl #4
    1c4c:	00003a20 	andeq	r3, r0, r0, lsr #20
    1c50:	ee9c0100 	fmle	f0, f4, f0
    1c54:	14000003 	strne	r0, [r0], #-3
    1c58:	0000136a 	andeq	r1, r0, sl, ror #6
    1c5c:	3a01c701 	bcc	73868 <startup-0x1ff8c798>
    1c60:	02000003 	andeq	r0, r0, #3
    1c64:	b3147491 	tstlt	r4, #-1862270976	; 0x91000000
    1c68:	0100000e 	tsteq	r0, lr
    1c6c:	00a201c7 	adceq	r0, r2, r7, asr #3
    1c70:	91020000 	mrsls	r0, (UNDEF: 2)
    1c74:	12181472 	andsne	r1, r8, #1912602624	; 0x72000000
    1c78:	c7010000 	strgt	r0, [r1, -r0]
    1c7c:	00027d01 	andeq	r7, r2, r1, lsl #26
    1c80:	71910200 	orrsvc	r0, r1, r0, lsl #4
    1c84:	124e1300 	subne	r1, lr, #0, 6
    1c88:	b1010000 	mrslt	r0, (UNDEF: 1)
    1c8c:	00181401 	andseq	r1, r8, r1, lsl #8
    1c90:	00001e20 	andeq	r1, r0, r0, lsr #28
    1c94:	239c0100 	orrscs	r0, ip, #0, 2
    1c98:	14000004 	strne	r0, [r0], #-4
    1c9c:	0000136a 	andeq	r1, r0, sl, ror #6
    1ca0:	3a01b101 	bcc	6e0ac <startup-0x1ff91f54>
    1ca4:	02000003 	andeq	r0, r0, #3
    1ca8:	b3147491 	tstlt	r4, #-1862270976	; 0x91000000
    1cac:	0100000e 	tsteq	r0, lr
    1cb0:	00a201b1 	strhteq	r0, [r2], r1
    1cb4:	91020000 	mrsls	r0, (UNDEF: 2)
    1cb8:	37130072 			; <UNDEFINED> instruction: 0x37130072
    1cbc:	01000012 	tsteq	r0, r2, lsl r0
    1cc0:	17f6019c 			; <UNDEFINED> instruction: 0x17f6019c
    1cc4:	001e2000 	andseq	r2, lr, r0
    1cc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ccc:	00000458 	andeq	r0, r0, r8, asr r4
    1cd0:	00136a14 	andseq	r6, r3, r4, lsl sl
    1cd4:	019c0100 	orrseq	r0, ip, r0, lsl #2
    1cd8:	0000033a 	andeq	r0, r0, sl, lsr r3
    1cdc:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    1ce0:	00000eb3 			; <UNDEFINED> instruction: 0x00000eb3
    1ce4:	a2019c01 	andge	r9, r1, #256	; 0x100
    1ce8:	02000000 	andeq	r0, r0, #0
    1cec:	17007291 			; <UNDEFINED> instruction: 0x17007291
    1cf0:	000011e7 	andeq	r1, r0, r7, ror #3
    1cf4:	a2018801 	andge	r8, r1, #65536	; 0x10000
    1cf8:	e0000000 	and	r0, r0, r0
    1cfc:	16200017 			; <UNDEFINED> instruction: 0x16200017
    1d00:	01000000 	mrseq	r0, (UNDEF: 0)
    1d04:	0004829c 	muleq	r4, ip, r2
    1d08:	136a1400 	cmnne	sl, #0, 8
    1d0c:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    1d10:	00033a01 	andeq	r3, r3, r1, lsl #20
    1d14:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1d18:	13981700 	orrsne	r1, r8, #0, 14
    1d1c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1d20:	00009701 	andeq	r9, r0, r1, lsl #14
    1d24:	00179e00 	andseq	r9, r7, r0, lsl #28
    1d28:	00004220 	andeq	r4, r0, r0, lsr #4
    1d2c:	ca9c0100 	bgt	fe702134 <GPIO_Ports+0xde6ff9a8>
    1d30:	14000004 	strne	r0, [r0], #-4
    1d34:	0000136a 	andeq	r1, r0, sl, ror #6
    1d38:	3a016e01 	bcc	5d544 <startup-0x1ffa2abc>
    1d3c:	02000003 	andeq	r0, r0, #3
    1d40:	b3146c91 	tstlt	r4, #37120	; 0x9100
    1d44:	0100000e 	tsteq	r0, lr
    1d48:	00a2016e 	adceq	r0, r2, lr, ror #2
    1d4c:	91020000 	mrsls	r0, (UNDEF: 2)
    1d50:	0f75156a 	svceq	0x0075156a
    1d54:	70010000 	andvc	r0, r1, r0
    1d58:	00009701 	andeq	r9, r0, r1, lsl #14
    1d5c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1d60:	13241700 			; <UNDEFINED> instruction: 0x13241700
    1d64:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1d68:	0000a201 	andeq	sl, r0, r1, lsl #4
    1d6c:	00178800 	andseq	r8, r7, r0, lsl #16
    1d70:	00001620 	andeq	r1, r0, r0, lsr #12
    1d74:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
    1d78:	14000004 	strne	r0, [r0], #-4
    1d7c:	0000136a 	andeq	r1, r0, sl, ror #6
    1d80:	3a015d01 	bcc	5918c <startup-0x1ffa6e74>
    1d84:	02000003 	andeq	r0, r0, #3
    1d88:	17007491 			; <UNDEFINED> instruction: 0x17007491
    1d8c:	000012e7 	andeq	r1, r0, r7, ror #5
    1d90:	97014301 	strls	r4, [r1, -r1, lsl #6]
    1d94:	46000000 	strmi	r0, [r0], -r0
    1d98:	42200017 	eormi	r0, r0, #23
    1d9c:	01000000 	mrseq	r0, (UNDEF: 0)
    1da0:	00053c9c 	muleq	r5, ip, ip
    1da4:	136a1400 	cmnne	sl, #0, 8
    1da8:	43010000 	movwmi	r0, #4096	; 0x1000
    1dac:	00033a01 	andeq	r3, r3, r1, lsl #20
    1db0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1db4:	000eb314 	andeq	fp, lr, r4, lsl r3
    1db8:	01430100 	mrseq	r0, (UNDEF: 83)
    1dbc:	000000a2 	andeq	r0, r0, r2, lsr #1
    1dc0:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    1dc4:	00000f75 	andeq	r0, r0, r5, ror pc
    1dc8:	97014501 	strls	r4, [r1, -r1, lsl #10]
    1dcc:	02000000 	andeq	r0, r0, #0
    1dd0:	13007791 	movwne	r7, #1937	; 0x791
    1dd4:	00001337 	andeq	r1, r0, r7, lsr r3
    1dd8:	00011501 	andeq	r1, r1, r1, lsl #10
    1ddc:	46200017 			; <UNDEFINED> instruction: 0x46200017
    1de0:	01000000 	mrseq	r0, (UNDEF: 0)
    1de4:	0005809c 	muleq	r5, ip, r0
    1de8:	136a1400 	cmnne	sl, #0, 8
    1dec:	15010000 	strne	r0, [r1, #-0]
    1df0:	00033a01 	andeq	r3, r3, r1, lsl #20
    1df4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1df8:	000eb314 	andeq	fp, lr, r4, lsl r3
    1dfc:	01150100 	tsteq	r5, r0, lsl #2
    1e00:	000000a2 	andeq	r0, r0, r2, lsr #1
    1e04:	186a9102 	stmdane	sl!, {r1, r8, ip, pc}^
    1e08:	00706d74 	rsbseq	r6, r0, r4, ror sp
    1e0c:	cd011701 	stcgt	7, cr1, [r1, #-4]
    1e10:	02000000 	andeq	r0, r0, #0
    1e14:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
    1e18:	00001208 	andeq	r1, r0, r8, lsl #4
    1e1c:	16ccfe01 	strbne	pc, [ip], r1, lsl #28	; <UNPREDICTABLE>
    1e20:	00342000 	eorseq	r2, r4, r0
    1e24:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e28:	000005a4 	andeq	r0, r0, r4, lsr #11
    1e2c:	0012fd1a 	andseq	pc, r2, sl, lsl sp	; <UNPREDICTABLE>
    1e30:	a4fe0100 	ldrbtge	r0, [lr], #256	; 0x100
    1e34:	02000005 	andeq	r0, r0, #5
    1e38:	16007491 			; <UNDEFINED> instruction: 0x16007491
    1e3c:	0002cd04 	andeq	ip, r2, r4, lsl #26
    1e40:	12441900 	subne	r1, r4, #0, 18
    1e44:	ca010000 	bgt	41e4c <startup-0x1ffbe1b4>
    1e48:	200015b4 			; <UNDEFINED> instruction: 0x200015b4
    1e4c:	00000118 	andeq	r0, r0, r8, lsl r1
    1e50:	06069c01 	streq	r9, [r6], -r1, lsl #24
    1e54:	6a1a0000 	bvs	681e5c <startup-0x1f97e1a4>
    1e58:	01000013 	tsteq	r0, r3, lsl r0
    1e5c:	00033aca 	andeq	r3, r3, sl, asr #21
    1e60:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1e64:	0012fd1a 	andseq	pc, r2, sl, lsl sp	; <UNPREDICTABLE>
    1e68:	a4ca0100 	strbge	r0, [sl], #256	; 0x100
    1e6c:	02000005 	andeq	r0, r0, #5
    1e70:	d81b6091 	ldmdale	fp, {r0, r4, r7, sp, lr}
    1e74:	01000011 	tsteq	r0, r1, lsl r0
    1e78:	0000c2cc 	andeq	ip, r0, ip, asr #5
    1e7c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1e80:	736f701c 	cmnvc	pc, #28
    1e84:	c2cc0100 	sbcgt	r0, ip, #0, 2
    1e88:	02000000 	andeq	r0, r0, #0
    1e8c:	541b7091 	ldrpl	r7, [fp], #-145	; 0xffffff6f
    1e90:	01000013 	tsteq	r0, r3, lsl r0
    1e94:	0000c2cc 	andeq	ip, r0, ip, asr #5
    1e98:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1e9c:	12db1d00 	sbcsne	r1, fp, #0, 26
    1ea0:	7f010000 	svcvc	0x00010000
    1ea4:	20001444 	andcs	r1, r0, r4, asr #8
    1ea8:	00000170 	andeq	r0, r0, r0, ror r1
    1eac:	6a1a9c01 	bvs	6a8eb8 <startup-0x1f957148>
    1eb0:	01000013 	tsteq	r0, r3, lsl r0
    1eb4:	00033a7f 	andeq	r3, r3, pc, ror sl
    1eb8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1ebc:	05430000 	strbeq	r0, [r3, #-0]
    1ec0:	00040000 	andeq	r0, r4, r0
    1ec4:	000004ee 	andeq	r0, r0, lr, ror #9
    1ec8:	05c90104 	strbeq	r0, [r9, #260]	; 0x104
    1ecc:	cd0c0000 	stcgt	0, cr0, [ip, #-0]
    1ed0:	29000014 	stmdbcs	r0, {r2, r4}
    1ed4:	54000005 	strpl	r0, [r0], #-5
    1ed8:	c4200019 	strtgt	r0, [r0], #-25	; 0xffffffe7
    1edc:	23000001 	movwcs	r0, #1
    1ee0:	02000008 	andeq	r0, r0, #8
    1ee4:	03dc0601 	bicseq	r0, ip, #1048576	; 0x100000
    1ee8:	b4030000 	strlt	r0, [r3], #-0
    1eec:	02000001 	andeq	r0, r0, #1
    1ef0:	0000372b 	andeq	r3, r0, fp, lsr #14
    1ef4:	08010200 	stmdaeq	r1, {r9}
    1ef8:	000003da 	ldrdeq	r0, [r0], -sl
    1efc:	25050202 	strcs	r0, [r5, #-514]	; 0xfffffdfe
    1f00:	0200000f 	andeq	r0, r0, #15
    1f04:	10a90702 	adcne	r0, r9, r2, lsl #14
    1f08:	3c030000 	stccc	0, cr0, [r3], {-0}
    1f0c:	02000011 	andeq	r0, r0, #17
    1f10:	0000574d 	andeq	r5, r0, sp, asr #14
    1f14:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    1f18:	00000991 	muleq	r0, r1, r9
    1f1c:	00093a03 	andeq	r3, r9, r3, lsl #20
    1f20:	694f0200 	stmdbvs	pc, {r9}^	; <UNPREDICTABLE>
    1f24:	02000000 	andeq	r0, r0, #0
    1f28:	0cf40704 	ldcleq	7, cr0, [r4], #16
    1f2c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1f30:	00098c05 	andeq	r8, r9, r5, lsl #24
    1f34:	07080200 	streq	r0, [r8, -r0, lsl #4]
    1f38:	00000cef 	andeq	r0, r0, pc, ror #25
    1f3c:	69050404 	stmdbvs	r5, {r2, sl}
    1f40:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1f44:	0cf90704 	ldcleq	7, cr0, [r9], #16
    1f48:	b6030000 	strlt	r0, [r3], -r0
    1f4c:	03000001 	movweq	r0, #1
    1f50:	00002c18 	andeq	r2, r0, r8, lsl ip
    1f54:	008c0500 	addeq	r0, ip, r0, lsl #10
    1f58:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    1f5c:	03000011 	movweq	r0, #17
    1f60:	00004c2c 	andeq	r4, r0, ip, lsr #24
    1f64:	009c0500 	addseq	r0, ip, r0, lsl #10
    1f68:	3c030000 	stccc	0, cr0, [r3], {-0}
    1f6c:	03000009 	movweq	r0, #9
    1f70:	00005e30 	andeq	r5, r0, r0, lsr lr
    1f74:	00ac0500 	adceq	r0, ip, r0, lsl #10
    1f78:	b7060000 	strlt	r0, [r6, -r0]
    1f7c:	07000000 	streq	r0, [r0, -r0]
    1f80:	a0040e04 	andge	r0, r4, r4, lsl #28
    1f84:	00017d01 	andeq	r7, r1, r1, lsl #26
    1f88:	115a0800 	cmpne	sl, r0, lsl #16
    1f8c:	a2040000 	andge	r0, r4, #0
    1f90:	00018d01 	andeq	r8, r1, r1, lsl #26
    1f94:	c6080000 	strgt	r0, [r8], -r0
    1f98:	04000003 	streq	r0, [r0], #-3
    1f9c:	019201a3 	orrseq	r0, r2, r3, lsr #3
    1fa0:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    1fa4:	00000d79 	andeq	r0, r0, r9, ror sp
    1fa8:	8d01a404 	cfstrshi	mvf10, [r1, #-16]
    1fac:	80000001 	andhi	r0, r0, r1
    1fb0:	00000508 	andeq	r0, r0, r8, lsl #10
    1fb4:	01a50400 			; <UNDEFINED> instruction: 0x01a50400
    1fb8:	00000192 	muleq	r0, r2, r1
    1fbc:	10ea09a0 	rscne	r0, sl, r0, lsr #19
    1fc0:	a6040000 	strge	r0, [r4], -r0
    1fc4:	00018d01 	andeq	r8, r1, r1, lsl #26
    1fc8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1fcc:	00000454 	andeq	r0, r0, r4, asr r4
    1fd0:	9201a704 	andls	sl, r1, #4, 14	; 0x100000
    1fd4:	20000001 	andcs	r0, r0, r1
    1fd8:	016e0901 	cmneq	lr, r1, lsl #18
    1fdc:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    1fe0:	00018d01 	andeq	r8, r1, r1, lsl #26
    1fe4:	09018000 	stmdbeq	r1, {pc}
    1fe8:	0000045e 	andeq	r0, r0, lr, asr r4
    1fec:	9201a904 	andls	sl, r1, #4, 18	; 0x10000
    1ff0:	a0000001 	andge	r0, r0, r1
    1ff4:	04180901 	ldreq	r0, [r8], #-2305	; 0xfffff6ff
    1ff8:	aa040000 	bge	102000 <startup-0x1fefe000>
    1ffc:	00018d01 	andeq	r8, r1, r1, lsl #26
    2000:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    2004:	000003fa 	strdeq	r0, [r0], -sl
    2008:	a201ab04 	andge	sl, r1, #4, 22	; 0x1000
    200c:	20000001 	andcs	r0, r0, r1
    2010:	50490a02 	subpl	r0, r9, r2, lsl #20
    2014:	01ac0400 			; <UNDEFINED> instruction: 0x01ac0400
    2018:	000001c2 	andeq	r0, r0, r2, asr #3
    201c:	04090300 	streq	r0, [r9], #-768	; 0xfffffd00
    2020:	04000004 	streq	r0, [r0], #-4
    2024:	01c701ad 	biceq	r0, r7, sp, lsr #3
    2028:	03f00000 	mvnseq	r0, #0
    202c:	0006bc09 	andeq	fp, r6, r9, lsl #24
    2030:	01ae0400 			; <UNDEFINED> instruction: 0x01ae0400
    2034:	000000b7 	strheq	r0, [r0], -r7
    2038:	0b000e00 	bleq	5840 <startup-0x1fffa7c0>
    203c:	000000b7 	strheq	r0, [r0], -r7
    2040:	0000018d 	andeq	r0, r0, sp, lsl #3
    2044:	0000850c 	andeq	r8, r0, ip, lsl #10
    2048:	05000700 	streq	r0, [r0, #-1792]	; 0xfffff900
    204c:	0000017d 	andeq	r0, r0, sp, ror r1
    2050:	0000ac0b 	andeq	sl, r0, fp, lsl #24
    2054:	0001a200 	andeq	sl, r1, r0, lsl #4
    2058:	00850c00 	addeq	r0, r5, r0, lsl #24
    205c:	00170000 	andseq	r0, r7, r0
    2060:	0000ac0b 	andeq	sl, r0, fp, lsl #24
    2064:	0001b200 	andeq	fp, r1, r0, lsl #4
    2068:	00850c00 	addeq	r0, r5, r0, lsl #24
    206c:	00370000 	eorseq	r0, r7, r0
    2070:	0000970b 	andeq	r9, r0, fp, lsl #14
    2074:	0001c200 	andeq	ip, r1, r0, lsl #4
    2078:	00850c00 	addeq	r0, r5, r0, lsl #24
    207c:	00ef0000 	rsceq	r0, pc, r0
    2080:	0001b205 	andeq	fp, r1, r5, lsl #4
    2084:	00ac0b00 	adceq	r0, ip, r0, lsl #22
    2088:	01d80000 	bicseq	r0, r8, r0
    208c:	850d0000 	strhi	r0, [sp, #-0]
    2090:	83000000 	movwhi	r0, #0
    2094:	af0e0002 	svcge	0x000e0002
    2098:	0400000c 	streq	r0, [r0], #-12
    209c:	00c101af 	sbceq	r0, r1, pc, lsr #3
    20a0:	8c0f0000 	stchi	0, cr0, [pc], {-0}
    20a4:	ff01c004 			; <UNDEFINED> instruction: 0xff01c004
    20a8:	08000002 	stmdaeq	r0, {r1}
    20ac:	00000225 	andeq	r0, r0, r5, lsr #4
    20b0:	bc01c204 	sfmlt	f4, 1, [r1], {4}
    20b4:	00000000 	andeq	r0, r0, r0
    20b8:	00034e08 	andeq	r4, r3, r8, lsl #28
    20bc:	01c30400 	biceq	r0, r3, r0, lsl #8
    20c0:	000000b7 	strheq	r0, [r0], -r7
    20c4:	00ac0804 	adceq	r0, ip, r4, lsl #16
    20c8:	c4040000 	strgt	r0, [r4], #-0
    20cc:	0000b701 	andeq	fp, r0, r1, lsl #14
    20d0:	f5080800 			; <UNDEFINED> instruction: 0xf5080800
    20d4:	04000001 	streq	r0, [r0], #-1
    20d8:	00b701c5 	adcseq	r0, r7, r5, asr #3
    20dc:	100c0000 	andne	r0, ip, r0
    20e0:	00524353 	subseq	r4, r2, r3, asr r3
    20e4:	b701c604 	strlt	ip, [r1, -r4, lsl #12]
    20e8:	10000000 	andne	r0, r0, r0
    20ec:	52434310 	subpl	r4, r3, #16, 6	; 0x40000000
    20f0:	01c70400 	biceq	r0, r7, r0, lsl #8
    20f4:	000000b7 	strheq	r0, [r0], -r7
    20f8:	48531014 	ldmdami	r3, {r2, r4, ip}^
    20fc:	c8040050 	stmdagt	r4, {r4, r6}
    2100:	00030f01 	andeq	r0, r3, r1, lsl #30
    2104:	a5081800 	strge	r1, [r8, #-2048]	; 0xfffff800
    2108:	04000006 	streq	r0, [r0], #-6
    210c:	00b701c9 	adcseq	r0, r7, r9, asr #3
    2110:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
    2114:	00000e36 	andeq	r0, r0, r6, lsr lr
    2118:	b701ca04 	strlt	ip, [r1, -r4, lsl #20]
    211c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    2120:	00056c08 	andeq	r6, r5, r8, lsl #24
    2124:	01cb0400 	biceq	r0, fp, r0, lsl #8
    2128:	000000b7 	strheq	r0, [r0], -r7
    212c:	049c082c 	ldreq	r0, [ip], #2092	; 0x82c
    2130:	cc040000 	stcgt	0, cr0, [r4], {-0}
    2134:	0000b701 	andeq	fp, r0, r1, lsl #14
    2138:	1f083000 	svcne	0x00083000
    213c:	0400000f 	streq	r0, [r0], #-15
    2140:	00b701cd 	adcseq	r0, r7, sp, asr #3
    2144:	08340000 	ldmdaeq	r4!, {}	; <UNPREDICTABLE>
    2148:	00000b80 	andeq	r0, r0, r0, lsl #23
    214c:	b701ce04 	strlt	ip, [r1, -r4, lsl #28]
    2150:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2154:	000df508 	andeq	pc, sp, r8, lsl #10
    2158:	01cf0400 	biceq	r0, pc, r0, lsl #8
    215c:	000000b7 	strheq	r0, [r0], -r7
    2160:	4650103c 			; <UNDEFINED> instruction: 0x4650103c
    2164:	d0040052 	andle	r0, r4, r2, asr r0
    2168:	00032901 	andeq	r2, r3, r1, lsl #18
    216c:	44104000 	ldrmi	r4, [r0], #-0
    2170:	04005246 	streq	r5, [r0], #-582	; 0xfffffdba
    2174:	00bc01d1 	ldrsbteq	r0, [ip], r1
    2178:	10480000 	subne	r0, r8, r0
    217c:	00524441 	subseq	r4, r2, r1, asr #8
    2180:	bc01d204 	sfmlt	f5, 1, [r1], {4}
    2184:	4c000000 	stcmi	0, cr0, [r0], {-0}
    2188:	000f0e08 	andeq	r0, pc, r8, lsl #28
    218c:	01d30400 	bicseq	r0, r3, r0, lsl #8
    2190:	00000343 	andeq	r0, r0, r3, asr #6
    2194:	0f480850 	svceq	0x00480850
    2198:	d4040000 	strle	r0, [r4], #-0
    219c:	00035d01 	andeq	r5, r3, r1, lsl #26
    21a0:	c6086000 	strgt	r6, [r8], -r0
    21a4:	04000003 	streq	r0, [r0], #-3
    21a8:	036201d5 	cmneq	r2, #1073741877	; 0x40000035
    21ac:	08740000 	ldmdaeq	r4!, {}^	; <UNPREDICTABLE>
    21b0:	000010e4 	andeq	r1, r0, r4, ror #1
    21b4:	b701d604 	strlt	sp, [r1, -r4, lsl #12]
    21b8:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    21bc:	00970b00 	addseq	r0, r7, r0, lsl #22
    21c0:	030f0000 	movweq	r0, #61440	; 0xf000
    21c4:	850c0000 	strhi	r0, [ip, #-0]
    21c8:	0b000000 	bleq	21d0 <startup-0x1fffde30>
    21cc:	02ff0500 	rscseq	r0, pc, #0, 10
    21d0:	bc0b0000 	stclt	0, cr0, [fp], {-0}
    21d4:	24000000 	strcs	r0, [r0], #-0
    21d8:	0c000003 	stceq	0, cr0, [r0], {3}
    21dc:	00000085 	andeq	r0, r0, r5, lsl #1
    21e0:	14060001 	strne	r0, [r6], #-1
    21e4:	05000003 	streq	r0, [r0, #-3]
    21e8:	00000324 	andeq	r0, r0, r4, lsr #6
    21ec:	0000bc0b 	andeq	fp, r0, fp, lsl #24
    21f0:	00033e00 	andeq	r3, r3, r0, lsl #28
    21f4:	00850c00 	addeq	r0, r5, r0, lsl #24
    21f8:	00030000 	andeq	r0, r3, r0
    21fc:	00032e06 	andeq	r2, r3, r6, lsl #28
    2200:	033e0500 	teqeq	lr, #0, 10
    2204:	bc0b0000 	stclt	0, cr0, [fp], {-0}
    2208:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    220c:	0c000003 	stceq	0, cr0, [r0], {3}
    2210:	00000085 	andeq	r0, r0, r5, lsl #1
    2214:	48060004 	stmdami	r6, {r2}
    2218:	05000003 	streq	r0, [r0, #-3]
    221c:	00000358 	andeq	r0, r0, r8, asr r3
    2220:	0000ac0b 	andeq	sl, r0, fp, lsl #24
    2224:	00037200 	andeq	r7, r3, r0, lsl #4
    2228:	00850c00 	addeq	r0, r5, r0, lsl #24
    222c:	00040000 	andeq	r0, r4, r0
    2230:	0004820e 	andeq	r8, r4, lr, lsl #4
    2234:	01d70400 	bicseq	r0, r7, r0, lsl #8
    2238:	000001e4 	andeq	r0, r0, r4, ror #3
    223c:	bf04100f 	svclt	0x0004100f
    2240:	0003bc02 	andeq	fp, r3, r2, lsl #24
    2244:	0ac90800 	beq	ff24424c <GPIO_Ports+0xdf241ac0>
    2248:	c1040000 	mrsgt	r0, (UNDEF: 4)
    224c:	0000b702 	andeq	fp, r0, r2, lsl #14
    2250:	8a080000 	bhi	202258 <startup-0x1fdfdda8>
    2254:	0400000e 	streq	r0, [r0], #-14
    2258:	00b702c2 	adcseq	r0, r7, r2, asr #5
    225c:	10040000 	andne	r0, r4, r0
    2260:	004c4156 	subeq	r4, ip, r6, asr r1
    2264:	b702c304 	strlt	ip, [r2, -r4, lsl #6]
    2268:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    226c:	000e0108 	andeq	r0, lr, r8, lsl #2
    2270:	02c40400 	sbceq	r0, r4, #0, 8
    2274:	000000bc 	strheq	r0, [r0], -ip
    2278:	140e000c 	strne	r0, [lr], #-12
    227c:	0400000c 	streq	r0, [r0], #-12
    2280:	037e02c5 	cmneq	lr, #1342177292	; 0x5000000c
    2284:	ca110000 	bgt	44228c <startup-0x1fbbdd74>
    2288:	0400000f 	streq	r0, [r0], #-15
    228c:	00a706fa 	strdeq	r0, [r7], sl	; <UNPREDICTABLE>
    2290:	40120000 	andsmi	r0, r2, r0
    2294:	05000008 	streq	r0, [r0, #-8]
    2298:	0000ac3b 	andeq	sl, r0, fp, lsr ip
    229c:	01071300 	mrseq	r1, SP_und
    22a0:	00000037 	andeq	r0, r0, r7, lsr r0
    22a4:	fa035f06 	blx	d9ec4 <startup-0x1ff2613c>
    22a8:	14000003 	strne	r0, [r0], #-3
    22ac:	000009ca 	andeq	r0, r0, sl, asr #19
    22b0:	0f7f1400 	svceq	0x007f1400
    22b4:	00010000 	andeq	r0, r1, r0
    22b8:	000cb90e 	andeq	fp, ip, lr, lsl #18
    22bc:	035f0600 	cmpeq	pc, #0, 12
    22c0:	000003df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    22c4:	36070415 			; <UNDEFINED> instruction: 0x36070415
    22c8:	0000043f 	andeq	r0, r0, pc, lsr r4
    22cc:	00147316 	andseq	r7, r4, r6, lsl r3
    22d0:	8c380700 	ldchi	7, cr0, [r8], #-0
    22d4:	00000000 	andeq	r0, r0, r0
    22d8:	00149e16 	andseq	r9, r4, r6, lsl lr
    22dc:	8c3d0700 	ldchi	7, cr0, [sp], #-0
    22e0:	01000000 	mrseq	r0, (UNDEF: 0)
    22e4:	00148316 	andseq	r8, r4, r6, lsl r3
    22e8:	8c420700 	mcrrhi	7, 0, r0, r2, cr0
    22ec:	02000000 	andeq	r0, r0, #0
    22f0:	0013c016 	andseq	ip, r3, r6, lsl r0
    22f4:	fa470700 	blx	11c3efc <startup-0x1ee3c104>
    22f8:	03000003 	movweq	r0, #3
    22fc:	13af0300 			; <UNDEFINED> instruction: 0x13af0300
    2300:	4a070000 	bmi	1c2308 <startup-0x1fe3dcf8>
    2304:	00000406 	andeq	r0, r0, r6, lsl #8
    2308:	00144f17 	andseq	r4, r4, r7, lsl pc
    230c:	e4df0100 	ldrb	r0, [pc], #256	; 2314 <startup-0x1fffdcec>
    2310:	3420001a 	strtcc	r0, [r0], #-26	; 0xffffffe6
    2314:	01000000 	mrseq	r0, (UNDEF: 0)
    2318:	00046e9c 	muleq	r4, ip, lr
    231c:	13d31800 	bicsne	r1, r3, #0, 16
    2320:	df010000 	svcle	0x00010000
    2324:	000000ac 	andeq	r0, r0, ip, lsr #1
    2328:	00749102 	rsbseq	r9, r4, r2, lsl #2
    232c:	00143b17 	andseq	r3, r4, r7, lsl fp
    2330:	9cc70100 	stflse	f0, [r7], {0}
    2334:	4820001a 	stmdami	r0!, {r1, r3, r4}
    2338:	01000000 	mrseq	r0, (UNDEF: 0)
    233c:	0004a09c 	muleq	r4, ip, r0
    2340:	15411800 	strbne	r1, [r1, #-2048]	; 0xfffff800
    2344:	c7010000 	strgt	r0, [r1, -r0]
    2348:	0000008c 	andeq	r0, r0, ip, lsl #1
    234c:	18779102 	ldmdane	r7!, {r1, r8, ip, pc}^
    2350:	00000adc 	ldrdeq	r0, [r0], -ip
    2354:	03fac701 	mvnseq	ip, #262144	; 0x40000
    2358:	91020000 	mrsls	r0, (UNDEF: 2)
    235c:	20170076 	andscs	r0, r7, r6, ror r0
    2360:	01000014 	tsteq	r0, r4, lsl r0
    2364:	001a70b4 	ldrheq	r7, [sl], -r4
    2368:	00002c20 	andeq	r2, r0, r0, lsr #24
    236c:	d29c0100 	addsle	r0, ip, #0, 2
    2370:	18000004 	stmdane	r0, {r2}
    2374:	000014c0 	andeq	r1, r0, r0, asr #9
    2378:	00acb401 	adceq	fp, ip, r1, lsl #8
    237c:	91020000 	mrsls	r0, (UNDEF: 2)
    2380:	14191874 	ldrne	r1, [r9], #-2164	; 0xfffff78c
    2384:	b4010000 	strlt	r0, [r1], #-0
    2388:	000000ac 	andeq	r0, r0, ip, lsr #1
    238c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2390:	00140817 	andseq	r0, r4, r7, lsl r8
    2394:	78880100 	stmvc	r8, {r8}
    2398:	f8200019 			; <UNDEFINED> instruction: 0xf8200019
    239c:	01000000 	mrseq	r0, (UNDEF: 0)
    23a0:	0005209c 	muleq	r5, ip, r0
    23a4:	13e51800 	mvnne	r1, #0, 16
    23a8:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    23ac:	00000520 	andeq	r0, r0, r0, lsr #10
    23b0:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
    23b4:	00001467 	andeq	r1, r0, r7, ror #8
    23b8:	008c8a01 	addeq	r8, ip, r1, lsl #20
    23bc:	91020000 	mrsls	r0, (UNDEF: 2)
    23c0:	1412196f 	ldrne	r1, [r2], #-2415	; 0xfffff691
    23c4:	8a010000 	bhi	423cc <startup-0x1ffbdc34>
    23c8:	0000008c 	andeq	r0, r0, ip, lsl #1
    23cc:	196e9102 	stmdbne	lr!, {r1, r8, ip, pc}^
    23d0:	00001434 	andeq	r1, r0, r4, lsr r4
    23d4:	008c8a01 	addeq	r8, ip, r1, lsl #20
    23d8:	91020000 	mrsls	r0, (UNDEF: 2)
    23dc:	041a006d 	ldreq	r0, [sl], #-109	; 0xffffff93
    23e0:	0000043f 	andeq	r0, r0, pc, lsr r4
    23e4:	00154e1b 	andseq	r4, r5, fp, lsl lr
    23e8:	54760100 	ldrbtpl	r0, [r6], #-256	; 0xffffff00
    23ec:	24200019 	strtcs	r0, [r0], #-25	; 0xffffffe7
    23f0:	01000000 	mrseq	r0, (UNDEF: 0)
    23f4:	13f5189c 	mvnsne	r1, #156, 16	; 0x9c0000
    23f8:	76010000 	strvc	r0, [r1], -r0
    23fc:	000000ac 	andeq	r0, r0, ip, lsr #1
    2400:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2404:	0001a900 	andeq	sl, r1, r0, lsl #18
    2408:	62000400 	andvs	r0, r0, #0, 8
    240c:	04000006 	streq	r0, [r0], #-6
    2410:	0005c901 	andeq	ip, r5, r1, lsl #18
    2414:	15770c00 	ldrbne	r0, [r7, #-3072]!	; 0xfffff400
    2418:	05290000 	streq	r0, [r9, #-0]!
    241c:	1b180000 	blne	602424 <startup-0x1f9fdbdc>
    2420:	01282000 			; <UNDEFINED> instruction: 0x01282000
    2424:	0a210000 	beq	84242c <startup-0x1f7bdbd4>
    2428:	01020000 	mrseq	r0, (UNDEF: 2)
    242c:	0003dc06 	andeq	sp, r3, r6, lsl #24
    2430:	01b40300 			; <UNDEFINED> instruction: 0x01b40300
    2434:	2b020000 	blcs	8243c <startup-0x1ff7dbc4>
    2438:	00000037 	andeq	r0, r0, r7, lsr r0
    243c:	da080102 	ble	20284c <startup-0x1fdfd7b4>
    2440:	02000003 	andeq	r0, r0, #3
    2444:	0f250502 	svceq	0x00250502
    2448:	02020000 	andeq	r0, r2, #0
    244c:	0010a907 	andseq	sl, r0, r7, lsl #18
    2450:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    2454:	00000991 	muleq	r0, r1, r9
    2458:	f4070402 	vst3.8	{d0-d2}, [r7], r2
    245c:	0200000c 	andeq	r0, r0, #12
    2460:	098c0508 	stmibeq	ip, {r3, r8, sl}
    2464:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2468:	000cef07 	andeq	lr, ip, r7, lsl #30
    246c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    2470:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2474:	f9070402 			; <UNDEFINED> instruction: 0xf9070402
    2478:	0300000c 	movweq	r0, #12
    247c:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    2480:	002c1803 	eoreq	r1, ip, r3, lsl #16
    2484:	67050000 	strvs	r0, [r5, -r0]
    2488:	00b90c04 	adcseq	r0, r9, r4, lsl #24
    248c:	df060000 	svcle	0x00060000
    2490:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    2494:	0000b90e 	andeq	fp, r0, lr, lsl #18
    2498:	71060000 	mrsvc	r0, (UNDEF: 6)
    249c:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    24a0:	00007611 	andeq	r7, r0, r1, lsl r6
    24a4:	69076400 	stmdbvs	r7, {sl, sp, lr}
    24a8:	1404006e 	strne	r0, [r4], #-110	; 0xffffff92
    24ac:	00000076 	andeq	r0, r0, r6, ror r0
    24b0:	756f0765 	strbvc	r0, [pc, #-1893]!	; 1d53 <startup-0x1fffe2ad>
    24b4:	17040074 	smlsdxne	r4, r4, r0, r0
    24b8:	00000076 	andeq	r0, r0, r6, ror r0
    24bc:	76080066 	strvc	r0, [r8], -r6, rrx
    24c0:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    24c4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    24c8:	0000006f 	andeq	r0, r0, pc, rrx
    24cc:	c2030063 	andgt	r0, r3, #99	; 0x63
    24d0:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    24d4:	00008118 	andeq	r8, r0, r8, lsl r1
    24d8:	15e90a00 	strbne	r0, [r9, #2560]!	; 0xa00
    24dc:	2d010000 	stccs	0, cr0, [r1, #-0]
    24e0:	00000076 	andeq	r0, r0, r6, ror r0
    24e4:	20001be2 	andcs	r1, r0, r2, ror #23
    24e8:	0000005e 	andeq	r0, r0, lr, asr r0
    24ec:	010a9c01 	tsteq	sl, r1, lsl #24
    24f0:	fe0b0000 	cdp2	0, 0, cr0, cr11, cr0, {0}
    24f4:	01000015 	tsteq	r0, r5, lsl r0
    24f8:	00010a2d 	andeq	r0, r1, sp, lsr #20
    24fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2500:	0015da0b 	andseq	sp, r5, fp, lsl #20
    2504:	102d0100 	eorne	r0, sp, r0, lsl #2
    2508:	02000001 	andeq	r0, r0, #1
    250c:	0c007091 	stceq	0, cr7, [r0], {145}	; 0x91
    2510:	0000c904 	andeq	ip, r0, r4, lsl #18
    2514:	76040c00 	strvc	r0, [r4], -r0, lsl #24
    2518:	0d000000 	stceq	0, cr0, [r0, #-0]
    251c:	000015c7 	andeq	r1, r0, r7, asr #11
    2520:	1ba21f01 	blne	fe88a12c <GPIO_Ports+0xde8879a0>
    2524:	00402000 	subeq	r2, r0, r0
    2528:	9c010000 	stcls	0, cr0, [r1], {-0}
    252c:	00000156 	andeq	r0, r0, r6, asr r1
    2530:	0015fe0b 	andseq	pc, r5, fp, lsl #28
    2534:	0a1f0100 	beq	7c293c <startup-0x1f83d6c4>
    2538:	02000001 	andeq	r0, r0, #1
    253c:	e40b6c91 	str	r6, [fp], #-3217	; 0xfffff36f
    2540:	01000015 	tsteq	r0, r5, lsl r0
    2544:	0000761f 	andeq	r7, r0, pc, lsl r6
    2548:	6b910200 	blvs	fe442d50 <GPIO_Ports+0xde4405c4>
    254c:	0016050e 	andseq	r0, r6, lr, lsl #10
    2550:	76210100 	strtvc	r0, [r1], -r0, lsl #2
    2554:	02000000 	andeq	r0, r0, #0
    2558:	0a007791 	beq	203a4 <startup-0x1ffdfc5c>
    255c:	00001567 	andeq	r1, r0, r7, ror #10
    2560:	00760c01 	rsbseq	r0, r6, r1, lsl #24
    2564:	1b400000 	blne	100256c <startup-0x1effda94>
    2568:	00622000 	rsbeq	r2, r2, r0
    256c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2570:	0000018c 	andeq	r0, r0, ip, lsl #3
    2574:	0015fe0b 	andseq	pc, r5, fp, lsl #28
    2578:	0a0c0100 	beq	302980 <startup-0x1fcfd680>
    257c:	02000001 	andeq	r0, r0, #1
    2580:	e40b7491 	str	r7, [fp], #-1169	; 0xfffffb6f
    2584:	01000015 	tsteq	r0, r5, lsl r0
    2588:	0000760c 	andeq	r7, r0, ip, lsl #12
    258c:	73910200 	orrsvc	r0, r1, #0, 4
    2590:	15f30f00 	ldrbne	r0, [r3, #3840]!	; 0xf00
    2594:	04010000 	streq	r0, [r1], #-0
    2598:	20001b18 	andcs	r1, r0, r8, lsl fp
    259c:	00000028 	andeq	r0, r0, r8, lsr #32
    25a0:	fe0b9c01 	cdp2	12, 0, cr9, cr11, cr1, {0}
    25a4:	01000015 	tsteq	r0, r5, lsl r0
    25a8:	00010a04 	andeq	r0, r1, r4, lsl #20
    25ac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    25b0:	09cc0000 	stmibeq	ip, {}^	; <UNPREDICTABLE>
    25b4:	00040000 	andeq	r0, r4, r0
    25b8:	0000074b 	andeq	r0, r0, fp, asr #14
    25bc:	05c90104 	strbeq	r0, [r9, #260]	; 0x104
    25c0:	e00c0000 	and	r0, ip, r0
    25c4:	29000019 	stmdbcs	r0, {r0, r3, r4}
    25c8:	40000005 	andmi	r0, r0, r5
    25cc:	fe20001c 	mcr2	0, 1, r0, cr0, cr12, {0}
    25d0:	73000009 	movwvc	r0, #9
    25d4:	0200000b 	andeq	r0, r0, #11
    25d8:	03dc0601 	bicseq	r0, ip, #1048576	; 0x100000
    25dc:	b4030000 	strlt	r0, [r3], #-0
    25e0:	02000001 	andeq	r0, r0, #1
    25e4:	0000372b 	andeq	r3, r0, fp, lsr #14
    25e8:	08010200 	stmdaeq	r1, {r9}
    25ec:	000003da 	ldrdeq	r0, [r0], -sl
    25f0:	25050202 	strcs	r0, [r5, #-514]	; 0xfffffdfe
    25f4:	0300000f 	movweq	r0, #15
    25f8:	000004e9 	andeq	r0, r0, r9, ror #9
    25fc:	00503902 	subseq	r3, r0, r2, lsl #18
    2600:	02020000 	andeq	r0, r2, #0
    2604:	0010a907 	andseq	sl, r0, r7, lsl #18
    2608:	113c0300 	teqne	ip, r0, lsl #6
    260c:	4d020000 	stcmi	0, cr0, [r2, #-0]
    2610:	00000062 	andeq	r0, r0, r2, rrx
    2614:	91050402 	tstls	r5, r2, lsl #8
    2618:	03000009 	movweq	r0, #9
    261c:	0000093a 	andeq	r0, r0, sl, lsr r9
    2620:	00744f02 	rsbseq	r4, r4, r2, lsl #30
    2624:	04020000 	streq	r0, [r2], #-0
    2628:	000cf407 	andeq	pc, ip, r7, lsl #8
    262c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    2630:	0000098c 	andeq	r0, r0, ip, lsl #19
    2634:	ef070802 	svc	0x00070802
    2638:	0400000c 	streq	r0, [r0], #-12
    263c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2640:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    2644:	000cf907 	andeq	pc, ip, r7, lsl #18
    2648:	01b60300 			; <UNDEFINED> instruction: 0x01b60300
    264c:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    2650:	0000002c 	andeq	r0, r0, ip, lsr #32
    2654:	0004eb03 	andeq	lr, r4, r3, lsl #22
    2658:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
    265c:	05000000 	streq	r0, [r0, #-0]
    2660:	000000a2 	andeq	r0, r0, r2, lsr #1
    2664:	00113e03 	andseq	r3, r1, r3, lsl #28
    2668:	572c0300 	strpl	r0, [ip, -r0, lsl #6]!
    266c:	05000000 	streq	r0, [r0, #-0]
    2670:	000000b2 	strheq	r0, [r0], -r2
    2674:	00093c03 	andeq	r3, r9, r3, lsl #24
    2678:	69300300 	ldmdbvs	r0!, {r8, r9}
    267c:	06000000 	streq	r0, [r0], -r0
    2680:	00000fca 	andeq	r0, r0, sl, asr #31
    2684:	bd06fa04 	vstrlt	s30, [r6, #-16]
    2688:	07000000 	streq	r0, [r0, -r0]
    268c:	00000840 	andeq	r0, r0, r0, asr #16
    2690:	00c23b05 	sbceq	r3, r2, r5, lsl #22
    2694:	07080000 	streq	r0, [r8, -r0]
    2698:	00003701 	andeq	r3, r0, r1, lsl #14
    269c:	035d0600 	cmpeq	sp, #0, 12
    26a0:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    26a4:	00122309 	andseq	r2, r2, r9, lsl #6
    26a8:	530a0000 	movwpl	r0, #40960	; 0xa000
    26ac:	01005445 	tsteq	r0, r5, asr #8
    26b0:	09f40b00 	ldmibeq	r4!, {r8, r9, fp}^
    26b4:	5d060000 	stcpl	0, cr0, [r6, #-0]
    26b8:	0000e403 	andeq	lr, r0, r3, lsl #8
    26bc:	0ab50b00 	beq	fed452c4 <GPIO_Ports+0xded42b38>
    26c0:	5d060000 	stcpl	0, cr0, [r6, #-0]
    26c4:	0000e403 	andeq	lr, r0, r3, lsl #8
    26c8:	01070800 	tsteq	r7, r0, lsl #16
    26cc:	00000037 	andeq	r0, r0, r7, lsr r0
    26d0:	32035f06 	andcc	r5, r3, #6, 30
    26d4:	09000001 	stmdbeq	r0, {r0}
    26d8:	000009ca 	andeq	r0, r0, sl, asr #19
    26dc:	0f7f0900 	svceq	0x007f0900
    26e0:	00010000 	andeq	r0, r1, r0
    26e4:	000cb90b 	andeq	fp, ip, fp, lsl #18
    26e8:	035f0600 	cmpeq	pc, #0, 12
    26ec:	00000117 	andeq	r0, r0, r7, lsl r1
    26f0:	73061c0c 	movwvc	r1, #27660	; 0x6c0c
    26f4:	0001fc07 	andeq	pc, r1, r7, lsl #24
    26f8:	52530d00 	subspl	r0, r3, #0, 26
    26fc:	07750600 	ldrbeq	r0, [r5, -r0, lsl #12]!
    2700:	000000ad 	andeq	r0, r0, sp, lsr #1
    2704:	03c60e00 	biceq	r0, r6, #0, 28
    2708:	76060000 	strvc	r0, [r6], -r0
    270c:	0000a207 	andeq	sl, r0, r7, lsl #4
    2710:	440d0200 	strmi	r0, [sp], #-512	; 0xfffffe00
    2714:	77060052 	smlsdvc	r6, r2, r0, r0
    2718:	0000ad07 	andeq	sl, r0, r7, lsl #26
    271c:	d00e0400 	andle	r0, lr, r0, lsl #8
    2720:	06000003 	streq	r0, [r0], -r3
    2724:	00a20778 	adceq	r0, r2, r8, ror r7
    2728:	0d060000 	stceq	0, cr0, [r6, #-0]
    272c:	00525242 	subseq	r5, r2, r2, asr #4
    2730:	ad077906 	vstrge.16	s14, [r7, #-12]	; <UNPREDICTABLE>
    2734:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2738:	0004540e 	andeq	r5, r4, lr, lsl #8
    273c:	077a0600 	ldrbeq	r0, [sl, -r0, lsl #12]!
    2740:	000000a2 	andeq	r0, r0, r2, lsr #1
    2744:	52430d0a 	subpl	r0, r3, #640	; 0x280
    2748:	7b060031 	blvc	182814 <startup-0x1fe7d7ec>
    274c:	0000ad07 	andeq	sl, r0, r7, lsl #26
    2750:	5e0e0c00 	cdppl	12, 0, cr0, cr14, cr0, {0}
    2754:	06000004 	streq	r0, [r0], -r4
    2758:	00a2077c 	adceq	r0, r2, ip, ror r7
    275c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    2760:	00325243 	eorseq	r5, r2, r3, asr #4
    2764:	ad077d06 	stcge	13, cr7, [r7, #-24]	; 0xffffffe8
    2768:	10000000 	andne	r0, r0, r0
    276c:	0003fa0e 	andeq	pc, r3, lr, lsl #20
    2770:	077e0600 	ldrbeq	r0, [lr, -r0, lsl #12]!
    2774:	000000a2 	andeq	r0, r0, r2, lsr #1
    2778:	52430d12 	subpl	r0, r3, #1152	; 0x480
    277c:	7f060033 	svcvc	0x00060033
    2780:	0000ad07 	andeq	sl, r0, r7, lsl #26
    2784:	040e1400 	streq	r1, [lr], #-1024	; 0xfffffc00
    2788:	06000004 	streq	r0, [r0], -r4
    278c:	00a20780 	adceq	r0, r2, r0, lsl #15
    2790:	0e160000 	cdpeq	0, 1, cr0, cr6, cr0, {0}
    2794:	00001629 	andeq	r1, r0, r9, lsr #12
    2798:	ad078106 	stfged	f0, [r7, #-24]	; 0xffffffe8
    279c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    27a0:	00040e0e 	andeq	r0, r4, lr, lsl #28
    27a4:	07820600 	streq	r0, [r2, r0, lsl #12]
    27a8:	000000a2 	andeq	r0, r0, r2, lsr #1
    27ac:	950b001a 	strls	r0, [fp, #-26]	; 0xffffffe6
    27b0:	06000016 			; <UNDEFINED> instruction: 0x06000016
    27b4:	013e0783 	teqeq	lr, r3, lsl #15
    27b8:	100f0000 	andne	r0, pc, r0
    27bc:	02593607 	subseq	r3, r9, #7340032	; 0x700000
    27c0:	1b100000 	blne	4027c8 <startup-0x1fbfd838>
    27c4:	07000017 	smladeq	r0, r7, r0, r0
    27c8:	0000c238 	andeq	ip, r0, r8, lsr r2
    27cc:	ef100000 	svc	0x00100000
    27d0:	07000016 	smladeq	r0, r6, r0, r0
    27d4:	0000a23e 	andeq	sl, r0, lr, lsr r2
    27d8:	a3100400 	tstge	r0, #0, 8
    27dc:	07000016 	smladeq	r0, r6, r0, r0
    27e0:	0000a241 	andeq	sl, r0, r1, asr #4
    27e4:	b9100600 	ldmdblt	r0, {r9, sl}
    27e8:	07000017 	smladeq	r0, r7, r0, r0
    27ec:	0000a244 	andeq	sl, r0, r4, asr #4
    27f0:	8d100800 	ldchi	8, cr0, [r0, #-0]
    27f4:	07000018 	smladeq	r0, r8, r0, r0
    27f8:	0000a24b 	andeq	sl, r0, fp, asr #4
    27fc:	60100a00 	andsvs	r0, r0, r0, lsl #20
    2800:	07000018 	smladeq	r0, r8, r0, r0
    2804:	0000a24e 	andeq	sl, r0, lr, asr #4
    2808:	03000c00 	movweq	r0, #3072	; 0xc00
    280c:	0000182b 	andeq	r1, r0, fp, lsr #16
    2810:	02085107 	andeq	r5, r8, #-1073741823	; 0xc0000001
    2814:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    2818:	029d5707 	addseq	r5, sp, #1835008	; 0x1c0000
    281c:	f4100000 			; <UNDEFINED> instruction: 0xf4100000
    2820:	07000018 	smladeq	r0, r8, r0, r0
    2824:	0000a25a 	andeq	sl, r0, sl, asr r2
    2828:	ce100000 	cdpgt	0, 1, cr0, cr0, cr0, {0}
    282c:	07000019 	smladeq	r0, r9, r0, r0
    2830:	0000a25d 	andeq	sl, r0, sp, asr r2
    2834:	1e100200 	cdpne	2, 1, cr0, cr0, cr0, {0}
    2838:	07000016 	smladeq	r0, r6, r0, r0
    283c:	0000a260 	andeq	sl, r0, r0, ror #4
    2840:	0d100400 	cfldrseq	mvf0, [r0, #-0]
    2844:	07000017 	smladeq	r0, r7, r0, r0
    2848:	0000a263 	andeq	sl, r0, r3, ror #4
    284c:	03000600 	movweq	r0, #1536	; 0x600
    2850:	000016b2 			; <UNDEFINED> instruction: 0x000016b2
    2854:	02646607 	rsbeq	r6, r4, #7340032	; 0x700000
    2858:	100f0000 	andne	r0, pc, r0
    285c:	02e13008 	rsceq	r3, r1, #8
    2860:	ef100000 	svc	0x00100000
    2864:	08000010 	stmdaeq	r0, {r4}
    2868:	0000c232 	andeq	ip, r0, r2, lsr r2
    286c:	8c100000 	ldchi	0, cr0, [r0], {-0}
    2870:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2874:	0000c233 	andeq	ip, r0, r3, lsr r2
    2878:	86100400 	ldrhi	r0, [r0], -r0, lsl #8
    287c:	08000005 	stmdaeq	r0, {r0, r2}
    2880:	0000c234 	andeq	ip, r0, r4, lsr r2
    2884:	fc100800 	ldc2	8, cr0, [r0], {-0}
    2888:	08000004 	stmdaeq	r0, {r2}
    288c:	0000c235 	andeq	ip, r0, r5, lsr r2
    2890:	03000c00 	movweq	r0, #3072	; 0xc00
    2894:	00000efc 	strdeq	r0, [r0], -ip
    2898:	02a83608 	adceq	r3, r8, #8, 12	; 0x800000
    289c:	42110000 	andsmi	r0, r1, #0
    28a0:	01000017 	tsteq	r0, r7, lsl r0
    28a4:	25f605ac 	ldrbcs	r0, [r6, #1452]!	; 0x5ac
    28a8:	00482000 	subeq	r2, r8, r0
    28ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    28b0:	0000033f 	andeq	r0, r0, pc, lsr r3
    28b4:	00185912 	andseq	r5, r8, r2, lsl r9
    28b8:	05ac0100 	streq	r0, [ip, #256]!	; 0x100
    28bc:	0000033f 	andeq	r0, r0, pc, lsr r3
    28c0:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    28c4:	0000194b 	andeq	r1, r0, fp, asr #18
    28c8:	a205ac01 	andge	sl, r5, #256	; 0x100
    28cc:	02000000 	andeq	r0, r0, #0
    28d0:	a6136a91 			; <UNDEFINED> instruction: 0xa6136a91
    28d4:	01000018 	tsteq	r0, r8, lsl r0
    28d8:	00a205ae 	adceq	r0, r2, lr, lsr #11
    28dc:	91020000 	mrsls	r0, (UNDEF: 2)
    28e0:	19d91376 	ldmibne	r9, {r1, r2, r4, r5, r6, r8, r9, ip}^
    28e4:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    28e8:	0000a205 	andeq	sl, r0, r5, lsl #4
    28ec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    28f0:	fc041400 	stc2	4, cr1, [r4], {-0}
    28f4:	15000001 	strne	r0, [r0, #-1]
    28f8:	000018c4 	andeq	r1, r0, r4, asr #17
    28fc:	0b056201 	bleq	15b108 <startup-0x1fea4ef8>
    2900:	2c000001 	stccs	0, cr0, [r0], {1}
    2904:	ca200025 	bgt	8029a0 <startup-0x1f7fd660>
    2908:	01000000 	mrseq	r0, (UNDEF: 0)
    290c:	0003ba9c 	muleq	r3, ip, sl
    2910:	18591200 	ldmdane	r9, {r9, ip}^
    2914:	62010000 	andvs	r0, r1, #0
    2918:	00033f05 	andeq	r3, r3, r5, lsl #30
    291c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2920:	00194b12 	andseq	r4, r9, r2, lsl fp
    2924:	05620100 	strbeq	r0, [r2, #-256]!	; 0xffffff00
    2928:	000000a2 	andeq	r0, r0, r2, lsr #1
    292c:	13629102 	cmnne	r2, #-2147483648	; 0x80000000
    2930:	000018a6 	andeq	r1, r0, r6, lsr #17
    2934:	c2056401 	andgt	r6, r5, #16777216	; 0x1000000
    2938:	02000000 	andeq	r0, r0, #0
    293c:	d9136c91 	ldmdble	r3, {r0, r4, r7, sl, fp, sp, lr}
    2940:	01000019 	tsteq	r0, r9, lsl r0
    2944:	00c20564 	sbceq	r0, r2, r4, ror #10
    2948:	91020000 	mrsls	r0, (UNDEF: 2)
    294c:	1a711374 	bne	1c47724 <startup-0x1e3b88dc>
    2950:	64010000 	strvs	r0, [r1], #-0
    2954:	0000c205 	andeq	ip, r0, r5, lsl #4
    2958:	68910200 	ldmvs	r1, {r9}
    295c:	000f7513 	andeq	r7, pc, r3, lsl r5	; <UNPREDICTABLE>
    2960:	05650100 	strbeq	r0, [r5, #-256]!	; 0xffffff00
    2964:	0000010b 	andeq	r0, r0, fp, lsl #2
    2968:	00739102 	rsbseq	r9, r3, r2, lsl #2
    296c:	0017e711 	andseq	lr, r7, r1, lsl r7
    2970:	05400100 	strbeq	r0, [r0, #-256]	; 0xffffff00
    2974:	2000250a 	andcs	r2, r0, sl, lsl #10
    2978:	00000022 	andeq	r0, r0, r2, lsr #32
    297c:	03ef9c01 	mvneq	r9, #256	; 0x100
    2980:	59120000 	ldmdbpl	r2, {}	; <UNPREDICTABLE>
    2984:	01000018 	tsteq	r0, r8, lsl r0
    2988:	033f0540 	teqeq	pc, #64, 10	; 0x10000000
    298c:	91020000 	mrsls	r0, (UNDEF: 2)
    2990:	178b1274 			; <UNDEFINED> instruction: 0x178b1274
    2994:	40010000 	andmi	r0, r1, r0
    2998:	0000a205 	andeq	sl, r0, r5, lsl #4
    299c:	72910200 	addsvc	r0, r1, #0, 4
    29a0:	19371500 	ldmdbne	r7!, {r8, sl, ip}
    29a4:	0f010000 	svceq	0x00010000
    29a8:	0000ff05 	andeq	pc, r0, r5, lsl #30
    29ac:	0024c200 	eoreq	ip, r4, r0, lsl #4
    29b0:	00004820 	andeq	r4, r0, r0, lsr #16
    29b4:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    29b8:	12000004 	andne	r0, r0, #4
    29bc:	00001859 	andeq	r1, r0, r9, asr r8
    29c0:	3f050f01 	svccc	0x00050f01
    29c4:	02000003 	andeq	r0, r0, #3
    29c8:	8b126c91 	blhi	49dc14 <startup-0x1fb623ec>
    29cc:	01000017 	tsteq	r0, r7, lsl r0
    29d0:	00a2050f 	adceq	r0, r2, pc, lsl #10
    29d4:	91020000 	mrsls	r0, (UNDEF: 2)
    29d8:	0f75136a 	svceq	0x0075136a
    29dc:	11010000 	mrsne	r0, (UNDEF: 1)
    29e0:	0000ff05 	andeq	pc, r0, r5, lsl #30
    29e4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    29e8:	183d1100 	ldmdane	sp!, {r8, ip}
    29ec:	cf010000 	svcgt	0x00010000
    29f0:	00242804 	eoreq	r2, r4, r4, lsl #16
    29f4:	00009a20 	andeq	r9, r0, r0, lsr #20
    29f8:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    29fc:	12000004 	andne	r0, r0, #4
    2a00:	00001859 	andeq	r1, r0, r9, asr r8
    2a04:	3f04cf01 	svccc	0x0004cf01
    2a08:	02000003 	andeq	r0, r0, #3
    2a0c:	4b126491 	blmi	49bc58 <startup-0x1fb643a8>
    2a10:	01000019 	tsteq	r0, r9, lsl r0
    2a14:	00a204cf 	adceq	r0, r2, pc, asr #9
    2a18:	91020000 	mrsls	r0, (UNDEF: 2)
    2a1c:	0adc1262 	beq	ff7073ac <GPIO_Ports+0xdf704c20>
    2a20:	cf010000 	svcgt	0x00010000
    2a24:	00013204 	andeq	r3, r1, r4, lsl #4
    2a28:	61910200 	orrsvs	r0, r1, r0, lsl #4
    2a2c:	001a7113 	andseq	r7, sl, r3, lsl r1
    2a30:	04d10100 	ldrbeq	r0, [r1], #256	; 0x100
    2a34:	000000c2 	andeq	r0, r0, r2, asr #1
    2a38:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
    2a3c:	000018a7 	andeq	r1, r0, r7, lsr #17
    2a40:	c204d101 	andgt	sp, r4, #1073741824	; 0x40000000
    2a44:	02000000 	andeq	r0, r0, #0
    2a48:	d9136c91 	ldmdble	r3, {r0, r4, r7, sl, fp, sp, lr}
    2a4c:	01000019 	tsteq	r0, r9, lsl r0
    2a50:	00c204d1 	ldrdeq	r0, [r2], #65	; 0x41
    2a54:	91020000 	mrsls	r0, (UNDEF: 2)
    2a58:	17dc1368 	ldrbne	r1, [ip, r8, ror #6]
    2a5c:	d2010000 	andle	r0, r1, #0
    2a60:	0000c204 	andeq	ip, r0, r4, lsl #4
    2a64:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2a68:	17001100 	strne	r1, [r0, -r0, lsl #2]
    2a6c:	4b010000 	blmi	42a74 <startup-0x1ffbd58c>
    2a70:	0023d604 	eoreq	sp, r3, r4, lsl #12
    2a74:	00005220 	andeq	r5, r0, r0, lsr #4
    2a78:	fb9c0100 	blx	fe702e82 <GPIO_Ports+0xde7006f6>
    2a7c:	12000004 	andne	r0, r0, #4
    2a80:	00001859 	andeq	r1, r0, r9, asr r8
    2a84:	3f044b01 	svccc	0x00044b01
    2a88:	02000003 	andeq	r0, r0, #3
    2a8c:	4c127491 	cfldrsmi	mvf7, [r2], {145}	; 0x91
    2a90:	01000018 	tsteq	r0, r8, lsl r0
    2a94:	00a2044b 	adceq	r0, r2, fp, asr #8
    2a98:	91020000 	mrsls	r0, (UNDEF: 2)
    2a9c:	0adc1272 	beq	ff70746c <GPIO_Ports+0xdf704ce0>
    2aa0:	4b010000 	blmi	42aa8 <startup-0x1ffbd558>
    2aa4:	00013204 	andeq	r3, r1, r4, lsl #4
    2aa8:	71910200 	orrsvc	r0, r1, r0, lsl #4
    2aac:	19001100 	stmdbne	r0, {r8, ip}
    2ab0:	1d010000 	stcne	0, cr0, [r1, #-0]
    2ab4:	00239604 	eoreq	r9, r3, r4, lsl #12
    2ab8:	00004020 	andeq	r4, r0, r0, lsr #32
    2abc:	309c0100 	addscc	r0, ip, r0, lsl #2
    2ac0:	12000005 	andne	r0, r0, #5
    2ac4:	00001859 	andeq	r1, r0, r9, asr r8
    2ac8:	3f041d01 	svccc	0x00041d01
    2acc:	02000003 	andeq	r0, r0, #3
    2ad0:	dc127491 	cfldrsle	mvf7, [r2], {145}	; 0x91
    2ad4:	0100000a 	tsteq	r0, sl
    2ad8:	0132041d 	teqeq	r2, sp, lsl r4
    2adc:	91020000 	mrsls	r0, (UNDEF: 2)
    2ae0:	e3110073 	tst	r1, #115	; 0x73
    2ae4:	01000018 	tsteq	r0, r8, lsl r0
    2ae8:	235e040b 	cmpcs	lr, #184549376	; 0xb000000
    2aec:	00382000 	eorseq	r2, r8, r0
    2af0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2af4:	00000565 	andeq	r0, r0, r5, ror #10
    2af8:	00185912 	andseq	r5, r8, r2, lsl r9
    2afc:	040b0100 	streq	r0, [fp], #-256	; 0xffffff00
    2b00:	0000033f 	andeq	r0, r0, pc, lsr r3
    2b04:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2b08:	0000172a 	andeq	r1, r0, sl, lsr #14
    2b0c:	a2040b01 	andge	r0, r4, #1024	; 0x400
    2b10:	02000000 	andeq	r0, r0, #0
    2b14:	11007291 			; <UNDEFINED> instruction: 0x11007291
    2b18:	00001920 	andeq	r1, r0, r0, lsr #18
    2b1c:	1e03c401 	cdpne	4, 0, cr12, cr3, cr1, {0}
    2b20:	40200023 	eormi	r0, r0, r3, lsr #32
    2b24:	01000000 	mrseq	r0, (UNDEF: 0)
    2b28:	00059a9c 	muleq	r5, ip, sl
    2b2c:	18591200 	ldmdane	r9, {r9, ip}^
    2b30:	c4010000 	strgt	r0, [r1], #-0
    2b34:	00033f03 	andeq	r3, r3, r3, lsl #30
    2b38:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2b3c:	000adc12 	andeq	sp, sl, r2, lsl ip
    2b40:	03c40100 	biceq	r0, r4, #0, 2
    2b44:	00000132 	andeq	r0, r0, r2, lsr r1
    2b48:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2b4c:	00187a11 	andseq	r7, r8, r1, lsl sl
    2b50:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    2b54:	200022de 	ldrdcs	r2, [r0], -lr
    2b58:	00000040 	andeq	r0, r0, r0, asr #32
    2b5c:	05cf9c01 	strbeq	r9, [pc, #3073]	; 3765 <startup-0x1fffc89b>
    2b60:	59120000 	ldmdbpl	r2, {}	; <UNPREDICTABLE>
    2b64:	01000018 	tsteq	r0, r8, lsl r0
    2b68:	033f03ab 	teqeq	pc, #-1409286142	; 0xac000002
    2b6c:	91020000 	mrsls	r0, (UNDEF: 2)
    2b70:	0adc1274 	beq	ff707548 <GPIO_Ports+0xdf704dbc>
    2b74:	ab010000 	blge	42b7c <startup-0x1ffbd484>
    2b78:	00013203 	andeq	r3, r1, r3, lsl #4
    2b7c:	73910200 	orrsvc	r0, r1, #0, 4
    2b80:	18081100 	stmdane	r8, {r8, ip}
    2b84:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2b88:	0022a003 	eoreq	sl, r2, r3
    2b8c:	00003e20 	andeq	r3, r0, r0, lsr #28
    2b90:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    2b94:	12000006 	andne	r0, r0, #6
    2b98:	00001859 	andeq	r1, r0, r9, asr r8
    2b9c:	3f039801 	svccc	0x00039801
    2ba0:	02000003 	andeq	r0, r0, #3
    2ba4:	5a127491 	bpl	49fdf0 <startup-0x1fb60210>
    2ba8:	01000017 	tsteq	r0, r7, lsl r0
    2bac:	00970398 	umullseq	r0, r7, r8, r3
    2bb0:	91020000 	mrsls	r0, (UNDEF: 2)
    2bb4:	99110073 	ldmdbls	r1, {r0, r1, r4, r5, r6}
    2bb8:	01000019 	tsteq	r0, r9, lsl r0
    2bbc:	22600344 	rsbcs	r0, r0, #68, 6	; 0x10000001
    2bc0:	00402000 	subeq	r2, r0, r0
    2bc4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bc8:	00000639 	andeq	r0, r0, r9, lsr r6
    2bcc:	00185912 	andseq	r5, r8, r2, lsl r9
    2bd0:	03440100 	movteq	r0, #16640	; 0x4100
    2bd4:	0000033f 	andeq	r0, r0, pc, lsr r3
    2bd8:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2bdc:	00000adc 	ldrdeq	r0, [r0], -ip
    2be0:	32034401 	andcc	r4, r3, #16777216	; 0x1000000
    2be4:	02000001 	andeq	r0, r0, #1
    2be8:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2bec:	0000181b 	andeq	r1, r0, fp, lsl r8
    2bf0:	40030f01 	andmi	r0, r3, r1, lsl #30
    2bf4:	20200022 	eorcs	r0, r0, r2, lsr #32
    2bf8:	01000000 	mrseq	r0, (UNDEF: 0)
    2bfc:	00065f9c 	muleq	r6, ip, pc	; <UNPREDICTABLE>
    2c00:	18591200 	ldmdane	r9, {r9, ip}^
    2c04:	0f010000 	svceq	0x00010000
    2c08:	00033f03 	andeq	r3, r3, r3, lsl #30
    2c0c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2c10:	18d61100 	ldmne	r6, {r8, ip}^
    2c14:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    2c18:	0021f802 	eoreq	pc, r1, r2, lsl #16
    2c1c:	00004820 	andeq	r4, r0, r0, lsr #16
    2c20:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    2c24:	12000006 	andne	r0, r0, #6
    2c28:	00001859 	andeq	r1, r0, r9, asr r8
    2c2c:	3f02f701 	svccc	0x0002f701
    2c30:	02000003 	andeq	r0, r0, #3
    2c34:	dc127491 	cfldrsle	mvf7, [r2], {145}	; 0x91
    2c38:	0100000a 	tsteq	r0, sl
    2c3c:	013202f7 	teqeq	r2, r7	; <illegal shifter operand>
    2c40:	91020000 	mrsls	r0, (UNDEF: 2)
    2c44:	6a110073 	bvs	442e18 <startup-0x1fbbd1e8>
    2c48:	01000017 	tsteq	r0, r7, lsl r0
    2c4c:	21c002e5 	biccs	r0, r0, r5, ror #5
    2c50:	00382000 	eorseq	r2, r8, r0
    2c54:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c58:	000006c9 	andeq	r0, r0, r9, asr #13
    2c5c:	00185912 	andseq	r5, r8, r2, lsl r9
    2c60:	02e50100 	rsceq	r0, r5, #0, 2
    2c64:	0000033f 	andeq	r0, r0, pc, lsr r3
    2c68:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2c6c:	00001664 	andeq	r1, r0, r4, ror #12
    2c70:	a202e501 	andge	lr, r2, #4194304	; 0x400000
    2c74:	02000000 	andeq	r0, r0, #0
    2c78:	11007291 			; <UNDEFINED> instruction: 0x11007291
    2c7c:	00001986 	andeq	r1, r0, r6, lsl #19
    2c80:	8202a001 	andhi	sl, r2, #1
    2c84:	3e200021 	cdpcc	0, 2, cr0, cr0, cr1, {1}
    2c88:	01000000 	mrseq	r0, (UNDEF: 0)
    2c8c:	0006fe9c 	muleq	r6, ip, lr
    2c90:	18591200 	ldmdane	r9, {r9, ip}^
    2c94:	a0010000 	andge	r0, r1, r0
    2c98:	00033f02 	andeq	r3, r3, r2, lsl #30
    2c9c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ca0:	0016e212 	andseq	lr, r6, r2, lsl r2
    2ca4:	02a00100 	adceq	r0, r0, #0, 2
    2ca8:	000000a2 	andeq	r0, r0, r2, lsr #1
    2cac:	00729102 	rsbseq	r9, r2, r2, lsl #2
    2cb0:	00162e11 	andseq	r2, r6, r1, lsl lr
    2cb4:	02850100 	addeq	r0, r5, #0, 2
    2cb8:	20002142 	andcs	r2, r0, r2, asr #2
    2cbc:	00000040 	andeq	r0, r0, r0, asr #32
    2cc0:	07339c01 	ldreq	r9, [r3, -r1, lsl #24]!
    2cc4:	59120000 	ldmdbpl	r2, {}	; <UNPREDICTABLE>
    2cc8:	01000018 	tsteq	r0, r8, lsl r0
    2ccc:	033f0285 	teqeq	pc, #1342177288	; 0x50000008
    2cd0:	91020000 	mrsls	r0, (UNDEF: 2)
    2cd4:	0adc1274 	beq	ff7076ac <GPIO_Ports+0xdf704f20>
    2cd8:	85010000 	strhi	r0, [r1, #-0]
    2cdc:	00013202 	andeq	r3, r1, r2, lsl #4
    2ce0:	73910200 	orrsvc	r0, r1, #0, 4
    2ce4:	17f71100 	ldrbne	r1, [r7, r0, lsl #2]!
    2ce8:	71010000 	mrsvc	r0, (UNDEF: 1)
    2cec:	00210802 	eoreq	r0, r1, r2, lsl #16
    2cf0:	00003a20 	andeq	r3, r0, r0, lsr #20
    2cf4:	689c0100 	ldmvs	ip, {r8}
    2cf8:	12000007 	andne	r0, r0, #7
    2cfc:	00001859 	andeq	r1, r0, r9, asr r8
    2d00:	3f027101 	svccc	0x00027101
    2d04:	02000003 	andeq	r0, r0, #3
    2d08:	98127491 	ldmdals	r2, {r0, r4, r7, sl, ip, sp, lr}
    2d0c:	01000018 	tsteq	r0, r8, lsl r0
    2d10:	00970271 	addseq	r0, r7, r1, ror r2
    2d14:	91020000 	mrsls	r0, (UNDEF: 2)
    2d18:	5f150073 	svcpl	0x00150073
    2d1c:	0100001a 	tsteq	r0, sl, lsl r0
    2d20:	00a2023d 	adceq	r0, r2, sp, lsr r2
    2d24:	20ec0000 	rsccs	r0, ip, r0
    2d28:	001c2000 	andseq	r2, ip, r0
    2d2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d30:	00000792 	muleq	r0, r2, r7
    2d34:	00185912 	andseq	r5, r8, r2, lsl r9
    2d38:	023d0100 	eorseq	r0, sp, #0, 2
    2d3c:	0000033f 	andeq	r0, r0, pc, lsr r3
    2d40:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2d44:	0016d311 	andseq	sp, r6, r1, lsl r3
    2d48:	022d0100 	eoreq	r0, sp, #0, 2
    2d4c:	200020c8 	andcs	r2, r0, r8, asr #1
    2d50:	00000024 	andeq	r0, r0, r4, lsr #32
    2d54:	07c79c01 	strbeq	r9, [r7, r1, lsl #24]
    2d58:	59120000 	ldmdbpl	r2, {}	; <UNPREDICTABLE>
    2d5c:	01000018 	tsteq	r0, r8, lsl r0
    2d60:	033f022d 	teqeq	pc, #-805306366	; 0xd0000002
    2d64:	91020000 	mrsls	r0, (UNDEF: 2)
    2d68:	16dd1274 			; <UNDEFINED> instruction: 0x16dd1274
    2d6c:	2d010000 	stccs	0, cr0, [r1, #-0]
    2d70:	0000a202 	andeq	sl, r0, r2, lsl #4
    2d74:	72910200 	addsvc	r0, r1, #0, 4
    2d78:	167f1100 	ldrbtne	r1, [pc], -r0, lsl #2
    2d7c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    2d80:	00208001 	eoreq	r8, r0, r1
    2d84:	00004820 	andeq	r4, r0, r0, lsr #16
    2d88:	fc9c0100 	ldc2	1, cr0, [ip], {0}
    2d8c:	12000007 	andne	r0, r0, #7
    2d90:	00001859 	andeq	r1, r0, r9, asr r8
    2d94:	3f01f401 	svccc	0x0001f401
    2d98:	02000003 	andeq	r0, r0, #3
    2d9c:	dc127491 	cfldrsle	mvf7, [r2], {145}	; 0x91
    2da0:	0100000a 	tsteq	r0, sl
    2da4:	013201f4 	teqeq	r2, r4	; <illegal shifter operand>
    2da8:	91020000 	mrsls	r0, (UNDEF: 2)
    2dac:	ad110073 	ldcge	0, cr0, [r1, #-460]	; 0xfffffe34
    2db0:	01000018 	tsteq	r0, r8, lsl r0
    2db4:	203a01da 	ldrsbtcs	r0, [sl], -sl
    2db8:	00462000 	subeq	r2, r6, r0
    2dbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2dc0:	00000831 	andeq	r0, r0, r1, lsr r8
    2dc4:	00185912 	andseq	r5, r8, r2, lsl r9
    2dc8:	01da0100 	bicseq	r0, sl, r0, lsl #2
    2dcc:	0000033f 	andeq	r0, r0, pc, lsr r3
    2dd0:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2dd4:	00000adc 	ldrdeq	r0, [r0], -ip
    2dd8:	3201da01 	andcc	sp, r1, #4096	; 0x1000
    2ddc:	02000001 	andeq	r0, r0, #1
    2de0:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2de4:	00001646 	andeq	r1, r0, r6, asr #12
    2de8:	0001c501 	andeq	ip, r1, r1, lsl #10
    2dec:	3a200020 	bcc	802e74 <startup-0x1f7fd18c>
    2df0:	01000000 	mrseq	r0, (UNDEF: 0)
    2df4:	0008669c 	muleq	r8, ip, r6
    2df8:	18591200 	ldmdane	r9, {r9, ip}^
    2dfc:	c5010000 	strgt	r0, [r1, #-0]
    2e00:	00033f01 	andeq	r3, r3, r1, lsl #30
    2e04:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2e08:	0019be12 	andseq	fp, r9, r2, lsl lr
    2e0c:	01c50100 	biceq	r0, r5, r0, lsl #2
    2e10:	00000097 	muleq	r0, r7, r0
    2e14:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2e18:	0016c911 	andseq	ip, r6, r1, lsl r9
    2e1c:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    2e20:	20001fb8 			; <UNDEFINED> instruction: 0x20001fb8
    2e24:	00000048 	andeq	r0, r0, r8, asr #32
    2e28:	089b9c01 	ldmeq	fp, {r0, sl, fp, ip, pc}
    2e2c:	59120000 	ldmdbpl	r2, {}	; <UNPREDICTABLE>
    2e30:	01000018 	tsteq	r0, r8, lsl r0
    2e34:	033f01ab 	teqeq	pc, #-1073741782	; 0xc000002a
    2e38:	91020000 	mrsls	r0, (UNDEF: 2)
    2e3c:	0adc1274 	beq	ff707814 <GPIO_Ports+0xdf705088>
    2e40:	ab010000 	blge	42e48 <startup-0x1ffbd1b8>
    2e44:	00013201 	andeq	r3, r1, r1, lsl #4
    2e48:	73910200 	orrsvc	r0, r1, #0, 4
    2e4c:	17c61100 	strbne	r1, [r6, r0, lsl #2]
    2e50:	9a010000 	bls	42e58 <startup-0x1ffbd1a8>
    2e54:	001f9001 	andseq	r9, pc, r1
    2e58:	00002820 	andeq	r2, r0, r0, lsr #16
    2e5c:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    2e60:	12000008 	andne	r0, r0, #8
    2e64:	000017a3 	andeq	r1, r0, r3, lsr #15
    2e68:	c1019a01 	tstgt	r1, r1, lsl #20
    2e6c:	02000008 	andeq	r0, r0, #8
    2e70:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    2e74:	00029d04 	andeq	r9, r2, r4, lsl #26
    2e78:	19761100 	ldmdbne	r6!, {r8, ip}^
    2e7c:	7b010000 	blvc	42e84 <startup-0x1ffbd17c>
    2e80:	001f3a01 	andseq	r3, pc, r1, lsl #20
    2e84:	00005620 	andeq	r5, r0, r0, lsr #12
    2e88:	0b9c0100 	bleq	fe703290 <GPIO_Ports+0xde700b04>
    2e8c:	12000009 	andne	r0, r0, #9
    2e90:	00001859 	andeq	r1, r0, r9, asr r8
    2e94:	3f017b01 	svccc	0x00017b01
    2e98:	02000003 	andeq	r0, r0, #3
    2e9c:	a3126c91 	tstge	r2, #37120	; 0x9100
    2ea0:	01000017 	tsteq	r0, r7, lsl r0
    2ea4:	08c1017b 	stmiaeq	r1, {r0, r1, r3, r4, r5, r6, r8}^
    2ea8:	91020000 	mrsls	r0, (UNDEF: 2)
    2eac:	0e0c1368 	cdpeq	3, 0, cr1, cr12, cr8, {3}
    2eb0:	7d010000 	stcvc	0, cr0, [r1, #-0]
    2eb4:	0000c201 	andeq	ip, r0, r1, lsl #4
    2eb8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ebc:	19ad1100 	stmibne	sp!, {r8, ip}
    2ec0:	67010000 	strvs	r0, [r1, -r0]
    2ec4:	001f0401 	andseq	r0, pc, r1, lsl #8
    2ec8:	00003620 	andeq	r3, r0, r0, lsr #12
    2ecc:	319c0100 	orrscc	r0, ip, r0, lsl #2
    2ed0:	12000009 	andne	r0, r0, #9
    2ed4:	00001954 	andeq	r1, r0, r4, asr r9
    2ed8:	31016701 	tstcc	r1, r1, lsl #14
    2edc:	02000009 	andeq	r0, r0, #9
    2ee0:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    2ee4:	00025904 	andeq	r5, r2, r4, lsl #18
    2ee8:	16591600 	ldrbne	r1, [r9], -r0, lsl #12
    2eec:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    2ef0:	20001d70 	andcs	r1, r0, r0, ror sp
    2ef4:	00000194 	muleq	r0, r4, r1
    2ef8:	09af9c01 	stmibeq	pc!, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    2efc:	59170000 	ldmdbpl	r7, {}	; <UNPREDICTABLE>
    2f00:	01000018 	tsteq	r0, r8, lsl r0
    2f04:	00033ff6 	strdeq	r3, [r3], -r6
    2f08:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    2f0c:	00195417 	andseq	r5, r9, r7, lsl r4
    2f10:	31f60100 	mvnscc	r0, r0, lsl #2
    2f14:	02000009 	andeq	r0, r0, #9
    2f18:	0c185091 	ldceq	0, cr5, [r8], {145}	; 0x91
    2f1c:	0100000e 	tsteq	r0, lr
    2f20:	0000c2f8 	strdeq	ip, [r0], -r8
    2f24:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2f28:	00173918 	andseq	r3, r7, r8, lsl r9
    2f2c:	c2f80100 	rscsgt	r0, r8, #0, 2
    2f30:	02000000 	andeq	r0, r0, #0
    2f34:	0f187091 	svceq	0x00187091
    2f38:	01000016 	tsteq	r0, r6, lsl r0
    2f3c:	0000c2f9 	strdeq	ip, [r0], -r9
    2f40:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2f44:	00190e18 	andseq	r0, r9, r8, lsl lr
    2f48:	c2fa0100 	rscsgt	r0, sl, #0, 2
    2f4c:	02000000 	andeq	r0, r0, #0
    2f50:	65186891 	ldrvs	r6, [r8, #-2193]	; 0xfffff76f
    2f54:	01000019 	tsteq	r0, r9, lsl r0
    2f58:	0002e1fb 	strdeq	lr, [r2], -fp
    2f5c:	58910200 	ldmpl	r1, {r9}
    2f60:	17961900 	ldrne	r1, [r6, r0, lsl #18]
    2f64:	bb010000 	bllt	42f6c <startup-0x1ffbd094>
    2f68:	20001c40 	andcs	r1, r0, r0, asr #24
    2f6c:	00000130 	andeq	r0, r0, r0, lsr r1
    2f70:	59179c01 	ldmdbpl	r7, {r0, sl, fp, ip, pc}
    2f74:	01000018 	tsteq	r0, r8, lsl r0
    2f78:	00033fbb 			; <UNDEFINED> instruction: 0x00033fbb
    2f7c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030104 	adfeqs	f0, f3, f4
  18:	0b0b0b3e 	bleq	2c2d18 <startup-0x1fd3d2e8>
  1c:	0b3a1349 	bleq	e84d48 <startup-0x1f17b2b8>
  20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
  28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  2c:	0400000d 	streq	r0, [r0], #-13
  30:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  34:	00000b1c 	andeq	r0, r0, ip, lsl fp
  38:	0b002405 	bleq	9054 <startup-0x1fff6fac>
  3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  40:	0600000e 	streq	r0, [r0], -lr
  44:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  4c:	00001349 	andeq	r1, r0, r9, asr #6
  50:	03001607 	movweq	r1, #1543	; 0x607
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0013490b 	andseq	r4, r3, fp, lsl #18
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	13490026 	movtne	r0, #36902	; 0x9026
  74:	130b0000 	movwne	r0, #45056	; 0xb000
  78:	3a050b01 	bcc	142c84 <startup-0x1febd37c>
  7c:	01053b0b 	tsteq	r5, fp, lsl #22
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  8c:	0b381349 	bleq	e04db8 <startup-0x1f1fb248>
  90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
  94:	3a0e0300 	bcc	380c9c <startup-0x1fc7f364>
  98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  9c:	00053813 	andeq	r3, r5, r3, lsl r8
  a0:	000d0e00 	andeq	r0, sp, r0, lsl #28
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	1349053b 	movtne	r0, #38203	; 0x953b
  ac:	00000538 	andeq	r0, r0, r8, lsr r5
  b0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
  b4:	00130113 	andseq	r0, r3, r3, lsl r1
  b8:	00211000 	eoreq	r1, r1, r0
  bc:	0b2f1349 	bleq	bc4de8 <startup-0x1f43b218>
  c0:	21110000 	tstcs	r1, r0
  c4:	2f134900 	svccs	0x00134900
  c8:	12000005 	andne	r0, r0, #5
  cc:	0b0b0113 	bleq	2c0520 <startup-0x1fd3fae0>
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	03000d13 	movweq	r0, #3347	; 0xd13
  dc:	3b0b3a08 	blcc	2ce904 <startup-0x1fd316fc>
  e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  e4:	1400000b 	strne	r0, [r0], #-11
  e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f4:	0000193c 	andeq	r1, r0, ip, lsr r9
  f8:	03003415 	movweq	r3, #1045	; 0x415
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	3f13490b 	svccc	0x0013490b
 104:	00193c19 	andseq	r3, r9, r9, lsl ip
 108:	01041600 	tsteq	r4, r0, lsl #12
 10c:	0b0b0b3e 	bleq	2c2e0c <startup-0x1fd3d1f4>
 110:	0b3a1349 	bleq	e84e3c <startup-0x1f17b1c4>
 114:	1301053b 	movwne	r0, #5435	; 0x153b
 118:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
 11c:	1c080300 	stcne	3, cr0, [r8], {-0}
 120:	1800000b 	stmdane	r0, {r0, r1, r3}
 124:	0b0b0113 	bleq	2c0578 <startup-0x1fd3fa88>
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	00001301 	andeq	r1, r0, r1, lsl #6
 130:	03000d19 	movweq	r0, #3353	; 0xd19
 134:	3b0b3a0e 	blcc	2ce974 <startup-0x1fd3168c>
 138:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 13c:	1a00000b 	bne	170 <startup-0x1ffffe90>
 140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 14c:	041b0000 	ldreq	r0, [fp], #-0
 150:	0b0b3e01 	bleq	2cf95c <startup-0x1fd306a4>
 154:	3a13490b 	bcc	4d2588 <startup-0x1fb2da78>
 158:	010b3b0b 	tsteq	fp, fp, lsl #22
 15c:	1c000013 	stcne	0, cr0, [r0], {19}
 160:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 164:	0b3a0b0b 	bleq	e82d98 <startup-0x1f17d268>
 168:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 16c:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
 170:	3a080300 	bcc	200d78 <startup-0x1fdff288>
 174:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 178:	000b3813 	andeq	r3, fp, r3, lsl r8
 17c:	000f1e00 	andeq	r1, pc, r0, lsl #28
 180:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 184:	341f0000 	ldrcc	r0, [pc], #-0	; 18c <startup-0x1ffffe74>
 188:	3a0e0300 	bcc	380d90 <startup-0x1fc7f270>
 18c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 190:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 194:	20000018 	andcs	r0, r0, r8, lsl r0
 198:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 19c:	0b3a0e03 	bleq	e839b0 <startup-0x1f17c650>
 1a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1ac:	00130119 	andseq	r0, r3, r9, lsl r1
 1b0:	010b2100 	mrseq	r2, (UNDEF: 27)
 1b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1b8:	00001301 	andeq	r1, r0, r1, lsl #6
 1bc:	03003422 	movweq	r3, #1058	; 0x422
 1c0:	3b0b3a08 	blcc	2ce9e8 <startup-0x1fd31618>
 1c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1c8:	23000018 	movwcs	r0, #24
 1cc:	0111010b 	tsteq	r1, fp, lsl #2
 1d0:	00000612 	andeq	r0, r0, r2, lsl r6
 1d4:	49002124 	stmdbmi	r0, {r2, r5, r8, sp}
 1d8:	00182f13 	andseq	r2, r8, r3, lsl pc
 1dc:	012e2500 			; <UNDEFINED> instruction: 0x012e2500
 1e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e4:	0b3b0b3a 	bleq	ec2ed4 <startup-0x1f13d12c>
 1e8:	01111927 	tsteq	r1, r7, lsr #18
 1ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1f0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1f4:	26000013 			; <UNDEFINED> instruction: 0x26000013
 1f8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 1fc:	0b3b0b3a 	bleq	ec2eec <startup-0x1f13d114>
 200:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 204:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
 208:	03193f00 	tsteq	r9, #0, 30
 20c:	3b0b3a0e 	blcc	2cea4c <startup-0x1fd315b4>
 210:	1119270b 	tstne	r9, fp, lsl #14
 214:	40061201 	andmi	r1, r6, r1, lsl #4
 218:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 21c:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
 220:	03193f01 	tsteq	r9, #1, 30
 224:	3b0b3a0e 	blcc	2cea64 <startup-0x1fd3159c>
 228:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 22c:	96184006 	ldrls	r4, [r8], -r6
 230:	13011942 	movwne	r1, #6466	; 0x1942
 234:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
 238:	03193f01 	tsteq	r9, #1, 30
 23c:	3b0b3a0e 	blcc	2cea7c <startup-0x1fd31584>
 240:	11192705 	tstne	r9, r5, lsl #14
 244:	40061201 	andmi	r1, r6, r1, lsl #4
 248:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 24c:	00001301 	andeq	r1, r0, r1, lsl #6
 250:	0300052a 	movweq	r0, #1322	; 0x52a
 254:	3b0b3a0e 	blcc	2cea94 <startup-0x1fd3156c>
 258:	02134905 	andseq	r4, r3, #81920	; 0x14000
 25c:	2b000018 	blcs	2c4 <startup-0x1ffffd3c>
 260:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 264:	0b3a0e03 	bleq	e83a78 <startup-0x1f17c588>
 268:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 26c:	01111349 	tsteq	r1, r9, asr #6
 270:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 274:	01194297 			; <UNDEFINED> instruction: 0x01194297
 278:	2c000013 	stccs	0, cr0, [r0], {19}
 27c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 280:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 284:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 288:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
 28c:	03193f00 	tsteq	r9, #0, 30
 290:	3b0b3a0e 	blcc	2cead0 <startup-0x1fd31530>
 294:	11192705 	tstne	r9, r5, lsl #14
 298:	40061201 	andmi	r1, r6, r1, lsl #4
 29c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2a0:	342e0000 	strtcc	r0, [lr], #-0
 2a4:	3a080300 	bcc	200eac <startup-0x1fdff154>
 2a8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 2ac:	00180213 	andseq	r0, r8, r3, lsl r2
 2b0:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
 2b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2bc:	01111927 	tsteq	r1, r7, lsr #18
 2c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2c8:	30000013 	andcc	r0, r0, r3, lsl r0
 2cc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2d0:	0b3a0e03 	bleq	e83ae4 <startup-0x1f17c51c>
 2d4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 2d8:	01111349 	tsteq	r1, r9, asr #6
 2dc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2e0:	00194297 	mulseq	r9, r7, r2
 2e4:	012e3100 			; <UNDEFINED> instruction: 0x012e3100
 2e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2f0:	13491927 	movtne	r1, #39207	; 0x9927
 2f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2fc:	00130119 	andseq	r0, r3, r9, lsl r1
 300:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
 304:	0b3a0e03 	bleq	e83b18 <startup-0x1f17c4e8>
 308:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 30c:	01111349 	tsteq	r1, r9, asr #6
 310:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 314:	01194296 			; <UNDEFINED> instruction: 0x01194296
 318:	33000013 	movwcc	r0, #19
 31c:	0e03012e 	adfeqsp	f0, f3, #0.5
 320:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 324:	01111927 	tsteq	r1, r7, lsr #18
 328:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 32c:	00194297 	mulseq	r9, r7, r2
 330:	11010000 	mrsne	r0, (UNDEF: 1)
 334:	130e2501 	movwne	r2, #58625	; 0xe501
 338:	1b0e030b 	blne	380f6c <startup-0x1fc7f094>
 33c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 340:	00171006 	andseq	r1, r7, r6
 344:	00240200 	eoreq	r0, r4, r0, lsl #4
 348:	0b3e0b0b 	bleq	f82f7c <startup-0x1f07d084>
 34c:	00000e03 	andeq	r0, r0, r3, lsl #28
 350:	03001603 	movweq	r1, #1539	; 0x603
 354:	3b0b3a0e 	blcc	2ceb94 <startup-0x1fd3146c>
 358:	0013490b 	andseq	r4, r3, fp, lsl #18
 35c:	00240400 	eoreq	r0, r4, r0, lsl #8
 360:	0b3e0b0b 	bleq	f82f94 <startup-0x1f07d06c>
 364:	00000803 	andeq	r0, r0, r3, lsl #16
 368:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 36c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 370:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 374:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 378:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 37c:	0000193c 	andeq	r1, r0, ip, lsr r9
 380:	03003407 	movweq	r3, #1031	; 0x407
 384:	3b0b3a0e 	blcc	2cebc4 <startup-0x1fd3143c>
 388:	3f13490b 	svccc	0x0013490b
 38c:	00193c19 	andseq	r3, r9, r9, lsl ip
 390:	01040800 	tsteq	r4, r0, lsl #16
 394:	0b0b0b3e 	bleq	2c3094 <startup-0x1fd3cf6c>
 398:	0b3a1349 	bleq	e850c4 <startup-0x1f17af3c>
 39c:	1301053b 	movwne	r0, #5435	; 0x153b
 3a0:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 3a4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 3a8:	0a00000b 	beq	3dc <startup-0x1ffffc24>
 3ac:	0b0b0113 	bleq	2c0800 <startup-0x1fd3f800>
 3b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3b4:	00001301 	andeq	r1, r0, r1, lsl #6
 3b8:	03000d0b 	movweq	r0, #3339	; 0xd0b
 3bc:	3b0b3a0e 	blcc	2cebfc <startup-0x1fd31404>
 3c0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 3c4:	0c00000b 	stceq	0, cr0, [r0], {11}
 3c8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 3cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3d0:	0b381349 	bleq	e050fc <startup-0x1f1faf04>
 3d4:	010d0000 	mrseq	r0, (UNDEF: 13)
 3d8:	01134901 	tsteq	r3, r1, lsl #18
 3dc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 3e0:	13490021 	movtne	r0, #36897	; 0x9021
 3e4:	00000b2f 	andeq	r0, r0, pc, lsr #22
 3e8:	0300160f 	movweq	r1, #1551	; 0x60f
 3ec:	3b0b3a0e 	blcc	2cec2c <startup-0x1fd313d4>
 3f0:	00134905 	andseq	r4, r3, r5, lsl #18
 3f4:	01041000 	mrseq	r1, (UNDEF: 4)
 3f8:	0b0b0b3e 	bleq	2c30f8 <startup-0x1fd3cf08>
 3fc:	0b3a1349 	bleq	e85128 <startup-0x1f17aed8>
 400:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 404:	13110000 	tstne	r1, #0
 408:	3a0b0b01 	bcc	2c3014 <startup-0x1fd3cfec>
 40c:	010b3b0b 	tsteq	fp, fp, lsl #22
 410:	12000013 	andne	r0, r0, #19
 414:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 418:	0b3b0b3a 	bleq	ec3108 <startup-0x1f13cef8>
 41c:	0b381349 	bleq	e05148 <startup-0x1f1faeb8>
 420:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 424:	03193f01 	tsteq	r9, #1, 30
 428:	3b0b3a0e 	blcc	2cec68 <startup-0x1fd31398>
 42c:	11192705 	tstne	r9, r5, lsl #14
 430:	40061201 	andmi	r1, r6, r1, lsl #4
 434:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 438:	00001301 	andeq	r1, r0, r1, lsl #6
 43c:	03000514 	movweq	r0, #1300	; 0x514
 440:	3b0b3a0e 	blcc	2cec80 <startup-0x1fd31380>
 444:	02134905 	andseq	r4, r3, #81920	; 0x14000
 448:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 44c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 450:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 454:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 458:	0f160000 	svceq	0x00160000
 45c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 460:	17000013 	smladne	r0, r3, r0, r0
 464:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 468:	0b3a0e03 	bleq	e83c7c <startup-0x1f17c384>
 46c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 470:	01111349 	tsteq	r1, r9, asr #6
 474:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 478:	01194297 			; <UNDEFINED> instruction: 0x01194297
 47c:	18000013 	stmdane	r0, {r0, r1, r4}
 480:	08030034 	stmdaeq	r3, {r2, r4, r5}
 484:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 488:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 48c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 490:	03193f01 	tsteq	r9, #1, 30
 494:	3b0b3a0e 	blcc	2cecd4 <startup-0x1fd3132c>
 498:	1119270b 	tstne	r9, fp, lsl #14
 49c:	40061201 	andmi	r1, r6, r1, lsl #4
 4a0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4a4:	00001301 	andeq	r1, r0, r1, lsl #6
 4a8:	0300051a 	movweq	r0, #1306	; 0x51a
 4ac:	3b0b3a0e 	blcc	2cecec <startup-0x1fd31314>
 4b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4b4:	1b000018 	blne	51c <startup-0x1ffffae4>
 4b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 4bc:	0b3b0b3a 	bleq	ec31ac <startup-0x1f13ce54>
 4c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4c4:	341c0000 	ldrcc	r0, [ip], #-0
 4c8:	3a080300 	bcc	2010d0 <startup-0x1fdfef30>
 4cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4d0:	00180213 	andseq	r0, r8, r3, lsl r2
 4d4:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
 4d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4dc:	0b3b0b3a 	bleq	ec31cc <startup-0x1f13ce34>
 4e0:	01111927 	tsteq	r1, r7, lsr #18
 4e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4e8:	00194296 	mulseq	r9, r6, r2
 4ec:	11010000 	mrsne	r0, (UNDEF: 1)
 4f0:	130e2501 	movwne	r2, #58625	; 0xe501
 4f4:	1b0e030b 	blne	381128 <startup-0x1fc7eed8>
 4f8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 4fc:	00171006 	andseq	r1, r7, r6
 500:	00240200 	eoreq	r0, r4, r0, lsl #4
 504:	0b3e0b0b 	bleq	f83138 <startup-0x1f07cec8>
 508:	00000e03 	andeq	r0, r0, r3, lsl #28
 50c:	03001603 	movweq	r1, #1539	; 0x603
 510:	3b0b3a0e 	blcc	2ced50 <startup-0x1fd312b0>
 514:	0013490b 	andseq	r4, r3, fp, lsl #18
 518:	00240400 	eoreq	r0, r4, r0, lsl #8
 51c:	0b3e0b0b 	bleq	f83150 <startup-0x1f07ceb0>
 520:	00000803 	andeq	r0, r0, r3, lsl #16
 524:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 528:	06000013 			; <UNDEFINED> instruction: 0x06000013
 52c:	13490026 	movtne	r0, #36902	; 0x9026
 530:	13070000 	movwne	r0, #28672	; 0x7000
 534:	3a050b01 	bcc	143140 <startup-0x1febcec0>
 538:	01053b0b 	tsteq	r5, fp, lsl #22
 53c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 540:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 544:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 548:	0b381349 	bleq	e05274 <startup-0x1f1fad8c>
 54c:	0d090000 	stceq	0, cr0, [r9, #-0]
 550:	3a0e0300 	bcc	381158 <startup-0x1fc7eea8>
 554:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 558:	00053813 	andeq	r3, r5, r3, lsl r8
 55c:	000d0a00 	andeq	r0, sp, r0, lsl #20
 560:	0b3a0803 	bleq	e82574 <startup-0x1f17da8c>
 564:	1349053b 	movtne	r0, #38203	; 0x953b
 568:	00000538 	andeq	r0, r0, r8, lsr r5
 56c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 570:	00130113 	andseq	r0, r3, r3, lsl r1
 574:	00210c00 	eoreq	r0, r1, r0, lsl #24
 578:	0b2f1349 	bleq	bc52a4 <startup-0x1f43ad5c>
 57c:	210d0000 	mrscs	r0, (UNDEF: 13)
 580:	2f134900 	svccs	0x00134900
 584:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
 588:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 58c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 590:	00001349 	andeq	r1, r0, r9, asr #6
 594:	0b01130f 	bleq	451d8 <startup-0x1ffbae28>
 598:	3b0b3a0b 	blcc	2cedcc <startup-0x1fd31234>
 59c:	00130105 	andseq	r0, r3, r5, lsl #2
 5a0:	000d1000 	andeq	r1, sp, r0
 5a4:	0b3a0803 	bleq	e825b8 <startup-0x1f17da48>
 5a8:	1349053b 	movtne	r0, #38203	; 0x953b
 5ac:	00000b38 	andeq	r0, r0, r8, lsr fp
 5b0:	03003411 	movweq	r3, #1041	; 0x411
 5b4:	3b0b3a0e 	blcc	2cedf4 <startup-0x1fd3120c>
 5b8:	3f134905 	svccc	0x00134905
 5bc:	00193c19 	andseq	r3, r9, r9, lsl ip
 5c0:	00341200 	eorseq	r1, r4, r0, lsl #4
 5c4:	0b3a0e03 	bleq	e83dd8 <startup-0x1f17c228>
 5c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5cc:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 5d0:	04130000 	ldreq	r0, [r3], #-0
 5d4:	0b0b3e01 	bleq	2cfde0 <startup-0x1fd30220>
 5d8:	3a13490b 	bcc	4d2a0c <startup-0x1fb2d5f4>
 5dc:	01053b0b 	tsteq	r5, fp, lsl #22
 5e0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 5e4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 5e8:	00000b1c 	andeq	r0, r0, ip, lsl fp
 5ec:	0b011315 	bleq	45248 <startup-0x1ffbadb8>
 5f0:	3b0b3a0b 	blcc	2cee24 <startup-0x1fd311dc>
 5f4:	0013010b 	andseq	r0, r3, fp, lsl #2
 5f8:	000d1600 	andeq	r1, sp, r0, lsl #12
 5fc:	0b3a0e03 	bleq	e83e10 <startup-0x1f17c1f0>
 600:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 604:	00000b38 	andeq	r0, r0, r8, lsr fp
 608:	3f012e17 	svccc	0x00012e17
 60c:	3a0e0319 	bcc	381278 <startup-0x1fc7ed88>
 610:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 614:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 618:	97184006 	ldrls	r4, [r8, -r6]
 61c:	13011942 	movwne	r1, #6466	; 0x1942
 620:	05180000 	ldreq	r0, [r8, #-0]
 624:	3a0e0300 	bcc	38122c <startup-0x1fc7edd4>
 628:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 62c:	00180213 	andseq	r0, r8, r3, lsl r2
 630:	00341900 	eorseq	r1, r4, r0, lsl #18
 634:	0b3a0e03 	bleq	e83e48 <startup-0x1f17c1b8>
 638:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 63c:	00001802 	andeq	r1, r0, r2, lsl #16
 640:	0b000f1a 	bleq	42b0 <startup-0x1fffbd50>
 644:	0013490b 	andseq	r4, r3, fp, lsl #18
 648:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 64c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 650:	0b3b0b3a 	bleq	ec3340 <startup-0x1f13ccc0>
 654:	01111927 	tsteq	r1, r7, lsr #18
 658:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 65c:	00194297 	mulseq	r9, r7, r2
 660:	11010000 	mrsne	r0, (UNDEF: 1)
 664:	130e2501 	movwne	r2, #58625	; 0xe501
 668:	1b0e030b 	blne	38129c <startup-0x1fc7ed64>
 66c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 670:	00171006 	andseq	r1, r7, r6
 674:	00240200 	eoreq	r0, r4, r0, lsl #4
 678:	0b3e0b0b 	bleq	f832ac <startup-0x1f07cd54>
 67c:	00000e03 	andeq	r0, r0, r3, lsl #28
 680:	03001603 	movweq	r1, #1539	; 0x603
 684:	3b0b3a0e 	blcc	2ceec4 <startup-0x1fd3113c>
 688:	0013490b 	andseq	r4, r3, fp, lsl #18
 68c:	00240400 	eoreq	r0, r4, r0, lsl #8
 690:	0b3e0b0b 	bleq	f832c4 <startup-0x1f07cd3c>
 694:	00000803 	andeq	r0, r0, r3, lsl #16
 698:	0b011305 	bleq	452b4 <startup-0x1ffbad4c>
 69c:	3b0b3a0b 	blcc	2ceed0 <startup-0x1fd31130>
 6a0:	0013010b 	andseq	r0, r3, fp, lsl #2
 6a4:	000d0600 	andeq	r0, sp, r0, lsl #12
 6a8:	0b3a0e03 	bleq	e83ebc <startup-0x1f17c144>
 6ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6b0:	00000b38 	andeq	r0, r0, r8, lsr fp
 6b4:	03000d07 	movweq	r0, #3335	; 0xd07
 6b8:	3b0b3a08 	blcc	2ceee0 <startup-0x1fd31120>
 6bc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 6c0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 6c4:	13490101 	movtne	r0, #37121	; 0x9101
 6c8:	00001301 	andeq	r1, r0, r1, lsl #6
 6cc:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 6d0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 6d4:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
 6d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6dc:	0b3b0b3a 	bleq	ec33cc <startup-0x1f13cc34>
 6e0:	13491927 	movtne	r1, #39207	; 0x9927
 6e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 6ec:	00130119 	andseq	r0, r3, r9, lsl r1
 6f0:	00050b00 	andeq	r0, r5, r0, lsl #22
 6f4:	0b3a0e03 	bleq	e83f08 <startup-0x1f17c0f8>
 6f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6fc:	00001802 	andeq	r1, r0, r2, lsl #16
 700:	0b000f0c 	bleq	4338 <startup-0x1fffbcc8>
 704:	0013490b 	andseq	r4, r3, fp, lsl #18
 708:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 70c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 710:	0b3b0b3a 	bleq	ec3400 <startup-0x1f13cc00>
 714:	01111927 	tsteq	r1, r7, lsr #18
 718:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 71c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 720:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 724:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 728:	0b3b0b3a 	bleq	ec3418 <startup-0x1f13cbe8>
 72c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 730:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 734:	03193f01 	tsteq	r9, #1, 30
 738:	3b0b3a0e 	blcc	2cef78 <startup-0x1fd31088>
 73c:	1119270b 	tstne	r9, fp, lsl #14
 740:	40061201 	andmi	r1, r6, r1, lsl #4
 744:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 748:	01000000 	mrseq	r0, (UNDEF: 0)
 74c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 750:	0e030b13 	vmoveq.32	d3[0], r0
 754:	01110e1b 	tsteq	r1, fp, lsl lr
 758:	17100612 			; <UNDEFINED> instruction: 0x17100612
 75c:	24020000 	strcs	r0, [r2], #-0
 760:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 764:	000e030b 	andeq	r0, lr, fp, lsl #6
 768:	00160300 	andseq	r0, r6, r0, lsl #6
 76c:	0b3a0e03 	bleq	e83f80 <startup-0x1f17c080>
 770:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 774:	24040000 	strcs	r0, [r4], #-0
 778:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 77c:	0008030b 	andeq	r0, r8, fp, lsl #6
 780:	00350500 	eorseq	r0, r5, r0, lsl #10
 784:	00001349 	andeq	r1, r0, r9, asr #6
 788:	03003406 	movweq	r3, #1030	; 0x406
 78c:	3b0b3a0e 	blcc	2cefcc <startup-0x1fd31034>
 790:	3f134905 	svccc	0x00134905
 794:	00193c19 	andseq	r3, r9, r9, lsl ip
 798:	00340700 	eorseq	r0, r4, r0, lsl #14
 79c:	0b3a0e03 	bleq	e83fb0 <startup-0x1f17c050>
 7a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7a4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 7a8:	04080000 	streq	r0, [r8], #-0
 7ac:	0b0b3e01 	bleq	2cffb8 <startup-0x1fd30048>
 7b0:	3a13490b 	bcc	4d2be4 <startup-0x1fb2d41c>
 7b4:	01053b0b 	tsteq	r5, fp, lsl #22
 7b8:	09000013 	stmdbeq	r0, {r0, r1, r4}
 7bc:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 7c0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 7c4:	0300280a 	movweq	r2, #2058	; 0x80a
 7c8:	000b1c08 	andeq	r1, fp, r8, lsl #24
 7cc:	00160b00 	andseq	r0, r6, r0, lsl #22
 7d0:	0b3a0e03 	bleq	e83fe4 <startup-0x1f17c01c>
 7d4:	1349053b 	movtne	r0, #38203	; 0x953b
 7d8:	130c0000 	movwne	r0, #49152	; 0xc000
 7dc:	3a0b0b01 	bcc	2c33e8 <startup-0x1fd3cc18>
 7e0:	01053b0b 	tsteq	r5, fp, lsl #22
 7e4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 7e8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 7ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 7f0:	0b381349 	bleq	e0551c <startup-0x1f1faae4>
 7f4:	0d0e0000 	stceq	0, cr0, [lr, #-0]
 7f8:	3a0e0300 	bcc	381400 <startup-0x1fc7ec00>
 7fc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 800:	000b3813 	andeq	r3, fp, r3, lsl r8
 804:	01130f00 	tsteq	r3, r0, lsl #30
 808:	0b3a0b0b 	bleq	e8343c <startup-0x1f17cbc4>
 80c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 810:	0d100000 	ldceq	0, cr0, [r0, #-0]
 814:	3a0e0300 	bcc	38141c <startup-0x1fc7ebe4>
 818:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 81c:	000b3813 	andeq	r3, fp, r3, lsl r8
 820:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 824:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 828:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 82c:	01111927 	tsteq	r1, r7, lsr #18
 830:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 834:	01194297 			; <UNDEFINED> instruction: 0x01194297
 838:	12000013 	andne	r0, r0, #19
 83c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 840:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 844:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 848:	34130000 	ldrcc	r0, [r3], #-0
 84c:	3a0e0300 	bcc	381454 <startup-0x1fc7ebac>
 850:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 854:	00180213 	andseq	r0, r8, r3, lsl r2
 858:	000f1400 	andeq	r1, pc, r0, lsl #8
 85c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 860:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 864:	03193f01 	tsteq	r9, #1, 30
 868:	3b0b3a0e 	blcc	2cf0a8 <startup-0x1fd30f58>
 86c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 870:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 874:	97184006 	ldrls	r4, [r8, -r6]
 878:	13011942 	movwne	r1, #6466	; 0x1942
 87c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 880:	03193f01 	tsteq	r9, #1, 30
 884:	3b0b3a0e 	blcc	2cf0c4 <startup-0x1fd30f3c>
 888:	1119270b 	tstne	r9, fp, lsl #14
 88c:	40061201 	andmi	r1, r6, r1, lsl #4
 890:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 894:	00001301 	andeq	r1, r0, r1, lsl #6
 898:	03000517 	movweq	r0, #1303	; 0x517
 89c:	3b0b3a0e 	blcc	2cf0dc <startup-0x1fd30f24>
 8a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 8a4:	18000018 	stmdane	r0, {r3, r4}
 8a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 8ac:	0b3b0b3a 	bleq	ec359c <startup-0x1f13ca64>
 8b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 8b4:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 8b8:	03193f01 	tsteq	r9, #1, 30
 8bc:	3b0b3a0e 	blcc	2cf0fc <startup-0x1fd30f04>
 8c0:	1119270b 	tstne	r9, fp, lsl #14
 8c4:	40061201 	andmi	r1, r6, r1, lsl #4
 8c8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 8cc:	Address 0x000008cc is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00001434 	andeq	r1, r0, r4, lsr r4
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	18970002 	ldmne	r7, {r1}
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20001444 	andcs	r1, r0, r4, asr #8
  3c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	1ebe0002 	cdpne	0, 11, cr0, cr14, cr2, {0}
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20001954 	andcs	r1, r0, r4, asr r9
  5c:	000001c4 	andeq	r0, r0, r4, asr #3
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	24050002 	strcs	r0, [r5], #-2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20001b18 	andcs	r1, r0, r8, lsl fp
  7c:	00000128 	andeq	r0, r0, r8, lsr #2
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	25b20002 	ldrcs	r0, [r2, #2]!
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001c40 	andcs	r1, r0, r0, asr #24
  9c:	000009fe 	strdeq	r0, [r0], -lr
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20001444 	andcs	r1, r0, r4, asr #8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000566 	andeq	r0, r0, r6, ror #10
   4:	02070002 	andeq	r0, r7, #2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
  1c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
  20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
  24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
  28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
  2c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
  30:	2f534953 	svccs	0x00534953
  34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  38:	00656475 	rsbeq	r6, r5, r5, ror r4
  3c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; ffffff8c <GPIO_Ports+0xdfffd800>
  40:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  44:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  48:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
  4c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  50:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  54:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
  58:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
  5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
  60:	445f6870 	ldrbmi	r6, [pc], #-2160	; 68 <startup-0x1fffff98>
  64:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  68:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
  6c:	3a430063 	bcc	10c0200 <startup-0x1ef3fe00>
  70:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  74:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
  78:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
  7c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
  80:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  84:	6f442f65 	svcvs	0x00442f65
  88:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
  8c:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
  90:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
  94:	41442f62 	cmpmi	r4, r2, ror #30
  98:	30393254 	eorscc	r3, r9, r4, asr r2
  9c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
  a0:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
  a4:	2f6d6574 	svccs	0x006d6574
  a8:	2f646f6b 	svccs	0x00646f6b
  ac:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
  b0:	2f2e2e00 	svccs	0x002e2e00
  b4:	2f62696c 	svccs	0x0062696c
  b8:	334d5453 	movtcc	r5, #54355	; 0xd453
  bc:	5f344632 	svcpl	0x00344632
  c0:	2f62696c 	svccs	0x0062696c
  c4:	334d5453 	movtcc	r5, #54355	; 0xd453
  c8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
  cc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
  d0:	72655064 	rsbvc	r5, r5, #100	; 0x64
  d4:	5f687069 	svcpl	0x00687069
  d8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  dc:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
  e0:	6300636e 	movwvs	r6, #878	; 0x36e
  e4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
  e8:	70706165 	rsbsvc	r6, r0, r5, ror #2
  ec:	646f635c 	strbtvs	r6, [pc], #-860	; f4 <startup-0x1fffff0c>
  f0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  f4:	6f745c65 	svcvs	0x00745c65
  f8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
  fc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 100:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 104:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 108:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 10c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 110:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 114:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 118:	616d5c65 	cmnvs	sp, r5, ror #24
 11c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 120:	3a630065 	bcc	18c02bc <startup-0x1e73fd44>
 124:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 128:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 12c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 130:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 134:	6f6f745c 	svcvs	0x006f745c
 138:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 13c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 140:	615c6d72 	cmpvs	ip, r2, ror sp
 144:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 148:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 14c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 150:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 154:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 158:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 15c:	6f630000 	svcvs	0x00630000
 160:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 164:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 168:	00000100 	andeq	r0, r0, r0, lsl #2
 16c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 170:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 174:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
 178:	00632e63 	rsbeq	r2, r3, r3, ror #28
 17c:	69000002 	stmdbvs	r0, {r1}
 180:	2e74696e 	vsubcs.f16	s13, s8, s29	; <UNPREDICTABLE>
 184:	00030068 	andeq	r0, r3, r8, rrx
 188:	61747300 	cmnvs	r4, r0, lsl #6
 18c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 190:	0300632e 	movweq	r6, #814	; 0x32e
 194:	74730000 	ldrbtvc	r0, [r3], #-0
 198:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 19c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 1a0:	00040068 	andeq	r0, r4, r8, rrx
 1a4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 1a8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 1ac:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1b0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 1b4:	00050068 	andeq	r0, r5, r8, rrx
 1b8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 1bc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 1c0:	0600682e 	streq	r6, [r0], -lr, lsr #16
 1c4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 1c8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 1cc:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
 1d0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 1d4:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 1d8:	00000400 	andeq	r0, r0, r0, lsl #8
 1dc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 1e0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 1e4:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
 1e8:	00682e63 	rsbeq	r2, r8, r3, ror #28
 1ec:	73000004 	movwvc	r0, #4
 1f0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 1f4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 1f8:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 1fc:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 200:	73000004 	movwvc	r0, #4
 204:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 208:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
 20c:	00000300 	andeq	r0, r0, r0, lsl #6
 210:	02050000 	andeq	r0, r5, #0
 214:	20000010 	andcs	r0, r0, r0, lsl r0
 218:	010cdd03 	tsteq	ip, r3, lsl #26
 21c:	1ecd4b75 			; <UNDEFINED> instruction: 0x1ecd4b75
 220:	00fc03d8 	ldrsbteq	r0, [ip], #56	; 0x38
 224:	02004b90 	andeq	r4, r0, #144, 22	; 0x24000
 228:	58060104 	stmdapl	r6, {r2, r8}
 22c:	674b3006 	strbvs	r3, [fp, -r6]
 230:	04213f3d 	strteq	r3, [r1], #-3901	; 0xfffff0c3
 234:	73f70302 	mvnsvc	r0, #134217728	; 0x8000000
 238:	3f693082 	svccc	0x00693082
 23c:	4e4f4069 	cdpmi	0, 4, cr4, cr15, cr9, {3}
 240:	03503f69 	cmpeq	r0, #420	; 0x1a4
 244:	3f6be417 	svccc	0x006be417
 248:	740f034b 	strvc	r0, [pc], #-843	; 250 <startup-0x1ffffdb0>
 24c:	003d2f3d 	eorseq	r2, sp, sp, lsr pc
 250:	40020402 	andmi	r0, r2, r2, lsl #8
 254:	02040200 	andeq	r0, r4, #0, 4
 258:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 25c:	02003d02 	andeq	r3, r0, #2, 26	; 0x80
 260:	58060104 	stmdapl	r6, {r2, r8}
 264:	4e5a4c06 	cdpmi	12, 5, cr4, cr10, cr6, {0}
 268:	0b032f3e 	bleq	cbf68 <startup-0x1ff34098>
 26c:	3f32674a 	svccc	0x0032674a
 270:	033d694d 	teqeq	sp, #1261568	; 0x134000
 274:	4b6a7415 	blmi	1a9d2d0 <startup-0x1e562d30>
 278:	6c661403 	cfstrdvs	mvd1, [r6], #-12
 27c:	0b033f3f 	bleq	cff80 <startup-0x1ff30080>
 280:	20790366 	rsbscs	r0, r9, r6, ror #6
 284:	243d233d 	ldrtcs	r2, [sp], #-829	; 0xfffffcc3
 288:	6a740f03 	bvs	1d03e9c <startup-0x1e2fc164>
 28c:	00de034b 	sbcseq	r0, lr, fp, asr #6
 290:	2dbb7c66 	ldccs	12, cr7, [fp, #408]!	; 0x198
 294:	660e033e 			; <UNDEFINED> instruction: 0x660e033e
 298:	1a034b69 	bne	d3044 <startup-0x1ff2cfbc>
 29c:	03835d66 	orreq	r5, r3, #6528	; 0x1980
 2a0:	69740185 	ldmdbvs	r4!, {r0, r2, r7, r8}^
 2a4:	00e9034b 	rsceq	r0, r9, fp, asr #6
 2a8:	03ad6c66 			; <UNDEFINED> instruction: 0x03ad6c66
 2ac:	4b69740d 	blmi	1a5d2e8 <startup-0x1e5a2d18>
 2b0:	69660e03 	stmdbvs	r6!, {r0, r1, r9, sl, fp}^
 2b4:	6615034b 	ldrvs	r0, [r5], -fp, asr #6
 2b8:	4d3f3459 	cfldrsmi	mvf3, [pc, #-356]!	; 15c <startup-0x1ffffea4>
 2bc:	18034169 	stmdane	r3, {r0, r3, r5, r6, r8, lr}
 2c0:	3f345990 	svccc	0x00345990
 2c4:	0341694d 	movteq	r6, #6477	; 0x194d
 2c8:	4b7401b3 	blmi	1d0099c <startup-0x1e2ff664>
 2cc:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
 2d0:	660d033d 			; <UNDEFINED> instruction: 0x660d033d
 2d4:	1703672f 	strne	r6, [r3, -pc, lsr #14]
 2d8:	3f334b66 	svccc	0x00334b66
 2dc:	033d4d4d 	teqeq	sp, #4928	; 0x1340
 2e0:	334b660f 	movtcc	r6, #46607	; 0xb60f
 2e4:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
 2e8:	4b820f03 	blmi	fe083efc <GPIO_Ports+0xde081770>
 2ec:	5b4d3f33 	blpl	134ffc0 <startup-0x1ecb0040>
 2f0:	9024033d 	eorls	r0, r4, sp, lsr r3
 2f4:	775ac04b 	ldrbvc	ip, [sl, -fp, asr #32]
 2f8:	263d223d 			; <UNDEFINED> instruction: 0x263d223d
 2fc:	db3f5a67 	blle	fd6ca0 <startup-0x1f029360>
 300:	038383cb 	orreq	r8, r3, #738197507	; 0x2c000003
 304:	253d201b 	ldrcs	r2, [sp, #-27]!	; 0xffffffe5
 308:	69683d59 	stmdbvs	r8!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}^
 30c:	69683d67 	stmdbvs	r8!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}^
 310:	67683d67 	strbvs	r3, [r8, -r7, ror #26]!
 314:	4bba3f03 	blmi	fee8ff28 <GPIO_Ports+0xdee8d79c>
 318:	4d3f8433 	cfldrsmi	mvf8, [pc, #-204]!	; 254 <startup-0x1ffffdac>
 31c:	03834069 	orreq	r4, r3, #105	; 0x69
 320:	4b6a9e0a 	blmi	1aa7b50 <startup-0x1e5584b0>
 324:	69660c03 	stmdbvs	r6!, {r0, r1, sl, fp}^
 328:	01b8034b 			; <UNDEFINED> instruction: 0x01b8034b
 32c:	033d4e66 	teqeq	sp, #1632	; 0x660
 330:	334b7416 	movtcc	r7, #46102	; 0xb416
 334:	4b4d4d4d 	blmi	1353870 <startup-0x1ecac790>
 338:	4b821403 	blmi	fe08534c <GPIO_Ports+0xde082bc0>
 33c:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 340:	8211034b 	andshi	r0, r1, #738197505	; 0x2c000001
 344:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 348:	10034b5b 	andne	r4, r3, fp, asr fp
 34c:	4d334b74 	vldmdbmi	r3!, {d4-<overflow reg d61>}
 350:	034b694d 	movteq	r6, #47437	; 0xb94d
 354:	4b8200d3 	blmi	fe0806a8 <GPIO_Ports+0xde07df1c>
 358:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 35c:	00f0034b 	rscseq	r0, r0, fp, asr #6
 360:	033d4e82 	teqeq	sp, #2080	; 0x820
 364:	4c797425 	cfldrdmi	mvd7, [r9], #-148	; 0xffffff6c
 368:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 36c:	4c797413 	cfldrdmi	mvd7, [r9], #-76	; 0xffffffb4
 370:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 374:	4c797411 	cfldrdmi	mvd7, [r9], #-68	; 0xffffffbc
 378:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 37c:	4c79742c 	cfldrdmi	mvd7, [r9], #-176	; 0xffffff50
 380:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 384:	4c797427 	cfldrdmi	mvd7, [r9], #-156	; 0xffffff64
 388:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 38c:	4c79741d 	cfldrdmi	mvd7, [r9], #-116	; 0xffffff8c
 390:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 394:	4c797410 	cfldrdmi	mvd7, [r9], #-64	; 0xffffffc0
 398:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 39c:	4c79740e 	cfldrdmi	mvd7, [r9], #-56	; 0xffffffc8
 3a0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3a4:	4c787429 	cfldrdmi	mvd7, [r8], #-164	; 0xffffff5c
 3a8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3ac:	4c787423 	cfldrdmi	mvd7, [r8], #-140	; 0xffffff74
 3b0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3b4:	4c787425 	cfldrdmi	mvd7, [r8], #-148	; 0xffffff6c
 3b8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3bc:	4c787414 	cfldrdmi	mvd7, [r8], #-80	; 0xffffffb0
 3c0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3c4:	4c787412 	cfldrdmi	mvd7, [r8], #-72	; 0xffffffb8
 3c8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3cc:	4c78742d 	cfldrdmi	mvd7, [r8], #-180	; 0xffffff4c
 3d0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3d4:	4c787428 	cfldrdmi	mvd7, [r8], #-160	; 0xffffff60
 3d8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3dc:	4c6a740c 	cfstrdmi	mvd7, [sl], #-48	; 0xffffffd0
 3e0:	03681e6c 	cmneq	r8, #108, 28	; 0x6c0
 3e4:	947402ac 	ldrbtls	r0, [r4], #-684	; 0xfffffd54
 3e8:	ae1e974d 	cdpge	7, 1, cr9, cr14, cr13, {2}
 3ec:	67661703 	strbvs	r1, [r6, -r3, lsl #14]!
 3f0:	59502f2f 	ldmdbpl	r0, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 3f4:	4e3e4c3e 	mrcmi	12, 1, r4, cr14, cr14, {1}
 3f8:	5c765940 			; <UNDEFINED> instruction: 0x5c765940
 3fc:	0a033d4d 	beq	cf938 <startup-0x1ff306c8>
 400:	03753066 	cmneq	r5, #102	; 0x66
 404:	50675811 	rsbpl	r5, r7, r1, lsl r8
 408:	3d4d5c68 	stclcc	12, cr5, [sp, #-416]	; 0xfffffe60
 40c:	6c661103 	stfvse	f1, [r6], #-12
 410:	0303044b 	movweq	r0, #13387	; 0x344b
 414:	4066679d 	mlsmi	r6, sp, r7, r6
 418:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 41c:	4b693d3d 	blmi	1a4f918 <startup-0x1e5b06e8>
 420:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 424:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 428:	4b693d3d 	blmi	1a4f924 <startup-0x1e5b06dc>
 42c:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 430:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 434:	4b693d3d 	blmi	1a4f930 <startup-0x1e5b06d0>
 438:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 43c:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 440:	4b693d3d 	blmi	1a4f93c <startup-0x1e5b06c4>
 444:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 448:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 44c:	04673d3d 	strbteq	r3, [r7], #-3389	; 0xfffff2c3
 450:	08530304 	ldmdaeq	r3, {r2, r8, r9}^
 454:	5a592f2e 	bpl	164c114 <startup-0x1e9b3eec>
 458:	3e683e3e 	mcrcc	14, 3, r3, cr8, cr14, {1}
 45c:	594bad30 	stmdbpl	fp, {r4, r5, r8, sl, fp, sp, pc}^
 460:	01040200 	mrseq	r0, R12_usr
 464:	59062006 	stmdbpl	r6, {r1, r2, sp}
 468:	2f2f3d77 	svccs	0x002f3d77
 46c:	01040200 	mrseq	r0, R12_usr
 470:	5d062006 	stcpl	0, cr2, [r6, #-24]	; 0xffffffe8
 474:	c93e3e2f 	ldmdbgt	lr!, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 478:	02040200 	andeq	r0, r4, #0, 4
 47c:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
 480:	003c0601 	eorseq	r0, ip, r1, lsl #12
 484:	06020402 	streq	r0, [r2], -r2, lsl #8
 488:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
 48c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 490:	023c0903 	eorseq	r0, ip, #49152	; 0xc000
 494:	3e2f132f 	cdpcc	3, 2, cr1, cr15, cr15, {1}
 498:	bbadc93e 	bllt	feb72998 <GPIO_Ports+0xdeb7020c>
 49c:	a0757575 	rsbsge	r7, r5, r5, ror r5
 4a0:	02040200 	andeq	r0, r4, #0, 4
 4a4:	003c7603 	eorseq	r7, ip, r3, lsl #12
 4a8:	06010402 	streq	r0, [r1], -r2, lsl #8
 4ac:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 4b0:	003a0602 	eorseq	r0, sl, r2, lsl #12
 4b4:	06010402 	streq	r0, [r1], -r2, lsl #8
 4b8:	1103063c 	tstne	r3, ip, lsr r6
 4bc:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 4c0:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
 4c4:	00f30304 	rscseq	r0, r3, r4, lsl #6
 4c8:	39030402 	stmdbcc	r3, {r1, sl}
 4cc:	01040200 	mrseq	r0, R12_usr
 4d0:	6c063c06 	stcvs	12, cr3, [r6], {6}
 4d4:	03040200 	movweq	r0, #16896	; 0x4200
 4d8:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
 4dc:	0200f303 	andeq	pc, r0, #201326592	; 0xc000000
 4e0:	00390304 	eorseq	r0, r9, r4, lsl #6
 4e4:	06010402 	streq	r0, [r1], -r2, lsl #8
 4e8:	3d41063c 	stclcc	6, cr0, [r1, #-240]	; 0xffffff10
 4ec:	03040200 	movweq	r0, #16896	; 0x4200
 4f0:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 4f4:	0200f003 	andeq	pc, r0, #3
 4f8:	3c060104 	stfccs	f0, [r6], {4}
 4fc:	004b6a06 	subeq	r6, fp, r6, lsl #20
 500:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 504:	03040200 	movweq	r0, #16896	; 0x4200
 508:	040200f0 	streq	r0, [r2], #-240	; 0xffffff10
 50c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 510:	a03e5c6c 	eorsge	r5, lr, ip, ror #24
 514:	84e92108 	strbthi	r2, [r9], #264	; 0x108
 518:	003ed892 	mlaseq	lr, r2, r8, sp
 51c:	06010402 	streq	r0, [r1], -r2, lsl #8
 520:	5a080690 	bpl	201f68 <startup-0x1fdfe098>
 524:	f4162202 			; <UNDEFINED> instruction: 0xf4162202
 528:	01040200 	mrseq	r0, R12_usr
 52c:	02009006 	andeq	r9, r0, #6
 530:	58080204 	stmdapl	r8, {r2, r9}
 534:	02009206 	andeq	r9, r0, #1610612736	; 0x60000000
 538:	74030204 	strvc	r0, [r3], #-516	; 0xfffffdfc
 53c:	040200d6 	streq	r0, [r2], #-214	; 0xffffff2a
 540:	003c0601 	eorseq	r0, ip, r1, lsl #12
 544:	06020402 	streq	r0, [r2], -r2, lsl #8
 548:	00747003 	rsbseq	r7, r4, r3
 54c:	06010402 	streq	r0, [r1], -r2, lsl #8
 550:	0602743c 			; <UNDEFINED> instruction: 0x0602743c
 554:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
 558:	02050004 	andeq	r0, r5, #4
 55c:	20000000 	andcs	r0, r0, r0
 560:	13010d03 	movwne	r0, #7427	; 0x1d03
 564:	0003025e 	andeq	r0, r3, lr, asr r2
 568:	02b50101 	adcseq	r0, r5, #1073741824	; 0x40000000
 56c:	00020000 	andeq	r0, r2, r0
 570:	000001c9 	andeq	r0, r0, r9, asr #3
 574:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 578:	0101000d 	tsteq	r1, sp
 57c:	00000101 	andeq	r0, r0, r1, lsl #2
 580:	00000100 	andeq	r0, r0, r0, lsl #2
 584:	2f3a4301 	svccs	0x003a4301
 588:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 58c:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
 590:	2f746d61 	svccs	0x00746d61
 594:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
 598:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 59c:	6b6f442f 	blvs	1bd1660 <startup-0x1e42e9a0>
 5a0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 5a4:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
 5a8:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
 5ac:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 5b0:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
 5b4:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
 5b8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 5bc:	6b2f6d65 	blvs	bdbb58 <startup-0x1f4244a8>
 5c0:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 40c <startup-0x1ffffbf4>
 5c4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 5c8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 5cc:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 5d0:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 5d4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 5d8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 5dc:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 5e0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 5e4:	445f6870 	ldrbmi	r6, [pc], #-2160	; 5ec <startup-0x1ffffa14>
 5e8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 5ec:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
 5f0:	3a630063 	bcc	18c0784 <startup-0x1e73f87c>
 5f4:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 5f8:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 5fc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 600:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 604:	6f6f745c 	svcvs	0x006f745c
 608:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 60c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 610:	615c6d72 	cmpvs	ip, r2, ror sp
 614:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 618:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 61c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 620:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 624:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 628:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 62c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 630:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 634:	61657363 	cmnvs	r5, r3, ror #6
 638:	635c7070 	cmpvs	ip, #112	; 0x70
 63c:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 640:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 644:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 47c <startup-0x1ffffb84>
 648:	63675c73 	cmnvs	r7, #29440	; 0x7300
 64c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 650:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 654:	6f6e2d6d 	svcvs	0x006e2d6d
 658:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 65c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 660:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 664:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 668:	00737973 	rsbseq	r7, r3, r3, ror r9
 66c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 5bc <startup-0x1ffffa44>
 670:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 674:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 678:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 67c:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
 680:	5349534d 	movtpl	r5, #37709	; 0x934d
 684:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 688:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 68c:	2f2e2e00 	svccs	0x002e2e00
 690:	2f62696c 	svccs	0x0062696c
 694:	334d5453 	movtcc	r5, #54355	; 0xd453
 698:	5f344632 	svcpl	0x00344632
 69c:	2f62696c 	svccs	0x0062696c
 6a0:	334d5453 	movtcc	r5, #54355	; 0xd453
 6a4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 6a8:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 6ac:	72655064 	rsbvc	r5, r5, #100	; 0x64
 6b0:	5f687069 	svcpl	0x00687069
 6b4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 6b8:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 6bc:	0000636e 	andeq	r6, r0, lr, ror #6
 6c0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 6c4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 6c8:	70675f78 	rsbvc	r5, r7, r8, ror pc
 6cc:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
 6d0:	00000100 	andeq	r0, r0, r0, lsl #2
 6d4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 6d8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 6dc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 6e0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 6e4:	00000200 	andeq	r0, r0, r0, lsl #4
 6e8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 6ec:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 6f0:	00030068 	andeq	r0, r3, r8, rrx
 6f4:	726f6300 	rsbvc	r6, pc, #0, 6
 6f8:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 6fc:	00682e34 	rsbeq	r2, r8, r4, lsr lr
 700:	73000004 	movwvc	r0, #4
 704:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 708:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
 70c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 710:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 714:	00050068 	andeq	r0, r5, r8, rrx
 718:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 71c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 720:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 724:	00000500 	andeq	r0, r0, r0, lsl #10
 728:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 72c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 730:	70675f78 	rsbvc	r5, r7, r8, ror pc
 734:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 738:	00000500 	andeq	r0, r0, r0, lsl #10
 73c:	02050000 	andeq	r0, r5, #0
 740:	20001444 	andcs	r1, r0, r4, asr #8
 744:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
 748:	034b4c4e 	movteq	r4, #48206	; 0xbc4e
 74c:	4a034a38 	bmi	d3034 <startup-0x1ff2cfcc>
 750:	034b4c20 	movteq	r4, #48160	; 0xbc20
 754:	4f034a33 	svcmi	0x00034a33
 758:	034b4c20 	movteq	r4, #48160	; 0xbc20
 75c:	54034a2e 	strpl	r4, [r3], #-2606	; 0xfffff5d2
 760:	034b4c20 	movteq	r4, #48160	; 0xbc20
 764:	59034a29 	stmdbpl	r3, {r0, r3, r5, r9, fp, lr}
 768:	034b4c20 	movteq	r4, #48160	; 0xbc20
 76c:	5e034a24 	vmlapl.f32	s8, s6, s9
 770:	034b4c20 	movteq	r4, #48160	; 0xbc20
 774:	63034a1f 	movwvs	r4, #14879	; 0x3a1f
 778:	034b4c20 	movteq	r4, #48160	; 0xbc20
 77c:	68034a1a 	stmdavs	r3, {r1, r3, r4, r9, fp, lr}
 780:	034b4c20 	movteq	r4, #48160	; 0xbc20
 784:	6e034a15 			; <UNDEFINED> instruction: 0x6e034a15
 788:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 78c:	7303660f 	movwvc	r6, #13839	; 0x360f
 790:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 794:	7a03660a 	bvc	d9fc4 <startup-0x1ff2603c>
 798:	69674c20 	stmdbvs	r7!, {r5, sl, fp, lr}^
 79c:	90080c03 	andls	r0, r8, r3, lsl #24
 7a0:	660a0359 			; <UNDEFINED> instruction: 0x660a0359
 7a4:	4c5a5a3e 	vmovmi	r5, sl, s29, s30
 7a8:	0200bcad 	andeq	fp, r0, #44288	; 0xad00
 7ac:	4a060104 	bmi	180bc4 <startup-0x1fe7f43c>
 7b0:	c0ad5006 	adcgt	r5, sp, r6
 7b4:	00bbccad 	adcseq	ip, fp, sp, lsr #25
 7b8:	03020402 	movweq	r0, #9218	; 0x2402
 7bc:	0200ba62 	andeq	fp, r0, #401408	; 0x62000
 7c0:	3c060104 	stfccs	f0, [r6], {4}
 7c4:	3c210306 	stccc	3, cr0, [r1], #-24	; 0xffffffe8
 7c8:	3d3d4c52 	ldccc	12, cr4, [sp, #-328]!	; 0xfffffeb8
 7cc:	033d3d3d 	teqeq	sp, #3904	; 0xf40
 7d0:	42757410 	rsbsmi	r7, r5, #16, 8	; 0x10000000
 7d4:	3e4c3e5a 	mcrcc	14, 2, r3, cr12, cr10, {2}
 7d8:	1c033d3e 	stcne	13, cr3, [r3], {62}	; 0x3e
 7dc:	6850754a 	ldmdavs	r0, {r1, r3, r6, r8, sl, ip, sp, lr}^
 7e0:	033d4c5c 	teqeq	sp, #92, 24	; 0x5c00
 7e4:	3d4e4a0a 	vstrcc	s9, [lr, #-40]	; 0xffffffd8
 7e8:	754a0c03 	strbvc	r0, [sl, #-3075]	; 0xfffff3fd
 7ec:	4c5c6850 	mrrcmi	8, 5, r6, ip, cr0
 7f0:	4a0a033d 	bmi	2814ec <startup-0x1fd7eb14>
 7f4:	0f033d4e 	svceq	0x00033d4e
 7f8:	034b794a 	movteq	r7, #47434	; 0xb94a
 7fc:	4b794a0f 	blmi	1e53040 <startup-0x1e1acfc0>
 800:	c04a1003 	subgt	r1, sl, r3
 804:	4c1e504c 	ldcmi	0, cr5, [lr], {76}	; 0x4c
 808:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
 80c:	4a0b034b 	bmi	2c1540 <startup-0x1fd3eac0>
 810:	ce037578 	cfrshl64gt	mvdx3, mvdx8, r7
 814:	2fbb4a00 	svccs	0x00bb4a00
 818:	c9089f35 	stmdbgt	r8, {r0, r2, r4, r5, r8, r9, sl, fp, ip, pc}
 81c:	04029fbb 	streq	r9, [r2], #-4027	; 0xfffff045
 820:	fa010100 	blx	40c28 <startup-0x1ffbf3d8>
 824:	02000001 	andeq	r0, r0, #1
 828:	0001b500 	andeq	fp, r1, r0, lsl #10
 82c:	fb010200 	blx	41036 <startup-0x1ffbefca>
 830:	01000d0e 	tsteq	r0, lr, lsl #26
 834:	00010101 	andeq	r0, r1, r1, lsl #2
 838:	00010000 	andeq	r0, r1, r0
 83c:	3a430100 	bcc	10c0c44 <startup-0x1ef3f3bc>
 840:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 844:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 848:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
 84c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
 850:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 854:	6f442f65 	svcvs	0x00442f65
 858:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
 85c:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
 860:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
 864:	41442f62 	cmpmi	r4, r2, ror #30
 868:	30393254 	eorscc	r3, r9, r4, asr r2
 86c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
 870:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
 874:	2f6d6574 	svccs	0x006d6574
 878:	2f646f6b 	svccs	0x00646f6b
 87c:	2f62696c 	svccs	0x0062696c
 880:	334d5453 	movtcc	r5, #54355	; 0xd453
 884:	5f344632 	svcpl	0x00344632
 888:	2f62696c 	svccs	0x0062696c
 88c:	334d5453 	movtcc	r5, #54355	; 0xd453
 890:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 894:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 898:	72655064 	rsbvc	r5, r5, #100	; 0x64
 89c:	5f687069 	svcpl	0x00687069
 8a0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 8a4:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
 8a8:	63006372 	movwvs	r6, #882	; 0x372
 8ac:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 8b0:	70706165 	rsbsvc	r6, r0, r5, ror #2
 8b4:	646f635c 	strbtvs	r6, [pc], #-860	; 8bc <startup-0x1ffff744>
 8b8:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 8bc:	6f745c65 	svcvs	0x00745c65
 8c0:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 8c4:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 8c8:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 8cc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 8d0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 8d4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 8d8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 8dc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 8e0:	616d5c65 	cmnvs	sp, r5, ror #24
 8e4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 8e8:	3a630065 	bcc	18c0a84 <startup-0x1e73f57c>
 8ec:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 8f0:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 8f4:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 8f8:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 8fc:	6f6f745c 	svcvs	0x006f745c
 900:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 904:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 908:	615c6d72 	cmpvs	ip, r2, ror sp
 90c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 910:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 914:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 918:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 91c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 920:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 924:	2f2e2e00 	svccs	0x002e2e00
 928:	2f62696c 	svccs	0x0062696c
 92c:	334d5453 	movtcc	r5, #54355	; 0xd453
 930:	5f344632 	svcpl	0x00344632
 934:	2f62696c 	svccs	0x0062696c
 938:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
 93c:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
 940:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 944:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
 948:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 94c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 950:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 954:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 958:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 95c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 960:	535f7878 	cmppl	pc, #120, 16	; 0x780000
 964:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
 968:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 96c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
 970:	2f726576 	svccs	0x00726576
 974:	00636e69 	rsbeq	r6, r3, r9, ror #28
 978:	73696d00 	cmnvc	r9, #0, 26
 97c:	00632e63 	rsbeq	r2, r3, r3, ror #28
 980:	5f000001 	svcpl	0x00000001
 984:	61666564 	cmnvs	r6, r4, ror #10
 988:	5f746c75 	svcpl	0x00746c75
 98c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 990:	00682e73 	rsbeq	r2, r8, r3, ror lr
 994:	5f000002 	svcpl	0x00000002
 998:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 99c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 9a0:	00000300 	andeq	r0, r0, r0, lsl #6
 9a4:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 9a8:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
 9ac:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 9b0:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 9b4:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 9b8:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
 9bc:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 9c0:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 9c4:	00000500 	andeq	r0, r0, r0, lsl #10
 9c8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 9cc:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 9d0:	00682e78 	rsbeq	r2, r8, r8, ror lr
 9d4:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
 9d8:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
 9dc:	00050068 	andeq	r0, r5, r8, rrx
 9e0:	05000000 	streq	r0, [r0, #-0]
 9e4:	00195402 	andseq	r5, r9, r2, lsl #8
 9e8:	00f60320 	rscseq	r0, r6, r0, lsr #6
 9ec:	03594f01 	cmpeq	r9, #1, 30
 9f0:	c14b900c 	cmpgt	fp, ip
 9f4:	92759f4d 	rsbsls	r9, r5, #308	; 0x134
 9f8:	b05aae91 			; <UNDEFINED> instruction: 0xb05aae91
 9fc:	032d6757 			; <UNDEFINED> instruction: 0x032d6757
 a00:	571e2e09 	ldrpl	r2, [lr, -r9, lsl #28]
 a04:	034d2d67 	movteq	r2, #56679	; 0xdd67
 a08:	835d900c 	cmphi	sp, #12
 a0c:	95900d03 	ldrls	r0, [r0, #3331]	; 0xd03
 a10:	841e7a4c 	ldrhi	r7, [lr], #-2636	; 0xfffff5b4
 a14:	4d740b03 	fldmdbxmi	r4!, {d16}	;@ Deprecated
 a18:	681e6c3e 	ldmdavs	lr, {r1, r2, r3, r4, r5, sl, fp, sp, lr}
 a1c:	01000602 	tsteq	r0, r2, lsl #12
 a20:	00014e01 	andeq	r4, r1, r1, lsl #28
 a24:	08000200 	stmdaeq	r0, {r9}
 a28:	02000001 	andeq	r0, r0, #1
 a2c:	0d0efb01 	vstreq	d15, [lr, #-4]
 a30:	01010100 	mrseq	r0, (UNDEF: 17)
 a34:	00000001 	andeq	r0, r0, r1
 a38:	01000001 	tsteq	r0, r1
 a3c:	552f3a43 	strpl	r3, [pc, #-2627]!	; 1 <startup-0x1fffffff>
 a40:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 a44:	6164412f 	cmnvs	r4, pc, lsr #2
 a48:	4f2f746d 	svcmi	0x002f746d
 a4c:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 a50:	2f657669 	svccs	0x00657669
 a54:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 a58:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 a5c:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 a60:	2f627548 	svccs	0x00627548
 a64:	32544144 	subscc	r4, r4, #68, 2
 a68:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
 a6c:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
 a70:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 a74:	6f6b2f6d 	svcvs	0x006b2f6d
 a78:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
 a7c:	3a630062 	bcc	18c0c0c <startup-0x1e73f3f4>
 a80:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 a84:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 a88:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 a8c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 a90:	6f6f745c 	svcvs	0x006f745c
 a94:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 a98:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 a9c:	615c6d72 	cmpvs	ip, r2, ror sp
 aa0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 aa4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 aa8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 aac:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 ab0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 ab4:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 ab8:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 abc:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 ac0:	61657363 	cmnvs	r5, r3, ror #6
 ac4:	635c7070 	cmpvs	ip, #112	; 0x70
 ac8:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 acc:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 ad0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 908 <startup-0x1ffff6f8>
 ad4:	63675c73 	cmnvs	r7, #29440	; 0x7300
 ad8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 adc:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 ae0:	6f6e2d6d 	svcvs	0x006e2d6d
 ae4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 ae8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 aec:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 af0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 af4:	00737973 	rsbseq	r7, r3, r3, ror r9
 af8:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
 afc:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
 b00:	00010063 	andeq	r0, r1, r3, rrx
 b04:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 b08:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 b0c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 b10:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 b14:	00020068 	andeq	r0, r2, r8, rrx
 b18:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 b1c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 b20:	0300682e 	movweq	r6, #2094	; 0x82e
 b24:	75620000 	strbvc	r0, [r2, #-0]!
 b28:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 b2c:	0100682e 	tsteq	r0, lr, lsr #16
 b30:	00000000 	andeq	r0, r0, r0
 b34:	1b180205 	blne	601350 <startup-0x1f9fecb0>
 b38:	4b152000 	blmi	548b40 <startup-0x1fab74c0>
 b3c:	4e4b4b4b 	vmlsmi.f64	d20, d11, d11
 b40:	c9325976 	ldmdbgt	r2!, {r1, r2, r4, r5, r6, r8, fp, ip, lr}
 b44:	214c5985 	smlalbbcs	r5, ip, r5, r9
 b48:	02007a4e 	andeq	r7, r0, #319488	; 0x4e000
 b4c:	58060104 	stmdapl	r6, {r2, r8}
 b50:	02040200 	andeq	r0, r4, #0, 4
 b54:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
 b58:	02002004 	andeq	r2, r0, #4
 b5c:	3f060404 	svccc	0x00060404
 b60:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 b64:	595a4e67 	ldmdbpl	sl, {r0, r1, r2, r5, r6, r9, sl, fp, lr}^
 b68:	5985c932 	stmibpl	r5, {r1, r4, r5, r8, fp, lr, pc}
 b6c:	0402214c 	streq	r2, [r2], #-332	; 0xfffffeb4
 b70:	4f010100 	svcmi	0x00010100
 b74:	02000003 	andeq	r0, r0, #3
 b78:	0001de00 	andeq	sp, r1, r0, lsl #28
 b7c:	fb010200 	blx	41386 <startup-0x1ffbec7a>
 b80:	01000d0e 	tsteq	r0, lr, lsl #26
 b84:	00010101 	andeq	r0, r1, r1, lsl #2
 b88:	00010000 	andeq	r0, r1, r0
 b8c:	3a430100 	bcc	10c0f94 <startup-0x1ef3f06c>
 b90:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 b94:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 b98:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
 b9c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
 ba0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 ba4:	6f442f65 	svcvs	0x00442f65
 ba8:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
 bac:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
 bb0:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
 bb4:	41442f62 	cmpmi	r4, r2, ror #30
 bb8:	30393254 	eorscc	r3, r9, r4, asr r2
 bbc:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
 bc0:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
 bc4:	2f6d6574 	svccs	0x006d6574
 bc8:	2f646f6b 	svccs	0x00646f6b
 bcc:	2f62696c 	svccs	0x0062696c
 bd0:	334d5453 	movtcc	r5, #54355	; 0xd453
 bd4:	5f344632 	svcpl	0x00344632
 bd8:	2f62696c 	svccs	0x0062696c
 bdc:	334d5453 	movtcc	r5, #54355	; 0xd453
 be0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 be4:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 be8:	72655064 	rsbvc	r5, r5, #100	; 0x64
 bec:	5f687069 	svcpl	0x00687069
 bf0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 bf4:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
 bf8:	63006372 	movwvs	r6, #882	; 0x372
 bfc:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 c00:	70706165 	rsbsvc	r6, r0, r5, ror #2
 c04:	646f635c 	strbtvs	r6, [pc], #-860	; c0c <startup-0x1ffff3f4>
 c08:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 c0c:	6f745c65 	svcvs	0x00745c65
 c10:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 c14:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 c18:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 c1c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 c20:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 c24:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 c28:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 c2c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 c30:	616d5c65 	cmnvs	sp, r5, ror #24
 c34:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 c38:	3a630065 	bcc	18c0dd4 <startup-0x1e73f22c>
 c3c:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 c40:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 c44:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 c48:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 c4c:	6f6f745c 	svcvs	0x006f745c
 c50:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 c54:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 c58:	615c6d72 	cmpvs	ip, r2, ror sp
 c5c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 c60:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 c64:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 c68:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 c6c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 c70:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 c74:	2f2e2e00 	svccs	0x002e2e00
 c78:	2f62696c 	svccs	0x0062696c
 c7c:	334d5453 	movtcc	r5, #54355	; 0xd453
 c80:	5f344632 	svcpl	0x00344632
 c84:	2f62696c 	svccs	0x0062696c
 c88:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
 c8c:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
 c90:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 c94:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
 c98:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 c9c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 ca0:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 ca4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 ca8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 cac:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 cb0:	535f7878 	cmppl	pc, #120, 16	; 0x780000
 cb4:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
 cb8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 cbc:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
 cc0:	2f726576 	svccs	0x00726576
 cc4:	00636e69 	rsbeq	r6, r3, r9, ror #28
 cc8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 ccc:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 cd0:	755f7878 	ldrbvc	r7, [pc, #-2168]	; 460 <startup-0x1ffffba0>
 cd4:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
 cd8:	0100632e 	tsteq	r0, lr, lsr #6
 cdc:	645f0000 	ldrbvs	r0, [pc], #-0	; ce4 <startup-0x1ffff31c>
 ce0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 ce4:	745f746c 	ldrbvc	r7, [pc], #-1132	; cec <startup-0x1ffff314>
 ce8:	73657079 	cmnvc	r5, #121	; 0x79
 cec:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 cf0:	735f0000 	cmpvc	pc, #0
 cf4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 cf8:	00682e74 	rsbeq	r2, r8, r4, ror lr
 cfc:	63000003 	movwvs	r0, #3
 d00:	5f65726f 	svcpl	0x0065726f
 d04:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
 d08:	00040068 	andeq	r0, r4, r8, rrx
 d0c:	73797300 	cmnvc	r9, #0, 6
 d10:	5f6d6574 	svcpl	0x006d6574
 d14:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 d18:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 d1c:	00682e78 	rsbeq	r2, r8, r8, ror lr
 d20:	73000005 	movwvc	r0, #5
 d24:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 d28:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 d2c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 d30:	74730000 	ldrbtvc	r0, [r3], #-0
 d34:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 d38:	5f787834 	svcpl	0x00787834
 d3c:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
 d40:	00682e74 	rsbeq	r2, r8, r4, ror lr
 d44:	73000005 	movwvc	r0, #5
 d48:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 d4c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 d50:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
 d54:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 d58:	00000000 	andeq	r0, r0, r0
 d5c:	1c400205 	sfmne	f0, 2, [r0], {5}
 d60:	bb032000 	bllt	c8d68 <startup-0x1ff37298>
 d64:	4c4e0101 	stfmie	f0, [lr], {1}
 d68:	4a28034b 	bmi	a01a9c <startup-0x1f5fe564>
 d6c:	4c205a03 			; <UNDEFINED> instruction: 0x4c205a03
 d70:	66230367 	strtvs	r0, [r3], -r7, ror #6
 d74:	4c205f03 	stcmi	15, cr5, [r0], #-12
 d78:	661e0367 	ldrvs	r0, [lr], -r7, ror #6
 d7c:	4c206403 	cfstrsmi	mvf6, [r0], #-12
 d80:	66190367 	ldrvs	r0, [r9], -r7, ror #6
 d84:	4c206903 			; <UNDEFINED> instruction: 0x4c206903
 d88:	66140367 	ldrvs	r0, [r4], -r7, ror #6
 d8c:	4c206e03 	stcmi	14, cr6, [r0], #-12
 d90:	4a0f034b 	bmi	3c1ac4 <startup-0x1fc3e53c>
 d94:	4c207303 	stcmi	3, cr7, [r0], #-12
 d98:	660a0367 	strvs	r0, [sl], -r7, ror #6
 d9c:	4c207a03 			; <UNDEFINED> instruction: 0x4c207a03
 da0:	0c036967 			; <UNDEFINED> instruction: 0x0c036967
 da4:	4b594a08 	blmi	16535cc <startup-0x1e9aca34>
 da8:	2e13032f 	cdpcs	3, 1, cr0, cr3, cr15, {1}
 dac:	4d694e4d 	stclmi	14, cr4, [r9, #-308]!	; 0xfffffecc
 db0:	2d67504d 	stclcs	0, cr5, [r7, #-308]!	; 0xfffffecc
 db4:	4e4d4d6a 	cdpmi	13, 4, cr4, cr13, cr10, {3}
 db8:	005a4e69 	subseq	r4, sl, r9, ror #28
 dbc:	06010402 	streq	r0, [r1], -r2, lsl #8
 dc0:	5c4c064a 	mcrrpl	6, 4, r0, ip, cr10
 dc4:	e6f7694e 	ldrbt	r6, [r7], lr, asr #18
 dc8:	e8687785 	stmda	r8!, {r0, r2, r7, r8, r9, sl, ip, sp, lr}^
 dcc:	09034bda 	stmdbeq	r3, {r1, r3, r4, r6, r7, r8, r9, fp, lr}
 dd0:	3d4b4cd6 	stclcc	12, cr4, [fp, #-856]	; 0xfffffca8
 dd4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 dd8:	594a0c03 	stmdbpl	sl, {r0, r1, sl, fp}^
 ddc:	4c2e0903 			; <UNDEFINED> instruction: 0x4c2e0903
 de0:	3fab4b50 	svccc	0x00ab4b50
 de4:	6609034b 	strvs	r0, [r9], -fp, asr #6
 de8:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
 dec:	4a0b033d 	bmi	2c1ae8 <startup-0x1fd3e518>
 df0:	1e974d79 	mrcne	13, 4, r4, cr7, cr9, {3}
 df4:	740b0384 	strvc	r0, [fp], #-900	; 0xfffffc7c
 df8:	039f8479 	orrseq	r8, pc, #2030043136	; 0x79000000
 dfc:	4d794a0d 	vldmdbmi	r9!, {s9-s21}
 e00:	03841e89 	orreq	r1, r4, #2192	; 0x890
 e04:	4d79740b 	cfldrdmi	mvd7, [r9, #-44]!	; 0xffffffd4
 e08:	03841e97 	orreq	r1, r4, #2416	; 0x970
 e0c:	757a742a 	ldrbvc	r7, [sl, #-1066]!	; 0xfffffbd6
 e10:	4f4a0903 	svcmi	0x004a0903
 e14:	4a2e0367 	bmi	b81bb8 <startup-0x1f47e448>
 e18:	039f847a 	orrseq	r8, pc, #2046820352	; 0x7a000000
 e1c:	4d794a0b 	vldmdbmi	r9!, {s9-s19}
 e20:	03841e89 	orreq	r1, r4, #2192	; 0x890
 e24:	83794a0c 	cmnhi	r9, #12, 20	; 0xc000
 e28:	743e0391 	ldrtvc	r0, [lr], #-913	; 0xfffffc6f
 e2c:	03918379 	orrseq	r8, r1, #-469762047	; 0xe4000001
 e30:	4d794a0b 	vldmdbmi	r9!, {s9-s19}
 e34:	03841e97 	orreq	r1, r4, #2416	; 0x970
 e38:	834f7409 	movthi	r7, #62473	; 0xf409
 e3c:	794a2f03 	stmdbvc	sl, {r0, r1, r8, r9, sl, fp, sp}^
 e40:	841e894d 	ldrhi	r8, [lr], #-2381	; 0xfffff6b3
 e44:	4a00c503 	bmi	32258 <startup-0x1ffcdda8>
 e48:	03bb8479 			; <UNDEFINED> instruction: 0x03bb8479
 e4c:	4d784a0b 	vldmdbmi	r8!, {s9-s19}
 e50:	03841e89 	orreq	r1, r4, #2192	; 0x890
 e54:	4d784a0b 	vldmdbmi	r8!, {s9-s19}
 e58:	03841e89 	orreq	r1, r4, #2192	; 0x890
 e5c:	83794a39 	cmnhi	r9, #233472	; 0x39000
 e60:	4a0b0391 	bmi	2c1cac <startup-0x1fd3e354>
 e64:	1e894d79 	mcrne	13, 4, r4, cr9, cr9, {3}
 e68:	4a1f0384 	bmi	7c1c80 <startup-0x1f83e380>
 e6c:	1e984ec0 	cdpne	14, 9, cr4, cr8, cr0, {6}
 e70:	00f203ae 	rscseq	r0, r2, lr, lsr #7
 e74:	0367bb4a 	cmneq	r7, #75776	; 0x12800
 e78:	69312e0c 	ldmdbvs	r1!, {r2, r3, r9, sl, fp, sp}
 e7c:	4c3e5a59 			; <UNDEFINED> instruction: 0x4c3e5a59
 e80:	4c3e4e3e 	ldcmi	14, cr4, [lr], #-248	; 0xffffff08
 e84:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 e88:	03754a15 	cmneq	r5, #86016	; 0x15000
 e8c:	5c924a0b 	vldmiapl	r2, {s8-s18}
 e90:	1c033d4c 	stcne	13, cr3, [r3], {76}	; 0x4c
 e94:	740b034a 	strvc	r0, [fp], #-842	; 0xfffffcb6
 e98:	4a160367 	bmi	581c3c <startup-0x1fa7e3c4>
 e9c:	0c036775 	stceq	7, cr6, [r3], {117}	; 0x75
 ea0:	5a59684a 	bpl	165afd0 <startup-0x1e9a5030>
 ea4:	863e843e 			; <UNDEFINED> instruction: 0x863e843e
 ea8:	75595977 	ldrbvc	r5, [r9, #-2423]	; 0xfffff689
 eac:	01040200 	mrseq	r0, R12_usr
 eb0:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
 eb4:	033d4d5c 	teqeq	sp, #92, 26	; 0x1700
 eb8:	03754a1d 	cmneq	r5, #118784	; 0x1d000
 ebc:	6759820b 	ldrbvs	r8, [r9, -fp, lsl #4]
 ec0:	00040267 	andeq	r0, r4, r7, ror #4
 ec4:	Address 0x00000ec4 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	706c6c70 	rsbvc	r6, ip, r0, ror ip
       4:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
       8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
       c:	54520031 	ldrbpl	r0, [r2], #-49	; 0xffffffcf
      10:	4b575f43 	blmi	15d7d24 <startup-0x1ea282dc>
      14:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
      18:	006e5152 	rsbeq	r5, lr, r2, asr r1
      1c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
      20:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
      24:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
      28:	5f31414d 	svcpl	0x0031414d
      2c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
      30:	5f366d61 	svcpl	0x00366d61
      34:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      38:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
      3c:	50555f38 	subspl	r5, r5, r8, lsr pc
      40:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
      44:	495f3331 	ldmdbmi	pc, {r0, r4, r5, r8, r9, ip, sp}^	; <UNPREDICTABLE>
      48:	006e5152 	rsbeq	r5, lr, r2, asr r1
      4c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
      50:	46435332 			; <UNDEFINED> instruction: 0x46435332
      54:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
      58:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
      5c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
      60:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
      64:	00676966 	rsbeq	r6, r7, r6, ror #18
      68:	5f434352 	svcpl	0x00434352
      6c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
      70:	6b636f6c 	blvs	18dbe28 <startup-0x1e7241d8>
      74:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
      78:	4d440071 	stclmi	0, cr0, [r4, #-452]	; 0xfffffe3c
      7c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
      80:	61657274 	smcvs	22308	; 0x5724
      84:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
      88:	006e5152 	rsbeq	r5, lr, r2, asr r1
      8c:	4b4c4348 	blmi	1310db4 <startup-0x1ecef24c>
      90:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
      94:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
      98:	47007963 	strmi	r7, [r0, -r3, ror #18]
      9c:	5f4f4950 	svcpl	0x004f4950
      a0:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
      a4:	504f4e5f 	subpl	r4, pc, pc, asr lr	; <UNPREDICTABLE>
      a8:	004c4c55 	subeq	r4, ip, r5, asr ip
      ac:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
      b0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
      b4:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
      b8:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
      bc:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
      c0:	5152495f 	cmppl	r2, pc, asr r9
      c4:	4344006e 	movtmi	r0, #16494	; 0x406e
      c8:	495f494d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
      cc:	006e5152 	rsbeq	r5, lr, r2, asr r1
      d0:	5f434352 	svcpl	0x00434352
      d4:	32425041 	subcc	r5, r2, #65	; 0x41
      d8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
      dc:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
      e0:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
      e4:	646f4d50 	strbtvs	r4, [pc], #-3408	; ec <startup-0x1fffff14>
      e8:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
      ec:	43435200 	movtmi	r5, #12800	; 0x3200
      f0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
      f4:	72655032 	rsbvc	r5, r5, #50	; 0x32
      f8:	43687069 	cmnmi	r8, #105	; 0x69
      fc:	6b636f6c 	blvs	18dbeb4 <startup-0x1e72414c>
     100:	6f4d504c 	svcvs	0x004d504c
     104:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     108:	50470064 	subpl	r0, r7, r4, rrx
     10c:	544f4f49 	strbpl	r4, [pc], #-3913	; 114 <startup-0x1ffffeec>
     110:	5f657079 	svcpl	0x00657079
     114:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     118:	00666544 	rsbeq	r6, r6, r4, asr #10
     11c:	5f434352 	svcpl	0x00434352
     120:	31425041 	cmpcc	r2, r1, asr #32
     124:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     128:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     12c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     130:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     134:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 30 <startup-0x1fffffd0>
     138:	0065646f 	rsbeq	r6, r5, pc, ror #8
     13c:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
     140:	5152495f 	cmppl	r2, pc, asr r9
     144:	4352006e 	cmpmi	r2, #110	; 0x6e
     148:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     14c:	4b4c4343 	blmi	1310e60 <startup-0x1ecef1a0>
     150:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     154:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     158:	415f4343 	cmpmi	pc, r3, asr #6
     15c:	50324248 	eorspl	r4, r2, r8, asr #4
     160:	70697265 	rsbvc	r7, r9, r5, ror #4
     164:	6f6c4368 	svcvs	0x006c4368
     168:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     16c:	43490064 	movtmi	r0, #36964	; 0x9064
     170:	64005250 	strvs	r5, [r0], #-592	; 0xfffffdb0
     174:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     178:	43435200 	movtmi	r5, #12800	; 0x3200
     17c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     180:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     184:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     188:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     18c:	004b4c43 	subeq	r4, fp, r3, asr #24
     190:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     194:	3058525f 	subscc	r5, r8, pc, asr r2
     198:	5152495f 	cmppl	r2, pc, asr r9
     19c:	5355006e 	cmppl	r5, #110	; 0x6e
     1a0:	36545241 	ldrbcc	r5, [r4], -r1, asr #4
     1a4:	5152495f 	cmppl	r2, pc, asr r9
     1a8:	6974006e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6}^
     1ac:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
     1b0:	006d7261 	rsbeq	r7, sp, r1, ror #4
     1b4:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     1b8:	5f38746e 	svcpl	0x0038746e
     1bc:	50530074 	subspl	r0, r3, r4, ror r0
     1c0:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     1c4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     1c8:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     1cc:	4b52425f 	blmi	1490b50 <startup-0x1eb6f4b0>
     1d0:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     1d4:	495f3231 	ldmdbmi	pc, {r0, r4, r5, r9, ip, sp}^	; <UNPREDICTABLE>
     1d8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     1dc:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     1e0:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     1e4:	50470052 	subpl	r0, r7, r2, asr r0
     1e8:	505f4f49 	subspl	r4, pc, r9, asr #30
     1ec:	5f645075 	svcpl	0x00645075
     1f0:	4e574f44 	cdpmi	15, 5, cr4, cr7, cr4, {2}
     1f4:	52494100 	subpl	r4, r9, #0, 2
     1f8:	52005243 	andpl	r5, r0, #805306372	; 0x30000004
     1fc:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     200:	4c504941 	mrrcmi	9, 4, r4, r0, cr1	; <UNPREDICTABLE>
     204:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     208:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xfffff3bd
     20c:	6f437669 	svcvs	0x00437669
     210:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     214:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     218:	50475f74 	subpl	r5, r7, r4, ror pc
     21c:	505f4f49 	subspl	r4, pc, r9, asr #30
     220:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
     224:	55504300 	ldrbpl	r4, [r0, #-768]	; 0xfffffd00
     228:	53004449 	movwpl	r4, #1097	; 0x449
     22c:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     230:	485f6b63 	ldmdami	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
     234:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     238:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     23c:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     240:	43434454 	movtmi	r4, #13396	; 0x3454
     244:	69444b4c 	stmdbvs	r4, {r2, r3, r6, r8, r9, fp, lr}^
     248:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     24c:	00676966 	rsbeq	r6, r7, r6, ror #18
     250:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     254:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     258:	356d6165 	strbcc	r6, [sp, #-357]!	; 0xfffffe9b
     25c:	5152495f 	cmppl	r2, pc, asr r9
     260:	5047006e 	subpl	r0, r7, lr, rrx
     264:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 148 <startup-0x1ffffeb8>
     268:	5f65646f 	svcpl	0x0065646f
     26c:	52004641 	andpl	r4, r0, #68157440	; 0x4100000
     270:	415f4343 	cmpmi	pc, r3, asr #6
     274:	50334248 	eorspl	r4, r3, r8, asr #4
     278:	70697265 	rsbvc	r7, r9, r5, ror #4
     27c:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     280:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     284:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
     288:	545f314d 	ldrbpl	r3, [pc], #-333	; 290 <startup-0x1ffffd70>
     28c:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     290:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 298 <startup-0x1ffffd68>
     294:	31314d49 	teqcc	r1, r9, asr #26
     298:	5152495f 	cmppl	r2, pc, asr r9
     29c:	5047006e 	subpl	r0, r7, lr, rrx
     2a0:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 184 <startup-0x1ffffe7c>
     2a4:	5f65646f 	svcpl	0x0065646f
     2a8:	52004e41 	andpl	r4, r0, #1040	; 0x410
     2ac:	505f4343 	subspl	r4, pc, r3, asr #6
     2b0:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
     2b4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     2b8:	63006769 	movwvs	r6, #1897	; 0x769
     2bc:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     2c0:	69626c6f 	stmdbvs	r2!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
     2c4:	52007374 	andpl	r7, r0, #116, 6	; 0xd0000001
     2c8:	445f4343 	ldrbmi	r4, [pc], #-835	; 2d0 <startup-0x1ffffd30>
     2cc:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     2d0:	43520074 	cmpmi	r2, #116	; 0x74
     2d4:	41535f43 	cmpmi	r3, r3, asr #30
     2d8:	6f6c4249 	svcvs	0x006c4249
     2dc:	43426b63 	movtmi	r6, #11107	; 0x2b63
     2e0:	6f434b4c 	svcvs	0x00434b4c
     2e4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     2e8:	42504100 	subsmi	r4, r0, #0, 2
     2ec:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     2f0:	43435200 	movtmi	r5, #12800	; 0x3200
     2f4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     2f8:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     2fc:	6f534b4c 	svcvs	0x00534b4c
     300:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     304:	42484100 	submi	r4, r8, #0, 2
     308:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
     30c:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     310:	505f4343 	subspl	r4, pc, r3, asr #6
     314:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     318:	76694453 			; <UNDEFINED> instruction: 0x76694453
     31c:	79530051 	ldmdbvc	r3, {r0, r4, r6}^
     320:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     324:	52495f6b 	subpl	r5, r9, #428	; 0x1ac
     328:	52006e51 	andpl	r6, r0, #1296	; 0x510
     32c:	415f4343 	cmpmi	pc, r3, asr #6
     330:	50334248 	eorspl	r4, r3, r8, asr #4
     334:	70697265 	rsbvc	r7, r9, r5, ror #4
     338:	53550068 	cmppl	r5, #104	; 0x68
     33c:	33545241 	cmpcc	r4, #268435460	; 0x10000004
     340:	5152495f 	cmppl	r2, pc, asr r9
     344:	4344006e 	movtmi	r0, #16494	; 0x406e
     348:	4746434b 	strbmi	r4, [r6, -fp, asr #6]
     34c:	43490052 	movtmi	r0, #36946	; 0x9052
     350:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     354:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 250 <startup-0x1ffffdb0>
     358:	44324f43 	ldrtmi	r4, [r2], #-3907	; 0xfffff0bd
     35c:	47007669 	strmi	r7, [r0, -r9, ror #12]
     360:	5f4f4950 	svcpl	0x004f4950
     364:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     368:	444f5f65 	strbmi	r5, [pc], #-3941	; 370 <startup-0x1ffffc90>
     36c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     370:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     374:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     378:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     37c:	43520066 	cmpmi	r2, #102	; 0x66
     380:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     384:	4b4c4353 	blmi	13110d8 <startup-0x1eceef28>
     388:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     38c:	44006563 	strmi	r6, [r0], #-1379	; 0xfffffa9d
     390:	5f31414d 	svcpl	0x0031414d
     394:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     398:	5f326d61 	svcpl	0x00326d61
     39c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     3a0:	43435200 	movtmi	r5, #12800	; 0x3200
     3a4:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     3a8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     3ac:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     3b0:	415f4343 	cmpmi	pc, r3, asr #6
     3b4:	50314250 	eorspl	r4, r1, r0, asr r2
     3b8:	70697265 	rsbvc	r7, r9, r5, ror #4
     3bc:	6f6c4368 	svcvs	0x006c4368
     3c0:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     3c4:	45520064 	ldrbmi	r0, [r2, #-100]	; 0xffffff9c
     3c8:	56524553 			; <UNDEFINED> instruction: 0x56524553
     3cc:	00304445 	eorseq	r4, r0, r5, asr #8
     3d0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     3d4:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     3d8:	6e750031 	mrcvs	0, 3, r0, cr5, cr1, {1}
     3dc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     3e0:	63206465 			; <UNDEFINED> instruction: 0x63206465
     3e4:	00726168 	rsbseq	r6, r2, r8, ror #2
     3e8:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     3ec:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     3f0:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
     3f4:	5152495f 	cmppl	r2, pc, asr r9
     3f8:	4552006e 	ldrbmi	r0, [r2, #-110]	; 0xffffff92
     3fc:	56524553 			; <UNDEFINED> instruction: 0x56524553
     400:	00344445 	eorseq	r4, r4, r5, asr #8
     404:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     408:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     40c:	45520035 	ldrbmi	r0, [r2, #-53]	; 0xffffffcb
     410:	56524553 			; <UNDEFINED> instruction: 0x56524553
     414:	00364445 	eorseq	r4, r6, r5, asr #8
     418:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
     41c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     420:	544f5f4f 	strbpl	r5, [pc], #-3919	; 428 <startup-0x1ffffbd8>
     424:	5f657079 	svcpl	0x00657079
     428:	49005050 	stmdbmi	r0, {r4, r6, ip, lr}
     42c:	5f314332 	svcpl	0x00314332
     430:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     434:	006e5152 	rsbeq	r5, lr, r2, asr r1
     438:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     43c:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
     440:	5152495f 	cmppl	r2, pc, asr r9
     444:	4352006e 	cmpmi	r2, #110	; 0x6e
     448:	534c5f43 	movtpl	r5, #53059	; 0xcf43
     44c:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
     450:	00676966 	rsbeq	r6, r7, r6, ror #18
     454:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     458:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     45c:	45520032 	ldrbmi	r0, [r2, #-50]	; 0xffffffce
     460:	56524553 			; <UNDEFINED> instruction: 0x56524553
     464:	00334445 	eorseq	r4, r3, r5, asr #8
     468:	354d4954 	strbcc	r4, [sp, #-2388]	; 0xfffff6ac
     46c:	5152495f 	cmppl	r2, pc, asr r9
     470:	7355006e 	cmpvc	r5, #110	; 0x6e
     474:	46656761 	strbtmi	r6, [r5], -r1, ror #14
     478:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     47c:	5152495f 	cmppl	r2, pc, asr r9
     480:	4353006e 	cmpmi	r3, #110	; 0x6e
     484:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
     488:	47006570 	smlsdxmi	r0, r0, r5, r6
     48c:	504f4950 	subpl	r4, pc, r0, asr r9	; <UNPREDICTABLE>
     490:	5f645075 	svcpl	0x00645075
     494:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     498:	00666544 	rsbeq	r6, r6, r4, asr #10
     49c:	52534644 	subspl	r4, r3, #68, 12	; 0x4400000
     4a0:	42484100 	submi	r4, r8, #0, 2
     4a4:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
     4a8:	43520052 	cmpmi	r2, #82	; 0x52
     4ac:	50415f43 	subpl	r5, r1, r3, asr #30
     4b0:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     4b4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     4b8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     4bc:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     4c0:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
     4c4:	436e7275 	cmnmi	lr, #1342177287	; 0x50000007
     4c8:	0065646f 	rsbeq	r6, r5, pc, ror #8
     4cc:	5f434352 	svcpl	0x00434352
     4d0:	33424841 	movtcc	r4, #10305	; 0x2841
     4d4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     4d8:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     4dc:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     4e0:	646f4d50 	strbtvs	r4, [pc], #-3408	; 4e8 <startup-0x1ffffb18>
     4e4:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
     4e8:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff5f0 <GPIO_Ports+0xdfffce64>
     4ec:	31746e69 	cmncc	r4, r9, ror #28
     4f0:	00745f36 	rsbseq	r5, r4, r6, lsr pc
     4f4:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     4f8:	00524e45 	subseq	r4, r2, r5, asr #28
     4fc:	4b4c4350 	blmi	1311244 <startup-0x1eceedbc>
     500:	72465f32 	subvc	r5, r6, #50, 30	; 0xc8
     504:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     508:	0079636e 	rsbseq	r6, r9, lr, ror #6
     50c:	4f495047 	svcmi	0x00495047
     510:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
     514:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     518:	43006465 	movwmi	r6, #1125	; 0x465
     51c:	5f314e41 	svcpl	0x00314e41
     520:	5f305852 	svcpl	0x00305852
     524:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     528:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
     52c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     530:	64415c73 	strbvs	r5, [r1], #-3187	; 0xfffff38d
     534:	5c746d61 	ldclpl	13, cr6, [r4], #-388	; 0xfffffe7c
     538:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     53c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     540:	6b6f445c 	blvs	1bd16b8 <startup-0x1e42e948>
     544:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     548:	69475c74 	stmdbvs	r7, {r2, r4, r5, r6, sl, fp, ip, lr}^
     54c:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     550:	5441445c 	strbpl	r4, [r1], #-1116	; 0xfffffba4
     554:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     558:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     55c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     560:	6b5c6d65 	blvs	171bafc <startup-0x1e8e4504>
     564:	445c646f 	ldrbmi	r6, [ip], #-1135	; 0xfffffb91
     568:	00726f6f 	rsbseq	r6, r2, pc, ror #30
     56c:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
     570:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     574:	65725f4f 	ldrbvs	r5, [r2, #-3919]!	; 0xfffff0b1
     578:	52006461 	andpl	r6, r0, #1627389952	; 0x61000000
     57c:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     580:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     584:	4350004b 	cmpmi	r0, #75	; 0x4b
     588:	5f314b4c 	svcpl	0x00314b4c
     58c:	71657246 	cmnvc	r5, r6, asr #4
     590:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
     594:	4c500079 	mrrcmi	0, 7, r0, r0, cr9	; <UNPREDICTABLE>
     598:	50004d4c 	andpl	r4, r0, ip, asr #26
     59c:	004e4c4c 	subeq	r4, lr, ip, asr #24
     5a0:	504c4c50 	subpl	r4, ip, r0, asr ip
     5a4:	4c4c5000 	marmi	acc0, r5, ip
     5a8:	43520051 	cmpmi	r2, #81	; 0x51
     5ac:	534c5f43 	movtpl	r5, #53059	; 0xcf43
     5b0:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
     5b4:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     5b8:	72756f73 	rsbsvc	r6, r5, #460	; 0x1cc
     5bc:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
     5c0:	5f344d49 	svcpl	0x00344d49
     5c4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     5c8:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
     5cc:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
     5d0:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
     5d4:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
     5d8:	30373130 	eorscc	r3, r7, r0, lsr r1
     5dc:	20343039 	eorscs	r3, r4, r9, lsr r0
     5e0:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
     5e4:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     5e8:	415b2029 	cmpmi	fp, r9, lsr #32
     5ec:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff8a2 <GPIO_Ports+0xdfffd116>
     5f0:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
     5f4:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
     5f8:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
     5fc:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     600:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
     604:	6f697369 	svcvs	0x00697369
     608:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
     60c:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
     610:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
     614:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     618:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
     61c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     620:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     624:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
     628:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
     62c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
     630:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
     634:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
     638:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
     63c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     640:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
     644:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     648:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     64c:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
     650:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     654:	20304f2d 	eorscs	r4, r0, sp, lsr #30
     658:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
     65c:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     660:	6f6d6100 	svcvs	0x006d6100
     664:	4f746e75 	svcmi	0x00746e75
     668:	74634166 	strbtvc	r4, [r3], #-358	; 0xfffffe9a
     66c:	44657669 	strbtmi	r7, [r5], #-1641	; 0xfffff997
     670:	73726f6f 	cmnvc	r2, #444	; 0x1bc
     674:	43435200 	movtmi	r5, #12800	; 0x3200
     678:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
     67c:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     680:	00676966 	rsbeq	r6, r7, r6, ror #18
     684:	5f434352 	svcpl	0x00434352
     688:	61656c43 	cmnvs	r5, r3, asr #24
     68c:	616c4672 	smcvs	50274	; 0xc462
     690:	43520067 	cmpmi	r2, #103	; 0x67
     694:	53485f43 	movtpl	r5, #36675	; 0x8f43
     698:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
     69c:	00676966 	rsbeq	r6, r7, r6, ror #18
     6a0:	52434442 	subpl	r4, r3, #1107296256	; 0x42000000
     6a4:	43485300 	movtmi	r5, #33536	; 0x8300
     6a8:	50005253 	andpl	r5, r0, r3, asr r2
     6ac:	495f4456 	ldmdbmi	pc, {r1, r2, r4, r6, sl, lr}^	; <UNPREDICTABLE>
     6b0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     6b4:	5f434352 	svcpl	0x00434352
     6b8:	0045534c 	subeq	r5, r5, ip, asr #6
     6bc:	52495453 	subpl	r5, r9, #1392508928	; 0x53000000
     6c0:	43324900 	teqmi	r2, #0, 18
     6c4:	56455f31 			; <UNDEFINED> instruction: 0x56455f31
     6c8:	5152495f 	cmppl	r2, pc, asr r9
     6cc:	4352006e 	cmpmi	r2, #110	; 0x6e
     6d0:	41535f43 	cmpmi	r3, r3, asr #30
     6d4:	6f6c4249 	svcvs	0x006c4249
     6d8:	43416b63 	movtmi	r6, #7011	; 0x1b63
     6dc:	6f434b4c 	svcvs	0x00434b4c
     6e0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     6e4:	61747300 	cmnvs	r4, r0, lsl #6
     6e8:	70757472 	rsbsvc	r7, r5, r2, ror r4
     6ec:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
     6f0:	00726574 	rsbseq	r6, r2, r4, ror r5
     6f4:	5f434352 	svcpl	0x00434352
     6f8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     6fc:	6f434941 	svcvs	0x00434941
     700:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     704:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     708:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     70c:	4700736e 	strmi	r7, [r0, -lr, ror #6]
     710:	5f4f4950 	svcpl	0x004f4950
     714:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     718:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
     71c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     720:	43435f31 	movtmi	r5, #16177	; 0x3f31
     724:	5152495f 	cmppl	r2, pc, asr r9
     728:	4148006e 	cmpmi	r8, lr, rrx
     72c:	525f4853 	subspl	r4, pc, #5439488	; 0x530000
     730:	495f474e 	ldmdbmi	pc, {r1, r2, r3, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     734:	006e5152 	rsbeq	r5, lr, r2, asr r1
     738:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     73c:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     740:	43006e51 	movwmi	r6, #3665	; 0xe51
     744:	5f314e41 	svcpl	0x00314e41
     748:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     74c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     750:	31414d44 	cmpcc	r1, r4, asr #26
     754:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     758:	356d6165 	strbcc	r6, [sp, #-357]!	; 0xfffffe9b
     75c:	5152495f 	cmppl	r2, pc, asr r9
     760:	4352006e 	cmpmi	r2, #110	; 0x6e
     764:	53485f43 	movtpl	r5, #36675	; 0x8f43
     768:	43520045 	cmpmi	r2, #69	; 0x45
     76c:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     770:	6f43314f 	svcvs	0x0043314f
     774:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     778:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     77c:	52545f38 	subspl	r5, r4, #56, 30	; 0xe0
     780:	4f435f47 	svcmi	0x00435f47
     784:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     788:	5f34314d 	svcpl	0x0034314d
     78c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     790:	414d4400 	cmpmi	sp, r0, lsl #8
     794:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     798:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     79c:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
     7a0:	4f006e51 	svcmi	0x00006e51
     7a4:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
     7a8:	52495f53 	subpl	r5, r9, #332	; 0x14c
     7ac:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
     7b0:	614d6e6f 	cmpvs	sp, pc, ror #28
     7b4:	62616b73 	rsbvs	r6, r1, #117760	; 0x1cc00
     7b8:	6e49656c 	cdpvs	5, 4, cr6, cr9, cr12, {3}
     7bc:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     7c0:	57006e51 	smlsdpl	r0, r1, lr, r6
     7c4:	5f474457 	svcpl	0x00474457
     7c8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7cc:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     7d0:	5f53485f 	svcpl	0x0053485f
     7d4:	50554b57 	subspl	r4, r5, r7, asr fp
     7d8:	5152495f 	cmppl	r2, pc, asr r9
     7dc:	4352006e 	cmpmi	r2, #110	; 0x6e
     7e0:	50415f43 	subpl	r5, r1, r3, asr #30
     7e4:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     7e8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     7ec:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     7f0:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     7f4:	43435200 	movtmi	r5, #12800	; 0x3200
     7f8:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     7fc:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
     800:	00517669 	subseq	r7, r1, r9, ror #12
     804:	5f434352 	svcpl	0x00434352
     808:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     80c:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
     810:	52005276 	andpl	r5, r0, #1610612743	; 0x60000007
     814:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     818:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     81c:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
     820:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     824:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     828:	654d0065 	strbvs	r0, [sp, #-101]	; 0xffffff9b
     82c:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     830:	616e614d 	cmnvs	lr, sp, asr #2
     834:	656d6567 	strbvs	r6, [sp, #-1383]!	; 0xfffffa99
     838:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     83c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     840:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
     844:	6f436d65 	svcvs	0x00436d65
     848:	6c436572 	cfstr64vs	mvdx6, [r3], {114}	; 0x72
     84c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     850:	504d4154 	subpl	r4, sp, r4, asr r1
     854:	4154535f 	cmpmi	r4, pc, asr r3
     858:	495f504d 	ldmdbmi	pc, {r0, r2, r3, r6, ip, lr}^	; <UNPREDICTABLE>
     85c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     860:	314e4143 	cmpcc	lr, r3, asr #2
     864:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
     868:	5152495f 	cmppl	r2, pc, asr r9
     86c:	645f006e 	ldrbvs	r0, [pc], #-110	; 874 <startup-0x1ffff78c>
     870:	00726f6f 	rsbseq	r6, r2, pc, ror #30
     874:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     878:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     87c:	50470065 	subpl	r0, r7, r5, rrx
     880:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 764 <startup-0x1ffff89c>
     884:	5f65646f 	svcpl	0x0065646f
     888:	44004e49 	strmi	r4, [r0], #-3657	; 0xfffff1b7
     88c:	5f32414d 	svcpl	0x0032414d
     890:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     894:	5f306d61 	svcpl	0x00306d61
     898:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     89c:	43435200 	movtmi	r5, #12800	; 0x3200
     8a0:	4f434d5f 	svcmi	0x00434d5f
     8a4:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
     8a8:	00676966 	rsbeq	r6, r7, r6, ror #18
     8ac:	524b434c 	subpl	r4, fp, #76, 6	; 0x30000001
     8b0:	43435200 	movtmi	r5, #12800	; 0x3200
     8b4:	5332495f 	teqpl	r2, #1556480	; 0x17c000
     8b8:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     8bc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     8c0:	52450065 	subpl	r0, r5, #101	; 0x65
     8c4:	00524f52 	subseq	r4, r2, r2, asr pc
     8c8:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     8cc:	5f52455f 	svcpl	0x0052455f
     8d0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8d4:	54736d00 	ldrbtpl	r6, [r3], #-3328	; 0xfffff300
     8d8:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     8dc:	43435200 	movtmi	r5, #12800	; 0x3200
     8e0:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
     8e4:	6f43314b 	svcvs	0x0043314b
     8e8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     8ec:	50534f00 	subspl	r4, r3, r0, lsl #30
     8f0:	52444545 	subpl	r4, r4, #289406976	; 0x11400000
     8f4:	73754200 	cmnvc	r5, #0, 4
     8f8:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
     8fc:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     900:	74006e51 	strvc	r6, [r0], #-3665	; 0xfffff1af
     904:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     908:	4c4c5000 	marmi	acc0, r5, ip
     90c:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     910:	52415500 	subpl	r5, r1, #0, 10
     914:	495f3554 	ldmdbmi	pc, {r2, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     918:	006e5152 	rsbeq	r5, lr, r2, asr r1
     91c:	314d4954 	cmpcc	sp, r4, asr r9
     920:	4b52425f 	blmi	14912a4 <startup-0x1eb6ed5c>
     924:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     928:	52495f39 	subpl	r5, r9, #57, 30	; 0xe4
     92c:	47006e51 	smlsdmi	r0, r1, lr, r6
     930:	5f4f4950 	svcpl	0x004f4950
     934:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     938:	5f5f0065 	svcpl	0x005f0065
     93c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     940:	745f3233 	ldrbvc	r3, [pc], #-563	; 948 <startup-0x1ffff6b8>
     944:	42504100 	subsmi	r4, r0, #0, 2
     948:	50424841 	subpl	r4, r2, r1, asr #16
     94c:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
     950:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
     954:	50470065 	subpl	r0, r7, r5, rrx
     958:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 83c <startup-0x1ffff7c4>
     95c:	75696465 	strbvc	r6, [r9, #-1125]!	; 0xfffffb9b
     960:	70535f6d 	subsvc	r5, r3, sp, ror #30
     964:	00646565 	rsbeq	r6, r4, r5, ror #10
     968:	5f434352 	svcpl	0x00434352
     96c:	50494153 	subpl	r4, r9, r3, asr r1
     970:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     974:	6b6c4353 	blvs	1b116c8 <startup-0x1e4ee938>
     978:	43766944 	cmnmi	r6, #68, 18	; 0x110000
     97c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     980:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
     984:	495f374d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     988:	006e5152 	rsbeq	r5, lr, r2, asr r1
     98c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     990:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     994:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
     998:	54450074 	strbpl	r0, [r5], #-116	; 0xffffff8c
     99c:	4b575f48 	blmi	15d86c4 <startup-0x1ea2793c>
     9a0:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     9a4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9a8:	5f47544f 	svcpl	0x0047544f
     9ac:	495f5348 	ldmdbmi	pc, {r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     9b0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9b4:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
     9b8:	53530052 	cmppl	r3, #82	; 0x52
     9bc:	00524743 	subseq	r4, r2, r3, asr #14
     9c0:	31495053 	qdaddcc	r5, r3, r9
     9c4:	5152495f 	cmppl	r2, pc, asr r9
     9c8:	4944006e 	stmdbmi	r4, {r1, r2, r3, r5, r6}^
     9cc:	4c424153 	stfmie	f4, [r2], {83}	; 0x53
     9d0:	56530045 	ldrbpl	r0, [r3], -r5, asr #32
     9d4:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
     9d8:	5152495f 	cmppl	r2, pc, asr r9
     9dc:	5041006e 	subpl	r0, r1, lr, rrx
     9e0:	53523242 	cmppl	r2, #536870916	; 0x20000004
     9e4:	42005254 	andmi	r5, r0, #84, 4	; 0x40000005
     9e8:	48525253 	ldmdami	r2, {r0, r1, r4, r6, r9, ip, lr}^
     9ec:	43435200 	movtmi	r5, #12800	; 0x3200
     9f0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     9f4:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     9f8:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     9fc:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
     a00:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     a04:	6b636f6c 	blvs	18dc7bc <startup-0x1e723844>
     a08:	53420073 	movtpl	r0, #8307	; 0x2073
     a0c:	004c5252 	subeq	r5, ip, r2, asr r2
     a10:	4f495047 	svcmi	0x00495047
     a14:	6769485f 			; <UNDEFINED> instruction: 0x6769485f
     a18:	70535f68 	subsvc	r5, r3, r8, ror #30
     a1c:	00646565 	rsbeq	r6, r4, r5, ror #10
     a20:	5f434352 	svcpl	0x00434352
     a24:	6f435449 	svcvs	0x00435449
     a28:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     a2c:	43435200 	movtmi	r5, #12800	; 0x3200
     a30:	4953485f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, fp, lr}^
     a34:	00646d43 	rsbeq	r6, r4, r3, asr #26
     a38:	5f555046 	svcpl	0x00555046
     a3c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a40:	43435200 	movtmi	r5, #12800	; 0x3200
     a44:	6a64415f 	bvs	1910fc8 <startup-0x1e6ef038>
     a48:	48747375 	ldmdami	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
     a4c:	61434953 	cmpvs	r3, r3, asr r9
     a50:	7262696c 	rsbvc	r6, r2, #108, 18	; 0x1b0000
     a54:	6f697461 	svcvs	0x00697461
     a58:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
     a5c:	55006575 	strpl	r6, [r0, #-1397]	; 0xfffffa8b
     a60:	34545241 	ldrbcc	r5, [r4], #-577	; 0xfffffdbf
     a64:	5152495f 	cmppl	r2, pc, asr r9
     a68:	5041006e 	subpl	r0, r1, lr, rrx
     a6c:	504c3242 	subpl	r3, ip, r2, asr #4
     a70:	00524e45 	subseq	r4, r2, r5, asr #28
     a74:	5f434352 	svcpl	0x00434352
     a78:	31425041 	cmpcc	r2, r1, asr #32
     a7c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     a80:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
     a84:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
     a88:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
     a8c:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     a90:	00676966 	rsbeq	r6, r7, r6, ror #18
     a94:	5f47544f 	svcpl	0x0047544f
     a98:	575f5346 	ldrbpl	r5, [pc, -r6, asr #6]
     a9c:	5f50554b 	svcpl	0x0050554b
     aa0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     aa4:	43435200 	movtmi	r5, #12800	; 0x3200
     aa8:	414c465f 	cmpmi	ip, pc, asr r6
     aac:	43520047 	cmpmi	r2, #71	; 0x47
     ab0:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
     ab4:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
     ab8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     abc:	58450073 	stmdapl	r5, {r0, r1, r4, r5, r6}^
     ac0:	5f344954 	svcpl	0x00344954
     ac4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ac8:	52544300 	subspl	r4, r4, #0, 6
     acc:	4954004c 	ldmdbmi	r4, {r2, r3, r6}^
     ad0:	445f364d 	ldrbmi	r3, [pc], #-1613	; ad8 <startup-0x1ffff528>
     ad4:	495f4341 	ldmdbmi	pc, {r0, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     ad8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     adc:	5377654e 	cmnpl	r7, #327155712	; 0x13800000
     ae0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     ae4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     ae8:	70535f4f 	subsvc	r5, r3, pc, asr #30
     aec:	00646565 	rsbeq	r6, r4, r5, ror #10
     af0:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     af4:	5f56455f 	svcpl	0x0056455f
     af8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     afc:	43435200 	movtmi	r5, #12800	; 0x3200
     b00:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
     b04:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
     b08:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
     b0c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
     b10:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     b14:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     b18:	6b636f6c 	blvs	18dc8d0 <startup-0x1e723730>
     b1c:	75636553 	strbvc	r6, [r3, #-1363]!	; 0xfffffaad
     b20:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     b24:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
     b28:	6d436d65 	stclvs	13, cr6, [r3, #-404]	; 0xfffffe6c
     b2c:	43520064 	cmpmi	r2, #100	; 0x64
     b30:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     b34:	4b4c434d 	blmi	1311870 <startup-0x1ecee790>
     b38:	73657250 	cmnvc	r5, #80, 4
     b3c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     b40:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     b44:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     b48:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     b4c:	416b636f 	cmnmi	fp, pc, ror #6
     b50:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     b54:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     b58:	79730065 	ldmdbvc	r3!, {r0, r2, r5, r6}^
     b5c:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
     b60:	6e495f6b 	cdpvs	15, 4, cr5, cr9, cr11, {3}
     b64:	73007469 	movwvc	r7, #1129	; 0x469
     b68:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     b6c:	67657273 			; <UNDEFINED> instruction: 0x67657273
     b70:	43435200 	movtmi	r5, #12800	; 0x3200
     b74:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     b78:	72655032 	rsbvc	r5, r5, #50	; 0x32
     b7c:	00687069 	rsbeq	r7, r8, r9, rrx
     b80:	52414642 	subpl	r4, r1, #69206016	; 0x4200000
     b84:	42504100 	subsmi	r4, r0, #0, 2
     b88:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
     b8c:	4400524e 	strmi	r5, [r0], #-590	; 0xfffffdb2
     b90:	5f31414d 	svcpl	0x0031414d
     b94:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     b98:	5f316d61 	svcpl	0x00316d61
     b9c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ba0:	74636100 	strbtvc	r6, [r3], #-256	; 0xffffff00
     ba4:	5f657669 	svcpl	0x00657669
     ba8:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     bac:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
     bb0:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     bb4:	61657274 	smcvs	22308	; 0x5724
     bb8:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     bbc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     bc0:	41474b43 	cmpmi	r7, r3, asr #22
     bc4:	524e4554 	subpl	r4, lr, #84, 10	; 0x15000000
     bc8:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     bcc:	58545f32 	ldmdapl	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     bd0:	5152495f 	cmppl	r2, pc, asr r9
     bd4:	4c50006e 	mrrcmi	0, 6, r0, r0, cr14	; <UNPREDICTABLE>
     bd8:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     bdc:	4c50004e 	mrrcmi	0, 4, r0, r0, cr14	; <UNPREDICTABLE>
     be0:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     be4:	4c500051 	mrrcmi	0, 5, r0, r0, cr1	; <UNPREDICTABLE>
     be8:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     bec:	43520052 	cmpmi	r2, #82	; 0x52
     bf0:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     bf4:	6f53314f 	svcvs	0x0053314f
     bf8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     bfc:	43435200 	movtmi	r5, #12800	; 0x3200
     c00:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     c04:	72655033 	rsbvc	r5, r5, #51	; 0x33
     c08:	43687069 	cmnmi	r8, #105	; 0x69
     c0c:	6b636f6c 	blvs	18dc9c4 <startup-0x1e72363c>
     c10:	00646d43 	rsbeq	r6, r4, r3, asr #26
     c14:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
     c18:	5f6b6369 	svcpl	0x006b6369
     c1c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     c20:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
     c24:	65635f65 	strbvs	r5, [r3, #-3941]!	; 0xfffff09b
     c28:	6172746e 	cmnvs	r2, lr, ror #8
     c2c:	616c5f6c 	cmnvs	ip, ip, ror #30
     c30:	52006d72 	andpl	r6, r0, #7296	; 0x1c80
     c34:	505f4343 	subspl	r4, pc, r3, asr #6
     c38:	6d434c4c 	stclvs	12, cr4, [r3, #-304]	; 0xfffffed0
     c3c:	43520064 	cmpmi	r2, #100	; 0x64
     c40:	61425f43 	cmpvs	r2, r3, asr #30
     c44:	70756b63 	rsbsvc	r6, r5, r3, ror #22
     c48:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     c4c:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     c50:	42484100 	submi	r4, r8, #0, 2
     c54:	54535233 	ldrbpl	r5, [r3], #-563	; 0xfffffdcd
     c58:	72450052 	subvc	r0, r5, #82	; 0x52
     c5c:	53726f72 	cmnpl	r2, #456	; 0x1c8
     c60:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     c64:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
     c68:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     c6c:	61657274 	smcvs	22308	; 0x5724
     c70:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
     c74:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c78:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     c7c:	00707574 	rsbseq	r7, r0, r4, ror r5
     c80:	5f434352 	svcpl	0x00434352
     c84:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
     c88:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     c8c:	41006563 	tstmi	r0, r3, ror #10
     c90:	52314250 	eorspl	r4, r1, #80, 4
     c94:	00525453 	subseq	r5, r2, r3, asr r4
     c98:	5f435452 	svcpl	0x00435452
     c9c:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
     ca0:	52495f6d 	subpl	r5, r9, #436	; 0x1b4
     ca4:	41006e51 	tstmi	r0, r1, asr lr
     ca8:	45314250 	ldrmi	r4, [r1, #-592]!	; 0xfffffdb0
     cac:	4e00524e 	cdpmi	2, 0, cr5, cr0, cr14, {2}
     cb0:	5f434956 	svcpl	0x00434956
     cb4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     cb8:	6e754600 	cdpvs	6, 7, cr4, cr5, cr0, {0}
     cbc:	6f697463 	svcvs	0x00697463
     cc0:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
     cc4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     cc8:	43324900 	teqmi	r2, #0, 18
     ccc:	52455f33 	subpl	r5, r5, #51, 30	; 0xcc
     cd0:	5152495f 	cmppl	r2, pc, asr r9
     cd4:	5243006e 	subpl	r0, r3, #110	; 0x6e
     cd8:	495f5059 	ldmdbmi	pc, {r0, r3, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     cdc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ce0:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     ce4:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
     ce8:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     cec:	6c006e51 	stcvs	14, cr6, [r0], {81}	; 0x51
     cf0:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     cf4:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     cf8:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     cfc:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     d00:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     d04:	43520074 	cmpmi	r2, #116	; 0x74
     d08:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     d0c:	6944314f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r8, ip, sp}^
     d10:	49540076 	ldmdbmi	r4, {r1, r2, r4, r5, r6}^
     d14:	495f334d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     d18:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d1c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     d20:	495f3154 	ldmdbmi	pc, {r2, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     d24:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d28:	5f434352 	svcpl	0x00434352
     d2c:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     d30:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
     d34:	74534553 	ldrbvc	r4, [r3], #-1363	; 0xfffffaad
     d38:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0xfffffd9f
     d3c:	55530070 	ldrbpl	r0, [r3, #-112]	; 0xffffff90
     d40:	53454343 	movtpl	r4, #21315	; 0x5343
     d44:	50470053 	subpl	r0, r7, r3, asr r0
     d48:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; c2c <startup-0x1ffff3d4>
     d4c:	0065646f 	rsbeq	r6, r5, pc, ror #8
     d50:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     d54:	3158525f 	cmpcc	r8, pc, asr r2
     d58:	5152495f 	cmppl	r2, pc, asr r9
     d5c:	4441006e 	strbmi	r0, [r1], #-110	; 0xffffff92
     d60:	52495f43 	subpl	r5, r9, #268	; 0x10c
     d64:	52006e51 	andpl	r6, r0, #1296	; 0x510
     d68:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     d6c:	6f4d4553 	svcvs	0x004d4553
     d70:	6f436564 	svcvs	0x00436564
     d74:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     d78:	45434900 	strbmi	r4, [r3, #-2304]	; 0xfffff700
     d7c:	48410052 	stmdami	r1, {r1, r4, r6}^
     d80:	504c3342 	subpl	r3, ip, r2, asr #6
     d84:	00524e45 	subseq	r4, r2, r5, asr #28
     d88:	4f495047 	svcmi	0x00495047
     d8c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     d90:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     d94:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     d98:	73795300 	cmnvc	r9, #0, 6
     d9c:	6b636954 	blvs	18db2f4 <startup-0x1e724d0c>
     da0:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     da4:	00676966 	rsbeq	r6, r7, r6, ror #18
     da8:	552f3a43 	strpl	r3, [pc, #-2627]!	; 36d <startup-0x1ffffc93>
     dac:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     db0:	6164412f 	cmnvs	r4, pc, lsr #2
     db4:	4f2f746d 	svcmi	0x002f746d
     db8:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     dbc:	2f657669 	svccs	0x00657669
     dc0:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     dc4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     dc8:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     dcc:	2f627548 	svccs	0x00627548
     dd0:	32544144 	subscc	r4, r4, #68, 2
     dd4:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     dd8:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     ddc:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     de0:	6f6b2f6d 	svcvs	0x006b2f6d
     de4:	6f442f64 	svcvs	0x00442f64
     de8:	732f726f 			; <UNDEFINED> instruction: 0x732f726f
     dec:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     df0:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
     df4:	53464100 	movtpl	r4, #24832	; 0x6100
     df8:	544f0052 	strbpl	r0, [pc], #-82	; e00 <startup-0x1ffff200>
     dfc:	52455059 	subpl	r5, r5, #89	; 0x59
     e00:	4c414300 	mcrrmi	3, 0, r4, r1, cr0
     e04:	74004249 	strvc	r4, [r0], #-585	; 0xfffffdb7
     e08:	00656d69 	rsbeq	r6, r5, r9, ror #26
     e0c:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
     e10:	46006765 	strmi	r6, [r0], -r5, ror #14
     e14:	5f434d53 	svcpl	0x00434d53
     e18:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     e1c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     e20:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
     e24:	5f304954 	svcpl	0x00304954
     e28:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     e2c:	4b434400 	blmi	10d1e34 <startup-0x1ef2e1cc>
     e30:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     e34:	46430032 			; <UNDEFINED> instruction: 0x46430032
     e38:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     e3c:	415f4343 	cmpmi	pc, r3, asr #6
     e40:	50314248 	eorspl	r4, r1, r8, asr #4
     e44:	70697265 	rsbvc	r7, r9, r5, ror #4
     e48:	73680068 	cmnvc	r8, #104	; 0x68
     e4c:	61747365 	cmnvs	r4, r5, ror #6
     e50:	00737574 	rsbseq	r7, r3, r4, ror r5
     e54:	31414d44 	cmpcc	r1, r4, asr #26
     e58:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     e5c:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
     e60:	5152495f 	cmppl	r2, pc, asr r9
     e64:	5047006e 	subpl	r0, r7, lr, rrx
     e68:	6c5f4f49 	mrrcvs	15, 4, r4, pc, cr9	; <UNPREDICTABLE>
     e6c:	00706d61 	rsbseq	r6, r0, r1, ror #26
     e70:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     e74:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     e78:	366d6165 	strbtcc	r6, [sp], -r5, ror #2
     e7c:	5152495f 	cmppl	r2, pc, asr r9
     e80:	4841006e 	stmdami	r1, {r1, r2, r3, r5, r6}^
     e84:	4e453142 	dvfmism	f3, f5, f2
     e88:	4f4c0052 	svcmi	0x004c0052
     e8c:	47004441 	strmi	r4, [r0, -r1, asr #8]
     e90:	534f4950 	movtpl	r4, #63824	; 0xf950
     e94:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     e98:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     e9c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     ea0:	62654400 	rsbvs	r4, r5, #0, 8
     ea4:	6f4d6775 	svcvs	0x004d6775
     ea8:	6f74696e 	svcvs	0x0074696e
     eac:	52495f72 	subpl	r5, r9, #456	; 0x1c8
     eb0:	47006e51 	smlsdmi	r0, r1, lr, r6
     eb4:	5f4f4950 	svcpl	0x004f4950
     eb8:	006e6950 	rsbeq	r6, lr, r0, asr r9
     ebc:	5f434352 	svcpl	0x00434352
     ec0:	31424841 	cmpcc	r2, r1, asr #16
     ec4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     ec8:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     ecc:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     ed0:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
     ed4:	5f334332 	svcpl	0x00334332
     ed8:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     edc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ee0:	4f495047 	svcmi	0x00495047
     ee4:	5075505f 	rsbspl	r5, r5, pc, asr r0
     ee8:	48410064 	stmdami	r1, {r2, r5, r6}^
     eec:	53523242 	cmppl	r2, #536870916	; 0x20000004
     ef0:	45005254 	strmi	r5, [r0, #-596]	; 0xfffffdac
     ef4:	495f4854 	ldmdbmi	pc, {r2, r4, r6, fp, lr}^	; <UNPREDICTABLE>
     ef8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     efc:	5f434352 	svcpl	0x00434352
     f00:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     f04:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
     f08:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     f0c:	4d4d0066 	stclmi	0, cr0, [sp, #-408]	; 0xfffffe68
     f10:	52005246 	andpl	r5, r0, #1610612740	; 0x60000004
     f14:	545f4343 	ldrbpl	r4, [pc], #-835	; f1c <startup-0x1ffff0e4>
     f18:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     f1c:	4d006665 	stcmi	6, cr6, [r0, #-404]	; 0xfffffe6c
     f20:	5241464d 	subpl	r4, r1, #80740352	; 0x4d00000
     f24:	6f687300 	svcvs	0x00687300
     f28:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     f2c:	7000746e 	andvc	r7, r0, lr, ror #8
     f30:	77737361 	ldrbvc	r7, [r3, -r1, ror #6]!
     f34:	0064726f 	rsbeq	r7, r4, pc, ror #4
     f38:	5f434352 	svcpl	0x00434352
     f3c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f40:	43435200 	movtmi	r5, #12800	; 0x3200
     f44:	0054495f 	subseq	r4, r4, pc, asr r9
     f48:	52415349 	subpl	r5, r1, #603979777	; 0x24000001
     f4c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     f50:	79745f4f 	ldmdbvc	r4!, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     f54:	44006570 	strmi	r6, [r0], #-1392	; 0xfffffa90
     f58:	5f31414d 	svcpl	0x0031414d
     f5c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     f60:	5f336d61 	svcpl	0x00336d61
     f64:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f68:	41535500 	cmpmi	r3, r0, lsl #10
     f6c:	5f325452 	svcpl	0x00325452
     f70:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f74:	74696200 	strbtvc	r6, [r9], #-512	; 0xfffffe00
     f78:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     f7c:	45007375 	strmi	r7, [r0, #-885]	; 0xfffffc8b
     f80:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
     f84:	6c700045 	ldclvs	0, cr0, [r0], #-276	; 0xfffffeec
     f88:	6f63766c 	svcvs	0x0063766c
     f8c:	43435200 	movtmi	r5, #12800	; 0x3200
     f90:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     f94:	72655031 	rsbvc	r5, r5, #49	; 0x31
     f98:	43687069 	cmnmi	r8, #105	; 0x69
     f9c:	6b636f6c 	blvs	18dcd54 <startup-0x1e7232ac>
     fa0:	6f4d504c 	svcvs	0x004d504c
     fa4:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     fa8:	50470064 	subpl	r0, r7, r4, rrx
     fac:	545f4f49 	ldrbpl	r4, [pc], #-3913	; fb4 <startup-0x1ffff04c>
     fb0:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     fb4:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
     fb8:	5f314d49 	svcpl	0x00314d49
     fbc:	545f5055 	ldrbpl	r5, [pc], #-85	; fc4 <startup-0x1ffff03c>
     fc0:	30314d49 	eorscc	r4, r1, r9, asr #26
     fc4:	5152495f 	cmppl	r2, pc, asr r9
     fc8:	5449006e 	strbpl	r0, [r9], #-110	; 0xffffff92
     fcc:	78525f4d 	ldmdavc	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     fd0:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     fd4:	50007265 	andpl	r7, r0, r5, ror #4
     fd8:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     fdc:	52004e53 	andpl	r4, r0, #1328	; 0x530
     fe0:	415f4343 	cmpmi	pc, r3, asr #6
     fe4:	50314248 	eorspl	r4, r1, r8, asr #4
     fe8:	70697265 	rsbvc	r7, r9, r5, ror #4
     fec:	6f6c4368 	svcvs	0x006c4368
     ff0:	504c6b63 	subpl	r6, ip, r3, ror #22
     ff4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     ff8:	00646d43 	rsbeq	r6, r4, r3, asr #26
     ffc:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    1000:	00525332 	subseq	r5, r2, r2, lsr r3
    1004:	6e69616d 	powvsez	f6, f1, #5.0
    1008:	6c696d00 	stclvs	13, cr6, [r9], #-0
    100c:	544f0069 	strbpl	r0, [pc], #-105	; 1014 <startup-0x1fffefec>
    1010:	53485f47 	movtpl	r5, #36679	; 0x8f47
    1014:	3150455f 	cmpcc	r0, pc, asr r5
    1018:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
    101c:	5152495f 	cmppl	r2, pc, asr r9
    1020:	616c006e 	cmnvs	ip, lr, rrx
    1024:	69546d72 	ldmdbvs	r4, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1028:	52006b63 	andpl	r6, r0, #101376	; 0x18c00
    102c:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    1030:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    1034:	646d434b 	strbtvs	r4, [sp], #-843	; 0xfffffcb5
    1038:	444f4d00 	strbmi	r4, [pc], #-3328	; 1040 <startup-0x1fffefc0>
    103c:	4e005245 	cdpmi	2, 0, cr5, cr0, cr5, {2}
    1040:	5f434956 	svcpl	0x00434956
    1044:	50746553 	rsbspl	r6, r4, r3, asr r5
    1048:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    104c:	00797469 	rsbseq	r7, r9, r9, ror #8
    1050:	314e4143 	cmpcc	lr, r3, asr #2
    1054:	3158525f 	cmpcc	r8, pc, asr r2
    1058:	5152495f 	cmppl	r2, pc, asr r9
    105c:	4352006e 	cmpmi	r2, #110	; 0x6e
    1060:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1064:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    1068:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    106c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1070:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
    1074:	555f6450 	ldrbpl	r6, [pc, #-1104]	; c2c <startup-0x1ffff3d4>
    1078:	58450050 	stmdapl	r5, {r4, r6}^
    107c:	5f394954 	svcpl	0x00394954
    1080:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    1084:	50006e51 	andpl	r6, r0, r1, asr lr
    1088:	41534c4c 	cmpmi	r3, ip, asr #24
    108c:	47464349 	strbmi	r4, [r6, -r9, asr #6]
    1090:	43520052 	cmpmi	r2, #82	; 0x52
    1094:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1098:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    109c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    10a0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    10a4:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    10a8:	6f687300 	svcvs	0x00687300
    10ac:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
    10b0:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
    10b4:	2064656e 	rsbcs	r6, r4, lr, ror #10
    10b8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    10bc:	5f434352 	svcpl	0x00434352
    10c0:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    10c4:	6f435332 	svcvs	0x00435332
    10c8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    10cc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    10d0:	43435f38 	movtmi	r5, #16184	; 0x3f38
    10d4:	5152495f 	cmppl	r2, pc, asr r9
    10d8:	4453006e 	ldrbmi	r0, [r3], #-110	; 0xffffff92
    10dc:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    10e0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    10e4:	43415043 	movtmi	r5, #4163	; 0x1043
    10e8:	53490052 	movtpl	r0, #36946	; 0x9052
    10ec:	53005250 	movwpl	r5, #592	; 0x250
    10f0:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    10f4:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    10f8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    10fc:	0079636e 	rsbseq	r6, r9, lr, ror #6
    1100:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1104:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    1108:	50006e51 	andpl	r6, r0, r1, asr lr
    110c:	53646e65 	cmnpl	r4, #1616	; 0x650
    1110:	52495f56 	subpl	r5, r9, #344	; 0x158
    1114:	4f006e51 	svcmi	0x00006e51
    1118:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    111c:	50455f53 	subpl	r5, r5, r3, asr pc
    1120:	4e495f31 	mcrmi	15, 2, r5, cr9, cr1, {1}
    1124:	5152495f 	cmppl	r2, pc, asr r9
    1128:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    112c:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    1130:	61657274 	smcvs	22308	; 0x5724
    1134:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    1138:	006e5152 	rsbeq	r5, lr, r2, asr r1
    113c:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    1140:	5f323374 	svcpl	0x00323374
    1144:	43520074 	cmpmi	r2, #116	; 0x74
    1148:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    114c:	4b4c434d 	blmi	1311e88 <startup-0x1ecee178>
    1150:	73657250 	cmnvc	r5, #80, 4
    1154:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    1158:	53490072 	movtpl	r0, #36978	; 0x9072
    115c:	70005245 	andvc	r5, r0, r5, asr #4
    1160:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1164:	43435200 	movtmi	r5, #12800	; 0x3200
    1168:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    116c:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1170:	52687069 	rsbpl	r7, r8, #105	; 0x69
    1174:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1178:	00646d43 	rsbeq	r6, r4, r3, asr #26
    117c:	5f434352 	svcpl	0x00434352
    1180:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1184:	6d434941 	vstrvs.16	s9, [r3, #-130]	; 0xffffff7e	; <UNPREDICTABLE>
    1188:	48410064 	stmdami	r1, {r2, r5, r6}^
    118c:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
    1190:	43520052 	cmpmi	r2, #82	; 0x52
    1194:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1198:	4b4c4353 	blmi	1311eec <startup-0x1ecee114>
    119c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    11a0:	44006769 	strmi	r6, [r0], #-1897	; 0xfffff897
    11a4:	5f32414d 	svcpl	0x0032414d
    11a8:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    11ac:	5f326d61 	svcpl	0x00326d61
    11b0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    11b4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    11b8:	61465f4f 	cmpvs	r6, pc, asr #30
    11bc:	535f7473 	cmppl	pc, #1929379840	; 0x73000000
    11c0:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
    11c4:	43435200 	movtmi	r5, #12800	; 0x3200
    11c8:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    11cc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    11d0:	70006769 	andvc	r6, r0, r9, ror #14
    11d4:	006d6c6c 	rsbeq	r6, sp, ip, ror #24
    11d8:	706e6970 	rsbvc	r6, lr, r0, ror r9
    11dc:	4200736f 	andmi	r7, r0, #-1140850687	; 0xbc000001
    11e0:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
    11e4:	47005445 	strmi	r5, [r0, -r5, asr #8]
    11e8:	5f4f4950 	svcpl	0x004f4950
    11ec:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    11f0:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    11f4:	61447475 	hvcvs	18245	; 0x4745
    11f8:	47006174 	smlsdxmi	r0, r4, r1, r6
    11fc:	5f4f4950 	svcpl	0x004f4950
    1200:	74004641 	strvc	r4, [r0], #-1601	; 0xfffff9bf
    1204:	00706d65 	rsbseq	r6, r0, r5, ror #26
    1208:	4f495047 	svcmi	0x00495047
    120c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1210:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    1214:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1218:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    121c:	42006c61 	andmi	r6, r0, #24832	; 0x6100
    1220:	525f7469 	subspl	r7, pc, #1761607680	; 0x69000000
    1224:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
    1228:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    122c:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    1230:	42657469 	rsbmi	r7, r5, #1761607680	; 0x69000000
    1234:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1238:	5f4f4950 	svcpl	0x004f4950
    123c:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
    1240:	00737469 	rsbseq	r7, r3, r9, ror #8
    1244:	4f495047 	svcmi	0x00495047
    1248:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    124c:	50470074 	subpl	r0, r7, r4, ror r0
    1250:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1254:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1258:	73746942 	cmnvc	r4, #1081344	; 0x108000
    125c:	2f3a4300 	svccs	0x003a4300
    1260:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1264:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    1268:	2f746d61 	svccs	0x00746d61
    126c:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    1270:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1274:	6b6f442f 	blvs	1bd2338 <startup-0x1e42dcc8>
    1278:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    127c:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    1280:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    1284:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    1288:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    128c:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1290:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1294:	6b2f6d65 	blvs	bdc830 <startup-0x1f4237d0>
    1298:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 10e4 <startup-0x1fffef1c>
    129c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    12a0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    12a4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    12a8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    12ac:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    12b0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    12b4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    12b8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    12bc:	445f6870 	ldrbmi	r6, [pc], #-2160	; 12c4 <startup-0x1fffed3c>
    12c0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    12c4:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    12c8:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    12cc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    12d0:	5f787834 	svcpl	0x00787834
    12d4:	6f697067 	svcvs	0x00697067
    12d8:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
    12dc:	5f4f4950 	svcpl	0x004f4950
    12e0:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    12e4:	47007469 	strmi	r7, [r0, -r9, ror #8]
    12e8:	5f4f4950 	svcpl	0x004f4950
    12ec:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    12f0:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    12f4:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    12f8:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
    12fc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1300:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    1304:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1308:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    130c:	726f5000 	rsbvc	r5, pc, #0
    1310:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    1314:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1318:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    131c:	756f536e 	strbvc	r5, [pc, #-878]!	; fb6 <startup-0x1ffff04a>
    1320:	00656372 	rsbeq	r6, r5, r2, ror r3
    1324:	4f495047 	svcmi	0x00495047
    1328:	6165525f 	cmnvs	r5, pc, asr r2
    132c:	706e4964 	rsbvc	r4, lr, r4, ror #18
    1330:	61447475 	hvcvs	18245	; 0x4745
    1334:	47006174 	smlsdxmi	r0, r4, r1, r6
    1338:	5f4f4950 	svcpl	0x004f4950
    133c:	4c6e6950 			; <UNDEFINED> instruction: 0x4c6e6950
    1340:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1344:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1348:	69420067 	stmdbvs	r2, {r0, r1, r2, r5, r6}^
    134c:	74634174 	strbtvc	r4, [r3], #-372	; 0xfffffe8c
    1350:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1354:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    1358:	70746e65 	rsbsvc	r6, r4, r5, ror #28
    135c:	47006e69 	strmi	r6, [r0, -r9, ror #28]
    1360:	5f4f4950 	svcpl	0x004f4950
    1364:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    1368:	50470065 	subpl	r0, r7, r5, rrx
    136c:	00784f49 	rsbseq	r4, r8, r9, asr #30
    1370:	4f495047 	svcmi	0x00495047
    1374:	676f545f 			; <UNDEFINED> instruction: 0x676f545f
    1378:	42656c67 	rsbmi	r6, r5, #26368	; 0x6700
    137c:	00737469 	rsbseq	r7, r3, r9, ror #8
    1380:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1384:	4700325f 	smlsdmi	r0, pc, r2, r3	; <UNPREDICTABLE>
    1388:	5f4f4950 	svcpl	0x004f4950
    138c:	416e6950 	cmnmi	lr, r0, asr r9
    1390:	6e6f4346 	cdpvs	3, 6, cr4, cr15, cr6, {2}
    1394:	00676966 	rsbeq	r6, r7, r6, ror #18
    1398:	4f495047 	svcmi	0x00495047
    139c:	6165525f 	cmnvs	r5, pc, asr r2
    13a0:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xfffff09c
    13a4:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    13a8:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    13ac:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    13b0:	5f434956 	svcpl	0x00434956
    13b4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    13b8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    13bc:	00666544 	rsbeq	r6, r6, r4, asr #10
    13c0:	4349564e 	movtmi	r5, #38478	; 0x964e
    13c4:	5152495f 	cmppl	r2, pc, asr r9
    13c8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    13cc:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
    13d0:	5300646d 	movwpl	r6, #1133	; 0x46d
    13d4:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    13d8:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    13dc:	6f534b4c 	svcvs	0x00534b4c
    13e0:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    13e4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    13e8:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    13ec:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    13f0:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    13f4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    13f8:	72505f43 	subsvc	r5, r0, #268	; 0x10c
    13fc:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1400:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
    1404:	0070756f 	rsbseq	r7, r0, pc, ror #10
    1408:	4349564e 	movtmi	r5, #38478	; 0x964e
    140c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1410:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
    1414:	65727070 	ldrbvs	r7, [r2, #-112]!	; 0xffffff90
    1418:	66664f00 	strbtvs	r4, [r6], -r0, lsl #30
    141c:	00746573 	rsbseq	r6, r4, r3, ror r5
    1420:	4349564e 	movtmi	r5, #38478	; 0x964e
    1424:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1428:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    142c:	6154726f 	cmpvs	r4, pc, ror #4
    1430:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1434:	73706d74 	cmnvc	r0, #116, 26	; 0x1d00
    1438:	4e006275 	mcrmi	2, 0, r6, cr0, cr5, {3}
    143c:	5f434956 	svcpl	0x00434956
    1440:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
    1444:	504c6d65 	subpl	r6, ip, r5, ror #26
    1448:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    144c:	53006769 	movwpl	r6, #1897	; 0x769
    1450:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1454:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    1458:	6f534b4c 	svcvs	0x00534b4c
    145c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1460:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1464:	74006769 	strvc	r6, [r0], #-1897	; 0xfffff897
    1468:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
    146c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1470:	4e007974 			; <UNDEFINED> instruction: 0x4e007974
    1474:	5f434956 	svcpl	0x00434956
    1478:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    147c:	6e6e6168 	powvsez	f6, f6, #0.0
    1480:	4e006c65 	cdpmi	12, 0, cr6, cr0, cr5, {3}
    1484:	5f434956 	svcpl	0x00434956
    1488:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    148c:	6e6e6168 	powvsez	f6, f6, #0.0
    1490:	75536c65 	ldrbvc	r6, [r3, #-3173]	; 0xfffff39b
    1494:	69725062 	ldmdbvs	r2!, {r1, r5, r6, ip, lr}^
    1498:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    149c:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    14a0:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    14a4:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    14a8:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    14ac:	6572506c 	ldrbvs	r5, [r2, #-108]!	; 0xffffff94
    14b0:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
    14b4:	506e6f69 	rsbpl	r6, lr, r9, ror #30
    14b8:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    14bc:	00797469 	rsbseq	r7, r9, r9, ror #8
    14c0:	4349564e 	movtmi	r5, #38478	; 0x964e
    14c4:	6365565f 	cmnvs	r5, #99614720	; 0x5f00000
    14c8:	62615474 	rsbvs	r5, r1, #116, 8	; 0x74000000
    14cc:	2f3a4300 	svccs	0x003a4300
    14d0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    14d4:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    14d8:	2f746d61 	svccs	0x00746d61
    14dc:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    14e0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    14e4:	6b6f442f 	blvs	1bd25a8 <startup-0x1e42da58>
    14e8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    14ec:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    14f0:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    14f4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    14f8:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    14fc:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1500:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1504:	6b2f6d65 	blvs	bdcaa0 <startup-0x1f423560>
    1508:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 1354 <startup-0x1fffecac>
    150c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1510:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1514:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1518:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    151c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1520:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1524:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1528:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    152c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1534 <startup-0x1fffeacc>
    1530:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1534:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1538:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    153c:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
    1540:	776f4c00 	strbvc	r4, [pc, -r0, lsl #24]!
    1544:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    1548:	646f4d72 	strbtvs	r4, [pc], #-3442	; 1550 <startup-0x1fffeab0>
    154c:	564e0065 	strbpl	r0, [lr], -r5, rrx
    1550:	505f4349 	subspl	r4, pc, r9, asr #6
    1554:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1558:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
    155c:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    1560:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1564:	62006769 	andvs	r6, r0, #27525120	; 0x1a40000
    1568:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    156c:	74755072 	ldrbtvc	r5, [r5], #-114	; 0xffffff8e
    1570:	756f6300 	strbvc	r6, [pc, #-768]!	; 1278 <startup-0x1fffed88>
    1574:	4300746e 	movwmi	r7, #1134	; 0x46e
    1578:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    157c:	2f737265 	svccs	0x00737265
    1580:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    1584:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    1588:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    158c:	442f6576 	strtmi	r6, [pc], #-1398	; 1594 <startup-0x1fffea6c>
    1590:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    1594:	2f746e65 	svccs	0x00746e65
    1598:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    159c:	442f6275 	strtmi	r6, [pc], #-629	; 15a4 <startup-0x1fffea5c>
    15a0:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    15a4:	614c2d30 	cmpvs	ip, r0, lsr sp
    15a8:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    15ac:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    15b0:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 15b8 <startup-0x1fffea48>
    15b4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    15b8:	6675622f 	ldrbtvs	r6, [r5], -pc, lsr #4
    15bc:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
    15c0:	49460063 	stmdbmi	r6, {r0, r1, r5, r6}^
    15c4:	62004f46 	andvs	r4, r0, #280	; 0x118
    15c8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    15cc:	65764f72 	ldrbvs	r4, [r6, #-3954]!	; 0xfffff08e
    15d0:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    15d4:	73614c65 	cmnvc	r1, #25856	; 0x6500
    15d8:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    15dc:	62007473 	andvs	r7, r0, #1929379840	; 0x73000000
    15e0:	00666675 	rsbeq	r6, r6, r5, ror r6
    15e4:	6d656c65 	stclvs	12, cr6, [r5, #-404]!	; 0xfffffe6c
    15e8:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    15ec:	47726566 	ldrbmi	r6, [r2, -r6, ror #10]!
    15f0:	62007465 	andvs	r7, r0, #1694498816	; 0x65000000
    15f4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    15f8:	696e4972 	stmdbvs	lr!, {r1, r4, r5, r6, r8, fp, lr}^
    15fc:	75620074 	strbvc	r0, [r2, #-116]!	; 0xffffff8c
    1600:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1604:	65727000 	ldrbvs	r7, [r2, #-0]!
    1608:	646e4976 	strbtvs	r4, [lr], #-2422	; 0xfffff68a
    160c:	69007865 	stmdbvs	r0, {r0, r2, r5, r6, fp, ip, sp, lr}
    1610:	6765746e 	strbvs	r7, [r5, -lr, ror #8]!
    1614:	69647265 	stmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1618:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
    161c:	53550072 	cmppl	r5, #114	; 0x72
    1620:	5f545241 	svcpl	0x00545241
    1624:	41485043 	cmpmi	r8, r3, asr #32
    1628:	50544700 	subspl	r4, r4, r0, lsl #14
    162c:	53550052 	cmppl	r5, #82	; 0x52
    1630:	5f545241 	svcpl	0x00545241
    1634:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1638:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    163c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    1640:	6d437055 	stclvs	0, cr7, [r3, #-340]	; 0xfffffeac
    1644:	53550064 	cmppl	r5, #100	; 0x64
    1648:	5f545241 	svcpl	0x00545241
    164c:	50746553 	rsbspl	r6, r4, r3, asr r5
    1650:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1654:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1658:	41535500 	cmpmi	r3, r0, lsl #10
    165c:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1660:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1664:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1668:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    166c:	6572424e 	ldrbvs	r4, [r2, #-590]!	; 0xfffffdb2
    1670:	65446b61 	strbvs	r6, [r4, #-2913]	; 0xfffff49f
    1674:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1678:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    167c:	55006874 	strpl	r6, [r0, #-2164]	; 0xfffff78c
    1680:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1684:	656e4f5f 	strbvs	r4, [lr, #-3935]!	; 0xfffff0a1
    1688:	4d746942 			; <UNDEFINED> instruction: 0x4d746942
    168c:	6f687465 	svcvs	0x00687465
    1690:	646d4364 	strbtvs	r4, [sp], #-868	; 0xfffffc9c
    1694:	41535500 	cmpmi	r3, r0, lsl #10
    1698:	545f5452 	ldrbpl	r5, [pc], #-1106	; 16a0 <startup-0x1fffe960>
    169c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    16a0:	55006665 	strpl	r6, [r0, #-1637]	; 0xfffff99b
    16a4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    16a8:	6f74535f 	svcvs	0x0074535f
    16ac:	74694270 	strbtvc	r4, [r9], #-624	; 0xfffffd90
    16b0:	53550073 	cmppl	r5, #115	; 0x73
    16b4:	5f545241 	svcpl	0x00545241
    16b8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    16bc:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    16c0:	70795474 	rsbsvc	r5, r9, r4, ror r4
    16c4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    16c8:	41535500 	cmpmi	r3, r0, lsl #10
    16cc:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    16d0:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    16d4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    16d8:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    16dc:	74614464 	strbtvc	r4, [r1], #-1124	; 0xfffffb9c
    16e0:	53550061 	cmppl	r5, #97	; 0x61
    16e4:	5f545241 	svcpl	0x00545241
    16e8:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    16ec:	55007055 	strpl	r7, [r0, #-85]	; 0xffffffab
    16f0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    16f4:	726f575f 	rsbvc	r5, pc, #24903680	; 0x17c0000
    16f8:	6e654c64 	cdpvs	12, 6, cr4, cr5, cr4, {3}
    16fc:	00687467 	rsbeq	r7, r8, r7, ror #8
    1700:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1704:	4d445f54 	stclmi	15, cr5, [r4, #-336]	; 0xfffffeb0
    1708:	646d4341 	strbtvs	r4, [sp], #-833	; 0xfffffcbf
    170c:	41535500 	cmpmi	r3, r0, lsl #10
    1710:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    1714:	42747361 	rsbsmi	r7, r4, #-2080374783	; 0x84000001
    1718:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    171c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1720:	7561425f 	strbvc	r4, [r1, #-607]!	; 0xfffffda1
    1724:	74615264 	strbtvc	r5, [r1], #-612	; 0xfffffd9c
    1728:	53550065 	cmppl	r5, #101	; 0x65
    172c:	5f545241 	svcpl	0x00545241
    1730:	41447249 	cmpmi	r4, r9, asr #4
    1734:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1738:	62706100 	rsbsvs	r6, r0, #0, 2
    173c:	636f6c63 	cmnvs	pc, #25344	; 0x6300
    1740:	5355006b 	cmppl	r5, #107	; 0x6b
    1744:	5f545241 	svcpl	0x00545241
    1748:	61656c43 	cmnvs	r5, r3, asr #24
    174c:	50544972 	subspl	r4, r4, r2, ror r9
    1750:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1754:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1758:	53550074 	cmppl	r5, #116	; 0x74
    175c:	5f545241 	svcpl	0x00545241
    1760:	72617547 	rsbvc	r7, r1, #297795584	; 0x11c00000
    1764:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    1768:	53550065 	cmppl	r5, #101	; 0x65
    176c:	5f545241 	svcpl	0x00545241
    1770:	424e494c 	submi	r4, lr, #76, 18	; 0x130000
    1774:	6b616572 	blvs	185ad44 <startup-0x1e7a52bc>
    1778:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
    177c:	654c7463 	strbvs	r7, [ip, #-1123]	; 0xfffffb9d
    1780:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1784:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1788:	55006769 	strpl	r6, [r0, #-1897]	; 0xfffff897
    178c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1790:	414c465f 	cmpmi	ip, pc, asr r6
    1794:	53550047 	cmppl	r5, #71	; 0x47
    1798:	5f545241 	svcpl	0x00545241
    179c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    17a0:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    17a4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    17a8:	6f6c435f 	svcvs	0x006c435f
    17ac:	6e496b63 	vmlsvs.f64	d22, d9, d19
    17b0:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    17b4:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    17b8:	41535500 	cmpmi	r3, r0, lsl #10
    17bc:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
    17c0:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    17c4:	53550079 	cmppl	r5, #121	; 0x79
    17c8:	5f545241 	svcpl	0x00545241
    17cc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    17d0:	7274536b 	rsbsvc	r5, r4, #-1409286143	; 0xac000001
    17d4:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    17d8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    17dc:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    17e0:	61627874 	smcvs	10116	; 0x2784
    17e4:	55006573 	strpl	r6, [r0, #-1395]	; 0xfffffa8d
    17e8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    17ec:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    17f0:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    17f4:	55006761 	strpl	r6, [r0, #-1889]	; 0xfffff89f
    17f8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    17fc:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1800:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1804:	00737365 	rsbseq	r7, r3, r5, ror #6
    1808:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    180c:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xfffff0ac
    1810:	61754774 	cmnvs	r5, r4, ror r7
    1814:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    1818:	5500656d 	strpl	r6, [r0, #-1389]	; 0xfffffa93
    181c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1820:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    1824:	65724264 	ldrbvs	r4, [r2, #-612]!	; 0xfffffd9c
    1828:	55006b61 	strpl	r6, [r0, #-2913]	; 0xfffff49f
    182c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1830:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1834:	70795474 	rsbsvc	r5, r9, r4, ror r4
    1838:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    183c:	41535500 	cmpmi	r3, r0, lsl #10
    1840:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1844:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    1848:	00676966 	rsbeq	r6, r7, r6, ror #18
    184c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1850:	4d445f54 	stclmi	15, cr5, [r4, #-336]	; 0xfffffeb0
    1854:	71655241 	cmnvc	r5, r1, asr #4
    1858:	41535500 	cmpmi	r3, r0, lsl #10
    185c:	00785452 	rsbseq	r5, r8, r2, asr r4
    1860:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1864:	61485f54 	cmpvs	r8, r4, asr pc
    1868:	61776472 	cmnvs	r7, r2, ror r4
    186c:	6c466572 	cfstr64vs	mvdx6, [r6], {114}	; 0x72
    1870:	6f43776f 	svcvs	0x0043776f
    1874:	6f72746e 	svcvs	0x0072746e
    1878:	5355006c 	cmppl	r5, #108	; 0x6c
    187c:	5f545241 	svcpl	0x00545241
    1880:	72616d53 	rsbvc	r6, r1, #5312	; 0x14c0
    1884:	72614374 	rsbvc	r4, r1, #116, 6	; 0xd0000001
    1888:	646d4364 	strbtvs	r4, [sp], #-868	; 0xfffffc9c
    188c:	41535500 	cmpmi	r3, r0, lsl #10
    1890:	4d5f5452 	cfldrdmi	mvd5, [pc, #-328]	; 1750 <startup-0x1fffe8b0>
    1894:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1898:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    189c:	64415f54 	strbvs	r5, [r1], #-3924	; 0xfffff0ac
    18a0:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    18a4:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
    18a8:	736f7074 	cmnvc	pc, #116	; 0x74
    18ac:	41535500 	cmpmi	r3, r0, lsl #10
    18b0:	4f5f5452 	svcmi	0x005f5452
    18b4:	53726576 	cmnpl	r2, #494927872	; 0x1d800000
    18b8:	6c706d61 	ldclvs	13, cr6, [r0], #-388	; 0xfffffe7c
    18bc:	38676e69 	stmdacc	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    18c0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    18c4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    18c8:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xfffff0ac
    18cc:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    18d0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    18d4:	53550073 	cmppl	r5, #115	; 0x73
    18d8:	5f545241 	svcpl	0x00545241
    18dc:	434e494c 	movtmi	r4, #59724	; 0xe94c
    18e0:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    18e4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    18e8:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0xfffff6a1
    18ec:	6e6f4341 	cdpvs	3, 6, cr4, cr15, cr1, {2}
    18f0:	00676966 	rsbeq	r6, r7, r6, ror #18
    18f4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    18f8:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    18fc:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1900:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1904:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
    1908:	6d434144 	stfvse	f4, [r3, #-272]	; 0xfffffef0
    190c:	72660064 	rsbvc	r0, r6, #100	; 0x64
    1910:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    1914:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    1918:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    191c:	00726564 	rsbseq	r6, r2, r4, ror #10
    1920:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1924:	6d535f54 	ldclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    1928:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    192c:	4e647261 	cdpmi	2, 6, cr7, cr4, cr1, {3}
    1930:	434b4341 	movtmi	r4, #45889	; 0xb341
    1934:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    1938:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    193c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1940:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1944:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1948:	55007375 	strpl	r7, [r0, #-885]	; 0xfffffc8b
    194c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1950:	0054495f 	subseq	r4, r4, pc, asr r9
    1954:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1958:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    195c:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1960:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1964:	43435200 	movtmi	r5, #12800	; 0x3200
    1968:	6f6c435f 	svcvs	0x006c435f
    196c:	53736b63 	cmnpl	r3, #101376	; 0x18c00
    1970:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1974:	53550073 	cmppl	r5, #115	; 0x73
    1978:	5f545241 	svcpl	0x00545241
    197c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1980:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    1984:	53550074 	cmppl	r5, #116	; 0x74
    1988:	5f545241 	svcpl	0x00545241
    198c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    1990:	6f437055 	svcvs	0x00437055
    1994:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1998:	41535500 	cmpmi	r3, r0, lsl #10
    199c:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    19a0:	44666c61 	strbtmi	r6, [r6], #-3169	; 0xfffff39f
    19a4:	656c7075 	strbvs	r7, [ip, #-117]!	; 0xffffff8b
    19a8:	646d4378 	strbtvs	r4, [sp], #-888	; 0xfffffc88
    19ac:	41535500 	cmpmi	r3, r0, lsl #10
    19b0:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    19b4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    19b8:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    19bc:	53550074 	cmppl	r5, #116	; 0x74
    19c0:	5f545241 	svcpl	0x00545241
    19c4:	73657250 	cmnvc	r5, #80, 4
    19c8:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    19cc:	53550072 	cmppl	r5, #114	; 0x72
    19d0:	5f545241 	svcpl	0x00545241
    19d4:	4c4f5043 	mcrrmi	0, 4, r5, pc, cr3
    19d8:	6d746900 			; <UNDEFINED> instruction: 0x6d746900
    19dc:	006b7361 	rsbeq	r7, fp, r1, ror #6
    19e0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fa5 <startup-0x1ffff05b>
    19e4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    19e8:	6164412f 	cmnvs	r4, pc, lsr #2
    19ec:	4f2f746d 	svcmi	0x002f746d
    19f0:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    19f4:	2f657669 	svccs	0x00657669
    19f8:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    19fc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1a00:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    1a04:	2f627548 	svccs	0x00627548
    1a08:	32544144 	subscc	r4, r4, #68, 2
    1a0c:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1a10:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1a14:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1a18:	6f6b2f6d 	svcvs	0x006b2f6d
    1a1c:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1a20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1a24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1a28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1a2c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1a30:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1a34:	5f787834 	svcpl	0x00787834
    1a38:	50647453 	rsbpl	r7, r4, r3, asr r4
    1a3c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1a40:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1a44:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1a48:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1a4c:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1a50:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1a54:	755f7878 	ldrbvc	r7, [pc, #-2168]	; 11e4 <startup-0x1fffee1c>
    1a58:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
    1a5c:	5500632e 	strpl	r6, [r0, #-814]	; 0xfffffcd2
    1a60:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1a64:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    1a68:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    1a6c:	61746144 	cmnvs	r4, r4, asr #2
    1a70:	61737500 	cmnvs	r3, r0, lsl #10
    1a74:	65727472 	ldrbvs	r7, [r2, #-1138]!	; 0xfffffb8e
    1a78:	Address 0x00001a78 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <GPIO_Ports+0xdfffcb82>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000060 	andeq	r0, r0, r0, rrx
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000070 	andcs	r0, r0, r0, ror r0
  3c:	00000048 	andeq	r0, r0, r8, asr #32
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	00000018 	andeq	r0, r0, r8, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000b8 	strhcs	r0, [r0], -r8
  5c:	00000070 	andeq	r0, r0, r0, ror r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	20000128 	andcs	r0, r0, r8, lsr #2
  78:	00000028 	andeq	r0, r0, r8, lsr #32
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	100e4101 	andne	r4, lr, r1, lsl #2
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	00000020 	andeq	r0, r0, r0, lsr #32
  90:	00000000 	andeq	r0, r0, r0
  94:	20000150 	andcs	r0, r0, r0, asr r1
  98:	0000005e 	andeq	r0, r0, lr, asr r0
  9c:	400c0e41 	andmi	r0, ip, r1, asr #28
  a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  a4:	018e4002 	orreq	r4, lr, r2
  a8:	41180e41 	tstmi	r8, r1, asr #28
  ac:	0000070d 	andeq	r0, r0, sp, lsl #14
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200001ae 	andcs	r0, r0, lr, lsr #3
  bc:	0000003e 	andeq	r0, r0, lr, lsr r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	180e4101 	stmdane	lr, {r0, r8, lr}
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200001ec 	andcs	r0, r0, ip, ror #3
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	2000020c 	andcs	r0, r0, ip, lsl #4
  fc:	00000044 	andeq	r0, r0, r4, asr #32
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20000250 	andcs	r0, r0, r0, asr r2
 11c:	00000020 	andeq	r0, r0, r0, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000270 	andcs	r0, r0, r0, ror r2
 13c:	0000003c 	andeq	r0, r0, ip, lsr r0
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	180e4101 	stmdane	lr, {r0, r8, lr}
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200002ac 	andcs	r0, r0, ip, lsr #5
 15c:	00000020 	andeq	r0, r0, r0, lsr #32
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	200002cc 	andcs	r0, r0, ip, asr #5
 17c:	00000028 	andeq	r0, r0, r8, lsr #32
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	100e4101 	andne	r4, lr, r1, lsl #2
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200002f4 	strdcs	r0, [r0], -r4
 19c:	00000020 	andeq	r0, r0, r0, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20000314 	andcs	r0, r0, r4, lsl r3
 1bc:	00000030 	andeq	r0, r0, r0, lsr r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000344 	andcs	r0, r0, r4, asr #6
 1dc:	00000020 	andeq	r0, r0, r0, lsr #32
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20000364 	andcs	r0, r0, r4, ror #6
 1fc:	00000020 	andeq	r0, r0, r0, lsr #32
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000384 	andcs	r0, r0, r4, lsl #7
 21c:	00000040 	andeq	r0, r0, r0, asr #32
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	200003c4 	andcs	r0, r0, r4, asr #7
 23c:	0000003c 	andeq	r0, r0, ip, lsr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000000 	andeq	r0, r0, r0
 258:	20000400 	andcs	r0, r0, r0, lsl #8
 25c:	00000034 	andeq	r0, r0, r4, lsr r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	180e4101 	stmdane	lr, {r0, r8, lr}
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	00000018 	andeq	r0, r0, r8, lsl r0
 274:	00000000 	andeq	r0, r0, r0
 278:	20000434 	andcs	r0, r0, r4, lsr r4
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	20000450 	andcs	r0, r0, r0, asr r4
 298:	00000034 	andeq	r0, r0, r4, lsr r0
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	20000484 	andcs	r0, r0, r4, lsl #9
 2b8:	00000038 	andeq	r0, r0, r8, lsr r0
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c8:	00070d41 	andeq	r0, r7, r1, asr #26
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
 2d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	200004f8 	strdcs	r0, [r0], -r8
 2f8:	00000158 	andeq	r0, r0, r8, asr r1
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	280e4101 	stmdacs	lr, {r0, r8, lr}
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	20000650 	andcs	r0, r0, r0, asr r6
 318:	00000060 	andeq	r0, r0, r0, rrx
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	180e4101 	stmdane	lr, {r0, r8, lr}
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 358:	00000020 	andeq	r0, r0, r0, lsr #32
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	100e4101 	andne	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	100e4101 	andne	r4, lr, r1, lsl #2
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	2000070c 	andcs	r0, r0, ip, lsl #14
 398:	0000003c 	andeq	r0, r0, ip, lsr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	20000748 	andcs	r0, r0, r8, asr #14
 3b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c8:	00070d41 	andeq	r0, r7, r1, asr #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	20000784 	andcs	r0, r0, r4, lsl #15
 3d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	200007c0 	andcs	r0, r0, r0, asr #15
 3f8:	00000040 	andeq	r0, r0, r0, asr #32
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	180e4101 	stmdane	lr, {r0, r8, lr}
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	20000800 	andcs	r0, r0, r0, lsl #16
 418:	0000003c 	andeq	r0, r0, ip, lsr r0
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	180e4101 	stmdane	lr, {r0, r8, lr}
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	2000083c 	andcs	r0, r0, ip, lsr r8
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	100e4101 	andne	r4, lr, r1, lsl #2
 448:	00070d41 	andeq	r0, r7, r1, asr #26
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000000 	andeq	r0, r0, r0
 454:	20000858 	andcs	r0, r0, r8, asr r8
 458:	00000040 	andeq	r0, r0, r0, asr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	100e4101 	andne	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	20000898 	mulcs	r0, r8, r8
 478:	00000040 	andeq	r0, r0, r0, asr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	200008d8 	ldrdcs	r0, [r0], -r8
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	100e4101 	andne	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	20000918 	andcs	r0, r0, r8, lsl r9
 4b8:	00000040 	andeq	r0, r0, r0, asr #32
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	20000958 	andcs	r0, r0, r8, asr r9
 4d8:	00000040 	andeq	r0, r0, r0, asr #32
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	100e4101 	andne	r4, lr, r1, lsl #2
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	20000998 	mulcs	r0, r8, r9
 4f8:	00000040 	andeq	r0, r0, r0, asr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	100e4101 	andne	r4, lr, r1, lsl #2
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	00000000 	andeq	r0, r0, r0
 514:	200009d8 	ldrdcs	r0, [r0], -r8
 518:	00000040 	andeq	r0, r0, r0, asr #32
 51c:	40080e41 	andmi	r0, r8, r1, asr #28
 520:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 524:	100e4101 	andne	r4, lr, r1, lsl #2
 528:	00070d41 	andeq	r0, r7, r1, asr #26
 52c:	0000001c 	andeq	r0, r0, ip, lsl r0
 530:	00000000 	andeq	r0, r0, r0
 534:	20000a18 	andcs	r0, r0, r8, lsl sl
 538:	00000040 	andeq	r0, r0, r0, asr #32
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	100e4101 	andne	r4, lr, r1, lsl #2
 548:	00070d41 	andeq	r0, r7, r1, asr #26
 54c:	0000001c 	andeq	r0, r0, ip, lsl r0
 550:	00000000 	andeq	r0, r0, r0
 554:	20000a58 	andcs	r0, r0, r8, asr sl
 558:	00000040 	andeq	r0, r0, r0, asr #32
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	100e4101 	andne	r4, lr, r1, lsl #2
 568:	00070d41 	andeq	r0, r7, r1, asr #26
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	00000000 	andeq	r0, r0, r0
 574:	20000a98 	mulcs	r0, r8, sl
 578:	00000040 	andeq	r0, r0, r0, asr #32
 57c:	40080e41 	andmi	r0, r8, r1, asr #28
 580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 584:	100e4101 	andne	r4, lr, r1, lsl #2
 588:	00070d41 	andeq	r0, r7, r1, asr #26
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000000 	andeq	r0, r0, r0
 594:	20000ad8 	ldrdcs	r0, [r0], -r8
 598:	00000040 	andeq	r0, r0, r0, asr #32
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	100e4101 	andne	r4, lr, r1, lsl #2
 5a8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	20000b18 	andcs	r0, r0, r8, lsl fp
 5b8:	00000040 	andeq	r0, r0, r0, asr #32
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	100e4101 	andne	r4, lr, r1, lsl #2
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	20000b58 	andcs	r0, r0, r8, asr fp
 5d8:	00000040 	andeq	r0, r0, r0, asr #32
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	100e4101 	andne	r4, lr, r1, lsl #2
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	20000b98 	mulcs	r0, r8, fp
 5f8:	00000040 	andeq	r0, r0, r0, asr #32
 5fc:	40080e41 	andmi	r0, r8, r1, asr #28
 600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 604:	100e4101 	andne	r4, lr, r1, lsl #2
 608:	00070d41 	andeq	r0, r7, r1, asr #26
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	00000000 	andeq	r0, r0, r0
 614:	20000bd8 	ldrdcs	r0, [r0], -r8
 618:	00000040 	andeq	r0, r0, r0, asr #32
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	100e4101 	andne	r4, lr, r1, lsl #2
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	20000c18 	andcs	r0, r0, r8, lsl ip
 638:	0000003c 	andeq	r0, r0, ip, lsr r0
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	100e4101 	andne	r4, lr, r1, lsl #2
 648:	00070d41 	andeq	r0, r7, r1, asr #26
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	20000c54 	andcs	r0, r0, r4, asr ip
 658:	00000050 	andeq	r0, r0, r0, asr r0
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	100e4101 	andne	r4, lr, r1, lsl #2
 668:	00070d41 	andeq	r0, r7, r1, asr #26
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	00000000 	andeq	r0, r0, r0
 674:	20000ca4 	andcs	r0, r0, r4, lsr #25
 678:	00000084 	andeq	r0, r0, r4, lsl #1
 67c:	40080e41 	andmi	r0, r8, r1, asr #28
 680:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 684:	200e4101 	andcs	r4, lr, r1, lsl #2
 688:	00070d41 	andeq	r0, r7, r1, asr #26
 68c:	00000018 	andeq	r0, r0, r8, lsl r0
 690:	00000000 	andeq	r0, r0, r0
 694:	20000d28 	andcs	r0, r0, r8, lsr #26
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	40080e41 	andmi	r0, r8, r1, asr #28
 6a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ac:	00000000 	andeq	r0, r0, r0
 6b0:	20000d44 	andcs	r0, r0, r4, asr #26
 6b4:	00000044 	andeq	r0, r0, r4, asr #32
 6b8:	40080e41 	andmi	r0, r8, r1, asr #28
 6bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 6c4:	00070d41 	andeq	r0, r7, r1, asr #26
 6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6cc:	00000000 	andeq	r0, r0, r0
 6d0:	20000d88 	andcs	r0, r0, r8, lsl #27
 6d4:	00000020 	andeq	r0, r0, r0, lsr #32
 6d8:	40080e41 	andmi	r0, r8, r1, asr #28
 6dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e0:	100e4101 	andne	r4, lr, r1, lsl #2
 6e4:	00070d41 	andeq	r0, r7, r1, asr #26
 6e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ec:	00000000 	andeq	r0, r0, r0
 6f0:	20000da8 	andcs	r0, r0, r8, lsr #27
 6f4:	000001c8 	andeq	r0, r0, r8, asr #3
 6f8:	40080e41 	andmi	r0, r8, r1, asr #28
 6fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 700:	100e4101 	andne	r4, lr, r1, lsl #2
 704:	00070d41 	andeq	r0, r7, r1, asr #26
 708:	0000000c 	andeq	r0, r0, ip
 70c:	00000000 	andeq	r0, r0, r0
 710:	20000000 	andcs	r0, r0, r0
 714:	0000000c 	andeq	r0, r0, ip
 718:	00000018 	andeq	r0, r0, r8, lsl r0
 71c:	00000000 	andeq	r0, r0, r0
 720:	20000f70 	andcs	r0, r0, r0, ror pc
 724:	00000018 	andeq	r0, r0, r8, lsl r0
 728:	40080e41 	andmi	r0, r8, r1, asr #28
 72c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 730:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 734:	0000001c 	andeq	r0, r0, ip, lsl r0
 738:	00000000 	andeq	r0, r0, r0
 73c:	20000f88 	andcs	r0, r0, r8, lsl #31
 740:	00000038 	andeq	r0, r0, r8, lsr r0
 744:	40080e41 	andmi	r0, r8, r1, asr #28
 748:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 74c:	100e4101 	andne	r4, lr, r1, lsl #2
 750:	00070d41 	andeq	r0, r7, r1, asr #26
 754:	0000001c 	andeq	r0, r0, ip, lsl r0
 758:	00000000 	andeq	r0, r0, r0
 75c:	20000fc0 	andcs	r0, r0, r0, asr #31
 760:	0000002c 	andeq	r0, r0, ip, lsr #32
 764:	40080e41 	andmi	r0, r8, r1, asr #28
 768:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 76c:	180e4101 	stmdane	lr, {r0, r8, lr}
 770:	00070d41 	andeq	r0, r7, r1, asr #26
 774:	00000024 	andeq	r0, r0, r4, lsr #32
 778:	00000000 	andeq	r0, r0, r0
 77c:	20000fec 	andcs	r0, r0, ip, ror #31
 780:	00000458 	andeq	r0, r0, r8, asr r4
 784:	40140e41 	andsmi	r0, r4, r1, asr #28
 788:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 78c:	03864004 	orreq	r4, r6, #4
 790:	40028740 	andmi	r8, r2, r0, asr #14
 794:	0e41018e 	dvfeqd	f0, f1, #0.5
 798:	070d4168 	streq	r4, [sp, -r8, ror #2]
 79c:	0000000c 	andeq	r0, r0, ip
 7a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7a4:	7c020001 	stcvc	0, cr0, [r2], {1}
 7a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b0:	0000079c 	muleq	r0, ip, r7
 7b4:	20001444 	andcs	r1, r0, r4, asr #8
 7b8:	00000170 	andeq	r0, r0, r0, ror r1
 7bc:	40080e41 	andmi	r0, r8, r1, asr #28
 7c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7c4:	100e4101 	andne	r4, lr, r1, lsl #2
 7c8:	00070d41 	andeq	r0, r7, r1, asr #26
 7cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 7d0:	0000079c 	muleq	r0, ip, r7
 7d4:	200015b4 			; <UNDEFINED> instruction: 0x200015b4
 7d8:	00000118 	andeq	r0, r0, r8, lsl r1
 7dc:	40080e41 	andmi	r0, r8, r1, asr #28
 7e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7e4:	200e4101 	andcs	r4, lr, r1, lsl #2
 7e8:	00070d41 	andeq	r0, r7, r1, asr #26
 7ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 7f0:	0000079c 	muleq	r0, ip, r7
 7f4:	200016cc 	andcs	r1, r0, ip, asr #13
 7f8:	00000034 	andeq	r0, r0, r4, lsr r0
 7fc:	40080e41 	andmi	r0, r8, r1, asr #28
 800:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 804:	100e4101 	andne	r4, lr, r1, lsl #2
 808:	00070d41 	andeq	r0, r7, r1, asr #26
 80c:	0000001c 	andeq	r0, r0, ip, lsl r0
 810:	0000079c 	muleq	r0, ip, r7
 814:	20001700 	andcs	r1, r0, r0, lsl #14
 818:	00000046 	andeq	r0, r0, r6, asr #32
 81c:	40080e41 	andmi	r0, r8, r1, asr #28
 820:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 824:	180e4101 	stmdane	lr, {r0, r8, lr}
 828:	00070d41 	andeq	r0, r7, r1, asr #26
 82c:	0000001c 	andeq	r0, r0, ip, lsl r0
 830:	0000079c 	muleq	r0, ip, r7
 834:	20001746 	andcs	r1, r0, r6, asr #14
 838:	00000042 	andeq	r0, r0, r2, asr #32
 83c:	40080e41 	andmi	r0, r8, r1, asr #28
 840:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 844:	180e4101 	stmdane	lr, {r0, r8, lr}
 848:	00070d41 	andeq	r0, r7, r1, asr #26
 84c:	0000001c 	andeq	r0, r0, ip, lsl r0
 850:	0000079c 	muleq	r0, ip, r7
 854:	20001788 	andcs	r1, r0, r8, lsl #15
 858:	00000016 	andeq	r0, r0, r6, lsl r0
 85c:	40080e41 	andmi	r0, r8, r1, asr #28
 860:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 864:	100e4101 	andne	r4, lr, r1, lsl #2
 868:	00070d41 	andeq	r0, r7, r1, asr #26
 86c:	0000001c 	andeq	r0, r0, ip, lsl r0
 870:	0000079c 	muleq	r0, ip, r7
 874:	2000179e 	mulcs	r0, lr, r7
 878:	00000042 	andeq	r0, r0, r2, asr #32
 87c:	40080e41 	andmi	r0, r8, r1, asr #28
 880:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 884:	180e4101 	stmdane	lr, {r0, r8, lr}
 888:	00070d41 	andeq	r0, r7, r1, asr #26
 88c:	0000001c 	andeq	r0, r0, ip, lsl r0
 890:	0000079c 	muleq	r0, ip, r7
 894:	200017e0 	andcs	r1, r0, r0, ror #15
 898:	00000016 	andeq	r0, r0, r6, lsl r0
 89c:	40080e41 	andmi	r0, r8, r1, asr #28
 8a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8a4:	100e4101 	andne	r4, lr, r1, lsl #2
 8a8:	00070d41 	andeq	r0, r7, r1, asr #26
 8ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 8b0:	0000079c 	muleq	r0, ip, r7
 8b4:	200017f6 	strdcs	r1, [r0], -r6
 8b8:	0000001e 	andeq	r0, r0, lr, lsl r0
 8bc:	40080e41 	andmi	r0, r8, r1, asr #28
 8c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8c4:	100e4101 	andne	r4, lr, r1, lsl #2
 8c8:	00070d41 	andeq	r0, r7, r1, asr #26
 8cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8d0:	0000079c 	muleq	r0, ip, r7
 8d4:	20001814 	andcs	r1, r0, r4, lsl r8
 8d8:	0000001e 	andeq	r0, r0, lr, lsl r0
 8dc:	40080e41 	andmi	r0, r8, r1, asr #28
 8e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8e4:	100e4101 	andne	r4, lr, r1, lsl #2
 8e8:	00070d41 	andeq	r0, r7, r1, asr #26
 8ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 8f0:	0000079c 	muleq	r0, ip, r7
 8f4:	20001832 	andcs	r1, r0, r2, lsr r8
 8f8:	0000003a 	andeq	r0, r0, sl, lsr r0
 8fc:	40080e41 	andmi	r0, r8, r1, asr #28
 900:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 904:	100e4101 	andne	r4, lr, r1, lsl #2
 908:	00070d41 	andeq	r0, r7, r1, asr #26
 90c:	0000001c 	andeq	r0, r0, ip, lsl r0
 910:	0000079c 	muleq	r0, ip, r7
 914:	2000186c 	andcs	r1, r0, ip, ror #16
 918:	0000001e 	andeq	r0, r0, lr, lsl r0
 91c:	40080e41 	andmi	r0, r8, r1, asr #28
 920:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 924:	100e4101 	andne	r4, lr, r1, lsl #2
 928:	00070d41 	andeq	r0, r7, r1, asr #26
 92c:	0000001c 	andeq	r0, r0, ip, lsl r0
 930:	0000079c 	muleq	r0, ip, r7
 934:	2000188a 	andcs	r1, r0, sl, lsl #17
 938:	00000024 	andeq	r0, r0, r4, lsr #32
 93c:	40080e41 	andmi	r0, r8, r1, asr #28
 940:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 944:	100e4101 	andne	r4, lr, r1, lsl #2
 948:	00070d41 	andeq	r0, r7, r1, asr #26
 94c:	0000001c 	andeq	r0, r0, ip, lsl r0
 950:	0000079c 	muleq	r0, ip, r7
 954:	200018ae 	andcs	r1, r0, lr, lsr #17
 958:	000000a4 	andeq	r0, r0, r4, lsr #1
 95c:	40080e41 	andmi	r0, r8, r1, asr #28
 960:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 964:	180e4101 	stmdane	lr, {r0, r8, lr}
 968:	00070d41 	andeq	r0, r7, r1, asr #26
 96c:	0000000c 	andeq	r0, r0, ip
 970:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 974:	7c020001 	stcvc	0, cr0, [r2], {1}
 978:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 97c:	0000001c 	andeq	r0, r0, ip, lsl r0
 980:	0000096c 	andeq	r0, r0, ip, ror #18
 984:	20001954 	andcs	r1, r0, r4, asr r9
 988:	00000024 	andeq	r0, r0, r4, lsr #32
 98c:	40080e41 	andmi	r0, r8, r1, asr #28
 990:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 994:	100e4101 	andne	r4, lr, r1, lsl #2
 998:	00070d41 	andeq	r0, r7, r1, asr #26
 99c:	00000024 	andeq	r0, r0, r4, lsr #32
 9a0:	0000096c 	andeq	r0, r0, ip, ror #18
 9a4:	20001978 	andcs	r1, r0, r8, ror r9
 9a8:	000000f8 	strdeq	r0, [r0], -r8
 9ac:	40100e41 	andsmi	r0, r0, r1, asr #28
 9b0:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 9b4:	02874003 	addeq	r4, r7, #3
 9b8:	41018e40 	tstmi	r1, r0, asr #28
 9bc:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 9c0:	00000007 	andeq	r0, r0, r7
 9c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 9c8:	0000096c 	andeq	r0, r0, ip, ror #18
 9cc:	20001a70 	andcs	r1, r0, r0, ror sl
 9d0:	0000002c 	andeq	r0, r0, ip, lsr #32
 9d4:	40080e41 	andmi	r0, r8, r1, asr #28
 9d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9dc:	100e4101 	andne	r4, lr, r1, lsl #2
 9e0:	00070d41 	andeq	r0, r7, r1, asr #26
 9e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 9e8:	0000096c 	andeq	r0, r0, ip, ror #18
 9ec:	20001a9c 	mulcs	r0, ip, sl
 9f0:	00000048 	andeq	r0, r0, r8, asr #32
 9f4:	40080e41 	andmi	r0, r8, r1, asr #28
 9f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9fc:	100e4101 	andne	r4, lr, r1, lsl #2
 a00:	00070d41 	andeq	r0, r7, r1, asr #26
 a04:	0000001c 	andeq	r0, r0, ip, lsl r0
 a08:	0000096c 	andeq	r0, r0, ip, ror #18
 a0c:	20001ae4 	andcs	r1, r0, r4, ror #21
 a10:	00000034 	andeq	r0, r0, r4, lsr r0
 a14:	40080e41 	andmi	r0, r8, r1, asr #28
 a18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a1c:	100e4101 	andne	r4, lr, r1, lsl #2
 a20:	00070d41 	andeq	r0, r7, r1, asr #26
 a24:	0000000c 	andeq	r0, r0, ip
 a28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a2c:	7c020001 	stcvc	0, cr0, [r2], {1}
 a30:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a34:	0000001c 	andeq	r0, r0, ip, lsl r0
 a38:	00000a24 	andeq	r0, r0, r4, lsr #20
 a3c:	20001b18 	andcs	r1, r0, r8, lsl fp
 a40:	00000028 	andeq	r0, r0, r8, lsr #32
 a44:	40080e41 	andmi	r0, r8, r1, asr #28
 a48:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a4c:	100e4101 	andne	r4, lr, r1, lsl #2
 a50:	00070d41 	andeq	r0, r7, r1, asr #26
 a54:	0000001c 	andeq	r0, r0, ip, lsl r0
 a58:	00000a24 	andeq	r0, r0, r4, lsr #20
 a5c:	20001b40 	andcs	r1, r0, r0, asr #22
 a60:	00000062 	andeq	r0, r0, r2, rrx
 a64:	40080e41 	andmi	r0, r8, r1, asr #28
 a68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a6c:	100e4101 	andne	r4, lr, r1, lsl #2
 a70:	00070d41 	andeq	r0, r7, r1, asr #26
 a74:	0000001c 	andeq	r0, r0, ip, lsl r0
 a78:	00000a24 	andeq	r0, r0, r4, lsr #20
 a7c:	20001ba2 	andcs	r1, r0, r2, lsr #23
 a80:	00000040 	andeq	r0, r0, r0, asr #32
 a84:	40080e41 	andmi	r0, r8, r1, asr #28
 a88:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a8c:	180e4101 	stmdane	lr, {r0, r8, lr}
 a90:	00070d41 	andeq	r0, r7, r1, asr #26
 a94:	0000001c 	andeq	r0, r0, ip, lsl r0
 a98:	00000a24 	andeq	r0, r0, r4, lsr #20
 a9c:	20001be2 	andcs	r1, r0, r2, ror #23
 aa0:	0000005e 	andeq	r0, r0, lr, asr r0
 aa4:	40080e41 	andmi	r0, r8, r1, asr #28
 aa8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 aac:	100e4101 	andne	r4, lr, r1, lsl #2
 ab0:	00070d41 	andeq	r0, r7, r1, asr #26
 ab4:	0000000c 	andeq	r0, r0, ip
 ab8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 abc:	7c020001 	stcvc	0, cr0, [r2], {1}
 ac0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ac4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ac8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 acc:	20001c40 	andcs	r1, r0, r0, asr #24
 ad0:	00000130 	andeq	r0, r0, r0, lsr r1
 ad4:	40080e41 	andmi	r0, r8, r1, asr #28
 ad8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 adc:	100e4101 	andne	r4, lr, r1, lsl #2
 ae0:	00070d41 	andeq	r0, r7, r1, asr #26
 ae4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ae8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 aec:	20001d70 	andcs	r1, r0, r0, ror sp
 af0:	00000194 	muleq	r0, r4, r1
 af4:	40080e41 	andmi	r0, r8, r1, asr #28
 af8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 afc:	300e4101 	andcc	r4, lr, r1, lsl #2
 b00:	00070d41 	andeq	r0, r7, r1, asr #26
 b04:	0000001c 	andeq	r0, r0, ip, lsl r0
 b08:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 b0c:	20001f04 	andcs	r1, r0, r4, lsl #30
 b10:	00000036 	andeq	r0, r0, r6, lsr r0
 b14:	40080e41 	andmi	r0, r8, r1, asr #28
 b18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b1c:	100e4101 	andne	r4, lr, r1, lsl #2
 b20:	00070d41 	andeq	r0, r7, r1, asr #26
 b24:	0000001c 	andeq	r0, r0, ip, lsl r0
 b28:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 b2c:	20001f3a 	andcs	r1, r0, sl, lsr pc
 b30:	00000056 	andeq	r0, r0, r6, asr r0
 b34:	40080e41 	andmi	r0, r8, r1, asr #28
 b38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b3c:	180e4101 	stmdane	lr, {r0, r8, lr}
 b40:	00070d41 	andeq	r0, r7, r1, asr #26
 b44:	0000001c 	andeq	r0, r0, ip, lsl r0
 b48:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 b4c:	20001f90 	mulcs	r0, r0, pc	; <UNPREDICTABLE>
 b50:	00000028 	andeq	r0, r0, r8, lsr #32
 b54:	40080e41 	andmi	r0, r8, r1, asr #28
 b58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b5c:	100e4101 	andne	r4, lr, r1, lsl #2
 b60:	00070d41 	andeq	r0, r7, r1, asr #26
 b64:	0000001c 	andeq	r0, r0, ip, lsl r0
 b68:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 b6c:	20001fb8 			; <UNDEFINED> instruction: 0x20001fb8
 b70:	00000048 	andeq	r0, r0, r8, asr #32
 b74:	40080e41 	andmi	r0, r8, r1, asr #28
 b78:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b7c:	100e4101 	andne	r4, lr, r1, lsl #2
 b80:	00070d41 	andeq	r0, r7, r1, asr #26
 b84:	0000001c 	andeq	r0, r0, ip, lsl r0
 b88:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 b8c:	20002000 	andcs	r2, r0, r0
 b90:	0000003a 	andeq	r0, r0, sl, lsr r0
 b94:	40080e41 	andmi	r0, r8, r1, asr #28
 b98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b9c:	100e4101 	andne	r4, lr, r1, lsl #2
 ba0:	00070d41 	andeq	r0, r7, r1, asr #26
 ba4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ba8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 bac:	2000203a 	andcs	r2, r0, sl, lsr r0
 bb0:	00000046 	andeq	r0, r0, r6, asr #32
 bb4:	40080e41 	andmi	r0, r8, r1, asr #28
 bb8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bbc:	100e4101 	andne	r4, lr, r1, lsl #2
 bc0:	00070d41 	andeq	r0, r7, r1, asr #26
 bc4:	0000001c 	andeq	r0, r0, ip, lsl r0
 bc8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 bcc:	20002080 	andcs	r2, r0, r0, lsl #1
 bd0:	00000048 	andeq	r0, r0, r8, asr #32
 bd4:	40080e41 	andmi	r0, r8, r1, asr #28
 bd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bdc:	100e4101 	andne	r4, lr, r1, lsl #2
 be0:	00070d41 	andeq	r0, r7, r1, asr #26
 be4:	0000001c 	andeq	r0, r0, ip, lsl r0
 be8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 bec:	200020c8 	andcs	r2, r0, r8, asr #1
 bf0:	00000024 	andeq	r0, r0, r4, lsr #32
 bf4:	40080e41 	andmi	r0, r8, r1, asr #28
 bf8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bfc:	100e4101 	andne	r4, lr, r1, lsl #2
 c00:	00070d41 	andeq	r0, r7, r1, asr #26
 c04:	0000001c 	andeq	r0, r0, ip, lsl r0
 c08:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 c0c:	200020ec 	andcs	r2, r0, ip, ror #1
 c10:	0000001c 	andeq	r0, r0, ip, lsl r0
 c14:	40080e41 	andmi	r0, r8, r1, asr #28
 c18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c1c:	100e4101 	andne	r4, lr, r1, lsl #2
 c20:	00070d41 	andeq	r0, r7, r1, asr #26
 c24:	0000001c 	andeq	r0, r0, ip, lsl r0
 c28:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 c2c:	20002108 	andcs	r2, r0, r8, lsl #2
 c30:	0000003a 	andeq	r0, r0, sl, lsr r0
 c34:	40080e41 	andmi	r0, r8, r1, asr #28
 c38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c3c:	100e4101 	andne	r4, lr, r1, lsl #2
 c40:	00070d41 	andeq	r0, r7, r1, asr #26
 c44:	0000001c 	andeq	r0, r0, ip, lsl r0
 c48:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 c4c:	20002142 	andcs	r2, r0, r2, asr #2
 c50:	00000040 	andeq	r0, r0, r0, asr #32
 c54:	40080e41 	andmi	r0, r8, r1, asr #28
 c58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c5c:	100e4101 	andne	r4, lr, r1, lsl #2
 c60:	00070d41 	andeq	r0, r7, r1, asr #26
 c64:	0000001c 	andeq	r0, r0, ip, lsl r0
 c68:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 c6c:	20002182 	andcs	r2, r0, r2, lsl #3
 c70:	0000003e 	andeq	r0, r0, lr, lsr r0
 c74:	40080e41 	andmi	r0, r8, r1, asr #28
 c78:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c7c:	100e4101 	andne	r4, lr, r1, lsl #2
 c80:	00070d41 	andeq	r0, r7, r1, asr #26
 c84:	0000001c 	andeq	r0, r0, ip, lsl r0
 c88:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 c8c:	200021c0 	andcs	r2, r0, r0, asr #3
 c90:	00000038 	andeq	r0, r0, r8, lsr r0
 c94:	40080e41 	andmi	r0, r8, r1, asr #28
 c98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c9c:	100e4101 	andne	r4, lr, r1, lsl #2
 ca0:	00070d41 	andeq	r0, r7, r1, asr #26
 ca4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ca8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 cac:	200021f8 	strdcs	r2, [r0], -r8
 cb0:	00000048 	andeq	r0, r0, r8, asr #32
 cb4:	40080e41 	andmi	r0, r8, r1, asr #28
 cb8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cbc:	100e4101 	andne	r4, lr, r1, lsl #2
 cc0:	00070d41 	andeq	r0, r7, r1, asr #26
 cc4:	0000001c 	andeq	r0, r0, ip, lsl r0
 cc8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 ccc:	20002240 	andcs	r2, r0, r0, asr #4
 cd0:	00000020 	andeq	r0, r0, r0, lsr #32
 cd4:	40080e41 	andmi	r0, r8, r1, asr #28
 cd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cdc:	100e4101 	andne	r4, lr, r1, lsl #2
 ce0:	00070d41 	andeq	r0, r7, r1, asr #26
 ce4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ce8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 cec:	20002260 	andcs	r2, r0, r0, ror #4
 cf0:	00000040 	andeq	r0, r0, r0, asr #32
 cf4:	40080e41 	andmi	r0, r8, r1, asr #28
 cf8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cfc:	100e4101 	andne	r4, lr, r1, lsl #2
 d00:	00070d41 	andeq	r0, r7, r1, asr #26
 d04:	0000001c 	andeq	r0, r0, ip, lsl r0
 d08:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 d0c:	200022a0 	andcs	r2, r0, r0, lsr #5
 d10:	0000003e 	andeq	r0, r0, lr, lsr r0
 d14:	40080e41 	andmi	r0, r8, r1, asr #28
 d18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d1c:	100e4101 	andne	r4, lr, r1, lsl #2
 d20:	00070d41 	andeq	r0, r7, r1, asr #26
 d24:	0000001c 	andeq	r0, r0, ip, lsl r0
 d28:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 d2c:	200022de 	ldrdcs	r2, [r0], -lr
 d30:	00000040 	andeq	r0, r0, r0, asr #32
 d34:	40080e41 	andmi	r0, r8, r1, asr #28
 d38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d3c:	100e4101 	andne	r4, lr, r1, lsl #2
 d40:	00070d41 	andeq	r0, r7, r1, asr #26
 d44:	0000001c 	andeq	r0, r0, ip, lsl r0
 d48:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 d4c:	2000231e 	andcs	r2, r0, lr, lsl r3
 d50:	00000040 	andeq	r0, r0, r0, asr #32
 d54:	40080e41 	andmi	r0, r8, r1, asr #28
 d58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d5c:	100e4101 	andne	r4, lr, r1, lsl #2
 d60:	00070d41 	andeq	r0, r7, r1, asr #26
 d64:	0000001c 	andeq	r0, r0, ip, lsl r0
 d68:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 d6c:	2000235e 	andcs	r2, r0, lr, asr r3
 d70:	00000038 	andeq	r0, r0, r8, lsr r0
 d74:	40080e41 	andmi	r0, r8, r1, asr #28
 d78:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d7c:	100e4101 	andne	r4, lr, r1, lsl #2
 d80:	00070d41 	andeq	r0, r7, r1, asr #26
 d84:	0000001c 	andeq	r0, r0, ip, lsl r0
 d88:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 d8c:	20002396 	mulcs	r0, r6, r3
 d90:	00000040 	andeq	r0, r0, r0, asr #32
 d94:	40080e41 	andmi	r0, r8, r1, asr #28
 d98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d9c:	100e4101 	andne	r4, lr, r1, lsl #2
 da0:	00070d41 	andeq	r0, r7, r1, asr #26
 da4:	0000001c 	andeq	r0, r0, ip, lsl r0
 da8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 dac:	200023d6 	ldrdcs	r2, [r0], -r6
 db0:	00000052 	andeq	r0, r0, r2, asr r0
 db4:	40080e41 	andmi	r0, r8, r1, asr #28
 db8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 dbc:	100e4101 	andne	r4, lr, r1, lsl #2
 dc0:	00070d41 	andeq	r0, r7, r1, asr #26
 dc4:	0000001c 	andeq	r0, r0, ip, lsl r0
 dc8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 dcc:	20002428 	andcs	r2, r0, r8, lsr #8
 dd0:	0000009a 	muleq	r0, sl, r0
 dd4:	40080e41 	andmi	r0, r8, r1, asr #28
 dd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ddc:	200e4101 	andcs	r4, lr, r1, lsl #2
 de0:	00070d41 	andeq	r0, r7, r1, asr #26
 de4:	0000001c 	andeq	r0, r0, ip, lsl r0
 de8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 dec:	200024c2 	andcs	r2, r0, r2, asr #9
 df0:	00000048 	andeq	r0, r0, r8, asr #32
 df4:	40080e41 	andmi	r0, r8, r1, asr #28
 df8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 dfc:	180e4101 	stmdane	lr, {r0, r8, lr}
 e00:	00070d41 	andeq	r0, r7, r1, asr #26
 e04:	0000001c 	andeq	r0, r0, ip, lsl r0
 e08:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 e0c:	2000250a 	andcs	r2, r0, sl, lsl #10
 e10:	00000022 	andeq	r0, r0, r2, lsr #32
 e14:	40080e41 	andmi	r0, r8, r1, asr #28
 e18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e1c:	100e4101 	andne	r4, lr, r1, lsl #2
 e20:	00070d41 	andeq	r0, r7, r1, asr #26
 e24:	0000001c 	andeq	r0, r0, ip, lsl r0
 e28:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 e2c:	2000252c 	andcs	r2, r0, ip, lsr #10
 e30:	000000ca 	andeq	r0, r0, sl, asr #1
 e34:	40080e41 	andmi	r0, r8, r1, asr #28
 e38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e3c:	200e4101 	andcs	r4, lr, r1, lsl #2
 e40:	00070d41 	andeq	r0, r7, r1, asr #26
 e44:	0000001c 	andeq	r0, r0, ip, lsl r0
 e48:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 e4c:	200025f6 	strdcs	r2, [r0], -r6
 e50:	00000048 	andeq	r0, r0, r8, asr #32
 e54:	40080e41 	andmi	r0, r8, r1, asr #28
 e58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e5c:	180e4101 	stmdane	lr, {r0, r8, lr}
 e60:	00070d41 	andeq	r0, r7, r1, asr #26
 e64:	0000000c 	andeq	r0, r0, ip
 e68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 e6c:	7c010001 	stcvc	0, cr0, [r1], {1}
 e70:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 e74:	0000000c 	andeq	r0, r0, ip
 e78:	00000e64 	andeq	r0, r0, r4, ror #28
 e7c:	20002641 	andcs	r2, r0, r1, asr #12
 e80:	0000010a 	andeq	r0, r0, sl, lsl #2
