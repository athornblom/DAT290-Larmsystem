
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f83d 	bl	20000082 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_GPIOA>:

void init_GPIOA(){
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000016:	2101      	movs	r1, #1
20000018:	2001      	movs	r0, #1
2000001a:	f000 fec5 	bl	20000da8 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
2000001e:	003b      	movs	r3, r7
20000020:	0018      	movs	r0, r3
20000022:	f000 f9ad 	bl	20000380 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7;
20000026:	003b      	movs	r3, r7
20000028:	22aa      	movs	r2, #170	; 0xaa
2000002a:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
2000002c:	003b      	movs	r3, r7
2000002e:	2201      	movs	r2, #1
20000030:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000032:	003b      	movs	r3, r7
20000034:	2200      	movs	r2, #0
20000036:	719a      	strb	r2, [r3, #6]
	GPIO_Init(GPIOA,&init);
20000038:	003b      	movs	r3, r7
2000003a:	4a0e      	ldr	r2, [pc, #56]	; (20000074 <init_GPIOA+0x64>)
2000003c:	0019      	movs	r1, r3
2000003e:	0010      	movs	r0, r2
20000040:	f000 f912 	bl	20000268 <GPIO_Init>

//konfigurerar inport
	GPIO_StructInit(&init);
20000044:	003b      	movs	r3, r7
20000046:	0018      	movs	r0, r3
20000048:	f000 f99a 	bl	20000380 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6;
2000004c:	003b      	movs	r3, r7
2000004e:	2255      	movs	r2, #85	; 0x55
20000050:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000052:	003b      	movs	r3, r7
20000054:	2200      	movs	r2, #0
20000056:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000058:	003b      	movs	r3, r7
2000005a:	2201      	movs	r2, #1
2000005c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA,&init);
2000005e:	003b      	movs	r3, r7
20000060:	4a04      	ldr	r2, [pc, #16]	; (20000074 <init_GPIOA+0x64>)
20000062:	0019      	movs	r1, r3
20000064:	0010      	movs	r0, r2
20000066:	f000 f8ff 	bl	20000268 <GPIO_Init>
	
	
}
2000006a:	46c0      	nop			; (mov r8, r8)
2000006c:	46bd      	mov	sp, r7
2000006e:	b002      	add	sp, #8
20000070:	bd80      	pop	{r7, pc}
20000072:	46c0      	nop			; (mov r8, r8)
20000074:	40020000 	andmi	r0, r2, r0

20000078 <app_init>:

void app_init() {
20000078:	b580      	push	{r7, lr}
2000007a:	af00      	add	r7, sp, #0

}
2000007c:	46c0      	nop			; (mov r8, r8)
2000007e:	46bd      	mov	sp, r7
20000080:	bd80      	pop	{r7, pc}

20000082 <main>:


void main(void)
{
20000082:	b590      	push	{r4, r7, lr}
20000084:	b08b      	sub	sp, #44	; 0x2c
20000086:	af00      	add	r7, sp, #0
	// För iteration av samtliga GPIO_pins i loopar.
	uint16_t GPIO_Pins[] = {
20000088:	1d3b      	adds	r3, r7, #4
2000008a:	4a19      	ldr	r2, [pc, #100]	; (200000f0 <main+0x6e>)
2000008c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000008e:	c313      	stmia	r3!, {r0, r1, r4}
20000090:	ca13      	ldmia	r2!, {r0, r1, r4}
20000092:	c313      	stmia	r3!, {r0, r1, r4}
20000094:	ca03      	ldmia	r2!, {r0, r1}
20000096:	c303      	stmia	r3!, {r0, r1}
		GPIO_Pin_8, GPIO_Pin_9, GPIO_Pin_10, GPIO_Pin_11,
		GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14, GPIO_Pin_15
		};
	
//	app_init();  Vad ska hända här?
	init_GPIOA();
20000098:	f7ff ffba 	bl	20000010 <init_GPIOA>

		
	// Main Loop
	while(1){
		for (int i = 0; i < sizeof(GPIO_Pins); i+=2)
2000009c:	2300      	movs	r3, #0
2000009e:	627b      	str	r3, [r7, #36]	; 0x24
200000a0:	e022      	b.n	200000e8 <main+0x66>
		{
			if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pins[i]))
200000a2:	1d3b      	adds	r3, r7, #4
200000a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200000a6:	0052      	lsls	r2, r2, #1
200000a8:	5ad3      	ldrh	r3, [r2, r3]
200000aa:	4a12      	ldr	r2, [pc, #72]	; (200000f4 <main+0x72>)
200000ac:	0019      	movs	r1, r3
200000ae:	0010      	movs	r0, r2
200000b0:	f000 f9a3 	bl	200003fa <GPIO_ReadInputDataBit>
200000b4:	1e03      	subs	r3, r0, #0
200000b6:	d00a      	beq.n	200000ce <main+0x4c>
			{
				GPIO_ResetBits(GPIOA,GPIO_Pins[i+1]);
200000b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200000ba:	1c5a      	adds	r2, r3, #1
200000bc:	1d3b      	adds	r3, r7, #4
200000be:	0052      	lsls	r2, r2, #1
200000c0:	5ad3      	ldrh	r3, [r2, r3]
200000c2:	4a0c      	ldr	r2, [pc, #48]	; (200000f4 <main+0x72>)
200000c4:	0019      	movs	r1, r3
200000c6:	0010      	movs	r0, r2
200000c8:	f000 f9fe 	bl	200004c8 <GPIO_ResetBits>
200000cc:	e009      	b.n	200000e2 <main+0x60>
			}else{
				GPIO_SetBits(GPIOA,GPIO_Pins[i+1]);
200000ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200000d0:	1c5a      	adds	r2, r3, #1
200000d2:	1d3b      	adds	r3, r7, #4
200000d4:	0052      	lsls	r2, r2, #1
200000d6:	5ad3      	ldrh	r3, [r2, r3]
200000d8:	4a06      	ldr	r2, [pc, #24]	; (200000f4 <main+0x72>)
200000da:	0019      	movs	r1, r3
200000dc:	0010      	movs	r0, r2
200000de:	f000 f9e4 	bl	200004aa <GPIO_SetBits>
		for (int i = 0; i < sizeof(GPIO_Pins); i+=2)
200000e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200000e4:	3302      	adds	r3, #2
200000e6:	627b      	str	r3, [r7, #36]	; 0x24
200000e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200000ea:	2b1f      	cmp	r3, #31
200000ec:	d9d9      	bls.n	200000a2 <main+0x20>
200000ee:	e7d5      	b.n	2000009c <main+0x1a>
200000f0:	20001420 	andcs	r1, r0, r0, lsr #8
200000f4:	40020000 	andmi	r0, r2, r0

200000f8 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
200000f8:	b580      	push	{r7, lr}
200000fa:	b082      	sub	sp, #8
200000fc:	af00      	add	r7, sp, #0
200000fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
20000100:	687b      	ldr	r3, [r7, #4]
20000102:	4a4e      	ldr	r2, [pc, #312]	; (2000023c <GPIO_DeInit+0x144>)
20000104:	4293      	cmp	r3, r2
20000106:	d108      	bne.n	2000011a <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000108:	2101      	movs	r1, #1
2000010a:	2001      	movs	r0, #1
2000010c:	f000 feec 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20000110:	2100      	movs	r1, #0
20000112:	2001      	movs	r0, #1
20000114:	f000 fee8 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
20000118:	e08c      	b.n	20000234 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
2000011a:	687b      	ldr	r3, [r7, #4]
2000011c:	4a48      	ldr	r2, [pc, #288]	; (20000240 <GPIO_DeInit+0x148>)
2000011e:	4293      	cmp	r3, r2
20000120:	d108      	bne.n	20000134 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20000122:	2101      	movs	r1, #1
20000124:	2002      	movs	r0, #2
20000126:	f000 fedf 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
2000012a:	2100      	movs	r1, #0
2000012c:	2002      	movs	r0, #2
2000012e:	f000 fedb 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
}
20000132:	e07f      	b.n	20000234 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20000134:	687b      	ldr	r3, [r7, #4]
20000136:	4a43      	ldr	r2, [pc, #268]	; (20000244 <GPIO_DeInit+0x14c>)
20000138:	4293      	cmp	r3, r2
2000013a:	d108      	bne.n	2000014e <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
2000013c:	2101      	movs	r1, #1
2000013e:	2004      	movs	r0, #4
20000140:	f000 fed2 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20000144:	2100      	movs	r1, #0
20000146:	2004      	movs	r0, #4
20000148:	f000 fece 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
}
2000014c:	e072      	b.n	20000234 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
2000014e:	687b      	ldr	r3, [r7, #4]
20000150:	4a3d      	ldr	r2, [pc, #244]	; (20000248 <GPIO_DeInit+0x150>)
20000152:	4293      	cmp	r3, r2
20000154:	d108      	bne.n	20000168 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20000156:	2101      	movs	r1, #1
20000158:	2008      	movs	r0, #8
2000015a:	f000 fec5 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
2000015e:	2100      	movs	r1, #0
20000160:	2008      	movs	r0, #8
20000162:	f000 fec1 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
}
20000166:	e065      	b.n	20000234 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
20000168:	687b      	ldr	r3, [r7, #4]
2000016a:	4a38      	ldr	r2, [pc, #224]	; (2000024c <GPIO_DeInit+0x154>)
2000016c:	4293      	cmp	r3, r2
2000016e:	d108      	bne.n	20000182 <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000170:	2101      	movs	r1, #1
20000172:	2010      	movs	r0, #16
20000174:	f000 feb8 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20000178:	2100      	movs	r1, #0
2000017a:	2010      	movs	r0, #16
2000017c:	f000 feb4 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
}
20000180:	e058      	b.n	20000234 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
20000182:	687b      	ldr	r3, [r7, #4]
20000184:	4a32      	ldr	r2, [pc, #200]	; (20000250 <GPIO_DeInit+0x158>)
20000186:	4293      	cmp	r3, r2
20000188:	d108      	bne.n	2000019c <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
2000018a:	2101      	movs	r1, #1
2000018c:	2020      	movs	r0, #32
2000018e:	f000 feab 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20000192:	2100      	movs	r1, #0
20000194:	2020      	movs	r0, #32
20000196:	f000 fea7 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
}
2000019a:	e04b      	b.n	20000234 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
2000019c:	687b      	ldr	r3, [r7, #4]
2000019e:	4a2d      	ldr	r2, [pc, #180]	; (20000254 <GPIO_DeInit+0x15c>)
200001a0:	4293      	cmp	r3, r2
200001a2:	d108      	bne.n	200001b6 <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
200001a4:	2101      	movs	r1, #1
200001a6:	2040      	movs	r0, #64	; 0x40
200001a8:	f000 fe9e 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
200001ac:	2100      	movs	r1, #0
200001ae:	2040      	movs	r0, #64	; 0x40
200001b0:	f000 fe9a 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
}
200001b4:	e03e      	b.n	20000234 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
200001b6:	687b      	ldr	r3, [r7, #4]
200001b8:	4a27      	ldr	r2, [pc, #156]	; (20000258 <GPIO_DeInit+0x160>)
200001ba:	4293      	cmp	r3, r2
200001bc:	d108      	bne.n	200001d0 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
200001be:	2101      	movs	r1, #1
200001c0:	2080      	movs	r0, #128	; 0x80
200001c2:	f000 fe91 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
200001c6:	2100      	movs	r1, #0
200001c8:	2080      	movs	r0, #128	; 0x80
200001ca:	f000 fe8d 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
}
200001ce:	e031      	b.n	20000234 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
200001d0:	687b      	ldr	r3, [r7, #4]
200001d2:	4a22      	ldr	r2, [pc, #136]	; (2000025c <GPIO_DeInit+0x164>)
200001d4:	4293      	cmp	r3, r2
200001d6:	d10c      	bne.n	200001f2 <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
200001d8:	2380      	movs	r3, #128	; 0x80
200001da:	005b      	lsls	r3, r3, #1
200001dc:	2101      	movs	r1, #1
200001de:	0018      	movs	r0, r3
200001e0:	f000 fe82 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
200001e4:	2380      	movs	r3, #128	; 0x80
200001e6:	005b      	lsls	r3, r3, #1
200001e8:	2100      	movs	r1, #0
200001ea:	0018      	movs	r0, r3
200001ec:	f000 fe7c 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
}
200001f0:	e020      	b.n	20000234 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
200001f2:	687b      	ldr	r3, [r7, #4]
200001f4:	4a1a      	ldr	r2, [pc, #104]	; (20000260 <GPIO_DeInit+0x168>)
200001f6:	4293      	cmp	r3, r2
200001f8:	d10c      	bne.n	20000214 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
200001fa:	2380      	movs	r3, #128	; 0x80
200001fc:	009b      	lsls	r3, r3, #2
200001fe:	2101      	movs	r1, #1
20000200:	0018      	movs	r0, r3
20000202:	f000 fe71 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
20000206:	2380      	movs	r3, #128	; 0x80
20000208:	009b      	lsls	r3, r3, #2
2000020a:	2100      	movs	r1, #0
2000020c:	0018      	movs	r0, r3
2000020e:	f000 fe6b 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
}
20000212:	e00f      	b.n	20000234 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20000214:	687b      	ldr	r3, [r7, #4]
20000216:	4a13      	ldr	r2, [pc, #76]	; (20000264 <GPIO_DeInit+0x16c>)
20000218:	4293      	cmp	r3, r2
2000021a:	d10b      	bne.n	20000234 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
2000021c:	2380      	movs	r3, #128	; 0x80
2000021e:	00db      	lsls	r3, r3, #3
20000220:	2101      	movs	r1, #1
20000222:	0018      	movs	r0, r3
20000224:	f000 fe60 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20000228:	2380      	movs	r3, #128	; 0x80
2000022a:	00db      	lsls	r3, r3, #3
2000022c:	2100      	movs	r1, #0
2000022e:	0018      	movs	r0, r3
20000230:	f000 fe5a 	bl	20000ee8 <RCC_AHB1PeriphResetCmd>
}
20000234:	46c0      	nop			; (mov r8, r8)
20000236:	46bd      	mov	sp, r7
20000238:	b002      	add	sp, #8
2000023a:	bd80      	pop	{r7, pc}
2000023c:	40020000 	andmi	r0, r2, r0
20000240:	40020400 	andmi	r0, r2, r0, lsl #8
20000244:	40020800 	andmi	r0, r2, r0, lsl #16
20000248:	40020c00 	andmi	r0, r2, r0, lsl #24
2000024c:	40021000 	andmi	r1, r2, r0
20000250:	40021400 	andmi	r1, r2, r0, lsl #8
20000254:	40021800 	andmi	r1, r2, r0, lsl #16
20000258:	40021c00 	andmi	r1, r2, r0, lsl #24
2000025c:	40022000 	andmi	r2, r2, r0
20000260:	40022400 	andmi	r2, r2, r0, lsl #8
20000264:	40022800 	andmi	r2, r2, r0, lsl #16

20000268 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
20000268:	b580      	push	{r7, lr}
2000026a:	b086      	sub	sp, #24
2000026c:	af00      	add	r7, sp, #0
2000026e:	6078      	str	r0, [r7, #4]
20000270:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
20000272:	2300      	movs	r3, #0
20000274:	617b      	str	r3, [r7, #20]
20000276:	2300      	movs	r3, #0
20000278:	613b      	str	r3, [r7, #16]
2000027a:	2300      	movs	r3, #0
2000027c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
2000027e:	2300      	movs	r3, #0
20000280:	617b      	str	r3, [r7, #20]
20000282:	e076      	b.n	20000372 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20000284:	2201      	movs	r2, #1
20000286:	697b      	ldr	r3, [r7, #20]
20000288:	409a      	lsls	r2, r3
2000028a:	0013      	movs	r3, r2
2000028c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
2000028e:	683b      	ldr	r3, [r7, #0]
20000290:	681a      	ldr	r2, [r3, #0]
20000292:	693b      	ldr	r3, [r7, #16]
20000294:	4013      	ands	r3, r2
20000296:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20000298:	68fa      	ldr	r2, [r7, #12]
2000029a:	693b      	ldr	r3, [r7, #16]
2000029c:	429a      	cmp	r2, r3
2000029e:	d165      	bne.n	2000036c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
200002a0:	687b      	ldr	r3, [r7, #4]
200002a2:	681b      	ldr	r3, [r3, #0]
200002a4:	697a      	ldr	r2, [r7, #20]
200002a6:	0052      	lsls	r2, r2, #1
200002a8:	2103      	movs	r1, #3
200002aa:	4091      	lsls	r1, r2
200002ac:	000a      	movs	r2, r1
200002ae:	43d2      	mvns	r2, r2
200002b0:	401a      	ands	r2, r3
200002b2:	687b      	ldr	r3, [r7, #4]
200002b4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
200002b6:	687b      	ldr	r3, [r7, #4]
200002b8:	681a      	ldr	r2, [r3, #0]
200002ba:	683b      	ldr	r3, [r7, #0]
200002bc:	791b      	ldrb	r3, [r3, #4]
200002be:	0019      	movs	r1, r3
200002c0:	697b      	ldr	r3, [r7, #20]
200002c2:	005b      	lsls	r3, r3, #1
200002c4:	4099      	lsls	r1, r3
200002c6:	000b      	movs	r3, r1
200002c8:	431a      	orrs	r2, r3
200002ca:	687b      	ldr	r3, [r7, #4]
200002cc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
200002ce:	683b      	ldr	r3, [r7, #0]
200002d0:	791b      	ldrb	r3, [r3, #4]
200002d2:	2b01      	cmp	r3, #1
200002d4:	d003      	beq.n	200002de <GPIO_Init+0x76>
200002d6:	683b      	ldr	r3, [r7, #0]
200002d8:	791b      	ldrb	r3, [r3, #4]
200002da:	2b02      	cmp	r3, #2
200002dc:	d12e      	bne.n	2000033c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
200002de:	687b      	ldr	r3, [r7, #4]
200002e0:	689b      	ldr	r3, [r3, #8]
200002e2:	697a      	ldr	r2, [r7, #20]
200002e4:	0052      	lsls	r2, r2, #1
200002e6:	2103      	movs	r1, #3
200002e8:	4091      	lsls	r1, r2
200002ea:	000a      	movs	r2, r1
200002ec:	43d2      	mvns	r2, r2
200002ee:	401a      	ands	r2, r3
200002f0:	687b      	ldr	r3, [r7, #4]
200002f2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
200002f4:	687b      	ldr	r3, [r7, #4]
200002f6:	689a      	ldr	r2, [r3, #8]
200002f8:	683b      	ldr	r3, [r7, #0]
200002fa:	795b      	ldrb	r3, [r3, #5]
200002fc:	0019      	movs	r1, r3
200002fe:	697b      	ldr	r3, [r7, #20]
20000300:	005b      	lsls	r3, r3, #1
20000302:	4099      	lsls	r1, r3
20000304:	000b      	movs	r3, r1
20000306:	431a      	orrs	r2, r3
20000308:	687b      	ldr	r3, [r7, #4]
2000030a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
2000030c:	687b      	ldr	r3, [r7, #4]
2000030e:	685b      	ldr	r3, [r3, #4]
20000310:	697a      	ldr	r2, [r7, #20]
20000312:	b292      	uxth	r2, r2
20000314:	0011      	movs	r1, r2
20000316:	2201      	movs	r2, #1
20000318:	408a      	lsls	r2, r1
2000031a:	43d2      	mvns	r2, r2
2000031c:	401a      	ands	r2, r3
2000031e:	687b      	ldr	r3, [r7, #4]
20000320:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
20000322:	687b      	ldr	r3, [r7, #4]
20000324:	685b      	ldr	r3, [r3, #4]
20000326:	683a      	ldr	r2, [r7, #0]
20000328:	7992      	ldrb	r2, [r2, #6]
2000032a:	0011      	movs	r1, r2
2000032c:	697a      	ldr	r2, [r7, #20]
2000032e:	b292      	uxth	r2, r2
20000330:	4091      	lsls	r1, r2
20000332:	000a      	movs	r2, r1
20000334:	b292      	uxth	r2, r2
20000336:	431a      	orrs	r2, r3
20000338:	687b      	ldr	r3, [r7, #4]
2000033a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
2000033c:	687b      	ldr	r3, [r7, #4]
2000033e:	68db      	ldr	r3, [r3, #12]
20000340:	697a      	ldr	r2, [r7, #20]
20000342:	b292      	uxth	r2, r2
20000344:	0052      	lsls	r2, r2, #1
20000346:	2103      	movs	r1, #3
20000348:	4091      	lsls	r1, r2
2000034a:	000a      	movs	r2, r1
2000034c:	43d2      	mvns	r2, r2
2000034e:	401a      	ands	r2, r3
20000350:	687b      	ldr	r3, [r7, #4]
20000352:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20000354:	687b      	ldr	r3, [r7, #4]
20000356:	68da      	ldr	r2, [r3, #12]
20000358:	683b      	ldr	r3, [r7, #0]
2000035a:	79db      	ldrb	r3, [r3, #7]
2000035c:	0019      	movs	r1, r3
2000035e:	697b      	ldr	r3, [r7, #20]
20000360:	005b      	lsls	r3, r3, #1
20000362:	4099      	lsls	r1, r3
20000364:	000b      	movs	r3, r1
20000366:	431a      	orrs	r2, r3
20000368:	687b      	ldr	r3, [r7, #4]
2000036a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
2000036c:	697b      	ldr	r3, [r7, #20]
2000036e:	3301      	adds	r3, #1
20000370:	617b      	str	r3, [r7, #20]
20000372:	697b      	ldr	r3, [r7, #20]
20000374:	2b0f      	cmp	r3, #15
20000376:	d985      	bls.n	20000284 <GPIO_Init+0x1c>
    }
  }
}
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	46bd      	mov	sp, r7
2000037c:	b006      	add	sp, #24
2000037e:	bd80      	pop	{r7, pc}

20000380 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20000380:	b580      	push	{r7, lr}
20000382:	b082      	sub	sp, #8
20000384:	af00      	add	r7, sp, #0
20000386:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
20000388:	687b      	ldr	r3, [r7, #4]
2000038a:	4a09      	ldr	r2, [pc, #36]	; (200003b0 <GPIO_StructInit+0x30>)
2000038c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
2000038e:	687b      	ldr	r3, [r7, #4]
20000390:	2200      	movs	r2, #0
20000392:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20000394:	687b      	ldr	r3, [r7, #4]
20000396:	2200      	movs	r2, #0
20000398:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
2000039a:	687b      	ldr	r3, [r7, #4]
2000039c:	2200      	movs	r2, #0
2000039e:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
200003a0:	687b      	ldr	r3, [r7, #4]
200003a2:	2200      	movs	r2, #0
200003a4:	71da      	strb	r2, [r3, #7]
}
200003a6:	46c0      	nop			; (mov r8, r8)
200003a8:	46bd      	mov	sp, r7
200003aa:	b002      	add	sp, #8
200003ac:	bd80      	pop	{r7, pc}
200003ae:	46c0      	nop			; (mov r8, r8)
200003b0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

200003b4 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200003b4:	b580      	push	{r7, lr}
200003b6:	b084      	sub	sp, #16
200003b8:	af00      	add	r7, sp, #0
200003ba:	6078      	str	r0, [r7, #4]
200003bc:	000a      	movs	r2, r1
200003be:	1cbb      	adds	r3, r7, #2
200003c0:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
200003c2:	2380      	movs	r3, #128	; 0x80
200003c4:	025b      	lsls	r3, r3, #9
200003c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
200003c8:	1cbb      	adds	r3, r7, #2
200003ca:	881a      	ldrh	r2, [r3, #0]
200003cc:	68fb      	ldr	r3, [r7, #12]
200003ce:	4313      	orrs	r3, r2
200003d0:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200003d2:	68fa      	ldr	r2, [r7, #12]
200003d4:	687b      	ldr	r3, [r7, #4]
200003d6:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
200003d8:	1cbb      	adds	r3, r7, #2
200003da:	881a      	ldrh	r2, [r3, #0]
200003dc:	687b      	ldr	r3, [r7, #4]
200003de:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200003e0:	68fa      	ldr	r2, [r7, #12]
200003e2:	687b      	ldr	r3, [r7, #4]
200003e4:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200003e6:	687b      	ldr	r3, [r7, #4]
200003e8:	69db      	ldr	r3, [r3, #28]
200003ea:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200003ec:	687b      	ldr	r3, [r7, #4]
200003ee:	69db      	ldr	r3, [r3, #28]
200003f0:	60fb      	str	r3, [r7, #12]
}
200003f2:	46c0      	nop			; (mov r8, r8)
200003f4:	46bd      	mov	sp, r7
200003f6:	b004      	add	sp, #16
200003f8:	bd80      	pop	{r7, pc}

200003fa <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200003fa:	b580      	push	{r7, lr}
200003fc:	b084      	sub	sp, #16
200003fe:	af00      	add	r7, sp, #0
20000400:	6078      	str	r0, [r7, #4]
20000402:	000a      	movs	r2, r1
20000404:	1cbb      	adds	r3, r7, #2
20000406:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20000408:	230f      	movs	r3, #15
2000040a:	18fb      	adds	r3, r7, r3
2000040c:	2200      	movs	r2, #0
2000040e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20000410:	687b      	ldr	r3, [r7, #4]
20000412:	691b      	ldr	r3, [r3, #16]
20000414:	1cba      	adds	r2, r7, #2
20000416:	8812      	ldrh	r2, [r2, #0]
20000418:	4013      	ands	r3, r2
2000041a:	d004      	beq.n	20000426 <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
2000041c:	230f      	movs	r3, #15
2000041e:	18fb      	adds	r3, r7, r3
20000420:	2201      	movs	r2, #1
20000422:	701a      	strb	r2, [r3, #0]
20000424:	e003      	b.n	2000042e <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20000426:	230f      	movs	r3, #15
20000428:	18fb      	adds	r3, r7, r3
2000042a:	2200      	movs	r2, #0
2000042c:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
2000042e:	230f      	movs	r3, #15
20000430:	18fb      	adds	r3, r7, r3
20000432:	781b      	ldrb	r3, [r3, #0]
}
20000434:	0018      	movs	r0, r3
20000436:	46bd      	mov	sp, r7
20000438:	b004      	add	sp, #16
2000043a:	bd80      	pop	{r7, pc}

2000043c <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
2000043c:	b580      	push	{r7, lr}
2000043e:	b082      	sub	sp, #8
20000440:	af00      	add	r7, sp, #0
20000442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20000444:	687b      	ldr	r3, [r7, #4]
20000446:	691b      	ldr	r3, [r3, #16]
20000448:	b29b      	uxth	r3, r3
}
2000044a:	0018      	movs	r0, r3
2000044c:	46bd      	mov	sp, r7
2000044e:	b002      	add	sp, #8
20000450:	bd80      	pop	{r7, pc}

20000452 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20000452:	b580      	push	{r7, lr}
20000454:	b084      	sub	sp, #16
20000456:	af00      	add	r7, sp, #0
20000458:	6078      	str	r0, [r7, #4]
2000045a:	000a      	movs	r2, r1
2000045c:	1cbb      	adds	r3, r7, #2
2000045e:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20000460:	230f      	movs	r3, #15
20000462:	18fb      	adds	r3, r7, r3
20000464:	2200      	movs	r2, #0
20000466:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
20000468:	687b      	ldr	r3, [r7, #4]
2000046a:	695b      	ldr	r3, [r3, #20]
2000046c:	1cba      	adds	r2, r7, #2
2000046e:	8812      	ldrh	r2, [r2, #0]
20000470:	4013      	ands	r3, r2
20000472:	d004      	beq.n	2000047e <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20000474:	230f      	movs	r3, #15
20000476:	18fb      	adds	r3, r7, r3
20000478:	2201      	movs	r2, #1
2000047a:	701a      	strb	r2, [r3, #0]
2000047c:	e003      	b.n	20000486 <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
2000047e:	230f      	movs	r3, #15
20000480:	18fb      	adds	r3, r7, r3
20000482:	2200      	movs	r2, #0
20000484:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20000486:	230f      	movs	r3, #15
20000488:	18fb      	adds	r3, r7, r3
2000048a:	781b      	ldrb	r3, [r3, #0]
}
2000048c:	0018      	movs	r0, r3
2000048e:	46bd      	mov	sp, r7
20000490:	b004      	add	sp, #16
20000492:	bd80      	pop	{r7, pc}

20000494 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20000494:	b580      	push	{r7, lr}
20000496:	b082      	sub	sp, #8
20000498:	af00      	add	r7, sp, #0
2000049a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
2000049c:	687b      	ldr	r3, [r7, #4]
2000049e:	695b      	ldr	r3, [r3, #20]
200004a0:	b29b      	uxth	r3, r3
}
200004a2:	0018      	movs	r0, r3
200004a4:	46bd      	mov	sp, r7
200004a6:	b002      	add	sp, #8
200004a8:	bd80      	pop	{r7, pc}

200004aa <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200004aa:	b580      	push	{r7, lr}
200004ac:	b082      	sub	sp, #8
200004ae:	af00      	add	r7, sp, #0
200004b0:	6078      	str	r0, [r7, #4]
200004b2:	000a      	movs	r2, r1
200004b4:	1cbb      	adds	r3, r7, #2
200004b6:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
200004b8:	687b      	ldr	r3, [r7, #4]
200004ba:	1cba      	adds	r2, r7, #2
200004bc:	8812      	ldrh	r2, [r2, #0]
200004be:	831a      	strh	r2, [r3, #24]
}
200004c0:	46c0      	nop			; (mov r8, r8)
200004c2:	46bd      	mov	sp, r7
200004c4:	b002      	add	sp, #8
200004c6:	bd80      	pop	{r7, pc}

200004c8 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200004c8:	b580      	push	{r7, lr}
200004ca:	b082      	sub	sp, #8
200004cc:	af00      	add	r7, sp, #0
200004ce:	6078      	str	r0, [r7, #4]
200004d0:	000a      	movs	r2, r1
200004d2:	1cbb      	adds	r3, r7, #2
200004d4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
200004d6:	687b      	ldr	r3, [r7, #4]
200004d8:	1cba      	adds	r2, r7, #2
200004da:	8812      	ldrh	r2, [r2, #0]
200004dc:	835a      	strh	r2, [r3, #26]
}
200004de:	46c0      	nop			; (mov r8, r8)
200004e0:	46bd      	mov	sp, r7
200004e2:	b002      	add	sp, #8
200004e4:	bd80      	pop	{r7, pc}

200004e6 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
200004e6:	b580      	push	{r7, lr}
200004e8:	b082      	sub	sp, #8
200004ea:	af00      	add	r7, sp, #0
200004ec:	6078      	str	r0, [r7, #4]
200004ee:	0008      	movs	r0, r1
200004f0:	0011      	movs	r1, r2
200004f2:	1cbb      	adds	r3, r7, #2
200004f4:	1c02      	adds	r2, r0, #0
200004f6:	801a      	strh	r2, [r3, #0]
200004f8:	1c7b      	adds	r3, r7, #1
200004fa:	1c0a      	adds	r2, r1, #0
200004fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
200004fe:	1c7b      	adds	r3, r7, #1
20000500:	781b      	ldrb	r3, [r3, #0]
20000502:	2b00      	cmp	r3, #0
20000504:	d004      	beq.n	20000510 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
20000506:	687b      	ldr	r3, [r7, #4]
20000508:	1cba      	adds	r2, r7, #2
2000050a:	8812      	ldrh	r2, [r2, #0]
2000050c:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
2000050e:	e003      	b.n	20000518 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
20000510:	687b      	ldr	r3, [r7, #4]
20000512:	1cba      	adds	r2, r7, #2
20000514:	8812      	ldrh	r2, [r2, #0]
20000516:	835a      	strh	r2, [r3, #26]
}
20000518:	46c0      	nop			; (mov r8, r8)
2000051a:	46bd      	mov	sp, r7
2000051c:	b002      	add	sp, #8
2000051e:	bd80      	pop	{r7, pc}

20000520 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
20000520:	b580      	push	{r7, lr}
20000522:	b082      	sub	sp, #8
20000524:	af00      	add	r7, sp, #0
20000526:	6078      	str	r0, [r7, #4]
20000528:	000a      	movs	r2, r1
2000052a:	1cbb      	adds	r3, r7, #2
2000052c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
2000052e:	1cbb      	adds	r3, r7, #2
20000530:	881a      	ldrh	r2, [r3, #0]
20000532:	687b      	ldr	r3, [r7, #4]
20000534:	615a      	str	r2, [r3, #20]
}
20000536:	46c0      	nop			; (mov r8, r8)
20000538:	46bd      	mov	sp, r7
2000053a:	b002      	add	sp, #8
2000053c:	bd80      	pop	{r7, pc}

2000053e <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000053e:	b580      	push	{r7, lr}
20000540:	b082      	sub	sp, #8
20000542:	af00      	add	r7, sp, #0
20000544:	6078      	str	r0, [r7, #4]
20000546:	000a      	movs	r2, r1
20000548:	1cbb      	adds	r3, r7, #2
2000054a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
2000054c:	687b      	ldr	r3, [r7, #4]
2000054e:	695a      	ldr	r2, [r3, #20]
20000550:	1cbb      	adds	r3, r7, #2
20000552:	881b      	ldrh	r3, [r3, #0]
20000554:	405a      	eors	r2, r3
20000556:	687b      	ldr	r3, [r7, #4]
20000558:	615a      	str	r2, [r3, #20]
}
2000055a:	46c0      	nop			; (mov r8, r8)
2000055c:	46bd      	mov	sp, r7
2000055e:	b002      	add	sp, #8
20000560:	bd80      	pop	{r7, pc}

20000562 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
20000562:	b580      	push	{r7, lr}
20000564:	b084      	sub	sp, #16
20000566:	af00      	add	r7, sp, #0
20000568:	6078      	str	r0, [r7, #4]
2000056a:	0008      	movs	r0, r1
2000056c:	0011      	movs	r1, r2
2000056e:	1cbb      	adds	r3, r7, #2
20000570:	1c02      	adds	r2, r0, #0
20000572:	801a      	strh	r2, [r3, #0]
20000574:	1c7b      	adds	r3, r7, #1
20000576:	1c0a      	adds	r2, r1, #0
20000578:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
2000057a:	2300      	movs	r3, #0
2000057c:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
2000057e:	2300      	movs	r3, #0
20000580:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20000582:	1c7b      	adds	r3, r7, #1
20000584:	781a      	ldrb	r2, [r3, #0]
20000586:	1cbb      	adds	r3, r7, #2
20000588:	881b      	ldrh	r3, [r3, #0]
2000058a:	2107      	movs	r1, #7
2000058c:	400b      	ands	r3, r1
2000058e:	009b      	lsls	r3, r3, #2
20000590:	409a      	lsls	r2, r3
20000592:	0013      	movs	r3, r2
20000594:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20000596:	1cbb      	adds	r3, r7, #2
20000598:	881b      	ldrh	r3, [r3, #0]
2000059a:	08db      	lsrs	r3, r3, #3
2000059c:	b29b      	uxth	r3, r3
2000059e:	001a      	movs	r2, r3
200005a0:	687b      	ldr	r3, [r7, #4]
200005a2:	3208      	adds	r2, #8
200005a4:	0092      	lsls	r2, r2, #2
200005a6:	58d3      	ldr	r3, [r2, r3]
200005a8:	1cba      	adds	r2, r7, #2
200005aa:	8812      	ldrh	r2, [r2, #0]
200005ac:	2107      	movs	r1, #7
200005ae:	400a      	ands	r2, r1
200005b0:	0092      	lsls	r2, r2, #2
200005b2:	210f      	movs	r1, #15
200005b4:	4091      	lsls	r1, r2
200005b6:	000a      	movs	r2, r1
200005b8:	43d2      	mvns	r2, r2
200005ba:	1cb9      	adds	r1, r7, #2
200005bc:	8809      	ldrh	r1, [r1, #0]
200005be:	08c9      	lsrs	r1, r1, #3
200005c0:	b289      	uxth	r1, r1
200005c2:	0008      	movs	r0, r1
200005c4:	401a      	ands	r2, r3
200005c6:	0011      	movs	r1, r2
200005c8:	687b      	ldr	r3, [r7, #4]
200005ca:	0002      	movs	r2, r0
200005cc:	3208      	adds	r2, #8
200005ce:	0092      	lsls	r2, r2, #2
200005d0:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
200005d2:	1cbb      	adds	r3, r7, #2
200005d4:	881b      	ldrh	r3, [r3, #0]
200005d6:	08db      	lsrs	r3, r3, #3
200005d8:	b29b      	uxth	r3, r3
200005da:	001a      	movs	r2, r3
200005dc:	687b      	ldr	r3, [r7, #4]
200005de:	3208      	adds	r2, #8
200005e0:	0092      	lsls	r2, r2, #2
200005e2:	58d3      	ldr	r3, [r2, r3]
200005e4:	68fa      	ldr	r2, [r7, #12]
200005e6:	4313      	orrs	r3, r2
200005e8:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
200005ea:	1cbb      	adds	r3, r7, #2
200005ec:	881b      	ldrh	r3, [r3, #0]
200005ee:	08db      	lsrs	r3, r3, #3
200005f0:	b29b      	uxth	r3, r3
200005f2:	001a      	movs	r2, r3
200005f4:	687b      	ldr	r3, [r7, #4]
200005f6:	3208      	adds	r2, #8
200005f8:	0092      	lsls	r2, r2, #2
200005fa:	68b9      	ldr	r1, [r7, #8]
200005fc:	50d1      	str	r1, [r2, r3]
}
200005fe:	46c0      	nop			; (mov r8, r8)
20000600:	46bd      	mov	sp, r7
20000602:	b004      	add	sp, #16
20000604:	bd80      	pop	{r7, pc}
20000606:	46c0      	nop			; (mov r8, r8)

20000608 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
20000608:	b580      	push	{r7, lr}
2000060a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
2000060c:	4b14      	ldr	r3, [pc, #80]	; (20000660 <RCC_DeInit+0x58>)
2000060e:	681a      	ldr	r2, [r3, #0]
20000610:	4b13      	ldr	r3, [pc, #76]	; (20000660 <RCC_DeInit+0x58>)
20000612:	2101      	movs	r1, #1
20000614:	430a      	orrs	r2, r1
20000616:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20000618:	4b11      	ldr	r3, [pc, #68]	; (20000660 <RCC_DeInit+0x58>)
2000061a:	2200      	movs	r2, #0
2000061c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
2000061e:	4b10      	ldr	r3, [pc, #64]	; (20000660 <RCC_DeInit+0x58>)
20000620:	681a      	ldr	r2, [r3, #0]
20000622:	4b0f      	ldr	r3, [pc, #60]	; (20000660 <RCC_DeInit+0x58>)
20000624:	490f      	ldr	r1, [pc, #60]	; (20000664 <RCC_DeInit+0x5c>)
20000626:	400a      	ands	r2, r1
20000628:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
2000062a:	4b0d      	ldr	r3, [pc, #52]	; (20000660 <RCC_DeInit+0x58>)
2000062c:	4a0e      	ldr	r2, [pc, #56]	; (20000668 <RCC_DeInit+0x60>)
2000062e:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
20000630:	4a0b      	ldr	r2, [pc, #44]	; (20000660 <RCC_DeInit+0x58>)
20000632:	2384      	movs	r3, #132	; 0x84
20000634:	490d      	ldr	r1, [pc, #52]	; (2000066c <RCC_DeInit+0x64>)
20000636:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
20000638:	4a09      	ldr	r2, [pc, #36]	; (20000660 <RCC_DeInit+0x58>)
2000063a:	2388      	movs	r3, #136	; 0x88
2000063c:	490c      	ldr	r1, [pc, #48]	; (20000670 <RCC_DeInit+0x68>)
2000063e:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20000640:	4b07      	ldr	r3, [pc, #28]	; (20000660 <RCC_DeInit+0x58>)
20000642:	681a      	ldr	r2, [r3, #0]
20000644:	4b06      	ldr	r3, [pc, #24]	; (20000660 <RCC_DeInit+0x58>)
20000646:	490b      	ldr	r1, [pc, #44]	; (20000674 <RCC_DeInit+0x6c>)
20000648:	400a      	ands	r2, r1
2000064a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
2000064c:	4b04      	ldr	r3, [pc, #16]	; (20000660 <RCC_DeInit+0x58>)
2000064e:	2200      	movs	r2, #0
20000650:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20000652:	4a03      	ldr	r2, [pc, #12]	; (20000660 <RCC_DeInit+0x58>)
20000654:	238c      	movs	r3, #140	; 0x8c
20000656:	2100      	movs	r1, #0
20000658:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
2000065a:	46c0      	nop			; (mov r8, r8)
2000065c:	46bd      	mov	sp, r7
2000065e:	bd80      	pop	{r7, pc}
20000660:	40023800 	andmi	r3, r2, r0, lsl #16
20000664:	eaf6ffff 	b	1fdc0668 <startup-0x23f998>
20000668:	24003010 	strcs	r3, [r0], #-16
2000066c:	20003000 	andcs	r3, r0, r0
20000670:	24003000 	strcs	r3, [r0], #-0
20000674:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000678 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000678:	b580      	push	{r7, lr}
2000067a:	b082      	sub	sp, #8
2000067c:	af00      	add	r7, sp, #0
2000067e:	0002      	movs	r2, r0
20000680:	1dfb      	adds	r3, r7, #7
20000682:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20000684:	4b05      	ldr	r3, [pc, #20]	; (2000069c <RCC_HSEConfig+0x24>)
20000686:	2200      	movs	r2, #0
20000688:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
2000068a:	4a04      	ldr	r2, [pc, #16]	; (2000069c <RCC_HSEConfig+0x24>)
2000068c:	1dfb      	adds	r3, r7, #7
2000068e:	781b      	ldrb	r3, [r3, #0]
20000690:	7013      	strb	r3, [r2, #0]
}
20000692:	46c0      	nop			; (mov r8, r8)
20000694:	46bd      	mov	sp, r7
20000696:	b002      	add	sp, #8
20000698:	bd80      	pop	{r7, pc}
2000069a:	46c0      	nop			; (mov r8, r8)
2000069c:	40023802 	andmi	r3, r2, r2, lsl #16

200006a0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
200006a0:	b590      	push	{r4, r7, lr}
200006a2:	b083      	sub	sp, #12
200006a4:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
200006a6:	2300      	movs	r3, #0
200006a8:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
200006aa:	1dfb      	adds	r3, r7, #7
200006ac:	2200      	movs	r2, #0
200006ae:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
200006b0:	1dbb      	adds	r3, r7, #6
200006b2:	2200      	movs	r2, #0
200006b4:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
200006b6:	1dbc      	adds	r4, r7, #6
200006b8:	2031      	movs	r0, #49	; 0x31
200006ba:	f000 fd9b 	bl	200011f4 <RCC_GetFlagStatus>
200006be:	0003      	movs	r3, r0
200006c0:	7023      	strb	r3, [r4, #0]
    startupcounter++;
200006c2:	683b      	ldr	r3, [r7, #0]
200006c4:	3301      	adds	r3, #1
200006c6:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
200006c8:	683a      	ldr	r2, [r7, #0]
200006ca:	23a0      	movs	r3, #160	; 0xa0
200006cc:	01db      	lsls	r3, r3, #7
200006ce:	429a      	cmp	r2, r3
200006d0:	d003      	beq.n	200006da <RCC_WaitForHSEStartUp+0x3a>
200006d2:	1dbb      	adds	r3, r7, #6
200006d4:	781b      	ldrb	r3, [r3, #0]
200006d6:	2b00      	cmp	r3, #0
200006d8:	d0ed      	beq.n	200006b6 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
200006da:	2031      	movs	r0, #49	; 0x31
200006dc:	f000 fd8a 	bl	200011f4 <RCC_GetFlagStatus>
200006e0:	1e03      	subs	r3, r0, #0
200006e2:	d003      	beq.n	200006ec <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
200006e4:	1dfb      	adds	r3, r7, #7
200006e6:	2201      	movs	r2, #1
200006e8:	701a      	strb	r2, [r3, #0]
200006ea:	e002      	b.n	200006f2 <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
200006ec:	1dfb      	adds	r3, r7, #7
200006ee:	2200      	movs	r2, #0
200006f0:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200006f2:	1dfb      	adds	r3, r7, #7
200006f4:	781b      	ldrb	r3, [r3, #0]
}
200006f6:	0018      	movs	r0, r3
200006f8:	46bd      	mov	sp, r7
200006fa:	b003      	add	sp, #12
200006fc:	bd90      	pop	{r4, r7, pc}

200006fe <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
200006fe:	b580      	push	{r7, lr}
20000700:	b084      	sub	sp, #16
20000702:	af00      	add	r7, sp, #0
20000704:	0002      	movs	r2, r0
20000706:	1dfb      	adds	r3, r7, #7
20000708:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
2000070a:	2300      	movs	r3, #0
2000070c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
2000070e:	4b0a      	ldr	r3, [pc, #40]	; (20000738 <RCC_AdjustHSICalibrationValue+0x3a>)
20000710:	681b      	ldr	r3, [r3, #0]
20000712:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
20000714:	68fb      	ldr	r3, [r7, #12]
20000716:	22f8      	movs	r2, #248	; 0xf8
20000718:	4393      	bics	r3, r2
2000071a:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
2000071c:	1dfb      	adds	r3, r7, #7
2000071e:	781b      	ldrb	r3, [r3, #0]
20000720:	00db      	lsls	r3, r3, #3
20000722:	68fa      	ldr	r2, [r7, #12]
20000724:	4313      	orrs	r3, r2
20000726:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
20000728:	4b03      	ldr	r3, [pc, #12]	; (20000738 <RCC_AdjustHSICalibrationValue+0x3a>)
2000072a:	68fa      	ldr	r2, [r7, #12]
2000072c:	601a      	str	r2, [r3, #0]
}
2000072e:	46c0      	nop			; (mov r8, r8)
20000730:	46bd      	mov	sp, r7
20000732:	b004      	add	sp, #16
20000734:	bd80      	pop	{r7, pc}
20000736:	46c0      	nop			; (mov r8, r8)
20000738:	40023800 	andmi	r3, r2, r0, lsl #16

2000073c <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
2000073c:	b580      	push	{r7, lr}
2000073e:	b082      	sub	sp, #8
20000740:	af00      	add	r7, sp, #0
20000742:	0002      	movs	r2, r0
20000744:	1dfb      	adds	r3, r7, #7
20000746:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
20000748:	4b03      	ldr	r3, [pc, #12]	; (20000758 <RCC_HSICmd+0x1c>)
2000074a:	1dfa      	adds	r2, r7, #7
2000074c:	7812      	ldrb	r2, [r2, #0]
2000074e:	601a      	str	r2, [r3, #0]
}
20000750:	46c0      	nop			; (mov r8, r8)
20000752:	46bd      	mov	sp, r7
20000754:	b002      	add	sp, #8
20000756:	bd80      	pop	{r7, pc}
20000758:	42470000 	submi	r0, r7, #0

2000075c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
2000075c:	b580      	push	{r7, lr}
2000075e:	b082      	sub	sp, #8
20000760:	af00      	add	r7, sp, #0
20000762:	0002      	movs	r2, r0
20000764:	1dfb      	adds	r3, r7, #7
20000766:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000768:	4b0c      	ldr	r3, [pc, #48]	; (2000079c <RCC_LSEConfig+0x40>)
2000076a:	2200      	movs	r2, #0
2000076c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
2000076e:	4b0b      	ldr	r3, [pc, #44]	; (2000079c <RCC_LSEConfig+0x40>)
20000770:	2200      	movs	r2, #0
20000772:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20000774:	1dfb      	adds	r3, r7, #7
20000776:	781b      	ldrb	r3, [r3, #0]
20000778:	2b01      	cmp	r3, #1
2000077a:	d002      	beq.n	20000782 <RCC_LSEConfig+0x26>
2000077c:	2b04      	cmp	r3, #4
2000077e:	d004      	beq.n	2000078a <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000780:	e007      	b.n	20000792 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20000782:	4b06      	ldr	r3, [pc, #24]	; (2000079c <RCC_LSEConfig+0x40>)
20000784:	2201      	movs	r2, #1
20000786:	701a      	strb	r2, [r3, #0]
      break;
20000788:	e003      	b.n	20000792 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
2000078a:	4b04      	ldr	r3, [pc, #16]	; (2000079c <RCC_LSEConfig+0x40>)
2000078c:	2205      	movs	r2, #5
2000078e:	701a      	strb	r2, [r3, #0]
      break;
20000790:	46c0      	nop			; (mov r8, r8)
  }
}
20000792:	46c0      	nop			; (mov r8, r8)
20000794:	46bd      	mov	sp, r7
20000796:	b002      	add	sp, #8
20000798:	bd80      	pop	{r7, pc}
2000079a:	46c0      	nop			; (mov r8, r8)
2000079c:	40023870 	andmi	r3, r2, r0, ror r8

200007a0 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
200007a0:	b580      	push	{r7, lr}
200007a2:	b082      	sub	sp, #8
200007a4:	af00      	add	r7, sp, #0
200007a6:	0002      	movs	r2, r0
200007a8:	1dfb      	adds	r3, r7, #7
200007aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
200007ac:	4b03      	ldr	r3, [pc, #12]	; (200007bc <RCC_LSICmd+0x1c>)
200007ae:	1dfa      	adds	r2, r7, #7
200007b0:	7812      	ldrb	r2, [r2, #0]
200007b2:	601a      	str	r2, [r3, #0]
}
200007b4:	46c0      	nop			; (mov r8, r8)
200007b6:	46bd      	mov	sp, r7
200007b8:	b002      	add	sp, #8
200007ba:	bd80      	pop	{r7, pc}
200007bc:	42470e80 	submi	r0, r7, #128, 28	; 0x800

200007c0 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b084      	sub	sp, #16
200007c4:	af00      	add	r7, sp, #0
200007c6:	60f8      	str	r0, [r7, #12]
200007c8:	60b9      	str	r1, [r7, #8]
200007ca:	607a      	str	r2, [r7, #4]
200007cc:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200007ce:	687b      	ldr	r3, [r7, #4]
200007d0:	019a      	lsls	r2, r3, #6
200007d2:	68bb      	ldr	r3, [r7, #8]
200007d4:	431a      	orrs	r2, r3
200007d6:	683b      	ldr	r3, [r7, #0]
200007d8:	085b      	lsrs	r3, r3, #1
200007da:	3b01      	subs	r3, #1
200007dc:	041b      	lsls	r3, r3, #16
200007de:	431a      	orrs	r2, r3
200007e0:	68fb      	ldr	r3, [r7, #12]
200007e2:	431a      	orrs	r2, r3
200007e4:	0011      	movs	r1, r2
                 (PLLQ << 24);
200007e6:	69bb      	ldr	r3, [r7, #24]
200007e8:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200007ea:	4b03      	ldr	r3, [pc, #12]	; (200007f8 <RCC_PLLConfig+0x38>)
200007ec:	430a      	orrs	r2, r1
200007ee:	605a      	str	r2, [r3, #4]
}
200007f0:	46c0      	nop			; (mov r8, r8)
200007f2:	46bd      	mov	sp, r7
200007f4:	b004      	add	sp, #16
200007f6:	bd80      	pop	{r7, pc}
200007f8:	40023800 	andmi	r3, r2, r0, lsl #16

200007fc <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
200007fc:	b580      	push	{r7, lr}
200007fe:	b082      	sub	sp, #8
20000800:	af00      	add	r7, sp, #0
20000802:	0002      	movs	r2, r0
20000804:	1dfb      	adds	r3, r7, #7
20000806:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
20000808:	4b03      	ldr	r3, [pc, #12]	; (20000818 <RCC_PLLCmd+0x1c>)
2000080a:	1dfa      	adds	r2, r7, #7
2000080c:	7812      	ldrb	r2, [r2, #0]
2000080e:	601a      	str	r2, [r3, #0]
}
20000810:	46c0      	nop			; (mov r8, r8)
20000812:	46bd      	mov	sp, r7
20000814:	b002      	add	sp, #8
20000816:	bd80      	pop	{r7, pc}
20000818:	42470060 	submi	r0, r7, #96	; 0x60

2000081c <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
2000081c:	b580      	push	{r7, lr}
2000081e:	b082      	sub	sp, #8
20000820:	af00      	add	r7, sp, #0
20000822:	6078      	str	r0, [r7, #4]
20000824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
20000826:	687b      	ldr	r3, [r7, #4]
20000828:	019a      	lsls	r2, r3, #6
2000082a:	683b      	ldr	r3, [r7, #0]
2000082c:	071b      	lsls	r3, r3, #28
2000082e:	4904      	ldr	r1, [pc, #16]	; (20000840 <RCC_PLLI2SConfig+0x24>)
20000830:	4313      	orrs	r3, r2
20000832:	2284      	movs	r2, #132	; 0x84
20000834:	508b      	str	r3, [r1, r2]
}
20000836:	46c0      	nop			; (mov r8, r8)
20000838:	46bd      	mov	sp, r7
2000083a:	b002      	add	sp, #8
2000083c:	bd80      	pop	{r7, pc}
2000083e:	46c0      	nop			; (mov r8, r8)
20000840:	40023800 	andmi	r3, r2, r0, lsl #16

20000844 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
20000844:	b580      	push	{r7, lr}
20000846:	b082      	sub	sp, #8
20000848:	af00      	add	r7, sp, #0
2000084a:	0002      	movs	r2, r0
2000084c:	1dfb      	adds	r3, r7, #7
2000084e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000850:	4b03      	ldr	r3, [pc, #12]	; (20000860 <RCC_PLLI2SCmd+0x1c>)
20000852:	1dfa      	adds	r2, r7, #7
20000854:	7812      	ldrb	r2, [r2, #0]
20000856:	601a      	str	r2, [r3, #0]
}
20000858:	46c0      	nop			; (mov r8, r8)
2000085a:	46bd      	mov	sp, r7
2000085c:	b002      	add	sp, #8
2000085e:	bd80      	pop	{r7, pc}
20000860:	42470068 	submi	r0, r7, #104	; 0x68

20000864 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000864:	b580      	push	{r7, lr}
20000866:	b084      	sub	sp, #16
20000868:	af00      	add	r7, sp, #0
2000086a:	60f8      	str	r0, [r7, #12]
2000086c:	60b9      	str	r1, [r7, #8]
2000086e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000870:	68fb      	ldr	r3, [r7, #12]
20000872:	019a      	lsls	r2, r3, #6
20000874:	68bb      	ldr	r3, [r7, #8]
20000876:	061b      	lsls	r3, r3, #24
20000878:	431a      	orrs	r2, r3
2000087a:	687b      	ldr	r3, [r7, #4]
2000087c:	071b      	lsls	r3, r3, #28
2000087e:	4904      	ldr	r1, [pc, #16]	; (20000890 <RCC_PLLSAIConfig+0x2c>)
20000880:	4313      	orrs	r3, r2
20000882:	2288      	movs	r2, #136	; 0x88
20000884:	508b      	str	r3, [r1, r2]
}
20000886:	46c0      	nop			; (mov r8, r8)
20000888:	46bd      	mov	sp, r7
2000088a:	b004      	add	sp, #16
2000088c:	bd80      	pop	{r7, pc}
2000088e:	46c0      	nop			; (mov r8, r8)
20000890:	40023800 	andmi	r3, r2, r0, lsl #16

20000894 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20000894:	b580      	push	{r7, lr}
20000896:	b082      	sub	sp, #8
20000898:	af00      	add	r7, sp, #0
2000089a:	0002      	movs	r2, r0
2000089c:	1dfb      	adds	r3, r7, #7
2000089e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
200008a0:	4b03      	ldr	r3, [pc, #12]	; (200008b0 <RCC_PLLSAICmd+0x1c>)
200008a2:	1dfa      	adds	r2, r7, #7
200008a4:	7812      	ldrb	r2, [r2, #0]
200008a6:	601a      	str	r2, [r3, #0]
}
200008a8:	46c0      	nop			; (mov r8, r8)
200008aa:	46bd      	mov	sp, r7
200008ac:	b002      	add	sp, #8
200008ae:	bd80      	pop	{r7, pc}
200008b0:	42470070 	submi	r0, r7, #112	; 0x70

200008b4 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
200008b4:	b580      	push	{r7, lr}
200008b6:	b082      	sub	sp, #8
200008b8:	af00      	add	r7, sp, #0
200008ba:	0002      	movs	r2, r0
200008bc:	1dfb      	adds	r3, r7, #7
200008be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
200008c0:	4b03      	ldr	r3, [pc, #12]	; (200008d0 <RCC_ClockSecuritySystemCmd+0x1c>)
200008c2:	1dfa      	adds	r2, r7, #7
200008c4:	7812      	ldrb	r2, [r2, #0]
200008c6:	601a      	str	r2, [r3, #0]
}
200008c8:	46c0      	nop			; (mov r8, r8)
200008ca:	46bd      	mov	sp, r7
200008cc:	b002      	add	sp, #8
200008ce:	bd80      	pop	{r7, pc}
200008d0:	4247004c 	submi	r0, r7, #76	; 0x4c

200008d4 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
200008d4:	b580      	push	{r7, lr}
200008d6:	b084      	sub	sp, #16
200008d8:	af00      	add	r7, sp, #0
200008da:	6078      	str	r0, [r7, #4]
200008dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200008de:	2300      	movs	r3, #0
200008e0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
200008e2:	4b0a      	ldr	r3, [pc, #40]	; (2000090c <RCC_MCO1Config+0x38>)
200008e4:	689b      	ldr	r3, [r3, #8]
200008e6:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
200008e8:	68fb      	ldr	r3, [r7, #12]
200008ea:	4a09      	ldr	r2, [pc, #36]	; (20000910 <RCC_MCO1Config+0x3c>)
200008ec:	4013      	ands	r3, r2
200008ee:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200008f0:	687a      	ldr	r2, [r7, #4]
200008f2:	683b      	ldr	r3, [r7, #0]
200008f4:	4313      	orrs	r3, r2
200008f6:	68fa      	ldr	r2, [r7, #12]
200008f8:	4313      	orrs	r3, r2
200008fa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200008fc:	4b03      	ldr	r3, [pc, #12]	; (2000090c <RCC_MCO1Config+0x38>)
200008fe:	68fa      	ldr	r2, [r7, #12]
20000900:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
20000902:	46c0      	nop			; (mov r8, r8)
20000904:	46bd      	mov	sp, r7
20000906:	b004      	add	sp, #16
20000908:	bd80      	pop	{r7, pc}
2000090a:	46c0      	nop			; (mov r8, r8)
2000090c:	40023800 	andmi	r3, r2, r0, lsl #16
20000910:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

20000914 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
20000914:	b580      	push	{r7, lr}
20000916:	b084      	sub	sp, #16
20000918:	af00      	add	r7, sp, #0
2000091a:	6078      	str	r0, [r7, #4]
2000091c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
2000091e:	2300      	movs	r3, #0
20000920:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
20000922:	4b0a      	ldr	r3, [pc, #40]	; (2000094c <RCC_MCO2Config+0x38>)
20000924:	689b      	ldr	r3, [r3, #8]
20000926:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
20000928:	68fb      	ldr	r3, [r7, #12]
2000092a:	015b      	lsls	r3, r3, #5
2000092c:	095b      	lsrs	r3, r3, #5
2000092e:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
20000930:	687a      	ldr	r2, [r7, #4]
20000932:	683b      	ldr	r3, [r7, #0]
20000934:	4313      	orrs	r3, r2
20000936:	68fa      	ldr	r2, [r7, #12]
20000938:	4313      	orrs	r3, r2
2000093a:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
2000093c:	4b03      	ldr	r3, [pc, #12]	; (2000094c <RCC_MCO2Config+0x38>)
2000093e:	68fa      	ldr	r2, [r7, #12]
20000940:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
20000942:	46c0      	nop			; (mov r8, r8)
20000944:	46bd      	mov	sp, r7
20000946:	b004      	add	sp, #16
20000948:	bd80      	pop	{r7, pc}
2000094a:	46c0      	nop			; (mov r8, r8)
2000094c:	40023800 	andmi	r3, r2, r0, lsl #16

20000950 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000950:	b580      	push	{r7, lr}
20000952:	b084      	sub	sp, #16
20000954:	af00      	add	r7, sp, #0
20000956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000958:	2300      	movs	r3, #0
2000095a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
2000095c:	4b08      	ldr	r3, [pc, #32]	; (20000980 <RCC_SYSCLKConfig+0x30>)
2000095e:	689b      	ldr	r3, [r3, #8]
20000960:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000962:	68fb      	ldr	r3, [r7, #12]
20000964:	2203      	movs	r2, #3
20000966:	4393      	bics	r3, r2
20000968:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
2000096a:	68fa      	ldr	r2, [r7, #12]
2000096c:	687b      	ldr	r3, [r7, #4]
2000096e:	4313      	orrs	r3, r2
20000970:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000972:	4b03      	ldr	r3, [pc, #12]	; (20000980 <RCC_SYSCLKConfig+0x30>)
20000974:	68fa      	ldr	r2, [r7, #12]
20000976:	609a      	str	r2, [r3, #8]
}
20000978:	46c0      	nop			; (mov r8, r8)
2000097a:	46bd      	mov	sp, r7
2000097c:	b004      	add	sp, #16
2000097e:	bd80      	pop	{r7, pc}
20000980:	40023800 	andmi	r3, r2, r0, lsl #16

20000984 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000984:	b580      	push	{r7, lr}
20000986:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000988:	4b04      	ldr	r3, [pc, #16]	; (2000099c <RCC_GetSYSCLKSource+0x18>)
2000098a:	689b      	ldr	r3, [r3, #8]
2000098c:	b2db      	uxtb	r3, r3
2000098e:	220c      	movs	r2, #12
20000990:	4013      	ands	r3, r2
20000992:	b2db      	uxtb	r3, r3
}
20000994:	0018      	movs	r0, r3
20000996:	46bd      	mov	sp, r7
20000998:	bd80      	pop	{r7, pc}
2000099a:	46c0      	nop			; (mov r8, r8)
2000099c:	40023800 	andmi	r3, r2, r0, lsl #16

200009a0 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
200009a0:	b580      	push	{r7, lr}
200009a2:	b084      	sub	sp, #16
200009a4:	af00      	add	r7, sp, #0
200009a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200009a8:	2300      	movs	r3, #0
200009aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
200009ac:	4b08      	ldr	r3, [pc, #32]	; (200009d0 <RCC_HCLKConfig+0x30>)
200009ae:	689b      	ldr	r3, [r3, #8]
200009b0:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
200009b2:	68fb      	ldr	r3, [r7, #12]
200009b4:	22f0      	movs	r2, #240	; 0xf0
200009b6:	4393      	bics	r3, r2
200009b8:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
200009ba:	68fa      	ldr	r2, [r7, #12]
200009bc:	687b      	ldr	r3, [r7, #4]
200009be:	4313      	orrs	r3, r2
200009c0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200009c2:	4b03      	ldr	r3, [pc, #12]	; (200009d0 <RCC_HCLKConfig+0x30>)
200009c4:	68fa      	ldr	r2, [r7, #12]
200009c6:	609a      	str	r2, [r3, #8]
}
200009c8:	46c0      	nop			; (mov r8, r8)
200009ca:	46bd      	mov	sp, r7
200009cc:	b004      	add	sp, #16
200009ce:	bd80      	pop	{r7, pc}
200009d0:	40023800 	andmi	r3, r2, r0, lsl #16

200009d4 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
200009d4:	b580      	push	{r7, lr}
200009d6:	b084      	sub	sp, #16
200009d8:	af00      	add	r7, sp, #0
200009da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200009dc:	2300      	movs	r3, #0
200009de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200009e0:	4b08      	ldr	r3, [pc, #32]	; (20000a04 <RCC_PCLK1Config+0x30>)
200009e2:	689b      	ldr	r3, [r3, #8]
200009e4:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
200009e6:	68fb      	ldr	r3, [r7, #12]
200009e8:	4a07      	ldr	r2, [pc, #28]	; (20000a08 <RCC_PCLK1Config+0x34>)
200009ea:	4013      	ands	r3, r2
200009ec:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
200009ee:	68fa      	ldr	r2, [r7, #12]
200009f0:	687b      	ldr	r3, [r7, #4]
200009f2:	4313      	orrs	r3, r2
200009f4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200009f6:	4b03      	ldr	r3, [pc, #12]	; (20000a04 <RCC_PCLK1Config+0x30>)
200009f8:	68fa      	ldr	r2, [r7, #12]
200009fa:	609a      	str	r2, [r3, #8]
}
200009fc:	46c0      	nop			; (mov r8, r8)
200009fe:	46bd      	mov	sp, r7
20000a00:	b004      	add	sp, #16
20000a02:	bd80      	pop	{r7, pc}
20000a04:	40023800 	andmi	r3, r2, r0, lsl #16
20000a08:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

20000a0c <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
20000a0c:	b580      	push	{r7, lr}
20000a0e:	b084      	sub	sp, #16
20000a10:	af00      	add	r7, sp, #0
20000a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000a14:	2300      	movs	r3, #0
20000a16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000a18:	4b09      	ldr	r3, [pc, #36]	; (20000a40 <RCC_PCLK2Config+0x34>)
20000a1a:	689b      	ldr	r3, [r3, #8]
20000a1c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
20000a1e:	68fb      	ldr	r3, [r7, #12]
20000a20:	4a08      	ldr	r2, [pc, #32]	; (20000a44 <RCC_PCLK2Config+0x38>)
20000a22:	4013      	ands	r3, r2
20000a24:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
20000a26:	687b      	ldr	r3, [r7, #4]
20000a28:	00db      	lsls	r3, r3, #3
20000a2a:	68fa      	ldr	r2, [r7, #12]
20000a2c:	4313      	orrs	r3, r2
20000a2e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000a30:	4b03      	ldr	r3, [pc, #12]	; (20000a40 <RCC_PCLK2Config+0x34>)
20000a32:	68fa      	ldr	r2, [r7, #12]
20000a34:	609a      	str	r2, [r3, #8]
}
20000a36:	46c0      	nop			; (mov r8, r8)
20000a38:	46bd      	mov	sp, r7
20000a3a:	b004      	add	sp, #16
20000a3c:	bd80      	pop	{r7, pc}
20000a3e:	46c0      	nop			; (mov r8, r8)
20000a40:	40023800 	andmi	r3, r2, r0, lsl #16
20000a44:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

20000a48 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
20000a48:	b580      	push	{r7, lr}
20000a4a:	b088      	sub	sp, #32
20000a4c:	af00      	add	r7, sp, #0
20000a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000a50:	2300      	movs	r3, #0
20000a52:	61bb      	str	r3, [r7, #24]
20000a54:	2300      	movs	r3, #0
20000a56:	617b      	str	r3, [r7, #20]
20000a58:	2300      	movs	r3, #0
20000a5a:	61fb      	str	r3, [r7, #28]
20000a5c:	2302      	movs	r3, #2
20000a5e:	613b      	str	r3, [r7, #16]
20000a60:	2300      	movs	r3, #0
20000a62:	60fb      	str	r3, [r7, #12]
20000a64:	2302      	movs	r3, #2
20000a66:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000a68:	4b49      	ldr	r3, [pc, #292]	; (20000b90 <RCC_GetClocksFreq+0x148>)
20000a6a:	689b      	ldr	r3, [r3, #8]
20000a6c:	220c      	movs	r2, #12
20000a6e:	4013      	ands	r3, r2
20000a70:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000a72:	69bb      	ldr	r3, [r7, #24]
20000a74:	2b04      	cmp	r3, #4
20000a76:	d007      	beq.n	20000a88 <RCC_GetClocksFreq+0x40>
20000a78:	2b08      	cmp	r3, #8
20000a7a:	d009      	beq.n	20000a90 <RCC_GetClocksFreq+0x48>
20000a7c:	2b00      	cmp	r3, #0
20000a7e:	d141      	bne.n	20000b04 <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	4a44      	ldr	r2, [pc, #272]	; (20000b94 <RCC_GetClocksFreq+0x14c>)
20000a84:	601a      	str	r2, [r3, #0]
    break;
20000a86:	e041      	b.n	20000b0c <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000a88:	687b      	ldr	r3, [r7, #4]
20000a8a:	4a43      	ldr	r2, [pc, #268]	; (20000b98 <RCC_GetClocksFreq+0x150>)
20000a8c:	601a      	str	r2, [r3, #0]
    break;
20000a8e:	e03d      	b.n	20000b0c <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000a90:	4b3f      	ldr	r3, [pc, #252]	; (20000b90 <RCC_GetClocksFreq+0x148>)
20000a92:	685b      	ldr	r3, [r3, #4]
20000a94:	0d9b      	lsrs	r3, r3, #22
20000a96:	2201      	movs	r2, #1
20000a98:	4013      	ands	r3, r2
20000a9a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20000a9c:	4b3c      	ldr	r3, [pc, #240]	; (20000b90 <RCC_GetClocksFreq+0x148>)
20000a9e:	685b      	ldr	r3, [r3, #4]
20000aa0:	223f      	movs	r2, #63	; 0x3f
20000aa2:	4013      	ands	r3, r2
20000aa4:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000aa6:	68fb      	ldr	r3, [r7, #12]
20000aa8:	2b00      	cmp	r3, #0
20000aaa:	d00d      	beq.n	20000ac8 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
20000aac:	68b9      	ldr	r1, [r7, #8]
20000aae:	483a      	ldr	r0, [pc, #232]	; (20000b98 <RCC_GetClocksFreq+0x150>)
20000ab0:	f000 fc22 	bl	200012f8 <__udivsi3>
20000ab4:	0003      	movs	r3, r0
20000ab6:	001a      	movs	r2, r3
20000ab8:	4b35      	ldr	r3, [pc, #212]	; (20000b90 <RCC_GetClocksFreq+0x148>)
20000aba:	685b      	ldr	r3, [r3, #4]
20000abc:	099b      	lsrs	r3, r3, #6
20000abe:	05db      	lsls	r3, r3, #23
20000ac0:	0ddb      	lsrs	r3, r3, #23
20000ac2:	4353      	muls	r3, r2
20000ac4:	61fb      	str	r3, [r7, #28]
20000ac6:	e00c      	b.n	20000ae2 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000ac8:	68b9      	ldr	r1, [r7, #8]
20000aca:	4832      	ldr	r0, [pc, #200]	; (20000b94 <RCC_GetClocksFreq+0x14c>)
20000acc:	f000 fc14 	bl	200012f8 <__udivsi3>
20000ad0:	0003      	movs	r3, r0
20000ad2:	001a      	movs	r2, r3
20000ad4:	4b2e      	ldr	r3, [pc, #184]	; (20000b90 <RCC_GetClocksFreq+0x148>)
20000ad6:	685b      	ldr	r3, [r3, #4]
20000ad8:	099b      	lsrs	r3, r3, #6
20000ada:	05db      	lsls	r3, r3, #23
20000adc:	0ddb      	lsrs	r3, r3, #23
20000ade:	4353      	muls	r3, r2
20000ae0:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000ae2:	4b2b      	ldr	r3, [pc, #172]	; (20000b90 <RCC_GetClocksFreq+0x148>)
20000ae4:	685b      	ldr	r3, [r3, #4]
20000ae6:	0c1b      	lsrs	r3, r3, #16
20000ae8:	2203      	movs	r2, #3
20000aea:	4013      	ands	r3, r2
20000aec:	3301      	adds	r3, #1
20000aee:	005b      	lsls	r3, r3, #1
20000af0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
20000af2:	6939      	ldr	r1, [r7, #16]
20000af4:	69f8      	ldr	r0, [r7, #28]
20000af6:	f000 fbff 	bl	200012f8 <__udivsi3>
20000afa:	0003      	movs	r3, r0
20000afc:	001a      	movs	r2, r3
20000afe:	687b      	ldr	r3, [r7, #4]
20000b00:	601a      	str	r2, [r3, #0]
    break;
20000b02:	e003      	b.n	20000b0c <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000b04:	687b      	ldr	r3, [r7, #4]
20000b06:	4a23      	ldr	r2, [pc, #140]	; (20000b94 <RCC_GetClocksFreq+0x14c>)
20000b08:	601a      	str	r2, [r3, #0]
    break;
20000b0a:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
20000b0c:	4b20      	ldr	r3, [pc, #128]	; (20000b90 <RCC_GetClocksFreq+0x148>)
20000b0e:	689b      	ldr	r3, [r3, #8]
20000b10:	22f0      	movs	r2, #240	; 0xf0
20000b12:	4013      	ands	r3, r2
20000b14:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
20000b16:	69bb      	ldr	r3, [r7, #24]
20000b18:	091b      	lsrs	r3, r3, #4
20000b1a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000b1c:	4a1f      	ldr	r2, [pc, #124]	; (20000b9c <RCC_GetClocksFreq+0x154>)
20000b1e:	69bb      	ldr	r3, [r7, #24]
20000b20:	18d3      	adds	r3, r2, r3
20000b22:	781b      	ldrb	r3, [r3, #0]
20000b24:	b2db      	uxtb	r3, r3
20000b26:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
20000b28:	687b      	ldr	r3, [r7, #4]
20000b2a:	681a      	ldr	r2, [r3, #0]
20000b2c:	697b      	ldr	r3, [r7, #20]
20000b2e:	40da      	lsrs	r2, r3
20000b30:	687b      	ldr	r3, [r7, #4]
20000b32:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
20000b34:	4b16      	ldr	r3, [pc, #88]	; (20000b90 <RCC_GetClocksFreq+0x148>)
20000b36:	689a      	ldr	r2, [r3, #8]
20000b38:	23e0      	movs	r3, #224	; 0xe0
20000b3a:	015b      	lsls	r3, r3, #5
20000b3c:	4013      	ands	r3, r2
20000b3e:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
20000b40:	69bb      	ldr	r3, [r7, #24]
20000b42:	0a9b      	lsrs	r3, r3, #10
20000b44:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000b46:	4a15      	ldr	r2, [pc, #84]	; (20000b9c <RCC_GetClocksFreq+0x154>)
20000b48:	69bb      	ldr	r3, [r7, #24]
20000b4a:	18d3      	adds	r3, r2, r3
20000b4c:	781b      	ldrb	r3, [r3, #0]
20000b4e:	b2db      	uxtb	r3, r3
20000b50:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000b52:	687b      	ldr	r3, [r7, #4]
20000b54:	685a      	ldr	r2, [r3, #4]
20000b56:	697b      	ldr	r3, [r7, #20]
20000b58:	40da      	lsrs	r2, r3
20000b5a:	687b      	ldr	r3, [r7, #4]
20000b5c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
20000b5e:	4b0c      	ldr	r3, [pc, #48]	; (20000b90 <RCC_GetClocksFreq+0x148>)
20000b60:	689a      	ldr	r2, [r3, #8]
20000b62:	23e0      	movs	r3, #224	; 0xe0
20000b64:	021b      	lsls	r3, r3, #8
20000b66:	4013      	ands	r3, r2
20000b68:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
20000b6a:	69bb      	ldr	r3, [r7, #24]
20000b6c:	0b5b      	lsrs	r3, r3, #13
20000b6e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000b70:	4a0a      	ldr	r2, [pc, #40]	; (20000b9c <RCC_GetClocksFreq+0x154>)
20000b72:	69bb      	ldr	r3, [r7, #24]
20000b74:	18d3      	adds	r3, r2, r3
20000b76:	781b      	ldrb	r3, [r3, #0]
20000b78:	b2db      	uxtb	r3, r3
20000b7a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000b7c:	687b      	ldr	r3, [r7, #4]
20000b7e:	685a      	ldr	r2, [r3, #4]
20000b80:	697b      	ldr	r3, [r7, #20]
20000b82:	40da      	lsrs	r2, r3
20000b84:	687b      	ldr	r3, [r7, #4]
20000b86:	60da      	str	r2, [r3, #12]
}
20000b88:	46c0      	nop			; (mov r8, r8)
20000b8a:	46bd      	mov	sp, r7
20000b8c:	b008      	add	sp, #32
20000b8e:	bd80      	pop	{r7, pc}
20000b90:	40023800 	andmi	r3, r2, r0, lsl #16
20000b94:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000b98:	017d7840 	cmneq	sp, r0, asr #16
20000b9c:	20001410 	andcs	r1, r0, r0, lsl r4

20000ba0 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000ba0:	b580      	push	{r7, lr}
20000ba2:	b084      	sub	sp, #16
20000ba4:	af00      	add	r7, sp, #0
20000ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000ba8:	2300      	movs	r3, #0
20000baa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
20000bac:	687a      	ldr	r2, [r7, #4]
20000bae:	23c0      	movs	r3, #192	; 0xc0
20000bb0:	009b      	lsls	r3, r3, #2
20000bb2:	401a      	ands	r2, r3
20000bb4:	23c0      	movs	r3, #192	; 0xc0
20000bb6:	009b      	lsls	r3, r3, #2
20000bb8:	429a      	cmp	r2, r3
20000bba:	d10f      	bne.n	20000bdc <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
20000bbc:	4b0d      	ldr	r3, [pc, #52]	; (20000bf4 <RCC_RTCCLKConfig+0x54>)
20000bbe:	689b      	ldr	r3, [r3, #8]
20000bc0:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000bc2:	68fb      	ldr	r3, [r7, #12]
20000bc4:	4a0c      	ldr	r2, [pc, #48]	; (20000bf8 <RCC_RTCCLKConfig+0x58>)
20000bc6:	4013      	ands	r3, r2
20000bc8:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
20000bca:	687b      	ldr	r3, [r7, #4]
20000bcc:	4a0b      	ldr	r2, [pc, #44]	; (20000bfc <RCC_RTCCLKConfig+0x5c>)
20000bce:	4013      	ands	r3, r2
20000bd0:	68fa      	ldr	r2, [r7, #12]
20000bd2:	4313      	orrs	r3, r2
20000bd4:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000bd6:	4b07      	ldr	r3, [pc, #28]	; (20000bf4 <RCC_RTCCLKConfig+0x54>)
20000bd8:	68fa      	ldr	r2, [r7, #12]
20000bda:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
20000bdc:	4b05      	ldr	r3, [pc, #20]	; (20000bf4 <RCC_RTCCLKConfig+0x54>)
20000bde:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000be0:	687b      	ldr	r3, [r7, #4]
20000be2:	051b      	lsls	r3, r3, #20
20000be4:	0d1a      	lsrs	r2, r3, #20
20000be6:	4b03      	ldr	r3, [pc, #12]	; (20000bf4 <RCC_RTCCLKConfig+0x54>)
20000be8:	430a      	orrs	r2, r1
20000bea:	671a      	str	r2, [r3, #112]	; 0x70
}
20000bec:	46c0      	nop			; (mov r8, r8)
20000bee:	46bd      	mov	sp, r7
20000bf0:	b004      	add	sp, #16
20000bf2:	bd80      	pop	{r7, pc}
20000bf4:	40023800 	andmi	r3, r2, r0, lsl #16
20000bf8:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
20000bfc:	0ffffcff 	svceq	0x00fffcff

20000c00 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
20000c00:	b580      	push	{r7, lr}
20000c02:	b082      	sub	sp, #8
20000c04:	af00      	add	r7, sp, #0
20000c06:	0002      	movs	r2, r0
20000c08:	1dfb      	adds	r3, r7, #7
20000c0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
20000c0c:	4b03      	ldr	r3, [pc, #12]	; (20000c1c <RCC_RTCCLKCmd+0x1c>)
20000c0e:	1dfa      	adds	r2, r7, #7
20000c10:	7812      	ldrb	r2, [r2, #0]
20000c12:	601a      	str	r2, [r3, #0]
}
20000c14:	46c0      	nop			; (mov r8, r8)
20000c16:	46bd      	mov	sp, r7
20000c18:	b002      	add	sp, #8
20000c1a:	bd80      	pop	{r7, pc}
20000c1c:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

20000c20 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
20000c20:	b580      	push	{r7, lr}
20000c22:	b082      	sub	sp, #8
20000c24:	af00      	add	r7, sp, #0
20000c26:	0002      	movs	r2, r0
20000c28:	1dfb      	adds	r3, r7, #7
20000c2a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
20000c2c:	4b03      	ldr	r3, [pc, #12]	; (20000c3c <RCC_BackupResetCmd+0x1c>)
20000c2e:	1dfa      	adds	r2, r7, #7
20000c30:	7812      	ldrb	r2, [r2, #0]
20000c32:	601a      	str	r2, [r3, #0]
}
20000c34:	46c0      	nop			; (mov r8, r8)
20000c36:	46bd      	mov	sp, r7
20000c38:	b002      	add	sp, #8
20000c3a:	bd80      	pop	{r7, pc}
20000c3c:	42470e40 	submi	r0, r7, #64, 28	; 0x400

20000c40 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
20000c40:	b580      	push	{r7, lr}
20000c42:	b082      	sub	sp, #8
20000c44:	af00      	add	r7, sp, #0
20000c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
20000c48:	4b03      	ldr	r3, [pc, #12]	; (20000c58 <RCC_I2SCLKConfig+0x18>)
20000c4a:	687a      	ldr	r2, [r7, #4]
20000c4c:	601a      	str	r2, [r3, #0]
}
20000c4e:	46c0      	nop			; (mov r8, r8)
20000c50:	46bd      	mov	sp, r7
20000c52:	b002      	add	sp, #8
20000c54:	bd80      	pop	{r7, pc}
20000c56:	46c0      	nop			; (mov r8, r8)
20000c58:	4247015c 	submi	r0, r7, #92, 2

20000c5c <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
20000c5c:	b580      	push	{r7, lr}
20000c5e:	b084      	sub	sp, #16
20000c60:	af00      	add	r7, sp, #0
20000c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000c64:	2300      	movs	r3, #0
20000c66:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000c68:	4a09      	ldr	r2, [pc, #36]	; (20000c90 <RCC_SAIBlockACLKConfig+0x34>)
20000c6a:	238c      	movs	r3, #140	; 0x8c
20000c6c:	58d3      	ldr	r3, [r2, r3]
20000c6e:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000c70:	68fb      	ldr	r3, [r7, #12]
20000c72:	4a08      	ldr	r2, [pc, #32]	; (20000c94 <RCC_SAIBlockACLKConfig+0x38>)
20000c74:	4013      	ands	r3, r2
20000c76:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000c78:	68fa      	ldr	r2, [r7, #12]
20000c7a:	687b      	ldr	r3, [r7, #4]
20000c7c:	4313      	orrs	r3, r2
20000c7e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000c80:	4903      	ldr	r1, [pc, #12]	; (20000c90 <RCC_SAIBlockACLKConfig+0x34>)
20000c82:	228c      	movs	r2, #140	; 0x8c
20000c84:	68fb      	ldr	r3, [r7, #12]
20000c86:	508b      	str	r3, [r1, r2]
}
20000c88:	46c0      	nop			; (mov r8, r8)
20000c8a:	46bd      	mov	sp, r7
20000c8c:	b004      	add	sp, #16
20000c8e:	bd80      	pop	{r7, pc}
20000c90:	40023800 	andmi	r3, r2, r0, lsl #16
20000c94:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000c98 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000c98:	b580      	push	{r7, lr}
20000c9a:	b084      	sub	sp, #16
20000c9c:	af00      	add	r7, sp, #0
20000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000ca0:	2300      	movs	r3, #0
20000ca2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000ca4:	4a09      	ldr	r2, [pc, #36]	; (20000ccc <RCC_SAIBlockBCLKConfig+0x34>)
20000ca6:	238c      	movs	r3, #140	; 0x8c
20000ca8:	58d3      	ldr	r3, [r2, r3]
20000caa:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
20000cac:	68fb      	ldr	r3, [r7, #12]
20000cae:	4a08      	ldr	r2, [pc, #32]	; (20000cd0 <RCC_SAIBlockBCLKConfig+0x38>)
20000cb0:	4013      	ands	r3, r2
20000cb2:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000cb4:	68fa      	ldr	r2, [r7, #12]
20000cb6:	687b      	ldr	r3, [r7, #4]
20000cb8:	4313      	orrs	r3, r2
20000cba:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000cbc:	4903      	ldr	r1, [pc, #12]	; (20000ccc <RCC_SAIBlockBCLKConfig+0x34>)
20000cbe:	228c      	movs	r2, #140	; 0x8c
20000cc0:	68fb      	ldr	r3, [r7, #12]
20000cc2:	508b      	str	r3, [r1, r2]
}
20000cc4:	46c0      	nop			; (mov r8, r8)
20000cc6:	46bd      	mov	sp, r7
20000cc8:	b004      	add	sp, #16
20000cca:	bd80      	pop	{r7, pc}
20000ccc:	40023800 	andmi	r3, r2, r0, lsl #16
20000cd0:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000cd4 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000cd4:	b580      	push	{r7, lr}
20000cd6:	b084      	sub	sp, #16
20000cd8:	af00      	add	r7, sp, #0
20000cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000cdc:	2300      	movs	r3, #0
20000cde:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000ce0:	4a0a      	ldr	r2, [pc, #40]	; (20000d0c <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000ce2:	238c      	movs	r3, #140	; 0x8c
20000ce4:	58d3      	ldr	r3, [r2, r3]
20000ce6:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000ce8:	68fb      	ldr	r3, [r7, #12]
20000cea:	221f      	movs	r2, #31
20000cec:	4393      	bics	r3, r2
20000cee:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
20000cf0:	687b      	ldr	r3, [r7, #4]
20000cf2:	3b01      	subs	r3, #1
20000cf4:	68fa      	ldr	r2, [r7, #12]
20000cf6:	4313      	orrs	r3, r2
20000cf8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000cfa:	4904      	ldr	r1, [pc, #16]	; (20000d0c <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000cfc:	228c      	movs	r2, #140	; 0x8c
20000cfe:	68fb      	ldr	r3, [r7, #12]
20000d00:	508b      	str	r3, [r1, r2]
}
20000d02:	46c0      	nop			; (mov r8, r8)
20000d04:	46bd      	mov	sp, r7
20000d06:	b004      	add	sp, #16
20000d08:	bd80      	pop	{r7, pc}
20000d0a:	46c0      	nop			; (mov r8, r8)
20000d0c:	40023800 	andmi	r3, r2, r0, lsl #16

20000d10 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
20000d10:	b580      	push	{r7, lr}
20000d12:	b084      	sub	sp, #16
20000d14:	af00      	add	r7, sp, #0
20000d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000d18:	2300      	movs	r3, #0
20000d1a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000d1c:	4a0a      	ldr	r2, [pc, #40]	; (20000d48 <RCC_SAIPLLSAIClkDivConfig+0x38>)
20000d1e:	238c      	movs	r3, #140	; 0x8c
20000d20:	58d3      	ldr	r3, [r2, r3]
20000d22:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
20000d24:	68fb      	ldr	r3, [r7, #12]
20000d26:	4a09      	ldr	r2, [pc, #36]	; (20000d4c <RCC_SAIPLLSAIClkDivConfig+0x3c>)
20000d28:	4013      	ands	r3, r2
20000d2a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
20000d2c:	687b      	ldr	r3, [r7, #4]
20000d2e:	3b01      	subs	r3, #1
20000d30:	021b      	lsls	r3, r3, #8
20000d32:	68fa      	ldr	r2, [r7, #12]
20000d34:	4313      	orrs	r3, r2
20000d36:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000d38:	4903      	ldr	r1, [pc, #12]	; (20000d48 <RCC_SAIPLLSAIClkDivConfig+0x38>)
20000d3a:	228c      	movs	r2, #140	; 0x8c
20000d3c:	68fb      	ldr	r3, [r7, #12]
20000d3e:	508b      	str	r3, [r1, r2]
}
20000d40:	46c0      	nop			; (mov r8, r8)
20000d42:	46bd      	mov	sp, r7
20000d44:	b004      	add	sp, #16
20000d46:	bd80      	pop	{r7, pc}
20000d48:	40023800 	andmi	r3, r2, r0, lsl #16
20000d4c:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000d50 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000d50:	b580      	push	{r7, lr}
20000d52:	b084      	sub	sp, #16
20000d54:	af00      	add	r7, sp, #0
20000d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000d58:	2300      	movs	r3, #0
20000d5a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
20000d5c:	4a09      	ldr	r2, [pc, #36]	; (20000d84 <RCC_LTDCCLKDivConfig+0x34>)
20000d5e:	238c      	movs	r3, #140	; 0x8c
20000d60:	58d3      	ldr	r3, [r2, r3]
20000d62:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000d64:	68fb      	ldr	r3, [r7, #12]
20000d66:	4a08      	ldr	r2, [pc, #32]	; (20000d88 <RCC_LTDCCLKDivConfig+0x38>)
20000d68:	4013      	ands	r3, r2
20000d6a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
20000d6c:	68fa      	ldr	r2, [r7, #12]
20000d6e:	687b      	ldr	r3, [r7, #4]
20000d70:	4313      	orrs	r3, r2
20000d72:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000d74:	4903      	ldr	r1, [pc, #12]	; (20000d84 <RCC_LTDCCLKDivConfig+0x34>)
20000d76:	228c      	movs	r2, #140	; 0x8c
20000d78:	68fb      	ldr	r3, [r7, #12]
20000d7a:	508b      	str	r3, [r1, r2]
}
20000d7c:	46c0      	nop			; (mov r8, r8)
20000d7e:	46bd      	mov	sp, r7
20000d80:	b004      	add	sp, #16
20000d82:	bd80      	pop	{r7, pc}
20000d84:	40023800 	andmi	r3, r2, r0, lsl #16
20000d88:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

20000d8c <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
20000d8c:	b580      	push	{r7, lr}
20000d8e:	b082      	sub	sp, #8
20000d90:	af00      	add	r7, sp, #0
20000d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20000d94:	4b03      	ldr	r3, [pc, #12]	; (20000da4 <RCC_TIMCLKPresConfig+0x18>)
20000d96:	687a      	ldr	r2, [r7, #4]
20000d98:	601a      	str	r2, [r3, #0]
}
20000d9a:	46c0      	nop			; (mov r8, r8)
20000d9c:	46bd      	mov	sp, r7
20000d9e:	b002      	add	sp, #8
20000da0:	bd80      	pop	{r7, pc}
20000da2:	46c0      	nop			; (mov r8, r8)
20000da4:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20000da8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000da8:	b580      	push	{r7, lr}
20000daa:	b082      	sub	sp, #8
20000dac:	af00      	add	r7, sp, #0
20000dae:	6078      	str	r0, [r7, #4]
20000db0:	000a      	movs	r2, r1
20000db2:	1cfb      	adds	r3, r7, #3
20000db4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000db6:	1cfb      	adds	r3, r7, #3
20000db8:	781b      	ldrb	r3, [r3, #0]
20000dba:	2b00      	cmp	r3, #0
20000dbc:	d006      	beq.n	20000dcc <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
20000dbe:	4b09      	ldr	r3, [pc, #36]	; (20000de4 <RCC_AHB1PeriphClockCmd+0x3c>)
20000dc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
20000dc2:	4b08      	ldr	r3, [pc, #32]	; (20000de4 <RCC_AHB1PeriphClockCmd+0x3c>)
20000dc4:	687a      	ldr	r2, [r7, #4]
20000dc6:	430a      	orrs	r2, r1
20000dc8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
20000dca:	e006      	b.n	20000dda <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
20000dcc:	4b05      	ldr	r3, [pc, #20]	; (20000de4 <RCC_AHB1PeriphClockCmd+0x3c>)
20000dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000dd0:	687b      	ldr	r3, [r7, #4]
20000dd2:	43d9      	mvns	r1, r3
20000dd4:	4b03      	ldr	r3, [pc, #12]	; (20000de4 <RCC_AHB1PeriphClockCmd+0x3c>)
20000dd6:	400a      	ands	r2, r1
20000dd8:	631a      	str	r2, [r3, #48]	; 0x30
}
20000dda:	46c0      	nop			; (mov r8, r8)
20000ddc:	46bd      	mov	sp, r7
20000dde:	b002      	add	sp, #8
20000de0:	bd80      	pop	{r7, pc}
20000de2:	46c0      	nop			; (mov r8, r8)
20000de4:	40023800 	andmi	r3, r2, r0, lsl #16

20000de8 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000de8:	b580      	push	{r7, lr}
20000dea:	b082      	sub	sp, #8
20000dec:	af00      	add	r7, sp, #0
20000dee:	6078      	str	r0, [r7, #4]
20000df0:	000a      	movs	r2, r1
20000df2:	1cfb      	adds	r3, r7, #3
20000df4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000df6:	1cfb      	adds	r3, r7, #3
20000df8:	781b      	ldrb	r3, [r3, #0]
20000dfa:	2b00      	cmp	r3, #0
20000dfc:	d006      	beq.n	20000e0c <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
20000dfe:	4b09      	ldr	r3, [pc, #36]	; (20000e24 <RCC_AHB2PeriphClockCmd+0x3c>)
20000e00:	6b59      	ldr	r1, [r3, #52]	; 0x34
20000e02:	4b08      	ldr	r3, [pc, #32]	; (20000e24 <RCC_AHB2PeriphClockCmd+0x3c>)
20000e04:	687a      	ldr	r2, [r7, #4]
20000e06:	430a      	orrs	r2, r1
20000e08:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
20000e0a:	e006      	b.n	20000e1a <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
20000e0c:	4b05      	ldr	r3, [pc, #20]	; (20000e24 <RCC_AHB2PeriphClockCmd+0x3c>)
20000e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20000e10:	687b      	ldr	r3, [r7, #4]
20000e12:	43d9      	mvns	r1, r3
20000e14:	4b03      	ldr	r3, [pc, #12]	; (20000e24 <RCC_AHB2PeriphClockCmd+0x3c>)
20000e16:	400a      	ands	r2, r1
20000e18:	635a      	str	r2, [r3, #52]	; 0x34
}
20000e1a:	46c0      	nop			; (mov r8, r8)
20000e1c:	46bd      	mov	sp, r7
20000e1e:	b002      	add	sp, #8
20000e20:	bd80      	pop	{r7, pc}
20000e22:	46c0      	nop			; (mov r8, r8)
20000e24:	40023800 	andmi	r3, r2, r0, lsl #16

20000e28 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000e28:	b580      	push	{r7, lr}
20000e2a:	b082      	sub	sp, #8
20000e2c:	af00      	add	r7, sp, #0
20000e2e:	6078      	str	r0, [r7, #4]
20000e30:	000a      	movs	r2, r1
20000e32:	1cfb      	adds	r3, r7, #3
20000e34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000e36:	1cfb      	adds	r3, r7, #3
20000e38:	781b      	ldrb	r3, [r3, #0]
20000e3a:	2b00      	cmp	r3, #0
20000e3c:	d006      	beq.n	20000e4c <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
20000e3e:	4b09      	ldr	r3, [pc, #36]	; (20000e64 <RCC_AHB3PeriphClockCmd+0x3c>)
20000e40:	6b99      	ldr	r1, [r3, #56]	; 0x38
20000e42:	4b08      	ldr	r3, [pc, #32]	; (20000e64 <RCC_AHB3PeriphClockCmd+0x3c>)
20000e44:	687a      	ldr	r2, [r7, #4]
20000e46:	430a      	orrs	r2, r1
20000e48:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
20000e4a:	e006      	b.n	20000e5a <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
20000e4c:	4b05      	ldr	r3, [pc, #20]	; (20000e64 <RCC_AHB3PeriphClockCmd+0x3c>)
20000e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000e50:	687b      	ldr	r3, [r7, #4]
20000e52:	43d9      	mvns	r1, r3
20000e54:	4b03      	ldr	r3, [pc, #12]	; (20000e64 <RCC_AHB3PeriphClockCmd+0x3c>)
20000e56:	400a      	ands	r2, r1
20000e58:	639a      	str	r2, [r3, #56]	; 0x38
}
20000e5a:	46c0      	nop			; (mov r8, r8)
20000e5c:	46bd      	mov	sp, r7
20000e5e:	b002      	add	sp, #8
20000e60:	bd80      	pop	{r7, pc}
20000e62:	46c0      	nop			; (mov r8, r8)
20000e64:	40023800 	andmi	r3, r2, r0, lsl #16

20000e68 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000e68:	b580      	push	{r7, lr}
20000e6a:	b082      	sub	sp, #8
20000e6c:	af00      	add	r7, sp, #0
20000e6e:	6078      	str	r0, [r7, #4]
20000e70:	000a      	movs	r2, r1
20000e72:	1cfb      	adds	r3, r7, #3
20000e74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000e76:	1cfb      	adds	r3, r7, #3
20000e78:	781b      	ldrb	r3, [r3, #0]
20000e7a:	2b00      	cmp	r3, #0
20000e7c:	d006      	beq.n	20000e8c <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
20000e7e:	4b09      	ldr	r3, [pc, #36]	; (20000ea4 <RCC_APB1PeriphClockCmd+0x3c>)
20000e80:	6c19      	ldr	r1, [r3, #64]	; 0x40
20000e82:	4b08      	ldr	r3, [pc, #32]	; (20000ea4 <RCC_APB1PeriphClockCmd+0x3c>)
20000e84:	687a      	ldr	r2, [r7, #4]
20000e86:	430a      	orrs	r2, r1
20000e88:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
20000e8a:	e006      	b.n	20000e9a <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
20000e8c:	4b05      	ldr	r3, [pc, #20]	; (20000ea4 <RCC_APB1PeriphClockCmd+0x3c>)
20000e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000e90:	687b      	ldr	r3, [r7, #4]
20000e92:	43d9      	mvns	r1, r3
20000e94:	4b03      	ldr	r3, [pc, #12]	; (20000ea4 <RCC_APB1PeriphClockCmd+0x3c>)
20000e96:	400a      	ands	r2, r1
20000e98:	641a      	str	r2, [r3, #64]	; 0x40
}
20000e9a:	46c0      	nop			; (mov r8, r8)
20000e9c:	46bd      	mov	sp, r7
20000e9e:	b002      	add	sp, #8
20000ea0:	bd80      	pop	{r7, pc}
20000ea2:	46c0      	nop			; (mov r8, r8)
20000ea4:	40023800 	andmi	r3, r2, r0, lsl #16

20000ea8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000ea8:	b580      	push	{r7, lr}
20000eaa:	b082      	sub	sp, #8
20000eac:	af00      	add	r7, sp, #0
20000eae:	6078      	str	r0, [r7, #4]
20000eb0:	000a      	movs	r2, r1
20000eb2:	1cfb      	adds	r3, r7, #3
20000eb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000eb6:	1cfb      	adds	r3, r7, #3
20000eb8:	781b      	ldrb	r3, [r3, #0]
20000eba:	2b00      	cmp	r3, #0
20000ebc:	d006      	beq.n	20000ecc <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
20000ebe:	4b09      	ldr	r3, [pc, #36]	; (20000ee4 <RCC_APB2PeriphClockCmd+0x3c>)
20000ec0:	6c59      	ldr	r1, [r3, #68]	; 0x44
20000ec2:	4b08      	ldr	r3, [pc, #32]	; (20000ee4 <RCC_APB2PeriphClockCmd+0x3c>)
20000ec4:	687a      	ldr	r2, [r7, #4]
20000ec6:	430a      	orrs	r2, r1
20000ec8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
20000eca:	e006      	b.n	20000eda <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
20000ecc:	4b05      	ldr	r3, [pc, #20]	; (20000ee4 <RCC_APB2PeriphClockCmd+0x3c>)
20000ece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000ed0:	687b      	ldr	r3, [r7, #4]
20000ed2:	43d9      	mvns	r1, r3
20000ed4:	4b03      	ldr	r3, [pc, #12]	; (20000ee4 <RCC_APB2PeriphClockCmd+0x3c>)
20000ed6:	400a      	ands	r2, r1
20000ed8:	645a      	str	r2, [r3, #68]	; 0x44
}
20000eda:	46c0      	nop			; (mov r8, r8)
20000edc:	46bd      	mov	sp, r7
20000ede:	b002      	add	sp, #8
20000ee0:	bd80      	pop	{r7, pc}
20000ee2:	46c0      	nop			; (mov r8, r8)
20000ee4:	40023800 	andmi	r3, r2, r0, lsl #16

20000ee8 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000ee8:	b580      	push	{r7, lr}
20000eea:	b082      	sub	sp, #8
20000eec:	af00      	add	r7, sp, #0
20000eee:	6078      	str	r0, [r7, #4]
20000ef0:	000a      	movs	r2, r1
20000ef2:	1cfb      	adds	r3, r7, #3
20000ef4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000ef6:	1cfb      	adds	r3, r7, #3
20000ef8:	781b      	ldrb	r3, [r3, #0]
20000efa:	2b00      	cmp	r3, #0
20000efc:	d006      	beq.n	20000f0c <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
20000efe:	4b09      	ldr	r3, [pc, #36]	; (20000f24 <RCC_AHB1PeriphResetCmd+0x3c>)
20000f00:	6919      	ldr	r1, [r3, #16]
20000f02:	4b08      	ldr	r3, [pc, #32]	; (20000f24 <RCC_AHB1PeriphResetCmd+0x3c>)
20000f04:	687a      	ldr	r2, [r7, #4]
20000f06:	430a      	orrs	r2, r1
20000f08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
20000f0a:	e006      	b.n	20000f1a <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
20000f0c:	4b05      	ldr	r3, [pc, #20]	; (20000f24 <RCC_AHB1PeriphResetCmd+0x3c>)
20000f0e:	691a      	ldr	r2, [r3, #16]
20000f10:	687b      	ldr	r3, [r7, #4]
20000f12:	43d9      	mvns	r1, r3
20000f14:	4b03      	ldr	r3, [pc, #12]	; (20000f24 <RCC_AHB1PeriphResetCmd+0x3c>)
20000f16:	400a      	ands	r2, r1
20000f18:	611a      	str	r2, [r3, #16]
}
20000f1a:	46c0      	nop			; (mov r8, r8)
20000f1c:	46bd      	mov	sp, r7
20000f1e:	b002      	add	sp, #8
20000f20:	bd80      	pop	{r7, pc}
20000f22:	46c0      	nop			; (mov r8, r8)
20000f24:	40023800 	andmi	r3, r2, r0, lsl #16

20000f28 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000f28:	b580      	push	{r7, lr}
20000f2a:	b082      	sub	sp, #8
20000f2c:	af00      	add	r7, sp, #0
20000f2e:	6078      	str	r0, [r7, #4]
20000f30:	000a      	movs	r2, r1
20000f32:	1cfb      	adds	r3, r7, #3
20000f34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000f36:	1cfb      	adds	r3, r7, #3
20000f38:	781b      	ldrb	r3, [r3, #0]
20000f3a:	2b00      	cmp	r3, #0
20000f3c:	d006      	beq.n	20000f4c <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
20000f3e:	4b09      	ldr	r3, [pc, #36]	; (20000f64 <RCC_AHB2PeriphResetCmd+0x3c>)
20000f40:	6959      	ldr	r1, [r3, #20]
20000f42:	4b08      	ldr	r3, [pc, #32]	; (20000f64 <RCC_AHB2PeriphResetCmd+0x3c>)
20000f44:	687a      	ldr	r2, [r7, #4]
20000f46:	430a      	orrs	r2, r1
20000f48:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
20000f4a:	e006      	b.n	20000f5a <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
20000f4c:	4b05      	ldr	r3, [pc, #20]	; (20000f64 <RCC_AHB2PeriphResetCmd+0x3c>)
20000f4e:	695a      	ldr	r2, [r3, #20]
20000f50:	687b      	ldr	r3, [r7, #4]
20000f52:	43d9      	mvns	r1, r3
20000f54:	4b03      	ldr	r3, [pc, #12]	; (20000f64 <RCC_AHB2PeriphResetCmd+0x3c>)
20000f56:	400a      	ands	r2, r1
20000f58:	615a      	str	r2, [r3, #20]
}
20000f5a:	46c0      	nop			; (mov r8, r8)
20000f5c:	46bd      	mov	sp, r7
20000f5e:	b002      	add	sp, #8
20000f60:	bd80      	pop	{r7, pc}
20000f62:	46c0      	nop			; (mov r8, r8)
20000f64:	40023800 	andmi	r3, r2, r0, lsl #16

20000f68 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000f68:	b580      	push	{r7, lr}
20000f6a:	b082      	sub	sp, #8
20000f6c:	af00      	add	r7, sp, #0
20000f6e:	6078      	str	r0, [r7, #4]
20000f70:	000a      	movs	r2, r1
20000f72:	1cfb      	adds	r3, r7, #3
20000f74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000f76:	1cfb      	adds	r3, r7, #3
20000f78:	781b      	ldrb	r3, [r3, #0]
20000f7a:	2b00      	cmp	r3, #0
20000f7c:	d006      	beq.n	20000f8c <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000f7e:	4b09      	ldr	r3, [pc, #36]	; (20000fa4 <RCC_AHB3PeriphResetCmd+0x3c>)
20000f80:	6999      	ldr	r1, [r3, #24]
20000f82:	4b08      	ldr	r3, [pc, #32]	; (20000fa4 <RCC_AHB3PeriphResetCmd+0x3c>)
20000f84:	687a      	ldr	r2, [r7, #4]
20000f86:	430a      	orrs	r2, r1
20000f88:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000f8a:	e006      	b.n	20000f9a <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000f8c:	4b05      	ldr	r3, [pc, #20]	; (20000fa4 <RCC_AHB3PeriphResetCmd+0x3c>)
20000f8e:	699a      	ldr	r2, [r3, #24]
20000f90:	687b      	ldr	r3, [r7, #4]
20000f92:	43d9      	mvns	r1, r3
20000f94:	4b03      	ldr	r3, [pc, #12]	; (20000fa4 <RCC_AHB3PeriphResetCmd+0x3c>)
20000f96:	400a      	ands	r2, r1
20000f98:	619a      	str	r2, [r3, #24]
}
20000f9a:	46c0      	nop			; (mov r8, r8)
20000f9c:	46bd      	mov	sp, r7
20000f9e:	b002      	add	sp, #8
20000fa0:	bd80      	pop	{r7, pc}
20000fa2:	46c0      	nop			; (mov r8, r8)
20000fa4:	40023800 	andmi	r3, r2, r0, lsl #16

20000fa8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000fa8:	b580      	push	{r7, lr}
20000faa:	b082      	sub	sp, #8
20000fac:	af00      	add	r7, sp, #0
20000fae:	6078      	str	r0, [r7, #4]
20000fb0:	000a      	movs	r2, r1
20000fb2:	1cfb      	adds	r3, r7, #3
20000fb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000fb6:	1cfb      	adds	r3, r7, #3
20000fb8:	781b      	ldrb	r3, [r3, #0]
20000fba:	2b00      	cmp	r3, #0
20000fbc:	d006      	beq.n	20000fcc <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20000fbe:	4b09      	ldr	r3, [pc, #36]	; (20000fe4 <RCC_APB1PeriphResetCmd+0x3c>)
20000fc0:	6a19      	ldr	r1, [r3, #32]
20000fc2:	4b08      	ldr	r3, [pc, #32]	; (20000fe4 <RCC_APB1PeriphResetCmd+0x3c>)
20000fc4:	687a      	ldr	r2, [r7, #4]
20000fc6:	430a      	orrs	r2, r1
20000fc8:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20000fca:	e006      	b.n	20000fda <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20000fcc:	4b05      	ldr	r3, [pc, #20]	; (20000fe4 <RCC_APB1PeriphResetCmd+0x3c>)
20000fce:	6a1a      	ldr	r2, [r3, #32]
20000fd0:	687b      	ldr	r3, [r7, #4]
20000fd2:	43d9      	mvns	r1, r3
20000fd4:	4b03      	ldr	r3, [pc, #12]	; (20000fe4 <RCC_APB1PeriphResetCmd+0x3c>)
20000fd6:	400a      	ands	r2, r1
20000fd8:	621a      	str	r2, [r3, #32]
}
20000fda:	46c0      	nop			; (mov r8, r8)
20000fdc:	46bd      	mov	sp, r7
20000fde:	b002      	add	sp, #8
20000fe0:	bd80      	pop	{r7, pc}
20000fe2:	46c0      	nop			; (mov r8, r8)
20000fe4:	40023800 	andmi	r3, r2, r0, lsl #16

20000fe8 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000fe8:	b580      	push	{r7, lr}
20000fea:	b082      	sub	sp, #8
20000fec:	af00      	add	r7, sp, #0
20000fee:	6078      	str	r0, [r7, #4]
20000ff0:	000a      	movs	r2, r1
20000ff2:	1cfb      	adds	r3, r7, #3
20000ff4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ff6:	1cfb      	adds	r3, r7, #3
20000ff8:	781b      	ldrb	r3, [r3, #0]
20000ffa:	2b00      	cmp	r3, #0
20000ffc:	d006      	beq.n	2000100c <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000ffe:	4b09      	ldr	r3, [pc, #36]	; (20001024 <RCC_APB2PeriphResetCmd+0x3c>)
20001000:	6a59      	ldr	r1, [r3, #36]	; 0x24
20001002:	4b08      	ldr	r3, [pc, #32]	; (20001024 <RCC_APB2PeriphResetCmd+0x3c>)
20001004:	687a      	ldr	r2, [r7, #4]
20001006:	430a      	orrs	r2, r1
20001008:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
2000100a:	e006      	b.n	2000101a <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
2000100c:	4b05      	ldr	r3, [pc, #20]	; (20001024 <RCC_APB2PeriphResetCmd+0x3c>)
2000100e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20001010:	687b      	ldr	r3, [r7, #4]
20001012:	43d9      	mvns	r1, r3
20001014:	4b03      	ldr	r3, [pc, #12]	; (20001024 <RCC_APB2PeriphResetCmd+0x3c>)
20001016:	400a      	ands	r2, r1
20001018:	625a      	str	r2, [r3, #36]	; 0x24
}
2000101a:	46c0      	nop			; (mov r8, r8)
2000101c:	46bd      	mov	sp, r7
2000101e:	b002      	add	sp, #8
20001020:	bd80      	pop	{r7, pc}
20001022:	46c0      	nop			; (mov r8, r8)
20001024:	40023800 	andmi	r3, r2, r0, lsl #16

20001028 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20001028:	b580      	push	{r7, lr}
2000102a:	b082      	sub	sp, #8
2000102c:	af00      	add	r7, sp, #0
2000102e:	6078      	str	r0, [r7, #4]
20001030:	000a      	movs	r2, r1
20001032:	1cfb      	adds	r3, r7, #3
20001034:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20001036:	1cfb      	adds	r3, r7, #3
20001038:	781b      	ldrb	r3, [r3, #0]
2000103a:	2b00      	cmp	r3, #0
2000103c:	d006      	beq.n	2000104c <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
2000103e:	4b09      	ldr	r3, [pc, #36]	; (20001064 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20001040:	6d19      	ldr	r1, [r3, #80]	; 0x50
20001042:	4b08      	ldr	r3, [pc, #32]	; (20001064 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20001044:	687a      	ldr	r2, [r7, #4]
20001046:	430a      	orrs	r2, r1
20001048:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
2000104a:	e006      	b.n	2000105a <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
2000104c:	4b05      	ldr	r3, [pc, #20]	; (20001064 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
2000104e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20001050:	687b      	ldr	r3, [r7, #4]
20001052:	43d9      	mvns	r1, r3
20001054:	4b03      	ldr	r3, [pc, #12]	; (20001064 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20001056:	400a      	ands	r2, r1
20001058:	651a      	str	r2, [r3, #80]	; 0x50
}
2000105a:	46c0      	nop			; (mov r8, r8)
2000105c:	46bd      	mov	sp, r7
2000105e:	b002      	add	sp, #8
20001060:	bd80      	pop	{r7, pc}
20001062:	46c0      	nop			; (mov r8, r8)
20001064:	40023800 	andmi	r3, r2, r0, lsl #16

20001068 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20001068:	b580      	push	{r7, lr}
2000106a:	b082      	sub	sp, #8
2000106c:	af00      	add	r7, sp, #0
2000106e:	6078      	str	r0, [r7, #4]
20001070:	000a      	movs	r2, r1
20001072:	1cfb      	adds	r3, r7, #3
20001074:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20001076:	1cfb      	adds	r3, r7, #3
20001078:	781b      	ldrb	r3, [r3, #0]
2000107a:	2b00      	cmp	r3, #0
2000107c:	d006      	beq.n	2000108c <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
2000107e:	4b09      	ldr	r3, [pc, #36]	; (200010a4 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20001080:	6d59      	ldr	r1, [r3, #84]	; 0x54
20001082:	4b08      	ldr	r3, [pc, #32]	; (200010a4 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20001084:	687a      	ldr	r2, [r7, #4]
20001086:	430a      	orrs	r2, r1
20001088:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
2000108a:	e006      	b.n	2000109a <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
2000108c:	4b05      	ldr	r3, [pc, #20]	; (200010a4 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
2000108e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20001090:	687b      	ldr	r3, [r7, #4]
20001092:	43d9      	mvns	r1, r3
20001094:	4b03      	ldr	r3, [pc, #12]	; (200010a4 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20001096:	400a      	ands	r2, r1
20001098:	655a      	str	r2, [r3, #84]	; 0x54
}
2000109a:	46c0      	nop			; (mov r8, r8)
2000109c:	46bd      	mov	sp, r7
2000109e:	b002      	add	sp, #8
200010a0:	bd80      	pop	{r7, pc}
200010a2:	46c0      	nop			; (mov r8, r8)
200010a4:	40023800 	andmi	r3, r2, r0, lsl #16

200010a8 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200010a8:	b580      	push	{r7, lr}
200010aa:	b082      	sub	sp, #8
200010ac:	af00      	add	r7, sp, #0
200010ae:	6078      	str	r0, [r7, #4]
200010b0:	000a      	movs	r2, r1
200010b2:	1cfb      	adds	r3, r7, #3
200010b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200010b6:	1cfb      	adds	r3, r7, #3
200010b8:	781b      	ldrb	r3, [r3, #0]
200010ba:	2b00      	cmp	r3, #0
200010bc:	d006      	beq.n	200010cc <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
200010be:	4b09      	ldr	r3, [pc, #36]	; (200010e4 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200010c0:	6d99      	ldr	r1, [r3, #88]	; 0x58
200010c2:	4b08      	ldr	r3, [pc, #32]	; (200010e4 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200010c4:	687a      	ldr	r2, [r7, #4]
200010c6:	430a      	orrs	r2, r1
200010c8:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
200010ca:	e006      	b.n	200010da <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
200010cc:	4b05      	ldr	r3, [pc, #20]	; (200010e4 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200010ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
200010d0:	687b      	ldr	r3, [r7, #4]
200010d2:	43d9      	mvns	r1, r3
200010d4:	4b03      	ldr	r3, [pc, #12]	; (200010e4 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200010d6:	400a      	ands	r2, r1
200010d8:	659a      	str	r2, [r3, #88]	; 0x58
}
200010da:	46c0      	nop			; (mov r8, r8)
200010dc:	46bd      	mov	sp, r7
200010de:	b002      	add	sp, #8
200010e0:	bd80      	pop	{r7, pc}
200010e2:	46c0      	nop			; (mov r8, r8)
200010e4:	40023800 	andmi	r3, r2, r0, lsl #16

200010e8 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
200010e8:	b580      	push	{r7, lr}
200010ea:	b082      	sub	sp, #8
200010ec:	af00      	add	r7, sp, #0
200010ee:	6078      	str	r0, [r7, #4]
200010f0:	000a      	movs	r2, r1
200010f2:	1cfb      	adds	r3, r7, #3
200010f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200010f6:	1cfb      	adds	r3, r7, #3
200010f8:	781b      	ldrb	r3, [r3, #0]
200010fa:	2b00      	cmp	r3, #0
200010fc:	d006      	beq.n	2000110c <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
200010fe:	4b09      	ldr	r3, [pc, #36]	; (20001124 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20001100:	6e19      	ldr	r1, [r3, #96]	; 0x60
20001102:	4b08      	ldr	r3, [pc, #32]	; (20001124 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20001104:	687a      	ldr	r2, [r7, #4]
20001106:	430a      	orrs	r2, r1
20001108:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
2000110a:	e006      	b.n	2000111a <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
2000110c:	4b05      	ldr	r3, [pc, #20]	; (20001124 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
2000110e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20001110:	687b      	ldr	r3, [r7, #4]
20001112:	43d9      	mvns	r1, r3
20001114:	4b03      	ldr	r3, [pc, #12]	; (20001124 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20001116:	400a      	ands	r2, r1
20001118:	661a      	str	r2, [r3, #96]	; 0x60
}
2000111a:	46c0      	nop			; (mov r8, r8)
2000111c:	46bd      	mov	sp, r7
2000111e:	b002      	add	sp, #8
20001120:	bd80      	pop	{r7, pc}
20001122:	46c0      	nop			; (mov r8, r8)
20001124:	40023800 	andmi	r3, r2, r0, lsl #16

20001128 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20001128:	b580      	push	{r7, lr}
2000112a:	b082      	sub	sp, #8
2000112c:	af00      	add	r7, sp, #0
2000112e:	6078      	str	r0, [r7, #4]
20001130:	000a      	movs	r2, r1
20001132:	1cfb      	adds	r3, r7, #3
20001134:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20001136:	1cfb      	adds	r3, r7, #3
20001138:	781b      	ldrb	r3, [r3, #0]
2000113a:	2b00      	cmp	r3, #0
2000113c:	d006      	beq.n	2000114c <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
2000113e:	4b09      	ldr	r3, [pc, #36]	; (20001164 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20001140:	6e59      	ldr	r1, [r3, #100]	; 0x64
20001142:	4b08      	ldr	r3, [pc, #32]	; (20001164 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20001144:	687a      	ldr	r2, [r7, #4]
20001146:	430a      	orrs	r2, r1
20001148:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
2000114a:	e006      	b.n	2000115a <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
2000114c:	4b05      	ldr	r3, [pc, #20]	; (20001164 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
2000114e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20001150:	687b      	ldr	r3, [r7, #4]
20001152:	43d9      	mvns	r1, r3
20001154:	4b03      	ldr	r3, [pc, #12]	; (20001164 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20001156:	400a      	ands	r2, r1
20001158:	665a      	str	r2, [r3, #100]	; 0x64
}
2000115a:	46c0      	nop			; (mov r8, r8)
2000115c:	46bd      	mov	sp, r7
2000115e:	b002      	add	sp, #8
20001160:	bd80      	pop	{r7, pc}
20001162:	46c0      	nop			; (mov r8, r8)
20001164:	40023800 	andmi	r3, r2, r0, lsl #16

20001168 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20001168:	b580      	push	{r7, lr}
2000116a:	b082      	sub	sp, #8
2000116c:	af00      	add	r7, sp, #0
2000116e:	0002      	movs	r2, r0
20001170:	1dfb      	adds	r3, r7, #7
20001172:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20001174:	1dfb      	adds	r3, r7, #7
20001176:	781b      	ldrb	r3, [r3, #0]
20001178:	2b01      	cmp	r3, #1
2000117a:	d106      	bne.n	2000118a <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2000117c:	4b08      	ldr	r3, [pc, #32]	; (200011a0 <RCC_LSEModeConfig+0x38>)
2000117e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20001180:	4b07      	ldr	r3, [pc, #28]	; (200011a0 <RCC_LSEModeConfig+0x38>)
20001182:	2108      	movs	r1, #8
20001184:	430a      	orrs	r2, r1
20001186:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20001188:	e005      	b.n	20001196 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2000118a:	4b05      	ldr	r3, [pc, #20]	; (200011a0 <RCC_LSEModeConfig+0x38>)
2000118c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2000118e:	4b04      	ldr	r3, [pc, #16]	; (200011a0 <RCC_LSEModeConfig+0x38>)
20001190:	2108      	movs	r1, #8
20001192:	438a      	bics	r2, r1
20001194:	671a      	str	r2, [r3, #112]	; 0x70
}
20001196:	46c0      	nop			; (mov r8, r8)
20001198:	46bd      	mov	sp, r7
2000119a:	b002      	add	sp, #8
2000119c:	bd80      	pop	{r7, pc}
2000119e:	46c0      	nop			; (mov r8, r8)
200011a0:	40023800 	andmi	r3, r2, r0, lsl #16

200011a4 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
200011a4:	b580      	push	{r7, lr}
200011a6:	b082      	sub	sp, #8
200011a8:	af00      	add	r7, sp, #0
200011aa:	0002      	movs	r2, r0
200011ac:	1dfb      	adds	r3, r7, #7
200011ae:	701a      	strb	r2, [r3, #0]
200011b0:	1dbb      	adds	r3, r7, #6
200011b2:	1c0a      	adds	r2, r1, #0
200011b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200011b6:	1dbb      	adds	r3, r7, #6
200011b8:	781b      	ldrb	r3, [r3, #0]
200011ba:	2b00      	cmp	r3, #0
200011bc:	d009      	beq.n	200011d2 <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
200011be:	4b0c      	ldr	r3, [pc, #48]	; (200011f0 <RCC_ITConfig+0x4c>)
200011c0:	781b      	ldrb	r3, [r3, #0]
200011c2:	b2da      	uxtb	r2, r3
200011c4:	490a      	ldr	r1, [pc, #40]	; (200011f0 <RCC_ITConfig+0x4c>)
200011c6:	1dfb      	adds	r3, r7, #7
200011c8:	781b      	ldrb	r3, [r3, #0]
200011ca:	4313      	orrs	r3, r2
200011cc:	b2db      	uxtb	r3, r3
200011ce:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
200011d0:	e00a      	b.n	200011e8 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
200011d2:	4b07      	ldr	r3, [pc, #28]	; (200011f0 <RCC_ITConfig+0x4c>)
200011d4:	781b      	ldrb	r3, [r3, #0]
200011d6:	b2db      	uxtb	r3, r3
200011d8:	1dfa      	adds	r2, r7, #7
200011da:	7812      	ldrb	r2, [r2, #0]
200011dc:	43d2      	mvns	r2, r2
200011de:	b2d2      	uxtb	r2, r2
200011e0:	4903      	ldr	r1, [pc, #12]	; (200011f0 <RCC_ITConfig+0x4c>)
200011e2:	4013      	ands	r3, r2
200011e4:	b2db      	uxtb	r3, r3
200011e6:	700b      	strb	r3, [r1, #0]
}
200011e8:	46c0      	nop			; (mov r8, r8)
200011ea:	46bd      	mov	sp, r7
200011ec:	b002      	add	sp, #8
200011ee:	bd80      	pop	{r7, pc}
200011f0:	4002380d 	andmi	r3, r2, sp, lsl #16

200011f4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
200011f4:	b580      	push	{r7, lr}
200011f6:	b086      	sub	sp, #24
200011f8:	af00      	add	r7, sp, #0
200011fa:	0002      	movs	r2, r0
200011fc:	1dfb      	adds	r3, r7, #7
200011fe:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20001200:	2300      	movs	r3, #0
20001202:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20001204:	2300      	movs	r3, #0
20001206:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20001208:	2313      	movs	r3, #19
2000120a:	18fb      	adds	r3, r7, r3
2000120c:	2200      	movs	r2, #0
2000120e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20001210:	1dfb      	adds	r3, r7, #7
20001212:	781b      	ldrb	r3, [r3, #0]
20001214:	095b      	lsrs	r3, r3, #5
20001216:	b2db      	uxtb	r3, r3
20001218:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
2000121a:	68fb      	ldr	r3, [r7, #12]
2000121c:	2b01      	cmp	r3, #1
2000121e:	d103      	bne.n	20001228 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20001220:	4b14      	ldr	r3, [pc, #80]	; (20001274 <RCC_GetFlagStatus+0x80>)
20001222:	681b      	ldr	r3, [r3, #0]
20001224:	617b      	str	r3, [r7, #20]
20001226:	e009      	b.n	2000123c <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20001228:	68fb      	ldr	r3, [r7, #12]
2000122a:	2b02      	cmp	r3, #2
2000122c:	d103      	bne.n	20001236 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
2000122e:	4b11      	ldr	r3, [pc, #68]	; (20001274 <RCC_GetFlagStatus+0x80>)
20001230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20001232:	617b      	str	r3, [r7, #20]
20001234:	e002      	b.n	2000123c <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20001236:	4b0f      	ldr	r3, [pc, #60]	; (20001274 <RCC_GetFlagStatus+0x80>)
20001238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000123a:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
2000123c:	1dfb      	adds	r3, r7, #7
2000123e:	781b      	ldrb	r3, [r3, #0]
20001240:	221f      	movs	r2, #31
20001242:	4013      	ands	r3, r2
20001244:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20001246:	697a      	ldr	r2, [r7, #20]
20001248:	68fb      	ldr	r3, [r7, #12]
2000124a:	40da      	lsrs	r2, r3
2000124c:	0013      	movs	r3, r2
2000124e:	2201      	movs	r2, #1
20001250:	4013      	ands	r3, r2
20001252:	d004      	beq.n	2000125e <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20001254:	2313      	movs	r3, #19
20001256:	18fb      	adds	r3, r7, r3
20001258:	2201      	movs	r2, #1
2000125a:	701a      	strb	r2, [r3, #0]
2000125c:	e003      	b.n	20001266 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
2000125e:	2313      	movs	r3, #19
20001260:	18fb      	adds	r3, r7, r3
20001262:	2200      	movs	r2, #0
20001264:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20001266:	2313      	movs	r3, #19
20001268:	18fb      	adds	r3, r7, r3
2000126a:	781b      	ldrb	r3, [r3, #0]
}
2000126c:	0018      	movs	r0, r3
2000126e:	46bd      	mov	sp, r7
20001270:	b006      	add	sp, #24
20001272:	bd80      	pop	{r7, pc}
20001274:	40023800 	andmi	r3, r2, r0, lsl #16

20001278 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20001278:	b580      	push	{r7, lr}
2000127a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
2000127c:	4b04      	ldr	r3, [pc, #16]	; (20001290 <RCC_ClearFlag+0x18>)
2000127e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20001280:	4b03      	ldr	r3, [pc, #12]	; (20001290 <RCC_ClearFlag+0x18>)
20001282:	2180      	movs	r1, #128	; 0x80
20001284:	0449      	lsls	r1, r1, #17
20001286:	430a      	orrs	r2, r1
20001288:	675a      	str	r2, [r3, #116]	; 0x74
}
2000128a:	46c0      	nop			; (mov r8, r8)
2000128c:	46bd      	mov	sp, r7
2000128e:	bd80      	pop	{r7, pc}
20001290:	40023800 	andmi	r3, r2, r0, lsl #16

20001294 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20001294:	b580      	push	{r7, lr}
20001296:	b084      	sub	sp, #16
20001298:	af00      	add	r7, sp, #0
2000129a:	0002      	movs	r2, r0
2000129c:	1dfb      	adds	r3, r7, #7
2000129e:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
200012a0:	230f      	movs	r3, #15
200012a2:	18fb      	adds	r3, r7, r3
200012a4:	2200      	movs	r2, #0
200012a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
200012a8:	4b0a      	ldr	r3, [pc, #40]	; (200012d4 <RCC_GetITStatus+0x40>)
200012aa:	68db      	ldr	r3, [r3, #12]
200012ac:	1dfa      	adds	r2, r7, #7
200012ae:	7812      	ldrb	r2, [r2, #0]
200012b0:	4013      	ands	r3, r2
200012b2:	d004      	beq.n	200012be <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
200012b4:	230f      	movs	r3, #15
200012b6:	18fb      	adds	r3, r7, r3
200012b8:	2201      	movs	r2, #1
200012ba:	701a      	strb	r2, [r3, #0]
200012bc:	e003      	b.n	200012c6 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
200012be:	230f      	movs	r3, #15
200012c0:	18fb      	adds	r3, r7, r3
200012c2:	2200      	movs	r2, #0
200012c4:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
200012c6:	230f      	movs	r3, #15
200012c8:	18fb      	adds	r3, r7, r3
200012ca:	781b      	ldrb	r3, [r3, #0]
}
200012cc:	0018      	movs	r0, r3
200012ce:	46bd      	mov	sp, r7
200012d0:	b004      	add	sp, #16
200012d2:	bd80      	pop	{r7, pc}
200012d4:	40023800 	andmi	r3, r2, r0, lsl #16

200012d8 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
200012d8:	b580      	push	{r7, lr}
200012da:	b082      	sub	sp, #8
200012dc:	af00      	add	r7, sp, #0
200012de:	0002      	movs	r2, r0
200012e0:	1dfb      	adds	r3, r7, #7
200012e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
200012e4:	4a03      	ldr	r2, [pc, #12]	; (200012f4 <RCC_ClearITPendingBit+0x1c>)
200012e6:	1dfb      	adds	r3, r7, #7
200012e8:	781b      	ldrb	r3, [r3, #0]
200012ea:	7013      	strb	r3, [r2, #0]
}
200012ec:	46c0      	nop			; (mov r8, r8)
200012ee:	46bd      	mov	sp, r7
200012f0:	b002      	add	sp, #8
200012f2:	bd80      	pop	{r7, pc}
200012f4:	4002380e 	andmi	r3, r2, lr, lsl #16

200012f8 <__udivsi3>:
200012f8:	2200      	movs	r2, #0
200012fa:	0843      	lsrs	r3, r0, #1
200012fc:	428b      	cmp	r3, r1
200012fe:	d374      	bcc.n	200013ea <__udivsi3+0xf2>
20001300:	0903      	lsrs	r3, r0, #4
20001302:	428b      	cmp	r3, r1
20001304:	d35f      	bcc.n	200013c6 <__udivsi3+0xce>
20001306:	0a03      	lsrs	r3, r0, #8
20001308:	428b      	cmp	r3, r1
2000130a:	d344      	bcc.n	20001396 <__udivsi3+0x9e>
2000130c:	0b03      	lsrs	r3, r0, #12
2000130e:	428b      	cmp	r3, r1
20001310:	d328      	bcc.n	20001364 <__udivsi3+0x6c>
20001312:	0c03      	lsrs	r3, r0, #16
20001314:	428b      	cmp	r3, r1
20001316:	d30d      	bcc.n	20001334 <__udivsi3+0x3c>
20001318:	22ff      	movs	r2, #255	; 0xff
2000131a:	0209      	lsls	r1, r1, #8
2000131c:	ba12      	rev	r2, r2
2000131e:	0c03      	lsrs	r3, r0, #16
20001320:	428b      	cmp	r3, r1
20001322:	d302      	bcc.n	2000132a <__udivsi3+0x32>
20001324:	1212      	asrs	r2, r2, #8
20001326:	0209      	lsls	r1, r1, #8
20001328:	d065      	beq.n	200013f6 <__udivsi3+0xfe>
2000132a:	0b03      	lsrs	r3, r0, #12
2000132c:	428b      	cmp	r3, r1
2000132e:	d319      	bcc.n	20001364 <__udivsi3+0x6c>
20001330:	e000      	b.n	20001334 <__udivsi3+0x3c>
20001332:	0a09      	lsrs	r1, r1, #8
20001334:	0bc3      	lsrs	r3, r0, #15
20001336:	428b      	cmp	r3, r1
20001338:	d301      	bcc.n	2000133e <__udivsi3+0x46>
2000133a:	03cb      	lsls	r3, r1, #15
2000133c:	1ac0      	subs	r0, r0, r3
2000133e:	4152      	adcs	r2, r2
20001340:	0b83      	lsrs	r3, r0, #14
20001342:	428b      	cmp	r3, r1
20001344:	d301      	bcc.n	2000134a <__udivsi3+0x52>
20001346:	038b      	lsls	r3, r1, #14
20001348:	1ac0      	subs	r0, r0, r3
2000134a:	4152      	adcs	r2, r2
2000134c:	0b43      	lsrs	r3, r0, #13
2000134e:	428b      	cmp	r3, r1
20001350:	d301      	bcc.n	20001356 <__udivsi3+0x5e>
20001352:	034b      	lsls	r3, r1, #13
20001354:	1ac0      	subs	r0, r0, r3
20001356:	4152      	adcs	r2, r2
20001358:	0b03      	lsrs	r3, r0, #12
2000135a:	428b      	cmp	r3, r1
2000135c:	d301      	bcc.n	20001362 <__udivsi3+0x6a>
2000135e:	030b      	lsls	r3, r1, #12
20001360:	1ac0      	subs	r0, r0, r3
20001362:	4152      	adcs	r2, r2
20001364:	0ac3      	lsrs	r3, r0, #11
20001366:	428b      	cmp	r3, r1
20001368:	d301      	bcc.n	2000136e <__udivsi3+0x76>
2000136a:	02cb      	lsls	r3, r1, #11
2000136c:	1ac0      	subs	r0, r0, r3
2000136e:	4152      	adcs	r2, r2
20001370:	0a83      	lsrs	r3, r0, #10
20001372:	428b      	cmp	r3, r1
20001374:	d301      	bcc.n	2000137a <__udivsi3+0x82>
20001376:	028b      	lsls	r3, r1, #10
20001378:	1ac0      	subs	r0, r0, r3
2000137a:	4152      	adcs	r2, r2
2000137c:	0a43      	lsrs	r3, r0, #9
2000137e:	428b      	cmp	r3, r1
20001380:	d301      	bcc.n	20001386 <__udivsi3+0x8e>
20001382:	024b      	lsls	r3, r1, #9
20001384:	1ac0      	subs	r0, r0, r3
20001386:	4152      	adcs	r2, r2
20001388:	0a03      	lsrs	r3, r0, #8
2000138a:	428b      	cmp	r3, r1
2000138c:	d301      	bcc.n	20001392 <__udivsi3+0x9a>
2000138e:	020b      	lsls	r3, r1, #8
20001390:	1ac0      	subs	r0, r0, r3
20001392:	4152      	adcs	r2, r2
20001394:	d2cd      	bcs.n	20001332 <__udivsi3+0x3a>
20001396:	09c3      	lsrs	r3, r0, #7
20001398:	428b      	cmp	r3, r1
2000139a:	d301      	bcc.n	200013a0 <__udivsi3+0xa8>
2000139c:	01cb      	lsls	r3, r1, #7
2000139e:	1ac0      	subs	r0, r0, r3
200013a0:	4152      	adcs	r2, r2
200013a2:	0983      	lsrs	r3, r0, #6
200013a4:	428b      	cmp	r3, r1
200013a6:	d301      	bcc.n	200013ac <__udivsi3+0xb4>
200013a8:	018b      	lsls	r3, r1, #6
200013aa:	1ac0      	subs	r0, r0, r3
200013ac:	4152      	adcs	r2, r2
200013ae:	0943      	lsrs	r3, r0, #5
200013b0:	428b      	cmp	r3, r1
200013b2:	d301      	bcc.n	200013b8 <__udivsi3+0xc0>
200013b4:	014b      	lsls	r3, r1, #5
200013b6:	1ac0      	subs	r0, r0, r3
200013b8:	4152      	adcs	r2, r2
200013ba:	0903      	lsrs	r3, r0, #4
200013bc:	428b      	cmp	r3, r1
200013be:	d301      	bcc.n	200013c4 <__udivsi3+0xcc>
200013c0:	010b      	lsls	r3, r1, #4
200013c2:	1ac0      	subs	r0, r0, r3
200013c4:	4152      	adcs	r2, r2
200013c6:	08c3      	lsrs	r3, r0, #3
200013c8:	428b      	cmp	r3, r1
200013ca:	d301      	bcc.n	200013d0 <__udivsi3+0xd8>
200013cc:	00cb      	lsls	r3, r1, #3
200013ce:	1ac0      	subs	r0, r0, r3
200013d0:	4152      	adcs	r2, r2
200013d2:	0883      	lsrs	r3, r0, #2
200013d4:	428b      	cmp	r3, r1
200013d6:	d301      	bcc.n	200013dc <__udivsi3+0xe4>
200013d8:	008b      	lsls	r3, r1, #2
200013da:	1ac0      	subs	r0, r0, r3
200013dc:	4152      	adcs	r2, r2
200013de:	0843      	lsrs	r3, r0, #1
200013e0:	428b      	cmp	r3, r1
200013e2:	d301      	bcc.n	200013e8 <__udivsi3+0xf0>
200013e4:	004b      	lsls	r3, r1, #1
200013e6:	1ac0      	subs	r0, r0, r3
200013e8:	4152      	adcs	r2, r2
200013ea:	1a41      	subs	r1, r0, r1
200013ec:	d200      	bcs.n	200013f0 <__udivsi3+0xf8>
200013ee:	4601      	mov	r1, r0
200013f0:	4152      	adcs	r2, r2
200013f2:	4610      	mov	r0, r2
200013f4:	4770      	bx	lr
200013f6:	e7ff      	b.n	200013f8 <__udivsi3+0x100>
200013f8:	b501      	push	{r0, lr}
200013fa:	2000      	movs	r0, #0
200013fc:	f000 f806 	bl	2000140c <__aeabi_idiv0>
20001400:	bd02      	pop	{r1, pc}
20001402:	46c0      	nop			; (mov r8, r8)

20001404 <__aeabi_uidivmod>:
20001404:	2900      	cmp	r1, #0
20001406:	d0f7      	beq.n	200013f8 <__udivsi3+0x100>
20001408:	e776      	b.n	200012f8 <__udivsi3>
2000140a:	4770      	bx	lr

2000140c <__aeabi_idiv0>:
2000140c:	4770      	bx	lr
2000140e:	46c0      	nop			; (mov r8, r8)

20001410 <APBAHBPrescTable>:
20001410:	00000000 	andeq	r0, r0, r0
20001414:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20001418:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
2000141c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}
20001420:	00020001 	andeq	r0, r2, r1
20001424:	00080004 	andeq	r0, r8, r4
20001428:	00200010 	eoreq	r0, r0, r0, lsl r0
2000142c:	00800040 	addeq	r0, r0, r0, asr #32
20001430:	02000100 	andeq	r0, r0, #0, 2
20001434:	08000400 	stmdaeq	r0, {sl}
20001438:	20001000 	andcs	r1, r0, r0
2000143c:	80004000 	andhi	r4, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000331 	andeq	r0, r0, r1, lsr r3
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000163 	andeq	r0, r0, r3, ror #2
      10:	0000800c 	andeq	r8, r0, ip
      14:	00024800 	andeq	r4, r2, r0, lsl #16
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000157 	andeq	r0, r0, r7, asr r1
      2c:	55080102 	strpl	r0, [r8, #-258]	; 0xfffffefe
      30:	02000001 	andeq	r0, r0, #1
      34:	00160502 	andseq	r0, r6, r2, lsl #10
      38:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
      3c:	02000000 	andeq	r0, r0, #0
      40:	00004539 	andeq	r4, r0, r9, lsr r5
      44:	07020200 	streq	r0, [r2, -r0, lsl #4]
      48:	00000223 	andeq	r0, r0, r3, lsr #4
      4c:	00023e03 	andeq	r3, r2, r3, lsl #28
      50:	574d0200 	strbpl	r0, [sp, -r0, lsl #4]
      54:	02000000 	andeq	r0, r0, #0
      58:	00fb0504 	rscseq	r0, fp, r4, lsl #10
      5c:	33030000 	movwcc	r0, #12288	; 0x3000
      60:	02000000 	andeq	r0, r0, #0
      64:	0000694f 	andeq	r6, r0, pc, asr #18
      68:	07040200 	streq	r0, [r4, -r0, lsl #4]
      6c:	00000200 	andeq	r0, r0, r0, lsl #4
      70:	f6050802 			; <UNDEFINED> instruction: 0xf6050802
      74:	02000000 	andeq	r0, r0, #0
      78:	01fb0708 	mvnseq	r0, r8, lsl #14
      7c:	04040000 	streq	r0, [r4], #-0
      80:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      84:	07040200 	streq	r0, [r4, -r0, lsl #4]
      88:	00000205 	andeq	r0, r0, r5, lsl #4
      8c:	00004003 	andeq	r4, r0, r3
      90:	3a240300 	bcc	900c98 <startup-0x1f6ff368>
      94:	05000000 	streq	r0, [r0, #-0]
      98:	0000008c 	andeq	r0, r0, ip, lsl #1
      9c:	00024003 	andeq	r4, r2, r3
      a0:	4c2c0300 	stcmi	3, cr0, [ip], #-0
      a4:	05000000 	streq	r0, [r0, #-0]
      a8:	0000009c 	muleq	r0, ip, r0
      ac:	00003503 	andeq	r3, r0, r3, lsl #10
      b0:	5e300300 	cdppl	3, 3, cr0, cr0, cr0, {0}
      b4:	05000000 	streq	r0, [r0, #-0]
      b8:	000000ac 	andeq	r0, r0, ip, lsr #1
      bc:	00034b06 	andeq	r4, r3, r6, lsl #22
      c0:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
      c4:	000000a7 	andeq	r0, r0, r7, lsr #1
      c8:	00028b07 	andeq	r8, r2, r7, lsl #22
      cc:	ac3b0500 	cfldr32ge	mvfx0, [fp], #-0
      d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      d4:	002c0107 	eoreq	r0, ip, r7, lsl #2
      d8:	5f060000 	svcpl	0x00060000
      dc:	0000ee03 	andeq	lr, r0, r3, lsl #28
      e0:	02360900 	eorseq	r0, r6, #0, 18
      e4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      e8:	00000061 	andeq	r0, r0, r1, rrx
      ec:	280a0001 	stmdacs	sl, {r0}
      f0:	7a05c306 	bvc	170d10 <startup-0x1fe8f2f0>
      f4:	0b000001 	bleq	100 <startup-0x1fffff00>
      f8:	0000012b 	andeq	r0, r0, fp, lsr #2
      fc:	b705c506 	strlt	ip, [r5, -r6, lsl #10]
     100:	00000000 	andeq	r0, r0, r0
     104:	0000df0b 	andeq	sp, r0, fp, lsl #30
     108:	05c60600 	strbeq	r0, [r6, #1536]	; 0x600
     10c:	000000b7 	strheq	r0, [r0], -r7
     110:	02bc0b04 	adcseq	r0, ip, #4, 22	; 0x1000
     114:	c7060000 	strgt	r0, [r6, -r0]
     118:	0000b705 	andeq	fp, r0, r5, lsl #14
     11c:	120b0800 	andne	r0, fp, #0, 16
     120:	06000001 	streq	r0, [r0], -r1
     124:	00b705c8 	adcseq	r0, r7, r8, asr #11
     128:	0c0c0000 	stceq	0, cr0, [ip], {-0}
     12c:	00524449 	subseq	r4, r2, r9, asr #8
     130:	b705c906 	strlt	ip, [r5, -r6, lsl #18]
     134:	10000000 	andne	r0, r0, r0
     138:	52444f0c 	subpl	r4, r4, #12, 30	; 0x30
     13c:	05ca0600 	strbeq	r0, [sl, #1536]	; 0x600
     140:	000000b7 	strheq	r0, [r0], -r7
     144:	01310b14 	teqeq	r1, r4, lsl fp
     148:	cb060000 	blgt	180150 <startup-0x1fe7feb0>
     14c:	00009705 	andeq	r9, r0, r5, lsl #14
     150:	250b1800 	strcs	r1, [fp, #-2048]	; 0xfffff800
     154:	06000001 	streq	r0, [r0], -r1
     158:	009705cc 	addseq	r0, r7, ip, asr #11
     15c:	0b1a0000 	bleq	680164 <startup-0x1f97fe9c>
     160:	00000362 	andeq	r0, r0, r2, ror #6
     164:	b705cd06 	strlt	ip, [r5, -r6, lsl #26]
     168:	1c000000 	stcne	0, cr0, [r0], {-0}
     16c:	5246410c 	subpl	r4, r6, #12, 2
     170:	05ce0600 	strbeq	r0, [lr, #1536]	; 0x600
     174:	0000018a 	andeq	r0, r0, sl, lsl #3
     178:	b70d0020 	strlt	r0, [sp, -r0, lsr #32]
     17c:	8a000000 	bhi	184 <startup-0x1ffffe7c>
     180:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     184:	00000085 	andeq	r0, r0, r5, lsl #1
     188:	7a050001 	bvc	140194 <startup-0x1febfe6c>
     18c:	0f000001 	svceq	0x00000001
     190:	00000000 	andeq	r0, r0, r0
     194:	ee05cf06 	cdp	15, 0, cr12, cr5, cr6, {0}
     198:	10000000 	andne	r0, r0, r0
     19c:	002c0107 	eoreq	r0, ip, r7, lsl #2
     1a0:	42070000 	andmi	r0, r7, #0
     1a4:	000001c1 	andeq	r0, r0, r1, asr #3
     1a8:	00011809 	andeq	r1, r1, r9, lsl #16
     1ac:	04090000 	streq	r0, [r9], #-0
     1b0:	01000001 	tsteq	r0, r1
     1b4:	00005409 	andeq	r5, r0, r9, lsl #8
     1b8:	73090200 	movwvc	r0, #37376	; 0x9200
     1bc:	03000000 	movweq	r0, #0
     1c0:	03250300 			; <UNDEFINED> instruction: 0x03250300
     1c4:	47070000 	strmi	r0, [r7, -r0]
     1c8:	0000019b 	muleq	r0, fp, r1
     1cc:	2c010710 	stccs	7, cr0, [r1], {16}
     1d0:	07000000 	streq	r0, [r0, -r0]
     1d4:	0001e64f 	andeq	lr, r1, pc, asr #12
     1d8:	01470900 	cmpeq	r7, r0, lsl #18
     1dc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     1e0:	00000020 	andeq	r0, r0, r0, lsr #32
     1e4:	cd030001 	stcgt	0, cr0, [r3, #-4]
     1e8:	07000000 	streq	r0, [r0, -r0]
     1ec:	0001cc52 	andeq	ip, r1, r2, asr ip
     1f0:	01071000 	mrseq	r1, (UNDEF: 7)
     1f4:	0000002c 	andeq	r0, r0, ip, lsr #32
     1f8:	02175a07 	andseq	r5, r7, #28672	; 0x7000
     1fc:	9b090000 	blls	240204 <startup-0x1fdbfdfc>
     200:	00000002 	andeq	r0, r0, r2
     204:	0002aa09 	andeq	sl, r2, r9, lsl #20
     208:	e6090100 	str	r0, [r9], -r0, lsl #2
     20c:	02000000 	andeq	r0, r0, #0
     210:	00013709 	andeq	r3, r1, r9, lsl #14
     214:	03000300 	movweq	r0, #768	; 0x300
     218:	000002cf 	andeq	r0, r0, pc, asr #5
     21c:	01f15f07 	mvnseq	r5, r7, lsl #30
     220:	07100000 	ldreq	r0, [r0, -r0]
     224:	00002c01 	andeq	r2, r0, r1, lsl #24
     228:	426e0700 	rsbmi	r0, lr, #0, 14
     22c:	09000002 	stmdbeq	r0, {r1}
     230:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     234:	03360900 	teqeq	r6, #0, 18
     238:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     23c:	000002e1 	andeq	r0, r0, r1, ror #5
     240:	14030002 	strne	r0, [r3], #-2
     244:	07000003 	streq	r0, [r0, -r3]
     248:	00022272 	andeq	r2, r2, r2, ror r2
     24c:	07081100 	streq	r1, [r8, -r0, lsl #2]
     250:	00029284 	andeq	r9, r2, r4, lsl #5
     254:	000d1200 	andeq	r1, sp, r0, lsl #4
     258:	86070000 	strhi	r0, [r7], -r0
     25c:	000000ac 	andeq	r0, r0, ip, lsr #1
     260:	03671200 	cmneq	r7, #0, 4
     264:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
     268:	000001c1 	andeq	r0, r0, r1, asr #3
     26c:	00681204 	rsbeq	r1, r8, r4, lsl #4
     270:	8c070000 	stchi	0, cr0, [r7], {-0}
     274:	00000217 	andeq	r0, r0, r7, lsl r2
     278:	00491205 	subeq	r1, r9, r5, lsl #4
     27c:	8f070000 	svchi	0x00070000
     280:	000001e6 	andeq	r0, r0, r6, ror #3
     284:	030a1206 	movweq	r1, #41478	; 0xa206
     288:	92070000 	andls	r0, r7, #0
     28c:	00000242 	andeq	r0, r0, r2, asr #4
     290:	12030007 	andne	r0, r3, #7
     294:	07000002 	streq	r0, [r0, -r2]
     298:	00024d94 	muleq	r2, r4, sp
     29c:	08010200 	stmdaeq	r1, {r9}
     2a0:	0000015e 	andeq	r0, r0, lr, asr r1
     2a4:	00002e13 	andeq	r2, r0, r3, lsl lr
     2a8:	82300100 	eorshi	r0, r0, #0, 2
     2ac:	76200000 	strtvc	r0, [r0], -r0
     2b0:	01000000 	mrseq	r0, (UNDEF: 0)
     2b4:	0002de9c 	muleq	r2, ip, lr
     2b8:	03581400 	cmpeq	r8, #0, 8
     2bc:	33010000 	movwcc	r0, #4096	; 0x1000
     2c0:	000002de 	ldrdeq	r0, [r0], -lr
     2c4:	154c9102 	strbne	r9, [ip, #-258]	; 0xfffffefe
     2c8:	2000009c 	mulcs	r0, ip, r0
     2cc:	00000052 	andeq	r0, r0, r2, asr r0
     2d0:	01006916 	tsteq	r0, r6, lsl r9
     2d4:	00007e40 	andeq	r7, r0, r0, asr #28
     2d8:	6c910200 	lfmvs	f0, 4, [r1], {0}
     2dc:	8c0d0000 	stchi	0, cr0, [sp], {-0}
     2e0:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
     2e4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     2e8:	00000085 	andeq	r0, r0, r5, lsl #1
     2ec:	0117000f 	tsteq	r7, pc
     2f0:	01000003 	tsteq	r0, r3
     2f4:	0000782b 	andeq	r7, r0, fp, lsr #16
     2f8:	00000a20 	andeq	r0, r0, r0, lsr #20
     2fc:	189c0100 	ldmne	ip, {r8}
     300:	000002c4 	andeq	r0, r0, r4, asr #5
     304:	00101601 	andseq	r1, r0, r1, lsl #12
     308:	00682000 	rsbeq	r2, r8, r0
     30c:	9c010000 	stcls	0, cr0, [r1], {-0}
     310:	00000323 	andeq	r0, r0, r3, lsr #6
     314:	00030514 	andeq	r0, r3, r4, lsl r5
     318:	92180100 	andsls	r0, r8, #0, 2
     31c:	02000002 	andeq	r0, r0, #2
     320:	19007091 	stmdbne	r0, {r0, r4, r7, ip, sp, lr}
     324:	00000343 	andeq	r0, r0, r3, asr #6
     328:	00000c01 	andeq	r0, r0, r1, lsl #24
     32c:	000c2000 	andeq	r2, ip, r0
     330:	9c010000 	stcls	0, cr0, [r1], {-0}
     334:	00062300 	andeq	r2, r6, r0, lsl #6
     338:	78000400 	stmdavc	r0, {sl}
     33c:	04000001 	streq	r0, [r0], #-1
     340:	00016301 	andeq	r6, r1, r1, lsl #6
     344:	03f60c00 	mvnseq	r0, #0, 24
     348:	02480000 	subeq	r0, r8, #0
     34c:	00f80000 	rscseq	r0, r8, r0
     350:	050e2000 	streq	r2, [lr, #-0]
     354:	01e50000 	mvneq	r0, r0
     358:	01020000 	mrseq	r0, (UNDEF: 2)
     35c:	00015706 	andeq	r5, r1, r6, lsl #14
     360:	04800300 	streq	r0, [r0], #768	; 0x300
     364:	2b020000 	blcs	8036c <startup-0x1ff7fc94>
     368:	00000037 	andeq	r0, r0, r7, lsr r0
     36c:	55080102 	strpl	r0, [r8, #-258]	; 0xfffffefe
     370:	02000001 	andeq	r0, r0, #1
     374:	00160502 	andseq	r0, r6, r2, lsl #10
     378:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
     37c:	02000000 	andeq	r0, r0, #0
     380:	00005039 	andeq	r5, r0, r9, lsr r0
     384:	07020200 	streq	r0, [r2, -r0, lsl #4]
     388:	00000223 	andeq	r0, r0, r3, lsr #4
     38c:	00023e03 	andeq	r3, r2, r3, lsl #28
     390:	624d0200 	subvs	r0, sp, #0, 4
     394:	02000000 	andeq	r0, r0, #0
     398:	00fb0504 	rscseq	r0, fp, r4, lsl #10
     39c:	33030000 	movwcc	r0, #12288	; 0x3000
     3a0:	02000000 	andeq	r0, r0, #0
     3a4:	0000744f 	andeq	r7, r0, pc, asr #8
     3a8:	07040200 	streq	r0, [r4, -r0, lsl #4]
     3ac:	00000200 	andeq	r0, r0, r0, lsl #4
     3b0:	f6050802 			; <UNDEFINED> instruction: 0xf6050802
     3b4:	02000000 	andeq	r0, r0, #0
     3b8:	01fb0708 	mvnseq	r0, r8, lsl #14
     3bc:	04040000 	streq	r0, [r4], #-0
     3c0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     3c4:	07040200 	streq	r0, [r4, -r0, lsl #4]
     3c8:	00000205 	andeq	r0, r0, r5, lsl #4
     3cc:	00048203 	andeq	r8, r4, r3, lsl #4
     3d0:	2c180300 	ldccs	3, cr0, [r8], {-0}
     3d4:	03000000 	movweq	r0, #0
     3d8:	00000040 	andeq	r0, r0, r0, asr #32
     3dc:	00452403 	subeq	r2, r5, r3, lsl #8
     3e0:	a2050000 	andge	r0, r5, #0
     3e4:	03000000 	movweq	r0, #0
     3e8:	00000240 	andeq	r0, r0, r0, asr #4
     3ec:	00572c03 	subseq	r2, r7, r3, lsl #24
     3f0:	b2050000 	andlt	r0, r5, #0
     3f4:	03000000 	movweq	r0, #0
     3f8:	00000035 	andeq	r0, r0, r5, lsr r0
     3fc:	00693003 	rsbeq	r3, r9, r3
     400:	c2050000 	andgt	r0, r5, #0
     404:	06000000 	streq	r0, [r0], -r0
     408:	0000034b 	andeq	r0, r0, fp, asr #6
     40c:	bd06fa04 	vstrlt	s30, [r6, #-16]
     410:	07000000 	streq	r0, [r0, -r0]
     414:	0000028b 	andeq	r0, r0, fp, lsl #5
     418:	00c23b05 	sbceq	r3, r2, r5, lsl #22
     41c:	07080000 	streq	r0, [r8, -r0]
     420:	00003701 	andeq	r3, r0, r1, lsl #14
     424:	035f0600 	cmpeq	pc, #0, 12
     428:	00000104 	andeq	r0, r0, r4, lsl #2
     42c:	00023609 	andeq	r3, r2, r9, lsl #12
     430:	61090000 	mrsvs	r0, (UNDEF: 9)
     434:	01000000 	mrseq	r0, (UNDEF: 0)
     438:	06280a00 	strteq	r0, [r8], -r0, lsl #20
     43c:	019005c3 	orrseq	r0, r0, r3, asr #11
     440:	2b0b0000 	blcs	2c0448 <startup-0x1fd3fbb8>
     444:	06000001 	streq	r0, [r0], -r1
     448:	00cd05c5 	sbceq	r0, sp, r5, asr #11
     44c:	0b000000 	bleq	454 <startup-0x1ffffbac>
     450:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     454:	cd05c606 	stcgt	6, cr12, [r5, #-24]	; 0xffffffe8
     458:	04000000 	streq	r0, [r0], #-0
     45c:	0002bc0b 	andeq	fp, r2, fp, lsl #24
     460:	05c70600 	strbeq	r0, [r7, #1536]	; 0x600
     464:	000000cd 	andeq	r0, r0, sp, asr #1
     468:	01120b08 	tsteq	r2, r8, lsl #22
     46c:	c8060000 	stmdagt	r6, {}	; <UNPREDICTABLE>
     470:	0000cd05 	andeq	ip, r0, r5, lsl #26
     474:	490c0c00 	stmdbmi	ip, {sl, fp}
     478:	06005244 	streq	r5, [r0], -r4, asr #4
     47c:	00cd05c9 	sbceq	r0, sp, r9, asr #11
     480:	0c100000 	ldceq	0, cr0, [r0], {-0}
     484:	0052444f 	subseq	r4, r2, pc, asr #8
     488:	cd05ca06 	vstrgt	s24, [r5, #-24]	; 0xffffffe8
     48c:	14000000 	strne	r0, [r0], #-0
     490:	0001310b 	andeq	r3, r1, fp, lsl #2
     494:	05cb0600 	strbeq	r0, [fp, #1536]	; 0x600
     498:	000000ad 	andeq	r0, r0, sp, lsr #1
     49c:	01250b18 			; <UNDEFINED> instruction: 0x01250b18
     4a0:	cc060000 	stcgt	0, cr0, [r6], {-0}
     4a4:	0000ad05 	andeq	sl, r0, r5, lsl #26
     4a8:	620b1a00 	andvs	r1, fp, #0, 20
     4ac:	06000003 	streq	r0, [r0], -r3
     4b0:	00cd05cd 	sbceq	r0, sp, sp, asr #11
     4b4:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
     4b8:	00524641 	subseq	r4, r2, r1, asr #12
     4bc:	a005ce06 	andge	ip, r5, r6, lsl #28
     4c0:	20000001 	andcs	r0, r0, r1
     4c4:	00cd0d00 	sbceq	r0, sp, r0, lsl #26
     4c8:	01a00000 	moveq	r0, r0
     4cc:	900e0000 	andls	r0, lr, r0
     4d0:	01000000 	mrseq	r0, (UNDEF: 0)
     4d4:	01900500 	orrseq	r0, r0, r0, lsl #10
     4d8:	000f0000 	andeq	r0, pc, r0
     4dc:	06000000 	streq	r0, [r0], -r0
     4e0:	010405cf 	smlabteq	r4, pc, r5, r0	; <UNPREDICTABLE>
     4e4:	07100000 	ldreq	r0, [r0, -r0]
     4e8:	00003701 	andeq	r3, r0, r1, lsl #14
     4ec:	d7420700 	strble	r0, [r2, -r0, lsl #14]
     4f0:	09000001 	stmdbeq	r0, {r0}
     4f4:	00000118 	andeq	r0, r0, r8, lsl r1
     4f8:	01040900 	tsteq	r4, r0, lsl #18
     4fc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     500:	00000054 	andeq	r0, r0, r4, asr r0
     504:	00730902 	rsbseq	r0, r3, r2, lsl #18
     508:	00030000 	andeq	r0, r3, r0
     50c:	00032503 	andeq	r2, r3, r3, lsl #10
     510:	b1470700 	cmplt	r7, r0, lsl #14
     514:	10000001 	andne	r0, r0, r1
     518:	00370107 	eorseq	r0, r7, r7, lsl #2
     51c:	4f070000 	svcmi	0x00070000
     520:	000001fc 	strdeq	r0, [r0], -ip
     524:	00014709 	andeq	r4, r1, r9, lsl #14
     528:	20090000 	andcs	r0, r9, r0
     52c:	01000000 	mrseq	r0, (UNDEF: 0)
     530:	00cd0300 	sbceq	r0, sp, r0, lsl #6
     534:	52070000 	andpl	r0, r7, #0
     538:	000001e2 	andeq	r0, r0, r2, ror #3
     53c:	37010710 	smladcc	r1, r0, r7, r0
     540:	07000000 	streq	r0, [r0, -r0]
     544:	00022d5a 	andeq	r2, r2, sl, asr sp
     548:	029b0900 	addseq	r0, fp, #0, 18
     54c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     550:	000002aa 	andeq	r0, r0, sl, lsr #5
     554:	00e60901 	rsceq	r0, r6, r1, lsl #18
     558:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     55c:	00000137 	andeq	r0, r0, r7, lsr r1
     560:	cf030003 	svcgt	0x00030003
     564:	07000002 	streq	r0, [r0, -r2]
     568:	0002075f 	andeq	r0, r2, pc, asr r7
     56c:	01071000 	mrseq	r1, (UNDEF: 7)
     570:	00000037 	andeq	r0, r0, r7, lsr r0
     574:	02586e07 	subseq	r6, r8, #7, 28	; 0x70
     578:	f0090000 			; <UNDEFINED> instruction: 0xf0090000
     57c:	00000002 	andeq	r0, r0, r2
     580:	00033609 	andeq	r3, r3, r9, lsl #12
     584:	e1090100 	mrs	r0, (UNDEF: 25)
     588:	02000002 	andeq	r0, r0, #2
     58c:	03140300 	tsteq	r4, #0, 6
     590:	72070000 	andvc	r0, r7, #0
     594:	00000238 	andeq	r0, r0, r8, lsr r2
     598:	37010710 	smladcc	r1, r0, r7, r0
     59c:	07000000 	streq	r0, [r0, -r0]
     5a0:	00027d7a 	andeq	r7, r2, sl, ror sp
     5a4:	03b80900 			; <UNDEFINED> instruction: 0x03b80900
     5a8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     5ac:	00000378 	andeq	r0, r0, r8, ror r3
     5b0:	f7030001 			; <UNDEFINED> instruction: 0xf7030001
     5b4:	07000004 	streq	r0, [r0, -r4]
     5b8:	0002637d 	andeq	r6, r2, sp, ror r3
     5bc:	07081100 	streq	r1, [r8, -r0, lsl #2]
     5c0:	0002cd84 	andeq	ip, r2, r4, lsl #27
     5c4:	000d1200 	andeq	r1, sp, r0, lsl #4
     5c8:	86070000 	strhi	r0, [r7], -r0
     5cc:	000000c2 	andeq	r0, r0, r2, asr #1
     5d0:	03671200 	cmneq	r7, #0, 4
     5d4:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
     5d8:	000001d7 	ldrdeq	r0, [r0], -r7
     5dc:	00681204 	rsbeq	r1, r8, r4, lsl #4
     5e0:	8c070000 	stchi	0, cr0, [r7], {-0}
     5e4:	0000022d 	andeq	r0, r0, sp, lsr #4
     5e8:	00491205 	subeq	r1, r9, r5, lsl #4
     5ec:	8f070000 	svchi	0x00070000
     5f0:	000001fc 	strdeq	r0, [r0], -ip
     5f4:	030a1206 	movweq	r1, #41478	; 0xa206
     5f8:	92070000 	andls	r0, r7, #0
     5fc:	00000258 	andeq	r0, r0, r8, asr r2
     600:	12030007 	andne	r0, r3, #7
     604:	07000002 	streq	r0, [r0, -r2]
     608:	00028894 	muleq	r2, r4, r8
     60c:	05341300 	ldreq	r1, [r4, #-768]!	; 0xfffffd00
     610:	43010000 	movwmi	r0, #4096	; 0x1000
     614:	00056202 	andeq	r6, r5, r2, lsl #4
     618:	0000a420 	andeq	sl, r0, r0, lsr #8
     61c:	3a9c0100 	bcc	fe700a24 <APBAHBPrescTable+0xde6ff614>
     620:	14000003 	strne	r0, [r0], #-3
     624:	00000517 	andeq	r0, r0, r7, lsl r5
     628:	3a024301 	bcc	91234 <startup-0x1ff6edcc>
     62c:	02000003 	andeq	r0, r0, #3
     630:	c2146c91 	andsgt	r6, r4, #37120	; 0x9100
     634:	01000004 	tsteq	r0, r4
     638:	00a20243 	adceq	r0, r2, r3, asr #4
     63c:	91020000 	mrsls	r0, (UNDEF: 2)
     640:	0394146a 	orrseq	r1, r4, #1778384896	; 0x6a000000
     644:	43010000 	movwmi	r0, #4096	; 0x1000
     648:	00009702 	andeq	r9, r0, r2, lsl #14
     64c:	69910200 	ldmibvs	r1, {r9}
     650:	00039c15 	andeq	r9, r3, r5, lsl ip
     654:	02450100 	subeq	r0, r5, #0, 2
     658:	000000c2 	andeq	r0, r0, r2, asr #1
     65c:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
     660:	0000052d 	andeq	r0, r0, sp, lsr #10
     664:	c2024601 	andgt	r4, r2, #1048576	; 0x100000
     668:	02000000 	andeq	r0, r0, #0
     66c:	16007091 			; <UNDEFINED> instruction: 0x16007091
     670:	0001a504 	andeq	sl, r1, r4, lsl #10
     674:	051d1300 	ldreq	r1, [sp, #-768]	; 0xfffffd00
     678:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     67c:	00053e01 	andeq	r3, r5, r1, lsl #28
     680:	00002420 	andeq	r2, r0, r0, lsr #8
     684:	759c0100 	ldrvc	r0, [ip, #256]	; 0x100
     688:	14000003 	strne	r0, [r0], #-3
     68c:	00000517 	andeq	r0, r0, r7, lsl r5
     690:	3a01f001 	bcc	7c69c <startup-0x1ff83964>
     694:	02000003 	andeq	r0, r0, #3
     698:	0d147491 	cfldrseq	mvf7, [r4, #-580]	; 0xfffffdbc
     69c:	01000000 	mrseq	r0, (UNDEF: 0)
     6a0:	00a201f0 	strdeq	r0, [r2], r0	; <UNPREDICTABLE>
     6a4:	91020000 	mrsls	r0, (UNDEF: 2)
     6a8:	0c130072 	ldceq	0, cr0, [r3], {114}	; 0x72
     6ac:	01000005 	tsteq	r0, r5
     6b0:	052001e0 	streq	r0, [r0, #-480]!	; 0xfffffe20
     6b4:	001e2000 	andseq	r2, lr, r0
     6b8:	9c010000 	stcls	0, cr0, [r1], {-0}
     6bc:	000003aa 	andeq	r0, r0, sl, lsr #7
     6c0:	00051714 	andeq	r1, r5, r4, lsl r7
     6c4:	01e00100 	mvneq	r0, r0, lsl #2
     6c8:	0000033a 	andeq	r0, r0, sl, lsr r3
     6cc:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
     6d0:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
     6d4:	a201e001 	andge	lr, r1, #1
     6d8:	02000000 	andeq	r0, r0, #0
     6dc:	13007291 	movwne	r7, #657	; 0x291
     6e0:	000003c2 	andeq	r0, r0, r2, asr #7
     6e4:	e601c701 	str	ip, [r1], -r1, lsl #14
     6e8:	3a200004 	bcc	800700 <startup-0x1f7ff900>
     6ec:	01000000 	mrseq	r0, (UNDEF: 0)
     6f0:	0003ee9c 	muleq	r3, ip, lr
     6f4:	05171400 	ldreq	r1, [r7, #-1024]	; 0xfffffc00
     6f8:	c7010000 	strgt	r0, [r1, -r0]
     6fc:	00033a01 	andeq	r3, r3, r1, lsl #20
     700:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     704:	00000d14 	andeq	r0, r0, r4, lsl sp
     708:	01c70100 	biceq	r0, r7, r0, lsl #2
     70c:	000000a2 	andeq	r0, r0, r2, lsr #1
     710:	14729102 	ldrbtne	r9, [r2], #-258	; 0xfffffefe
     714:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
     718:	7d01c701 	stcvc	7, cr12, [r1, #-4]
     71c:	02000002 	andeq	r0, r0, #2
     720:	13007191 	movwne	r7, #401	; 0x191
     724:	000003e7 	andeq	r0, r0, r7, ror #7
     728:	c801b101 	stmdagt	r1, {r0, r8, ip, sp, pc}
     72c:	1e200004 	cdpne	0, 2, cr0, cr0, cr4, {0}
     730:	01000000 	mrseq	r0, (UNDEF: 0)
     734:	0004239c 	muleq	r4, ip, r3
     738:	05171400 	ldreq	r1, [r7, #-1024]	; 0xfffffc00
     73c:	b1010000 	mrslt	r0, (UNDEF: 1)
     740:	00033a01 	andeq	r3, r3, r1, lsl #20
     744:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     748:	00000d14 	andeq	r0, r0, r4, lsl sp
     74c:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
     750:	000000a2 	andeq	r0, r0, r2, lsr #1
     754:	00729102 	rsbseq	r9, r2, r2, lsl #2
     758:	0003d013 	andeq	sp, r3, r3, lsl r0
     75c:	019c0100 	orrseq	r0, ip, r0, lsl #2
     760:	200004aa 	andcs	r0, r0, sl, lsr #9
     764:	0000001e 	andeq	r0, r0, lr, lsl r0
     768:	04589c01 	ldrbeq	r9, [r8], #-3073	; 0xfffff3ff
     76c:	17140000 	ldrne	r0, [r4, -r0]
     770:	01000005 	tsteq	r0, r5
     774:	033a019c 	teqeq	sl, #156, 2	; 0x27
     778:	91020000 	mrsls	r0, (UNDEF: 2)
     77c:	000d1474 	andeq	r1, sp, r4, ror r4
     780:	9c010000 	stcls	0, cr0, [r1], {-0}
     784:	0000a201 	andeq	sl, r0, r1, lsl #4
     788:	72910200 	addsvc	r0, r1, #0, 4
     78c:	03801700 	orreq	r1, r0, #0, 14
     790:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
     794:	0000a201 	andeq	sl, r0, r1, lsl #4
     798:	00049400 	andeq	r9, r4, r0, lsl #8
     79c:	00001620 	andeq	r1, r0, r0, lsr #12
     7a0:	829c0100 	addshi	r0, ip, #0, 2
     7a4:	14000004 	strne	r0, [r0], #-4
     7a8:	00000517 	andeq	r0, r0, r7, lsl r5
     7ac:	3a018801 	bcc	627b8 <startup-0x1ff9d848>
     7b0:	02000003 	andeq	r0, r0, #3
     7b4:	17007491 			; <UNDEFINED> instruction: 0x17007491
     7b8:	00000545 	andeq	r0, r0, r5, asr #10
     7bc:	97016e01 	strls	r6, [r1, -r1, lsl #28]
     7c0:	52000000 	andpl	r0, r0, #0
     7c4:	42200004 	eormi	r0, r0, #4
     7c8:	01000000 	mrseq	r0, (UNDEF: 0)
     7cc:	0004ca9c 	muleq	r4, ip, sl
     7d0:	05171400 	ldreq	r1, [r7, #-1024]	; 0xfffffc00
     7d4:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     7d8:	00033a01 	andeq	r3, r3, r1, lsl #20
     7dc:	6c910200 	lfmvs	f0, 4, [r1], {0}
     7e0:	00000d14 	andeq	r0, r0, r4, lsl sp
     7e4:	016e0100 	cmneq	lr, r0, lsl #2
     7e8:	000000a2 	andeq	r0, r0, r2, lsr #1
     7ec:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
     7f0:	000004a0 	andeq	r0, r0, r0, lsr #9
     7f4:	97017001 	strls	r7, [r1, -r1]
     7f8:	02000000 	andeq	r0, r0, #0
     7fc:	17007791 			; <UNDEFINED> instruction: 0x17007791
     800:	000004d1 	ldrdeq	r0, [r0], -r1
     804:	a2015d01 	andge	r5, r1, #1, 26	; 0x40
     808:	3c000000 	stccc	0, cr0, [r0], {-0}
     80c:	16200004 	strtne	r0, [r0], -r4
     810:	01000000 	mrseq	r0, (UNDEF: 0)
     814:	0004f49c 	muleq	r4, ip, r4
     818:	05171400 	ldreq	r1, [r7, #-1024]	; 0xfffffc00
     81c:	5d010000 	stcpl	0, cr0, [r1, #-0]
     820:	00033a01 	andeq	r3, r3, r1, lsl #20
     824:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     828:	048a1700 	streq	r1, [sl], #1792	; 0x700
     82c:	43010000 	movwmi	r0, #4096	; 0x1000
     830:	00009701 	andeq	r9, r0, r1, lsl #14
     834:	0003fa00 	andeq	pc, r3, r0, lsl #20
     838:	00004220 	andeq	r4, r0, r0, lsr #4
     83c:	3c9c0100 	ldfccs	f0, [ip], {0}
     840:	14000005 	strne	r0, [r0], #-5
     844:	00000517 	andeq	r0, r0, r7, lsl r5
     848:	3a014301 	bcc	51454 <startup-0x1ffaebac>
     84c:	02000003 	andeq	r0, r0, #3
     850:	0d146c91 	ldceq	12, cr6, [r4, #-580]	; 0xfffffdbc
     854:	01000000 	mrseq	r0, (UNDEF: 0)
     858:	00a20143 	adceq	r0, r2, r3, asr #2
     85c:	91020000 	mrsls	r0, (UNDEF: 2)
     860:	04a0156a 	strteq	r1, [r0], #1386	; 0x56a
     864:	45010000 	strmi	r0, [r1, #-0]
     868:	00009701 	andeq	r9, r0, r1, lsl #14
     86c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     870:	04e41300 	strbteq	r1, [r4], #768	; 0x300
     874:	15010000 	strne	r0, [r1, #-0]
     878:	0003b401 	andeq	fp, r3, r1, lsl #8
     87c:	00004620 	andeq	r4, r0, r0, lsr #12
     880:	809c0100 	addshi	r0, ip, r0, lsl #2
     884:	14000005 	strne	r0, [r0], #-5
     888:	00000517 	andeq	r0, r0, r7, lsl r5
     88c:	3a011501 	bcc	45c98 <startup-0x1ffba368>
     890:	02000003 	andeq	r0, r0, #3
     894:	0d146c91 	ldceq	12, cr6, [r4, #-580]	; 0xfffffdbc
     898:	01000000 	mrseq	r0, (UNDEF: 0)
     89c:	00a20115 	adceq	r0, r2, r5, lsl r1
     8a0:	91020000 	mrsls	r0, (UNDEF: 2)
     8a4:	6d74186a 	ldclvs	8, cr1, [r4, #-424]!	; 0xfffffe58
     8a8:	17010070 	smlsdxne	r1, r0, r0, r0
     8ac:	0000cd01 	andeq	ip, r0, r1, lsl #26
     8b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     8b4:	03a11900 			; <UNDEFINED> instruction: 0x03a11900
     8b8:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
     8bc:	20000380 	andcs	r0, r0, r0, lsl #7
     8c0:	00000034 	andeq	r0, r0, r4, lsr r0
     8c4:	05a49c01 	streq	r9, [r4, #3073]!	; 0xc01
     8c8:	aa1a0000 	bge	6808d0 <startup-0x1f97f730>
     8cc:	01000004 	tsteq	r0, r4
     8d0:	0005a4fe 	strdeq	sl, [r5], -lr
     8d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     8d8:	cd041600 	stcgt	6, cr1, [r4, #-0]
     8dc:	19000002 	stmdbne	r0, {r1}
     8e0:	000003dd 	ldrdeq	r0, [r0], -sp
     8e4:	0268ca01 	rsbeq	ip, r8, #4096	; 0x1000
     8e8:	01182000 	tsteq	r8, r0
     8ec:	9c010000 	stcls	0, cr0, [r1], {-0}
     8f0:	00000606 	andeq	r0, r0, r6, lsl #12
     8f4:	0005171a 	andeq	r1, r5, sl, lsl r7
     8f8:	3aca0100 	bcc	ff280d00 <APBAHBPrescTable+0xdf27f8f0>
     8fc:	02000003 	andeq	r0, r0, #3
     900:	aa1a6491 	bge	699b4c <startup-0x1f9664b4>
     904:	01000004 	tsteq	r0, r4
     908:	0005a4ca 	andeq	sl, r5, sl, asr #9
     90c:	60910200 	addsvs	r0, r1, r0, lsl #4
     910:	0003711b 	andeq	r7, r3, fp, lsl r1
     914:	c2cc0100 	sbcgt	r0, ip, #0, 2
     918:	02000000 	andeq	r0, r0, #0
     91c:	701c7491 	mulsvc	ip, r1, r4
     920:	0100736f 	tsteq	r0, pc, ror #6
     924:	0000c2cc 	andeq	ip, r0, ip, asr #5
     928:	70910200 	addsvc	r0, r1, r0, lsl #4
     92c:	0005011b 	andeq	r0, r5, fp, lsl r1
     930:	c2cc0100 	sbcgt	r0, ip, #0, 2
     934:	02000000 	andeq	r0, r0, #0
     938:	1d006c91 	stcne	12, cr6, [r0, #-580]	; 0xfffffdbc
     93c:	00000474 	andeq	r0, r0, r4, ror r4
     940:	00f87f01 	rscseq	r7, r8, r1, lsl #30
     944:	01702000 	cmneq	r0, r0
     948:	9c010000 	stcls	0, cr0, [r1], {-0}
     94c:	0005171a 	andeq	r1, r5, sl, lsl r7
     950:	3a7f0100 	bcc	1fc0d58 <startup-0x1e03f2a8>
     954:	02000003 	andeq	r0, r0, #3
     958:	00007491 	muleq	r0, r1, r4
     95c:	00000e5f 	andeq	r0, r0, pc, asr lr
     960:	03340004 	teqeq	r4, #4
     964:	01040000 	mrseq	r0, (UNDEF: 4)
     968:	00000163 	andeq	r0, r0, r3, ror #2
     96c:	00075c0c 	andeq	r5, r7, ip, lsl #24
     970:	00024800 	andeq	r4, r2, r0, lsl #16
     974:	00060800 	andeq	r0, r6, r0, lsl #16
     978:	000cf020 	andeq	pc, ip, r0, lsr #32
     97c:	00049e00 	andeq	r9, r4, r0, lsl #28
     980:	06010200 	streq	r0, [r1], -r0, lsl #4
     984:	00000157 	andeq	r0, r0, r7, asr r1
     988:	00048003 	andeq	r8, r4, r3
     98c:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
     990:	02000000 	andeq	r0, r0, #0
     994:	01550801 	cmpeq	r5, r1, lsl #16
     998:	02020000 	andeq	r0, r2, #0
     99c:	00001605 	andeq	r1, r0, r5, lsl #12
     9a0:	003e0300 	eorseq	r0, lr, r0, lsl #6
     9a4:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
     9a8:	00000050 	andeq	r0, r0, r0, asr r0
     9ac:	23070202 	movwcs	r0, #29186	; 0x7202
     9b0:	03000002 	movweq	r0, #2
     9b4:	0000023e 	andeq	r0, r0, lr, lsr r2
     9b8:	00624d02 	rsbeq	r4, r2, r2, lsl #26
     9bc:	04020000 	streq	r0, [r2], #-0
     9c0:	0000fb05 	andeq	pc, r0, r5, lsl #22
     9c4:	00330300 	eorseq	r0, r3, r0, lsl #6
     9c8:	4f020000 	svcmi	0x00020000
     9cc:	00000074 	andeq	r0, r0, r4, ror r0
     9d0:	00070402 	andeq	r0, r7, r2, lsl #8
     9d4:	02000002 	andeq	r0, r0, #2
     9d8:	00f60508 	rscseq	r0, r6, r8, lsl #10
     9dc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     9e0:	0001fb07 	andeq	pc, r1, r7, lsl #22
     9e4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
     9e8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     9ec:	05070402 	streq	r0, [r7, #-1026]	; 0xfffffbfe
     9f0:	03000002 	movweq	r0, #2
     9f4:	00000482 	andeq	r0, r0, r2, lsl #9
     9f8:	002c1803 	eoreq	r1, ip, r3, lsl #16
     9fc:	97050000 	strls	r0, [r5, -r0]
     a00:	06000000 	streq	r0, [r0], -r0
     a04:	000000a2 	andeq	r0, r0, r2, lsr #1
     a08:	00004003 	andeq	r4, r0, r3
     a0c:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
     a10:	03000000 	movweq	r0, #0
     a14:	00000240 	andeq	r0, r0, r0, asr #4
     a18:	00572c03 	subseq	r2, r7, r3, lsl #24
     a1c:	b7060000 	strlt	r0, [r6, -r0]
     a20:	03000000 	movweq	r0, #0
     a24:	00000035 	andeq	r0, r0, r5, lsr r0
     a28:	00693003 	rsbeq	r3, r9, r3
     a2c:	c7060000 	strgt	r0, [r6, -r0]
     a30:	07000000 	streq	r0, [r0, -r0]
     a34:	000000c7 	andeq	r0, r0, r7, asr #1
     a38:	000000e7 	andeq	r0, r0, r7, ror #1
     a3c:	00009008 	andeq	r9, r0, r8
     a40:	09000100 	stmdbeq	r0, {r8}
     a44:	0000034b 	andeq	r0, r0, fp, asr #6
     a48:	c206fa04 	andgt	pc, r6, #4, 20	; 0x4000
     a4c:	0a000000 	beq	a54 <startup-0x1ffff5ac>
     a50:	0000028b 	andeq	r0, r0, fp, lsl #5
     a54:	00c73b05 	sbceq	r3, r7, r5, lsl #22
     a58:	070b0000 	streq	r0, [fp, -r0]
     a5c:	00003701 	andeq	r3, r0, r1, lsl #14
     a60:	035d0600 	cmpeq	sp, #0, 12
     a64:	00000119 	andeq	r0, r0, r9, lsl r1
     a68:	0003bc0c 	andeq	fp, r3, ip, lsl #24
     a6c:	530d0000 	movwpl	r0, #53248	; 0xd000
     a70:	01005445 	tsteq	r0, r5, asr #8
     a74:	0aad0e00 	beq	feb4427c <APBAHBPrescTable+0xdeb42e6c>
     a78:	5d060000 	stcpl	0, cr0, [r6, #-0]
     a7c:	0000fe03 	andeq	pc, r0, r3, lsl #28
     a80:	0c3f0e00 	ldceq	14, cr0, [pc], #-0	; a88 <startup-0x1ffff578>
     a84:	5d060000 	stcpl	0, cr0, [r6, #-0]
     a88:	0000fe03 	andeq	pc, r0, r3, lsl #28
     a8c:	01070b00 	tsteq	r7, r0, lsl #22
     a90:	00000037 	andeq	r0, r0, r7, lsr r0
     a94:	4c035f06 	stcmi	15, cr5, [r3], {6}
     a98:	0c000001 	stceq	0, cr0, [r0], {1}
     a9c:	00000236 	andeq	r0, r0, r6, lsr r2
     aa0:	00610c00 	rsbeq	r0, r1, r0, lsl #24
     aa4:	00010000 	andeq	r0, r1, r0
     aa8:	000a020e 	andeq	r0, sl, lr, lsl #4
     aac:	035f0600 	cmpeq	pc, #0, 12
     ab0:	00000131 	andeq	r0, r0, r1, lsr r1
     ab4:	3701070b 	strcc	r0, [r1, -fp, lsl #14]
     ab8:	06000000 	streq	r0, [r0], -r0
     abc:	01730362 	cmneq	r3, r2, ror #6
     ac0:	9d0c0000 	stcls	0, cr0, [ip, #-0]
     ac4:	00000009 	andeq	r0, r0, r9
     ac8:	000d1e0c 	andeq	r1, sp, ip, lsl #28
     acc:	0e000100 	adfeqs	f0, f0, f0
     ad0:	000007fd 	strdeq	r0, [r0], -sp
     ad4:	58036206 	stmdapl	r3, {r1, r2, r9, sp, lr}
     ad8:	0f000001 	svceq	0x00000001
     adc:	06640698 			; <UNDEFINED> instruction: 0x06640698
     ae0:	00000342 	andeq	r0, r0, r2, asr #6
     ae4:	00524310 	subseq	r4, r2, r0, lsl r3
     ae8:	d2066606 	andle	r6, r6, #6291456	; 0x600000
     aec:	00000000 	andeq	r0, r0, r0
     af0:	0007e211 	andeq	lr, r7, r1, lsl r2
     af4:	06670600 	strbteq	r0, [r7], -r0, lsl #12
     af8:	000000d2 	ldrdeq	r0, [r0], -r2
     afc:	0a5b1104 	beq	16c4f14 <startup-0x1e93b0ec>
     b00:	68060000 	stmdavs	r6, {}	; <UNPREDICTABLE>
     b04:	0000d206 	andeq	sp, r0, r6, lsl #4
     b08:	43100800 	tstmi	r0, #0, 16
     b0c:	06005249 	streq	r5, [r0], -r9, asr #4
     b10:	00d20669 	sbcseq	r0, r2, r9, ror #12
     b14:	110c0000 	mrsne	r0, (UNDEF: 12)
     b18:	00000690 	muleq	r0, r0, r6
     b1c:	d2066a06 	andle	r6, r6, #24576	; 0x6000
     b20:	10000000 	andne	r0, r0, r0
     b24:	000c1c11 	andeq	r1, ip, r1, lsl ip
     b28:	066b0600 	strbteq	r0, [fp], -r0, lsl #12
     b2c:	000000d2 	ldrdeq	r0, [r0], -r2
     b30:	0b331114 	bleq	cc4f88 <startup-0x1f33b078>
     b34:	6c060000 	stcvs	0, cr0, [r6], {-0}
     b38:	0000d206 	andeq	sp, r0, r6, lsl #4
     b3c:	60111800 	andsvs	r1, r1, r0, lsl #16
     b40:	0600000a 	streq	r0, [r0], -sl
     b44:	00c7066d 	sbceq	r0, r7, sp, ror #12
     b48:	111c0000 	tstne	ip, r0
     b4c:	00000cd8 	ldrdeq	r0, [r0], -r8
     b50:	d2066e06 	andle	r6, r6, #6, 28	; 0x60
     b54:	20000000 	andcs	r0, r0, r0
     b58:	0006d011 	andeq	sp, r6, r1, lsl r0
     b5c:	066f0600 	strbteq	r0, [pc], -r0, lsl #12
     b60:	000000d2 	ldrdeq	r0, [r0], -r2
     b64:	0a6a1124 	beq	1a84ffc <startup-0x1e57b004>
     b68:	70060000 	andvc	r0, r6, r0
     b6c:	0000d706 	andeq	sp, r0, r6, lsl #14
     b70:	46112800 	ldrmi	r2, [r1], -r0, lsl #16
     b74:	0600000d 	streq	r0, [r0], -sp
     b78:	00d20671 	sbcseq	r0, r2, r1, ror r6
     b7c:	11300000 	teqne	r0, r0
     b80:	00000c50 	andeq	r0, r0, r0, asr ip
     b84:	d2067206 	andle	r7, r6, #1610612736	; 0x60000000
     b88:	34000000 	strcc	r0, [r0], #-0
     b8c:	0009de11 	andeq	sp, r9, r1, lsl lr
     b90:	06730600 	ldrbteq	r0, [r3], -r0, lsl #12
     b94:	000000d2 	ldrdeq	r0, [r0], -r2
     b98:	0a741138 	beq	1d05080 <startup-0x1e2faf80>
     b9c:	74060000 	strvc	r0, [r6], #-0
     ba0:	0000c706 	andeq	ip, r0, r6, lsl #14
     ba4:	48113c00 	ldmdami	r1, {sl, fp, ip, sp}
     ba8:	0600000c 	streq	r0, [r0], -ip
     bac:	00d20675 	sbcseq	r0, r2, r5, ror r6
     bb0:	11400000 	mrsne	r0, (UNDEF: 64)
     bb4:	00000b2b 	andeq	r0, r0, fp, lsr #22
     bb8:	d2067606 	andle	r7, r6, #6291456	; 0x600000
     bbc:	44000000 	strmi	r0, [r0], #-0
     bc0:	000a7e11 	andeq	r7, sl, r1, lsl lr
     bc4:	06770600 	ldrbteq	r0, [r7], -r0, lsl #12
     bc8:	000000d7 	ldrdeq	r0, [r0], -r7
     bcc:	06481148 	strbeq	r1, [r8], -r8, asr #2
     bd0:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
     bd4:	0000d206 	andeq	sp, r0, r6, lsl #4
     bd8:	f8115000 			; <UNDEFINED> instruction: 0xf8115000
     bdc:	06000009 	streq	r0, [r0], -r9
     be0:	00d20679 	sbcseq	r0, r2, r9, ror r6
     be4:	11540000 	cmpne	r4, r0
     be8:	00000cce 	andeq	r0, r0, lr, asr #25
     bec:	d2067a06 	andle	r7, r6, #24576	; 0x6000
     bf0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     bf4:	000a8811 	andeq	r8, sl, r1, lsl r8
     bf8:	067b0600 	ldrbteq	r0, [fp], -r0, lsl #12
     bfc:	000000c7 	andeq	r0, r0, r7, asr #1
     c00:	056d115c 	strbeq	r1, [sp, #-348]!	; 0xfffffea4
     c04:	7c060000 	stcvc	0, cr0, [r6], {-0}
     c08:	0000d206 	andeq	sp, r0, r6, lsl #4
     c0c:	50116000 	andspl	r6, r1, r0
     c10:	06000009 	streq	r0, [r0], -r9
     c14:	00d2067d 	sbcseq	r0, r2, sp, ror r6
     c18:	11640000 	cmnne	r4, r0
     c1c:	00000a92 	muleq	r0, r2, sl
     c20:	d7067e06 	strle	r7, [r6, -r6, lsl #28]
     c24:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     c28:	000cf511 	andeq	pc, ip, r1, lsl r5	; <UNPREDICTABLE>
     c2c:	067f0600 	ldrbteq	r0, [pc], -r0, lsl #12
     c30:	000000d2 	ldrdeq	r0, [r0], -r2
     c34:	53431070 	movtpl	r1, #12400	; 0x3070
     c38:	80060052 	andhi	r0, r6, r2, asr r0
     c3c:	0000d206 	andeq	sp, r0, r6, lsl #4
     c40:	9c117400 	cfldrsls	mvf7, [r1], {-0}
     c44:	0600000a 	streq	r0, [r0], -sl
     c48:	00d70681 	sbcseq	r0, r7, r1, lsl #13
     c4c:	11780000 	cmnne	r8, r0
     c50:	00000cc8 	andeq	r0, r0, r8, asr #25
     c54:	d2068206 	andle	r8, r6, #1610612736	; 0x60000000
     c58:	80000000 	andhi	r0, r0, r0
     c5c:	0008fd11 	andeq	pc, r8, r1, lsl sp	; <UNPREDICTABLE>
     c60:	06830600 	streq	r0, [r3], r0, lsl #12
     c64:	000000d2 	ldrdeq	r0, [r0], -r2
     c68:	0a551184 	beq	1545280 <startup-0x1eabad80>
     c6c:	84060000 	strhi	r0, [r6], #-0
     c70:	0000d206 	andeq	sp, r0, r6, lsl #4
     c74:	7a118800 	bvc	462c7c <startup-0x1fb9d384>
     c78:	06000006 	streq	r0, [r0], -r6
     c7c:	00d20685 	sbcseq	r0, r2, r5, lsl #13
     c80:	118c0000 	orrne	r0, ip, r0
     c84:	00000cec 	andeq	r0, r0, ip, ror #25
     c88:	d2068606 	andle	r8, r6, #6291456	; 0x600000
     c8c:	90000000 	andls	r0, r0, r0
     c90:	00069911 	andeq	r9, r6, r1, lsl r9
     c94:	06870600 	streq	r0, [r7], r0, lsl #12
     c98:	000000d2 	ldrdeq	r0, [r0], -r2
     c9c:	970e0094 			; <UNDEFINED> instruction: 0x970e0094
     ca0:	06000008 	streq	r0, [r0], -r8
     ca4:	017f0689 	cmneq	pc, r9, lsl #13
     ca8:	10120000 	andsne	r0, r2, r0
     cac:	03873007 	orreq	r3, r7, #7
     cb0:	ad130000 	ldcge	0, cr0, [r3, #-0]
     cb4:	07000005 	streq	r0, [r0, -r5]
     cb8:	0000c732 	andeq	ip, r0, r2, lsr r7
     cbc:	41130000 	tstmi	r3, r0
     cc0:	07000008 	streq	r0, [r0, -r8]
     cc4:	0000c733 	andeq	ip, r0, r3, lsr r7
     cc8:	a2130400 	andsge	r0, r3, #0, 8
     ccc:	0700000b 	streq	r0, [r0, -fp]
     cd0:	0000c734 	andeq	ip, r0, r4, lsr r7
     cd4:	a9130800 	ldmdbge	r3, {fp}
     cd8:	07000006 	streq	r0, [r0, -r6]
     cdc:	0000c735 	andeq	ip, r0, r5, lsr r7
     ce0:	03000c00 	movweq	r0, #3072	; 0xc00
     ce4:	00000d34 	andeq	r0, r0, r4, lsr sp
     ce8:	034e3607 	movteq	r3, #58887	; 0xe607
     cec:	a7070000 	strge	r0, [r7, -r0]
     cf0:	a2000000 	andge	r0, r0, #0
     cf4:	08000003 	stmdaeq	r0, {r0, r1}
     cf8:	00000090 	muleq	r0, r0, r0
     cfc:	9205000f 	andls	r0, r5, #15
     d00:	06000003 	streq	r0, [r0], -r3
     d04:	000003a2 	andeq	r0, r0, r2, lsr #7
     d08:	000bb214 	andeq	fp, fp, r4, lsl r2
     d0c:	a7990100 	ldrge	r0, [r9, r0, lsl #2]
     d10:	05000003 	streq	r0, [r0, #-3]
     d14:	00141003 	andseq	r1, r4, r3
     d18:	06171520 	ldreq	r1, [r7], -r0, lsr #10
     d1c:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
     d20:	0012d80c 	andseq	sp, r2, ip, lsl #16
     d24:	00002020 	andeq	r2, r0, r0, lsr #32
     d28:	e39c0100 	orrs	r0, ip, #0, 2
     d2c:	16000003 	strne	r0, [r0], -r3
     d30:	0000062d 	andeq	r0, r0, sp, lsr #12
     d34:	970c5e01 	strls	r5, [ip, -r1, lsl #28]
     d38:	02000000 	andeq	r0, r0, #0
     d3c:	17007791 			; <UNDEFINED> instruction: 0x17007791
     d40:	00000c38 	andeq	r0, r0, r8, lsr ip
     d44:	250c3c01 	strcs	r3, [ip, #-3073]	; 0xfffff3ff
     d48:	94000001 	strls	r0, [r0], #-1
     d4c:	44200012 	strtmi	r0, [r0], #-18	; 0xffffffee
     d50:	01000000 	mrseq	r0, (UNDEF: 0)
     d54:	00041c9c 	muleq	r4, ip, ip
     d58:	062d1600 	strteq	r1, [sp], -r0, lsl #12
     d5c:	3c010000 	stccc	0, cr0, [r1], {-0}
     d60:	0000970c 	andeq	r9, r0, ip, lsl #14
     d64:	6f910200 	svcvs	0x00910200
     d68:	0004a018 	andeq	sl, r4, r8, lsl r0
     d6c:	0c3e0100 	ldfeqs	f0, [lr], #-0
     d70:	00000125 	andeq	r0, r0, r5, lsr #2
     d74:	00779102 	rsbseq	r9, r7, r2, lsl #2
     d78:	00068219 	andeq	r8, r6, r9, lsl r2
     d7c:	0c280100 	stfeqs	f0, [r8], #-0
     d80:	20001278 	andcs	r1, r0, r8, ror r2
     d84:	0000001c 	andeq	r0, r0, ip, lsl r0
     d88:	a6179c01 	ldrge	r9, [r7], -r1, lsl #24
     d8c:	0100000a 	tsteq	r0, sl
     d90:	01190bfb 			; <UNDEFINED> instruction: 0x01190bfb
     d94:	11f40000 	mvnsne	r0, r0
     d98:	00842000 	addeq	r2, r4, r0
     d9c:	9c010000 	stcls	0, cr0, [r1], {-0}
     da0:	00000485 	andeq	r0, r0, r5, lsl #9
     da4:	00086616 	andeq	r6, r8, r6, lsl r6
     da8:	0bfb0100 	bleq	ffec11b0 <APBAHBPrescTable+0xdfebfda0>
     dac:	00000097 	muleq	r0, r7, r0
     db0:	1a679102 	bne	19e51c0 <startup-0x1e61ae40>
     db4:	00706d74 	rsbseq	r6, r0, r4, ror sp
     db8:	c70bfd01 	strgt	pc, [fp, -r1, lsl #26]
     dbc:	02000000 	andeq	r0, r0, #0
     dc0:	a3186c91 	tstge	r8, #37120	; 0x9100
     dc4:	01000005 	tsteq	r0, r5
     dc8:	00c70bfe 	strdeq	r0, [r7], #190	; 0xbe
     dcc:	91020000 	mrsls	r0, (UNDEF: 2)
     dd0:	04a01874 	strteq	r1, [r0], #2164	; 0x874
     dd4:	ff010000 			; <UNDEFINED> instruction: 0xff010000
     dd8:	0001190b 	andeq	r1, r1, fp, lsl #18
     ddc:	73910200 	orrsvc	r0, r1, #0, 4
     de0:	0d111500 	cfldr32eq	mvfx1, [r1, #-0]
     de4:	d6010000 	strle	r0, [r1], -r0
     de8:	0011a40b 	andseq	sl, r1, fp, lsl #8
     dec:	00005020 	andeq	r5, r0, r0, lsr #32
     df0:	ba9c0100 	blt	fe7011f8 <APBAHBPrescTable+0xde6ffde8>
     df4:	16000004 	strne	r0, [r0], -r4
     df8:	0000062d 	andeq	r0, r0, sp, lsr #12
     dfc:	970bd601 	strls	sp, [fp, -r1, lsl #12]
     e00:	02000000 	andeq	r0, r0, #0
     e04:	d9167791 	ldmdble	r6, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
     e08:	01000007 	tsteq	r0, r7
     e0c:	014c0bd6 	ldrdeq	r0, [ip, #-182]	; 0xffffff4a
     e10:	91020000 	mrsls	r0, (UNDEF: 2)
     e14:	e6150076 			; <UNDEFINED> instruction: 0xe6150076
     e18:	01000009 	tsteq	r0, r9
     e1c:	11680a9e 			; <UNDEFINED> instruction: 0x11680a9e
     e20:	003c2000 	eorseq	r2, ip, r0
     e24:	9c010000 	stcls	0, cr0, [r1], {-0}
     e28:	000004e0 	andeq	r0, r0, r0, ror #9
     e2c:	000b3c16 	andeq	r3, fp, r6, lsl ip
     e30:	0a9e0100 	beq	fe781238 <APBAHBPrescTable+0xde77fe28>
     e34:	00000097 	muleq	r0, r7, r0
     e38:	00779102 	rsbseq	r9, r7, r2, lsl #2
     e3c:	00065d15 	andeq	r5, r6, r5, lsl sp
     e40:	0a860100 	beq	fe181248 <APBAHBPrescTable+0xde17fe38>
     e44:	20001128 	andcs	r1, r0, r8, lsr #2
     e48:	00000040 	andeq	r0, r0, r0, asr #32
     e4c:	05159c01 	ldreq	r9, [r5, #-3073]	; 0xfffff3ff
     e50:	84160000 	ldrhi	r0, [r6], #-0
     e54:	0100000c 	tsteq	r0, ip
     e58:	00c70a86 	sbceq	r0, r7, r6, lsl #21
     e5c:	91020000 	mrsls	r0, (UNDEF: 2)
     e60:	07d91674 			; <UNDEFINED> instruction: 0x07d91674
     e64:	86010000 	strhi	r0, [r1], -r0
     e68:	00014c0a 	andeq	r4, r1, sl, lsl #24
     e6c:	73910200 	orrsvc	r0, r1, #0, 4
     e70:	0b5c1500 	bleq	1706278 <startup-0x1e8f9d88>
     e74:	52010000 	andpl	r0, r1, #0
     e78:	0010e80a 	andseq	lr, r0, sl, lsl #16
     e7c:	00004020 	andeq	r4, r0, r0, lsr #32
     e80:	4a9c0100 	bmi	fe701288 <APBAHBPrescTable+0xde6ffe78>
     e84:	16000005 	strne	r0, [r0], -r5
     e88:	00000850 	andeq	r0, r0, r0, asr r8
     e8c:	c70a5201 	strgt	r5, [sl, -r1, lsl #4]
     e90:	02000000 	andeq	r0, r0, #0
     e94:	d9167491 	ldmdble	r6, {r0, r4, r7, sl, ip, sp, lr}
     e98:	01000007 	tsteq	r0, r7
     e9c:	014c0a52 	cmpeq	ip, r2, asr sl
     ea0:	91020000 	mrsls	r0, (UNDEF: 2)
     ea4:	58150073 	ldmdapl	r5, {r0, r1, r4, r5, r6}
     ea8:	0100000c 	tsteq	r0, ip
     eac:	10a80a19 	adcne	r0, r8, r9, lsl sl
     eb0:	00402000 	subeq	r2, r0, r0
     eb4:	9c010000 	stcls	0, cr0, [r1], {-0}
     eb8:	0000057f 	andeq	r0, r0, pc, ror r5
     ebc:	00095a16 	andeq	r5, r9, r6, lsl sl
     ec0:	0a190100 	beq	6412c8 <startup-0x1f9bed38>
     ec4:	000000c7 	andeq	r0, r0, r7, asr #1
     ec8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     ecc:	000007d9 	ldrdeq	r0, [r0], -r9
     ed0:	4c0a1901 			; <UNDEFINED> instruction: 0x4c0a1901
     ed4:	02000001 	andeq	r0, r0, #1
     ed8:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     edc:	00000908 	andeq	r0, r0, r8, lsl #18
     ee0:	6809fb01 	stmdavs	r9, {r0, r8, r9, fp, ip, sp, lr, pc}
     ee4:	40200010 	eormi	r0, r0, r0, lsl r0
     ee8:	01000000 	mrseq	r0, (UNDEF: 0)
     eec:	0005b49c 	muleq	r5, ip, r4
     ef0:	09411600 	stmdbeq	r1, {r9, sl, ip}^
     ef4:	fb010000 	blx	40efe <startup-0x1ffbf102>
     ef8:	0000c709 	andeq	ip, r0, r9, lsl #14
     efc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f00:	0007d916 	andeq	sp, r7, r6, lsl r9
     f04:	09fb0100 	ldmibeq	fp!, {r8}^
     f08:	0000014c 	andeq	r0, r0, ip, asr #2
     f0c:	00739102 	rsbseq	r9, r3, r2, lsl #2
     f10:	000d6915 	andeq	r6, sp, r5, lsl r9
     f14:	09db0100 	ldmibeq	fp, {r8}^
     f18:	20001028 	andcs	r1, r0, r8, lsr #32
     f1c:	00000040 	andeq	r0, r0, r0, asr #32
     f20:	05e99c01 	strbeq	r9, [r9, #3073]!	; 0xc01
     f24:	39160000 	ldmdbcc	r6, {}	; <UNPREDICTABLE>
     f28:	01000006 	tsteq	r0, r6
     f2c:	00c709db 	ldrdeq	r0, [r7], #155	; 0x9b
     f30:	91020000 	mrsls	r0, (UNDEF: 2)
     f34:	07d91674 			; <UNDEFINED> instruction: 0x07d91674
     f38:	db010000 	blle	40f40 <startup-0x1ffbf0c0>
     f3c:	00014c09 	andeq	r4, r1, r9, lsl #24
     f40:	73910200 	orrsvc	r0, r1, #0, 4
     f44:	0a1e1500 	beq	78634c <startup-0x1f879cb4>
     f48:	aa010000 	bge	40f50 <startup-0x1ffbf0b0>
     f4c:	000fe809 	andeq	lr, pc, r9, lsl #16
     f50:	00004020 	andeq	r4, r0, r0, lsr #32
     f54:	1e9c0100 	fmlnee	f0, f4, f0
     f58:	16000006 	strne	r0, [r0], -r6
     f5c:	00000c84 	andeq	r0, r0, r4, lsl #25
     f60:	c709aa01 	strgt	sl, [r9, -r1, lsl #20]
     f64:	02000000 	andeq	r0, r0, #0
     f68:	d9167491 	ldmdble	r6, {r0, r4, r7, sl, ip, sp, lr}
     f6c:	01000007 	tsteq	r0, r7
     f70:	014c09aa 	smlaltbeq	r0, ip, sl, r9
     f74:	91020000 	mrsls	r0, (UNDEF: 2)
     f78:	d7150073 			; <UNDEFINED> instruction: 0xd7150073
     f7c:	01000005 	tsteq	r0, r5
     f80:	0fa8097b 	svceq	0x00a8097b
     f84:	00402000 	subeq	r2, r0, r0
     f88:	9c010000 	stcls	0, cr0, [r1], {-0}
     f8c:	00000653 	andeq	r0, r0, r3, asr r6
     f90:	00085016 	andeq	r5, r8, r6, lsl r0
     f94:	097b0100 	ldmdbeq	fp!, {r8}^
     f98:	000000c7 	andeq	r0, r0, r7, asr #1
     f9c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     fa0:	000007d9 	ldrdeq	r0, [r0], -r9
     fa4:	4c097b01 			; <UNDEFINED> instruction: 0x4c097b01
     fa8:	02000001 	andeq	r0, r0, #1
     fac:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     fb0:	000006e9 	andeq	r0, r0, r9, ror #13
     fb4:	68094501 	stmdavs	r9, {r0, r8, sl, lr}
     fb8:	4020000f 	eormi	r0, r0, pc
     fbc:	01000000 	mrseq	r0, (UNDEF: 0)
     fc0:	0006889c 	muleq	r6, ip, r8
     fc4:	095a1600 	ldmdbeq	sl, {r9, sl, ip}^
     fc8:	45010000 	strmi	r0, [r1, #-0]
     fcc:	0000c709 	andeq	ip, r0, r9, lsl #14
     fd0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     fd4:	0007d916 	andeq	sp, r7, r6, lsl r9
     fd8:	09450100 	stmdbeq	r5, {r8}^
     fdc:	0000014c 	andeq	r0, r0, ip, asr #2
     fe0:	00739102 	rsbseq	r9, r3, r2, lsl #2
     fe4:	000b4515 	andeq	r4, fp, r5, lsl r5
     fe8:	092a0100 	stmdbeq	sl!, {r8}
     fec:	20000f28 	andcs	r0, r0, r8, lsr #30
     ff0:	00000040 	andeq	r0, r0, r0, asr #32
     ff4:	06bd9c01 	ldrteq	r9, [sp], r1, lsl #24
     ff8:	41160000 	tstmi	r6, r0
     ffc:	01000009 	tsteq	r0, r9
    1000:	00c7092a 	sbceq	r0, r7, sl, lsr #18
    1004:	91020000 	mrsls	r0, (UNDEF: 2)
    1008:	07d91674 			; <UNDEFINED> instruction: 0x07d91674
    100c:	2a010000 	bcs	41014 <startup-0x1ffbefec>
    1010:	00014c09 	andeq	r4, r1, r9, lsl #24
    1014:	73910200 	orrsvc	r0, r1, #0, 4
    1018:	07171500 	ldreq	r1, [r7, -r0, lsl #10]
    101c:	0d010000 	stceq	0, cr0, [r1, #-0]
    1020:	000ee809 	andeq	lr, lr, r9, lsl #16
    1024:	00004020 	andeq	r4, r0, r0, lsr #32
    1028:	f29c0100 	vaddw.s16	q0, q6, d0
    102c:	16000006 	strne	r0, [r0], -r6
    1030:	00000639 	andeq	r0, r0, r9, lsr r6
    1034:	c7090d01 	strgt	r0, [r9, -r1, lsl #26]
    1038:	02000000 	andeq	r0, r0, #0
    103c:	d9167491 	ldmdble	r6, {r0, r4, r7, sl, ip, sp, lr}
    1040:	01000007 	tsteq	r0, r7
    1044:	014c090d 	cmpeq	ip, sp, lsl #18
    1048:	91020000 	mrsls	r0, (UNDEF: 2)
    104c:	05150073 	ldreq	r0, [r5, #-115]	; 0xffffff8d
    1050:	0100000c 	tsteq	r0, ip
    1054:	0ea808e3 	cdpeq	8, 10, cr0, cr8, cr3, {7}
    1058:	00402000 	subeq	r2, r0, r0
    105c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1060:	00000727 	andeq	r0, r0, r7, lsr #14
    1064:	000c8416 	andeq	r8, ip, r6, lsl r4
    1068:	08e30100 	stmiaeq	r3!, {r8}^
    106c:	000000c7 	andeq	r0, r0, r7, asr #1
    1070:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1074:	000007d9 	ldrdeq	r0, [r0], -r9
    1078:	4c08e301 	stcmi	3, cr14, [r8], {1}
    107c:	02000001 	andeq	r0, r0, #1
    1080:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
    1084:	00000cfa 	strdeq	r0, [r0], -sl
    1088:	6808af01 	stmdavs	r8, {r0, r8, r9, sl, fp, sp, pc}
    108c:	4020000e 	eormi	r0, r0, lr
    1090:	01000000 	mrseq	r0, (UNDEF: 0)
    1094:	00075c9c 	muleq	r7, ip, ip
    1098:	08501600 	ldmdaeq	r0, {r9, sl, ip}^
    109c:	af010000 	svcge	0x00010000
    10a0:	0000c708 	andeq	ip, r0, r8, lsl #14
    10a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    10a8:	0007d916 	andeq	sp, r7, r6, lsl r9
    10ac:	08af0100 	stmiaeq	pc!, {r8}	; <UNPREDICTABLE>
    10b0:	0000014c 	andeq	r0, r0, ip, asr #2
    10b4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    10b8:	000d8615 	andeq	r8, sp, r5, lsl r6
    10bc:	08760100 	ldmdaeq	r6!, {r8}^
    10c0:	20000e28 	andcs	r0, r0, r8, lsr #28
    10c4:	00000040 	andeq	r0, r0, r0, asr #32
    10c8:	07919c01 	ldreq	r9, [r1, r1, lsl #24]
    10cc:	5a160000 	bpl	5810d4 <startup-0x1fa7ef2c>
    10d0:	01000009 	tsteq	r0, r9
    10d4:	00c70876 	sbceq	r0, r7, r6, ror r8
    10d8:	91020000 	mrsls	r0, (UNDEF: 2)
    10dc:	07d91674 			; <UNDEFINED> instruction: 0x07d91674
    10e0:	76010000 	strvc	r0, [r1], -r0
    10e4:	00014c08 	andeq	r4, r1, r8, lsl #24
    10e8:	73910200 	orrsvc	r0, r1, #0, 4
    10ec:	06b91500 	ldrteq	r1, [r9], r0, lsl #10
    10f0:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    10f4:	000de808 	andeq	lr, sp, r8, lsl #16
    10f8:	00004020 	andeq	r4, r0, r0, lsr #32
    10fc:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
    1100:	16000007 	strne	r0, [r0], -r7
    1104:	00000941 	andeq	r0, r0, r1, asr #18
    1108:	c7085801 	strgt	r5, [r8, -r1, lsl #16]
    110c:	02000000 	andeq	r0, r0, #0
    1110:	d9167491 	ldmdble	r6, {r0, r4, r7, sl, ip, sp, lr}
    1114:	01000007 	tsteq	r0, r7
    1118:	014c0858 	cmpeq	ip, r8, asr r8
    111c:	91020000 	mrsls	r0, (UNDEF: 2)
    1120:	14150073 	ldrne	r0, [r5], #-115	; 0xffffff8d
    1124:	0100000b 	tsteq	r0, fp
    1128:	0da80838 	stceq	8, cr0, [r8, #224]!	; 0xe0
    112c:	00402000 	subeq	r2, r0, r0
    1130:	9c010000 	stcls	0, cr0, [r1], {-0}
    1134:	000007fb 	strdeq	r0, [r0], -fp
    1138:	00063916 	andeq	r3, r6, r6, lsl r9
    113c:	08380100 	ldmdaeq	r8!, {r8}
    1140:	000000c7 	andeq	r0, r0, r7, asr #1
    1144:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1148:	000007d9 	ldrdeq	r0, [r0], -r9
    114c:	4c083801 	stcmi	8, cr3, [r8], {1}
    1150:	02000001 	andeq	r0, r0, #1
    1154:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
    1158:	00000c93 	muleq	r0, r3, ip
    115c:	8c080e01 	stchi	14, cr0, [r8], {1}
    1160:	1c20000d 	stcne	0, cr0, [r0], #-52	; 0xffffffcc
    1164:	01000000 	mrseq	r0, (UNDEF: 0)
    1168:	0008219c 	muleq	r8, ip, r1
    116c:	0af51600 	beq	ffd46974 <APBAHBPrescTable+0xdfd45564>
    1170:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1174:	0000c708 	andeq	ip, r0, r8, lsl #14
    1178:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    117c:	08e81500 	stmiaeq	r8!, {r8, sl, ip}^
    1180:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    1184:	000d5007 	andeq	r5, sp, r7
    1188:	00003c20 	andeq	r3, r0, r0, lsr #24
    118c:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    1190:	16000008 	strne	r0, [r0], -r8
    1194:	00000594 	muleq	r0, r4, r5
    1198:	c7078e01 	strgt	r8, [r7, -r1, lsl #28]
    119c:	02000000 	andeq	r0, r0, #0
    11a0:	a2186c91 	andsge	r6, r8, #37120	; 0x9100
    11a4:	01000006 	tsteq	r0, r6
    11a8:	00c70790 	smulleq	r0, r7, r0, r7
    11ac:	91020000 	mrsls	r0, (UNDEF: 2)
    11b0:	f3150074 	vqadd.u16	q0, <illegal reg q2.5>, q10
    11b4:	01000005 	tsteq	r0, r5
    11b8:	0d10072b 	ldceq	7, cr0, [r0, #-172]	; 0xffffff54
    11bc:	00402000 	subeq	r2, r0, r0
    11c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    11c4:	0000088b 	andeq	r0, r0, fp, lsl #17
    11c8:	00058516 	andeq	r8, r5, r6, lsl r5
    11cc:	072b0100 	streq	r0, [fp, -r0, lsl #2]!
    11d0:	000000c7 	andeq	r0, r0, r7, asr #1
    11d4:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    11d8:	000006a2 	andeq	r0, r0, r2, lsr #13
    11dc:	c7072d01 	strgt	r2, [r7, -r1, lsl #26]
    11e0:	02000000 	andeq	r0, r0, #0
    11e4:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    11e8:	00000975 	andeq	r0, r0, r5, ror r9
    11ec:	d4070b01 	strle	r0, [r7], #-2817	; 0xfffff4ff
    11f0:	3c20000c 	stccc	0, cr0, [r0], #-48	; 0xffffffd0
    11f4:	01000000 	mrseq	r0, (UNDEF: 0)
    11f8:	0008c09c 	muleq	r8, ip, r0
    11fc:	09be1600 	ldmibeq	lr!, {r9, sl, ip}
    1200:	0b010000 	bleq	41208 <startup-0x1ffbedf8>
    1204:	0000c707 	andeq	ip, r0, r7, lsl #14
    1208:	6c910200 	lfmvs	f0, 4, [r1], {0}
    120c:	0006a218 	andeq	sl, r6, r8, lsl r2
    1210:	070d0100 	streq	r0, [sp, -r0, lsl #2]
    1214:	000000c7 	andeq	r0, r0, r7, asr #1
    1218:	00749102 	rsbseq	r9, r4, r2, lsl #2
    121c:	000ac615 	andeq	ip, sl, r5, lsl r6
    1220:	06ea0100 	strbteq	r0, [sl], r0, lsl #2
    1224:	20000c98 	mulcs	r0, r8, ip
    1228:	0000003c 	andeq	r0, r0, ip, lsr r0
    122c:	08f59c01 	ldmeq	r5!, {r0, sl, fp, ip, pc}^
    1230:	d1160000 	tstle	r6, r0
    1234:	01000008 	tsteq	r0, r8
    1238:	00c706ea 	sbceq	r0, r7, sl, ror #13
    123c:	91020000 	mrsls	r0, (UNDEF: 2)
    1240:	06a2186c 	strteq	r1, [r2], ip, ror #16
    1244:	ec010000 	stc	0, cr0, [r1], {-0}
    1248:	0000c706 	andeq	ip, r0, r6, lsl #14
    124c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1250:	07001500 	streq	r1, [r0, -r0, lsl #10]
    1254:	c6010000 	strgt	r0, [r1], -r0
    1258:	000c5c06 	andeq	r5, ip, r6, lsl #24
    125c:	00003c20 	andeq	r3, r0, r0, lsr #24
    1260:	2a9c0100 	bcs	fe701668 <APBAHBPrescTable+0xde700258>
    1264:	16000009 	strne	r0, [r0], -r9
    1268:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
    126c:	c706c601 	strgt	ip, [r6, -r1, lsl #12]
    1270:	02000000 	andeq	r0, r0, #0
    1274:	a2186c91 	andsge	r6, r8, #37120	; 0x9100
    1278:	01000006 	tsteq	r0, r6
    127c:	00c706c8 	sbceq	r0, r7, r8, asr #13
    1280:	91020000 	mrsls	r0, (UNDEF: 2)
    1284:	a8150074 	ldmdage	r5, {r2, r4, r5, r6}
    1288:	0100000c 	tsteq	r0, ip
    128c:	0c4006ab 	mcrreq	6, 10, r0, r0, cr11
    1290:	001c2000 	andseq	r2, ip, r0
    1294:	9c010000 	stcls	0, cr0, [r1], {-0}
    1298:	00000950 	andeq	r0, r0, r0, asr r9
    129c:	000a4416 	andeq	r4, sl, r6, lsl r4
    12a0:	06ab0100 	strteq	r0, [fp], r0, lsl #2
    12a4:	000000c7 	andeq	r0, r0, r7, asr #1
    12a8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    12ac:	0007ea15 	andeq	lr, r7, r5, lsl sl
    12b0:	05ef0100 	strbeq	r0, [pc, #256]!	; 13b8 <startup-0x1fffec48>
    12b4:	20000c20 	andcs	r0, r0, r0, lsr #24
    12b8:	00000020 	andeq	r0, r0, r0, lsr #32
    12bc:	09769c01 	ldmdbeq	r6!, {r0, sl, fp, ip, pc}^
    12c0:	d9160000 	ldmdble	r6, {}	; <UNPREDICTABLE>
    12c4:	01000007 	tsteq	r0, r7
    12c8:	014c05ef 	smlaltteq	r0, ip, pc, r5	; <UNPREDICTABLE>
    12cc:	91020000 	mrsls	r0, (UNDEF: 2)
    12d0:	8f150077 	svchi	0x00150077
    12d4:	01000009 	tsteq	r0, r9
    12d8:	0c0005de 	cfstr32eq	mvfx0, [r0], {222}	; 0xde
    12dc:	00202000 	eoreq	r2, r0, r0
    12e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    12e4:	0000099c 	muleq	r0, ip, r9
    12e8:	0007d916 	andeq	sp, r7, r6, lsl r9
    12ec:	05de0100 	ldrbeq	r0, [lr, #256]	; 0x100
    12f0:	0000014c 	andeq	r0, r0, ip, asr #2
    12f4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    12f8:	000d4e15 	andeq	r4, sp, r5, lsl lr
    12fc:	05be0100 	ldreq	r0, [lr, #256]!	; 0x100
    1300:	20000ba0 	andcs	r0, r0, r0, lsr #23
    1304:	00000060 	andeq	r0, r0, r0, rrx
    1308:	09d19c01 	ldmibeq	r1, {r0, sl, fp, ip, pc}^
    130c:	a9160000 	ldmdbge	r6, {}	; <UNPREDICTABLE>
    1310:	01000008 	tsteq	r0, r8
    1314:	00c705be 	strheq	r0, [r7], #94	; 0x5e
    1318:	91020000 	mrsls	r0, (UNDEF: 2)
    131c:	06a2186c 	strteq	r1, [r2], ip, ror #16
    1320:	c0010000 	andgt	r0, r1, r0
    1324:	0000c705 	andeq	ip, r0, r5, lsl #14
    1328:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    132c:	0bf31b00 	bleq	ffcc7f34 <APBAHBPrescTable+0xdfcc6b24>
    1330:	25010000 	strcs	r0, [r1, #-0]
    1334:	000a4805 	andeq	r4, sl, r5, lsl #16
    1338:	00015820 	andeq	r5, r1, r0, lsr #16
    133c:	519c0100 	orrspl	r0, ip, r0, lsl #2
    1340:	1600000a 	strne	r0, [r0], -sl
    1344:	00000652 	andeq	r0, r0, r2, asr r6
    1348:	51052501 	tstpl	r5, r1, lsl #10
    134c:	0200000a 	andeq	r0, r0, #10
    1350:	741a5c91 	ldrvc	r5, [sl], #-3217	; 0xfffff36f
    1354:	0100706d 	tsteq	r0, sp, rrx
    1358:	00c70527 	sbceq	r0, r7, r7, lsr #10
    135c:	91020000 	mrsls	r0, (UNDEF: 2)
    1360:	08a31870 	stmiaeq	r3!, {r4, r5, r6, fp, ip}
    1364:	27010000 	strcs	r0, [r1, -r0]
    1368:	0000c705 	andeq	ip, r0, r5, lsl #14
    136c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1370:	00085f18 	andeq	r5, r8, r8, lsl pc
    1374:	05270100 	streq	r0, [r7, #-256]!	; 0xffffff00
    1378:	000000c7 	andeq	r0, r0, r7, asr #1
    137c:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    1380:	000005c3 	andeq	r0, r0, r3, asr #11
    1384:	c7052701 	strgt	r2, [r5, -r1, lsl #14]
    1388:	02000000 	andeq	r0, r0, #0
    138c:	5f186891 	svcpl	0x00186891
    1390:	0100000d 	tsteq	r0, sp
    1394:	00c70527 	sbceq	r0, r7, r7, lsr #10
    1398:	91020000 	mrsls	r0, (UNDEF: 2)
    139c:	05be1864 	ldreq	r1, [lr, #2148]!	; 0x864
    13a0:	27010000 	strcs	r0, [r1, -r0]
    13a4:	0000c705 	andeq	ip, r0, r5, lsl #14
    13a8:	60910200 	addsvs	r0, r1, r0, lsl #4
    13ac:	87041c00 	strhi	r1, [r4, -r0, lsl #24]
    13b0:	15000003 	strne	r0, [r0, #-3]
    13b4:	00000b79 	andeq	r0, r0, r9, ror fp
    13b8:	0c04f101 	stfeqd	f7, [r4], {1}
    13bc:	3c20000a 	stccc	0, cr0, [r0], #-40	; 0xffffffd8
    13c0:	01000000 	mrseq	r0, (UNDEF: 0)
    13c4:	000a8c9c 	muleq	sl, ip, ip
    13c8:	055c1600 	ldrbeq	r1, [ip, #-1536]	; 0xfffffa00
    13cc:	f1010000 	setend	le
    13d0:	0000c704 	andeq	ip, r0, r4, lsl #14
    13d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    13d8:	0006a218 	andeq	sl, r6, r8, lsl r2
    13dc:	04f30100 	ldrbteq	r0, [r3], #256	; 0x100
    13e0:	000000c7 	andeq	r0, r0, r7, asr #1
    13e4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    13e8:	0006d915 	andeq	sp, r6, r5, lsl r9
    13ec:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    13f0:	200009d4 	ldrdcs	r0, [r0], -r4
    13f4:	00000038 	andeq	r0, r0, r8, lsr r0
    13f8:	0ac19c01 	beq	ff068404 <APBAHBPrescTable+0xdf066ff4>
    13fc:	5c160000 	ldcpl	0, cr0, [r6], {-0}
    1400:	01000005 	tsteq	r0, r5
    1404:	00c704d2 	ldrdeq	r0, [r7], #66	; 0x42
    1408:	91020000 	mrsls	r0, (UNDEF: 2)
    140c:	06a2186c 	strteq	r1, [r2], ip, ror #16
    1410:	d4010000 	strle	r0, [r1], #-0
    1414:	0000c704 	andeq	ip, r0, r4, lsl #14
    1418:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    141c:	072e1500 	streq	r1, [lr, -r0, lsl #10]!
    1420:	b3010000 	movwlt	r0, #4096	; 0x1000
    1424:	0009a004 	andeq	sl, r9, r4
    1428:	00003420 	andeq	r3, r0, r0, lsr #8
    142c:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    1430:	1600000a 	strne	r0, [r0], -sl
    1434:	0000087e 	andeq	r0, r0, lr, ror r8
    1438:	c704b301 	strgt	fp, [r4, -r1, lsl #6]
    143c:	02000000 	andeq	r0, r0, #0
    1440:	a2186c91 	andsge	r6, r8, #37120	; 0x9100
    1444:	01000006 	tsteq	r0, r6
    1448:	00c704b5 	strheq	r0, [r7], #69	; 0x45
    144c:	91020000 	mrsls	r0, (UNDEF: 2)
    1450:	171d0074 			; <UNDEFINED> instruction: 0x171d0074
    1454:	01000008 	tsteq	r0, r8
    1458:	0097049a 	umullseq	r0, r7, sl, r4
    145c:	09840000 	stmibeq	r4, {}	; <UNPREDICTABLE>
    1460:	001c2000 	andseq	r2, ip, r0
    1464:	9c010000 	stcls	0, cr0, [r1], {-0}
    1468:	00073d15 	andeq	r3, r7, r5, lsl sp
    146c:	047d0100 	ldrbteq	r0, [sp], #-256	; 0xffffff00
    1470:	20000950 	andcs	r0, r0, r0, asr r9
    1474:	00000034 	andeq	r0, r0, r4, lsr r0
    1478:	0b419c01 	bleq	1068484 <startup-0x1ef97b7c>
    147c:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
    1480:	0100000b 	tsteq	r0, fp
    1484:	00c7047d 	sbceq	r0, r7, sp, ror r4
    1488:	91020000 	mrsls	r0, (UNDEF: 2)
    148c:	06a2186c 	strteq	r1, [r2], ip, ror #16
    1490:	7f010000 	svcvc	0x00010000
    1494:	0000c704 	andeq	ip, r0, r4, lsl #14
    1498:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    149c:	0cb91500 	cfldr32eq	mvfx1, [r9]
    14a0:	b5010000 	strlt	r0, [r1, #-0]
    14a4:	00091403 	andeq	r1, r9, r3, lsl #8
    14a8:	00003c20 	andeq	r3, r0, r0, lsr #24
    14ac:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    14b0:	1600000b 	strne	r0, [r0], -fp
    14b4:	00000a35 	andeq	r0, r0, r5, lsr sl
    14b8:	c703b501 	strgt	fp, [r3, -r1, lsl #10]
    14bc:	02000000 	andeq	r0, r0, #0
    14c0:	69166c91 	ldmdbvs	r6, {r0, r4, r7, sl, fp, sp, lr}
    14c4:	01000009 	tsteq	r0, r9
    14c8:	00c703b5 	strheq	r0, [r7], #53	; 0x35
    14cc:	91020000 	mrsls	r0, (UNDEF: 2)
    14d0:	06a21868 	strteq	r1, [r2], r8, ror #16
    14d4:	b7010000 	strlt	r0, [r1, -r0]
    14d8:	0000c703 	andeq	ip, r0, r3, lsl #14
    14dc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    14e0:	086f1500 	stmdaeq	pc!, {r8, sl, ip}^	; <UNPREDICTABLE>
    14e4:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    14e8:	0008d403 	andeq	sp, r8, r3, lsl #8
    14ec:	00004020 	andeq	r4, r0, r0, lsr #32
    14f0:	c99c0100 	ldmibgt	ip, {r8}
    14f4:	1600000b 	strne	r0, [r0], -fp
    14f8:	000005c8 	andeq	r0, r0, r8, asr #11
    14fc:	c7038801 	strgt	r8, [r3, -r1, lsl #16]
    1500:	02000000 	andeq	r0, r0, #0
    1504:	12166c91 	andsne	r6, r6, #37120	; 0x9100
    1508:	0100000a 	tsteq	r0, sl
    150c:	00c70388 	sbceq	r0, r7, r8, lsl #7
    1510:	91020000 	mrsls	r0, (UNDEF: 2)
    1514:	06a21868 	strteq	r1, [r2], r8, ror #16
    1518:	8a010000 	bhi	41520 <startup-0x1ffbeae0>
    151c:	0000c703 	andeq	ip, r0, r3, lsl #14
    1520:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1524:	09a31500 	stmibeq	r3!, {r8, sl, ip}
    1528:	6f010000 	svcvs	0x00010000
    152c:	0008b403 	andeq	fp, r8, r3, lsl #8
    1530:	00002020 	andeq	r2, r0, r0, lsr #32
    1534:	ef9c0100 	svc	0x009c0100
    1538:	1600000b 	strne	r0, [r0], -fp
    153c:	000007d9 	ldrdeq	r0, [r0], -r9
    1540:	4c036f01 	stcmi	15, cr6, [r3], {1}
    1544:	02000001 	andeq	r0, r0, #1
    1548:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
    154c:	00000577 	andeq	r0, r0, r7, ror r5
    1550:	94035d01 	strls	r5, [r3], #-3329	; 0xfffff2ff
    1554:	20200008 	eorcs	r0, r0, r8
    1558:	01000000 	mrseq	r0, (UNDEF: 0)
    155c:	000c159c 	muleq	ip, ip, r5
    1560:	07d91600 	ldrbeq	r1, [r9, r0, lsl #12]
    1564:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1568:	00014c03 	andeq	r4, r1, r3, lsl #24
    156c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1570:	09cd1500 	stmibeq	sp, {r8, sl, ip}^
    1574:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    1578:	00086403 	andeq	r6, r8, r3, lsl #8
    157c:	00003020 	andeq	r3, r0, r0, lsr #32
    1580:	599c0100 	ldmibpl	ip, {r8}
    1584:	1600000c 	strne	r0, [r0], -ip
    1588:	00000add 	ldrdeq	r0, [r0], -sp
    158c:	c7034901 	strgt	r4, [r3, -r1, lsl #18]
    1590:	02000000 	andeq	r0, r0, #0
    1594:	e5167491 	ldr	r7, [r6, #-1169]	; 0xfffffb6f
    1598:	0100000a 	tsteq	r0, sl
    159c:	00c70349 	sbceq	r0, r7, r9, asr #6
    15a0:	91020000 	mrsls	r0, (UNDEF: 2)
    15a4:	0aed1670 	beq	ffb46f6c <APBAHBPrescTable+0xdfb45b5c>
    15a8:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    15ac:	0000c703 	andeq	ip, r0, r3, lsl #14
    15b0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    15b4:	08891500 	stmeq	r9, {r8, sl, ip}
    15b8:	dc010000 	stcle	0, cr0, [r1], {-0}
    15bc:	00084402 	andeq	r4, r8, r2, lsl #8
    15c0:	00002020 	andeq	r2, r0, r0, lsr #32
    15c4:	7f9c0100 	svcvc	0x009c0100
    15c8:	1600000c 	strne	r0, [r0], -ip
    15cc:	000007d9 	ldrdeq	r0, [r0], -r9
    15d0:	4c02dc01 	stcmi	12, cr13, [r2], {1}
    15d4:	02000001 	andeq	r0, r0, #1
    15d8:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
    15dc:	00000925 	andeq	r0, r0, r5, lsr #18
    15e0:	1c025101 	stfnes	f5, [r2], {1}
    15e4:	28200008 	stmdacs	r0!, {r3}
    15e8:	01000000 	mrseq	r0, (UNDEF: 0)
    15ec:	000cb49c 	muleq	ip, ip, r4
    15f0:	0beb1600 	bleq	ffac6df8 <APBAHBPrescTable+0xdfac59e8>
    15f4:	51010000 	mrspl	r0, (UNDEF: 1)
    15f8:	0000c702 	andeq	ip, r0, r2, lsl #14
    15fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1600:	000c3016 	andeq	r3, ip, r6, lsl r0
    1604:	02510100 	subseq	r0, r1, #0, 2
    1608:	000000c7 	andeq	r0, r0, r7, asr #1
    160c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1610:	000b0915 	andeq	r0, fp, r5, lsl r9
    1614:	02330100 	eorseq	r0, r3, #0, 2
    1618:	200007fc 	strdcs	r0, [r0], -ip
    161c:	00000020 	andeq	r0, r0, r0, lsr #32
    1620:	0cda9c01 	ldcleq	12, cr9, [sl], {1}
    1624:	d9160000 	ldmdble	r6, {}	; <UNPREDICTABLE>
    1628:	01000007 	tsteq	r0, r7
    162c:	014c0233 	cmpeq	ip, r3, lsr r2
    1630:	91020000 	mrsls	r0, (UNDEF: 2)
    1634:	26150077 			; <UNDEFINED> instruction: 0x26150077
    1638:	0100000d 	tsteq	r0, sp
    163c:	07c0021b 	bfieq	r0, fp, (invalid: 4:0)
    1640:	003c2000 	eorseq	r2, ip, r0
    1644:	9c010000 	stcls	0, cr0, [r1], {-0}
    1648:	00000d3c 	andeq	r0, r0, ip, lsr sp
    164c:	00080916 	andeq	r0, r8, r6, lsl r9
    1650:	021b0100 	andseq	r0, fp, #0, 2
    1654:	000000c7 	andeq	r0, r0, r7, asr #1
    1658:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    165c:	00000634 	andeq	r0, r0, r4, lsr r6
    1660:	c7021b01 	strgt	r1, [r2, -r1, lsl #22]
    1664:	02000000 	andeq	r0, r0, #0
    1668:	ee167091 	mrc	0, 0, r7, cr6, cr1, {4}
    166c:	01000005 	tsteq	r0, r5
    1670:	00c7021b 	sbceq	r0, r7, fp, lsl r2
    1674:	91020000 	mrsls	r0, (UNDEF: 2)
    1678:	060d166c 	streq	r1, [sp], -ip, ror #12
    167c:	1b010000 	blne	41684 <startup-0x1ffbe97c>
    1680:	0000c702 	andeq	ip, r0, r2, lsl #14
    1684:	68910200 	ldmvs	r1, {r9}
    1688:	00061216 	andeq	r1, r6, r6, lsl r2
    168c:	021b0100 	andseq	r0, fp, #0, 2
    1690:	000000c7 	andeq	r0, r0, r7, asr #1
    1694:	00009102 	andeq	r9, r0, r2, lsl #2
    1698:	000ce115 	andeq	lr, ip, r5, lsl r1
    169c:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    16a0:	200007a0 	andcs	r0, r0, r0, lsr #15
    16a4:	00000020 	andeq	r0, r0, r0, lsr #32
    16a8:	0d629c01 	stcleq	12, cr9, [r2, #-4]!
    16ac:	d9160000 	ldmdble	r6, {}	; <UNPREDICTABLE>
    16b0:	01000007 	tsteq	r0, r7
    16b4:	014c01b8 	strheq	r0, [ip, #-24]	; 0xffffffe8
    16b8:	91020000 	mrsls	r0, (UNDEF: 2)
    16bc:	4e150077 	mrcmi	0, 0, r0, cr5, cr7, {3}
    16c0:	01000007 	tsteq	r0, r7
    16c4:	075c0190 			; <UNDEFINED> instruction: 0x075c0190
    16c8:	00442000 	subeq	r2, r4, r0
    16cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    16d0:	00000d88 	andeq	r0, r0, r8, lsl #27
    16d4:	00056516 	andeq	r6, r5, r6, lsl r5
    16d8:	01900100 	orrseq	r0, r0, r0, lsl #2
    16dc:	00000097 	muleq	r0, r7, r0
    16e0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    16e4:	00093615 	andeq	r3, r9, r5, lsl r6
    16e8:	01770100 	cmneq	r7, r0, lsl #2
    16ec:	2000073c 	andcs	r0, r0, ip, lsr r7
    16f0:	00000020 	andeq	r0, r0, r0, lsr #32
    16f4:	0dae9c01 	stceq	12, cr9, [lr, #4]!
    16f8:	d9160000 	ldmdble	r6, {}	; <UNPREDICTABLE>
    16fc:	01000007 	tsteq	r0, r7
    1700:	014c0177 	hvceq	49175	; 0xc017
    1704:	91020000 	mrsls	r0, (UNDEF: 2)
    1708:	c3150077 	tstgt	r5, #119	; 0x77
    170c:	0100000b 	tsteq	r0, fp
    1710:	06fe0153 	usateq	r0, #30, r3, asr #2
    1714:	003e2000 	eorseq	r2, lr, r0
    1718:	9c010000 	stcls	0, cr0, [r1], {-0}
    171c:	00000de3 	andeq	r0, r0, r3, ror #27
    1720:	000bcd16 	andeq	ip, fp, r6, lsl sp
    1724:	01530100 	cmpeq	r3, r0, lsl #2
    1728:	00000097 	muleq	r0, r7, r0
    172c:	186f9102 	stmdane	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
    1730:	000006a2 	andeq	r0, r0, r2, lsr #13
    1734:	c7015501 	strgt	r5, [r1, -r1, lsl #10]
    1738:	02000000 	andeq	r0, r0, #0
    173c:	1e007491 	mcrne	4, 0, r7, cr0, cr1, {4}
    1740:	0000082b 	andeq	r0, r0, fp, lsr #16
    1744:	73013401 	movwvc	r3, #5121	; 0x1401
    1748:	a0000001 	andge	r0, r0, r1
    174c:	5e200006 	cdppl	0, 2, cr0, cr0, cr6, {0}
    1750:	01000000 	mrseq	r0, (UNDEF: 0)
    1754:	000e2b9c 	muleq	lr, ip, fp
    1758:	0c751800 	ldcleq	8, cr1, [r5], #-0
    175c:	36010000 	strcc	r0, [r1], -r0
    1760:	0000d201 	andeq	sp, r0, r1, lsl #4
    1764:	68910200 	ldmvs	r1, {r9}
    1768:	000be418 	andeq	lr, fp, r8, lsl r4
    176c:	01370100 	teqeq	r7, r0, lsl #2
    1770:	00000173 	andeq	r0, r0, r3, ror r1
    1774:	186f9102 	stmdane	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
    1778:	00000be1 	andeq	r0, r0, r1, ror #23
    177c:	19013801 	stmdbne	r1, {r0, fp, ip, sp}
    1780:	02000001 	andeq	r0, r0, #1
    1784:	15006e91 	strne	r6, [r0, #-3729]	; 0xfffff16f
    1788:	00000ab8 			; <UNDEFINED> instruction: 0x00000ab8
    178c:	78011c01 	stmdavc	r1, {r0, sl, fp, ip}
    1790:	28200006 	stmdacs	r0!, {r1, r2}
    1794:	01000000 	mrseq	r0, (UNDEF: 0)
    1798:	000e519c 	muleq	lr, ip, r1
    179c:	0b9a1600 	bleq	fe686fa4 <APBAHBPrescTable+0xde685b94>
    17a0:	1c010000 	stcne	0, cr0, [r1], {-0}
    17a4:	00009701 	andeq	r9, r0, r1, lsl #14
    17a8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    17ac:	0c251f00 	stceq	15, cr1, [r5], #-0
    17b0:	e1010000 	mrs	r0, (UNDEF: 1)
    17b4:	20000608 	andcs	r0, r0, r8, lsl #12
    17b8:	00000070 	andeq	r0, r0, r0, ror r0
    17bc:	Address 0x000017bc is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	35050000 	strcc	r0, [r5, #-0]
  38:	00134900 	andseq	r4, r3, r0, lsl #18
  3c:	00340600 	eorseq	r0, r4, r0, lsl #12
  40:	0b3a0e03 	bleq	e83854 <startup-0x1f17c7ac>
  44:	1349053b 	movtne	r0, #38203	; 0x953b
  48:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  4c:	34070000 	strcc	r0, [r7], #-0
  50:	3a0e0300 	bcc	380c58 <startup-0x1fc7f3a8>
  54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  58:	3c193f13 	ldccc	15, cr3, [r9], {19}
  5c:	08000019 	stmdaeq	r0, {r0, r3, r4}
  60:	0b3e0104 	bleq	f80478 <startup-0x1f07fb88>
  64:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  6c:	00001301 	andeq	r1, r0, r1, lsl #6
  70:	03002809 	movweq	r2, #2057	; 0x809
  74:	000b1c0e 	andeq	r1, fp, lr, lsl #24
  78:	01130a00 	tsteq	r3, r0, lsl #20
  7c:	0b3a0b0b 	bleq	e82cb0 <startup-0x1f17d350>
  80:	1301053b 	movwne	r0, #5435	; 0x153b
  84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	000b3813 	andeq	r3, fp, r3, lsl r8
  94:	000d0c00 	andeq	r0, sp, r0, lsl #24
  98:	0b3a0803 	bleq	e820ac <startup-0x1f17df54>
  9c:	1349053b 	movtne	r0, #38203	; 0x953b
  a0:	00000b38 	andeq	r0, r0, r8, lsr fp
  a4:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
  a8:	00130113 	andseq	r0, r3, r3, lsl r1
  ac:	00210e00 	eoreq	r0, r1, r0, lsl #28
  b0:	0b2f1349 	bleq	bc4ddc <startup-0x1f43b224>
  b4:	160f0000 	strne	r0, [pc], -r0
  b8:	3a0e0300 	bcc	380cc0 <startup-0x1fc7f340>
  bc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  c0:	10000013 	andne	r0, r0, r3, lsl r0
  c4:	0b3e0104 	bleq	f804dc <startup-0x1f07fb24>
  c8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  cc:	0b3b0b3a 	bleq	ec2dbc <startup-0x1f13d244>
  d0:	00001301 	andeq	r1, r0, r1, lsl #6
  d4:	0b011311 	bleq	44d20 <startup-0x1ffbb2e0>
  d8:	3b0b3a0b 	blcc	2ce90c <startup-0x1fd316f4>
  dc:	0013010b 	andseq	r0, r3, fp, lsl #2
  e0:	000d1200 	andeq	r1, sp, r0, lsl #4
  e4:	0b3a0e03 	bleq	e838f8 <startup-0x1f17c708>
  e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  ec:	00000b38 	andeq	r0, r0, r8, lsr fp
  f0:	3f012e13 	svccc	0x00012e13
  f4:	3a0e0319 	bcc	380d60 <startup-0x1fc7f2a0>
  f8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 100:	96184006 	ldrls	r4, [r8], -r6
 104:	13011942 	movwne	r1, #6466	; 0x1942
 108:	34140000 	ldrcc	r0, [r4], #-0
 10c:	3a0e0300 	bcc	380d14 <startup-0x1fc7f2ec>
 110:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 114:	00180213 	andseq	r0, r8, r3, lsl r2
 118:	010b1500 	tsteq	fp, r0, lsl #10
 11c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 120:	34160000 	ldrcc	r0, [r6], #-0
 124:	3a080300 	bcc	200d2c <startup-0x1fdff2d4>
 128:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 12c:	00180213 	andseq	r0, r8, r3, lsl r2
 130:	002e1700 	eoreq	r1, lr, r0, lsl #14
 134:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 138:	0b3b0b3a 	bleq	ec2e28 <startup-0x1f13d1d8>
 13c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 140:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 144:	18000019 	stmdane	r0, {r0, r3, r4}
 148:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 14c:	0b3a0e03 	bleq	e83960 <startup-0x1f17c6a0>
 150:	01110b3b 	tsteq	r1, fp, lsr fp
 154:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 158:	01194296 			; <UNDEFINED> instruction: 0x01194296
 15c:	19000013 	stmdbne	r0, {r0, r1, r4}
 160:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 164:	0b3a0e03 	bleq	e83978 <startup-0x1f17c688>
 168:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 16c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 170:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 174:	00000019 	andeq	r0, r0, r9, lsl r0
 178:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 17c:	030b130e 	movweq	r1, #45838	; 0xb30e
 180:	110e1b0e 	tstne	lr, lr, lsl #22
 184:	10061201 	andne	r1, r6, r1, lsl #4
 188:	02000017 	andeq	r0, r0, #23
 18c:	0b0b0024 	bleq	2c0224 <startup-0x1fd3fddc>
 190:	0e030b3e 	vmoveq.16	d3[0], r0
 194:	16030000 	strne	r0, [r3], -r0
 198:	3a0e0300 	bcc	380da0 <startup-0x1fc7f260>
 19c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1a0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 1a4:	0b0b0024 	bleq	2c023c <startup-0x1fd3fdc4>
 1a8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 1ac:	35050000 	strcc	r0, [r5, #-0]
 1b0:	00134900 	andseq	r4, r3, r0, lsl #18
 1b4:	00340600 	eorseq	r0, r4, r0, lsl #12
 1b8:	0b3a0e03 	bleq	e839cc <startup-0x1f17c634>
 1bc:	1349053b 	movtne	r0, #38203	; 0x953b
 1c0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 1c4:	34070000 	strcc	r0, [r7], #-0
 1c8:	3a0e0300 	bcc	380dd0 <startup-0x1fc7f230>
 1cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d0:	3c193f13 	ldccc	15, cr3, [r9], {19}
 1d4:	08000019 	stmdaeq	r0, {r0, r3, r4}
 1d8:	0b3e0104 	bleq	f805f0 <startup-0x1f07fa10>
 1dc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 1e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1e4:	00001301 	andeq	r1, r0, r1, lsl #6
 1e8:	03002809 	movweq	r2, #2057	; 0x809
 1ec:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 1f0:	01130a00 	tsteq	r3, r0, lsl #20
 1f4:	0b3a0b0b 	bleq	e82e28 <startup-0x1f17d1d8>
 1f8:	1301053b 	movwne	r0, #5435	; 0x153b
 1fc:	0d0b0000 	stceq	0, cr0, [fp, #-0]
 200:	3a0e0300 	bcc	380e08 <startup-0x1fc7f1f8>
 204:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 208:	000b3813 	andeq	r3, fp, r3, lsl r8
 20c:	000d0c00 	andeq	r0, sp, r0, lsl #24
 210:	0b3a0803 	bleq	e82224 <startup-0x1f17dddc>
 214:	1349053b 	movtne	r0, #38203	; 0x953b
 218:	00000b38 	andeq	r0, r0, r8, lsr fp
 21c:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
 220:	00130113 	andseq	r0, r3, r3, lsl r1
 224:	00210e00 	eoreq	r0, r1, r0, lsl #28
 228:	0b2f1349 	bleq	bc4f54 <startup-0x1f43b0ac>
 22c:	160f0000 	strne	r0, [pc], -r0
 230:	3a0e0300 	bcc	380e38 <startup-0x1fc7f1c8>
 234:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 238:	10000013 	andne	r0, r0, r3, lsl r0
 23c:	0b3e0104 	bleq	f80654 <startup-0x1f07f9ac>
 240:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 244:	0b3b0b3a 	bleq	ec2f34 <startup-0x1f13d0cc>
 248:	00001301 	andeq	r1, r0, r1, lsl #6
 24c:	0b011311 	bleq	44e98 <startup-0x1ffbb168>
 250:	3b0b3a0b 	blcc	2cea84 <startup-0x1fd3157c>
 254:	0013010b 	andseq	r0, r3, fp, lsl #2
 258:	000d1200 	andeq	r1, sp, r0, lsl #4
 25c:	0b3a0e03 	bleq	e83a70 <startup-0x1f17c590>
 260:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 264:	00000b38 	andeq	r0, r0, r8, lsr fp
 268:	3f012e13 	svccc	0x00012e13
 26c:	3a0e0319 	bcc	380ed8 <startup-0x1fc7f128>
 270:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 274:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 278:	97184006 	ldrls	r4, [r8, -r6]
 27c:	13011942 	movwne	r1, #6466	; 0x1942
 280:	05140000 	ldreq	r0, [r4, #-0]
 284:	3a0e0300 	bcc	380e8c <startup-0x1fc7f174>
 288:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 28c:	00180213 	andseq	r0, r8, r3, lsl r2
 290:	00341500 	eorseq	r1, r4, r0, lsl #10
 294:	0b3a0e03 	bleq	e83aa8 <startup-0x1f17c558>
 298:	1349053b 	movtne	r0, #38203	; 0x953b
 29c:	00001802 	andeq	r1, r0, r2, lsl #16
 2a0:	0b000f16 	bleq	3f00 <startup-0x1fffc100>
 2a4:	0013490b 	andseq	r4, r3, fp, lsl #18
 2a8:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 2ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2b4:	13491927 	movtne	r1, #39207	; 0x9927
 2b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2bc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2c0:	00130119 	andseq	r0, r3, r9, lsl r1
 2c4:	00341800 	eorseq	r1, r4, r0, lsl #16
 2c8:	0b3a0803 	bleq	e822dc <startup-0x1f17dd24>
 2cc:	1349053b 	movtne	r0, #38203	; 0x953b
 2d0:	00001802 	andeq	r1, r0, r2, lsl #16
 2d4:	3f012e19 	svccc	0x00012e19
 2d8:	3a0e0319 	bcc	380f44 <startup-0x1fc7f0bc>
 2dc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2e4:	97184006 	ldrls	r4, [r8, -r6]
 2e8:	13011942 	movwne	r1, #6466	; 0x1942
 2ec:	051a0000 	ldreq	r0, [sl, #-0]
 2f0:	3a0e0300 	bcc	380ef8 <startup-0x1fc7f108>
 2f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2f8:	00180213 	andseq	r0, r8, r3, lsl r2
 2fc:	00341b00 	eorseq	r1, r4, r0, lsl #22
 300:	0b3a0e03 	bleq	e83b14 <startup-0x1f17c4ec>
 304:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 308:	00001802 	andeq	r1, r0, r2, lsl #16
 30c:	0300341c 	movweq	r3, #1052	; 0x41c
 310:	3b0b3a08 	blcc	2ceb38 <startup-0x1fd314c8>
 314:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 318:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 31c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 320:	0b3a0e03 	bleq	e83b34 <startup-0x1f17c4cc>
 324:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 328:	06120111 			; <UNDEFINED> instruction: 0x06120111
 32c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 330:	00000019 	andeq	r0, r0, r9, lsl r0
 334:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 338:	030b130e 	movweq	r1, #45838	; 0xb30e
 33c:	110e1b0e 	tstne	lr, lr, lsl #22
 340:	10061201 	andne	r1, r6, r1, lsl #4
 344:	02000017 	andeq	r0, r0, #23
 348:	0b0b0024 	bleq	2c03e0 <startup-0x1fd3fc20>
 34c:	0e030b3e 	vmoveq.16	d3[0], r0
 350:	16030000 	strne	r0, [r3], -r0
 354:	3a0e0300 	bcc	380f5c <startup-0x1fc7f0a4>
 358:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 35c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 360:	0b0b0024 	bleq	2c03f8 <startup-0x1fd3fc08>
 364:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 368:	26050000 	strcs	r0, [r5], -r0
 36c:	00134900 	andseq	r4, r3, r0, lsl #18
 370:	00350600 	eorseq	r0, r5, r0, lsl #12
 374:	00001349 	andeq	r1, r0, r9, asr #6
 378:	49010107 	stmdbmi	r1, {r0, r1, r2, r8}
 37c:	00130113 	andseq	r0, r3, r3, lsl r1
 380:	00210800 	eoreq	r0, r1, r0, lsl #16
 384:	0b2f1349 	bleq	bc50b0 <startup-0x1f43af50>
 388:	34090000 	strcc	r0, [r9], #-0
 38c:	3a0e0300 	bcc	380f94 <startup-0x1fc7f06c>
 390:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 394:	3c193f13 	ldccc	15, cr3, [r9], {19}
 398:	0a000019 	beq	404 <startup-0x1ffffbfc>
 39c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 3a0:	0b3b0b3a 	bleq	ec3090 <startup-0x1f13cf70>
 3a4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 3a8:	0000193c 	andeq	r1, r0, ip, lsr r9
 3ac:	3e01040b 	cdpcc	4, 0, cr0, cr1, cr11, {0}
 3b0:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 3b4:	3b0b3a13 	blcc	2cec08 <startup-0x1fd313f8>
 3b8:	00130105 	andseq	r0, r3, r5, lsl #2
 3bc:	00280c00 	eoreq	r0, r8, r0, lsl #24
 3c0:	0b1c0e03 	bleq	703bd4 <startup-0x1f8fc42c>
 3c4:	280d0000 	stmdacs	sp, {}	; <UNPREDICTABLE>
 3c8:	1c080300 	stcne	3, cr0, [r8], {-0}
 3cc:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 3d0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 3d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3d8:	00001349 	andeq	r1, r0, r9, asr #6
 3dc:	0b01130f 	bleq	45020 <startup-0x1ffbafe0>
 3e0:	3b0b3a0b 	blcc	2cec14 <startup-0x1fd313ec>
 3e4:	00130105 	andseq	r0, r3, r5, lsl #2
 3e8:	000d1000 	andeq	r1, sp, r0
 3ec:	0b3a0803 	bleq	e82400 <startup-0x1f17dc00>
 3f0:	1349053b 	movtne	r0, #38203	; 0x953b
 3f4:	00000b38 	andeq	r0, r0, r8, lsr fp
 3f8:	03000d11 	movweq	r0, #3345	; 0xd11
 3fc:	3b0b3a0e 	blcc	2cec3c <startup-0x1fd313c4>
 400:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 404:	1200000b 	andne	r0, r0, #11
 408:	0b0b0113 	bleq	2c085c <startup-0x1fd3f7a4>
 40c:	0b3b0b3a 	bleq	ec30fc <startup-0x1f13cf04>
 410:	00001301 	andeq	r1, r0, r1, lsl #6
 414:	03000d13 	movweq	r0, #3347	; 0xd13
 418:	3b0b3a0e 	blcc	2cec58 <startup-0x1fd313a8>
 41c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 420:	1400000b 	strne	r0, [r0], #-11
 424:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 428:	0b3b0b3a 	bleq	ec3118 <startup-0x1f13cee8>
 42c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 430:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 434:	03193f01 	tsteq	r9, #1, 30
 438:	3b0b3a0e 	blcc	2cec78 <startup-0x1fd31388>
 43c:	11192705 	tstne	r9, r5, lsl #14
 440:	40061201 	andmi	r1, r6, r1, lsl #4
 444:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 448:	00001301 	andeq	r1, r0, r1, lsl #6
 44c:	03000516 	movweq	r0, #1302	; 0x516
 450:	3b0b3a0e 	blcc	2cec90 <startup-0x1fd31370>
 454:	02134905 	andseq	r4, r3, #81920	; 0x14000
 458:	17000018 	smladne	r0, r8, r0, r0
 45c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 460:	0b3a0e03 	bleq	e83c74 <startup-0x1f17c38c>
 464:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 468:	01111349 	tsteq	r1, r9, asr #6
 46c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 470:	01194297 			; <UNDEFINED> instruction: 0x01194297
 474:	18000013 	stmdane	r0, {r0, r1, r4}
 478:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 47c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 480:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 484:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 488:	03193f00 	tsteq	r9, #0, 30
 48c:	3b0b3a0e 	blcc	2ceccc <startup-0x1fd31334>
 490:	11192705 	tstne	r9, r5, lsl #14
 494:	40061201 	andmi	r1, r6, r1, lsl #4
 498:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 49c:	341a0000 	ldrcc	r0, [sl], #-0
 4a0:	3a080300 	bcc	2010a8 <startup-0x1fdfef58>
 4a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 4a8:	00180213 	andseq	r0, r8, r3, lsl r2
 4ac:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 4b0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 4b8:	01111927 	tsteq	r1, r7, lsr #18
 4bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4c0:	01194296 			; <UNDEFINED> instruction: 0x01194296
 4c4:	1c000013 	stcne	0, cr0, [r0], {19}
 4c8:	0b0b000f 	bleq	2c050c <startup-0x1fd3faf4>
 4cc:	00001349 	andeq	r1, r0, r9, asr #6
 4d0:	3f002e1d 	svccc	0x00002e1d
 4d4:	3a0e0319 	bcc	381140 <startup-0x1fc7eec0>
 4d8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 4dc:	11134919 	tstne	r3, r9, lsl r9
 4e0:	40061201 	andmi	r1, r6, r1, lsl #4
 4e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4e8:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 4ec:	03193f01 	tsteq	r9, #1, 30
 4f0:	3b0b3a0e 	blcc	2ced30 <startup-0x1fd312d0>
 4f4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 4f8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 4fc:	96184006 	ldrls	r4, [r8], -r6
 500:	13011942 	movwne	r1, #6466	; 0x1942
 504:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 508:	03193f00 	tsteq	r9, #0, 30
 50c:	3b0b3a0e 	blcc	2ced4c <startup-0x1fd312b4>
 510:	1119270b 	tstne	r9, fp, lsl #14
 514:	40061201 	andmi	r1, r6, r1, lsl #4
 518:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 51c:	Address 0x0000051c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000e8 	andeq	r0, r0, r8, ror #1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	03350002 	teqeq	r5, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200000f8 	strdcs	r0, [r0], -r8
  3c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	095c0002 	ldmdbeq	ip, {r1}^
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000608 	andcs	r0, r0, r8, lsl #12
  5c:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200000f8 	strdcs	r0, [r0], -r8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001e1 	andeq	r0, r0, r1, ror #3
   4:	01980002 	orrseq	r0, r8, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
  28:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
  2c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
  30:	442f6576 	strtmi	r6, [pc], #-1398	; 38 <startup-0x1fffffc8>
  34:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
  38:	2f746e65 	svccs	0x00746e65
  3c:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
  40:	442f6275 	strtmi	r6, [pc], #-629	; 48 <startup-0x1fffffb8>
  44:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
  48:	614c2d30 	cmpvs	ip, r0, lsr sp
  4c:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
  50:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
  54:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 5c <startup-0x1fffffa4>
  58:	6f6f442f 	svcvs	0x006f442f
  5c:	3a630072 	bcc	18c022c <startup-0x1e73fdd4>
  60:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
  64:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
  68:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  6c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
  70:	6f6f745c 	svcvs	0x006f745c
  74:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
  78:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
  7c:	615c6d72 	cmpvs	ip, r2, ror sp
  80:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
  84:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
  88:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
  8c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
  90:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  94:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
  98:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
  9c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
  a0:	61657363 	cmnvs	r5, r3, ror #6
  a4:	635c7070 	cmpvs	ip, #112	; 0x70
  a8:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
  ac:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
  b0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; fffffee8 <APBAHBPrescTable+0xdfffead8>
  b4:	63675c73 	cmnvs	r7, #29440	; 0x7300
  b8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
  bc:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
  c0:	6f6e2d6d 	svcvs	0x006e2d6d
  c4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  c8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
  cc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  d0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
  d4:	00737973 	rsbseq	r7, r3, r3, ror r9
  d8:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 28 <startup-0x1fffffd8>
  dc:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  e0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  e4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
  e8:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
  ec:	5349534d 	movtpl	r5, #37709	; 0x934d
  f0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
  f4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  f8:	2f2e2e00 	svccs	0x002e2e00
  fc:	2f62696c 	svccs	0x0062696c
 100:	334d5453 	movtcc	r5, #54355	; 0xd453
 104:	5f344632 	svcpl	0x00344632
 108:	2f62696c 	svccs	0x0062696c
 10c:	334d5453 	movtcc	r5, #54355	; 0xd453
 110:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 114:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 118:	72655064 	rsbvc	r5, r5, #100	; 0x64
 11c:	5f687069 	svcpl	0x00687069
 120:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 124:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 128:	0000636e 	andeq	r6, r0, lr, ror #6
 12c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 130:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 134:	00010063 	andeq	r0, r1, r3, rrx
 138:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 13c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 140:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 144:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 148:	00020068 	andeq	r0, r2, r8, rrx
 14c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 150:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 154:	0300682e 	movweq	r6, #2094	; 0x82e
 158:	6f630000 	svcvs	0x00630000
 15c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 160:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 164:	00000400 	andeq	r0, r0, r0, lsl #8
 168:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 16c:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 170:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 174:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 178:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 17c:	74730000 	ldrbtvc	r0, [r3], #-0
 180:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 184:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 188:	00050068 	andeq	r0, r5, r8, rrx
 18c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 190:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 194:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 198:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 19c:	00050068 	andeq	r0, r5, r8, rrx
 1a0:	05000000 	streq	r0, [r0, #-0]
 1a4:	00000002 	andeq	r0, r0, r2
 1a8:	010c0320 	tsteq	ip, r0, lsr #6
 1ac:	03025e13 	movweq	r5, #11795	; 0x2e13
 1b0:	00010100 	andeq	r0, r1, r0, lsl #2
 1b4:	00100205 	andseq	r0, r0, r5, lsl #4
 1b8:	15032000 	strne	r2, [r3, #-0]
 1bc:	4b4b4001 	blmi	12d01c8 <startup-0x1ed2fe38>
 1c0:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 1c4:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
 1c8:	40307669 	eorsmi	r7, r0, r9, ror #12
 1cc:	3e338a3e 			; <UNDEFINED> instruction: 0x3e338a3e
 1d0:	0200aeae 	andeq	sl, r0, #2784	; 0xae0
 1d4:	7a030204 	bvc	c09ec <startup-0x1ff3f614>
 1d8:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
 1dc:	3c3c0601 	ldccc	6, cr0, [ip], #-4
 1e0:	01000502 	tsteq	r0, r2, lsl #10
 1e4:	0002b501 	andeq	fp, r2, r1, lsl #10
 1e8:	c9000200 	stmdbgt	r0, {r9}
 1ec:	02000001 	andeq	r0, r0, #1
 1f0:	0d0efb01 	vstreq	d15, [lr, #-4]
 1f4:	01010100 	mrseq	r0, (UNDEF: 17)
 1f8:	00000001 	andeq	r0, r0, r1
 1fc:	01000001 	tsteq	r0, r1
 200:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff7c5 <APBAHBPrescTable+0xdfffe3b5>
 204:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 208:	6164412f 	cmnvs	r4, pc, lsr #2
 20c:	4f2f746d 	svcmi	0x002f746d
 210:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 214:	2f657669 	svccs	0x00657669
 218:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 21c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 220:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 224:	2f627548 	svccs	0x00627548
 228:	32544144 	subscc	r4, r4, #68, 2
 22c:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
 230:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
 234:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 238:	6f6b2f6d 	svcvs	0x006b2f6d
 23c:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
 240:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 244:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 248:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 24c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 250:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 254:	5f787834 	svcpl	0x00787834
 258:	50647453 	rsbpl	r7, r4, r3, asr r4
 25c:	70697265 	rsbvc	r7, r9, r5, ror #4
 260:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 264:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 268:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 26c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 270:	61657363 	cmnvs	r5, r3, ror #6
 274:	635c7070 	cmpvs	ip, #112	; 0x70
 278:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 27c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 280:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; b8 <startup-0x1fffff48>
 284:	63675c73 	cmnvs	r7, #29440	; 0x7300
 288:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 28c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 290:	6f6e2d6d 	svcvs	0x006e2d6d
 294:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 298:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 29c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 2a0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 2a4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 2a8:	00656e69 	rsbeq	r6, r5, r9, ror #28
 2ac:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 2b0:	70616573 	rsbvc	r6, r1, r3, ror r5
 2b4:	6f635c70 	svcvs	0x00635c70
 2b8:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 2bc:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 2c0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 2c4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 2c8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 2cc:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 2d0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 2d4:	61652d65 	cmnvs	r5, r5, ror #26
 2d8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 2dc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 2e0:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 2e4:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
 2e8:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 2ec:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 2f0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 2f4:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 2f8:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
 2fc:	2f534953 	svccs	0x00534953
 300:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 304:	00656475 	rsbeq	r6, r5, r5, ror r4
 308:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 258 <startup-0x1ffffda8>
 30c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 310:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 314:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 318:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 31c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 320:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 324:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 328:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 32c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 334 <startup-0x1ffffccc>
 330:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 334:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
 338:	73000063 	movwvc	r0, #99	; 0x63
 33c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 340:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 344:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 348:	00632e6f 	rsbeq	r2, r3, pc, ror #28
 34c:	5f000001 	svcpl	0x00000001
 350:	61666564 	cmnvs	r6, r4, ror #10
 354:	5f746c75 	svcpl	0x00746c75
 358:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 35c:	00682e73 	rsbeq	r2, r8, r3, ror lr
 360:	5f000002 	svcpl	0x00000002
 364:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 368:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 36c:	00000300 	andeq	r0, r0, r0, lsl #6
 370:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 374:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
 378:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 37c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 380:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 384:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
 388:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 38c:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 390:	00000500 	andeq	r0, r0, r0, lsl #10
 394:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 398:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 39c:	00682e78 	rsbeq	r2, r8, r8, ror lr
 3a0:	73000005 	movwvc	r0, #5
 3a4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 3a8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 3ac:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 3b0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 3b4:	00000005 	andeq	r0, r0, r5
 3b8:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
 3bc:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 3c0:	4e0100ff 	mcrmi	0, 0, r0, cr1, cr15, {7}
 3c4:	38034b4c 	stmdacc	r3, {r2, r3, r6, r8, r9, fp, lr}
 3c8:	204a034a 	subcs	r0, sl, sl, asr #6
 3cc:	33034b4c 	movwcc	r4, #15180	; 0x3b4c
 3d0:	204f034a 	subcs	r0, pc, sl, asr #6
 3d4:	2e034b4c 	vmlscs.f64	d4, d3, d12
 3d8:	2054034a 	subscs	r0, r4, sl, asr #6
 3dc:	29034b4c 	stmdbcs	r3, {r2, r3, r6, r8, r9, fp, lr}
 3e0:	2059034a 	subscs	r0, r9, sl, asr #6
 3e4:	24034b4c 	strcs	r4, [r3], #-2892	; 0xfffff4b4
 3e8:	205e034a 	subscs	r0, lr, sl, asr #6
 3ec:	1f034b4c 	svcne	0x00034b4c
 3f0:	2063034a 	rsbcs	r0, r3, sl, asr #6
 3f4:	1a034b4c 	bne	d312c <startup-0x1ff2ced4>
 3f8:	2068034a 	rsbcs	r0, r8, sl, asr #6
 3fc:	15034b4c 	strne	r4, [r3, #-2892]	; 0xfffff4b4
 400:	206e034a 	rsbcs	r0, lr, sl, asr #6
 404:	0f03674c 	svceq	0x0003674c
 408:	20730366 	rsbscs	r0, r3, r6, ror #6
 40c:	0a03674c 	beq	da144 <startup-0x1ff25ebc>
 410:	207a0366 	rsbscs	r0, sl, r6, ror #6
 414:	0369674c 	cmneq	r9, #76, 14	; 0x1300000
 418:	5990080c 	ldmibpl	r0, {r2, r3, fp}
 41c:	3e660a03 	vmulcc.f32	s1, s12, s6
 420:	ad4c5a5a 	vstrge	s11, [ip, #-360]	; 0xfffffe98
 424:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
 428:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 42c:	adc0ad50 	stclge	13, cr10, [r0, #320]	; 0x140
 430:	0200bbcc 	andeq	fp, r0, #204, 22	; 0x33000
 434:	62030204 	andvs	r0, r3, #4, 4	; 0x40000000
 438:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
 43c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 440:	523c2103 	eorspl	r2, ip, #-1073741824	; 0xc0000000
 444:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
 448:	10033d3d 	andne	r3, r3, sp, lsr sp
 44c:	5a427574 	bpl	109da24 <startup-0x1ef625dc>
 450:	3e3e4c3e 	mrccc	12, 1, r4, cr14, cr14, {1}
 454:	4a1c033d 	bmi	701150 <startup-0x1f8feeb0>
 458:	5c685075 	stclpl	0, cr5, [r8], #-468	; 0xfffffe2c
 45c:	0a033d4c 	beq	cf994 <startup-0x1ff3066c>
 460:	033d4e4a 	teqeq	sp, #1184	; 0x4a0
 464:	50754a0c 	rsbspl	r4, r5, ip, lsl #20
 468:	3d4c5c68 	stclcc	12, cr5, [ip, #-416]	; 0xfffffe60
 46c:	4e4a0a03 	vmlami.f32	s1, s20, s6
 470:	4a0f033d 	bmi	3c116c <startup-0x1fc3ee94>
 474:	0f034b79 	svceq	0x00034b79
 478:	034b794a 	movteq	r7, #47434	; 0xb94a
 47c:	4cc04a10 	vstmiami	r0, {s9-s24}
 480:	034c1e50 	movteq	r1, #52816	; 0xce50
 484:	4b784a0b 	blmi	1e12cb8 <startup-0x1e1ed348>
 488:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
 48c:	00ce0375 	sbceq	r0, lr, r5, ror r3
 490:	352fbb4a 	strcc	fp, [pc, #-2890]!	; fffff94e <APBAHBPrescTable+0xdfffe53e>
 494:	bbc9089f 	bllt	ff242718 <APBAHBPrescTable+0xdf241308>
 498:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
 49c:	03b50101 			; <UNDEFINED> instruction: 0x03b50101
 4a0:	00020000 	andeq	r0, r2, r0
 4a4:	000001c7 	andeq	r0, r0, r7, asr #3
 4a8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 4ac:	0101000d 	tsteq	r1, sp
 4b0:	00000101 	andeq	r0, r0, r1, lsl #2
 4b4:	00000100 	andeq	r0, r0, r0, lsl #2
 4b8:	2f3a4301 	svccs	0x003a4301
 4bc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 4c0:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
 4c4:	2f746d61 	svccs	0x00746d61
 4c8:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
 4cc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 4d0:	6b6f442f 	blvs	1bd1594 <startup-0x1e42ea6c>
 4d4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 4d8:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
 4dc:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
 4e0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 4e4:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
 4e8:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
 4ec:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 4f0:	6b2f6d65 	blvs	bdba8c <startup-0x1f424574>
 4f4:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 340 <startup-0x1ffffcc0>
 4f8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 4fc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 500:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 504:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 508:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 50c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 510:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 514:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 518:	445f6870 	ldrbmi	r6, [pc], #-2160	; 520 <startup-0x1ffffae0>
 51c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 520:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
 524:	3a630063 	bcc	18c06b8 <startup-0x1e73f948>
 528:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 52c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 530:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 534:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 538:	6f6f745c 	svcvs	0x006f745c
 53c:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 540:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 544:	615c6d72 	cmpvs	ip, r2, ror sp
 548:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 54c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 550:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 554:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 558:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 55c:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 560:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 564:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 568:	61657363 	cmnvs	r5, r3, ror #6
 56c:	635c7070 	cmpvs	ip, #112	; 0x70
 570:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 574:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 578:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 3b0 <startup-0x1ffffc50>
 57c:	63675c73 	cmnvs	r7, #29440	; 0x7300
 580:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 584:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 588:	6f6e2d6d 	svcvs	0x006e2d6d
 58c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 590:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 594:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 598:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 59c:	00737973 	rsbseq	r7, r3, r3, ror r9
 5a0:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 4f0 <startup-0x1ffffb10>
 5a4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 5a8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 5ac:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 5b0:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
 5b4:	5349534d 	movtpl	r5, #37709	; 0x934d
 5b8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 5bc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 5c0:	2f2e2e00 	svccs	0x002e2e00
 5c4:	2f62696c 	svccs	0x0062696c
 5c8:	334d5453 	movtcc	r5, #54355	; 0xd453
 5cc:	5f344632 	svcpl	0x00344632
 5d0:	2f62696c 	svccs	0x0062696c
 5d4:	334d5453 	movtcc	r5, #54355	; 0xd453
 5d8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 5dc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 5e0:	72655064 	rsbvc	r5, r5, #100	; 0x64
 5e4:	5f687069 	svcpl	0x00687069
 5e8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 5ec:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 5f0:	0000636e 	andeq	r6, r0, lr, ror #6
 5f4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 5f8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 5fc:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
 600:	00632e63 	rsbeq	r2, r3, r3, ror #28
 604:	5f000001 	svcpl	0x00000001
 608:	61666564 	cmnvs	r6, r4, ror #10
 60c:	5f746c75 	svcpl	0x00746c75
 610:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 614:	00682e73 	rsbeq	r2, r8, r3, ror lr
 618:	5f000002 	svcpl	0x00000002
 61c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 620:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 624:	00000300 	andeq	r0, r0, r0, lsl #6
 628:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 62c:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
 630:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 634:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 638:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 63c:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
 640:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 644:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 648:	00000500 	andeq	r0, r0, r0, lsl #10
 64c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 650:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 654:	00682e78 	rsbeq	r2, r8, r8, ror lr
 658:	73000005 	movwvc	r0, #5
 65c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 660:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 664:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
 668:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 66c:	00000000 	andeq	r0, r0, r0
 670:	06080205 	streq	r0, [r8], -r5, lsl #4
 674:	e1032000 	mrs	r2, (UNDEF: 3)
 678:	69300101 	ldmdbvs	r0!, {r0, r8}
 67c:	4f40693f 	svcmi	0x0040693f
 680:	503f694e 	eorspl	r6, pc, lr, asr #18
 684:	6be41703 	blvs	ff906298 <APBAHBPrescTable+0xdf904e88>
 688:	0f034b3f 	svceq	0x00034b3f
 68c:	3d2f3d74 	stccc	13, cr3, [pc, #-464]!	; 4c4 <startup-0x1ffffb3c>
 690:	02040200 	andeq	r0, r4, #0, 4
 694:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
 698:	02006702 	andeq	r6, r0, #524288	; 0x80000
 69c:	003d0204 	eorseq	r0, sp, r4, lsl #4
 6a0:	06010402 	streq	r0, [r1], -r2, lsl #8
 6a4:	5a4c0658 	bpl	130200c <startup-0x1ecfdff4>
 6a8:	032f3e4e 			; <UNDEFINED> instruction: 0x032f3e4e
 6ac:	32674a0b 	rsbcc	r4, r7, #45056	; 0xb000
 6b0:	3d694d3f 	stclcc	13, cr4, [r9, #-252]!	; 0xffffff04
 6b4:	6a741503 	bvs	1d05ac8 <startup-0x1e2fa538>
 6b8:	6614034b 	ldrvs	r0, [r4], -fp, asr #6
 6bc:	033f3f6c 	teqeq	pc, #108, 30	; 0x1b0
 6c0:	7903660b 	stmdbvc	r3, {r0, r1, r3, r9, sl, sp, lr}
 6c4:	3d233d20 	stccc	13, cr3, [r3, #-128]!	; 0xffffff80
 6c8:	740f0324 	strvc	r0, [pc], #-804	; 6d0 <startup-0x1ffff930>
 6cc:	de034b6a 	vmlsle.f64	d4, d3, d26
 6d0:	bb7c6600 	bllt	1f19ed8 <startup-0x1e0e6128>
 6d4:	0e033e2d 	cdpeq	14, 0, cr3, cr3, cr13, {1}
 6d8:	034b6966 	movteq	r6, #47462	; 0xb966
 6dc:	835d661a 	cmphi	sp, #27262976	; 0x1a00000
 6e0:	74018503 	strvc	r8, [r1], #-1283	; 0xfffffafd
 6e4:	e9034b69 	stmdb	r3, {r0, r3, r5, r6, r8, r9, fp, lr}
 6e8:	ad6c6600 	stclge	6, cr6, [ip, #-0]
 6ec:	69740d03 	ldmdbvs	r4!, {r0, r1, r8, sl, fp}^
 6f0:	660e034b 	strvs	r0, [lr], -fp, asr #6
 6f4:	15034b69 	strne	r4, [r3, #-2921]	; 0xfffff497
 6f8:	3f345966 	svccc	0x00345966
 6fc:	0341694d 	movteq	r6, #6477	; 0x194d
 700:	34599018 	ldrbcc	r9, [r9], #-24	; 0xffffffe8
 704:	41694d3f 	cmnmi	r9, pc, lsr sp
 708:	7401b303 	strvc	fp, [r1], #-771	; 0xfffffcfd
 70c:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 5e8 <startup-0x1ffffa18>
 710:	0d033d4d 	stceq	13, cr3, [r3, #-308]	; 0xfffffecc
 714:	03672f66 	cmneq	r7, #408	; 0x198
 718:	334b6617 	movtcc	r6, #46615	; 0xb617
 71c:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
 720:	4b660f03 	blmi	1984334 <startup-0x1e67bccc>
 724:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
 728:	820f033d 	andhi	r0, pc, #-201326592	; 0xf4000000
 72c:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 608 <startup-0x1ffff9f8>
 730:	24033d5b 	strcs	r3, [r3], #-3419	; 0xfffff2a5
 734:	5ac04b90 	bpl	ff01357c <APBAHBPrescTable+0xdf01216c>
 738:	3d223d77 	stccc	13, cr3, [r2, #-476]!	; 0xfffffe24
 73c:	3f5a6726 	svccc	0x005a6726
 740:	8383cbdb 	orrhi	ip, r3, #224256	; 0x36c00
 744:	3d201b03 	fstmdbxcc	r0!, {d1}	;@ Deprecated
 748:	683d5925 	ldmdavs	sp!, {r0, r2, r5, r8, fp, ip, lr}
 74c:	683d6769 	ldmdavs	sp!, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
 750:	683d6769 	ldmdavs	sp!, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
 754:	ba3f0367 	blt	fc14f8 <startup-0x1f03eb08>
 758:	3f84334b 	svccc	0x0084334b
 75c:	8340694d 	movthi	r6, #2381	; 0x94d
 760:	6a9e0a03 	bvs	fe782f74 <APBAHBPrescTable+0xde781b64>
 764:	660c034b 	strvs	r0, [ip], -fp, asr #6
 768:	b8034b69 	stmdalt	r3, {r0, r3, r5, r6, r8, r9, fp, lr}
 76c:	3d4e6601 	stclcc	6, cr6, [lr, #-4]
 770:	4b741603 	blmi	1d05f84 <startup-0x1e2fa07c>
 774:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 778:	8214034b 	andshi	r0, r4, #738197505	; 0x2c000001
 77c:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 780:	11034b4d 	tstne	r3, sp, asr #22
 784:	4d334b82 	vldmdbmi	r3!, {d4}
 788:	034b5b4d 	movteq	r5, #47949	; 0xbb4d
 78c:	334b7410 	movtcc	r7, #46096	; 0xb410
 790:	4b694d4d 	blmi	1a53ccc <startup-0x1e5ac334>
 794:	8200d303 	andhi	sp, r0, #201326592	; 0xc000000
 798:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 79c:	f0034b4d 			; <UNDEFINED> instruction: 0xf0034b4d
 7a0:	3d4e8200 	sfmcc	f0, 3, [lr, #-0]
 7a4:	79742503 	ldmdbvc	r4!, {r0, r1, r8, sl, sp}^
 7a8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 7ac:	79741303 	ldmdbvc	r4!, {r0, r1, r8, r9, ip}^
 7b0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 7b4:	79741103 	ldmdbvc	r4!, {r0, r1, r8, ip}^
 7b8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 7bc:	79742c03 	ldmdbvc	r4!, {r0, r1, sl, fp, sp}^
 7c0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 7c4:	79742703 	ldmdbvc	r4!, {r0, r1, r8, r9, sl, sp}^
 7c8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 7cc:	79741d03 	ldmdbvc	r4!, {r0, r1, r8, sl, fp, ip}^
 7d0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 7d4:	79741003 	ldmdbvc	r4!, {r0, r1, ip}^
 7d8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 7dc:	79740e03 	ldmdbvc	r4!, {r0, r1, r9, sl, fp}^
 7e0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 7e4:	78742903 	ldmdavc	r4!, {r0, r1, r8, fp, sp}^
 7e8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 7ec:	78742303 	ldmdavc	r4!, {r0, r1, r8, r9, sp}^
 7f0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 7f4:	78742503 	ldmdavc	r4!, {r0, r1, r8, sl, sp}^
 7f8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 7fc:	78741403 	ldmdavc	r4!, {r0, r1, sl, ip}^
 800:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 804:	78741203 	ldmdavc	r4!, {r0, r1, r9, ip}^
 808:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 80c:	78742d03 	ldmdavc	r4!, {r0, r1, r8, sl, fp, sp}^
 810:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 814:	78742803 	ldmdavc	r4!, {r0, r1, fp, sp}^
 818:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 81c:	6a740c03 	bvs	1d03830 <startup-0x1e2fc7d0>
 820:	681e6c4c 	ldmdavs	lr, {r2, r3, r6, sl, fp, sp, lr}
 824:	7402ac03 	strvc	sl, [r2], #-3075	; 0xfffff3fd
 828:	1e974d94 	mrcne	13, 4, r4, cr7, cr4, {4}
 82c:	661703ae 	ldrvs	r0, [r7], -lr, lsr #7
 830:	502f2f67 	eorpl	r2, pc, r7, ror #30
 834:	3e4c3e59 	mcrcc	14, 2, r3, cr12, cr9, {2}
 838:	7659404e 	ldrbvc	r4, [r9], -lr, asr #32
 83c:	033d4d5c 	teqeq	sp, #92, 26	; 0x1700
 840:	7530660a 	ldrvc	r6, [r0, #-1546]!	; 0xfffff9f6
 844:	67581103 	ldrbvs	r1, [r8, -r3, lsl #2]
 848:	4d5c6850 	ldclmi	8, cr6, [ip, #-320]	; 0xfffffec0
 84c:	6611033d 			; <UNDEFINED> instruction: 0x6611033d
 850:	06024b6c 	streq	r4, [r2], -ip, ror #22
 854:	Address 0x00000854 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f495047 	svcmi	0x00495047
   4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
   8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
   c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
  10:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
  14:	6873006e 	ldmdavs	r3!, {r1, r2, r3, r5, r6}^
  18:	2074726f 	rsbscs	r7, r4, pc, ror #4
  1c:	00746e69 	rsbseq	r6, r4, r9, ror #28
  20:	4f495047 	svcmi	0x00495047
  24:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
  28:	4f5f6570 	svcmi	0x005f6570
  2c:	616d0044 	cmnvs	sp, r4, asr #32
  30:	5f006e69 	svcpl	0x00006e69
  34:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
  38:	5f323374 	svcpl	0x00323374
  3c:	5f5f0074 	svcpl	0x005f0074
  40:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
  44:	745f3631 	ldrbvc	r3, [pc], #-1585	; 4c <startup-0x1fffffb4>
  48:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
  4c:	544f5f4f 	strbpl	r5, [pc], #-3919	; 54 <startup-0x1fffffac>
  50:	00657079 	rsbeq	r7, r5, r9, ror r0
  54:	4f495047 	svcmi	0x00495047
  58:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 60 <startup-0x1fffffa0>
  5c:	46415f65 	strbmi	r5, [r1], -r5, ror #30
  60:	414e4500 	cmpmi	lr, r0, lsl #10
  64:	00454c42 	subeq	r4, r5, r2, asr #24
  68:	4f495047 	svcmi	0x00495047
  6c:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
  70:	47006465 	strmi	r6, [r0, -r5, ror #8]
  74:	5f4f4950 	svcpl	0x004f4950
  78:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
  7c:	004e415f 	subeq	r4, lr, pc, asr r1
  80:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff645 <APBAHBPrescTable+0xdfffe235>
  84:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  88:	6164412f 	cmnvs	r4, pc, lsr #2
  8c:	4f2f746d 	svcmi	0x002f746d
  90:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
  94:	2f657669 	svccs	0x00657669
  98:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
  9c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
  a0:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
  a4:	2f627548 	svccs	0x00627548
  a8:	32544144 	subscc	r4, r4, #68, 2
  ac:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
  b0:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
  b4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
  b8:	6f6b2f6d 	svcvs	0x006b2f6d
  bc:	6f442f64 	svcvs	0x00442f64
  c0:	732f726f 			; <UNDEFINED> instruction: 0x732f726f
  c4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  c8:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  cc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
  d0:	79544f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, lr}^
  d4:	545f6570 	ldrbpl	r6, [pc], #-1392	; dc <startup-0x1fffff24>
  d8:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
  dc:	4f006665 	svcmi	0x00006665
  e0:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
  e4:	50470052 	subpl	r0, r7, r2, asr r0
  e8:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
  ec:	5f747361 	svcpl	0x00747361
  f0:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
  f4:	6f6c0064 	svcvs	0x006c0064
  f8:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
  fc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 100:	00746e69 	rsbseq	r6, r4, r9, ror #28
 104:	4f495047 	svcmi	0x00495047
 108:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 110 <startup-0x1ffffef0>
 10c:	554f5f65 	strbpl	r5, [pc, #-3941]	; fffff1af <APBAHBPrescTable+0xdfffdd9f>
 110:	55500054 	ldrbpl	r0, [r0, #-84]	; 0xffffffac
 114:	00524450 	subseq	r4, r2, r0, asr r4
 118:	4f495047 	svcmi	0x00495047
 11c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 124 <startup-0x1ffffedc>
 120:	4e495f65 	cdpmi	15, 4, cr5, cr9, cr5, {3}
 124:	52534200 	subspl	r4, r3, #0, 4
 128:	4d004852 	stcmi	8, cr4, [r0, #-328]	; 0xfffffeb8
 12c:	5245444f 	subpl	r4, r5, #1325400064	; 0x4f000000
 130:	52534200 	subspl	r4, r3, #0, 4
 134:	47004c52 	smlsdmi	r0, r2, ip, r4
 138:	5f4f4950 	svcpl	0x004f4950
 13c:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 140:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
 144:	47006465 	strmi	r6, [r0, -r5, ror #8]
 148:	5f4f4950 	svcpl	0x004f4950
 14c:	7079544f 	rsbsvc	r5, r9, pc, asr #8
 150:	50505f65 	subspl	r5, r0, r5, ror #30
 154:	736e7500 	cmnvc	lr, #0, 10
 158:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 15c:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 160:	47007261 	strmi	r7, [r0, -r1, ror #4]
 164:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
 168:	37203939 			; <UNDEFINED> instruction: 0x37203939
 16c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
 170:	31303220 	teqcc	r0, r0, lsr #4
 174:	30393037 	eorscc	r3, r9, r7, lsr r0
 178:	72282034 	eorvc	r2, r8, #52	; 0x34
 17c:	61656c65 	cmnvs	r5, r5, ror #24
 180:	20296573 	eorcs	r6, r9, r3, ror r5
 184:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
 188:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
 18c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
 190:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
 194:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
 198:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
 19c:	73697665 	cmnvc	r9, #105906176	; 0x6500000
 1a0:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 1a4:	32353532 	eorscc	r3, r5, #209715200	; 0xc800000
 1a8:	205d3430 	subscs	r3, sp, r0, lsr r4
 1ac:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 1b0:	20626d75 	rsbcs	r6, r2, r5, ror sp
 1b4:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 1b8:	613d6863 	teqvs	sp, r3, ror #16
 1bc:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 1c0:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 1c4:	6f6c666d 	svcvs	0x006c666d
 1c8:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
 1cc:	733d6962 	teqvc	sp, #1605632	; 0x188000
 1d0:	2074666f 	rsbscs	r6, r4, pc, ror #12
 1d4:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 1d8:	20626d75 	rsbcs	r6, r2, r5, ror sp
 1dc:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 1e0:	613d6863 	teqvs	sp, r3, ror #16
 1e4:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 1e8:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 1ec:	4f2d2067 	svcmi	0x002d2067
 1f0:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 1f4:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 1f8:	6c003939 			; <UNDEFINED> instruction: 0x6c003939
 1fc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 200:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 204:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 208:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 20c:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 210:	50470074 	subpl	r0, r7, r4, ror r0
 214:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
 218:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
 21c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
 220:	73006665 	movwvc	r6, #1637	; 0x665
 224:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 228:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 22c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 230:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 234:	49440074 	stmdbmi	r4, {r2, r4, r5, r6}^
 238:	4c424153 	stfmie	f4, [r2], {83}	; 0x53
 23c:	5f5f0045 	svcpl	0x005f0045
 240:	33746e69 	cmncc	r4, #1680	; 0x690
 244:	00745f32 	rsbseq	r5, r4, r2, lsr pc
 248:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
 24c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 250:	6164415c 	cmnvs	r4, ip, asr r1
 254:	4f5c746d 	svcmi	0x005c746d
 258:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 25c:	5c657669 	stclpl	6, cr7, [r5], #-420	; 0xfffffe5c
 260:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 264:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 268:	7469475c 	strbtvc	r4, [r9], #-1884	; 0xfffff8a4
 26c:	5c627548 	cfstr64pl	mvdx7, [r2], #-288	; 0xfffffee0
 270:	32544144 	subscc	r4, r4, #68, 2
 274:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
 278:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
 27c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 280:	6f6b5c6d 	svcvs	0x006b5c6d
 284:	6f445c64 	svcvs	0x00445c64
 288:	5300726f 	movwpl	r7, #623	; 0x26f
 28c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 290:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
 294:	6f6c4365 	svcvs	0x006c4365
 298:	47006b63 	strmi	r6, [r0, -r3, ror #22]
 29c:	5f4f4950 	svcpl	0x004f4950
 2a0:	5f776f4c 	svcpl	0x00776f4c
 2a4:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
 2a8:	50470064 	subpl	r0, r7, r4, rrx
 2ac:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 190 <startup-0x1ffffe70>
 2b0:	75696465 	strbvc	r6, [r9, #-1125]!	; 0xfffffb9b
 2b4:	70535f6d 	subsvc	r5, r3, sp, ror #30
 2b8:	00646565 	rsbeq	r6, r4, r5, ror #10
 2bc:	4550534f 	ldrbmi	r5, [r0, #-847]	; 0xfffffcb1
 2c0:	00524445 	subseq	r4, r2, r5, asr #8
 2c4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 2c8:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
 2cc:	4700414f 	strmi	r4, [r0, -pc, asr #2]
 2d0:	534f4950 	movtpl	r4, #63824	; 0xf950
 2d4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 2d8:	7079545f 	rsbsvc	r5, r9, pc, asr r4
 2dc:	66654465 	strbtvs	r4, [r5], -r5, ror #8
 2e0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 2e4:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
 2e8:	445f6450 	ldrbmi	r6, [pc], #-1104	; 2f0 <startup-0x1ffffd10>
 2ec:	004e574f 	subeq	r5, lr, pc, asr #14
 2f0:	4f495047 	svcmi	0x00495047
 2f4:	5075505f 	rsbspl	r5, r5, pc, asr r0
 2f8:	4f4e5f64 	svcmi	0x004e5f64
 2fc:	4c4c5550 	cfstr64mi	mvdx5, [ip], {80}	; 0x50
 300:	70706100 	rsbsvc	r6, r0, r0, lsl #2
 304:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 308:	50470074 	subpl	r0, r7, r4, ror r0
 30c:	505f4f49 	subspl	r4, pc, r9, asr #30
 310:	00645075 	rsbeq	r5, r4, r5, ror r0
 314:	4f495047 	svcmi	0x00495047
 318:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
 31c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
 320:	66654465 	strbtvs	r4, [r5], -r5, ror #8
 324:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 328:	646f4d4f 	strbtvs	r4, [pc], #-3407	; 330 <startup-0x1ffffcd0>
 32c:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 330:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
 334:	50470066 	subpl	r0, r7, r6, rrx
 338:	505f4f49 	subspl	r4, pc, r9, asr #30
 33c:	5f645075 	svcpl	0x00645075
 340:	73005055 	movwvc	r5, #85	; 0x55
 344:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 348:	49007075 	stmdbmi	r0, {r0, r2, r4, r5, r6, ip, sp, lr}
 34c:	525f4d54 	subspl	r4, pc, #84, 26	; 0x1500
 350:	66754278 			; <UNDEFINED> instruction: 0x66754278
 354:	00726566 	rsbseq	r6, r2, r6, ror #10
 358:	4f495047 	svcmi	0x00495047
 35c:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
 360:	434c0073 	movtmi	r0, #49267	; 0xc073
 364:	4700524b 	strmi	r5, [r0, -fp, asr #4]
 368:	5f4f4950 	svcpl	0x004f4950
 36c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 370:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
 374:	00736f70 	rsbseq	r6, r3, r0, ror pc
 378:	5f746942 	svcpl	0x00746942
 37c:	00544553 	subseq	r4, r4, r3, asr r5
 380:	4f495047 	svcmi	0x00495047
 384:	6165525f 	cmnvs	r5, pc, asr r2
 388:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xfffff09c
 38c:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
 390:	00617461 	rsbeq	r7, r1, r1, ror #8
 394:	4f495047 	svcmi	0x00495047
 398:	0046415f 	subeq	r4, r6, pc, asr r1
 39c:	706d6574 	rsbvc	r6, sp, r4, ror r5
 3a0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 3a4:	74535f4f 	ldrbvc	r5, [r3], #-3919	; 0xfffff0b1
 3a8:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
 3ac:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
 3b0:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
 3b4:	006c6156 	rsbeq	r6, ip, r6, asr r1
 3b8:	5f746942 	svcpl	0x00746942
 3bc:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
 3c0:	50470054 	subpl	r0, r7, r4, asr r0
 3c4:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
 3c8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 3cc:	00746942 	rsbseq	r6, r4, r2, asr #18
 3d0:	4f495047 	svcmi	0x00495047
 3d4:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
 3d8:	73746942 	cmnvc	r4, #1081344	; 0x108000
 3dc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 3e0:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
 3e4:	47007469 	strmi	r7, [r0, -r9, ror #8]
 3e8:	5f4f4950 	svcpl	0x004f4950
 3ec:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 3f0:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
 3f4:	3a430073 	bcc	10c05c8 <startup-0x1ef3fa38>
 3f8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 3fc:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 400:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
 404:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
 408:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 40c:	6f442f65 	svcvs	0x00442f65
 410:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
 414:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
 418:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
 41c:	41442f62 	cmpmi	r4, r2, ror #30
 420:	30393254 	eorscc	r3, r9, r4, asr r2
 424:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
 428:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
 42c:	2f6d6574 	svccs	0x006d6574
 430:	2f646f6b 	svccs	0x00646f6b
 434:	2f62696c 	svccs	0x0062696c
 438:	334d5453 	movtcc	r5, #54355	; 0xd453
 43c:	5f344632 	svcpl	0x00344632
 440:	2f62696c 	svccs	0x0062696c
 444:	334d5453 	movtcc	r5, #54355	; 0xd453
 448:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 44c:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 450:	72655064 	rsbvc	r5, r5, #100	; 0x64
 454:	5f687069 	svcpl	0x00687069
 458:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 45c:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
 460:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
 464:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 468:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 46c:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 470:	00632e6f 	rsbeq	r2, r3, pc, ror #28
 474:	4f495047 	svcmi	0x00495047
 478:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
 47c:	0074696e 	rsbseq	r6, r4, lr, ror #18
 480:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
 484:	5f38746e 	svcpl	0x0038746e
 488:	50470074 	subpl	r0, r7, r4, ror r0
 48c:	525f4f49 	subspl	r4, pc, #292	; 0x124
 490:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 494:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
 498:	61746144 	cmnvs	r4, r4, asr #2
 49c:	00746942 	rsbseq	r6, r4, r2, asr #18
 4a0:	73746962 	cmnvc	r4, #1605632	; 0x188000
 4a4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 4a8:	50470073 	subpl	r0, r7, r3, ror r0
 4ac:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
 4b0:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
 4b4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
 4b8:	6f500074 	svcvs	0x00500074
 4bc:	61567472 	cmpvs	r6, r2, ror r4
 4c0:	5047006c 	subpl	r0, r7, ip, rrx
 4c4:	505f4f49 	subspl	r4, pc, r9, asr #30
 4c8:	6f536e69 	svcvs	0x00536e69
 4cc:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
 4d0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 4d4:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
 4d8:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
 4dc:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
 4e0:	00617461 	rsbeq	r7, r1, r1, ror #8
 4e4:	4f495047 	svcmi	0x00495047
 4e8:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
 4ec:	6b636f4c 	blvs	18dc224 <startup-0x1e723ddc>
 4f0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 4f4:	42006769 	andmi	r6, r0, #27525120	; 0x1a40000
 4f8:	63417469 	movtvs	r7, #5225	; 0x1469
 4fc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 500:	72756300 	rsbsvc	r6, r5, #0, 6
 504:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
 508:	006e6970 	rsbeq	r6, lr, r0, ror r9
 50c:	4f495047 	svcmi	0x00495047
 510:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
 514:	47006574 	smlsdxmi	r0, r4, r5, r6
 518:	784f4950 	stmdavc	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
 51c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 520:	6f545f4f 	svcvs	0x00545f4f
 524:	656c6767 	strbvs	r6, [ip, #-1895]!	; 0xfffff899
 528:	73746942 	cmnvc	r4, #1081344	; 0x108000
 52c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 530:	00325f70 	eorseq	r5, r2, r0, ror pc
 534:	4f495047 	svcmi	0x00495047
 538:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
 53c:	6f434641 	svcvs	0x00434641
 540:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 544:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 548:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
 54c:	754f6461 	strbvc	r6, [pc, #-1121]	; f3 <startup-0x1fffff0d>
 550:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 554:	61746144 	cmnvs	r4, r4, asr #2
 558:	00746942 	rsbseq	r6, r4, r2, asr #18
 55c:	5f434352 	svcpl	0x00434352
 560:	4b4c4348 	blmi	1311288 <startup-0x1eceed78>
 564:	43435200 	movtmi	r5, #12800	; 0x3200
 568:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
 56c:	42504100 	subsmi	r4, r0, #0, 2
 570:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
 574:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
 578:	505f4343 	subspl	r4, pc, r3, asr #6
 57c:	41534c4c 	cmpmi	r3, ip, asr #24
 580:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
 584:	43435200 	movtmi	r5, #12800	; 0x3200
 588:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
 58c:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
 590:	00517669 	subseq	r7, r1, r9, ror #12
 594:	5f434352 	svcpl	0x00434352
 598:	534c4c50 	movtpl	r4, #52304	; 0xcc50
 59c:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
 5a0:	73005276 	movwvc	r5, #630	; 0x276
 5a4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 5a8:	67657273 			; <UNDEFINED> instruction: 0x67657273
 5ac:	53595300 	cmppl	r9, #0, 6
 5b0:	5f4b4c43 	svcpl	0x004b4c43
 5b4:	71657246 	cmnvc	r5, r6, asr #4
 5b8:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
 5bc:	6c700079 	ldclvs	0, cr0, [r0], #-484	; 0xfffffe1c
 5c0:	70006d6c 	andvc	r6, r0, ip, ror #26
 5c4:	00706c6c 	rsbseq	r6, r0, ip, ror #24
 5c8:	5f434352 	svcpl	0x00434352
 5cc:	314f434d 	cmpcc	pc, sp, asr #6
 5d0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
 5d4:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
 5d8:	415f4343 	cmpmi	pc, r3, asr #6
 5dc:	50314250 	eorspl	r4, r1, r0, asr r2
 5e0:	70697265 	rsbvc	r7, r9, r5, ror #4
 5e4:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
 5e8:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
 5ec:	4c500064 	mrrcmi	0, 6, r0, r0, cr4	; <UNPREDICTABLE>
 5f0:	52004e4c 	andpl	r4, r0, #76, 28	; 0x4c0
 5f4:	535f4343 	cmppl	pc, #201326593	; 0xc000001
 5f8:	4c504941 	mrrcmi	9, 4, r4, r0, cr1	; <UNPREDICTABLE>
 5fc:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
 600:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xfffff3bd
 604:	6f437669 	svcvs	0x00437669
 608:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 60c:	4c4c5000 	marmi	acc0, r5, ip
 610:	4c500050 	mrrcmi	0, 5, r0, r0, cr0	; <UNPREDICTABLE>
 614:	5200514c 	andpl	r5, r0, #76, 2
 618:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
 61c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 620:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
 624:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
 628:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
 62c:	43435200 	movtmi	r5, #12800	; 0x3200
 630:	0054495f 	subseq	r4, r4, pc, asr r9
 634:	4d4c4c50 	stclmi	12, cr4, [ip, #-320]	; 0xfffffec0
 638:	43435200 	movtmi	r5, #12800	; 0x3200
 63c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 640:	72655031 	rsbvc	r5, r5, #49	; 0x31
 644:	00687069 	rsbeq	r7, r8, r9, rrx
 648:	31424841 	cmpcc	r2, r1, asr #16
 64c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 650:	43520052 	cmpmi	r2, #82	; 0x52
 654:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
 658:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
 65c:	43435200 	movtmi	r5, #12800	; 0x3200
 660:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 664:	72655032 	rsbvc	r5, r5, #50	; 0x32
 668:	43687069 	cmnmi	r8, #105	; 0x69
 66c:	6b636f6c 	blvs	18dc424 <startup-0x1e723bdc>
 670:	6f4d504c 	svcvs	0x004d504c
 674:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
 678:	43440064 	movtmi	r0, #16484	; 0x4064
 67c:	4746434b 	strbmi	r4, [r6, -fp, asr #6]
 680:	43520052 	cmpmi	r2, #82	; 0x52
 684:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
 688:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
 68c:	0067616c 	rsbeq	r6, r7, ip, ror #2
 690:	31424841 	cmpcc	r2, r1, asr #16
 694:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
 698:	4b434400 	blmi	10d16a0 <startup-0x1ef2e960>
 69c:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 6a0:	6d740032 	ldclvs	0, cr0, [r4, #-200]!	; 0xffffff38
 6a4:	67657270 			; <UNDEFINED> instruction: 0x67657270
 6a8:	4c435000 	marmi	acc0, r5, r3
 6ac:	465f324b 	ldrbmi	r3, [pc], -fp, asr #4
 6b0:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
 6b4:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 6b8:	43435200 	movtmi	r5, #12800	; 0x3200
 6bc:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 6c0:	72655032 	rsbvc	r5, r5, #50	; 0x32
 6c4:	43687069 	cmnmi	r8, #105	; 0x69
 6c8:	6b636f6c 	blvs	18dc480 <startup-0x1e723b80>
 6cc:	00646d43 	rsbeq	r6, r4, r3, asr #26
 6d0:	32425041 	subcc	r5, r2, #65	; 0x41
 6d4:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
 6d8:	43435200 	movtmi	r5, #12800	; 0x3200
 6dc:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
 6e0:	6f43314b 	svcvs	0x0043314b
 6e4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 6e8:	43435200 	movtmi	r5, #12800	; 0x3200
 6ec:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 6f0:	72655033 	rsbvc	r5, r5, #51	; 0x33
 6f4:	52687069 	rsbpl	r7, r8, #105	; 0x69
 6f8:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
 6fc:	00646d43 	rsbeq	r6, r4, r3, asr #26
 700:	5f434352 	svcpl	0x00434352
 704:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
 708:	6b636f6c 	blvs	18dc4c0 <startup-0x1e723b40>
 70c:	4b4c4341 	blmi	1311418 <startup-0x1eceebe8>
 710:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 714:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
 718:	415f4343 	cmpmi	pc, r3, asr #6
 71c:	50314248 	eorspl	r4, r1, r8, asr #4
 720:	70697265 	rsbvc	r7, r9, r5, ror #4
 724:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
 728:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
 72c:	43520064 	cmpmi	r2, #100	; 0x64
 730:	43485f43 	movtmi	r5, #36675	; 0x8f43
 734:	6f434b4c 	svcvs	0x00434b4c
 738:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 73c:	43435200 	movtmi	r5, #12800	; 0x3200
 740:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
 744:	434b4c43 	movtmi	r4, #48195	; 0xbc43
 748:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 74c:	43520067 	cmpmi	r2, #103	; 0x67
 750:	534c5f43 	movtpl	r5, #53059	; 0xcf43
 754:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
 758:	00676966 	rsbeq	r6, r7, r6, ror #18
 75c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffd21 <APBAHBPrescTable+0xdfffe911>
 760:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 764:	6164412f 	cmnvs	r4, pc, lsr #2
 768:	4f2f746d 	svcmi	0x002f746d
 76c:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 770:	2f657669 	svccs	0x00657669
 774:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 778:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 77c:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 780:	2f627548 	svccs	0x00627548
 784:	32544144 	subscc	r4, r4, #68, 2
 788:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
 78c:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
 790:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 794:	6f6b2f6d 	svcvs	0x006b2f6d
 798:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
 79c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 7a0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 7a4:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 7a8:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 7ac:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 7b0:	5f787834 	svcpl	0x00787834
 7b4:	50647453 	rsbpl	r7, r4, r3, asr r4
 7b8:	70697265 	rsbvc	r7, r9, r5, ror #4
 7bc:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 7c0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 7c4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 7c8:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
 7cc:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 7d0:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
 7d4:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
 7d8:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
 7dc:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 7e0:	4c500065 	mrrcmi	0, 6, r0, r0, cr5	; <UNPREDICTABLE>
 7e4:	4746434c 	strbmi	r4, [r6, -ip, asr #6]
 7e8:	43520052 	cmpmi	r2, #82	; 0x52
 7ec:	61425f43 	cmpvs	r2, r3, asr #30
 7f0:	70756b63 	rsbsvc	r6, r5, r3, ror #22
 7f4:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 7f8:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
 7fc:	72724500 	rsbsvc	r4, r2, #0, 10
 800:	7453726f 	ldrbvc	r7, [r3], #-623	; 0xfffffd91
 804:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 808:	43435200 	movtmi	r5, #12800	; 0x3200
 80c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
 810:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
 814:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
 818:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
 81c:	59537465 	ldmdbpl	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
 820:	4b4c4353 	blmi	1311574 <startup-0x1eceea8c>
 824:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
 828:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
 82c:	575f4343 	ldrbpl	r4, [pc, -r3, asr #6]
 830:	46746961 	ldrbtmi	r6, [r4], -r1, ror #18
 834:	5348726f 	movtpl	r7, #33391	; 0x826f
 838:	61745345 	cmnvs	r4, r5, asr #6
 83c:	70557472 	subsvc	r7, r5, r2, ror r4
 840:	4c434800 	mcrrmi	8, 0, r4, r3, cr0
 844:	72465f4b 	subvc	r5, r6, #300	; 0x12c
 848:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 84c:	0079636e 	rsbseq	r6, r9, lr, ror #6
 850:	5f434352 	svcpl	0x00434352
 854:	31425041 	cmpcc	r2, r1, asr #32
 858:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 85c:	70006870 	andvc	r6, r0, r0, ror r8
 860:	63766c6c 	cmnvs	r6, #108, 24	; 0x6c00
 864:	4352006f 	cmpmi	r2, #111	; 0x6f
 868:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
 86c:	52004741 	andpl	r4, r0, #17039360	; 0x1040000
 870:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 76c <startup-0x1ffff894>
 874:	43314f43 	teqmi	r1, #268	; 0x10c
 878:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 87c:	43520067 	cmpmi	r2, #103	; 0x67
 880:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 884:	4b4c4353 	blmi	13115d8 <startup-0x1eceea28>
 888:	43435200 	movtmi	r5, #12800	; 0x3200
 88c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
 890:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
 894:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
 898:	545f4343 	ldrbpl	r4, [pc], #-835	; 8a0 <startup-0x1ffff760>
 89c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
 8a0:	70006665 	andvc	r6, r0, r5, ror #12
 8a4:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
 8a8:	43435200 	movtmi	r5, #12800	; 0x3200
 8ac:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
 8b0:	534b4c43 	movtpl	r4, #48195	; 0xbc43
 8b4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
 8b8:	43520065 	cmpmi	r2, #101	; 0x65
 8bc:	41535f43 	cmpmi	r3, r3, asr #30
 8c0:	6f6c4249 	svcvs	0x006c4249
 8c4:	43416b63 	movtmi	r6, #7011	; 0x1b63
 8c8:	6f534b4c 	svcvs	0x00534b4c
 8cc:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
 8d0:	43435200 	movtmi	r5, #12800	; 0x3200
 8d4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
 8d8:	636f6c42 	cmnvs	pc, #16896	; 0x4200
 8dc:	4c43426b 	sfmmi	f4, 2, [r3], {107}	; 0x6b
 8e0:	756f534b 	strbvc	r5, [pc, #-843]!	; 59d <startup-0x1ffffa63>
 8e4:	00656372 	rsbeq	r6, r5, r2, ror r3
 8e8:	5f434352 	svcpl	0x00434352
 8ec:	4344544c 	movtmi	r5, #17484	; 0x444c
 8f0:	444b4c43 	strbmi	r4, [fp], #-3139	; 0xfffff3bd
 8f4:	6f437669 	svcvs	0x00437669
 8f8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8fc:	4c4c5000 	marmi	acc0, r5, ip
 900:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
 904:	00524746 	subseq	r4, r2, r6, asr #14
 908:	5f434352 	svcpl	0x00434352
 90c:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 910:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 914:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
 918:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
 91c:	646f4d50 	strbtvs	r4, [pc], #-3408	; 924 <startup-0x1ffff6dc>
 920:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
 924:	43435200 	movtmi	r5, #12800	; 0x3200
 928:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
 92c:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
 930:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 934:	43520067 	cmpmi	r2, #103	; 0x67
 938:	53485f43 	movtpl	r5, #36675	; 0x8f43
 93c:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
 940:	43435200 	movtmi	r5, #12800	; 0x3200
 944:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 948:	72655032 	rsbvc	r5, r5, #50	; 0x32
 94c:	00687069 	rsbeq	r7, r8, r9, rrx
 950:	32425041 	subcc	r5, r2, #65	; 0x41
 954:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 958:	43520052 	cmpmi	r2, #82	; 0x52
 95c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 960:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
 964:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 968:	43435200 	movtmi	r5, #12800	; 0x3200
 96c:	4f434d5f 	svcmi	0x00434d5f
 970:	76694432 			; <UNDEFINED> instruction: 0x76694432
 974:	43435200 	movtmi	r5, #12800	; 0x3200
 978:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
 97c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
 980:	6c435332 	mcrrvs	3, 3, r5, r3, cr2
 984:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
 988:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 98c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
 990:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
 994:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
 998:	646d434b 	strbtvs	r4, [sp], #-843	; 0xfffffcb5
 99c:	52524500 	subspl	r4, r2, #0, 10
 9a0:	5200524f 	andpl	r5, r0, #-268435452	; 0xf0000004
 9a4:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
 9a8:	6b636f6c 	blvs	18dc760 <startup-0x1e7238a0>
 9ac:	75636553 	strbvc	r6, [r3, #-1363]!	; 0xfffffaad
 9b0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 9b4:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
 9b8:	6d436d65 	stclvs	13, cr6, [r3, #-404]	; 0xfffffe6c
 9bc:	43520064 	cmpmi	r2, #100	; 0x64
 9c0:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
 9c4:	5332494c 	teqpl	r2, #76, 18	; 0x130000
 9c8:	51766944 	cmnpl	r6, r4, asr #18
 9cc:	43435200 	movtmi	r5, #12800	; 0x3200
 9d0:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
 9d4:	43494153 	movtmi	r4, #37203	; 0x9153
 9d8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 9dc:	48410067 	stmdami	r1, {r0, r1, r2, r5, r6}^
 9e0:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
 9e4:	43520052 	cmpmi	r2, #82	; 0x52
 9e8:	534c5f43 	movtpl	r5, #53059	; 0xcf43
 9ec:	646f4d45 	strbtvs	r4, [pc], #-3397	; 9f4 <startup-0x1ffff60c>
 9f0:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
 9f4:	00676966 	rsbeq	r6, r7, r6, ror #18
 9f8:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 9fc:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 a00:	75460052 	strbvc	r0, [r6, #-82]	; 0xffffffae
 a04:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 a08:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
 a0c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 a10:	43520065 	cmpmi	r2, #101	; 0x65
 a14:	434d5f43 	movtmi	r5, #57155	; 0xdf43
 a18:	6944314f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r8, ip, sp}^
 a1c:	43520076 	cmpmi	r2, #118	; 0x76
 a20:	50415f43 	subpl	r5, r1, r3, asr #30
 a24:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
 a28:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 a2c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 a30:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
 a34:	43435200 	movtmi	r5, #12800	; 0x3200
 a38:	4f434d5f 	svcmi	0x00434d5f
 a3c:	756f5332 	strbvc	r5, [pc, #-818]!	; 712 <startup-0x1ffff8ee>
 a40:	00656372 	rsbeq	r6, r5, r2, ror r3
 a44:	5f434352 	svcpl	0x00434352
 a48:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
 a4c:	6f534b4c 	svcvs	0x00534b4c
 a50:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
 a54:	4c4c5000 	marmi	acc0, r5, ip
 a58:	43494153 	movtmi	r4, #37203	; 0x9153
 a5c:	00524746 	subseq	r4, r2, r6, asr #14
 a60:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
 a64:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
 a68:	45520030 	ldrbmi	r0, [r2, #-48]	; 0xffffffd0
 a6c:	56524553 			; <UNDEFINED> instruction: 0x56524553
 a70:	00314445 	eorseq	r4, r1, r5, asr #8
 a74:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
 a78:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
 a7c:	45520032 	ldrbmi	r0, [r2, #-50]	; 0xffffffce
 a80:	56524553 			; <UNDEFINED> instruction: 0x56524553
 a84:	00334445 	eorseq	r4, r3, r5, asr #8
 a88:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
 a8c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
 a90:	45520034 	ldrbmi	r0, [r2, #-52]	; 0xffffffcc
 a94:	56524553 			; <UNDEFINED> instruction: 0x56524553
 a98:	00354445 	eorseq	r4, r5, r5, asr #8
 a9c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
 aa0:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
 aa4:	43520036 	cmpmi	r2, #54	; 0x36
 aa8:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
 aac:	616c4674 	smcvs	50276	; 0xc464
 ab0:	61745367 	cmnvs	r4, r7, ror #6
 ab4:	00737574 	rsbseq	r7, r3, r4, ror r5
 ab8:	5f434352 	svcpl	0x00434352
 abc:	43455348 	movtmi	r5, #21320	; 0x5348
 ac0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 ac4:	43520067 	cmpmi	r2, #103	; 0x67
 ac8:	41535f43 	cmpmi	r3, r3, asr #30
 acc:	6f6c4249 	svcvs	0x006c4249
 ad0:	43426b63 	movtmi	r6, #11107	; 0x2b63
 ad4:	6f434b4c 	svcvs	0x00434b4c
 ad8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 adc:	4c4c5000 	marmi	acc0, r5, ip
 ae0:	4e494153 	mcrmi	1, 2, r4, cr9, cr3, {2}
 ae4:	4c4c5000 	marmi	acc0, r5, ip
 ae8:	51494153 	cmppl	r9, r3, asr r1
 aec:	4c4c5000 	marmi	acc0, r5, ip
 af0:	52494153 	subpl	r4, r9, #-1073741804	; 0xc0000014
 af4:	43435200 	movtmi	r5, #12800	; 0x3200
 af8:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
 afc:	504b4c43 	subpl	r4, fp, r3, asr #24
 b00:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
 b04:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
 b08:	43435200 	movtmi	r5, #12800	; 0x3200
 b0c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
 b10:	00646d43 	rsbeq	r6, r4, r3, asr #26
 b14:	5f434352 	svcpl	0x00434352
 b18:	31424841 	cmpcc	r2, r1, asr #16
 b1c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 b20:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
 b24:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
 b28:	4100646d 	tstmi	r0, sp, ror #8
 b2c:	45324250 	ldrmi	r4, [r2, #-592]!	; 0xfffffdb0
 b30:	4100524e 	tstmi	r0, lr, asr #4
 b34:	52334248 	eorspl	r4, r3, #72, 4	; 0x80000004
 b38:	00525453 	subseq	r5, r2, r3, asr r4
 b3c:	5f434352 	svcpl	0x00434352
 b40:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 b44:	43435200 	movtmi	r5, #12800	; 0x3200
 b48:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 b4c:	72655032 	rsbvc	r5, r5, #50	; 0x32
 b50:	52687069 	rsbpl	r7, r8, #105	; 0x69
 b54:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
 b58:	00646d43 	rsbeq	r6, r4, r3, asr #26
 b5c:	5f434352 	svcpl	0x00434352
 b60:	31425041 	cmpcc	r2, r1, asr #32
 b64:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 b68:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
 b6c:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
 b70:	646f4d50 	strbtvs	r4, [pc], #-3408	; b78 <startup-0x1ffff488>
 b74:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
 b78:	43435200 	movtmi	r5, #12800	; 0x3200
 b7c:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
 b80:	6f43324b 	svcvs	0x0043324b
 b84:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 b88:	43435200 	movtmi	r5, #12800	; 0x3200
 b8c:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
 b90:	534b4c43 	movtpl	r4, #48195	; 0xbc43
 b94:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
 b98:	43520065 	cmpmi	r2, #101	; 0x65
 b9c:	53485f43 	movtpl	r5, #36675	; 0x8f43
 ba0:	43500045 	cmpmi	r0, #69	; 0x45
 ba4:	5f314b4c 	svcpl	0x00314b4c
 ba8:	71657246 	cmnvc	r5, r6, asr #4
 bac:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
 bb0:	50410079 	subpl	r0, r1, r9, ror r0
 bb4:	42484142 	submi	r4, r8, #-2147483632	; 0x80000010
 bb8:	73657250 	cmnvc	r5, #80, 4
 bbc:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
 bc0:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
 bc4:	415f4343 	cmpmi	pc, r3, asr #6
 bc8:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
 bcc:	49534874 	ldmdbmi	r3, {r2, r4, r5, r6, fp, lr}^
 bd0:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
 bd4:	74617262 	strbtvc	r7, [r1], #-610	; 0xfffffd9e
 bd8:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
 bdc:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 be0:	65736800 	ldrbvs	r6, [r3, #-2048]!	; 0xfffff800
 be4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 be8:	50007375 	andpl	r7, r0, r5, ror r3
 bec:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
 bf0:	52004e53 	andpl	r4, r0, #1328	; 0x530
 bf4:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
 bf8:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
 bfc:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
 c00:	71657246 	cmnvc	r5, r6, asr #4
 c04:	43435200 	movtmi	r5, #12800	; 0x3200
 c08:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 c0c:	72655032 	rsbvc	r5, r5, #50	; 0x32
 c10:	43687069 	cmnmi	r8, #105	; 0x69
 c14:	6b636f6c 	blvs	18dc9cc <startup-0x1e723634>
 c18:	00646d43 	rsbeq	r6, r4, r3, asr #26
 c1c:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 c20:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
 c24:	43435200 	movtmi	r5, #12800	; 0x3200
 c28:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
 c2c:	0074696e 	rsbseq	r6, r4, lr, ror #18
 c30:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
 c34:	00525332 	subseq	r5, r2, r2, lsr r3
 c38:	5f434352 	svcpl	0x00434352
 c3c:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
 c40:	61745354 	cmnvs	r4, r4, asr r3
 c44:	00737574 	rsbseq	r7, r3, r4, ror r5
 c48:	31425041 	cmpcc	r2, r1, asr #32
 c4c:	00524e45 	subseq	r4, r2, r5, asr #28
 c50:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 c54:	00524e45 	subseq	r4, r2, r5, asr #28
 c58:	5f434352 	svcpl	0x00434352
 c5c:	33424841 	movtcc	r4, #10305	; 0x2841
 c60:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 c64:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
 c68:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
 c6c:	646f4d50 	strbtvs	r4, [pc], #-3408	; c74 <startup-0x1ffff38c>
 c70:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
 c74:	61747300 	cmnvs	r4, r0, lsl #6
 c78:	70757472 	rsbsvc	r7, r5, r2, ror r4
 c7c:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 c80:	00726574 	rsbseq	r6, r2, r4, ror r5
 c84:	5f434352 	svcpl	0x00434352
 c88:	32425041 	subcc	r5, r2, #65	; 0x41
 c8c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 c90:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
 c94:	545f4343 	ldrbpl	r4, [pc], #-835	; c9c <startup-0x1ffff364>
 c98:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
 c9c:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0xffffffb5
 ca0:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
 ca4:	00676966 	rsbeq	r6, r7, r6, ror #18
 ca8:	5f434352 	svcpl	0x00434352
 cac:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
 cb0:	6f434b4c 	svcvs	0x00434b4c
 cb4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 cb8:	43435200 	movtmi	r5, #12800	; 0x3200
 cbc:	4f434d5f 	svcmi	0x00434d5f
 cc0:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
 cc4:	00676966 	rsbeq	r6, r7, r6, ror #18
 cc8:	47435353 	smlsldmi	r5, r3, r3, r3
 ccc:	48410052 	stmdami	r1, {r1, r4, r6}^
 cd0:	504c3342 	subpl	r3, ip, r2, asr #6
 cd4:	00524e45 	subseq	r4, r2, r5, asr #28
 cd8:	31425041 	cmpcc	r2, r1, asr #32
 cdc:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
 ce0:	43435200 	movtmi	r5, #12800	; 0x3200
 ce4:	49534c5f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
 ce8:	00646d43 	rsbeq	r6, r4, r3, asr #26
 cec:	41474b43 	cmpmi	r7, r3, asr #22
 cf0:	524e4554 	subpl	r4, lr, #84, 10	; 0x15000000
 cf4:	43444200 	movtmi	r4, #16896	; 0x4200
 cf8:	43520052 	cmpmi	r2, #82	; 0x52
 cfc:	50415f43 	subpl	r5, r1, r3, asr #30
 d00:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
 d04:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 d08:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 d0c:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
 d10:	43435200 	movtmi	r5, #12800	; 0x3200
 d14:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
 d18:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 d1c:	55530067 	ldrbpl	r0, [r3, #-103]	; 0xffffff99
 d20:	53454343 	movtpl	r4, #21315	; 0x5343
 d24:	43520053 	cmpmi	r2, #83	; 0x53
 d28:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
 d2c:	6e6f434c 	cdpvs	3, 6, cr4, cr15, cr12, {2}
 d30:	00676966 	rsbeq	r6, r7, r6, ror #18
 d34:	5f434352 	svcpl	0x00434352
 d38:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 d3c:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
 d40:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
 d44:	48410066 	stmdami	r1, {r1, r2, r5, r6}^
 d48:	4e453142 	dvfmism	f3, f5, f2
 d4c:	43520052 	cmpmi	r2, #82	; 0x52
 d50:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
 d54:	4b4c4343 	blmi	1311a68 <startup-0x1ecee598>
 d58:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 d5c:	70006769 	andvc	r6, r0, r9, ror #14
 d60:	6f736c6c 	svcvs	0x00736c6c
 d64:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
 d68:	43435200 	movtmi	r5, #12800	; 0x3200
 d6c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 d70:	72655031 	rsbvc	r5, r5, #49	; 0x31
 d74:	43687069 	cmnmi	r8, #105	; 0x69
 d78:	6b636f6c 	blvs	18dcb30 <startup-0x1e7234d0>
 d7c:	6f4d504c 	svcvs	0x004d504c
 d80:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
 d84:	43520064 	cmpmi	r2, #100	; 0x64
 d88:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 d8c:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
 d90:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 d94:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 d98:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <APBAHBPrescTable+0xdfffdefe>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000068 	andeq	r0, r0, r8, rrx
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	100e4101 	andne	r4, lr, r1, lsl #2
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	00000018 	andeq	r0, r0, r8, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000078 	andcs	r0, r0, r8, ror r0
  4c:	0000000a 	andeq	r0, r0, sl
  50:	40080e41 	andmi	r0, r8, r1, asr #28
  54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  58:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	20000082 	andcs	r0, r0, r2, lsl #1
  68:	00000076 	andeq	r0, r0, r6, ror r0
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	41380e41 	teqmi	r8, r1, asr #28
  7c:	0000070d 	andeq	r0, r0, sp, lsl #14
  80:	0000000c 	andeq	r0, r0, ip
  84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  88:	7c020001 	stcvc	0, cr0, [r2], {1}
  8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000080 	andeq	r0, r0, r0, lsl #1
  98:	200000f8 	strdcs	r0, [r0], -r8
  9c:	00000170 	andeq	r0, r0, r0, ror r1
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000080 	andeq	r0, r0, r0, lsl #1
  b8:	20000268 	andcs	r0, r0, r8, ror #4
  bc:	00000118 	andeq	r0, r0, r8, lsl r1
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	200e4101 	andcs	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000080 	andeq	r0, r0, r0, lsl #1
  d8:	20000380 	andcs	r0, r0, r0, lsl #7
  dc:	00000034 	andeq	r0, r0, r4, lsr r0
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000080 	andeq	r0, r0, r0, lsl #1
  f8:	200003b4 			; <UNDEFINED> instruction: 0x200003b4
  fc:	00000046 	andeq	r0, r0, r6, asr #32
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	180e4101 	stmdane	lr, {r0, r8, lr}
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000080 	andeq	r0, r0, r0, lsl #1
 118:	200003fa 	strdcs	r0, [r0], -sl
 11c:	00000042 	andeq	r0, r0, r2, asr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	180e4101 	stmdane	lr, {r0, r8, lr}
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000080 	andeq	r0, r0, r0, lsl #1
 138:	2000043c 	andcs	r0, r0, ip, lsr r4
 13c:	00000016 	andeq	r0, r0, r6, lsl r0
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	100e4101 	andne	r4, lr, r1, lsl #2
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000080 	andeq	r0, r0, r0, lsl #1
 158:	20000452 	andcs	r0, r0, r2, asr r4
 15c:	00000042 	andeq	r0, r0, r2, asr #32
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	180e4101 	stmdane	lr, {r0, r8, lr}
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000080 	andeq	r0, r0, r0, lsl #1
 178:	20000494 	mulcs	r0, r4, r4
 17c:	00000016 	andeq	r0, r0, r6, lsl r0
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	100e4101 	andne	r4, lr, r1, lsl #2
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000080 	andeq	r0, r0, r0, lsl #1
 198:	200004aa 	andcs	r0, r0, sl, lsr #9
 19c:	0000001e 	andeq	r0, r0, lr, lsl r0
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000080 	andeq	r0, r0, r0, lsl #1
 1b8:	200004c8 	andcs	r0, r0, r8, asr #9
 1bc:	0000001e 	andeq	r0, r0, lr, lsl r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	100e4101 	andne	r4, lr, r1, lsl #2
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000080 	andeq	r0, r0, r0, lsl #1
 1d8:	200004e6 	andcs	r0, r0, r6, ror #9
 1dc:	0000003a 	andeq	r0, r0, sl, lsr r0
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000080 	andeq	r0, r0, r0, lsl #1
 1f8:	20000520 	andcs	r0, r0, r0, lsr #10
 1fc:	0000001e 	andeq	r0, r0, lr, lsl r0
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000080 	andeq	r0, r0, r0, lsl #1
 218:	2000053e 	andcs	r0, r0, lr, lsr r5
 21c:	00000024 	andeq	r0, r0, r4, lsr #32
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	100e4101 	andne	r4, lr, r1, lsl #2
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000080 	andeq	r0, r0, r0, lsl #1
 238:	20000562 	andcs	r0, r0, r2, ror #10
 23c:	000000a4 	andeq	r0, r0, r4, lsr #1
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000000c 	andeq	r0, r0, ip
 254:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 258:	7c020001 	stcvc	0, cr0, [r2], {1}
 25c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 260:	00000018 	andeq	r0, r0, r8, lsl r0
 264:	00000250 	andeq	r0, r0, r0, asr r2
 268:	20000608 	andcs	r0, r0, r8, lsl #12
 26c:	00000070 	andeq	r0, r0, r0, ror r0
 270:	40080e41 	andmi	r0, r8, r1, asr #28
 274:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 278:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	00000250 	andeq	r0, r0, r0, asr r2
 284:	20000678 	andcs	r0, r0, r8, ror r6
 288:	00000028 	andeq	r0, r0, r8, lsr #32
 28c:	40080e41 	andmi	r0, r8, r1, asr #28
 290:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 294:	100e4101 	andne	r4, lr, r1, lsl #2
 298:	00070d41 	andeq	r0, r7, r1, asr #26
 29c:	00000020 	andeq	r0, r0, r0, lsr #32
 2a0:	00000250 	andeq	r0, r0, r0, asr r2
 2a4:	200006a0 	andcs	r0, r0, r0, lsr #13
 2a8:	0000005e 	andeq	r0, r0, lr, asr r0
 2ac:	400c0e41 	andmi	r0, ip, r1, asr #28
 2b0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 2b4:	018e4002 	orreq	r4, lr, r2
 2b8:	41180e41 	tstmi	r8, r1, asr #28
 2bc:	0000070d 	andeq	r0, r0, sp, lsl #14
 2c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c4:	00000250 	andeq	r0, r0, r0, asr r2
 2c8:	200006fe 	strdcs	r0, [r0], -lr
 2cc:	0000003e 	andeq	r0, r0, lr, lsr r0
 2d0:	40080e41 	andmi	r0, r8, r1, asr #28
 2d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d8:	180e4101 	stmdane	lr, {r0, r8, lr}
 2dc:	00070d41 	andeq	r0, r7, r1, asr #26
 2e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e4:	00000250 	andeq	r0, r0, r0, asr r2
 2e8:	2000073c 	andcs	r0, r0, ip, lsr r7
 2ec:	00000020 	andeq	r0, r0, r0, lsr #32
 2f0:	40080e41 	andmi	r0, r8, r1, asr #28
 2f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f8:	100e4101 	andne	r4, lr, r1, lsl #2
 2fc:	00070d41 	andeq	r0, r7, r1, asr #26
 300:	0000001c 	andeq	r0, r0, ip, lsl r0
 304:	00000250 	andeq	r0, r0, r0, asr r2
 308:	2000075c 	andcs	r0, r0, ip, asr r7
 30c:	00000044 	andeq	r0, r0, r4, asr #32
 310:	40080e41 	andmi	r0, r8, r1, asr #28
 314:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 318:	100e4101 	andne	r4, lr, r1, lsl #2
 31c:	00070d41 	andeq	r0, r7, r1, asr #26
 320:	0000001c 	andeq	r0, r0, ip, lsl r0
 324:	00000250 	andeq	r0, r0, r0, asr r2
 328:	200007a0 	andcs	r0, r0, r0, lsr #15
 32c:	00000020 	andeq	r0, r0, r0, lsr #32
 330:	40080e41 	andmi	r0, r8, r1, asr #28
 334:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 338:	100e4101 	andne	r4, lr, r1, lsl #2
 33c:	00070d41 	andeq	r0, r7, r1, asr #26
 340:	0000001c 	andeq	r0, r0, ip, lsl r0
 344:	00000250 	andeq	r0, r0, r0, asr r2
 348:	200007c0 	andcs	r0, r0, r0, asr #15
 34c:	0000003c 	andeq	r0, r0, ip, lsr r0
 350:	40080e41 	andmi	r0, r8, r1, asr #28
 354:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 358:	180e4101 	stmdane	lr, {r0, r8, lr}
 35c:	00070d41 	andeq	r0, r7, r1, asr #26
 360:	0000001c 	andeq	r0, r0, ip, lsl r0
 364:	00000250 	andeq	r0, r0, r0, asr r2
 368:	200007fc 	strdcs	r0, [r0], -ip
 36c:	00000020 	andeq	r0, r0, r0, lsr #32
 370:	40080e41 	andmi	r0, r8, r1, asr #28
 374:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 378:	100e4101 	andne	r4, lr, r1, lsl #2
 37c:	00070d41 	andeq	r0, r7, r1, asr #26
 380:	0000001c 	andeq	r0, r0, ip, lsl r0
 384:	00000250 	andeq	r0, r0, r0, asr r2
 388:	2000081c 	andcs	r0, r0, ip, lsl r8
 38c:	00000028 	andeq	r0, r0, r8, lsr #32
 390:	40080e41 	andmi	r0, r8, r1, asr #28
 394:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 398:	100e4101 	andne	r4, lr, r1, lsl #2
 39c:	00070d41 	andeq	r0, r7, r1, asr #26
 3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a4:	00000250 	andeq	r0, r0, r0, asr r2
 3a8:	20000844 	andcs	r0, r0, r4, asr #16
 3ac:	00000020 	andeq	r0, r0, r0, lsr #32
 3b0:	40080e41 	andmi	r0, r8, r1, asr #28
 3b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b8:	100e4101 	andne	r4, lr, r1, lsl #2
 3bc:	00070d41 	andeq	r0, r7, r1, asr #26
 3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c4:	00000250 	andeq	r0, r0, r0, asr r2
 3c8:	20000864 	andcs	r0, r0, r4, ror #16
 3cc:	00000030 	andeq	r0, r0, r0, lsr r0
 3d0:	40080e41 	andmi	r0, r8, r1, asr #28
 3d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d8:	180e4101 	stmdane	lr, {r0, r8, lr}
 3dc:	00070d41 	andeq	r0, r7, r1, asr #26
 3e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e4:	00000250 	andeq	r0, r0, r0, asr r2
 3e8:	20000894 	mulcs	r0, r4, r8
 3ec:	00000020 	andeq	r0, r0, r0, lsr #32
 3f0:	40080e41 	andmi	r0, r8, r1, asr #28
 3f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f8:	100e4101 	andne	r4, lr, r1, lsl #2
 3fc:	00070d41 	andeq	r0, r7, r1, asr #26
 400:	0000001c 	andeq	r0, r0, ip, lsl r0
 404:	00000250 	andeq	r0, r0, r0, asr r2
 408:	200008b4 			; <UNDEFINED> instruction: 0x200008b4
 40c:	00000020 	andeq	r0, r0, r0, lsr #32
 410:	40080e41 	andmi	r0, r8, r1, asr #28
 414:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 418:	100e4101 	andne	r4, lr, r1, lsl #2
 41c:	00070d41 	andeq	r0, r7, r1, asr #26
 420:	0000001c 	andeq	r0, r0, ip, lsl r0
 424:	00000250 	andeq	r0, r0, r0, asr r2
 428:	200008d4 	ldrdcs	r0, [r0], -r4
 42c:	00000040 	andeq	r0, r0, r0, asr #32
 430:	40080e41 	andmi	r0, r8, r1, asr #28
 434:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 438:	180e4101 	stmdane	lr, {r0, r8, lr}
 43c:	00070d41 	andeq	r0, r7, r1, asr #26
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	00000250 	andeq	r0, r0, r0, asr r2
 448:	20000914 	andcs	r0, r0, r4, lsl r9
 44c:	0000003c 	andeq	r0, r0, ip, lsr r0
 450:	40080e41 	andmi	r0, r8, r1, asr #28
 454:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 458:	180e4101 	stmdane	lr, {r0, r8, lr}
 45c:	00070d41 	andeq	r0, r7, r1, asr #26
 460:	0000001c 	andeq	r0, r0, ip, lsl r0
 464:	00000250 	andeq	r0, r0, r0, asr r2
 468:	20000950 	andcs	r0, r0, r0, asr r9
 46c:	00000034 	andeq	r0, r0, r4, lsr r0
 470:	40080e41 	andmi	r0, r8, r1, asr #28
 474:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 478:	180e4101 	stmdane	lr, {r0, r8, lr}
 47c:	00070d41 	andeq	r0, r7, r1, asr #26
 480:	00000018 	andeq	r0, r0, r8, lsl r0
 484:	00000250 	andeq	r0, r0, r0, asr r2
 488:	20000984 	andcs	r0, r0, r4, lsl #19
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	40080e41 	andmi	r0, r8, r1, asr #28
 494:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 498:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 49c:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a0:	00000250 	andeq	r0, r0, r0, asr r2
 4a4:	200009a0 	andcs	r0, r0, r0, lsr #19
 4a8:	00000034 	andeq	r0, r0, r4, lsr r0
 4ac:	40080e41 	andmi	r0, r8, r1, asr #28
 4b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4b4:	180e4101 	stmdane	lr, {r0, r8, lr}
 4b8:	00070d41 	andeq	r0, r7, r1, asr #26
 4bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c0:	00000250 	andeq	r0, r0, r0, asr r2
 4c4:	200009d4 	ldrdcs	r0, [r0], -r4
 4c8:	00000038 	andeq	r0, r0, r8, lsr r0
 4cc:	40080e41 	andmi	r0, r8, r1, asr #28
 4d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d4:	180e4101 	stmdane	lr, {r0, r8, lr}
 4d8:	00070d41 	andeq	r0, r7, r1, asr #26
 4dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e0:	00000250 	andeq	r0, r0, r0, asr r2
 4e4:	20000a0c 	andcs	r0, r0, ip, lsl #20
 4e8:	0000003c 	andeq	r0, r0, ip, lsr r0
 4ec:	40080e41 	andmi	r0, r8, r1, asr #28
 4f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 4f8:	00070d41 	andeq	r0, r7, r1, asr #26
 4fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 500:	00000250 	andeq	r0, r0, r0, asr r2
 504:	20000a48 	andcs	r0, r0, r8, asr #20
 508:	00000158 	andeq	r0, r0, r8, asr r1
 50c:	40080e41 	andmi	r0, r8, r1, asr #28
 510:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 514:	280e4101 	stmdacs	lr, {r0, r8, lr}
 518:	00070d41 	andeq	r0, r7, r1, asr #26
 51c:	0000001c 	andeq	r0, r0, ip, lsl r0
 520:	00000250 	andeq	r0, r0, r0, asr r2
 524:	20000ba0 	andcs	r0, r0, r0, lsr #23
 528:	00000060 	andeq	r0, r0, r0, rrx
 52c:	40080e41 	andmi	r0, r8, r1, asr #28
 530:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 534:	180e4101 	stmdane	lr, {r0, r8, lr}
 538:	00070d41 	andeq	r0, r7, r1, asr #26
 53c:	0000001c 	andeq	r0, r0, ip, lsl r0
 540:	00000250 	andeq	r0, r0, r0, asr r2
 544:	20000c00 	andcs	r0, r0, r0, lsl #24
 548:	00000020 	andeq	r0, r0, r0, lsr #32
 54c:	40080e41 	andmi	r0, r8, r1, asr #28
 550:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 554:	100e4101 	andne	r4, lr, r1, lsl #2
 558:	00070d41 	andeq	r0, r7, r1, asr #26
 55c:	0000001c 	andeq	r0, r0, ip, lsl r0
 560:	00000250 	andeq	r0, r0, r0, asr r2
 564:	20000c20 	andcs	r0, r0, r0, lsr #24
 568:	00000020 	andeq	r0, r0, r0, lsr #32
 56c:	40080e41 	andmi	r0, r8, r1, asr #28
 570:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 574:	100e4101 	andne	r4, lr, r1, lsl #2
 578:	00070d41 	andeq	r0, r7, r1, asr #26
 57c:	0000001c 	andeq	r0, r0, ip, lsl r0
 580:	00000250 	andeq	r0, r0, r0, asr r2
 584:	20000c40 	andcs	r0, r0, r0, asr #24
 588:	0000001c 	andeq	r0, r0, ip, lsl r0
 58c:	40080e41 	andmi	r0, r8, r1, asr #28
 590:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 594:	100e4101 	andne	r4, lr, r1, lsl #2
 598:	00070d41 	andeq	r0, r7, r1, asr #26
 59c:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a0:	00000250 	andeq	r0, r0, r0, asr r2
 5a4:	20000c5c 	andcs	r0, r0, ip, asr ip
 5a8:	0000003c 	andeq	r0, r0, ip, lsr r0
 5ac:	40080e41 	andmi	r0, r8, r1, asr #28
 5b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5b4:	180e4101 	stmdane	lr, {r0, r8, lr}
 5b8:	00070d41 	andeq	r0, r7, r1, asr #26
 5bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c0:	00000250 	andeq	r0, r0, r0, asr r2
 5c4:	20000c98 	mulcs	r0, r8, ip
 5c8:	0000003c 	andeq	r0, r0, ip, lsr r0
 5cc:	40080e41 	andmi	r0, r8, r1, asr #28
 5d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5d4:	180e4101 	stmdane	lr, {r0, r8, lr}
 5d8:	00070d41 	andeq	r0, r7, r1, asr #26
 5dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e0:	00000250 	andeq	r0, r0, r0, asr r2
 5e4:	20000cd4 	ldrdcs	r0, [r0], -r4
 5e8:	0000003c 	andeq	r0, r0, ip, lsr r0
 5ec:	40080e41 	andmi	r0, r8, r1, asr #28
 5f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 5f8:	00070d41 	andeq	r0, r7, r1, asr #26
 5fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 600:	00000250 	andeq	r0, r0, r0, asr r2
 604:	20000d10 	andcs	r0, r0, r0, lsl sp
 608:	00000040 	andeq	r0, r0, r0, asr #32
 60c:	40080e41 	andmi	r0, r8, r1, asr #28
 610:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 614:	180e4101 	stmdane	lr, {r0, r8, lr}
 618:	00070d41 	andeq	r0, r7, r1, asr #26
 61c:	0000001c 	andeq	r0, r0, ip, lsl r0
 620:	00000250 	andeq	r0, r0, r0, asr r2
 624:	20000d50 	andcs	r0, r0, r0, asr sp
 628:	0000003c 	andeq	r0, r0, ip, lsr r0
 62c:	40080e41 	andmi	r0, r8, r1, asr #28
 630:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 634:	180e4101 	stmdane	lr, {r0, r8, lr}
 638:	00070d41 	andeq	r0, r7, r1, asr #26
 63c:	0000001c 	andeq	r0, r0, ip, lsl r0
 640:	00000250 	andeq	r0, r0, r0, asr r2
 644:	20000d8c 	andcs	r0, r0, ip, lsl #27
 648:	0000001c 	andeq	r0, r0, ip, lsl r0
 64c:	40080e41 	andmi	r0, r8, r1, asr #28
 650:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 654:	100e4101 	andne	r4, lr, r1, lsl #2
 658:	00070d41 	andeq	r0, r7, r1, asr #26
 65c:	0000001c 	andeq	r0, r0, ip, lsl r0
 660:	00000250 	andeq	r0, r0, r0, asr r2
 664:	20000da8 	andcs	r0, r0, r8, lsr #27
 668:	00000040 	andeq	r0, r0, r0, asr #32
 66c:	40080e41 	andmi	r0, r8, r1, asr #28
 670:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 674:	100e4101 	andne	r4, lr, r1, lsl #2
 678:	00070d41 	andeq	r0, r7, r1, asr #26
 67c:	0000001c 	andeq	r0, r0, ip, lsl r0
 680:	00000250 	andeq	r0, r0, r0, asr r2
 684:	20000de8 	andcs	r0, r0, r8, ror #27
 688:	00000040 	andeq	r0, r0, r0, asr #32
 68c:	40080e41 	andmi	r0, r8, r1, asr #28
 690:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 694:	100e4101 	andne	r4, lr, r1, lsl #2
 698:	00070d41 	andeq	r0, r7, r1, asr #26
 69c:	0000001c 	andeq	r0, r0, ip, lsl r0
 6a0:	00000250 	andeq	r0, r0, r0, asr r2
 6a4:	20000e28 	andcs	r0, r0, r8, lsr #28
 6a8:	00000040 	andeq	r0, r0, r0, asr #32
 6ac:	40080e41 	andmi	r0, r8, r1, asr #28
 6b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6b4:	100e4101 	andne	r4, lr, r1, lsl #2
 6b8:	00070d41 	andeq	r0, r7, r1, asr #26
 6bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c0:	00000250 	andeq	r0, r0, r0, asr r2
 6c4:	20000e68 	andcs	r0, r0, r8, ror #28
 6c8:	00000040 	andeq	r0, r0, r0, asr #32
 6cc:	40080e41 	andmi	r0, r8, r1, asr #28
 6d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6d4:	100e4101 	andne	r4, lr, r1, lsl #2
 6d8:	00070d41 	andeq	r0, r7, r1, asr #26
 6dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e0:	00000250 	andeq	r0, r0, r0, asr r2
 6e4:	20000ea8 	andcs	r0, r0, r8, lsr #29
 6e8:	00000040 	andeq	r0, r0, r0, asr #32
 6ec:	40080e41 	andmi	r0, r8, r1, asr #28
 6f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6f4:	100e4101 	andne	r4, lr, r1, lsl #2
 6f8:	00070d41 	andeq	r0, r7, r1, asr #26
 6fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 700:	00000250 	andeq	r0, r0, r0, asr r2
 704:	20000ee8 	andcs	r0, r0, r8, ror #29
 708:	00000040 	andeq	r0, r0, r0, asr #32
 70c:	40080e41 	andmi	r0, r8, r1, asr #28
 710:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 714:	100e4101 	andne	r4, lr, r1, lsl #2
 718:	00070d41 	andeq	r0, r7, r1, asr #26
 71c:	0000001c 	andeq	r0, r0, ip, lsl r0
 720:	00000250 	andeq	r0, r0, r0, asr r2
 724:	20000f28 	andcs	r0, r0, r8, lsr #30
 728:	00000040 	andeq	r0, r0, r0, asr #32
 72c:	40080e41 	andmi	r0, r8, r1, asr #28
 730:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 734:	100e4101 	andne	r4, lr, r1, lsl #2
 738:	00070d41 	andeq	r0, r7, r1, asr #26
 73c:	0000001c 	andeq	r0, r0, ip, lsl r0
 740:	00000250 	andeq	r0, r0, r0, asr r2
 744:	20000f68 	andcs	r0, r0, r8, ror #30
 748:	00000040 	andeq	r0, r0, r0, asr #32
 74c:	40080e41 	andmi	r0, r8, r1, asr #28
 750:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 754:	100e4101 	andne	r4, lr, r1, lsl #2
 758:	00070d41 	andeq	r0, r7, r1, asr #26
 75c:	0000001c 	andeq	r0, r0, ip, lsl r0
 760:	00000250 	andeq	r0, r0, r0, asr r2
 764:	20000fa8 	andcs	r0, r0, r8, lsr #31
 768:	00000040 	andeq	r0, r0, r0, asr #32
 76c:	40080e41 	andmi	r0, r8, r1, asr #28
 770:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 774:	100e4101 	andne	r4, lr, r1, lsl #2
 778:	00070d41 	andeq	r0, r7, r1, asr #26
 77c:	0000001c 	andeq	r0, r0, ip, lsl r0
 780:	00000250 	andeq	r0, r0, r0, asr r2
 784:	20000fe8 	andcs	r0, r0, r8, ror #31
 788:	00000040 	andeq	r0, r0, r0, asr #32
 78c:	40080e41 	andmi	r0, r8, r1, asr #28
 790:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 794:	100e4101 	andne	r4, lr, r1, lsl #2
 798:	00070d41 	andeq	r0, r7, r1, asr #26
 79c:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a0:	00000250 	andeq	r0, r0, r0, asr r2
 7a4:	20001028 	andcs	r1, r0, r8, lsr #32
 7a8:	00000040 	andeq	r0, r0, r0, asr #32
 7ac:	40080e41 	andmi	r0, r8, r1, asr #28
 7b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7b4:	100e4101 	andne	r4, lr, r1, lsl #2
 7b8:	00070d41 	andeq	r0, r7, r1, asr #26
 7bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 7c0:	00000250 	andeq	r0, r0, r0, asr r2
 7c4:	20001068 	andcs	r1, r0, r8, rrx
 7c8:	00000040 	andeq	r0, r0, r0, asr #32
 7cc:	40080e41 	andmi	r0, r8, r1, asr #28
 7d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7d4:	100e4101 	andne	r4, lr, r1, lsl #2
 7d8:	00070d41 	andeq	r0, r7, r1, asr #26
 7dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 7e0:	00000250 	andeq	r0, r0, r0, asr r2
 7e4:	200010a8 	andcs	r1, r0, r8, lsr #1
 7e8:	00000040 	andeq	r0, r0, r0, asr #32
 7ec:	40080e41 	andmi	r0, r8, r1, asr #28
 7f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7f4:	100e4101 	andne	r4, lr, r1, lsl #2
 7f8:	00070d41 	andeq	r0, r7, r1, asr #26
 7fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 800:	00000250 	andeq	r0, r0, r0, asr r2
 804:	200010e8 	andcs	r1, r0, r8, ror #1
 808:	00000040 	andeq	r0, r0, r0, asr #32
 80c:	40080e41 	andmi	r0, r8, r1, asr #28
 810:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 814:	100e4101 	andne	r4, lr, r1, lsl #2
 818:	00070d41 	andeq	r0, r7, r1, asr #26
 81c:	0000001c 	andeq	r0, r0, ip, lsl r0
 820:	00000250 	andeq	r0, r0, r0, asr r2
 824:	20001128 	andcs	r1, r0, r8, lsr #2
 828:	00000040 	andeq	r0, r0, r0, asr #32
 82c:	40080e41 	andmi	r0, r8, r1, asr #28
 830:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 834:	100e4101 	andne	r4, lr, r1, lsl #2
 838:	00070d41 	andeq	r0, r7, r1, asr #26
 83c:	0000001c 	andeq	r0, r0, ip, lsl r0
 840:	00000250 	andeq	r0, r0, r0, asr r2
 844:	20001168 	andcs	r1, r0, r8, ror #2
 848:	0000003c 	andeq	r0, r0, ip, lsr r0
 84c:	40080e41 	andmi	r0, r8, r1, asr #28
 850:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 854:	100e4101 	andne	r4, lr, r1, lsl #2
 858:	00070d41 	andeq	r0, r7, r1, asr #26
 85c:	0000001c 	andeq	r0, r0, ip, lsl r0
 860:	00000250 	andeq	r0, r0, r0, asr r2
 864:	200011a4 	andcs	r1, r0, r4, lsr #3
 868:	00000050 	andeq	r0, r0, r0, asr r0
 86c:	40080e41 	andmi	r0, r8, r1, asr #28
 870:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 874:	100e4101 	andne	r4, lr, r1, lsl #2
 878:	00070d41 	andeq	r0, r7, r1, asr #26
 87c:	0000001c 	andeq	r0, r0, ip, lsl r0
 880:	00000250 	andeq	r0, r0, r0, asr r2
 884:	200011f4 	strdcs	r1, [r0], -r4
 888:	00000084 	andeq	r0, r0, r4, lsl #1
 88c:	40080e41 	andmi	r0, r8, r1, asr #28
 890:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 894:	200e4101 	andcs	r4, lr, r1, lsl #2
 898:	00070d41 	andeq	r0, r7, r1, asr #26
 89c:	00000018 	andeq	r0, r0, r8, lsl r0
 8a0:	00000250 	andeq	r0, r0, r0, asr r2
 8a4:	20001278 	andcs	r1, r0, r8, ror r2
 8a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 8ac:	40080e41 	andmi	r0, r8, r1, asr #28
 8b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8b4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 8b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 8bc:	00000250 	andeq	r0, r0, r0, asr r2
 8c0:	20001294 	mulcs	r0, r4, r2
 8c4:	00000044 	andeq	r0, r0, r4, asr #32
 8c8:	40080e41 	andmi	r0, r8, r1, asr #28
 8cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 8d4:	00070d41 	andeq	r0, r7, r1, asr #26
 8d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 8dc:	00000250 	andeq	r0, r0, r0, asr r2
 8e0:	200012d8 	ldrdcs	r1, [r0], -r8
 8e4:	00000020 	andeq	r0, r0, r0, lsr #32
 8e8:	40080e41 	andmi	r0, r8, r1, asr #28
 8ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8f0:	100e4101 	andne	r4, lr, r1, lsl #2
 8f4:	00070d41 	andeq	r0, r7, r1, asr #26
 8f8:	0000000c 	andeq	r0, r0, ip
 8fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 900:	7c010001 	stcvc	0, cr0, [r1], {1}
 904:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 908:	0000000c 	andeq	r0, r0, ip
 90c:	000008f8 	strdeq	r0, [r0], -r8
 910:	200012f9 	strdcs	r1, [r0], -r9
 914:	0000010a 	andeq	r0, r0, sl, lsl #2
