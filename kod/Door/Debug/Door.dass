
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 ff2e 	bl	20000e64 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	6039      	str	r1, [r7, #0]
2000001a:	1dfb      	adds	r3, r7, #7
2000001c:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000001e:	1dfb      	adds	r3, r7, #7
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	2b7f      	cmp	r3, #127	; 0x7f
20000024:	d90d      	bls.n	20000042 <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000026:	683b      	ldr	r3, [r7, #0]
20000028:	b2da      	uxtb	r2, r3
2000002a:	490f      	ldr	r1, [pc, #60]	; (20000068 <NVIC_SetPriority+0x58>)
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	781b      	ldrb	r3, [r3, #0]
20000030:	0018      	movs	r0, r3
20000032:	230f      	movs	r3, #15
20000034:	4003      	ands	r3, r0
20000036:	3b04      	subs	r3, #4
20000038:	0112      	lsls	r2, r2, #4
2000003a:	b2d2      	uxtb	r2, r2
2000003c:	18cb      	adds	r3, r1, r3
2000003e:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000040:	e00d      	b.n	2000005e <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000042:	683b      	ldr	r3, [r7, #0]
20000044:	b2db      	uxtb	r3, r3
20000046:	4909      	ldr	r1, [pc, #36]	; (2000006c <NVIC_SetPriority+0x5c>)
20000048:	1dfa      	adds	r2, r7, #7
2000004a:	7812      	ldrb	r2, [r2, #0]
2000004c:	b252      	sxtb	r2, r2
2000004e:	011b      	lsls	r3, r3, #4
20000050:	b2d8      	uxtb	r0, r3
20000052:	23c0      	movs	r3, #192	; 0xc0
20000054:	009b      	lsls	r3, r3, #2
20000056:	188a      	adds	r2, r1, r2
20000058:	18d3      	adds	r3, r2, r3
2000005a:	1c02      	adds	r2, r0, #0
2000005c:	701a      	strb	r2, [r3, #0]
}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	46bd      	mov	sp, r7
20000062:	b002      	add	sp, #8
20000064:	bd80      	pop	{r7, pc}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	e000ed00 	and	lr, r0, r0, lsl #26
2000006c:	e000e100 	and	lr, r0, r0, lsl #2

20000070 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20000070:	b580      	push	{r7, lr}
20000072:	b082      	sub	sp, #8
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	3b01      	subs	r3, #1
2000007c:	4a0c      	ldr	r2, [pc, #48]	; (200000b0 <SysTick_Config+0x40>)
2000007e:	4293      	cmp	r3, r2
20000080:	d901      	bls.n	20000086 <SysTick_Config+0x16>
20000082:	2301      	movs	r3, #1
20000084:	e010      	b.n	200000a8 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20000086:	4b0b      	ldr	r3, [pc, #44]	; (200000b4 <SysTick_Config+0x44>)
20000088:	687a      	ldr	r2, [r7, #4]
2000008a:	3a01      	subs	r2, #1
2000008c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000008e:	2301      	movs	r3, #1
20000090:	425b      	negs	r3, r3
20000092:	210f      	movs	r1, #15
20000094:	0018      	movs	r0, r3
20000096:	f7ff ffbb 	bl	20000010 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000009a:	4b06      	ldr	r3, [pc, #24]	; (200000b4 <SysTick_Config+0x44>)
2000009c:	2200      	movs	r2, #0
2000009e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200000a0:	4b04      	ldr	r3, [pc, #16]	; (200000b4 <SysTick_Config+0x44>)
200000a2:	2207      	movs	r2, #7
200000a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200000a6:	2300      	movs	r3, #0
}
200000a8:	0018      	movs	r0, r3
200000aa:	46bd      	mov	sp, r7
200000ac:	b002      	add	sp, #8
200000ae:	bd80      	pop	{r7, pc}
200000b0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200000b4:	e000e010 	and	lr, r0, r0, lsl r0

200000b8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200000bc:	4b14      	ldr	r3, [pc, #80]	; (20000110 <RCC_DeInit+0x58>)
200000be:	681a      	ldr	r2, [r3, #0]
200000c0:	4b13      	ldr	r3, [pc, #76]	; (20000110 <RCC_DeInit+0x58>)
200000c2:	2101      	movs	r1, #1
200000c4:	430a      	orrs	r2, r1
200000c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200000c8:	4b11      	ldr	r3, [pc, #68]	; (20000110 <RCC_DeInit+0x58>)
200000ca:	2200      	movs	r2, #0
200000cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
200000ce:	4b10      	ldr	r3, [pc, #64]	; (20000110 <RCC_DeInit+0x58>)
200000d0:	681a      	ldr	r2, [r3, #0]
200000d2:	4b0f      	ldr	r3, [pc, #60]	; (20000110 <RCC_DeInit+0x58>)
200000d4:	490f      	ldr	r1, [pc, #60]	; (20000114 <RCC_DeInit+0x5c>)
200000d6:	400a      	ands	r2, r1
200000d8:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200000da:	4b0d      	ldr	r3, [pc, #52]	; (20000110 <RCC_DeInit+0x58>)
200000dc:	4a0e      	ldr	r2, [pc, #56]	; (20000118 <RCC_DeInit+0x60>)
200000de:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
200000e0:	4a0b      	ldr	r2, [pc, #44]	; (20000110 <RCC_DeInit+0x58>)
200000e2:	2384      	movs	r3, #132	; 0x84
200000e4:	490d      	ldr	r1, [pc, #52]	; (2000011c <RCC_DeInit+0x64>)
200000e6:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
200000e8:	4a09      	ldr	r2, [pc, #36]	; (20000110 <RCC_DeInit+0x58>)
200000ea:	2388      	movs	r3, #136	; 0x88
200000ec:	490c      	ldr	r1, [pc, #48]	; (20000120 <RCC_DeInit+0x68>)
200000ee:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200000f0:	4b07      	ldr	r3, [pc, #28]	; (20000110 <RCC_DeInit+0x58>)
200000f2:	681a      	ldr	r2, [r3, #0]
200000f4:	4b06      	ldr	r3, [pc, #24]	; (20000110 <RCC_DeInit+0x58>)
200000f6:	490b      	ldr	r1, [pc, #44]	; (20000124 <RCC_DeInit+0x6c>)
200000f8:	400a      	ands	r2, r1
200000fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200000fc:	4b04      	ldr	r3, [pc, #16]	; (20000110 <RCC_DeInit+0x58>)
200000fe:	2200      	movs	r2, #0
20000100:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20000102:	4a03      	ldr	r2, [pc, #12]	; (20000110 <RCC_DeInit+0x58>)
20000104:	238c      	movs	r3, #140	; 0x8c
20000106:	2100      	movs	r1, #0
20000108:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	46bd      	mov	sp, r7
2000010e:	bd80      	pop	{r7, pc}
20000110:	40023800 	andmi	r3, r2, r0, lsl #16
20000114:	eaf6ffff 	b	1fdc0118 <startup-0x23fee8>
20000118:	24003010 	strcs	r3, [r0], #-16
2000011c:	20003000 	andcs	r3, r0, r0
20000120:	24003000 	strcs	r3, [r0], #-0
20000124:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000128 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000128:	b580      	push	{r7, lr}
2000012a:	b082      	sub	sp, #8
2000012c:	af00      	add	r7, sp, #0
2000012e:	0002      	movs	r2, r0
20000130:	1dfb      	adds	r3, r7, #7
20000132:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20000134:	4b05      	ldr	r3, [pc, #20]	; (2000014c <RCC_HSEConfig+0x24>)
20000136:	2200      	movs	r2, #0
20000138:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
2000013a:	4a04      	ldr	r2, [pc, #16]	; (2000014c <RCC_HSEConfig+0x24>)
2000013c:	1dfb      	adds	r3, r7, #7
2000013e:	781b      	ldrb	r3, [r3, #0]
20000140:	7013      	strb	r3, [r2, #0]
}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40023802 	andmi	r3, r2, r2, lsl #16

20000150 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20000156:	2300      	movs	r3, #0
20000158:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
2000015a:	1dfb      	adds	r3, r7, #7
2000015c:	2200      	movs	r2, #0
2000015e:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20000160:	1dbb      	adds	r3, r7, #6
20000162:	2200      	movs	r2, #0
20000164:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20000166:	1dbc      	adds	r4, r7, #6
20000168:	2031      	movs	r0, #49	; 0x31
2000016a:	f000 fd9b 	bl	20000ca4 <RCC_GetFlagStatus>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20000172:	683b      	ldr	r3, [r7, #0]
20000174:	3301      	adds	r3, #1
20000176:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20000178:	683a      	ldr	r2, [r7, #0]
2000017a:	23a0      	movs	r3, #160	; 0xa0
2000017c:	01db      	lsls	r3, r3, #7
2000017e:	429a      	cmp	r2, r3
20000180:	d003      	beq.n	2000018a <RCC_WaitForHSEStartUp+0x3a>
20000182:	1dbb      	adds	r3, r7, #6
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	2b00      	cmp	r3, #0
20000188:	d0ed      	beq.n	20000166 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
2000018a:	2031      	movs	r0, #49	; 0x31
2000018c:	f000 fd8a 	bl	20000ca4 <RCC_GetFlagStatus>
20000190:	1e03      	subs	r3, r0, #0
20000192:	d003      	beq.n	2000019c <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20000194:	1dfb      	adds	r3, r7, #7
20000196:	2201      	movs	r2, #1
20000198:	701a      	strb	r2, [r3, #0]
2000019a:	e002      	b.n	200001a2 <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	2200      	movs	r2, #0
200001a0:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200001a2:	1dfb      	adds	r3, r7, #7
200001a4:	781b      	ldrb	r3, [r3, #0]
}
200001a6:	0018      	movs	r0, r3
200001a8:	46bd      	mov	sp, r7
200001aa:	b003      	add	sp, #12
200001ac:	bd90      	pop	{r4, r7, pc}

200001ae <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
200001ae:	b580      	push	{r7, lr}
200001b0:	b084      	sub	sp, #16
200001b2:	af00      	add	r7, sp, #0
200001b4:	0002      	movs	r2, r0
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
200001ba:	2300      	movs	r3, #0
200001bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
200001be:	4b0a      	ldr	r3, [pc, #40]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001c0:	681b      	ldr	r3, [r3, #0]
200001c2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
200001c4:	68fb      	ldr	r3, [r7, #12]
200001c6:	22f8      	movs	r2, #248	; 0xf8
200001c8:	4393      	bics	r3, r2
200001ca:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
200001cc:	1dfb      	adds	r3, r7, #7
200001ce:	781b      	ldrb	r3, [r3, #0]
200001d0:	00db      	lsls	r3, r3, #3
200001d2:	68fa      	ldr	r2, [r7, #12]
200001d4:	4313      	orrs	r3, r2
200001d6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
200001d8:	4b03      	ldr	r3, [pc, #12]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001da:	68fa      	ldr	r2, [r7, #12]
200001dc:	601a      	str	r2, [r3, #0]
}
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	46bd      	mov	sp, r7
200001e2:	b004      	add	sp, #16
200001e4:	bd80      	pop	{r7, pc}
200001e6:	46c0      	nop			; (mov r8, r8)
200001e8:	40023800 	andmi	r3, r2, r0, lsl #16

200001ec <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b082      	sub	sp, #8
200001f0:	af00      	add	r7, sp, #0
200001f2:	0002      	movs	r2, r0
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
200001f8:	4b03      	ldr	r3, [pc, #12]	; (20000208 <RCC_HSICmd+0x1c>)
200001fa:	1dfa      	adds	r2, r7, #7
200001fc:	7812      	ldrb	r2, [r2, #0]
200001fe:	601a      	str	r2, [r3, #0]
}
20000200:	46c0      	nop			; (mov r8, r8)
20000202:	46bd      	mov	sp, r7
20000204:	b002      	add	sp, #8
20000206:	bd80      	pop	{r7, pc}
20000208:	42470000 	submi	r0, r7, #0

2000020c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
2000020c:	b580      	push	{r7, lr}
2000020e:	b082      	sub	sp, #8
20000210:	af00      	add	r7, sp, #0
20000212:	0002      	movs	r2, r0
20000214:	1dfb      	adds	r3, r7, #7
20000216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000218:	4b0c      	ldr	r3, [pc, #48]	; (2000024c <RCC_LSEConfig+0x40>)
2000021a:	2200      	movs	r2, #0
2000021c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <RCC_LSEConfig+0x40>)
20000220:	2200      	movs	r2, #0
20000222:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20000224:	1dfb      	adds	r3, r7, #7
20000226:	781b      	ldrb	r3, [r3, #0]
20000228:	2b01      	cmp	r3, #1
2000022a:	d002      	beq.n	20000232 <RCC_LSEConfig+0x26>
2000022c:	2b04      	cmp	r3, #4
2000022e:	d004      	beq.n	2000023a <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000230:	e007      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20000232:	4b06      	ldr	r3, [pc, #24]	; (2000024c <RCC_LSEConfig+0x40>)
20000234:	2201      	movs	r2, #1
20000236:	701a      	strb	r2, [r3, #0]
      break;
20000238:	e003      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
2000023a:	4b04      	ldr	r3, [pc, #16]	; (2000024c <RCC_LSEConfig+0x40>)
2000023c:	2205      	movs	r2, #5
2000023e:	701a      	strb	r2, [r3, #0]
      break;
20000240:	46c0      	nop			; (mov r8, r8)
  }
}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	46bd      	mov	sp, r7
20000246:	b002      	add	sp, #8
20000248:	bd80      	pop	{r7, pc}
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	40023870 	andmi	r3, r2, r0, ror r8

20000250 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20000250:	b580      	push	{r7, lr}
20000252:	b082      	sub	sp, #8
20000254:	af00      	add	r7, sp, #0
20000256:	0002      	movs	r2, r0
20000258:	1dfb      	adds	r3, r7, #7
2000025a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
2000025c:	4b03      	ldr	r3, [pc, #12]	; (2000026c <RCC_LSICmd+0x1c>)
2000025e:	1dfa      	adds	r2, r7, #7
20000260:	7812      	ldrb	r2, [r2, #0]
20000262:	601a      	str	r2, [r3, #0]
}
20000264:	46c0      	nop			; (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b002      	add	sp, #8
2000026a:	bd80      	pop	{r7, pc}
2000026c:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20000270 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20000270:	b580      	push	{r7, lr}
20000272:	b084      	sub	sp, #16
20000274:	af00      	add	r7, sp, #0
20000276:	60f8      	str	r0, [r7, #12]
20000278:	60b9      	str	r1, [r7, #8]
2000027a:	607a      	str	r2, [r7, #4]
2000027c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	019a      	lsls	r2, r3, #6
20000282:	68bb      	ldr	r3, [r7, #8]
20000284:	431a      	orrs	r2, r3
20000286:	683b      	ldr	r3, [r7, #0]
20000288:	085b      	lsrs	r3, r3, #1
2000028a:	3b01      	subs	r3, #1
2000028c:	041b      	lsls	r3, r3, #16
2000028e:	431a      	orrs	r2, r3
20000290:	68fb      	ldr	r3, [r7, #12]
20000292:	431a      	orrs	r2, r3
20000294:	0011      	movs	r1, r2
                 (PLLQ << 24);
20000296:	69bb      	ldr	r3, [r7, #24]
20000298:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000029a:	4b03      	ldr	r3, [pc, #12]	; (200002a8 <RCC_PLLConfig+0x38>)
2000029c:	430a      	orrs	r2, r1
2000029e:	605a      	str	r2, [r3, #4]
}
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	b004      	add	sp, #16
200002a6:	bd80      	pop	{r7, pc}
200002a8:	40023800 	andmi	r3, r2, r0, lsl #16

200002ac <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
200002ac:	b580      	push	{r7, lr}
200002ae:	b082      	sub	sp, #8
200002b0:	af00      	add	r7, sp, #0
200002b2:	0002      	movs	r2, r0
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
200002b8:	4b03      	ldr	r3, [pc, #12]	; (200002c8 <RCC_PLLCmd+0x1c>)
200002ba:	1dfa      	adds	r2, r7, #7
200002bc:	7812      	ldrb	r2, [r2, #0]
200002be:	601a      	str	r2, [r3, #0]
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b002      	add	sp, #8
200002c6:	bd80      	pop	{r7, pc}
200002c8:	42470060 	submi	r0, r7, #96	; 0x60

200002cc <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
200002cc:	b580      	push	{r7, lr}
200002ce:	b082      	sub	sp, #8
200002d0:	af00      	add	r7, sp, #0
200002d2:	6078      	str	r0, [r7, #4]
200002d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
200002d6:	687b      	ldr	r3, [r7, #4]
200002d8:	019a      	lsls	r2, r3, #6
200002da:	683b      	ldr	r3, [r7, #0]
200002dc:	071b      	lsls	r3, r3, #28
200002de:	4904      	ldr	r1, [pc, #16]	; (200002f0 <RCC_PLLI2SConfig+0x24>)
200002e0:	4313      	orrs	r3, r2
200002e2:	2284      	movs	r2, #132	; 0x84
200002e4:	508b      	str	r3, [r1, r2]
}
200002e6:	46c0      	nop			; (mov r8, r8)
200002e8:	46bd      	mov	sp, r7
200002ea:	b002      	add	sp, #8
200002ec:	bd80      	pop	{r7, pc}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	40023800 	andmi	r3, r2, r0, lsl #16

200002f4 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
200002f4:	b580      	push	{r7, lr}
200002f6:	b082      	sub	sp, #8
200002f8:	af00      	add	r7, sp, #0
200002fa:	0002      	movs	r2, r0
200002fc:	1dfb      	adds	r3, r7, #7
200002fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000300:	4b03      	ldr	r3, [pc, #12]	; (20000310 <RCC_PLLI2SCmd+0x1c>)
20000302:	1dfa      	adds	r2, r7, #7
20000304:	7812      	ldrb	r2, [r2, #0]
20000306:	601a      	str	r2, [r3, #0]
}
20000308:	46c0      	nop			; (mov r8, r8)
2000030a:	46bd      	mov	sp, r7
2000030c:	b002      	add	sp, #8
2000030e:	bd80      	pop	{r7, pc}
20000310:	42470068 	submi	r0, r7, #104	; 0x68

20000314 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000314:	b580      	push	{r7, lr}
20000316:	b084      	sub	sp, #16
20000318:	af00      	add	r7, sp, #0
2000031a:	60f8      	str	r0, [r7, #12]
2000031c:	60b9      	str	r1, [r7, #8]
2000031e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000320:	68fb      	ldr	r3, [r7, #12]
20000322:	019a      	lsls	r2, r3, #6
20000324:	68bb      	ldr	r3, [r7, #8]
20000326:	061b      	lsls	r3, r3, #24
20000328:	431a      	orrs	r2, r3
2000032a:	687b      	ldr	r3, [r7, #4]
2000032c:	071b      	lsls	r3, r3, #28
2000032e:	4904      	ldr	r1, [pc, #16]	; (20000340 <RCC_PLLSAIConfig+0x2c>)
20000330:	4313      	orrs	r3, r2
20000332:	2288      	movs	r2, #136	; 0x88
20000334:	508b      	str	r3, [r1, r2]
}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	46bd      	mov	sp, r7
2000033a:	b004      	add	sp, #16
2000033c:	bd80      	pop	{r7, pc}
2000033e:	46c0      	nop			; (mov r8, r8)
20000340:	40023800 	andmi	r3, r2, r0, lsl #16

20000344 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20000344:	b580      	push	{r7, lr}
20000346:	b082      	sub	sp, #8
20000348:	af00      	add	r7, sp, #0
2000034a:	0002      	movs	r2, r0
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20000350:	4b03      	ldr	r3, [pc, #12]	; (20000360 <RCC_PLLSAICmd+0x1c>)
20000352:	1dfa      	adds	r2, r7, #7
20000354:	7812      	ldrb	r2, [r2, #0]
20000356:	601a      	str	r2, [r3, #0]
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b002      	add	sp, #8
2000035e:	bd80      	pop	{r7, pc}
20000360:	42470070 	submi	r0, r7, #112	; 0x70

20000364 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20000364:	b580      	push	{r7, lr}
20000366:	b082      	sub	sp, #8
20000368:	af00      	add	r7, sp, #0
2000036a:	0002      	movs	r2, r0
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20000370:	4b03      	ldr	r3, [pc, #12]	; (20000380 <RCC_ClockSecuritySystemCmd+0x1c>)
20000372:	1dfa      	adds	r2, r7, #7
20000374:	7812      	ldrb	r2, [r2, #0]
20000376:	601a      	str	r2, [r3, #0]
}
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	46bd      	mov	sp, r7
2000037c:	b002      	add	sp, #8
2000037e:	bd80      	pop	{r7, pc}
20000380:	4247004c 	submi	r0, r7, #76	; 0x4c

20000384 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20000384:	b580      	push	{r7, lr}
20000386:	b084      	sub	sp, #16
20000388:	af00      	add	r7, sp, #0
2000038a:	6078      	str	r0, [r7, #4]
2000038c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
2000038e:	2300      	movs	r3, #0
20000390:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20000392:	4b0a      	ldr	r3, [pc, #40]	; (200003bc <RCC_MCO1Config+0x38>)
20000394:	689b      	ldr	r3, [r3, #8]
20000396:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20000398:	68fb      	ldr	r3, [r7, #12]
2000039a:	4a09      	ldr	r2, [pc, #36]	; (200003c0 <RCC_MCO1Config+0x3c>)
2000039c:	4013      	ands	r3, r2
2000039e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200003a0:	687a      	ldr	r2, [r7, #4]
200003a2:	683b      	ldr	r3, [r7, #0]
200003a4:	4313      	orrs	r3, r2
200003a6:	68fa      	ldr	r2, [r7, #12]
200003a8:	4313      	orrs	r3, r2
200003aa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ac:	4b03      	ldr	r3, [pc, #12]	; (200003bc <RCC_MCO1Config+0x38>)
200003ae:	68fa      	ldr	r2, [r7, #12]
200003b0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	46bd      	mov	sp, r7
200003b6:	b004      	add	sp, #16
200003b8:	bd80      	pop	{r7, pc}
200003ba:	46c0      	nop			; (mov r8, r8)
200003bc:	40023800 	andmi	r3, r2, r0, lsl #16
200003c0:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

200003c4 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
200003c4:	b580      	push	{r7, lr}
200003c6:	b084      	sub	sp, #16
200003c8:	af00      	add	r7, sp, #0
200003ca:	6078      	str	r0, [r7, #4]
200003cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200003ce:	2300      	movs	r3, #0
200003d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
200003d2:	4b0a      	ldr	r3, [pc, #40]	; (200003fc <RCC_MCO2Config+0x38>)
200003d4:	689b      	ldr	r3, [r3, #8]
200003d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
200003d8:	68fb      	ldr	r3, [r7, #12]
200003da:	015b      	lsls	r3, r3, #5
200003dc:	095b      	lsrs	r3, r3, #5
200003de:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
200003e0:	687a      	ldr	r2, [r7, #4]
200003e2:	683b      	ldr	r3, [r7, #0]
200003e4:	4313      	orrs	r3, r2
200003e6:	68fa      	ldr	r2, [r7, #12]
200003e8:	4313      	orrs	r3, r2
200003ea:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ec:	4b03      	ldr	r3, [pc, #12]	; (200003fc <RCC_MCO2Config+0x38>)
200003ee:	68fa      	ldr	r2, [r7, #12]
200003f0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003f2:	46c0      	nop			; (mov r8, r8)
200003f4:	46bd      	mov	sp, r7
200003f6:	b004      	add	sp, #16
200003f8:	bd80      	pop	{r7, pc}
200003fa:	46c0      	nop			; (mov r8, r8)
200003fc:	40023800 	andmi	r3, r2, r0, lsl #16

20000400 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000400:	b580      	push	{r7, lr}
20000402:	b084      	sub	sp, #16
20000404:	af00      	add	r7, sp, #0
20000406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000408:	2300      	movs	r3, #0
2000040a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
2000040c:	4b08      	ldr	r3, [pc, #32]	; (20000430 <RCC_SYSCLKConfig+0x30>)
2000040e:	689b      	ldr	r3, [r3, #8]
20000410:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000412:	68fb      	ldr	r3, [r7, #12]
20000414:	2203      	movs	r2, #3
20000416:	4393      	bics	r3, r2
20000418:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
2000041a:	68fa      	ldr	r2, [r7, #12]
2000041c:	687b      	ldr	r3, [r7, #4]
2000041e:	4313      	orrs	r3, r2
20000420:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000422:	4b03      	ldr	r3, [pc, #12]	; (20000430 <RCC_SYSCLKConfig+0x30>)
20000424:	68fa      	ldr	r2, [r7, #12]
20000426:	609a      	str	r2, [r3, #8]
}
20000428:	46c0      	nop			; (mov r8, r8)
2000042a:	46bd      	mov	sp, r7
2000042c:	b004      	add	sp, #16
2000042e:	bd80      	pop	{r7, pc}
20000430:	40023800 	andmi	r3, r2, r0, lsl #16

20000434 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000434:	b580      	push	{r7, lr}
20000436:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000438:	4b04      	ldr	r3, [pc, #16]	; (2000044c <RCC_GetSYSCLKSource+0x18>)
2000043a:	689b      	ldr	r3, [r3, #8]
2000043c:	b2db      	uxtb	r3, r3
2000043e:	220c      	movs	r2, #12
20000440:	4013      	ands	r3, r2
20000442:	b2db      	uxtb	r3, r3
}
20000444:	0018      	movs	r0, r3
20000446:	46bd      	mov	sp, r7
20000448:	bd80      	pop	{r7, pc}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	40023800 	andmi	r3, r2, r0, lsl #16

20000450 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20000450:	b580      	push	{r7, lr}
20000452:	b084      	sub	sp, #16
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000458:	2300      	movs	r3, #0
2000045a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
2000045c:	4b08      	ldr	r3, [pc, #32]	; (20000480 <RCC_HCLKConfig+0x30>)
2000045e:	689b      	ldr	r3, [r3, #8]
20000460:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20000462:	68fb      	ldr	r3, [r7, #12]
20000464:	22f0      	movs	r2, #240	; 0xf0
20000466:	4393      	bics	r3, r2
20000468:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
2000046a:	68fa      	ldr	r2, [r7, #12]
2000046c:	687b      	ldr	r3, [r7, #4]
2000046e:	4313      	orrs	r3, r2
20000470:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000472:	4b03      	ldr	r3, [pc, #12]	; (20000480 <RCC_HCLKConfig+0x30>)
20000474:	68fa      	ldr	r2, [r7, #12]
20000476:	609a      	str	r2, [r3, #8]
}
20000478:	46c0      	nop			; (mov r8, r8)
2000047a:	46bd      	mov	sp, r7
2000047c:	b004      	add	sp, #16
2000047e:	bd80      	pop	{r7, pc}
20000480:	40023800 	andmi	r3, r2, r0, lsl #16

20000484 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20000484:	b580      	push	{r7, lr}
20000486:	b084      	sub	sp, #16
20000488:	af00      	add	r7, sp, #0
2000048a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000048c:	2300      	movs	r3, #0
2000048e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000490:	4b08      	ldr	r3, [pc, #32]	; (200004b4 <RCC_PCLK1Config+0x30>)
20000492:	689b      	ldr	r3, [r3, #8]
20000494:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20000496:	68fb      	ldr	r3, [r7, #12]
20000498:	4a07      	ldr	r2, [pc, #28]	; (200004b8 <RCC_PCLK1Config+0x34>)
2000049a:	4013      	ands	r3, r2
2000049c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
2000049e:	68fa      	ldr	r2, [r7, #12]
200004a0:	687b      	ldr	r3, [r7, #4]
200004a2:	4313      	orrs	r3, r2
200004a4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004a6:	4b03      	ldr	r3, [pc, #12]	; (200004b4 <RCC_PCLK1Config+0x30>)
200004a8:	68fa      	ldr	r2, [r7, #12]
200004aa:	609a      	str	r2, [r3, #8]
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b004      	add	sp, #16
200004b2:	bd80      	pop	{r7, pc}
200004b4:	40023800 	andmi	r3, r2, r0, lsl #16
200004b8:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

200004bc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
200004bc:	b580      	push	{r7, lr}
200004be:	b084      	sub	sp, #16
200004c0:	af00      	add	r7, sp, #0
200004c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200004c4:	2300      	movs	r3, #0
200004c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200004c8:	4b09      	ldr	r3, [pc, #36]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004ca:	689b      	ldr	r3, [r3, #8]
200004cc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	4a08      	ldr	r2, [pc, #32]	; (200004f4 <RCC_PCLK2Config+0x38>)
200004d2:	4013      	ands	r3, r2
200004d4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
200004d6:	687b      	ldr	r3, [r7, #4]
200004d8:	00db      	lsls	r3, r3, #3
200004da:	68fa      	ldr	r2, [r7, #12]
200004dc:	4313      	orrs	r3, r2
200004de:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004e0:	4b03      	ldr	r3, [pc, #12]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004e2:	68fa      	ldr	r2, [r7, #12]
200004e4:	609a      	str	r2, [r3, #8]
}
200004e6:	46c0      	nop			; (mov r8, r8)
200004e8:	46bd      	mov	sp, r7
200004ea:	b004      	add	sp, #16
200004ec:	bd80      	pop	{r7, pc}
200004ee:	46c0      	nop			; (mov r8, r8)
200004f0:	40023800 	andmi	r3, r2, r0, lsl #16
200004f4:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

200004f8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
200004f8:	b580      	push	{r7, lr}
200004fa:	b088      	sub	sp, #32
200004fc:	af00      	add	r7, sp, #0
200004fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000500:	2300      	movs	r3, #0
20000502:	61bb      	str	r3, [r7, #24]
20000504:	2300      	movs	r3, #0
20000506:	617b      	str	r3, [r7, #20]
20000508:	2300      	movs	r3, #0
2000050a:	61fb      	str	r3, [r7, #28]
2000050c:	2302      	movs	r3, #2
2000050e:	613b      	str	r3, [r7, #16]
20000510:	2300      	movs	r3, #0
20000512:	60fb      	str	r3, [r7, #12]
20000514:	2302      	movs	r3, #2
20000516:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000518:	4b49      	ldr	r3, [pc, #292]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000051a:	689b      	ldr	r3, [r3, #8]
2000051c:	220c      	movs	r2, #12
2000051e:	4013      	ands	r3, r2
20000520:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000522:	69bb      	ldr	r3, [r7, #24]
20000524:	2b04      	cmp	r3, #4
20000526:	d007      	beq.n	20000538 <RCC_GetClocksFreq+0x40>
20000528:	2b08      	cmp	r3, #8
2000052a:	d009      	beq.n	20000540 <RCC_GetClocksFreq+0x48>
2000052c:	2b00      	cmp	r3, #0
2000052e:	d141      	bne.n	200005b4 <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	4a44      	ldr	r2, [pc, #272]	; (20000644 <RCC_GetClocksFreq+0x14c>)
20000534:	601a      	str	r2, [r3, #0]
    break;
20000536:	e041      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	4a43      	ldr	r2, [pc, #268]	; (20000648 <RCC_GetClocksFreq+0x150>)
2000053c:	601a      	str	r2, [r3, #0]
    break;
2000053e:	e03d      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000540:	4b3f      	ldr	r3, [pc, #252]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000542:	685b      	ldr	r3, [r3, #4]
20000544:	0d9b      	lsrs	r3, r3, #22
20000546:	2201      	movs	r2, #1
20000548:	4013      	ands	r3, r2
2000054a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000054c:	4b3c      	ldr	r3, [pc, #240]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000054e:	685b      	ldr	r3, [r3, #4]
20000550:	223f      	movs	r2, #63	; 0x3f
20000552:	4013      	ands	r3, r2
20000554:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000556:	68fb      	ldr	r3, [r7, #12]
20000558:	2b00      	cmp	r3, #0
2000055a:	d00d      	beq.n	20000578 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
2000055c:	68b9      	ldr	r1, [r7, #8]
2000055e:	483a      	ldr	r0, [pc, #232]	; (20000648 <RCC_GetClocksFreq+0x150>)
20000560:	f000 ff34 	bl	200013cc <__udivsi3>
20000564:	0003      	movs	r3, r0
20000566:	001a      	movs	r2, r3
20000568:	4b35      	ldr	r3, [pc, #212]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000056a:	685b      	ldr	r3, [r3, #4]
2000056c:	099b      	lsrs	r3, r3, #6
2000056e:	05db      	lsls	r3, r3, #23
20000570:	0ddb      	lsrs	r3, r3, #23
20000572:	4353      	muls	r3, r2
20000574:	61fb      	str	r3, [r7, #28]
20000576:	e00c      	b.n	20000592 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000578:	68b9      	ldr	r1, [r7, #8]
2000057a:	4832      	ldr	r0, [pc, #200]	; (20000644 <RCC_GetClocksFreq+0x14c>)
2000057c:	f000 ff26 	bl	200013cc <__udivsi3>
20000580:	0003      	movs	r3, r0
20000582:	001a      	movs	r2, r3
20000584:	4b2e      	ldr	r3, [pc, #184]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000586:	685b      	ldr	r3, [r3, #4]
20000588:	099b      	lsrs	r3, r3, #6
2000058a:	05db      	lsls	r3, r3, #23
2000058c:	0ddb      	lsrs	r3, r3, #23
2000058e:	4353      	muls	r3, r2
20000590:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000592:	4b2b      	ldr	r3, [pc, #172]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000594:	685b      	ldr	r3, [r3, #4]
20000596:	0c1b      	lsrs	r3, r3, #16
20000598:	2203      	movs	r2, #3
2000059a:	4013      	ands	r3, r2
2000059c:	3301      	adds	r3, #1
2000059e:	005b      	lsls	r3, r3, #1
200005a0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200005a2:	6939      	ldr	r1, [r7, #16]
200005a4:	69f8      	ldr	r0, [r7, #28]
200005a6:	f000 ff11 	bl	200013cc <__udivsi3>
200005aa:	0003      	movs	r3, r0
200005ac:	001a      	movs	r2, r3
200005ae:	687b      	ldr	r3, [r7, #4]
200005b0:	601a      	str	r2, [r3, #0]
    break;
200005b2:	e003      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
200005b4:	687b      	ldr	r3, [r7, #4]
200005b6:	4a23      	ldr	r2, [pc, #140]	; (20000644 <RCC_GetClocksFreq+0x14c>)
200005b8:	601a      	str	r2, [r3, #0]
    break;
200005ba:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
200005bc:	4b20      	ldr	r3, [pc, #128]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005be:	689b      	ldr	r3, [r3, #8]
200005c0:	22f0      	movs	r2, #240	; 0xf0
200005c2:	4013      	ands	r3, r2
200005c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
200005c6:	69bb      	ldr	r3, [r7, #24]
200005c8:	091b      	lsrs	r3, r3, #4
200005ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005cc:	4a1f      	ldr	r2, [pc, #124]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005ce:	69bb      	ldr	r3, [r7, #24]
200005d0:	18d3      	adds	r3, r2, r3
200005d2:	781b      	ldrb	r3, [r3, #0]
200005d4:	b2db      	uxtb	r3, r3
200005d6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
200005d8:	687b      	ldr	r3, [r7, #4]
200005da:	681a      	ldr	r2, [r3, #0]
200005dc:	697b      	ldr	r3, [r7, #20]
200005de:	40da      	lsrs	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
200005e4:	4b16      	ldr	r3, [pc, #88]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005e6:	689a      	ldr	r2, [r3, #8]
200005e8:	23e0      	movs	r3, #224	; 0xe0
200005ea:	015b      	lsls	r3, r3, #5
200005ec:	4013      	ands	r3, r2
200005ee:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
200005f0:	69bb      	ldr	r3, [r7, #24]
200005f2:	0a9b      	lsrs	r3, r3, #10
200005f4:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005f6:	4a15      	ldr	r2, [pc, #84]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005f8:	69bb      	ldr	r3, [r7, #24]
200005fa:	18d3      	adds	r3, r2, r3
200005fc:	781b      	ldrb	r3, [r3, #0]
200005fe:	b2db      	uxtb	r3, r3
20000600:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000602:	687b      	ldr	r3, [r7, #4]
20000604:	685a      	ldr	r2, [r3, #4]
20000606:	697b      	ldr	r3, [r7, #20]
20000608:	40da      	lsrs	r2, r3
2000060a:	687b      	ldr	r3, [r7, #4]
2000060c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
2000060e:	4b0c      	ldr	r3, [pc, #48]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000610:	689a      	ldr	r2, [r3, #8]
20000612:	23e0      	movs	r3, #224	; 0xe0
20000614:	021b      	lsls	r3, r3, #8
20000616:	4013      	ands	r3, r2
20000618:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
2000061a:	69bb      	ldr	r3, [r7, #24]
2000061c:	0b5b      	lsrs	r3, r3, #13
2000061e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000620:	4a0a      	ldr	r2, [pc, #40]	; (2000064c <RCC_GetClocksFreq+0x154>)
20000622:	69bb      	ldr	r3, [r7, #24]
20000624:	18d3      	adds	r3, r2, r3
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	b2db      	uxtb	r3, r3
2000062a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	685a      	ldr	r2, [r3, #4]
20000630:	697b      	ldr	r3, [r7, #20]
20000632:	40da      	lsrs	r2, r3
20000634:	687b      	ldr	r3, [r7, #4]
20000636:	60da      	str	r2, [r3, #12]
}
20000638:	46c0      	nop			; (mov r8, r8)
2000063a:	46bd      	mov	sp, r7
2000063c:	b008      	add	sp, #32
2000063e:	bd80      	pop	{r7, pc}
20000640:	40023800 	andmi	r3, r2, r0, lsl #16
20000644:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000648:	017d7840 	cmneq	sp, r0, asr #16
2000064c:	200014e8 	andcs	r1, r0, r8, ror #9

20000650 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000650:	b580      	push	{r7, lr}
20000652:	b084      	sub	sp, #16
20000654:	af00      	add	r7, sp, #0
20000656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000658:	2300      	movs	r3, #0
2000065a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
2000065c:	687a      	ldr	r2, [r7, #4]
2000065e:	23c0      	movs	r3, #192	; 0xc0
20000660:	009b      	lsls	r3, r3, #2
20000662:	401a      	ands	r2, r3
20000664:	23c0      	movs	r3, #192	; 0xc0
20000666:	009b      	lsls	r3, r3, #2
20000668:	429a      	cmp	r2, r3
2000066a:	d10f      	bne.n	2000068c <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
2000066c:	4b0d      	ldr	r3, [pc, #52]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000066e:	689b      	ldr	r3, [r3, #8]
20000670:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	4a0c      	ldr	r2, [pc, #48]	; (200006a8 <RCC_RTCCLKConfig+0x58>)
20000676:	4013      	ands	r3, r2
20000678:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
2000067a:	687b      	ldr	r3, [r7, #4]
2000067c:	4a0b      	ldr	r2, [pc, #44]	; (200006ac <RCC_RTCCLKConfig+0x5c>)
2000067e:	4013      	ands	r3, r2
20000680:	68fa      	ldr	r2, [r7, #12]
20000682:	4313      	orrs	r3, r2
20000684:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000686:	4b07      	ldr	r3, [pc, #28]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000688:	68fa      	ldr	r2, [r7, #12]
2000068a:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
2000068c:	4b05      	ldr	r3, [pc, #20]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000068e:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	051b      	lsls	r3, r3, #20
20000694:	0d1a      	lsrs	r2, r3, #20
20000696:	4b03      	ldr	r3, [pc, #12]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000698:	430a      	orrs	r2, r1
2000069a:	671a      	str	r2, [r3, #112]	; 0x70
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b004      	add	sp, #16
200006a2:	bd80      	pop	{r7, pc}
200006a4:	40023800 	andmi	r3, r2, r0, lsl #16
200006a8:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
200006ac:	0ffffcff 	svceq	0x00fffcff

200006b0 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
200006b0:	b580      	push	{r7, lr}
200006b2:	b082      	sub	sp, #8
200006b4:	af00      	add	r7, sp, #0
200006b6:	0002      	movs	r2, r0
200006b8:	1dfb      	adds	r3, r7, #7
200006ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
200006bc:	4b03      	ldr	r3, [pc, #12]	; (200006cc <RCC_RTCCLKCmd+0x1c>)
200006be:	1dfa      	adds	r2, r7, #7
200006c0:	7812      	ldrb	r2, [r2, #0]
200006c2:	601a      	str	r2, [r3, #0]
}
200006c4:	46c0      	nop			; (mov r8, r8)
200006c6:	46bd      	mov	sp, r7
200006c8:	b002      	add	sp, #8
200006ca:	bd80      	pop	{r7, pc}
200006cc:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

200006d0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
200006d0:	b580      	push	{r7, lr}
200006d2:	b082      	sub	sp, #8
200006d4:	af00      	add	r7, sp, #0
200006d6:	0002      	movs	r2, r0
200006d8:	1dfb      	adds	r3, r7, #7
200006da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
200006dc:	4b03      	ldr	r3, [pc, #12]	; (200006ec <RCC_BackupResetCmd+0x1c>)
200006de:	1dfa      	adds	r2, r7, #7
200006e0:	7812      	ldrb	r2, [r2, #0]
200006e2:	601a      	str	r2, [r3, #0]
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46bd      	mov	sp, r7
200006e8:	b002      	add	sp, #8
200006ea:	bd80      	pop	{r7, pc}
200006ec:	42470e40 	submi	r0, r7, #64, 28	; 0x400

200006f0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
200006f0:	b580      	push	{r7, lr}
200006f2:	b082      	sub	sp, #8
200006f4:	af00      	add	r7, sp, #0
200006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
200006f8:	4b03      	ldr	r3, [pc, #12]	; (20000708 <RCC_I2SCLKConfig+0x18>)
200006fa:	687a      	ldr	r2, [r7, #4]
200006fc:	601a      	str	r2, [r3, #0]
}
200006fe:	46c0      	nop			; (mov r8, r8)
20000700:	46bd      	mov	sp, r7
20000702:	b002      	add	sp, #8
20000704:	bd80      	pop	{r7, pc}
20000706:	46c0      	nop			; (mov r8, r8)
20000708:	4247015c 	submi	r0, r7, #92, 2

2000070c <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
2000070c:	b580      	push	{r7, lr}
2000070e:	b084      	sub	sp, #16
20000710:	af00      	add	r7, sp, #0
20000712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000714:	2300      	movs	r3, #0
20000716:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000718:	4a09      	ldr	r2, [pc, #36]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
2000071a:	238c      	movs	r3, #140	; 0x8c
2000071c:	58d3      	ldr	r3, [r2, r3]
2000071e:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000720:	68fb      	ldr	r3, [r7, #12]
20000722:	4a08      	ldr	r2, [pc, #32]	; (20000744 <RCC_SAIBlockACLKConfig+0x38>)
20000724:	4013      	ands	r3, r2
20000726:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000728:	68fa      	ldr	r2, [r7, #12]
2000072a:	687b      	ldr	r3, [r7, #4]
2000072c:	4313      	orrs	r3, r2
2000072e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000730:	4903      	ldr	r1, [pc, #12]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
20000732:	228c      	movs	r2, #140	; 0x8c
20000734:	68fb      	ldr	r3, [r7, #12]
20000736:	508b      	str	r3, [r1, r2]
}
20000738:	46c0      	nop			; (mov r8, r8)
2000073a:	46bd      	mov	sp, r7
2000073c:	b004      	add	sp, #16
2000073e:	bd80      	pop	{r7, pc}
20000740:	40023800 	andmi	r3, r2, r0, lsl #16
20000744:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000748 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000748:	b580      	push	{r7, lr}
2000074a:	b084      	sub	sp, #16
2000074c:	af00      	add	r7, sp, #0
2000074e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000750:	2300      	movs	r3, #0
20000752:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000754:	4a09      	ldr	r2, [pc, #36]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
20000756:	238c      	movs	r3, #140	; 0x8c
20000758:	58d3      	ldr	r3, [r2, r3]
2000075a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
2000075c:	68fb      	ldr	r3, [r7, #12]
2000075e:	4a08      	ldr	r2, [pc, #32]	; (20000780 <RCC_SAIBlockBCLKConfig+0x38>)
20000760:	4013      	ands	r3, r2
20000762:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000764:	68fa      	ldr	r2, [r7, #12]
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	4313      	orrs	r3, r2
2000076a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000076c:	4903      	ldr	r1, [pc, #12]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
2000076e:	228c      	movs	r2, #140	; 0x8c
20000770:	68fb      	ldr	r3, [r7, #12]
20000772:	508b      	str	r3, [r1, r2]
}
20000774:	46c0      	nop			; (mov r8, r8)
20000776:	46bd      	mov	sp, r7
20000778:	b004      	add	sp, #16
2000077a:	bd80      	pop	{r7, pc}
2000077c:	40023800 	andmi	r3, r2, r0, lsl #16
20000780:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000784 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000784:	b580      	push	{r7, lr}
20000786:	b084      	sub	sp, #16
20000788:	af00      	add	r7, sp, #0
2000078a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000078c:	2300      	movs	r3, #0
2000078e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000790:	4a0a      	ldr	r2, [pc, #40]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000792:	238c      	movs	r3, #140	; 0x8c
20000794:	58d3      	ldr	r3, [r2, r3]
20000796:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000798:	68fb      	ldr	r3, [r7, #12]
2000079a:	221f      	movs	r2, #31
2000079c:	4393      	bics	r3, r2
2000079e:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	3b01      	subs	r3, #1
200007a4:	68fa      	ldr	r2, [r7, #12]
200007a6:	4313      	orrs	r3, r2
200007a8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007aa:	4904      	ldr	r1, [pc, #16]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
200007ac:	228c      	movs	r2, #140	; 0x8c
200007ae:	68fb      	ldr	r3, [r7, #12]
200007b0:	508b      	str	r3, [r1, r2]
}
200007b2:	46c0      	nop			; (mov r8, r8)
200007b4:	46bd      	mov	sp, r7
200007b6:	b004      	add	sp, #16
200007b8:	bd80      	pop	{r7, pc}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	40023800 	andmi	r3, r2, r0, lsl #16

200007c0 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b084      	sub	sp, #16
200007c4:	af00      	add	r7, sp, #0
200007c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200007c8:	2300      	movs	r3, #0
200007ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200007cc:	4a0a      	ldr	r2, [pc, #40]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ce:	238c      	movs	r3, #140	; 0x8c
200007d0:	58d3      	ldr	r3, [r2, r3]
200007d2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200007d4:	68fb      	ldr	r3, [r7, #12]
200007d6:	4a09      	ldr	r2, [pc, #36]	; (200007fc <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200007d8:	4013      	ands	r3, r2
200007da:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	3b01      	subs	r3, #1
200007e0:	021b      	lsls	r3, r3, #8
200007e2:	68fa      	ldr	r2, [r7, #12]
200007e4:	4313      	orrs	r3, r2
200007e6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007e8:	4903      	ldr	r1, [pc, #12]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ea:	228c      	movs	r2, #140	; 0x8c
200007ec:	68fb      	ldr	r3, [r7, #12]
200007ee:	508b      	str	r3, [r1, r2]
}
200007f0:	46c0      	nop			; (mov r8, r8)
200007f2:	46bd      	mov	sp, r7
200007f4:	b004      	add	sp, #16
200007f6:	bd80      	pop	{r7, pc}
200007f8:	40023800 	andmi	r3, r2, r0, lsl #16
200007fc:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000800 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000800:	b580      	push	{r7, lr}
20000802:	b084      	sub	sp, #16
20000804:	af00      	add	r7, sp, #0
20000806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000808:	2300      	movs	r3, #0
2000080a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
2000080c:	4a09      	ldr	r2, [pc, #36]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
2000080e:	238c      	movs	r3, #140	; 0x8c
20000810:	58d3      	ldr	r3, [r2, r3]
20000812:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000814:	68fb      	ldr	r3, [r7, #12]
20000816:	4a08      	ldr	r2, [pc, #32]	; (20000838 <RCC_LTDCCLKDivConfig+0x38>)
20000818:	4013      	ands	r3, r2
2000081a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
2000081c:	68fa      	ldr	r2, [r7, #12]
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	4313      	orrs	r3, r2
20000822:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000824:	4903      	ldr	r1, [pc, #12]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
20000826:	228c      	movs	r2, #140	; 0x8c
20000828:	68fb      	ldr	r3, [r7, #12]
2000082a:	508b      	str	r3, [r1, r2]
}
2000082c:	46c0      	nop			; (mov r8, r8)
2000082e:	46bd      	mov	sp, r7
20000830:	b004      	add	sp, #16
20000832:	bd80      	pop	{r7, pc}
20000834:	40023800 	andmi	r3, r2, r0, lsl #16
20000838:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

2000083c <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
2000083c:	b580      	push	{r7, lr}
2000083e:	b082      	sub	sp, #8
20000840:	af00      	add	r7, sp, #0
20000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20000844:	4b03      	ldr	r3, [pc, #12]	; (20000854 <RCC_TIMCLKPresConfig+0x18>)
20000846:	687a      	ldr	r2, [r7, #4]
20000848:	601a      	str	r2, [r3, #0]
}
2000084a:	46c0      	nop			; (mov r8, r8)
2000084c:	46bd      	mov	sp, r7
2000084e:	b002      	add	sp, #8
20000850:	bd80      	pop	{r7, pc}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20000858 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000858:	b580      	push	{r7, lr}
2000085a:	b082      	sub	sp, #8
2000085c:	af00      	add	r7, sp, #0
2000085e:	6078      	str	r0, [r7, #4]
20000860:	000a      	movs	r2, r1
20000862:	1cfb      	adds	r3, r7, #3
20000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000866:	1cfb      	adds	r3, r7, #3
20000868:	781b      	ldrb	r3, [r3, #0]
2000086a:	2b00      	cmp	r3, #0
2000086c:	d006      	beq.n	2000087c <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
2000086e:	4b09      	ldr	r3, [pc, #36]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000870:	6b19      	ldr	r1, [r3, #48]	; 0x30
20000872:	4b08      	ldr	r3, [pc, #32]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000874:	687a      	ldr	r2, [r7, #4]
20000876:	430a      	orrs	r2, r1
20000878:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
2000087a:	e006      	b.n	2000088a <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
2000087c:	4b05      	ldr	r3, [pc, #20]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
2000087e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000880:	687b      	ldr	r3, [r7, #4]
20000882:	43d9      	mvns	r1, r3
20000884:	4b03      	ldr	r3, [pc, #12]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000886:	400a      	ands	r2, r1
20000888:	631a      	str	r2, [r3, #48]	; 0x30
}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	46bd      	mov	sp, r7
2000088e:	b002      	add	sp, #8
20000890:	bd80      	pop	{r7, pc}
20000892:	46c0      	nop			; (mov r8, r8)
20000894:	40023800 	andmi	r3, r2, r0, lsl #16

20000898 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000898:	b580      	push	{r7, lr}
2000089a:	b082      	sub	sp, #8
2000089c:	af00      	add	r7, sp, #0
2000089e:	6078      	str	r0, [r7, #4]
200008a0:	000a      	movs	r2, r1
200008a2:	1cfb      	adds	r3, r7, #3
200008a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008a6:	1cfb      	adds	r3, r7, #3
200008a8:	781b      	ldrb	r3, [r3, #0]
200008aa:	2b00      	cmp	r3, #0
200008ac:	d006      	beq.n	200008bc <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
200008ae:	4b09      	ldr	r3, [pc, #36]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
200008b2:	4b08      	ldr	r3, [pc, #32]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b4:	687a      	ldr	r2, [r7, #4]
200008b6:	430a      	orrs	r2, r1
200008b8:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
200008ba:	e006      	b.n	200008ca <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
200008bc:	4b05      	ldr	r3, [pc, #20]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	43d9      	mvns	r1, r3
200008c4:	4b03      	ldr	r3, [pc, #12]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008c6:	400a      	ands	r2, r1
200008c8:	635a      	str	r2, [r3, #52]	; 0x34
}
200008ca:	46c0      	nop			; (mov r8, r8)
200008cc:	46bd      	mov	sp, r7
200008ce:	b002      	add	sp, #8
200008d0:	bd80      	pop	{r7, pc}
200008d2:	46c0      	nop			; (mov r8, r8)
200008d4:	40023800 	andmi	r3, r2, r0, lsl #16

200008d8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200008d8:	b580      	push	{r7, lr}
200008da:	b082      	sub	sp, #8
200008dc:	af00      	add	r7, sp, #0
200008de:	6078      	str	r0, [r7, #4]
200008e0:	000a      	movs	r2, r1
200008e2:	1cfb      	adds	r3, r7, #3
200008e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008e6:	1cfb      	adds	r3, r7, #3
200008e8:	781b      	ldrb	r3, [r3, #0]
200008ea:	2b00      	cmp	r3, #0
200008ec:	d006      	beq.n	200008fc <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
200008ee:	4b09      	ldr	r3, [pc, #36]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
200008f2:	4b08      	ldr	r3, [pc, #32]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f4:	687a      	ldr	r2, [r7, #4]
200008f6:	430a      	orrs	r2, r1
200008f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
200008fa:	e006      	b.n	2000090a <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
200008fc:	4b05      	ldr	r3, [pc, #20]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	43d9      	mvns	r1, r3
20000904:	4b03      	ldr	r3, [pc, #12]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
20000906:	400a      	ands	r2, r1
20000908:	639a      	str	r2, [r3, #56]	; 0x38
}
2000090a:	46c0      	nop			; (mov r8, r8)
2000090c:	46bd      	mov	sp, r7
2000090e:	b002      	add	sp, #8
20000910:	bd80      	pop	{r7, pc}
20000912:	46c0      	nop			; (mov r8, r8)
20000914:	40023800 	andmi	r3, r2, r0, lsl #16

20000918 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000918:	b580      	push	{r7, lr}
2000091a:	b082      	sub	sp, #8
2000091c:	af00      	add	r7, sp, #0
2000091e:	6078      	str	r0, [r7, #4]
20000920:	000a      	movs	r2, r1
20000922:	1cfb      	adds	r3, r7, #3
20000924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000926:	1cfb      	adds	r3, r7, #3
20000928:	781b      	ldrb	r3, [r3, #0]
2000092a:	2b00      	cmp	r3, #0
2000092c:	d006      	beq.n	2000093c <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
2000092e:	4b09      	ldr	r3, [pc, #36]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000930:	6c19      	ldr	r1, [r3, #64]	; 0x40
20000932:	4b08      	ldr	r3, [pc, #32]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000934:	687a      	ldr	r2, [r7, #4]
20000936:	430a      	orrs	r2, r1
20000938:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
2000093a:	e006      	b.n	2000094a <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
2000093c:	4b05      	ldr	r3, [pc, #20]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
2000093e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000940:	687b      	ldr	r3, [r7, #4]
20000942:	43d9      	mvns	r1, r3
20000944:	4b03      	ldr	r3, [pc, #12]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000946:	400a      	ands	r2, r1
20000948:	641a      	str	r2, [r3, #64]	; 0x40
}
2000094a:	46c0      	nop			; (mov r8, r8)
2000094c:	46bd      	mov	sp, r7
2000094e:	b002      	add	sp, #8
20000950:	bd80      	pop	{r7, pc}
20000952:	46c0      	nop			; (mov r8, r8)
20000954:	40023800 	andmi	r3, r2, r0, lsl #16

20000958 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000958:	b580      	push	{r7, lr}
2000095a:	b082      	sub	sp, #8
2000095c:	af00      	add	r7, sp, #0
2000095e:	6078      	str	r0, [r7, #4]
20000960:	000a      	movs	r2, r1
20000962:	1cfb      	adds	r3, r7, #3
20000964:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000966:	1cfb      	adds	r3, r7, #3
20000968:	781b      	ldrb	r3, [r3, #0]
2000096a:	2b00      	cmp	r3, #0
2000096c:	d006      	beq.n	2000097c <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
2000096e:	4b09      	ldr	r3, [pc, #36]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000970:	6c59      	ldr	r1, [r3, #68]	; 0x44
20000972:	4b08      	ldr	r3, [pc, #32]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000974:	687a      	ldr	r2, [r7, #4]
20000976:	430a      	orrs	r2, r1
20000978:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
2000097a:	e006      	b.n	2000098a <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
2000097c:	4b05      	ldr	r3, [pc, #20]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
2000097e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000980:	687b      	ldr	r3, [r7, #4]
20000982:	43d9      	mvns	r1, r3
20000984:	4b03      	ldr	r3, [pc, #12]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000986:	400a      	ands	r2, r1
20000988:	645a      	str	r2, [r3, #68]	; 0x44
}
2000098a:	46c0      	nop			; (mov r8, r8)
2000098c:	46bd      	mov	sp, r7
2000098e:	b002      	add	sp, #8
20000990:	bd80      	pop	{r7, pc}
20000992:	46c0      	nop			; (mov r8, r8)
20000994:	40023800 	andmi	r3, r2, r0, lsl #16

20000998 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000998:	b580      	push	{r7, lr}
2000099a:	b082      	sub	sp, #8
2000099c:	af00      	add	r7, sp, #0
2000099e:	6078      	str	r0, [r7, #4]
200009a0:	000a      	movs	r2, r1
200009a2:	1cfb      	adds	r3, r7, #3
200009a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009a6:	1cfb      	adds	r3, r7, #3
200009a8:	781b      	ldrb	r3, [r3, #0]
200009aa:	2b00      	cmp	r3, #0
200009ac:	d006      	beq.n	200009bc <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
200009ae:	4b09      	ldr	r3, [pc, #36]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b0:	6919      	ldr	r1, [r3, #16]
200009b2:	4b08      	ldr	r3, [pc, #32]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b4:	687a      	ldr	r2, [r7, #4]
200009b6:	430a      	orrs	r2, r1
200009b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
200009ba:	e006      	b.n	200009ca <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
200009bc:	4b05      	ldr	r3, [pc, #20]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009be:	691a      	ldr	r2, [r3, #16]
200009c0:	687b      	ldr	r3, [r7, #4]
200009c2:	43d9      	mvns	r1, r3
200009c4:	4b03      	ldr	r3, [pc, #12]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009c6:	400a      	ands	r2, r1
200009c8:	611a      	str	r2, [r3, #16]
}
200009ca:	46c0      	nop			; (mov r8, r8)
200009cc:	46bd      	mov	sp, r7
200009ce:	b002      	add	sp, #8
200009d0:	bd80      	pop	{r7, pc}
200009d2:	46c0      	nop			; (mov r8, r8)
200009d4:	40023800 	andmi	r3, r2, r0, lsl #16

200009d8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200009d8:	b580      	push	{r7, lr}
200009da:	b082      	sub	sp, #8
200009dc:	af00      	add	r7, sp, #0
200009de:	6078      	str	r0, [r7, #4]
200009e0:	000a      	movs	r2, r1
200009e2:	1cfb      	adds	r3, r7, #3
200009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009e6:	1cfb      	adds	r3, r7, #3
200009e8:	781b      	ldrb	r3, [r3, #0]
200009ea:	2b00      	cmp	r3, #0
200009ec:	d006      	beq.n	200009fc <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
200009ee:	4b09      	ldr	r3, [pc, #36]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f0:	6959      	ldr	r1, [r3, #20]
200009f2:	4b08      	ldr	r3, [pc, #32]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f4:	687a      	ldr	r2, [r7, #4]
200009f6:	430a      	orrs	r2, r1
200009f8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
200009fa:	e006      	b.n	20000a0a <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
200009fc:	4b05      	ldr	r3, [pc, #20]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009fe:	695a      	ldr	r2, [r3, #20]
20000a00:	687b      	ldr	r3, [r7, #4]
20000a02:	43d9      	mvns	r1, r3
20000a04:	4b03      	ldr	r3, [pc, #12]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
20000a06:	400a      	ands	r2, r1
20000a08:	615a      	str	r2, [r3, #20]
}
20000a0a:	46c0      	nop			; (mov r8, r8)
20000a0c:	46bd      	mov	sp, r7
20000a0e:	b002      	add	sp, #8
20000a10:	bd80      	pop	{r7, pc}
20000a12:	46c0      	nop			; (mov r8, r8)
20000a14:	40023800 	andmi	r3, r2, r0, lsl #16

20000a18 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000a18:	b580      	push	{r7, lr}
20000a1a:	b082      	sub	sp, #8
20000a1c:	af00      	add	r7, sp, #0
20000a1e:	6078      	str	r0, [r7, #4]
20000a20:	000a      	movs	r2, r1
20000a22:	1cfb      	adds	r3, r7, #3
20000a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000a26:	1cfb      	adds	r3, r7, #3
20000a28:	781b      	ldrb	r3, [r3, #0]
20000a2a:	2b00      	cmp	r3, #0
20000a2c:	d006      	beq.n	20000a3c <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000a2e:	4b09      	ldr	r3, [pc, #36]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a30:	6999      	ldr	r1, [r3, #24]
20000a32:	4b08      	ldr	r3, [pc, #32]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a34:	687a      	ldr	r2, [r7, #4]
20000a36:	430a      	orrs	r2, r1
20000a38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000a3a:	e006      	b.n	20000a4a <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000a3c:	4b05      	ldr	r3, [pc, #20]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a3e:	699a      	ldr	r2, [r3, #24]
20000a40:	687b      	ldr	r3, [r7, #4]
20000a42:	43d9      	mvns	r1, r3
20000a44:	4b03      	ldr	r3, [pc, #12]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a46:	400a      	ands	r2, r1
20000a48:	619a      	str	r2, [r3, #24]
}
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b002      	add	sp, #8
20000a50:	bd80      	pop	{r7, pc}
20000a52:	46c0      	nop			; (mov r8, r8)
20000a54:	40023800 	andmi	r3, r2, r0, lsl #16

20000a58 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000a58:	b580      	push	{r7, lr}
20000a5a:	b082      	sub	sp, #8
20000a5c:	af00      	add	r7, sp, #0
20000a5e:	6078      	str	r0, [r7, #4]
20000a60:	000a      	movs	r2, r1
20000a62:	1cfb      	adds	r3, r7, #3
20000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a66:	1cfb      	adds	r3, r7, #3
20000a68:	781b      	ldrb	r3, [r3, #0]
20000a6a:	2b00      	cmp	r3, #0
20000a6c:	d006      	beq.n	20000a7c <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20000a6e:	4b09      	ldr	r3, [pc, #36]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a70:	6a19      	ldr	r1, [r3, #32]
20000a72:	4b08      	ldr	r3, [pc, #32]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a74:	687a      	ldr	r2, [r7, #4]
20000a76:	430a      	orrs	r2, r1
20000a78:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20000a7a:	e006      	b.n	20000a8a <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20000a7c:	4b05      	ldr	r3, [pc, #20]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a7e:	6a1a      	ldr	r2, [r3, #32]
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	43d9      	mvns	r1, r3
20000a84:	4b03      	ldr	r3, [pc, #12]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a86:	400a      	ands	r2, r1
20000a88:	621a      	str	r2, [r3, #32]
}
20000a8a:	46c0      	nop			; (mov r8, r8)
20000a8c:	46bd      	mov	sp, r7
20000a8e:	b002      	add	sp, #8
20000a90:	bd80      	pop	{r7, pc}
20000a92:	46c0      	nop			; (mov r8, r8)
20000a94:	40023800 	andmi	r3, r2, r0, lsl #16

20000a98 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000a98:	b580      	push	{r7, lr}
20000a9a:	b082      	sub	sp, #8
20000a9c:	af00      	add	r7, sp, #0
20000a9e:	6078      	str	r0, [r7, #4]
20000aa0:	000a      	movs	r2, r1
20000aa2:	1cfb      	adds	r3, r7, #3
20000aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000aa6:	1cfb      	adds	r3, r7, #3
20000aa8:	781b      	ldrb	r3, [r3, #0]
20000aaa:	2b00      	cmp	r3, #0
20000aac:	d006      	beq.n	20000abc <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000aae:	4b09      	ldr	r3, [pc, #36]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab0:	6a59      	ldr	r1, [r3, #36]	; 0x24
20000ab2:	4b08      	ldr	r3, [pc, #32]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab4:	687a      	ldr	r2, [r7, #4]
20000ab6:	430a      	orrs	r2, r1
20000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20000aba:	e006      	b.n	20000aca <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20000abc:	4b05      	ldr	r3, [pc, #20]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	43d9      	mvns	r1, r3
20000ac4:	4b03      	ldr	r3, [pc, #12]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ac6:	400a      	ands	r2, r1
20000ac8:	625a      	str	r2, [r3, #36]	; 0x24
}
20000aca:	46c0      	nop			; (mov r8, r8)
20000acc:	46bd      	mov	sp, r7
20000ace:	b002      	add	sp, #8
20000ad0:	bd80      	pop	{r7, pc}
20000ad2:	46c0      	nop			; (mov r8, r8)
20000ad4:	40023800 	andmi	r3, r2, r0, lsl #16

20000ad8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000ad8:	b580      	push	{r7, lr}
20000ada:	b082      	sub	sp, #8
20000adc:	af00      	add	r7, sp, #0
20000ade:	6078      	str	r0, [r7, #4]
20000ae0:	000a      	movs	r2, r1
20000ae2:	1cfb      	adds	r3, r7, #3
20000ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ae6:	1cfb      	adds	r3, r7, #3
20000ae8:	781b      	ldrb	r3, [r3, #0]
20000aea:	2b00      	cmp	r3, #0
20000aec:	d006      	beq.n	20000afc <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20000aee:	4b09      	ldr	r3, [pc, #36]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af0:	6d19      	ldr	r1, [r3, #80]	; 0x50
20000af2:	4b08      	ldr	r3, [pc, #32]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af4:	687a      	ldr	r2, [r7, #4]
20000af6:	430a      	orrs	r2, r1
20000af8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20000afa:	e006      	b.n	20000b0a <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20000afc:	4b05      	ldr	r3, [pc, #20]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20000b00:	687b      	ldr	r3, [r7, #4]
20000b02:	43d9      	mvns	r1, r3
20000b04:	4b03      	ldr	r3, [pc, #12]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000b06:	400a      	ands	r2, r1
20000b08:	651a      	str	r2, [r3, #80]	; 0x50
}
20000b0a:	46c0      	nop			; (mov r8, r8)
20000b0c:	46bd      	mov	sp, r7
20000b0e:	b002      	add	sp, #8
20000b10:	bd80      	pop	{r7, pc}
20000b12:	46c0      	nop			; (mov r8, r8)
20000b14:	40023800 	andmi	r3, r2, r0, lsl #16

20000b18 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000b18:	b580      	push	{r7, lr}
20000b1a:	b082      	sub	sp, #8
20000b1c:	af00      	add	r7, sp, #0
20000b1e:	6078      	str	r0, [r7, #4]
20000b20:	000a      	movs	r2, r1
20000b22:	1cfb      	adds	r3, r7, #3
20000b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b26:	1cfb      	adds	r3, r7, #3
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	2b00      	cmp	r3, #0
20000b2c:	d006      	beq.n	20000b3c <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20000b2e:	4b09      	ldr	r3, [pc, #36]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
20000b32:	4b08      	ldr	r3, [pc, #32]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b34:	687a      	ldr	r2, [r7, #4]
20000b36:	430a      	orrs	r2, r1
20000b38:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20000b3a:	e006      	b.n	20000b4a <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20000b3c:	4b05      	ldr	r3, [pc, #20]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20000b40:	687b      	ldr	r3, [r7, #4]
20000b42:	43d9      	mvns	r1, r3
20000b44:	4b03      	ldr	r3, [pc, #12]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b46:	400a      	ands	r2, r1
20000b48:	655a      	str	r2, [r3, #84]	; 0x54
}
20000b4a:	46c0      	nop			; (mov r8, r8)
20000b4c:	46bd      	mov	sp, r7
20000b4e:	b002      	add	sp, #8
20000b50:	bd80      	pop	{r7, pc}
20000b52:	46c0      	nop			; (mov r8, r8)
20000b54:	40023800 	andmi	r3, r2, r0, lsl #16

20000b58 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000b58:	b580      	push	{r7, lr}
20000b5a:	b082      	sub	sp, #8
20000b5c:	af00      	add	r7, sp, #0
20000b5e:	6078      	str	r0, [r7, #4]
20000b60:	000a      	movs	r2, r1
20000b62:	1cfb      	adds	r3, r7, #3
20000b64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b66:	1cfb      	adds	r3, r7, #3
20000b68:	781b      	ldrb	r3, [r3, #0]
20000b6a:	2b00      	cmp	r3, #0
20000b6c:	d006      	beq.n	20000b7c <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20000b6e:	4b09      	ldr	r3, [pc, #36]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b70:	6d99      	ldr	r1, [r3, #88]	; 0x58
20000b72:	4b08      	ldr	r3, [pc, #32]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b74:	687a      	ldr	r2, [r7, #4]
20000b76:	430a      	orrs	r2, r1
20000b78:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20000b7a:	e006      	b.n	20000b8a <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20000b7c:	4b05      	ldr	r3, [pc, #20]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20000b80:	687b      	ldr	r3, [r7, #4]
20000b82:	43d9      	mvns	r1, r3
20000b84:	4b03      	ldr	r3, [pc, #12]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b86:	400a      	ands	r2, r1
20000b88:	659a      	str	r2, [r3, #88]	; 0x58
}
20000b8a:	46c0      	nop			; (mov r8, r8)
20000b8c:	46bd      	mov	sp, r7
20000b8e:	b002      	add	sp, #8
20000b90:	bd80      	pop	{r7, pc}
20000b92:	46c0      	nop			; (mov r8, r8)
20000b94:	40023800 	andmi	r3, r2, r0, lsl #16

20000b98 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000b98:	b580      	push	{r7, lr}
20000b9a:	b082      	sub	sp, #8
20000b9c:	af00      	add	r7, sp, #0
20000b9e:	6078      	str	r0, [r7, #4]
20000ba0:	000a      	movs	r2, r1
20000ba2:	1cfb      	adds	r3, r7, #3
20000ba4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ba6:	1cfb      	adds	r3, r7, #3
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	2b00      	cmp	r3, #0
20000bac:	d006      	beq.n	20000bbc <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20000bae:	4b09      	ldr	r3, [pc, #36]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb0:	6e19      	ldr	r1, [r3, #96]	; 0x60
20000bb2:	4b08      	ldr	r3, [pc, #32]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb4:	687a      	ldr	r2, [r7, #4]
20000bb6:	430a      	orrs	r2, r1
20000bb8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20000bba:	e006      	b.n	20000bca <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20000bbc:	4b05      	ldr	r3, [pc, #20]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	43d9      	mvns	r1, r3
20000bc4:	4b03      	ldr	r3, [pc, #12]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bc6:	400a      	ands	r2, r1
20000bc8:	661a      	str	r2, [r3, #96]	; 0x60
}
20000bca:	46c0      	nop			; (mov r8, r8)
20000bcc:	46bd      	mov	sp, r7
20000bce:	b002      	add	sp, #8
20000bd0:	bd80      	pop	{r7, pc}
20000bd2:	46c0      	nop			; (mov r8, r8)
20000bd4:	40023800 	andmi	r3, r2, r0, lsl #16

20000bd8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000bd8:	b580      	push	{r7, lr}
20000bda:	b082      	sub	sp, #8
20000bdc:	af00      	add	r7, sp, #0
20000bde:	6078      	str	r0, [r7, #4]
20000be0:	000a      	movs	r2, r1
20000be2:	1cfb      	adds	r3, r7, #3
20000be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000be6:	1cfb      	adds	r3, r7, #3
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	2b00      	cmp	r3, #0
20000bec:	d006      	beq.n	20000bfc <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20000bee:	4b09      	ldr	r3, [pc, #36]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf0:	6e59      	ldr	r1, [r3, #100]	; 0x64
20000bf2:	4b08      	ldr	r3, [pc, #32]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf4:	687a      	ldr	r2, [r7, #4]
20000bf6:	430a      	orrs	r2, r1
20000bf8:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20000bfa:	e006      	b.n	20000c0a <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20000bfc:	4b05      	ldr	r3, [pc, #20]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20000c00:	687b      	ldr	r3, [r7, #4]
20000c02:	43d9      	mvns	r1, r3
20000c04:	4b03      	ldr	r3, [pc, #12]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000c06:	400a      	ands	r2, r1
20000c08:	665a      	str	r2, [r3, #100]	; 0x64
}
20000c0a:	46c0      	nop			; (mov r8, r8)
20000c0c:	46bd      	mov	sp, r7
20000c0e:	b002      	add	sp, #8
20000c10:	bd80      	pop	{r7, pc}
20000c12:	46c0      	nop			; (mov r8, r8)
20000c14:	40023800 	andmi	r3, r2, r0, lsl #16

20000c18 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20000c18:	b580      	push	{r7, lr}
20000c1a:	b082      	sub	sp, #8
20000c1c:	af00      	add	r7, sp, #0
20000c1e:	0002      	movs	r2, r0
20000c20:	1dfb      	adds	r3, r7, #7
20000c22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20000c24:	1dfb      	adds	r3, r7, #7
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	2b01      	cmp	r3, #1
20000c2a:	d106      	bne.n	20000c3a <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c2c:	4b08      	ldr	r3, [pc, #32]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c30:	4b07      	ldr	r3, [pc, #28]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c32:	2108      	movs	r1, #8
20000c34:	430a      	orrs	r2, r1
20000c36:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20000c38:	e005      	b.n	20000c46 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c3a:	4b05      	ldr	r3, [pc, #20]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c3e:	4b04      	ldr	r3, [pc, #16]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c40:	2108      	movs	r1, #8
20000c42:	438a      	bics	r2, r1
20000c44:	671a      	str	r2, [r3, #112]	; 0x70
}
20000c46:	46c0      	nop			; (mov r8, r8)
20000c48:	46bd      	mov	sp, r7
20000c4a:	b002      	add	sp, #8
20000c4c:	bd80      	pop	{r7, pc}
20000c4e:	46c0      	nop			; (mov r8, r8)
20000c50:	40023800 	andmi	r3, r2, r0, lsl #16

20000c54 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20000c54:	b580      	push	{r7, lr}
20000c56:	b082      	sub	sp, #8
20000c58:	af00      	add	r7, sp, #0
20000c5a:	0002      	movs	r2, r0
20000c5c:	1dfb      	adds	r3, r7, #7
20000c5e:	701a      	strb	r2, [r3, #0]
20000c60:	1dbb      	adds	r3, r7, #6
20000c62:	1c0a      	adds	r2, r1, #0
20000c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000c66:	1dbb      	adds	r3, r7, #6
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	2b00      	cmp	r3, #0
20000c6c:	d009      	beq.n	20000c82 <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20000c6e:	4b0c      	ldr	r3, [pc, #48]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c70:	781b      	ldrb	r3, [r3, #0]
20000c72:	b2da      	uxtb	r2, r3
20000c74:	490a      	ldr	r1, [pc, #40]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c76:	1dfb      	adds	r3, r7, #7
20000c78:	781b      	ldrb	r3, [r3, #0]
20000c7a:	4313      	orrs	r3, r2
20000c7c:	b2db      	uxtb	r3, r3
20000c7e:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20000c80:	e00a      	b.n	20000c98 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20000c82:	4b07      	ldr	r3, [pc, #28]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c84:	781b      	ldrb	r3, [r3, #0]
20000c86:	b2db      	uxtb	r3, r3
20000c88:	1dfa      	adds	r2, r7, #7
20000c8a:	7812      	ldrb	r2, [r2, #0]
20000c8c:	43d2      	mvns	r2, r2
20000c8e:	b2d2      	uxtb	r2, r2
20000c90:	4903      	ldr	r1, [pc, #12]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c92:	4013      	ands	r3, r2
20000c94:	b2db      	uxtb	r3, r3
20000c96:	700b      	strb	r3, [r1, #0]
}
20000c98:	46c0      	nop			; (mov r8, r8)
20000c9a:	46bd      	mov	sp, r7
20000c9c:	b002      	add	sp, #8
20000c9e:	bd80      	pop	{r7, pc}
20000ca0:	4002380d 	andmi	r3, r2, sp, lsl #16

20000ca4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b086      	sub	sp, #24
20000ca8:	af00      	add	r7, sp, #0
20000caa:	0002      	movs	r2, r0
20000cac:	1dfb      	adds	r3, r7, #7
20000cae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20000cb0:	2300      	movs	r3, #0
20000cb2:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20000cb4:	2300      	movs	r3, #0
20000cb6:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20000cb8:	2313      	movs	r3, #19
20000cba:	18fb      	adds	r3, r7, r3
20000cbc:	2200      	movs	r2, #0
20000cbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20000cc0:	1dfb      	adds	r3, r7, #7
20000cc2:	781b      	ldrb	r3, [r3, #0]
20000cc4:	095b      	lsrs	r3, r3, #5
20000cc6:	b2db      	uxtb	r3, r3
20000cc8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20000cca:	68fb      	ldr	r3, [r7, #12]
20000ccc:	2b01      	cmp	r3, #1
20000cce:	d103      	bne.n	20000cd8 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20000cd0:	4b14      	ldr	r3, [pc, #80]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000cd2:	681b      	ldr	r3, [r3, #0]
20000cd4:	617b      	str	r3, [r7, #20]
20000cd6:	e009      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20000cd8:	68fb      	ldr	r3, [r7, #12]
20000cda:	2b02      	cmp	r3, #2
20000cdc:	d103      	bne.n	20000ce6 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20000cde:	4b11      	ldr	r3, [pc, #68]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20000ce2:	617b      	str	r3, [r7, #20]
20000ce4:	e002      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20000ce6:	4b0f      	ldr	r3, [pc, #60]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000cea:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20000cec:	1dfb      	adds	r3, r7, #7
20000cee:	781b      	ldrb	r3, [r3, #0]
20000cf0:	221f      	movs	r2, #31
20000cf2:	4013      	ands	r3, r2
20000cf4:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20000cf6:	697a      	ldr	r2, [r7, #20]
20000cf8:	68fb      	ldr	r3, [r7, #12]
20000cfa:	40da      	lsrs	r2, r3
20000cfc:	0013      	movs	r3, r2
20000cfe:	2201      	movs	r2, #1
20000d00:	4013      	ands	r3, r2
20000d02:	d004      	beq.n	20000d0e <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20000d04:	2313      	movs	r3, #19
20000d06:	18fb      	adds	r3, r7, r3
20000d08:	2201      	movs	r2, #1
20000d0a:	701a      	strb	r2, [r3, #0]
20000d0c:	e003      	b.n	20000d16 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20000d0e:	2313      	movs	r3, #19
20000d10:	18fb      	adds	r3, r7, r3
20000d12:	2200      	movs	r2, #0
20000d14:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20000d16:	2313      	movs	r3, #19
20000d18:	18fb      	adds	r3, r7, r3
20000d1a:	781b      	ldrb	r3, [r3, #0]
}
20000d1c:	0018      	movs	r0, r3
20000d1e:	46bd      	mov	sp, r7
20000d20:	b006      	add	sp, #24
20000d22:	bd80      	pop	{r7, pc}
20000d24:	40023800 	andmi	r3, r2, r0, lsl #16

20000d28 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20000d28:	b580      	push	{r7, lr}
20000d2a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20000d2c:	4b04      	ldr	r3, [pc, #16]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20000d30:	4b03      	ldr	r3, [pc, #12]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d32:	2180      	movs	r1, #128	; 0x80
20000d34:	0449      	lsls	r1, r1, #17
20000d36:	430a      	orrs	r2, r1
20000d38:	675a      	str	r2, [r3, #116]	; 0x74
}
20000d3a:	46c0      	nop			; (mov r8, r8)
20000d3c:	46bd      	mov	sp, r7
20000d3e:	bd80      	pop	{r7, pc}
20000d40:	40023800 	andmi	r3, r2, r0, lsl #16

20000d44 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20000d44:	b580      	push	{r7, lr}
20000d46:	b084      	sub	sp, #16
20000d48:	af00      	add	r7, sp, #0
20000d4a:	0002      	movs	r2, r0
20000d4c:	1dfb      	adds	r3, r7, #7
20000d4e:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20000d50:	230f      	movs	r3, #15
20000d52:	18fb      	adds	r3, r7, r3
20000d54:	2200      	movs	r2, #0
20000d56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20000d58:	4b0a      	ldr	r3, [pc, #40]	; (20000d84 <RCC_GetITStatus+0x40>)
20000d5a:	68db      	ldr	r3, [r3, #12]
20000d5c:	1dfa      	adds	r2, r7, #7
20000d5e:	7812      	ldrb	r2, [r2, #0]
20000d60:	4013      	ands	r3, r2
20000d62:	d004      	beq.n	20000d6e <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20000d64:	230f      	movs	r3, #15
20000d66:	18fb      	adds	r3, r7, r3
20000d68:	2201      	movs	r2, #1
20000d6a:	701a      	strb	r2, [r3, #0]
20000d6c:	e003      	b.n	20000d76 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20000d6e:	230f      	movs	r3, #15
20000d70:	18fb      	adds	r3, r7, r3
20000d72:	2200      	movs	r2, #0
20000d74:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20000d76:	230f      	movs	r3, #15
20000d78:	18fb      	adds	r3, r7, r3
20000d7a:	781b      	ldrb	r3, [r3, #0]
}
20000d7c:	0018      	movs	r0, r3
20000d7e:	46bd      	mov	sp, r7
20000d80:	b004      	add	sp, #16
20000d82:	bd80      	pop	{r7, pc}
20000d84:	40023800 	andmi	r3, r2, r0, lsl #16

20000d88 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20000d88:	b580      	push	{r7, lr}
20000d8a:	b082      	sub	sp, #8
20000d8c:	af00      	add	r7, sp, #0
20000d8e:	0002      	movs	r2, r0
20000d90:	1dfb      	adds	r3, r7, #7
20000d92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20000d94:	4a03      	ldr	r2, [pc, #12]	; (20000da4 <RCC_ClearITPendingBit+0x1c>)
20000d96:	1dfb      	adds	r3, r7, #7
20000d98:	781b      	ldrb	r3, [r3, #0]
20000d9a:	7013      	strb	r3, [r2, #0]
}
20000d9c:	46c0      	nop			; (mov r8, r8)
20000d9e:	46bd      	mov	sp, r7
20000da0:	b002      	add	sp, #8
20000da2:	bd80      	pop	{r7, pc}
20000da4:	4002380e 	andmi	r3, r2, lr, lsl #16

20000da8 <init_GPIO_Ports>:
		GPIO_Pin_8, GPIO_Pin_9, GPIO_Pin_10, GPIO_Pin_11,
		GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14, GPIO_Pin_15
		};

void init_GPIO_Ports()
{
20000da8:	b580      	push	{r7, lr}
20000daa:	b082      	sub	sp, #8
20000dac:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO A UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000dae:	2101      	movs	r1, #1
20000db0:	2001      	movs	r0, #1
20000db2:	f7ff fd51 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000db6:	003b      	movs	r3, r7
20000db8:	0018      	movs	r0, r3
20000dba:	f000 f9c3 	bl	20001144 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7;
20000dbe:	003b      	movs	r3, r7
20000dc0:	22aa      	movs	r2, #170	; 0xaa
20000dc2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000dc4:	003b      	movs	r3, r7
20000dc6:	2201      	movs	r2, #1
20000dc8:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000dca:	003b      	movs	r3, r7
20000dcc:	2200      	movs	r2, #0
20000dce:	719a      	strb	r2, [r3, #6]
	GPIO_Init(GPIOA, &init);
20000dd0:	003b      	movs	r3, r7
20000dd2:	4a0e      	ldr	r2, [pc, #56]	; (20000e0c <init_GPIO_Ports+0x64>)
20000dd4:	0019      	movs	r1, r3
20000dd6:	0010      	movs	r0, r2
20000dd8:	f000 f928 	bl	2000102c <GPIO_Init>

	//konfigurerar inport GPIO A
	GPIO_StructInit(&init);
20000ddc:	003b      	movs	r3, r7
20000dde:	0018      	movs	r0, r3
20000de0:	f000 f9b0 	bl	20001144 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6;
20000de4:	003b      	movs	r3, r7
20000de6:	2255      	movs	r2, #85	; 0x55
20000de8:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000dea:	003b      	movs	r3, r7
20000dec:	2200      	movs	r2, #0
20000dee:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000df0:	003b      	movs	r3, r7
20000df2:	2201      	movs	r2, #1
20000df4:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20000df6:	003b      	movs	r3, r7
20000df8:	4a04      	ldr	r2, [pc, #16]	; (20000e0c <init_GPIO_Ports+0x64>)
20000dfa:	0019      	movs	r1, r3
20000dfc:	0010      	movs	r0, r2
20000dfe:	f000 f915 	bl	2000102c <GPIO_Init>
}
20000e02:	46c0      	nop			; (mov r8, r8)
20000e04:	46bd      	mov	sp, r7
20000e06:	b002      	add	sp, #8
20000e08:	bd80      	pop	{r7, pc}
20000e0a:	46c0      	nop			; (mov r8, r8)
20000e0c:	40020000 	andmi	r0, r2, r0

20000e10 <SysTick_Handler>:

volatile uint32_t msTicks = 0;                              /* Variable to store millisecond ticks */
  
void SysTick_Handler(void)  {                               /* SysTick interrupt Handler. */
20000e10:	b580      	push	{r7, lr}
20000e12:	af00      	add	r7, sp, #0
	msTicks++;
20000e14:	4b11      	ldr	r3, [pc, #68]	; (20000e5c <SysTick_Handler+0x4c>)
20000e16:	681b      	ldr	r3, [r3, #0]
20000e18:	1c5a      	adds	r2, r3, #1
20000e1a:	4b10      	ldr	r3, [pc, #64]	; (20000e5c <SysTick_Handler+0x4c>)
20000e1c:	601a      	str	r2, [r3, #0]
	if (msTicks % 1000 == 0) {
20000e1e:	4b0f      	ldr	r3, [pc, #60]	; (20000e5c <SysTick_Handler+0x4c>)
20000e20:	681a      	ldr	r2, [r3, #0]
20000e22:	23fa      	movs	r3, #250	; 0xfa
20000e24:	0099      	lsls	r1, r3, #2
20000e26:	0010      	movs	r0, r2
20000e28:	f000 fb56 	bl	200014d8 <__aeabi_uidivmod>
20000e2c:	1e0b      	subs	r3, r1, #0
20000e2e:	d104      	bne.n	20000e3a <SysTick_Handler+0x2a>
		GPIO_SetBits(GPIOA,GPIO_Pin_1);
20000e30:	4b0b      	ldr	r3, [pc, #44]	; (20000e60 <SysTick_Handler+0x50>)
20000e32:	2102      	movs	r1, #2
20000e34:	0018      	movs	r0, r3
20000e36:	f000 fa1a 	bl	2000126e <GPIO_SetBits>
	}
	if (msTicks % 2000 == 0) {
20000e3a:	4b08      	ldr	r3, [pc, #32]	; (20000e5c <SysTick_Handler+0x4c>)
20000e3c:	681a      	ldr	r2, [r3, #0]
20000e3e:	23fa      	movs	r3, #250	; 0xfa
20000e40:	00d9      	lsls	r1, r3, #3
20000e42:	0010      	movs	r0, r2
20000e44:	f000 fb48 	bl	200014d8 <__aeabi_uidivmod>
20000e48:	1e0b      	subs	r3, r1, #0
20000e4a:	d104      	bne.n	20000e56 <SysTick_Handler+0x46>
		GPIO_ResetBits(GPIOA,GPIO_Pin_1);
20000e4c:	4b04      	ldr	r3, [pc, #16]	; (20000e60 <SysTick_Handler+0x50>)
20000e4e:	2102      	movs	r1, #2
20000e50:	0018      	movs	r0, r3
20000e52:	f000 fa1b 	bl	2000128c <GPIO_ResetBits>
	}
	// Gör en ny Array med dörrar som larmar.
}
20000e56:	46c0      	nop			; (mov r8, r8)
20000e58:	46bd      	mov	sp, r7
20000e5a:	bd80      	pop	{r7, pc}
20000e5c:	200014e4 	andcs	r1, r0, r4, ror #9
20000e60:	40020000 	andmi	r0, r2, r0

20000e64 <main>:

void main(void)
{
20000e64:	b580      	push	{r7, lr}
20000e66:	b082      	sub	sp, #8
20000e68:	af00      	add	r7, sp, #0
	//app_init();
	init_GPIO_Ports();
20000e6a:	f7ff ff9d 	bl	20000da8 <init_GPIO_Ports>
	
	//Systick
	*((void (**)(void) ) 0x2001C03C ) = SysTick_Handler;
20000e6e:	4b0e      	ldr	r3, [pc, #56]	; (20000ea8 <main+0x44>)
20000e70:	4a0e      	ldr	r2, [pc, #56]	; (20000eac <main+0x48>)
20000e72:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
  	returnCode = SysTick_Config(168000000/1000);      /* Configure SysTick to generate an interrupt every millisecond */
20000e74:	4b0e      	ldr	r3, [pc, #56]	; (20000eb0 <main+0x4c>)
20000e76:	0018      	movs	r0, r3
20000e78:	f7ff f8fa 	bl	20000070 <SysTick_Config>
20000e7c:	0003      	movs	r3, r0
20000e7e:	603b      	str	r3, [r7, #0]
	//typ reboot? bootloops är alltid kul 
  }
  
  while (1)
	{
		for (int i = 0; i < sizeof(GPIO_Pins); i = i + 2)
20000e80:	2300      	movs	r3, #0
20000e82:	607b      	str	r3, [r7, #4]
20000e84:	e00b      	b.n	20000e9e <main+0x3a>
		{

			if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pins[i]))
20000e86:	4b0b      	ldr	r3, [pc, #44]	; (20000eb4 <main+0x50>)
20000e88:	687a      	ldr	r2, [r7, #4]
20000e8a:	0052      	lsls	r2, r2, #1
20000e8c:	5ad3      	ldrh	r3, [r2, r3]
20000e8e:	4a0a      	ldr	r2, [pc, #40]	; (20000eb8 <main+0x54>)
20000e90:	0019      	movs	r1, r3
20000e92:	0010      	movs	r0, r2
20000e94:	f000 f993 	bl	200011be <GPIO_ReadInputDataBit>
		for (int i = 0; i < sizeof(GPIO_Pins); i = i + 2)
20000e98:	687b      	ldr	r3, [r7, #4]
20000e9a:	3302      	adds	r3, #2
20000e9c:	607b      	str	r3, [r7, #4]
20000e9e:	687b      	ldr	r3, [r7, #4]
20000ea0:	2b1f      	cmp	r3, #31
20000ea2:	d9f0      	bls.n	20000e86 <main+0x22>
20000ea4:	e7ec      	b.n	20000e80 <main+0x1c>
20000ea6:	46c0      	nop			; (mov r8, r8)
20000ea8:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000eac:	20000e11 	andcs	r0, r0, r1, lsl lr
20000eb0:	00029040 	andeq	r9, r2, r0, asr #32
20000eb4:	200014f8 	strdcs	r1, [r0], -r8
20000eb8:	40020000 	andmi	r0, r2, r0

20000ebc <GPIO_DeInit>:
20000ebc:	b580      	push	{r7, lr}
20000ebe:	b082      	sub	sp, #8
20000ec0:	af00      	add	r7, sp, #0
20000ec2:	6078      	str	r0, [r7, #4]
20000ec4:	687b      	ldr	r3, [r7, #4]
20000ec6:	4a4e      	ldr	r2, [pc, #312]	; (20001000 <GPIO_DeInit+0x144>)
20000ec8:	4293      	cmp	r3, r2
20000eca:	d108      	bne.n	20000ede <GPIO_DeInit+0x22>
20000ecc:	2101      	movs	r1, #1
20000ece:	2001      	movs	r0, #1
20000ed0:	f7ff fd62 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000ed4:	2100      	movs	r1, #0
20000ed6:	2001      	movs	r0, #1
20000ed8:	f7ff fd5e 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000edc:	e08c      	b.n	20000ff8 <GPIO_DeInit+0x13c>
20000ede:	687b      	ldr	r3, [r7, #4]
20000ee0:	4a48      	ldr	r2, [pc, #288]	; (20001004 <GPIO_DeInit+0x148>)
20000ee2:	4293      	cmp	r3, r2
20000ee4:	d108      	bne.n	20000ef8 <GPIO_DeInit+0x3c>
20000ee6:	2101      	movs	r1, #1
20000ee8:	2002      	movs	r0, #2
20000eea:	f7ff fd55 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000eee:	2100      	movs	r1, #0
20000ef0:	2002      	movs	r0, #2
20000ef2:	f7ff fd51 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000ef6:	e07f      	b.n	20000ff8 <GPIO_DeInit+0x13c>
20000ef8:	687b      	ldr	r3, [r7, #4]
20000efa:	4a43      	ldr	r2, [pc, #268]	; (20001008 <GPIO_DeInit+0x14c>)
20000efc:	4293      	cmp	r3, r2
20000efe:	d108      	bne.n	20000f12 <GPIO_DeInit+0x56>
20000f00:	2101      	movs	r1, #1
20000f02:	2004      	movs	r0, #4
20000f04:	f7ff fd48 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000f08:	2100      	movs	r1, #0
20000f0a:	2004      	movs	r0, #4
20000f0c:	f7ff fd44 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000f10:	e072      	b.n	20000ff8 <GPIO_DeInit+0x13c>
20000f12:	687b      	ldr	r3, [r7, #4]
20000f14:	4a3d      	ldr	r2, [pc, #244]	; (2000100c <GPIO_DeInit+0x150>)
20000f16:	4293      	cmp	r3, r2
20000f18:	d108      	bne.n	20000f2c <GPIO_DeInit+0x70>
20000f1a:	2101      	movs	r1, #1
20000f1c:	2008      	movs	r0, #8
20000f1e:	f7ff fd3b 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000f22:	2100      	movs	r1, #0
20000f24:	2008      	movs	r0, #8
20000f26:	f7ff fd37 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000f2a:	e065      	b.n	20000ff8 <GPIO_DeInit+0x13c>
20000f2c:	687b      	ldr	r3, [r7, #4]
20000f2e:	4a38      	ldr	r2, [pc, #224]	; (20001010 <GPIO_DeInit+0x154>)
20000f30:	4293      	cmp	r3, r2
20000f32:	d108      	bne.n	20000f46 <GPIO_DeInit+0x8a>
20000f34:	2101      	movs	r1, #1
20000f36:	2010      	movs	r0, #16
20000f38:	f7ff fd2e 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000f3c:	2100      	movs	r1, #0
20000f3e:	2010      	movs	r0, #16
20000f40:	f7ff fd2a 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000f44:	e058      	b.n	20000ff8 <GPIO_DeInit+0x13c>
20000f46:	687b      	ldr	r3, [r7, #4]
20000f48:	4a32      	ldr	r2, [pc, #200]	; (20001014 <GPIO_DeInit+0x158>)
20000f4a:	4293      	cmp	r3, r2
20000f4c:	d108      	bne.n	20000f60 <GPIO_DeInit+0xa4>
20000f4e:	2101      	movs	r1, #1
20000f50:	2020      	movs	r0, #32
20000f52:	f7ff fd21 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000f56:	2100      	movs	r1, #0
20000f58:	2020      	movs	r0, #32
20000f5a:	f7ff fd1d 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000f5e:	e04b      	b.n	20000ff8 <GPIO_DeInit+0x13c>
20000f60:	687b      	ldr	r3, [r7, #4]
20000f62:	4a2d      	ldr	r2, [pc, #180]	; (20001018 <GPIO_DeInit+0x15c>)
20000f64:	4293      	cmp	r3, r2
20000f66:	d108      	bne.n	20000f7a <GPIO_DeInit+0xbe>
20000f68:	2101      	movs	r1, #1
20000f6a:	2040      	movs	r0, #64	; 0x40
20000f6c:	f7ff fd14 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000f70:	2100      	movs	r1, #0
20000f72:	2040      	movs	r0, #64	; 0x40
20000f74:	f7ff fd10 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000f78:	e03e      	b.n	20000ff8 <GPIO_DeInit+0x13c>
20000f7a:	687b      	ldr	r3, [r7, #4]
20000f7c:	4a27      	ldr	r2, [pc, #156]	; (2000101c <GPIO_DeInit+0x160>)
20000f7e:	4293      	cmp	r3, r2
20000f80:	d108      	bne.n	20000f94 <GPIO_DeInit+0xd8>
20000f82:	2101      	movs	r1, #1
20000f84:	2080      	movs	r0, #128	; 0x80
20000f86:	f7ff fd07 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000f8a:	2100      	movs	r1, #0
20000f8c:	2080      	movs	r0, #128	; 0x80
20000f8e:	f7ff fd03 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000f92:	e031      	b.n	20000ff8 <GPIO_DeInit+0x13c>
20000f94:	687b      	ldr	r3, [r7, #4]
20000f96:	4a22      	ldr	r2, [pc, #136]	; (20001020 <GPIO_DeInit+0x164>)
20000f98:	4293      	cmp	r3, r2
20000f9a:	d10c      	bne.n	20000fb6 <GPIO_DeInit+0xfa>
20000f9c:	2380      	movs	r3, #128	; 0x80
20000f9e:	005b      	lsls	r3, r3, #1
20000fa0:	2101      	movs	r1, #1
20000fa2:	0018      	movs	r0, r3
20000fa4:	f7ff fcf8 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000fa8:	2380      	movs	r3, #128	; 0x80
20000faa:	005b      	lsls	r3, r3, #1
20000fac:	2100      	movs	r1, #0
20000fae:	0018      	movs	r0, r3
20000fb0:	f7ff fcf2 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000fb4:	e020      	b.n	20000ff8 <GPIO_DeInit+0x13c>
20000fb6:	687b      	ldr	r3, [r7, #4]
20000fb8:	4a1a      	ldr	r2, [pc, #104]	; (20001024 <GPIO_DeInit+0x168>)
20000fba:	4293      	cmp	r3, r2
20000fbc:	d10c      	bne.n	20000fd8 <GPIO_DeInit+0x11c>
20000fbe:	2380      	movs	r3, #128	; 0x80
20000fc0:	009b      	lsls	r3, r3, #2
20000fc2:	2101      	movs	r1, #1
20000fc4:	0018      	movs	r0, r3
20000fc6:	f7ff fce7 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000fca:	2380      	movs	r3, #128	; 0x80
20000fcc:	009b      	lsls	r3, r3, #2
20000fce:	2100      	movs	r1, #0
20000fd0:	0018      	movs	r0, r3
20000fd2:	f7ff fce1 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000fd6:	e00f      	b.n	20000ff8 <GPIO_DeInit+0x13c>
20000fd8:	687b      	ldr	r3, [r7, #4]
20000fda:	4a13      	ldr	r2, [pc, #76]	; (20001028 <GPIO_DeInit+0x16c>)
20000fdc:	4293      	cmp	r3, r2
20000fde:	d10b      	bne.n	20000ff8 <GPIO_DeInit+0x13c>
20000fe0:	2380      	movs	r3, #128	; 0x80
20000fe2:	00db      	lsls	r3, r3, #3
20000fe4:	2101      	movs	r1, #1
20000fe6:	0018      	movs	r0, r3
20000fe8:	f7ff fcd6 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000fec:	2380      	movs	r3, #128	; 0x80
20000fee:	00db      	lsls	r3, r3, #3
20000ff0:	2100      	movs	r1, #0
20000ff2:	0018      	movs	r0, r3
20000ff4:	f7ff fcd0 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000ff8:	46c0      	nop			; (mov r8, r8)
20000ffa:	46bd      	mov	sp, r7
20000ffc:	b002      	add	sp, #8
20000ffe:	bd80      	pop	{r7, pc}
20001000:	40020000 	andmi	r0, r2, r0
20001004:	40020400 	andmi	r0, r2, r0, lsl #8
20001008:	40020800 	andmi	r0, r2, r0, lsl #16
2000100c:	40020c00 	andmi	r0, r2, r0, lsl #24
20001010:	40021000 	andmi	r1, r2, r0
20001014:	40021400 	andmi	r1, r2, r0, lsl #8
20001018:	40021800 	andmi	r1, r2, r0, lsl #16
2000101c:	40021c00 	andmi	r1, r2, r0, lsl #24
20001020:	40022000 	andmi	r2, r2, r0
20001024:	40022400 	andmi	r2, r2, r0, lsl #8
20001028:	40022800 	andmi	r2, r2, r0, lsl #16

2000102c <GPIO_Init>:
2000102c:	b580      	push	{r7, lr}
2000102e:	b086      	sub	sp, #24
20001030:	af00      	add	r7, sp, #0
20001032:	6078      	str	r0, [r7, #4]
20001034:	6039      	str	r1, [r7, #0]
20001036:	2300      	movs	r3, #0
20001038:	617b      	str	r3, [r7, #20]
2000103a:	2300      	movs	r3, #0
2000103c:	613b      	str	r3, [r7, #16]
2000103e:	2300      	movs	r3, #0
20001040:	60fb      	str	r3, [r7, #12]
20001042:	2300      	movs	r3, #0
20001044:	617b      	str	r3, [r7, #20]
20001046:	e076      	b.n	20001136 <GPIO_Init+0x10a>
20001048:	2201      	movs	r2, #1
2000104a:	697b      	ldr	r3, [r7, #20]
2000104c:	409a      	lsls	r2, r3
2000104e:	0013      	movs	r3, r2
20001050:	613b      	str	r3, [r7, #16]
20001052:	683b      	ldr	r3, [r7, #0]
20001054:	681a      	ldr	r2, [r3, #0]
20001056:	693b      	ldr	r3, [r7, #16]
20001058:	4013      	ands	r3, r2
2000105a:	60fb      	str	r3, [r7, #12]
2000105c:	68fa      	ldr	r2, [r7, #12]
2000105e:	693b      	ldr	r3, [r7, #16]
20001060:	429a      	cmp	r2, r3
20001062:	d165      	bne.n	20001130 <GPIO_Init+0x104>
20001064:	687b      	ldr	r3, [r7, #4]
20001066:	681b      	ldr	r3, [r3, #0]
20001068:	697a      	ldr	r2, [r7, #20]
2000106a:	0052      	lsls	r2, r2, #1
2000106c:	2103      	movs	r1, #3
2000106e:	4091      	lsls	r1, r2
20001070:	000a      	movs	r2, r1
20001072:	43d2      	mvns	r2, r2
20001074:	401a      	ands	r2, r3
20001076:	687b      	ldr	r3, [r7, #4]
20001078:	601a      	str	r2, [r3, #0]
2000107a:	687b      	ldr	r3, [r7, #4]
2000107c:	681a      	ldr	r2, [r3, #0]
2000107e:	683b      	ldr	r3, [r7, #0]
20001080:	791b      	ldrb	r3, [r3, #4]
20001082:	0019      	movs	r1, r3
20001084:	697b      	ldr	r3, [r7, #20]
20001086:	005b      	lsls	r3, r3, #1
20001088:	4099      	lsls	r1, r3
2000108a:	000b      	movs	r3, r1
2000108c:	431a      	orrs	r2, r3
2000108e:	687b      	ldr	r3, [r7, #4]
20001090:	601a      	str	r2, [r3, #0]
20001092:	683b      	ldr	r3, [r7, #0]
20001094:	791b      	ldrb	r3, [r3, #4]
20001096:	2b01      	cmp	r3, #1
20001098:	d003      	beq.n	200010a2 <GPIO_Init+0x76>
2000109a:	683b      	ldr	r3, [r7, #0]
2000109c:	791b      	ldrb	r3, [r3, #4]
2000109e:	2b02      	cmp	r3, #2
200010a0:	d12e      	bne.n	20001100 <GPIO_Init+0xd4>
200010a2:	687b      	ldr	r3, [r7, #4]
200010a4:	689b      	ldr	r3, [r3, #8]
200010a6:	697a      	ldr	r2, [r7, #20]
200010a8:	0052      	lsls	r2, r2, #1
200010aa:	2103      	movs	r1, #3
200010ac:	4091      	lsls	r1, r2
200010ae:	000a      	movs	r2, r1
200010b0:	43d2      	mvns	r2, r2
200010b2:	401a      	ands	r2, r3
200010b4:	687b      	ldr	r3, [r7, #4]
200010b6:	609a      	str	r2, [r3, #8]
200010b8:	687b      	ldr	r3, [r7, #4]
200010ba:	689a      	ldr	r2, [r3, #8]
200010bc:	683b      	ldr	r3, [r7, #0]
200010be:	795b      	ldrb	r3, [r3, #5]
200010c0:	0019      	movs	r1, r3
200010c2:	697b      	ldr	r3, [r7, #20]
200010c4:	005b      	lsls	r3, r3, #1
200010c6:	4099      	lsls	r1, r3
200010c8:	000b      	movs	r3, r1
200010ca:	431a      	orrs	r2, r3
200010cc:	687b      	ldr	r3, [r7, #4]
200010ce:	609a      	str	r2, [r3, #8]
200010d0:	687b      	ldr	r3, [r7, #4]
200010d2:	685b      	ldr	r3, [r3, #4]
200010d4:	697a      	ldr	r2, [r7, #20]
200010d6:	b292      	uxth	r2, r2
200010d8:	0011      	movs	r1, r2
200010da:	2201      	movs	r2, #1
200010dc:	408a      	lsls	r2, r1
200010de:	43d2      	mvns	r2, r2
200010e0:	401a      	ands	r2, r3
200010e2:	687b      	ldr	r3, [r7, #4]
200010e4:	605a      	str	r2, [r3, #4]
200010e6:	687b      	ldr	r3, [r7, #4]
200010e8:	685b      	ldr	r3, [r3, #4]
200010ea:	683a      	ldr	r2, [r7, #0]
200010ec:	7992      	ldrb	r2, [r2, #6]
200010ee:	0011      	movs	r1, r2
200010f0:	697a      	ldr	r2, [r7, #20]
200010f2:	b292      	uxth	r2, r2
200010f4:	4091      	lsls	r1, r2
200010f6:	000a      	movs	r2, r1
200010f8:	b292      	uxth	r2, r2
200010fa:	431a      	orrs	r2, r3
200010fc:	687b      	ldr	r3, [r7, #4]
200010fe:	605a      	str	r2, [r3, #4]
20001100:	687b      	ldr	r3, [r7, #4]
20001102:	68db      	ldr	r3, [r3, #12]
20001104:	697a      	ldr	r2, [r7, #20]
20001106:	b292      	uxth	r2, r2
20001108:	0052      	lsls	r2, r2, #1
2000110a:	2103      	movs	r1, #3
2000110c:	4091      	lsls	r1, r2
2000110e:	000a      	movs	r2, r1
20001110:	43d2      	mvns	r2, r2
20001112:	401a      	ands	r2, r3
20001114:	687b      	ldr	r3, [r7, #4]
20001116:	60da      	str	r2, [r3, #12]
20001118:	687b      	ldr	r3, [r7, #4]
2000111a:	68da      	ldr	r2, [r3, #12]
2000111c:	683b      	ldr	r3, [r7, #0]
2000111e:	79db      	ldrb	r3, [r3, #7]
20001120:	0019      	movs	r1, r3
20001122:	697b      	ldr	r3, [r7, #20]
20001124:	005b      	lsls	r3, r3, #1
20001126:	4099      	lsls	r1, r3
20001128:	000b      	movs	r3, r1
2000112a:	431a      	orrs	r2, r3
2000112c:	687b      	ldr	r3, [r7, #4]
2000112e:	60da      	str	r2, [r3, #12]
20001130:	697b      	ldr	r3, [r7, #20]
20001132:	3301      	adds	r3, #1
20001134:	617b      	str	r3, [r7, #20]
20001136:	697b      	ldr	r3, [r7, #20]
20001138:	2b0f      	cmp	r3, #15
2000113a:	d985      	bls.n	20001048 <GPIO_Init+0x1c>
2000113c:	46c0      	nop			; (mov r8, r8)
2000113e:	46bd      	mov	sp, r7
20001140:	b006      	add	sp, #24
20001142:	bd80      	pop	{r7, pc}

20001144 <GPIO_StructInit>:
20001144:	b580      	push	{r7, lr}
20001146:	b082      	sub	sp, #8
20001148:	af00      	add	r7, sp, #0
2000114a:	6078      	str	r0, [r7, #4]
2000114c:	687b      	ldr	r3, [r7, #4]
2000114e:	4a09      	ldr	r2, [pc, #36]	; (20001174 <GPIO_StructInit+0x30>)
20001150:	601a      	str	r2, [r3, #0]
20001152:	687b      	ldr	r3, [r7, #4]
20001154:	2200      	movs	r2, #0
20001156:	711a      	strb	r2, [r3, #4]
20001158:	687b      	ldr	r3, [r7, #4]
2000115a:	2200      	movs	r2, #0
2000115c:	715a      	strb	r2, [r3, #5]
2000115e:	687b      	ldr	r3, [r7, #4]
20001160:	2200      	movs	r2, #0
20001162:	719a      	strb	r2, [r3, #6]
20001164:	687b      	ldr	r3, [r7, #4]
20001166:	2200      	movs	r2, #0
20001168:	71da      	strb	r2, [r3, #7]
2000116a:	46c0      	nop			; (mov r8, r8)
2000116c:	46bd      	mov	sp, r7
2000116e:	b002      	add	sp, #8
20001170:	bd80      	pop	{r7, pc}
20001172:	46c0      	nop			; (mov r8, r8)
20001174:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001178 <GPIO_PinLockConfig>:
20001178:	b580      	push	{r7, lr}
2000117a:	b084      	sub	sp, #16
2000117c:	af00      	add	r7, sp, #0
2000117e:	6078      	str	r0, [r7, #4]
20001180:	000a      	movs	r2, r1
20001182:	1cbb      	adds	r3, r7, #2
20001184:	801a      	strh	r2, [r3, #0]
20001186:	2380      	movs	r3, #128	; 0x80
20001188:	025b      	lsls	r3, r3, #9
2000118a:	60fb      	str	r3, [r7, #12]
2000118c:	1cbb      	adds	r3, r7, #2
2000118e:	881a      	ldrh	r2, [r3, #0]
20001190:	68fb      	ldr	r3, [r7, #12]
20001192:	4313      	orrs	r3, r2
20001194:	60fb      	str	r3, [r7, #12]
20001196:	68fa      	ldr	r2, [r7, #12]
20001198:	687b      	ldr	r3, [r7, #4]
2000119a:	61da      	str	r2, [r3, #28]
2000119c:	1cbb      	adds	r3, r7, #2
2000119e:	881a      	ldrh	r2, [r3, #0]
200011a0:	687b      	ldr	r3, [r7, #4]
200011a2:	61da      	str	r2, [r3, #28]
200011a4:	68fa      	ldr	r2, [r7, #12]
200011a6:	687b      	ldr	r3, [r7, #4]
200011a8:	61da      	str	r2, [r3, #28]
200011aa:	687b      	ldr	r3, [r7, #4]
200011ac:	69db      	ldr	r3, [r3, #28]
200011ae:	60fb      	str	r3, [r7, #12]
200011b0:	687b      	ldr	r3, [r7, #4]
200011b2:	69db      	ldr	r3, [r3, #28]
200011b4:	60fb      	str	r3, [r7, #12]
200011b6:	46c0      	nop			; (mov r8, r8)
200011b8:	46bd      	mov	sp, r7
200011ba:	b004      	add	sp, #16
200011bc:	bd80      	pop	{r7, pc}

200011be <GPIO_ReadInputDataBit>:
200011be:	b580      	push	{r7, lr}
200011c0:	b084      	sub	sp, #16
200011c2:	af00      	add	r7, sp, #0
200011c4:	6078      	str	r0, [r7, #4]
200011c6:	000a      	movs	r2, r1
200011c8:	1cbb      	adds	r3, r7, #2
200011ca:	801a      	strh	r2, [r3, #0]
200011cc:	230f      	movs	r3, #15
200011ce:	18fb      	adds	r3, r7, r3
200011d0:	2200      	movs	r2, #0
200011d2:	701a      	strb	r2, [r3, #0]
200011d4:	687b      	ldr	r3, [r7, #4]
200011d6:	691b      	ldr	r3, [r3, #16]
200011d8:	1cba      	adds	r2, r7, #2
200011da:	8812      	ldrh	r2, [r2, #0]
200011dc:	4013      	ands	r3, r2
200011de:	d004      	beq.n	200011ea <GPIO_ReadInputDataBit+0x2c>
200011e0:	230f      	movs	r3, #15
200011e2:	18fb      	adds	r3, r7, r3
200011e4:	2201      	movs	r2, #1
200011e6:	701a      	strb	r2, [r3, #0]
200011e8:	e003      	b.n	200011f2 <GPIO_ReadInputDataBit+0x34>
200011ea:	230f      	movs	r3, #15
200011ec:	18fb      	adds	r3, r7, r3
200011ee:	2200      	movs	r2, #0
200011f0:	701a      	strb	r2, [r3, #0]
200011f2:	230f      	movs	r3, #15
200011f4:	18fb      	adds	r3, r7, r3
200011f6:	781b      	ldrb	r3, [r3, #0]
200011f8:	0018      	movs	r0, r3
200011fa:	46bd      	mov	sp, r7
200011fc:	b004      	add	sp, #16
200011fe:	bd80      	pop	{r7, pc}

20001200 <GPIO_ReadInputData>:
20001200:	b580      	push	{r7, lr}
20001202:	b082      	sub	sp, #8
20001204:	af00      	add	r7, sp, #0
20001206:	6078      	str	r0, [r7, #4]
20001208:	687b      	ldr	r3, [r7, #4]
2000120a:	691b      	ldr	r3, [r3, #16]
2000120c:	b29b      	uxth	r3, r3
2000120e:	0018      	movs	r0, r3
20001210:	46bd      	mov	sp, r7
20001212:	b002      	add	sp, #8
20001214:	bd80      	pop	{r7, pc}

20001216 <GPIO_ReadOutputDataBit>:
20001216:	b580      	push	{r7, lr}
20001218:	b084      	sub	sp, #16
2000121a:	af00      	add	r7, sp, #0
2000121c:	6078      	str	r0, [r7, #4]
2000121e:	000a      	movs	r2, r1
20001220:	1cbb      	adds	r3, r7, #2
20001222:	801a      	strh	r2, [r3, #0]
20001224:	230f      	movs	r3, #15
20001226:	18fb      	adds	r3, r7, r3
20001228:	2200      	movs	r2, #0
2000122a:	701a      	strb	r2, [r3, #0]
2000122c:	687b      	ldr	r3, [r7, #4]
2000122e:	695b      	ldr	r3, [r3, #20]
20001230:	1cba      	adds	r2, r7, #2
20001232:	8812      	ldrh	r2, [r2, #0]
20001234:	4013      	ands	r3, r2
20001236:	d004      	beq.n	20001242 <GPIO_ReadOutputDataBit+0x2c>
20001238:	230f      	movs	r3, #15
2000123a:	18fb      	adds	r3, r7, r3
2000123c:	2201      	movs	r2, #1
2000123e:	701a      	strb	r2, [r3, #0]
20001240:	e003      	b.n	2000124a <GPIO_ReadOutputDataBit+0x34>
20001242:	230f      	movs	r3, #15
20001244:	18fb      	adds	r3, r7, r3
20001246:	2200      	movs	r2, #0
20001248:	701a      	strb	r2, [r3, #0]
2000124a:	230f      	movs	r3, #15
2000124c:	18fb      	adds	r3, r7, r3
2000124e:	781b      	ldrb	r3, [r3, #0]
20001250:	0018      	movs	r0, r3
20001252:	46bd      	mov	sp, r7
20001254:	b004      	add	sp, #16
20001256:	bd80      	pop	{r7, pc}

20001258 <GPIO_ReadOutputData>:
20001258:	b580      	push	{r7, lr}
2000125a:	b082      	sub	sp, #8
2000125c:	af00      	add	r7, sp, #0
2000125e:	6078      	str	r0, [r7, #4]
20001260:	687b      	ldr	r3, [r7, #4]
20001262:	695b      	ldr	r3, [r3, #20]
20001264:	b29b      	uxth	r3, r3
20001266:	0018      	movs	r0, r3
20001268:	46bd      	mov	sp, r7
2000126a:	b002      	add	sp, #8
2000126c:	bd80      	pop	{r7, pc}

2000126e <GPIO_SetBits>:
2000126e:	b580      	push	{r7, lr}
20001270:	b082      	sub	sp, #8
20001272:	af00      	add	r7, sp, #0
20001274:	6078      	str	r0, [r7, #4]
20001276:	000a      	movs	r2, r1
20001278:	1cbb      	adds	r3, r7, #2
2000127a:	801a      	strh	r2, [r3, #0]
2000127c:	687b      	ldr	r3, [r7, #4]
2000127e:	1cba      	adds	r2, r7, #2
20001280:	8812      	ldrh	r2, [r2, #0]
20001282:	831a      	strh	r2, [r3, #24]
20001284:	46c0      	nop			; (mov r8, r8)
20001286:	46bd      	mov	sp, r7
20001288:	b002      	add	sp, #8
2000128a:	bd80      	pop	{r7, pc}

2000128c <GPIO_ResetBits>:
2000128c:	b580      	push	{r7, lr}
2000128e:	b082      	sub	sp, #8
20001290:	af00      	add	r7, sp, #0
20001292:	6078      	str	r0, [r7, #4]
20001294:	000a      	movs	r2, r1
20001296:	1cbb      	adds	r3, r7, #2
20001298:	801a      	strh	r2, [r3, #0]
2000129a:	687b      	ldr	r3, [r7, #4]
2000129c:	1cba      	adds	r2, r7, #2
2000129e:	8812      	ldrh	r2, [r2, #0]
200012a0:	835a      	strh	r2, [r3, #26]
200012a2:	46c0      	nop			; (mov r8, r8)
200012a4:	46bd      	mov	sp, r7
200012a6:	b002      	add	sp, #8
200012a8:	bd80      	pop	{r7, pc}

200012aa <GPIO_WriteBit>:
200012aa:	b580      	push	{r7, lr}
200012ac:	b082      	sub	sp, #8
200012ae:	af00      	add	r7, sp, #0
200012b0:	6078      	str	r0, [r7, #4]
200012b2:	0008      	movs	r0, r1
200012b4:	0011      	movs	r1, r2
200012b6:	1cbb      	adds	r3, r7, #2
200012b8:	1c02      	adds	r2, r0, #0
200012ba:	801a      	strh	r2, [r3, #0]
200012bc:	1c7b      	adds	r3, r7, #1
200012be:	1c0a      	adds	r2, r1, #0
200012c0:	701a      	strb	r2, [r3, #0]
200012c2:	1c7b      	adds	r3, r7, #1
200012c4:	781b      	ldrb	r3, [r3, #0]
200012c6:	2b00      	cmp	r3, #0
200012c8:	d004      	beq.n	200012d4 <GPIO_WriteBit+0x2a>
200012ca:	687b      	ldr	r3, [r7, #4]
200012cc:	1cba      	adds	r2, r7, #2
200012ce:	8812      	ldrh	r2, [r2, #0]
200012d0:	831a      	strh	r2, [r3, #24]
200012d2:	e003      	b.n	200012dc <GPIO_WriteBit+0x32>
200012d4:	687b      	ldr	r3, [r7, #4]
200012d6:	1cba      	adds	r2, r7, #2
200012d8:	8812      	ldrh	r2, [r2, #0]
200012da:	835a      	strh	r2, [r3, #26]
200012dc:	46c0      	nop			; (mov r8, r8)
200012de:	46bd      	mov	sp, r7
200012e0:	b002      	add	sp, #8
200012e2:	bd80      	pop	{r7, pc}

200012e4 <GPIO_Write>:
200012e4:	b580      	push	{r7, lr}
200012e6:	b082      	sub	sp, #8
200012e8:	af00      	add	r7, sp, #0
200012ea:	6078      	str	r0, [r7, #4]
200012ec:	000a      	movs	r2, r1
200012ee:	1cbb      	adds	r3, r7, #2
200012f0:	801a      	strh	r2, [r3, #0]
200012f2:	1cbb      	adds	r3, r7, #2
200012f4:	881a      	ldrh	r2, [r3, #0]
200012f6:	687b      	ldr	r3, [r7, #4]
200012f8:	615a      	str	r2, [r3, #20]
200012fa:	46c0      	nop			; (mov r8, r8)
200012fc:	46bd      	mov	sp, r7
200012fe:	b002      	add	sp, #8
20001300:	bd80      	pop	{r7, pc}

20001302 <GPIO_ToggleBits>:
20001302:	b580      	push	{r7, lr}
20001304:	b082      	sub	sp, #8
20001306:	af00      	add	r7, sp, #0
20001308:	6078      	str	r0, [r7, #4]
2000130a:	000a      	movs	r2, r1
2000130c:	1cbb      	adds	r3, r7, #2
2000130e:	801a      	strh	r2, [r3, #0]
20001310:	687b      	ldr	r3, [r7, #4]
20001312:	695a      	ldr	r2, [r3, #20]
20001314:	1cbb      	adds	r3, r7, #2
20001316:	881b      	ldrh	r3, [r3, #0]
20001318:	405a      	eors	r2, r3
2000131a:	687b      	ldr	r3, [r7, #4]
2000131c:	615a      	str	r2, [r3, #20]
2000131e:	46c0      	nop			; (mov r8, r8)
20001320:	46bd      	mov	sp, r7
20001322:	b002      	add	sp, #8
20001324:	bd80      	pop	{r7, pc}

20001326 <GPIO_PinAFConfig>:
20001326:	b580      	push	{r7, lr}
20001328:	b084      	sub	sp, #16
2000132a:	af00      	add	r7, sp, #0
2000132c:	6078      	str	r0, [r7, #4]
2000132e:	0008      	movs	r0, r1
20001330:	0011      	movs	r1, r2
20001332:	1cbb      	adds	r3, r7, #2
20001334:	1c02      	adds	r2, r0, #0
20001336:	801a      	strh	r2, [r3, #0]
20001338:	1c7b      	adds	r3, r7, #1
2000133a:	1c0a      	adds	r2, r1, #0
2000133c:	701a      	strb	r2, [r3, #0]
2000133e:	2300      	movs	r3, #0
20001340:	60fb      	str	r3, [r7, #12]
20001342:	2300      	movs	r3, #0
20001344:	60bb      	str	r3, [r7, #8]
20001346:	1c7b      	adds	r3, r7, #1
20001348:	781a      	ldrb	r2, [r3, #0]
2000134a:	1cbb      	adds	r3, r7, #2
2000134c:	881b      	ldrh	r3, [r3, #0]
2000134e:	2107      	movs	r1, #7
20001350:	400b      	ands	r3, r1
20001352:	009b      	lsls	r3, r3, #2
20001354:	409a      	lsls	r2, r3
20001356:	0013      	movs	r3, r2
20001358:	60fb      	str	r3, [r7, #12]
2000135a:	1cbb      	adds	r3, r7, #2
2000135c:	881b      	ldrh	r3, [r3, #0]
2000135e:	08db      	lsrs	r3, r3, #3
20001360:	b29b      	uxth	r3, r3
20001362:	001a      	movs	r2, r3
20001364:	687b      	ldr	r3, [r7, #4]
20001366:	3208      	adds	r2, #8
20001368:	0092      	lsls	r2, r2, #2
2000136a:	58d3      	ldr	r3, [r2, r3]
2000136c:	1cba      	adds	r2, r7, #2
2000136e:	8812      	ldrh	r2, [r2, #0]
20001370:	2107      	movs	r1, #7
20001372:	400a      	ands	r2, r1
20001374:	0092      	lsls	r2, r2, #2
20001376:	210f      	movs	r1, #15
20001378:	4091      	lsls	r1, r2
2000137a:	000a      	movs	r2, r1
2000137c:	43d2      	mvns	r2, r2
2000137e:	1cb9      	adds	r1, r7, #2
20001380:	8809      	ldrh	r1, [r1, #0]
20001382:	08c9      	lsrs	r1, r1, #3
20001384:	b289      	uxth	r1, r1
20001386:	0008      	movs	r0, r1
20001388:	401a      	ands	r2, r3
2000138a:	0011      	movs	r1, r2
2000138c:	687b      	ldr	r3, [r7, #4]
2000138e:	0002      	movs	r2, r0
20001390:	3208      	adds	r2, #8
20001392:	0092      	lsls	r2, r2, #2
20001394:	50d1      	str	r1, [r2, r3]
20001396:	1cbb      	adds	r3, r7, #2
20001398:	881b      	ldrh	r3, [r3, #0]
2000139a:	08db      	lsrs	r3, r3, #3
2000139c:	b29b      	uxth	r3, r3
2000139e:	001a      	movs	r2, r3
200013a0:	687b      	ldr	r3, [r7, #4]
200013a2:	3208      	adds	r2, #8
200013a4:	0092      	lsls	r2, r2, #2
200013a6:	58d3      	ldr	r3, [r2, r3]
200013a8:	68fa      	ldr	r2, [r7, #12]
200013aa:	4313      	orrs	r3, r2
200013ac:	60bb      	str	r3, [r7, #8]
200013ae:	1cbb      	adds	r3, r7, #2
200013b0:	881b      	ldrh	r3, [r3, #0]
200013b2:	08db      	lsrs	r3, r3, #3
200013b4:	b29b      	uxth	r3, r3
200013b6:	001a      	movs	r2, r3
200013b8:	687b      	ldr	r3, [r7, #4]
200013ba:	3208      	adds	r2, #8
200013bc:	0092      	lsls	r2, r2, #2
200013be:	68b9      	ldr	r1, [r7, #8]
200013c0:	50d1      	str	r1, [r2, r3]
200013c2:	46c0      	nop			; (mov r8, r8)
200013c4:	46bd      	mov	sp, r7
200013c6:	b004      	add	sp, #16
200013c8:	bd80      	pop	{r7, pc}
200013ca:	46c0      	nop			; (mov r8, r8)

200013cc <__udivsi3>:
200013cc:	2200      	movs	r2, #0
200013ce:	0843      	lsrs	r3, r0, #1
200013d0:	428b      	cmp	r3, r1
200013d2:	d374      	bcc.n	200014be <__udivsi3+0xf2>
200013d4:	0903      	lsrs	r3, r0, #4
200013d6:	428b      	cmp	r3, r1
200013d8:	d35f      	bcc.n	2000149a <__udivsi3+0xce>
200013da:	0a03      	lsrs	r3, r0, #8
200013dc:	428b      	cmp	r3, r1
200013de:	d344      	bcc.n	2000146a <__udivsi3+0x9e>
200013e0:	0b03      	lsrs	r3, r0, #12
200013e2:	428b      	cmp	r3, r1
200013e4:	d328      	bcc.n	20001438 <__udivsi3+0x6c>
200013e6:	0c03      	lsrs	r3, r0, #16
200013e8:	428b      	cmp	r3, r1
200013ea:	d30d      	bcc.n	20001408 <__udivsi3+0x3c>
200013ec:	22ff      	movs	r2, #255	; 0xff
200013ee:	0209      	lsls	r1, r1, #8
200013f0:	ba12      	rev	r2, r2
200013f2:	0c03      	lsrs	r3, r0, #16
200013f4:	428b      	cmp	r3, r1
200013f6:	d302      	bcc.n	200013fe <__udivsi3+0x32>
200013f8:	1212      	asrs	r2, r2, #8
200013fa:	0209      	lsls	r1, r1, #8
200013fc:	d065      	beq.n	200014ca <__udivsi3+0xfe>
200013fe:	0b03      	lsrs	r3, r0, #12
20001400:	428b      	cmp	r3, r1
20001402:	d319      	bcc.n	20001438 <__udivsi3+0x6c>
20001404:	e000      	b.n	20001408 <__udivsi3+0x3c>
20001406:	0a09      	lsrs	r1, r1, #8
20001408:	0bc3      	lsrs	r3, r0, #15
2000140a:	428b      	cmp	r3, r1
2000140c:	d301      	bcc.n	20001412 <__udivsi3+0x46>
2000140e:	03cb      	lsls	r3, r1, #15
20001410:	1ac0      	subs	r0, r0, r3
20001412:	4152      	adcs	r2, r2
20001414:	0b83      	lsrs	r3, r0, #14
20001416:	428b      	cmp	r3, r1
20001418:	d301      	bcc.n	2000141e <__udivsi3+0x52>
2000141a:	038b      	lsls	r3, r1, #14
2000141c:	1ac0      	subs	r0, r0, r3
2000141e:	4152      	adcs	r2, r2
20001420:	0b43      	lsrs	r3, r0, #13
20001422:	428b      	cmp	r3, r1
20001424:	d301      	bcc.n	2000142a <__udivsi3+0x5e>
20001426:	034b      	lsls	r3, r1, #13
20001428:	1ac0      	subs	r0, r0, r3
2000142a:	4152      	adcs	r2, r2
2000142c:	0b03      	lsrs	r3, r0, #12
2000142e:	428b      	cmp	r3, r1
20001430:	d301      	bcc.n	20001436 <__udivsi3+0x6a>
20001432:	030b      	lsls	r3, r1, #12
20001434:	1ac0      	subs	r0, r0, r3
20001436:	4152      	adcs	r2, r2
20001438:	0ac3      	lsrs	r3, r0, #11
2000143a:	428b      	cmp	r3, r1
2000143c:	d301      	bcc.n	20001442 <__udivsi3+0x76>
2000143e:	02cb      	lsls	r3, r1, #11
20001440:	1ac0      	subs	r0, r0, r3
20001442:	4152      	adcs	r2, r2
20001444:	0a83      	lsrs	r3, r0, #10
20001446:	428b      	cmp	r3, r1
20001448:	d301      	bcc.n	2000144e <__udivsi3+0x82>
2000144a:	028b      	lsls	r3, r1, #10
2000144c:	1ac0      	subs	r0, r0, r3
2000144e:	4152      	adcs	r2, r2
20001450:	0a43      	lsrs	r3, r0, #9
20001452:	428b      	cmp	r3, r1
20001454:	d301      	bcc.n	2000145a <__udivsi3+0x8e>
20001456:	024b      	lsls	r3, r1, #9
20001458:	1ac0      	subs	r0, r0, r3
2000145a:	4152      	adcs	r2, r2
2000145c:	0a03      	lsrs	r3, r0, #8
2000145e:	428b      	cmp	r3, r1
20001460:	d301      	bcc.n	20001466 <__udivsi3+0x9a>
20001462:	020b      	lsls	r3, r1, #8
20001464:	1ac0      	subs	r0, r0, r3
20001466:	4152      	adcs	r2, r2
20001468:	d2cd      	bcs.n	20001406 <__udivsi3+0x3a>
2000146a:	09c3      	lsrs	r3, r0, #7
2000146c:	428b      	cmp	r3, r1
2000146e:	d301      	bcc.n	20001474 <__udivsi3+0xa8>
20001470:	01cb      	lsls	r3, r1, #7
20001472:	1ac0      	subs	r0, r0, r3
20001474:	4152      	adcs	r2, r2
20001476:	0983      	lsrs	r3, r0, #6
20001478:	428b      	cmp	r3, r1
2000147a:	d301      	bcc.n	20001480 <__udivsi3+0xb4>
2000147c:	018b      	lsls	r3, r1, #6
2000147e:	1ac0      	subs	r0, r0, r3
20001480:	4152      	adcs	r2, r2
20001482:	0943      	lsrs	r3, r0, #5
20001484:	428b      	cmp	r3, r1
20001486:	d301      	bcc.n	2000148c <__udivsi3+0xc0>
20001488:	014b      	lsls	r3, r1, #5
2000148a:	1ac0      	subs	r0, r0, r3
2000148c:	4152      	adcs	r2, r2
2000148e:	0903      	lsrs	r3, r0, #4
20001490:	428b      	cmp	r3, r1
20001492:	d301      	bcc.n	20001498 <__udivsi3+0xcc>
20001494:	010b      	lsls	r3, r1, #4
20001496:	1ac0      	subs	r0, r0, r3
20001498:	4152      	adcs	r2, r2
2000149a:	08c3      	lsrs	r3, r0, #3
2000149c:	428b      	cmp	r3, r1
2000149e:	d301      	bcc.n	200014a4 <__udivsi3+0xd8>
200014a0:	00cb      	lsls	r3, r1, #3
200014a2:	1ac0      	subs	r0, r0, r3
200014a4:	4152      	adcs	r2, r2
200014a6:	0883      	lsrs	r3, r0, #2
200014a8:	428b      	cmp	r3, r1
200014aa:	d301      	bcc.n	200014b0 <__udivsi3+0xe4>
200014ac:	008b      	lsls	r3, r1, #2
200014ae:	1ac0      	subs	r0, r0, r3
200014b0:	4152      	adcs	r2, r2
200014b2:	0843      	lsrs	r3, r0, #1
200014b4:	428b      	cmp	r3, r1
200014b6:	d301      	bcc.n	200014bc <__udivsi3+0xf0>
200014b8:	004b      	lsls	r3, r1, #1
200014ba:	1ac0      	subs	r0, r0, r3
200014bc:	4152      	adcs	r2, r2
200014be:	1a41      	subs	r1, r0, r1
200014c0:	d200      	bcs.n	200014c4 <__udivsi3+0xf8>
200014c2:	4601      	mov	r1, r0
200014c4:	4152      	adcs	r2, r2
200014c6:	4610      	mov	r0, r2
200014c8:	4770      	bx	lr
200014ca:	e7ff      	b.n	200014cc <__udivsi3+0x100>
200014cc:	b501      	push	{r0, lr}
200014ce:	2000      	movs	r0, #0
200014d0:	f000 f806 	bl	200014e0 <__aeabi_idiv0>
200014d4:	bd02      	pop	{r1, pc}
200014d6:	46c0      	nop			; (mov r8, r8)

200014d8 <__aeabi_uidivmod>:
200014d8:	2900      	cmp	r1, #0
200014da:	d0f7      	beq.n	200014cc <__udivsi3+0x100>
200014dc:	e776      	b.n	200013cc <__udivsi3>
200014de:	4770      	bx	lr

200014e0 <__aeabi_idiv0>:
200014e0:	4770      	bx	lr
200014e2:	46c0      	nop			; (mov r8, r8)

200014e4 <msTicks>:
200014e4:	00000000 	andeq	r0, r0, r0

200014e8 <APBAHBPrescTable>:
200014e8:	00000000 	andeq	r0, r0, r0
200014ec:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
200014f0:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
200014f4:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

200014f8 <GPIO_Pins>:
200014f8:	00020001 	andeq	r0, r2, r1
200014fc:	00080004 	andeq	r0, r8, r4
20001500:	00200010 	eoreq	r0, r0, r0, lsl r0
20001504:	00800040 	addeq	r0, r0, r0, asr #32
20001508:	02000100 	andeq	r0, r0, #0, 2
2000150c:	08000400 	stmdaeq	r0, {sl}
20001510:	20001000 	andcs	r1, r0, r0
20001514:	80004000 	andhi	r4, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001672 	andeq	r1, r0, r2, ror r6
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
      10:	000d3c0c 	andeq	r3, sp, ip, lsl #24
      14:	00052200 	andeq	r2, r5, r0, lsl #4
	...
      24:	0f400200 	svceq	0x00400200
      28:	01050000 	mrseq	r0, (UNDEF: 5)
      2c:	00000253 	andeq	r0, r0, r3, asr r2
      30:	0253c804 	subseq	ip, r3, #4, 16	; 0x40000
      34:	8a030000 	bhi	c003c <startup-0x1ff3ffc4>
      38:	72000007 	andvc	r0, r0, #7
      3c:	00080503 	andeq	r0, r8, r3, lsl #10
      40:	ca037400 	bgt	dd048 <startup-0x1ff22fb8>
      44:	75000008 	strvc	r0, [r0, #-8]
      48:	00046b03 	andeq	r6, r4, r3, lsl #22
      4c:	a7037600 	strge	r7, [r3, -r0, lsl #12]
      50:	7b000009 	blvc	7c <startup-0x1fffff84>
      54:	000e2603 	andeq	r2, lr, r3, lsl #12
      58:	78037c00 	stmdavc	r3, {sl, fp, ip, sp, lr}
      5c:	7e000010 	mcrvc	0, 0, r0, cr0, cr0, {0}
      60:	00031703 	andeq	r1, r3, r3, lsl #14
      64:	9e047f00 	cdpls	15, 0, cr7, cr4, cr0, {0}
      68:	00000007 	andeq	r0, r0, r7
      6c:	00068604 	andeq	r8, r6, r4, lsl #12
      70:	2b040100 	blcs	100478 <startup-0x1feffb88>
      74:	02000008 	andeq	r0, r0, #8
      78:	00000e04 	andeq	r0, r0, r4, lsl #28
      7c:	bb040300 	bllt	100c84 <startup-0x1feff37c>
      80:	04000000 	streq	r0, [r0], #-0
      84:	000eb404 	andeq	fp, lr, r4, lsl #8
      88:	b1040500 	tstlt	r4, r0, lsl #10
      8c:	0600000d 	streq	r0, [r0], -sp
      90:	00071304 	andeq	r1, r7, r4, lsl #6
      94:	1c040700 	stcne	7, cr0, [r4], {-0}
      98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      9c:	00106d04 	andseq	r6, r0, r4, lsl #26
      a0:	93040900 	movwls	r0, #18688	; 0x4900
      a4:	0a00000a 	beq	d4 <startup-0x1fffff2c>
      a8:	000bfa04 	andeq	pc, fp, r4, lsl #20
      ac:	42040b00 	andmi	r0, r4, #0, 22
      b0:	0c00000b 	stceq	0, cr0, [r0], {11}
      b4:	00038804 	andeq	r8, r3, r4, lsl #16
      b8:	d2040d00 	andle	r0, r4, #0, 26
      bc:	0e00000e 	cdpeq	0, 0, cr0, cr0, cr14, {0}
      c0:	000de304 	andeq	lr, sp, r4, lsl #6
      c4:	2b040f00 	blcs	103ccc <startup-0x1fefc334>
      c8:	10000007 	andne	r0, r0, r7
      cc:	00002704 	andeq	r2, r0, r4, lsl #14
      d0:	f2041100 	vrhadd.s8	d1, d4, d0
      d4:	1200000c 	andne	r0, r0, #12
      d8:	00071e04 	andeq	r1, r7, r4, lsl #28
      dc:	14041300 	strne	r1, [r4], #-768	; 0xfffffd00
      e0:	14000005 	strne	r0, [r0], #-5
      e4:	000fbd04 	andeq	fp, pc, r4, lsl #26
      e8:	3b041500 	blcc	1054f0 <startup-0x1fefab10>
      ec:	16000008 	strne	r0, [r0], -r8
      f0:	000fe704 	andeq	lr, pc, r4, lsl #14
      f4:	f1041700 			; <UNDEFINED> instruction: 0xf1041700
      f8:	18000008 	stmdane	r0, {r3}
      fc:	000f3204 	andeq	r3, pc, r4, lsl #4
     100:	8b041900 	blhi	106508 <startup-0x1fef9af8>
     104:	1a000002 	bne	114 <startup-0x1ffffeec>
     108:	0006f804 	andeq	pc, r6, r4, lsl #16
     10c:	3c041b00 			; <UNDEFINED> instruction: 0x3c041b00
     110:	1c000001 	stcne	0, cr0, [r0], {1}
     114:	000ca604 	andeq	sl, ip, r4, lsl #12
     118:	ae041d00 	cdpge	13, 0, cr1, cr4, cr0, {0}
     11c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
     120:	00069c04 	andeq	r9, r6, r4, lsl #24
     124:	24041f00 	strcs	r1, [r4], #-3840	; 0xfffff100
     128:	20000004 	andcs	r0, r0, r4
     12c:	000ac504 	andeq	ip, sl, r4, lsl #10
     130:	9d042100 	stflss	f2, [r4, #-0]
     134:	22000008 	andcs	r0, r0, #8
     138:	00099504 	andeq	r9, r9, r4, lsl #10
     13c:	c3042300 	movwgt	r2, #17152	; 0x4300
     140:	24000001 	strcs	r0, [r0], #-1
     144:	000cb004 	andeq	fp, ip, r4
     148:	e4042500 	str	r2, [r4], #-1280	; 0xfffffb00
     14c:	2600000e 	strcs	r0, [r0], -lr
     150:	00033304 	andeq	r3, r3, r4, lsl #6
     154:	74042700 	strvc	r2, [r4], #-1792	; 0xfffff900
     158:	2800000c 	stmdacs	r0, {r2, r3}
     15c:	000c2c04 	andeq	r2, ip, r4, lsl #24
     160:	69042900 	stmdbvs	r4, {r8, fp, sp}
     164:	2a00000a 	bcs	194 <startup-0x1ffffe6c>
     168:	0001cd04 	andeq	ip, r1, r4, lsl #26
     16c:	39042b00 	stmdbcc	r4, {r8, r9, fp, sp}
     170:	2c000000 	stccs	0, cr0, [r0], {-0}
     174:	00075404 	andeq	r5, r7, r4, lsl #8
     178:	3a042d00 	bcc	10b580 <startup-0x1fef4a80>
     17c:	2e000010 	mcrcs	0, 0, r0, cr0, cr0, {0}
     180:	00109704 	andseq	r9, r0, r4, lsl #14
     184:	a2042f00 	andge	r2, r4, #0, 30
     188:	3000000d 	andcc	r0, r0, sp
     18c:	00104704 	andseq	r4, r0, r4, lsl #14
     190:	61043100 	mrsvs	r3, (UNDEF: 20)
     194:	32000004 	andcc	r0, r0, #4
     198:	0000b104 	andeq	fp, r0, r4, lsl #2
     19c:	34043300 	strcc	r3, [r4], #-768	; 0xfffffd00
     1a0:	3400000a 	strcc	r0, [r0], #-10
     1a4:	0008e604 	andeq	lr, r8, r4, lsl #12
     1a8:	a3043500 	movwge	r3, #17664	; 0x4500
     1ac:	3600000a 	strcc	r0, [r0], -sl
     1b0:	00095704 	andeq	r5, r9, r4, lsl #14
     1b4:	60043700 	andvs	r3, r4, r0, lsl #14
     1b8:	38000008 	stmdacc	r0, {r3}
     1bc:	00007a04 	andeq	r7, r0, r4, lsl #20
     1c0:	10043900 	andne	r3, r4, r0, lsl #18
     1c4:	3a000011 	bcc	210 <startup-0x1ffffdf0>
     1c8:	000b5404 	andeq	r5, fp, r4, lsl #8
     1cc:	e1043b00 	tst	r4, r0, lsl #22
     1d0:	3c000003 	stccc	0, cr0, [r0], {3}
     1d4:	000e7804 	andeq	r7, lr, r4, lsl #16
     1d8:	6f043d00 	svcvs	0x00043d00
     1dc:	3e000009 	cdpcc	0, 0, cr0, cr0, cr9, {0}
     1e0:	000b6f04 	andeq	r6, fp, r4, lsl #30
     1e4:	88043f00 	stmdahi	r4, {r8, r9, sl, fp, ip, sp}
     1e8:	40000001 	andmi	r0, r0, r1
     1ec:	000ce404 	andeq	lr, ip, r4, lsl #8
     1f0:	31044100 	mrscc	r4, (UNDEF: 20)
     1f4:	42000004 	andmi	r0, r0, #4
     1f8:	00077e04 	andeq	r7, r7, r4, lsl #28
     1fc:	55044300 	strpl	r4, [r4, #-768]	; 0xfffffd00
     200:	44000002 	strmi	r0, [r0], #-2
     204:	000df504 	andeq	pc, sp, r4, lsl #10
     208:	6c044500 	cfstr32vs	mvfx4, [r4], {-0}
     20c:	46000007 	strmi	r0, [r0], -r7
     210:	00019604 	andeq	r9, r1, r4, lsl #12
     214:	58044700 	stmdapl	r4, {r8, r9, sl, lr}
     218:	4800000e 	stmdami	r0, {r1, r2, r3}
     21c:	000c5d04 	andeq	r5, ip, r4, lsl #26
     220:	84044900 	strhi	r4, [r4], #-2304	; 0xfffff700
     224:	4a00000f 	bmi	268 <startup-0x1ffffd98>
     228:	00108404 	andseq	r8, r0, r4, lsl #8
     22c:	a8044b00 	stmdage	r4, {r8, r9, fp, lr}
     230:	4c000007 	stcmi	0, cr0, [r0], {7}
     234:	00097d04 	andeq	r7, r9, r4, lsl #26
     238:	c6044d00 	strgt	r4, [r4], -r0, lsl #26
     23c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     240:	000c6a04 	andeq	r6, ip, r4, lsl #20
     244:	05044f00 	streq	r4, [r4, #-3840]	; 0xfffff100
     248:	50000007 	andpl	r0, r0, r7
     24c:	000a0d04 	andeq	r0, sl, r4, lsl #26
     250:	05005100 	streq	r5, [r0, #-256]	; 0xffffff00
     254:	03d50601 	bicseq	r0, r5, #1048576	; 0x100000
     258:	49060000 	stmdbmi	r6, {}	; <UNPREDICTABLE>
     25c:	04000008 	streq	r0, [r0], #-8
     260:	0025032f 	eoreq	r0, r5, pc, lsr #6
     264:	b9070000 	stmdblt	r7, {}	; <UNPREDICTABLE>
     268:	05000001 	streq	r0, [r0, #-1]
     26c:	0002712b 	andeq	r7, r2, fp, lsr #2
     270:	08010500 	stmdaeq	r1, {r8, sl}
     274:	000003d3 	ldrdeq	r0, [r0], -r3
     278:	aa050205 	bge	140a94 <startup-0x1febf56c>
     27c:	0700000e 	streq	r0, [r0, -lr]
     280:	000004e2 	andeq	r0, r0, r2, ror #9
     284:	028a3905 	addeq	r3, sl, #81920	; 0x14000
     288:	02050000 	andeq	r0, r5, #0
     28c:	00101607 	andseq	r1, r0, r7, lsl #12
     290:	10a90700 	adcne	r0, r9, r0, lsl #14
     294:	4d050000 	stcmi	0, cr0, [r5, #-0]
     298:	0000029c 	muleq	r0, ip, r2
     29c:	66050405 	strvs	r0, [r5], -r5, lsl #8
     2a0:	07000009 	streq	r0, [r0, -r9]
     2a4:	0000090f 	andeq	r0, r0, pc, lsl #18
     2a8:	02ae4f05 	adceq	r4, lr, #5, 30
     2ac:	04050000 	streq	r0, [r5], #-0
     2b0:	000c8807 	andeq	r8, ip, r7, lsl #16
     2b4:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
     2b8:	00000961 	andeq	r0, r0, r1, ror #18
     2bc:	83070805 	movwhi	r0, #30725	; 0x7805
     2c0:	0800000c 	stmdaeq	r0, {r2, r3}
     2c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     2c8:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     2cc:	000c8d07 	andeq	r8, ip, r7, lsl #26
     2d0:	01bb0700 			; <UNDEFINED> instruction: 0x01bb0700
     2d4:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
     2d8:	00000266 	andeq	r0, r0, r6, ror #4
     2dc:	0002d109 	andeq	sp, r2, r9, lsl #2
     2e0:	02d10a00 	sbcseq	r0, r1, #0, 20
     2e4:	e1090000 	mrs	r0, (UNDEF: 9)
     2e8:	07000002 	streq	r0, [r0, -r2]
     2ec:	000004e4 	andeq	r0, r0, r4, ror #9
     2f0:	027f2406 	rsbseq	r2, pc, #100663296	; 0x6000000
     2f4:	eb090000 	bl	2402fc <startup-0x1fdbfd04>
     2f8:	07000002 	streq	r0, [r0, -r2]
     2fc:	000010ab 	andeq	r1, r0, fp, lsr #1
     300:	02912c06 	addseq	r2, r1, #1536	; 0x600
     304:	fb090000 	blx	24030e <startup-0x1fdbfcf2>
     308:	07000002 	streq	r0, [r0, -r2]
     30c:	00000911 	andeq	r0, r0, r1, lsl r9
     310:	02a33006 	adceq	r3, r3, #6
     314:	0b090000 	bleq	24031c <startup-0x1fdbfce4>
     318:	0a000003 	beq	32c <startup-0x1ffffcd4>
     31c:	00000316 	andeq	r0, r0, r6, lsl r3
     320:	010e040b 	tsteq	lr, fp, lsl #8
     324:	03dc01a0 	bicseq	r0, ip, #160, 2	; 0x28
     328:	c70c0000 	strgt	r0, [ip, -r0]
     32c:	01000010 	tsteq	r0, r0, lsl r0
     330:	03ec01a2 	mvneq	r0, #-2147483608	; 0x80000028
     334:	0c000000 	stceq	0, cr0, [r0], {-0}
     338:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
     33c:	f101a301 			; <UNDEFINED> instruction: 0xf101a301
     340:	20000003 	andcs	r0, r0, r3
     344:	000d0d0c 	andeq	r0, sp, ip, lsl #26
     348:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
     34c:	000003ec 	andeq	r0, r0, ip, ror #7
     350:	00050c80 	andeq	r0, r5, r0, lsl #25
     354:	a5010000 	strge	r0, [r1, #-0]
     358:	0003f101 	andeq	pc, r3, r1, lsl #2
     35c:	570da000 	strpl	sl, [sp, -r0]
     360:	01000010 	tsteq	r0, r0, lsl r0
     364:	03ec01a6 	mvneq	r0, #-2147483607	; 0x80000029
     368:	01000000 	mrseq	r0, (UNDEF: 0)
     36c:	00044d0d 	andeq	r4, r4, sp, lsl #26
     370:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     374:	000003f1 	strdeq	r0, [r0], -r1
     378:	570d0120 	strpl	r0, [sp, -r0, lsr #2]
     37c:	01000001 	tsteq	r0, r1
     380:	03ec01a8 	mvneq	r0, #168, 2	; 0x2a
     384:	01800000 	orreq	r0, r0, r0
     388:	0004570d 	andeq	r5, r4, sp, lsl #14
     38c:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
     390:	000003f1 	strdeq	r0, [r0], -r1
     394:	110d01a0 	smlatbne	sp, r0, r1, r0
     398:	01000004 	tsteq	r0, r4
     39c:	03ec01aa 	mvneq	r0, #-2147483606	; 0x8000002a
     3a0:	02000000 	andeq	r0, r0, #0
     3a4:	0003f30d 	andeq	pc, r3, sp, lsl #6
     3a8:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
     3ac:	00000401 	andeq	r0, r0, r1, lsl #8
     3b0:	490e0220 	stmdbmi	lr, {r5, r9}
     3b4:	ac010050 	stcge	0, cr0, [r1], {80}	; 0x50
     3b8:	00042101 	andeq	r2, r4, r1, lsl #2
     3bc:	0d030000 	stceq	0, cr0, [r3, #-0]
     3c0:	000003fd 	strdeq	r0, [r0], -sp
     3c4:	2601ad01 	strcs	sl, [r1], -r1, lsl #26
     3c8:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     3cc:	06970d03 	ldreq	r0, [r7], r3, lsl #26
     3d0:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     3d4:	00031601 	andeq	r1, r3, r1, lsl #12
     3d8:	000e0000 	andeq	r0, lr, r0
     3dc:	0003160f 	andeq	r1, r3, pc, lsl #12
     3e0:	0003ec00 	andeq	lr, r3, r0, lsl #24
     3e4:	02ca1000 	sbceq	r1, sl, #0
     3e8:	00070000 	andeq	r0, r7, r0
     3ec:	0003dc09 	andeq	sp, r3, r9, lsl #24
     3f0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     3f4:	04010000 	streq	r0, [r1], #-0
     3f8:	ca100000 	bgt	400400 <startup-0x1fbffc00>
     3fc:	17000002 	strne	r0, [r0, -r2]
     400:	030b0f00 	movweq	r0, #48896	; 0xbf00
     404:	04110000 	ldreq	r0, [r1], #-0
     408:	ca100000 	bgt	400410 <startup-0x1fbffbf0>
     40c:	37000002 	strcc	r0, [r0, -r2]
     410:	02dc0f00 	sbcseq	r0, ip, #0, 30
     414:	04210000 	strteq	r0, [r1], #-0
     418:	ca100000 	bgt	400420 <startup-0x1fbffbe0>
     41c:	ef000002 	svc	0x00000002
     420:	04110900 	ldreq	r0, [r1], #-2304	; 0xfffff700
     424:	0b0f0000 	bleq	3c042c <startup-0x1fc3fbd4>
     428:	37000003 	strcc	r0, [r0, -r3]
     42c:	11000004 	tstne	r0, r4
     430:	000002ca 	andeq	r0, r0, sl, asr #5
     434:	06000283 	streq	r0, [r0], -r3, lsl #5
     438:	00000c43 	andeq	r0, r0, r3, asr #24
     43c:	2001af01 	andcs	sl, r1, r1, lsl #30
     440:	12000003 	andne	r0, r0, #3
     444:	01c0018c 	biceq	r0, r0, ip, lsl #3
     448:	0000055e 	andeq	r0, r0, lr, asr r5
     44c:	00022a0c 	andeq	r2, r2, ip, lsl #20
     450:	01c20100 	biceq	r0, r2, r0, lsl #2
     454:	0000031b 	andeq	r0, r0, fp, lsl r3
     458:	03470c00 	movteq	r0, #31744	; 0x7c00
     45c:	c3010000 	movwgt	r0, #4096	; 0x1000
     460:	00031601 	andeq	r1, r3, r1, lsl #12
     464:	ac0c0400 	cfstrsge	mvf0, [ip], {-0}
     468:	01000000 	mrseq	r0, (UNDEF: 0)
     46c:	031601c4 	tsteq	r6, #196, 2	; 0x31
     470:	0c080000 	stceq	0, cr0, [r8], {-0}
     474:	000001fa 	strdeq	r0, [r0], -sl
     478:	1601c501 	strne	ip, [r1], -r1, lsl #10
     47c:	0c000003 	stceq	0, cr0, [r0], {3}
     480:	52435313 	subpl	r5, r3, #1275068416	; 0x4c000000
     484:	01c60100 	biceq	r0, r6, r0, lsl #2
     488:	00000316 	andeq	r0, r0, r6, lsl r3
     48c:	43431310 	movtmi	r1, #13072	; 0x3310
     490:	c7010052 	smlsdgt	r1, r2, r0, r0
     494:	00031601 	andeq	r1, r3, r1, lsl #12
     498:	53131400 	tstpl	r3, #0, 8
     49c:	01005048 	tsteq	r0, r8, asr #32
     4a0:	056e01c8 	strbeq	r0, [lr, #-456]!	; 0xfffffe38
     4a4:	0c180000 	ldceq	0, cr0, [r8], {-0}
     4a8:	00000680 	andeq	r0, r0, r0, lsl #13
     4ac:	1601c901 	strne	ip, [r1], -r1, lsl #18
     4b0:	24000003 	strcs	r0, [r0], #-3
     4b4:	000dc50c 	andeq	ip, sp, ip, lsl #10
     4b8:	01ca0100 	biceq	r0, sl, r0, lsl #2
     4bc:	00000316 	andeq	r0, r0, r6, lsl r3
     4c0:	05650c28 	strbeq	r0, [r5, #-3112]!	; 0xfffff3d8
     4c4:	cb010000 	blgt	404cc <startup-0x1ffbfb34>
     4c8:	00031601 	andeq	r1, r3, r1, lsl #12
     4cc:	950c2c00 	strls	r2, [ip, #-3072]	; 0xfffff400
     4d0:	01000004 	tsteq	r0, r4
     4d4:	031601cc 	tsteq	r6, #204, 2	; 0x33
     4d8:	0c300000 	ldceq	0, cr0, [r0], #-0
     4dc:	00000ea4 	andeq	r0, r0, r4, lsr #29
     4e0:	1601cd01 	strne	ip, [r1], -r1, lsl #26
     4e4:	34000003 	strcc	r0, [r0], #-3
     4e8:	000b330c 	andeq	r3, fp, ip, lsl #6
     4ec:	01ce0100 	biceq	r0, lr, r0, lsl #2
     4f0:	00000316 	andeq	r0, r0, r6, lsl r3
     4f4:	0d890c38 	stceq	12, cr0, [r9, #224]	; 0xe0
     4f8:	cf010000 	svcgt	0x00010000
     4fc:	00031601 	andeq	r1, r3, r1, lsl #12
     500:	50133c00 	andspl	r3, r3, r0, lsl #24
     504:	01005246 	tsteq	r0, r6, asr #4
     508:	058801d0 	streq	r0, [r8, #464]	; 0x1d0
     50c:	13400000 	movtne	r0, #0
     510:	00524644 	subseq	r4, r2, r4, asr #12
     514:	1b01d101 	blne	74920 <startup-0x1ff8b6e0>
     518:	48000003 	stmdami	r0, {r0, r1}
     51c:	52444113 	subpl	r4, r4, #-1073741820	; 0xc0000004
     520:	01d20100 	bicseq	r0, r2, r0, lsl #2
     524:	0000031b 	andeq	r0, r0, fp, lsl r3
     528:	0e930c4c 	cdpeq	12, 9, cr0, cr3, cr12, {2}
     52c:	d3010000 	movwle	r0, #4096	; 0x1000
     530:	0005a201 	andeq	sl, r5, r1, lsl #4
     534:	cd0c5000 	stcgt	0, cr5, [ip, #-0]
     538:	0100000e 	tsteq	r0, lr
     53c:	05bc01d4 	ldreq	r0, [ip, #468]!	; 0x1d4
     540:	0c600000 	stcleq	0, cr0, [r0], #-0
     544:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
     548:	c101d501 	tstgt	r1, r1, lsl #10
     54c:	74000005 	strvc	r0, [r0], #-5
     550:	0010510c 	andseq	r5, r0, ip, lsl #2
     554:	01d60100 	bicseq	r0, r6, r0, lsl #2
     558:	00000316 	andeq	r0, r0, r6, lsl r3
     55c:	dc0f0088 	stcle	0, cr0, [pc], {136}	; 0x88
     560:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
     564:	10000005 	andne	r0, r0, r5
     568:	000002ca 	andeq	r0, r0, sl, asr #5
     56c:	5e09000b 	cdppl	0, 0, cr0, cr9, cr11, {0}
     570:	0f000005 	svceq	0x00000005
     574:	0000031b 	andeq	r0, r0, fp, lsl r3
     578:	00000583 	andeq	r0, r0, r3, lsl #11
     57c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     580:	0a000100 	beq	988 <startup-0x1ffff678>
     584:	00000573 	andeq	r0, r0, r3, ror r5
     588:	00058309 	andeq	r8, r5, r9, lsl #6
     58c:	031b0f00 	tsteq	fp, #0, 30
     590:	059d0000 	ldreq	r0, [sp]
     594:	ca100000 	bgt	40059c <startup-0x1fbffa64>
     598:	03000002 	movweq	r0, #2
     59c:	058d0a00 	streq	r0, [sp, #2560]	; 0xa00
     5a0:	9d090000 	stcls	0, cr0, [r9, #-0]
     5a4:	0f000005 	svceq	0x00000005
     5a8:	0000031b 	andeq	r0, r0, fp, lsl r3
     5ac:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     5b0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5b4:	0a000400 	beq	15bc <startup-0x1fffea44>
     5b8:	000005a7 	andeq	r0, r0, r7, lsr #11
     5bc:	0005b709 	andeq	fp, r5, r9, lsl #14
     5c0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     5c4:	05d10000 	ldrbeq	r0, [r1]
     5c8:	ca100000 	bgt	4005d0 <startup-0x1fbffa30>
     5cc:	04000002 	streq	r0, [r0], #-2
     5d0:	047b0600 	ldrbteq	r0, [fp], #-1536	; 0xfffffa00
     5d4:	d7010000 	strle	r0, [r1, -r0]
     5d8:	00044301 	andeq	r4, r4, r1, lsl #6
     5dc:	01101200 	tsteq	r0, r0, lsl #4
     5e0:	061b02bf 			; <UNDEFINED> instruction: 0x061b02bf
     5e4:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
     5e8:	0100000a 	tsteq	r0, sl
     5ec:	031602c1 	tsteq	r6, #268435468	; 0x1000000c
     5f0:	0c000000 	stceq	0, cr0, [r0], {-0}
     5f4:	00000e0f 	andeq	r0, r0, pc, lsl #28
     5f8:	1602c201 	strne	ip, [r2], -r1, lsl #4
     5fc:	04000003 	streq	r0, [r0], #-3
     600:	4c415613 	mcrrmi	6, 1, r5, r1, cr3
     604:	02c30100 	sbceq	r0, r3, #0, 2
     608:	00000316 	andeq	r0, r0, r6, lsl r3
     60c:	0d950c08 	ldceq	12, cr0, [r5, #32]
     610:	c4010000 	strgt	r0, [r1], #-0
     614:	00031b02 	andeq	r1, r3, r2, lsl #22
     618:	06000c00 	streq	r0, [r0], -r0, lsl #24
     61c:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
     620:	dd02c501 	cfstr32le	mvfx12, [r2, #-4]
     624:	0f000005 	svceq	0x00000005
     628:	0000030b 	andeq	r0, r0, fp, lsl #6
     62c:	00000637 	andeq	r0, r0, r7, lsr r6
     630:	0002ca10 	andeq	ip, r2, r0, lsl sl
     634:	14000100 	strne	r0, [r0], #-256	; 0xffffff00
     638:	00000f45 	andeq	r0, r0, r5, asr #30
     63c:	0606fa01 	streq	pc, [r6], -r1, lsl #20
     640:	15000003 	strne	r0, [r0, #-3]
     644:	0000081b 	andeq	r0, r0, fp, lsl r8
     648:	030b3b07 	movweq	r3, #47879	; 0xbb07
     64c:	07160000 	ldreq	r0, [r6, -r0]
     650:	00027101 	andeq	r7, r2, r1, lsl #2
     654:	035d0400 	cmpeq	sp, #0, 8
     658:	00000669 	andeq	r0, r0, r9, ror #12
     65c:	00119004 	andseq	r9, r1, r4
     660:	53170000 	tstpl	r7, #0
     664:	01005445 	tsteq	r0, r5, asr #8
     668:	09c90600 	stmibeq	r9, {r9, sl}^
     66c:	5d040000 	stcpl	0, cr0, [r4, #-0]
     670:	00064e03 	andeq	r4, r6, r3, lsl #28
     674:	0a8a0600 	beq	fe281e7c <GPIO_Pins+0xde280984>
     678:	5d040000 	stcpl	0, cr0, [r4, #-0]
     67c:	00064e03 	andeq	r4, r6, r3, lsl #28
     680:	01071600 	tsteq	r7, r0, lsl #12
     684:	00000271 	andeq	r0, r0, r1, ror r2
     688:	9c035f04 	stcls	15, cr5, [r3], {4}
     68c:	04000006 	streq	r0, [r0], #-6
     690:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
     694:	0efa0400 	cdpeq	4, 15, cr0, cr10, cr0, {0}
     698:	00010000 	andeq	r0, r1, r0
     69c:	000c4d06 	andeq	r4, ip, r6, lsl #26
     6a0:	035f0400 	cmpeq	pc, #0, 8
     6a4:	00000681 	andeq	r0, r0, r1, lsl #13
     6a8:	71010716 	tstvc	r1, r6, lsl r7
     6ac:	04000002 	streq	r0, [r0], #-2
     6b0:	06c30362 	strbeq	r0, [r3], r2, ror #6
     6b4:	97040000 	strls	r0, [r4, -r0]
     6b8:	00000008 	andeq	r0, r0, r8
     6bc:	000cd204 	andeq	sp, ip, r4, lsl #4
     6c0:	06000100 	streq	r0, [r0], -r0, lsl #2
     6c4:	00000bee 	andeq	r0, r0, lr, ror #23
     6c8:	a8036204 	stmdage	r3, {r2, r9, sp, lr}
     6cc:	12000006 	andne	r0, r0, #6
     6d0:	05c30428 	strbeq	r0, [r3, #1064]	; 0x428
     6d4:	0000075b 	andeq	r0, r0, fp, asr r7
     6d8:	000fa60c 	andeq	sl, pc, ip, lsl #12
     6dc:	05c50400 	strbeq	r0, [r5, #1024]	; 0x400
     6e0:	00000316 	andeq	r0, r0, r6, lsl r3
     6e4:	0d8e0c00 	stceq	12, cr0, [lr]
     6e8:	c6040000 	strgt	r0, [r4], -r0
     6ec:	00031605 	andeq	r1, r3, r5, lsl #12
     6f0:	c20c0400 	andgt	r0, ip, #0, 8
     6f4:	04000008 	streq	r0, [r0], #-8
     6f8:	031605c7 	tsteq	r6, #834666496	; 0x31c00000
     6fc:	0c080000 	stceq	0, cr0, [r8], {-0}
     700:	00000989 	andeq	r0, r0, r9, lsl #19
     704:	1605c804 	strne	ip, [r5], -r4, lsl #16
     708:	0c000003 	stceq	0, cr0, [r0], {3}
     70c:	52444913 	subpl	r4, r4, #311296	; 0x4c000
     710:	05c90400 	strbeq	r0, [r9, #1024]	; 0x400
     714:	00000316 	andeq	r0, r0, r6, lsl r3
     718:	444f1310 	strbmi	r1, [pc], #-784	; 720 <startup-0x1ffff8e0>
     71c:	ca040052 	bgt	10086c <startup-0x1feff794>
     720:	00031605 	andeq	r1, r3, r5, lsl #12
     724:	df0c1400 	svcle	0x000c1400
     728:	04000009 	streq	r0, [r0], #-9
     72c:	02f605cb 	rscseq	r0, r6, #851443712	; 0x32c00000
     730:	0c180000 	ldceq	0, cr0, [r8], {-0}
     734:	000009bc 			; <UNDEFINED> instruction: 0x000009bc
     738:	f605cc04 			; <UNDEFINED> instruction: 0xf605cc04
     73c:	1a000002 	bne	74c <startup-0x1ffff8b4>
     740:	0008810c 	andeq	r8, r8, ip, lsl #2
     744:	05cd0400 	strbeq	r0, [sp, #1024]	; 0x400
     748:	00000316 	andeq	r0, r0, r6, lsl r3
     74c:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
     750:	ce040052 	mcrgt	0, 0, r0, cr4, cr2, {2}
     754:	00076b05 	andeq	r6, r7, r5, lsl #22
     758:	0f002000 	svceq	0x00002000
     75c:	00000316 	andeq	r0, r0, r6, lsl r3
     760:	0000076b 	andeq	r0, r0, fp, ror #14
     764:	0002ca10 	andeq	ip, r2, r0, lsl sl
     768:	09000100 	stmdbeq	r0, {r8}
     76c:	0000075b 	andeq	r0, r0, fp, asr r7
     770:	000f2506 	andeq	r2, pc, r6, lsl #10
     774:	05cf0400 	strbeq	r0, [pc, #1024]	; b7c <startup-0x1ffff484>
     778:	000006cf 	andeq	r0, r0, pc, asr #13
     77c:	64049812 	strvs	r9, [r4], #-2066	; 0xfffff7ee
     780:	00093f06 	andeq	r3, r9, r6, lsl #30
     784:	52431300 	subpl	r1, r3, #0, 6
     788:	06660400 	strbteq	r0, [r6], -r0, lsl #8
     78c:	00000316 	andeq	r0, r0, r6, lsl r3
     790:	08de0c00 	ldmeq	lr, {sl, fp}^
     794:	67040000 	strvs	r0, [r4, -r0]
     798:	00031606 	andeq	r1, r3, r6, lsl #12
     79c:	fa0c0400 	blx	3017a4 <startup-0x1fcfe85c>
     7a0:	0400000f 	streq	r0, [r0], #-15
     7a4:	03160668 	tsteq	r6, #104, 12	; 0x6800000
     7a8:	13080000 	movwne	r0, #32768	; 0x8000
     7ac:	00524943 	subseq	r4, r2, r3, asr #18
     7b0:	16066904 	strne	r6, [r6], -r4, lsl #18
     7b4:	0c000003 	stceq	0, cr0, [r0], {3}
     7b8:	00049a0c 	andeq	r9, r4, ip, lsl #20
     7bc:	066a0400 	strbteq	r0, [sl], -r0, lsl #8
     7c0:	00000316 	andeq	r0, r0, r6, lsl r3
     7c4:	0e6f0c10 	mcreq	12, 3, r0, cr15, cr0, {0}
     7c8:	6b040000 	blvs	1007d0 <startup-0x1feff830>
     7cc:	00031606 	andeq	r1, r3, r6, lsl #12
     7d0:	e50c1400 	str	r1, [ip, #-1024]	; 0xfffffc00
     7d4:	0400000b 	streq	r0, [r0], #-11
     7d8:	0316066c 	tsteq	r6, #108, 12	; 0x6c00000
     7dc:	0c180000 	ldceq	0, cr0, [r8], {-0}
     7e0:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
     7e4:	0b066d04 	bleq	19bbfc <startup-0x1fe64404>
     7e8:	1c000003 	stcne	0, cr0, [r0], {3}
     7ec:	000c230c 	andeq	r2, ip, ip, lsl #6
     7f0:	066e0400 	strbteq	r0, [lr], -r0, lsl #8
     7f4:	00000316 	andeq	r0, r0, r6, lsl r3
     7f8:	09b30c20 	ldmibeq	r3!, {r5, sl, fp}
     7fc:	6f040000 	svcvs	0x00040000
     800:	00031606 	andeq	r1, r3, r6, lsl #12
     804:	c90c2400 	stmdbgt	ip, {sl, sp}
     808:	04000003 	streq	r0, [r0], #-3
     80c:	06270670 			; <UNDEFINED> instruction: 0x06270670
     810:	0c280000 	stceq	0, cr0, [r8], #-0
     814:	00000e07 	andeq	r0, r0, r7, lsl #28
     818:	16067104 	strne	r7, [r6], -r4, lsl #2
     81c:	30000003 	andcc	r0, r0, r3
     820:	0004ed0c 	andeq	lr, r4, ip, lsl #26
     824:	06720400 	ldrbteq	r0, [r2], -r0, lsl #8
     828:	00000316 	andeq	r0, r0, r6, lsl r3
     82c:	10f70c34 	rscsne	r0, r7, r4, lsr ip
     830:	73040000 	movwvc	r0, #16384	; 0x4000
     834:	00031606 	andeq	r1, r3, r6, lsl #12
     838:	4d0c3800 	stcmi	8, cr3, [ip, #-0]
     83c:	04000004 	streq	r0, [r0], #-4
     840:	030b0674 	movweq	r0, #46708	; 0xb674
     844:	0c3c0000 	ldceq	0, cr0, [ip], #-0
     848:	00000c3b 	andeq	r0, r0, fp, lsr ip
     84c:	16067504 	strne	r7, [r6], -r4, lsl #10
     850:	40000003 	andmi	r0, r0, r3
     854:	0002e20c 	andeq	lr, r2, ip, lsl #4
     858:	06760400 	ldrbteq	r0, [r6], -r0, lsl #8
     85c:	00000316 	andeq	r0, r0, r6, lsl r3
     860:	04570c44 	ldrbeq	r0, [r7], #-3140	; 0xfffff3bc
     864:	77040000 	strvc	r0, [r4, -r0]
     868:	00062706 	andeq	r2, r6, r6, lsl #14
     86c:	fe0c4800 	vcmla.f16	d4, d12, d0[0], #0
     870:	04000002 	streq	r0, [r0], #-2
     874:	03160678 	tsteq	r6, #120, 12	; 0x7800000
     878:	0c500000 	mraeq	r0, r0, acc0
     87c:	000001e1 	andeq	r0, r0, r1, ror #3
     880:	16067904 	strne	r7, [r6], -r4, lsl #18
     884:	54000003 	strpl	r0, [r0], #-3
     888:	000d120c 	andeq	r1, sp, ip, lsl #4
     88c:	067a0400 	ldrbteq	r0, [sl], -r0, lsl #8
     890:	00000316 	andeq	r0, r0, r6, lsl r3
     894:	03f30c58 	mvnseq	r0, #88, 24	; 0x5800
     898:	7b040000 	blvc	1008a0 <startup-0x1feff760>
     89c:	00030b06 	andeq	r0, r3, r6, lsl #22
     8a0:	380c5c00 	stmdacc	ip, {sl, fp, ip, lr}
     8a4:	0400000b 	streq	r0, [r0], #-11
     8a8:	0316067c 	tsteq	r6, #124, 12	; 0x7c00000
     8ac:	0c600000 	stcleq	0, cr0, [r0], #-0
     8b0:	00000a3f 	andeq	r0, r0, pc, lsr sl
     8b4:	16067d04 	strne	r7, [r6], -r4, lsl #26
     8b8:	64000003 	strvs	r0, [r0], #-3
     8bc:	0003fd0c 	andeq	pc, r3, ip, lsl #26
     8c0:	067e0400 	ldrbteq	r0, [lr], -r0, lsl #8
     8c4:	00000627 	andeq	r0, r0, r7, lsr #12
     8c8:	067b0c68 	ldrbteq	r0, [fp], -r8, ror #24
     8cc:	7f040000 	svcvc	0x00040000
     8d0:	00031606 	andeq	r1, r3, r6, lsl #12
     8d4:	43137000 	tstmi	r3, #0
     8d8:	04005253 	streq	r5, [r0], #-595	; 0xfffffdad
     8dc:	03160680 	tsteq	r6, #128, 12	; 0x8000000
     8e0:	0c740000 	ldcleq	0, cr0, [r4], #-0
     8e4:	00000407 	andeq	r0, r0, r7, lsl #8
     8e8:	27068104 	strcs	r8, [r6, -r4, lsl #2]
     8ec:	78000006 	stmdavc	r0, {r1, r2}
     8f0:	00098f0c 	andeq	r8, r9, ip, lsl #30
     8f4:	06820400 	streq	r0, [r2], r0, lsl #8
     8f8:	00000316 	andeq	r0, r0, r6, lsl r3
     8fc:	004c0c80 	subeq	r0, ip, r0, lsl #25
     900:	83040000 	movwhi	r0, #16384	; 0x4000
     904:	00031606 	andeq	r1, r3, r6, lsl #12
     908:	f40c8400 	vst3.8	{d8-d10}, [ip], r0
     90c:	0400000f 	streq	r0, [r0], #-15
     910:	03160684 	tsteq	r6, #132, 12	; 0x8400000
     914:	0c880000 	stceq	0, cr0, [r8], {0}
     918:	0000033f 	andeq	r0, r0, pc, lsr r3
     91c:	16068504 	strne	r8, [r6], -r4, lsl #10
     920:	8c000003 	stchi	0, cr0, [r0], {3}
     924:	000b660c 	andeq	r6, fp, ip, lsl #12
     928:	06860400 	streq	r0, [r6], r0, lsl #8
     92c:	00000316 	andeq	r0, r0, r6, lsl r3
     930:	0dbc0c90 	ldceq	12, cr0, [ip, #576]!	; 0x240
     934:	87040000 	strhi	r0, [r4, -r0]
     938:	00031606 	andeq	r1, r3, r6, lsl #12
     93c:	06009400 	streq	r9, [r0], -r0, lsl #8
     940:	00000e98 	muleq	r0, r8, lr
     944:	7c068904 			; <UNDEFINED> instruction: 0x7c068904
     948:	18000007 	stmdane	r0, {r0, r1, r2}
     94c:	84300810 	ldrthi	r0, [r0], #-2064	; 0xfffff7f0
     950:	19000009 	stmdbne	r0, {r0, r3}
     954:	0000105c 	andeq	r1, r0, ip, asr r0
     958:	030b3208 	movweq	r3, #45576	; 0xb208
     95c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     960:	0000008c 	andeq	r0, r0, ip, lsl #1
     964:	030b3308 	movweq	r3, #45832	; 0xb308
     968:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     96c:	00000575 	andeq	r0, r0, r5, ror r5
     970:	030b3408 	movweq	r3, #46088	; 0xb408
     974:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     978:	000004f5 	strdeq	r0, [r0], -r5
     97c:	030b3508 	movweq	r3, #46344	; 0xb508
     980:	000c0000 	andeq	r0, ip, r0
     984:	000e8107 	andeq	r8, lr, r7, lsl #2
     988:	4b360800 	blmi	d82990 <startup-0x1f27d670>
     98c:	0f000009 	svceq	0x00000009
     990:	000002e6 	andeq	r0, r0, r6, ror #5
     994:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
     998:	0002ca10 	andeq	ip, r2, r0, lsl sl
     99c:	0a000f00 	beq	45a4 <startup-0x1fffba5c>
     9a0:	0000098f 	andeq	r0, r0, pc, lsl #19
     9a4:	00099f09 	andeq	r9, r9, r9, lsl #30
     9a8:	091a1a00 	ldmdbeq	sl, {r9, fp, ip}
     9ac:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
     9b0:	000009a4 	andeq	r0, r0, r4, lsr #19
     9b4:	14e80305 	strbtne	r0, [r8], #773	; 0x305
     9b8:	071b2000 	ldreq	r2, [fp, -r0]
     9bc:	00027101 	andeq	r7, r2, r1, lsl #2
     9c0:	e0420900 	sub	r0, r2, r0, lsl #18
     9c4:	04000009 	streq	r0, [r0], #-9
     9c8:	00000853 	andeq	r0, r0, r3, asr r8
     9cc:	06ea0400 	strbteq	r0, [sl], r0, lsl #8
     9d0:	04010000 	streq	r0, [r1], #-0
     9d4:	00000267 	andeq	r0, r0, r7, ror #4
     9d8:	02a30402 	adceq	r0, r3, #33554432	; 0x2000000
     9dc:	00030000 	andeq	r0, r3, r0
     9e0:	000d1c07 	andeq	r1, sp, r7, lsl #24
     9e4:	ba470900 	blt	11c2dec <startup-0x1ee3d214>
     9e8:	1b000009 	blne	a14 <startup-0x1ffff5ec>
     9ec:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
     9f0:	4f090000 	svcmi	0x00090000
     9f4:	00000a05 	andeq	r0, r0, r5, lsl #20
     9f8:	00041604 	andeq	r1, r4, r4, lsl #12
     9fc:	58040000 	stmdapl	r4, {}	; <UNPREDICTABLE>
     a00:	01000003 	tsteq	r0, r3
     a04:	010a0700 	tsteq	sl, r0, lsl #14
     a08:	52090000 	andpl	r0, r9, #0
     a0c:	000009eb 	andeq	r0, r0, fp, ror #19
     a10:	7101071b 	tstvc	r1, fp, lsl r7
     a14:	09000002 	stmdbeq	r0, {r1}
     a18:	000a365a 	andeq	r3, sl, sl, asr r6
     a1c:	05050400 	streq	r0, [r5, #-1024]	; 0xfffffc00
     a20:	04000000 	streq	r0, [r0], #-0
     a24:	0000092b 	andeq	r0, r0, fp, lsr #18
     a28:	11220401 			; <UNDEFINED> instruction: 0x11220401
     a2c:	04020000 	streq	r0, [r2], #-0
     a30:	000009e5 	andeq	r0, r0, r5, ror #19
     a34:	14070003 	strne	r0, [r7], #-3
     a38:	0900000e 	stmdbeq	r0, {r1, r2, r3}
     a3c:	000a105f 	andeq	r1, sl, pc, asr r0
     a40:	01071b00 	tsteq	r7, r0, lsl #22
     a44:	00000271 	andeq	r0, r0, r1, ror r2
     a48:	0a616e09 	beq	185c274 <startup-0x1e7a3d8c>
     a4c:	9b040000 	blls	100a54 <startup-0x1feff5ac>
     a50:	00000000 	andeq	r0, r0, r0
     a54:	000fda04 	andeq	sp, pc, r4, lsl #20
     a58:	eb040100 	bl	100e60 <startup-0x1feff1a0>
     a5c:	02000001 	andeq	r0, r0, #1
     a60:	04840700 	streq	r0, [r4], #1792	; 0x700
     a64:	72090000 	andvc	r0, r9, #0
     a68:	00000a41 	andeq	r0, r0, r1, asr #20
     a6c:	84090818 	strhi	r0, [r9], #-2072	; 0xfffff7e8
     a70:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     a74:	000e3819 	andeq	r3, lr, r9, lsl r8
     a78:	0b860900 	bleq	fe182e80 <GPIO_Pins+0xde181988>
     a7c:	00000003 	andeq	r0, r0, r3
     a80:	000cda19 	andeq	sp, ip, r9, lsl sl
     a84:	e0890900 	add	r0, r9, r0, lsl #18
     a88:	04000009 	streq	r0, [r0], #-9
     a8c:	000aba19 	andeq	fp, sl, r9, lsl sl
     a90:	368c0900 	strcc	r0, [ip], r0, lsl #18
     a94:	0500000a 	streq	r0, [r0, #-10]
     a98:	00090419 	andeq	r0, r9, r9, lsl r4
     a9c:	058f0900 	streq	r0, [pc, #2304]	; 13a4 <startup-0x1fffec5c>
     aa0:	0600000a 	streq	r0, [r0], -sl
     aa4:	000e6519 	andeq	r6, lr, r9, lsl r5
     aa8:	61920900 	orrsvs	r0, r2, r0, lsl #18
     aac:	0700000a 	streq	r0, [r0, -sl]
     ab0:	03660700 	cmneq	r6, #0, 14
     ab4:	94090000 	strls	r0, [r9], #-0
     ab8:	00000a6c 	andeq	r0, r0, ip, ror #20
     abc:	0002eb0f 	andeq	lr, r2, pc, lsl #22
     ac0:	000acc00 	andeq	ip, sl, r0, lsl #24
     ac4:	02ca1000 	sbceq	r1, sl, #0
     ac8:	000f0000 	andeq	r0, pc, r0
     acc:	0006e01c 	andeq	lr, r6, ip, lsl r0
     ad0:	bc180300 	ldclt	3, cr0, [r8], {-0}
     ad4:	0500000a 	streq	r0, [r0, #-10]
     ad8:	0014f803 	andseq	pc, r4, r3, lsl #16
     adc:	08aa1c20 	stmiaeq	sl!, {r5, sl, fp, ip}
     ae0:	33030000 	movwcc	r0, #12288	; 0x3000
     ae4:	00000316 	andeq	r0, r0, r6, lsl r3
     ae8:	14e40305 	strbtne	r0, [r4], #773	; 0x305
     aec:	7f1d2000 	svcvc	0x001d2000
     af0:	0300000f 	movweq	r0, #15
     af4:	000e6440 	andeq	r6, lr, r0, asr #8
     af8:	00005820 	andeq	r5, r0, r0, lsr #16
     afc:	289c0100 	ldmcs	ip, {r8}
     b00:	1a00000b 	bne	b34 <startup-0x1ffff4cc>
     b04:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
     b08:	030b4703 	movweq	r4, #46851	; 0xb703
     b0c:	91020000 	mrsls	r0, (UNDEF: 2)
     b10:	0e801e70 	mcreq	14, 4, r1, cr0, cr0, {3}
     b14:	00242000 	eoreq	r2, r4, r0
     b18:	691f0000 	ldmdbvs	pc, {}	; <UNPREDICTABLE>
     b1c:	c3510300 	cmpgt	r1, #0, 6
     b20:	02000002 	andeq	r0, r0, #2
     b24:	00007491 	muleq	r0, r1, r4
     b28:	dc080105 	stfles	f0, [r8], {5}
     b2c:	20000003 	andcs	r0, r0, r3
     b30:	00000230 	andeq	r0, r0, r0, lsr r2
     b34:	0e103503 	cfmul32eq	mvfx3, mvfx0, mvfx3
     b38:	00542000 	subseq	r2, r4, r0
     b3c:	9c010000 	stcls	0, cr0, [r1], {-0}
     b40:	00021a21 	andeq	r1, r2, r1, lsr #20
     b44:	a81f0300 	ldmdage	pc, {r8, r9}	; <UNPREDICTABLE>
     b48:	6820000d 	stmdavs	r0!, {r0, r2, r3}
     b4c:	01000000 	mrseq	r0, (UNDEF: 0)
     b50:	000b649c 	muleq	fp, ip, r4
     b54:	0dac1a00 			; <UNDEFINED> instruction: 0x0dac1a00
     b58:	22030000 	andcs	r0, r3, #0
     b5c:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     b60:	00709102 	rsbseq	r9, r0, r2, lsl #2
     b64:	000c0c22 	andeq	r0, ip, r2, lsr #24
     b68:	000e0300 	andeq	r0, lr, r0, lsl #6
     b6c:	0c200000 	stceq	0, cr0, [r0], #-0
     b70:	01000000 	mrseq	r0, (UNDEF: 0)
     b74:	0ad2239c 	beq	ff4899ec <GPIO_Pins+0xdf4884f4>
     b78:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
     b7c:	000d880c 	andeq	r8, sp, ip, lsl #16
     b80:	00002020 	andeq	r2, r0, r0, lsr #32
     b84:	9b9c0100 	blls	fe700f8c <GPIO_Pins+0xde6ffa94>
     b88:	2400000b 	strcs	r0, [r0], #-11
     b8c:	00000ec6 	andeq	r0, r0, r6, asr #29
     b90:	d10c5e02 	tstle	ip, r2, lsl #28
     b94:	02000002 	andeq	r0, r0, #2
     b98:	25007791 	strcs	r7, [r0, #-1937]	; 0xfffff86f
     b9c:	00000a83 	andeq	r0, r0, r3, lsl #21
     ba0:	750c3c02 	strvc	r3, [ip, #-3074]	; 0xfffff3fe
     ba4:	44000006 	strmi	r0, [r0], #-6
     ba8:	4420000d 	strtmi	r0, [r0], #-13
     bac:	01000000 	mrseq	r0, (UNDEF: 0)
     bb0:	000bd49c 	muleq	fp, ip, r4
     bb4:	0ec62400 	cdpeq	4, 12, cr2, cr6, cr0, {0}
     bb8:	3c020000 	stccc	0, cr0, [r2], {-0}
     bbc:	0002d10c 	andeq	sp, r2, ip, lsl #2
     bc0:	6f910200 	svcvs	0x00910200
     bc4:	000ef026 	andeq	pc, lr, r6, lsr #32
     bc8:	0c3e0200 	lfmeq	f0, 4, [lr], #-0
     bcc:	00000675 	andeq	r0, r0, r5, ror r6
     bd0:	00779102 	rsbseq	r9, r7, r2, lsl #2
     bd4:	00065f27 	andeq	r5, r6, r7, lsr #30
     bd8:	0c280200 	sfmeq	f0, 4, [r8], #-0
     bdc:	20000d28 	andcs	r0, r0, r8, lsr #26
     be0:	0000001c 	andeq	r0, r0, ip, lsl r0
     be4:	c2259c01 	eorgt	r9, r5, #256	; 0x100
     be8:	02000009 	andeq	r0, r0, #9
     bec:	06690bfb 			; <UNDEFINED> instruction: 0x06690bfb
     bf0:	0ca40000 	stceq	0, cr0, [r4]
     bf4:	00842000 	addeq	r2, r4, r0
     bf8:	9c010000 	stcls	0, cr0, [r1], {-0}
     bfc:	00000c3d 	andeq	r0, r0, sp, lsr ip
     c00:	000a7a24 	andeq	r7, sl, r4, lsr #20
     c04:	0bfb0200 	bleq	ffec140c <GPIO_Pins+0xdfebff14>
     c08:	000002d1 	ldrdeq	r0, [r0], -r1
     c0c:	28679102 	stmdacs	r7!, {r1, r8, ip, pc}^
     c10:	00706d74 	rsbseq	r6, r0, r4, ror sp
     c14:	0b0bfd02 	bleq	300024 <startup-0x1fcfffdc>
     c18:	02000003 	andeq	r0, r0, #3
     c1c:	1a266c91 	bne	99be68 <startup-0x1f664198>
     c20:	0200000b 	andeq	r0, r0, #11
     c24:	030b0bfe 	movweq	r0, #48126	; 0xbbfe
     c28:	91020000 	mrsls	r0, (UNDEF: 2)
     c2c:	0ef02674 	mrceq	6, 7, r2, cr0, cr4, {3}
     c30:	ff020000 			; <UNDEFINED> instruction: 0xff020000
     c34:	0006690b 	andeq	r6, r6, fp, lsl #18
     c38:	73910200 	orrsvc	r0, r1, #0, 4
     c3c:	09f52300 	ldmibeq	r5!, {r8, r9, sp}^
     c40:	d6020000 	strle	r0, [r2], -r0
     c44:	000c540b 	andeq	r5, ip, fp, lsl #8
     c48:	00005020 	andeq	r5, r0, r0, lsr #32
     c4c:	729c0100 	addsvc	r0, ip, #0, 2
     c50:	2400000c 	strcs	r0, [r0], #-12
     c54:	00000ec6 	andeq	r0, r0, r6, asr #29
     c58:	d10bd602 	tstle	fp, r2, lsl #12
     c5c:	02000002 	andeq	r0, r0, #2
     c60:	b1247791 			; <UNDEFINED> instruction: 0xb1247791
     c64:	0200000a 	andeq	r0, r0, #10
     c68:	069c0bd6 			; <UNDEFINED> instruction: 0x069c0bd6
     c6c:	91020000 	mrsls	r0, (UNDEF: 2)
     c70:	fb230076 	blx	8c0e52 <startup-0x1f73f1ae>
     c74:	0200000c 	andeq	r0, r0, #12
     c78:	0c180a9e 			; <UNDEFINED> instruction: 0x0c180a9e
     c7c:	003c2000 	eorseq	r2, ip, r0
     c80:	9c010000 	stcls	0, cr0, [r1], {-0}
     c84:	00000c98 	muleq	r0, r8, ip
     c88:	00013324 	andeq	r3, r1, r4, lsr #6
     c8c:	0a9e0200 	beq	fe781494 <GPIO_Pins+0xde77ff9c>
     c90:	000002d1 	ldrdeq	r0, [r0], -r1
     c94:	00779102 	rsbseq	r9, r7, r2, lsl #2
     c98:	0000d023 	andeq	sp, r0, r3, lsr #32
     c9c:	0a860200 	beq	fe1814a4 <GPIO_Pins+0xde17ffac>
     ca0:	20000bd8 	ldrdcs	r0, [r0], -r8
     ca4:	00000040 	andeq	r0, r0, r0, asr #32
     ca8:	0ccd9c01 	stcleq	12, cr9, [sp], {1}
     cac:	24240000 	strtcs	r0, [r4], #-0
     cb0:	0200000b 	andeq	r0, r0, #11
     cb4:	030b0a86 	movweq	r0, #47750	; 0xba86
     cb8:	91020000 	mrsls	r0, (UNDEF: 2)
     cbc:	0ab12474 	beq	fec49e94 <GPIO_Pins+0xdec4899c>
     cc0:	86020000 	strhi	r0, [r2], -r0
     cc4:	00069c0a 	andeq	r9, r6, sl, lsl #24
     cc8:	73910200 	orrsvc	r0, r1, #0, 4
     ccc:	0f082300 	svceq	0x00082300
     cd0:	52020000 	andpl	r0, r2, #0
     cd4:	000b980a 	andeq	r9, fp, sl, lsl #16
     cd8:	00004020 	andeq	r4, r0, r0, lsr #32
     cdc:	029c0100 	addseq	r0, ip, #0, 2
     ce0:	2400000d 	strcs	r0, [r0], #-13
     ce4:	00000a49 	andeq	r0, r0, r9, asr #20
     ce8:	0b0a5202 	bleq	2954f8 <startup-0x1fd6ab08>
     cec:	02000003 	andeq	r0, r0, #3
     cf0:	b1247491 			; <UNDEFINED> instruction: 0xb1247491
     cf4:	0200000a 	andeq	r0, r0, #10
     cf8:	069c0a52 			; <UNDEFINED> instruction: 0x069c0a52
     cfc:	91020000 	mrsls	r0, (UNDEF: 2)
     d00:	c5230073 	strgt	r0, [r3, #-115]!	; 0xffffff8d
     d04:	02000004 	andeq	r0, r0, #4
     d08:	0b580a19 	bleq	1603574 <startup-0x1e9fca8c>
     d0c:	00402000 	subeq	r2, r0, r0
     d10:	9c010000 	stcls	0, cr0, [r1], {-0}
     d14:	00000d37 	andeq	r0, r0, r7, lsr sp
     d18:	00032424 	andeq	r2, r3, r4, lsr #8
     d1c:	0a190200 	beq	641524 <startup-0x1f9beadc>
     d20:	0000030b 	andeq	r0, r0, fp, lsl #6
     d24:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
     d28:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     d2c:	9c0a1902 			; <UNDEFINED> instruction: 0x9c0a1902
     d30:	02000006 	andeq	r0, r0, #6
     d34:	23007391 	movwcs	r7, #913	; 0x391
     d38:	000000ed 	andeq	r0, r0, sp, ror #1
     d3c:	1809fb02 	stmdane	r9, {r1, r8, r9, fp, ip, sp, lr, pc}
     d40:	4020000b 	eormi	r0, r0, fp
     d44:	01000000 	mrseq	r0, (UNDEF: 0)
     d48:	000d6c9c 	muleq	sp, ip, ip
     d4c:	0fcb2400 	svceq	0x00cb2400
     d50:	fb020000 	blx	80d5a <startup-0x1ff7f2a6>
     d54:	00030b09 	andeq	r0, r3, r9, lsl #22
     d58:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     d5c:	000ab124 	andeq	fp, sl, r4, lsr #2
     d60:	09fb0200 	ldmibeq	fp!, {r9}^
     d64:	0000069c 	muleq	r0, ip, r6
     d68:	00739102 	rsbseq	r9, r3, r2, lsl #2
     d6c:	000f5a23 	andeq	r5, pc, r3, lsr #20
     d70:	09db0200 	ldmibeq	fp, {r9}^
     d74:	20000ad8 	ldrdcs	r0, [r0], -r8
     d78:	00000040 	andeq	r0, r0, r0, asr #32
     d7c:	0da19c01 	stceq	12, cr9, [r1, #4]!
     d80:	ca240000 	bgt	900d88 <startup-0x1f6ff278>
     d84:	0200000d 	andeq	r0, r0, #13
     d88:	030b09db 	movweq	r0, #47579	; 0xb9db
     d8c:	91020000 	mrsls	r0, (UNDEF: 2)
     d90:	0ab12474 	beq	fec49f68 <GPIO_Pins+0xdec48a70>
     d94:	db020000 	blle	80d9c <startup-0x1ff7f264>
     d98:	00069c09 	andeq	r9, r6, r9, lsl #24
     d9c:	73910200 	orrsvc	r0, r1, #0, 4
     da0:	04a32300 	strteq	r2, [r3], #768	; 0x300
     da4:	aa020000 	bge	80dac <startup-0x1ff7f254>
     da8:	000a9809 	andeq	r9, sl, r9, lsl #16
     dac:	00004020 	andeq	r4, r0, r0, lsr #32
     db0:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
     db4:	2400000d 	strcs	r0, [r0], #-13
     db8:	00000b24 	andeq	r0, r0, r4, lsr #22
     dbc:	0b09aa02 	bleq	26b5cc <startup-0x1fd94a34>
     dc0:	02000003 	andeq	r0, r0, #3
     dc4:	b1247491 			; <UNDEFINED> instruction: 0xb1247491
     dc8:	0200000a 	andeq	r0, r0, #10
     dcc:	069c09aa 	ldreq	r0, [ip], sl, lsr #19
     dd0:	91020000 	mrsls	r0, (UNDEF: 2)
     dd4:	1c230073 	stcne	0, cr0, [r3], #-460	; 0xfffffe34
     dd8:	02000001 	andeq	r0, r0, #1
     ddc:	0a58097b 	beq	16033d0 <startup-0x1e9fcc30>
     de0:	00402000 	subeq	r2, r0, r0
     de4:	9c010000 	stcls	0, cr0, [r1], {-0}
     de8:	00000e0b 	andeq	r0, r0, fp, lsl #28
     dec:	000a4924 	andeq	r4, sl, r4, lsr #18
     df0:	097b0200 	ldmdbeq	fp!, {r9}^
     df4:	0000030b 	andeq	r0, r0, fp, lsl #6
     df8:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
     dfc:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     e00:	9c097b02 			; <UNDEFINED> instruction: 0x9c097b02
     e04:	02000006 	andeq	r0, r0, #6
     e08:	23007391 	movwcs	r7, #913	; 0x391
     e0c:	00000274 	andeq	r0, r0, r4, ror r2
     e10:	18094502 	stmdane	r9, {r1, r8, sl, lr}
     e14:	4020000a 	eormi	r0, r0, sl
     e18:	01000000 	mrseq	r0, (UNDEF: 0)
     e1c:	000e409c 	muleq	lr, ip, r0
     e20:	03242400 			; <UNDEFINED> instruction: 0x03242400
     e24:	45020000 	strmi	r0, [r2, #-0]
     e28:	00030b09 	andeq	r0, r3, r9, lsl #22
     e2c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     e30:	000ab124 	andeq	fp, sl, r4, lsr #2
     e34:	09450200 	stmdbeq	r5, {r9}^
     e38:	0000069c 	muleq	r0, ip, r6
     e3c:	00739102 	rsbseq	r9, r3, r2, lsl #2
     e40:	0010d223 	andseq	sp, r0, r3, lsr #4
     e44:	092a0200 	stmdbeq	sl!, {r9}
     e48:	200009d8 	ldrdcs	r0, [r0], -r8
     e4c:	00000040 	andeq	r0, r0, r0, asr #32
     e50:	0e759c01 	cdpeq	12, 7, cr9, cr5, cr1, {0}
     e54:	cb240000 	blgt	900e5c <startup-0x1f6ff1a4>
     e58:	0200000f 	andeq	r0, r0, #15
     e5c:	030b092a 	movweq	r0, #47402	; 0xb92a
     e60:	91020000 	mrsls	r0, (UNDEF: 2)
     e64:	0ab12474 	beq	fec4a03c <GPIO_Pins+0xdec48b44>
     e68:	2a020000 	bcs	80e70 <startup-0x1ff7f190>
     e6c:	00069c09 	andeq	r9, r6, r9, lsl #24
     e70:	73910200 	orrsvc	r0, r1, #0, 4
     e74:	0e412300 	cdpeq	3, 4, cr2, cr1, cr0, {0}
     e78:	0d020000 	stceq	0, cr0, [r2, #-0]
     e7c:	00099809 	andeq	r9, r9, r9, lsl #16
     e80:	00004020 	andeq	r4, r0, r0, lsr #32
     e84:	aa9c0100 	bge	fe70128c <GPIO_Pins+0xde6ffd94>
     e88:	2400000e 	strcs	r0, [r0], #-14
     e8c:	00000dca 	andeq	r0, r0, sl, asr #27
     e90:	0b090d02 	bleq	2442a0 <startup-0x1fdbbd60>
     e94:	02000003 	andeq	r0, r0, #3
     e98:	b1247491 			; <UNDEFINED> instruction: 0xb1247491
     e9c:	0200000a 	andeq	r0, r0, #10
     ea0:	069c090d 	ldreq	r0, [ip], sp, lsl #18
     ea4:	91020000 	mrsls	r0, (UNDEF: 2)
     ea8:	b9230073 	stmdblt	r3!, {r0, r1, r4, r5, r6}
     eac:	02000007 	andeq	r0, r0, #7
     eb0:	095808e3 	ldmdbeq	r8, {r0, r1, r5, r6, r7, fp}^
     eb4:	00402000 	subeq	r2, r0, r0
     eb8:	9c010000 	stcls	0, cr0, [r1], {-0}
     ebc:	00000edf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     ec0:	000b2424 	andeq	r2, fp, r4, lsr #8
     ec4:	08e30200 	stmiaeq	r3!, {r9}^
     ec8:	0000030b 	andeq	r0, r0, fp, lsl #6
     ecc:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
     ed0:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     ed4:	9c08e302 	stcls	3, cr14, [r8], {2}
     ed8:	02000006 	andeq	r0, r0, #6
     edc:	23007391 	movwcs	r7, #913	; 0x391
     ee0:	000003a8 	andeq	r0, r0, r8, lsr #7
     ee4:	1808af02 	stmdane	r8, {r1, r8, r9, sl, fp, sp, pc}
     ee8:	40200009 	eormi	r0, r0, r9
     eec:	01000000 	mrseq	r0, (UNDEF: 0)
     ef0:	000f149c 	muleq	pc, ip, r4	; <UNPREDICTABLE>
     ef4:	0a492400 	beq	1249efc <startup-0x1edb6104>
     ef8:	af020000 	svcge	0x00020000
     efc:	00030b08 	andeq	r0, r3, r8, lsl #22
     f00:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f04:	000ab124 	andeq	fp, sl, r4, lsr #2
     f08:	08af0200 	stmiaeq	pc!, {r9}	; <UNPREDICTABLE>
     f0c:	0000069c 	muleq	r0, ip, r6
     f10:	00739102 	rsbseq	r9, r3, r2, lsl #2
     f14:	000ba323 	andeq	sl, fp, r3, lsr #6
     f18:	08760200 	ldmdaeq	r6!, {r9}^
     f1c:	200008d8 	ldrdcs	r0, [r0], -r8
     f20:	00000040 	andeq	r0, r0, r0, asr #32
     f24:	0f499c01 	svceq	0x00499c01
     f28:	24240000 	strtcs	r0, [r4], #-0
     f2c:	02000003 	andeq	r0, r0, #3
     f30:	030b0876 	movweq	r0, #47222	; 0xb876
     f34:	91020000 	mrsls	r0, (UNDEF: 2)
     f38:	0ab12474 	beq	fec4a110 <GPIO_Pins+0xdec48c18>
     f3c:	76020000 	strvc	r0, [r2], -r0
     f40:	00069c08 	andeq	r9, r6, r8, lsl #24
     f44:	73910200 	orrsvc	r0, r1, #0, 4
     f48:	01a22300 			; <UNDEFINED> instruction: 0x01a22300
     f4c:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
     f50:	00089808 	andeq	r9, r8, r8, lsl #16
     f54:	00004020 	andeq	r4, r0, r0, lsr #32
     f58:	7e9c0100 	fmlvce	f0, f4, f0
     f5c:	2400000f 	strcs	r0, [r0], #-15
     f60:	00000fcb 	andeq	r0, r0, fp, asr #31
     f64:	0b085802 	bleq	216f74 <startup-0x1fde908c>
     f68:	02000003 	andeq	r0, r0, #3
     f6c:	b1247491 			; <UNDEFINED> instruction: 0xb1247491
     f70:	0200000a 	andeq	r0, r0, #10
     f74:	069c0858 			; <UNDEFINED> instruction: 0x069c0858
     f78:	91020000 	mrsls	r0, (UNDEF: 2)
     f7c:	ff230073 			; <UNDEFINED> instruction: 0xff230073
     f80:	0200000f 	andeq	r0, r0, #15
     f84:	08580838 	ldmdaeq	r8, {r3, r4, r5, fp}^
     f88:	00402000 	subeq	r2, r0, r0
     f8c:	9c010000 	stcls	0, cr0, [r1], {-0}
     f90:	00000fb3 			; <UNDEFINED> instruction: 0x00000fb3
     f94:	000dca24 	andeq	ip, sp, r4, lsr #20
     f98:	08380200 	ldmdaeq	r8!, {r9}
     f9c:	0000030b 	andeq	r0, r0, fp, lsl #6
     fa0:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
     fa4:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     fa8:	9c083802 	stcls	8, cr3, [r8], {2}
     fac:	02000006 	andeq	r0, r0, #6
     fb0:	23007391 	movwcs	r7, #913	; 0x391
     fb4:	0000015c 	andeq	r0, r0, ip, asr r1
     fb8:	3c080e02 	stccc	14, cr0, [r8], {2}
     fbc:	1c200008 	stcne	0, cr0, [r0], #-32	; 0xffffffe0
     fc0:	01000000 	mrseq	r0, (UNDEF: 0)
     fc4:	000fd99c 	muleq	pc, ip, r9	; <UNPREDICTABLE>
     fc8:	10b32400 	adcsne	r2, r3, r0, lsl #8
     fcc:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     fd0:	00030b08 	andeq	r0, r3, r8, lsl #22
     fd4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     fd8:	02402300 	subeq	r2, r0, #0, 6
     fdc:	8e020000 	cdphi	0, 0, cr0, cr2, cr0, {0}
     fe0:	00080007 	andeq	r0, r8, r7
     fe4:	00003c20 	andeq	r3, r0, r0, lsr #24
     fe8:	0e9c0100 	fmleqe	f0, f4, f0
     fec:	24000010 	strcs	r0, [r0], #-16
     ff0:	000007df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     ff4:	0b078e02 	bleq	1e4804 <startup-0x1fe1b7fc>
     ff8:	02000003 	andeq	r0, r0, #3
     ffc:	9b266c91 	blls	99c248 <startup-0x1f663db8>
    1000:	0200000d 	andeq	r0, r0, #13
    1004:	030b0790 	movweq	r0, #46992	; 0xb790
    1008:	91020000 	mrsls	r0, (UNDEF: 2)
    100c:	00230074 	eoreq	r0, r3, r4, ror r0
    1010:	02000002 	andeq	r0, r0, #2
    1014:	07c0072b 	strbeq	r0, [r0, fp, lsr #14]
    1018:	00402000 	subeq	r2, r0, r0
    101c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1020:	00001043 	andeq	r1, r0, r3, asr #32
    1024:	0007d024 	andeq	sp, r7, r4, lsr #32
    1028:	072b0200 	streq	r0, [fp, -r0, lsl #4]!
    102c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1030:	266c9102 	strbtcs	r9, [ip], -r2, lsl #2
    1034:	00000d9b 	muleq	r0, fp, sp
    1038:	0b072d02 	bleq	1cc448 <startup-0x1fe33bb8>
    103c:	02000003 	andeq	r0, r0, #3
    1040:	23007491 	movwcs	r7, #1169	; 0x491
    1044:	0000093d 	andeq	r0, r0, sp, lsr r9
    1048:	84070b02 	strhi	r0, [r7], #-2818	; 0xfffff4fe
    104c:	3c200007 	stccc	0, cr0, [r0], #-28	; 0xffffffe4
    1050:	01000000 	mrseq	r0, (UNDEF: 0)
    1054:	0010789c 	mulseq	r0, ip, r8
    1058:	03082400 	movweq	r2, #33792	; 0x8400
    105c:	0b020000 	bleq	81064 <startup-0x1ff7ef9c>
    1060:	00030b07 	andeq	r0, r3, r7, lsl #22
    1064:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1068:	000d9b26 	andeq	r9, sp, r6, lsr #22
    106c:	070d0200 	streq	r0, [sp, -r0, lsl #4]
    1070:	0000030b 	andeq	r0, r0, fp, lsl #6
    1074:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1078:	0002cb23 	andeq	ip, r2, r3, lsr #22
    107c:	06ea0200 	strbteq	r0, [sl], r0, lsl #4
    1080:	20000748 	andcs	r0, r0, r8, asr #14
    1084:	0000003c 	andeq	r0, r0, ip, lsr r0
    1088:	10ad9c01 	adcne	r9, sp, r1, lsl #24
    108c:	ee240000 	cdp	0, 2, cr0, cr4, cr0, {0}
    1090:	02000007 	andeq	r0, r0, #7
    1094:	030b06ea 	movweq	r0, #46826	; 0xb6ea
    1098:	91020000 	mrsls	r0, (UNDEF: 2)
    109c:	0d9b266c 	ldceq	6, cr2, [fp, #432]	; 0x1b0
    10a0:	ec020000 	stc	0, cr0, [r2], {-0}
    10a4:	00030b06 	andeq	r0, r3, r6, lsl #22
    10a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    10ac:	06a92300 	strteq	r2, [r9], r0, lsl #6
    10b0:	c6020000 	strgt	r0, [r2], -r0
    10b4:	00070c06 	andeq	r0, r7, r6, lsl #24
    10b8:	00003c20 	andeq	r3, r0, r0, lsr #24
    10bc:	e29c0100 	adds	r0, ip, #0, 2
    10c0:	24000010 	strcs	r0, [r0], #-16
    10c4:	00000b03 	andeq	r0, r0, r3, lsl #22
    10c8:	0b06c602 	bleq	1b28d8 <startup-0x1fe4d728>
    10cc:	02000003 	andeq	r0, r0, #3
    10d0:	9b266c91 	blls	99c31c <startup-0x1f663ce4>
    10d4:	0200000d 	andeq	r0, r0, #13
    10d8:	030b06c8 	movweq	r0, #46792	; 0xb6c8
    10dc:	91020000 	mrsls	r0, (UNDEF: 2)
    10e0:	57230074 			; <UNDEFINED> instruction: 0x57230074
    10e4:	02000000 	andeq	r0, r0, #0
    10e8:	06f006ab 	ldrbteq	r0, [r0], fp, lsr #13
    10ec:	001c2000 	andseq	r2, ip, r0
    10f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    10f4:	00001108 	andeq	r1, r0, r8, lsl #2
    10f8:	00088624 	andeq	r8, r8, r4, lsr #12
    10fc:	06ab0200 	strteq	r0, [fp], r0, lsl #4
    1100:	0000030b 	andeq	r0, r0, fp, lsl #6
    1104:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1108:	000bd223 	andeq	sp, fp, r3, lsr #4
    110c:	05ef0200 	strbeq	r0, [pc, #512]!	; 1314 <startup-0x1fffecec>
    1110:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    1114:	00000020 	andeq	r0, r0, r0, lsr #32
    1118:	112e9c01 			; <UNDEFINED> instruction: 0x112e9c01
    111c:	b1240000 			; <UNDEFINED> instruction: 0xb1240000
    1120:	0200000a 	andeq	r0, r0, #10
    1124:	069c05ef 	ldreq	r0, [ip], pc, ror #11
    1128:	91020000 	mrsls	r0, (UNDEF: 2)
    112c:	98230077 	stmdals	r3!, {r0, r1, r2, r4, r5, r6}
    1130:	0200000f 	andeq	r0, r0, #15
    1134:	06b005de 	ssateq	r0, #17, lr, asr #11
    1138:	00202000 	eoreq	r2, r0, r0
    113c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1140:	00001154 	andeq	r1, r0, r4, asr r1
    1144:	000ab124 	andeq	fp, sl, r4, lsr #2
    1148:	05de0200 	ldrbeq	r0, [lr, #512]	; 0x200
    114c:	0000069c 	muleq	r0, ip, r6
    1150:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1154:	000a5823 	andeq	r5, sl, r3, lsr #16
    1158:	05be0200 	ldreq	r0, [lr, #512]!	; 0x200
    115c:	20000650 	andcs	r0, r0, r0, asr r6
    1160:	00000060 	andeq	r0, r0, r0, rrx
    1164:	11899c01 	orrne	r9, r9, r1, lsl #24
    1168:	46240000 	strtmi	r0, [r4], -r0
    116c:	02000001 	andeq	r0, r0, #1
    1170:	030b05be 	movweq	r0, #46526	; 0xb5be
    1174:	91020000 	mrsls	r0, (UNDEF: 2)
    1178:	0d9b266c 	ldceq	6, cr2, [fp, #432]	; 0x1b0
    117c:	c0020000 	andgt	r0, r2, r0
    1180:	00030b05 	andeq	r0, r3, r5, lsl #22
    1184:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1188:	00682900 	rsbeq	r2, r8, r0, lsl #18
    118c:	25020000 	strcs	r0, [r2, #-0]
    1190:	0004f805 	andeq	pc, r4, r5, lsl #16
    1194:	00015820 	andeq	r5, r1, r0, lsr #16
    1198:	099c0100 	ldmibeq	ip, {r8}
    119c:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    11a0:	000009d4 	ldrdeq	r0, [r0], -r4
    11a4:	09052502 	stmdbeq	r5, {r1, r8, sl, sp}
    11a8:	02000012 	andeq	r0, r0, #18
    11ac:	74285c91 	strtvc	r5, [r8], #-3217	; 0xfffff36f
    11b0:	0200706d 	andeq	r7, r0, #109	; 0x6d
    11b4:	030b0527 	movweq	r0, #46375	; 0xb527
    11b8:	91020000 	mrsls	r0, (UNDEF: 2)
    11bc:	10cc2670 	sbcne	r2, ip, r0, ror r6
    11c0:	27020000 	strcs	r0, [r2, -r0]
    11c4:	00030b05 	andeq	r0, r3, r5, lsl #22
    11c8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    11cc:	000f0126 	andeq	r0, pc, r6, lsr #2
    11d0:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    11d4:	0000030b 	andeq	r0, r0, fp, lsl #6
    11d8:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    11dc:	00000000 	andeq	r0, r0, r0
    11e0:	0b052702 	bleq	14adf0 <startup-0x1feb5210>
    11e4:	02000003 	andeq	r0, r0, #3
    11e8:	a4266891 	strtge	r6, [r6], #-2193	; 0xfffff76f
    11ec:	02000005 	andeq	r0, r0, #5
    11f0:	030b0527 	movweq	r0, #46375	; 0xb527
    11f4:	91020000 	mrsls	r0, (UNDEF: 2)
    11f8:	11402664 	cmpne	r0, r4, ror #12
    11fc:	27020000 	strcs	r0, [r2, -r0]
    1200:	00030b05 	andeq	r0, r3, r5, lsl #22
    1204:	60910200 	addsvs	r0, r1, r0, lsl #4
    1208:	84042a00 	strhi	r2, [r4], #-2560	; 0xfffff600
    120c:	23000009 	movwcs	r0, #9
    1210:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    1214:	bc04f102 	stfltd	f7, [r4], {2}
    1218:	3c200004 	stccc	0, cr0, [r0], #-16
    121c:	01000000 	mrseq	r0, (UNDEF: 0)
    1220:	0012449c 	mulseq	r2, ip, r4
    1224:	017f2400 	cmneq	pc, r0, lsl #8
    1228:	f1020000 	cps	#0
    122c:	00030b04 	andeq	r0, r3, r4, lsl #22
    1230:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1234:	000d9b26 	andeq	r9, sp, r6, lsr #22
    1238:	04f30200 	ldrbteq	r0, [r3], #512	; 0x200
    123c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1240:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1244:	0008b223 	andeq	fp, r8, r3, lsr #4
    1248:	04d20200 	ldrbeq	r0, [r2], #512	; 0x200
    124c:	20000484 	andcs	r0, r0, r4, lsl #9
    1250:	00000038 	andeq	r0, r0, r8, lsr r0
    1254:	12799c01 	rsbsne	r9, r9, #256	; 0x100
    1258:	7f240000 	svcvc	0x00240000
    125c:	02000001 	andeq	r0, r0, #1
    1260:	030b04d2 	movweq	r0, #46290	; 0xb4d2
    1264:	91020000 	mrsls	r0, (UNDEF: 2)
    1268:	0d9b266c 	ldceq	6, cr2, [fp, #432]	; 0x1b0
    126c:	d4020000 	strle	r0, [r2], #-0
    1270:	00030b04 	andeq	r0, r3, r4, lsl #22
    1274:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1278:	06502300 	ldrbeq	r2, [r0], -r0, lsl #6
    127c:	b3020000 	movwlt	r0, #8192	; 0x2000
    1280:	00045004 	andeq	r5, r4, r4
    1284:	00003420 	andeq	r3, r0, r0, lsr #8
    1288:	ae9c0100 	fmlgee	f0, f4, f0
    128c:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    1290:	0000056a 	andeq	r0, r0, sl, ror #10
    1294:	0b04b302 	bleq	12dea4 <startup-0x1fed215c>
    1298:	02000003 	andeq	r0, r0, #3
    129c:	9b266c91 	blls	99c4e8 <startup-0x1f663b18>
    12a0:	0200000d 	andeq	r0, r0, #13
    12a4:	030b04b5 	movweq	r0, #46261	; 0xb4b5
    12a8:	91020000 	mrsls	r0, (UNDEF: 2)
    12ac:	ea2b0074 	b	ac1484 <startup-0x1f53eb7c>
    12b0:	02000002 	andeq	r0, r0, #2
    12b4:	02d1049a 	sbcseq	r0, r1, #-1711276032	; 0x9a000000
    12b8:	04340000 	ldrteq	r0, [r4], #-0
    12bc:	001c2000 	andseq	r2, ip, r0
    12c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    12c4:	0010ff23 	andseq	pc, r0, r3, lsr #30
    12c8:	047d0200 	ldrbteq	r0, [sp], #-512	; 0xfffffe00
    12cc:	20000400 	andcs	r0, r0, r0, lsl #8
    12d0:	00000034 	andeq	r0, r0, r4, lsr r0
    12d4:	12f99c01 	rscsne	r9, r9, #256	; 0x100
    12d8:	77240000 	strvc	r0, [r4, -r0]!
    12dc:	02000003 	andeq	r0, r0, #3
    12e0:	030b047d 	movweq	r0, #46205	; 0xb47d
    12e4:	91020000 	mrsls	r0, (UNDEF: 2)
    12e8:	0d9b266c 	ldceq	6, cr2, [fp, #432]	; 0x1b0
    12ec:	7f020000 	svcvc	0x00020000
    12f0:	00030b04 	andeq	r0, r3, r4, lsl #22
    12f4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    12f8:	08722300 	ldmdaeq	r2!, {r8, r9, sp}^
    12fc:	b5020000 	strlt	r0, [r2, #-0]
    1300:	0003c403 	andeq	ip, r3, r3, lsl #8
    1304:	00003c20 	andeq	r3, r0, r0, lsr #24
    1308:	3d9c0100 	ldfccs	f0, [ip]
    130c:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    1310:	00000c14 	andeq	r0, r0, r4, lsl ip
    1314:	0b03b502 	bleq	ee724 <startup-0x1ff118dc>
    1318:	02000003 	andeq	r0, r0, #3
    131c:	4c246c91 	stcmi	12, cr6, [r4], #-580	; 0xfffffdbc
    1320:	02000003 	andeq	r0, r0, #3
    1324:	030b03b5 	movweq	r0, #46005	; 0xb3b5
    1328:	91020000 	mrsls	r0, (UNDEF: 2)
    132c:	0d9b2668 	ldceq	6, cr2, [fp, #416]	; 0x1a0
    1330:	b7020000 	strlt	r0, [r2, -r0]
    1334:	00030b03 	andeq	r0, r3, r3, lsl #22
    1338:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    133c:	07452300 	strbeq	r2, [r5, -r0, lsl #6]
    1340:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    1344:	00038403 	andeq	r8, r3, r3, lsl #8
    1348:	00004020 	andeq	r4, r0, r0, lsr #32
    134c:	819c0100 	orrshi	r0, ip, r0, lsl #2
    1350:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    1354:	00000b94 	muleq	r0, r4, fp
    1358:	0b038802 	bleq	e3368 <startup-0x1ff1cc98>
    135c:	02000003 	andeq	r0, r0, #3
    1360:	9a246c91 	bls	91c5ac <startup-0x1f6e3a54>
    1364:	0200000c 	andeq	r0, r0, #12
    1368:	030b0388 	movweq	r0, #45960	; 0xb388
    136c:	91020000 	mrsls	r0, (UNDEF: 2)
    1370:	0d9b2668 	ldceq	6, cr2, [fp, #416]	; 0x1a0
    1374:	8a020000 	bhi	8137c <startup-0x1ff7ec84>
    1378:	00030b03 	andeq	r0, r3, r3, lsl #22
    137c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1380:	0ae82300 	beq	ffa09f88 <GPIO_Pins+0xdfa08a90>
    1384:	6f020000 	svcvs	0x00020000
    1388:	00036403 	andeq	r6, r3, r3, lsl #8
    138c:	00002020 	andeq	r2, r0, r0, lsr #32
    1390:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    1394:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    1398:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
    139c:	9c036f02 	stcls	15, cr6, [r3], {2}
    13a0:	02000006 	andeq	r0, r0, #6
    13a4:	23007791 	movwcs	r7, #1937	; 0x791
    13a8:	000010e9 	andeq	r1, r0, r9, ror #1
    13ac:	44035d02 	strmi	r5, [r3], #-3330	; 0xfffff2fe
    13b0:	20200003 	eorcs	r0, r0, r3
    13b4:	01000000 	mrseq	r0, (UNDEF: 0)
    13b8:	0013cd9c 	mulseq	r3, ip, sp
    13bc:	0ab12400 	beq	fec4a3c4 <GPIO_Pins+0xdec48ecc>
    13c0:	5d020000 	stcpl	0, cr0, [r2, #-0]
    13c4:	00069c03 	andeq	r9, r6, r3, lsl #24
    13c8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    13cc:	06cf2300 	strbeq	r2, [pc], r0, lsl #6
    13d0:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    13d4:	00031403 	andeq	r1, r3, r3, lsl #8
    13d8:	00003020 	andeq	r3, r0, r0, lsr #32
    13dc:	119c0100 	orrsne	r0, ip, r0, lsl #2
    13e0:	24000014 	strcs	r0, [r0], #-20	; 0xffffffec
    13e4:	00000b7c 	andeq	r0, r0, ip, ror fp
    13e8:	0b034902 	bleq	d37f8 <startup-0x1ff2c808>
    13ec:	02000003 	andeq	r0, r0, #3
    13f0:	84247491 	strthi	r7, [r4], #-1169	; 0xfffffb6f
    13f4:	0200000b 	andeq	r0, r0, #11
    13f8:	030b0349 	movweq	r0, #45897	; 0xb349
    13fc:	91020000 	mrsls	r0, (UNDEF: 2)
    1400:	0b8c2470 	bleq	fe30a5c8 <GPIO_Pins+0xde3090d0>
    1404:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    1408:	00030b03 	andeq	r0, r3, r3, lsl #22
    140c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1410:	01712300 	cmneq	r1, r0, lsl #6
    1414:	dc020000 	stcle	0, cr0, [r2], {-0}
    1418:	0002f402 	andeq	pc, r2, r2, lsl #8
    141c:	00002020 	andeq	r2, r0, r0, lsr #32
    1420:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    1424:	24000014 	strcs	r0, [r0], #-20	; 0xffffffec
    1428:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
    142c:	9c02dc02 	stcls	12, cr13, [r2], {2}
    1430:	02000006 	andeq	r0, r0, #6
    1434:	23007791 	movwcs	r7, #1937	; 0x791
    1438:	00001029 	andeq	r1, r0, r9, lsr #32
    143c:	cc025102 	stfgts	f5, [r2], {2}
    1440:	28200002 	stmdacs	r0!, {r1}
    1444:	01000000 	mrseq	r0, (UNDEF: 0)
    1448:	00146c9c 	mulseq	r4, ip, ip
    144c:	0f522400 	svceq	0x00522400
    1450:	51020000 	mrspl	r0, (UNDEF: 2)
    1454:	00030b02 	andeq	r0, r3, r2, lsl #22
    1458:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    145c:	000f7724 	andeq	r7, pc, r4, lsr #14
    1460:	02510200 	subseq	r0, r1, #0, 4
    1464:	0000030b 	andeq	r0, r0, fp, lsl #6
    1468:	00709102 	rsbseq	r9, r0, r2, lsl #2
    146c:	000bc723 	andeq	ip, fp, r3, lsr #14
    1470:	02330200 	eorseq	r0, r3, #0, 4
    1474:	200002ac 	andcs	r0, r0, ip, lsr #5
    1478:	00000020 	andeq	r0, r0, r0, lsr #32
    147c:	14929c01 	ldrne	r9, [r2], #3073	; 0xc01
    1480:	b1240000 			; <UNDEFINED> instruction: 0xb1240000
    1484:	0200000a 	andeq	r0, r0, #10
    1488:	069c0233 			; <UNDEFINED> instruction: 0x069c0233
    148c:	91020000 	mrsls	r0, (UNDEF: 2)
    1490:	32230077 	eorcc	r0, r3, #119	; 0x77
    1494:	02000011 	andeq	r0, r0, #17
    1498:	0270021b 	rsbseq	r0, r0, #-1342177279	; 0xb0000001
    149c:	003c2000 	eorseq	r2, ip, r0
    14a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    14a4:	000014f4 	strdeq	r1, [r0], -r4
    14a8:	00039a24 	andeq	r9, r3, r4, lsr #20
    14ac:	021b0200 	andseq	r0, fp, #0, 4
    14b0:	0000030b 	andeq	r0, r0, fp, lsl #6
    14b4:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
    14b8:	00000585 	andeq	r0, r0, r5, lsl #11
    14bc:	0b021b02 	bleq	880cc <startup-0x1ff77f34>
    14c0:	02000003 	andeq	r0, r0, #3
    14c4:	8a247091 	bhi	91d710 <startup-0x1f6e28f0>
    14c8:	02000005 	andeq	r0, r0, #5
    14cc:	030b021b 	movweq	r0, #45595	; 0xb21b
    14d0:	91020000 	mrsls	r0, (UNDEF: 2)
    14d4:	058f246c 	streq	r2, [pc, #1132]	; 1948 <startup-0x1fffe6b8>
    14d8:	1b020000 	blne	814e0 <startup-0x1ff7eb20>
    14dc:	00030b02 	andeq	r0, r3, r2, lsl #22
    14e0:	68910200 	ldmvs	r1, {r9}
    14e4:	00059424 	andeq	r9, r5, r4, lsr #8
    14e8:	021b0200 	andseq	r0, fp, #0, 4
    14ec:	0000030b 	andeq	r0, r0, fp, lsl #6
    14f0:	00009102 	andeq	r9, r0, r2, lsl #2
    14f4:	00059923 	andeq	r9, r5, r3, lsr #18
    14f8:	01b80200 			; <UNDEFINED> instruction: 0x01b80200
    14fc:	20000250 	andcs	r0, r0, r0, asr r2
    1500:	00000020 	andeq	r0, r0, r0, lsr #32
    1504:	151a9c01 	ldrne	r9, [sl, #-3073]	; 0xfffff3ff
    1508:	b1240000 			; <UNDEFINED> instruction: 0xb1240000
    150c:	0200000a 	andeq	r0, r0, #10
    1510:	069c01b8 			; <UNDEFINED> instruction: 0x069c01b8
    1514:	91020000 	mrsls	r0, (UNDEF: 2)
    1518:	3f230077 	svccc	0x00230077
    151c:	02000004 	andeq	r0, r0, #4
    1520:	020c0190 	andeq	r0, ip, #144, 2	; 0x24
    1524:	00442000 	subeq	r2, r4, r0
    1528:	9c010000 	stcls	0, cr0, [r1], {-0}
    152c:	00001540 	andeq	r1, r0, r0, asr #10
    1530:	00068f24 	andeq	r8, r6, r4, lsr #30
    1534:	01900200 	orrseq	r0, r0, r0, lsl #4
    1538:	000002d1 	ldrdeq	r0, [r0], -r1
    153c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1540:	000a0223 	andeq	r0, sl, r3, lsr #4
    1544:	01770200 	cmneq	r7, r0, lsl #4
    1548:	200001ec 	andcs	r0, r0, ip, ror #3
    154c:	00000020 	andeq	r0, r0, r0, lsr #32
    1550:	15669c01 	strbne	r9, [r6, #-3073]!	; 0xfffff3ff
    1554:	b1240000 			; <UNDEFINED> instruction: 0xb1240000
    1558:	0200000a 	andeq	r0, r0, #10
    155c:	069c0177 			; <UNDEFINED> instruction: 0x069c0177
    1560:	91020000 	mrsls	r0, (UNDEF: 2)
    1564:	16230077 			; <UNDEFINED> instruction: 0x16230077
    1568:	0200000a 	andeq	r0, r0, #10
    156c:	01ae0153 			; <UNDEFINED> instruction: 0x01ae0153
    1570:	003e2000 	eorseq	r2, lr, r0
    1574:	9c010000 	stcls	0, cr0, [r1], {-0}
    1578:	0000159b 	muleq	r0, fp, r5
    157c:	000a2024 	andeq	r2, sl, r4, lsr #32
    1580:	01530200 	cmpeq	r3, r0, lsl #4
    1584:	000002d1 	ldrdeq	r0, [r0], -r1
    1588:	266f9102 	strbtcs	r9, [pc], -r2, lsl #2
    158c:	00000d9b 	muleq	r0, fp, sp
    1590:	0b015502 	bleq	569a0 <startup-0x1ffa9660>
    1594:	02000003 	andeq	r0, r0, #3
    1598:	2c007491 	cfstrscs	mvf7, [r0], {145}	; 0x91
    159c:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
    15a0:	c3013402 	movwgt	r3, #5122	; 0x1402
    15a4:	50000006 	andpl	r0, r0, r6
    15a8:	5e200001 	cdppl	0, 2, cr0, cr0, cr1, {0}
    15ac:	01000000 	mrseq	r0, (UNDEF: 0)
    15b0:	0015e39c 	mulseq	r5, ip, r3
    15b4:	06c02600 	strbeq	r2, [r0], r0, lsl #12
    15b8:	36020000 	strcc	r0, [r2], -r0
    15bc:	00031601 	andeq	r1, r3, r1, lsl #12
    15c0:	68910200 	ldmvs	r1, {r9}
    15c4:	000ddc26 	andeq	sp, sp, r6, lsr #24
    15c8:	01370200 	teqeq	r7, r0, lsl #4
    15cc:	000006c3 	andeq	r0, r0, r3, asr #13
    15d0:	266f9102 	strbtcs	r9, [pc], -r2, lsl #2
    15d4:	00000dd9 	ldrdeq	r0, [r0], -r9
    15d8:	69013802 	stmdbvs	r1, {r1, fp, ip, sp}
    15dc:	02000006 	andeq	r0, r0, #6
    15e0:	23006e91 	movwcs	r6, #3729	; 0xe91
    15e4:	0000066d 	andeq	r0, r0, sp, ror #12
    15e8:	28011c02 	stmdacs	r1, {r1, sl, fp, ip}
    15ec:	28200001 	stmdacs	r0!, {r0}
    15f0:	01000000 	mrseq	r0, (UNDEF: 0)
    15f4:	0016099c 	mulseq	r6, ip, r9
    15f8:	073d2400 	ldreq	r2, [sp, -r0, lsl #8]!
    15fc:	1c020000 	stcne	0, cr0, [r2], {-0}
    1600:	0002d101 	andeq	sp, r2, r1, lsl #2
    1604:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1608:	02c02200 	sbceq	r2, r0, #0, 4
    160c:	e1020000 	mrs	r0, (UNDEF: 2)
    1610:	200000b8 	strhcs	r0, [r0], -r8
    1614:	00000070 	andeq	r0, r0, r0, ror r0
    1618:	2d2d9c01 	stccs	12, cr9, [sp, #-4]!
    161c:	0100000d 	tsteq	r0, sp
    1620:	030b06e0 	movweq	r0, #46816	; 0xb6e0
    1624:	00700000 	rsbseq	r0, r0, r0
    1628:	00482000 	subeq	r2, r8, r0
    162c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1630:	00001644 	andeq	r1, r0, r4, asr #12
    1634:	0008d824 	andeq	sp, r8, r4, lsr #16
    1638:	06e00100 	strbteq	r0, [r0], r0, lsl #2
    163c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1640:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1644:	000fac2e 	andeq	sl, pc, lr, lsr #24
    1648:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    164c:	20000010 	andcs	r0, r0, r0, lsl r0
    1650:	00000060 	andeq	r0, r0, r0, rrx
    1654:	40249c01 	eormi	r9, r4, r1, lsl #24
    1658:	0100000f 	tsteq	r0, pc
    165c:	025a065d 	subseq	r0, sl, #97517568	; 0x5d00000
    1660:	91020000 	mrsls	r0, (UNDEF: 2)
    1664:	0ebd2477 	mrceq	4, 5, r2, cr13, cr7, {3}
    1668:	5d010000 	stcpl	0, cr0, [r1, #-0]
    166c:	00030b06 	andeq	r0, r3, r6, lsl #22
    1670:	70910200 	addsvc	r0, r1, r0, lsl #4
    1674:	06230000 	strteq	r0, [r3], -r0
    1678:	00040000 	andeq	r0, r4, r0
    167c:	000002ef 	andeq	r0, r0, pc, ror #5
    1680:	05b80104 	ldreq	r0, [r8, #260]!	; 0x104
    1684:	980c0000 	stmdals	ip, {}	; <UNPREDICTABLE>
    1688:	ec000012 	stc	0, cr0, [r0], {18}
    168c:	bc000011 	stclt	0, cr0, [r0], {17}
    1690:	0e20000e 	cdpeq	0, 2, cr0, cr0, cr14, {0}
    1694:	3b000005 	blcc	16b0 <startup-0x1fffe950>
    1698:	02000004 	andeq	r0, r0, #4
    169c:	03d50601 	bicseq	r0, r5, #1048576	; 0x100000
    16a0:	b9030000 	stmdblt	r3, {}	; <UNPREDICTABLE>
    16a4:	02000001 	andeq	r0, r0, #1
    16a8:	0000372b 	andeq	r3, r0, fp, lsr #14
    16ac:	08010200 	stmdaeq	r1, {r9}
    16b0:	000003d3 	ldrdeq	r0, [r0], -r3
    16b4:	aa050202 	bge	141ec4 <startup-0x1febe13c>
    16b8:	0300000e 	movweq	r0, #14
    16bc:	000004e2 	andeq	r0, r0, r2, ror #9
    16c0:	00503902 	subseq	r3, r0, r2, lsl #18
    16c4:	02020000 	andeq	r0, r2, #0
    16c8:	00101607 	andseq	r1, r0, r7, lsl #12
    16cc:	10a90300 	adcne	r0, r9, r0, lsl #6
    16d0:	4d020000 	stcmi	0, cr0, [r2, #-0]
    16d4:	00000062 	andeq	r0, r0, r2, rrx
    16d8:	66050402 	strvs	r0, [r5], -r2, lsl #8
    16dc:	03000009 	movweq	r0, #9
    16e0:	0000090f 	andeq	r0, r0, pc, lsl #18
    16e4:	00744f02 	rsbseq	r4, r4, r2, lsl #30
    16e8:	04020000 	streq	r0, [r2], #-0
    16ec:	000c8807 	andeq	r8, ip, r7, lsl #16
    16f0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    16f4:	00000961 	andeq	r0, r0, r1, ror #18
    16f8:	83070802 	movwhi	r0, #30722	; 0x7802
    16fc:	0400000c 	streq	r0, [r0], #-12
    1700:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1704:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1708:	000c8d07 	andeq	r8, ip, r7, lsl #26
    170c:	01bb0300 			; <UNDEFINED> instruction: 0x01bb0300
    1710:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    1714:	0000002c 	andeq	r0, r0, ip, lsr #32
    1718:	0004e403 	andeq	lr, r4, r3, lsl #8
    171c:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
    1720:	05000000 	streq	r0, [r0, #-0]
    1724:	000000a2 	andeq	r0, r0, r2, lsr #1
    1728:	0010ab03 	andseq	sl, r0, r3, lsl #22
    172c:	572c0300 	strpl	r0, [ip, -r0, lsl #6]!
    1730:	05000000 	streq	r0, [r0, #-0]
    1734:	000000b2 	strheq	r0, [r0], -r2
    1738:	00091103 	andeq	r1, r9, r3, lsl #2
    173c:	69300300 	ldmdbvs	r0!, {r8, r9}
    1740:	05000000 	streq	r0, [r0, #-0]
    1744:	000000c2 	andeq	r0, r0, r2, asr #1
    1748:	000f4506 	andeq	r4, pc, r6, lsl #10
    174c:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    1750:	000000bd 	strheq	r0, [r0], -sp
    1754:	00081b07 	andeq	r1, r8, r7, lsl #22
    1758:	c23b0500 	eorsgt	r0, fp, #0, 10
    175c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1760:	00370107 	eorseq	r0, r7, r7, lsl #2
    1764:	5f060000 	svcpl	0x00060000
    1768:	00010403 	andeq	r0, r1, r3, lsl #8
    176c:	099f0900 	ldmibeq	pc, {r8, fp}	; <UNPREDICTABLE>
    1770:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1774:	00000efa 	strdeq	r0, [r0], -sl
    1778:	280a0001 	stmdacs	sl, {r0}
    177c:	9005c306 	andls	ip, r5, r6, lsl #6
    1780:	0b000001 	bleq	178c <startup-0x1fffe874>
    1784:	00000fa6 	andeq	r0, r0, r6, lsr #31
    1788:	cd05c506 	cfstr32gt	mvfx12, [r5, #-24]	; 0xffffffe8
    178c:	00000000 	andeq	r0, r0, r0
    1790:	000d8e0b 	andeq	r8, sp, fp, lsl #28
    1794:	05c60600 	strbeq	r0, [r6, #1536]	; 0x600
    1798:	000000cd 	andeq	r0, r0, sp, asr #1
    179c:	08c20b04 	stmiaeq	r2, {r2, r8, r9, fp}^
    17a0:	c7060000 	strgt	r0, [r6, -r0]
    17a4:	0000cd05 	andeq	ip, r0, r5, lsl #26
    17a8:	890b0800 	stmdbhi	fp, {fp}
    17ac:	06000009 	streq	r0, [r0], -r9
    17b0:	00cd05c8 	sbceq	r0, sp, r8, asr #11
    17b4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    17b8:	00524449 	subseq	r4, r2, r9, asr #8
    17bc:	cd05c906 	vstrgt.16	s24, [r5, #-12]	; <UNPREDICTABLE>
    17c0:	10000000 	andne	r0, r0, r0
    17c4:	52444f0c 	subpl	r4, r4, #12, 30	; 0x30
    17c8:	05ca0600 	strbeq	r0, [sl, #1536]	; 0x600
    17cc:	000000cd 	andeq	r0, r0, sp, asr #1
    17d0:	09df0b14 	ldmibeq	pc, {r2, r4, r8, r9, fp}^	; <UNPREDICTABLE>
    17d4:	cb060000 	blgt	1817dc <startup-0x1fe7e824>
    17d8:	0000ad05 	andeq	sl, r0, r5, lsl #26
    17dc:	bc0b1800 	stclt	8, cr1, [fp], {-0}
    17e0:	06000009 	streq	r0, [r0], -r9
    17e4:	00ad05cc 	adceq	r0, sp, ip, asr #11
    17e8:	0b1a0000 	bleq	6817f0 <startup-0x1f97e810>
    17ec:	00000881 	andeq	r0, r0, r1, lsl #17
    17f0:	cd05cd06 	stcgt	13, cr12, [r5, #-24]	; 0xffffffe8
    17f4:	1c000000 	stcne	0, cr0, [r0], {-0}
    17f8:	5246410c 	subpl	r4, r6, #12, 2
    17fc:	05ce0600 	strbeq	r0, [lr, #1536]	; 0x600
    1800:	000001a0 	andeq	r0, r0, r0, lsr #3
    1804:	cd0d0020 	stcgt	0, cr0, [sp, #-128]	; 0xffffff80
    1808:	a0000000 	andge	r0, r0, r0
    180c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1810:	00000090 	muleq	r0, r0, r0
    1814:	90050001 	andls	r0, r5, r1
    1818:	0f000001 	svceq	0x00000001
    181c:	00000f25 	andeq	r0, r0, r5, lsr #30
    1820:	0405cf06 	streq	ip, [r5], #-3846	; 0xfffff0fa
    1824:	10000001 	andne	r0, r0, r1
    1828:	00370107 	eorseq	r0, r7, r7, lsl #2
    182c:	42070000 	andmi	r0, r7, #0
    1830:	000001d7 	ldrdeq	r0, [r0], -r7
    1834:	00085309 	andeq	r5, r8, r9, lsl #6
    1838:	ea090000 	b	241840 <startup-0x1fdbe7c0>
    183c:	01000006 	tsteq	r0, r6
    1840:	00026709 	andeq	r6, r2, r9, lsl #14
    1844:	a3090200 	movwge	r0, #37376	; 0x9200
    1848:	03000002 	movweq	r0, #2
    184c:	0d1c0300 	ldceq	3, cr0, [ip, #-0]
    1850:	47070000 	strmi	r0, [r7, -r0]
    1854:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    1858:	37010710 	smladcc	r1, r0, r7, r0
    185c:	07000000 	streq	r0, [r0, -r0]
    1860:	0001fc4f 	andeq	pc, r1, pc, asr #24
    1864:	04160900 	ldreq	r0, [r6], #-2304	; 0xfffff700
    1868:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    186c:	00000358 	andeq	r0, r0, r8, asr r3
    1870:	0a030001 	beq	c187c <startup-0x1ff3e784>
    1874:	07000001 	streq	r0, [r0, -r1]
    1878:	0001e252 	andeq	lr, r1, r2, asr r2
    187c:	01071000 	mrseq	r1, (UNDEF: 7)
    1880:	00000037 	andeq	r0, r0, r7, lsr r0
    1884:	022d5a07 	eoreq	r5, sp, #28672	; 0x7000
    1888:	05090000 	streq	r0, [r9, #-0]
    188c:	00000005 	andeq	r0, r0, r5
    1890:	00092b09 	andeq	r2, r9, r9, lsl #22
    1894:	22090100 	andcs	r0, r9, #0, 2
    1898:	02000011 	andeq	r0, r0, #17
    189c:	0009e509 	andeq	lr, r9, r9, lsl #10
    18a0:	03000300 	movweq	r0, #768	; 0x300
    18a4:	00000e14 	andeq	r0, r0, r4, lsl lr
    18a8:	02075f07 	andeq	r5, r7, #7, 30
    18ac:	07100000 	ldreq	r0, [r0, -r0]
    18b0:	00003701 	andeq	r3, r0, r1, lsl #14
    18b4:	586e0700 	stmdapl	lr!, {r8, r9, sl}^
    18b8:	09000002 	stmdbeq	r0, {r1}
    18bc:	0000009b 	muleq	r0, fp, r0
    18c0:	0fda0900 	svceq	0x00da0900
    18c4:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    18c8:	000001eb 	andeq	r0, r0, fp, ror #3
    18cc:	84030002 	strhi	r0, [r3], #-2
    18d0:	07000004 	streq	r0, [r0, -r4]
    18d4:	00023872 	andeq	r3, r2, r2, ror r8
    18d8:	01071000 	mrseq	r1, (UNDEF: 7)
    18dc:	00000037 	andeq	r0, r0, r7, lsr r0
    18e0:	027d7a07 	rsbseq	r7, sp, #28672	; 0x7000
    18e4:	8c090000 	stchi	0, cr0, [r9], {-0}
    18e8:	00000011 	andeq	r0, r0, r1, lsl r0
    18ec:	00114c09 	andseq	r4, r1, r9, lsl #24
    18f0:	03000100 	movweq	r0, #256	; 0x100
    18f4:	0000125b 	andeq	r1, r0, fp, asr r2
    18f8:	02637d07 	rsbeq	r7, r3, #448	; 0x1c0
    18fc:	08110000 	ldmdaeq	r1, {}	; <UNPREDICTABLE>
    1900:	02cd8407 	sbceq	r8, sp, #117440512	; 0x7000000
    1904:	38120000 	ldmdacc	r2, {}	; <UNPREDICTABLE>
    1908:	0700000e 	streq	r0, [r0, -lr]
    190c:	0000c286 	andeq	ip, r0, r6, lsl #5
    1910:	da120000 	ble	481918 <startup-0x1fb7e6e8>
    1914:	0700000c 	streq	r0, [r0, -ip]
    1918:	0001d789 	andeq	sp, r1, r9, lsl #15
    191c:	ba120400 	blt	482924 <startup-0x1fb7d6dc>
    1920:	0700000a 	streq	r0, [r0, -sl]
    1924:	00022d8c 	andeq	r2, r2, ip, lsl #27
    1928:	04120500 	ldreq	r0, [r2], #-1280	; 0xfffffb00
    192c:	07000009 	streq	r0, [r0, -r9]
    1930:	0001fc8f 	andeq	pc, r1, pc, lsl #25
    1934:	65120600 	ldrvs	r0, [r2, #-1536]	; 0xfffffa00
    1938:	0700000e 	streq	r0, [r0, -lr]
    193c:	00025892 	muleq	r2, r2, r8
    1940:	03000700 	movweq	r0, #1792	; 0x700
    1944:	00000366 	andeq	r0, r0, r6, ror #6
    1948:	02889407 	addeq	r9, r8, #117440512	; 0x7000000
    194c:	f5130000 			; <UNDEFINED> instruction: 0xf5130000
    1950:	01000012 	tsteq	r0, r2, lsl r0
    1954:	13260243 			; <UNDEFINED> instruction: 0x13260243
    1958:	00a42000 	adceq	r2, r4, r0
    195c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1960:	0000033a 	andeq	r0, r0, sl, lsr r3
    1964:	00127b14 	andseq	r7, r2, r4, lsl fp
    1968:	02430100 	subeq	r0, r3, #0, 2
    196c:	0000033a 	andeq	r0, r0, sl, lsr r3
    1970:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1974:	00001226 	andeq	r1, r0, r6, lsr #4
    1978:	a2024301 	andge	r4, r2, #67108864	; 0x4000000
    197c:	02000000 	andeq	r0, r0, #0
    1980:	68146a91 	ldmdavs	r4, {r0, r4, r7, r9, fp, sp, lr}
    1984:	01000011 	tsteq	r0, r1, lsl r0
    1988:	00970243 	addseq	r0, r7, r3, asr #4
    198c:	91020000 	mrsls	r0, (UNDEF: 2)
    1990:	11701569 	cmnne	r0, r9, ror #10
    1994:	45010000 	strmi	r0, [r1, #-0]
    1998:	0000c202 	andeq	ip, r0, r2, lsl #4
    199c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    19a0:	00129115 	andseq	r9, r2, r5, lsl r1
    19a4:	02460100 	subeq	r0, r6, #0, 2
    19a8:	000000c2 	andeq	r0, r0, r2, asr #1
    19ac:	00709102 	rsbseq	r9, r0, r2, lsl #2
    19b0:	01a50416 			; <UNDEFINED> instruction: 0x01a50416
    19b4:	81130000 	tsthi	r3, r0
    19b8:	01000012 	tsteq	r0, r2, lsl r0
    19bc:	130201f0 	movwne	r0, #8688	; 0x21f0
    19c0:	00242000 	eoreq	r2, r4, r0
    19c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    19c8:	00000375 	andeq	r0, r0, r5, ror r3
    19cc:	00127b14 	andseq	r7, r2, r4, lsl fp
    19d0:	01f00100 	mvnseq	r0, r0, lsl #2
    19d4:	0000033a 	andeq	r0, r0, sl, lsr r3
    19d8:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    19dc:	00000e38 	andeq	r0, r0, r8, lsr lr
    19e0:	a201f001 	andge	pc, r1, #1
    19e4:	02000000 	andeq	r0, r0, #0
    19e8:	13007291 	movwne	r7, #657	; 0x291
    19ec:	00001270 	andeq	r1, r0, r0, ror r2
    19f0:	e401e001 	str	lr, [r1], #-1
    19f4:	1e200012 	miane	acc0, r2, r0
    19f8:	01000000 	mrseq	r0, (UNDEF: 0)
    19fc:	0003aa9c 	muleq	r3, ip, sl
    1a00:	127b1400 	rsbsne	r1, fp, #0, 8
    1a04:	e0010000 	and	r0, r1, r0
    1a08:	00033a01 	andeq	r3, r3, r1, lsl #20
    1a0c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a10:	00121e14 	andseq	r1, r2, r4, lsl lr
    1a14:	01e00100 	mvneq	r0, r0, lsl #2
    1a18:	000000a2 	andeq	r0, r0, r2, lsr #1
    1a1c:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1a20:	00119613 	andseq	r9, r1, r3, lsl r6
    1a24:	01c70100 	biceq	r0, r7, r0, lsl #2
    1a28:	200012aa 	andcs	r1, r0, sl, lsr #5
    1a2c:	0000003a 	andeq	r0, r0, sl, lsr r0
    1a30:	03ee9c01 	mvneq	r9, #256	; 0x100
    1a34:	7b140000 	blvc	501a3c <startup-0x1fafe5c4>
    1a38:	01000012 	tsteq	r0, r2, lsl r0
    1a3c:	033a01c7 	teqeq	sl, #-1073741775	; 0xc0000031
    1a40:	91020000 	mrsls	r0, (UNDEF: 2)
    1a44:	0e381474 	mrceq	4, 1, r1, cr8, cr4, {3}
    1a48:	c7010000 	strgt	r0, [r1, -r0]
    1a4c:	0000a201 	andeq	sl, r0, r1, lsl #4
    1a50:	72910200 	addsvc	r0, r1, #0, 4
    1a54:	00118514 	andseq	r8, r1, r4, lsl r5
    1a58:	01c70100 	biceq	r0, r7, r0, lsl #2
    1a5c:	0000027d 	andeq	r0, r0, sp, ror r2
    1a60:	00719102 	rsbseq	r9, r1, r2, lsl #2
    1a64:	0011bb13 	andseq	fp, r1, r3, lsl fp
    1a68:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    1a6c:	2000128c 	andcs	r1, r0, ip, lsl #5
    1a70:	0000001e 	andeq	r0, r0, lr, lsl r0
    1a74:	04239c01 	strteq	r9, [r3], #-3073	; 0xfffff3ff
    1a78:	7b140000 	blvc	501a80 <startup-0x1fafe580>
    1a7c:	01000012 	tsteq	r0, r2, lsl r0
    1a80:	033a01b1 	teqeq	sl, #1073741868	; 0x4000002c
    1a84:	91020000 	mrsls	r0, (UNDEF: 2)
    1a88:	0e381474 	mrceq	4, 1, r1, cr8, cr4, {3}
    1a8c:	b1010000 	mrslt	r0, (UNDEF: 1)
    1a90:	0000a201 	andeq	sl, r0, r1, lsl #4
    1a94:	72910200 	addsvc	r0, r1, #0, 4
    1a98:	11a41300 			; <UNDEFINED> instruction: 0x11a41300
    1a9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1aa0:	00126e01 	andseq	r6, r2, r1, lsl #28
    1aa4:	00001e20 	andeq	r1, r0, r0, lsr #28
    1aa8:	589c0100 	ldmpl	ip, {r8}
    1aac:	14000004 	strne	r0, [r0], #-4
    1ab0:	0000127b 	andeq	r1, r0, fp, ror r2
    1ab4:	3a019c01 	bcc	68ac0 <startup-0x1ff97540>
    1ab8:	02000003 	andeq	r0, r0, #3
    1abc:	38147491 	ldmdacc	r4, {r0, r4, r7, sl, ip, sp, lr}
    1ac0:	0100000e 	tsteq	r0, lr
    1ac4:	00a2019c 	umlaleq	r0, r2, ip, r1
    1ac8:	91020000 	mrsls	r0, (UNDEF: 2)
    1acc:	54170072 	ldrpl	r0, [r7], #-114	; 0xffffff8e
    1ad0:	01000011 	tsteq	r0, r1, lsl r0
    1ad4:	00a20188 	adceq	r0, r2, r8, lsl #3
    1ad8:	12580000 	subsne	r0, r8, #0
    1adc:	00162000 	andseq	r2, r6, r0
    1ae0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ae4:	00000482 	andeq	r0, r0, r2, lsl #9
    1ae8:	00127b14 	andseq	r7, r2, r4, lsl fp
    1aec:	01880100 	orreq	r0, r8, r0, lsl #2
    1af0:	0000033a 	andeq	r0, r0, sl, lsr r3
    1af4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1af8:	00130617 	andseq	r0, r3, r7, lsl r6
    1afc:	016e0100 	cmneq	lr, r0, lsl #2
    1b00:	00000097 	muleq	r0, r7, r0
    1b04:	20001216 	andcs	r1, r0, r6, lsl r2
    1b08:	00000042 	andeq	r0, r0, r2, asr #32
    1b0c:	04ca9c01 	strbeq	r9, [sl], #3073	; 0xc01
    1b10:	7b140000 	blvc	501b18 <startup-0x1fafe4e8>
    1b14:	01000012 	tsteq	r0, r2, lsl r0
    1b18:	033a016e 	teqeq	sl, #-2147483621	; 0x8000001b
    1b1c:	91020000 	mrsls	r0, (UNDEF: 2)
    1b20:	0e38146c 	cdpeq	4, 3, cr1, cr8, cr12, {3}
    1b24:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1b28:	0000a201 	andeq	sl, r0, r1, lsl #4
    1b2c:	6a910200 	bvs	fe442334 <GPIO_Pins+0xde440e3c>
    1b30:	000ef015 	andeq	pc, lr, r5, lsl r0	; <UNPREDICTABLE>
    1b34:	01700100 	cmneq	r0, r0, lsl #2
    1b38:	00000097 	muleq	r0, r7, r0
    1b3c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1b40:	00123517 	andseq	r3, r2, r7, lsl r5
    1b44:	015d0100 	cmpeq	sp, r0, lsl #2
    1b48:	000000a2 	andeq	r0, r0, r2, lsr #1
    1b4c:	20001200 	andcs	r1, r0, r0, lsl #4
    1b50:	00000016 	andeq	r0, r0, r6, lsl r0
    1b54:	04f49c01 	ldrbteq	r9, [r4], #3073	; 0xc01
    1b58:	7b140000 	blvc	501b60 <startup-0x1fafe4a0>
    1b5c:	01000012 	tsteq	r0, r2, lsl r0
    1b60:	033a015d 	teqeq	sl, #1073741847	; 0x40000017
    1b64:	91020000 	mrsls	r0, (UNDEF: 2)
    1b68:	d6170074 			; <UNDEFINED> instruction: 0xd6170074
    1b6c:	01000011 	tsteq	r0, r1, lsl r0
    1b70:	00970143 	addseq	r0, r7, r3, asr #2
    1b74:	11be0000 			; <UNDEFINED> instruction: 0x11be0000
    1b78:	00422000 	subeq	r2, r2, r0
    1b7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b80:	0000053c 	andeq	r0, r0, ip, lsr r5
    1b84:	00127b14 	andseq	r7, r2, r4, lsl fp
    1b88:	01430100 	mrseq	r0, (UNDEF: 83)
    1b8c:	0000033a 	andeq	r0, r0, sl, lsr r3
    1b90:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1b94:	00000e38 	andeq	r0, r0, r8, lsr lr
    1b98:	a2014301 	andge	r4, r1, #67108864	; 0x4000000
    1b9c:	02000000 	andeq	r0, r0, #0
    1ba0:	f0156a91 			; <UNDEFINED> instruction: 0xf0156a91
    1ba4:	0100000e 	tsteq	r0, lr
    1ba8:	00970145 	addseq	r0, r7, r5, asr #2
    1bac:	91020000 	mrsls	r0, (UNDEF: 2)
    1bb0:	48130077 	ldmdami	r3, {r0, r1, r2, r4, r5, r6}
    1bb4:	01000012 	tsteq	r0, r2, lsl r0
    1bb8:	11780115 	cmnne	r8, r5, lsl r1
    1bbc:	00462000 	subeq	r2, r6, r0
    1bc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bc4:	00000580 	andeq	r0, r0, r0, lsl #11
    1bc8:	00127b14 	andseq	r7, r2, r4, lsl fp
    1bcc:	01150100 	tsteq	r5, r0, lsl #2
    1bd0:	0000033a 	andeq	r0, r0, sl, lsr r3
    1bd4:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1bd8:	00000e38 	andeq	r0, r0, r8, lsr lr
    1bdc:	a2011501 	andge	r1, r1, #4194304	; 0x400000
    1be0:	02000000 	andeq	r0, r0, #0
    1be4:	74186a91 	ldrvc	r6, [r8], #-2705	; 0xfffff56f
    1be8:	0100706d 	tsteq	r0, sp, rrx
    1bec:	00cd0117 	sbceq	r0, sp, r7, lsl r1
    1bf0:	91020000 	mrsls	r0, (UNDEF: 2)
    1bf4:	75190074 	ldrvc	r0, [r9, #-116]	; 0xffffff8c
    1bf8:	01000011 	tsteq	r0, r1, lsl r0
    1bfc:	001144fe 			; <UNDEFINED> instruction: 0x001144fe
    1c00:	00003420 	andeq	r3, r0, r0, lsr #8
    1c04:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    1c08:	1a000005 	bne	1c24 <startup-0x1fffe3dc>
    1c0c:	0000120e 	andeq	r1, r0, lr, lsl #4
    1c10:	05a4fe01 	streq	pc, [r4, #3585]!	; 0xe01
    1c14:	91020000 	mrsls	r0, (UNDEF: 2)
    1c18:	04160074 	ldreq	r0, [r6], #-116	; 0xffffff8c
    1c1c:	000002cd 	andeq	r0, r0, sp, asr #5
    1c20:	0011b119 	andseq	fp, r1, r9, lsl r1
    1c24:	2cca0100 	stfcse	f0, [sl], {0}
    1c28:	18200010 	stmdane	r0!, {r4}
    1c2c:	01000001 	tsteq	r0, r1
    1c30:	0006069c 	muleq	r6, ip, r6
    1c34:	127b1a00 	rsbsne	r1, fp, #0, 20
    1c38:	ca010000 	bgt	41c40 <startup-0x1ffbe3c0>
    1c3c:	0000033a 	andeq	r0, r0, sl, lsr r3
    1c40:	1a649102 	bne	1926050 <startup-0x1e6d9fb0>
    1c44:	0000120e 	andeq	r1, r0, lr, lsl #4
    1c48:	05a4ca01 	streq	ip, [r4, #2561]!	; 0xa01
    1c4c:	91020000 	mrsls	r0, (UNDEF: 2)
    1c50:	11451b60 	cmpne	r5, r0, ror #22
    1c54:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1c58:	000000c2 	andeq	r0, r0, r2, asr #1
    1c5c:	1c749102 	ldfnep	f1, [r4], #-8
    1c60:	00736f70 	rsbseq	r6, r3, r0, ror pc
    1c64:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
    1c68:	91020000 	mrsls	r0, (UNDEF: 2)
    1c6c:	12651b70 	rsbne	r1, r5, #112, 22	; 0x1c000
    1c70:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1c74:	000000c2 	andeq	r0, r0, r2, asr #1
    1c78:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1c7c:	0011ca1d 	andseq	ip, r1, sp, lsl sl
    1c80:	bc7f0100 	ldflte	f0, [pc], #-0	; 1c88 <startup-0x1fffe378>
    1c84:	7020000e 	eorvc	r0, r0, lr
    1c88:	01000001 	tsteq	r0, r1
    1c8c:	127b1a9c 	rsbsne	r1, fp, #156, 20	; 0x9c000
    1c90:	7f010000 	svcvc	0x00010000
    1c94:	0000033a 	andeq	r0, r0, sl, lsr r3
    1c98:	00749102 	rsbseq	r9, r4, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030104 	adfeqs	f0, f3, f4
  18:	0b0b0b3e 	bleq	2c2d18 <startup-0x1fd3d2e8>
  1c:	0b3a1349 	bleq	e84d48 <startup-0x1f17b2b8>
  20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
  28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  2c:	0400000d 	streq	r0, [r0], #-13
  30:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  34:	00000b1c 	andeq	r0, r0, ip, lsl fp
  38:	0b002405 	bleq	9054 <startup-0x1fff6fac>
  3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  40:	0600000e 	streq	r0, [r0], -lr
  44:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  4c:	00001349 	andeq	r1, r0, r9, asr #6
  50:	03001607 	movweq	r1, #1543	; 0x607
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0013490b 	andseq	r4, r3, fp, lsl #18
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	13490026 	movtne	r0, #36902	; 0x9026
  74:	130b0000 	movwne	r0, #45056	; 0xb000
  78:	3a050b01 	bcc	142c84 <startup-0x1febd37c>
  7c:	01053b0b 	tsteq	r5, fp, lsl #22
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  8c:	0b381349 	bleq	e04db8 <startup-0x1f1fb248>
  90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
  94:	3a0e0300 	bcc	380c9c <startup-0x1fc7f364>
  98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  9c:	00053813 	andeq	r3, r5, r3, lsl r8
  a0:	000d0e00 	andeq	r0, sp, r0, lsl #28
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	1349053b 	movtne	r0, #38203	; 0x953b
  ac:	00000538 	andeq	r0, r0, r8, lsr r5
  b0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
  b4:	00130113 	andseq	r0, r3, r3, lsl r1
  b8:	00211000 	eoreq	r1, r1, r0
  bc:	0b2f1349 	bleq	bc4de8 <startup-0x1f43b218>
  c0:	21110000 	tstcs	r1, r0
  c4:	2f134900 	svccs	0x00134900
  c8:	12000005 	andne	r0, r0, #5
  cc:	0b0b0113 	bleq	2c0520 <startup-0x1fd3fae0>
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	03000d13 	movweq	r0, #3347	; 0xd13
  dc:	3b0b3a08 	blcc	2ce904 <startup-0x1fd316fc>
  e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  e4:	1400000b 	strne	r0, [r0], #-11
  e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f4:	0000193c 	andeq	r1, r0, ip, lsr r9
  f8:	03003415 	movweq	r3, #1045	; 0x415
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	3f13490b 	svccc	0x0013490b
 104:	00193c19 	andseq	r3, r9, r9, lsl ip
 108:	01041600 	tsteq	r4, r0, lsl #12
 10c:	0b0b0b3e 	bleq	2c2e0c <startup-0x1fd3d1f4>
 110:	0b3a1349 	bleq	e84e3c <startup-0x1f17b1c4>
 114:	1301053b 	movwne	r0, #5435	; 0x153b
 118:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
 11c:	1c080300 	stcne	3, cr0, [r8], {-0}
 120:	1800000b 	stmdane	r0, {r0, r1, r3}
 124:	0b0b0113 	bleq	2c0578 <startup-0x1fd3fa88>
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	00001301 	andeq	r1, r0, r1, lsl #6
 130:	03000d19 	movweq	r0, #3353	; 0xd19
 134:	3b0b3a0e 	blcc	2ce974 <startup-0x1fd3168c>
 138:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 13c:	1a00000b 	bne	170 <startup-0x1ffffe90>
 140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 14c:	041b0000 	ldreq	r0, [fp], #-0
 150:	0b0b3e01 	bleq	2cf95c <startup-0x1fd306a4>
 154:	3a13490b 	bcc	4d2588 <startup-0x1fb2da78>
 158:	010b3b0b 	tsteq	fp, fp, lsl #22
 15c:	1c000013 	stcne	0, cr0, [r0], {19}
 160:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 164:	0b3b0b3a 	bleq	ec2e54 <startup-0x1f13d1ac>
 168:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 16c:	00001802 	andeq	r1, r0, r2, lsl #16
 170:	3f012e1d 	svccc	0x00012e1d
 174:	3a0e0319 	bcc	380de0 <startup-0x1fc7f220>
 178:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 17c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 180:	96184006 	ldrls	r4, [r8], -r6
 184:	13011942 	movwne	r1, #6466	; 0x1942
 188:	0b1e0000 	bleq	780190 <startup-0x1f87fe70>
 18c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 190:	1f000006 	svcne	0x00000006
 194:	08030034 	stmdaeq	r3, {r2, r4, r5}
 198:	0b3b0b3a 	bleq	ec2e88 <startup-0x1f13d178>
 19c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1a0:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 1a4:	03193f00 	tsteq	r9, #0, 30
 1a8:	3b0b3a0e 	blcc	2ce9e8 <startup-0x1fd31618>
 1ac:	1119270b 	tstne	r9, fp, lsl #14
 1b0:	40061201 	andmi	r1, r6, r1, lsl #4
 1b4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1b8:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 1bc:	03193f01 	tsteq	r9, #1, 30
 1c0:	3b0b3a0e 	blcc	2cea00 <startup-0x1fd31600>
 1c4:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 1c8:	96184006 	ldrls	r4, [r8], -r6
 1cc:	13011942 	movwne	r1, #6466	; 0x1942
 1d0:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
 1d4:	03193f00 	tsteq	r9, #0, 30
 1d8:	3b0b3a0e 	blcc	2cea18 <startup-0x1fd315e8>
 1dc:	1119270b 	tstne	r9, fp, lsl #14
 1e0:	40061201 	andmi	r1, r6, r1, lsl #4
 1e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1e8:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
 1ec:	03193f01 	tsteq	r9, #1, 30
 1f0:	3b0b3a0e 	blcc	2cea30 <startup-0x1fd315d0>
 1f4:	11192705 	tstne	r9, r5, lsl #14
 1f8:	40061201 	andmi	r1, r6, r1, lsl #4
 1fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 200:	00001301 	andeq	r1, r0, r1, lsl #6
 204:	03000524 	movweq	r0, #1316	; 0x524
 208:	3b0b3a0e 	blcc	2cea48 <startup-0x1fd315b8>
 20c:	02134905 	andseq	r4, r3, #81920	; 0x14000
 210:	25000018 	strcs	r0, [r0, #-24]	; 0xffffffe8
 214:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 218:	0b3a0e03 	bleq	e83a2c <startup-0x1f17c5d4>
 21c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 220:	01111349 	tsteq	r1, r9, asr #6
 224:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 228:	01194297 			; <UNDEFINED> instruction: 0x01194297
 22c:	26000013 			; <UNDEFINED> instruction: 0x26000013
 230:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 234:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 238:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 23c:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
 240:	03193f00 	tsteq	r9, #0, 30
 244:	3b0b3a0e 	blcc	2cea84 <startup-0x1fd3157c>
 248:	11192705 	tstne	r9, r5, lsl #14
 24c:	40061201 	andmi	r1, r6, r1, lsl #4
 250:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 254:	34280000 	strtcc	r0, [r8], #-0
 258:	3a080300 	bcc	200e60 <startup-0x1fdff1a0>
 25c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 260:	00180213 	andseq	r0, r8, r3, lsl r2
 264:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
 268:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 26c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 270:	01111927 	tsteq	r1, r7, lsr #18
 274:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 278:	01194296 			; <UNDEFINED> instruction: 0x01194296
 27c:	2a000013 	bcs	2d0 <startup-0x1ffffd30>
 280:	0b0b000f 	bleq	2c02c4 <startup-0x1fd3fd3c>
 284:	00001349 	andeq	r1, r0, r9, asr #6
 288:	3f002e2b 	svccc	0x00002e2b
 28c:	3a0e0319 	bcc	380ef8 <startup-0x1fc7f108>
 290:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 294:	11134919 	tstne	r3, r9, lsl r9
 298:	40061201 	andmi	r1, r6, r1, lsl #4
 29c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2a0:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
 2a4:	03193f01 	tsteq	r9, #1, 30
 2a8:	3b0b3a0e 	blcc	2ceae8 <startup-0x1fd31518>
 2ac:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 2b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2b4:	96184006 	ldrls	r4, [r8], -r6
 2b8:	13011942 	movwne	r1, #6466	; 0x1942
 2bc:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
 2c0:	3a0e0301 	bcc	380ecc <startup-0x1fc7f134>
 2c4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 2c8:	11134919 	tstne	r3, r9, lsl r9
 2cc:	40061201 	andmi	r1, r6, r1, lsl #4
 2d0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2d4:	00001301 	andeq	r1, r0, r1, lsl #6
 2d8:	03012e2e 	movweq	r2, #7726	; 0x1e2e
 2dc:	3b0b3a0e 	blcc	2ceb1c <startup-0x1fd314e4>
 2e0:	11192705 	tstne	r9, r5, lsl #14
 2e4:	40061201 	andmi	r1, r6, r1, lsl #4
 2e8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2ec:	01000000 	mrseq	r0, (UNDEF: 0)
 2f0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 2f4:	0e030b13 	vmoveq.32	d3[0], r0
 2f8:	01110e1b 	tsteq	r1, fp, lsl lr
 2fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 300:	24020000 	strcs	r0, [r2], #-0
 304:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 308:	000e030b 	andeq	r0, lr, fp, lsl #6
 30c:	00160300 	andseq	r0, r6, r0, lsl #6
 310:	0b3a0e03 	bleq	e83b24 <startup-0x1f17c4dc>
 314:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 318:	24040000 	strcs	r0, [r4], #-0
 31c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 320:	0008030b 	andeq	r0, r8, fp, lsl #6
 324:	00350500 	eorseq	r0, r5, r0, lsl #10
 328:	00001349 	andeq	r1, r0, r9, asr #6
 32c:	03003406 	movweq	r3, #1030	; 0x406
 330:	3b0b3a0e 	blcc	2ceb70 <startup-0x1fd31490>
 334:	3f134905 	svccc	0x00134905
 338:	00193c19 	andseq	r3, r9, r9, lsl ip
 33c:	00340700 	eorseq	r0, r4, r0, lsl #14
 340:	0b3a0e03 	bleq	e83b54 <startup-0x1f17c4ac>
 344:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 348:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 34c:	04080000 	streq	r0, [r8], #-0
 350:	0b0b3e01 	bleq	2cfb5c <startup-0x1fd304a4>
 354:	3a13490b 	bcc	4d2788 <startup-0x1fb2d878>
 358:	01053b0b 	tsteq	r5, fp, lsl #22
 35c:	09000013 	stmdbeq	r0, {r0, r1, r4}
 360:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 364:	00000b1c 	andeq	r0, r0, ip, lsl fp
 368:	0b01130a 	bleq	44f98 <startup-0x1ffbb068>
 36c:	3b0b3a0b 	blcc	2ceba0 <startup-0x1fd31460>
 370:	00130105 	andseq	r0, r3, r5, lsl #2
 374:	000d0b00 	andeq	r0, sp, r0, lsl #22
 378:	0b3a0e03 	bleq	e83b8c <startup-0x1f17c474>
 37c:	1349053b 	movtne	r0, #38203	; 0x953b
 380:	00000b38 	andeq	r0, r0, r8, lsr fp
 384:	03000d0c 	movweq	r0, #3340	; 0xd0c
 388:	3b0b3a08 	blcc	2cebb0 <startup-0x1fd31450>
 38c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 390:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 394:	13490101 	movtne	r0, #37121	; 0x9101
 398:	00001301 	andeq	r1, r0, r1, lsl #6
 39c:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 3a0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 3a4:	00160f00 	andseq	r0, r6, r0, lsl #30
 3a8:	0b3a0e03 	bleq	e83bbc <startup-0x1f17c444>
 3ac:	1349053b 	movtne	r0, #38203	; 0x953b
 3b0:	04100000 	ldreq	r0, [r0], #-0
 3b4:	0b0b3e01 	bleq	2cfbc0 <startup-0x1fd30440>
 3b8:	3a13490b 	bcc	4d27ec <startup-0x1fb2d814>
 3bc:	010b3b0b 	tsteq	fp, fp, lsl #22
 3c0:	11000013 	tstne	r0, r3, lsl r0
 3c4:	0b0b0113 	bleq	2c0818 <startup-0x1fd3f7e8>
 3c8:	0b3b0b3a 	bleq	ec30b8 <startup-0x1f13cf48>
 3cc:	00001301 	andeq	r1, r0, r1, lsl #6
 3d0:	03000d12 	movweq	r0, #3346	; 0xd12
 3d4:	3b0b3a0e 	blcc	2cec14 <startup-0x1fd313ec>
 3d8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 3dc:	1300000b 	movwne	r0, #11
 3e0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3e4:	0b3a0e03 	bleq	e83bf8 <startup-0x1f17c408>
 3e8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 3ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 3f4:	00130119 	andseq	r0, r3, r9, lsl r1
 3f8:	00051400 	andeq	r1, r5, r0, lsl #8
 3fc:	0b3a0e03 	bleq	e83c10 <startup-0x1f17c3f0>
 400:	1349053b 	movtne	r0, #38203	; 0x953b
 404:	00001802 	andeq	r1, r0, r2, lsl #16
 408:	03003415 	movweq	r3, #1045	; 0x415
 40c:	3b0b3a0e 	blcc	2cec4c <startup-0x1fd313b4>
 410:	02134905 	andseq	r4, r3, #81920	; 0x14000
 414:	16000018 			; <UNDEFINED> instruction: 0x16000018
 418:	0b0b000f 	bleq	2c045c <startup-0x1fd3fba4>
 41c:	00001349 	andeq	r1, r0, r9, asr #6
 420:	3f012e17 	svccc	0x00012e17
 424:	3a0e0319 	bcc	381090 <startup-0x1fc7ef70>
 428:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 42c:	11134919 	tstne	r3, r9, lsl r9
 430:	40061201 	andmi	r1, r6, r1, lsl #4
 434:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 438:	00001301 	andeq	r1, r0, r1, lsl #6
 43c:	03003418 	movweq	r3, #1048	; 0x418
 440:	3b0b3a08 	blcc	2cec68 <startup-0x1fd31398>
 444:	02134905 	andseq	r4, r3, #81920	; 0x14000
 448:	19000018 	stmdbne	r0, {r3, r4}
 44c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 450:	0b3a0e03 	bleq	e83c64 <startup-0x1f17c39c>
 454:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 458:	06120111 			; <UNDEFINED> instruction: 0x06120111
 45c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 460:	00130119 	andseq	r0, r3, r9, lsl r1
 464:	00051a00 	andeq	r1, r5, r0, lsl #20
 468:	0b3a0e03 	bleq	e83c7c <startup-0x1f17c384>
 46c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 470:	00001802 	andeq	r1, r0, r2, lsl #16
 474:	0300341b 	movweq	r3, #1051	; 0x41b
 478:	3b0b3a0e 	blcc	2cecb8 <startup-0x1fd31348>
 47c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 480:	1c000018 	stcne	0, cr0, [r0], {24}
 484:	08030034 	stmdaeq	r3, {r2, r4, r5}
 488:	0b3b0b3a 	bleq	ec3178 <startup-0x1f13ce88>
 48c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 490:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 494:	03193f01 	tsteq	r9, #1, 30
 498:	3b0b3a0e 	blcc	2cecd8 <startup-0x1fd31328>
 49c:	1119270b 	tstne	r9, fp, lsl #14
 4a0:	40061201 	andmi	r1, r6, r1, lsl #4
 4a4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 4a8:	Address 0x000004a8 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000eac 	andeq	r0, r0, ip, lsr #29
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	16760002 	ldrbtne	r0, [r6], -r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000ebc 			; <UNDEFINED> instruction: 0x20000ebc
  3c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000ebc 			; <UNDEFINED> instruction: 0x20000ebc
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000437 	andeq	r0, r0, r7, lsr r4
   4:	01f00002 	mvnseq	r0, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
  1c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
  20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
  24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
  28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
  2c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
  30:	2f534953 	svccs	0x00534953
  34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  38:	00656475 	rsbeq	r6, r5, r5, ror r4
  3c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; ffffff8c <GPIO_Pins+0xdfffea94>
  40:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  44:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  48:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
  4c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  50:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  54:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
  58:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
  5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
  60:	445f6870 	ldrbmi	r6, [pc], #-2160	; 68 <startup-0x1fffff98>
  64:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  68:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
  6c:	3a430063 	bcc	10c0200 <startup-0x1ef3fe00>
  70:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  74:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
  78:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
  7c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
  80:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  84:	6f442f65 	svcvs	0x00442f65
  88:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
  8c:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
  90:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
  94:	41442f62 	cmpmi	r4, r2, ror #30
  98:	30393254 	eorscc	r3, r9, r4, asr r2
  9c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
  a0:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
  a4:	2f6d6574 	svccs	0x006d6574
  a8:	2f646f6b 	svccs	0x00646f6b
  ac:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
  b0:	2f2e2e00 	svccs	0x002e2e00
  b4:	2f62696c 	svccs	0x0062696c
  b8:	334d5453 	movtcc	r5, #54355	; 0xd453
  bc:	5f344632 	svcpl	0x00344632
  c0:	2f62696c 	svccs	0x0062696c
  c4:	334d5453 	movtcc	r5, #54355	; 0xd453
  c8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
  cc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
  d0:	72655064 	rsbvc	r5, r5, #100	; 0x64
  d4:	5f687069 	svcpl	0x00687069
  d8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  dc:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
  e0:	6300636e 	movwvs	r6, #878	; 0x36e
  e4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
  e8:	70706165 	rsbsvc	r6, r0, r5, ror #2
  ec:	646f635c 	strbtvs	r6, [pc], #-860	; f4 <startup-0x1fffff0c>
  f0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  f4:	6f745c65 	svcvs	0x00745c65
  f8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
  fc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 100:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 104:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 108:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 10c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 110:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 114:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 118:	616d5c65 	cmnvs	sp, r5, ror #24
 11c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 120:	3a630065 	bcc	18c02bc <startup-0x1e73fd44>
 124:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 128:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 12c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 130:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 134:	6f6f745c 	svcvs	0x006f745c
 138:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 13c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 140:	615c6d72 	cmpvs	ip, r2, ror sp
 144:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 148:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 14c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 150:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 154:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 158:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 15c:	6f630000 	svcvs	0x00630000
 160:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 164:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 168:	00000100 	andeq	r0, r0, r0, lsl #2
 16c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 170:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 174:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
 178:	00632e63 	rsbeq	r2, r3, r3, ror #28
 17c:	73000002 	movwvc	r0, #2
 180:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 184:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 188:	00000300 	andeq	r0, r0, r0, lsl #6
 18c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 190:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 194:	00682e78 	rsbeq	r2, r8, r8, ror lr
 198:	5f000004 	svcpl	0x00000004
 19c:	61666564 	cmnvs	r6, r4, ror #10
 1a0:	5f746c75 	svcpl	0x00746c75
 1a4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 1a8:	00682e73 	rsbeq	r2, r8, r3, ror lr
 1ac:	5f000005 	svcpl	0x00000005
 1b0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 1b4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 1b8:	00000600 	andeq	r0, r0, r0, lsl #12
 1bc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 1c0:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 1c4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 1c8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 1cc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 1d0:	74730000 	ldrbtvc	r0, [r3], #-0
 1d4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 1d8:	5f787834 	svcpl	0x00787834
 1dc:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
 1e0:	00040068 	andeq	r0, r4, r8, rrx
 1e4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 1e8:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 1ec:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 1f0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 1f4:	00040068 	andeq	r0, r4, r8, rrx
 1f8:	05000000 	streq	r0, [r0, #-0]
 1fc:	00001002 	andeq	r1, r0, r2
 200:	0cdd0320 	ldcleq	3, cr0, [sp], {32}
 204:	cd4b7501 	cfstr64gt	mvdx7, [fp, #-4]
 208:	fc03d81e 	stc2	8, cr13, [r3], {30}
 20c:	004b9000 	subeq	r9, fp, r0
 210:	06010402 	streq	r0, [r1], -r2, lsl #8
 214:	4b300658 	blmi	c01b7c <startup-0x1f3fe484>
 218:	213f3d67 	teqcs	pc, r7, ror #26
 21c:	f7030204 			; <UNDEFINED> instruction: 0xf7030204
 220:	69308273 	ldmdbvs	r0!, {r0, r1, r4, r5, r6, r9, pc}
 224:	4f40693f 	svcmi	0x0040693f
 228:	503f694e 	eorspl	r6, pc, lr, asr #18
 22c:	6be41703 	blvs	ff905e40 <GPIO_Pins+0xdf904948>
 230:	0f034b3f 	svceq	0x00034b3f
 234:	3d2f3d74 	stccc	13, cr3, [pc, #-464]!	; 6c <startup-0x1fffff94>
 238:	02040200 	andeq	r0, r4, #0, 4
 23c:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
 240:	02006702 	andeq	r6, r0, #524288	; 0x80000
 244:	003d0204 	eorseq	r0, sp, r4, lsl #4
 248:	06010402 	streq	r0, [r1], -r2, lsl #8
 24c:	5a4c0658 	bpl	1301bb4 <startup-0x1ecfe44c>
 250:	032f3e4e 			; <UNDEFINED> instruction: 0x032f3e4e
 254:	32674a0b 	rsbcc	r4, r7, #45056	; 0xb000
 258:	3d694d3f 	stclcc	13, cr4, [r9, #-252]!	; 0xffffff04
 25c:	6a741503 	bvs	1d05670 <startup-0x1e2fa990>
 260:	6614034b 	ldrvs	r0, [r4], -fp, asr #6
 264:	033f3f6c 	teqeq	pc, #108, 30	; 0x1b0
 268:	7903660b 	stmdbvc	r3, {r0, r1, r3, r9, sl, sp, lr}
 26c:	3d233d20 	stccc	13, cr3, [r3, #-128]!	; 0xffffff80
 270:	740f0324 	strvc	r0, [pc], #-804	; 278 <startup-0x1ffffd88>
 274:	de034b6a 	vmlsle.f64	d4, d3, d26
 278:	bb7c6600 	bllt	1f19a80 <startup-0x1e0e6580>
 27c:	0e033e2d 	cdpeq	14, 0, cr3, cr3, cr13, {1}
 280:	034b6966 	movteq	r6, #47462	; 0xb966
 284:	835d661a 	cmphi	sp, #27262976	; 0x1a00000
 288:	74018503 	strvc	r8, [r1], #-1283	; 0xfffffafd
 28c:	e9034b69 	stmdb	r3, {r0, r3, r5, r6, r8, r9, fp, lr}
 290:	ad6c6600 	stclge	6, cr6, [ip, #-0]
 294:	69740d03 	ldmdbvs	r4!, {r0, r1, r8, sl, fp}^
 298:	660e034b 	strvs	r0, [lr], -fp, asr #6
 29c:	15034b69 	strne	r4, [r3, #-2921]	; 0xfffff497
 2a0:	3f345966 	svccc	0x00345966
 2a4:	0341694d 	movteq	r6, #6477	; 0x194d
 2a8:	34599018 	ldrbcc	r9, [r9], #-24	; 0xffffffe8
 2ac:	41694d3f 	cmnmi	r9, pc, lsr sp
 2b0:	7401b303 	strvc	fp, [r1], #-771	; 0xfffffcfd
 2b4:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 190 <startup-0x1ffffe70>
 2b8:	0d033d4d 	stceq	13, cr3, [r3, #-308]	; 0xfffffecc
 2bc:	03672f66 	cmneq	r7, #408	; 0x198
 2c0:	334b6617 	movtcc	r6, #46615	; 0xb617
 2c4:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
 2c8:	4b660f03 	blmi	1983edc <startup-0x1e67c124>
 2cc:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
 2d0:	820f033d 	andhi	r0, pc, #-201326592	; 0xf4000000
 2d4:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 1b0 <startup-0x1ffffe50>
 2d8:	24033d5b 	strcs	r3, [r3], #-3419	; 0xfffff2a5
 2dc:	5ac04b90 	bpl	ff013124 <GPIO_Pins+0xdf011c2c>
 2e0:	3d223d77 	stccc	13, cr3, [r2, #-476]!	; 0xfffffe24
 2e4:	3f5a6726 	svccc	0x005a6726
 2e8:	8383cbdb 	orrhi	ip, r3, #224256	; 0x36c00
 2ec:	3d201b03 	fstmdbxcc	r0!, {d1}	;@ Deprecated
 2f0:	683d5925 	ldmdavs	sp!, {r0, r2, r5, r8, fp, ip, lr}
 2f4:	683d6769 	ldmdavs	sp!, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
 2f8:	683d6769 	ldmdavs	sp!, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
 2fc:	ba3f0367 	blt	fc10a0 <startup-0x1f03ef60>
 300:	3f84334b 	svccc	0x0084334b
 304:	8340694d 	movthi	r6, #2381	; 0x94d
 308:	6a9e0a03 	bvs	fe782b1c <GPIO_Pins+0xde781624>
 30c:	660c034b 	strvs	r0, [ip], -fp, asr #6
 310:	b8034b69 	stmdalt	r3, {r0, r3, r5, r6, r8, r9, fp, lr}
 314:	3d4e6601 	stclcc	6, cr6, [lr, #-4]
 318:	4b741603 	blmi	1d05b2c <startup-0x1e2fa4d4>
 31c:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 320:	8214034b 	andshi	r0, r4, #738197505	; 0x2c000001
 324:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 328:	11034b4d 	tstne	r3, sp, asr #22
 32c:	4d334b82 	vldmdbmi	r3!, {d4}
 330:	034b5b4d 	movteq	r5, #47949	; 0xbb4d
 334:	334b7410 	movtcc	r7, #46096	; 0xb410
 338:	4b694d4d 	blmi	1a53874 <startup-0x1e5ac78c>
 33c:	8200d303 	andhi	sp, r0, #201326592	; 0xc000000
 340:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 344:	f0034b4d 			; <UNDEFINED> instruction: 0xf0034b4d
 348:	3d4e8200 	sfmcc	f0, 3, [lr, #-0]
 34c:	79742503 	ldmdbvc	r4!, {r0, r1, r8, sl, sp}^
 350:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 354:	79741303 	ldmdbvc	r4!, {r0, r1, r8, r9, ip}^
 358:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 35c:	79741103 	ldmdbvc	r4!, {r0, r1, r8, ip}^
 360:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 364:	79742c03 	ldmdbvc	r4!, {r0, r1, sl, fp, sp}^
 368:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 36c:	79742703 	ldmdbvc	r4!, {r0, r1, r8, r9, sl, sp}^
 370:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 374:	79741d03 	ldmdbvc	r4!, {r0, r1, r8, sl, fp, ip}^
 378:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 37c:	79741003 	ldmdbvc	r4!, {r0, r1, ip}^
 380:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 384:	79740e03 	ldmdbvc	r4!, {r0, r1, r9, sl, fp}^
 388:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 38c:	78742903 	ldmdavc	r4!, {r0, r1, r8, fp, sp}^
 390:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 394:	78742303 	ldmdavc	r4!, {r0, r1, r8, r9, sp}^
 398:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 39c:	78742503 	ldmdavc	r4!, {r0, r1, r8, sl, sp}^
 3a0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 3a4:	78741403 	ldmdavc	r4!, {r0, r1, sl, ip}^
 3a8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 3ac:	78741203 	ldmdavc	r4!, {r0, r1, r9, ip}^
 3b0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 3b4:	78742d03 	ldmdavc	r4!, {r0, r1, r8, sl, fp, sp}^
 3b8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 3bc:	78742803 	ldmdavc	r4!, {r0, r1, fp, sp}^
 3c0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 3c4:	6a740c03 	bvs	1d033d8 <startup-0x1e2fcc28>
 3c8:	681e6c4c 	ldmdavs	lr, {r2, r3, r6, sl, fp, sp, lr}
 3cc:	7402ac03 	strvc	sl, [r2], #-3075	; 0xfffff3fd
 3d0:	1e974d94 	mrcne	13, 4, r4, cr7, cr4, {4}
 3d4:	661703ae 	ldrvs	r0, [r7], -lr, lsr #7
 3d8:	502f2f67 	eorpl	r2, pc, r7, ror #30
 3dc:	3e4c3e59 	mcrcc	14, 2, r3, cr12, cr9, {2}
 3e0:	7659404e 	ldrbvc	r4, [r9], -lr, asr #32
 3e4:	033d4d5c 	teqeq	sp, #92, 26	; 0x1700
 3e8:	7530660a 	ldrvc	r6, [r0, #-1546]!	; 0xfffff9f6
 3ec:	67581103 	ldrbvs	r1, [r8, -r3, lsl #2]
 3f0:	4d5c6850 	ldclmi	8, cr6, [ip, #-320]	; 0xfffffec0
 3f4:	6611033d 			; <UNDEFINED> instruction: 0x6611033d
 3f8:	03044b6c 	movweq	r4, #19308	; 0x4b6c
 3fc:	6667ba03 	strbtvs	fp, [r7], -r3, lsl #20
 400:	3d4b4b40 	vstrcc	d20, [fp, #-256]	; 0xffffff00
 404:	4b693d3d 	blmi	1a4f900 <startup-0x1e5b0700>
 408:	673d3d3d 			; <UNDEFINED> instruction: 0x673d3d3d
 40c:	91592f78 	cmpls	r9, r8, ror pc
 410:	775b915a 			; <UNDEFINED> instruction: 0x775b915a
 414:	033e313e 	teqeq	lr, #-2147483633	; 0x8000000f
 418:	8d3f6609 	ldchi	6, cr6, [pc, #-36]!	; 3fc <startup-0x1ffffc04>
 41c:	01040200 	mrseq	r0, R12_usr
 420:	023c3c06 	eorseq	r3, ip, #1536	; 0x600
 424:	0101000c 	tsteq	r1, ip
 428:	05000304 	streq	r0, [r0, #-772]	; 0xfffffcfc
 42c:	00000002 	andeq	r0, r0, r2
 430:	010e0320 	tsteq	lr, r0, lsr #6
 434:	03025e13 	movweq	r5, #11795	; 0x2e13
 438:	94010100 	strls	r0, [r1], #-256	; 0xffffff00
 43c:	02000002 	andeq	r0, r0, #2
 440:	0001a800 	andeq	sl, r1, r0, lsl #16
 444:	fb010200 	blx	40c4e <startup-0x1ffbf3b2>
 448:	01000d0e 	tsteq	r0, lr, lsl #26
 44c:	00010101 	andeq	r0, r1, r1, lsl #2
 450:	00010000 	andeq	r0, r1, r0
 454:	3a430100 	bcc	10c085c <startup-0x1ef3f7a4>
 458:	7469672f 	strbtvc	r6, [r9], #-1839	; 0xfffff8d1
 45c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 460:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
 464:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
 468:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 46c:	6b2f6d65 	blvs	bdba08 <startup-0x1f4245f8>
 470:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 2bc <startup-0x1ffffd44>
 474:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 478:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 47c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 480:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 484:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 488:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 48c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 490:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 494:	445f6870 	ldrbmi	r6, [pc], #-2160	; 49c <startup-0x1ffffb64>
 498:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 49c:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
 4a0:	3a630063 	bcc	18c0634 <startup-0x1e73f9cc>
 4a4:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 4a8:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 4ac:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 4b0:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 4b4:	6f6f745c 	svcvs	0x006f745c
 4b8:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 4bc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 4c0:	615c6d72 	cmpvs	ip, r2, ror sp
 4c4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 4c8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 4cc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 4d0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 4d4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 4d8:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 4dc:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 4e0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 4e4:	61657363 	cmnvs	r5, r3, ror #6
 4e8:	635c7070 	cmpvs	ip, #112	; 0x70
 4ec:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 4f0:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 4f4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 32c <startup-0x1ffffcd4>
 4f8:	63675c73 	cmnvs	r7, #29440	; 0x7300
 4fc:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 500:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 504:	6f6e2d6d 	svcvs	0x006e2d6d
 508:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 50c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 510:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 514:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 518:	00737973 	rsbseq	r7, r3, r3, ror r9
 51c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 46c <startup-0x1ffffb94>
 520:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 524:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 528:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 52c:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
 530:	5349534d 	movtpl	r5, #37709	; 0x934d
 534:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 538:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 53c:	2f2e2e00 	svccs	0x002e2e00
 540:	2f62696c 	svccs	0x0062696c
 544:	334d5453 	movtcc	r5, #54355	; 0xd453
 548:	5f344632 	svcpl	0x00344632
 54c:	2f62696c 	svccs	0x0062696c
 550:	334d5453 	movtcc	r5, #54355	; 0xd453
 554:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 558:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 55c:	72655064 	rsbvc	r5, r5, #100	; 0x64
 560:	5f687069 	svcpl	0x00687069
 564:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 568:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 56c:	0000636e 	andeq	r6, r0, lr, ror #6
 570:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 574:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 578:	70675f78 	rsbvc	r5, r7, r8, ror pc
 57c:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
 580:	00000100 	andeq	r0, r0, r0, lsl #2
 584:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 588:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 58c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 590:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 594:	00000200 	andeq	r0, r0, r0, lsl #4
 598:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 59c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 5a0:	00030068 	andeq	r0, r3, r8, rrx
 5a4:	726f6300 	rsbvc	r6, pc, #0, 6
 5a8:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 5ac:	00682e34 	rsbeq	r2, r8, r4, lsr lr
 5b0:	73000004 	movwvc	r0, #4
 5b4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 5b8:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
 5bc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 5c0:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 5c4:	00050068 	andeq	r0, r5, r8, rrx
 5c8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 5cc:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 5d0:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 5d4:	00000500 	andeq	r0, r0, r0, lsl #10
 5d8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 5dc:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 5e0:	70675f78 	rsbvc	r5, r7, r8, ror pc
 5e4:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 5e8:	00000500 	andeq	r0, r0, r0, lsl #10
 5ec:	02050000 	andeq	r0, r5, #0
 5f0:	20000ebc 			; <UNDEFINED> instruction: 0x20000ebc
 5f4:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
 5f8:	034b4c4e 	movteq	r4, #48206	; 0xbc4e
 5fc:	4a034a38 	bmi	d2ee4 <startup-0x1ff2d11c>
 600:	034b4c20 	movteq	r4, #48160	; 0xbc20
 604:	4f034a33 	svcmi	0x00034a33
 608:	034b4c20 	movteq	r4, #48160	; 0xbc20
 60c:	54034a2e 	strpl	r4, [r3], #-2606	; 0xfffff5d2
 610:	034b4c20 	movteq	r4, #48160	; 0xbc20
 614:	59034a29 	stmdbpl	r3, {r0, r3, r5, r9, fp, lr}
 618:	034b4c20 	movteq	r4, #48160	; 0xbc20
 61c:	5e034a24 	vmlapl.f32	s8, s6, s9
 620:	034b4c20 	movteq	r4, #48160	; 0xbc20
 624:	63034a1f 	movwvs	r4, #14879	; 0x3a1f
 628:	034b4c20 	movteq	r4, #48160	; 0xbc20
 62c:	68034a1a 	stmdavs	r3, {r1, r3, r4, r9, fp, lr}
 630:	034b4c20 	movteq	r4, #48160	; 0xbc20
 634:	6e034a15 			; <UNDEFINED> instruction: 0x6e034a15
 638:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 63c:	7303660f 	movwvc	r6, #13839	; 0x360f
 640:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 644:	7a03660a 	bvc	d9e74 <startup-0x1ff2618c>
 648:	69674c20 	stmdbvs	r7!, {r5, sl, fp, lr}^
 64c:	90080c03 	andls	r0, r8, r3, lsl #24
 650:	660a0359 			; <UNDEFINED> instruction: 0x660a0359
 654:	4c5a5a3e 	vmovmi	r5, sl, s29, s30
 658:	0200bcad 	andeq	fp, r0, #44288	; 0xad00
 65c:	4a060104 	bmi	180a74 <startup-0x1fe7f58c>
 660:	c0ad5006 	adcgt	r5, sp, r6
 664:	00bbccad 	adcseq	ip, fp, sp, lsr #25
 668:	03020402 	movweq	r0, #9218	; 0x2402
 66c:	0200ba62 	andeq	fp, r0, #401408	; 0x62000
 670:	3c060104 	stfccs	f0, [r6], {4}
 674:	3c210306 	stccc	3, cr0, [r1], #-24	; 0xffffffe8
 678:	3d3d4c52 	ldccc	12, cr4, [sp, #-328]!	; 0xfffffeb8
 67c:	033d3d3d 	teqeq	sp, #3904	; 0xf40
 680:	42757410 	rsbsmi	r7, r5, #16, 8	; 0x10000000
 684:	3e4c3e5a 	mcrcc	14, 2, r3, cr12, cr10, {2}
 688:	1c033d3e 	stcne	13, cr3, [r3], {62}	; 0x3e
 68c:	6850754a 	ldmdavs	r0, {r1, r3, r6, r8, sl, ip, sp, lr}^
 690:	033d4c5c 	teqeq	sp, #92, 24	; 0x5c00
 694:	3d4e4a0a 	vstrcc	s9, [lr, #-40]	; 0xffffffd8
 698:	754a0c03 	strbvc	r0, [sl, #-3075]	; 0xfffff3fd
 69c:	4c5c6850 	mrrcmi	8, 5, r6, ip, cr0
 6a0:	4a0a033d 	bmi	28139c <startup-0x1fd7ec64>
 6a4:	0f033d4e 	svceq	0x00033d4e
 6a8:	034b794a 	movteq	r7, #47434	; 0xb94a
 6ac:	4b794a0f 	blmi	1e52ef0 <startup-0x1e1ad110>
 6b0:	c04a1003 	subgt	r1, sl, r3
 6b4:	4c1e504c 	ldcmi	0, cr5, [lr], {76}	; 0x4c
 6b8:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
 6bc:	4a0b034b 	bmi	2c13f0 <startup-0x1fd3ec10>
 6c0:	ce037578 	cfrshl64gt	mvdx3, mvdx8, r7
 6c4:	2fbb4a00 	svccs	0x00bb4a00
 6c8:	c9089f35 	stmdbgt	r8, {r0, r2, r4, r5, r8, r9, sl, fp, ip, pc}
 6cc:	04029fbb 	streq	r9, [r2], #-4027	; 0xfffff045
 6d0:	Address 0x000006d0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	706c6c70 	rsbvc	r6, ip, r0, ror ip
       4:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
       8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
       c:	54520031 	ldrbpl	r0, [r2], #-49	; 0xffffffcf
      10:	4b575f43 	blmi	15d7d24 <startup-0x1ea282dc>
      14:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
      18:	006e5152 	rsbeq	r5, lr, r2, asr r1
      1c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
      20:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
      24:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
      28:	5f31414d 	svcpl	0x0031414d
      2c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
      30:	5f366d61 	svcpl	0x00366d61
      34:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      38:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
      3c:	50555f38 	subspl	r5, r5, r8, lsr pc
      40:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
      44:	495f3331 	ldmdbmi	pc, {r0, r4, r5, r8, r9, ip, sp}^	; <UNPREDICTABLE>
      48:	006e5152 	rsbeq	r5, lr, r2, asr r1
      4c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
      50:	46435332 			; <UNDEFINED> instruction: 0x46435332
      54:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
      58:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
      5c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
      60:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
      64:	00676966 	rsbeq	r6, r7, r6, ror #18
      68:	5f434352 	svcpl	0x00434352
      6c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
      70:	6b636f6c 	blvs	18dbe28 <startup-0x1e7241d8>
      74:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
      78:	4d440071 	stclmi	0, cr0, [r4, #-452]	; 0xfffffe3c
      7c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
      80:	61657274 	smcvs	22308	; 0x5724
      84:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
      88:	006e5152 	rsbeq	r5, lr, r2, asr r1
      8c:	4b4c4348 	blmi	1310db4 <startup-0x1ecef24c>
      90:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
      94:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
      98:	47007963 	strmi	r7, [r0, -r3, ror #18]
      9c:	5f4f4950 	svcpl	0x004f4950
      a0:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
      a4:	504f4e5f 	subpl	r4, pc, pc, asr lr	; <UNPREDICTABLE>
      a8:	004c4c55 	subeq	r4, ip, r5, asr ip
      ac:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
      b0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
      b4:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
      b8:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
      bc:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
      c0:	5152495f 	cmppl	r2, pc, asr r9
      c4:	4344006e 	movtmi	r0, #16494	; 0x406e
      c8:	495f494d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
      cc:	006e5152 	rsbeq	r5, lr, r2, asr r1
      d0:	5f434352 	svcpl	0x00434352
      d4:	32425041 	subcc	r5, r2, #65	; 0x41
      d8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
      dc:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
      e0:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
      e4:	646f4d50 	strbtvs	r4, [pc], #-3408	; ec <startup-0x1fffff14>
      e8:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
      ec:	43435200 	movtmi	r5, #12800	; 0x3200
      f0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
      f4:	72655032 	rsbvc	r5, r5, #50	; 0x32
      f8:	43687069 	cmnmi	r8, #105	; 0x69
      fc:	6b636f6c 	blvs	18dbeb4 <startup-0x1e72414c>
     100:	6f4d504c 	svcvs	0x004d504c
     104:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     108:	50470064 	subpl	r0, r7, r4, rrx
     10c:	544f4f49 	strbpl	r4, [pc], #-3913	; 114 <startup-0x1ffffeec>
     110:	5f657079 	svcpl	0x00657079
     114:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     118:	00666544 	rsbeq	r6, r6, r4, asr #10
     11c:	5f434352 	svcpl	0x00434352
     120:	31425041 	cmpcc	r2, r1, asr #32
     124:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     128:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     12c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     130:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     134:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 30 <startup-0x1fffffd0>
     138:	0065646f 	rsbeq	r6, r5, pc, ror #8
     13c:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
     140:	5152495f 	cmppl	r2, pc, asr r9
     144:	4352006e 	cmpmi	r2, #110	; 0x6e
     148:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     14c:	4b4c4343 	blmi	1310e60 <startup-0x1ecef1a0>
     150:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     154:	49006563 	stmdbmi	r0, {r0, r1, r5, r6, r8, sl, sp, lr}
     158:	00525043 	subseq	r5, r2, r3, asr #32
     15c:	5f434352 	svcpl	0x00434352
     160:	434d4954 	movtmi	r4, #55636	; 0xd954
     164:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
     168:	6f437365 	svcvs	0x00437365
     16c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     170:	43435200 	movtmi	r5, #12800	; 0x3200
     174:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     178:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     17c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     180:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     184:	004b4c43 	subeq	r4, fp, r3, asr #24
     188:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     18c:	3058525f 	subscc	r5, r8, pc, asr r2
     190:	5152495f 	cmppl	r2, pc, asr r9
     194:	5355006e 	cmppl	r5, #110	; 0x6e
     198:	36545241 	ldrbcc	r5, [r4], -r1, asr #4
     19c:	5152495f 	cmppl	r2, pc, asr r9
     1a0:	4352006e 	cmpmi	r2, #110	; 0x6e
     1a4:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     1a8:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     1ac:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     1b0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     1b4:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     1b8:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff2c0 <GPIO_Pins+0xdfffddc8>
     1bc:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     1c0:	5300745f 	movwpl	r7, #1119	; 0x45f
     1c4:	5f324950 	svcpl	0x00324950
     1c8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     1cc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     1d0:	52425f38 	subpl	r5, r2, #56, 30	; 0xe0
     1d4:	49545f4b 	ldmdbmi	r4, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
     1d8:	5f32314d 	svcpl	0x0032314d
     1dc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     1e0:	42484100 	submi	r4, r8, #0, 2
     1e4:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
     1e8:	4700524e 	strmi	r5, [r0, -lr, asr #4]
     1ec:	5f4f4950 	svcpl	0x004f4950
     1f0:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     1f4:	574f445f 	smlsldpl	r4, pc, pc, r4	; <UNPREDICTABLE>
     1f8:	4941004e 	stmdbmi	r1, {r1, r2, r3, r6}^
     1fc:	00524352 	subseq	r4, r2, r2, asr r3
     200:	5f434352 	svcpl	0x00434352
     204:	50494153 	subpl	r4, r9, r3, asr r1
     208:	41534c4c 	cmpmi	r3, ip, asr #24
     20c:	6b6c4349 	blvs	1b10f38 <startup-0x1e4ef0c8>
     210:	43766944 	cmnmi	r6, #68, 18	; 0x110000
     214:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     218:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
     21c:	475f7469 	ldrbmi	r7, [pc, -r9, ror #8]
     220:	5f4f4950 	svcpl	0x004f4950
     224:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     228:	50430073 	subpl	r0, r3, r3, ror r0
     22c:	00444955 	subeq	r4, r4, r5, asr r9
     230:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
     234:	5f6b6369 	svcpl	0x006b6369
     238:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     23c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     240:	5f434352 	svcpl	0x00434352
     244:	4344544c 	movtmi	r5, #17484	; 0x444c
     248:	444b4c43 	strbmi	r4, [fp], #-3139	; 0xfffff3bd
     24c:	6f437669 	svcvs	0x00437669
     250:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     254:	414d4400 	cmpmi	sp, r0, lsl #8
     258:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     25c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     260:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     264:	47006e51 	smlsdmi	r0, r1, lr, r6
     268:	5f4f4950 	svcpl	0x004f4950
     26c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     270:	0046415f 	subeq	r4, r6, pc, asr r1
     274:	5f434352 	svcpl	0x00434352
     278:	33424841 	movtcc	r4, #10305	; 0x2841
     27c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     280:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     284:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     288:	5400646d 	strpl	r6, [r0], #-1133	; 0xfffffb93
     28c:	5f314d49 	svcpl	0x00314d49
     290:	5f475254 	svcpl	0x00475254
     294:	5f4d4f43 	svcpl	0x004d4f43
     298:	314d4954 	cmpcc	sp, r4, asr r9
     29c:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     2a0:	47006e51 	smlsdmi	r0, r1, lr, r6
     2a4:	5f4f4950 	svcpl	0x004f4950
     2a8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     2ac:	004e415f 	subeq	r4, lr, pc, asr r1
     2b0:	5f434352 	svcpl	0x00434352
     2b4:	4b4c4350 	blmi	1310ffc <startup-0x1ecef004>
     2b8:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
     2bc:	00676966 	rsbeq	r6, r7, r6, ror #18
     2c0:	5f434352 	svcpl	0x00434352
     2c4:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
     2c8:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     2cc:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     2d0:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     2d4:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
     2d8:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     2dc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     2e0:	50410067 	subpl	r0, r1, r7, rrx
     2e4:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
     2e8:	43520052 	cmpmi	r2, #82	; 0x52
     2ec:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
     2f0:	53595374 	cmppl	r9, #116, 6	; 0xd0000001
     2f4:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     2f8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     2fc:	48410065 	stmdami	r1, {r0, r2, r5, r6}^
     300:	504c3142 	subpl	r3, ip, r2, asr #2
     304:	00524e45 	subseq	r4, r2, r5, asr #28
     308:	5f434352 	svcpl	0x00434352
     30c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     310:	69445332 	stmdbvs	r4, {r1, r4, r5, r8, r9, ip, lr}^
     314:	53005176 	movwpl	r5, #374	; 0x176
     318:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     31c:	495f6b63 	ldmdbmi	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
     320:	006e5152 	rsbeq	r5, lr, r2, asr r1
     324:	5f434352 	svcpl	0x00434352
     328:	33424841 	movtcc	r4, #10305	; 0x2841
     32c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     330:	55006870 	strpl	r6, [r0, #-2160]	; 0xfffff790
     334:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     338:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     33c:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     340:	46434b43 	strbmi	r4, [r3], -r3, asr #22
     344:	49005247 	stmdbmi	r0, {r0, r1, r2, r6, r9, ip, lr}
     348:	00525343 	subseq	r5, r2, r3, asr #6
     34c:	5f434352 	svcpl	0x00434352
     350:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
     354:	00766944 	rsbseq	r6, r6, r4, asr #18
     358:	4f495047 	svcmi	0x00495047
     35c:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     360:	4f5f6570 	svcmi	0x005f6570
     364:	50470044 	subpl	r0, r7, r4, asr #32
     368:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     36c:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
     370:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     374:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
     378:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     37c:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     380:	756f534b 	strbvc	r5, [pc, #-843]!	; 3d <startup-0x1fffffc3>
     384:	00656372 	rsbeq	r6, r5, r2, ror r3
     388:	31414d44 	cmpcc	r1, r4, asr #26
     38c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     390:	326d6165 	rsbcc	r6, sp, #1073741849	; 0x40000019
     394:	5152495f 	cmppl	r2, pc, asr r9
     398:	4352006e 	cmpmi	r2, #110	; 0x6e
     39c:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     3a0:	756f534c 	strbvc	r5, [pc, #-844]!	; 5c <startup-0x1fffffa4>
     3a4:	00656372 	rsbeq	r6, r5, r2, ror r3
     3a8:	5f434352 	svcpl	0x00434352
     3ac:	31425041 	cmpcc	r2, r1, asr #32
     3b0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     3b4:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     3b8:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     3bc:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     3c0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     3c4:	30444556 	subcc	r4, r4, r6, asr r5
     3c8:	53455200 	movtpl	r5, #20992	; 0x5200
     3cc:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     3d0:	75003144 	strvc	r3, [r0, #-324]	; 0xfffffebc
     3d4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     3d8:	2064656e 	rsbcs	r6, r4, lr, ror #10
     3dc:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     3e0:	414d4400 	cmpmi	sp, r0, lsl #8
     3e4:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     3e8:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     3ec:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     3f0:	52006e51 	andpl	r6, r0, #1296	; 0x510
     3f4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     3f8:	34444556 	strbcc	r4, [r4], #-1366	; 0xfffffaaa
     3fc:	53455200 	movtpl	r5, #20992	; 0x5200
     400:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     404:	52003544 	andpl	r3, r0, #68, 10	; 0x11000000
     408:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     40c:	36444556 			; <UNDEFINED> instruction: 0x36444556
     410:	42414900 	submi	r4, r1, #0, 18
     414:	50470052 	subpl	r0, r7, r2, asr r0
     418:	4f5f4f49 	svcmi	0x005f4f49
     41c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     420:	0050505f 	subseq	r5, r0, pc, asr r0
     424:	31433249 	cmpcc	r3, r9, asr #4
     428:	5f52455f 	svcpl	0x0052455f
     42c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     430:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     434:	43535f32 	cmpmi	r3, #50, 30	; 0xc8
     438:	52495f45 	subpl	r5, r9, #276	; 0x114
     43c:	52006e51 	andpl	r6, r0, #1296	; 0x510
     440:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     444:	6f434553 	svcvs	0x00434553
     448:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     44c:	53455200 	movtpl	r5, #20992	; 0x5200
     450:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     454:	52003244 	andpl	r3, r0, #68, 4	; 0x40000004
     458:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     45c:	33444556 	movtcc	r4, #17750	; 0x4556
     460:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     464:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     468:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
     46c:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     470:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
     474:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     478:	53006e51 	movwpl	r6, #3665	; 0xe51
     47c:	545f4243 	ldrbpl	r4, [pc], #-579	; 484 <startup-0x1ffffb7c>
     480:	00657079 	rsbeq	r7, r5, r9, ror r0
     484:	4f495047 	svcmi	0x00495047
     488:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     48c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     490:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     494:	53464400 	movtpl	r4, #25600	; 0x6400
     498:	48410052 	stmdami	r1, {r1, r4, r6}^
     49c:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
     4a0:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
     4a4:	415f4343 	cmpmi	pc, r3, asr #6
     4a8:	50324250 	eorspl	r4, r2, r0, asr r2
     4ac:	70697265 	rsbvc	r7, r9, r5, ror #4
     4b0:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     4b4:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     4b8:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
     4bc:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
     4c0:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
     4c4:	43435200 	movtmi	r5, #12800	; 0x3200
     4c8:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     4cc:	72655033 	rsbvc	r5, r5, #51	; 0x33
     4d0:	43687069 	cmnmi	r8, #105	; 0x69
     4d4:	6b636f6c 	blvs	18dc28c <startup-0x1e723d74>
     4d8:	6f4d504c 	svcvs	0x004d504c
     4dc:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     4e0:	5f5f0064 	svcpl	0x005f0064
     4e4:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     4e8:	745f3631 	ldrbvc	r3, [pc], #-1585	; 4f0 <startup-0x1ffffb10>
     4ec:	42484100 	submi	r4, r8, #0, 2
     4f0:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     4f4:	4c435000 	marmi	acc0, r5, r3
     4f8:	465f324b 	ldrbmi	r3, [pc], -fp, asr #4
     4fc:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
     500:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     504:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     508:	6f4c5f4f 	svcvs	0x004c5f4f
     50c:	70535f77 	subsvc	r5, r3, r7, ror pc
     510:	00646565 	rsbeq	r6, r4, r5, ror #10
     514:	314e4143 	cmpcc	lr, r3, asr #2
     518:	3058525f 	subscc	r5, r8, pc, asr r2
     51c:	5152495f 	cmppl	r2, pc, asr r9
     520:	3a43006e 	bcc	10c06e0 <startup-0x1ef3f920>
     524:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
     528:	415c7372 	cmpmi	ip, r2, ror r3
     52c:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     530:	656e4f5c 	strbvs	r4, [lr, #-3932]!	; 0xfffff0a4
     534:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     538:	6f445c65 	svcvs	0x00445c65
     53c:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     540:	475c746e 	ldrbmi	r7, [ip, -lr, ror #8]
     544:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     548:	41445c62 	cmpmi	r4, r2, ror #24
     54c:	30393254 	eorscc	r3, r9, r4, asr r2
     550:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     554:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     558:	5c6d6574 	cfstr64pl	mvdx6, [sp], #-464	; 0xfffffe30
     55c:	5c646f6b 	stclpl	15, cr6, [r4], #-428	; 0xfffffe54
     560:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
     564:	53464800 	movtpl	r4, #26624	; 0x6800
     568:	43520052 	cmpmi	r2, #82	; 0x52
     56c:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     570:	4b4c4353 	blmi	13112c4 <startup-0x1eceed3c>
     574:	4c435000 	marmi	acc0, r5, r3
     578:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
     57c:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
     580:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     584:	4c4c5000 	marmi	acc0, r5, ip
     588:	4c50004d 	mrrcmi	0, 4, r0, r0, cr13	; <UNPREDICTABLE>
     58c:	50004e4c 	andpl	r4, r0, ip, asr #28
     590:	00504c4c 	subseq	r4, r0, ip, asr #24
     594:	514c4c50 	cmppl	ip, r0, asr ip
     598:	43435200 	movtmi	r5, #12800	; 0x3200
     59c:	49534c5f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
     5a0:	00646d43 	rsbeq	r6, r4, r3, asr #26
     5a4:	736c6c70 	cmnvc	ip, #112, 24	; 0x7000
     5a8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     5ac:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
     5b0:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     5b4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     5b8:	20554e47 	subscs	r4, r5, r7, asr #28
     5bc:	20393943 	eorscs	r3, r9, r3, asr #18
     5c0:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
     5c4:	30322031 	eorscc	r2, r2, r1, lsr r0
     5c8:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
     5cc:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
     5d0:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
     5d4:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     5d8:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
     5dc:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
     5e0:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
     5e4:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
     5e8:	6172622d 	cmnvs	r2, sp, lsr #4
     5ec:	2068636e 	rsbcs	r6, r8, lr, ror #6
     5f0:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     5f4:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
     5f8:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
     5fc:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
     600:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     604:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     608:	616d2d20 	cmnvs	sp, r0, lsr #26
     60c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     610:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     614:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     618:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
     61c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
     620:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
     624:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
     628:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     62c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     630:	616d2d20 	cmnvs	sp, r0, lsr #26
     634:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     638:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     63c:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     640:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     644:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
     648:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     64c:	00393963 	eorseq	r3, r9, r3, ror #18
     650:	5f434352 	svcpl	0x00434352
     654:	4b4c4348 	blmi	131137c <startup-0x1eceec84>
     658:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     65c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     660:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     664:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     668:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     66c:	43435200 	movtmi	r5, #12800	; 0x3200
     670:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
     674:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     678:	42006769 	andmi	r6, r0, #27525120	; 0x1a40000
     67c:	00524344 	subseq	r4, r2, r4, asr #6
     680:	53434853 	movtpl	r4, #14419	; 0x3853
     684:	56500052 			; <UNDEFINED> instruction: 0x56500052
     688:	52495f44 	subpl	r5, r9, #68, 30	; 0x110
     68c:	52006e51 	andpl	r6, r0, #1296	; 0x510
     690:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     694:	53004553 	movwpl	r4, #1363	; 0x553
     698:	00524954 	subseq	r4, r2, r4, asr r9
     69c:	31433249 	cmpcc	r3, r9, asr #4
     6a0:	5f56455f 	svcpl	0x0056455f
     6a4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     6a8:	43435200 	movtmi	r5, #12800	; 0x3200
     6ac:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     6b0:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     6b4:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
     6b8:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     6bc:	00676966 	rsbeq	r6, r7, r6, ror #18
     6c0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     6c4:	63707574 	cmnvs	r0, #116, 10	; 0x1d000000
     6c8:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     6cc:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     6d0:	505f4343 	subspl	r4, pc, r3, asr #6
     6d4:	41534c4c 	cmpmi	r3, ip, asr #24
     6d8:	6e6f4349 	cdpvs	3, 6, cr4, cr15, cr9, {2}
     6dc:	00676966 	rsbeq	r6, r7, r6, ror #18
     6e0:	4f495047 	svcmi	0x00495047
     6e4:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     6e8:	50470073 	subpl	r0, r7, r3, ror r0
     6ec:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 5d0 <startup-0x1ffffa30>
     6f0:	5f65646f 	svcpl	0x0065646f
     6f4:	0054554f 	subseq	r5, r4, pc, asr #10
     6f8:	314d4954 	cmpcc	sp, r4, asr r9
     6fc:	5f43435f 	svcpl	0x0043435f
     700:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     704:	53414800 	movtpl	r4, #6144	; 0x1800
     708:	4e525f48 	cdpmi	15, 5, cr5, cr2, cr8, {2}
     70c:	52495f47 	subpl	r5, r9, #284	; 0x11c
     710:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     714:	31495458 	cmpcc	r9, r8, asr r4
     718:	5152495f 	cmppl	r2, pc, asr r9
     71c:	4143006e 	cmpmi	r3, lr, rrx
     720:	545f314e 	ldrbpl	r3, [pc], #-334	; 728 <startup-0x1ffff8d8>
     724:	52495f58 	subpl	r5, r9, #88, 30	; 0x160
     728:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     72c:	5f31414d 	svcpl	0x0031414d
     730:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     734:	5f356d61 	svcpl	0x00356d61
     738:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     73c:	43435200 	movtmi	r5, #12800	; 0x3200
     740:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
     744:	43435200 	movtmi	r5, #12800	; 0x3200
     748:	4f434d5f 	svcmi	0x00434d5f
     74c:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
     750:	00676966 	rsbeq	r6, r7, r6, ror #18
     754:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     758:	4752545f 			; <UNDEFINED> instruction: 0x4752545f
     75c:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 5e8 <startup-0x1ffffa18>
     760:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     764:	495f3431 	ldmdbmi	pc, {r0, r4, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     768:	006e5152 	rsbeq	r5, lr, r2, asr r1
     76c:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     770:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     774:	376d6165 	strbcc	r6, [sp, -r5, ror #2]!
     778:	5152495f 	cmppl	r2, pc, asr r9
     77c:	544f006e 	strbpl	r0, [pc], #-110	; 784 <startup-0x1ffff87c>
     780:	53465f47 	movtpl	r5, #28487	; 0x6f47
     784:	5152495f 	cmppl	r2, pc, asr r9
     788:	6f4e006e 	svcvs	0x004e006e
     78c:	73614d6e 	cmnvc	r1, #7040	; 0x1b80
     790:	6c62616b 	stfvse	f6, [r2], #-428	; 0xfffffe54
     794:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
     798:	5152495f 	cmppl	r2, pc, asr r9
     79c:	5757006e 	ldrbpl	r0, [r7, -lr, rrx]
     7a0:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     7a4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7a8:	5f47544f 	svcpl	0x0047544f
     7ac:	575f5348 	ldrbpl	r5, [pc, -r8, asr #6]
     7b0:	5f50554b 	svcpl	0x0050554b
     7b4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7b8:	43435200 	movtmi	r5, #12800	; 0x3200
     7bc:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     7c0:	72655032 	rsbvc	r5, r5, #50	; 0x32
     7c4:	43687069 	cmnmi	r8, #105	; 0x69
     7c8:	6b636f6c 	blvs	18dc580 <startup-0x1e723a80>
     7cc:	00646d43 	rsbeq	r6, r4, r3, asr #26
     7d0:	5f434352 	svcpl	0x00434352
     7d4:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     7d8:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
     7dc:	52005176 	andpl	r5, r0, #-2147483619	; 0x8000001d
     7e0:	505f4343 	subspl	r4, pc, r3, asr #6
     7e4:	41534c4c 	cmpmi	r3, ip, asr #24
     7e8:	76694449 	strbtvc	r4, [r9], -r9, asr #8
     7ec:	43520052 	cmpmi	r2, #82	; 0x52
     7f0:	41535f43 	cmpmi	r3, r3, asr #30
     7f4:	6f6c4249 	svcvs	0x006c4249
     7f8:	43426b63 	movtmi	r6, #11107	; 0x2b63
     7fc:	6f534b4c 	svcvs	0x00534b4c
     800:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     804:	6d654d00 	stclvs	13, cr4, [r5, #-0]
     808:	4d79726f 	lfmmi	f7, 2, [r9, #-444]!	; 0xfffffe44
     80c:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     810:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
     814:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     818:	53006e51 	movwpl	r6, #3665	; 0xe51
     81c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     820:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
     824:	6f6c4365 	svcvs	0x006c4365
     828:	54006b63 	strpl	r6, [r0], #-2915	; 0xfffff49d
     82c:	5f504d41 	svcpl	0x00504d41
     830:	4d415453 	cfstrdmi	mvd5, [r1, #-332]	; 0xfffffeb4
     834:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     838:	43006e51 	movwmi	r6, #3665	; 0xe51
     83c:	5f314e41 	svcpl	0x00314e41
     840:	5f454353 	svcpl	0x00454353
     844:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     848:	51524900 	cmppl	r2, r0, lsl #18
     84c:	79545f6e 	ldmdbvc	r4, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     850:	47006570 	smlsdxmi	r0, r0, r5, r6
     854:	5f4f4950 	svcpl	0x004f4950
     858:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     85c:	004e495f 	subeq	r4, lr, pc, asr r9
     860:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     864:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     868:	306d6165 	rsbcc	r6, sp, r5, ror #2
     86c:	5152495f 	cmppl	r2, pc, asr r9
     870:	4352006e 	cmpmi	r2, #110	; 0x6e
     874:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     878:	6f43324f 	svcvs	0x0043324f
     87c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     880:	4b434c00 	blmi	10d3888 <startup-0x1ef2c778>
     884:	43520052 	cmpmi	r2, #82	; 0x52
     888:	32495f43 	subcc	r5, r9, #268	; 0x10c
     88c:	4b4c4353 	blmi	13115e0 <startup-0x1eceea20>
     890:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     894:	45006563 	strmi	r6, [r0, #-1379]	; 0xfffffa9d
     898:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
     89c:	43324900 	teqmi	r2, #0, 18
     8a0:	52455f32 	subpl	r5, r5, #50, 30	; 0xc8
     8a4:	5152495f 	cmppl	r2, pc, asr r9
     8a8:	736d006e 	cmnvc	sp, #110	; 0x6e
     8ac:	6b636954 	blvs	18dae04 <startup-0x1e7251fc>
     8b0:	43520073 	cmpmi	r2, #115	; 0x73
     8b4:	43505f43 	cmpmi	r0, #268	; 0x10c
     8b8:	43314b4c 	teqmi	r1, #76, 22	; 0x13000
     8bc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     8c0:	534f0067 	movtpl	r0, #61543	; 0xf067
     8c4:	44454550 	strbmi	r4, [r5], #-1360	; 0xfffffab0
     8c8:	75420052 	strbvc	r0, [r2, #-82]	; 0xffffffae
     8cc:	75614673 	strbvc	r4, [r1, #-1651]!	; 0xfffff98d
     8d0:	495f746c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     8d4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     8d8:	6b636974 	blvs	18daeb0 <startup-0x1e725150>
     8dc:	4c500073 	mrrcmi	0, 7, r0, r0, cr3	; <UNPREDICTABLE>
     8e0:	4746434c 	strbmi	r4, [r6, -ip, asr #6]
     8e4:	41550052 	cmpmi	r5, r2, asr r0
     8e8:	5f355452 	svcpl	0x00355452
     8ec:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8f0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     8f4:	52425f31 	subpl	r5, r2, #49, 30	; 0xc4
     8f8:	49545f4b 	ldmdbmi	r4, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
     8fc:	495f394d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, ip, sp}^	; <UNPREDICTABLE>
     900:	006e5152 	rsbeq	r5, lr, r2, asr r1
     904:	4f495047 	svcmi	0x00495047
     908:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     90c:	5f006570 	svcpl	0x00006570
     910:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     914:	5f323374 	svcpl	0x00323374
     918:	50410074 	subpl	r0, r1, r4, ror r0
     91c:	42484142 	submi	r4, r8, #-2147483632	; 0x80000010
     920:	73657250 	cmnvc	r5, #80, 4
     924:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
     928:	4700656c 	strmi	r6, [r0, -ip, ror #10]
     92c:	5f4f4950 	svcpl	0x004f4950
     930:	6964654d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
     934:	535f6d75 	cmppl	pc, #7488	; 0x1d40
     938:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     93c:	43435200 	movtmi	r5, #12800	; 0x3200
     940:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     944:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     948:	6c435332 	mcrrvs	3, 3, r5, r3, cr2
     94c:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
     950:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     954:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
     958:	5f374d49 	svcpl	0x00374d49
     95c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     960:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     964:	6f6c2067 	svcvs	0x006c2067
     968:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     96c:	4500746e 	strmi	r7, [r0, #-1134]	; 0xfffffb92
     970:	575f4854 			; <UNDEFINED> instruction: 0x575f4854
     974:	5f50554b 	svcpl	0x0050554b
     978:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     97c:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     980:	5f53485f 	svcpl	0x0053485f
     984:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     988:	50555000 	subspl	r5, r5, r0
     98c:	53005244 	movwpl	r5, #580	; 0x244
     990:	52474353 	subpl	r4, r7, #1275068417	; 0x4c000001
     994:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     998:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     99c:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     9a0:	42415349 	submi	r5, r1, #603979777	; 0x24000001
     9a4:	5300454c 	movwpl	r4, #1356	; 0x54c
     9a8:	6c614356 	stclvs	3, cr4, [r1], #-344	; 0xfffffea8
     9ac:	52495f6c 	subpl	r5, r9, #108, 30	; 0x1b0
     9b0:	41006e51 	tstmi	r0, r1, asr lr
     9b4:	52324250 	eorspl	r4, r2, #80, 4
     9b8:	00525453 	subseq	r5, r2, r3, asr r4
     9bc:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
     9c0:	43520048 	cmpmi	r2, #72	; 0x48
     9c4:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
     9c8:	616c4674 	smcvs	50276	; 0xc464
     9cc:	61745367 	cmnvs	r4, r7, ror #6
     9d0:	00737574 	rsbseq	r7, r3, r4, ror r5
     9d4:	5f434352 	svcpl	0x00434352
     9d8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     9dc:	4200736b 	andmi	r7, r0, #-1409286143	; 0xac000001
     9e0:	4c525253 	lfmmi	f5, 2, [r2], {83}	; 0x53
     9e4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     9e8:	69485f4f 	stmdbvs	r8, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     9ec:	535f6867 	cmppl	pc, #6750208	; 0x670000
     9f0:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     9f4:	43435200 	movtmi	r5, #12800	; 0x3200
     9f8:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
     9fc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     a00:	43520067 	cmpmi	r2, #103	; 0x67
     a04:	53485f43 	movtpl	r5, #36675	; 0x8f43
     a08:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
     a0c:	55504600 	ldrbpl	r4, [r0, #-1536]	; 0xfffffa00
     a10:	5152495f 	cmppl	r2, pc, asr r9
     a14:	4352006e 	cmpmi	r2, #110	; 0x6e
     a18:	64415f43 	strbvs	r5, [r1], #-3907	; 0xfffff0bd
     a1c:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
     a20:	43495348 	movtmi	r5, #37704	; 0x9348
     a24:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
     a28:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     a2c:	61566e6f 	cmpvs	r6, pc, ror #28
     a30:	0065756c 	rsbeq	r7, r5, ip, ror #10
     a34:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     a38:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     a3c:	41006e51 	tstmi	r0, r1, asr lr
     a40:	4c324250 	lfmmi	f4, 4, [r2], #-320	; 0xfffffec0
     a44:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     a48:	43435200 	movtmi	r5, #12800	; 0x3200
     a4c:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     a50:	72655031 	rsbvc	r5, r5, #49	; 0x31
     a54:	00687069 	rsbeq	r7, r8, r9, rrx
     a58:	5f434352 	svcpl	0x00434352
     a5c:	43435452 	movtmi	r5, #13394	; 0x3452
     a60:	6f434b4c 	svcvs	0x00434b4c
     a64:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     a68:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     a6c:	5f53465f 	svcpl	0x0053465f
     a70:	50554b57 	subspl	r4, r5, r7, asr fp
     a74:	5152495f 	cmppl	r2, pc, asr r9
     a78:	4352006e 	cmpmi	r2, #110	; 0x6e
     a7c:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
     a80:	52004741 	andpl	r4, r0, #17039360	; 0x1040000
     a84:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     a88:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
     a8c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     a90:	45007375 	strmi	r7, [r0, #-885]	; 0xfffffc8b
     a94:	34495458 	strbcc	r5, [r9], #-1112	; 0xfffffba8
     a98:	5152495f 	cmppl	r2, pc, asr r9
     a9c:	5443006e 	strbpl	r0, [r3], #-110	; 0xffffff92
     aa0:	54004c52 	strpl	r4, [r0], #-3154	; 0xfffff3ae
     aa4:	5f364d49 	svcpl	0x00364d49
     aa8:	5f434144 	svcpl	0x00434144
     aac:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ab0:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
     ab4:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     ab8:	50470065 	subpl	r0, r7, r5, rrx
     abc:	535f4f49 	cmppl	pc, #292	; 0x124
     ac0:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     ac4:	43324900 	teqmi	r2, #0, 18
     ac8:	56455f32 			; <UNDEFINED> instruction: 0x56455f32
     acc:	5152495f 	cmppl	r2, pc, asr r9
     ad0:	4352006e 	cmpmi	r2, #110	; 0x6e
     ad4:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     ad8:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     adc:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
     ae0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     ae4:	00746942 	rsbseq	r6, r4, r2, asr #18
     ae8:	5f434352 	svcpl	0x00434352
     aec:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     af0:	6365536b 	cmnvs	r5, #-1409286143	; 0xac000001
     af4:	74697275 	strbtvc	r7, [r9], #-629	; 0xfffffd8b
     af8:	73795379 	cmnvc	r9, #-469762047	; 0xe4000001
     afc:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     b00:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     b04:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     b08:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     b0c:	416b636f 	cmnmi	fp, pc, ror #6
     b10:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     b14:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     b18:	74730065 	ldrbtvc	r0, [r3], #-101	; 0xffffff9b
     b1c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     b20:	00676572 	rsbeq	r6, r7, r2, ror r5
     b24:	5f434352 	svcpl	0x00434352
     b28:	32425041 	subcc	r5, r2, #65	; 0x41
     b2c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     b30:	42006870 	andmi	r6, r0, #112, 16	; 0x700000
     b34:	00524146 	subseq	r4, r2, r6, asr #2
     b38:	31425041 	cmpcc	r2, r1, asr #32
     b3c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     b40:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
     b44:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     b48:	61657274 	smcvs	22308	; 0x5724
     b4c:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     b50:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b54:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     b58:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     b5c:	336d6165 	cmncc	sp, #1073741849	; 0x40000019
     b60:	5152495f 	cmppl	r2, pc, asr r9
     b64:	4b43006e 	blmi	10c0d24 <startup-0x1ef3f2dc>
     b68:	45544147 	ldrbmi	r4, [r4, #-327]	; 0xfffffeb9
     b6c:	4300524e 	movwmi	r5, #590	; 0x24e
     b70:	5f324e41 	svcpl	0x00324e41
     b74:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     b78:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b7c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     b80:	004e4941 	subeq	r4, lr, r1, asr #18
     b84:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     b88:	00514941 	subseq	r4, r1, r1, asr #18
     b8c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     b90:	00524941 	subseq	r4, r2, r1, asr #18
     b94:	5f434352 	svcpl	0x00434352
     b98:	314f434d 	cmpcc	pc, sp, asr #6
     b9c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     ba0:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     ba4:	415f4343 	cmpmi	pc, r3, asr #6
     ba8:	50334248 	eorspl	r4, r3, r8, asr #4
     bac:	70697265 	rsbvc	r7, r9, r5, ror #4
     bb0:	6f6c4368 	svcvs	0x006c4368
     bb4:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     bb8:	79530064 	ldmdbvc	r3, {r2, r5, r6}^
     bbc:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     bc0:	79545f6b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     bc4:	52006570 	andpl	r6, r0, #112, 10	; 0x1c000000
     bc8:	505f4343 	subspl	r4, pc, r3, asr #6
     bcc:	6d434c4c 	stclvs	12, cr4, [r3, #-304]	; 0xfffffed0
     bd0:	43520064 	cmpmi	r2, #100	; 0x64
     bd4:	61425f43 	cmpvs	r2, r3, asr #30
     bd8:	70756b63 	rsbsvc	r6, r5, r3, ror #22
     bdc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     be0:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     be4:	42484100 	submi	r4, r8, #0, 2
     be8:	54535233 	ldrbpl	r5, [r3], #-563	; 0xfffffdcd
     bec:	72450052 	subvc	r0, r5, #82	; 0x52
     bf0:	53726f72 	cmnpl	r2, #456	; 0x1c8
     bf4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     bf8:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
     bfc:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     c00:	61657274 	smcvs	22308	; 0x5724
     c04:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
     c08:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c0c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     c10:	00707574 	rsbseq	r7, r0, r4, ror r5
     c14:	5f434352 	svcpl	0x00434352
     c18:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
     c1c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     c20:	41006563 	tstmi	r0, r3, ror #10
     c24:	52314250 	eorspl	r4, r1, #80, 4
     c28:	00525453 	subseq	r5, r2, r3, asr r4
     c2c:	5f435452 	svcpl	0x00435452
     c30:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
     c34:	52495f6d 	subpl	r5, r9, #436	; 0x1b4
     c38:	41006e51 	tstmi	r0, r1, asr lr
     c3c:	45314250 	ldrmi	r4, [r1, #-592]!	; 0xfffffdb0
     c40:	4e00524e 	cdpmi	2, 0, cr5, cr0, cr14, {2}
     c44:	5f434956 	svcpl	0x00434956
     c48:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     c4c:	6e754600 	cdpvs	6, 7, cr4, cr5, cr0, {0}
     c50:	6f697463 	svcvs	0x00697463
     c54:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
     c58:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     c5c:	43324900 	teqmi	r2, #0, 18
     c60:	52455f33 	subpl	r5, r5, #51, 30	; 0xcc
     c64:	5152495f 	cmppl	r2, pc, asr r9
     c68:	5243006e 	subpl	r0, r3, #110	; 0x6e
     c6c:	495f5059 	ldmdbmi	pc, {r0, r3, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     c70:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c74:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     c78:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
     c7c:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     c80:	6c006e51 	stcvs	14, cr6, [r0], {81}	; 0x51
     c84:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     c88:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     c8c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     c90:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     c94:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     c98:	43520074 	cmpmi	r2, #116	; 0x74
     c9c:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     ca0:	6944314f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r8, ip, sp}^
     ca4:	49540076 	ldmdbmi	r4, {r1, r2, r4, r5, r6}^
     ca8:	495f334d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     cac:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cb0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     cb4:	495f3154 	ldmdbmi	pc, {r2, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     cb8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cbc:	5f434352 	svcpl	0x00434352
     cc0:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     cc4:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
     cc8:	74534553 	ldrbvc	r4, [r3], #-1363	; 0xfffffaad
     ccc:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0xfffffd9f
     cd0:	55530070 	ldrbpl	r0, [r3, #-112]	; 0xffffff90
     cd4:	53454343 	movtpl	r4, #21315	; 0x5343
     cd8:	50470053 	subpl	r0, r7, r3, asr r0
     cdc:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; bc0 <startup-0x1ffff440>
     ce0:	0065646f 	rsbeq	r6, r5, pc, ror #8
     ce4:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     ce8:	3158525f 	cmpcc	r8, pc, asr r2
     cec:	5152495f 	cmppl	r2, pc, asr r9
     cf0:	4441006e 	strbmi	r0, [r1], #-110	; 0xffffff92
     cf4:	52495f43 	subpl	r5, r9, #268	; 0x10c
     cf8:	52006e51 	andpl	r6, r0, #1296	; 0x510
     cfc:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     d00:	6f4d4553 	svcvs	0x004d4553
     d04:	6f436564 	svcvs	0x00436564
     d08:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     d0c:	45434900 	strbmi	r4, [r3, #-2304]	; 0xfffff700
     d10:	48410052 	stmdami	r1, {r1, r4, r6}^
     d14:	504c3342 	subpl	r3, ip, r2, asr #6
     d18:	00524e45 	subseq	r4, r2, r5, asr #28
     d1c:	4f495047 	svcmi	0x00495047
     d20:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     d24:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     d28:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     d2c:	73795300 	cmnvc	r9, #0, 6
     d30:	6b636954 	blvs	18db288 <startup-0x1e724d78>
     d34:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     d38:	00676966 	rsbeq	r6, r7, r6, ror #18
     d3c:	552f3a43 	strpl	r3, [pc, #-2627]!	; 301 <startup-0x1ffffcff>
     d40:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     d44:	6164412f 	cmnvs	r4, pc, lsr #2
     d48:	4f2f746d 	svcmi	0x002f746d
     d4c:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     d50:	2f657669 	svccs	0x00657669
     d54:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     d58:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     d5c:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     d60:	2f627548 	svccs	0x00627548
     d64:	32544144 	subscc	r4, r4, #68, 2
     d68:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     d6c:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     d70:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     d74:	6f6b2f6d 	svcvs	0x006b2f6d
     d78:	6f442f64 	svcvs	0x00442f64
     d7c:	732f726f 			; <UNDEFINED> instruction: 0x732f726f
     d80:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     d84:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
     d88:	53464100 	movtpl	r4, #24832	; 0x6100
     d8c:	544f0052 	strbpl	r0, [pc], #-82	; d94 <startup-0x1ffff26c>
     d90:	52455059 	subpl	r5, r5, #89	; 0x59
     d94:	4c414300 	mcrrmi	3, 0, r4, r1, cr0
     d98:	74004249 	strvc	r4, [r0], #-585	; 0xfffffdb7
     d9c:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0xffffff93
     da0:	53460067 	movtpl	r0, #24679	; 0x6067
     da4:	495f434d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     da8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     dac:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     db0:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     db4:	495f3049 	ldmdbmi	pc, {r0, r3, r6, ip, sp}^	; <UNPREDICTABLE>
     db8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     dbc:	434b4344 	movtmi	r4, #45892	; 0xb344
     dc0:	32524746 	subscc	r4, r2, #18350080	; 0x1180000
     dc4:	53464300 	movtpl	r4, #25344	; 0x6300
     dc8:	43520052 	cmpmi	r2, #82	; 0x52
     dcc:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     dd0:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     dd4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     dd8:	65736800 	ldrbvs	r6, [r3, #-2048]!	; 0xfffff800
     ddc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     de0:	44007375 	strmi	r7, [r0], #-885	; 0xfffffc8b
     de4:	5f31414d 	svcpl	0x0031414d
     de8:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     dec:	5f346d61 	svcpl	0x00346d61
     df0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     df4:	414d4400 	cmpmi	sp, r0, lsl #8
     df8:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     dfc:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     e00:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
     e04:	41006e51 	tstmi	r0, r1, asr lr
     e08:	45314248 	ldrmi	r4, [r1, #-584]!	; 0xfffffdb8
     e0c:	4c00524e 	sfmmi	f5, 4, [r0], {78}	; 0x4e
     e10:	0044414f 	subeq	r4, r4, pc, asr #2
     e14:	4f495047 	svcmi	0x00495047
     e18:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     e1c:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     e20:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     e24:	65440066 	strbvs	r0, [r4, #-102]	; 0xffffff9a
     e28:	4d677562 	cfstr64mi	mvdx7, [r7, #-392]!	; 0xfffffe78
     e2c:	74696e6f 	strbtvc	r6, [r9], #-3695	; 0xfffff191
     e30:	495f726f 	ldmdbmi	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     e34:	006e5152 	rsbeq	r5, lr, r2, asr r1
     e38:	4f495047 	svcmi	0x00495047
     e3c:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     e40:	43435200 	movtmi	r5, #12800	; 0x3200
     e44:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     e48:	72655031 	rsbvc	r5, r5, #49	; 0x31
     e4c:	52687069 	rsbpl	r7, r8, #105	; 0x69
     e50:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     e54:	00646d43 	rsbeq	r6, r4, r3, asr #26
     e58:	33433249 	movtcc	r3, #12873	; 0x3249
     e5c:	5f56455f 	svcpl	0x0056455f
     e60:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     e64:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     e68:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     e6c:	41006450 	tstmi	r0, r0, asr r4
     e70:	52324248 	eorspl	r4, r2, #72, 4	; 0x80000004
     e74:	00525453 	subseq	r5, r2, r3, asr r4
     e78:	5f485445 	svcpl	0x00485445
     e7c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     e80:	43435200 	movtmi	r5, #12800	; 0x3200
     e84:	6f6c435f 	svcvs	0x006c435f
     e88:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
     e8c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     e90:	4d006665 	stcmi	6, cr6, [r0, #-404]	; 0xfffffe6c
     e94:	0052464d 	subseq	r4, r2, sp, asr #12
     e98:	5f434352 	svcpl	0x00434352
     e9c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     ea0:	00666544 	rsbeq	r6, r6, r4, asr #10
     ea4:	41464d4d 	cmpmi	r6, sp, asr #26
     ea8:	68730052 	ldmdavs	r3!, {r1, r4, r6}^
     eac:	2074726f 	rsbscs	r7, r4, pc, ror #4
     eb0:	00746e69 	rsbseq	r6, r4, r9, ror #28
     eb4:	5f434352 	svcpl	0x00434352
     eb8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ebc:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
     ec0:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
     ec4:	43520079 	cmpmi	r2, #121	; 0x79
     ec8:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
     ecc:	41534900 	cmpmi	r3, r0, lsl #18
     ed0:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
     ed4:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     ed8:	61657274 	smcvs	22308	; 0x5724
     edc:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     ee0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ee4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     ee8:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     eec:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ef0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     ef4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     ef8:	4e450073 	mcrmi	0, 2, r0, cr5, cr3, {3}
     efc:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     f00:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     f04:	006f6376 	rsbeq	r6, pc, r6, ror r3	; <UNPREDICTABLE>
     f08:	5f434352 	svcpl	0x00434352
     f0c:	31425041 	cmpcc	r2, r1, asr #32
     f10:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     f14:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     f18:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     f1c:	646f4d50 	strbtvs	r4, [pc], #-3408	; f24 <startup-0x1ffff0dc>
     f20:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
     f24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     f28:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     f2c:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     f30:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
     f34:	555f314d 	ldrbpl	r3, [pc, #-333]	; def <startup-0x1ffff211>
     f38:	49545f50 	ldmdbmi	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
     f3c:	5f30314d 	svcpl	0x0030314d
     f40:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f44:	4d544900 	vldrmi.16	s9, [r4, #-0]	; <UNPREDICTABLE>
     f48:	4278525f 	rsbsmi	r5, r8, #-268435451	; 0xf0000005
     f4c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     f50:	4c500072 	mrrcmi	0, 7, r0, r0, cr2	; <UNPREDICTABLE>
     f54:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     f58:	4352004e 	cmpmi	r2, #78	; 0x4e
     f5c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     f60:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     f64:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     f68:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     f6c:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
     f70:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
     f74:	5000646d 	andpl	r6, r0, sp, ror #8
     f78:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     f7c:	6d005253 	sfmvs	f5, 4, [r0, #-332]	; 0xfffffeb4
     f80:	006e6961 	rsbeq	r6, lr, r1, ror #18
     f84:	5f47544f 	svcpl	0x0047544f
     f88:	455f5348 	ldrbmi	r5, [pc, #-840]	; c48 <startup-0x1ffff3b8>
     f8c:	4f5f3150 	svcmi	0x005f3150
     f90:	495f5455 	ldmdbmi	pc, {r0, r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     f94:	006e5152 	rsbeq	r5, lr, r2, asr r1
     f98:	5f434352 	svcpl	0x00434352
     f9c:	43435452 	movtmi	r5, #13394	; 0x3452
     fa0:	6d434b4c 	vstrvs	d20, [r3, #-304]	; 0xfffffed0
     fa4:	4f4d0064 	svcmi	0x004d0064
     fa8:	00524544 	subseq	r4, r2, r4, asr #10
     fac:	4349564e 	movtmi	r5, #38478	; 0x964e
     fb0:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     fb4:	6f697250 	svcvs	0x00697250
     fb8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     fbc:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     fc0:	58525f31 	ldmdapl	r2, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     fc4:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     fc8:	52006e51 	andpl	r6, r0, #1296	; 0x510
     fcc:	415f4343 	cmpmi	pc, r3, asr #6
     fd0:	50324248 	eorspl	r4, r2, r8, asr #4
     fd4:	70697265 	rsbvc	r7, r9, r5, ror #4
     fd8:	50470068 	subpl	r0, r7, r8, rrx
     fdc:	505f4f49 	subspl	r4, pc, r9, asr #30
     fe0:	5f645075 	svcpl	0x00645075
     fe4:	45005055 	strmi	r5, [r0, #-85]	; 0xffffffab
     fe8:	39495458 	stmdbcc	r9, {r3, r4, r6, sl, ip, lr}^
     fec:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     ff0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ff4:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     ff8:	46434941 	strbmi	r4, [r3], -r1, asr #18
     ffc:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
    1000:	415f4343 	cmpmi	pc, r3, asr #6
    1004:	50314248 	eorspl	r4, r1, r8, asr #4
    1008:	70697265 	rsbvc	r7, r9, r5, ror #4
    100c:	6f6c4368 	svcvs	0x006c4368
    1010:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    1014:	68730064 	ldmdavs	r3!, {r2, r5, r6}^
    1018:	2074726f 	rsbscs	r7, r4, pc, ror #4
    101c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
    1020:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    1024:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
    1028:	43435200 	movtmi	r5, #12800	; 0x3200
    102c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1030:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    1034:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1038:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    103c:	435f384d 	cmpmi	pc, #5046272	; 0x4d0000
    1040:	52495f43 	subpl	r5, r9, #268	; 0x10c
    1044:	53006e51 	movwpl	r6, #3665	; 0xe51
    1048:	5f4f4944 	svcpl	0x004f4944
    104c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1050:	41504300 	cmpmi	r0, r0, lsl #6
    1054:	49005243 	stmdbmi	r0, {r0, r1, r6, r9, ip, lr}
    1058:	00525053 	subseq	r5, r2, r3, asr r0
    105c:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1060:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    1064:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    1068:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    106c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    1070:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    1074:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1078:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    107c:	495f5653 	ldmdbmi	pc, {r0, r1, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    1080:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1084:	5f47544f 	svcpl	0x0047544f
    1088:	455f5348 	ldrbmi	r5, [pc, #-840]	; d48 <startup-0x1ffff2b8>
    108c:	495f3150 	ldmdbmi	pc, {r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    1090:	52495f4e 	subpl	r5, r9, #312	; 0x138
    1094:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
    1098:	5f31414d 	svcpl	0x0031414d
    109c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    10a0:	5f376d61 	svcpl	0x00376d61
    10a4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    10a8:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    10ac:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
    10b0:	5200745f 	andpl	r7, r0, #1593835520	; 0x5f000000
    10b4:	545f4343 	ldrbpl	r4, [pc], #-835	; 10bc <startup-0x1fffef44>
    10b8:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
    10bc:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0xffffffb5
    10c0:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    10c4:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    10c8:	00524553 	subseq	r4, r2, r3, asr r5
    10cc:	73657270 	cmnvc	r5, #112, 4
    10d0:	43520063 	cmpmi	r2, #99	; 0x63
    10d4:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    10d8:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    10dc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    10e0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    10e4:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    10e8:	43435200 	movtmi	r5, #12800	; 0x3200
    10ec:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    10f0:	43494153 	movtmi	r4, #37203	; 0x9153
    10f4:	4100646d 	tstmi	r0, sp, ror #8
    10f8:	45334248 	ldrmi	r4, [r3, #-584]!	; 0xfffffdb8
    10fc:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
    1100:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    1104:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    1108:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    110c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1110:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    1114:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1118:	326d6165 	rsbcc	r6, sp, #1073741849	; 0x40000019
    111c:	5152495f 	cmppl	r2, pc, asr r9
    1120:	5047006e 	subpl	r0, r7, lr, rrx
    1124:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
    1128:	5f747361 	svcpl	0x00747361
    112c:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
    1130:	43520064 	cmpmi	r2, #100	; 0x64
    1134:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1138:	6e6f434c 	cdpvs	3, 6, cr4, cr15, cr12, {2}
    113c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1140:	6d6c6c70 	stclvs	12, cr6, [ip, #-448]!	; 0xfffffe40
    1144:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    1148:	00736f70 	rsbseq	r6, r3, r0, ror pc
    114c:	5f746942 	svcpl	0x00746942
    1150:	00544553 	subseq	r4, r4, r3, asr r5
    1154:	4f495047 	svcmi	0x00495047
    1158:	6165525f 	cmnvs	r5, pc, asr r2
    115c:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xfffff09c
    1160:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    1164:	00617461 	rsbeq	r7, r1, r1, ror #8
    1168:	4f495047 	svcmi	0x00495047
    116c:	0046415f 	subeq	r4, r6, pc, asr r1
    1170:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1174:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1178:	74535f4f 	ldrbvc	r5, [r3], #-3919	; 0xfffff0b1
    117c:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1180:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1184:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    1188:	006c6156 	rsbeq	r6, ip, r6, asr r1
    118c:	5f746942 	svcpl	0x00746942
    1190:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    1194:	50470054 	subpl	r0, r7, r4, asr r0
    1198:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    119c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    11a0:	00746942 	rsbseq	r6, r4, r2, asr #18
    11a4:	4f495047 	svcmi	0x00495047
    11a8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    11ac:	73746942 	cmnvc	r4, #1081344	; 0x108000
    11b0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    11b4:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    11b8:	47007469 	strmi	r7, [r0, -r9, ror #8]
    11bc:	5f4f4950 	svcpl	0x004f4950
    11c0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    11c4:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
    11c8:	50470073 	subpl	r0, r7, r3, ror r0
    11cc:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 11d4 <startup-0x1fffee2c>
    11d0:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    11d4:	50470074 	subpl	r0, r7, r4, ror r0
    11d8:	525f4f49 	subspl	r4, pc, #292	; 0x124
    11dc:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    11e0:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    11e4:	61746144 	cmnvs	r4, r4, asr #2
    11e8:	00746942 	rsbseq	r6, r4, r2, asr #18
    11ec:	675c3a43 	ldrbvs	r3, [ip, -r3, asr #20]
    11f0:	445c7469 	ldrbmi	r7, [ip], #-1129	; 0xfffffb97
    11f4:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    11f8:	614c2d30 	cmpvs	ip, r0, lsr sp
    11fc:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1200:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1204:	646f6b5c 	strbtvs	r6, [pc], #-2908	; 120c <startup-0x1fffedf4>
    1208:	6f6f445c 	svcvs	0x006f445c
    120c:	50470072 	subpl	r0, r7, r2, ror r0
    1210:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1214:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1218:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    121c:	6f500074 	svcvs	0x00500074
    1220:	61567472 	cmpvs	r6, r2, ror r4
    1224:	5047006c 	subpl	r0, r7, ip, rrx
    1228:	505f4f49 	subspl	r4, pc, r9, asr #30
    122c:	6f536e69 	svcvs	0x00536e69
    1230:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1234:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1238:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    123c:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    1240:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    1244:	00617461 	rsbeq	r7, r1, r1, ror #8
    1248:	4f495047 	svcmi	0x00495047
    124c:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    1250:	6b636f4c 	blvs	18dcf88 <startup-0x1e723078>
    1254:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1258:	42006769 	andmi	r6, r0, #27525120	; 0x1a40000
    125c:	63417469 	movtvs	r7, #5225	; 0x1469
    1260:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1264:	72756300 	rsbsvc	r6, r5, #0, 6
    1268:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    126c:	006e6970 	rsbeq	r6, lr, r0, ror r9
    1270:	4f495047 	svcmi	0x00495047
    1274:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1278:	47006574 	smlsdxmi	r0, r4, r5, r6
    127c:	784f4950 	stmdavc	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    1280:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1284:	6f545f4f 	svcvs	0x00545f4f
    1288:	656c6767 	strbvs	r6, [ip, #-1895]!	; 0xfffff899
    128c:	73746942 	cmnvc	r4, #1081344	; 0x108000
    1290:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1294:	00325f70 	eorseq	r5, r2, r0, ror pc
    1298:	672f3a43 	strvs	r3, [pc, -r3, asr #20]!
    129c:	442f7469 	strtmi	r7, [pc], #-1129	; 12a4 <startup-0x1fffed5c>
    12a0:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    12a4:	614c2d30 	cmpvs	ip, r0, lsr sp
    12a8:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    12ac:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    12b0:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 12b8 <startup-0x1fffed48>
    12b4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    12b8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    12bc:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    12c0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    12c4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    12c8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    12cc:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    12d0:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    12d4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    12d8:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    12dc:	2f726576 	svccs	0x00726576
    12e0:	2f637273 	svccs	0x00637273
    12e4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    12e8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    12ec:	70675f78 	rsbvc	r5, r7, r8, ror pc
    12f0:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    12f4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    12f8:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    12fc:	4346416e 	movtmi	r4, #24942	; 0x616e
    1300:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1304:	50470067 	subpl	r0, r7, r7, rrx
    1308:	525f4f49 	subspl	r4, pc, #292	; 0x124
    130c:	4f646165 	svcmi	0x00646165
    1310:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    1314:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1318:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <GPIO_Pins+0xdfffde16>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000060 	andeq	r0, r0, r0, rrx
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000070 	andcs	r0, r0, r0, ror r0
  3c:	00000048 	andeq	r0, r0, r8, asr #32
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	00000018 	andeq	r0, r0, r8, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000b8 	strhcs	r0, [r0], -r8
  5c:	00000070 	andeq	r0, r0, r0, ror r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	20000128 	andcs	r0, r0, r8, lsr #2
  78:	00000028 	andeq	r0, r0, r8, lsr #32
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	100e4101 	andne	r4, lr, r1, lsl #2
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	00000020 	andeq	r0, r0, r0, lsr #32
  90:	00000000 	andeq	r0, r0, r0
  94:	20000150 	andcs	r0, r0, r0, asr r1
  98:	0000005e 	andeq	r0, r0, lr, asr r0
  9c:	400c0e41 	andmi	r0, ip, r1, asr #28
  a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  a4:	018e4002 	orreq	r4, lr, r2
  a8:	41180e41 	tstmi	r8, r1, asr #28
  ac:	0000070d 	andeq	r0, r0, sp, lsl #14
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200001ae 	andcs	r0, r0, lr, lsr #3
  bc:	0000003e 	andeq	r0, r0, lr, lsr r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	180e4101 	stmdane	lr, {r0, r8, lr}
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200001ec 	andcs	r0, r0, ip, ror #3
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	2000020c 	andcs	r0, r0, ip, lsl #4
  fc:	00000044 	andeq	r0, r0, r4, asr #32
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20000250 	andcs	r0, r0, r0, asr r2
 11c:	00000020 	andeq	r0, r0, r0, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000270 	andcs	r0, r0, r0, ror r2
 13c:	0000003c 	andeq	r0, r0, ip, lsr r0
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	180e4101 	stmdane	lr, {r0, r8, lr}
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200002ac 	andcs	r0, r0, ip, lsr #5
 15c:	00000020 	andeq	r0, r0, r0, lsr #32
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	200002cc 	andcs	r0, r0, ip, asr #5
 17c:	00000028 	andeq	r0, r0, r8, lsr #32
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	100e4101 	andne	r4, lr, r1, lsl #2
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200002f4 	strdcs	r0, [r0], -r4
 19c:	00000020 	andeq	r0, r0, r0, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20000314 	andcs	r0, r0, r4, lsl r3
 1bc:	00000030 	andeq	r0, r0, r0, lsr r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000344 	andcs	r0, r0, r4, asr #6
 1dc:	00000020 	andeq	r0, r0, r0, lsr #32
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20000364 	andcs	r0, r0, r4, ror #6
 1fc:	00000020 	andeq	r0, r0, r0, lsr #32
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000384 	andcs	r0, r0, r4, lsl #7
 21c:	00000040 	andeq	r0, r0, r0, asr #32
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	200003c4 	andcs	r0, r0, r4, asr #7
 23c:	0000003c 	andeq	r0, r0, ip, lsr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000000 	andeq	r0, r0, r0
 258:	20000400 	andcs	r0, r0, r0, lsl #8
 25c:	00000034 	andeq	r0, r0, r4, lsr r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	180e4101 	stmdane	lr, {r0, r8, lr}
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	00000018 	andeq	r0, r0, r8, lsl r0
 274:	00000000 	andeq	r0, r0, r0
 278:	20000434 	andcs	r0, r0, r4, lsr r4
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	20000450 	andcs	r0, r0, r0, asr r4
 298:	00000034 	andeq	r0, r0, r4, lsr r0
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	20000484 	andcs	r0, r0, r4, lsl #9
 2b8:	00000038 	andeq	r0, r0, r8, lsr r0
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c8:	00070d41 	andeq	r0, r7, r1, asr #26
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
 2d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	200004f8 	strdcs	r0, [r0], -r8
 2f8:	00000158 	andeq	r0, r0, r8, asr r1
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	280e4101 	stmdacs	lr, {r0, r8, lr}
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	20000650 	andcs	r0, r0, r0, asr r6
 318:	00000060 	andeq	r0, r0, r0, rrx
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	180e4101 	stmdane	lr, {r0, r8, lr}
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 358:	00000020 	andeq	r0, r0, r0, lsr #32
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	100e4101 	andne	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	100e4101 	andne	r4, lr, r1, lsl #2
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	2000070c 	andcs	r0, r0, ip, lsl #14
 398:	0000003c 	andeq	r0, r0, ip, lsr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	20000748 	andcs	r0, r0, r8, asr #14
 3b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c8:	00070d41 	andeq	r0, r7, r1, asr #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	20000784 	andcs	r0, r0, r4, lsl #15
 3d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	200007c0 	andcs	r0, r0, r0, asr #15
 3f8:	00000040 	andeq	r0, r0, r0, asr #32
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	180e4101 	stmdane	lr, {r0, r8, lr}
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	20000800 	andcs	r0, r0, r0, lsl #16
 418:	0000003c 	andeq	r0, r0, ip, lsr r0
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	180e4101 	stmdane	lr, {r0, r8, lr}
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	2000083c 	andcs	r0, r0, ip, lsr r8
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	100e4101 	andne	r4, lr, r1, lsl #2
 448:	00070d41 	andeq	r0, r7, r1, asr #26
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000000 	andeq	r0, r0, r0
 454:	20000858 	andcs	r0, r0, r8, asr r8
 458:	00000040 	andeq	r0, r0, r0, asr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	100e4101 	andne	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	20000898 	mulcs	r0, r8, r8
 478:	00000040 	andeq	r0, r0, r0, asr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	200008d8 	ldrdcs	r0, [r0], -r8
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	100e4101 	andne	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	20000918 	andcs	r0, r0, r8, lsl r9
 4b8:	00000040 	andeq	r0, r0, r0, asr #32
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	20000958 	andcs	r0, r0, r8, asr r9
 4d8:	00000040 	andeq	r0, r0, r0, asr #32
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	100e4101 	andne	r4, lr, r1, lsl #2
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	20000998 	mulcs	r0, r8, r9
 4f8:	00000040 	andeq	r0, r0, r0, asr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	100e4101 	andne	r4, lr, r1, lsl #2
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	00000000 	andeq	r0, r0, r0
 514:	200009d8 	ldrdcs	r0, [r0], -r8
 518:	00000040 	andeq	r0, r0, r0, asr #32
 51c:	40080e41 	andmi	r0, r8, r1, asr #28
 520:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 524:	100e4101 	andne	r4, lr, r1, lsl #2
 528:	00070d41 	andeq	r0, r7, r1, asr #26
 52c:	0000001c 	andeq	r0, r0, ip, lsl r0
 530:	00000000 	andeq	r0, r0, r0
 534:	20000a18 	andcs	r0, r0, r8, lsl sl
 538:	00000040 	andeq	r0, r0, r0, asr #32
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	100e4101 	andne	r4, lr, r1, lsl #2
 548:	00070d41 	andeq	r0, r7, r1, asr #26
 54c:	0000001c 	andeq	r0, r0, ip, lsl r0
 550:	00000000 	andeq	r0, r0, r0
 554:	20000a58 	andcs	r0, r0, r8, asr sl
 558:	00000040 	andeq	r0, r0, r0, asr #32
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	100e4101 	andne	r4, lr, r1, lsl #2
 568:	00070d41 	andeq	r0, r7, r1, asr #26
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	00000000 	andeq	r0, r0, r0
 574:	20000a98 	mulcs	r0, r8, sl
 578:	00000040 	andeq	r0, r0, r0, asr #32
 57c:	40080e41 	andmi	r0, r8, r1, asr #28
 580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 584:	100e4101 	andne	r4, lr, r1, lsl #2
 588:	00070d41 	andeq	r0, r7, r1, asr #26
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000000 	andeq	r0, r0, r0
 594:	20000ad8 	ldrdcs	r0, [r0], -r8
 598:	00000040 	andeq	r0, r0, r0, asr #32
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	100e4101 	andne	r4, lr, r1, lsl #2
 5a8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	20000b18 	andcs	r0, r0, r8, lsl fp
 5b8:	00000040 	andeq	r0, r0, r0, asr #32
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	100e4101 	andne	r4, lr, r1, lsl #2
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	20000b58 	andcs	r0, r0, r8, asr fp
 5d8:	00000040 	andeq	r0, r0, r0, asr #32
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	100e4101 	andne	r4, lr, r1, lsl #2
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	20000b98 	mulcs	r0, r8, fp
 5f8:	00000040 	andeq	r0, r0, r0, asr #32
 5fc:	40080e41 	andmi	r0, r8, r1, asr #28
 600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 604:	100e4101 	andne	r4, lr, r1, lsl #2
 608:	00070d41 	andeq	r0, r7, r1, asr #26
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	00000000 	andeq	r0, r0, r0
 614:	20000bd8 	ldrdcs	r0, [r0], -r8
 618:	00000040 	andeq	r0, r0, r0, asr #32
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	100e4101 	andne	r4, lr, r1, lsl #2
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	20000c18 	andcs	r0, r0, r8, lsl ip
 638:	0000003c 	andeq	r0, r0, ip, lsr r0
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	100e4101 	andne	r4, lr, r1, lsl #2
 648:	00070d41 	andeq	r0, r7, r1, asr #26
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	20000c54 	andcs	r0, r0, r4, asr ip
 658:	00000050 	andeq	r0, r0, r0, asr r0
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	100e4101 	andne	r4, lr, r1, lsl #2
 668:	00070d41 	andeq	r0, r7, r1, asr #26
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	00000000 	andeq	r0, r0, r0
 674:	20000ca4 	andcs	r0, r0, r4, lsr #25
 678:	00000084 	andeq	r0, r0, r4, lsl #1
 67c:	40080e41 	andmi	r0, r8, r1, asr #28
 680:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 684:	200e4101 	andcs	r4, lr, r1, lsl #2
 688:	00070d41 	andeq	r0, r7, r1, asr #26
 68c:	00000018 	andeq	r0, r0, r8, lsl r0
 690:	00000000 	andeq	r0, r0, r0
 694:	20000d28 	andcs	r0, r0, r8, lsr #26
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	40080e41 	andmi	r0, r8, r1, asr #28
 6a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ac:	00000000 	andeq	r0, r0, r0
 6b0:	20000d44 	andcs	r0, r0, r4, asr #26
 6b4:	00000044 	andeq	r0, r0, r4, asr #32
 6b8:	40080e41 	andmi	r0, r8, r1, asr #28
 6bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 6c4:	00070d41 	andeq	r0, r7, r1, asr #26
 6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6cc:	00000000 	andeq	r0, r0, r0
 6d0:	20000d88 	andcs	r0, r0, r8, lsl #27
 6d4:	00000020 	andeq	r0, r0, r0, lsr #32
 6d8:	40080e41 	andmi	r0, r8, r1, asr #28
 6dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e0:	100e4101 	andne	r4, lr, r1, lsl #2
 6e4:	00070d41 	andeq	r0, r7, r1, asr #26
 6e8:	0000000c 	andeq	r0, r0, ip
 6ec:	00000000 	andeq	r0, r0, r0
 6f0:	20000000 	andcs	r0, r0, r0
 6f4:	0000000c 	andeq	r0, r0, ip
 6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6fc:	00000000 	andeq	r0, r0, r0
 700:	20000da8 	andcs	r0, r0, r8, lsr #27
 704:	00000068 	andeq	r0, r0, r8, rrx
 708:	40080e41 	andmi	r0, r8, r1, asr #28
 70c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 710:	100e4101 	andne	r4, lr, r1, lsl #2
 714:	00070d41 	andeq	r0, r7, r1, asr #26
 718:	00000018 	andeq	r0, r0, r8, lsl r0
 71c:	00000000 	andeq	r0, r0, r0
 720:	20000e10 	andcs	r0, r0, r0, lsl lr
 724:	00000054 	andeq	r0, r0, r4, asr r0
 728:	40080e41 	andmi	r0, r8, r1, asr #28
 72c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 730:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 734:	0000001c 	andeq	r0, r0, ip, lsl r0
 738:	00000000 	andeq	r0, r0, r0
 73c:	20000e64 	andcs	r0, r0, r4, ror #28
 740:	00000058 	andeq	r0, r0, r8, asr r0
 744:	40080e41 	andmi	r0, r8, r1, asr #28
 748:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 74c:	100e4101 	andne	r4, lr, r1, lsl #2
 750:	00070d41 	andeq	r0, r7, r1, asr #26
 754:	0000000c 	andeq	r0, r0, ip
 758:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 75c:	7c020001 	stcvc	0, cr0, [r2], {1}
 760:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 764:	0000001c 	andeq	r0, r0, ip, lsl r0
 768:	00000754 	andeq	r0, r0, r4, asr r7
 76c:	20000ebc 			; <UNDEFINED> instruction: 0x20000ebc
 770:	00000170 	andeq	r0, r0, r0, ror r1
 774:	40080e41 	andmi	r0, r8, r1, asr #28
 778:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 77c:	100e4101 	andne	r4, lr, r1, lsl #2
 780:	00070d41 	andeq	r0, r7, r1, asr #26
 784:	0000001c 	andeq	r0, r0, ip, lsl r0
 788:	00000754 	andeq	r0, r0, r4, asr r7
 78c:	2000102c 	andcs	r1, r0, ip, lsr #32
 790:	00000118 	andeq	r0, r0, r8, lsl r1
 794:	40080e41 	andmi	r0, r8, r1, asr #28
 798:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 79c:	200e4101 	andcs	r4, lr, r1, lsl #2
 7a0:	00070d41 	andeq	r0, r7, r1, asr #26
 7a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a8:	00000754 	andeq	r0, r0, r4, asr r7
 7ac:	20001144 	andcs	r1, r0, r4, asr #2
 7b0:	00000034 	andeq	r0, r0, r4, lsr r0
 7b4:	40080e41 	andmi	r0, r8, r1, asr #28
 7b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7bc:	100e4101 	andne	r4, lr, r1, lsl #2
 7c0:	00070d41 	andeq	r0, r7, r1, asr #26
 7c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7c8:	00000754 	andeq	r0, r0, r4, asr r7
 7cc:	20001178 	andcs	r1, r0, r8, ror r1
 7d0:	00000046 	andeq	r0, r0, r6, asr #32
 7d4:	40080e41 	andmi	r0, r8, r1, asr #28
 7d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7dc:	180e4101 	stmdane	lr, {r0, r8, lr}
 7e0:	00070d41 	andeq	r0, r7, r1, asr #26
 7e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7e8:	00000754 	andeq	r0, r0, r4, asr r7
 7ec:	200011be 			; <UNDEFINED> instruction: 0x200011be
 7f0:	00000042 	andeq	r0, r0, r2, asr #32
 7f4:	40080e41 	andmi	r0, r8, r1, asr #28
 7f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 800:	00070d41 	andeq	r0, r7, r1, asr #26
 804:	0000001c 	andeq	r0, r0, ip, lsl r0
 808:	00000754 	andeq	r0, r0, r4, asr r7
 80c:	20001200 	andcs	r1, r0, r0, lsl #4
 810:	00000016 	andeq	r0, r0, r6, lsl r0
 814:	40080e41 	andmi	r0, r8, r1, asr #28
 818:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 81c:	100e4101 	andne	r4, lr, r1, lsl #2
 820:	00070d41 	andeq	r0, r7, r1, asr #26
 824:	0000001c 	andeq	r0, r0, ip, lsl r0
 828:	00000754 	andeq	r0, r0, r4, asr r7
 82c:	20001216 	andcs	r1, r0, r6, lsl r2
 830:	00000042 	andeq	r0, r0, r2, asr #32
 834:	40080e41 	andmi	r0, r8, r1, asr #28
 838:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 83c:	180e4101 	stmdane	lr, {r0, r8, lr}
 840:	00070d41 	andeq	r0, r7, r1, asr #26
 844:	0000001c 	andeq	r0, r0, ip, lsl r0
 848:	00000754 	andeq	r0, r0, r4, asr r7
 84c:	20001258 	andcs	r1, r0, r8, asr r2
 850:	00000016 	andeq	r0, r0, r6, lsl r0
 854:	40080e41 	andmi	r0, r8, r1, asr #28
 858:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 85c:	100e4101 	andne	r4, lr, r1, lsl #2
 860:	00070d41 	andeq	r0, r7, r1, asr #26
 864:	0000001c 	andeq	r0, r0, ip, lsl r0
 868:	00000754 	andeq	r0, r0, r4, asr r7
 86c:	2000126e 	andcs	r1, r0, lr, ror #4
 870:	0000001e 	andeq	r0, r0, lr, lsl r0
 874:	40080e41 	andmi	r0, r8, r1, asr #28
 878:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 87c:	100e4101 	andne	r4, lr, r1, lsl #2
 880:	00070d41 	andeq	r0, r7, r1, asr #26
 884:	0000001c 	andeq	r0, r0, ip, lsl r0
 888:	00000754 	andeq	r0, r0, r4, asr r7
 88c:	2000128c 	andcs	r1, r0, ip, lsl #5
 890:	0000001e 	andeq	r0, r0, lr, lsl r0
 894:	40080e41 	andmi	r0, r8, r1, asr #28
 898:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 89c:	100e4101 	andne	r4, lr, r1, lsl #2
 8a0:	00070d41 	andeq	r0, r7, r1, asr #26
 8a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8a8:	00000754 	andeq	r0, r0, r4, asr r7
 8ac:	200012aa 	andcs	r1, r0, sl, lsr #5
 8b0:	0000003a 	andeq	r0, r0, sl, lsr r0
 8b4:	40080e41 	andmi	r0, r8, r1, asr #28
 8b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8bc:	100e4101 	andne	r4, lr, r1, lsl #2
 8c0:	00070d41 	andeq	r0, r7, r1, asr #26
 8c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8c8:	00000754 	andeq	r0, r0, r4, asr r7
 8cc:	200012e4 	andcs	r1, r0, r4, ror #5
 8d0:	0000001e 	andeq	r0, r0, lr, lsl r0
 8d4:	40080e41 	andmi	r0, r8, r1, asr #28
 8d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8dc:	100e4101 	andne	r4, lr, r1, lsl #2
 8e0:	00070d41 	andeq	r0, r7, r1, asr #26
 8e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e8:	00000754 	andeq	r0, r0, r4, asr r7
 8ec:	20001302 	andcs	r1, r0, r2, lsl #6
 8f0:	00000024 	andeq	r0, r0, r4, lsr #32
 8f4:	40080e41 	andmi	r0, r8, r1, asr #28
 8f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8fc:	100e4101 	andne	r4, lr, r1, lsl #2
 900:	00070d41 	andeq	r0, r7, r1, asr #26
 904:	0000001c 	andeq	r0, r0, ip, lsl r0
 908:	00000754 	andeq	r0, r0, r4, asr r7
 90c:	20001326 	andcs	r1, r0, r6, lsr #6
 910:	000000a4 	andeq	r0, r0, r4, lsr #1
 914:	40080e41 	andmi	r0, r8, r1, asr #28
 918:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 91c:	180e4101 	stmdane	lr, {r0, r8, lr}
 920:	00070d41 	andeq	r0, r7, r1, asr #26
 924:	0000000c 	andeq	r0, r0, ip
 928:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 92c:	7c010001 	stcvc	0, cr0, [r1], {1}
 930:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 934:	0000000c 	andeq	r0, r0, ip
 938:	00000924 	andeq	r0, r0, r4, lsr #18
 93c:	200013cd 	andcs	r1, r0, sp, asr #7
 940:	0000010a 	andeq	r0, r0, sl, lsl #2
