
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 ff9e 	bl	20000f44 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	6039      	str	r1, [r7, #0]
2000001a:	1dfb      	adds	r3, r7, #7
2000001c:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000001e:	1dfb      	adds	r3, r7, #7
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	2b7f      	cmp	r3, #127	; 0x7f
20000024:	d90d      	bls.n	20000042 <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000026:	683b      	ldr	r3, [r7, #0]
20000028:	b2da      	uxtb	r2, r3
2000002a:	490f      	ldr	r1, [pc, #60]	; (20000068 <NVIC_SetPriority+0x58>)
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	781b      	ldrb	r3, [r3, #0]
20000030:	0018      	movs	r0, r3
20000032:	230f      	movs	r3, #15
20000034:	4003      	ands	r3, r0
20000036:	3b04      	subs	r3, #4
20000038:	0112      	lsls	r2, r2, #4
2000003a:	b2d2      	uxtb	r2, r2
2000003c:	18cb      	adds	r3, r1, r3
2000003e:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000040:	e00d      	b.n	2000005e <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000042:	683b      	ldr	r3, [r7, #0]
20000044:	b2db      	uxtb	r3, r3
20000046:	4909      	ldr	r1, [pc, #36]	; (2000006c <NVIC_SetPriority+0x5c>)
20000048:	1dfa      	adds	r2, r7, #7
2000004a:	7812      	ldrb	r2, [r2, #0]
2000004c:	b252      	sxtb	r2, r2
2000004e:	011b      	lsls	r3, r3, #4
20000050:	b2d8      	uxtb	r0, r3
20000052:	23c0      	movs	r3, #192	; 0xc0
20000054:	009b      	lsls	r3, r3, #2
20000056:	188a      	adds	r2, r1, r2
20000058:	18d3      	adds	r3, r2, r3
2000005a:	1c02      	adds	r2, r0, #0
2000005c:	701a      	strb	r2, [r3, #0]
}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	46bd      	mov	sp, r7
20000062:	b002      	add	sp, #8
20000064:	bd80      	pop	{r7, pc}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	e000ed00 	and	lr, r0, r0, lsl #26
2000006c:	e000e100 	and	lr, r0, r0, lsl #2

20000070 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20000070:	b580      	push	{r7, lr}
20000072:	b082      	sub	sp, #8
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	3b01      	subs	r3, #1
2000007c:	4a0c      	ldr	r2, [pc, #48]	; (200000b0 <SysTick_Config+0x40>)
2000007e:	4293      	cmp	r3, r2
20000080:	d901      	bls.n	20000086 <SysTick_Config+0x16>
20000082:	2301      	movs	r3, #1
20000084:	e010      	b.n	200000a8 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20000086:	4b0b      	ldr	r3, [pc, #44]	; (200000b4 <SysTick_Config+0x44>)
20000088:	687a      	ldr	r2, [r7, #4]
2000008a:	3a01      	subs	r2, #1
2000008c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000008e:	2301      	movs	r3, #1
20000090:	425b      	negs	r3, r3
20000092:	210f      	movs	r1, #15
20000094:	0018      	movs	r0, r3
20000096:	f7ff ffbb 	bl	20000010 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000009a:	4b06      	ldr	r3, [pc, #24]	; (200000b4 <SysTick_Config+0x44>)
2000009c:	2200      	movs	r2, #0
2000009e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200000a0:	4b04      	ldr	r3, [pc, #16]	; (200000b4 <SysTick_Config+0x44>)
200000a2:	2207      	movs	r2, #7
200000a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200000a6:	2300      	movs	r3, #0
}
200000a8:	0018      	movs	r0, r3
200000aa:	46bd      	mov	sp, r7
200000ac:	b002      	add	sp, #8
200000ae:	bd80      	pop	{r7, pc}
200000b0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200000b4:	e000e010 	and	lr, r0, r0, lsl r0

200000b8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200000bc:	4b14      	ldr	r3, [pc, #80]	; (20000110 <RCC_DeInit+0x58>)
200000be:	681a      	ldr	r2, [r3, #0]
200000c0:	4b13      	ldr	r3, [pc, #76]	; (20000110 <RCC_DeInit+0x58>)
200000c2:	2101      	movs	r1, #1
200000c4:	430a      	orrs	r2, r1
200000c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200000c8:	4b11      	ldr	r3, [pc, #68]	; (20000110 <RCC_DeInit+0x58>)
200000ca:	2200      	movs	r2, #0
200000cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
200000ce:	4b10      	ldr	r3, [pc, #64]	; (20000110 <RCC_DeInit+0x58>)
200000d0:	681a      	ldr	r2, [r3, #0]
200000d2:	4b0f      	ldr	r3, [pc, #60]	; (20000110 <RCC_DeInit+0x58>)
200000d4:	490f      	ldr	r1, [pc, #60]	; (20000114 <RCC_DeInit+0x5c>)
200000d6:	400a      	ands	r2, r1
200000d8:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200000da:	4b0d      	ldr	r3, [pc, #52]	; (20000110 <RCC_DeInit+0x58>)
200000dc:	4a0e      	ldr	r2, [pc, #56]	; (20000118 <RCC_DeInit+0x60>)
200000de:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
200000e0:	4a0b      	ldr	r2, [pc, #44]	; (20000110 <RCC_DeInit+0x58>)
200000e2:	2384      	movs	r3, #132	; 0x84
200000e4:	490d      	ldr	r1, [pc, #52]	; (2000011c <RCC_DeInit+0x64>)
200000e6:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
200000e8:	4a09      	ldr	r2, [pc, #36]	; (20000110 <RCC_DeInit+0x58>)
200000ea:	2388      	movs	r3, #136	; 0x88
200000ec:	490c      	ldr	r1, [pc, #48]	; (20000120 <RCC_DeInit+0x68>)
200000ee:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200000f0:	4b07      	ldr	r3, [pc, #28]	; (20000110 <RCC_DeInit+0x58>)
200000f2:	681a      	ldr	r2, [r3, #0]
200000f4:	4b06      	ldr	r3, [pc, #24]	; (20000110 <RCC_DeInit+0x58>)
200000f6:	490b      	ldr	r1, [pc, #44]	; (20000124 <RCC_DeInit+0x6c>)
200000f8:	400a      	ands	r2, r1
200000fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200000fc:	4b04      	ldr	r3, [pc, #16]	; (20000110 <RCC_DeInit+0x58>)
200000fe:	2200      	movs	r2, #0
20000100:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20000102:	4a03      	ldr	r2, [pc, #12]	; (20000110 <RCC_DeInit+0x58>)
20000104:	238c      	movs	r3, #140	; 0x8c
20000106:	2100      	movs	r1, #0
20000108:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	46bd      	mov	sp, r7
2000010e:	bd80      	pop	{r7, pc}
20000110:	40023800 	andmi	r3, r2, r0, lsl #16
20000114:	eaf6ffff 	b	1fdc0118 <startup-0x23fee8>
20000118:	24003010 	strcs	r3, [r0], #-16
2000011c:	20003000 	andcs	r3, r0, r0
20000120:	24003000 	strcs	r3, [r0], #-0
20000124:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000128 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000128:	b580      	push	{r7, lr}
2000012a:	b082      	sub	sp, #8
2000012c:	af00      	add	r7, sp, #0
2000012e:	0002      	movs	r2, r0
20000130:	1dfb      	adds	r3, r7, #7
20000132:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20000134:	4b05      	ldr	r3, [pc, #20]	; (2000014c <RCC_HSEConfig+0x24>)
20000136:	2200      	movs	r2, #0
20000138:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
2000013a:	4a04      	ldr	r2, [pc, #16]	; (2000014c <RCC_HSEConfig+0x24>)
2000013c:	1dfb      	adds	r3, r7, #7
2000013e:	781b      	ldrb	r3, [r3, #0]
20000140:	7013      	strb	r3, [r2, #0]
}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40023802 	andmi	r3, r2, r2, lsl #16

20000150 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20000156:	2300      	movs	r3, #0
20000158:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
2000015a:	1dfb      	adds	r3, r7, #7
2000015c:	2200      	movs	r2, #0
2000015e:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20000160:	1dbb      	adds	r3, r7, #6
20000162:	2200      	movs	r2, #0
20000164:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20000166:	1dbc      	adds	r4, r7, #6
20000168:	2031      	movs	r0, #49	; 0x31
2000016a:	f000 fd9b 	bl	20000ca4 <RCC_GetFlagStatus>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20000172:	683b      	ldr	r3, [r7, #0]
20000174:	3301      	adds	r3, #1
20000176:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20000178:	683a      	ldr	r2, [r7, #0]
2000017a:	23a0      	movs	r3, #160	; 0xa0
2000017c:	01db      	lsls	r3, r3, #7
2000017e:	429a      	cmp	r2, r3
20000180:	d003      	beq.n	2000018a <RCC_WaitForHSEStartUp+0x3a>
20000182:	1dbb      	adds	r3, r7, #6
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	2b00      	cmp	r3, #0
20000188:	d0ed      	beq.n	20000166 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
2000018a:	2031      	movs	r0, #49	; 0x31
2000018c:	f000 fd8a 	bl	20000ca4 <RCC_GetFlagStatus>
20000190:	1e03      	subs	r3, r0, #0
20000192:	d003      	beq.n	2000019c <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20000194:	1dfb      	adds	r3, r7, #7
20000196:	2201      	movs	r2, #1
20000198:	701a      	strb	r2, [r3, #0]
2000019a:	e002      	b.n	200001a2 <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	2200      	movs	r2, #0
200001a0:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200001a2:	1dfb      	adds	r3, r7, #7
200001a4:	781b      	ldrb	r3, [r3, #0]
}
200001a6:	0018      	movs	r0, r3
200001a8:	46bd      	mov	sp, r7
200001aa:	b003      	add	sp, #12
200001ac:	bd90      	pop	{r4, r7, pc}

200001ae <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
200001ae:	b580      	push	{r7, lr}
200001b0:	b084      	sub	sp, #16
200001b2:	af00      	add	r7, sp, #0
200001b4:	0002      	movs	r2, r0
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
200001ba:	2300      	movs	r3, #0
200001bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
200001be:	4b0a      	ldr	r3, [pc, #40]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001c0:	681b      	ldr	r3, [r3, #0]
200001c2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
200001c4:	68fb      	ldr	r3, [r7, #12]
200001c6:	22f8      	movs	r2, #248	; 0xf8
200001c8:	4393      	bics	r3, r2
200001ca:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
200001cc:	1dfb      	adds	r3, r7, #7
200001ce:	781b      	ldrb	r3, [r3, #0]
200001d0:	00db      	lsls	r3, r3, #3
200001d2:	68fa      	ldr	r2, [r7, #12]
200001d4:	4313      	orrs	r3, r2
200001d6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
200001d8:	4b03      	ldr	r3, [pc, #12]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001da:	68fa      	ldr	r2, [r7, #12]
200001dc:	601a      	str	r2, [r3, #0]
}
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	46bd      	mov	sp, r7
200001e2:	b004      	add	sp, #16
200001e4:	bd80      	pop	{r7, pc}
200001e6:	46c0      	nop			; (mov r8, r8)
200001e8:	40023800 	andmi	r3, r2, r0, lsl #16

200001ec <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b082      	sub	sp, #8
200001f0:	af00      	add	r7, sp, #0
200001f2:	0002      	movs	r2, r0
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
200001f8:	4b03      	ldr	r3, [pc, #12]	; (20000208 <RCC_HSICmd+0x1c>)
200001fa:	1dfa      	adds	r2, r7, #7
200001fc:	7812      	ldrb	r2, [r2, #0]
200001fe:	601a      	str	r2, [r3, #0]
}
20000200:	46c0      	nop			; (mov r8, r8)
20000202:	46bd      	mov	sp, r7
20000204:	b002      	add	sp, #8
20000206:	bd80      	pop	{r7, pc}
20000208:	42470000 	submi	r0, r7, #0

2000020c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
2000020c:	b580      	push	{r7, lr}
2000020e:	b082      	sub	sp, #8
20000210:	af00      	add	r7, sp, #0
20000212:	0002      	movs	r2, r0
20000214:	1dfb      	adds	r3, r7, #7
20000216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000218:	4b0c      	ldr	r3, [pc, #48]	; (2000024c <RCC_LSEConfig+0x40>)
2000021a:	2200      	movs	r2, #0
2000021c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <RCC_LSEConfig+0x40>)
20000220:	2200      	movs	r2, #0
20000222:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20000224:	1dfb      	adds	r3, r7, #7
20000226:	781b      	ldrb	r3, [r3, #0]
20000228:	2b01      	cmp	r3, #1
2000022a:	d002      	beq.n	20000232 <RCC_LSEConfig+0x26>
2000022c:	2b04      	cmp	r3, #4
2000022e:	d004      	beq.n	2000023a <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000230:	e007      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20000232:	4b06      	ldr	r3, [pc, #24]	; (2000024c <RCC_LSEConfig+0x40>)
20000234:	2201      	movs	r2, #1
20000236:	701a      	strb	r2, [r3, #0]
      break;
20000238:	e003      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
2000023a:	4b04      	ldr	r3, [pc, #16]	; (2000024c <RCC_LSEConfig+0x40>)
2000023c:	2205      	movs	r2, #5
2000023e:	701a      	strb	r2, [r3, #0]
      break;
20000240:	46c0      	nop			; (mov r8, r8)
  }
}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	46bd      	mov	sp, r7
20000246:	b002      	add	sp, #8
20000248:	bd80      	pop	{r7, pc}
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	40023870 	andmi	r3, r2, r0, ror r8

20000250 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20000250:	b580      	push	{r7, lr}
20000252:	b082      	sub	sp, #8
20000254:	af00      	add	r7, sp, #0
20000256:	0002      	movs	r2, r0
20000258:	1dfb      	adds	r3, r7, #7
2000025a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
2000025c:	4b03      	ldr	r3, [pc, #12]	; (2000026c <RCC_LSICmd+0x1c>)
2000025e:	1dfa      	adds	r2, r7, #7
20000260:	7812      	ldrb	r2, [r2, #0]
20000262:	601a      	str	r2, [r3, #0]
}
20000264:	46c0      	nop			; (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b002      	add	sp, #8
2000026a:	bd80      	pop	{r7, pc}
2000026c:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20000270 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20000270:	b580      	push	{r7, lr}
20000272:	b084      	sub	sp, #16
20000274:	af00      	add	r7, sp, #0
20000276:	60f8      	str	r0, [r7, #12]
20000278:	60b9      	str	r1, [r7, #8]
2000027a:	607a      	str	r2, [r7, #4]
2000027c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	019a      	lsls	r2, r3, #6
20000282:	68bb      	ldr	r3, [r7, #8]
20000284:	431a      	orrs	r2, r3
20000286:	683b      	ldr	r3, [r7, #0]
20000288:	085b      	lsrs	r3, r3, #1
2000028a:	3b01      	subs	r3, #1
2000028c:	041b      	lsls	r3, r3, #16
2000028e:	431a      	orrs	r2, r3
20000290:	68fb      	ldr	r3, [r7, #12]
20000292:	431a      	orrs	r2, r3
20000294:	0011      	movs	r1, r2
                 (PLLQ << 24);
20000296:	69bb      	ldr	r3, [r7, #24]
20000298:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000029a:	4b03      	ldr	r3, [pc, #12]	; (200002a8 <RCC_PLLConfig+0x38>)
2000029c:	430a      	orrs	r2, r1
2000029e:	605a      	str	r2, [r3, #4]
}
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	b004      	add	sp, #16
200002a6:	bd80      	pop	{r7, pc}
200002a8:	40023800 	andmi	r3, r2, r0, lsl #16

200002ac <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
200002ac:	b580      	push	{r7, lr}
200002ae:	b082      	sub	sp, #8
200002b0:	af00      	add	r7, sp, #0
200002b2:	0002      	movs	r2, r0
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
200002b8:	4b03      	ldr	r3, [pc, #12]	; (200002c8 <RCC_PLLCmd+0x1c>)
200002ba:	1dfa      	adds	r2, r7, #7
200002bc:	7812      	ldrb	r2, [r2, #0]
200002be:	601a      	str	r2, [r3, #0]
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b002      	add	sp, #8
200002c6:	bd80      	pop	{r7, pc}
200002c8:	42470060 	submi	r0, r7, #96	; 0x60

200002cc <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
200002cc:	b580      	push	{r7, lr}
200002ce:	b082      	sub	sp, #8
200002d0:	af00      	add	r7, sp, #0
200002d2:	6078      	str	r0, [r7, #4]
200002d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
200002d6:	687b      	ldr	r3, [r7, #4]
200002d8:	019a      	lsls	r2, r3, #6
200002da:	683b      	ldr	r3, [r7, #0]
200002dc:	071b      	lsls	r3, r3, #28
200002de:	4904      	ldr	r1, [pc, #16]	; (200002f0 <RCC_PLLI2SConfig+0x24>)
200002e0:	4313      	orrs	r3, r2
200002e2:	2284      	movs	r2, #132	; 0x84
200002e4:	508b      	str	r3, [r1, r2]
}
200002e6:	46c0      	nop			; (mov r8, r8)
200002e8:	46bd      	mov	sp, r7
200002ea:	b002      	add	sp, #8
200002ec:	bd80      	pop	{r7, pc}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	40023800 	andmi	r3, r2, r0, lsl #16

200002f4 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
200002f4:	b580      	push	{r7, lr}
200002f6:	b082      	sub	sp, #8
200002f8:	af00      	add	r7, sp, #0
200002fa:	0002      	movs	r2, r0
200002fc:	1dfb      	adds	r3, r7, #7
200002fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000300:	4b03      	ldr	r3, [pc, #12]	; (20000310 <RCC_PLLI2SCmd+0x1c>)
20000302:	1dfa      	adds	r2, r7, #7
20000304:	7812      	ldrb	r2, [r2, #0]
20000306:	601a      	str	r2, [r3, #0]
}
20000308:	46c0      	nop			; (mov r8, r8)
2000030a:	46bd      	mov	sp, r7
2000030c:	b002      	add	sp, #8
2000030e:	bd80      	pop	{r7, pc}
20000310:	42470068 	submi	r0, r7, #104	; 0x68

20000314 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000314:	b580      	push	{r7, lr}
20000316:	b084      	sub	sp, #16
20000318:	af00      	add	r7, sp, #0
2000031a:	60f8      	str	r0, [r7, #12]
2000031c:	60b9      	str	r1, [r7, #8]
2000031e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000320:	68fb      	ldr	r3, [r7, #12]
20000322:	019a      	lsls	r2, r3, #6
20000324:	68bb      	ldr	r3, [r7, #8]
20000326:	061b      	lsls	r3, r3, #24
20000328:	431a      	orrs	r2, r3
2000032a:	687b      	ldr	r3, [r7, #4]
2000032c:	071b      	lsls	r3, r3, #28
2000032e:	4904      	ldr	r1, [pc, #16]	; (20000340 <RCC_PLLSAIConfig+0x2c>)
20000330:	4313      	orrs	r3, r2
20000332:	2288      	movs	r2, #136	; 0x88
20000334:	508b      	str	r3, [r1, r2]
}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	46bd      	mov	sp, r7
2000033a:	b004      	add	sp, #16
2000033c:	bd80      	pop	{r7, pc}
2000033e:	46c0      	nop			; (mov r8, r8)
20000340:	40023800 	andmi	r3, r2, r0, lsl #16

20000344 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20000344:	b580      	push	{r7, lr}
20000346:	b082      	sub	sp, #8
20000348:	af00      	add	r7, sp, #0
2000034a:	0002      	movs	r2, r0
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20000350:	4b03      	ldr	r3, [pc, #12]	; (20000360 <RCC_PLLSAICmd+0x1c>)
20000352:	1dfa      	adds	r2, r7, #7
20000354:	7812      	ldrb	r2, [r2, #0]
20000356:	601a      	str	r2, [r3, #0]
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b002      	add	sp, #8
2000035e:	bd80      	pop	{r7, pc}
20000360:	42470070 	submi	r0, r7, #112	; 0x70

20000364 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20000364:	b580      	push	{r7, lr}
20000366:	b082      	sub	sp, #8
20000368:	af00      	add	r7, sp, #0
2000036a:	0002      	movs	r2, r0
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20000370:	4b03      	ldr	r3, [pc, #12]	; (20000380 <RCC_ClockSecuritySystemCmd+0x1c>)
20000372:	1dfa      	adds	r2, r7, #7
20000374:	7812      	ldrb	r2, [r2, #0]
20000376:	601a      	str	r2, [r3, #0]
}
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	46bd      	mov	sp, r7
2000037c:	b002      	add	sp, #8
2000037e:	bd80      	pop	{r7, pc}
20000380:	4247004c 	submi	r0, r7, #76	; 0x4c

20000384 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20000384:	b580      	push	{r7, lr}
20000386:	b084      	sub	sp, #16
20000388:	af00      	add	r7, sp, #0
2000038a:	6078      	str	r0, [r7, #4]
2000038c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
2000038e:	2300      	movs	r3, #0
20000390:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20000392:	4b0a      	ldr	r3, [pc, #40]	; (200003bc <RCC_MCO1Config+0x38>)
20000394:	689b      	ldr	r3, [r3, #8]
20000396:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20000398:	68fb      	ldr	r3, [r7, #12]
2000039a:	4a09      	ldr	r2, [pc, #36]	; (200003c0 <RCC_MCO1Config+0x3c>)
2000039c:	4013      	ands	r3, r2
2000039e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200003a0:	687a      	ldr	r2, [r7, #4]
200003a2:	683b      	ldr	r3, [r7, #0]
200003a4:	4313      	orrs	r3, r2
200003a6:	68fa      	ldr	r2, [r7, #12]
200003a8:	4313      	orrs	r3, r2
200003aa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ac:	4b03      	ldr	r3, [pc, #12]	; (200003bc <RCC_MCO1Config+0x38>)
200003ae:	68fa      	ldr	r2, [r7, #12]
200003b0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	46bd      	mov	sp, r7
200003b6:	b004      	add	sp, #16
200003b8:	bd80      	pop	{r7, pc}
200003ba:	46c0      	nop			; (mov r8, r8)
200003bc:	40023800 	andmi	r3, r2, r0, lsl #16
200003c0:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

200003c4 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
200003c4:	b580      	push	{r7, lr}
200003c6:	b084      	sub	sp, #16
200003c8:	af00      	add	r7, sp, #0
200003ca:	6078      	str	r0, [r7, #4]
200003cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200003ce:	2300      	movs	r3, #0
200003d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
200003d2:	4b0a      	ldr	r3, [pc, #40]	; (200003fc <RCC_MCO2Config+0x38>)
200003d4:	689b      	ldr	r3, [r3, #8]
200003d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
200003d8:	68fb      	ldr	r3, [r7, #12]
200003da:	015b      	lsls	r3, r3, #5
200003dc:	095b      	lsrs	r3, r3, #5
200003de:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
200003e0:	687a      	ldr	r2, [r7, #4]
200003e2:	683b      	ldr	r3, [r7, #0]
200003e4:	4313      	orrs	r3, r2
200003e6:	68fa      	ldr	r2, [r7, #12]
200003e8:	4313      	orrs	r3, r2
200003ea:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ec:	4b03      	ldr	r3, [pc, #12]	; (200003fc <RCC_MCO2Config+0x38>)
200003ee:	68fa      	ldr	r2, [r7, #12]
200003f0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003f2:	46c0      	nop			; (mov r8, r8)
200003f4:	46bd      	mov	sp, r7
200003f6:	b004      	add	sp, #16
200003f8:	bd80      	pop	{r7, pc}
200003fa:	46c0      	nop			; (mov r8, r8)
200003fc:	40023800 	andmi	r3, r2, r0, lsl #16

20000400 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000400:	b580      	push	{r7, lr}
20000402:	b084      	sub	sp, #16
20000404:	af00      	add	r7, sp, #0
20000406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000408:	2300      	movs	r3, #0
2000040a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
2000040c:	4b08      	ldr	r3, [pc, #32]	; (20000430 <RCC_SYSCLKConfig+0x30>)
2000040e:	689b      	ldr	r3, [r3, #8]
20000410:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000412:	68fb      	ldr	r3, [r7, #12]
20000414:	2203      	movs	r2, #3
20000416:	4393      	bics	r3, r2
20000418:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
2000041a:	68fa      	ldr	r2, [r7, #12]
2000041c:	687b      	ldr	r3, [r7, #4]
2000041e:	4313      	orrs	r3, r2
20000420:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000422:	4b03      	ldr	r3, [pc, #12]	; (20000430 <RCC_SYSCLKConfig+0x30>)
20000424:	68fa      	ldr	r2, [r7, #12]
20000426:	609a      	str	r2, [r3, #8]
}
20000428:	46c0      	nop			; (mov r8, r8)
2000042a:	46bd      	mov	sp, r7
2000042c:	b004      	add	sp, #16
2000042e:	bd80      	pop	{r7, pc}
20000430:	40023800 	andmi	r3, r2, r0, lsl #16

20000434 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000434:	b580      	push	{r7, lr}
20000436:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000438:	4b04      	ldr	r3, [pc, #16]	; (2000044c <RCC_GetSYSCLKSource+0x18>)
2000043a:	689b      	ldr	r3, [r3, #8]
2000043c:	b2db      	uxtb	r3, r3
2000043e:	220c      	movs	r2, #12
20000440:	4013      	ands	r3, r2
20000442:	b2db      	uxtb	r3, r3
}
20000444:	0018      	movs	r0, r3
20000446:	46bd      	mov	sp, r7
20000448:	bd80      	pop	{r7, pc}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	40023800 	andmi	r3, r2, r0, lsl #16

20000450 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20000450:	b580      	push	{r7, lr}
20000452:	b084      	sub	sp, #16
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000458:	2300      	movs	r3, #0
2000045a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
2000045c:	4b08      	ldr	r3, [pc, #32]	; (20000480 <RCC_HCLKConfig+0x30>)
2000045e:	689b      	ldr	r3, [r3, #8]
20000460:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20000462:	68fb      	ldr	r3, [r7, #12]
20000464:	22f0      	movs	r2, #240	; 0xf0
20000466:	4393      	bics	r3, r2
20000468:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
2000046a:	68fa      	ldr	r2, [r7, #12]
2000046c:	687b      	ldr	r3, [r7, #4]
2000046e:	4313      	orrs	r3, r2
20000470:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000472:	4b03      	ldr	r3, [pc, #12]	; (20000480 <RCC_HCLKConfig+0x30>)
20000474:	68fa      	ldr	r2, [r7, #12]
20000476:	609a      	str	r2, [r3, #8]
}
20000478:	46c0      	nop			; (mov r8, r8)
2000047a:	46bd      	mov	sp, r7
2000047c:	b004      	add	sp, #16
2000047e:	bd80      	pop	{r7, pc}
20000480:	40023800 	andmi	r3, r2, r0, lsl #16

20000484 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20000484:	b580      	push	{r7, lr}
20000486:	b084      	sub	sp, #16
20000488:	af00      	add	r7, sp, #0
2000048a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000048c:	2300      	movs	r3, #0
2000048e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000490:	4b08      	ldr	r3, [pc, #32]	; (200004b4 <RCC_PCLK1Config+0x30>)
20000492:	689b      	ldr	r3, [r3, #8]
20000494:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20000496:	68fb      	ldr	r3, [r7, #12]
20000498:	4a07      	ldr	r2, [pc, #28]	; (200004b8 <RCC_PCLK1Config+0x34>)
2000049a:	4013      	ands	r3, r2
2000049c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
2000049e:	68fa      	ldr	r2, [r7, #12]
200004a0:	687b      	ldr	r3, [r7, #4]
200004a2:	4313      	orrs	r3, r2
200004a4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004a6:	4b03      	ldr	r3, [pc, #12]	; (200004b4 <RCC_PCLK1Config+0x30>)
200004a8:	68fa      	ldr	r2, [r7, #12]
200004aa:	609a      	str	r2, [r3, #8]
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b004      	add	sp, #16
200004b2:	bd80      	pop	{r7, pc}
200004b4:	40023800 	andmi	r3, r2, r0, lsl #16
200004b8:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

200004bc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
200004bc:	b580      	push	{r7, lr}
200004be:	b084      	sub	sp, #16
200004c0:	af00      	add	r7, sp, #0
200004c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200004c4:	2300      	movs	r3, #0
200004c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200004c8:	4b09      	ldr	r3, [pc, #36]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004ca:	689b      	ldr	r3, [r3, #8]
200004cc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	4a08      	ldr	r2, [pc, #32]	; (200004f4 <RCC_PCLK2Config+0x38>)
200004d2:	4013      	ands	r3, r2
200004d4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
200004d6:	687b      	ldr	r3, [r7, #4]
200004d8:	00db      	lsls	r3, r3, #3
200004da:	68fa      	ldr	r2, [r7, #12]
200004dc:	4313      	orrs	r3, r2
200004de:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004e0:	4b03      	ldr	r3, [pc, #12]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004e2:	68fa      	ldr	r2, [r7, #12]
200004e4:	609a      	str	r2, [r3, #8]
}
200004e6:	46c0      	nop			; (mov r8, r8)
200004e8:	46bd      	mov	sp, r7
200004ea:	b004      	add	sp, #16
200004ec:	bd80      	pop	{r7, pc}
200004ee:	46c0      	nop			; (mov r8, r8)
200004f0:	40023800 	andmi	r3, r2, r0, lsl #16
200004f4:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

200004f8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
200004f8:	b580      	push	{r7, lr}
200004fa:	b088      	sub	sp, #32
200004fc:	af00      	add	r7, sp, #0
200004fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000500:	2300      	movs	r3, #0
20000502:	61bb      	str	r3, [r7, #24]
20000504:	2300      	movs	r3, #0
20000506:	617b      	str	r3, [r7, #20]
20000508:	2300      	movs	r3, #0
2000050a:	61fb      	str	r3, [r7, #28]
2000050c:	2302      	movs	r3, #2
2000050e:	613b      	str	r3, [r7, #16]
20000510:	2300      	movs	r3, #0
20000512:	60fb      	str	r3, [r7, #12]
20000514:	2302      	movs	r3, #2
20000516:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000518:	4b49      	ldr	r3, [pc, #292]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000051a:	689b      	ldr	r3, [r3, #8]
2000051c:	220c      	movs	r2, #12
2000051e:	4013      	ands	r3, r2
20000520:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000522:	69bb      	ldr	r3, [r7, #24]
20000524:	2b04      	cmp	r3, #4
20000526:	d007      	beq.n	20000538 <RCC_GetClocksFreq+0x40>
20000528:	2b08      	cmp	r3, #8
2000052a:	d009      	beq.n	20000540 <RCC_GetClocksFreq+0x48>
2000052c:	2b00      	cmp	r3, #0
2000052e:	d141      	bne.n	200005b4 <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	4a44      	ldr	r2, [pc, #272]	; (20000644 <RCC_GetClocksFreq+0x14c>)
20000534:	601a      	str	r2, [r3, #0]
    break;
20000536:	e041      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	4a43      	ldr	r2, [pc, #268]	; (20000648 <RCC_GetClocksFreq+0x150>)
2000053c:	601a      	str	r2, [r3, #0]
    break;
2000053e:	e03d      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000540:	4b3f      	ldr	r3, [pc, #252]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000542:	685b      	ldr	r3, [r3, #4]
20000544:	0d9b      	lsrs	r3, r3, #22
20000546:	2201      	movs	r2, #1
20000548:	4013      	ands	r3, r2
2000054a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000054c:	4b3c      	ldr	r3, [pc, #240]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000054e:	685b      	ldr	r3, [r3, #4]
20000550:	223f      	movs	r2, #63	; 0x3f
20000552:	4013      	ands	r3, r2
20000554:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000556:	68fb      	ldr	r3, [r7, #12]
20000558:	2b00      	cmp	r3, #0
2000055a:	d00d      	beq.n	20000578 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
2000055c:	68b9      	ldr	r1, [r7, #8]
2000055e:	483a      	ldr	r0, [pc, #232]	; (20000648 <RCC_GetClocksFreq+0x150>)
20000560:	f002 f888 	bl	20002674 <__udivsi3>
20000564:	0003      	movs	r3, r0
20000566:	001a      	movs	r2, r3
20000568:	4b35      	ldr	r3, [pc, #212]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000056a:	685b      	ldr	r3, [r3, #4]
2000056c:	099b      	lsrs	r3, r3, #6
2000056e:	05db      	lsls	r3, r3, #23
20000570:	0ddb      	lsrs	r3, r3, #23
20000572:	4353      	muls	r3, r2
20000574:	61fb      	str	r3, [r7, #28]
20000576:	e00c      	b.n	20000592 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000578:	68b9      	ldr	r1, [r7, #8]
2000057a:	4832      	ldr	r0, [pc, #200]	; (20000644 <RCC_GetClocksFreq+0x14c>)
2000057c:	f002 f87a 	bl	20002674 <__udivsi3>
20000580:	0003      	movs	r3, r0
20000582:	001a      	movs	r2, r3
20000584:	4b2e      	ldr	r3, [pc, #184]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000586:	685b      	ldr	r3, [r3, #4]
20000588:	099b      	lsrs	r3, r3, #6
2000058a:	05db      	lsls	r3, r3, #23
2000058c:	0ddb      	lsrs	r3, r3, #23
2000058e:	4353      	muls	r3, r2
20000590:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000592:	4b2b      	ldr	r3, [pc, #172]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000594:	685b      	ldr	r3, [r3, #4]
20000596:	0c1b      	lsrs	r3, r3, #16
20000598:	2203      	movs	r2, #3
2000059a:	4013      	ands	r3, r2
2000059c:	3301      	adds	r3, #1
2000059e:	005b      	lsls	r3, r3, #1
200005a0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200005a2:	6939      	ldr	r1, [r7, #16]
200005a4:	69f8      	ldr	r0, [r7, #28]
200005a6:	f002 f865 	bl	20002674 <__udivsi3>
200005aa:	0003      	movs	r3, r0
200005ac:	001a      	movs	r2, r3
200005ae:	687b      	ldr	r3, [r7, #4]
200005b0:	601a      	str	r2, [r3, #0]
    break;
200005b2:	e003      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
200005b4:	687b      	ldr	r3, [r7, #4]
200005b6:	4a23      	ldr	r2, [pc, #140]	; (20000644 <RCC_GetClocksFreq+0x14c>)
200005b8:	601a      	str	r2, [r3, #0]
    break;
200005ba:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
200005bc:	4b20      	ldr	r3, [pc, #128]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005be:	689b      	ldr	r3, [r3, #8]
200005c0:	22f0      	movs	r2, #240	; 0xf0
200005c2:	4013      	ands	r3, r2
200005c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
200005c6:	69bb      	ldr	r3, [r7, #24]
200005c8:	091b      	lsrs	r3, r3, #4
200005ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005cc:	4a1f      	ldr	r2, [pc, #124]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005ce:	69bb      	ldr	r3, [r7, #24]
200005d0:	18d3      	adds	r3, r2, r3
200005d2:	781b      	ldrb	r3, [r3, #0]
200005d4:	b2db      	uxtb	r3, r3
200005d6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
200005d8:	687b      	ldr	r3, [r7, #4]
200005da:	681a      	ldr	r2, [r3, #0]
200005dc:	697b      	ldr	r3, [r7, #20]
200005de:	40da      	lsrs	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
200005e4:	4b16      	ldr	r3, [pc, #88]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005e6:	689a      	ldr	r2, [r3, #8]
200005e8:	23e0      	movs	r3, #224	; 0xe0
200005ea:	015b      	lsls	r3, r3, #5
200005ec:	4013      	ands	r3, r2
200005ee:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
200005f0:	69bb      	ldr	r3, [r7, #24]
200005f2:	0a9b      	lsrs	r3, r3, #10
200005f4:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005f6:	4a15      	ldr	r2, [pc, #84]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005f8:	69bb      	ldr	r3, [r7, #24]
200005fa:	18d3      	adds	r3, r2, r3
200005fc:	781b      	ldrb	r3, [r3, #0]
200005fe:	b2db      	uxtb	r3, r3
20000600:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000602:	687b      	ldr	r3, [r7, #4]
20000604:	685a      	ldr	r2, [r3, #4]
20000606:	697b      	ldr	r3, [r7, #20]
20000608:	40da      	lsrs	r2, r3
2000060a:	687b      	ldr	r3, [r7, #4]
2000060c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
2000060e:	4b0c      	ldr	r3, [pc, #48]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000610:	689a      	ldr	r2, [r3, #8]
20000612:	23e0      	movs	r3, #224	; 0xe0
20000614:	021b      	lsls	r3, r3, #8
20000616:	4013      	ands	r3, r2
20000618:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
2000061a:	69bb      	ldr	r3, [r7, #24]
2000061c:	0b5b      	lsrs	r3, r3, #13
2000061e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000620:	4a0a      	ldr	r2, [pc, #40]	; (2000064c <RCC_GetClocksFreq+0x154>)
20000622:	69bb      	ldr	r3, [r7, #24]
20000624:	18d3      	adds	r3, r2, r3
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	b2db      	uxtb	r3, r3
2000062a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	685a      	ldr	r2, [r3, #4]
20000630:	697b      	ldr	r3, [r7, #20]
20000632:	40da      	lsrs	r2, r3
20000634:	687b      	ldr	r3, [r7, #4]
20000636:	60da      	str	r2, [r3, #12]
}
20000638:	46c0      	nop			; (mov r8, r8)
2000063a:	46bd      	mov	sp, r7
2000063c:	b008      	add	sp, #32
2000063e:	bd80      	pop	{r7, pc}
20000640:	40023800 	andmi	r3, r2, r0, lsl #16
20000644:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000648:	017d7840 	cmneq	sp, r0, asr #16
2000064c:	200028bc 			; <UNDEFINED> instruction: 0x200028bc

20000650 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000650:	b580      	push	{r7, lr}
20000652:	b084      	sub	sp, #16
20000654:	af00      	add	r7, sp, #0
20000656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000658:	2300      	movs	r3, #0
2000065a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
2000065c:	687a      	ldr	r2, [r7, #4]
2000065e:	23c0      	movs	r3, #192	; 0xc0
20000660:	009b      	lsls	r3, r3, #2
20000662:	401a      	ands	r2, r3
20000664:	23c0      	movs	r3, #192	; 0xc0
20000666:	009b      	lsls	r3, r3, #2
20000668:	429a      	cmp	r2, r3
2000066a:	d10f      	bne.n	2000068c <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
2000066c:	4b0d      	ldr	r3, [pc, #52]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000066e:	689b      	ldr	r3, [r3, #8]
20000670:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	4a0c      	ldr	r2, [pc, #48]	; (200006a8 <RCC_RTCCLKConfig+0x58>)
20000676:	4013      	ands	r3, r2
20000678:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
2000067a:	687b      	ldr	r3, [r7, #4]
2000067c:	4a0b      	ldr	r2, [pc, #44]	; (200006ac <RCC_RTCCLKConfig+0x5c>)
2000067e:	4013      	ands	r3, r2
20000680:	68fa      	ldr	r2, [r7, #12]
20000682:	4313      	orrs	r3, r2
20000684:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000686:	4b07      	ldr	r3, [pc, #28]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000688:	68fa      	ldr	r2, [r7, #12]
2000068a:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
2000068c:	4b05      	ldr	r3, [pc, #20]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000068e:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	051b      	lsls	r3, r3, #20
20000694:	0d1a      	lsrs	r2, r3, #20
20000696:	4b03      	ldr	r3, [pc, #12]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000698:	430a      	orrs	r2, r1
2000069a:	671a      	str	r2, [r3, #112]	; 0x70
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b004      	add	sp, #16
200006a2:	bd80      	pop	{r7, pc}
200006a4:	40023800 	andmi	r3, r2, r0, lsl #16
200006a8:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
200006ac:	0ffffcff 	svceq	0x00fffcff

200006b0 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
200006b0:	b580      	push	{r7, lr}
200006b2:	b082      	sub	sp, #8
200006b4:	af00      	add	r7, sp, #0
200006b6:	0002      	movs	r2, r0
200006b8:	1dfb      	adds	r3, r7, #7
200006ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
200006bc:	4b03      	ldr	r3, [pc, #12]	; (200006cc <RCC_RTCCLKCmd+0x1c>)
200006be:	1dfa      	adds	r2, r7, #7
200006c0:	7812      	ldrb	r2, [r2, #0]
200006c2:	601a      	str	r2, [r3, #0]
}
200006c4:	46c0      	nop			; (mov r8, r8)
200006c6:	46bd      	mov	sp, r7
200006c8:	b002      	add	sp, #8
200006ca:	bd80      	pop	{r7, pc}
200006cc:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

200006d0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
200006d0:	b580      	push	{r7, lr}
200006d2:	b082      	sub	sp, #8
200006d4:	af00      	add	r7, sp, #0
200006d6:	0002      	movs	r2, r0
200006d8:	1dfb      	adds	r3, r7, #7
200006da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
200006dc:	4b03      	ldr	r3, [pc, #12]	; (200006ec <RCC_BackupResetCmd+0x1c>)
200006de:	1dfa      	adds	r2, r7, #7
200006e0:	7812      	ldrb	r2, [r2, #0]
200006e2:	601a      	str	r2, [r3, #0]
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46bd      	mov	sp, r7
200006e8:	b002      	add	sp, #8
200006ea:	bd80      	pop	{r7, pc}
200006ec:	42470e40 	submi	r0, r7, #64, 28	; 0x400

200006f0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
200006f0:	b580      	push	{r7, lr}
200006f2:	b082      	sub	sp, #8
200006f4:	af00      	add	r7, sp, #0
200006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
200006f8:	4b03      	ldr	r3, [pc, #12]	; (20000708 <RCC_I2SCLKConfig+0x18>)
200006fa:	687a      	ldr	r2, [r7, #4]
200006fc:	601a      	str	r2, [r3, #0]
}
200006fe:	46c0      	nop			; (mov r8, r8)
20000700:	46bd      	mov	sp, r7
20000702:	b002      	add	sp, #8
20000704:	bd80      	pop	{r7, pc}
20000706:	46c0      	nop			; (mov r8, r8)
20000708:	4247015c 	submi	r0, r7, #92, 2

2000070c <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
2000070c:	b580      	push	{r7, lr}
2000070e:	b084      	sub	sp, #16
20000710:	af00      	add	r7, sp, #0
20000712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000714:	2300      	movs	r3, #0
20000716:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000718:	4a09      	ldr	r2, [pc, #36]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
2000071a:	238c      	movs	r3, #140	; 0x8c
2000071c:	58d3      	ldr	r3, [r2, r3]
2000071e:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000720:	68fb      	ldr	r3, [r7, #12]
20000722:	4a08      	ldr	r2, [pc, #32]	; (20000744 <RCC_SAIBlockACLKConfig+0x38>)
20000724:	4013      	ands	r3, r2
20000726:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000728:	68fa      	ldr	r2, [r7, #12]
2000072a:	687b      	ldr	r3, [r7, #4]
2000072c:	4313      	orrs	r3, r2
2000072e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000730:	4903      	ldr	r1, [pc, #12]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
20000732:	228c      	movs	r2, #140	; 0x8c
20000734:	68fb      	ldr	r3, [r7, #12]
20000736:	508b      	str	r3, [r1, r2]
}
20000738:	46c0      	nop			; (mov r8, r8)
2000073a:	46bd      	mov	sp, r7
2000073c:	b004      	add	sp, #16
2000073e:	bd80      	pop	{r7, pc}
20000740:	40023800 	andmi	r3, r2, r0, lsl #16
20000744:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000748 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000748:	b580      	push	{r7, lr}
2000074a:	b084      	sub	sp, #16
2000074c:	af00      	add	r7, sp, #0
2000074e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000750:	2300      	movs	r3, #0
20000752:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000754:	4a09      	ldr	r2, [pc, #36]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
20000756:	238c      	movs	r3, #140	; 0x8c
20000758:	58d3      	ldr	r3, [r2, r3]
2000075a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
2000075c:	68fb      	ldr	r3, [r7, #12]
2000075e:	4a08      	ldr	r2, [pc, #32]	; (20000780 <RCC_SAIBlockBCLKConfig+0x38>)
20000760:	4013      	ands	r3, r2
20000762:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000764:	68fa      	ldr	r2, [r7, #12]
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	4313      	orrs	r3, r2
2000076a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000076c:	4903      	ldr	r1, [pc, #12]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
2000076e:	228c      	movs	r2, #140	; 0x8c
20000770:	68fb      	ldr	r3, [r7, #12]
20000772:	508b      	str	r3, [r1, r2]
}
20000774:	46c0      	nop			; (mov r8, r8)
20000776:	46bd      	mov	sp, r7
20000778:	b004      	add	sp, #16
2000077a:	bd80      	pop	{r7, pc}
2000077c:	40023800 	andmi	r3, r2, r0, lsl #16
20000780:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000784 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000784:	b580      	push	{r7, lr}
20000786:	b084      	sub	sp, #16
20000788:	af00      	add	r7, sp, #0
2000078a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000078c:	2300      	movs	r3, #0
2000078e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000790:	4a0a      	ldr	r2, [pc, #40]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000792:	238c      	movs	r3, #140	; 0x8c
20000794:	58d3      	ldr	r3, [r2, r3]
20000796:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000798:	68fb      	ldr	r3, [r7, #12]
2000079a:	221f      	movs	r2, #31
2000079c:	4393      	bics	r3, r2
2000079e:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	3b01      	subs	r3, #1
200007a4:	68fa      	ldr	r2, [r7, #12]
200007a6:	4313      	orrs	r3, r2
200007a8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007aa:	4904      	ldr	r1, [pc, #16]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
200007ac:	228c      	movs	r2, #140	; 0x8c
200007ae:	68fb      	ldr	r3, [r7, #12]
200007b0:	508b      	str	r3, [r1, r2]
}
200007b2:	46c0      	nop			; (mov r8, r8)
200007b4:	46bd      	mov	sp, r7
200007b6:	b004      	add	sp, #16
200007b8:	bd80      	pop	{r7, pc}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	40023800 	andmi	r3, r2, r0, lsl #16

200007c0 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b084      	sub	sp, #16
200007c4:	af00      	add	r7, sp, #0
200007c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200007c8:	2300      	movs	r3, #0
200007ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200007cc:	4a0a      	ldr	r2, [pc, #40]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ce:	238c      	movs	r3, #140	; 0x8c
200007d0:	58d3      	ldr	r3, [r2, r3]
200007d2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200007d4:	68fb      	ldr	r3, [r7, #12]
200007d6:	4a09      	ldr	r2, [pc, #36]	; (200007fc <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200007d8:	4013      	ands	r3, r2
200007da:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	3b01      	subs	r3, #1
200007e0:	021b      	lsls	r3, r3, #8
200007e2:	68fa      	ldr	r2, [r7, #12]
200007e4:	4313      	orrs	r3, r2
200007e6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007e8:	4903      	ldr	r1, [pc, #12]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ea:	228c      	movs	r2, #140	; 0x8c
200007ec:	68fb      	ldr	r3, [r7, #12]
200007ee:	508b      	str	r3, [r1, r2]
}
200007f0:	46c0      	nop			; (mov r8, r8)
200007f2:	46bd      	mov	sp, r7
200007f4:	b004      	add	sp, #16
200007f6:	bd80      	pop	{r7, pc}
200007f8:	40023800 	andmi	r3, r2, r0, lsl #16
200007fc:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000800 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000800:	b580      	push	{r7, lr}
20000802:	b084      	sub	sp, #16
20000804:	af00      	add	r7, sp, #0
20000806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000808:	2300      	movs	r3, #0
2000080a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
2000080c:	4a09      	ldr	r2, [pc, #36]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
2000080e:	238c      	movs	r3, #140	; 0x8c
20000810:	58d3      	ldr	r3, [r2, r3]
20000812:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000814:	68fb      	ldr	r3, [r7, #12]
20000816:	4a08      	ldr	r2, [pc, #32]	; (20000838 <RCC_LTDCCLKDivConfig+0x38>)
20000818:	4013      	ands	r3, r2
2000081a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
2000081c:	68fa      	ldr	r2, [r7, #12]
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	4313      	orrs	r3, r2
20000822:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000824:	4903      	ldr	r1, [pc, #12]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
20000826:	228c      	movs	r2, #140	; 0x8c
20000828:	68fb      	ldr	r3, [r7, #12]
2000082a:	508b      	str	r3, [r1, r2]
}
2000082c:	46c0      	nop			; (mov r8, r8)
2000082e:	46bd      	mov	sp, r7
20000830:	b004      	add	sp, #16
20000832:	bd80      	pop	{r7, pc}
20000834:	40023800 	andmi	r3, r2, r0, lsl #16
20000838:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

2000083c <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
2000083c:	b580      	push	{r7, lr}
2000083e:	b082      	sub	sp, #8
20000840:	af00      	add	r7, sp, #0
20000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20000844:	4b03      	ldr	r3, [pc, #12]	; (20000854 <RCC_TIMCLKPresConfig+0x18>)
20000846:	687a      	ldr	r2, [r7, #4]
20000848:	601a      	str	r2, [r3, #0]
}
2000084a:	46c0      	nop			; (mov r8, r8)
2000084c:	46bd      	mov	sp, r7
2000084e:	b002      	add	sp, #8
20000850:	bd80      	pop	{r7, pc}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20000858 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000858:	b580      	push	{r7, lr}
2000085a:	b082      	sub	sp, #8
2000085c:	af00      	add	r7, sp, #0
2000085e:	6078      	str	r0, [r7, #4]
20000860:	000a      	movs	r2, r1
20000862:	1cfb      	adds	r3, r7, #3
20000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000866:	1cfb      	adds	r3, r7, #3
20000868:	781b      	ldrb	r3, [r3, #0]
2000086a:	2b00      	cmp	r3, #0
2000086c:	d006      	beq.n	2000087c <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
2000086e:	4b09      	ldr	r3, [pc, #36]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000870:	6b19      	ldr	r1, [r3, #48]	; 0x30
20000872:	4b08      	ldr	r3, [pc, #32]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000874:	687a      	ldr	r2, [r7, #4]
20000876:	430a      	orrs	r2, r1
20000878:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
2000087a:	e006      	b.n	2000088a <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
2000087c:	4b05      	ldr	r3, [pc, #20]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
2000087e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000880:	687b      	ldr	r3, [r7, #4]
20000882:	43d9      	mvns	r1, r3
20000884:	4b03      	ldr	r3, [pc, #12]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000886:	400a      	ands	r2, r1
20000888:	631a      	str	r2, [r3, #48]	; 0x30
}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	46bd      	mov	sp, r7
2000088e:	b002      	add	sp, #8
20000890:	bd80      	pop	{r7, pc}
20000892:	46c0      	nop			; (mov r8, r8)
20000894:	40023800 	andmi	r3, r2, r0, lsl #16

20000898 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000898:	b580      	push	{r7, lr}
2000089a:	b082      	sub	sp, #8
2000089c:	af00      	add	r7, sp, #0
2000089e:	6078      	str	r0, [r7, #4]
200008a0:	000a      	movs	r2, r1
200008a2:	1cfb      	adds	r3, r7, #3
200008a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008a6:	1cfb      	adds	r3, r7, #3
200008a8:	781b      	ldrb	r3, [r3, #0]
200008aa:	2b00      	cmp	r3, #0
200008ac:	d006      	beq.n	200008bc <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
200008ae:	4b09      	ldr	r3, [pc, #36]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
200008b2:	4b08      	ldr	r3, [pc, #32]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b4:	687a      	ldr	r2, [r7, #4]
200008b6:	430a      	orrs	r2, r1
200008b8:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
200008ba:	e006      	b.n	200008ca <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
200008bc:	4b05      	ldr	r3, [pc, #20]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	43d9      	mvns	r1, r3
200008c4:	4b03      	ldr	r3, [pc, #12]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008c6:	400a      	ands	r2, r1
200008c8:	635a      	str	r2, [r3, #52]	; 0x34
}
200008ca:	46c0      	nop			; (mov r8, r8)
200008cc:	46bd      	mov	sp, r7
200008ce:	b002      	add	sp, #8
200008d0:	bd80      	pop	{r7, pc}
200008d2:	46c0      	nop			; (mov r8, r8)
200008d4:	40023800 	andmi	r3, r2, r0, lsl #16

200008d8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200008d8:	b580      	push	{r7, lr}
200008da:	b082      	sub	sp, #8
200008dc:	af00      	add	r7, sp, #0
200008de:	6078      	str	r0, [r7, #4]
200008e0:	000a      	movs	r2, r1
200008e2:	1cfb      	adds	r3, r7, #3
200008e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008e6:	1cfb      	adds	r3, r7, #3
200008e8:	781b      	ldrb	r3, [r3, #0]
200008ea:	2b00      	cmp	r3, #0
200008ec:	d006      	beq.n	200008fc <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
200008ee:	4b09      	ldr	r3, [pc, #36]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
200008f2:	4b08      	ldr	r3, [pc, #32]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f4:	687a      	ldr	r2, [r7, #4]
200008f6:	430a      	orrs	r2, r1
200008f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
200008fa:	e006      	b.n	2000090a <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
200008fc:	4b05      	ldr	r3, [pc, #20]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	43d9      	mvns	r1, r3
20000904:	4b03      	ldr	r3, [pc, #12]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
20000906:	400a      	ands	r2, r1
20000908:	639a      	str	r2, [r3, #56]	; 0x38
}
2000090a:	46c0      	nop			; (mov r8, r8)
2000090c:	46bd      	mov	sp, r7
2000090e:	b002      	add	sp, #8
20000910:	bd80      	pop	{r7, pc}
20000912:	46c0      	nop			; (mov r8, r8)
20000914:	40023800 	andmi	r3, r2, r0, lsl #16

20000918 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000918:	b580      	push	{r7, lr}
2000091a:	b082      	sub	sp, #8
2000091c:	af00      	add	r7, sp, #0
2000091e:	6078      	str	r0, [r7, #4]
20000920:	000a      	movs	r2, r1
20000922:	1cfb      	adds	r3, r7, #3
20000924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000926:	1cfb      	adds	r3, r7, #3
20000928:	781b      	ldrb	r3, [r3, #0]
2000092a:	2b00      	cmp	r3, #0
2000092c:	d006      	beq.n	2000093c <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
2000092e:	4b09      	ldr	r3, [pc, #36]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000930:	6c19      	ldr	r1, [r3, #64]	; 0x40
20000932:	4b08      	ldr	r3, [pc, #32]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000934:	687a      	ldr	r2, [r7, #4]
20000936:	430a      	orrs	r2, r1
20000938:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
2000093a:	e006      	b.n	2000094a <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
2000093c:	4b05      	ldr	r3, [pc, #20]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
2000093e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000940:	687b      	ldr	r3, [r7, #4]
20000942:	43d9      	mvns	r1, r3
20000944:	4b03      	ldr	r3, [pc, #12]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000946:	400a      	ands	r2, r1
20000948:	641a      	str	r2, [r3, #64]	; 0x40
}
2000094a:	46c0      	nop			; (mov r8, r8)
2000094c:	46bd      	mov	sp, r7
2000094e:	b002      	add	sp, #8
20000950:	bd80      	pop	{r7, pc}
20000952:	46c0      	nop			; (mov r8, r8)
20000954:	40023800 	andmi	r3, r2, r0, lsl #16

20000958 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000958:	b580      	push	{r7, lr}
2000095a:	b082      	sub	sp, #8
2000095c:	af00      	add	r7, sp, #0
2000095e:	6078      	str	r0, [r7, #4]
20000960:	000a      	movs	r2, r1
20000962:	1cfb      	adds	r3, r7, #3
20000964:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000966:	1cfb      	adds	r3, r7, #3
20000968:	781b      	ldrb	r3, [r3, #0]
2000096a:	2b00      	cmp	r3, #0
2000096c:	d006      	beq.n	2000097c <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
2000096e:	4b09      	ldr	r3, [pc, #36]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000970:	6c59      	ldr	r1, [r3, #68]	; 0x44
20000972:	4b08      	ldr	r3, [pc, #32]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000974:	687a      	ldr	r2, [r7, #4]
20000976:	430a      	orrs	r2, r1
20000978:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
2000097a:	e006      	b.n	2000098a <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
2000097c:	4b05      	ldr	r3, [pc, #20]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
2000097e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000980:	687b      	ldr	r3, [r7, #4]
20000982:	43d9      	mvns	r1, r3
20000984:	4b03      	ldr	r3, [pc, #12]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000986:	400a      	ands	r2, r1
20000988:	645a      	str	r2, [r3, #68]	; 0x44
}
2000098a:	46c0      	nop			; (mov r8, r8)
2000098c:	46bd      	mov	sp, r7
2000098e:	b002      	add	sp, #8
20000990:	bd80      	pop	{r7, pc}
20000992:	46c0      	nop			; (mov r8, r8)
20000994:	40023800 	andmi	r3, r2, r0, lsl #16

20000998 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000998:	b580      	push	{r7, lr}
2000099a:	b082      	sub	sp, #8
2000099c:	af00      	add	r7, sp, #0
2000099e:	6078      	str	r0, [r7, #4]
200009a0:	000a      	movs	r2, r1
200009a2:	1cfb      	adds	r3, r7, #3
200009a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009a6:	1cfb      	adds	r3, r7, #3
200009a8:	781b      	ldrb	r3, [r3, #0]
200009aa:	2b00      	cmp	r3, #0
200009ac:	d006      	beq.n	200009bc <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
200009ae:	4b09      	ldr	r3, [pc, #36]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b0:	6919      	ldr	r1, [r3, #16]
200009b2:	4b08      	ldr	r3, [pc, #32]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b4:	687a      	ldr	r2, [r7, #4]
200009b6:	430a      	orrs	r2, r1
200009b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
200009ba:	e006      	b.n	200009ca <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
200009bc:	4b05      	ldr	r3, [pc, #20]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009be:	691a      	ldr	r2, [r3, #16]
200009c0:	687b      	ldr	r3, [r7, #4]
200009c2:	43d9      	mvns	r1, r3
200009c4:	4b03      	ldr	r3, [pc, #12]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009c6:	400a      	ands	r2, r1
200009c8:	611a      	str	r2, [r3, #16]
}
200009ca:	46c0      	nop			; (mov r8, r8)
200009cc:	46bd      	mov	sp, r7
200009ce:	b002      	add	sp, #8
200009d0:	bd80      	pop	{r7, pc}
200009d2:	46c0      	nop			; (mov r8, r8)
200009d4:	40023800 	andmi	r3, r2, r0, lsl #16

200009d8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200009d8:	b580      	push	{r7, lr}
200009da:	b082      	sub	sp, #8
200009dc:	af00      	add	r7, sp, #0
200009de:	6078      	str	r0, [r7, #4]
200009e0:	000a      	movs	r2, r1
200009e2:	1cfb      	adds	r3, r7, #3
200009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009e6:	1cfb      	adds	r3, r7, #3
200009e8:	781b      	ldrb	r3, [r3, #0]
200009ea:	2b00      	cmp	r3, #0
200009ec:	d006      	beq.n	200009fc <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
200009ee:	4b09      	ldr	r3, [pc, #36]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f0:	6959      	ldr	r1, [r3, #20]
200009f2:	4b08      	ldr	r3, [pc, #32]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f4:	687a      	ldr	r2, [r7, #4]
200009f6:	430a      	orrs	r2, r1
200009f8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
200009fa:	e006      	b.n	20000a0a <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
200009fc:	4b05      	ldr	r3, [pc, #20]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009fe:	695a      	ldr	r2, [r3, #20]
20000a00:	687b      	ldr	r3, [r7, #4]
20000a02:	43d9      	mvns	r1, r3
20000a04:	4b03      	ldr	r3, [pc, #12]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
20000a06:	400a      	ands	r2, r1
20000a08:	615a      	str	r2, [r3, #20]
}
20000a0a:	46c0      	nop			; (mov r8, r8)
20000a0c:	46bd      	mov	sp, r7
20000a0e:	b002      	add	sp, #8
20000a10:	bd80      	pop	{r7, pc}
20000a12:	46c0      	nop			; (mov r8, r8)
20000a14:	40023800 	andmi	r3, r2, r0, lsl #16

20000a18 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000a18:	b580      	push	{r7, lr}
20000a1a:	b082      	sub	sp, #8
20000a1c:	af00      	add	r7, sp, #0
20000a1e:	6078      	str	r0, [r7, #4]
20000a20:	000a      	movs	r2, r1
20000a22:	1cfb      	adds	r3, r7, #3
20000a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000a26:	1cfb      	adds	r3, r7, #3
20000a28:	781b      	ldrb	r3, [r3, #0]
20000a2a:	2b00      	cmp	r3, #0
20000a2c:	d006      	beq.n	20000a3c <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000a2e:	4b09      	ldr	r3, [pc, #36]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a30:	6999      	ldr	r1, [r3, #24]
20000a32:	4b08      	ldr	r3, [pc, #32]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a34:	687a      	ldr	r2, [r7, #4]
20000a36:	430a      	orrs	r2, r1
20000a38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000a3a:	e006      	b.n	20000a4a <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000a3c:	4b05      	ldr	r3, [pc, #20]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a3e:	699a      	ldr	r2, [r3, #24]
20000a40:	687b      	ldr	r3, [r7, #4]
20000a42:	43d9      	mvns	r1, r3
20000a44:	4b03      	ldr	r3, [pc, #12]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a46:	400a      	ands	r2, r1
20000a48:	619a      	str	r2, [r3, #24]
}
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b002      	add	sp, #8
20000a50:	bd80      	pop	{r7, pc}
20000a52:	46c0      	nop			; (mov r8, r8)
20000a54:	40023800 	andmi	r3, r2, r0, lsl #16

20000a58 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000a58:	b580      	push	{r7, lr}
20000a5a:	b082      	sub	sp, #8
20000a5c:	af00      	add	r7, sp, #0
20000a5e:	6078      	str	r0, [r7, #4]
20000a60:	000a      	movs	r2, r1
20000a62:	1cfb      	adds	r3, r7, #3
20000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a66:	1cfb      	adds	r3, r7, #3
20000a68:	781b      	ldrb	r3, [r3, #0]
20000a6a:	2b00      	cmp	r3, #0
20000a6c:	d006      	beq.n	20000a7c <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20000a6e:	4b09      	ldr	r3, [pc, #36]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a70:	6a19      	ldr	r1, [r3, #32]
20000a72:	4b08      	ldr	r3, [pc, #32]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a74:	687a      	ldr	r2, [r7, #4]
20000a76:	430a      	orrs	r2, r1
20000a78:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20000a7a:	e006      	b.n	20000a8a <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20000a7c:	4b05      	ldr	r3, [pc, #20]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a7e:	6a1a      	ldr	r2, [r3, #32]
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	43d9      	mvns	r1, r3
20000a84:	4b03      	ldr	r3, [pc, #12]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a86:	400a      	ands	r2, r1
20000a88:	621a      	str	r2, [r3, #32]
}
20000a8a:	46c0      	nop			; (mov r8, r8)
20000a8c:	46bd      	mov	sp, r7
20000a8e:	b002      	add	sp, #8
20000a90:	bd80      	pop	{r7, pc}
20000a92:	46c0      	nop			; (mov r8, r8)
20000a94:	40023800 	andmi	r3, r2, r0, lsl #16

20000a98 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000a98:	b580      	push	{r7, lr}
20000a9a:	b082      	sub	sp, #8
20000a9c:	af00      	add	r7, sp, #0
20000a9e:	6078      	str	r0, [r7, #4]
20000aa0:	000a      	movs	r2, r1
20000aa2:	1cfb      	adds	r3, r7, #3
20000aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000aa6:	1cfb      	adds	r3, r7, #3
20000aa8:	781b      	ldrb	r3, [r3, #0]
20000aaa:	2b00      	cmp	r3, #0
20000aac:	d006      	beq.n	20000abc <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000aae:	4b09      	ldr	r3, [pc, #36]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab0:	6a59      	ldr	r1, [r3, #36]	; 0x24
20000ab2:	4b08      	ldr	r3, [pc, #32]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab4:	687a      	ldr	r2, [r7, #4]
20000ab6:	430a      	orrs	r2, r1
20000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20000aba:	e006      	b.n	20000aca <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20000abc:	4b05      	ldr	r3, [pc, #20]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	43d9      	mvns	r1, r3
20000ac4:	4b03      	ldr	r3, [pc, #12]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ac6:	400a      	ands	r2, r1
20000ac8:	625a      	str	r2, [r3, #36]	; 0x24
}
20000aca:	46c0      	nop			; (mov r8, r8)
20000acc:	46bd      	mov	sp, r7
20000ace:	b002      	add	sp, #8
20000ad0:	bd80      	pop	{r7, pc}
20000ad2:	46c0      	nop			; (mov r8, r8)
20000ad4:	40023800 	andmi	r3, r2, r0, lsl #16

20000ad8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000ad8:	b580      	push	{r7, lr}
20000ada:	b082      	sub	sp, #8
20000adc:	af00      	add	r7, sp, #0
20000ade:	6078      	str	r0, [r7, #4]
20000ae0:	000a      	movs	r2, r1
20000ae2:	1cfb      	adds	r3, r7, #3
20000ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ae6:	1cfb      	adds	r3, r7, #3
20000ae8:	781b      	ldrb	r3, [r3, #0]
20000aea:	2b00      	cmp	r3, #0
20000aec:	d006      	beq.n	20000afc <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20000aee:	4b09      	ldr	r3, [pc, #36]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af0:	6d19      	ldr	r1, [r3, #80]	; 0x50
20000af2:	4b08      	ldr	r3, [pc, #32]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af4:	687a      	ldr	r2, [r7, #4]
20000af6:	430a      	orrs	r2, r1
20000af8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20000afa:	e006      	b.n	20000b0a <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20000afc:	4b05      	ldr	r3, [pc, #20]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20000b00:	687b      	ldr	r3, [r7, #4]
20000b02:	43d9      	mvns	r1, r3
20000b04:	4b03      	ldr	r3, [pc, #12]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000b06:	400a      	ands	r2, r1
20000b08:	651a      	str	r2, [r3, #80]	; 0x50
}
20000b0a:	46c0      	nop			; (mov r8, r8)
20000b0c:	46bd      	mov	sp, r7
20000b0e:	b002      	add	sp, #8
20000b10:	bd80      	pop	{r7, pc}
20000b12:	46c0      	nop			; (mov r8, r8)
20000b14:	40023800 	andmi	r3, r2, r0, lsl #16

20000b18 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000b18:	b580      	push	{r7, lr}
20000b1a:	b082      	sub	sp, #8
20000b1c:	af00      	add	r7, sp, #0
20000b1e:	6078      	str	r0, [r7, #4]
20000b20:	000a      	movs	r2, r1
20000b22:	1cfb      	adds	r3, r7, #3
20000b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b26:	1cfb      	adds	r3, r7, #3
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	2b00      	cmp	r3, #0
20000b2c:	d006      	beq.n	20000b3c <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20000b2e:	4b09      	ldr	r3, [pc, #36]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
20000b32:	4b08      	ldr	r3, [pc, #32]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b34:	687a      	ldr	r2, [r7, #4]
20000b36:	430a      	orrs	r2, r1
20000b38:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20000b3a:	e006      	b.n	20000b4a <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20000b3c:	4b05      	ldr	r3, [pc, #20]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20000b40:	687b      	ldr	r3, [r7, #4]
20000b42:	43d9      	mvns	r1, r3
20000b44:	4b03      	ldr	r3, [pc, #12]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b46:	400a      	ands	r2, r1
20000b48:	655a      	str	r2, [r3, #84]	; 0x54
}
20000b4a:	46c0      	nop			; (mov r8, r8)
20000b4c:	46bd      	mov	sp, r7
20000b4e:	b002      	add	sp, #8
20000b50:	bd80      	pop	{r7, pc}
20000b52:	46c0      	nop			; (mov r8, r8)
20000b54:	40023800 	andmi	r3, r2, r0, lsl #16

20000b58 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000b58:	b580      	push	{r7, lr}
20000b5a:	b082      	sub	sp, #8
20000b5c:	af00      	add	r7, sp, #0
20000b5e:	6078      	str	r0, [r7, #4]
20000b60:	000a      	movs	r2, r1
20000b62:	1cfb      	adds	r3, r7, #3
20000b64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b66:	1cfb      	adds	r3, r7, #3
20000b68:	781b      	ldrb	r3, [r3, #0]
20000b6a:	2b00      	cmp	r3, #0
20000b6c:	d006      	beq.n	20000b7c <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20000b6e:	4b09      	ldr	r3, [pc, #36]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b70:	6d99      	ldr	r1, [r3, #88]	; 0x58
20000b72:	4b08      	ldr	r3, [pc, #32]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b74:	687a      	ldr	r2, [r7, #4]
20000b76:	430a      	orrs	r2, r1
20000b78:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20000b7a:	e006      	b.n	20000b8a <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20000b7c:	4b05      	ldr	r3, [pc, #20]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20000b80:	687b      	ldr	r3, [r7, #4]
20000b82:	43d9      	mvns	r1, r3
20000b84:	4b03      	ldr	r3, [pc, #12]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b86:	400a      	ands	r2, r1
20000b88:	659a      	str	r2, [r3, #88]	; 0x58
}
20000b8a:	46c0      	nop			; (mov r8, r8)
20000b8c:	46bd      	mov	sp, r7
20000b8e:	b002      	add	sp, #8
20000b90:	bd80      	pop	{r7, pc}
20000b92:	46c0      	nop			; (mov r8, r8)
20000b94:	40023800 	andmi	r3, r2, r0, lsl #16

20000b98 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000b98:	b580      	push	{r7, lr}
20000b9a:	b082      	sub	sp, #8
20000b9c:	af00      	add	r7, sp, #0
20000b9e:	6078      	str	r0, [r7, #4]
20000ba0:	000a      	movs	r2, r1
20000ba2:	1cfb      	adds	r3, r7, #3
20000ba4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ba6:	1cfb      	adds	r3, r7, #3
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	2b00      	cmp	r3, #0
20000bac:	d006      	beq.n	20000bbc <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20000bae:	4b09      	ldr	r3, [pc, #36]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb0:	6e19      	ldr	r1, [r3, #96]	; 0x60
20000bb2:	4b08      	ldr	r3, [pc, #32]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb4:	687a      	ldr	r2, [r7, #4]
20000bb6:	430a      	orrs	r2, r1
20000bb8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20000bba:	e006      	b.n	20000bca <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20000bbc:	4b05      	ldr	r3, [pc, #20]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	43d9      	mvns	r1, r3
20000bc4:	4b03      	ldr	r3, [pc, #12]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bc6:	400a      	ands	r2, r1
20000bc8:	661a      	str	r2, [r3, #96]	; 0x60
}
20000bca:	46c0      	nop			; (mov r8, r8)
20000bcc:	46bd      	mov	sp, r7
20000bce:	b002      	add	sp, #8
20000bd0:	bd80      	pop	{r7, pc}
20000bd2:	46c0      	nop			; (mov r8, r8)
20000bd4:	40023800 	andmi	r3, r2, r0, lsl #16

20000bd8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000bd8:	b580      	push	{r7, lr}
20000bda:	b082      	sub	sp, #8
20000bdc:	af00      	add	r7, sp, #0
20000bde:	6078      	str	r0, [r7, #4]
20000be0:	000a      	movs	r2, r1
20000be2:	1cfb      	adds	r3, r7, #3
20000be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000be6:	1cfb      	adds	r3, r7, #3
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	2b00      	cmp	r3, #0
20000bec:	d006      	beq.n	20000bfc <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20000bee:	4b09      	ldr	r3, [pc, #36]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf0:	6e59      	ldr	r1, [r3, #100]	; 0x64
20000bf2:	4b08      	ldr	r3, [pc, #32]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf4:	687a      	ldr	r2, [r7, #4]
20000bf6:	430a      	orrs	r2, r1
20000bf8:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20000bfa:	e006      	b.n	20000c0a <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20000bfc:	4b05      	ldr	r3, [pc, #20]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20000c00:	687b      	ldr	r3, [r7, #4]
20000c02:	43d9      	mvns	r1, r3
20000c04:	4b03      	ldr	r3, [pc, #12]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000c06:	400a      	ands	r2, r1
20000c08:	665a      	str	r2, [r3, #100]	; 0x64
}
20000c0a:	46c0      	nop			; (mov r8, r8)
20000c0c:	46bd      	mov	sp, r7
20000c0e:	b002      	add	sp, #8
20000c10:	bd80      	pop	{r7, pc}
20000c12:	46c0      	nop			; (mov r8, r8)
20000c14:	40023800 	andmi	r3, r2, r0, lsl #16

20000c18 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20000c18:	b580      	push	{r7, lr}
20000c1a:	b082      	sub	sp, #8
20000c1c:	af00      	add	r7, sp, #0
20000c1e:	0002      	movs	r2, r0
20000c20:	1dfb      	adds	r3, r7, #7
20000c22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20000c24:	1dfb      	adds	r3, r7, #7
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	2b01      	cmp	r3, #1
20000c2a:	d106      	bne.n	20000c3a <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c2c:	4b08      	ldr	r3, [pc, #32]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c30:	4b07      	ldr	r3, [pc, #28]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c32:	2108      	movs	r1, #8
20000c34:	430a      	orrs	r2, r1
20000c36:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20000c38:	e005      	b.n	20000c46 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c3a:	4b05      	ldr	r3, [pc, #20]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c3e:	4b04      	ldr	r3, [pc, #16]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c40:	2108      	movs	r1, #8
20000c42:	438a      	bics	r2, r1
20000c44:	671a      	str	r2, [r3, #112]	; 0x70
}
20000c46:	46c0      	nop			; (mov r8, r8)
20000c48:	46bd      	mov	sp, r7
20000c4a:	b002      	add	sp, #8
20000c4c:	bd80      	pop	{r7, pc}
20000c4e:	46c0      	nop			; (mov r8, r8)
20000c50:	40023800 	andmi	r3, r2, r0, lsl #16

20000c54 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20000c54:	b580      	push	{r7, lr}
20000c56:	b082      	sub	sp, #8
20000c58:	af00      	add	r7, sp, #0
20000c5a:	0002      	movs	r2, r0
20000c5c:	1dfb      	adds	r3, r7, #7
20000c5e:	701a      	strb	r2, [r3, #0]
20000c60:	1dbb      	adds	r3, r7, #6
20000c62:	1c0a      	adds	r2, r1, #0
20000c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000c66:	1dbb      	adds	r3, r7, #6
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	2b00      	cmp	r3, #0
20000c6c:	d009      	beq.n	20000c82 <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20000c6e:	4b0c      	ldr	r3, [pc, #48]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c70:	781b      	ldrb	r3, [r3, #0]
20000c72:	b2da      	uxtb	r2, r3
20000c74:	490a      	ldr	r1, [pc, #40]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c76:	1dfb      	adds	r3, r7, #7
20000c78:	781b      	ldrb	r3, [r3, #0]
20000c7a:	4313      	orrs	r3, r2
20000c7c:	b2db      	uxtb	r3, r3
20000c7e:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20000c80:	e00a      	b.n	20000c98 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20000c82:	4b07      	ldr	r3, [pc, #28]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c84:	781b      	ldrb	r3, [r3, #0]
20000c86:	b2db      	uxtb	r3, r3
20000c88:	1dfa      	adds	r2, r7, #7
20000c8a:	7812      	ldrb	r2, [r2, #0]
20000c8c:	43d2      	mvns	r2, r2
20000c8e:	b2d2      	uxtb	r2, r2
20000c90:	4903      	ldr	r1, [pc, #12]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c92:	4013      	ands	r3, r2
20000c94:	b2db      	uxtb	r3, r3
20000c96:	700b      	strb	r3, [r1, #0]
}
20000c98:	46c0      	nop			; (mov r8, r8)
20000c9a:	46bd      	mov	sp, r7
20000c9c:	b002      	add	sp, #8
20000c9e:	bd80      	pop	{r7, pc}
20000ca0:	4002380d 	andmi	r3, r2, sp, lsl #16

20000ca4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b086      	sub	sp, #24
20000ca8:	af00      	add	r7, sp, #0
20000caa:	0002      	movs	r2, r0
20000cac:	1dfb      	adds	r3, r7, #7
20000cae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20000cb0:	2300      	movs	r3, #0
20000cb2:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20000cb4:	2300      	movs	r3, #0
20000cb6:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20000cb8:	2313      	movs	r3, #19
20000cba:	18fb      	adds	r3, r7, r3
20000cbc:	2200      	movs	r2, #0
20000cbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20000cc0:	1dfb      	adds	r3, r7, #7
20000cc2:	781b      	ldrb	r3, [r3, #0]
20000cc4:	095b      	lsrs	r3, r3, #5
20000cc6:	b2db      	uxtb	r3, r3
20000cc8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20000cca:	68fb      	ldr	r3, [r7, #12]
20000ccc:	2b01      	cmp	r3, #1
20000cce:	d103      	bne.n	20000cd8 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20000cd0:	4b14      	ldr	r3, [pc, #80]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000cd2:	681b      	ldr	r3, [r3, #0]
20000cd4:	617b      	str	r3, [r7, #20]
20000cd6:	e009      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20000cd8:	68fb      	ldr	r3, [r7, #12]
20000cda:	2b02      	cmp	r3, #2
20000cdc:	d103      	bne.n	20000ce6 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20000cde:	4b11      	ldr	r3, [pc, #68]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20000ce2:	617b      	str	r3, [r7, #20]
20000ce4:	e002      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20000ce6:	4b0f      	ldr	r3, [pc, #60]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000cea:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20000cec:	1dfb      	adds	r3, r7, #7
20000cee:	781b      	ldrb	r3, [r3, #0]
20000cf0:	221f      	movs	r2, #31
20000cf2:	4013      	ands	r3, r2
20000cf4:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20000cf6:	697a      	ldr	r2, [r7, #20]
20000cf8:	68fb      	ldr	r3, [r7, #12]
20000cfa:	40da      	lsrs	r2, r3
20000cfc:	0013      	movs	r3, r2
20000cfe:	2201      	movs	r2, #1
20000d00:	4013      	ands	r3, r2
20000d02:	d004      	beq.n	20000d0e <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20000d04:	2313      	movs	r3, #19
20000d06:	18fb      	adds	r3, r7, r3
20000d08:	2201      	movs	r2, #1
20000d0a:	701a      	strb	r2, [r3, #0]
20000d0c:	e003      	b.n	20000d16 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20000d0e:	2313      	movs	r3, #19
20000d10:	18fb      	adds	r3, r7, r3
20000d12:	2200      	movs	r2, #0
20000d14:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20000d16:	2313      	movs	r3, #19
20000d18:	18fb      	adds	r3, r7, r3
20000d1a:	781b      	ldrb	r3, [r3, #0]
}
20000d1c:	0018      	movs	r0, r3
20000d1e:	46bd      	mov	sp, r7
20000d20:	b006      	add	sp, #24
20000d22:	bd80      	pop	{r7, pc}
20000d24:	40023800 	andmi	r3, r2, r0, lsl #16

20000d28 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20000d28:	b580      	push	{r7, lr}
20000d2a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20000d2c:	4b04      	ldr	r3, [pc, #16]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20000d30:	4b03      	ldr	r3, [pc, #12]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d32:	2180      	movs	r1, #128	; 0x80
20000d34:	0449      	lsls	r1, r1, #17
20000d36:	430a      	orrs	r2, r1
20000d38:	675a      	str	r2, [r3, #116]	; 0x74
}
20000d3a:	46c0      	nop			; (mov r8, r8)
20000d3c:	46bd      	mov	sp, r7
20000d3e:	bd80      	pop	{r7, pc}
20000d40:	40023800 	andmi	r3, r2, r0, lsl #16

20000d44 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20000d44:	b580      	push	{r7, lr}
20000d46:	b084      	sub	sp, #16
20000d48:	af00      	add	r7, sp, #0
20000d4a:	0002      	movs	r2, r0
20000d4c:	1dfb      	adds	r3, r7, #7
20000d4e:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20000d50:	230f      	movs	r3, #15
20000d52:	18fb      	adds	r3, r7, r3
20000d54:	2200      	movs	r2, #0
20000d56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20000d58:	4b0a      	ldr	r3, [pc, #40]	; (20000d84 <RCC_GetITStatus+0x40>)
20000d5a:	68db      	ldr	r3, [r3, #12]
20000d5c:	1dfa      	adds	r2, r7, #7
20000d5e:	7812      	ldrb	r2, [r2, #0]
20000d60:	4013      	ands	r3, r2
20000d62:	d004      	beq.n	20000d6e <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20000d64:	230f      	movs	r3, #15
20000d66:	18fb      	adds	r3, r7, r3
20000d68:	2201      	movs	r2, #1
20000d6a:	701a      	strb	r2, [r3, #0]
20000d6c:	e003      	b.n	20000d76 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20000d6e:	230f      	movs	r3, #15
20000d70:	18fb      	adds	r3, r7, r3
20000d72:	2200      	movs	r2, #0
20000d74:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20000d76:	230f      	movs	r3, #15
20000d78:	18fb      	adds	r3, r7, r3
20000d7a:	781b      	ldrb	r3, [r3, #0]
}
20000d7c:	0018      	movs	r0, r3
20000d7e:	46bd      	mov	sp, r7
20000d80:	b004      	add	sp, #16
20000d82:	bd80      	pop	{r7, pc}
20000d84:	40023800 	andmi	r3, r2, r0, lsl #16

20000d88 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20000d88:	b580      	push	{r7, lr}
20000d8a:	b082      	sub	sp, #8
20000d8c:	af00      	add	r7, sp, #0
20000d8e:	0002      	movs	r2, r0
20000d90:	1dfb      	adds	r3, r7, #7
20000d92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20000d94:	4a03      	ldr	r2, [pc, #12]	; (20000da4 <RCC_ClearITPendingBit+0x1c>)
20000d96:	1dfb      	adds	r3, r7, #7
20000d98:	781b      	ldrb	r3, [r3, #0]
20000d9a:	7013      	strb	r3, [r2, #0]
}
20000d9c:	46c0      	nop			; (mov r8, r8)
20000d9e:	46bd      	mov	sp, r7
20000da0:	b002      	add	sp, #8
20000da2:	bd80      	pop	{r7, pc}
20000da4:	4002380e 	andmi	r3, r2, lr, lsl #16

20000da8 <detect_Closed_Doors>:
	GPIO_Pin_0, GPIO_Pin_1, GPIO_Pin_2, GPIO_Pin_3, GPIO_Pin_4, GPIO_Pin_5,
	GPIO_Pin_6, GPIO_Pin_7, GPIO_Pin_8, GPIO_Pin_9, GPIO_Pin_10, GPIO_Pin_11,
	GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14, GPIO_Pin_15};

void detect_Closed_Doors(int *pointer)
{
20000da8:	b580      	push	{r7, lr}
20000daa:	b084      	sub	sp, #16
20000dac:	af00      	add	r7, sp, #0
20000dae:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < sizeof(GPIO_Pins); i = i + 2)
20000db0:	2300      	movs	r3, #0
20000db2:	60fb      	str	r3, [r7, #12]
20000db4:	e012      	b.n	20000ddc <detect_Closed_Doors+0x34>
	{
		if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pins[i]))
20000db6:	4b0d      	ldr	r3, [pc, #52]	; (20000dec <detect_Closed_Doors+0x44>)
20000db8:	68fa      	ldr	r2, [r7, #12]
20000dba:	0052      	lsls	r2, r2, #1
20000dbc:	5ad3      	ldrh	r3, [r2, r3]
20000dbe:	4a0c      	ldr	r2, [pc, #48]	; (20000df0 <detect_Closed_Doors+0x48>)
20000dc0:	0019      	movs	r1, r3
20000dc2:	0010      	movs	r0, r2
20000dc4:	f000 fb59 	bl	2000147a <GPIO_ReadInputDataBit>
20000dc8:	1e03      	subs	r3, r0, #0
20000dca:	d004      	beq.n	20000dd6 <detect_Closed_Doors+0x2e>
		{
			(*pointer)++;
20000dcc:	687b      	ldr	r3, [r7, #4]
20000dce:	681b      	ldr	r3, [r3, #0]
20000dd0:	1c5a      	adds	r2, r3, #1
20000dd2:	687b      	ldr	r3, [r7, #4]
20000dd4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < sizeof(GPIO_Pins); i = i + 2)
20000dd6:	68fb      	ldr	r3, [r7, #12]
20000dd8:	3302      	adds	r3, #2
20000dda:	60fb      	str	r3, [r7, #12]
20000ddc:	68fb      	ldr	r3, [r7, #12]
20000dde:	2b1f      	cmp	r3, #31
20000de0:	d9e9      	bls.n	20000db6 <detect_Closed_Doors+0xe>
		}
	}
}
20000de2:	46c0      	nop			; (mov r8, r8)
20000de4:	46bd      	mov	sp, r7
20000de6:	b004      	add	sp, #16
20000de8:	bd80      	pop	{r7, pc}
20000dea:	46c0      	nop			; (mov r8, r8)
20000dec:	200028cc 	andcs	r2, r0, ip, asr #17
20000df0:	40020000 	andmi	r0, r2, r0

20000df4 <init_Doors>:

void init_Doors(door *pointer, int length)
{
20000df4:	b580      	push	{r7, lr}
20000df6:	b084      	sub	sp, #16
20000df8:	af00      	add	r7, sp, #0
20000dfa:	6078      	str	r0, [r7, #4]
20000dfc:	6039      	str	r1, [r7, #0]
	int SafetyNum = 0;
20000dfe:	2300      	movs	r3, #0
20000e00:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sizeof(GPIO_Pins); i = i+2)
20000e02:	2300      	movs	r3, #0
20000e04:	60bb      	str	r3, [r7, #8]
20000e06:	e039      	b.n	20000e7c <init_Doors+0x88>
	{
		if (SafetyNum == length) //finns ifall en dörr stängs efter att första gången som programet kollar dörrar
20000e08:	68fa      	ldr	r2, [r7, #12]
20000e0a:	683b      	ldr	r3, [r7, #0]
20000e0c:	429a      	cmp	r2, r3
20000e0e:	d039      	beq.n	20000e84 <init_Doors+0x90>
		{
			break;
		}
		if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pins[i]))
20000e10:	4b1f      	ldr	r3, [pc, #124]	; (20000e90 <init_Doors+0x9c>)
20000e12:	68ba      	ldr	r2, [r7, #8]
20000e14:	0052      	lsls	r2, r2, #1
20000e16:	5ad3      	ldrh	r3, [r2, r3]
20000e18:	4a1e      	ldr	r2, [pc, #120]	; (20000e94 <init_Doors+0xa0>)
20000e1a:	0019      	movs	r1, r3
20000e1c:	0010      	movs	r0, r2
20000e1e:	f000 fb2c 	bl	2000147a <GPIO_ReadInputDataBit>
20000e22:	1e03      	subs	r3, r0, #0
20000e24:	d027      	beq.n	20000e76 <init_Doors+0x82>
		{
		
			SafetyNum++;
20000e26:	68fb      	ldr	r3, [r7, #12]
20000e28:	3301      	adds	r3, #1
20000e2a:	60fb      	str	r3, [r7, #12]
			pointer->id = i;
20000e2c:	68bb      	ldr	r3, [r7, #8]
20000e2e:	b2da      	uxtb	r2, r3
20000e30:	687b      	ldr	r3, [r7, #4]
20000e32:	701a      	strb	r2, [r3, #0]
			pointer->controlbits = 0;
20000e34:	687b      	ldr	r3, [r7, #4]
20000e36:	2200      	movs	r2, #0
20000e38:	605a      	str	r2, [r3, #4]
			pointer->time_larm = 1;
20000e3a:	687b      	ldr	r3, [r7, #4]
20000e3c:	2201      	movs	r2, #1
20000e3e:	721a      	strb	r2, [r3, #8]
			pointer->time_central_larm = 2;
20000e40:	687b      	ldr	r3, [r7, #4]
20000e42:	2202      	movs	r2, #2
20000e44:	725a      	strb	r2, [r3, #9]
			pointer->password = 0;
20000e46:	687b      	ldr	r3, [r7, #4]
20000e48:	2200      	movs	r2, #0
20000e4a:	60da      	str	r2, [r3, #12]
			pointer->GPIO_lamp = GPIO_Pins[i + 1];
20000e4c:	68bb      	ldr	r3, [r7, #8]
20000e4e:	1c5a      	adds	r2, r3, #1
20000e50:	4b0f      	ldr	r3, [pc, #60]	; (20000e90 <init_Doors+0x9c>)
20000e52:	0052      	lsls	r2, r2, #1
20000e54:	5ad3      	ldrh	r3, [r2, r3]
20000e56:	001a      	movs	r2, r3
20000e58:	687b      	ldr	r3, [r7, #4]
20000e5a:	611a      	str	r2, [r3, #16]
			pointer->GPIO_read = GPIO_Pins[i];
20000e5c:	4b0c      	ldr	r3, [pc, #48]	; (20000e90 <init_Doors+0x9c>)
20000e5e:	68ba      	ldr	r2, [r7, #8]
20000e60:	0052      	lsls	r2, r2, #1
20000e62:	5ad3      	ldrh	r3, [r2, r3]
20000e64:	001a      	movs	r2, r3
20000e66:	687b      	ldr	r3, [r7, #4]
20000e68:	615a      	str	r2, [r3, #20]
			pointer->larmTick = 0;
20000e6a:	687b      	ldr	r3, [r7, #4]
20000e6c:	2200      	movs	r2, #0
20000e6e:	619a      	str	r2, [r3, #24]
			pointer++;
20000e70:	687b      	ldr	r3, [r7, #4]
20000e72:	331c      	adds	r3, #28
20000e74:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < sizeof(GPIO_Pins); i = i+2)
20000e76:	68bb      	ldr	r3, [r7, #8]
20000e78:	3302      	adds	r3, #2
20000e7a:	60bb      	str	r3, [r7, #8]
20000e7c:	68bb      	ldr	r3, [r7, #8]
20000e7e:	2b1f      	cmp	r3, #31
20000e80:	d9c2      	bls.n	20000e08 <init_Doors+0x14>
			
		}
	}
}
20000e82:	e000      	b.n	20000e86 <init_Doors+0x92>
			break;
20000e84:	46c0      	nop			; (mov r8, r8)
}
20000e86:	46c0      	nop			; (mov r8, r8)
20000e88:	46bd      	mov	sp, r7
20000e8a:	b004      	add	sp, #16
20000e8c:	bd80      	pop	{r7, pc}
20000e8e:	46c0      	nop			; (mov r8, r8)
20000e90:	200028cc 	andcs	r2, r0, ip, asr #17
20000e94:	40020000 	andmi	r0, r2, r0

20000e98 <init_GPIO_Ports>:

//======================================GPIO=========================================================
void init_GPIO_Ports()
{
20000e98:	b580      	push	{r7, lr}
20000e9a:	b082      	sub	sp, #8
20000e9c:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO A UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000e9e:	2101      	movs	r1, #1
20000ea0:	2001      	movs	r0, #1
20000ea2:	f7ff fcd9 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000ea6:	003b      	movs	r3, r7
20000ea8:	0018      	movs	r0, r3
20000eaa:	f000 faa9 	bl	20001400 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7;
20000eae:	003b      	movs	r3, r7
20000eb0:	22aa      	movs	r2, #170	; 0xaa
20000eb2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000eb4:	003b      	movs	r3, r7
20000eb6:	2201      	movs	r2, #1
20000eb8:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000eba:	003b      	movs	r3, r7
20000ebc:	2200      	movs	r2, #0
20000ebe:	719a      	strb	r2, [r3, #6]
	GPIO_Init(GPIOA, &init);
20000ec0:	003b      	movs	r3, r7
20000ec2:	4a0e      	ldr	r2, [pc, #56]	; (20000efc <init_GPIO_Ports+0x64>)
20000ec4:	0019      	movs	r1, r3
20000ec6:	0010      	movs	r0, r2
20000ec8:	f000 fa0e 	bl	200012e8 <GPIO_Init>

	//konfigurerar inport GPIO A
	GPIO_StructInit(&init);
20000ecc:	003b      	movs	r3, r7
20000ece:	0018      	movs	r0, r3
20000ed0:	f000 fa96 	bl	20001400 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6;
20000ed4:	003b      	movs	r3, r7
20000ed6:	2255      	movs	r2, #85	; 0x55
20000ed8:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000eda:	003b      	movs	r3, r7
20000edc:	2200      	movs	r2, #0
20000ede:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000ee0:	003b      	movs	r3, r7
20000ee2:	2201      	movs	r2, #1
20000ee4:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20000ee6:	003b      	movs	r3, r7
20000ee8:	4a04      	ldr	r2, [pc, #16]	; (20000efc <init_GPIO_Ports+0x64>)
20000eea:	0019      	movs	r1, r3
20000eec:	0010      	movs	r0, r2
20000eee:	f000 f9fb 	bl	200012e8 <GPIO_Init>
}
20000ef2:	46c0      	nop			; (mov r8, r8)
20000ef4:	46bd      	mov	sp, r7
20000ef6:	b002      	add	sp, #8
20000ef8:	bd80      	pop	{r7, pc}
20000efa:	46c0      	nop			; (mov r8, r8)
20000efc:	40020000 	andmi	r0, r2, r0

20000f00 <SysTick_Handler>:


// ========================================= SYSTICK ================================================
volatile uint32_t msTicks = 0; /* Variable to store millisecond ticks */
void SysTick_Handler(void)
{ /* SysTick interrupt Handler. */
20000f00:	b580      	push	{r7, lr}
20000f02:	af00      	add	r7, sp, #0
	msTicks++;
20000f04:	4b03      	ldr	r3, [pc, #12]	; (20000f14 <SysTick_Handler+0x14>)
20000f06:	681b      	ldr	r3, [r3, #0]
20000f08:	1c5a      	adds	r2, r3, #1
20000f0a:	4b02      	ldr	r3, [pc, #8]	; (20000f14 <SysTick_Handler+0x14>)
20000f0c:	601a      	str	r2, [r3, #0]
}
20000f0e:	46c0      	nop			; (mov r8, r8)
20000f10:	46bd      	mov	sp, r7
20000f12:	bd80      	pop	{r7, pc}
20000f14:	200027e0 	andcs	r2, r0, r0, ror #15

20000f18 <systick_Init>:
void systick_Init(void)
{
20000f18:	b580      	push	{r7, lr}
20000f1a:	b082      	sub	sp, #8
20000f1c:	af00      	add	r7, sp, #0
	// Initiera SysTick.
	*((void (**)(void))0x2001C03C) = SysTick_Handler;
20000f1e:	4b06      	ldr	r3, [pc, #24]	; (20000f38 <systick_Init+0x20>)
20000f20:	4a06      	ldr	r2, [pc, #24]	; (20000f3c <systick_Init+0x24>)
20000f22:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	returnCode = SysTick_Config(168000000 / 1000); // Genererar ett SysTick-avbrott varje ms.
20000f24:	4b06      	ldr	r3, [pc, #24]	; (20000f40 <systick_Init+0x28>)
20000f26:	0018      	movs	r0, r3
20000f28:	f7ff f8a2 	bl	20000070 <SysTick_Config>
20000f2c:	0003      	movs	r3, r0
20000f2e:	607b      	str	r3, [r7, #4]

	if (returnCode != 0)
	{   // Om inte SysTick_Config lyckas...
		//typ reboot? bootloops är alltid kul
	}
}
20000f30:	46c0      	nop			; (mov r8, r8)
20000f32:	46bd      	mov	sp, r7
20000f34:	b002      	add	sp, #8
20000f36:	bd80      	pop	{r7, pc}
20000f38:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000f3c:	20000f01 	andcs	r0, r0, r1, lsl #30
20000f40:	00029040 	andeq	r9, r2, r0, asr #32

20000f44 <main>:

void main(void)
{
20000f44:	b5f0      	push	{r4, r5, r6, r7, lr}
20000f46:	b089      	sub	sp, #36	; 0x24
20000f48:	af00      	add	r7, sp, #0
	init_GPIO_Ports();
20000f4a:	f7ff ffa5 	bl	20000e98 <init_GPIO_Ports>

	int amountOfActiveDoors = 0;
20000f4e:	2300      	movs	r3, #0
20000f50:	60fb      	str	r3, [r7, #12]
	detect_Closed_Doors(&amountOfActiveDoors); // Hur många dörrar är aktiva?
20000f52:	230c      	movs	r3, #12
20000f54:	18fb      	adds	r3, r7, r3
20000f56:	0018      	movs	r0, r3
20000f58:	f7ff ff26 	bl	20000da8 <detect_Closed_Doors>
	door active_doors[amountOfActiveDoors];	// Skapa en array med tillräckligt stor size.
20000f5c:	68fc      	ldr	r4, [r7, #12]
20000f5e:	1e63      	subs	r3, r4, #1
20000f60:	617b      	str	r3, [r7, #20]
20000f62:	0023      	movs	r3, r4
20000f64:	603b      	str	r3, [r7, #0]
20000f66:	2300      	movs	r3, #0
20000f68:	607b      	str	r3, [r7, #4]
20000f6a:	22e0      	movs	r2, #224	; 0xe0
20000f6c:	2300      	movs	r3, #0
20000f6e:	6838      	ldr	r0, [r7, #0]
20000f70:	6879      	ldr	r1, [r7, #4]
20000f72:	f001 fc0b 	bl	2000278c <__aeabi_lmul>
20000f76:	0022      	movs	r2, r4
20000f78:	0013      	movs	r3, r2
20000f7a:	00db      	lsls	r3, r3, #3
20000f7c:	1a9b      	subs	r3, r3, r2
20000f7e:	009b      	lsls	r3, r3, #2
20000f80:	0023      	movs	r3, r4
20000f82:	001d      	movs	r5, r3
20000f84:	2300      	movs	r3, #0
20000f86:	001e      	movs	r6, r3
20000f88:	22e0      	movs	r2, #224	; 0xe0
20000f8a:	2300      	movs	r3, #0
20000f8c:	0028      	movs	r0, r5
20000f8e:	0031      	movs	r1, r6
20000f90:	f001 fbfc 	bl	2000278c <__aeabi_lmul>
20000f94:	0022      	movs	r2, r4
20000f96:	0013      	movs	r3, r2
20000f98:	00db      	lsls	r3, r3, #3
20000f9a:	1a9b      	subs	r3, r3, r2
20000f9c:	009b      	lsls	r3, r3, #2
20000f9e:	3303      	adds	r3, #3
20000fa0:	3307      	adds	r3, #7
20000fa2:	08db      	lsrs	r3, r3, #3
20000fa4:	00db      	lsls	r3, r3, #3
20000fa6:	466a      	mov	r2, sp
20000fa8:	1ad3      	subs	r3, r2, r3
20000faa:	469d      	mov	sp, r3
20000fac:	466b      	mov	r3, sp
20000fae:	3303      	adds	r3, #3
20000fb0:	089b      	lsrs	r3, r3, #2
20000fb2:	009b      	lsls	r3, r3, #2
20000fb4:	613b      	str	r3, [r7, #16]
	init_Doors(&active_doors[0], amountOfActiveDoors);
20000fb6:	693b      	ldr	r3, [r7, #16]
20000fb8:	68fa      	ldr	r2, [r7, #12]
20000fba:	0011      	movs	r1, r2
20000fbc:	0018      	movs	r0, r3
20000fbe:	f7ff ff19 	bl	20000df4 <init_Doors>

	systick_Init();
20000fc2:	f7ff ffa9 	bl	20000f18 <systick_Init>
	door active_doors[4] = {test1,test2,test3,test4};
	*/

	while (1)
	{
		for (int i = 0; i < sizeof(active_doors); i++)
20000fc6:	2300      	movs	r3, #0
20000fc8:	61bb      	str	r3, [r7, #24]
20000fca:	e0c2      	b.n	20001152 <main+0x20e>
		{
			if (GPIO_ReadInputDataBit(GPIOA, active_doors[i].GPIO_read))
20000fcc:	6939      	ldr	r1, [r7, #16]
20000fce:	69ba      	ldr	r2, [r7, #24]
20000fd0:	0013      	movs	r3, r2
20000fd2:	00db      	lsls	r3, r3, #3
20000fd4:	1a9b      	subs	r3, r3, r2
20000fd6:	009b      	lsls	r3, r3, #2
20000fd8:	18cb      	adds	r3, r1, r3
20000fda:	3314      	adds	r3, #20
20000fdc:	681b      	ldr	r3, [r3, #0]
20000fde:	b29b      	uxth	r3, r3
20000fe0:	4a61      	ldr	r2, [pc, #388]	; (20001168 <main+0x224>)
20000fe2:	0019      	movs	r1, r3
20000fe4:	0010      	movs	r0, r2
20000fe6:	f000 fa48 	bl	2000147a <GPIO_ReadInputDataBit>
20000fea:	1e03      	subs	r3, r0, #0
20000fec:	d015      	beq.n	2000101a <main+0xd6>
			{
				active_doors[i].controlbits &= 0xFFFE; //borde va så!
20000fee:	6939      	ldr	r1, [r7, #16]
20000ff0:	69ba      	ldr	r2, [r7, #24]
20000ff2:	0013      	movs	r3, r2
20000ff4:	00db      	lsls	r3, r3, #3
20000ff6:	1a9b      	subs	r3, r3, r2
20000ff8:	009b      	lsls	r3, r3, #2
20000ffa:	18cb      	adds	r3, r1, r3
20000ffc:	3304      	adds	r3, #4
20000ffe:	681b      	ldr	r3, [r3, #0]
20001000:	4a5a      	ldr	r2, [pc, #360]	; (2000116c <main+0x228>)
20001002:	4013      	ands	r3, r2
20001004:	0019      	movs	r1, r3
20001006:	6938      	ldr	r0, [r7, #16]
20001008:	69ba      	ldr	r2, [r7, #24]
2000100a:	0013      	movs	r3, r2
2000100c:	00db      	lsls	r3, r3, #3
2000100e:	1a9b      	subs	r3, r3, r2
20001010:	009b      	lsls	r3, r3, #2
20001012:	18c3      	adds	r3, r0, r3
20001014:	3304      	adds	r3, #4
20001016:	6019      	str	r1, [r3, #0]
20001018:	e02b      	b.n	20001072 <main+0x12e>
													   //GPIO_ResetBits(GPIOA, active_doors[i].GPIO_lamp);
			}
			else
			{
				if (!active_doors[i].controlbits & 1)
2000101a:	6939      	ldr	r1, [r7, #16]
2000101c:	69ba      	ldr	r2, [r7, #24]
2000101e:	0013      	movs	r3, r2
20001020:	00db      	lsls	r3, r3, #3
20001022:	1a9b      	subs	r3, r3, r2
20001024:	009b      	lsls	r3, r3, #2
20001026:	18cb      	adds	r3, r1, r3
20001028:	3304      	adds	r3, #4
2000102a:	681b      	ldr	r3, [r3, #0]
2000102c:	2b00      	cmp	r3, #0
2000102e:	d10b      	bne.n	20001048 <main+0x104>
				{
					active_doors[i].larmTick = msTicks;
20001030:	4b4f      	ldr	r3, [pc, #316]	; (20001170 <main+0x22c>)
20001032:	681b      	ldr	r3, [r3, #0]
20001034:	0018      	movs	r0, r3
20001036:	6939      	ldr	r1, [r7, #16]
20001038:	69ba      	ldr	r2, [r7, #24]
2000103a:	0013      	movs	r3, r2
2000103c:	00db      	lsls	r3, r3, #3
2000103e:	1a9b      	subs	r3, r3, r2
20001040:	009b      	lsls	r3, r3, #2
20001042:	18cb      	adds	r3, r1, r3
20001044:	3318      	adds	r3, #24
20001046:	6018      	str	r0, [r3, #0]
				}
				active_doors[i].controlbits |= 1;
20001048:	6939      	ldr	r1, [r7, #16]
2000104a:	69ba      	ldr	r2, [r7, #24]
2000104c:	0013      	movs	r3, r2
2000104e:	00db      	lsls	r3, r3, #3
20001050:	1a9b      	subs	r3, r3, r2
20001052:	009b      	lsls	r3, r3, #2
20001054:	18cb      	adds	r3, r1, r3
20001056:	3304      	adds	r3, #4
20001058:	681b      	ldr	r3, [r3, #0]
2000105a:	2201      	movs	r2, #1
2000105c:	431a      	orrs	r2, r3
2000105e:	0011      	movs	r1, r2
20001060:	6938      	ldr	r0, [r7, #16]
20001062:	69ba      	ldr	r2, [r7, #24]
20001064:	0013      	movs	r3, r2
20001066:	00db      	lsls	r3, r3, #3
20001068:	1a9b      	subs	r3, r3, r2
2000106a:	009b      	lsls	r3, r3, #2
2000106c:	18c3      	adds	r3, r0, r3
2000106e:	3304      	adds	r3, #4
20001070:	6019      	str	r1, [r3, #0]

				//GPIO_SetBits(GPIOA, active_doors[i].GPIO_lamp);
			}

			for (int i = 0; i < sizeof(active_doors); i++)
20001072:	2300      	movs	r3, #0
20001074:	61fb      	str	r3, [r7, #28]
20001076:	e060      	b.n	2000113a <main+0x1f6>
			{
				if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_larm))
20001078:	6939      	ldr	r1, [r7, #16]
2000107a:	69fa      	ldr	r2, [r7, #28]
2000107c:	0013      	movs	r3, r2
2000107e:	00db      	lsls	r3, r3, #3
20001080:	1a9b      	subs	r3, r3, r2
20001082:	009b      	lsls	r3, r3, #2
20001084:	18cb      	adds	r3, r1, r3
20001086:	3304      	adds	r3, #4
20001088:	681b      	ldr	r3, [r3, #0]
2000108a:	2201      	movs	r2, #1
2000108c:	4013      	ands	r3, r2
2000108e:	d02a      	beq.n	200010e6 <main+0x1a2>
20001090:	6939      	ldr	r1, [r7, #16]
20001092:	69fa      	ldr	r2, [r7, #28]
20001094:	0013      	movs	r3, r2
20001096:	00db      	lsls	r3, r3, #3
20001098:	1a9b      	subs	r3, r3, r2
2000109a:	009b      	lsls	r3, r3, #2
2000109c:	18cb      	adds	r3, r1, r3
2000109e:	3318      	adds	r3, #24
200010a0:	6819      	ldr	r1, [r3, #0]
200010a2:	6938      	ldr	r0, [r7, #16]
200010a4:	69fa      	ldr	r2, [r7, #28]
200010a6:	0013      	movs	r3, r2
200010a8:	00db      	lsls	r3, r3, #3
200010aa:	1a9b      	subs	r3, r3, r2
200010ac:	009b      	lsls	r3, r3, #2
200010ae:	18c3      	adds	r3, r0, r3
200010b0:	3308      	adds	r3, #8
200010b2:	781b      	ldrb	r3, [r3, #0]
200010b4:	001a      	movs	r2, r3
200010b6:	4b2f      	ldr	r3, [pc, #188]	; (20001174 <main+0x230>)
200010b8:	4353      	muls	r3, r2
200010ba:	18cb      	adds	r3, r1, r3
200010bc:	001a      	movs	r2, r3
200010be:	4b2c      	ldr	r3, [pc, #176]	; (20001170 <main+0x22c>)
200010c0:	681b      	ldr	r3, [r3, #0]
200010c2:	429a      	cmp	r2, r3
200010c4:	d20f      	bcs.n	200010e6 <main+0x1a2>
				{
					GPIO_SetBits(GPIOA, active_doors[i].GPIO_lamp);
200010c6:	6939      	ldr	r1, [r7, #16]
200010c8:	69fa      	ldr	r2, [r7, #28]
200010ca:	0013      	movs	r3, r2
200010cc:	00db      	lsls	r3, r3, #3
200010ce:	1a9b      	subs	r3, r3, r2
200010d0:	009b      	lsls	r3, r3, #2
200010d2:	18cb      	adds	r3, r1, r3
200010d4:	3310      	adds	r3, #16
200010d6:	681b      	ldr	r3, [r3, #0]
200010d8:	b29b      	uxth	r3, r3
200010da:	4a23      	ldr	r2, [pc, #140]	; (20001168 <main+0x224>)
200010dc:	0019      	movs	r1, r3
200010de:	0010      	movs	r0, r2
200010e0:	f000 fa23 	bl	2000152a <GPIO_SetBits>
200010e4:	e00e      	b.n	20001104 <main+0x1c0>
				}

				else
				{
					GPIO_ResetBits(GPIOA, active_doors[i].GPIO_lamp);
200010e6:	6939      	ldr	r1, [r7, #16]
200010e8:	69fa      	ldr	r2, [r7, #28]
200010ea:	0013      	movs	r3, r2
200010ec:	00db      	lsls	r3, r3, #3
200010ee:	1a9b      	subs	r3, r3, r2
200010f0:	009b      	lsls	r3, r3, #2
200010f2:	18cb      	adds	r3, r1, r3
200010f4:	3310      	adds	r3, #16
200010f6:	681b      	ldr	r3, [r3, #0]
200010f8:	b29b      	uxth	r3, r3
200010fa:	4a1b      	ldr	r2, [pc, #108]	; (20001168 <main+0x224>)
200010fc:	0019      	movs	r1, r3
200010fe:	0010      	movs	r0, r2
20001100:	f000 fa22 	bl	20001548 <GPIO_ResetBits>
				}
				if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_central_larm))
20001104:	6939      	ldr	r1, [r7, #16]
20001106:	69fa      	ldr	r2, [r7, #28]
20001108:	0013      	movs	r3, r2
2000110a:	00db      	lsls	r3, r3, #3
2000110c:	1a9b      	subs	r3, r3, r2
2000110e:	009b      	lsls	r3, r3, #2
20001110:	18cb      	adds	r3, r1, r3
20001112:	3304      	adds	r3, #4
20001114:	681b      	ldr	r3, [r3, #0]
20001116:	2201      	movs	r2, #1
20001118:	4013      	ands	r3, r2
2000111a:	d00b      	beq.n	20001134 <main+0x1f0>
2000111c:	69fa      	ldr	r2, [r7, #28]
2000111e:	0013      	movs	r3, r2
20001120:	00db      	lsls	r3, r3, #3
20001122:	1a9b      	subs	r3, r3, r2
20001124:	009b      	lsls	r3, r3, #2
20001126:	69fa      	ldr	r2, [r7, #28]
20001128:	0013      	movs	r3, r2
2000112a:	00db      	lsls	r3, r3, #3
2000112c:	1a9b      	subs	r3, r3, r2
2000112e:	009b      	lsls	r3, r3, #2
20001130:	4b0f      	ldr	r3, [pc, #60]	; (20001170 <main+0x22c>)
20001132:	681b      	ldr	r3, [r3, #0]
			for (int i = 0; i < sizeof(active_doors); i++)
20001134:	69fb      	ldr	r3, [r7, #28]
20001136:	3301      	adds	r3, #1
20001138:	61fb      	str	r3, [r7, #28]
2000113a:	0022      	movs	r2, r4
2000113c:	0013      	movs	r3, r2
2000113e:	00db      	lsls	r3, r3, #3
20001140:	1a9b      	subs	r3, r3, r2
20001142:	009b      	lsls	r3, r3, #2
20001144:	001a      	movs	r2, r3
20001146:	69fb      	ldr	r3, [r7, #28]
20001148:	429a      	cmp	r2, r3
2000114a:	d895      	bhi.n	20001078 <main+0x134>
		for (int i = 0; i < sizeof(active_doors); i++)
2000114c:	69bb      	ldr	r3, [r7, #24]
2000114e:	3301      	adds	r3, #1
20001150:	61bb      	str	r3, [r7, #24]
20001152:	0022      	movs	r2, r4
20001154:	0013      	movs	r3, r2
20001156:	00db      	lsls	r3, r3, #3
20001158:	1a9b      	subs	r3, r3, r2
2000115a:	009b      	lsls	r3, r3, #2
2000115c:	001a      	movs	r2, r3
2000115e:	69bb      	ldr	r3, [r7, #24]
20001160:	429a      	cmp	r2, r3
20001162:	d900      	bls.n	20001166 <main+0x222>
20001164:	e732      	b.n	20000fcc <main+0x88>
20001166:	e72e      	b.n	20000fc6 <main+0x82>
20001168:	40020000 	andmi	r0, r2, r0
2000116c:	0000fffe 	strdeq	pc, [r0], -lr
20001170:	200027e0 	andcs	r2, r0, r0, ror #15
20001174:	00002710 	andeq	r2, r0, r0, lsl r7

20001178 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
20001178:	b580      	push	{r7, lr}
2000117a:	b082      	sub	sp, #8
2000117c:	af00      	add	r7, sp, #0
2000117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
20001180:	687b      	ldr	r3, [r7, #4]
20001182:	4a4e      	ldr	r2, [pc, #312]	; (200012bc <GPIO_DeInit+0x144>)
20001184:	4293      	cmp	r3, r2
20001186:	d108      	bne.n	2000119a <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20001188:	2101      	movs	r1, #1
2000118a:	2001      	movs	r0, #1
2000118c:	f7ff fc04 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20001190:	2100      	movs	r1, #0
20001192:	2001      	movs	r0, #1
20001194:	f7ff fc00 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
20001198:	e08c      	b.n	200012b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
2000119a:	687b      	ldr	r3, [r7, #4]
2000119c:	4a48      	ldr	r2, [pc, #288]	; (200012c0 <GPIO_DeInit+0x148>)
2000119e:	4293      	cmp	r3, r2
200011a0:	d108      	bne.n	200011b4 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
200011a2:	2101      	movs	r1, #1
200011a4:	2002      	movs	r0, #2
200011a6:	f7ff fbf7 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
200011aa:	2100      	movs	r1, #0
200011ac:	2002      	movs	r0, #2
200011ae:	f7ff fbf3 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200011b2:	e07f      	b.n	200012b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
200011b4:	687b      	ldr	r3, [r7, #4]
200011b6:	4a43      	ldr	r2, [pc, #268]	; (200012c4 <GPIO_DeInit+0x14c>)
200011b8:	4293      	cmp	r3, r2
200011ba:	d108      	bne.n	200011ce <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
200011bc:	2101      	movs	r1, #1
200011be:	2004      	movs	r0, #4
200011c0:	f7ff fbea 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
200011c4:	2100      	movs	r1, #0
200011c6:	2004      	movs	r0, #4
200011c8:	f7ff fbe6 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200011cc:	e072      	b.n	200012b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
200011ce:	687b      	ldr	r3, [r7, #4]
200011d0:	4a3d      	ldr	r2, [pc, #244]	; (200012c8 <GPIO_DeInit+0x150>)
200011d2:	4293      	cmp	r3, r2
200011d4:	d108      	bne.n	200011e8 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
200011d6:	2101      	movs	r1, #1
200011d8:	2008      	movs	r0, #8
200011da:	f7ff fbdd 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
200011de:	2100      	movs	r1, #0
200011e0:	2008      	movs	r0, #8
200011e2:	f7ff fbd9 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200011e6:	e065      	b.n	200012b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
200011e8:	687b      	ldr	r3, [r7, #4]
200011ea:	4a38      	ldr	r2, [pc, #224]	; (200012cc <GPIO_DeInit+0x154>)
200011ec:	4293      	cmp	r3, r2
200011ee:	d108      	bne.n	20001202 <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
200011f0:	2101      	movs	r1, #1
200011f2:	2010      	movs	r0, #16
200011f4:	f7ff fbd0 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
200011f8:	2100      	movs	r1, #0
200011fa:	2010      	movs	r0, #16
200011fc:	f7ff fbcc 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001200:	e058      	b.n	200012b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
20001202:	687b      	ldr	r3, [r7, #4]
20001204:	4a32      	ldr	r2, [pc, #200]	; (200012d0 <GPIO_DeInit+0x158>)
20001206:	4293      	cmp	r3, r2
20001208:	d108      	bne.n	2000121c <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
2000120a:	2101      	movs	r1, #1
2000120c:	2020      	movs	r0, #32
2000120e:	f7ff fbc3 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20001212:	2100      	movs	r1, #0
20001214:	2020      	movs	r0, #32
20001216:	f7ff fbbf 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
2000121a:	e04b      	b.n	200012b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
2000121c:	687b      	ldr	r3, [r7, #4]
2000121e:	4a2d      	ldr	r2, [pc, #180]	; (200012d4 <GPIO_DeInit+0x15c>)
20001220:	4293      	cmp	r3, r2
20001222:	d108      	bne.n	20001236 <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20001224:	2101      	movs	r1, #1
20001226:	2040      	movs	r0, #64	; 0x40
20001228:	f7ff fbb6 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
2000122c:	2100      	movs	r1, #0
2000122e:	2040      	movs	r0, #64	; 0x40
20001230:	f7ff fbb2 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001234:	e03e      	b.n	200012b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
20001236:	687b      	ldr	r3, [r7, #4]
20001238:	4a27      	ldr	r2, [pc, #156]	; (200012d8 <GPIO_DeInit+0x160>)
2000123a:	4293      	cmp	r3, r2
2000123c:	d108      	bne.n	20001250 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
2000123e:	2101      	movs	r1, #1
20001240:	2080      	movs	r0, #128	; 0x80
20001242:	f7ff fba9 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
20001246:	2100      	movs	r1, #0
20001248:	2080      	movs	r0, #128	; 0x80
2000124a:	f7ff fba5 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
2000124e:	e031      	b.n	200012b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
20001250:	687b      	ldr	r3, [r7, #4]
20001252:	4a22      	ldr	r2, [pc, #136]	; (200012dc <GPIO_DeInit+0x164>)
20001254:	4293      	cmp	r3, r2
20001256:	d10c      	bne.n	20001272 <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
20001258:	2380      	movs	r3, #128	; 0x80
2000125a:	005b      	lsls	r3, r3, #1
2000125c:	2101      	movs	r1, #1
2000125e:	0018      	movs	r0, r3
20001260:	f7ff fb9a 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20001264:	2380      	movs	r3, #128	; 0x80
20001266:	005b      	lsls	r3, r3, #1
20001268:	2100      	movs	r1, #0
2000126a:	0018      	movs	r0, r3
2000126c:	f7ff fb94 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001270:	e020      	b.n	200012b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
20001272:	687b      	ldr	r3, [r7, #4]
20001274:	4a1a      	ldr	r2, [pc, #104]	; (200012e0 <GPIO_DeInit+0x168>)
20001276:	4293      	cmp	r3, r2
20001278:	d10c      	bne.n	20001294 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
2000127a:	2380      	movs	r3, #128	; 0x80
2000127c:	009b      	lsls	r3, r3, #2
2000127e:	2101      	movs	r1, #1
20001280:	0018      	movs	r0, r3
20001282:	f7ff fb89 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
20001286:	2380      	movs	r3, #128	; 0x80
20001288:	009b      	lsls	r3, r3, #2
2000128a:	2100      	movs	r1, #0
2000128c:	0018      	movs	r0, r3
2000128e:	f7ff fb83 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001292:	e00f      	b.n	200012b4 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20001294:	687b      	ldr	r3, [r7, #4]
20001296:	4a13      	ldr	r2, [pc, #76]	; (200012e4 <GPIO_DeInit+0x16c>)
20001298:	4293      	cmp	r3, r2
2000129a:	d10b      	bne.n	200012b4 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
2000129c:	2380      	movs	r3, #128	; 0x80
2000129e:	00db      	lsls	r3, r3, #3
200012a0:	2101      	movs	r1, #1
200012a2:	0018      	movs	r0, r3
200012a4:	f7ff fb78 	bl	20000998 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
200012a8:	2380      	movs	r3, #128	; 0x80
200012aa:	00db      	lsls	r3, r3, #3
200012ac:	2100      	movs	r1, #0
200012ae:	0018      	movs	r0, r3
200012b0:	f7ff fb72 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200012b4:	46c0      	nop			; (mov r8, r8)
200012b6:	46bd      	mov	sp, r7
200012b8:	b002      	add	sp, #8
200012ba:	bd80      	pop	{r7, pc}
200012bc:	40020000 	andmi	r0, r2, r0
200012c0:	40020400 	andmi	r0, r2, r0, lsl #8
200012c4:	40020800 	andmi	r0, r2, r0, lsl #16
200012c8:	40020c00 	andmi	r0, r2, r0, lsl #24
200012cc:	40021000 	andmi	r1, r2, r0
200012d0:	40021400 	andmi	r1, r2, r0, lsl #8
200012d4:	40021800 	andmi	r1, r2, r0, lsl #16
200012d8:	40021c00 	andmi	r1, r2, r0, lsl #24
200012dc:	40022000 	andmi	r2, r2, r0
200012e0:	40022400 	andmi	r2, r2, r0, lsl #8
200012e4:	40022800 	andmi	r2, r2, r0, lsl #16

200012e8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
200012e8:	b580      	push	{r7, lr}
200012ea:	b086      	sub	sp, #24
200012ec:	af00      	add	r7, sp, #0
200012ee:	6078      	str	r0, [r7, #4]
200012f0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
200012f2:	2300      	movs	r3, #0
200012f4:	617b      	str	r3, [r7, #20]
200012f6:	2300      	movs	r3, #0
200012f8:	613b      	str	r3, [r7, #16]
200012fa:	2300      	movs	r3, #0
200012fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
200012fe:	2300      	movs	r3, #0
20001300:	617b      	str	r3, [r7, #20]
20001302:	e076      	b.n	200013f2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20001304:	2201      	movs	r2, #1
20001306:	697b      	ldr	r3, [r7, #20]
20001308:	409a      	lsls	r2, r3
2000130a:	0013      	movs	r3, r2
2000130c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
2000130e:	683b      	ldr	r3, [r7, #0]
20001310:	681a      	ldr	r2, [r3, #0]
20001312:	693b      	ldr	r3, [r7, #16]
20001314:	4013      	ands	r3, r2
20001316:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20001318:	68fa      	ldr	r2, [r7, #12]
2000131a:	693b      	ldr	r3, [r7, #16]
2000131c:	429a      	cmp	r2, r3
2000131e:	d165      	bne.n	200013ec <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
20001320:	687b      	ldr	r3, [r7, #4]
20001322:	681b      	ldr	r3, [r3, #0]
20001324:	697a      	ldr	r2, [r7, #20]
20001326:	0052      	lsls	r2, r2, #1
20001328:	2103      	movs	r1, #3
2000132a:	4091      	lsls	r1, r2
2000132c:	000a      	movs	r2, r1
2000132e:	43d2      	mvns	r2, r2
20001330:	401a      	ands	r2, r3
20001332:	687b      	ldr	r3, [r7, #4]
20001334:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
20001336:	687b      	ldr	r3, [r7, #4]
20001338:	681a      	ldr	r2, [r3, #0]
2000133a:	683b      	ldr	r3, [r7, #0]
2000133c:	791b      	ldrb	r3, [r3, #4]
2000133e:	0019      	movs	r1, r3
20001340:	697b      	ldr	r3, [r7, #20]
20001342:	005b      	lsls	r3, r3, #1
20001344:	4099      	lsls	r1, r3
20001346:	000b      	movs	r3, r1
20001348:	431a      	orrs	r2, r3
2000134a:	687b      	ldr	r3, [r7, #4]
2000134c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
2000134e:	683b      	ldr	r3, [r7, #0]
20001350:	791b      	ldrb	r3, [r3, #4]
20001352:	2b01      	cmp	r3, #1
20001354:	d003      	beq.n	2000135e <GPIO_Init+0x76>
20001356:	683b      	ldr	r3, [r7, #0]
20001358:	791b      	ldrb	r3, [r3, #4]
2000135a:	2b02      	cmp	r3, #2
2000135c:	d12e      	bne.n	200013bc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
2000135e:	687b      	ldr	r3, [r7, #4]
20001360:	689b      	ldr	r3, [r3, #8]
20001362:	697a      	ldr	r2, [r7, #20]
20001364:	0052      	lsls	r2, r2, #1
20001366:	2103      	movs	r1, #3
20001368:	4091      	lsls	r1, r2
2000136a:	000a      	movs	r2, r1
2000136c:	43d2      	mvns	r2, r2
2000136e:	401a      	ands	r2, r3
20001370:	687b      	ldr	r3, [r7, #4]
20001372:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
20001374:	687b      	ldr	r3, [r7, #4]
20001376:	689a      	ldr	r2, [r3, #8]
20001378:	683b      	ldr	r3, [r7, #0]
2000137a:	795b      	ldrb	r3, [r3, #5]
2000137c:	0019      	movs	r1, r3
2000137e:	697b      	ldr	r3, [r7, #20]
20001380:	005b      	lsls	r3, r3, #1
20001382:	4099      	lsls	r1, r3
20001384:	000b      	movs	r3, r1
20001386:	431a      	orrs	r2, r3
20001388:	687b      	ldr	r3, [r7, #4]
2000138a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
2000138c:	687b      	ldr	r3, [r7, #4]
2000138e:	685b      	ldr	r3, [r3, #4]
20001390:	697a      	ldr	r2, [r7, #20]
20001392:	b292      	uxth	r2, r2
20001394:	0011      	movs	r1, r2
20001396:	2201      	movs	r2, #1
20001398:	408a      	lsls	r2, r1
2000139a:	43d2      	mvns	r2, r2
2000139c:	401a      	ands	r2, r3
2000139e:	687b      	ldr	r3, [r7, #4]
200013a0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
200013a2:	687b      	ldr	r3, [r7, #4]
200013a4:	685b      	ldr	r3, [r3, #4]
200013a6:	683a      	ldr	r2, [r7, #0]
200013a8:	7992      	ldrb	r2, [r2, #6]
200013aa:	0011      	movs	r1, r2
200013ac:	697a      	ldr	r2, [r7, #20]
200013ae:	b292      	uxth	r2, r2
200013b0:	4091      	lsls	r1, r2
200013b2:	000a      	movs	r2, r1
200013b4:	b292      	uxth	r2, r2
200013b6:	431a      	orrs	r2, r3
200013b8:	687b      	ldr	r3, [r7, #4]
200013ba:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
200013bc:	687b      	ldr	r3, [r7, #4]
200013be:	68db      	ldr	r3, [r3, #12]
200013c0:	697a      	ldr	r2, [r7, #20]
200013c2:	b292      	uxth	r2, r2
200013c4:	0052      	lsls	r2, r2, #1
200013c6:	2103      	movs	r1, #3
200013c8:	4091      	lsls	r1, r2
200013ca:	000a      	movs	r2, r1
200013cc:	43d2      	mvns	r2, r2
200013ce:	401a      	ands	r2, r3
200013d0:	687b      	ldr	r3, [r7, #4]
200013d2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
200013d4:	687b      	ldr	r3, [r7, #4]
200013d6:	68da      	ldr	r2, [r3, #12]
200013d8:	683b      	ldr	r3, [r7, #0]
200013da:	79db      	ldrb	r3, [r3, #7]
200013dc:	0019      	movs	r1, r3
200013de:	697b      	ldr	r3, [r7, #20]
200013e0:	005b      	lsls	r3, r3, #1
200013e2:	4099      	lsls	r1, r3
200013e4:	000b      	movs	r3, r1
200013e6:	431a      	orrs	r2, r3
200013e8:	687b      	ldr	r3, [r7, #4]
200013ea:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
200013ec:	697b      	ldr	r3, [r7, #20]
200013ee:	3301      	adds	r3, #1
200013f0:	617b      	str	r3, [r7, #20]
200013f2:	697b      	ldr	r3, [r7, #20]
200013f4:	2b0f      	cmp	r3, #15
200013f6:	d985      	bls.n	20001304 <GPIO_Init+0x1c>
    }
  }
}
200013f8:	46c0      	nop			; (mov r8, r8)
200013fa:	46bd      	mov	sp, r7
200013fc:	b006      	add	sp, #24
200013fe:	bd80      	pop	{r7, pc}

20001400 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20001400:	b580      	push	{r7, lr}
20001402:	b082      	sub	sp, #8
20001404:	af00      	add	r7, sp, #0
20001406:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
20001408:	687b      	ldr	r3, [r7, #4]
2000140a:	4a09      	ldr	r2, [pc, #36]	; (20001430 <GPIO_StructInit+0x30>)
2000140c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
2000140e:	687b      	ldr	r3, [r7, #4]
20001410:	2200      	movs	r2, #0
20001412:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20001414:	687b      	ldr	r3, [r7, #4]
20001416:	2200      	movs	r2, #0
20001418:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
2000141a:	687b      	ldr	r3, [r7, #4]
2000141c:	2200      	movs	r2, #0
2000141e:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
20001420:	687b      	ldr	r3, [r7, #4]
20001422:	2200      	movs	r2, #0
20001424:	71da      	strb	r2, [r3, #7]
}
20001426:	46c0      	nop			; (mov r8, r8)
20001428:	46bd      	mov	sp, r7
2000142a:	b002      	add	sp, #8
2000142c:	bd80      	pop	{r7, pc}
2000142e:	46c0      	nop			; (mov r8, r8)
20001430:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001434 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001434:	b580      	push	{r7, lr}
20001436:	b084      	sub	sp, #16
20001438:	af00      	add	r7, sp, #0
2000143a:	6078      	str	r0, [r7, #4]
2000143c:	000a      	movs	r2, r1
2000143e:	1cbb      	adds	r3, r7, #2
20001440:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
20001442:	2380      	movs	r3, #128	; 0x80
20001444:	025b      	lsls	r3, r3, #9
20001446:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
20001448:	1cbb      	adds	r3, r7, #2
2000144a:	881a      	ldrh	r2, [r3, #0]
2000144c:	68fb      	ldr	r3, [r7, #12]
2000144e:	4313      	orrs	r3, r2
20001450:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001452:	68fa      	ldr	r2, [r7, #12]
20001454:	687b      	ldr	r3, [r7, #4]
20001456:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
20001458:	1cbb      	adds	r3, r7, #2
2000145a:	881a      	ldrh	r2, [r3, #0]
2000145c:	687b      	ldr	r3, [r7, #4]
2000145e:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001460:	68fa      	ldr	r2, [r7, #12]
20001462:	687b      	ldr	r3, [r7, #4]
20001464:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20001466:	687b      	ldr	r3, [r7, #4]
20001468:	69db      	ldr	r3, [r3, #28]
2000146a:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
2000146c:	687b      	ldr	r3, [r7, #4]
2000146e:	69db      	ldr	r3, [r3, #28]
20001470:	60fb      	str	r3, [r7, #12]
}
20001472:	46c0      	nop			; (mov r8, r8)
20001474:	46bd      	mov	sp, r7
20001476:	b004      	add	sp, #16
20001478:	bd80      	pop	{r7, pc}

2000147a <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000147a:	b580      	push	{r7, lr}
2000147c:	b084      	sub	sp, #16
2000147e:	af00      	add	r7, sp, #0
20001480:	6078      	str	r0, [r7, #4]
20001482:	000a      	movs	r2, r1
20001484:	1cbb      	adds	r3, r7, #2
20001486:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20001488:	230f      	movs	r3, #15
2000148a:	18fb      	adds	r3, r7, r3
2000148c:	2200      	movs	r2, #0
2000148e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20001490:	687b      	ldr	r3, [r7, #4]
20001492:	691b      	ldr	r3, [r3, #16]
20001494:	1cba      	adds	r2, r7, #2
20001496:	8812      	ldrh	r2, [r2, #0]
20001498:	4013      	ands	r3, r2
2000149a:	d004      	beq.n	200014a6 <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
2000149c:	230f      	movs	r3, #15
2000149e:	18fb      	adds	r3, r7, r3
200014a0:	2201      	movs	r2, #1
200014a2:	701a      	strb	r2, [r3, #0]
200014a4:	e003      	b.n	200014ae <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
200014a6:	230f      	movs	r3, #15
200014a8:	18fb      	adds	r3, r7, r3
200014aa:	2200      	movs	r2, #0
200014ac:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200014ae:	230f      	movs	r3, #15
200014b0:	18fb      	adds	r3, r7, r3
200014b2:	781b      	ldrb	r3, [r3, #0]
}
200014b4:	0018      	movs	r0, r3
200014b6:	46bd      	mov	sp, r7
200014b8:	b004      	add	sp, #16
200014ba:	bd80      	pop	{r7, pc}

200014bc <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
200014bc:	b580      	push	{r7, lr}
200014be:	b082      	sub	sp, #8
200014c0:	af00      	add	r7, sp, #0
200014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
200014c4:	687b      	ldr	r3, [r7, #4]
200014c6:	691b      	ldr	r3, [r3, #16]
200014c8:	b29b      	uxth	r3, r3
}
200014ca:	0018      	movs	r0, r3
200014cc:	46bd      	mov	sp, r7
200014ce:	b002      	add	sp, #8
200014d0:	bd80      	pop	{r7, pc}

200014d2 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200014d2:	b580      	push	{r7, lr}
200014d4:	b084      	sub	sp, #16
200014d6:	af00      	add	r7, sp, #0
200014d8:	6078      	str	r0, [r7, #4]
200014da:	000a      	movs	r2, r1
200014dc:	1cbb      	adds	r3, r7, #2
200014de:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
200014e0:	230f      	movs	r3, #15
200014e2:	18fb      	adds	r3, r7, r3
200014e4:	2200      	movs	r2, #0
200014e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
200014e8:	687b      	ldr	r3, [r7, #4]
200014ea:	695b      	ldr	r3, [r3, #20]
200014ec:	1cba      	adds	r2, r7, #2
200014ee:	8812      	ldrh	r2, [r2, #0]
200014f0:	4013      	ands	r3, r2
200014f2:	d004      	beq.n	200014fe <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
200014f4:	230f      	movs	r3, #15
200014f6:	18fb      	adds	r3, r7, r3
200014f8:	2201      	movs	r2, #1
200014fa:	701a      	strb	r2, [r3, #0]
200014fc:	e003      	b.n	20001506 <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
200014fe:	230f      	movs	r3, #15
20001500:	18fb      	adds	r3, r7, r3
20001502:	2200      	movs	r2, #0
20001504:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20001506:	230f      	movs	r3, #15
20001508:	18fb      	adds	r3, r7, r3
2000150a:	781b      	ldrb	r3, [r3, #0]
}
2000150c:	0018      	movs	r0, r3
2000150e:	46bd      	mov	sp, r7
20001510:	b004      	add	sp, #16
20001512:	bd80      	pop	{r7, pc}

20001514 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20001514:	b580      	push	{r7, lr}
20001516:	b082      	sub	sp, #8
20001518:	af00      	add	r7, sp, #0
2000151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
2000151c:	687b      	ldr	r3, [r7, #4]
2000151e:	695b      	ldr	r3, [r3, #20]
20001520:	b29b      	uxth	r3, r3
}
20001522:	0018      	movs	r0, r3
20001524:	46bd      	mov	sp, r7
20001526:	b002      	add	sp, #8
20001528:	bd80      	pop	{r7, pc}

2000152a <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000152a:	b580      	push	{r7, lr}
2000152c:	b082      	sub	sp, #8
2000152e:	af00      	add	r7, sp, #0
20001530:	6078      	str	r0, [r7, #4]
20001532:	000a      	movs	r2, r1
20001534:	1cbb      	adds	r3, r7, #2
20001536:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
20001538:	687b      	ldr	r3, [r7, #4]
2000153a:	1cba      	adds	r2, r7, #2
2000153c:	8812      	ldrh	r2, [r2, #0]
2000153e:	831a      	strh	r2, [r3, #24]
}
20001540:	46c0      	nop			; (mov r8, r8)
20001542:	46bd      	mov	sp, r7
20001544:	b002      	add	sp, #8
20001546:	bd80      	pop	{r7, pc}

20001548 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001548:	b580      	push	{r7, lr}
2000154a:	b082      	sub	sp, #8
2000154c:	af00      	add	r7, sp, #0
2000154e:	6078      	str	r0, [r7, #4]
20001550:	000a      	movs	r2, r1
20001552:	1cbb      	adds	r3, r7, #2
20001554:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
20001556:	687b      	ldr	r3, [r7, #4]
20001558:	1cba      	adds	r2, r7, #2
2000155a:	8812      	ldrh	r2, [r2, #0]
2000155c:	835a      	strh	r2, [r3, #26]
}
2000155e:	46c0      	nop			; (mov r8, r8)
20001560:	46bd      	mov	sp, r7
20001562:	b002      	add	sp, #8
20001564:	bd80      	pop	{r7, pc}

20001566 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
20001566:	b580      	push	{r7, lr}
20001568:	b082      	sub	sp, #8
2000156a:	af00      	add	r7, sp, #0
2000156c:	6078      	str	r0, [r7, #4]
2000156e:	0008      	movs	r0, r1
20001570:	0011      	movs	r1, r2
20001572:	1cbb      	adds	r3, r7, #2
20001574:	1c02      	adds	r2, r0, #0
20001576:	801a      	strh	r2, [r3, #0]
20001578:	1c7b      	adds	r3, r7, #1
2000157a:	1c0a      	adds	r2, r1, #0
2000157c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
2000157e:	1c7b      	adds	r3, r7, #1
20001580:	781b      	ldrb	r3, [r3, #0]
20001582:	2b00      	cmp	r3, #0
20001584:	d004      	beq.n	20001590 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
20001586:	687b      	ldr	r3, [r7, #4]
20001588:	1cba      	adds	r2, r7, #2
2000158a:	8812      	ldrh	r2, [r2, #0]
2000158c:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
2000158e:	e003      	b.n	20001598 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
20001590:	687b      	ldr	r3, [r7, #4]
20001592:	1cba      	adds	r2, r7, #2
20001594:	8812      	ldrh	r2, [r2, #0]
20001596:	835a      	strh	r2, [r3, #26]
}
20001598:	46c0      	nop			; (mov r8, r8)
2000159a:	46bd      	mov	sp, r7
2000159c:	b002      	add	sp, #8
2000159e:	bd80      	pop	{r7, pc}

200015a0 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
200015a0:	b580      	push	{r7, lr}
200015a2:	b082      	sub	sp, #8
200015a4:	af00      	add	r7, sp, #0
200015a6:	6078      	str	r0, [r7, #4]
200015a8:	000a      	movs	r2, r1
200015aa:	1cbb      	adds	r3, r7, #2
200015ac:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
200015ae:	1cbb      	adds	r3, r7, #2
200015b0:	881a      	ldrh	r2, [r3, #0]
200015b2:	687b      	ldr	r3, [r7, #4]
200015b4:	615a      	str	r2, [r3, #20]
}
200015b6:	46c0      	nop			; (mov r8, r8)
200015b8:	46bd      	mov	sp, r7
200015ba:	b002      	add	sp, #8
200015bc:	bd80      	pop	{r7, pc}

200015be <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200015be:	b580      	push	{r7, lr}
200015c0:	b082      	sub	sp, #8
200015c2:	af00      	add	r7, sp, #0
200015c4:	6078      	str	r0, [r7, #4]
200015c6:	000a      	movs	r2, r1
200015c8:	1cbb      	adds	r3, r7, #2
200015ca:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
200015cc:	687b      	ldr	r3, [r7, #4]
200015ce:	695a      	ldr	r2, [r3, #20]
200015d0:	1cbb      	adds	r3, r7, #2
200015d2:	881b      	ldrh	r3, [r3, #0]
200015d4:	405a      	eors	r2, r3
200015d6:	687b      	ldr	r3, [r7, #4]
200015d8:	615a      	str	r2, [r3, #20]
}
200015da:	46c0      	nop			; (mov r8, r8)
200015dc:	46bd      	mov	sp, r7
200015de:	b002      	add	sp, #8
200015e0:	bd80      	pop	{r7, pc}

200015e2 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
200015e2:	b580      	push	{r7, lr}
200015e4:	b084      	sub	sp, #16
200015e6:	af00      	add	r7, sp, #0
200015e8:	6078      	str	r0, [r7, #4]
200015ea:	0008      	movs	r0, r1
200015ec:	0011      	movs	r1, r2
200015ee:	1cbb      	adds	r3, r7, #2
200015f0:	1c02      	adds	r2, r0, #0
200015f2:	801a      	strh	r2, [r3, #0]
200015f4:	1c7b      	adds	r3, r7, #1
200015f6:	1c0a      	adds	r2, r1, #0
200015f8:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
200015fa:	2300      	movs	r3, #0
200015fc:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
200015fe:	2300      	movs	r3, #0
20001600:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20001602:	1c7b      	adds	r3, r7, #1
20001604:	781a      	ldrb	r2, [r3, #0]
20001606:	1cbb      	adds	r3, r7, #2
20001608:	881b      	ldrh	r3, [r3, #0]
2000160a:	2107      	movs	r1, #7
2000160c:	400b      	ands	r3, r1
2000160e:	009b      	lsls	r3, r3, #2
20001610:	409a      	lsls	r2, r3
20001612:	0013      	movs	r3, r2
20001614:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20001616:	1cbb      	adds	r3, r7, #2
20001618:	881b      	ldrh	r3, [r3, #0]
2000161a:	08db      	lsrs	r3, r3, #3
2000161c:	b29b      	uxth	r3, r3
2000161e:	001a      	movs	r2, r3
20001620:	687b      	ldr	r3, [r7, #4]
20001622:	3208      	adds	r2, #8
20001624:	0092      	lsls	r2, r2, #2
20001626:	58d3      	ldr	r3, [r2, r3]
20001628:	1cba      	adds	r2, r7, #2
2000162a:	8812      	ldrh	r2, [r2, #0]
2000162c:	2107      	movs	r1, #7
2000162e:	400a      	ands	r2, r1
20001630:	0092      	lsls	r2, r2, #2
20001632:	210f      	movs	r1, #15
20001634:	4091      	lsls	r1, r2
20001636:	000a      	movs	r2, r1
20001638:	43d2      	mvns	r2, r2
2000163a:	1cb9      	adds	r1, r7, #2
2000163c:	8809      	ldrh	r1, [r1, #0]
2000163e:	08c9      	lsrs	r1, r1, #3
20001640:	b289      	uxth	r1, r1
20001642:	0008      	movs	r0, r1
20001644:	401a      	ands	r2, r3
20001646:	0011      	movs	r1, r2
20001648:	687b      	ldr	r3, [r7, #4]
2000164a:	0002      	movs	r2, r0
2000164c:	3208      	adds	r2, #8
2000164e:	0092      	lsls	r2, r2, #2
20001650:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
20001652:	1cbb      	adds	r3, r7, #2
20001654:	881b      	ldrh	r3, [r3, #0]
20001656:	08db      	lsrs	r3, r3, #3
20001658:	b29b      	uxth	r3, r3
2000165a:	001a      	movs	r2, r3
2000165c:	687b      	ldr	r3, [r7, #4]
2000165e:	3208      	adds	r2, #8
20001660:	0092      	lsls	r2, r2, #2
20001662:	58d3      	ldr	r3, [r2, r3]
20001664:	68fa      	ldr	r2, [r7, #12]
20001666:	4313      	orrs	r3, r2
20001668:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
2000166a:	1cbb      	adds	r3, r7, #2
2000166c:	881b      	ldrh	r3, [r3, #0]
2000166e:	08db      	lsrs	r3, r3, #3
20001670:	b29b      	uxth	r3, r3
20001672:	001a      	movs	r2, r3
20001674:	687b      	ldr	r3, [r7, #4]
20001676:	3208      	adds	r2, #8
20001678:	0092      	lsls	r2, r2, #2
2000167a:	68b9      	ldr	r1, [r7, #8]
2000167c:	50d1      	str	r1, [r2, r3]
}
2000167e:	46c0      	nop			; (mov r8, r8)
20001680:	46bd      	mov	sp, r7
20001682:	b004      	add	sp, #16
20001684:	bd80      	pop	{r7, pc}
20001686:	46c0      	nop			; (mov r8, r8)

20001688 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
20001688:	b580      	push	{r7, lr}
2000168a:	b082      	sub	sp, #8
2000168c:	af00      	add	r7, sp, #0
2000168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
20001690:	4b04      	ldr	r3, [pc, #16]	; (200016a4 <NVIC_PriorityGroupConfig+0x1c>)
20001692:	687a      	ldr	r2, [r7, #4]
20001694:	4904      	ldr	r1, [pc, #16]	; (200016a8 <NVIC_PriorityGroupConfig+0x20>)
20001696:	430a      	orrs	r2, r1
20001698:	60da      	str	r2, [r3, #12]
}
2000169a:	46c0      	nop			; (mov r8, r8)
2000169c:	46bd      	mov	sp, r7
2000169e:	b002      	add	sp, #8
200016a0:	bd80      	pop	{r7, pc}
200016a2:	46c0      	nop			; (mov r8, r8)
200016a4:	e000ed00 	and	lr, r0, r0, lsl #26
200016a8:	05fa0000 	ldrbeq	r0, [sl, #0]!

200016ac <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
200016ac:	b5b0      	push	{r4, r5, r7, lr}
200016ae:	b084      	sub	sp, #16
200016b0:	af00      	add	r7, sp, #0
200016b2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
200016b4:	230f      	movs	r3, #15
200016b6:	18fb      	adds	r3, r7, r3
200016b8:	2200      	movs	r2, #0
200016ba:	701a      	strb	r2, [r3, #0]
200016bc:	230e      	movs	r3, #14
200016be:	18fb      	adds	r3, r7, r3
200016c0:	2200      	movs	r2, #0
200016c2:	701a      	strb	r2, [r3, #0]
200016c4:	230d      	movs	r3, #13
200016c6:	18fb      	adds	r3, r7, r3
200016c8:	220f      	movs	r2, #15
200016ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
200016cc:	687b      	ldr	r3, [r7, #4]
200016ce:	78db      	ldrb	r3, [r3, #3]
200016d0:	2b00      	cmp	r3, #0
200016d2:	d04d      	beq.n	20001770 <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
200016d4:	4b31      	ldr	r3, [pc, #196]	; (2000179c <NVIC_Init+0xf0>)
200016d6:	68db      	ldr	r3, [r3, #12]
200016d8:	43db      	mvns	r3, r3
200016da:	0a1b      	lsrs	r3, r3, #8
200016dc:	b2da      	uxtb	r2, r3
200016de:	200f      	movs	r0, #15
200016e0:	183b      	adds	r3, r7, r0
200016e2:	2107      	movs	r1, #7
200016e4:	400a      	ands	r2, r1
200016e6:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
200016e8:	250e      	movs	r5, #14
200016ea:	197b      	adds	r3, r7, r5
200016ec:	183a      	adds	r2, r7, r0
200016ee:	7812      	ldrb	r2, [r2, #0]
200016f0:	2104      	movs	r1, #4
200016f2:	1a8a      	subs	r2, r1, r2
200016f4:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
200016f6:	240d      	movs	r4, #13
200016f8:	193b      	adds	r3, r7, r4
200016fa:	781a      	ldrb	r2, [r3, #0]
200016fc:	0001      	movs	r1, r0
200016fe:	187b      	adds	r3, r7, r1
20001700:	781b      	ldrb	r3, [r3, #0]
20001702:	411a      	asrs	r2, r3
20001704:	193b      	adds	r3, r7, r4
20001706:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
20001708:	687b      	ldr	r3, [r7, #4]
2000170a:	785b      	ldrb	r3, [r3, #1]
2000170c:	001a      	movs	r2, r3
2000170e:	197b      	adds	r3, r7, r5
20001710:	781b      	ldrb	r3, [r3, #0]
20001712:	409a      	lsls	r2, r3
20001714:	0008      	movs	r0, r1
20001716:	187b      	adds	r3, r7, r1
20001718:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
2000171a:	687b      	ldr	r3, [r7, #4]
2000171c:	789b      	ldrb	r3, [r3, #2]
2000171e:	193a      	adds	r2, r7, r4
20001720:	7812      	ldrb	r2, [r2, #0]
20001722:	4013      	ands	r3, r2
20001724:	b2d9      	uxtb	r1, r3
20001726:	183b      	adds	r3, r7, r0
20001728:	183a      	adds	r2, r7, r0
2000172a:	7812      	ldrb	r2, [r2, #0]
2000172c:	430a      	orrs	r2, r1
2000172e:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
20001730:	183b      	adds	r3, r7, r0
20001732:	183a      	adds	r2, r7, r0
20001734:	7812      	ldrb	r2, [r2, #0]
20001736:	0112      	lsls	r2, r2, #4
20001738:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
2000173a:	4a19      	ldr	r2, [pc, #100]	; (200017a0 <NVIC_Init+0xf4>)
2000173c:	687b      	ldr	r3, [r7, #4]
2000173e:	781b      	ldrb	r3, [r3, #0]
20001740:	0019      	movs	r1, r3
20001742:	23c0      	movs	r3, #192	; 0xc0
20001744:	009b      	lsls	r3, r3, #2
20001746:	1852      	adds	r2, r2, r1
20001748:	18d3      	adds	r3, r2, r3
2000174a:	183a      	adds	r2, r7, r0
2000174c:	7812      	ldrb	r2, [r2, #0]
2000174e:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001750:	687b      	ldr	r3, [r7, #4]
20001752:	781b      	ldrb	r3, [r3, #0]
20001754:	001a      	movs	r2, r3
20001756:	231f      	movs	r3, #31
20001758:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
2000175a:	4911      	ldr	r1, [pc, #68]	; (200017a0 <NVIC_Init+0xf4>)
2000175c:	687a      	ldr	r2, [r7, #4]
2000175e:	7812      	ldrb	r2, [r2, #0]
20001760:	0952      	lsrs	r2, r2, #5
20001762:	b2d2      	uxtb	r2, r2
20001764:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001766:	2201      	movs	r2, #1
20001768:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
2000176a:	0083      	lsls	r3, r0, #2
2000176c:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
2000176e:	e010      	b.n	20001792 <NVIC_Init+0xe6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001770:	687b      	ldr	r3, [r7, #4]
20001772:	781b      	ldrb	r3, [r3, #0]
20001774:	001a      	movs	r2, r3
20001776:	231f      	movs	r3, #31
20001778:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
2000177a:	4909      	ldr	r1, [pc, #36]	; (200017a0 <NVIC_Init+0xf4>)
2000177c:	687a      	ldr	r2, [r7, #4]
2000177e:	7812      	ldrb	r2, [r2, #0]
20001780:	0952      	lsrs	r2, r2, #5
20001782:	b2d2      	uxtb	r2, r2
20001784:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001786:	2201      	movs	r2, #1
20001788:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
2000178a:	0003      	movs	r3, r0
2000178c:	3320      	adds	r3, #32
2000178e:	009b      	lsls	r3, r3, #2
20001790:	505a      	str	r2, [r3, r1]
}
20001792:	46c0      	nop			; (mov r8, r8)
20001794:	46bd      	mov	sp, r7
20001796:	b004      	add	sp, #16
20001798:	bdb0      	pop	{r4, r5, r7, pc}
2000179a:	46c0      	nop			; (mov r8, r8)
2000179c:	e000ed00 	and	lr, r0, r0, lsl #26
200017a0:	e000e100 	and	lr, r0, r0, lsl #2

200017a4 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
200017a4:	b580      	push	{r7, lr}
200017a6:	b082      	sub	sp, #8
200017a8:	af00      	add	r7, sp, #0
200017aa:	6078      	str	r0, [r7, #4]
200017ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
200017ae:	683b      	ldr	r3, [r7, #0]
200017b0:	4a05      	ldr	r2, [pc, #20]	; (200017c8 <NVIC_SetVectorTable+0x24>)
200017b2:	4013      	ands	r3, r2
200017b4:	0019      	movs	r1, r3
200017b6:	4b05      	ldr	r3, [pc, #20]	; (200017cc <NVIC_SetVectorTable+0x28>)
200017b8:	687a      	ldr	r2, [r7, #4]
200017ba:	430a      	orrs	r2, r1
200017bc:	609a      	str	r2, [r3, #8]
}
200017be:	46c0      	nop			; (mov r8, r8)
200017c0:	46bd      	mov	sp, r7
200017c2:	b002      	add	sp, #8
200017c4:	bd80      	pop	{r7, pc}
200017c6:	46c0      	nop			; (mov r8, r8)
200017c8:	1fffff80 	svcne	0x00ffff80
200017cc:	e000ed00 	and	lr, r0, r0, lsl #26

200017d0 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
200017d0:	b580      	push	{r7, lr}
200017d2:	b082      	sub	sp, #8
200017d4:	af00      	add	r7, sp, #0
200017d6:	0002      	movs	r2, r0
200017d8:	1dfb      	adds	r3, r7, #7
200017da:	701a      	strb	r2, [r3, #0]
200017dc:	1dbb      	adds	r3, r7, #6
200017de:	1c0a      	adds	r2, r1, #0
200017e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
200017e2:	1dbb      	adds	r3, r7, #6
200017e4:	781b      	ldrb	r3, [r3, #0]
200017e6:	2b00      	cmp	r3, #0
200017e8:	d007      	beq.n	200017fa <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
200017ea:	4b0a      	ldr	r3, [pc, #40]	; (20001814 <NVIC_SystemLPConfig+0x44>)
200017ec:	6919      	ldr	r1, [r3, #16]
200017ee:	1dfb      	adds	r3, r7, #7
200017f0:	781a      	ldrb	r2, [r3, #0]
200017f2:	4b08      	ldr	r3, [pc, #32]	; (20001814 <NVIC_SystemLPConfig+0x44>)
200017f4:	430a      	orrs	r2, r1
200017f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
200017f8:	e007      	b.n	2000180a <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
200017fa:	4b06      	ldr	r3, [pc, #24]	; (20001814 <NVIC_SystemLPConfig+0x44>)
200017fc:	691a      	ldr	r2, [r3, #16]
200017fe:	1dfb      	adds	r3, r7, #7
20001800:	781b      	ldrb	r3, [r3, #0]
20001802:	43d9      	mvns	r1, r3
20001804:	4b03      	ldr	r3, [pc, #12]	; (20001814 <NVIC_SystemLPConfig+0x44>)
20001806:	400a      	ands	r2, r1
20001808:	611a      	str	r2, [r3, #16]
}
2000180a:	46c0      	nop			; (mov r8, r8)
2000180c:	46bd      	mov	sp, r7
2000180e:	b002      	add	sp, #8
20001810:	bd80      	pop	{r7, pc}
20001812:	46c0      	nop			; (mov r8, r8)
20001814:	e000ed00 	and	lr, r0, r0, lsl #26

20001818 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
20001818:	b580      	push	{r7, lr}
2000181a:	b082      	sub	sp, #8
2000181c:	af00      	add	r7, sp, #0
2000181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
20001820:	687b      	ldr	r3, [r7, #4]
20001822:	2b04      	cmp	r3, #4
20001824:	d106      	bne.n	20001834 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
20001826:	4b08      	ldr	r3, [pc, #32]	; (20001848 <SysTick_CLKSourceConfig+0x30>)
20001828:	681a      	ldr	r2, [r3, #0]
2000182a:	4b07      	ldr	r3, [pc, #28]	; (20001848 <SysTick_CLKSourceConfig+0x30>)
2000182c:	2104      	movs	r1, #4
2000182e:	430a      	orrs	r2, r1
20001830:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
20001832:	e005      	b.n	20001840 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
20001834:	4b04      	ldr	r3, [pc, #16]	; (20001848 <SysTick_CLKSourceConfig+0x30>)
20001836:	681a      	ldr	r2, [r3, #0]
20001838:	4b03      	ldr	r3, [pc, #12]	; (20001848 <SysTick_CLKSourceConfig+0x30>)
2000183a:	2104      	movs	r1, #4
2000183c:	438a      	bics	r2, r1
2000183e:	601a      	str	r2, [r3, #0]
}
20001840:	46c0      	nop			; (mov r8, r8)
20001842:	46bd      	mov	sp, r7
20001844:	b002      	add	sp, #8
20001846:	bd80      	pop	{r7, pc}
20001848:	e000e010 	and	lr, r0, r0, lsl r0

2000184c <bufferInit>:
#include "buffer.h"

//Nollställer bufferten
void bufferInit(FIFO *buffer) {
2000184c:	b580      	push	{r7, lr}
2000184e:	b082      	sub	sp, #8
20001850:	af00      	add	r7, sp, #0
20001852:	6078      	str	r0, [r7, #4]
    buffer->count = 0;
20001854:	687b      	ldr	r3, [r7, #4]
20001856:	2264      	movs	r2, #100	; 0x64
20001858:	2100      	movs	r1, #0
2000185a:	5499      	strb	r1, [r3, r2]
    buffer->in = 0;
2000185c:	687b      	ldr	r3, [r7, #4]
2000185e:	2265      	movs	r2, #101	; 0x65
20001860:	2100      	movs	r1, #0
20001862:	5499      	strb	r1, [r3, r2]
    buffer->out = 0;
20001864:	687b      	ldr	r3, [r7, #4]
20001866:	2266      	movs	r2, #102	; 0x66
20001868:	2100      	movs	r1, #0
2000186a:	5499      	strb	r1, [r3, r2]
}
2000186c:	46c0      	nop			; (mov r8, r8)
2000186e:	46bd      	mov	sp, r7
20001870:	b002      	add	sp, #8
20001872:	bd80      	pop	{r7, pc}

20001874 <bufferPut>:

//Lägger till ett elem i buffern.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferPut ( FIFO *buffer, uint8_t elem) {
20001874:	b580      	push	{r7, lr}
20001876:	b082      	sub	sp, #8
20001878:	af00      	add	r7, sp, #0
2000187a:	6078      	str	r0, [r7, #4]
2000187c:	000a      	movs	r2, r1
2000187e:	1cfb      	adds	r3, r7, #3
20001880:	701a      	strb	r2, [r3, #0]
    //Kollar om bufferten är full.
    if (buffer->count == BUFFERSIZE){
20001882:	687b      	ldr	r3, [r7, #4]
20001884:	2264      	movs	r2, #100	; 0x64
20001886:	5c9b      	ldrb	r3, [r3, r2]
20001888:	2b64      	cmp	r3, #100	; 0x64
2000188a:	d101      	bne.n	20001890 <bufferPut+0x1c>
        return 0;
2000188c:	2300      	movs	r3, #0
2000188e:	e01e      	b.n	200018ce <bufferPut+0x5a>
    }

    //Lägger elem i bufferten
    buffer->buff[buffer->in++] = elem;
20001890:	687b      	ldr	r3, [r7, #4]
20001892:	2265      	movs	r2, #101	; 0x65
20001894:	5c9b      	ldrb	r3, [r3, r2]
20001896:	1c5a      	adds	r2, r3, #1
20001898:	b2d0      	uxtb	r0, r2
2000189a:	687a      	ldr	r2, [r7, #4]
2000189c:	2165      	movs	r1, #101	; 0x65
2000189e:	5450      	strb	r0, [r2, r1]
200018a0:	0019      	movs	r1, r3
200018a2:	687b      	ldr	r3, [r7, #4]
200018a4:	1cfa      	adds	r2, r7, #3
200018a6:	7812      	ldrb	r2, [r2, #0]
200018a8:	545a      	strb	r2, [r3, r1]
    buffer->count++;
200018aa:	687b      	ldr	r3, [r7, #4]
200018ac:	2264      	movs	r2, #100	; 0x64
200018ae:	5c9b      	ldrb	r3, [r3, r2]
200018b0:	3301      	adds	r3, #1
200018b2:	b2d9      	uxtb	r1, r3
200018b4:	687b      	ldr	r3, [r7, #4]
200018b6:	2264      	movs	r2, #100	; 0x64
200018b8:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->in == BUFFERSIZE)
200018ba:	687b      	ldr	r3, [r7, #4]
200018bc:	2265      	movs	r2, #101	; 0x65
200018be:	5c9b      	ldrb	r3, [r3, r2]
200018c0:	2b64      	cmp	r3, #100	; 0x64
200018c2:	d103      	bne.n	200018cc <bufferPut+0x58>
        buffer->in = 0;
200018c4:	687b      	ldr	r3, [r7, #4]
200018c6:	2265      	movs	r2, #101	; 0x65
200018c8:	2100      	movs	r1, #0
200018ca:	5499      	strb	r1, [r3, r2]

    return 1;
200018cc:	2301      	movs	r3, #1
}
200018ce:	0018      	movs	r0, r3
200018d0:	46bd      	mov	sp, r7
200018d2:	b002      	add	sp, #8
200018d4:	bd80      	pop	{r7, pc}

200018d6 <bufferGet>:

//Hämtar ett element från buffern till dest.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferGet ( FIFO *buffer, uint8_t *dest) {
200018d6:	b580      	push	{r7, lr}
200018d8:	b082      	sub	sp, #8
200018da:	af00      	add	r7, sp, #0
200018dc:	6078      	str	r0, [r7, #4]
200018de:	6039      	str	r1, [r7, #0]
    //Kollar om bufferten är tom
    if (!buffer->count){
200018e0:	687b      	ldr	r3, [r7, #4]
200018e2:	2264      	movs	r2, #100	; 0x64
200018e4:	5c9b      	ldrb	r3, [r3, r2]
200018e6:	2b00      	cmp	r3, #0
200018e8:	d101      	bne.n	200018ee <bufferGet+0x18>
        return 0;
200018ea:	2300      	movs	r3, #0
200018ec:	e01e      	b.n	2000192c <bufferGet+0x56>
    }

    //Hämtar element ur buffern till dest
    *dest = buffer->buff[buffer->out++];
200018ee:	687b      	ldr	r3, [r7, #4]
200018f0:	2266      	movs	r2, #102	; 0x66
200018f2:	5c9b      	ldrb	r3, [r3, r2]
200018f4:	1c5a      	adds	r2, r3, #1
200018f6:	b2d0      	uxtb	r0, r2
200018f8:	687a      	ldr	r2, [r7, #4]
200018fa:	2166      	movs	r1, #102	; 0x66
200018fc:	5450      	strb	r0, [r2, r1]
200018fe:	001a      	movs	r2, r3
20001900:	687b      	ldr	r3, [r7, #4]
20001902:	5c9a      	ldrb	r2, [r3, r2]
20001904:	683b      	ldr	r3, [r7, #0]
20001906:	701a      	strb	r2, [r3, #0]
    buffer->count--;
20001908:	687b      	ldr	r3, [r7, #4]
2000190a:	2264      	movs	r2, #100	; 0x64
2000190c:	5c9b      	ldrb	r3, [r3, r2]
2000190e:	3b01      	subs	r3, #1
20001910:	b2d9      	uxtb	r1, r3
20001912:	687b      	ldr	r3, [r7, #4]
20001914:	2264      	movs	r2, #100	; 0x64
20001916:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->out == BUFFERSIZE)
20001918:	687b      	ldr	r3, [r7, #4]
2000191a:	2266      	movs	r2, #102	; 0x66
2000191c:	5c9b      	ldrb	r3, [r3, r2]
2000191e:	2b64      	cmp	r3, #100	; 0x64
20001920:	d103      	bne.n	2000192a <bufferGet+0x54>
        buffer->out = 0;
20001922:	687b      	ldr	r3, [r7, #4]
20001924:	2266      	movs	r2, #102	; 0x66
20001926:	2100      	movs	r1, #0
20001928:	5499      	strb	r1, [r3, r2]

    return 1;
2000192a:	2301      	movs	r3, #1
2000192c:	0018      	movs	r0, r3
2000192e:	46bd      	mov	sp, r7
20001930:	b002      	add	sp, #8
20001932:	bd80      	pop	{r7, pc}

20001934 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
20001934:	b580      	push	{r7, lr}
20001936:	b082      	sub	sp, #8
20001938:	af00      	add	r7, sp, #0
2000193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
2000193c:	687b      	ldr	r3, [r7, #4]
2000193e:	4a41      	ldr	r2, [pc, #260]	; (20001a44 <USART_DeInit+0x110>)
20001940:	4293      	cmp	r3, r2
20001942:	d108      	bne.n	20001956 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
20001944:	2101      	movs	r1, #1
20001946:	2010      	movs	r0, #16
20001948:	f7ff f8a6 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
2000194c:	2100      	movs	r1, #0
2000194e:	2010      	movs	r0, #16
20001950:	f7ff f8a2 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
20001954:	e071      	b.n	20001a3a <USART_DeInit+0x106>
  else if (USARTx == USART2)
20001956:	687b      	ldr	r3, [r7, #4]
20001958:	4a3b      	ldr	r2, [pc, #236]	; (20001a48 <USART_DeInit+0x114>)
2000195a:	4293      	cmp	r3, r2
2000195c:	d10c      	bne.n	20001978 <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
2000195e:	2380      	movs	r3, #128	; 0x80
20001960:	029b      	lsls	r3, r3, #10
20001962:	2101      	movs	r1, #1
20001964:	0018      	movs	r0, r3
20001966:	f7ff f877 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
2000196a:	2380      	movs	r3, #128	; 0x80
2000196c:	029b      	lsls	r3, r3, #10
2000196e:	2100      	movs	r1, #0
20001970:	0018      	movs	r0, r3
20001972:	f7ff f871 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001976:	e060      	b.n	20001a3a <USART_DeInit+0x106>
  else if (USARTx == USART3)
20001978:	687b      	ldr	r3, [r7, #4]
2000197a:	4a34      	ldr	r2, [pc, #208]	; (20001a4c <USART_DeInit+0x118>)
2000197c:	4293      	cmp	r3, r2
2000197e:	d10c      	bne.n	2000199a <USART_DeInit+0x66>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
20001980:	2380      	movs	r3, #128	; 0x80
20001982:	02db      	lsls	r3, r3, #11
20001984:	2101      	movs	r1, #1
20001986:	0018      	movs	r0, r3
20001988:	f7ff f866 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
2000198c:	2380      	movs	r3, #128	; 0x80
2000198e:	02db      	lsls	r3, r3, #11
20001990:	2100      	movs	r1, #0
20001992:	0018      	movs	r0, r3
20001994:	f7ff f860 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001998:	e04f      	b.n	20001a3a <USART_DeInit+0x106>
  else if (USARTx == UART4)
2000199a:	687b      	ldr	r3, [r7, #4]
2000199c:	4a2c      	ldr	r2, [pc, #176]	; (20001a50 <USART_DeInit+0x11c>)
2000199e:	4293      	cmp	r3, r2
200019a0:	d10c      	bne.n	200019bc <USART_DeInit+0x88>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
200019a2:	2380      	movs	r3, #128	; 0x80
200019a4:	031b      	lsls	r3, r3, #12
200019a6:	2101      	movs	r1, #1
200019a8:	0018      	movs	r0, r3
200019aa:	f7ff f855 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
200019ae:	2380      	movs	r3, #128	; 0x80
200019b0:	031b      	lsls	r3, r3, #12
200019b2:	2100      	movs	r1, #0
200019b4:	0018      	movs	r0, r3
200019b6:	f7ff f84f 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
200019ba:	e03e      	b.n	20001a3a <USART_DeInit+0x106>
  else if (USARTx == UART5)
200019bc:	687b      	ldr	r3, [r7, #4]
200019be:	4a25      	ldr	r2, [pc, #148]	; (20001a54 <USART_DeInit+0x120>)
200019c0:	4293      	cmp	r3, r2
200019c2:	d10c      	bne.n	200019de <USART_DeInit+0xaa>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
200019c4:	2380      	movs	r3, #128	; 0x80
200019c6:	035b      	lsls	r3, r3, #13
200019c8:	2101      	movs	r1, #1
200019ca:	0018      	movs	r0, r3
200019cc:	f7ff f844 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
200019d0:	2380      	movs	r3, #128	; 0x80
200019d2:	035b      	lsls	r3, r3, #13
200019d4:	2100      	movs	r1, #0
200019d6:	0018      	movs	r0, r3
200019d8:	f7ff f83e 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
200019dc:	e02d      	b.n	20001a3a <USART_DeInit+0x106>
  else if (USARTx == USART6)
200019de:	687b      	ldr	r3, [r7, #4]
200019e0:	4a1d      	ldr	r2, [pc, #116]	; (20001a58 <USART_DeInit+0x124>)
200019e2:	4293      	cmp	r3, r2
200019e4:	d108      	bne.n	200019f8 <USART_DeInit+0xc4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
200019e6:	2101      	movs	r1, #1
200019e8:	2020      	movs	r0, #32
200019ea:	f7ff f855 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
200019ee:	2100      	movs	r1, #0
200019f0:	2020      	movs	r0, #32
200019f2:	f7ff f851 	bl	20000a98 <RCC_APB2PeriphResetCmd>
}
200019f6:	e020      	b.n	20001a3a <USART_DeInit+0x106>
  else if (USARTx == UART7)
200019f8:	687b      	ldr	r3, [r7, #4]
200019fa:	4a18      	ldr	r2, [pc, #96]	; (20001a5c <USART_DeInit+0x128>)
200019fc:	4293      	cmp	r3, r2
200019fe:	d10c      	bne.n	20001a1a <USART_DeInit+0xe6>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
20001a00:	2380      	movs	r3, #128	; 0x80
20001a02:	05db      	lsls	r3, r3, #23
20001a04:	2101      	movs	r1, #1
20001a06:	0018      	movs	r0, r3
20001a08:	f7ff f826 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
20001a0c:	2380      	movs	r3, #128	; 0x80
20001a0e:	05db      	lsls	r3, r3, #23
20001a10:	2100      	movs	r1, #0
20001a12:	0018      	movs	r0, r3
20001a14:	f7ff f820 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001a18:	e00f      	b.n	20001a3a <USART_DeInit+0x106>
    if (USARTx == UART8)
20001a1a:	687b      	ldr	r3, [r7, #4]
20001a1c:	4a10      	ldr	r2, [pc, #64]	; (20001a60 <USART_DeInit+0x12c>)
20001a1e:	4293      	cmp	r3, r2
20001a20:	d10b      	bne.n	20001a3a <USART_DeInit+0x106>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
20001a22:	2380      	movs	r3, #128	; 0x80
20001a24:	061b      	lsls	r3, r3, #24
20001a26:	2101      	movs	r1, #1
20001a28:	0018      	movs	r0, r3
20001a2a:	f7ff f815 	bl	20000a58 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
20001a2e:	2380      	movs	r3, #128	; 0x80
20001a30:	061b      	lsls	r3, r3, #24
20001a32:	2100      	movs	r1, #0
20001a34:	0018      	movs	r0, r3
20001a36:	f7ff f80f 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001a3a:	46c0      	nop			; (mov r8, r8)
20001a3c:	46bd      	mov	sp, r7
20001a3e:	b002      	add	sp, #8
20001a40:	bd80      	pop	{r7, pc}
20001a42:	46c0      	nop			; (mov r8, r8)
20001a44:	40011000 	andmi	r1, r1, r0
20001a48:	40004400 	andmi	r4, r0, r0, lsl #8
20001a4c:	40004800 	andmi	r4, r0, r0, lsl #16
20001a50:	40004c00 	andmi	r4, r0, r0, lsl #24
20001a54:	40005000 	andmi	r5, r0, r0
20001a58:	40011400 	andmi	r1, r1, r0, lsl #8
20001a5c:	40007800 	andmi	r7, r0, r0, lsl #16
20001a60:	40007c00 	andmi	r7, r0, r0, lsl #24

20001a64 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
20001a64:	b580      	push	{r7, lr}
20001a66:	b08a      	sub	sp, #40	; 0x28
20001a68:	af00      	add	r7, sp, #0
20001a6a:	6078      	str	r0, [r7, #4]
20001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
20001a6e:	2300      	movs	r3, #0
20001a70:	627b      	str	r3, [r7, #36]	; 0x24
20001a72:	2300      	movs	r3, #0
20001a74:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
20001a76:	2300      	movs	r3, #0
20001a78:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
20001a7a:	2300      	movs	r3, #0
20001a7c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
20001a7e:	687b      	ldr	r3, [r7, #4]
20001a80:	8a1b      	ldrh	r3, [r3, #16]
20001a82:	b29b      	uxth	r3, r3
20001a84:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
20001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a88:	4a56      	ldr	r2, [pc, #344]	; (20001be4 <USART_Init+0x180>)
20001a8a:	4013      	ands	r3, r2
20001a8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
20001a8e:	683b      	ldr	r3, [r7, #0]
20001a90:	88db      	ldrh	r3, [r3, #6]
20001a92:	001a      	movs	r2, r3
20001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a96:	4313      	orrs	r3, r2
20001a98:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
20001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a9c:	b29a      	uxth	r2, r3
20001a9e:	687b      	ldr	r3, [r7, #4]
20001aa0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
20001aa2:	687b      	ldr	r3, [r7, #4]
20001aa4:	899b      	ldrh	r3, [r3, #12]
20001aa6:	b29b      	uxth	r3, r3
20001aa8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
20001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001aac:	4a4e      	ldr	r2, [pc, #312]	; (20001be8 <USART_Init+0x184>)
20001aae:	4013      	ands	r3, r2
20001ab0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
20001ab2:	683b      	ldr	r3, [r7, #0]
20001ab4:	889a      	ldrh	r2, [r3, #4]
20001ab6:	683b      	ldr	r3, [r7, #0]
20001ab8:	891b      	ldrh	r3, [r3, #8]
20001aba:	4313      	orrs	r3, r2
20001abc:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
20001abe:	683b      	ldr	r3, [r7, #0]
20001ac0:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
20001ac2:	4313      	orrs	r3, r2
20001ac4:	b29b      	uxth	r3, r3
20001ac6:	001a      	movs	r2, r3
20001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001aca:	4313      	orrs	r3, r2
20001acc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
20001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ad0:	b29a      	uxth	r2, r3
20001ad2:	687b      	ldr	r3, [r7, #4]
20001ad4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
20001ad6:	687b      	ldr	r3, [r7, #4]
20001ad8:	8a9b      	ldrh	r3, [r3, #20]
20001ada:	b29b      	uxth	r3, r3
20001adc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
20001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ae0:	4a42      	ldr	r2, [pc, #264]	; (20001bec <USART_Init+0x188>)
20001ae2:	4013      	ands	r3, r2
20001ae4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
20001ae6:	683b      	ldr	r3, [r7, #0]
20001ae8:	899b      	ldrh	r3, [r3, #12]
20001aea:	001a      	movs	r2, r3
20001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001aee:	4313      	orrs	r3, r2
20001af0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
20001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001af4:	b29a      	uxth	r2, r3
20001af6:	687b      	ldr	r3, [r7, #4]
20001af8:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
20001afa:	2308      	movs	r3, #8
20001afc:	18fb      	adds	r3, r7, r3
20001afe:	0018      	movs	r0, r3
20001b00:	f7fe fcfa 	bl	200004f8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
20001b04:	687b      	ldr	r3, [r7, #4]
20001b06:	4a3a      	ldr	r2, [pc, #232]	; (20001bf0 <USART_Init+0x18c>)
20001b08:	4293      	cmp	r3, r2
20001b0a:	d003      	beq.n	20001b14 <USART_Init+0xb0>
20001b0c:	687b      	ldr	r3, [r7, #4]
20001b0e:	4a39      	ldr	r2, [pc, #228]	; (20001bf4 <USART_Init+0x190>)
20001b10:	4293      	cmp	r3, r2
20001b12:	d104      	bne.n	20001b1e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
20001b14:	2308      	movs	r3, #8
20001b16:	18fb      	adds	r3, r7, r3
20001b18:	68db      	ldr	r3, [r3, #12]
20001b1a:	623b      	str	r3, [r7, #32]
20001b1c:	e003      	b.n	20001b26 <USART_Init+0xc2>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
20001b1e:	2308      	movs	r3, #8
20001b20:	18fb      	adds	r3, r7, r3
20001b22:	689b      	ldr	r3, [r3, #8]
20001b24:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
20001b26:	687b      	ldr	r3, [r7, #4]
20001b28:	899b      	ldrh	r3, [r3, #12]
20001b2a:	b29b      	uxth	r3, r3
20001b2c:	b21b      	sxth	r3, r3
20001b2e:	2b00      	cmp	r3, #0
20001b30:	da0f      	bge.n	20001b52 <USART_Init+0xee>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
20001b32:	6a3a      	ldr	r2, [r7, #32]
20001b34:	0013      	movs	r3, r2
20001b36:	009b      	lsls	r3, r3, #2
20001b38:	189b      	adds	r3, r3, r2
20001b3a:	009a      	lsls	r2, r3, #2
20001b3c:	189a      	adds	r2, r3, r2
20001b3e:	683b      	ldr	r3, [r7, #0]
20001b40:	681b      	ldr	r3, [r3, #0]
20001b42:	005b      	lsls	r3, r3, #1
20001b44:	0019      	movs	r1, r3
20001b46:	0010      	movs	r0, r2
20001b48:	f000 fd94 	bl	20002674 <__udivsi3>
20001b4c:	0003      	movs	r3, r0
20001b4e:	61fb      	str	r3, [r7, #28]
20001b50:	e00e      	b.n	20001b70 <USART_Init+0x10c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
20001b52:	6a3a      	ldr	r2, [r7, #32]
20001b54:	0013      	movs	r3, r2
20001b56:	009b      	lsls	r3, r3, #2
20001b58:	189b      	adds	r3, r3, r2
20001b5a:	009a      	lsls	r2, r3, #2
20001b5c:	189a      	adds	r2, r3, r2
20001b5e:	683b      	ldr	r3, [r7, #0]
20001b60:	681b      	ldr	r3, [r3, #0]
20001b62:	009b      	lsls	r3, r3, #2
20001b64:	0019      	movs	r1, r3
20001b66:	0010      	movs	r0, r2
20001b68:	f000 fd84 	bl	20002674 <__udivsi3>
20001b6c:	0003      	movs	r3, r0
20001b6e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
20001b70:	69fb      	ldr	r3, [r7, #28]
20001b72:	2164      	movs	r1, #100	; 0x64
20001b74:	0018      	movs	r0, r3
20001b76:	f000 fd7d 	bl	20002674 <__udivsi3>
20001b7a:	0003      	movs	r3, r0
20001b7c:	011b      	lsls	r3, r3, #4
20001b7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
20001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b82:	091b      	lsrs	r3, r3, #4
20001b84:	2264      	movs	r2, #100	; 0x64
20001b86:	4353      	muls	r3, r2
20001b88:	69fa      	ldr	r2, [r7, #28]
20001b8a:	1ad3      	subs	r3, r2, r3
20001b8c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
20001b8e:	687b      	ldr	r3, [r7, #4]
20001b90:	899b      	ldrh	r3, [r3, #12]
20001b92:	b29b      	uxth	r3, r3
20001b94:	b21b      	sxth	r3, r3
20001b96:	2b00      	cmp	r3, #0
20001b98:	da0e      	bge.n	20001bb8 <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
20001b9a:	69bb      	ldr	r3, [r7, #24]
20001b9c:	00db      	lsls	r3, r3, #3
20001b9e:	3332      	adds	r3, #50	; 0x32
20001ba0:	2164      	movs	r1, #100	; 0x64
20001ba2:	0018      	movs	r0, r3
20001ba4:	f000 fd66 	bl	20002674 <__udivsi3>
20001ba8:	0003      	movs	r3, r0
20001baa:	001a      	movs	r2, r3
20001bac:	2307      	movs	r3, #7
20001bae:	4013      	ands	r3, r2
20001bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001bb2:	4313      	orrs	r3, r2
20001bb4:	627b      	str	r3, [r7, #36]	; 0x24
20001bb6:	e00d      	b.n	20001bd4 <USART_Init+0x170>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
20001bb8:	69bb      	ldr	r3, [r7, #24]
20001bba:	011b      	lsls	r3, r3, #4
20001bbc:	3332      	adds	r3, #50	; 0x32
20001bbe:	2164      	movs	r1, #100	; 0x64
20001bc0:	0018      	movs	r0, r3
20001bc2:	f000 fd57 	bl	20002674 <__udivsi3>
20001bc6:	0003      	movs	r3, r0
20001bc8:	001a      	movs	r2, r3
20001bca:	230f      	movs	r3, #15
20001bcc:	4013      	ands	r3, r2
20001bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001bd0:	4313      	orrs	r3, r2
20001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
20001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bd6:	b29a      	uxth	r2, r3
20001bd8:	687b      	ldr	r3, [r7, #4]
20001bda:	811a      	strh	r2, [r3, #8]
}
20001bdc:	46c0      	nop			; (mov r8, r8)
20001bde:	46bd      	mov	sp, r7
20001be0:	b00a      	add	sp, #40	; 0x28
20001be2:	bd80      	pop	{r7, pc}
20001be4:	ffffcfff 			; <UNDEFINED> instruction: 0xffffcfff
20001be8:	ffffe9f3 			; <UNDEFINED> instruction: 0xffffe9f3
20001bec:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
20001bf0:	40011000 	andmi	r1, r1, r0
20001bf4:	40011400 	andmi	r1, r1, r0, lsl #8

20001bf8 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
20001bf8:	b580      	push	{r7, lr}
20001bfa:	b082      	sub	sp, #8
20001bfc:	af00      	add	r7, sp, #0
20001bfe:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
20001c00:	687b      	ldr	r3, [r7, #4]
20001c02:	2296      	movs	r2, #150	; 0x96
20001c04:	0192      	lsls	r2, r2, #6
20001c06:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
20001c08:	687b      	ldr	r3, [r7, #4]
20001c0a:	2200      	movs	r2, #0
20001c0c:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
20001c0e:	687b      	ldr	r3, [r7, #4]
20001c10:	2200      	movs	r2, #0
20001c12:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
20001c14:	687b      	ldr	r3, [r7, #4]
20001c16:	2200      	movs	r2, #0
20001c18:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
20001c1a:	687b      	ldr	r3, [r7, #4]
20001c1c:	220c      	movs	r2, #12
20001c1e:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
20001c20:	687b      	ldr	r3, [r7, #4]
20001c22:	2200      	movs	r2, #0
20001c24:	819a      	strh	r2, [r3, #12]
}
20001c26:	46c0      	nop			; (mov r8, r8)
20001c28:	46bd      	mov	sp, r7
20001c2a:	b002      	add	sp, #8
20001c2c:	bd80      	pop	{r7, pc}

20001c2e <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20001c2e:	b580      	push	{r7, lr}
20001c30:	b084      	sub	sp, #16
20001c32:	af00      	add	r7, sp, #0
20001c34:	6078      	str	r0, [r7, #4]
20001c36:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
20001c38:	2300      	movs	r3, #0
20001c3a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
20001c3c:	687b      	ldr	r3, [r7, #4]
20001c3e:	8a1b      	ldrh	r3, [r3, #16]
20001c40:	b29b      	uxth	r3, r3
20001c42:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
20001c44:	68fb      	ldr	r3, [r7, #12]
20001c46:	4a0e      	ldr	r2, [pc, #56]	; (20001c80 <USART_ClockInit+0x52>)
20001c48:	4013      	ands	r3, r2
20001c4a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20001c4c:	683b      	ldr	r3, [r7, #0]
20001c4e:	881a      	ldrh	r2, [r3, #0]
20001c50:	683b      	ldr	r3, [r7, #0]
20001c52:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
20001c54:	4313      	orrs	r3, r2
20001c56:	b29a      	uxth	r2, r3
20001c58:	683b      	ldr	r3, [r7, #0]
20001c5a:	889b      	ldrh	r3, [r3, #4]
20001c5c:	4313      	orrs	r3, r2
20001c5e:	b29a      	uxth	r2, r3
20001c60:	683b      	ldr	r3, [r7, #0]
20001c62:	88db      	ldrh	r3, [r3, #6]
20001c64:	4313      	orrs	r3, r2
20001c66:	b29b      	uxth	r3, r3
20001c68:	001a      	movs	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20001c6a:	68fb      	ldr	r3, [r7, #12]
20001c6c:	4313      	orrs	r3, r2
20001c6e:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
20001c70:	68fb      	ldr	r3, [r7, #12]
20001c72:	b29a      	uxth	r2, r3
20001c74:	687b      	ldr	r3, [r7, #4]
20001c76:	821a      	strh	r2, [r3, #16]
}
20001c78:	46c0      	nop			; (mov r8, r8)
20001c7a:	46bd      	mov	sp, r7
20001c7c:	b004      	add	sp, #16
20001c7e:	bd80      	pop	{r7, pc}
20001c80:	fffff0ff 			; <UNDEFINED> instruction: 0xfffff0ff

20001c84 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20001c84:	b580      	push	{r7, lr}
20001c86:	b082      	sub	sp, #8
20001c88:	af00      	add	r7, sp, #0
20001c8a:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
20001c8c:	687b      	ldr	r3, [r7, #4]
20001c8e:	2200      	movs	r2, #0
20001c90:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
20001c92:	687b      	ldr	r3, [r7, #4]
20001c94:	2200      	movs	r2, #0
20001c96:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
20001c98:	687b      	ldr	r3, [r7, #4]
20001c9a:	2200      	movs	r2, #0
20001c9c:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
20001c9e:	687b      	ldr	r3, [r7, #4]
20001ca0:	2200      	movs	r2, #0
20001ca2:	80da      	strh	r2, [r3, #6]
}
20001ca4:	46c0      	nop			; (mov r8, r8)
20001ca6:	46bd      	mov	sp, r7
20001ca8:	b002      	add	sp, #8
20001caa:	bd80      	pop	{r7, pc}

20001cac <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001cac:	b580      	push	{r7, lr}
20001cae:	b082      	sub	sp, #8
20001cb0:	af00      	add	r7, sp, #0
20001cb2:	6078      	str	r0, [r7, #4]
20001cb4:	000a      	movs	r2, r1
20001cb6:	1cfb      	adds	r3, r7, #3
20001cb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001cba:	1cfb      	adds	r3, r7, #3
20001cbc:	781b      	ldrb	r3, [r3, #0]
20001cbe:	2b00      	cmp	r3, #0
20001cc0:	d009      	beq.n	20001cd6 <USART_Cmd+0x2a>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
20001cc2:	687b      	ldr	r3, [r7, #4]
20001cc4:	899b      	ldrh	r3, [r3, #12]
20001cc6:	b29b      	uxth	r3, r3
20001cc8:	2280      	movs	r2, #128	; 0x80
20001cca:	0192      	lsls	r2, r2, #6
20001ccc:	4313      	orrs	r3, r2
20001cce:	b29a      	uxth	r2, r3
20001cd0:	687b      	ldr	r3, [r7, #4]
20001cd2:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
20001cd4:	e007      	b.n	20001ce6 <USART_Cmd+0x3a>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
20001cd6:	687b      	ldr	r3, [r7, #4]
20001cd8:	899b      	ldrh	r3, [r3, #12]
20001cda:	b29b      	uxth	r3, r3
20001cdc:	4a04      	ldr	r2, [pc, #16]	; (20001cf0 <USART_Cmd+0x44>)
20001cde:	4013      	ands	r3, r2
20001ce0:	b29a      	uxth	r2, r3
20001ce2:	687b      	ldr	r3, [r7, #4]
20001ce4:	819a      	strh	r2, [r3, #12]
}
20001ce6:	46c0      	nop			; (mov r8, r8)
20001ce8:	46bd      	mov	sp, r7
20001cea:	b002      	add	sp, #8
20001cec:	bd80      	pop	{r7, pc}
20001cee:	46c0      	nop			; (mov r8, r8)
20001cf0:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

20001cf4 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
20001cf4:	b580      	push	{r7, lr}
20001cf6:	b082      	sub	sp, #8
20001cf8:	af00      	add	r7, sp, #0
20001cfa:	6078      	str	r0, [r7, #4]
20001cfc:	000a      	movs	r2, r1
20001cfe:	1cfb      	adds	r3, r7, #3
20001d00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
20001d02:	687b      	ldr	r3, [r7, #4]
20001d04:	8b1b      	ldrh	r3, [r3, #24]
20001d06:	b29b      	uxth	r3, r3
20001d08:	22ff      	movs	r2, #255	; 0xff
20001d0a:	4393      	bics	r3, r2
20001d0c:	b29a      	uxth	r2, r3
20001d0e:	687b      	ldr	r3, [r7, #4]
20001d10:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
20001d12:	687b      	ldr	r3, [r7, #4]
20001d14:	8b1b      	ldrh	r3, [r3, #24]
20001d16:	b29a      	uxth	r2, r3
20001d18:	1cfb      	adds	r3, r7, #3
20001d1a:	781b      	ldrb	r3, [r3, #0]
20001d1c:	b29b      	uxth	r3, r3
20001d1e:	4313      	orrs	r3, r2
20001d20:	b29a      	uxth	r2, r3
20001d22:	687b      	ldr	r3, [r7, #4]
20001d24:	831a      	strh	r2, [r3, #24]
}
20001d26:	46c0      	nop			; (mov r8, r8)
20001d28:	46bd      	mov	sp, r7
20001d2a:	b002      	add	sp, #8
20001d2c:	bd80      	pop	{r7, pc}

20001d2e <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001d2e:	b580      	push	{r7, lr}
20001d30:	b082      	sub	sp, #8
20001d32:	af00      	add	r7, sp, #0
20001d34:	6078      	str	r0, [r7, #4]
20001d36:	000a      	movs	r2, r1
20001d38:	1cfb      	adds	r3, r7, #3
20001d3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001d3c:	1cfb      	adds	r3, r7, #3
20001d3e:	781b      	ldrb	r3, [r3, #0]
20001d40:	2b00      	cmp	r3, #0
20001d42:	d008      	beq.n	20001d56 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
20001d44:	687b      	ldr	r3, [r7, #4]
20001d46:	899b      	ldrh	r3, [r3, #12]
20001d48:	b29b      	uxth	r3, r3
20001d4a:	4a09      	ldr	r2, [pc, #36]	; (20001d70 <USART_OverSampling8Cmd+0x42>)
20001d4c:	4313      	orrs	r3, r2
20001d4e:	b29a      	uxth	r2, r3
20001d50:	687b      	ldr	r3, [r7, #4]
20001d52:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
20001d54:	e007      	b.n	20001d66 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
20001d56:	687b      	ldr	r3, [r7, #4]
20001d58:	899b      	ldrh	r3, [r3, #12]
20001d5a:	b29b      	uxth	r3, r3
20001d5c:	045b      	lsls	r3, r3, #17
20001d5e:	0c5b      	lsrs	r3, r3, #17
20001d60:	b29a      	uxth	r2, r3
20001d62:	687b      	ldr	r3, [r7, #4]
20001d64:	819a      	strh	r2, [r3, #12]
}  
20001d66:	46c0      	nop			; (mov r8, r8)
20001d68:	46bd      	mov	sp, r7
20001d6a:	b002      	add	sp, #8
20001d6c:	bd80      	pop	{r7, pc}
20001d6e:	46c0      	nop			; (mov r8, r8)
20001d70:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000

20001d74 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001d74:	b580      	push	{r7, lr}
20001d76:	b082      	sub	sp, #8
20001d78:	af00      	add	r7, sp, #0
20001d7a:	6078      	str	r0, [r7, #4]
20001d7c:	000a      	movs	r2, r1
20001d7e:	1cfb      	adds	r3, r7, #3
20001d80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001d82:	1cfb      	adds	r3, r7, #3
20001d84:	781b      	ldrb	r3, [r3, #0]
20001d86:	2b00      	cmp	r3, #0
20001d88:	d009      	beq.n	20001d9e <USART_OneBitMethodCmd+0x2a>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
20001d8a:	687b      	ldr	r3, [r7, #4]
20001d8c:	8a9b      	ldrh	r3, [r3, #20]
20001d8e:	b29b      	uxth	r3, r3
20001d90:	2280      	movs	r2, #128	; 0x80
20001d92:	0112      	lsls	r2, r2, #4
20001d94:	4313      	orrs	r3, r2
20001d96:	b29a      	uxth	r2, r3
20001d98:	687b      	ldr	r3, [r7, #4]
20001d9a:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
  }
}
20001d9c:	e007      	b.n	20001dae <USART_OneBitMethodCmd+0x3a>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
20001d9e:	687b      	ldr	r3, [r7, #4]
20001da0:	8a9b      	ldrh	r3, [r3, #20]
20001da2:	b29b      	uxth	r3, r3
20001da4:	4a04      	ldr	r2, [pc, #16]	; (20001db8 <USART_OneBitMethodCmd+0x44>)
20001da6:	4013      	ands	r3, r2
20001da8:	b29a      	uxth	r2, r3
20001daa:	687b      	ldr	r3, [r7, #4]
20001dac:	829a      	strh	r2, [r3, #20]
}
20001dae:	46c0      	nop			; (mov r8, r8)
20001db0:	46bd      	mov	sp, r7
20001db2:	b002      	add	sp, #8
20001db4:	bd80      	pop	{r7, pc}
20001db6:	46c0      	nop			; (mov r8, r8)
20001db8:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20001dbc <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
20001dbc:	b580      	push	{r7, lr}
20001dbe:	b082      	sub	sp, #8
20001dc0:	af00      	add	r7, sp, #0
20001dc2:	6078      	str	r0, [r7, #4]
20001dc4:	000a      	movs	r2, r1
20001dc6:	1cbb      	adds	r3, r7, #2
20001dc8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
20001dca:	1cbb      	adds	r3, r7, #2
20001dcc:	881b      	ldrh	r3, [r3, #0]
20001dce:	05db      	lsls	r3, r3, #23
20001dd0:	0ddb      	lsrs	r3, r3, #23
20001dd2:	b29a      	uxth	r2, r3
20001dd4:	687b      	ldr	r3, [r7, #4]
20001dd6:	809a      	strh	r2, [r3, #4]
}
20001dd8:	46c0      	nop			; (mov r8, r8)
20001dda:	46bd      	mov	sp, r7
20001ddc:	b002      	add	sp, #8
20001dde:	bd80      	pop	{r7, pc}

20001de0 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
20001de0:	b580      	push	{r7, lr}
20001de2:	b082      	sub	sp, #8
20001de4:	af00      	add	r7, sp, #0
20001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
20001de8:	687b      	ldr	r3, [r7, #4]
20001dea:	889b      	ldrh	r3, [r3, #4]
20001dec:	b29b      	uxth	r3, r3
20001dee:	05db      	lsls	r3, r3, #23
20001df0:	0ddb      	lsrs	r3, r3, #23
20001df2:	b29b      	uxth	r3, r3
}
20001df4:	0018      	movs	r0, r3
20001df6:	46bd      	mov	sp, r7
20001df8:	b002      	add	sp, #8
20001dfa:	bd80      	pop	{r7, pc}

20001dfc <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
20001dfc:	b580      	push	{r7, lr}
20001dfe:	b082      	sub	sp, #8
20001e00:	af00      	add	r7, sp, #0
20001e02:	6078      	str	r0, [r7, #4]
20001e04:	000a      	movs	r2, r1
20001e06:	1cfb      	adds	r3, r7, #3
20001e08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
20001e0a:	687b      	ldr	r3, [r7, #4]
20001e0c:	8a1b      	ldrh	r3, [r3, #16]
20001e0e:	b29b      	uxth	r3, r3
20001e10:	220f      	movs	r2, #15
20001e12:	4393      	bics	r3, r2
20001e14:	b29a      	uxth	r2, r3
20001e16:	687b      	ldr	r3, [r7, #4]
20001e18:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
20001e1a:	687b      	ldr	r3, [r7, #4]
20001e1c:	8a1b      	ldrh	r3, [r3, #16]
20001e1e:	b29a      	uxth	r2, r3
20001e20:	1cfb      	adds	r3, r7, #3
20001e22:	781b      	ldrb	r3, [r3, #0]
20001e24:	b29b      	uxth	r3, r3
20001e26:	4313      	orrs	r3, r2
20001e28:	b29a      	uxth	r2, r3
20001e2a:	687b      	ldr	r3, [r7, #4]
20001e2c:	821a      	strh	r2, [r3, #16]
}
20001e2e:	46c0      	nop			; (mov r8, r8)
20001e30:	46bd      	mov	sp, r7
20001e32:	b002      	add	sp, #8
20001e34:	bd80      	pop	{r7, pc}

20001e36 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001e36:	b580      	push	{r7, lr}
20001e38:	b082      	sub	sp, #8
20001e3a:	af00      	add	r7, sp, #0
20001e3c:	6078      	str	r0, [r7, #4]
20001e3e:	000a      	movs	r2, r1
20001e40:	1cfb      	adds	r3, r7, #3
20001e42:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
20001e44:	1cfb      	adds	r3, r7, #3
20001e46:	781b      	ldrb	r3, [r3, #0]
20001e48:	2b00      	cmp	r3, #0
20001e4a:	d008      	beq.n	20001e5e <USART_ReceiverWakeUpCmd+0x28>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
20001e4c:	687b      	ldr	r3, [r7, #4]
20001e4e:	899b      	ldrh	r3, [r3, #12]
20001e50:	b29b      	uxth	r3, r3
20001e52:	2202      	movs	r2, #2
20001e54:	4313      	orrs	r3, r2
20001e56:	b29a      	uxth	r2, r3
20001e58:	687b      	ldr	r3, [r7, #4]
20001e5a:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
  }
}
20001e5c:	e007      	b.n	20001e6e <USART_ReceiverWakeUpCmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
20001e5e:	687b      	ldr	r3, [r7, #4]
20001e60:	899b      	ldrh	r3, [r3, #12]
20001e62:	b29b      	uxth	r3, r3
20001e64:	2202      	movs	r2, #2
20001e66:	4393      	bics	r3, r2
20001e68:	b29a      	uxth	r2, r3
20001e6a:	687b      	ldr	r3, [r7, #4]
20001e6c:	819a      	strh	r2, [r3, #12]
}
20001e6e:	46c0      	nop			; (mov r8, r8)
20001e70:	46bd      	mov	sp, r7
20001e72:	b002      	add	sp, #8
20001e74:	bd80      	pop	{r7, pc}

20001e76 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
20001e76:	b580      	push	{r7, lr}
20001e78:	b082      	sub	sp, #8
20001e7a:	af00      	add	r7, sp, #0
20001e7c:	6078      	str	r0, [r7, #4]
20001e7e:	000a      	movs	r2, r1
20001e80:	1cbb      	adds	r3, r7, #2
20001e82:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
20001e84:	687b      	ldr	r3, [r7, #4]
20001e86:	899b      	ldrh	r3, [r3, #12]
20001e88:	b29b      	uxth	r3, r3
20001e8a:	4a09      	ldr	r2, [pc, #36]	; (20001eb0 <USART_WakeUpConfig+0x3a>)
20001e8c:	4013      	ands	r3, r2
20001e8e:	b29a      	uxth	r2, r3
20001e90:	687b      	ldr	r3, [r7, #4]
20001e92:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
20001e94:	687b      	ldr	r3, [r7, #4]
20001e96:	899b      	ldrh	r3, [r3, #12]
20001e98:	b29a      	uxth	r2, r3
20001e9a:	1cbb      	adds	r3, r7, #2
20001e9c:	881b      	ldrh	r3, [r3, #0]
20001e9e:	4313      	orrs	r3, r2
20001ea0:	b29a      	uxth	r2, r3
20001ea2:	687b      	ldr	r3, [r7, #4]
20001ea4:	819a      	strh	r2, [r3, #12]
}
20001ea6:	46c0      	nop			; (mov r8, r8)
20001ea8:	46bd      	mov	sp, r7
20001eaa:	b002      	add	sp, #8
20001eac:	bd80      	pop	{r7, pc}
20001eae:	46c0      	nop			; (mov r8, r8)
20001eb0:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20001eb4 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
20001eb4:	b580      	push	{r7, lr}
20001eb6:	b082      	sub	sp, #8
20001eb8:	af00      	add	r7, sp, #0
20001eba:	6078      	str	r0, [r7, #4]
20001ebc:	000a      	movs	r2, r1
20001ebe:	1cbb      	adds	r3, r7, #2
20001ec0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
20001ec2:	687b      	ldr	r3, [r7, #4]
20001ec4:	8a1b      	ldrh	r3, [r3, #16]
20001ec6:	b29b      	uxth	r3, r3
20001ec8:	2220      	movs	r2, #32
20001eca:	4393      	bics	r3, r2
20001ecc:	b29a      	uxth	r2, r3
20001ece:	687b      	ldr	r3, [r7, #4]
20001ed0:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
20001ed2:	687b      	ldr	r3, [r7, #4]
20001ed4:	8a1b      	ldrh	r3, [r3, #16]
20001ed6:	b29a      	uxth	r2, r3
20001ed8:	1cbb      	adds	r3, r7, #2
20001eda:	881b      	ldrh	r3, [r3, #0]
20001edc:	4313      	orrs	r3, r2
20001ede:	b29a      	uxth	r2, r3
20001ee0:	687b      	ldr	r3, [r7, #4]
20001ee2:	821a      	strh	r2, [r3, #16]
}
20001ee4:	46c0      	nop			; (mov r8, r8)
20001ee6:	46bd      	mov	sp, r7
20001ee8:	b002      	add	sp, #8
20001eea:	bd80      	pop	{r7, pc}

20001eec <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001eec:	b580      	push	{r7, lr}
20001eee:	b082      	sub	sp, #8
20001ef0:	af00      	add	r7, sp, #0
20001ef2:	6078      	str	r0, [r7, #4]
20001ef4:	000a      	movs	r2, r1
20001ef6:	1cfb      	adds	r3, r7, #3
20001ef8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001efa:	1cfb      	adds	r3, r7, #3
20001efc:	781b      	ldrb	r3, [r3, #0]
20001efe:	2b00      	cmp	r3, #0
20001f00:	d009      	beq.n	20001f16 <USART_LINCmd+0x2a>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
20001f02:	687b      	ldr	r3, [r7, #4]
20001f04:	8a1b      	ldrh	r3, [r3, #16]
20001f06:	b29b      	uxth	r3, r3
20001f08:	2280      	movs	r2, #128	; 0x80
20001f0a:	01d2      	lsls	r2, r2, #7
20001f0c:	4313      	orrs	r3, r2
20001f0e:	b29a      	uxth	r2, r3
20001f10:	687b      	ldr	r3, [r7, #4]
20001f12:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
  }
}
20001f14:	e007      	b.n	20001f26 <USART_LINCmd+0x3a>
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
20001f16:	687b      	ldr	r3, [r7, #4]
20001f18:	8a1b      	ldrh	r3, [r3, #16]
20001f1a:	b29b      	uxth	r3, r3
20001f1c:	4a04      	ldr	r2, [pc, #16]	; (20001f30 <USART_LINCmd+0x44>)
20001f1e:	4013      	ands	r3, r2
20001f20:	b29a      	uxth	r2, r3
20001f22:	687b      	ldr	r3, [r7, #4]
20001f24:	821a      	strh	r2, [r3, #16]
}
20001f26:	46c0      	nop			; (mov r8, r8)
20001f28:	46bd      	mov	sp, r7
20001f2a:	b002      	add	sp, #8
20001f2c:	bd80      	pop	{r7, pc}
20001f2e:	46c0      	nop			; (mov r8, r8)
20001f30:	ffffbfff 			; <UNDEFINED> instruction: 0xffffbfff

20001f34 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
20001f34:	b580      	push	{r7, lr}
20001f36:	b082      	sub	sp, #8
20001f38:	af00      	add	r7, sp, #0
20001f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
20001f3c:	687b      	ldr	r3, [r7, #4]
20001f3e:	899b      	ldrh	r3, [r3, #12]
20001f40:	b29b      	uxth	r3, r3
20001f42:	2201      	movs	r2, #1
20001f44:	4313      	orrs	r3, r2
20001f46:	b29a      	uxth	r2, r3
20001f48:	687b      	ldr	r3, [r7, #4]
20001f4a:	819a      	strh	r2, [r3, #12]
}
20001f4c:	46c0      	nop			; (mov r8, r8)
20001f4e:	46bd      	mov	sp, r7
20001f50:	b002      	add	sp, #8
20001f52:	bd80      	pop	{r7, pc}

20001f54 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001f54:	b580      	push	{r7, lr}
20001f56:	b082      	sub	sp, #8
20001f58:	af00      	add	r7, sp, #0
20001f5a:	6078      	str	r0, [r7, #4]
20001f5c:	000a      	movs	r2, r1
20001f5e:	1cfb      	adds	r3, r7, #3
20001f60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001f62:	1cfb      	adds	r3, r7, #3
20001f64:	781b      	ldrb	r3, [r3, #0]
20001f66:	2b00      	cmp	r3, #0
20001f68:	d008      	beq.n	20001f7c <USART_HalfDuplexCmd+0x28>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
20001f6a:	687b      	ldr	r3, [r7, #4]
20001f6c:	8a9b      	ldrh	r3, [r3, #20]
20001f6e:	b29b      	uxth	r3, r3
20001f70:	2208      	movs	r2, #8
20001f72:	4313      	orrs	r3, r2
20001f74:	b29a      	uxth	r2, r3
20001f76:	687b      	ldr	r3, [r7, #4]
20001f78:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
20001f7a:	e007      	b.n	20001f8c <USART_HalfDuplexCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
20001f7c:	687b      	ldr	r3, [r7, #4]
20001f7e:	8a9b      	ldrh	r3, [r3, #20]
20001f80:	b29b      	uxth	r3, r3
20001f82:	2208      	movs	r2, #8
20001f84:	4393      	bics	r3, r2
20001f86:	b29a      	uxth	r2, r3
20001f88:	687b      	ldr	r3, [r7, #4]
20001f8a:	829a      	strh	r2, [r3, #20]
}
20001f8c:	46c0      	nop			; (mov r8, r8)
20001f8e:	46bd      	mov	sp, r7
20001f90:	b002      	add	sp, #8
20001f92:	bd80      	pop	{r7, pc}

20001f94 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
20001f94:	b580      	push	{r7, lr}
20001f96:	b082      	sub	sp, #8
20001f98:	af00      	add	r7, sp, #0
20001f9a:	6078      	str	r0, [r7, #4]
20001f9c:	000a      	movs	r2, r1
20001f9e:	1cfb      	adds	r3, r7, #3
20001fa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
20001fa2:	687b      	ldr	r3, [r7, #4]
20001fa4:	8b1b      	ldrh	r3, [r3, #24]
20001fa6:	b29b      	uxth	r3, r3
20001fa8:	22ff      	movs	r2, #255	; 0xff
20001faa:	4013      	ands	r3, r2
20001fac:	b29a      	uxth	r2, r3
20001fae:	687b      	ldr	r3, [r7, #4]
20001fb0:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
20001fb2:	687b      	ldr	r3, [r7, #4]
20001fb4:	8b1b      	ldrh	r3, [r3, #24]
20001fb6:	b29a      	uxth	r2, r3
20001fb8:	1cfb      	adds	r3, r7, #3
20001fba:	781b      	ldrb	r3, [r3, #0]
20001fbc:	b29b      	uxth	r3, r3
20001fbe:	021b      	lsls	r3, r3, #8
20001fc0:	b29b      	uxth	r3, r3
20001fc2:	4313      	orrs	r3, r2
20001fc4:	b29a      	uxth	r2, r3
20001fc6:	687b      	ldr	r3, [r7, #4]
20001fc8:	831a      	strh	r2, [r3, #24]
}
20001fca:	46c0      	nop			; (mov r8, r8)
20001fcc:	46bd      	mov	sp, r7
20001fce:	b002      	add	sp, #8
20001fd0:	bd80      	pop	{r7, pc}

20001fd2 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001fd2:	b580      	push	{r7, lr}
20001fd4:	b082      	sub	sp, #8
20001fd6:	af00      	add	r7, sp, #0
20001fd8:	6078      	str	r0, [r7, #4]
20001fda:	000a      	movs	r2, r1
20001fdc:	1cfb      	adds	r3, r7, #3
20001fde:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20001fe0:	1cfb      	adds	r3, r7, #3
20001fe2:	781b      	ldrb	r3, [r3, #0]
20001fe4:	2b00      	cmp	r3, #0
20001fe6:	d008      	beq.n	20001ffa <USART_SmartCardCmd+0x28>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
20001fe8:	687b      	ldr	r3, [r7, #4]
20001fea:	8a9b      	ldrh	r3, [r3, #20]
20001fec:	b29b      	uxth	r3, r3
20001fee:	2220      	movs	r2, #32
20001ff0:	4313      	orrs	r3, r2
20001ff2:	b29a      	uxth	r2, r3
20001ff4:	687b      	ldr	r3, [r7, #4]
20001ff6:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
  }
}
20001ff8:	e007      	b.n	2000200a <USART_SmartCardCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
20001ffa:	687b      	ldr	r3, [r7, #4]
20001ffc:	8a9b      	ldrh	r3, [r3, #20]
20001ffe:	b29b      	uxth	r3, r3
20002000:	2220      	movs	r2, #32
20002002:	4393      	bics	r3, r2
20002004:	b29a      	uxth	r2, r3
20002006:	687b      	ldr	r3, [r7, #4]
20002008:	829a      	strh	r2, [r3, #20]
}
2000200a:	46c0      	nop			; (mov r8, r8)
2000200c:	46bd      	mov	sp, r7
2000200e:	b002      	add	sp, #8
20002010:	bd80      	pop	{r7, pc}

20002012 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002012:	b580      	push	{r7, lr}
20002014:	b082      	sub	sp, #8
20002016:	af00      	add	r7, sp, #0
20002018:	6078      	str	r0, [r7, #4]
2000201a:	000a      	movs	r2, r1
2000201c:	1cfb      	adds	r3, r7, #3
2000201e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002020:	1cfb      	adds	r3, r7, #3
20002022:	781b      	ldrb	r3, [r3, #0]
20002024:	2b00      	cmp	r3, #0
20002026:	d008      	beq.n	2000203a <USART_SmartCardNACKCmd+0x28>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
20002028:	687b      	ldr	r3, [r7, #4]
2000202a:	8a9b      	ldrh	r3, [r3, #20]
2000202c:	b29b      	uxth	r3, r3
2000202e:	2210      	movs	r2, #16
20002030:	4313      	orrs	r3, r2
20002032:	b29a      	uxth	r2, r3
20002034:	687b      	ldr	r3, [r7, #4]
20002036:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
  }
}
20002038:	e007      	b.n	2000204a <USART_SmartCardNACKCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
2000203a:	687b      	ldr	r3, [r7, #4]
2000203c:	8a9b      	ldrh	r3, [r3, #20]
2000203e:	b29b      	uxth	r3, r3
20002040:	2210      	movs	r2, #16
20002042:	4393      	bics	r3, r2
20002044:	b29a      	uxth	r2, r3
20002046:	687b      	ldr	r3, [r7, #4]
20002048:	829a      	strh	r2, [r3, #20]
}
2000204a:	46c0      	nop			; (mov r8, r8)
2000204c:	46bd      	mov	sp, r7
2000204e:	b002      	add	sp, #8
20002050:	bd80      	pop	{r7, pc}

20002052 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
20002052:	b580      	push	{r7, lr}
20002054:	b082      	sub	sp, #8
20002056:	af00      	add	r7, sp, #0
20002058:	6078      	str	r0, [r7, #4]
2000205a:	000a      	movs	r2, r1
2000205c:	1cbb      	adds	r3, r7, #2
2000205e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
20002060:	687b      	ldr	r3, [r7, #4]
20002062:	8a9b      	ldrh	r3, [r3, #20]
20002064:	b29b      	uxth	r3, r3
20002066:	2204      	movs	r2, #4
20002068:	4393      	bics	r3, r2
2000206a:	b29a      	uxth	r2, r3
2000206c:	687b      	ldr	r3, [r7, #4]
2000206e:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
20002070:	687b      	ldr	r3, [r7, #4]
20002072:	8a9b      	ldrh	r3, [r3, #20]
20002074:	b29a      	uxth	r2, r3
20002076:	1cbb      	adds	r3, r7, #2
20002078:	881b      	ldrh	r3, [r3, #0]
2000207a:	4313      	orrs	r3, r2
2000207c:	b29a      	uxth	r2, r3
2000207e:	687b      	ldr	r3, [r7, #4]
20002080:	829a      	strh	r2, [r3, #20]
}
20002082:	46c0      	nop			; (mov r8, r8)
20002084:	46bd      	mov	sp, r7
20002086:	b002      	add	sp, #8
20002088:	bd80      	pop	{r7, pc}

2000208a <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
2000208a:	b580      	push	{r7, lr}
2000208c:	b082      	sub	sp, #8
2000208e:	af00      	add	r7, sp, #0
20002090:	6078      	str	r0, [r7, #4]
20002092:	000a      	movs	r2, r1
20002094:	1cfb      	adds	r3, r7, #3
20002096:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
20002098:	1cfb      	adds	r3, r7, #3
2000209a:	781b      	ldrb	r3, [r3, #0]
2000209c:	2b00      	cmp	r3, #0
2000209e:	d008      	beq.n	200020b2 <USART_IrDACmd+0x28>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
200020a0:	687b      	ldr	r3, [r7, #4]
200020a2:	8a9b      	ldrh	r3, [r3, #20]
200020a4:	b29b      	uxth	r3, r3
200020a6:	2202      	movs	r2, #2
200020a8:	4313      	orrs	r3, r2
200020aa:	b29a      	uxth	r2, r3
200020ac:	687b      	ldr	r3, [r7, #4]
200020ae:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
  }
}
200020b0:	e007      	b.n	200020c2 <USART_IrDACmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
200020b2:	687b      	ldr	r3, [r7, #4]
200020b4:	8a9b      	ldrh	r3, [r3, #20]
200020b6:	b29b      	uxth	r3, r3
200020b8:	2202      	movs	r2, #2
200020ba:	4393      	bics	r3, r2
200020bc:	b29a      	uxth	r2, r3
200020be:	687b      	ldr	r3, [r7, #4]
200020c0:	829a      	strh	r2, [r3, #20]
}
200020c2:	46c0      	nop			; (mov r8, r8)
200020c4:	46bd      	mov	sp, r7
200020c6:	b002      	add	sp, #8
200020c8:	bd80      	pop	{r7, pc}

200020ca <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
200020ca:	b580      	push	{r7, lr}
200020cc:	b082      	sub	sp, #8
200020ce:	af00      	add	r7, sp, #0
200020d0:	6078      	str	r0, [r7, #4]
200020d2:	0008      	movs	r0, r1
200020d4:	0011      	movs	r1, r2
200020d6:	1cbb      	adds	r3, r7, #2
200020d8:	1c02      	adds	r2, r0, #0
200020da:	801a      	strh	r2, [r3, #0]
200020dc:	1c7b      	adds	r3, r7, #1
200020de:	1c0a      	adds	r2, r1, #0
200020e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
200020e2:	1c7b      	adds	r3, r7, #1
200020e4:	781b      	ldrb	r3, [r3, #0]
200020e6:	2b00      	cmp	r3, #0
200020e8:	d009      	beq.n	200020fe <USART_DMACmd+0x34>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
200020ea:	687b      	ldr	r3, [r7, #4]
200020ec:	8a9b      	ldrh	r3, [r3, #20]
200020ee:	b29a      	uxth	r2, r3
200020f0:	1cbb      	adds	r3, r7, #2
200020f2:	881b      	ldrh	r3, [r3, #0]
200020f4:	4313      	orrs	r3, r2
200020f6:	b29a      	uxth	r2, r3
200020f8:	687b      	ldr	r3, [r7, #4]
200020fa:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
200020fc:	e00a      	b.n	20002114 <USART_DMACmd+0x4a>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
200020fe:	687b      	ldr	r3, [r7, #4]
20002100:	8a9b      	ldrh	r3, [r3, #20]
20002102:	b29b      	uxth	r3, r3
20002104:	1cba      	adds	r2, r7, #2
20002106:	8812      	ldrh	r2, [r2, #0]
20002108:	43d2      	mvns	r2, r2
2000210a:	b292      	uxth	r2, r2
2000210c:	4013      	ands	r3, r2
2000210e:	b29a      	uxth	r2, r3
20002110:	687b      	ldr	r3, [r7, #4]
20002112:	829a      	strh	r2, [r3, #20]
}
20002114:	46c0      	nop			; (mov r8, r8)
20002116:	46bd      	mov	sp, r7
20002118:	b002      	add	sp, #8
2000211a:	bd80      	pop	{r7, pc}

2000211c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
2000211c:	b580      	push	{r7, lr}
2000211e:	b086      	sub	sp, #24
20002120:	af00      	add	r7, sp, #0
20002122:	6078      	str	r0, [r7, #4]
20002124:	0008      	movs	r0, r1
20002126:	0011      	movs	r1, r2
20002128:	1cbb      	adds	r3, r7, #2
2000212a:	1c02      	adds	r2, r0, #0
2000212c:	801a      	strh	r2, [r3, #0]
2000212e:	1c7b      	adds	r3, r7, #1
20002130:	1c0a      	adds	r2, r1, #0
20002132:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
20002134:	2300      	movs	r3, #0
20002136:	613b      	str	r3, [r7, #16]
20002138:	2300      	movs	r3, #0
2000213a:	60fb      	str	r3, [r7, #12]
2000213c:	2300      	movs	r3, #0
2000213e:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
20002140:	2300      	movs	r3, #0
20002142:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
20002144:	687b      	ldr	r3, [r7, #4]
20002146:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
20002148:	1cbb      	adds	r3, r7, #2
2000214a:	881b      	ldrh	r3, [r3, #0]
2000214c:	b2db      	uxtb	r3, r3
2000214e:	095b      	lsrs	r3, r3, #5
20002150:	b2db      	uxtb	r3, r3
20002152:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
20002154:	1cbb      	adds	r3, r7, #2
20002156:	881b      	ldrh	r3, [r3, #0]
20002158:	221f      	movs	r2, #31
2000215a:	4013      	ands	r3, r2
2000215c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
2000215e:	2201      	movs	r2, #1
20002160:	68fb      	ldr	r3, [r7, #12]
20002162:	409a      	lsls	r2, r3
20002164:	0013      	movs	r3, r2
20002166:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
20002168:	693b      	ldr	r3, [r7, #16]
2000216a:	2b01      	cmp	r3, #1
2000216c:	d103      	bne.n	20002176 <USART_ITConfig+0x5a>
  {
    usartxbase += 0x0C;
2000216e:	697b      	ldr	r3, [r7, #20]
20002170:	330c      	adds	r3, #12
20002172:	617b      	str	r3, [r7, #20]
20002174:	e009      	b.n	2000218a <USART_ITConfig+0x6e>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
20002176:	693b      	ldr	r3, [r7, #16]
20002178:	2b02      	cmp	r3, #2
2000217a:	d103      	bne.n	20002184 <USART_ITConfig+0x68>
  {
    usartxbase += 0x10;
2000217c:	697b      	ldr	r3, [r7, #20]
2000217e:	3310      	adds	r3, #16
20002180:	617b      	str	r3, [r7, #20]
20002182:	e002      	b.n	2000218a <USART_ITConfig+0x6e>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
20002184:	697b      	ldr	r3, [r7, #20]
20002186:	3314      	adds	r3, #20
20002188:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
2000218a:	1c7b      	adds	r3, r7, #1
2000218c:	781b      	ldrb	r3, [r3, #0]
2000218e:	2b00      	cmp	r3, #0
20002190:	d006      	beq.n	200021a0 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
20002192:	697b      	ldr	r3, [r7, #20]
20002194:	6819      	ldr	r1, [r3, #0]
20002196:	697b      	ldr	r3, [r7, #20]
20002198:	68ba      	ldr	r2, [r7, #8]
2000219a:	430a      	orrs	r2, r1
2000219c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
2000219e:	e006      	b.n	200021ae <USART_ITConfig+0x92>
    *(__IO uint32_t*)usartxbase &= ~itmask;
200021a0:	697b      	ldr	r3, [r7, #20]
200021a2:	681a      	ldr	r2, [r3, #0]
200021a4:	68bb      	ldr	r3, [r7, #8]
200021a6:	43d9      	mvns	r1, r3
200021a8:	697b      	ldr	r3, [r7, #20]
200021aa:	400a      	ands	r2, r1
200021ac:	601a      	str	r2, [r3, #0]
}
200021ae:	46c0      	nop			; (mov r8, r8)
200021b0:	46bd      	mov	sp, r7
200021b2:	b006      	add	sp, #24
200021b4:	bd80      	pop	{r7, pc}

200021b6 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
200021b6:	b580      	push	{r7, lr}
200021b8:	b084      	sub	sp, #16
200021ba:	af00      	add	r7, sp, #0
200021bc:	6078      	str	r0, [r7, #4]
200021be:	000a      	movs	r2, r1
200021c0:	1cbb      	adds	r3, r7, #2
200021c2:	801a      	strh	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
200021c4:	230f      	movs	r3, #15
200021c6:	18fb      	adds	r3, r7, r3
200021c8:	2200      	movs	r2, #0
200021ca:	701a      	strb	r2, [r3, #0]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
200021cc:	687b      	ldr	r3, [r7, #4]
200021ce:	881b      	ldrh	r3, [r3, #0]
200021d0:	b29b      	uxth	r3, r3
200021d2:	1cba      	adds	r2, r7, #2
200021d4:	8812      	ldrh	r2, [r2, #0]
200021d6:	4013      	ands	r3, r2
200021d8:	b29b      	uxth	r3, r3
200021da:	2b00      	cmp	r3, #0
200021dc:	d004      	beq.n	200021e8 <USART_GetFlagStatus+0x32>
  {
    bitstatus = SET;
200021de:	230f      	movs	r3, #15
200021e0:	18fb      	adds	r3, r7, r3
200021e2:	2201      	movs	r2, #1
200021e4:	701a      	strb	r2, [r3, #0]
200021e6:	e003      	b.n	200021f0 <USART_GetFlagStatus+0x3a>
  }
  else
  {
    bitstatus = RESET;
200021e8:	230f      	movs	r3, #15
200021ea:	18fb      	adds	r3, r7, r3
200021ec:	2200      	movs	r2, #0
200021ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200021f0:	230f      	movs	r3, #15
200021f2:	18fb      	adds	r3, r7, r3
200021f4:	781b      	ldrb	r3, [r3, #0]
}
200021f6:	0018      	movs	r0, r3
200021f8:	46bd      	mov	sp, r7
200021fa:	b004      	add	sp, #16
200021fc:	bd80      	pop	{r7, pc}

200021fe <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
200021fe:	b580      	push	{r7, lr}
20002200:	b082      	sub	sp, #8
20002202:	af00      	add	r7, sp, #0
20002204:	6078      	str	r0, [r7, #4]
20002206:	000a      	movs	r2, r1
20002208:	1cbb      	adds	r3, r7, #2
2000220a:	801a      	strh	r2, [r3, #0]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
2000220c:	1cbb      	adds	r3, r7, #2
2000220e:	881b      	ldrh	r3, [r3, #0]
20002210:	43db      	mvns	r3, r3
20002212:	b29a      	uxth	r2, r3
20002214:	687b      	ldr	r3, [r7, #4]
20002216:	801a      	strh	r2, [r3, #0]
}
20002218:	46c0      	nop			; (mov r8, r8)
2000221a:	46bd      	mov	sp, r7
2000221c:	b002      	add	sp, #8
2000221e:	bd80      	pop	{r7, pc}

20002220 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
20002220:	b580      	push	{r7, lr}
20002222:	b086      	sub	sp, #24
20002224:	af00      	add	r7, sp, #0
20002226:	6078      	str	r0, [r7, #4]
20002228:	000a      	movs	r2, r1
2000222a:	1cbb      	adds	r3, r7, #2
2000222c:	801a      	strh	r2, [r3, #0]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
2000222e:	2300      	movs	r3, #0
20002230:	60fb      	str	r3, [r7, #12]
20002232:	2300      	movs	r3, #0
20002234:	617b      	str	r3, [r7, #20]
20002236:	2300      	movs	r3, #0
20002238:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
2000223a:	2313      	movs	r3, #19
2000223c:	18fb      	adds	r3, r7, r3
2000223e:	2200      	movs	r2, #0
20002240:	701a      	strb	r2, [r3, #0]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
20002242:	1cbb      	adds	r3, r7, #2
20002244:	881b      	ldrh	r3, [r3, #0]
20002246:	b2db      	uxtb	r3, r3
20002248:	095b      	lsrs	r3, r3, #5
2000224a:	b2db      	uxtb	r3, r3
2000224c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
2000224e:	1cbb      	adds	r3, r7, #2
20002250:	881b      	ldrh	r3, [r3, #0]
20002252:	221f      	movs	r2, #31
20002254:	4013      	ands	r3, r2
20002256:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
20002258:	2201      	movs	r2, #1
2000225a:	697b      	ldr	r3, [r7, #20]
2000225c:	409a      	lsls	r2, r3
2000225e:	0013      	movs	r3, r2
20002260:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
20002262:	68bb      	ldr	r3, [r7, #8]
20002264:	2b01      	cmp	r3, #1
20002266:	d107      	bne.n	20002278 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
20002268:	687b      	ldr	r3, [r7, #4]
2000226a:	899b      	ldrh	r3, [r3, #12]
2000226c:	b29b      	uxth	r3, r3
2000226e:	001a      	movs	r2, r3
20002270:	697b      	ldr	r3, [r7, #20]
20002272:	4013      	ands	r3, r2
20002274:	617b      	str	r3, [r7, #20]
20002276:	e011      	b.n	2000229c <USART_GetITStatus+0x7c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
20002278:	68bb      	ldr	r3, [r7, #8]
2000227a:	2b02      	cmp	r3, #2
2000227c:	d107      	bne.n	2000228e <USART_GetITStatus+0x6e>
  {
    itmask &= USARTx->CR2;
2000227e:	687b      	ldr	r3, [r7, #4]
20002280:	8a1b      	ldrh	r3, [r3, #16]
20002282:	b29b      	uxth	r3, r3
20002284:	001a      	movs	r2, r3
20002286:	697b      	ldr	r3, [r7, #20]
20002288:	4013      	ands	r3, r2
2000228a:	617b      	str	r3, [r7, #20]
2000228c:	e006      	b.n	2000229c <USART_GetITStatus+0x7c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
2000228e:	687b      	ldr	r3, [r7, #4]
20002290:	8a9b      	ldrh	r3, [r3, #20]
20002292:	b29b      	uxth	r3, r3
20002294:	001a      	movs	r2, r3
20002296:	697b      	ldr	r3, [r7, #20]
20002298:	4013      	ands	r3, r2
2000229a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
2000229c:	1cbb      	adds	r3, r7, #2
2000229e:	881b      	ldrh	r3, [r3, #0]
200022a0:	0a1b      	lsrs	r3, r3, #8
200022a2:	b29b      	uxth	r3, r3
200022a4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
200022a6:	2201      	movs	r2, #1
200022a8:	68fb      	ldr	r3, [r7, #12]
200022aa:	409a      	lsls	r2, r3
200022ac:	0013      	movs	r3, r2
200022ae:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
200022b0:	687b      	ldr	r3, [r7, #4]
200022b2:	881b      	ldrh	r3, [r3, #0]
200022b4:	b29b      	uxth	r3, r3
200022b6:	001a      	movs	r2, r3
200022b8:	68fb      	ldr	r3, [r7, #12]
200022ba:	4013      	ands	r3, r2
200022bc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
200022be:	697b      	ldr	r3, [r7, #20]
200022c0:	2b00      	cmp	r3, #0
200022c2:	d007      	beq.n	200022d4 <USART_GetITStatus+0xb4>
200022c4:	68fb      	ldr	r3, [r7, #12]
200022c6:	2b00      	cmp	r3, #0
200022c8:	d004      	beq.n	200022d4 <USART_GetITStatus+0xb4>
  {
    bitstatus = SET;
200022ca:	2313      	movs	r3, #19
200022cc:	18fb      	adds	r3, r7, r3
200022ce:	2201      	movs	r2, #1
200022d0:	701a      	strb	r2, [r3, #0]
200022d2:	e003      	b.n	200022dc <USART_GetITStatus+0xbc>
  }
  else
  {
    bitstatus = RESET;
200022d4:	2313      	movs	r3, #19
200022d6:	18fb      	adds	r3, r7, r3
200022d8:	2200      	movs	r2, #0
200022da:	701a      	strb	r2, [r3, #0]
  }
  
  return bitstatus;  
200022dc:	2313      	movs	r3, #19
200022de:	18fb      	adds	r3, r7, r3
200022e0:	781b      	ldrb	r3, [r3, #0]
}
200022e2:	0018      	movs	r0, r3
200022e4:	46bd      	mov	sp, r7
200022e6:	b006      	add	sp, #24
200022e8:	bd80      	pop	{r7, pc}

200022ea <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
200022ea:	b580      	push	{r7, lr}
200022ec:	b084      	sub	sp, #16
200022ee:	af00      	add	r7, sp, #0
200022f0:	6078      	str	r0, [r7, #4]
200022f2:	000a      	movs	r2, r1
200022f4:	1cbb      	adds	r3, r7, #2
200022f6:	801a      	strh	r2, [r3, #0]
  uint16_t bitpos = 0x00, itmask = 0x00;
200022f8:	210e      	movs	r1, #14
200022fa:	187b      	adds	r3, r7, r1
200022fc:	2200      	movs	r2, #0
200022fe:	801a      	strh	r2, [r3, #0]
20002300:	200c      	movs	r0, #12
20002302:	183b      	adds	r3, r7, r0
20002304:	2200      	movs	r2, #0
20002306:	801a      	strh	r2, [r3, #0]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
20002308:	187b      	adds	r3, r7, r1
2000230a:	1cba      	adds	r2, r7, #2
2000230c:	8812      	ldrh	r2, [r2, #0]
2000230e:	0a12      	lsrs	r2, r2, #8
20002310:	801a      	strh	r2, [r3, #0]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
20002312:	187b      	adds	r3, r7, r1
20002314:	881b      	ldrh	r3, [r3, #0]
20002316:	2201      	movs	r2, #1
20002318:	409a      	lsls	r2, r3
2000231a:	183b      	adds	r3, r7, r0
2000231c:	801a      	strh	r2, [r3, #0]
  USARTx->SR = (uint16_t)~itmask;
2000231e:	183b      	adds	r3, r7, r0
20002320:	881b      	ldrh	r3, [r3, #0]
20002322:	43db      	mvns	r3, r3
20002324:	b29a      	uxth	r2, r3
20002326:	687b      	ldr	r3, [r7, #4]
20002328:	801a      	strh	r2, [r3, #0]
}
2000232a:	46c0      	nop			; (mov r8, r8)
2000232c:	46bd      	mov	sp, r7
2000232e:	b004      	add	sp, #16
20002330:	bd80      	pop	{r7, pc}
20002332:	46c0      	nop			; (mov r8, r8)

20002334 <USART1_IRQHandler>:
static FIFO *txBuffer, *rxBuffer, realTxBuffer, realRxBuffer;
/*uint8_t digitToPrintable(uint8_t inDigit);
uint8_t charToPrintable(uint8_t inChar);*/

//Avbrottshantering för USART1
void USART1_IRQHandler(void){
20002334:	b590      	push	{r4, r7, lr}
20002336:	b083      	sub	sp, #12
20002338:	af00      	add	r7, sp, #0
    //Avbrott orsakat av mottaget meddelande
    if(USART_GetITStatus(USART1, USART_IT_RXNE) == SET){
2000233a:	4a1f      	ldr	r2, [pc, #124]	; (200023b8 <USART1_IRQHandler+0x84>)
2000233c:	4b1f      	ldr	r3, [pc, #124]	; (200023bc <USART1_IRQHandler+0x88>)
2000233e:	0011      	movs	r1, r2
20002340:	0018      	movs	r0, r3
20002342:	f7ff ff6d 	bl	20002220 <USART_GetITStatus>
20002346:	0003      	movs	r3, r0
20002348:	2b01      	cmp	r3, #1
2000234a:	d10b      	bne.n	20002364 <USART1_IRQHandler+0x30>
        //Skriver inkommen medelande till rxBuffer
        bufferPut(rxBuffer, USART_ReceiveData(USART1));
2000234c:	4b1c      	ldr	r3, [pc, #112]	; (200023c0 <USART1_IRQHandler+0x8c>)
2000234e:	681c      	ldr	r4, [r3, #0]
20002350:	4b1a      	ldr	r3, [pc, #104]	; (200023bc <USART1_IRQHandler+0x88>)
20002352:	0018      	movs	r0, r3
20002354:	f7ff fd44 	bl	20001de0 <USART_ReceiveData>
20002358:	0003      	movs	r3, r0
2000235a:	b2db      	uxtb	r3, r3
2000235c:	0019      	movs	r1, r3
2000235e:	0020      	movs	r0, r4
20002360:	f7ff fa88 	bl	20001874 <bufferPut>
        //Fundering ska vi ha något sätt att meddela att vi
        //har missat meddelande på grund av full buffer?
    }

    //Avbrott orsakat av att registret för sändning är tomt
    if(USART_GetITStatus(USART1, USART_IT_TXE) == SET){
20002364:	4a17      	ldr	r2, [pc, #92]	; (200023c4 <USART1_IRQHandler+0x90>)
20002366:	4b15      	ldr	r3, [pc, #84]	; (200023bc <USART1_IRQHandler+0x88>)
20002368:	0011      	movs	r1, r2
2000236a:	0018      	movs	r0, r3
2000236c:	f7ff ff58 	bl	20002220 <USART_GetITStatus>
20002370:	0003      	movs	r3, r0
20002372:	2b01      	cmp	r3, #1
20002374:	d11c      	bne.n	200023b0 <USART1_IRQHandler+0x7c>
        //Försöker läsa från txBuffer
        uint8_t data;
        uint8_t readOk = bufferGet(txBuffer,&data);
20002376:	4b14      	ldr	r3, [pc, #80]	; (200023c8 <USART1_IRQHandler+0x94>)
20002378:	681b      	ldr	r3, [r3, #0]
2000237a:	1dfc      	adds	r4, r7, #7
2000237c:	1dba      	adds	r2, r7, #6
2000237e:	0011      	movs	r1, r2
20002380:	0018      	movs	r0, r3
20002382:	f7ff faa8 	bl	200018d6 <bufferGet>
20002386:	0003      	movs	r3, r0
20002388:	7023      	strb	r3, [r4, #0]

        //Om vi lyckades skickar vi data
        //Annars är buffern tom och vi avativerar avbrott för att skicka
        if(readOk) {
2000238a:	1dfb      	adds	r3, r7, #7
2000238c:	781b      	ldrb	r3, [r3, #0]
2000238e:	2b00      	cmp	r3, #0
20002390:	d008      	beq.n	200023a4 <USART1_IRQHandler+0x70>
            USART_SendData(USART1,data);
20002392:	1dbb      	adds	r3, r7, #6
20002394:	781b      	ldrb	r3, [r3, #0]
20002396:	b29b      	uxth	r3, r3
20002398:	4a08      	ldr	r2, [pc, #32]	; (200023bc <USART1_IRQHandler+0x88>)
2000239a:	0019      	movs	r1, r3
2000239c:	0010      	movs	r0, r2
2000239e:	f7ff fd0d 	bl	20001dbc <USART_SendData>
        } else{
            USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
        }
    }
}
200023a2:	e005      	b.n	200023b0 <USART1_IRQHandler+0x7c>
            USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
200023a4:	4907      	ldr	r1, [pc, #28]	; (200023c4 <USART1_IRQHandler+0x90>)
200023a6:	4b05      	ldr	r3, [pc, #20]	; (200023bc <USART1_IRQHandler+0x88>)
200023a8:	2200      	movs	r2, #0
200023aa:	0018      	movs	r0, r3
200023ac:	f7ff feb6 	bl	2000211c <USART_ITConfig>
}
200023b0:	46c0      	nop			; (mov r8, r8)
200023b2:	46bd      	mov	sp, r7
200023b4:	b003      	add	sp, #12
200023b6:	bd90      	pop	{r4, r7, pc}
200023b8:	00000525 	andeq	r0, r0, r5, lsr #10
200023bc:	40011000 	andmi	r1, r1, r0
200023c0:	200027e8 	andcs	r2, r0, r8, ror #15
200023c4:	00000727 	andeq	r0, r0, r7, lsr #14
200023c8:	200027e4 	andcs	r2, r0, r4, ror #15

200023cc <USARTConfig>:

//Sätter upp USART1
void USARTConfig(void){
200023cc:	b590      	push	{r4, r7, lr}
200023ce:	b089      	sub	sp, #36	; 0x24
200023d0:	af00      	add	r7, sp, #0
    //Sätter bufferpekarna
    txBuffer = &realTxBuffer;
200023d2:	4b3f      	ldr	r3, [pc, #252]	; (200024d0 <USARTConfig+0x104>)
200023d4:	4a3f      	ldr	r2, [pc, #252]	; (200024d4 <USARTConfig+0x108>)
200023d6:	601a      	str	r2, [r3, #0]
    rxBuffer = &realRxBuffer;
200023d8:	4b3f      	ldr	r3, [pc, #252]	; (200024d8 <USARTConfig+0x10c>)
200023da:	4a40      	ldr	r2, [pc, #256]	; (200024dc <USARTConfig+0x110>)
200023dc:	601a      	str	r2, [r3, #0]

    //Nollställer vår buffertar
    bufferInit(txBuffer);
200023de:	4b3c      	ldr	r3, [pc, #240]	; (200024d0 <USARTConfig+0x104>)
200023e0:	681b      	ldr	r3, [r3, #0]
200023e2:	0018      	movs	r0, r3
200023e4:	f7ff fa32 	bl	2000184c <bufferInit>
    bufferInit(rxBuffer);
200023e8:	4b3b      	ldr	r3, [pc, #236]	; (200024d8 <USARTConfig+0x10c>)
200023ea:	681b      	ldr	r3, [r3, #0]
200023ec:	0018      	movs	r0, r3
200023ee:	f7ff fa2d 	bl	2000184c <bufferInit>

    //Aktiverar klockorna för USART1, Port A
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
200023f2:	2101      	movs	r1, #1
200023f4:	2010      	movs	r0, #16
200023f6:	f7fe faaf 	bl	20000958 <RCC_APB2PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
200023fa:	2101      	movs	r1, #1
200023fc:	2001      	movs	r0, #1
200023fe:	f7fe fa2b 	bl	20000858 <RCC_AHB1PeriphClockCmd>

    //Aktiverar alternativ funktion USART1 för port A pinnar 9 och 10
    GPIO_PinAFConfig(GPIOA, GPIO_Pin_9, GPIO_AF_USART1);
20002402:	2380      	movs	r3, #128	; 0x80
20002404:	009b      	lsls	r3, r3, #2
20002406:	4836      	ldr	r0, [pc, #216]	; (200024e0 <USARTConfig+0x114>)
20002408:	2207      	movs	r2, #7
2000240a:	0019      	movs	r1, r3
2000240c:	f7ff f8e9 	bl	200015e2 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_Pin_10, GPIO_AF_USART1);
20002410:	2380      	movs	r3, #128	; 0x80
20002412:	00db      	lsls	r3, r3, #3
20002414:	4832      	ldr	r0, [pc, #200]	; (200024e0 <USARTConfig+0x114>)
20002416:	2207      	movs	r2, #7
20002418:	0019      	movs	r1, r3
2000241a:	f7ff f8e2 	bl	200015e2 <GPIO_PinAFConfig>

    //Konfigurerar USART1 Tx och Rx som alternativ funktion push-pull
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
2000241e:	2118      	movs	r1, #24
20002420:	187b      	adds	r3, r7, r1
20002422:	2202      	movs	r2, #2
20002424:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
20002426:	187b      	adds	r3, r7, r1
20002428:	2203      	movs	r2, #3
2000242a:	715a      	strb	r2, [r3, #5]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
2000242c:	187b      	adds	r3, r7, r1
2000242e:	2200      	movs	r2, #0
20002430:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
20002432:	187b      	adds	r3, r7, r1
20002434:	2201      	movs	r2, #1
20002436:	71da      	strb	r2, [r3, #7]
    //Pinne 9 är TX
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
20002438:	187b      	adds	r3, r7, r1
2000243a:	2280      	movs	r2, #128	; 0x80
2000243c:	0092      	lsls	r2, r2, #2
2000243e:	601a      	str	r2, [r3, #0]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
20002440:	000c      	movs	r4, r1
20002442:	187b      	adds	r3, r7, r1
20002444:	4a26      	ldr	r2, [pc, #152]	; (200024e0 <USARTConfig+0x114>)
20002446:	0019      	movs	r1, r3
20002448:	0010      	movs	r0, r2
2000244a:	f7fe ff4d 	bl	200012e8 <GPIO_Init>
    //Pinne 10 är RX
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
2000244e:	0021      	movs	r1, r4
20002450:	187b      	adds	r3, r7, r1
20002452:	2280      	movs	r2, #128	; 0x80
20002454:	00d2      	lsls	r2, r2, #3
20002456:	601a      	str	r2, [r3, #0]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
20002458:	187b      	adds	r3, r7, r1
2000245a:	4a21      	ldr	r2, [pc, #132]	; (200024e0 <USARTConfig+0x114>)
2000245c:	0019      	movs	r1, r3
2000245e:	0010      	movs	r0, r2
20002460:	f7fe ff42 	bl	200012e8 <GPIO_Init>
    - Word Length = 8 Bits
    - One Stop Bit
    - No parity
    - Hardware flow control disabled (RTS and CTS signals)
    - Receive and transmit enabled*/
    USART_InitStructure.USART_BaudRate = 115200;
20002464:	2108      	movs	r1, #8
20002466:	187b      	adds	r3, r7, r1
20002468:	22e1      	movs	r2, #225	; 0xe1
2000246a:	0252      	lsls	r2, r2, #9
2000246c:	601a      	str	r2, [r3, #0]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
2000246e:	187b      	adds	r3, r7, r1
20002470:	2200      	movs	r2, #0
20002472:	809a      	strh	r2, [r3, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
20002474:	187b      	adds	r3, r7, r1
20002476:	2200      	movs	r2, #0
20002478:	80da      	strh	r2, [r3, #6]
    USART_InitStructure.USART_Parity = USART_Parity_No;
2000247a:	187b      	adds	r3, r7, r1
2000247c:	2200      	movs	r2, #0
2000247e:	811a      	strh	r2, [r3, #8]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
20002480:	187b      	adds	r3, r7, r1
20002482:	2200      	movs	r2, #0
20002484:	819a      	strh	r2, [r3, #12]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
20002486:	187b      	adds	r3, r7, r1
20002488:	220c      	movs	r2, #12
2000248a:	815a      	strh	r2, [r3, #10]
    //Konfigurerar avbrott för USART
    NVIC_InitTypeDef NVIC_InitStructure;
    //4 möjliga gruppprioriteringar
    //4 möjliga undergruppsprioriterinar
    //NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
2000248c:	1d3b      	adds	r3, r7, #4
2000248e:	2225      	movs	r2, #37	; 0x25
20002490:	701a      	strb	r2, [r3, #0]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
20002492:	1d3b      	adds	r3, r7, #4
20002494:	2200      	movs	r2, #0
20002496:	705a      	strb	r2, [r3, #1]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
20002498:	1d3b      	adds	r3, r7, #4
2000249a:	2200      	movs	r2, #0
2000249c:	709a      	strb	r2, [r3, #2]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
2000249e:	1d3b      	adds	r3, r7, #4
200024a0:	2201      	movs	r2, #1
200024a2:	70da      	strb	r2, [r3, #3]
    NVIC_Init(&NVIC_InitStructure);
200024a4:	1d3b      	adds	r3, r7, #4
200024a6:	0018      	movs	r0, r3
200024a8:	f7ff f900 	bl	200016ac <NVIC_Init>

    //Testar att sätta avbrottsvektorn manuellt
    *((void (**)(void) ) (0x2001C000 + 0xD4) ) = USART1_IRQHandler;
200024ac:	4b0d      	ldr	r3, [pc, #52]	; (200024e4 <USARTConfig+0x118>)
200024ae:	4a0e      	ldr	r2, [pc, #56]	; (200024e8 <USARTConfig+0x11c>)
200024b0:	601a      	str	r2, [r3, #0]

    //Startar USART1
    USART_Cmd(USART1,ENABLE);
200024b2:	4b0e      	ldr	r3, [pc, #56]	; (200024ec <USARTConfig+0x120>)
200024b4:	2101      	movs	r1, #1
200024b6:	0018      	movs	r0, r3
200024b8:	f7ff fbf8 	bl	20001cac <USART_Cmd>

    //Aktiverar avbrott vid mottagning av meddelanden
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
200024bc:	490c      	ldr	r1, [pc, #48]	; (200024f0 <USARTConfig+0x124>)
200024be:	4b0b      	ldr	r3, [pc, #44]	; (200024ec <USARTConfig+0x120>)
200024c0:	2201      	movs	r2, #1
200024c2:	0018      	movs	r0, r3
200024c4:	f7ff fe2a 	bl	2000211c <USART_ITConfig>
}
200024c8:	46c0      	nop			; (mov r8, r8)
200024ca:	46bd      	mov	sp, r7
200024cc:	b009      	add	sp, #36	; 0x24
200024ce:	bd90      	pop	{r4, r7, pc}
200024d0:	200027e4 	andcs	r2, r0, r4, ror #15
200024d4:	200027ec 	andcs	r2, r0, ip, ror #15
200024d8:	200027e8 	andcs	r2, r0, r8, ror #15
200024dc:	20002854 	andcs	r2, r0, r4, asr r8
200024e0:	40020000 	andmi	r0, r2, r0
200024e4:	2001c0d4 	ldrdcs	ip, [r1], -r4
200024e8:	20002335 	andcs	r2, r0, r5, lsr r3
200024ec:	40011000 	andmi	r1, r1, r0
200024f0:	00000525 	andeq	r0, r0, r5, lsr #10

200024f4 <USARTPut>:

//Lägger till elem till kön för att skicka
//Returnerar 1 om det lyckades, 0 annars.
uint8_t USARTPut (uint8_t elem){
200024f4:	b580      	push	{r7, lr}
200024f6:	b082      	sub	sp, #8
200024f8:	af00      	add	r7, sp, #0
200024fa:	0002      	movs	r2, r0
200024fc:	1dfb      	adds	r3, r7, #7
200024fe:	701a      	strb	r2, [r3, #0]
    //Lägger till den i bufferten om det går
    if (bufferPut(txBuffer, elem)){
20002500:	4b0b      	ldr	r3, [pc, #44]	; (20002530 <USARTPut+0x3c>)
20002502:	681a      	ldr	r2, [r3, #0]
20002504:	1dfb      	adds	r3, r7, #7
20002506:	781b      	ldrb	r3, [r3, #0]
20002508:	0019      	movs	r1, r3
2000250a:	0010      	movs	r0, r2
2000250c:	f7ff f9b2 	bl	20001874 <bufferPut>
20002510:	1e03      	subs	r3, r0, #0
20002512:	d007      	beq.n	20002524 <USARTPut+0x30>
        //Aktiverar avbrott för att skicka
        USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
20002514:	4907      	ldr	r1, [pc, #28]	; (20002534 <USARTPut+0x40>)
20002516:	4b08      	ldr	r3, [pc, #32]	; (20002538 <USARTPut+0x44>)
20002518:	2201      	movs	r2, #1
2000251a:	0018      	movs	r0, r3
2000251c:	f7ff fdfe 	bl	2000211c <USART_ITConfig>
        //Alternativ lösning: hålla koll på om avbrott redan är aktivt
        return 1;
20002520:	2301      	movs	r3, #1
20002522:	e000      	b.n	20002526 <USARTPut+0x32>
    }
    return 0;
20002524:	2300      	movs	r3, #0
}
20002526:	0018      	movs	r0, r3
20002528:	46bd      	mov	sp, r7
2000252a:	b002      	add	sp, #8
2000252c:	bd80      	pop	{r7, pc}
2000252e:	46c0      	nop			; (mov r8, r8)
20002530:	200027e4 	andcs	r2, r0, r4, ror #15
20002534:	00000727 	andeq	r0, r0, r7, lsr #14
20002538:	40011000 	andmi	r1, r1, r0

2000253c <USARTPrint>:

//Lägger till list till kön för att skicka
//Returnerar 1 om det lyckades, 0 annars.
uint8_t USARTPrint(uint8_t *list){
2000253c:	b580      	push	{r7, lr}
2000253e:	b082      	sub	sp, #8
20002540:	af00      	add	r7, sp, #0
20002542:	6078      	str	r0, [r7, #4]
    //En sträng avslutas med null så vi
    //läser tills vi hittar den
    while (*list) {
20002544:	e00a      	b.n	2000255c <USARTPrint+0x20>
        //Lägg till alla tecken en efter en
        //Misslyckas vi med en avbryter vi resten
        if (!USARTPut(*list++)){
20002546:	687b      	ldr	r3, [r7, #4]
20002548:	1c5a      	adds	r2, r3, #1
2000254a:	607a      	str	r2, [r7, #4]
2000254c:	781b      	ldrb	r3, [r3, #0]
2000254e:	0018      	movs	r0, r3
20002550:	f7ff ffd0 	bl	200024f4 <USARTPut>
20002554:	1e03      	subs	r3, r0, #0
20002556:	d101      	bne.n	2000255c <USARTPrint+0x20>
            return 0;
20002558:	2300      	movs	r3, #0
2000255a:	e004      	b.n	20002566 <USARTPrint+0x2a>
    while (*list) {
2000255c:	687b      	ldr	r3, [r7, #4]
2000255e:	781b      	ldrb	r3, [r3, #0]
20002560:	2b00      	cmp	r3, #0
20002562:	d1f0      	bne.n	20002546 <USARTPrint+0xa>
        }
    }
    return 1;
20002564:	2301      	movs	r3, #1
}
20002566:	0018      	movs	r0, r3
20002568:	46bd      	mov	sp, r7
2000256a:	b002      	add	sp, #8
2000256c:	bd80      	pop	{r7, pc}

2000256e <USARTPrintNumBase>:

//Lägger till num som enskilda nummer
//base anger vilken bas
//Returnerar 1 om det lyckades, 0 annars.
uint8_t USARTPrintNumBase(uint32_t num, uint8_t base){
2000256e:	b580      	push	{r7, lr}
20002570:	b08c      	sub	sp, #48	; 0x30
20002572:	af00      	add	r7, sp, #0
20002574:	6078      	str	r0, [r7, #4]
20002576:	000a      	movs	r2, r1
20002578:	1cfb      	adds	r3, r7, #3
2000257a:	701a      	strb	r2, [r3, #0]
    if (base == 0 || base == 1){
2000257c:	1cfb      	adds	r3, r7, #3
2000257e:	781b      	ldrb	r3, [r3, #0]
20002580:	2b00      	cmp	r3, #0
20002582:	d003      	beq.n	2000258c <USARTPrintNumBase+0x1e>
20002584:	1cfb      	adds	r3, r7, #3
20002586:	781b      	ldrb	r3, [r3, #0]
20002588:	2b01      	cmp	r3, #1
2000258a:	d101      	bne.n	20002590 <USARTPrintNumBase+0x22>
        return 0;
2000258c:	2300      	movs	r3, #0
2000258e:	e04c      	b.n	2000262a <USARTPrintNumBase+0xbc>
    }

    //Max längd är 32 bitar vid base = 2
    uint8_t index = 0,digitArr[32];
20002590:	232f      	movs	r3, #47	; 0x2f
20002592:	18fb      	adds	r3, r7, r3
20002594:	2200      	movs	r2, #0
20002596:	701a      	strb	r2, [r3, #0]

    //Sparar tecknen i arrayn
    do {
        uint8_t digit = num % base;
20002598:	1cfb      	adds	r3, r7, #3
2000259a:	781a      	ldrb	r2, [r3, #0]
2000259c:	687b      	ldr	r3, [r7, #4]
2000259e:	0011      	movs	r1, r2
200025a0:	0018      	movs	r0, r3
200025a2:	f000 f8ed 	bl	20002780 <__aeabi_uidivmod>
200025a6:	000b      	movs	r3, r1
200025a8:	001a      	movs	r2, r3
200025aa:	212e      	movs	r1, #46	; 0x2e
200025ac:	187b      	adds	r3, r7, r1
200025ae:	701a      	strb	r2, [r3, #0]
        digitArr[index++] = digit >= 10 ? 'A' + digit - 10 : '0' + digit;
200025b0:	187b      	adds	r3, r7, r1
200025b2:	781b      	ldrb	r3, [r3, #0]
200025b4:	2b09      	cmp	r3, #9
200025b6:	d905      	bls.n	200025c4 <USARTPrintNumBase+0x56>
200025b8:	232e      	movs	r3, #46	; 0x2e
200025ba:	18fb      	adds	r3, r7, r3
200025bc:	781b      	ldrb	r3, [r3, #0]
200025be:	3337      	adds	r3, #55	; 0x37
200025c0:	b2db      	uxtb	r3, r3
200025c2:	e004      	b.n	200025ce <USARTPrintNumBase+0x60>
200025c4:	232e      	movs	r3, #46	; 0x2e
200025c6:	18fb      	adds	r3, r7, r3
200025c8:	781b      	ldrb	r3, [r3, #0]
200025ca:	3330      	adds	r3, #48	; 0x30
200025cc:	b2db      	uxtb	r3, r3
200025ce:	212f      	movs	r1, #47	; 0x2f
200025d0:	187a      	adds	r2, r7, r1
200025d2:	7812      	ldrb	r2, [r2, #0]
200025d4:	1879      	adds	r1, r7, r1
200025d6:	1c50      	adds	r0, r2, #1
200025d8:	7008      	strb	r0, [r1, #0]
200025da:	0011      	movs	r1, r2
200025dc:	220c      	movs	r2, #12
200025de:	18ba      	adds	r2, r7, r2
200025e0:	5453      	strb	r3, [r2, r1]
        num /= base;
200025e2:	1cfb      	adds	r3, r7, #3
200025e4:	781b      	ldrb	r3, [r3, #0]
200025e6:	0019      	movs	r1, r3
200025e8:	6878      	ldr	r0, [r7, #4]
200025ea:	f000 f843 	bl	20002674 <__udivsi3>
200025ee:	0003      	movs	r3, r0
200025f0:	607b      	str	r3, [r7, #4]
    } while (num);
200025f2:	687b      	ldr	r3, [r7, #4]
200025f4:	2b00      	cmp	r3, #0
200025f6:	d1cf      	bne.n	20002598 <USARTPrintNumBase+0x2a>

    //Printar
    while(index){
200025f8:	e011      	b.n	2000261e <USARTPrintNumBase+0xb0>
         if(!USARTPut(digitArr[--index])){
200025fa:	212f      	movs	r1, #47	; 0x2f
200025fc:	187b      	adds	r3, r7, r1
200025fe:	187a      	adds	r2, r7, r1
20002600:	7812      	ldrb	r2, [r2, #0]
20002602:	3a01      	subs	r2, #1
20002604:	701a      	strb	r2, [r3, #0]
20002606:	187b      	adds	r3, r7, r1
20002608:	781b      	ldrb	r3, [r3, #0]
2000260a:	220c      	movs	r2, #12
2000260c:	18ba      	adds	r2, r7, r2
2000260e:	5cd3      	ldrb	r3, [r2, r3]
20002610:	0018      	movs	r0, r3
20002612:	f7ff ff6f 	bl	200024f4 <USARTPut>
20002616:	1e03      	subs	r3, r0, #0
20002618:	d101      	bne.n	2000261e <USARTPrintNumBase+0xb0>
             return 0;
2000261a:	2300      	movs	r3, #0
2000261c:	e005      	b.n	2000262a <USARTPrintNumBase+0xbc>
    while(index){
2000261e:	232f      	movs	r3, #47	; 0x2f
20002620:	18fb      	adds	r3, r7, r3
20002622:	781b      	ldrb	r3, [r3, #0]
20002624:	2b00      	cmp	r3, #0
20002626:	d1e8      	bne.n	200025fa <USARTPrintNumBase+0x8c>
         }
     }

    return 1;
20002628:	2301      	movs	r3, #1
}
2000262a:	0018      	movs	r0, r3
2000262c:	46bd      	mov	sp, r7
2000262e:	b00c      	add	sp, #48	; 0x30
20002630:	bd80      	pop	{r7, pc}

20002632 <USARTPrintNum>:

//Lägger till num som enskilda nummer
//0-9 till kön för att skicka
//Returnerar 1 om det lyckades, 0 annars.
uint8_t USARTPrintNum(uint32_t num){
20002632:	b580      	push	{r7, lr}
20002634:	b082      	sub	sp, #8
20002636:	af00      	add	r7, sp, #0
20002638:	6078      	str	r0, [r7, #4]
    USARTPrintNumBase(num, 10);
2000263a:	687b      	ldr	r3, [r7, #4]
2000263c:	210a      	movs	r1, #10
2000263e:	0018      	movs	r0, r3
20002640:	f7ff ff95 	bl	2000256e <USARTPrintNumBase>
}
20002644:	46c0      	nop			; (mov r8, r8)
20002646:	0018      	movs	r0, r3
20002648:	46bd      	mov	sp, r7
2000264a:	b002      	add	sp, #8
2000264c:	bd80      	pop	{r7, pc}

2000264e <USARTGet>:

//Hämta senaste mottagna meddelandet till dest
//Gör ingen omvandling, dvs returnerar det tal som skickades över USART
//Returnerar 1 om det lyckades, dvs det fanns ett meddelande att hämta 0 annars.
uint8_t USARTGet(uint8_t *dest){
2000264e:	b580      	push	{r7, lr}
20002650:	b082      	sub	sp, #8
20002652:	af00      	add	r7, sp, #0
20002654:	6078      	str	r0, [r7, #4]
    return bufferGet (rxBuffer, dest);
20002656:	4b06      	ldr	r3, [pc, #24]	; (20002670 <USARTGet+0x22>)
20002658:	681b      	ldr	r3, [r3, #0]
2000265a:	687a      	ldr	r2, [r7, #4]
2000265c:	0011      	movs	r1, r2
2000265e:	0018      	movs	r0, r3
20002660:	f7ff f939 	bl	200018d6 <bufferGet>
20002664:	0003      	movs	r3, r0
}
20002666:	0018      	movs	r0, r3
20002668:	46bd      	mov	sp, r7
2000266a:	b002      	add	sp, #8
2000266c:	bd80      	pop	{r7, pc}
2000266e:	46c0      	nop			; (mov r8, r8)
20002670:	200027e8 	andcs	r2, r0, r8, ror #15

20002674 <__udivsi3>:
20002674:	2200      	movs	r2, #0
20002676:	0843      	lsrs	r3, r0, #1
20002678:	428b      	cmp	r3, r1
2000267a:	d374      	bcc.n	20002766 <__udivsi3+0xf2>
2000267c:	0903      	lsrs	r3, r0, #4
2000267e:	428b      	cmp	r3, r1
20002680:	d35f      	bcc.n	20002742 <__udivsi3+0xce>
20002682:	0a03      	lsrs	r3, r0, #8
20002684:	428b      	cmp	r3, r1
20002686:	d344      	bcc.n	20002712 <__udivsi3+0x9e>
20002688:	0b03      	lsrs	r3, r0, #12
2000268a:	428b      	cmp	r3, r1
2000268c:	d328      	bcc.n	200026e0 <__udivsi3+0x6c>
2000268e:	0c03      	lsrs	r3, r0, #16
20002690:	428b      	cmp	r3, r1
20002692:	d30d      	bcc.n	200026b0 <__udivsi3+0x3c>
20002694:	22ff      	movs	r2, #255	; 0xff
20002696:	0209      	lsls	r1, r1, #8
20002698:	ba12      	rev	r2, r2
2000269a:	0c03      	lsrs	r3, r0, #16
2000269c:	428b      	cmp	r3, r1
2000269e:	d302      	bcc.n	200026a6 <__udivsi3+0x32>
200026a0:	1212      	asrs	r2, r2, #8
200026a2:	0209      	lsls	r1, r1, #8
200026a4:	d065      	beq.n	20002772 <__udivsi3+0xfe>
200026a6:	0b03      	lsrs	r3, r0, #12
200026a8:	428b      	cmp	r3, r1
200026aa:	d319      	bcc.n	200026e0 <__udivsi3+0x6c>
200026ac:	e000      	b.n	200026b0 <__udivsi3+0x3c>
200026ae:	0a09      	lsrs	r1, r1, #8
200026b0:	0bc3      	lsrs	r3, r0, #15
200026b2:	428b      	cmp	r3, r1
200026b4:	d301      	bcc.n	200026ba <__udivsi3+0x46>
200026b6:	03cb      	lsls	r3, r1, #15
200026b8:	1ac0      	subs	r0, r0, r3
200026ba:	4152      	adcs	r2, r2
200026bc:	0b83      	lsrs	r3, r0, #14
200026be:	428b      	cmp	r3, r1
200026c0:	d301      	bcc.n	200026c6 <__udivsi3+0x52>
200026c2:	038b      	lsls	r3, r1, #14
200026c4:	1ac0      	subs	r0, r0, r3
200026c6:	4152      	adcs	r2, r2
200026c8:	0b43      	lsrs	r3, r0, #13
200026ca:	428b      	cmp	r3, r1
200026cc:	d301      	bcc.n	200026d2 <__udivsi3+0x5e>
200026ce:	034b      	lsls	r3, r1, #13
200026d0:	1ac0      	subs	r0, r0, r3
200026d2:	4152      	adcs	r2, r2
200026d4:	0b03      	lsrs	r3, r0, #12
200026d6:	428b      	cmp	r3, r1
200026d8:	d301      	bcc.n	200026de <__udivsi3+0x6a>
200026da:	030b      	lsls	r3, r1, #12
200026dc:	1ac0      	subs	r0, r0, r3
200026de:	4152      	adcs	r2, r2
200026e0:	0ac3      	lsrs	r3, r0, #11
200026e2:	428b      	cmp	r3, r1
200026e4:	d301      	bcc.n	200026ea <__udivsi3+0x76>
200026e6:	02cb      	lsls	r3, r1, #11
200026e8:	1ac0      	subs	r0, r0, r3
200026ea:	4152      	adcs	r2, r2
200026ec:	0a83      	lsrs	r3, r0, #10
200026ee:	428b      	cmp	r3, r1
200026f0:	d301      	bcc.n	200026f6 <__udivsi3+0x82>
200026f2:	028b      	lsls	r3, r1, #10
200026f4:	1ac0      	subs	r0, r0, r3
200026f6:	4152      	adcs	r2, r2
200026f8:	0a43      	lsrs	r3, r0, #9
200026fa:	428b      	cmp	r3, r1
200026fc:	d301      	bcc.n	20002702 <__udivsi3+0x8e>
200026fe:	024b      	lsls	r3, r1, #9
20002700:	1ac0      	subs	r0, r0, r3
20002702:	4152      	adcs	r2, r2
20002704:	0a03      	lsrs	r3, r0, #8
20002706:	428b      	cmp	r3, r1
20002708:	d301      	bcc.n	2000270e <__udivsi3+0x9a>
2000270a:	020b      	lsls	r3, r1, #8
2000270c:	1ac0      	subs	r0, r0, r3
2000270e:	4152      	adcs	r2, r2
20002710:	d2cd      	bcs.n	200026ae <__udivsi3+0x3a>
20002712:	09c3      	lsrs	r3, r0, #7
20002714:	428b      	cmp	r3, r1
20002716:	d301      	bcc.n	2000271c <__udivsi3+0xa8>
20002718:	01cb      	lsls	r3, r1, #7
2000271a:	1ac0      	subs	r0, r0, r3
2000271c:	4152      	adcs	r2, r2
2000271e:	0983      	lsrs	r3, r0, #6
20002720:	428b      	cmp	r3, r1
20002722:	d301      	bcc.n	20002728 <__udivsi3+0xb4>
20002724:	018b      	lsls	r3, r1, #6
20002726:	1ac0      	subs	r0, r0, r3
20002728:	4152      	adcs	r2, r2
2000272a:	0943      	lsrs	r3, r0, #5
2000272c:	428b      	cmp	r3, r1
2000272e:	d301      	bcc.n	20002734 <__udivsi3+0xc0>
20002730:	014b      	lsls	r3, r1, #5
20002732:	1ac0      	subs	r0, r0, r3
20002734:	4152      	adcs	r2, r2
20002736:	0903      	lsrs	r3, r0, #4
20002738:	428b      	cmp	r3, r1
2000273a:	d301      	bcc.n	20002740 <__udivsi3+0xcc>
2000273c:	010b      	lsls	r3, r1, #4
2000273e:	1ac0      	subs	r0, r0, r3
20002740:	4152      	adcs	r2, r2
20002742:	08c3      	lsrs	r3, r0, #3
20002744:	428b      	cmp	r3, r1
20002746:	d301      	bcc.n	2000274c <__udivsi3+0xd8>
20002748:	00cb      	lsls	r3, r1, #3
2000274a:	1ac0      	subs	r0, r0, r3
2000274c:	4152      	adcs	r2, r2
2000274e:	0883      	lsrs	r3, r0, #2
20002750:	428b      	cmp	r3, r1
20002752:	d301      	bcc.n	20002758 <__udivsi3+0xe4>
20002754:	008b      	lsls	r3, r1, #2
20002756:	1ac0      	subs	r0, r0, r3
20002758:	4152      	adcs	r2, r2
2000275a:	0843      	lsrs	r3, r0, #1
2000275c:	428b      	cmp	r3, r1
2000275e:	d301      	bcc.n	20002764 <__udivsi3+0xf0>
20002760:	004b      	lsls	r3, r1, #1
20002762:	1ac0      	subs	r0, r0, r3
20002764:	4152      	adcs	r2, r2
20002766:	1a41      	subs	r1, r0, r1
20002768:	d200      	bcs.n	2000276c <__udivsi3+0xf8>
2000276a:	4601      	mov	r1, r0
2000276c:	4152      	adcs	r2, r2
2000276e:	4610      	mov	r0, r2
20002770:	4770      	bx	lr
20002772:	e7ff      	b.n	20002774 <__udivsi3+0x100>
20002774:	b501      	push	{r0, lr}
20002776:	2000      	movs	r0, #0
20002778:	f000 f806 	bl	20002788 <__aeabi_idiv0>
2000277c:	bd02      	pop	{r1, pc}
2000277e:	46c0      	nop			; (mov r8, r8)

20002780 <__aeabi_uidivmod>:
20002780:	2900      	cmp	r1, #0
20002782:	d0f7      	beq.n	20002774 <__udivsi3+0x100>
20002784:	e776      	b.n	20002674 <__udivsi3>
20002786:	4770      	bx	lr

20002788 <__aeabi_idiv0>:
20002788:	4770      	bx	lr
2000278a:	46c0      	nop			; (mov r8, r8)

2000278c <__aeabi_lmul>:
2000278c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000278e:	46ce      	mov	lr, r9
20002790:	4647      	mov	r7, r8
20002792:	0415      	lsls	r5, r2, #16
20002794:	0c2d      	lsrs	r5, r5, #16
20002796:	002e      	movs	r6, r5
20002798:	b580      	push	{r7, lr}
2000279a:	0407      	lsls	r7, r0, #16
2000279c:	0c14      	lsrs	r4, r2, #16
2000279e:	0c3f      	lsrs	r7, r7, #16
200027a0:	4699      	mov	r9, r3
200027a2:	0c03      	lsrs	r3, r0, #16
200027a4:	437e      	muls	r6, r7
200027a6:	435d      	muls	r5, r3
200027a8:	4367      	muls	r7, r4
200027aa:	4363      	muls	r3, r4
200027ac:	197f      	adds	r7, r7, r5
200027ae:	0c34      	lsrs	r4, r6, #16
200027b0:	19e4      	adds	r4, r4, r7
200027b2:	469c      	mov	ip, r3
200027b4:	42a5      	cmp	r5, r4
200027b6:	d903      	bls.n	200027c0 <__aeabi_lmul+0x34>
200027b8:	2380      	movs	r3, #128	; 0x80
200027ba:	025b      	lsls	r3, r3, #9
200027bc:	4698      	mov	r8, r3
200027be:	44c4      	add	ip, r8
200027c0:	464b      	mov	r3, r9
200027c2:	4343      	muls	r3, r0
200027c4:	4351      	muls	r1, r2
200027c6:	0c25      	lsrs	r5, r4, #16
200027c8:	0436      	lsls	r6, r6, #16
200027ca:	4465      	add	r5, ip
200027cc:	0c36      	lsrs	r6, r6, #16
200027ce:	0424      	lsls	r4, r4, #16
200027d0:	19a4      	adds	r4, r4, r6
200027d2:	195b      	adds	r3, r3, r5
200027d4:	1859      	adds	r1, r3, r1
200027d6:	0020      	movs	r0, r4
200027d8:	bc0c      	pop	{r2, r3}
200027da:	4690      	mov	r8, r2
200027dc:	4699      	mov	r9, r3
200027de:	bdf0      	pop	{r4, r5, r6, r7, pc}

200027e0 <msTicks>:
200027e0:	00000000 	andeq	r0, r0, r0

200027e4 <txBuffer>:
200027e4:	00000000 	andeq	r0, r0, r0

200027e8 <rxBuffer>:
200027e8:	00000000 	andeq	r0, r0, r0

200027ec <realTxBuffer>:
	...

20002854 <realRxBuffer>:
	...

200028bc <APBAHBPrescTable>:
200028bc:	00000000 	andeq	r0, r0, r0
200028c0:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
200028c4:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
200028c8:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

200028cc <GPIO_Pins>:
200028cc:	00020001 	andeq	r0, r2, r1
200028d0:	00080004 	andeq	r0, r8, r4
200028d4:	00200010 	eoreq	r0, r0, r0, lsl r0
200028d8:	00800040 	addeq	r0, r0, r0, asr #32
200028dc:	02000100 	andeq	r0, r0, #0, 2
200028e0:	08000400 	stmdaeq	r0, {sl}
200028e4:	20001000 	andcs	r1, r0, r0
200028e8:	80004000 	andhi	r4, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000017dd 	ldrdeq	r1, [r0], -sp
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000005d8 	ldrdeq	r0, [r0], -r8
      10:	000dd90c 	andeq	sp, sp, ip, lsl #18
      14:	00053800 	andeq	r3, r5, r0, lsl #16
      18:	00001800 	andeq	r1, r0, r0, lsl #16
	...
      24:	0fe20200 	svceq	0x00e20200
      28:	01050000 	mrseq	r0, (UNDEF: 5)
      2c:	00000253 	andeq	r0, r0, r3, asr r2
      30:	0253c804 	subseq	ip, r3, #4, 16	; 0x40000
      34:	bc030000 	stclt	0, cr0, [r3], {-0}
      38:	72000007 	andvc	r0, r0, #7
      3c:	00084203 	andeq	r4, r8, r3, lsl #4
      40:	07037400 	streq	r7, [r3, -r0, lsl #8]
      44:	75000009 	strvc	r0, [r0, #-9]
      48:	00048103 	andeq	r8, r4, r3, lsl #2
      4c:	e4037600 	str	r7, [r3], #-1536	; 0xfffffa00
      50:	7b000009 	blvc	7c <startup-0x1fffff84>
      54:	000ec803 	andeq	ip, lr, r3, lsl #16
      58:	23037c00 	movwcs	r7, #15360	; 0x3c00
      5c:	7e000011 	mcrvc	0, 0, r0, cr0, cr1, {0}
      60:	00032d03 	andeq	r2, r3, r3, lsl #26
      64:	db047f00 	blle	11fc6c <startup-0x1fee0394>
      68:	00000007 	andeq	r0, r0, r7
      6c:	0006b304 	andeq	fp, r6, r4, lsl #6
      70:	68040100 	stmdavs	r4, {r8}
      74:	02000008 	andeq	r0, r0, #8
      78:	00000e04 	andeq	r0, r0, r4, lsl #28
      7c:	bb040300 	bllt	100c84 <startup-0x1feff37c>
      80:	04000000 	streq	r0, [r0], #-0
      84:	000f5f04 	andeq	r5, pc, r4, lsl #30
      88:	49040500 	stmdbmi	r4, {r8, sl}
      8c:	0600000e 	streq	r0, [r0], -lr
      90:	00074004 	andeq	r4, r7, r4
      94:	1c040700 	stcne	7, cr0, [r4], {-0}
      98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      9c:	00111804 	andseq	r1, r1, r4, lsl #16
      a0:	df040900 	svcle	0x00040900
      a4:	0a00000a 	beq	d4 <startup-0x1fffff2c>
      a8:	000c9004 	andeq	r9, ip, r4
      ac:	aa040b00 	bge	102cb4 <startup-0x1fefd34c>
      b0:	0c00000b 	stceq	0, cr0, [r0], {11}
      b4:	00039e04 	andeq	r9, r3, r4, lsl #28
      b8:	74040d00 	strvc	r0, [r4], #-3328	; 0xfffff300
      bc:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
      c0:	000e7b04 	andeq	r7, lr, r4, lsl #22
      c4:	58040f00 	stmdapl	r4, {r8, r9, sl, fp}
      c8:	10000007 	andne	r0, r0, r7
      cc:	00002704 	andeq	r2, r0, r4, lsl #14
      d0:	8f041100 	svchi	0x00041100
      d4:	1200000d 	andne	r0, r0, #13
      d8:	00074b04 	andeq	r4, r7, r4, lsl #22
      dc:	2a041300 	bcs	104ce4 <startup-0x1fefb31c>
      e0:	14000005 	strne	r0, [r0], #-5
      e4:	00106804 	andseq	r6, r0, r4, lsl #16
      e8:	78041500 	stmdavc	r4, {r8, sl, ip}
      ec:	16000008 	strne	r0, [r0], -r8
      f0:	00109204 	andseq	r9, r0, r4, lsl #4
      f4:	2e041700 	cdpcs	7, 0, cr1, cr4, cr0, {0}
      f8:	18000009 	stmdane	r0, {r0, r3}
      fc:	000fd404 	andeq	sp, pc, r4, lsl #8
     100:	95041900 	strls	r1, [r4, #-2304]	; 0xfffff700
     104:	1a000002 	bne	114 <startup-0x1ffffeec>
     108:	00072504 	andeq	r2, r7, r4, lsl #10
     10c:	3c041b00 			; <UNDEFINED> instruction: 0x3c041b00
     110:	1c000001 	stcne	0, cr0, [r0], {1}
     114:	000d4304 	andeq	r4, sp, r4, lsl #6
     118:	ce041d00 	cdpgt	13, 0, cr1, cr4, cr0, {0}
     11c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
     120:	0006c904 	andeq	ip, r6, r4, lsl #18
     124:	3a041f00 	bcc	107d2c <startup-0x1fef82d4>
     128:	20000004 	andcs	r0, r0, r4
     12c:	000b1104 	andeq	r1, fp, r4, lsl #2
     130:	da042100 	ble	108538 <startup-0x1fef7ac8>
     134:	22000008 	andcs	r0, r0, #8
     138:	0009d204 	andeq	sp, r9, r4, lsl #4
     13c:	cd042300 	stcgt	3, cr2, [r4, #-0]
     140:	24000001 	strcs	r0, [r0], #-1
     144:	000d4d04 	andeq	r4, sp, r4, lsl #26
     148:	86042500 	strhi	r2, [r4], -r0, lsl #10
     14c:	2600000f 	strcs	r0, [r0], -pc
     150:	00034904 	andeq	r4, r3, r4, lsl #18
     154:	0a042700 	beq	109d5c <startup-0x1fef62a4>
     158:	2800000d 	stmdacs	r0, {r0, r2, r3}
     15c:	000cc204 	andeq	ip, ip, r4, lsl #4
     160:	b5042900 	strlt	r2, [r4, #-2304]	; 0xfffff700
     164:	2a00000a 	bcs	194 <startup-0x1ffffe6c>
     168:	0001d704 	andeq	sp, r1, r4, lsl #14
     16c:	39042b00 	stmdbcc	r4, {r8, r9, fp, sp}
     170:	2c000000 	stccs	0, cr0, [r0], {-0}
     174:	00078604 	andeq	r8, r7, r4, lsl #12
     178:	e5042d00 	str	r2, [r4, #-3328]	; 0xfffff300
     17c:	2e000010 	mcrcs	0, 0, r0, cr0, cr0, {0}
     180:	00114204 	andseq	r4, r1, r4, lsl #4
     184:	3f042f00 	svccc	0x00042f00
     188:	3000000e 	andcc	r0, r0, lr
     18c:	0010f204 	andseq	pc, r0, r4, lsl #4
     190:	77043100 	strvc	r3, [r4, -r0, lsl #2]
     194:	32000004 	andcc	r0, r0, #4
     198:	0000b104 	andeq	fp, r0, r4, lsl #2
     19c:	80043300 	andhi	r3, r4, r0, lsl #6
     1a0:	3400000a 	strcc	r0, [r0], #-10
     1a4:	00092304 	andeq	r2, r9, r4, lsl #6
     1a8:	ef043500 	svc	0x00043500
     1ac:	3600000a 	strcc	r0, [r0], -sl
     1b0:	00099404 	andeq	r9, r9, r4, lsl #8
     1b4:	9d043700 	stcls	7, cr3, [r4, #-0]
     1b8:	38000008 	stmdacc	r0, {r3}
     1bc:	00007a04 	andeq	r7, r0, r4, lsl #20
     1c0:	bb043900 	bllt	10e5c8 <startup-0x1fef1a38>
     1c4:	3a000011 	bcc	210 <startup-0x1ffffdf0>
     1c8:	000bc904 	andeq	ip, fp, r4, lsl #18
     1cc:	f7043b00 			; <UNDEFINED> instruction: 0xf7043b00
     1d0:	3c000003 	stccc	0, cr0, [r0], {3}
     1d4:	000f1a04 	andeq	r1, pc, r4, lsl #20
     1d8:	ac043d00 	stcge	13, cr3, [r4], {-0}
     1dc:	3e000009 	cdpcc	0, 0, cr0, cr0, cr9, {0}
     1e0:	000be404 	andeq	lr, fp, r4, lsl #8
     1e4:	9f043f00 	svcls	0x00043f00
     1e8:	40000001 	andmi	r0, r0, r1
     1ec:	000d8104 	andeq	r8, sp, r4, lsl #2
     1f0:	47044100 	strmi	r4, [r4, -r0, lsl #2]
     1f4:	42000004 	andmi	r0, r0, #4
     1f8:	0007b004 	andeq	fp, r7, r4
     1fc:	5f044300 	svcpl	0x00044300
     200:	44000002 	strmi	r0, [r0], #-2
     204:	000e9704 	andeq	r9, lr, r4, lsl #14
     208:	9e044500 	cfsh32ls	mvfx4, mvfx4, #0
     20c:	46000007 	strmi	r0, [r0], -r7
     210:	0001ad04 	andeq	sl, r1, r4, lsl #26
     214:	fa044700 	blx	111e1c <startup-0x1feee1e4>
     218:	4800000e 	stmdami	r0, {r1, r2, r3}
     21c:	000cf304 	andeq	pc, ip, r4, lsl #6
     220:	26044900 	strcs	r4, [r4], -r0, lsl #18
     224:	4a000010 	bmi	26c <startup-0x1ffffd94>
     228:	00112f04 	andseq	r2, r1, r4, lsl #30
     22c:	e5044b00 	str	r4, [r4, #-2816]	; 0xfffff500
     230:	4c000007 	stcmi	0, cr0, [r0], {7}
     234:	0009ba04 	andeq	fp, r9, r4, lsl #20
     238:	c6044d00 	strgt	r4, [r4], -r0, lsl #26
     23c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     240:	000d0004 	andeq	r0, sp, r4
     244:	32044f00 	andcc	r4, r4, #0, 30
     248:	50000007 	andpl	r0, r0, r7
     24c:	000a5904 	andeq	r5, sl, r4, lsl #18
     250:	05005100 	streq	r5, [r0, #-256]	; 0xffffff00
     254:	03eb0601 	mvneq	r0, #1048576	; 0x100000
     258:	86060000 	strhi	r0, [r6], -r0
     25c:	04000008 	streq	r0, [r0], #-8
     260:	0025032f 	eoreq	r0, r5, pc, lsr #6
     264:	c3070000 	movwgt	r0, #28672	; 0x7000
     268:	05000001 	streq	r0, [r0, #-1]
     26c:	0002712b 	andeq	r7, r2, fp, lsr #2
     270:	08010500 	stmdaeq	r1, {r8, sl}
     274:	000003e9 	andeq	r0, r0, r9, ror #7
     278:	4c050205 	sfmmi	f0, 4, [r5], {5}
     27c:	0700000f 	streq	r0, [r0, -pc]
     280:	000004f8 	strdeq	r0, [r0], -r8
     284:	028a3905 	addeq	r3, sl, #81920	; 0x14000
     288:	02050000 	andeq	r0, r5, #0
     28c:	0010c107 	andseq	ip, r0, r7, lsl #2
     290:	11540700 	cmpne	r4, r0, lsl #14
     294:	4d050000 	stcmi	0, cr0, [r5, #-0]
     298:	0000029c 	muleq	r0, ip, r2
     29c:	a3050405 	movwge	r0, #21509	; 0x5405
     2a0:	07000009 	streq	r0, [r0, -r9]
     2a4:	0000094c 	andeq	r0, r0, ip, asr #18
     2a8:	02ae4f05 	adceq	r4, lr, #5, 30
     2ac:	04050000 	streq	r0, [r5], #-0
     2b0:	000d1e07 	andeq	r1, sp, r7, lsl #28
     2b4:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
     2b8:	0000099e 	muleq	r0, lr, r9
     2bc:	19070805 	stmdbne	r7, {r0, r2, fp}
     2c0:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     2c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     2c8:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     2cc:	000d2307 	andeq	r2, sp, r7, lsl #6
     2d0:	01c50700 	biceq	r0, r5, r0, lsl #14
     2d4:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
     2d8:	00000266 	andeq	r0, r0, r6, ror #4
     2dc:	0002d109 	andeq	sp, r2, r9, lsl #2
     2e0:	02d10a00 	sbcseq	r0, r1, #0, 20
     2e4:	e1090000 	mrs	r0, (UNDEF: 9)
     2e8:	07000002 	streq	r0, [r0, -r2]
     2ec:	000004fa 	strdeq	r0, [r0], -sl
     2f0:	027f2406 	rsbseq	r2, pc, #100663296	; 0x6000000
     2f4:	eb090000 	bl	2402fc <startup-0x1fdbfd04>
     2f8:	07000002 	streq	r0, [r0, -r2]
     2fc:	00001156 	andeq	r1, r0, r6, asr r1
     300:	02912c06 	addseq	r2, r1, #1536	; 0x600
     304:	fb090000 	blx	24030e <startup-0x1fdbfcf2>
     308:	07000002 	streq	r0, [r0, -r2]
     30c:	0000094e 	andeq	r0, r0, lr, asr #18
     310:	02a33006 	adceq	r3, r3, #6
     314:	0b090000 	bleq	24031c <startup-0x1fdbfce4>
     318:	0a000003 	beq	32c <startup-0x1ffffcd4>
     31c:	00000316 	andeq	r0, r0, r6, lsl r3
     320:	010e040b 	tsteq	lr, fp, lsl #8
     324:	03dc01a0 	bicseq	r0, ip, #160, 2	; 0x28
     328:	720c0000 	andvc	r0, ip, #0
     32c:	01000011 	tsteq	r0, r1, lsl r0
     330:	03ec01a2 	mvneq	r0, #-2147483608	; 0x80000028
     334:	0c000000 	stceq	0, cr0, [r0], {-0}
     338:	000003d5 	ldrdeq	r0, [r0], -r5
     33c:	f101a301 			; <UNDEFINED> instruction: 0xf101a301
     340:	20000003 	andcs	r0, r0, r3
     344:	000daa0c 	andeq	sl, sp, ip, lsl #20
     348:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
     34c:	000003ec 	andeq	r0, r0, ip, ror #7
     350:	00050c80 	andeq	r0, r5, r0, lsl #25
     354:	a5010000 	strge	r0, [r1, #-0]
     358:	0003f101 	andeq	pc, r3, r1, lsl #2
     35c:	020da000 	andeq	sl, sp, #0
     360:	01000011 	tsteq	r0, r1, lsl r0
     364:	03ec01a6 	mvneq	r0, #-2147483607	; 0x80000029
     368:	01000000 	mrseq	r0, (UNDEF: 0)
     36c:	0004630d 	andeq	r6, r4, sp, lsl #6
     370:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     374:	000003f1 	strdeq	r0, [r0], -r1
     378:	6e0d0120 	adfvsep	f0, f5, f0
     37c:	01000001 	tsteq	r0, r1
     380:	03ec01a8 	mvneq	r0, #168, 2	; 0x2a
     384:	01800000 	orreq	r0, r0, r0
     388:	00046d0d 	andeq	r6, r4, sp, lsl #26
     38c:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
     390:	000003f1 	strdeq	r0, [r0], -r1
     394:	270d01a0 	strcs	r0, [sp, -r0, lsr #3]
     398:	01000004 	tsteq	r0, r4
     39c:	03ec01aa 	mvneq	r0, #-2147483606	; 0x8000002a
     3a0:	02000000 	andeq	r0, r0, #0
     3a4:	0004090d 	andeq	r0, r4, sp, lsl #18
     3a8:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
     3ac:	00000401 	andeq	r0, r0, r1, lsl #8
     3b0:	490e0220 	stmdbmi	lr, {r5, r9}
     3b4:	ac010050 	stcge	0, cr0, [r1], {80}	; 0x50
     3b8:	00042101 	andeq	r2, r4, r1, lsl #2
     3bc:	0d030000 	stceq	0, cr0, [r3, #-0]
     3c0:	00000413 	andeq	r0, r0, r3, lsl r4
     3c4:	2601ad01 	strcs	sl, [r1], -r1, lsl #26
     3c8:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     3cc:	06c40d03 	strbeq	r0, [r4], r3, lsl #26
     3d0:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     3d4:	00031601 	andeq	r1, r3, r1, lsl #12
     3d8:	000e0000 	andeq	r0, lr, r0
     3dc:	0003160f 	andeq	r1, r3, pc, lsl #12
     3e0:	0003ec00 	andeq	lr, r3, r0, lsl #24
     3e4:	02ca1000 	sbceq	r1, sl, #0
     3e8:	00070000 	andeq	r0, r7, r0
     3ec:	0003dc09 	andeq	sp, r3, r9, lsl #24
     3f0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     3f4:	04010000 	streq	r0, [r1], #-0
     3f8:	ca100000 	bgt	400400 <startup-0x1fbffc00>
     3fc:	17000002 	strne	r0, [r0, -r2]
     400:	030b0f00 	movweq	r0, #48896	; 0xbf00
     404:	04110000 	ldreq	r0, [r1], #-0
     408:	ca100000 	bgt	400410 <startup-0x1fbffbf0>
     40c:	37000002 	strcc	r0, [r0, -r2]
     410:	02dc0f00 	sbcseq	r0, ip, #0, 30
     414:	04210000 	strteq	r0, [r1], #-0
     418:	ca100000 	bgt	400420 <startup-0x1fbffbe0>
     41c:	ef000002 	svc	0x00000002
     420:	04110900 	ldreq	r0, [r1], #-2304	; 0xfffff700
     424:	0b0f0000 	bleq	3c042c <startup-0x1fc3fbd4>
     428:	37000003 	strcc	r0, [r0, -r3]
     42c:	11000004 	tstne	r0, r4
     430:	000002ca 	andeq	r0, r0, sl, asr #5
     434:	06000283 	streq	r0, [r0], -r3, lsl #5
     438:	00000cd9 	ldrdeq	r0, [r0], -r9
     43c:	2001af01 	andcs	sl, r1, r1, lsl #30
     440:	12000003 	andne	r0, r0, #3
     444:	01c0018c 	biceq	r0, r0, ip, lsl #3
     448:	0000055e 	andeq	r0, r0, lr, asr r5
     44c:	0002340c 	andeq	r3, r2, ip, lsl #8
     450:	01c20100 	biceq	r0, r2, r0, lsl #2
     454:	0000031b 	andeq	r0, r0, fp, lsl r3
     458:	035d0c00 	cmpeq	sp, #0, 24
     45c:	c3010000 	movwgt	r0, #4096	; 0x1000
     460:	00031601 	andeq	r1, r3, r1, lsl #12
     464:	ac0c0400 	cfstrsge	mvf0, [ip], {-0}
     468:	01000000 	mrseq	r0, (UNDEF: 0)
     46c:	031601c4 	tsteq	r6, #196, 2	; 0x31
     470:	0c080000 	stceq	0, cr0, [r8], {-0}
     474:	00000204 	andeq	r0, r0, r4, lsl #4
     478:	1601c501 	strne	ip, [r1], -r1, lsl #10
     47c:	0c000003 	stceq	0, cr0, [r0], {3}
     480:	52435313 	subpl	r5, r3, #1275068416	; 0x4c000000
     484:	01c60100 	biceq	r0, r6, r0, lsl #2
     488:	00000316 	andeq	r0, r0, r6, lsl r3
     48c:	43431310 	movtmi	r1, #13072	; 0x3310
     490:	c7010052 	smlsdgt	r1, r2, r0, r0
     494:	00031601 	andeq	r1, r3, r1, lsl #12
     498:	53131400 	tstpl	r3, #0, 8
     49c:	01005048 	tsteq	r0, r8, asr #32
     4a0:	056e01c8 	strbeq	r0, [lr, #-456]!	; 0xfffffe38
     4a4:	0c180000 	ldceq	0, cr0, [r8], {-0}
     4a8:	000006ad 	andeq	r0, r0, sp, lsr #13
     4ac:	1601c901 	strne	ip, [r1], -r1, lsl #18
     4b0:	24000003 	strcs	r0, [r0], #-3
     4b4:	000e5d0c 	andeq	r5, lr, ip, lsl #26
     4b8:	01ca0100 	biceq	r0, sl, r0, lsl #2
     4bc:	00000316 	andeq	r0, r0, r6, lsl r3
     4c0:	057b0c28 	ldrbeq	r0, [fp, #-3112]!	; 0xfffff3d8
     4c4:	cb010000 	blgt	404cc <startup-0x1ffbfb34>
     4c8:	00031601 	andeq	r1, r3, r1, lsl #12
     4cc:	ab0c2c00 	blge	30b4d4 <startup-0x1fcf4b2c>
     4d0:	01000004 	tsteq	r0, r4
     4d4:	031601cc 	tsteq	r6, #204, 2	; 0x33
     4d8:	0c300000 	ldceq	0, cr0, [r0], #-0
     4dc:	00000f46 	andeq	r0, r0, r6, asr #30
     4e0:	1601cd01 	strne	ip, [r1], -r1, lsl #26
     4e4:	34000003 	strcc	r0, [r0], #-3
     4e8:	000b9b0c 	andeq	r9, fp, ip, lsl #22
     4ec:	01ce0100 	biceq	r0, lr, r0, lsl #2
     4f0:	00000316 	andeq	r0, r0, r6, lsl r3
     4f4:	0e260c38 	mcreq	12, 1, r0, cr6, cr8, {1}
     4f8:	cf010000 	svcgt	0x00010000
     4fc:	00031601 	andeq	r1, r3, r1, lsl #12
     500:	50133c00 	andspl	r3, r3, r0, lsl #24
     504:	01005246 	tsteq	r0, r6, asr #4
     508:	058801d0 	streq	r0, [r8, #464]	; 0x1d0
     50c:	13400000 	movtne	r0, #0
     510:	00524644 	subseq	r4, r2, r4, asr #12
     514:	1b01d101 	blne	74920 <startup-0x1ff8b6e0>
     518:	48000003 	stmdami	r0, {r0, r1}
     51c:	52444113 	subpl	r4, r4, #-1073741820	; 0xc0000004
     520:	01d20100 	bicseq	r0, r2, r0, lsl #2
     524:	0000031b 	andeq	r0, r0, fp, lsl r3
     528:	0f350c4c 	svceq	0x00350c4c
     52c:	d3010000 	movwle	r0, #4096	; 0x1000
     530:	0005a201 	andeq	sl, r5, r1, lsl #4
     534:	6f0c5000 	svcvs	0x000c5000
     538:	0100000f 	tsteq	r0, pc
     53c:	05bc01d4 	ldreq	r0, [ip, #468]!	; 0x1d4
     540:	0c600000 	stcleq	0, cr0, [r0], #-0
     544:	000003d5 	ldrdeq	r0, [r0], -r5
     548:	c101d501 	tstgt	r1, r1, lsl #10
     54c:	74000005 	strvc	r0, [r0], #-5
     550:	0010fc0c 	andseq	pc, r0, ip, lsl #24
     554:	01d60100 	bicseq	r0, r6, r0, lsl #2
     558:	00000316 	andeq	r0, r0, r6, lsl r3
     55c:	dc0f0088 	stcle	0, cr0, [pc], {136}	; 0x88
     560:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
     564:	10000005 	andne	r0, r0, r5
     568:	000002ca 	andeq	r0, r0, sl, asr #5
     56c:	5e09000b 	cdppl	0, 0, cr0, cr9, cr11, {0}
     570:	0f000005 	svceq	0x00000005
     574:	0000031b 	andeq	r0, r0, fp, lsl r3
     578:	00000583 	andeq	r0, r0, r3, lsl #11
     57c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     580:	0a000100 	beq	988 <startup-0x1ffff678>
     584:	00000573 	andeq	r0, r0, r3, ror r5
     588:	00058309 	andeq	r8, r5, r9, lsl #6
     58c:	031b0f00 	tsteq	fp, #0, 30
     590:	059d0000 	ldreq	r0, [sp]
     594:	ca100000 	bgt	40059c <startup-0x1fbffa64>
     598:	03000002 	movweq	r0, #2
     59c:	058d0a00 	streq	r0, [sp, #2560]	; 0xa00
     5a0:	9d090000 	stcls	0, cr0, [r9, #-0]
     5a4:	0f000005 	svceq	0x00000005
     5a8:	0000031b 	andeq	r0, r0, fp, lsl r3
     5ac:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     5b0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5b4:	0a000400 	beq	15bc <startup-0x1fffea44>
     5b8:	000005a7 	andeq	r0, r0, r7, lsr #11
     5bc:	0005b709 	andeq	fp, r5, r9, lsl #14
     5c0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     5c4:	05d10000 	ldrbeq	r0, [r1]
     5c8:	ca100000 	bgt	4005d0 <startup-0x1fbffa30>
     5cc:	04000002 	streq	r0, [r0], #-2
     5d0:	04910600 	ldreq	r0, [r1], #1536	; 0x600
     5d4:	d7010000 	strle	r0, [r1, -r0]
     5d8:	00044301 	andeq	r4, r4, r1, lsl #6
     5dc:	01101200 	tsteq	r0, r0, lsl #4
     5e0:	061b02bf 			; <UNDEFINED> instruction: 0x061b02bf
     5e4:	ea0c0000 	b	3005ec <startup-0x1fcffa14>
     5e8:	0100000a 	tsteq	r0, sl
     5ec:	031602c1 	tsteq	r6, #268435468	; 0x1000000c
     5f0:	0c000000 	stceq	0, cr0, [r0], {-0}
     5f4:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
     5f8:	1602c201 	strne	ip, [r2], -r1, lsl #4
     5fc:	04000003 	streq	r0, [r0], #-3
     600:	4c415613 	mcrrmi	6, 1, r5, r1, cr3
     604:	02c30100 	sbceq	r0, r3, #0, 2
     608:	00000316 	andeq	r0, r0, r6, lsl r3
     60c:	0e320c08 	cdpeq	12, 3, cr0, cr2, cr8, {0}
     610:	c4010000 	strgt	r0, [r1], #-0
     614:	00031b02 	andeq	r1, r3, r2, lsl #22
     618:	06000c00 	streq	r0, [r0], -r0, lsl #24
     61c:	00000c2f 	andeq	r0, r0, pc, lsr #24
     620:	dd02c501 	cfstr32le	mvfx12, [r2, #-4]
     624:	0f000005 	svceq	0x00000005
     628:	0000030b 	andeq	r0, r0, fp, lsl #6
     62c:	00000637 	andeq	r0, r0, r7, lsr r6
     630:	0002ca10 	andeq	ip, r2, r0, lsl sl
     634:	14000100 	strne	r0, [r0], #-256	; 0xffffff00
     638:	00000fe7 	andeq	r0, r0, r7, ror #31
     63c:	0606fa01 	streq	pc, [r6], -r1, lsl #20
     640:	15000003 	strne	r0, [r0, #-3]
     644:	00000858 	andeq	r0, r0, r8, asr r8
     648:	030b3b07 	movweq	r3, #47879	; 0xbb07
     64c:	07160000 	ldreq	r0, [r6, -r0]
     650:	00027101 	andeq	r7, r2, r1, lsl #2
     654:	035d0400 	cmpeq	sp, #0, 8
     658:	00000669 	andeq	r0, r0, r9, ror #12
     65c:	00123b04 	andseq	r3, r2, r4, lsl #22
     660:	53170000 	tstpl	r7, #0
     664:	01005445 	tsteq	r0, r5, asr #8
     668:	0a060600 	beq	181e70 <startup-0x1fe7e190>
     66c:	5d040000 	stcpl	0, cr0, [r4, #-0]
     670:	00064e03 	andeq	r4, r6, r3, lsl #28
     674:	0ad60600 	beq	ff581e7c <GPIO_Pins+0xdf57f5b0>
     678:	5d040000 	stcpl	0, cr0, [r4, #-0]
     67c:	00064e03 	andeq	r4, r6, r3, lsl #28
     680:	01071600 	tsteq	r7, r0, lsl #12
     684:	00000271 	andeq	r0, r0, r1, ror r2
     688:	9c035f04 	stcls	15, cr5, [r3], {4}
     68c:	04000006 	streq	r0, [r0], #-6
     690:	000009dc 	ldrdeq	r0, [r0], -ip
     694:	0f9c0400 	svceq	0x009c0400
     698:	00010000 	andeq	r0, r1, r0
     69c:	000ce306 	andeq	lr, ip, r6, lsl #6
     6a0:	035f0400 	cmpeq	pc, #0, 8
     6a4:	00000681 	andeq	r0, r0, r1, lsl #13
     6a8:	71010716 	tstvc	r1, r6, lsl r7
     6ac:	04000002 	streq	r0, [r0], #-2
     6b0:	06c30362 	strbeq	r0, [r3], r2, ror #6
     6b4:	d4040000 	strle	r0, [r4], #-0
     6b8:	00000008 	andeq	r0, r0, r8
     6bc:	000d6f04 	andeq	r6, sp, r4, lsl #30
     6c0:	06000100 	streq	r0, [r0], -r0, lsl #2
     6c4:	00000c84 	andeq	r0, r0, r4, lsl #25
     6c8:	a8036204 	stmdage	r3, {r2, r9, sp, lr}
     6cc:	12000006 	andne	r0, r0, #6
     6d0:	05c30428 	strbeq	r0, [r3, #1064]	; 0x428
     6d4:	0000075b 	andeq	r0, r0, fp, asr r7
     6d8:	0010510c 	andseq	r5, r0, ip, lsl #2
     6dc:	05c50400 	strbeq	r0, [r5, #1024]	; 0x400
     6e0:	00000316 	andeq	r0, r0, r6, lsl r3
     6e4:	0e2b0c00 	cdpeq	12, 2, cr0, cr11, cr0, {0}
     6e8:	c6040000 	strgt	r0, [r4], -r0
     6ec:	00031605 	andeq	r1, r3, r5, lsl #12
     6f0:	ff0c0400 			; <UNDEFINED> instruction: 0xff0c0400
     6f4:	04000008 	streq	r0, [r0], #-8
     6f8:	031605c7 	tsteq	r6, #834666496	; 0x31c00000
     6fc:	0c080000 	stceq	0, cr0, [r8], {-0}
     700:	000009c6 	andeq	r0, r0, r6, asr #19
     704:	1605c804 	strne	ip, [r5], -r4, lsl #16
     708:	0c000003 	stceq	0, cr0, [r0], {3}
     70c:	52444913 	subpl	r4, r4, #311296	; 0x4c000
     710:	05c90400 	strbeq	r0, [r9, #1024]	; 0x400
     714:	00000316 	andeq	r0, r0, r6, lsl r3
     718:	444f1310 	strbmi	r1, [pc], #-784	; 720 <startup-0x1ffff8e0>
     71c:	ca040052 	bgt	10086c <startup-0x1feff794>
     720:	00031605 	andeq	r1, r3, r5, lsl #12
     724:	1c0c1400 	cfstrsne	mvf1, [ip], {-0}
     728:	0400000a 	streq	r0, [r0], #-10
     72c:	02f605cb 	rscseq	r0, r6, #851443712	; 0x32c00000
     730:	0c180000 	ldceq	0, cr0, [r8], {-0}
     734:	000009f9 	strdeq	r0, [r0], -r9
     738:	f605cc04 			; <UNDEFINED> instruction: 0xf605cc04
     73c:	1a000002 	bne	74c <startup-0x1ffff8b4>
     740:	0008be0c 	andeq	fp, r8, ip, lsl #28
     744:	05cd0400 	strbeq	r0, [sp, #1024]	; 0x400
     748:	00000316 	andeq	r0, r0, r6, lsl r3
     74c:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
     750:	ce040052 	mcrgt	0, 0, r0, cr4, cr2, {2}
     754:	00076b05 	andeq	r6, r7, r5, lsl #22
     758:	0f002000 	svceq	0x00002000
     75c:	00000316 	andeq	r0, r0, r6, lsl r3
     760:	0000076b 	andeq	r0, r0, fp, ror #14
     764:	0002ca10 	andeq	ip, r2, r0, lsl sl
     768:	09000100 	stmdbeq	r0, {r8}
     76c:	0000075b 	andeq	r0, r0, fp, asr r7
     770:	000fc706 	andeq	ip, pc, r6, lsl #14
     774:	05cf0400 	strbeq	r0, [pc, #1024]	; b7c <startup-0x1ffff484>
     778:	000006cf 	andeq	r0, r0, pc, asr #13
     77c:	64049812 	strvs	r9, [r4], #-2066	; 0xfffff7ee
     780:	00093f06 	andeq	r3, r9, r6, lsl #30
     784:	52431300 	subpl	r1, r3, #0, 6
     788:	06660400 	strbteq	r0, [r6], -r0, lsl #8
     78c:	00000316 	andeq	r0, r0, r6, lsl r3
     790:	091b0c00 	ldmdbeq	fp, {sl, fp}
     794:	67040000 	strvs	r0, [r4, -r0]
     798:	00031606 	andeq	r1, r3, r6, lsl #12
     79c:	a50c0400 	strge	r0, [ip, #-1024]	; 0xfffffc00
     7a0:	04000010 	streq	r0, [r0], #-16
     7a4:	03160668 	tsteq	r6, #104, 12	; 0x6800000
     7a8:	13080000 	movwne	r0, #32768	; 0x8000
     7ac:	00524943 	subseq	r4, r2, r3, asr #18
     7b0:	16066904 	strne	r6, [r6], -r4, lsl #18
     7b4:	0c000003 	stceq	0, cr0, [r0], {3}
     7b8:	0004b00c 	andeq	fp, r4, ip
     7bc:	066a0400 	strbteq	r0, [sl], -r0, lsl #8
     7c0:	00000316 	andeq	r0, r0, r6, lsl r3
     7c4:	0f110c10 	svceq	0x00110c10
     7c8:	6b040000 	blvs	1007d0 <startup-0x1feff830>
     7cc:	00031606 	andeq	r1, r3, r6, lsl #12
     7d0:	760c1400 	strvc	r1, [ip], -r0, lsl #8
     7d4:	0400000c 	streq	r0, [r0], #-12
     7d8:	0316066c 	tsteq	r6, #108, 12	; 0x6c00000
     7dc:	0c180000 	ldceq	0, cr0, [r8], {-0}
     7e0:	000003d5 	ldrdeq	r0, [r0], -r5
     7e4:	0b066d04 	bleq	19bbfc <startup-0x1fe64404>
     7e8:	1c000003 	stcne	0, cr0, [r0], {3}
     7ec:	000cb90c 	andeq	fp, ip, ip, lsl #18
     7f0:	066e0400 	strbteq	r0, [lr], -r0, lsl #8
     7f4:	00000316 	andeq	r0, r0, r6, lsl r3
     7f8:	09f00c20 	ldmibeq	r0!, {r5, sl, fp}^
     7fc:	6f040000 	svcvs	0x00040000
     800:	00031606 	andeq	r1, r3, r6, lsl #12
     804:	df0c2400 	svcle	0x000c2400
     808:	04000003 	streq	r0, [r0], #-3
     80c:	06270670 			; <UNDEFINED> instruction: 0x06270670
     810:	0c280000 	stceq	0, cr0, [r8], #-0
     814:	00000ea9 	andeq	r0, r0, r9, lsr #29
     818:	16067104 	strne	r7, [r6], -r4, lsl #2
     81c:	30000003 	andcc	r0, r0, r3
     820:	0005030c 	andeq	r0, r5, ip, lsl #6
     824:	06720400 	ldrbteq	r0, [r2], -r0, lsl #8
     828:	00000316 	andeq	r0, r0, r6, lsl r3
     82c:	11a20c34 			; <UNDEFINED> instruction: 0x11a20c34
     830:	73040000 	movwvc	r0, #16384	; 0x4000
     834:	00031606 	andeq	r1, r3, r6, lsl #12
     838:	630c3800 	movwvs	r3, #51200	; 0xc800
     83c:	04000004 	streq	r0, [r0], #-4
     840:	030b0674 	movweq	r0, #46708	; 0xb674
     844:	0c3c0000 	ldceq	0, cr0, [ip], #-0
     848:	00000cd1 	ldrdeq	r0, [r0], -r1
     84c:	16067504 	strne	r7, [r6], -r4, lsl #10
     850:	40000003 	andmi	r0, r0, r3
     854:	0002f80c 	andeq	pc, r2, ip, lsl #16
     858:	06760400 	ldrbteq	r0, [r6], -r0, lsl #8
     85c:	00000316 	andeq	r0, r0, r6, lsl r3
     860:	046d0c44 	strbteq	r0, [sp], #-3140	; 0xfffff3bc
     864:	77040000 	strvc	r0, [r4, -r0]
     868:	00062706 	andeq	r2, r6, r6, lsl #14
     86c:	140c4800 	strne	r4, [ip], #-2048	; 0xfffff800
     870:	04000003 	streq	r0, [r0], #-3
     874:	03160678 	tsteq	r6, #120, 12	; 0x7800000
     878:	0c500000 	mraeq	r0, r0, acc0
     87c:	000001eb 	andeq	r0, r0, fp, ror #3
     880:	16067904 	strne	r7, [r6], -r4, lsl #18
     884:	54000003 	strpl	r0, [r0], #-3
     888:	000daf0c 	andeq	sl, sp, ip, lsl #30
     88c:	067a0400 	ldrbteq	r0, [sl], -r0, lsl #8
     890:	00000316 	andeq	r0, r0, r6, lsl r3
     894:	04090c58 	streq	r0, [r9], #-3160	; 0xfffff3a8
     898:	7b040000 	blvc	1008a0 <startup-0x1feff760>
     89c:	00030b06 	andeq	r0, r3, r6, lsl #22
     8a0:	a00c5c00 	andge	r5, ip, r0, lsl #24
     8a4:	0400000b 	streq	r0, [r0], #-11
     8a8:	0316067c 	tsteq	r6, #124, 12	; 0x7c00000
     8ac:	0c600000 	stcleq	0, cr0, [r0], #-0
     8b0:	00000a8b 	andeq	r0, r0, fp, lsl #21
     8b4:	16067d04 	strne	r7, [r6], -r4, lsl #26
     8b8:	64000003 	strvs	r0, [r0], #-3
     8bc:	0004130c 	andeq	r1, r4, ip, lsl #6
     8c0:	067e0400 	ldrbteq	r0, [lr], -r0, lsl #8
     8c4:	00000627 	andeq	r0, r0, r7, lsr #12
     8c8:	06a80c68 	strteq	r0, [r8], r8, ror #24
     8cc:	7f040000 	svcvc	0x00040000
     8d0:	00031606 	andeq	r1, r3, r6, lsl #12
     8d4:	43137000 	tstmi	r3, #0
     8d8:	04005253 	streq	r5, [r0], #-595	; 0xfffffdad
     8dc:	03160680 	tsteq	r6, #128, 12	; 0x8000000
     8e0:	0c740000 	ldcleq	0, cr0, [r4], #-0
     8e4:	0000041d 	andeq	r0, r0, sp, lsl r4
     8e8:	27068104 	strcs	r8, [r6, -r4, lsl #2]
     8ec:	78000006 	stmdavc	r0, {r1, r2}
     8f0:	0009cc0c 	andeq	ip, r9, ip, lsl #24
     8f4:	06820400 	streq	r0, [r2], r0, lsl #8
     8f8:	00000316 	andeq	r0, r0, r6, lsl r3
     8fc:	004c0c80 	subeq	r0, ip, r0, lsl #25
     900:	83040000 	movwhi	r0, #16384	; 0x4000
     904:	00031606 	andeq	r1, r3, r6, lsl #12
     908:	9f0c8400 	svcls	0x000c8400
     90c:	04000010 	streq	r0, [r0], #-16
     910:	03160684 	tsteq	r6, #132, 12	; 0x8400000
     914:	0c880000 	stceq	0, cr0, [r8], {0}
     918:	00000355 	andeq	r0, r0, r5, asr r3
     91c:	16068504 	strne	r8, [r6], -r4, lsl #10
     920:	8c000003 	stchi	0, cr0, [r0], {3}
     924:	000bdb0c 	andeq	sp, fp, ip, lsl #22
     928:	06860400 	streq	r0, [r6], r0, lsl #8
     92c:	00000316 	andeq	r0, r0, r6, lsl r3
     930:	0e540c90 	mrceq	12, 2, r0, cr4, cr0, {4}
     934:	87040000 	strhi	r0, [r4, -r0]
     938:	00031606 	andeq	r1, r3, r6, lsl #12
     93c:	06009400 	streq	r9, [r0], -r0, lsl #8
     940:	00000f3a 	andeq	r0, r0, sl, lsr pc
     944:	7c068904 			; <UNDEFINED> instruction: 0x7c068904
     948:	18000007 	stmdane	r0, {r0, r1, r2}
     94c:	84300810 	ldrthi	r0, [r0], #-2064	; 0xfffff7f0
     950:	19000009 	stmdbne	r0, {r0, r3}
     954:	00001107 	andeq	r1, r0, r7, lsl #2
     958:	030b3208 	movweq	r3, #45576	; 0xb208
     95c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     960:	0000008c 	andeq	r0, r0, ip, lsl #1
     964:	030b3308 	movweq	r3, #45832	; 0xb308
     968:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     96c:	00000595 	muleq	r0, r5, r5
     970:	030b3408 	movweq	r3, #46088	; 0xb408
     974:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     978:	0000050b 	andeq	r0, r0, fp, lsl #10
     97c:	030b3508 	movweq	r3, #46344	; 0xb508
     980:	000c0000 	andeq	r0, ip, r0
     984:	000f2307 	andeq	r2, pc, r7, lsl #6
     988:	4b360800 	blmi	d82990 <startup-0x1f27d670>
     98c:	0f000009 	svceq	0x00000009
     990:	000002e6 	andeq	r0, r0, r6, ror #5
     994:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
     998:	0002ca10 	andeq	ip, r2, r0, lsl sl
     99c:	0a000f00 	beq	45a4 <startup-0x1fffba5c>
     9a0:	0000098f 	andeq	r0, r0, pc, lsl #19
     9a4:	00099f09 	andeq	r9, r9, r9, lsl #30
     9a8:	09571a00 	ldmdbeq	r7, {r9, fp, ip}^
     9ac:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
     9b0:	000009a4 	andeq	r0, r0, r4, lsr #19
     9b4:	28bc0305 	ldmcs	ip!, {r0, r2, r8, r9}
     9b8:	071b2000 	ldreq	r2, [fp, -r0]
     9bc:	00027101 	andeq	r7, r2, r1, lsl #2
     9c0:	e0420900 	sub	r0, r2, r0, lsl #18
     9c4:	04000009 	streq	r0, [r0], #-9
     9c8:	00000890 	muleq	r0, r0, r8
     9cc:	07170400 	ldreq	r0, [r7, -r0, lsl #8]
     9d0:	04010000 	streq	r0, [r1], #-0
     9d4:	00000271 	andeq	r0, r0, r1, ror r2
     9d8:	02ad0402 	adceq	r0, sp, #33554432	; 0x2000000
     9dc:	00030000 	andeq	r0, r3, r0
     9e0:	000db907 	andeq	fp, sp, r7, lsl #18
     9e4:	ba470900 	blt	11c2dec <startup-0x1ee3d214>
     9e8:	1b000009 	blne	a14 <startup-0x1ffff5ec>
     9ec:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
     9f0:	4f090000 	svcmi	0x00090000
     9f4:	00000a05 	andeq	r0, r0, r5, lsl #20
     9f8:	00042c04 	andeq	r2, r4, r4, lsl #24
     9fc:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
     a00:	01000003 	tsteq	r0, r3
     a04:	010a0700 	tsteq	sl, r0, lsl #14
     a08:	52090000 	andpl	r0, r9, #0
     a0c:	000009eb 	andeq	r0, r0, fp, ror #19
     a10:	7101071b 	tstvc	r1, fp, lsl r7
     a14:	09000002 	stmdbeq	r0, {r1}
     a18:	000a365a 	andeq	r3, sl, sl, asr r6
     a1c:	051b0400 	ldreq	r0, [fp, #-1024]	; 0xfffffc00
     a20:	04000000 	streq	r0, [r0], #-0
     a24:	00000968 	andeq	r0, r0, r8, ror #18
     a28:	11cd0401 	bicne	r0, sp, r1, lsl #8
     a2c:	04020000 	streq	r0, [r2], #-0
     a30:	00000a22 	andeq	r0, r0, r2, lsr #20
     a34:	b6070003 	strlt	r0, [r7], -r3
     a38:	0900000e 	stmdbeq	r0, {r1, r2, r3}
     a3c:	000a105f 	andeq	r1, sl, pc, asr r0
     a40:	01071b00 	tsteq	r7, r0, lsl #22
     a44:	00000271 	andeq	r0, r0, r1, ror r2
     a48:	0a616e09 	beq	185c274 <startup-0x1e7a3d8c>
     a4c:	9b040000 	blls	100a54 <startup-0x1feff5ac>
     a50:	00000000 	andeq	r0, r0, r0
     a54:	00108504 	andseq	r8, r0, r4, lsl #10
     a58:	f5040100 			; <UNDEFINED> instruction: 0xf5040100
     a5c:	02000001 	andeq	r0, r0, #1
     a60:	049a0700 	ldreq	r0, [sl], #1792	; 0x700
     a64:	72090000 	andvc	r0, r9, #0
     a68:	00000a41 	andeq	r0, r0, r1, asr #20
     a6c:	84090818 	strhi	r0, [r9], #-2072	; 0xfffff7e8
     a70:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     a74:	000eda19 	andeq	sp, lr, r9, lsl sl
     a78:	0b860900 	bleq	fe182e80 <GPIO_Pins+0xde1805b4>
     a7c:	00000003 	andeq	r0, r0, r3
     a80:	000d7719 	andeq	r7, sp, r9, lsl r7
     a84:	e0890900 	add	r0, r9, r0, lsl #18
     a88:	04000009 	streq	r0, [r0], #-9
     a8c:	000b0619 	andeq	r0, fp, r9, lsl r6
     a90:	368c0900 	strcc	r0, [ip], r0, lsl #18
     a94:	0500000a 	streq	r0, [r0, #-10]
     a98:	00094119 	andeq	r4, r9, r9, lsl r1
     a9c:	058f0900 	streq	r0, [pc, #2304]	; 13a4 <startup-0x1fffec5c>
     aa0:	0600000a 	streq	r0, [r0], -sl
     aa4:	000f0719 	andeq	r0, pc, r9, lsl r7	; <UNPREDICTABLE>
     aa8:	61920900 	orrsvs	r0, r2, r0, lsl #18
     aac:	0700000a 	streq	r0, [r0, -sl]
     ab0:	037c0700 	cmneq	ip, #0, 14
     ab4:	94090000 	strls	r0, [r9], #-0
     ab8:	00000a6c 	andeq	r0, r0, ip, ror #20
     abc:	000c7f1c 	andeq	r7, ip, ip, lsl pc
     ac0:	010a1c00 	tsteq	sl, r0, lsl #24
     ac4:	00000b28 	andeq	r0, r0, r8, lsr #22
     ac8:	0064691d 	rsbeq	r6, r4, sp, lsl r9
     acc:	0b28030a 	bleq	a016fc <startup-0x1f5fe904>
     ad0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     ad4:	000002ca 	andeq	r0, r0, sl, asr #5
     ad8:	02c3040a 	sbceq	r0, r3, #167772160	; 0xa000000
     adc:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     ae0:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
     ae4:	0b28050a 	bleq	a01f14 <startup-0x1f5fe0ec>
     ae8:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     aec:	00000c46 	andeq	r0, r0, r6, asr #24
     af0:	0b28060a 	bleq	a02320 <startup-0x1f5fdce0>
     af4:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
     af8:	00000f56 	andeq	r0, r0, r6, asr pc
     afc:	02c3070a 	sbceq	r0, r3, #2621440	; 0x280000
     b00:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     b04:	00000e8d 	andeq	r0, r0, sp, lsl #29
     b08:	02c3080a 	sbceq	r0, r3, #655360	; 0xa0000
     b0c:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
     b10:	00000580 	andeq	r0, r0, r0, lsl #11
     b14:	02c3090a 	sbceq	r0, r3, #163840	; 0x28000
     b18:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     b1c:	0000103a 	andeq	r1, r0, sl, lsr r0
     b20:	02c30a0a 	sbceq	r0, r3, #40960	; 0xa000
     b24:	00180000 	andseq	r0, r8, r0
     b28:	f2080105 	vrhadd.s8	d0, d8, d5
     b2c:	07000003 	streq	r0, [r0, -r3]
     b30:	00000c7f 	andeq	r0, r0, pc, ror ip
     b34:	0abc0b0a 	beq	fef03764 <GPIO_Pins+0xdef00e98>
     b38:	eb0f0000 	bl	3c0b40 <startup-0x1fc3f4c0>
     b3c:	4a000002 	bmi	b4c <startup-0x1ffff4b4>
     b40:	1000000b 	andne	r0, r0, fp
     b44:	000002ca 	andeq	r0, r0, sl, asr #5
     b48:	0d1e000f 	ldceq	0, cr0, [lr, #-60]	; 0xffffffc4
     b4c:	03000007 	movweq	r0, #7
     b50:	000b3a15 	andeq	r3, fp, r5, lsl sl
     b54:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
     b58:	1e200028 	cdpne	0, 2, cr0, cr0, cr8, {1}
     b5c:	000008e7 	andeq	r0, r0, r7, ror #17
     b60:	03165703 	tsteq	r6, #786432	; 0xc0000
     b64:	03050000 	movweq	r0, #20480	; 0x5000
     b68:	200027e0 	andcs	r2, r0, r0, ror #15
     b6c:	0010211f 	andseq	r2, r0, pc, lsl r1
     b70:	44690300 	strbtmi	r0, [r9], #-768	; 0xfffffd00
     b74:	3420000f 	strtcc	r0, [r0], #-15
     b78:	01000002 	tsteq	r0, r2
     b7c:	000bcb9c 	muleq	fp, ip, fp
     b80:	06701a00 	ldrbteq	r1, [r0], -r0, lsl #20
     b84:	6d030000 	stcvs	0, cr0, [r3, #-0]
     b88:	000002c3 	andeq	r0, r0, r3, asr #5
     b8c:	1a549102 	bne	1524f9c <startup-0x1eadb064>
     b90:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
     b94:	0bcb6f03 	bleq	ff2dc7a8 <GPIO_Pins+0xdf2d9edc>
     b98:	91030000 	mrsls	r0, (UNDEF: 3)
     b9c:	c6200658 			; <UNDEFINED> instruction: 0xc6200658
     ba0:	a020000f 	eorge	r0, r0, pc
     ba4:	21000001 	tstcs	r0, r1
     ba8:	7f030069 	svcvc	0x00030069
     bac:	000002c3 	andeq	r0, r0, r3, asr #5
     bb0:	20609102 	rsbcs	r9, r0, r2, lsl #2
     bb4:	20001072 	andcs	r1, r0, r2, ror r0
     bb8:	000000da 	ldrdeq	r0, [r0], -sl
     bbc:	03006921 	movweq	r6, #2337	; 0x921
     bc0:	0002c391 	muleq	r2, r1, r3
     bc4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     bc8:	0f000000 	svceq	0x00000000
     bcc:	00000b2f 	andeq	r0, r0, pc, lsr #22
     bd0:	00000bde 	ldrdeq	r0, [r0], -lr
     bd4:	0002ca22 	andeq	ip, r2, r2, lsr #20
     bd8:	5c910300 	ldcpl	3, cr0, [r1], {0}
     bdc:	661f0006 	ldrvs	r0, [pc], -r6
     be0:	0300000b 	movweq	r0, #11
     be4:	000f185c 	andeq	r1, pc, ip, asr r8	; <UNPREDICTABLE>
     be8:	00002c20 	andeq	r2, r0, r0, lsr #24
     bec:	029c0100 	addseq	r0, ip, #0, 2
     bf0:	1a00000c 	bne	c28 <startup-0x1ffff3d8>
     bf4:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     bf8:	030b6003 	movweq	r6, #45059	; 0xb003
     bfc:	91020000 	mrsls	r0, (UNDEF: 2)
     c00:	3a230074 	bcc	8c0dd8 <startup-0x1f73f228>
     c04:	03000002 	movweq	r0, #2
     c08:	000f0058 	andeq	r0, pc, r8, asr r0	; <UNPREDICTABLE>
     c0c:	00001820 	andeq	r1, r0, r0, lsr #16
     c10:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
     c14:	00000224 	andeq	r0, r0, r4, lsr #4
     c18:	0e984103 	fmleqe	f4, f0, f3
     c1c:	00682000 	rsbeq	r2, r8, r0
     c20:	9c010000 	stcls	0, cr0, [r1], {-0}
     c24:	00000c37 	andeq	r0, r0, r7, lsr ip
     c28:	001c5f1a 	andseq	r5, ip, sl, lsl pc
     c2c:	b1440300 	mrslt	r0, SPSR_abt
     c30:	0200000a 	andeq	r0, r0, #10
     c34:	1f007091 	svcne	0x00007091
     c38:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c3c:	0df42503 	cfldr64eq	mvdx2, [r4, #12]!
     c40:	00a42000 	adceq	r2, r4, r0
     c44:	9c010000 	stcls	0, cr0, [r1], {-0}
     c48:	00000c89 	andeq	r0, r0, r9, lsl #25
     c4c:	00068425 	andeq	r8, r6, r5, lsr #8
     c50:	89250300 	stmdbhi	r5!, {r8, r9}
     c54:	0200000c 	andeq	r0, r0, #12
     c58:	3c256c91 	stccc	12, cr6, [r5], #-580	; 0xfffffdbc
     c5c:	0300000d 	movweq	r0, #13
     c60:	0002c325 	andeq	ip, r2, r5, lsr #6
     c64:	68910200 	ldmvs	r1, {r9}
     c68:	000c3c1a 	andeq	r3, ip, sl, lsl ip
     c6c:	c3270300 			; <UNDEFINED> instruction: 0xc3270300
     c70:	02000002 	andeq	r0, r0, #2
     c74:	00267491 	mlaeq	r6, r1, r4, r7
     c78:	21000000 	mrscs	r0, (UNDEF: 0)
     c7c:	28030069 	stmdacs	r3, {r0, r3, r5, r6}
     c80:	000002c3 	andeq	r0, r0, r3, asr #5
     c84:	00709102 	rsbseq	r9, r0, r2, lsl #2
     c88:	2f042700 	svccs	0x00042700
     c8c:	1f00000b 	svcne	0x0000000b
     c90:	00000772 	andeq	r0, r0, r2, ror r7
     c94:	0da81a03 			; <UNDEFINED> instruction: 0x0da81a03
     c98:	004c2000 	subeq	r2, ip, r0
     c9c:	9c010000 	stcls	0, cr0, [r1], {-0}
     ca0:	00000cc9 	andeq	r0, r0, r9, asr #25
     ca4:	00068425 	andeq	r8, r6, r5, lsr #8
     ca8:	c91a0300 	ldmdbgt	sl, {r8, r9}
     cac:	0200000c 	andeq	r0, r0, #12
     cb0:	b0206c91 	mlalt	r0, r1, ip, r6
     cb4:	3220000d 	eorcc	r0, r0, #13
     cb8:	21000000 	mrscs	r0, (UNDEF: 0)
     cbc:	1c030069 	stcne	0, cr0, [r3], {105}	; 0x69
     cc0:	000002c3 	andeq	r0, r0, r3, asr #5
     cc4:	00749102 	rsbseq	r9, r4, r2, lsl #2
     cc8:	c3042700 	movwgt	r2, #18176	; 0x4700
     ccc:	23000002 	movwcs	r0, #2
     cd0:	00000ca2 	andeq	r0, r0, r2, lsr #25
     cd4:	00000b03 	andeq	r0, r0, r3, lsl #22
     cd8:	000c2000 	andeq	r2, ip, r0
     cdc:	9c010000 	stcls	0, cr0, [r1], {-0}
     ce0:	000b1e28 	andeq	r1, fp, r8, lsr #28
     ce4:	0c5e0200 	lfmeq	f0, 2, [lr], {-0}
     ce8:	20000d88 	andcs	r0, r0, r8, lsl #27
     cec:	00000020 	andeq	r0, r0, r0, lsr #32
     cf0:	0d069c01 	stceq	12, cr9, [r6, #-4]
     cf4:	68290000 	stmdavs	r9!, {}	; <UNPREDICTABLE>
     cf8:	0200000f 	andeq	r0, r0, #15
     cfc:	02d10c5e 	sbcseq	r0, r1, #24064	; 0x5e00
     d00:	91020000 	mrsls	r0, (UNDEF: 2)
     d04:	cf2a0077 	svcgt	0x002a0077
     d08:	0200000a 	andeq	r0, r0, #10
     d0c:	06750c3c 			; <UNDEFINED> instruction: 0x06750c3c
     d10:	0d440000 	stcleq	0, cr0, [r4, #-0]
     d14:	00442000 	subeq	r2, r4, r0
     d18:	9c010000 	stcls	0, cr0, [r1], {-0}
     d1c:	00000d3f 	andeq	r0, r0, pc, lsr sp
     d20:	000f6829 	andeq	r6, pc, r9, lsr #16
     d24:	0c3c0200 	lfmeq	f0, 4, [ip], #-0
     d28:	000002d1 	ldrdeq	r0, [r0], -r1
     d2c:	2b6f9102 	blcs	1be513c <startup-0x1e41aec4>
     d30:	00000f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
     d34:	750c3e02 	strvc	r3, [ip, #-3586]	; 0xfffff1fe
     d38:	02000006 	andeq	r0, r0, #6
     d3c:	2c007791 	stccs	7, cr7, [r0], {145}	; 0x91
     d40:	0000068c 	andeq	r0, r0, ip, lsl #13
     d44:	280c2802 	stmdacs	ip, {r1, fp, sp}
     d48:	1c20000d 	stcne	0, cr0, [r0], #-52	; 0xffffffcc
     d4c:	01000000 	mrseq	r0, (UNDEF: 0)
     d50:	09ff2a9c 	ldmibeq	pc!, {r2, r3, r4, r7, r9, fp, sp}^	; <UNPREDICTABLE>
     d54:	fb020000 	blx	80d5e <startup-0x1ff7f2a2>
     d58:	0006690b 	andeq	r6, r6, fp, lsl #18
     d5c:	000ca400 	andeq	sl, ip, r0, lsl #8
     d60:	00008420 	andeq	r8, r0, r0, lsr #8
     d64:	a89c0100 	ldmge	ip, {r8}
     d68:	2900000d 	stmdbcs	r0, {r0, r2, r3}
     d6c:	00000ac6 	andeq	r0, r0, r6, asr #21
     d70:	d10bfb02 	tstle	fp, r2, lsl #22	; <UNPREDICTABLE>
     d74:	02000002 	andeq	r0, r0, #2
     d78:	742d6791 	strtvc	r6, [sp], #-1937	; 0xfffff86f
     d7c:	0200706d 	andeq	r7, r0, #109	; 0x6d
     d80:	030b0bfd 	movweq	r0, #48125	; 0xbbfd
     d84:	91020000 	mrsls	r0, (UNDEF: 2)
     d88:	0b732b6c 	bleq	1ccbb40 <startup-0x1e3344c0>
     d8c:	fe020000 	cdp2	0, 0, cr0, cr2, cr0, {0}
     d90:	00030b0b 	andeq	r0, r3, fp, lsl #22
     d94:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     d98:	000f922b 	andeq	r9, pc, fp, lsr #4
     d9c:	0bff0200 	bleq	fffc15a4 <GPIO_Pins+0xdffbecd8>
     da0:	00000669 	andeq	r0, r0, r9, ror #12
     da4:	00739102 	rsbseq	r9, r3, r2, lsl #2
     da8:	000a3228 	andeq	r3, sl, r8, lsr #4
     dac:	0bd60200 	bleq	ff5815b4 <GPIO_Pins+0xdf57ece8>
     db0:	20000c54 	andcs	r0, r0, r4, asr ip
     db4:	00000050 	andeq	r0, r0, r0, asr r0
     db8:	0ddd9c01 	ldcleq	12, cr9, [sp, #4]
     dbc:	68290000 	stmdavs	r9!, {}	; <UNPREDICTABLE>
     dc0:	0200000f 	andeq	r0, r0, #15
     dc4:	02d10bd6 	sbcseq	r0, r1, #219136	; 0x35800
     dc8:	91020000 	mrsls	r0, (UNDEF: 2)
     dcc:	0afd2977 	beq	fff4b3b0 <GPIO_Pins+0xdff48ae4>
     dd0:	d6020000 	strle	r0, [r2], -r0
     dd4:	00069c0b 	andeq	r9, r6, fp, lsl #24
     dd8:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     ddc:	0d982800 	ldceq	8, cr2, [r8]
     de0:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
     de4:	000c180a 	andeq	r1, ip, sl, lsl #16
     de8:	00003c20 	andeq	r3, r0, r0, lsr #24
     dec:	039c0100 	orrseq	r0, ip, #0, 2
     df0:	2900000e 	stmdbcs	r0, {r1, r2, r3}
     df4:	00000133 	andeq	r0, r0, r3, lsr r1
     df8:	d10a9e02 	tstle	sl, r2, lsl #28
     dfc:	02000002 	andeq	r0, r0, #2
     e00:	28007791 	stmdacs	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
     e04:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     e08:	d80a8602 	stmdale	sl, {r1, r9, sl, pc}
     e0c:	4020000b 	eormi	r0, r0, fp
     e10:	01000000 	mrseq	r0, (UNDEF: 0)
     e14:	000e389c 	muleq	lr, ip, r8
     e18:	0b7d2900 	bleq	1f4b220 <startup-0x1e0b4de0>
     e1c:	86020000 	strhi	r0, [r2], -r0
     e20:	00030b0a 	andeq	r0, r3, sl, lsl #22
     e24:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     e28:	000afd29 	andeq	pc, sl, r9, lsr #26
     e2c:	0a860200 	beq	fe181634 <GPIO_Pins+0xde17ed68>
     e30:	0000069c 	muleq	r0, ip, r6
     e34:	00739102 	rsbseq	r9, r3, r2, lsl #2
     e38:	000faa28 	andeq	sl, pc, r8, lsr #20
     e3c:	0a520200 	beq	1481644 <startup-0x1eb7e9bc>
     e40:	20000b98 	mulcs	r0, r8, fp
     e44:	00000040 	andeq	r0, r0, r0, asr #32
     e48:	0e6d9c01 	cdpeq	12, 6, cr9, cr13, cr1, {0}
     e4c:	95290000 	strls	r0, [r9, #-0]!
     e50:	0200000a 	andeq	r0, r0, #10
     e54:	030b0a52 	movweq	r0, #47698	; 0xba52
     e58:	91020000 	mrsls	r0, (UNDEF: 2)
     e5c:	0afd2974 	beq	fff4b434 <GPIO_Pins+0xdff48b68>
     e60:	52020000 	andpl	r0, r2, #0
     e64:	00069c0a 	andeq	r9, r6, sl, lsl #24
     e68:	73910200 	orrsvc	r0, r1, #0, 4
     e6c:	04db2800 	ldrbeq	r2, [fp], #2048	; 0x800
     e70:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     e74:	000b580a 	andeq	r5, fp, sl, lsl #16
     e78:	00004020 	andeq	r4, r0, r0, lsr #32
     e7c:	a29c0100 	addsge	r0, ip, #0, 2
     e80:	2900000e 	stmdbcs	r0, {r1, r2, r3}
     e84:	0000033a 	andeq	r0, r0, sl, lsr r3
     e88:	0b0a1902 	bleq	287298 <startup-0x1fd78d68>
     e8c:	02000003 	andeq	r0, r0, #3
     e90:	fd297491 	stc2	4, cr7, [r9, #-580]!	; 0xfffffdbc
     e94:	0200000a 	andeq	r0, r0, #10
     e98:	069c0a19 			; <UNDEFINED> instruction: 0x069c0a19
     e9c:	91020000 	mrsls	r0, (UNDEF: 2)
     ea0:	ed280073 	stc	0, cr0, [r8, #-460]!	; 0xfffffe34
     ea4:	02000000 	andeq	r0, r0, #0
     ea8:	0b1809fb 	bleq	60369c <startup-0x1f9fc964>
     eac:	00402000 	subeq	r2, r0, r0
     eb0:	9c010000 	stcls	0, cr0, [r1], {-0}
     eb4:	00000ed7 	ldrdeq	r0, [r0], -r7
     eb8:	00107629 	andseq	r7, r0, r9, lsr #12
     ebc:	09fb0200 	ldmibeq	fp!, {r9}^
     ec0:	0000030b 	andeq	r0, r0, fp, lsl #6
     ec4:	29749102 	ldmdbcs	r4!, {r1, r8, ip, pc}^
     ec8:	00000afd 	strdeq	r0, [r0], -sp
     ecc:	9c09fb02 			; <UNDEFINED> instruction: 0x9c09fb02
     ed0:	02000006 	andeq	r0, r0, #6
     ed4:	28007391 	stmdacs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
     ed8:	00000ffc 	strdeq	r0, [r0], -ip
     edc:	d809db02 	stmdale	r9, {r1, r8, r9, fp, ip, lr, pc}
     ee0:	4020000a 	eormi	r0, r0, sl
     ee4:	01000000 	mrseq	r0, (UNDEF: 0)
     ee8:	000f0c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
     eec:	0e622900 	vmuleq.f16	s5, s4, s0	; <UNPREDICTABLE>
     ef0:	db020000 	blle	80ef8 <startup-0x1ff7f108>
     ef4:	00030b09 	andeq	r0, r3, r9, lsl #22
     ef8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     efc:	000afd29 	andeq	pc, sl, r9, lsr #26
     f00:	09db0200 	ldmibeq	fp, {r9}^
     f04:	0000069c 	muleq	r0, ip, r6
     f08:	00739102 	rsbseq	r9, r3, r2, lsl #2
     f0c:	0004b928 	andeq	fp, r4, r8, lsr #18
     f10:	09aa0200 	stmibeq	sl!, {r9}
     f14:	20000a98 	mulcs	r0, r8, sl
     f18:	00000040 	andeq	r0, r0, r0, asr #32
     f1c:	0f419c01 	svceq	0x00419c01
     f20:	7d290000 	stcvc	0, cr0, [r9, #-0]
     f24:	0200000b 	andeq	r0, r0, #11
     f28:	030b09aa 	movweq	r0, #47530	; 0xb9aa
     f2c:	91020000 	mrsls	r0, (UNDEF: 2)
     f30:	0afd2974 	beq	fff4b508 <GPIO_Pins+0xdff48c3c>
     f34:	aa020000 	bge	80f3c <startup-0x1ff7f0c4>
     f38:	00069c09 	andeq	r9, r6, r9, lsl #24
     f3c:	73910200 	orrsvc	r0, r1, #0, 4
     f40:	011c2800 	tsteq	ip, r0, lsl #16
     f44:	7b020000 	blvc	80f4c <startup-0x1ff7f0b4>
     f48:	000a5809 	andeq	r5, sl, r9, lsl #16
     f4c:	00004020 	andeq	r4, r0, r0, lsr #32
     f50:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
     f54:	2900000f 	stmdbcs	r0, {r0, r1, r2, r3}
     f58:	00000a95 	muleq	r0, r5, sl
     f5c:	0b097b02 	bleq	25fb6c <startup-0x1fda0494>
     f60:	02000003 	andeq	r0, r0, #3
     f64:	fd297491 	stc2	4, cr7, [r9, #-580]!	; 0xfffffdbc
     f68:	0200000a 	andeq	r0, r0, #10
     f6c:	069c097b 			; <UNDEFINED> instruction: 0x069c097b
     f70:	91020000 	mrsls	r0, (UNDEF: 2)
     f74:	7e280073 	mcrvc	0, 1, r0, cr8, cr3, {3}
     f78:	02000002 	andeq	r0, r0, #2
     f7c:	0a180945 	beq	603498 <startup-0x1f9fcb68>
     f80:	00402000 	subeq	r2, r0, r0
     f84:	9c010000 	stcls	0, cr0, [r1], {-0}
     f88:	00000fab 	andeq	r0, r0, fp, lsr #31
     f8c:	00033a29 	andeq	r3, r3, r9, lsr #20
     f90:	09450200 	stmdbeq	r5, {r9}^
     f94:	0000030b 	andeq	r0, r0, fp, lsl #6
     f98:	29749102 	ldmdbcs	r4!, {r1, r8, ip, pc}^
     f9c:	00000afd 	strdeq	r0, [r0], -sp
     fa0:	9c094502 	cfstr32ls	mvfx4, [r9], {2}
     fa4:	02000006 	andeq	r0, r0, #6
     fa8:	28007391 	stmdacs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
     fac:	0000117d 	andeq	r1, r0, sp, ror r1
     fb0:	d8092a02 	stmdale	r9, {r1, r9, fp, sp}
     fb4:	40200009 	eormi	r0, r0, r9
     fb8:	01000000 	mrseq	r0, (UNDEF: 0)
     fbc:	000fe09c 	muleq	pc, ip, r0	; <UNPREDICTABLE>
     fc0:	10762900 	rsbsne	r2, r6, r0, lsl #18
     fc4:	2a020000 	bcs	80fcc <startup-0x1ff7f034>
     fc8:	00030b09 	andeq	r0, r3, r9, lsl #22
     fcc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     fd0:	000afd29 	andeq	pc, sl, r9, lsr #26
     fd4:	092a0200 	stmdbeq	sl!, {r9}
     fd8:	0000069c 	muleq	r0, ip, r6
     fdc:	00739102 	rsbseq	r9, r3, r2, lsl #2
     fe0:	000ee328 	andeq	lr, lr, r8, lsr #6
     fe4:	090d0200 	stmdbeq	sp, {r9}
     fe8:	20000998 	mulcs	r0, r8, r9
     fec:	00000040 	andeq	r0, r0, r0, asr #32
     ff0:	10159c01 	andsne	r9, r5, r1, lsl #24
     ff4:	62290000 	eorvs	r0, r9, #0
     ff8:	0200000e 	andeq	r0, r0, #14
     ffc:	030b090d 	movweq	r0, #47373	; 0xb90d
    1000:	91020000 	mrsls	r0, (UNDEF: 2)
    1004:	0afd2974 	beq	fff4b5dc <GPIO_Pins+0xdff48d10>
    1008:	0d020000 	stceq	0, cr0, [r2, #-0]
    100c:	00069c09 	andeq	r9, r6, r9, lsl #24
    1010:	73910200 	orrsvc	r0, r1, #0, 4
    1014:	07f62800 	ldrbeq	r2, [r6, r0, lsl #16]!
    1018:	e3020000 	movw	r0, #8192	; 0x2000
    101c:	00095808 	andeq	r5, r9, r8, lsl #16
    1020:	00004020 	andeq	r4, r0, r0, lsr #32
    1024:	4a9c0100 	bmi	fe70142c <GPIO_Pins+0xde6feb60>
    1028:	29000010 	stmdbcs	r0, {r4}
    102c:	00000b7d 	andeq	r0, r0, sp, ror fp
    1030:	0b08e302 	bleq	239c40 <startup-0x1fdc63c0>
    1034:	02000003 	andeq	r0, r0, #3
    1038:	fd297491 	stc2	4, cr7, [r9, #-580]!	; 0xfffffdbc
    103c:	0200000a 	andeq	r0, r0, #10
    1040:	069c08e3 	ldreq	r0, [ip], r3, ror #17
    1044:	91020000 	mrsls	r0, (UNDEF: 2)
    1048:	be280073 	mcrlt	0, 1, r0, cr8, cr3, {3}
    104c:	02000003 	andeq	r0, r0, #3
    1050:	091808af 	ldmdbeq	r8, {r0, r1, r2, r3, r5, r7, fp}
    1054:	00402000 	subeq	r2, r0, r0
    1058:	9c010000 	stcls	0, cr0, [r1], {-0}
    105c:	0000107f 	andeq	r1, r0, pc, ror r0
    1060:	000a9529 	andeq	r9, sl, r9, lsr #10
    1064:	08af0200 	stmiaeq	pc!, {r9}	; <UNPREDICTABLE>
    1068:	0000030b 	andeq	r0, r0, fp, lsl #6
    106c:	29749102 	ldmdbcs	r4!, {r1, r8, ip, pc}^
    1070:	00000afd 	strdeq	r0, [r0], -sp
    1074:	9c08af02 	stcls	15, cr10, [r8], {2}
    1078:	02000006 	andeq	r0, r0, #6
    107c:	28007391 	stmdacs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    1080:	00000c18 	andeq	r0, r0, r8, lsl ip
    1084:	d8087602 	stmdale	r8, {r1, r9, sl, ip, sp, lr}
    1088:	40200008 	eormi	r0, r0, r8
    108c:	01000000 	mrseq	r0, (UNDEF: 0)
    1090:	0010b49c 	mulseq	r0, ip, r4
    1094:	033a2900 	teqeq	sl, #0, 18
    1098:	76020000 	strvc	r0, [r2], -r0
    109c:	00030b08 	andeq	r0, r3, r8, lsl #22
    10a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    10a4:	000afd29 	andeq	pc, sl, r9, lsr #26
    10a8:	08760200 	ldmdaeq	r6!, {r9}^
    10ac:	0000069c 	muleq	r0, ip, r6
    10b0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    10b4:	00015728 	andeq	r5, r1, r8, lsr #14
    10b8:	08580200 	ldmdaeq	r8, {r9}^
    10bc:	20000898 	mulcs	r0, r8, r8
    10c0:	00000040 	andeq	r0, r0, r0, asr #32
    10c4:	10e99c01 	rscne	r9, r9, r1, lsl #24
    10c8:	76290000 	strtvc	r0, [r9], -r0
    10cc:	02000010 	andeq	r0, r0, #16
    10d0:	030b0858 	movweq	r0, #47192	; 0xb858
    10d4:	91020000 	mrsls	r0, (UNDEF: 2)
    10d8:	0afd2974 	beq	fff4b6b0 <GPIO_Pins+0xdff48de4>
    10dc:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    10e0:	00069c08 	andeq	r9, r6, r8, lsl #24
    10e4:	73910200 	orrsvc	r0, r1, #0, 4
    10e8:	10aa2800 	adcne	r2, sl, r0, lsl #16
    10ec:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    10f0:	00085808 	andeq	r5, r8, r8, lsl #16
    10f4:	00004020 	andeq	r4, r0, r0, lsr #32
    10f8:	1e9c0100 	fmlnee	f0, f4, f0
    10fc:	29000011 	stmdbcs	r0, {r0, r4}
    1100:	00000e62 	andeq	r0, r0, r2, ror #28
    1104:	0b083802 	bleq	20f114 <startup-0x1fdf0eec>
    1108:	02000003 	andeq	r0, r0, #3
    110c:	fd297491 	stc2	4, cr7, [r9, #-580]!	; 0xfffffdbc
    1110:	0200000a 	andeq	r0, r0, #10
    1114:	069c0838 			; <UNDEFINED> instruction: 0x069c0838
    1118:	91020000 	mrsls	r0, (UNDEF: 2)
    111c:	73280073 			; <UNDEFINED> instruction: 0x73280073
    1120:	02000001 	andeq	r0, r0, #1
    1124:	083c080e 	ldmdaeq	ip!, {r1, r2, r3, fp}
    1128:	001c2000 	andseq	r2, ip, r0
    112c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1130:	00001144 	andeq	r1, r0, r4, asr #2
    1134:	00115e29 	andseq	r5, r1, r9, lsr #28
    1138:	080e0200 	stmdaeq	lr, {r9}
    113c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1140:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1144:	00024a28 	andeq	r4, r2, r8, lsr #20
    1148:	078e0200 	streq	r0, [lr, r0, lsl #4]
    114c:	20000800 	andcs	r0, r0, r0, lsl #16
    1150:	0000003c 	andeq	r0, r0, ip, lsr r0
    1154:	11799c01 	cmnne	r9, r1, lsl #24
    1158:	1c290000 	stcne	0, cr0, [r9], #-0
    115c:	02000008 	andeq	r0, r0, #8
    1160:	030b078e 	movweq	r0, #46990	; 0xb78e
    1164:	91020000 	mrsls	r0, (UNDEF: 2)
    1168:	0e382b6c 	vsubeq.f64	d2, d8, d28
    116c:	90020000 	andls	r0, r2, r0
    1170:	00030b07 	andeq	r0, r3, r7, lsl #22
    1174:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1178:	020a2800 	andeq	r2, sl, #0, 16
    117c:	2b020000 	blcs	81184 <startup-0x1ff7ee7c>
    1180:	0007c007 	andeq	ip, r7, r7
    1184:	00004020 	andeq	r4, r0, r0, lsr #32
    1188:	ae9c0100 	fmlgee	f0, f4, f0
    118c:	29000011 	stmdbcs	r0, {r0, r4}
    1190:	0000080d 	andeq	r0, r0, sp, lsl #16
    1194:	0b072b02 	bleq	1cbda4 <startup-0x1fe3425c>
    1198:	02000003 	andeq	r0, r0, #3
    119c:	382b6c91 	stmdacc	fp!, {r0, r4, r7, sl, fp, sp, lr}
    11a0:	0200000e 	andeq	r0, r0, #14
    11a4:	030b072d 	movweq	r0, #46893	; 0xb72d
    11a8:	91020000 	mrsls	r0, (UNDEF: 2)
    11ac:	7a280074 	bvc	a01384 <startup-0x1f5fec7c>
    11b0:	02000009 	andeq	r0, r0, #9
    11b4:	0784070b 	streq	r0, [r4, fp, lsl #14]
    11b8:	003c2000 	eorseq	r2, ip, r0
    11bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    11c0:	000011e3 	andeq	r1, r0, r3, ror #3
    11c4:	00031e29 	andeq	r1, r3, r9, lsr #28
    11c8:	070b0200 	streq	r0, [fp, -r0, lsl #4]
    11cc:	0000030b 	andeq	r0, r0, fp, lsl #6
    11d0:	2b6c9102 	blcs	1b255e0 <startup-0x1e4daa20>
    11d4:	00000e38 	andeq	r0, r0, r8, lsr lr
    11d8:	0b070d02 	bleq	1c45e8 <startup-0x1fe3ba18>
    11dc:	02000003 	andeq	r0, r0, #3
    11e0:	28007491 	stmdacs	r0, {r0, r4, r7, sl, ip, sp, lr}
    11e4:	000002e1 	andeq	r0, r0, r1, ror #5
    11e8:	4806ea02 	stmdami	r6, {r1, r9, fp, sp, lr, pc}
    11ec:	3c200007 	stccc	0, cr0, [r0], #-28	; 0xffffffe4
    11f0:	01000000 	mrseq	r0, (UNDEF: 0)
    11f4:	0012189c 	mulseq	r2, ip, r8
    11f8:	082b2900 	stmdaeq	fp!, {r8, fp, sp}
    11fc:	ea020000 	b	81204 <startup-0x1ff7edfc>
    1200:	00030b06 	andeq	r0, r3, r6, lsl #22
    1204:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1208:	000e382b 	andeq	r3, lr, fp, lsr #16
    120c:	06ec0200 	strbteq	r0, [ip], r0, lsl #4
    1210:	0000030b 	andeq	r0, r0, fp, lsl #6
    1214:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1218:	0006d628 	andeq	sp, r6, r8, lsr #12
    121c:	06c60200 	strbeq	r0, [r6], r0, lsl #4
    1220:	2000070c 	andcs	r0, r0, ip, lsl #14
    1224:	0000003c 	andeq	r0, r0, ip, lsr r0
    1228:	124d9c01 	subne	r9, sp, #256	; 0x100
    122c:	4f290000 	svcmi	0x00290000
    1230:	0200000b 	andeq	r0, r0, #11
    1234:	030b06c6 	movweq	r0, #46790	; 0xb6c6
    1238:	91020000 	mrsls	r0, (UNDEF: 2)
    123c:	0e382b6c 	vsubeq.f64	d2, d8, d28
    1240:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
    1244:	00030b06 	andeq	r0, r3, r6, lsl #22
    1248:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    124c:	00572800 	subseq	r2, r7, r0, lsl #16
    1250:	ab020000 	blge	81258 <startup-0x1ff7eda8>
    1254:	0006f006 	andeq	pc, r6, r6
    1258:	00001c20 	andeq	r1, r0, r0, lsr #24
    125c:	739c0100 	orrsvc	r0, ip, #0, 2
    1260:	29000012 	stmdbcs	r0, {r1, r4}
    1264:	000008c3 	andeq	r0, r0, r3, asr #17
    1268:	0b06ab02 	bleq	1abe78 <startup-0x1fe54188>
    126c:	02000003 	andeq	r0, r0, #3
    1270:	28007491 	stmdacs	r0, {r0, r4, r7, sl, ip, sp, lr}
    1274:	00000c63 	andeq	r0, r0, r3, ror #24
    1278:	d005ef02 	andle	lr, r5, r2, lsl #30
    127c:	20200006 	eorcs	r0, r0, r6
    1280:	01000000 	mrseq	r0, (UNDEF: 0)
    1284:	0012999c 	mulseq	r2, ip, r9
    1288:	0afd2900 	beq	fff4b690 <GPIO_Pins+0xdff48dc4>
    128c:	ef020000 	svc	0x00020000
    1290:	00069c05 	andeq	r9, r6, r5, lsl #24
    1294:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1298:	10432800 	subne	r2, r3, r0, lsl #16
    129c:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    12a0:	0006b005 	andeq	fp, r6, r5
    12a4:	00002020 	andeq	r2, r0, r0, lsr #32
    12a8:	bf9c0100 	svclt	0x009c0100
    12ac:	29000012 	stmdbcs	r0, {r1, r4}
    12b0:	00000afd 	strdeq	r0, [r0], -sp
    12b4:	9c05de02 	stcls	14, cr13, [r5], {2}
    12b8:	02000006 	andeq	r0, r0, #6
    12bc:	28007791 	stmdacs	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    12c0:	00000aa4 	andeq	r0, r0, r4, lsr #21
    12c4:	5005be02 	andpl	fp, r5, r2, lsl #28
    12c8:	60200006 	eorvs	r0, r0, r6
    12cc:	01000000 	mrseq	r0, (UNDEF: 0)
    12d0:	0012f49c 	mulseq	r2, ip, r4
    12d4:	01462900 	cmpeq	r6, r0, lsl #18
    12d8:	be020000 	cdplt	0, 0, cr0, cr2, cr0, {0}
    12dc:	00030b05 	andeq	r0, r3, r5, lsl #22
    12e0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    12e4:	000e382b 	andeq	r3, lr, fp, lsr #16
    12e8:	05c00200 	strbeq	r0, [r0, #512]	; 0x200
    12ec:	0000030b 	andeq	r0, r0, fp, lsl #6
    12f0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    12f4:	0000682e 	andeq	r6, r0, lr, lsr #16
    12f8:	05250200 	streq	r0, [r5, #-512]!	; 0xfffffe00
    12fc:	200004f8 	strdcs	r0, [r0], -r8
    1300:	00000158 	andeq	r0, r0, r8, asr r1
    1304:	13749c01 	cmnne	r4, #256	; 0x100
    1308:	11290000 			; <UNDEFINED> instruction: 0x11290000
    130c:	0200000a 	andeq	r0, r0, #10
    1310:	13740525 	cmnne	r4, #155189248	; 0x9400000
    1314:	91020000 	mrsls	r0, (UNDEF: 2)
    1318:	6d742d5c 	ldclvs	13, cr2, [r4, #-368]!	; 0xfffffe90
    131c:	27020070 	smlsdxcs	r2, r0, r0, r0
    1320:	00030b05 	andeq	r0, r3, r5, lsl #22
    1324:	70910200 	addsvc	r0, r1, r0, lsl #4
    1328:	0011772b 	andseq	r7, r1, fp, lsr #14
    132c:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    1330:	0000030b 	andeq	r0, r0, fp, lsl #6
    1334:	2b6c9102 	blcs	1b25744 <startup-0x1e4da8bc>
    1338:	00000fa3 	andeq	r0, r0, r3, lsr #31
    133c:	0b052702 	bleq	14af4c <startup-0x1feb50b4>
    1340:	02000003 	andeq	r0, r0, #3
    1344:	002b7491 	mlaeq	fp, r1, r4, r7
    1348:	02000000 	andeq	r0, r0, #0
    134c:	030b0527 	movweq	r0, #46375	; 0xb527
    1350:	91020000 	mrsls	r0, (UNDEF: 2)
    1354:	05c42b68 	strbeq	r2, [r4, #2920]	; 0xb68
    1358:	27020000 	strcs	r0, [r2, -r0]
    135c:	00030b05 	andeq	r0, r3, r5, lsl #22
    1360:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1364:	0011eb2b 	andseq	lr, r1, fp, lsr #22
    1368:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    136c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1370:	00609102 	rsbeq	r9, r0, r2, lsl #2
    1374:	09840427 	stmibeq	r4, {r0, r1, r2, r5, sl}
    1378:	ba280000 	blt	a01380 <startup-0x1f5fec80>
    137c:	02000002 	andeq	r0, r0, #2
    1380:	04bc04f1 	ldrteq	r0, [ip], #1265	; 0x4f1
    1384:	003c2000 	eorseq	r2, ip, r0
    1388:	9c010000 	stcls	0, cr0, [r1], {-0}
    138c:	000013af 	andeq	r1, r0, pc, lsr #7
    1390:	00019629 	andeq	r9, r1, r9, lsr #12
    1394:	04f10200 	ldrbteq	r0, [r1], #512	; 0x200
    1398:	0000030b 	andeq	r0, r0, fp, lsl #6
    139c:	2b6c9102 	blcs	1b257ac <startup-0x1e4da854>
    13a0:	00000e38 	andeq	r0, r0, r8, lsr lr
    13a4:	0b04f302 	bleq	13dfb4 <startup-0x1fec204c>
    13a8:	02000003 	andeq	r0, r0, #3
    13ac:	28007491 	stmdacs	r0, {r0, r4, r7, sl, ip, sp, lr}
    13b0:	000008ef 	andeq	r0, r0, pc, ror #17
    13b4:	8404d202 	strhi	sp, [r4], #-514	; 0xfffffdfe
    13b8:	38200004 	stmdacc	r0!, {r2}
    13bc:	01000000 	mrseq	r0, (UNDEF: 0)
    13c0:	0013e49c 	mulseq	r3, ip, r4
    13c4:	01962900 	orrseq	r2, r6, r0, lsl #18
    13c8:	d2020000 	andle	r0, r2, #0
    13cc:	00030b04 	andeq	r0, r3, r4, lsl #22
    13d0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    13d4:	000e382b 	andeq	r3, lr, fp, lsr #16
    13d8:	04d40200 	ldrbeq	r0, [r4], #512	; 0x200
    13dc:	0000030b 	andeq	r0, r0, fp, lsl #6
    13e0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    13e4:	000b8c28 	andeq	r8, fp, r8, lsr #24
    13e8:	04b30200 	ldrteq	r0, [r3], #512	; 0x200
    13ec:	20000450 	andcs	r0, r0, r0, asr r4
    13f0:	00000034 	andeq	r0, r0, r4, lsr r0
    13f4:	14199c01 	ldrne	r9, [r9], #-3073	; 0xfffff3ff
    13f8:	8a290000 	bhi	a41400 <startup-0x1f5bec00>
    13fc:	02000005 	andeq	r0, r0, #5
    1400:	030b04b3 	movweq	r0, #46259	; 0xb4b3
    1404:	91020000 	mrsls	r0, (UNDEF: 2)
    1408:	0e382b6c 	vsubeq.f64	d2, d8, d28
    140c:	b5020000 	strlt	r0, [r2, #-0]
    1410:	00030b04 	andeq	r0, r3, r4, lsl #22
    1414:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1418:	03002f00 	movweq	r2, #3840	; 0xf00
    141c:	9a020000 	bls	81424 <startup-0x1ff7ebdc>
    1420:	0002d104 	andeq	sp, r2, r4, lsl #2
    1424:	00043400 	andeq	r3, r4, r0, lsl #8
    1428:	00001c20 	andeq	r1, r0, r0, lsr #24
    142c:	289c0100 	ldmcs	ip, {r8}
    1430:	000011aa 	andeq	r1, r0, sl, lsr #3
    1434:	00047d02 	andeq	r7, r4, r2, lsl #26
    1438:	34200004 	strtcc	r0, [r0], #-4
    143c:	01000000 	mrseq	r0, (UNDEF: 0)
    1440:	0014649c 	mulseq	r4, ip, r4
    1444:	038d2900 	orreq	r2, sp, #0, 18
    1448:	7d020000 	stcvc	0, cr0, [r2, #-0]
    144c:	00030b04 	andeq	r0, r3, r4, lsl #22
    1450:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1454:	000e382b 	andeq	r3, lr, fp, lsr #16
    1458:	047f0200 	ldrbteq	r0, [pc], #-512	; 1460 <startup-0x1fffeba0>
    145c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1460:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1464:	0008af28 	andeq	sl, r8, r8, lsr #30
    1468:	03b50200 			; <UNDEFINED> instruction: 0x03b50200
    146c:	200003c4 	andcs	r0, r0, r4, asr #7
    1470:	0000003c 	andeq	r0, r0, ip, lsr r0
    1474:	14a89c01 	strtne	r9, [r8], #3073	; 0xc01
    1478:	aa290000 	bge	a41480 <startup-0x1f5beb80>
    147c:	0200000c 	andeq	r0, r0, #12
    1480:	030b03b5 	movweq	r0, #46005	; 0xb3b5
    1484:	91020000 	mrsls	r0, (UNDEF: 2)
    1488:	0362296c 	cmneq	r2, #108, 18	; 0x1b0000
    148c:	b5020000 	strlt	r0, [r2, #-0]
    1490:	00030b03 	andeq	r0, r3, r3, lsl #22
    1494:	68910200 	ldmvs	r1, {r9}
    1498:	000e382b 	andeq	r3, lr, fp, lsr #16
    149c:	03b70200 			; <UNDEFINED> instruction: 0x03b70200
    14a0:	0000030b 	andeq	r0, r0, fp, lsl #6
    14a4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    14a8:	000a3f28 	andeq	r3, sl, r8, lsr #30
    14ac:	03880200 	orreq	r0, r8, #0, 4
    14b0:	20000384 	andcs	r0, r0, r4, lsl #7
    14b4:	00000040 	andeq	r0, r0, r0, asr #32
    14b8:	14ec9c01 	strbtne	r9, [ip], #3073	; 0xc01
    14bc:	09290000 	stmdbeq	r9!, {}	; <UNPREDICTABLE>
    14c0:	0200000c 	andeq	r0, r0, #12
    14c4:	030b0388 	movweq	r0, #45960	; 0xb388
    14c8:	91020000 	mrsls	r0, (UNDEF: 2)
    14cc:	0d30296c 			; <UNDEFINED> instruction: 0x0d30296c
    14d0:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    14d4:	00030b03 	andeq	r0, r3, r3, lsl #22
    14d8:	68910200 	ldmvs	r1, {r9}
    14dc:	000e382b 	andeq	r3, lr, fp, lsr #16
    14e0:	038a0200 	orreq	r0, sl, #0, 4
    14e4:	0000030b 	andeq	r0, r0, fp, lsl #6
    14e8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    14ec:	000b3428 	andeq	r3, fp, r8, lsr #8
    14f0:	036f0200 	cmneq	pc, #0, 4
    14f4:	20000364 	andcs	r0, r0, r4, ror #6
    14f8:	00000020 	andeq	r0, r0, r0, lsr #32
    14fc:	15129c01 	ldrne	r9, [r2, #-3073]	; 0xfffff3ff
    1500:	fd290000 	stc2	0, cr0, [r9, #-0]
    1504:	0200000a 	andeq	r0, r0, #10
    1508:	069c036f 	ldreq	r0, [ip], pc, ror #6
    150c:	91020000 	mrsls	r0, (UNDEF: 2)
    1510:	94280077 	strtls	r0, [r8], #-119	; 0xffffff89
    1514:	02000011 	andeq	r0, r0, #17
    1518:	0344035d 	movteq	r0, #17245	; 0x435d
    151c:	00202000 	eoreq	r2, r0, r0
    1520:	9c010000 	stcls	0, cr0, [r1], {-0}
    1524:	00001538 	andeq	r1, r0, r8, lsr r5
    1528:	000afd29 	andeq	pc, sl, r9, lsr #26
    152c:	035d0200 	cmpeq	sp, #0, 4
    1530:	0000069c 	muleq	r0, ip, r6
    1534:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1538:	0006fc28 	andeq	pc, r6, r8, lsr #24
    153c:	03490200 	movteq	r0, #37376	; 0x9200
    1540:	20000314 	andcs	r0, r0, r4, lsl r3
    1544:	00000030 	andeq	r0, r0, r0, lsr r0
    1548:	157c9c01 	ldrbne	r9, [ip, #-3073]!	; 0xfffff3ff
    154c:	f1290000 			; <UNDEFINED> instruction: 0xf1290000
    1550:	0200000b 	andeq	r0, r0, #11
    1554:	030b0349 	movweq	r0, #45897	; 0xb349
    1558:	91020000 	mrsls	r0, (UNDEF: 2)
    155c:	0bf92974 	bleq	ffe4bb34 <GPIO_Pins+0xdfe49268>
    1560:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    1564:	00030b03 	andeq	r0, r3, r3, lsl #22
    1568:	70910200 	addsvc	r0, r1, r0, lsl #4
    156c:	000c0129 	andeq	r0, ip, r9, lsr #2
    1570:	03490200 	movteq	r0, #37376	; 0x9200
    1574:	0000030b 	andeq	r0, r0, fp, lsl #6
    1578:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    157c:	00018828 	andeq	r8, r1, r8, lsr #16
    1580:	02dc0200 	sbcseq	r0, ip, #0, 4
    1584:	200002f4 	strdcs	r0, [r0], -r4
    1588:	00000020 	andeq	r0, r0, r0, lsr #32
    158c:	15a29c01 	strne	r9, [r2, #3073]!	; 0xc01
    1590:	fd290000 	stc2	0, cr0, [r9, #-0]
    1594:	0200000a 	andeq	r0, r0, #10
    1598:	069c02dc 			; <UNDEFINED> instruction: 0x069c02dc
    159c:	91020000 	mrsls	r0, (UNDEF: 2)
    15a0:	d4280077 	strtle	r0, [r8], #-119	; 0xffffff89
    15a4:	02000010 	andeq	r0, r0, #16
    15a8:	02cc0251 	sbceq	r0, ip, #268435461	; 0x10000005
    15ac:	00282000 	eoreq	r2, r8, r0
    15b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    15b4:	000015d7 	ldrdeq	r1, [r0], -r7
    15b8:	000ff429 	andeq	pc, pc, r9, lsr #8
    15bc:	02510200 	subseq	r0, r1, #0, 4
    15c0:	0000030b 	andeq	r0, r0, fp, lsl #6
    15c4:	29749102 	ldmdbcs	r4!, {r1, r8, ip, pc}^
    15c8:	00001019 	andeq	r1, r0, r9, lsl r0
    15cc:	0b025102 	bleq	959dc <startup-0x1ff6a624>
    15d0:	02000003 	andeq	r0, r0, #3
    15d4:	28007091 	stmdacs	r0, {r0, r4, r7, ip, sp, lr}
    15d8:	00000c58 	andeq	r0, r0, r8, asr ip
    15dc:	ac023302 	stcge	3, cr3, [r2], {2}
    15e0:	20200002 	eorcs	r0, r0, r2
    15e4:	01000000 	mrseq	r0, (UNDEF: 0)
    15e8:	0015fd9c 	mulseq	r5, ip, sp
    15ec:	0afd2900 	beq	fff4b9f4 <GPIO_Pins+0xdff49128>
    15f0:	33020000 	movwcc	r0, #8192	; 0x2000
    15f4:	00069c02 	andeq	r9, r6, r2, lsl #24
    15f8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    15fc:	11dd2800 	bicsne	r2, sp, r0, lsl #16
    1600:	1b020000 	blne	81608 <startup-0x1ff7e9f8>
    1604:	00027002 	andeq	r7, r2, r2
    1608:	00003c20 	andeq	r3, r0, r0, lsr #24
    160c:	5f9c0100 	svcpl	0x009c0100
    1610:	29000016 	stmdbcs	r0, {r1, r2, r4}
    1614:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    1618:	0b021b02 	bleq	88228 <startup-0x1ff77dd8>
    161c:	02000003 	andeq	r0, r0, #3
    1620:	a5297491 	strge	r7, [r9, #-1169]!	; 0xfffffb6f
    1624:	02000005 	andeq	r0, r0, #5
    1628:	030b021b 	movweq	r0, #45595	; 0xb21b
    162c:	91020000 	mrsls	r0, (UNDEF: 2)
    1630:	05aa2970 	streq	r2, [sl, #2416]!	; 0x970
    1634:	1b020000 	blne	8163c <startup-0x1ff7e9c4>
    1638:	00030b02 	andeq	r0, r3, r2, lsl #22
    163c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1640:	0005af29 	andeq	sl, r5, r9, lsr #30
    1644:	021b0200 	andseq	r0, fp, #0, 4
    1648:	0000030b 	andeq	r0, r0, fp, lsl #6
    164c:	29689102 	stmdbcs	r8!, {r1, r8, ip, pc}^
    1650:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    1654:	0b021b02 	bleq	88264 <startup-0x1ff77d9c>
    1658:	02000003 	andeq	r0, r0, #3
    165c:	28000091 	stmdacs	r0, {r0, r4, r7}
    1660:	000005b9 			; <UNDEFINED> instruction: 0x000005b9
    1664:	5001b802 	andpl	fp, r1, r2, lsl #16
    1668:	20200002 	eorcs	r0, r0, r2
    166c:	01000000 	mrseq	r0, (UNDEF: 0)
    1670:	0016859c 	mulseq	r6, ip, r5
    1674:	0afd2900 	beq	fff4ba7c <GPIO_Pins+0xdff491b0>
    1678:	b8020000 	stmdalt	r2, {}	; <UNPREDICTABLE>
    167c:	00069c01 	andeq	r9, r6, r1, lsl #24
    1680:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1684:	04552800 	ldrbeq	r2, [r5], #-2048	; 0xfffff800
    1688:	90020000 	andls	r0, r2, r0
    168c:	00020c01 	andeq	r0, r2, r1, lsl #24
    1690:	00004420 	andeq	r4, r0, r0, lsr #8
    1694:	ab9c0100 	blge	fe701a9c <GPIO_Pins+0xde6ff1d0>
    1698:	29000016 	stmdbcs	r0, {r1, r2, r4}
    169c:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
    16a0:	d1019002 	tstle	r1, r2
    16a4:	02000002 	andeq	r0, r0, #2
    16a8:	28007791 	stmdacs	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    16ac:	00000a4e 	andeq	r0, r0, lr, asr #20
    16b0:	ec017702 	stc	7, cr7, [r1], {2}
    16b4:	20200001 	eorcs	r0, r0, r1
    16b8:	01000000 	mrseq	r0, (UNDEF: 0)
    16bc:	0016d19c 	mulseq	r6, ip, r1
    16c0:	0afd2900 	beq	fff4bac8 <GPIO_Pins+0xdff491fc>
    16c4:	77020000 	strvc	r0, [r2, -r0]
    16c8:	00069c01 	andeq	r9, r6, r1, lsl #24
    16cc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    16d0:	0a622800 	beq	188b6d8 <startup-0x1e774928>
    16d4:	53020000 	movwpl	r0, #8192	; 0x2000
    16d8:	0001ae01 	andeq	sl, r1, r1, lsl #28
    16dc:	00003e20 	andeq	r3, r0, r0, lsr #28
    16e0:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    16e4:	29000017 	stmdbcs	r0, {r0, r1, r2, r4}
    16e8:	00000a6c 	andeq	r0, r0, ip, ror #20
    16ec:	d1015302 	tstle	r1, r2, lsl #6
    16f0:	02000002 	andeq	r0, r0, #2
    16f4:	382b6f91 	stmdacc	fp!, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    16f8:	0200000e 	andeq	r0, r0, #14
    16fc:	030b0155 	movweq	r0, #45397	; 0xb155
    1700:	91020000 	mrsls	r0, (UNDEF: 2)
    1704:	59300074 	ldmdbpl	r0!, {r2, r4, r5, r6}
    1708:	0200000d 	andeq	r0, r0, #13
    170c:	06c30134 			; <UNDEFINED> instruction: 0x06c30134
    1710:	01500000 	cmpeq	r0, r0
    1714:	005e2000 	subseq	r2, lr, r0
    1718:	9c010000 	stcls	0, cr0, [r1], {-0}
    171c:	0000174e 	andeq	r1, r0, lr, asr #14
    1720:	0006ed2b 	andeq	lr, r6, fp, lsr #26
    1724:	01360200 	teqeq	r6, r0, lsl #4
    1728:	00000316 	andeq	r0, r0, r6, lsl r3
    172c:	2b689102 	blcs	1a25b3c <startup-0x1e5da4c4>
    1730:	00000e74 	andeq	r0, r0, r4, ror lr
    1734:	c3013702 	movwgt	r3, #5890	; 0x1702
    1738:	02000006 	andeq	r0, r0, #6
    173c:	712b6f91 			; <UNDEFINED> instruction: 0x712b6f91
    1740:	0200000e 	andeq	r0, r0, #14
    1744:	06690138 			; <UNDEFINED> instruction: 0x06690138
    1748:	91020000 	mrsls	r0, (UNDEF: 2)
    174c:	9a28006e 	bls	a0190c <startup-0x1f5fe6f4>
    1750:	02000006 	andeq	r0, r0, #6
    1754:	0128011c 			; <UNDEFINED> instruction: 0x0128011c
    1758:	00282000 	eoreq	r2, r8, r0
    175c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1760:	00001774 	andeq	r1, r0, r4, ror r7
    1764:	00076a29 	andeq	r6, r7, r9, lsr #20
    1768:	011c0200 	tsteq	ip, r0, lsl #4
    176c:	000002d1 	ldrdeq	r0, [r0], -r1
    1770:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1774:	0002d623 	andeq	sp, r2, r3, lsr #12
    1778:	b8e10200 	stmialt	r1!, {r9}^
    177c:	70200000 	eorvc	r0, r0, r0
    1780:	01000000 	mrseq	r0, (UNDEF: 0)
    1784:	0dca319c 	stfeqe	f3, [sl, #624]	; 0x270
    1788:	e0010000 	and	r0, r1, r0
    178c:	00030b06 	andeq	r0, r3, r6, lsl #22
    1790:	00007000 	andeq	r7, r0, r0
    1794:	00004820 	andeq	r4, r0, r0, lsr #16
    1798:	af9c0100 	svcge	0x009c0100
    179c:	29000017 	stmdbcs	r0, {r0, r1, r2, r4}
    17a0:	00000915 	andeq	r0, r0, r5, lsl r9
    17a4:	0b06e001 	bleq	1b97b0 <startup-0x1fe46850>
    17a8:	02000003 	andeq	r0, r0, #3
    17ac:	32007491 	andcc	r7, r0, #-1862270976	; 0x91000000
    17b0:	00001057 	andeq	r1, r0, r7, asr r0
    17b4:	10065d01 	andne	r5, r6, r1, lsl #26
    17b8:	60200000 	eorvs	r0, r0, r0
    17bc:	01000000 	mrseq	r0, (UNDEF: 0)
    17c0:	0fe2299c 	svceq	0x00e2299c
    17c4:	5d010000 	stcpl	0, cr0, [r1, #-0]
    17c8:	00025a06 	andeq	r5, r2, r6, lsl #20
    17cc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    17d0:	00148229 	andseq	r8, r4, r9, lsr #4
    17d4:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    17d8:	0000030b 	andeq	r0, r0, fp, lsl #6
    17dc:	00709102 	rsbseq	r9, r0, r2, lsl #2
    17e0:	00062300 	andeq	r2, r6, r0, lsl #6
    17e4:	14000400 	strne	r0, [r0], #-1024	; 0xfffffc00
    17e8:	04000003 	streq	r0, [r0], #-3
    17ec:	0005d801 	andeq	sp, r5, r1, lsl #16
    17f0:	12750c00 	rsbsne	r0, r5, #0, 24
    17f4:	05380000 	ldreq	r0, [r8, #-0]!
    17f8:	11780000 	cmnne	r8, r0
    17fc:	050e2000 	streq	r2, [lr, #-0]
    1800:	04b30000 	ldrteq	r0, [r3], #0
    1804:	01020000 	mrseq	r0, (UNDEF: 2)
    1808:	0003eb06 	andeq	lr, r3, r6, lsl #22
    180c:	01c30300 	biceq	r0, r3, r0, lsl #6
    1810:	2b020000 	blcs	81818 <startup-0x1ff7e7e8>
    1814:	00000037 	andeq	r0, r0, r7, lsr r0
    1818:	e9080102 	stmdb	r8, {r1, r8}
    181c:	02000003 	andeq	r0, r0, #3
    1820:	0f4c0502 	svceq	0x004c0502
    1824:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    1828:	02000004 	andeq	r0, r0, #4
    182c:	00005039 	andeq	r5, r0, r9, lsr r0
    1830:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1834:	000010c1 	andeq	r1, r0, r1, asr #1
    1838:	00115403 	andseq	r5, r1, r3, lsl #8
    183c:	624d0200 	subvs	r0, sp, #0, 4
    1840:	02000000 	andeq	r0, r0, #0
    1844:	09a30504 	stmibeq	r3!, {r2, r8, sl}
    1848:	4c030000 	stcmi	0, cr0, [r3], {-0}
    184c:	02000009 	andeq	r0, r0, #9
    1850:	0000744f 	andeq	r7, r0, pc, asr #8
    1854:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1858:	00000d1e 	andeq	r0, r0, lr, lsl sp
    185c:	9e050802 	cdpls	8, 0, cr0, cr5, cr2, {0}
    1860:	02000009 	andeq	r0, r0, #9
    1864:	0d190708 	ldceq	7, cr0, [r9, #-32]	; 0xffffffe0
    1868:	04040000 	streq	r0, [r4], #-0
    186c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1870:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1874:	00000d23 	andeq	r0, r0, r3, lsr #26
    1878:	0001c503 	andeq	ip, r1, r3, lsl #10
    187c:	2c180300 	ldccs	3, cr0, [r8], {-0}
    1880:	03000000 	movweq	r0, #0
    1884:	000004fa 	strdeq	r0, [r0], -sl
    1888:	00452403 	subeq	r2, r5, r3, lsl #8
    188c:	a2050000 	andge	r0, r5, #0
    1890:	03000000 	movweq	r0, #0
    1894:	00001156 	andeq	r1, r0, r6, asr r1
    1898:	00572c03 	subseq	r2, r7, r3, lsl #24
    189c:	b2050000 	andlt	r0, r5, #0
    18a0:	03000000 	movweq	r0, #0
    18a4:	0000094e 	andeq	r0, r0, lr, asr #18
    18a8:	00693003 	rsbeq	r3, r9, r3
    18ac:	c2050000 	andgt	r0, r5, #0
    18b0:	06000000 	streq	r0, [r0], -r0
    18b4:	00000fe7 	andeq	r0, r0, r7, ror #31
    18b8:	bd06fa04 	vstrlt	s30, [r6, #-16]
    18bc:	07000000 	streq	r0, [r0, -r0]
    18c0:	00000858 	andeq	r0, r0, r8, asr r8
    18c4:	00c23b05 	sbceq	r3, r2, r5, lsl #22
    18c8:	07080000 	streq	r0, [r8, -r0]
    18cc:	00003701 	andeq	r3, r0, r1, lsl #14
    18d0:	035f0600 	cmpeq	pc, #0, 12
    18d4:	00000104 	andeq	r0, r0, r4, lsl #2
    18d8:	0009dc09 	andeq	sp, r9, r9, lsl #24
    18dc:	9c090000 	stcls	0, cr0, [r9], {-0}
    18e0:	0100000f 	tsteq	r0, pc
    18e4:	06280a00 	strteq	r0, [r8], -r0, lsl #20
    18e8:	019005c3 	orrseq	r0, r0, r3, asr #11
    18ec:	510b0000 	mrspl	r0, (UNDEF: 11)
    18f0:	06000010 			; <UNDEFINED> instruction: 0x06000010
    18f4:	00cd05c5 	sbceq	r0, sp, r5, asr #11
    18f8:	0b000000 	bleq	1900 <startup-0x1fffe700>
    18fc:	00000e2b 	andeq	r0, r0, fp, lsr #28
    1900:	cd05c606 	stcgt	6, cr12, [r5, #-24]	; 0xffffffe8
    1904:	04000000 	streq	r0, [r0], #-0
    1908:	0008ff0b 	andeq	pc, r8, fp, lsl #30
    190c:	05c70600 	strbeq	r0, [r7, #1536]	; 0x600
    1910:	000000cd 	andeq	r0, r0, sp, asr #1
    1914:	09c60b08 	stmibeq	r6, {r3, r8, r9, fp}^
    1918:	c8060000 	stmdagt	r6, {}	; <UNPREDICTABLE>
    191c:	0000cd05 	andeq	ip, r0, r5, lsl #26
    1920:	490c0c00 	stmdbmi	ip, {sl, fp}
    1924:	06005244 	streq	r5, [r0], -r4, asr #4
    1928:	00cd05c9 	sbceq	r0, sp, r9, asr #11
    192c:	0c100000 	ldceq	0, cr0, [r0], {-0}
    1930:	0052444f 	subseq	r4, r2, pc, asr #8
    1934:	cd05ca06 	vstrgt	s24, [r5, #-24]	; 0xffffffe8
    1938:	14000000 	strne	r0, [r0], #-0
    193c:	000a1c0b 	andeq	r1, sl, fp, lsl #24
    1940:	05cb0600 	strbeq	r0, [fp, #1536]	; 0x600
    1944:	000000ad 	andeq	r0, r0, sp, lsr #1
    1948:	09f90b18 	ldmibeq	r9!, {r3, r4, r8, r9, fp}^
    194c:	cc060000 	stcgt	0, cr0, [r6], {-0}
    1950:	0000ad05 	andeq	sl, r0, r5, lsl #26
    1954:	be0b1a00 	vmlalt.f32	s2, s22, s0
    1958:	06000008 	streq	r0, [r0], -r8
    195c:	00cd05cd 	sbceq	r0, sp, sp, asr #11
    1960:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    1964:	00524641 	subseq	r4, r2, r1, asr #12
    1968:	a005ce06 	andge	ip, r5, r6, lsl #28
    196c:	20000001 	andcs	r0, r0, r1
    1970:	00cd0d00 	sbceq	r0, sp, r0, lsl #26
    1974:	01a00000 	moveq	r0, r0
    1978:	900e0000 	andls	r0, lr, r0
    197c:	01000000 	mrseq	r0, (UNDEF: 0)
    1980:	01900500 	orrseq	r0, r0, r0, lsl #10
    1984:	c70f0000 	strgt	r0, [pc, -r0]
    1988:	0600000f 	streq	r0, [r0], -pc
    198c:	010405cf 	smlabteq	r4, pc, r5, r0	; <UNPREDICTABLE>
    1990:	07100000 	ldreq	r0, [r0, -r0]
    1994:	00003701 	andeq	r3, r0, r1, lsl #14
    1998:	d7420700 	strble	r0, [r2, -r0, lsl #14]
    199c:	09000001 	stmdbeq	r0, {r0}
    19a0:	00000890 	muleq	r0, r0, r8
    19a4:	07170900 	ldreq	r0, [r7, -r0, lsl #18]
    19a8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    19ac:	00000271 	andeq	r0, r0, r1, ror r2
    19b0:	02ad0902 	adceq	r0, sp, #32768	; 0x8000
    19b4:	00030000 	andeq	r0, r3, r0
    19b8:	000db903 	andeq	fp, sp, r3, lsl #18
    19bc:	b1470700 	cmplt	r7, r0, lsl #14
    19c0:	10000001 	andne	r0, r0, r1
    19c4:	00370107 	eorseq	r0, r7, r7, lsl #2
    19c8:	4f070000 	svcmi	0x00070000
    19cc:	000001fc 	strdeq	r0, [r0], -ip
    19d0:	00042c09 	andeq	r2, r4, r9, lsl #24
    19d4:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    19d8:	01000003 	tsteq	r0, r3
    19dc:	010a0300 	mrseq	r0, (UNDEF: 58)
    19e0:	52070000 	andpl	r0, r7, #0
    19e4:	000001e2 	andeq	r0, r0, r2, ror #3
    19e8:	37010710 	smladcc	r1, r0, r7, r0
    19ec:	07000000 	streq	r0, [r0, -r0]
    19f0:	00022d5a 	andeq	r2, r2, sl, asr sp
    19f4:	051b0900 	ldreq	r0, [fp, #-2304]	; 0xfffff700
    19f8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    19fc:	00000968 	andeq	r0, r0, r8, ror #18
    1a00:	11cd0901 	bicne	r0, sp, r1, lsl #18
    1a04:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1a08:	00000a22 	andeq	r0, r0, r2, lsr #20
    1a0c:	b6030003 	strlt	r0, [r3], -r3
    1a10:	0700000e 	streq	r0, [r0, -lr]
    1a14:	0002075f 	andeq	r0, r2, pc, asr r7
    1a18:	01071000 	mrseq	r1, (UNDEF: 7)
    1a1c:	00000037 	andeq	r0, r0, r7, lsr r0
    1a20:	02586e07 	subseq	r6, r8, #7, 28	; 0x70
    1a24:	9b090000 	blls	241a2c <startup-0x1fdbe5d4>
    1a28:	00000000 	andeq	r0, r0, r0
    1a2c:	00108509 	andseq	r8, r0, r9, lsl #10
    1a30:	f5090100 			; <UNDEFINED> instruction: 0xf5090100
    1a34:	02000001 	andeq	r0, r0, #1
    1a38:	049a0300 	ldreq	r0, [sl], #768	; 0x300
    1a3c:	72070000 	andvc	r0, r7, #0
    1a40:	00000238 	andeq	r0, r0, r8, lsr r2
    1a44:	37010710 	smladcc	r1, r0, r7, r0
    1a48:	07000000 	streq	r0, [r0, -r0]
    1a4c:	00027d7a 	andeq	r7, r2, sl, ror sp
    1a50:	12370900 	eorsne	r0, r7, #0, 18
    1a54:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1a58:	000011f7 	strdeq	r1, [r0], -r7
    1a5c:	62030001 	andvs	r0, r3, #1
    1a60:	07000013 	smladeq	r0, r3, r0, r0
    1a64:	0002637d 	andeq	r6, r2, sp, ror r3
    1a68:	07081100 	streq	r1, [r8, -r0, lsl #2]
    1a6c:	0002cd84 	andeq	ip, r2, r4, lsl #27
    1a70:	0eda1200 	cdpeq	2, 13, cr1, cr10, cr0, {0}
    1a74:	86070000 	strhi	r0, [r7], -r0
    1a78:	000000c2 	andeq	r0, r0, r2, asr #1
    1a7c:	0d771200 	lfmeq	f1, 2, [r7, #-0]
    1a80:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
    1a84:	000001d7 	ldrdeq	r0, [r0], -r7
    1a88:	0b061204 	bleq	1862a0 <startup-0x1fe79d60>
    1a8c:	8c070000 	stchi	0, cr0, [r7], {-0}
    1a90:	0000022d 	andeq	r0, r0, sp, lsr #4
    1a94:	09411205 	stmdbeq	r1, {r0, r2, r9, ip}^
    1a98:	8f070000 	svchi	0x00070000
    1a9c:	000001fc 	strdeq	r0, [r0], -ip
    1aa0:	0f071206 	svceq	0x00071206
    1aa4:	92070000 	andls	r0, r7, #0
    1aa8:	00000258 	andeq	r0, r0, r8, asr r2
    1aac:	7c030007 	stcvc	0, cr0, [r3], {7}
    1ab0:	07000003 	streq	r0, [r0, -r3]
    1ab4:	00028894 	muleq	r2, r4, r8
    1ab8:	139f1300 	orrsne	r1, pc, #0, 6
    1abc:	43010000 	movwmi	r0, #4096	; 0x1000
    1ac0:	0015e202 	andseq	lr, r5, r2, lsl #4
    1ac4:	0000a420 	andeq	sl, r0, r0, lsr #8
    1ac8:	3a9c0100 	bcc	fe701ed0 <GPIO_Pins+0xde6ff604>
    1acc:	14000003 	strne	r0, [r0], #-3
    1ad0:	00001382 	andeq	r1, r0, r2, lsl #7
    1ad4:	3a024301 	bcc	926e0 <startup-0x1ff6d920>
    1ad8:	02000003 	andeq	r0, r0, #3
    1adc:	2d146c91 	ldccs	12, cr6, [r4, #-580]	; 0xfffffdbc
    1ae0:	01000013 	tsteq	r0, r3, lsl r0
    1ae4:	00a20243 	adceq	r0, r2, r3, asr #4
    1ae8:	91020000 	mrsls	r0, (UNDEF: 2)
    1aec:	1213146a 	andsne	r1, r3, #1778384896	; 0x6a000000
    1af0:	43010000 	movwmi	r0, #4096	; 0x1000
    1af4:	00009702 	andeq	r9, r0, r2, lsl #14
    1af8:	69910200 	ldmibvs	r1, {r9}
    1afc:	00121b15 	andseq	r1, r2, r5, lsl fp
    1b00:	02450100 	subeq	r0, r5, #0, 2
    1b04:	000000c2 	andeq	r0, r0, r2, asr #1
    1b08:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    1b0c:	00001398 	muleq	r0, r8, r3
    1b10:	c2024601 	andgt	r4, r2, #1048576	; 0x100000
    1b14:	02000000 	andeq	r0, r0, #0
    1b18:	16007091 			; <UNDEFINED> instruction: 0x16007091
    1b1c:	0001a504 	andeq	sl, r1, r4, lsl #10
    1b20:	13881300 	orrne	r1, r8, #0, 6
    1b24:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1b28:	0015be01 	andseq	fp, r5, r1, lsl #28
    1b2c:	00002420 	andeq	r2, r0, r0, lsr #8
    1b30:	759c0100 	ldrvc	r0, [ip, #256]	; 0x100
    1b34:	14000003 	strne	r0, [r0], #-3
    1b38:	00001382 	andeq	r1, r0, r2, lsl #7
    1b3c:	3a01f001 	bcc	7db48 <startup-0x1ff824b8>
    1b40:	02000003 	andeq	r0, r0, #3
    1b44:	da147491 	ble	51ed90 <startup-0x1fae1270>
    1b48:	0100000e 	tsteq	r0, lr
    1b4c:	00a201f0 	strdeq	r0, [r2], r0	; <UNPREDICTABLE>
    1b50:	91020000 	mrsls	r0, (UNDEF: 2)
    1b54:	77130072 			; <UNDEFINED> instruction: 0x77130072
    1b58:	01000013 	tsteq	r0, r3, lsl r0
    1b5c:	15a001e0 	strne	r0, [r0, #480]!	; 0x1e0
    1b60:	001e2000 	andseq	r2, lr, r0
    1b64:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b68:	000003aa 	andeq	r0, r0, sl, lsr #7
    1b6c:	00138214 	andseq	r8, r3, r4, lsl r2
    1b70:	01e00100 	mvneq	r0, r0, lsl #2
    1b74:	0000033a 	andeq	r0, r0, sl, lsr r3
    1b78:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    1b7c:	00001325 	andeq	r1, r0, r5, lsr #6
    1b80:	a201e001 	andge	lr, r1, #1
    1b84:	02000000 	andeq	r0, r0, #0
    1b88:	13007291 	movwne	r7, #657	; 0x291
    1b8c:	00001241 	andeq	r1, r0, r1, asr #4
    1b90:	6601c701 	strvs	ip, [r1], -r1, lsl #14
    1b94:	3a200015 	bcc	801bf0 <startup-0x1f7fe410>
    1b98:	01000000 	mrseq	r0, (UNDEF: 0)
    1b9c:	0003ee9c 	muleq	r3, ip, lr
    1ba0:	13821400 	orrne	r1, r2, #0, 8
    1ba4:	c7010000 	strgt	r0, [r1, -r0]
    1ba8:	00033a01 	andeq	r3, r3, r1, lsl #20
    1bac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1bb0:	000eda14 	andeq	sp, lr, r4, lsl sl
    1bb4:	01c70100 	biceq	r0, r7, r0, lsl #2
    1bb8:	000000a2 	andeq	r0, r0, r2, lsr #1
    1bbc:	14729102 	ldrbtne	r9, [r2], #-258	; 0xfffffefe
    1bc0:	00001230 	andeq	r1, r0, r0, lsr r2
    1bc4:	7d01c701 	stcvc	7, cr12, [r1, #-4]
    1bc8:	02000002 	andeq	r0, r0, #2
    1bcc:	13007191 	movwne	r7, #401	; 0x191
    1bd0:	00001266 	andeq	r1, r0, r6, ror #4
    1bd4:	4801b101 	stmdami	r1, {r0, r8, ip, sp, pc}
    1bd8:	1e200015 	miane	acc0, r5, r0
    1bdc:	01000000 	mrseq	r0, (UNDEF: 0)
    1be0:	0004239c 	muleq	r4, ip, r3
    1be4:	13821400 	orrne	r1, r2, #0, 8
    1be8:	b1010000 	mrslt	r0, (UNDEF: 1)
    1bec:	00033a01 	andeq	r3, r3, r1, lsl #20
    1bf0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1bf4:	000eda14 	andeq	sp, lr, r4, lsl sl
    1bf8:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    1bfc:	000000a2 	andeq	r0, r0, r2, lsr #1
    1c00:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1c04:	00124f13 	andseq	r4, r2, r3, lsl pc
    1c08:	019c0100 	orrseq	r0, ip, r0, lsl #2
    1c0c:	2000152a 	andcs	r1, r0, sl, lsr #10
    1c10:	0000001e 	andeq	r0, r0, lr, lsl r0
    1c14:	04589c01 	ldrbeq	r9, [r8], #-3073	; 0xfffff3ff
    1c18:	82140000 	andshi	r0, r4, #0
    1c1c:	01000013 	tsteq	r0, r3, lsl r0
    1c20:	033a019c 	teqeq	sl, #156, 2	; 0x27
    1c24:	91020000 	mrsls	r0, (UNDEF: 2)
    1c28:	0eda1474 	mrceq	4, 6, r1, cr10, cr4, {3}
    1c2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c30:	0000a201 	andeq	sl, r0, r1, lsl #4
    1c34:	72910200 	addsvc	r0, r1, #0, 4
    1c38:	11ff1700 	mvnsne	r1, r0, lsl #14
    1c3c:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    1c40:	0000a201 	andeq	sl, r0, r1, lsl #4
    1c44:	00151400 	andseq	r1, r5, r0, lsl #8
    1c48:	00001620 	andeq	r1, r0, r0, lsr #12
    1c4c:	829c0100 	addshi	r0, ip, #0, 2
    1c50:	14000004 	strne	r0, [r0], #-4
    1c54:	00001382 	andeq	r1, r0, r2, lsl #7
    1c58:	3a018801 	bcc	63c64 <startup-0x1ff9c39c>
    1c5c:	02000003 	andeq	r0, r0, #3
    1c60:	17007491 			; <UNDEFINED> instruction: 0x17007491
    1c64:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
    1c68:	97016e01 	strls	r6, [r1, -r1, lsl #28]
    1c6c:	d2000000 	andle	r0, r0, #0
    1c70:	42200014 	eormi	r0, r0, #20
    1c74:	01000000 	mrseq	r0, (UNDEF: 0)
    1c78:	0004ca9c 	muleq	r4, ip, sl
    1c7c:	13821400 	orrne	r1, r2, #0, 8
    1c80:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1c84:	00033a01 	andeq	r3, r3, r1, lsl #20
    1c88:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1c8c:	000eda14 	andeq	sp, lr, r4, lsl sl
    1c90:	016e0100 	cmneq	lr, r0, lsl #2
    1c94:	000000a2 	andeq	r0, r0, r2, lsr #1
    1c98:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    1c9c:	00000f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
    1ca0:	97017001 	strls	r7, [r1, -r1]
    1ca4:	02000000 	andeq	r0, r0, #0
    1ca8:	17007791 			; <UNDEFINED> instruction: 0x17007791
    1cac:	0000133c 	andeq	r1, r0, ip, lsr r3
    1cb0:	a2015d01 	andge	r5, r1, #1, 26	; 0x40
    1cb4:	bc000000 	stclt	0, cr0, [r0], {-0}
    1cb8:	16200014 			; <UNDEFINED> instruction: 0x16200014
    1cbc:	01000000 	mrseq	r0, (UNDEF: 0)
    1cc0:	0004f49c 	muleq	r4, ip, r4
    1cc4:	13821400 	orrne	r1, r2, #0, 8
    1cc8:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1ccc:	00033a01 	andeq	r3, r3, r1, lsl #20
    1cd0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1cd4:	12ff1700 	rscsne	r1, pc, #0, 14
    1cd8:	43010000 	movwmi	r0, #4096	; 0x1000
    1cdc:	00009701 	andeq	r9, r0, r1, lsl #14
    1ce0:	00147a00 	andseq	r7, r4, r0, lsl #20
    1ce4:	00004220 	andeq	r4, r0, r0, lsr #4
    1ce8:	3c9c0100 	ldfccs	f0, [ip], {0}
    1cec:	14000005 	strne	r0, [r0], #-5
    1cf0:	00001382 	andeq	r1, r0, r2, lsl #7
    1cf4:	3a014301 	bcc	52900 <startup-0x1ffad700>
    1cf8:	02000003 	andeq	r0, r0, #3
    1cfc:	da146c91 	ble	51cf48 <startup-0x1fae30b8>
    1d00:	0100000e 	tsteq	r0, lr
    1d04:	00a20143 	adceq	r0, r2, r3, asr #2
    1d08:	91020000 	mrsls	r0, (UNDEF: 2)
    1d0c:	0f92156a 	svceq	0x0092156a
    1d10:	45010000 	strmi	r0, [r1, #-0]
    1d14:	00009701 	andeq	r9, r0, r1, lsl #14
    1d18:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1d1c:	134f1300 	movtne	r1, #62208	; 0xf300
    1d20:	15010000 	strne	r0, [r1, #-0]
    1d24:	00143401 	andseq	r3, r4, r1, lsl #8
    1d28:	00004620 	andeq	r4, r0, r0, lsr #12
    1d2c:	809c0100 	addshi	r0, ip, r0, lsl #2
    1d30:	14000005 	strne	r0, [r0], #-5
    1d34:	00001382 	andeq	r1, r0, r2, lsl #7
    1d38:	3a011501 	bcc	47144 <startup-0x1ffb8ebc>
    1d3c:	02000003 	andeq	r0, r0, #3
    1d40:	da146c91 	ble	51cf8c <startup-0x1fae3074>
    1d44:	0100000e 	tsteq	r0, lr
    1d48:	00a20115 	adceq	r0, r2, r5, lsl r1
    1d4c:	91020000 	mrsls	r0, (UNDEF: 2)
    1d50:	6d74186a 	ldclvs	8, cr1, [r4, #-424]!	; 0xfffffe58
    1d54:	17010070 	smlsdxne	r1, r0, r0, r0
    1d58:	0000cd01 	andeq	ip, r0, r1, lsl #26
    1d5c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1d60:	12201900 	eorne	r1, r0, #0, 18
    1d64:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    1d68:	20001400 	andcs	r1, r0, r0, lsl #8
    1d6c:	00000034 	andeq	r0, r0, r4, lsr r0
    1d70:	05a49c01 	streq	r9, [r4, #3073]!	; 0xc01
    1d74:	151a0000 	ldrne	r0, [sl, #-0]
    1d78:	01000013 	tsteq	r0, r3, lsl r0
    1d7c:	0005a4fe 	strdeq	sl, [r5], -lr
    1d80:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1d84:	cd041600 	stcgt	6, cr1, [r4, #-0]
    1d88:	19000002 	stmdbne	r0, {r1}
    1d8c:	0000125c 	andeq	r1, r0, ip, asr r2
    1d90:	12e8ca01 	rscne	ip, r8, #4096	; 0x1000
    1d94:	01182000 	tsteq	r8, r0
    1d98:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d9c:	00000606 	andeq	r0, r0, r6, lsl #12
    1da0:	0013821a 	andseq	r8, r3, sl, lsl r2
    1da4:	3aca0100 	bcc	ff2821ac <GPIO_Pins+0xdf27f8e0>
    1da8:	02000003 	andeq	r0, r0, #3
    1dac:	151a6491 	ldrne	r6, [sl, #-1169]	; 0xfffffb6f
    1db0:	01000013 	tsteq	r0, r3, lsl r0
    1db4:	0005a4ca 	andeq	sl, r5, sl, asr #9
    1db8:	60910200 	addsvs	r0, r1, r0, lsl #4
    1dbc:	0011f01b 	andseq	pc, r1, fp, lsl r0	; <UNPREDICTABLE>
    1dc0:	c2cc0100 	sbcgt	r0, ip, #0, 2
    1dc4:	02000000 	andeq	r0, r0, #0
    1dc8:	701c7491 	mulsvc	ip, r1, r4
    1dcc:	0100736f 	tsteq	r0, pc, ror #6
    1dd0:	0000c2cc 	andeq	ip, r0, ip, asr #5
    1dd4:	70910200 	addsvc	r0, r1, r0, lsl #4
    1dd8:	00136c1b 	andseq	r6, r3, fp, lsl ip
    1ddc:	c2cc0100 	sbcgt	r0, ip, #0, 2
    1de0:	02000000 	andeq	r0, r0, #0
    1de4:	1d006c91 	stcne	12, cr6, [r0, #-580]	; 0xfffffdbc
    1de8:	000012f3 	strdeq	r1, [r0], -r3
    1dec:	11787f01 	cmnne	r8, r1, lsl #30
    1df0:	01702000 	cmneq	r0, r0
    1df4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1df8:	0013821a 	andseq	r8, r3, sl, lsl r2
    1dfc:	3a7f0100 	bcc	1fc2204 <startup-0x1e03ddfc>
    1e00:	02000003 	andeq	r0, r0, #3
    1e04:	00007491 	muleq	r0, r1, r4
    1e08:	00000543 	andeq	r0, r0, r3, asr #10
    1e0c:	04d00004 	ldrbeq	r0, [r0], #4
    1e10:	01040000 	mrseq	r0, (UNDEF: 4)
    1e14:	000005d8 	ldrdeq	r0, [r0], -r8
    1e18:	0014e50c 	andseq	lr, r4, ip, lsl #10
    1e1c:	00053800 	andeq	r3, r5, r0, lsl #16
    1e20:	00168800 	andseq	r8, r6, r0, lsl #16
    1e24:	0001c420 	andeq	ip, r1, r0, lsr #8
    1e28:	00076c00 	andeq	r6, r7, r0, lsl #24
    1e2c:	06010200 	streq	r0, [r1], -r0, lsl #4
    1e30:	000003eb 	andeq	r0, r0, fp, ror #7
    1e34:	0001c303 	andeq	ip, r1, r3, lsl #6
    1e38:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    1e3c:	02000000 	andeq	r0, r0, #0
    1e40:	03e90801 	mvneq	r0, #65536	; 0x10000
    1e44:	02020000 	andeq	r0, r2, #0
    1e48:	000f4c05 	andeq	r4, pc, r5, lsl #24
    1e4c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1e50:	000010c1 	andeq	r1, r0, r1, asr #1
    1e54:	00115403 	andseq	r5, r1, r3, lsl #8
    1e58:	574d0200 	strbpl	r0, [sp, -r0, lsl #4]
    1e5c:	02000000 	andeq	r0, r0, #0
    1e60:	09a30504 	stmibeq	r3!, {r2, r8, sl}
    1e64:	4c030000 	stcmi	0, cr0, [r3], {-0}
    1e68:	02000009 	andeq	r0, r0, #9
    1e6c:	0000694f 	andeq	r6, r0, pc, asr #18
    1e70:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1e74:	00000d1e 	andeq	r0, r0, lr, lsl sp
    1e78:	9e050802 	cdpls	8, 0, cr0, cr5, cr2, {0}
    1e7c:	02000009 	andeq	r0, r0, #9
    1e80:	0d190708 	ldceq	7, cr0, [r9, #-32]	; 0xffffffe0
    1e84:	04040000 	streq	r0, [r4], #-0
    1e88:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1e8c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1e90:	00000d23 	andeq	r0, r0, r3, lsr #26
    1e94:	0001c503 	andeq	ip, r1, r3, lsl #10
    1e98:	2c180300 	ldccs	3, cr0, [r8], {-0}
    1e9c:	05000000 	streq	r0, [r0, #-0]
    1ea0:	0000008c 	andeq	r0, r0, ip, lsl #1
    1ea4:	00115603 	andseq	r5, r1, r3, lsl #12
    1ea8:	4c2c0300 	stcmi	3, cr0, [ip], #-0
    1eac:	05000000 	streq	r0, [r0, #-0]
    1eb0:	0000009c 	muleq	r0, ip, r0
    1eb4:	00094e03 	andeq	r4, r9, r3, lsl #28
    1eb8:	5e300300 	cdppl	3, 3, cr0, cr0, cr0, {0}
    1ebc:	05000000 	streq	r0, [r0, #-0]
    1ec0:	000000ac 	andeq	r0, r0, ip, lsr #1
    1ec4:	0000b706 	andeq	fp, r0, r6, lsl #14
    1ec8:	0e040700 	cdpeq	7, 0, cr0, cr4, cr0, {0}
    1ecc:	7d01a004 	stcvc	0, cr10, [r1, #-16]
    1ed0:	08000001 	stmdaeq	r0, {r0}
    1ed4:	00001172 	andeq	r1, r0, r2, ror r1
    1ed8:	8d01a204 	sfmhi	f2, 1, [r1, #-16]
    1edc:	00000001 	andeq	r0, r0, r1
    1ee0:	0003d508 	andeq	sp, r3, r8, lsl #10
    1ee4:	01a30400 			; <UNDEFINED> instruction: 0x01a30400
    1ee8:	00000192 	muleq	r0, r2, r1
    1eec:	0daa0820 	stceq	8, cr0, [sl, #128]!	; 0x80
    1ef0:	a4040000 	strge	r0, [r4], #-0
    1ef4:	00018d01 	andeq	r8, r1, r1, lsl #26
    1ef8:	05088000 	streq	r8, [r8, #-0]
    1efc:	04000000 	streq	r0, [r0], #-0
    1f00:	019201a5 	orrseq	r0, r2, r5, lsr #3
    1f04:	09a00000 	stmibeq	r0!, {}	; <UNPREDICTABLE>
    1f08:	00001102 	andeq	r1, r0, r2, lsl #2
    1f0c:	8d01a604 	stchi	6, cr10, [r1, #-16]
    1f10:	00000001 	andeq	r0, r0, r1
    1f14:	04630901 	strbteq	r0, [r3], #-2305	; 0xfffff6ff
    1f18:	a7040000 	strge	r0, [r4, -r0]
    1f1c:	00019201 	andeq	r9, r1, r1, lsl #4
    1f20:	09012000 	stmdbeq	r1, {sp}
    1f24:	0000016e 	andeq	r0, r0, lr, ror #2
    1f28:	8d01a804 	stchi	8, cr10, [r1, #-16]
    1f2c:	80000001 	andhi	r0, r0, r1
    1f30:	046d0901 	strbteq	r0, [sp], #-2305	; 0xfffff6ff
    1f34:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    1f38:	00019201 	andeq	r9, r1, r1, lsl #4
    1f3c:	0901a000 	stmdbeq	r1, {sp, pc}
    1f40:	00000427 	andeq	r0, r0, r7, lsr #8
    1f44:	8d01aa04 	vstrhi	s20, [r1, #-16]
    1f48:	00000001 	andeq	r0, r0, r1
    1f4c:	04090902 	streq	r0, [r9], #-2306	; 0xfffff6fe
    1f50:	ab040000 	blge	101f58 <startup-0x1fefe0a8>
    1f54:	0001a201 	andeq	sl, r1, r1, lsl #4
    1f58:	0a022000 	beq	89f60 <startup-0x1ff760a0>
    1f5c:	04005049 	streq	r5, [r0], #-73	; 0xffffffb7
    1f60:	01c201ac 	biceq	r0, r2, ip, lsr #3
    1f64:	03000000 	movweq	r0, #0
    1f68:	00041309 	andeq	r1, r4, r9, lsl #6
    1f6c:	01ad0400 			; <UNDEFINED> instruction: 0x01ad0400
    1f70:	000001c7 	andeq	r0, r0, r7, asr #3
    1f74:	c40903f0 	strgt	r0, [r9], #-1008	; 0xfffffc10
    1f78:	04000006 	streq	r0, [r0], #-6
    1f7c:	00b701ae 	adcseq	r0, r7, lr, lsr #3
    1f80:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1f84:	00b70b00 	adcseq	r0, r7, r0, lsl #22
    1f88:	018d0000 	orreq	r0, sp, r0
    1f8c:	850c0000 	strhi	r0, [ip, #-0]
    1f90:	07000000 	streq	r0, [r0, -r0]
    1f94:	017d0500 	cmneq	sp, r0, lsl #10
    1f98:	ac0b0000 	stcge	0, cr0, [fp], {-0}
    1f9c:	a2000000 	andge	r0, r0, #0
    1fa0:	0c000001 	stceq	0, cr0, [r0], {1}
    1fa4:	00000085 	andeq	r0, r0, r5, lsl #1
    1fa8:	ac0b0017 	stcge	0, cr0, [fp], {23}
    1fac:	b2000000 	andlt	r0, r0, #0
    1fb0:	0c000001 	stceq	0, cr0, [r0], {1}
    1fb4:	00000085 	andeq	r0, r0, r5, lsl #1
    1fb8:	970b0037 	smladxls	fp, r7, r0, r0
    1fbc:	c2000000 	andgt	r0, r0, #0
    1fc0:	0c000001 	stceq	0, cr0, [r0], {1}
    1fc4:	00000085 	andeq	r0, r0, r5, lsl #1
    1fc8:	b20500ef 	andlt	r0, r5, #239	; 0xef
    1fcc:	0b000001 	bleq	1fd8 <startup-0x1fffe028>
    1fd0:	000000ac 	andeq	r0, r0, ip, lsr #1
    1fd4:	000001d8 	ldrdeq	r0, [r0], -r8
    1fd8:	0000850d 	andeq	r8, r0, sp, lsl #10
    1fdc:	00028300 	andeq	r8, r2, r0, lsl #6
    1fe0:	000cd90e 	andeq	sp, ip, lr, lsl #18
    1fe4:	01af0400 			; <UNDEFINED> instruction: 0x01af0400
    1fe8:	000000c1 	andeq	r0, r0, r1, asr #1
    1fec:	c0048c0f 	andgt	r8, r4, pc, lsl #24
    1ff0:	0002ff01 	andeq	pc, r2, r1, lsl #30
    1ff4:	02340800 	eorseq	r0, r4, #0, 16
    1ff8:	c2040000 	andgt	r0, r4, #0
    1ffc:	0000bc01 	andeq	fp, r0, r1, lsl #24
    2000:	5d080000 	stcpl	0, cr0, [r8, #-0]
    2004:	04000003 	streq	r0, [r0], #-3
    2008:	00b701c3 	adcseq	r0, r7, r3, asr #3
    200c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    2010:	000000ac 	andeq	r0, r0, ip, lsr #1
    2014:	b701c404 	strlt	ip, [r1, -r4, lsl #8]
    2018:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    201c:	00020408 	andeq	r0, r2, r8, lsl #8
    2020:	01c50400 	biceq	r0, r5, r0, lsl #8
    2024:	000000b7 	strheq	r0, [r0], -r7
    2028:	4353100c 	cmpmi	r3, #12
    202c:	c6040052 			; <UNDEFINED> instruction: 0xc6040052
    2030:	0000b701 	andeq	fp, r0, r1, lsl #14
    2034:	43101000 	tstmi	r0, #0
    2038:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    203c:	00b701c7 	adcseq	r0, r7, r7, asr #3
    2040:	10140000 	andsne	r0, r4, r0
    2044:	00504853 	subseq	r4, r0, r3, asr r8
    2048:	0f01c804 	svceq	0x0001c804
    204c:	18000003 	stmdane	r0, {r0, r1}
    2050:	0006ad08 	andeq	sl, r6, r8, lsl #26
    2054:	01c90400 	biceq	r0, r9, r0, lsl #8
    2058:	000000b7 	strheq	r0, [r0], -r7
    205c:	0e5d0824 	cdpeq	8, 5, cr0, cr13, cr4, {1}
    2060:	ca040000 	bgt	102068 <startup-0x1fefdf98>
    2064:	0000b701 	andeq	fp, r0, r1, lsl #14
    2068:	7b082800 	blvc	20c070 <startup-0x1fdf3f90>
    206c:	04000005 	streq	r0, [r0], #-5
    2070:	00b701cb 	adcseq	r0, r7, fp, asr #3
    2074:	082c0000 	stmdaeq	ip!, {}	; <UNPREDICTABLE>
    2078:	000004ab 	andeq	r0, r0, fp, lsr #9
    207c:	b701cc04 	strlt	ip, [r1, -r4, lsl #24]
    2080:	30000000 	andcc	r0, r0, r0
    2084:	000f4608 	andeq	r4, pc, r8, lsl #12
    2088:	01cd0400 	biceq	r0, sp, r0, lsl #8
    208c:	000000b7 	strheq	r0, [r0], -r7
    2090:	0b9b0834 	bleq	fe6c4168 <GPIO_Pins+0xde6c189c>
    2094:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
    2098:	0000b701 	andeq	fp, r0, r1, lsl #14
    209c:	26083800 	strcs	r3, [r8], -r0, lsl #16
    20a0:	0400000e 	streq	r0, [r0], #-14
    20a4:	00b701cf 	adcseq	r0, r7, pc, asr #3
    20a8:	103c0000 	eorsne	r0, ip, r0
    20ac:	00524650 	subseq	r4, r2, r0, asr r6
    20b0:	2901d004 	stmdbcs	r1, {r2, ip, lr, pc}
    20b4:	40000003 	andmi	r0, r0, r3
    20b8:	52464410 	subpl	r4, r6, #16, 8	; 0x10000000
    20bc:	01d10400 	bicseq	r0, r1, r0, lsl #8
    20c0:	000000bc 	strheq	r0, [r0], -ip
    20c4:	44411048 	strbmi	r1, [r1], #-72	; 0xffffffb8
    20c8:	d2040052 	andle	r0, r4, #82	; 0x52
    20cc:	0000bc01 	andeq	fp, r0, r1, lsl #24
    20d0:	35084c00 	strcc	r4, [r8, #-3072]	; 0xfffff400
    20d4:	0400000f 	streq	r0, [r0], #-15
    20d8:	034301d3 	movteq	r0, #12755	; 0x31d3
    20dc:	08500000 	ldmdaeq	r0, {}^	; <UNPREDICTABLE>
    20e0:	00000f6f 	andeq	r0, r0, pc, ror #30
    20e4:	5d01d404 	cfstrspl	mvf13, [r1, #-16]
    20e8:	60000003 	andvs	r0, r0, r3
    20ec:	0003d508 	andeq	sp, r3, r8, lsl #10
    20f0:	01d50400 	bicseq	r0, r5, r0, lsl #8
    20f4:	00000362 	andeq	r0, r0, r2, ror #6
    20f8:	10fc0874 	rscsne	r0, ip, r4, ror r8
    20fc:	d6040000 	strle	r0, [r4], -r0
    2100:	0000b701 	andeq	fp, r0, r1, lsl #14
    2104:	0b008800 	bleq	2410c <startup-0x1ffdbef4>
    2108:	00000097 	muleq	r0, r7, r0
    210c:	0000030f 	andeq	r0, r0, pc, lsl #6
    2110:	0000850c 	andeq	r8, r0, ip, lsl #10
    2114:	05000b00 	streq	r0, [r0, #-2816]	; 0xfffff500
    2118:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    211c:	0000bc0b 	andeq	fp, r0, fp, lsl #24
    2120:	00032400 	andeq	r2, r3, r0, lsl #8
    2124:	00850c00 	addeq	r0, r5, r0, lsl #24
    2128:	00010000 	andeq	r0, r1, r0
    212c:	00031406 	andeq	r1, r3, r6, lsl #8
    2130:	03240500 			; <UNDEFINED> instruction: 0x03240500
    2134:	bc0b0000 	stclt	0, cr0, [fp], {-0}
    2138:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    213c:	0c000003 	stceq	0, cr0, [r0], {3}
    2140:	00000085 	andeq	r0, r0, r5, lsl #1
    2144:	2e060003 	cdpcs	0, 0, cr0, cr6, cr3, {0}
    2148:	05000003 	streq	r0, [r0, #-3]
    214c:	0000033e 	andeq	r0, r0, lr, lsr r3
    2150:	0000bc0b 	andeq	fp, r0, fp, lsl #24
    2154:	00035800 	andeq	r5, r3, r0, lsl #16
    2158:	00850c00 	addeq	r0, r5, r0, lsl #24
    215c:	00040000 	andeq	r0, r4, r0
    2160:	00034806 	andeq	r4, r3, r6, lsl #16
    2164:	03580500 	cmpeq	r8, #0, 10
    2168:	ac0b0000 	stcge	0, cr0, [fp], {-0}
    216c:	72000000 	andvc	r0, r0, #0
    2170:	0c000003 	stceq	0, cr0, [r0], {3}
    2174:	00000085 	andeq	r0, r0, r5, lsl #1
    2178:	910e0004 	tstls	lr, r4
    217c:	04000004 	streq	r0, [r0], #-4
    2180:	01e401d7 	ldrdeq	r0, [r4, #23]!
    2184:	100f0000 	andne	r0, pc, r0
    2188:	bc02bf04 	stclt	15, cr11, [r2], {4}
    218c:	08000003 	stmdaeq	r0, {r0, r1}
    2190:	00000aea 	andeq	r0, r0, sl, ror #21
    2194:	b702c104 	strlt	ip, [r2, -r4, lsl #2]
    2198:	00000000 	andeq	r0, r0, r0
    219c:	000eb108 	andeq	fp, lr, r8, lsl #2
    21a0:	02c20400 	sbceq	r0, r2, #0, 8
    21a4:	000000b7 	strheq	r0, [r0], -r7
    21a8:	41561004 	cmpmi	r6, r4
    21ac:	c304004c 	movwgt	r0, #16460	; 0x404c
    21b0:	0000b702 	andeq	fp, r0, r2, lsl #14
    21b4:	32080800 	andcc	r0, r8, #0, 16
    21b8:	0400000e 	streq	r0, [r0], #-14
    21bc:	00bc02c4 	adcseq	r0, ip, r4, asr #5
    21c0:	000c0000 	andeq	r0, ip, r0
    21c4:	000c2f0e 	andeq	r2, ip, lr, lsl #30
    21c8:	02c50400 	sbceq	r0, r5, #0, 8
    21cc:	0000037e 	andeq	r0, r0, lr, ror r3
    21d0:	000fe711 	andeq	lr, pc, r1, lsl r7	; <UNPREDICTABLE>
    21d4:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    21d8:	000000a7 	andeq	r0, r0, r7, lsr #1
    21dc:	00085812 	andeq	r5, r8, r2, lsl r8
    21e0:	ac3b0500 	cfldr32ge	mvfx0, [fp], #-0
    21e4:	13000000 	movwne	r0, #0
    21e8:	00370107 	eorseq	r0, r7, r7, lsl #2
    21ec:	5f060000 	svcpl	0x00060000
    21f0:	0003fa03 	andeq	pc, r3, r3, lsl #20
    21f4:	09dc1400 	ldmibeq	ip, {sl, ip}^
    21f8:	14000000 	strne	r0, [r0], #-0
    21fc:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    2200:	e30e0001 	movw	r0, #57345	; 0xe001
    2204:	0600000c 	streq	r0, [r0], -ip
    2208:	03df035f 	bicseq	r0, pc, #2080374785	; 0x7c000001
    220c:	04150000 	ldreq	r0, [r5], #-0
    2210:	043f3607 	ldrteq	r3, [pc], #-1543	; 2218 <startup-0x1fffdde8>
    2214:	8b160000 	blhi	58221c <startup-0x1fa7dde4>
    2218:	07000014 	smladeq	r0, r4, r0, r0
    221c:	00008c38 	andeq	r8, r0, r8, lsr ip
    2220:	b6160000 	ldrlt	r0, [r6], -r0
    2224:	07000014 	smladeq	r0, r4, r0, r0
    2228:	00008c3d 	andeq	r8, r0, sp, lsr ip
    222c:	9b160100 	blls	582634 <startup-0x1fa7d9cc>
    2230:	07000014 	smladeq	r0, r4, r0, r0
    2234:	00008c42 	andeq	r8, r0, r2, asr #24
    2238:	d8160200 	ldmdale	r6, {r9}
    223c:	07000013 	smladeq	r0, r3, r0, r0
    2240:	0003fa47 	andeq	pc, r3, r7, asr #20
    2244:	03000300 	movweq	r0, #768	; 0x300
    2248:	000013c7 	andeq	r1, r0, r7, asr #7
    224c:	04064a07 	streq	r4, [r6], #-2567	; 0xfffff5f9
    2250:	67170000 	ldrvs	r0, [r7, -r0]
    2254:	01000014 	tsteq	r0, r4, lsl r0
    2258:	001818df 			; <UNDEFINED> instruction: 0x001818df
    225c:	00003420 	andeq	r3, r0, r0, lsr #8
    2260:	6e9c0100 	fmlvse	f0, f4, f0
    2264:	18000004 	stmdane	r0, {r2}
    2268:	000013eb 	andeq	r1, r0, fp, ror #7
    226c:	00acdf01 	adceq	sp, ip, r1, lsl #30
    2270:	91020000 	mrsls	r0, (UNDEF: 2)
    2274:	53170074 	tstpl	r7, #116	; 0x74
    2278:	01000014 	tsteq	r0, r4, lsl r0
    227c:	0017d0c7 	andseq	sp, r7, r7, asr #1
    2280:	00004820 	andeq	r4, r0, r0, lsr #16
    2284:	a09c0100 	addsge	r0, ip, r0, lsl #2
    2288:	18000004 	stmdane	r0, {r2}
    228c:	00001559 	andeq	r1, r0, r9, asr r5
    2290:	008cc701 	addeq	ip, ip, r1, lsl #14
    2294:	91020000 	mrsls	r0, (UNDEF: 2)
    2298:	0afd1877 	beq	fff4847c <GPIO_Pins+0xdff45bb0>
    229c:	c7010000 	strgt	r0, [r1, -r0]
    22a0:	000003fa 	strdeq	r0, [r0], -sl
    22a4:	00769102 	rsbseq	r9, r6, r2, lsl #2
    22a8:	00143817 	andseq	r3, r4, r7, lsl r8
    22ac:	a4b40100 	ldrtge	r0, [r4], #256	; 0x100
    22b0:	2c200017 	stccs	0, cr0, [r0], #-92	; 0xffffffa4
    22b4:	01000000 	mrseq	r0, (UNDEF: 0)
    22b8:	0004d29c 	muleq	r4, ip, r2
    22bc:	14d81800 	ldrbne	r1, [r8], #2048	; 0x800
    22c0:	b4010000 	strlt	r0, [r1], #-0
    22c4:	000000ac 	andeq	r0, r0, ip, lsr #1
    22c8:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    22cc:	00001431 	andeq	r1, r0, r1, lsr r4
    22d0:	00acb401 	adceq	fp, ip, r1, lsl #8
    22d4:	91020000 	mrsls	r0, (UNDEF: 2)
    22d8:	20170070 	andscs	r0, r7, r0, ror r0
    22dc:	01000014 	tsteq	r0, r4, lsl r0
    22e0:	0016ac88 	andseq	sl, r6, r8, lsl #25
    22e4:	0000f820 	andeq	pc, r0, r0, lsr #16
    22e8:	209c0100 	addscs	r0, ip, r0, lsl #2
    22ec:	18000005 	stmdane	r0, {r0, r2}
    22f0:	000013fd 	strdeq	r1, [r0], -sp
    22f4:	05208801 	streq	r8, [r0, #-2049]!	; 0xfffff7ff
    22f8:	91020000 	mrsls	r0, (UNDEF: 2)
    22fc:	147f1964 	ldrbtne	r1, [pc], #-2404	; 2304 <startup-0x1fffdcfc>
    2300:	8a010000 	bhi	42308 <startup-0x1ffbdcf8>
    2304:	0000008c 	andeq	r0, r0, ip, lsl #1
    2308:	196f9102 	stmdbne	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
    230c:	0000142a 	andeq	r1, r0, sl, lsr #8
    2310:	008c8a01 	addeq	r8, ip, r1, lsl #20
    2314:	91020000 	mrsls	r0, (UNDEF: 2)
    2318:	144c196e 	strbne	r1, [ip], #-2414	; 0xfffff692
    231c:	8a010000 	bhi	42324 <startup-0x1ffbdcdc>
    2320:	0000008c 	andeq	r0, r0, ip, lsl #1
    2324:	006d9102 	rsbeq	r9, sp, r2, lsl #2
    2328:	043f041a 	ldrteq	r0, [pc], #-1050	; 2330 <startup-0x1fffdcd0>
    232c:	661b0000 	ldrvs	r0, [fp], -r0
    2330:	01000015 	tsteq	r0, r5, lsl r0
    2334:	00168876 	andseq	r8, r6, r6, ror r8
    2338:	00002420 	andeq	r2, r0, r0, lsr #8
    233c:	189c0100 	ldmne	ip, {r8}
    2340:	0000140d 	andeq	r1, r0, sp, lsl #8
    2344:	00ac7601 	adceq	r7, ip, r1, lsl #12
    2348:	91020000 	mrsls	r0, (UNDEF: 2)
    234c:	69000074 	stmdbvs	r0, {r2, r4, r5, r6}
    2350:	04000001 	streq	r0, [r0], #-1
    2354:	00064400 	andeq	r4, r6, r0, lsl #8
    2358:	d8010400 	stmdale	r1, {sl}
    235c:	0c000005 	stceq	0, cr0, [r0], {5}
    2360:	00001589 	andeq	r1, r0, r9, lsl #11
    2364:	00000538 	andeq	r0, r0, r8, lsr r5
    2368:	2000184c 	andcs	r1, r0, ip, asr #16
    236c:	000000e8 	andeq	r0, r0, r8, ror #1
    2370:	0000096a 	andeq	r0, r0, sl, ror #18
    2374:	eb060102 	bl	182784 <startup-0x1fe7d87c>
    2378:	03000003 	movweq	r0, #3
    237c:	000001c3 	andeq	r0, r0, r3, asr #3
    2380:	00372b02 	eorseq	r2, r7, r2, lsl #22
    2384:	01020000 	mrseq	r0, (UNDEF: 2)
    2388:	0003e908 	andeq	lr, r3, r8, lsl #18
    238c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    2390:	00000f4c 	andeq	r0, r0, ip, asr #30
    2394:	c1070202 	tstgt	r7, r2, lsl #4
    2398:	02000010 	andeq	r0, r0, #16
    239c:	09a30504 	stmibeq	r3!, {r2, r8, sl}
    23a0:	04020000 	streq	r0, [r2], #-0
    23a4:	000d1e07 	andeq	r1, sp, r7, lsl #28
    23a8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    23ac:	0000099e 	muleq	r0, lr, r9
    23b0:	19070802 	stmdbne	r7, {r1, fp}
    23b4:	0400000d 	streq	r0, [r0], #-13
    23b8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    23bc:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    23c0:	000d2307 	andeq	r2, sp, r7, lsl #6
    23c4:	01c50300 	biceq	r0, r5, r0, lsl #6
    23c8:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    23cc:	0000002c 	andeq	r0, r0, ip, lsr #32
    23d0:	0c046705 	stceq	7, cr6, [r4], {5}
    23d4:	000000b9 	strheq	r0, [r0], -r9
    23d8:	0015de06 	andseq	sp, r5, r6, lsl #28
    23dc:	b90e0400 	stmdblt	lr, {sl}
    23e0:	00000000 	andeq	r0, r0, r0
    23e4:	001d8a06 	andseq	r8, sp, r6, lsl #20
    23e8:	76110400 	ldrvc	r0, [r1], -r0, lsl #8
    23ec:	64000000 	strvs	r0, [r0], #-0
    23f0:	006e6907 	rsbeq	r6, lr, r7, lsl #18
    23f4:	00761404 	rsbseq	r1, r6, r4, lsl #8
    23f8:	07650000 	strbeq	r0, [r5, -r0]!
    23fc:	0074756f 	rsbseq	r7, r4, pc, ror #10
    2400:	00761704 	rsbseq	r1, r6, r4, lsl #14
    2404:	00660000 	rsbeq	r0, r6, r0
    2408:	00007608 	andeq	r7, r0, r8, lsl #12
    240c:	0000c900 	andeq	ip, r0, r0, lsl #18
    2410:	006f0900 	rsbeq	r0, pc, r0, lsl #18
    2414:	00630000 	rsbeq	r0, r3, r0
    2418:	0015d403 	andseq	sp, r5, r3, lsl #8
    241c:	81180400 	tsthi	r8, r0, lsl #8
    2420:	0a000000 	beq	2428 <startup-0x1fffdbd8>
    2424:	000015e8 	andeq	r1, r0, r8, ror #11
    2428:	00761f01 	rsbseq	r1, r6, r1, lsl #30
    242c:	18d60000 	ldmne	r6, {}^	; <UNPREDICTABLE>
    2430:	005e2000 	subseq	r2, lr, r0
    2434:	9c010000 	stcls	0, cr0, [r1], {-0}
    2438:	0000010a 	andeq	r0, r0, sl, lsl #2
    243c:	0015fd0b 	andseq	pc, r5, fp, lsl #26
    2440:	0a1f0100 	beq	7c2848 <startup-0x1f83d7b8>
    2444:	02000001 	andeq	r0, r0, #1
    2448:	d90b7491 	stmdble	fp, {r0, r4, r7, sl, ip, sp, lr}
    244c:	01000015 	tsteq	r0, r5, lsl r0
    2450:	0001101f 	andeq	r1, r1, pc, lsl r0
    2454:	70910200 	addsvc	r0, r1, r0, lsl #4
    2458:	c9040c00 	stmdbgt	r4, {sl, fp}
    245c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2460:	00007604 	andeq	r7, r0, r4, lsl #12
    2464:	157f0a00 	ldrbne	r0, [pc, #-2560]!	; 1a6c <startup-0x1fffe594>
    2468:	0c010000 	stceq	0, cr0, [r1], {-0}
    246c:	00000076 	andeq	r0, r0, r6, ror r0
    2470:	20001874 	andcs	r1, r0, r4, ror r8
    2474:	00000062 	andeq	r0, r0, r2, rrx
    2478:	014c9c01 	cmpeq	ip, r1, lsl #24
    247c:	fd0b0000 	stc2	0, cr0, [fp, #-0]
    2480:	01000015 	tsteq	r0, r5, lsl r0
    2484:	00010a0c 	andeq	r0, r1, ip, lsl #20
    2488:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    248c:	0015e30b 	andseq	lr, r5, fp, lsl #6
    2490:	760c0100 	strvc	r0, [ip], -r0, lsl #2
    2494:	02000000 	andeq	r0, r0, #0
    2498:	0d007391 	stceq	3, cr7, [r0, #-580]	; 0xfffffdbc
    249c:	000015f2 	strdeq	r1, [r0], -r2
    24a0:	184c0401 	stmdane	ip, {r0, sl}^
    24a4:	00282000 	eoreq	r2, r8, r0
    24a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    24ac:	0015fd0b 	andseq	pc, r5, fp, lsl #26
    24b0:	0a040100 	beq	1028b8 <startup-0x1fefd748>
    24b4:	02000001 	andeq	r0, r0, #1
    24b8:	00007491 	muleq	r0, r1, r4
    24bc:	000009cc 	andeq	r0, r0, ip, asr #19
    24c0:	07040004 	streq	r0, [r4, -r4]
    24c4:	01040000 	mrseq	r0, (UNDEF: 4)
    24c8:	000005d8 	ldrdeq	r0, [r0], -r8
    24cc:	0019d50c 	andseq	sp, r9, ip, lsl #10
    24d0:	00053800 	andeq	r3, r5, r0, lsl #16
    24d4:	00193400 	andseq	r3, r9, r0, lsl #8
    24d8:	0009fe20 	andeq	pc, r9, r0, lsr #28
    24dc:	000a9f00 	andeq	r9, sl, r0, lsl #30
    24e0:	06010200 	streq	r0, [r1], -r0, lsl #4
    24e4:	000003eb 	andeq	r0, r0, fp, ror #7
    24e8:	0001c303 	andeq	ip, r1, r3, lsl #6
    24ec:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    24f0:	02000000 	andeq	r0, r0, #0
    24f4:	03e90801 	mvneq	r0, #65536	; 0x10000
    24f8:	02020000 	andeq	r0, r2, #0
    24fc:	000f4c05 	andeq	r4, pc, r5, lsl #24
    2500:	04f80300 	ldrbteq	r0, [r8], #768	; 0x300
    2504:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    2508:	00000050 	andeq	r0, r0, r0, asr r0
    250c:	c1070202 	tstgt	r7, r2, lsl #4
    2510:	03000010 	movweq	r0, #16
    2514:	00001154 	andeq	r1, r0, r4, asr r1
    2518:	00624d02 	rsbeq	r4, r2, r2, lsl #26
    251c:	04020000 	streq	r0, [r2], #-0
    2520:	0009a305 	andeq	sl, r9, r5, lsl #6
    2524:	094c0300 	stmdbeq	ip, {r8, r9}^
    2528:	4f020000 	svcmi	0x00020000
    252c:	00000074 	andeq	r0, r0, r4, ror r0
    2530:	1e070402 	cdpne	4, 0, cr0, cr7, cr2, {0}
    2534:	0200000d 	andeq	r0, r0, #13
    2538:	099e0508 	ldmibeq	lr, {r3, r8, sl}
    253c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2540:	000d1907 	andeq	r1, sp, r7, lsl #18
    2544:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    2548:	00746e69 	rsbseq	r6, r4, r9, ror #28
    254c:	23070402 	movwcs	r0, #29698	; 0x7402
    2550:	0300000d 	movweq	r0, #13
    2554:	000001c5 	andeq	r0, r0, r5, asr #3
    2558:	002c1803 	eoreq	r1, ip, r3, lsl #16
    255c:	fa030000 	blx	c2564 <startup-0x1ff3da9c>
    2560:	03000004 	movweq	r0, #4
    2564:	00004524 	andeq	r4, r0, r4, lsr #10
    2568:	00a20500 	adceq	r0, r2, r0, lsl #10
    256c:	56030000 	strpl	r0, [r3], -r0
    2570:	03000011 	movweq	r0, #17
    2574:	0000572c 	andeq	r5, r0, ip, lsr #14
    2578:	00b20500 	adcseq	r0, r2, r0, lsl #10
    257c:	4e030000 	cdpmi	0, 0, cr0, cr3, cr0, {0}
    2580:	03000009 	movweq	r0, #9
    2584:	00006930 	andeq	r6, r0, r0, lsr r9
    2588:	0fe70600 	svceq	0x00e70600
    258c:	fa040000 	blx	102594 <startup-0x1fefda6c>
    2590:	0000bd06 	andeq	fp, r0, r6, lsl #26
    2594:	08580700 	ldmdaeq	r8, {r8, r9, sl}^
    2598:	3b050000 	blcc	1425a0 <startup-0x1febda60>
    259c:	000000c2 	andeq	r0, r0, r2, asr #1
    25a0:	37010708 	strcc	r0, [r1, -r8, lsl #14]
    25a4:	06000000 	streq	r0, [r0], -r0
    25a8:	00ff035d 	rscseq	r0, pc, sp, asr r3	; <UNPREDICTABLE>
    25ac:	3b090000 	blcc	2425b4 <startup-0x1fdbda4c>
    25b0:	00000012 	andeq	r0, r0, r2, lsl r0
    25b4:	5445530a 	strbpl	r5, [r5], #-778	; 0xfffffcf6
    25b8:	0b000100 	bleq	29c0 <startup-0x1fffd640>
    25bc:	00000a06 	andeq	r0, r0, r6, lsl #20
    25c0:	e4035d06 	str	r5, [r3], #-3334	; 0xfffff2fa
    25c4:	0b000000 	bleq	25cc <startup-0x1fffda34>
    25c8:	00000ad6 	ldrdeq	r0, [r0], -r6
    25cc:	e4035d06 	str	r5, [r3], #-3334	; 0xfffff2fa
    25d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    25d4:	00370107 	eorseq	r0, r7, r7, lsl #2
    25d8:	5f060000 	svcpl	0x00060000
    25dc:	00013203 	andeq	r3, r1, r3, lsl #4
    25e0:	09dc0900 	ldmibeq	ip, {r8, fp}^
    25e4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    25e8:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    25ec:	e30b0001 	movw	r0, #45057	; 0xb001
    25f0:	0600000c 	streq	r0, [r0], -ip
    25f4:	0117035f 	tsteq	r7, pc, asr r3
    25f8:	1c0c0000 	stcne	0, cr0, [ip], {-0}
    25fc:	fc077306 	stc2	3, cr7, [r7], {6}
    2600:	0d000001 	stceq	0, cr0, [r0, #-4]
    2604:	06005253 			; <UNDEFINED> instruction: 0x06005253
    2608:	00ad0775 	adceq	r0, sp, r5, ror r7
    260c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2610:	000003d5 	ldrdeq	r0, [r0], -r5
    2614:	a2077606 	andge	r7, r7, #6291456	; 0x600000
    2618:	02000000 	andeq	r0, r0, #0
    261c:	0052440d 	subseq	r4, r2, sp, lsl #8
    2620:	ad077706 	stcge	7, cr7, [r7, #-24]	; 0xffffffe8
    2624:	04000000 	streq	r0, [r0], #-0
    2628:	0003df0e 	andeq	sp, r3, lr, lsl #30
    262c:	07780600 	ldrbeq	r0, [r8, -r0, lsl #12]!
    2630:	000000a2 	andeq	r0, r0, r2, lsr #1
    2634:	52420d06 	subpl	r0, r2, #384	; 0x180
    2638:	79060052 	stmdbvc	r6, {r1, r4, r6}
    263c:	0000ad07 	andeq	sl, r0, r7, lsl #26
    2640:	630e0800 	movwvs	r0, #59392	; 0xe800
    2644:	06000004 	streq	r0, [r0], -r4
    2648:	00a2077a 	adceq	r0, r2, sl, ror r7
    264c:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    2650:	00315243 	eorseq	r5, r1, r3, asr #4
    2654:	ad077b06 	vstrge	d7, [r7, #-24]	; 0xffffffe8
    2658:	0c000000 	stceq	0, cr0, [r0], {-0}
    265c:	00046d0e 	andeq	r6, r4, lr, lsl #26
    2660:	077c0600 	ldrbeq	r0, [ip, -r0, lsl #12]!
    2664:	000000a2 	andeq	r0, r0, r2, lsr #1
    2668:	52430d0e 	subpl	r0, r3, #896	; 0x380
    266c:	7d060032 	stcvc	0, cr0, [r6, #-200]	; 0xffffff38
    2670:	0000ad07 	andeq	sl, r0, r7, lsl #26
    2674:	090e1000 	stmdbeq	lr, {ip}
    2678:	06000004 	streq	r0, [r0], -r4
    267c:	00a2077e 	adceq	r0, r2, lr, ror r7
    2680:	0d120000 	ldceq	0, cr0, [r2, #-0]
    2684:	00335243 	eorseq	r5, r3, r3, asr #4
    2688:	ad077f06 	stcge	15, cr7, [r7, #-24]	; 0xffffffe8
    268c:	14000000 	strne	r0, [r0], #-0
    2690:	0004130e 	andeq	r1, r4, lr, lsl #6
    2694:	07800600 	streq	r0, [r0, r0, lsl #12]
    2698:	000000a2 	andeq	r0, r0, r2, lsr #1
    269c:	161e0e16 			; <UNDEFINED> instruction: 0x161e0e16
    26a0:	81060000 	mrshi	r0, (UNDEF: 6)
    26a4:	0000ad07 	andeq	sl, r0, r7, lsl #26
    26a8:	1d0e1800 	stcne	8, cr1, [lr, #-0]
    26ac:	06000004 	streq	r0, [r0], -r4
    26b0:	00a20782 	adceq	r0, r2, r2, lsl #15
    26b4:	001a0000 	andseq	r0, sl, r0
    26b8:	00168a0b 	andseq	r8, r6, fp, lsl #20
    26bc:	07830600 	streq	r0, [r3, r0, lsl #12]
    26c0:	0000013e 	andeq	r0, r0, lr, lsr r1
    26c4:	3607100f 	strcc	r1, [r7], -pc
    26c8:	00000259 	andeq	r0, r0, r9, asr r2
    26cc:	00171010 	andseq	r1, r7, r0, lsl r0
    26d0:	c2380700 	eorsgt	r0, r8, #0, 14
    26d4:	00000000 	andeq	r0, r0, r0
    26d8:	0016e410 	andseq	lr, r6, r0, lsl r4
    26dc:	a23e0700 	eorsge	r0, lr, #0, 14
    26e0:	04000000 	streq	r0, [r0], #-0
    26e4:	00169810 	andseq	r9, r6, r0, lsl r8
    26e8:	a2410700 	subge	r0, r1, #0, 14
    26ec:	06000000 	streq	r0, [r0], -r0
    26f0:	0017ae10 	andseq	sl, r7, r0, lsl lr
    26f4:	a2440700 	subge	r0, r4, #0, 14
    26f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    26fc:	00188210 	andseq	r8, r8, r0, lsl r2
    2700:	a24b0700 	subge	r0, fp, #0, 14
    2704:	0a000000 	beq	270c <startup-0x1fffd8f4>
    2708:	00185510 	andseq	r5, r8, r0, lsl r5
    270c:	a24e0700 	subge	r0, lr, #0, 14
    2710:	0c000000 	stceq	0, cr0, [r0], {-0}
    2714:	18200300 	stmdane	r0!, {r8, r9}
    2718:	51070000 	mrspl	r0, (UNDEF: 7)
    271c:	00000208 	andeq	r0, r0, r8, lsl #4
    2720:	5707080f 	strpl	r0, [r7, -pc, lsl #16]
    2724:	0000029d 	muleq	r0, sp, r2
    2728:	0018e910 	andseq	lr, r8, r0, lsl r9
    272c:	a25a0700 	subsge	r0, sl, #0, 14
    2730:	00000000 	andeq	r0, r0, r0
    2734:	0019c310 	andseq	ip, r9, r0, lsl r3
    2738:	a25d0700 	subsge	r0, sp, #0, 14
    273c:	02000000 	andeq	r0, r0, #0
    2740:	00161310 	andseq	r1, r6, r0, lsl r3
    2744:	a2600700 	rsbge	r0, r0, #0, 14
    2748:	04000000 	streq	r0, [r0], #-0
    274c:	00170210 	andseq	r0, r7, r0, lsl r2
    2750:	a2630700 	rsbge	r0, r3, #0, 14
    2754:	06000000 	streq	r0, [r0], -r0
    2758:	16a70300 	strtne	r0, [r7], r0, lsl #6
    275c:	66070000 	strvs	r0, [r7], -r0
    2760:	00000264 	andeq	r0, r0, r4, ror #4
    2764:	3008100f 	andcc	r1, r8, pc
    2768:	000002e1 	andeq	r0, r0, r1, ror #5
    276c:	00110710 	andseq	r0, r1, r0, lsl r7
    2770:	c2320800 	eorsgt	r0, r2, #0, 16
    2774:	00000000 	andeq	r0, r0, r0
    2778:	00008c10 	andeq	r8, r0, r0, lsl ip
    277c:	c2330800 	eorsgt	r0, r3, #0, 16
    2780:	04000000 	streq	r0, [r0], #-0
    2784:	00059510 	andeq	r9, r5, r0, lsl r5
    2788:	c2340800 	eorsgt	r0, r4, #0, 16
    278c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2790:	00050b10 	andeq	r0, r5, r0, lsl fp
    2794:	c2350800 	eorsgt	r0, r5, #0, 16
    2798:	0c000000 	stceq	0, cr0, [r0], {-0}
    279c:	0f230300 	svceq	0x00230300
    27a0:	36080000 	strcc	r0, [r8], -r0
    27a4:	000002a8 	andeq	r0, r0, r8, lsr #5
    27a8:	00173711 	andseq	r3, r7, r1, lsl r7
    27ac:	05ac0100 	streq	r0, [ip, #256]!	; 0x100
    27b0:	200022ea 	andcs	r2, r0, sl, ror #5
    27b4:	00000048 	andeq	r0, r0, r8, asr #32
    27b8:	033f9c01 	teqeq	pc, #256	; 0x100
    27bc:	4e120000 	cdpmi	0, 1, cr0, cr2, cr0, {0}
    27c0:	01000018 	tsteq	r0, r8, lsl r0
    27c4:	033f05ac 	teqeq	pc, #172, 10	; 0x2b000000
    27c8:	91020000 	mrsls	r0, (UNDEF: 2)
    27cc:	1940126c 	stmdbne	r0, {r2, r3, r5, r6, r9, ip}^
    27d0:	ac010000 	stcge	0, cr0, [r1], {-0}
    27d4:	0000a205 	andeq	sl, r0, r5, lsl #4
    27d8:	6a910200 	bvs	fe442fe0 <GPIO_Pins+0xde440714>
    27dc:	00189b13 	andseq	r9, r8, r3, lsl fp
    27e0:	05ae0100 	streq	r0, [lr, #256]!	; 0x100
    27e4:	000000a2 	andeq	r0, r0, r2, lsr #1
    27e8:	13769102 	cmnne	r6, #-2147483648	; 0x80000000
    27ec:	000019ce 	andeq	r1, r0, lr, asr #19
    27f0:	a205ae01 	andge	sl, r5, #1, 28
    27f4:	02000000 	andeq	r0, r0, #0
    27f8:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    27fc:	0001fc04 	andeq	pc, r1, r4, lsl #24
    2800:	18b91500 	ldmne	r9!, {r8, sl, ip}
    2804:	62010000 	andvs	r0, r1, #0
    2808:	00010b05 	andeq	r0, r1, r5, lsl #22
    280c:	00222000 	eoreq	r2, r2, r0
    2810:	0000ca20 	andeq	ip, r0, r0, lsr #20
    2814:	ba9c0100 	blt	fe702c1c <GPIO_Pins+0xde700350>
    2818:	12000003 	andne	r0, r0, #3
    281c:	0000184e 	andeq	r1, r0, lr, asr #16
    2820:	3f056201 	svccc	0x00056201
    2824:	02000003 	andeq	r0, r0, #3
    2828:	40126491 	mulsmi	r2, r1, r4
    282c:	01000019 	tsteq	r0, r9, lsl r0
    2830:	00a20562 	adceq	r0, r2, r2, ror #10
    2834:	91020000 	mrsls	r0, (UNDEF: 2)
    2838:	189b1362 	ldmne	fp, {r1, r5, r6, r8, r9, ip}
    283c:	64010000 	strvs	r0, [r1], #-0
    2840:	0000c205 	andeq	ip, r0, r5, lsl #4
    2844:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2848:	0019ce13 	andseq	ip, r9, r3, lsl lr
    284c:	05640100 	strbeq	r0, [r4, #-256]!	; 0xffffff00
    2850:	000000c2 	andeq	r0, r0, r2, asr #1
    2854:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    2858:	00001a66 	andeq	r1, r0, r6, ror #20
    285c:	c2056401 	andgt	r6, r5, #16777216	; 0x1000000
    2860:	02000000 	andeq	r0, r0, #0
    2864:	92136891 	andsls	r6, r3, #9502720	; 0x910000
    2868:	0100000f 	tsteq	r0, pc
    286c:	010b0565 	tsteq	fp, r5, ror #10
    2870:	91020000 	mrsls	r0, (UNDEF: 2)
    2874:	dc110073 	ldcle	0, cr0, [r1], {115}	; 0x73
    2878:	01000017 	tsteq	r0, r7, lsl r0
    287c:	21fe0540 	mvnscs	r0, r0, asr #10
    2880:	00222000 	eoreq	r2, r2, r0
    2884:	9c010000 	stcls	0, cr0, [r1], {-0}
    2888:	000003ef 	andeq	r0, r0, pc, ror #7
    288c:	00184e12 	andseq	r4, r8, r2, lsl lr
    2890:	05400100 	strbeq	r0, [r0, #-256]	; 0xffffff00
    2894:	0000033f 	andeq	r0, r0, pc, lsr r3
    2898:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    289c:	00001780 	andeq	r1, r0, r0, lsl #15
    28a0:	a2054001 	andge	r4, r5, #1
    28a4:	02000000 	andeq	r0, r0, #0
    28a8:	15007291 	strne	r7, [r0, #-657]	; 0xfffffd6f
    28ac:	0000192c 	andeq	r1, r0, ip, lsr #18
    28b0:	ff050f01 			; <UNDEFINED> instruction: 0xff050f01
    28b4:	b6000000 	strlt	r0, [r0], -r0
    28b8:	48200021 	stmdami	r0!, {r0, r5}
    28bc:	01000000 	mrseq	r0, (UNDEF: 0)
    28c0:	0004379c 	muleq	r4, ip, r7
    28c4:	184e1200 	stmdane	lr, {r9, ip}^
    28c8:	0f010000 	svceq	0x00010000
    28cc:	00033f05 	andeq	r3, r3, r5, lsl #30
    28d0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    28d4:	00178012 	andseq	r8, r7, r2, lsl r0
    28d8:	050f0100 	streq	r0, [pc, #-256]	; 27e0 <startup-0x1fffd820>
    28dc:	000000a2 	andeq	r0, r0, r2, lsr #1
    28e0:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    28e4:	00000f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
    28e8:	ff051101 			; <UNDEFINED> instruction: 0xff051101
    28ec:	02000000 	andeq	r0, r0, #0
    28f0:	11007791 			; <UNDEFINED> instruction: 0x11007791
    28f4:	00001832 	andeq	r1, r0, r2, lsr r8
    28f8:	1c04cf01 	stcne	15, cr12, [r4], {1}
    28fc:	9a200021 	bls	802988 <startup-0x1f7fd678>
    2900:	01000000 	mrseq	r0, (UNDEF: 0)
    2904:	0004b79c 	muleq	r4, ip, r7
    2908:	184e1200 	stmdane	lr, {r9, ip}^
    290c:	cf010000 	svcgt	0x00010000
    2910:	00033f04 	andeq	r3, r3, r4, lsl #30
    2914:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2918:	00194012 	andseq	r4, r9, r2, lsl r0
    291c:	04cf0100 	strbeq	r0, [pc], #256	; 2924 <startup-0x1fffd6dc>
    2920:	000000a2 	andeq	r0, r0, r2, lsr #1
    2924:	12629102 	rsbne	r9, r2, #-2147483648	; 0x80000000
    2928:	00000afd 	strdeq	r0, [r0], -sp
    292c:	3204cf01 	andcc	ip, r4, #1, 30
    2930:	02000001 	andeq	r0, r0, #1
    2934:	66136191 			; <UNDEFINED> instruction: 0x66136191
    2938:	0100001a 	tsteq	r0, sl, lsl r0
    293c:	00c204d1 	ldrdeq	r0, [r2], #65	; 0x41
    2940:	91020000 	mrsls	r0, (UNDEF: 2)
    2944:	189c1370 	ldmne	ip, {r4, r5, r6, r8, r9, ip}
    2948:	d1010000 	mrsle	r0, (UNDEF: 1)
    294c:	0000c204 	andeq	ip, r0, r4, lsl #4
    2950:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2954:	0019ce13 	andseq	ip, r9, r3, lsl lr
    2958:	04d10100 	ldrbeq	r0, [r1], #256	; 0x100
    295c:	000000c2 	andeq	r0, r0, r2, asr #1
    2960:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    2964:	000017d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    2968:	c204d201 	andgt	sp, r4, #268435456	; 0x10000000
    296c:	02000000 	andeq	r0, r0, #0
    2970:	11007491 			; <UNDEFINED> instruction: 0x11007491
    2974:	000016f5 	strdeq	r1, [r0], -r5
    2978:	ca044b01 	bgt	115584 <startup-0x1feeaa7c>
    297c:	52200020 	eorpl	r0, r0, #32
    2980:	01000000 	mrseq	r0, (UNDEF: 0)
    2984:	0004fb9c 	muleq	r4, ip, fp
    2988:	184e1200 	stmdane	lr, {r9, ip}^
    298c:	4b010000 	blmi	42994 <startup-0x1ffbd66c>
    2990:	00033f04 	andeq	r3, r3, r4, lsl #30
    2994:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2998:	00184112 	andseq	r4, r8, r2, lsl r1
    299c:	044b0100 	strbeq	r0, [fp], #-256	; 0xffffff00
    29a0:	000000a2 	andeq	r0, r0, r2, lsr #1
    29a4:	12729102 	rsbsne	r9, r2, #-2147483648	; 0x80000000
    29a8:	00000afd 	strdeq	r0, [r0], -sp
    29ac:	32044b01 	andcc	r4, r4, #1024	; 0x400
    29b0:	02000001 	andeq	r0, r0, #1
    29b4:	11007191 			; <UNDEFINED> instruction: 0x11007191
    29b8:	000018f5 	strdeq	r1, [r0], -r5
    29bc:	8a041d01 	bhi	109dc8 <startup-0x1fef6238>
    29c0:	40200020 	eormi	r0, r0, r0, lsr #32
    29c4:	01000000 	mrseq	r0, (UNDEF: 0)
    29c8:	0005309c 	muleq	r5, ip, r0
    29cc:	184e1200 	stmdane	lr, {r9, ip}^
    29d0:	1d010000 	stcne	0, cr0, [r1, #-0]
    29d4:	00033f04 	andeq	r3, r3, r4, lsl #30
    29d8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    29dc:	000afd12 	andeq	pc, sl, r2, lsl sp	; <UNPREDICTABLE>
    29e0:	041d0100 	ldreq	r0, [sp], #-256	; 0xffffff00
    29e4:	00000132 	andeq	r0, r0, r2, lsr r1
    29e8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    29ec:	0018d811 	andseq	sp, r8, r1, lsl r8
    29f0:	040b0100 	streq	r0, [fp], #-256	; 0xffffff00
    29f4:	20002052 	andcs	r2, r0, r2, asr r0
    29f8:	00000038 	andeq	r0, r0, r8, lsr r0
    29fc:	05659c01 	strbeq	r9, [r5, #-3073]!	; 0xfffff3ff
    2a00:	4e120000 	cdpmi	0, 1, cr0, cr2, cr0, {0}
    2a04:	01000018 	tsteq	r0, r8, lsl r0
    2a08:	033f040b 	teqeq	pc, #184549376	; 0xb000000
    2a0c:	91020000 	mrsls	r0, (UNDEF: 2)
    2a10:	171f1274 			; <UNDEFINED> instruction: 0x171f1274
    2a14:	0b010000 	bleq	42a1c <startup-0x1ffbd5e4>
    2a18:	0000a204 	andeq	sl, r0, r4, lsl #4
    2a1c:	72910200 	addsvc	r0, r1, #0, 4
    2a20:	19151100 	ldmdbne	r5, {r8, ip}
    2a24:	c4010000 	strgt	r0, [r1], #-0
    2a28:	00201203 	eoreq	r1, r0, r3, lsl #4
    2a2c:	00004020 	andeq	r4, r0, r0, lsr #32
    2a30:	9a9c0100 	bls	fe702e38 <GPIO_Pins+0xde70056c>
    2a34:	12000005 	andne	r0, r0, #5
    2a38:	0000184e 	andeq	r1, r0, lr, asr #16
    2a3c:	3f03c401 	svccc	0x0003c401
    2a40:	02000003 	andeq	r0, r0, #3
    2a44:	fd127491 	ldc2	4, cr7, [r2, #-580]	; 0xfffffdbc
    2a48:	0100000a 	tsteq	r0, sl
    2a4c:	013203c4 	teqeq	r2, r4, asr #7
    2a50:	91020000 	mrsls	r0, (UNDEF: 2)
    2a54:	6f110073 	svcvs	0x00110073
    2a58:	01000018 	tsteq	r0, r8, lsl r0
    2a5c:	1fd203ab 	svcne	0x00d203ab
    2a60:	00402000 	subeq	r2, r0, r0
    2a64:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a68:	000005cf 	andeq	r0, r0, pc, asr #11
    2a6c:	00184e12 	andseq	r4, r8, r2, lsl lr
    2a70:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    2a74:	0000033f 	andeq	r0, r0, pc, lsr r3
    2a78:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2a7c:	00000afd 	strdeq	r0, [r0], -sp
    2a80:	3203ab01 	andcc	sl, r3, #1024	; 0x400
    2a84:	02000001 	andeq	r0, r0, #1
    2a88:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2a8c:	000017fd 	strdeq	r1, [r0], -sp
    2a90:	94039801 	strls	r9, [r3], #-2049	; 0xfffff7ff
    2a94:	3e20001f 	miacc	acc0, pc, r0
    2a98:	01000000 	mrseq	r0, (UNDEF: 0)
    2a9c:	0006049c 	muleq	r6, ip, r4
    2aa0:	184e1200 	stmdane	lr, {r9, ip}^
    2aa4:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2aa8:	00033f03 	andeq	r3, r3, r3, lsl #30
    2aac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ab0:	00174f12 	andseq	r4, r7, r2, lsl pc
    2ab4:	03980100 	orrseq	r0, r8, #0, 2
    2ab8:	00000097 	muleq	r0, r7, r0
    2abc:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2ac0:	00198e11 	andseq	r8, r9, r1, lsl lr
    2ac4:	03440100 	movteq	r0, #16640	; 0x4100
    2ac8:	20001f54 	andcs	r1, r0, r4, asr pc
    2acc:	00000040 	andeq	r0, r0, r0, asr #32
    2ad0:	06399c01 	ldrteq	r9, [r9], -r1, lsl #24
    2ad4:	4e120000 	cdpmi	0, 1, cr0, cr2, cr0, {0}
    2ad8:	01000018 	tsteq	r0, r8, lsl r0
    2adc:	033f0344 	teqeq	pc, #68, 6	; 0x10000001
    2ae0:	91020000 	mrsls	r0, (UNDEF: 2)
    2ae4:	0afd1274 	beq	fff474bc <GPIO_Pins+0xdff44bf0>
    2ae8:	44010000 	strmi	r0, [r1], #-0
    2aec:	00013203 	andeq	r3, r1, r3, lsl #4
    2af0:	73910200 	orrsvc	r0, r1, #0, 4
    2af4:	18101100 	ldmdane	r0, {r8, ip}
    2af8:	0f010000 	svceq	0x00010000
    2afc:	001f3403 	andseq	r3, pc, r3, lsl #8
    2b00:	00002020 	andeq	r2, r0, r0, lsr #32
    2b04:	5f9c0100 	svcpl	0x009c0100
    2b08:	12000006 	andne	r0, r0, #6
    2b0c:	0000184e 	andeq	r1, r0, lr, asr #16
    2b10:	3f030f01 	svccc	0x00030f01
    2b14:	02000003 	andeq	r0, r0, #3
    2b18:	11007491 			; <UNDEFINED> instruction: 0x11007491
    2b1c:	000018cb 	andeq	r1, r0, fp, asr #17
    2b20:	ec02f701 	stc	7, cr15, [r2], {1}
    2b24:	4820001e 	stmdami	r0!, {r1, r2, r3, r4}
    2b28:	01000000 	mrseq	r0, (UNDEF: 0)
    2b2c:	0006949c 	muleq	r6, ip, r4
    2b30:	184e1200 	stmdane	lr, {r9, ip}^
    2b34:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    2b38:	00033f02 	andeq	r3, r3, r2, lsl #30
    2b3c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2b40:	000afd12 	andeq	pc, sl, r2, lsl sp	; <UNPREDICTABLE>
    2b44:	02f70100 	rscseq	r0, r7, #0, 2
    2b48:	00000132 	andeq	r0, r0, r2, lsr r1
    2b4c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2b50:	00175f11 	andseq	r5, r7, r1, lsl pc
    2b54:	02e50100 	rsceq	r0, r5, #0, 2
    2b58:	20001eb4 			; <UNDEFINED> instruction: 0x20001eb4
    2b5c:	00000038 	andeq	r0, r0, r8, lsr r0
    2b60:	06c99c01 	strbeq	r9, [r9], r1, lsl #24
    2b64:	4e120000 	cdpmi	0, 1, cr0, cr2, cr0, {0}
    2b68:	01000018 	tsteq	r0, r8, lsl r0
    2b6c:	033f02e5 	teqeq	pc, #1342177294	; 0x5000000e
    2b70:	91020000 	mrsls	r0, (UNDEF: 2)
    2b74:	16591274 			; <UNDEFINED> instruction: 0x16591274
    2b78:	e5010000 	str	r0, [r1, #-0]
    2b7c:	0000a202 	andeq	sl, r0, r2, lsl #4
    2b80:	72910200 	addsvc	r0, r1, #0, 4
    2b84:	197b1100 	ldmdbne	fp!, {r8, ip}^
    2b88:	a0010000 	andge	r0, r1, r0
    2b8c:	001e7602 	andseq	r7, lr, r2, lsl #12
    2b90:	00003e20 	andeq	r3, r0, r0, lsr #28
    2b94:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
    2b98:	12000006 	andne	r0, r0, #6
    2b9c:	0000184e 	andeq	r1, r0, lr, asr #16
    2ba0:	3f02a001 	svccc	0x0002a001
    2ba4:	02000003 	andeq	r0, r0, #3
    2ba8:	d7127491 			; <UNDEFINED> instruction: 0xd7127491
    2bac:	01000016 	tsteq	r0, r6, lsl r0
    2bb0:	00a202a0 	adceq	r0, r2, r0, lsr #5
    2bb4:	91020000 	mrsls	r0, (UNDEF: 2)
    2bb8:	23110072 	tstcs	r1, #114	; 0x72
    2bbc:	01000016 	tsteq	r0, r6, lsl r0
    2bc0:	1e360285 	cdpne	2, 3, cr0, cr6, cr5, {4}
    2bc4:	00402000 	subeq	r2, r0, r0
    2bc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bcc:	00000733 	andeq	r0, r0, r3, lsr r7
    2bd0:	00184e12 	andseq	r4, r8, r2, lsl lr
    2bd4:	02850100 	addeq	r0, r5, #0, 2
    2bd8:	0000033f 	andeq	r0, r0, pc, lsr r3
    2bdc:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2be0:	00000afd 	strdeq	r0, [r0], -sp
    2be4:	32028501 	andcc	r8, r2, #4194304	; 0x400000
    2be8:	02000001 	andeq	r0, r0, #1
    2bec:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2bf0:	000017ec 	andeq	r1, r0, ip, ror #15
    2bf4:	fc027101 	stc2	1, cr7, [r2], {1}
    2bf8:	3a20001d 	bcc	802c74 <startup-0x1f7fd38c>
    2bfc:	01000000 	mrseq	r0, (UNDEF: 0)
    2c00:	0007689c 	muleq	r7, ip, r8
    2c04:	184e1200 	stmdane	lr, {r9, ip}^
    2c08:	71010000 	mrsvc	r0, (UNDEF: 1)
    2c0c:	00033f02 	andeq	r3, r3, r2, lsl #30
    2c10:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2c14:	00188d12 	andseq	r8, r8, r2, lsl sp
    2c18:	02710100 	rsbseq	r0, r1, #0, 2
    2c1c:	00000097 	muleq	r0, r7, r0
    2c20:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2c24:	001a5415 	andseq	r5, sl, r5, lsl r4
    2c28:	023d0100 	eorseq	r0, sp, #0, 2
    2c2c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2c30:	20001de0 	andcs	r1, r0, r0, ror #27
    2c34:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c38:	07929c01 	ldreq	r9, [r2, r1, lsl #24]
    2c3c:	4e120000 	cdpmi	0, 1, cr0, cr2, cr0, {0}
    2c40:	01000018 	tsteq	r0, r8, lsl r0
    2c44:	033f023d 	teqeq	pc, #-805306365	; 0xd0000003
    2c48:	91020000 	mrsls	r0, (UNDEF: 2)
    2c4c:	c8110074 	ldmdagt	r1, {r2, r4, r5, r6}
    2c50:	01000016 	tsteq	r0, r6, lsl r0
    2c54:	1dbc022d 	lfmne	f0, 4, [ip, #180]!	; 0xb4
    2c58:	00242000 	eoreq	r2, r4, r0
    2c5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c60:	000007c7 	andeq	r0, r0, r7, asr #15
    2c64:	00184e12 	andseq	r4, r8, r2, lsl lr
    2c68:	022d0100 	eoreq	r0, sp, #0, 2
    2c6c:	0000033f 	andeq	r0, r0, pc, lsr r3
    2c70:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2c74:	000016d2 	ldrdeq	r1, [r0], -r2
    2c78:	a2022d01 	andge	r2, r2, #1, 26	; 0x40
    2c7c:	02000000 	andeq	r0, r0, #0
    2c80:	11007291 			; <UNDEFINED> instruction: 0x11007291
    2c84:	00001674 	andeq	r1, r0, r4, ror r6
    2c88:	7401f401 	strvc	pc, [r1], #-1025	; 0xfffffbff
    2c8c:	4820001d 	stmdami	r0!, {r0, r2, r3, r4}
    2c90:	01000000 	mrseq	r0, (UNDEF: 0)
    2c94:	0007fc9c 	muleq	r7, ip, ip
    2c98:	184e1200 	stmdane	lr, {r9, ip}^
    2c9c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    2ca0:	00033f01 	andeq	r3, r3, r1, lsl #30
    2ca4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ca8:	000afd12 	andeq	pc, sl, r2, lsl sp	; <UNPREDICTABLE>
    2cac:	01f40100 	mvnseq	r0, r0, lsl #2
    2cb0:	00000132 	andeq	r0, r0, r2, lsr r1
    2cb4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2cb8:	0018a211 	andseq	sl, r8, r1, lsl r2
    2cbc:	01da0100 	bicseq	r0, sl, r0, lsl #2
    2cc0:	20001d2e 	andcs	r1, r0, lr, lsr #26
    2cc4:	00000046 	andeq	r0, r0, r6, asr #32
    2cc8:	08319c01 	ldmdaeq	r1!, {r0, sl, fp, ip, pc}
    2ccc:	4e120000 	cdpmi	0, 1, cr0, cr2, cr0, {0}
    2cd0:	01000018 	tsteq	r0, r8, lsl r0
    2cd4:	033f01da 	teqeq	pc, #-2147483594	; 0x80000036
    2cd8:	91020000 	mrsls	r0, (UNDEF: 2)
    2cdc:	0afd1274 	beq	fff476b4 <GPIO_Pins+0xdff44de8>
    2ce0:	da010000 	ble	42ce8 <startup-0x1ffbd318>
    2ce4:	00013201 	andeq	r3, r1, r1, lsl #4
    2ce8:	73910200 	orrsvc	r0, r1, #0, 4
    2cec:	163b1100 	ldrtne	r1, [fp], -r0, lsl #2
    2cf0:	c5010000 	strgt	r0, [r1, #-0]
    2cf4:	001cf401 	andseq	pc, ip, r1, lsl #8
    2cf8:	00003a20 	andeq	r3, r0, r0, lsr #20
    2cfc:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
    2d00:	12000008 	andne	r0, r0, #8
    2d04:	0000184e 	andeq	r1, r0, lr, asr #16
    2d08:	3f01c501 	svccc	0x0001c501
    2d0c:	02000003 	andeq	r0, r0, #3
    2d10:	b3127491 	tstlt	r2, #-1862270976	; 0x91000000
    2d14:	01000019 	tsteq	r0, r9, lsl r0
    2d18:	009701c5 	addseq	r0, r7, r5, asr #3
    2d1c:	91020000 	mrsls	r0, (UNDEF: 2)
    2d20:	be110073 	mrclt	0, 0, r0, cr1, cr3, {3}
    2d24:	01000016 	tsteq	r0, r6, lsl r0
    2d28:	1cac01ab 	stfnes	f0, [ip], #684	; 0x2ac
    2d2c:	00482000 	subeq	r2, r8, r0
    2d30:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d34:	0000089b 	muleq	r0, fp, r8
    2d38:	00184e12 	andseq	r4, r8, r2, lsl lr
    2d3c:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    2d40:	0000033f 	andeq	r0, r0, pc, lsr r3
    2d44:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2d48:	00000afd 	strdeq	r0, [r0], -sp
    2d4c:	3201ab01 	andcc	sl, r1, #1024	; 0x400
    2d50:	02000001 	andeq	r0, r0, #1
    2d54:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2d58:	000017bb 			; <UNDEFINED> instruction: 0x000017bb
    2d5c:	84019a01 	strhi	r9, [r1], #-2561	; 0xfffff5ff
    2d60:	2820001c 	stmdacs	r0!, {r2, r3, r4}
    2d64:	01000000 	mrseq	r0, (UNDEF: 0)
    2d68:	0008c19c 	muleq	r8, ip, r1
    2d6c:	17981200 	ldrne	r1, [r8, r0, lsl #4]
    2d70:	9a010000 	bls	42d78 <startup-0x1ffbd288>
    2d74:	0008c101 	andeq	ip, r8, r1, lsl #2
    2d78:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2d7c:	9d041400 	cfstrsls	mvf1, [r4, #-0]
    2d80:	11000002 	tstne	r0, r2
    2d84:	0000196b 	andeq	r1, r0, fp, ror #18
    2d88:	2e017b01 	vmlacs.f64	d7, d1, d1
    2d8c:	5620001c 			; <UNDEFINED> instruction: 0x5620001c
    2d90:	01000000 	mrseq	r0, (UNDEF: 0)
    2d94:	00090b9c 	muleq	r9, ip, fp
    2d98:	184e1200 	stmdane	lr, {r9, ip}^
    2d9c:	7b010000 	blvc	42da4 <startup-0x1ffbd25c>
    2da0:	00033f01 	andeq	r3, r3, r1, lsl #30
    2da4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2da8:	00179812 	andseq	r9, r7, r2, lsl r8
    2dac:	017b0100 	cmneq	fp, r0, lsl #2
    2db0:	000008c1 	andeq	r0, r0, r1, asr #17
    2db4:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    2db8:	00000e38 	andeq	r0, r0, r8, lsr lr
    2dbc:	c2017d01 	andgt	r7, r1, #1, 26	; 0x40
    2dc0:	02000000 	andeq	r0, r0, #0
    2dc4:	11007491 			; <UNDEFINED> instruction: 0x11007491
    2dc8:	000019a2 	andeq	r1, r0, r2, lsr #19
    2dcc:	f8016701 			; <UNDEFINED> instruction: 0xf8016701
    2dd0:	3620001b 			; <UNDEFINED> instruction: 0x3620001b
    2dd4:	01000000 	mrseq	r0, (UNDEF: 0)
    2dd8:	0009319c 	muleq	r9, ip, r1
    2ddc:	19491200 	stmdbne	r9, {r9, ip}^
    2de0:	67010000 	strvs	r0, [r1, -r0]
    2de4:	00093101 	andeq	r3, r9, r1, lsl #2
    2de8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2dec:	59041400 	stmdbpl	r4, {sl, ip}
    2df0:	16000002 	strne	r0, [r0], -r2
    2df4:	0000164e 	andeq	r1, r0, lr, asr #12
    2df8:	1a64f601 	bne	1940604 <startup-0x1e6bf9fc>
    2dfc:	01942000 	orrseq	r2, r4, r0
    2e00:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e04:	000009af 	andeq	r0, r0, pc, lsr #19
    2e08:	00184e17 	andseq	r4, r8, r7, lsl lr
    2e0c:	3ff60100 	svccc	0x00f60100
    2e10:	02000003 	andeq	r0, r0, #3
    2e14:	49175491 	ldmdbmi	r7, {r0, r4, r7, sl, ip, lr}
    2e18:	01000019 	tsteq	r0, r9, lsl r0
    2e1c:	000931f6 	strdeq	r3, [r9], -r6
    2e20:	50910200 	addspl	r0, r1, r0, lsl #4
    2e24:	000e3818 	andeq	r3, lr, r8, lsl r8
    2e28:	c2f80100 	rscsgt	r0, r8, #0, 2
    2e2c:	02000000 	andeq	r0, r0, #0
    2e30:	2e187491 	cfcmpscs	r7, mvf8, mvf1
    2e34:	01000017 	tsteq	r0, r7, lsl r0
    2e38:	0000c2f8 	strdeq	ip, [r0], -r8
    2e3c:	70910200 	addsvc	r0, r1, r0, lsl #4
    2e40:	00160418 	andseq	r0, r6, r8, lsl r4
    2e44:	c2f90100 	rscsgt	r0, r9, #0, 2
    2e48:	02000000 	andeq	r0, r0, #0
    2e4c:	03186c91 	tsteq	r8, #37120	; 0x9100
    2e50:	01000019 	tsteq	r0, r9, lsl r0
    2e54:	0000c2fa 	strdeq	ip, [r0], -sl
    2e58:	68910200 	ldmvs	r1, {r9}
    2e5c:	00195a18 	andseq	r5, r9, r8, lsl sl
    2e60:	e1fb0100 	mvns	r0, r0, lsl #2
    2e64:	02000002 	andeq	r0, r0, #2
    2e68:	19005891 	stmdbne	r0, {r0, r4, r7, fp, ip, lr}
    2e6c:	0000178b 	andeq	r1, r0, fp, lsl #15
    2e70:	1934bb01 	ldmdbne	r4!, {r0, r8, r9, fp, ip, sp, pc}
    2e74:	01302000 	teqeq	r0, r0
    2e78:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e7c:	00184e17 	andseq	r4, r8, r7, lsl lr
    2e80:	3fbb0100 	svccc	0x00bb0100
    2e84:	02000003 	andeq	r0, r0, #3
    2e88:	00007491 	muleq	r0, r1, r4
    2e8c:	000010d0 	ldrdeq	r1, [r0], -r0
    2e90:	08880004 	stmeq	r8, {r2}
    2e94:	01040000 	mrseq	r0, (UNDEF: 4)
    2e98:	000005d8 	ldrdeq	r0, [r0], -r8
    2e9c:	001a900c 	andseq	r9, sl, ip
    2ea0:	00053800 	andeq	r3, r5, r0, lsl #16
    2ea4:	00233400 	eoreq	r3, r3, r0, lsl #8
    2ea8:	00034020 	andeq	r4, r3, r0, lsr #32
    2eac:	000df200 	andeq	pc, sp, r0, lsl #4
    2eb0:	06010200 	streq	r0, [r1], -r0, lsl #4
    2eb4:	000003eb 	andeq	r0, r0, fp, ror #7
    2eb8:	0001c303 	andeq	ip, r1, r3, lsl #6
    2ebc:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    2ec0:	02000000 	andeq	r0, r0, #0
    2ec4:	03e90801 	mvneq	r0, #65536	; 0x10000
    2ec8:	02020000 	andeq	r0, r2, #0
    2ecc:	000f4c05 	andeq	r4, pc, r5, lsl #24
    2ed0:	04f80300 	ldrbteq	r0, [r8], #768	; 0x300
    2ed4:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    2ed8:	00000050 	andeq	r0, r0, r0, asr r0
    2edc:	c1070202 	tstgt	r7, r2, lsl #4
    2ee0:	03000010 	movweq	r0, #16
    2ee4:	00001154 	andeq	r1, r0, r4, asr r1
    2ee8:	00624d02 	rsbeq	r4, r2, r2, lsl #26
    2eec:	04020000 	streq	r0, [r2], #-0
    2ef0:	0009a305 	andeq	sl, r9, r5, lsl #6
    2ef4:	094c0300 	stmdbeq	ip, {r8, r9}^
    2ef8:	4f020000 	svcmi	0x00020000
    2efc:	00000074 	andeq	r0, r0, r4, ror r0
    2f00:	1e070402 	cdpne	4, 0, cr0, cr7, cr2, {0}
    2f04:	0200000d 	andeq	r0, r0, #13
    2f08:	099e0508 	ldmibeq	lr, {r3, r8, sl}
    2f0c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2f10:	000d1907 	andeq	r1, sp, r7, lsl #18
    2f14:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    2f18:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2f1c:	23070402 	movwcs	r0, #29698	; 0x7402
    2f20:	0300000d 	movweq	r0, #13
    2f24:	000001c5 	andeq	r0, r0, r5, asr #3
    2f28:	002c1803 	eoreq	r1, ip, r3, lsl #16
    2f2c:	fa030000 	blx	c2f34 <startup-0x1ff3d0cc>
    2f30:	03000004 	movweq	r0, #4
    2f34:	00004524 	andeq	r4, r0, r4, lsr #10
    2f38:	00a20500 	adceq	r0, r2, r0, lsl #10
    2f3c:	56030000 	strpl	r0, [r3], -r0
    2f40:	03000011 	movweq	r0, #17
    2f44:	0000572c 	andeq	r5, r0, ip, lsr #14
    2f48:	00b20500 	adcseq	r0, r2, r0, lsl #10
    2f4c:	4e030000 	cdpmi	0, 0, cr0, cr3, cr0, {0}
    2f50:	03000009 	movweq	r0, #9
    2f54:	00006930 	andeq	r6, r0, r0, lsr r9
    2f58:	00c20500 	sbceq	r0, r2, r0, lsl #10
    2f5c:	67060000 	strvs	r0, [r6, -r0]
    2f60:	010a0c04 	tsteq	sl, r4, lsl #24
    2f64:	de070000 	cdple	0, 0, cr0, cr7, cr0, {0}
    2f68:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    2f6c:	00010a0e 	andeq	r0, r1, lr, lsl #20
    2f70:	8a070000 	bhi	1c2f78 <startup-0x1fe3d088>
    2f74:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    2f78:	00009711 	andeq	r9, r0, r1, lsl r7
    2f7c:	69086400 	stmdbvs	r8, {sl, sp, lr}
    2f80:	1404006e 	strne	r0, [r4], #-110	; 0xffffff92
    2f84:	00000097 	muleq	r0, r7, r0
    2f88:	756f0865 	strbvc	r0, [pc, #-2149]!	; 272b <startup-0x1fffd8d5>
    2f8c:	17040074 	smlsdxne	r4, r4, r0, r0
    2f90:	00000097 	muleq	r0, r7, r0
    2f94:	97090066 	strls	r0, [r9, -r6, rrx]
    2f98:	1a000000 	bne	2fa0 <startup-0x1fffd060>
    2f9c:	0a000001 	beq	2fa8 <startup-0x1fffd058>
    2fa0:	00000090 	muleq	r0, r0, r0
    2fa4:	d4030063 	strle	r0, [r3], #-99	; 0xffffff9d
    2fa8:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    2fac:	0000d218 	andeq	sp, r0, r8, lsl r2
    2fb0:	0fe20b00 	svceq	0x00e20b00
    2fb4:	01050000 	mrseq	r0, (UNDEF: 5)
    2fb8:	00000025 	andeq	r0, r0, r5, lsr #32
    2fbc:	0353c807 	cmpeq	r3, #458752	; 0x70000
    2fc0:	bc0c0000 	stclt	0, cr0, [ip], {-0}
    2fc4:	72000007 	andvc	r0, r0, #7
    2fc8:	0008420c 	andeq	r4, r8, ip, lsl #4
    2fcc:	070c7400 	streq	r7, [ip, -r0, lsl #8]
    2fd0:	75000009 	strvc	r0, [r0, #-9]
    2fd4:	0004810c 	andeq	r8, r4, ip, lsl #2
    2fd8:	e40c7600 	str	r7, [ip], #-1536	; 0xfffffa00
    2fdc:	7b000009 	blvc	3008 <startup-0x1fffcff8>
    2fe0:	000ec80c 	andeq	ip, lr, ip, lsl #16
    2fe4:	230c7c00 	movwcs	r7, #52224	; 0xcc00
    2fe8:	7e000011 	mcrvc	0, 0, r0, cr0, cr1, {0}
    2fec:	00032d0c 	andeq	r2, r3, ip, lsl #26
    2ff0:	db0d7f00 	blle	362bf8 <startup-0x1fc9d408>
    2ff4:	00000007 	andeq	r0, r0, r7
    2ff8:	0006b30d 	andeq	fp, r6, sp, lsl #6
    2ffc:	680d0100 	stmdavs	sp, {r8}
    3000:	02000008 	andeq	r0, r0, #8
    3004:	00000e0d 	andeq	r0, r0, sp, lsl #28
    3008:	bb0d0300 	bllt	343c10 <startup-0x1fcbc3f0>
    300c:	04000000 	streq	r0, [r0], #-0
    3010:	000f5f0d 	andeq	r5, pc, sp, lsl #30
    3014:	490d0500 	stmdbmi	sp, {r8, sl}
    3018:	0600000e 	streq	r0, [r0], -lr
    301c:	0007400d 	andeq	r4, r7, sp
    3020:	1c0d0700 	stcne	7, cr0, [sp], {-0}
    3024:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3028:	0011180d 	andseq	r1, r1, sp, lsl #16
    302c:	df0d0900 	svcle	0x000d0900
    3030:	0a00000a 	beq	3060 <startup-0x1fffcfa0>
    3034:	000c900d 	andeq	r9, ip, sp
    3038:	aa0d0b00 	bge	345c40 <startup-0x1fcba3c0>
    303c:	0c00000b 	stceq	0, cr0, [r0], {11}
    3040:	00039e0d 	andeq	r9, r3, sp, lsl #28
    3044:	740d0d00 	strvc	r0, [sp], #-3328	; 0xfffff300
    3048:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
    304c:	000e7b0d 	andeq	r7, lr, sp, lsl #22
    3050:	580d0f00 	stmdapl	sp, {r8, r9, sl, fp}
    3054:	10000007 	andne	r0, r0, r7
    3058:	0000270d 	andeq	r2, r0, sp, lsl #14
    305c:	8f0d1100 	svchi	0x000d1100
    3060:	1200000d 	andne	r0, r0, #13
    3064:	00074b0d 	andeq	r4, r7, sp, lsl #22
    3068:	2a0d1300 	bcs	347c70 <startup-0x1fcb8390>
    306c:	14000005 	strne	r0, [r0], #-5
    3070:	0010680d 	andseq	r6, r0, sp, lsl #16
    3074:	780d1500 	stmdavc	sp, {r8, sl, ip}
    3078:	16000008 	strne	r0, [r0], -r8
    307c:	0010920d 	andseq	r9, r0, sp, lsl #4
    3080:	2e0d1700 	cdpcs	7, 0, cr1, cr13, cr0, {0}
    3084:	18000009 	stmdane	r0, {r0, r3}
    3088:	000fd40d 	andeq	sp, pc, sp, lsl #8
    308c:	950d1900 	strls	r1, [sp, #-2304]	; 0xfffff700
    3090:	1a000002 	bne	30a0 <startup-0x1fffcf60>
    3094:	0007250d 	andeq	r2, r7, sp, lsl #10
    3098:	3c0d1b00 			; <UNDEFINED> instruction: 0x3c0d1b00
    309c:	1c000001 	stcne	0, cr0, [r0], {1}
    30a0:	000d430d 	andeq	r4, sp, sp, lsl #6
    30a4:	ce0d1d00 	cdpgt	13, 0, cr1, cr13, cr0, {0}
    30a8:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    30ac:	0006c90d 	andeq	ip, r6, sp, lsl #18
    30b0:	3a0d1f00 	bcc	34acb8 <startup-0x1fcb5348>
    30b4:	20000004 	andcs	r0, r0, r4
    30b8:	000b110d 	andeq	r1, fp, sp, lsl #2
    30bc:	da0d2100 	ble	34b4c4 <startup-0x1fcb4b3c>
    30c0:	22000008 	andcs	r0, r0, #8
    30c4:	0009d20d 	andeq	sp, r9, sp, lsl #4
    30c8:	cd0d2300 	stcgt	3, cr2, [sp, #-0]
    30cc:	24000001 	strcs	r0, [r0], #-1
    30d0:	000d4d0d 	andeq	r4, sp, sp, lsl #26
    30d4:	860d2500 	strhi	r2, [sp], -r0, lsl #10
    30d8:	2600000f 	strcs	r0, [r0], -pc
    30dc:	0003490d 	andeq	r4, r3, sp, lsl #18
    30e0:	0a0d2700 	beq	34cce8 <startup-0x1fcb3318>
    30e4:	2800000d 	stmdacs	r0, {r0, r2, r3}
    30e8:	000cc20d 	andeq	ip, ip, sp, lsl #4
    30ec:	b50d2900 	strlt	r2, [sp, #-2304]	; 0xfffff700
    30f0:	2a00000a 	bcs	3120 <startup-0x1fffcee0>
    30f4:	0001d70d 	andeq	sp, r1, sp, lsl #14
    30f8:	390d2b00 	stmdbcc	sp, {r8, r9, fp, sp}
    30fc:	2c000000 	stccs	0, cr0, [r0], {-0}
    3100:	0007860d 	andeq	r8, r7, sp, lsl #12
    3104:	e50d2d00 	str	r2, [sp, #-3328]	; 0xfffff300
    3108:	2e000010 	mcrcs	0, 0, r0, cr0, cr0, {0}
    310c:	0011420d 	andseq	r4, r1, sp, lsl #4
    3110:	3f0d2f00 	svccc	0x000d2f00
    3114:	3000000e 	andcc	r0, r0, lr
    3118:	0010f20d 	andseq	pc, r0, sp, lsl #4
    311c:	770d3100 	strvc	r3, [sp, -r0, lsl #2]
    3120:	32000004 	andcc	r0, r0, #4
    3124:	0000b10d 	andeq	fp, r0, sp, lsl #2
    3128:	800d3300 	andhi	r3, sp, r0, lsl #6
    312c:	3400000a 	strcc	r0, [r0], #-10
    3130:	0009230d 	andeq	r2, r9, sp, lsl #6
    3134:	ef0d3500 	svc	0x000d3500
    3138:	3600000a 	strcc	r0, [r0], -sl
    313c:	0009940d 	andeq	r9, r9, sp, lsl #8
    3140:	9d0d3700 	stcls	7, cr3, [sp, #-0]
    3144:	38000008 	stmdacc	r0, {r3}
    3148:	00007a0d 	andeq	r7, r0, sp, lsl #20
    314c:	bb0d3900 	bllt	351554 <startup-0x1fcaeaac>
    3150:	3a000011 	bcc	319c <startup-0x1fffce64>
    3154:	000bc90d 	andeq	ip, fp, sp, lsl #18
    3158:	f70d3b00 			; <UNDEFINED> instruction: 0xf70d3b00
    315c:	3c000003 	stccc	0, cr0, [r0], {3}
    3160:	000f1a0d 	andeq	r1, pc, sp, lsl #20
    3164:	ac0d3d00 	stcge	13, cr3, [sp], {-0}
    3168:	3e000009 	cdpcc	0, 0, cr0, cr0, cr9, {0}
    316c:	000be40d 	andeq	lr, fp, sp, lsl #8
    3170:	9f0d3f00 	svcls	0x000d3f00
    3174:	40000001 	andmi	r0, r0, r1
    3178:	000d810d 	andeq	r8, sp, sp, lsl #2
    317c:	470d4100 	strmi	r4, [sp, -r0, lsl #2]
    3180:	42000004 	andmi	r0, r0, #4
    3184:	0007b00d 	andeq	fp, r7, sp
    3188:	5f0d4300 	svcpl	0x000d4300
    318c:	44000002 	strmi	r0, [r0], #-2
    3190:	000e970d 	andeq	r9, lr, sp, lsl #14
    3194:	9e0d4500 	cfsh32ls	mvfx4, mvfx13, #0
    3198:	46000007 	strmi	r0, [r0], -r7
    319c:	0001ad0d 	andeq	sl, r1, sp, lsl #26
    31a0:	fa0d4700 	blx	354da8 <startup-0x1fcab258>
    31a4:	4800000e 	stmdami	r0, {r1, r2, r3}
    31a8:	000cf30d 	andeq	pc, ip, sp, lsl #6
    31ac:	260d4900 	strcs	r4, [sp], -r0, lsl #18
    31b0:	4a000010 	bmi	31f8 <startup-0x1fffce08>
    31b4:	00112f0d 	andseq	r2, r1, sp, lsl #30
    31b8:	e50d4b00 	str	r4, [sp, #-2816]	; 0xfffff500
    31bc:	4c000007 	stcmi	0, cr0, [r0], {7}
    31c0:	0009ba0d 	andeq	fp, r9, sp, lsl #20
    31c4:	c60d4d00 	strgt	r4, [sp], -r0, lsl #26
    31c8:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    31cc:	000d000d 	andeq	r0, sp, sp
    31d0:	320d4f00 	andcc	r4, sp, #0, 30
    31d4:	50000007 	andpl	r0, r0, r7
    31d8:	000a590d 	andeq	r5, sl, sp, lsl #18
    31dc:	0e005100 	adfeqs	f5, f0, f0
    31e0:	00000fe7 	andeq	r0, r0, r7, ror #31
    31e4:	bd06fa05 	vstrlt	s30, [r6, #-20]	; 0xffffffec
    31e8:	0f000000 	svceq	0x00000000
    31ec:	00000858 	andeq	r0, r0, r8, asr r8
    31f0:	00c23b06 	sbceq	r3, r2, r6, lsl #22
    31f4:	07100000 	ldreq	r0, [r0, -r0]
    31f8:	00003701 	andeq	r3, r0, r1, lsl #14
    31fc:	035d0700 	cmpeq	sp, #0, 14
    3200:	00000385 	andeq	r0, r0, r5, lsl #7
    3204:	00123b0d 	andseq	r3, r2, sp, lsl #22
    3208:	53110000 	tstpl	r1, #0
    320c:	01005445 	tsteq	r0, r5, asr #8
    3210:	01071000 	mrseq	r1, (UNDEF: 7)
    3214:	00000037 	andeq	r0, r0, r7, lsr r0
    3218:	a0035f07 	andge	r5, r3, r7, lsl #30
    321c:	0d000003 	stceq	0, cr0, [r0, #-12]
    3220:	000009dc 	ldrdeq	r0, [r0], -ip
    3224:	0f9c0d00 	svceq	0x009c0d00
    3228:	00010000 	andeq	r0, r1, r0
    322c:	000ce312 	andeq	lr, ip, r2, lsl r3
    3230:	035f0700 	cmpeq	pc, #0, 14
    3234:	00000385 	andeq	r0, r0, r5, lsl #7
    3238:	c3072813 	movwgt	r2, #30739	; 0x7813
    323c:	00043805 	andeq	r3, r4, r5, lsl #16
    3240:	10511400 	subsne	r1, r1, r0, lsl #8
    3244:	c5070000 	strgt	r0, [r7, #-0]
    3248:	0000cd05 	andeq	ip, r0, r5, lsl #26
    324c:	2b140000 	blcs	503254 <startup-0x1fafcdac>
    3250:	0700000e 	streq	r0, [r0, -lr]
    3254:	00cd05c6 	sbceq	r0, sp, r6, asr #11
    3258:	14040000 	strne	r0, [r4], #-0
    325c:	000008ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3260:	cd05c707 	stcgt	7, cr12, [r5, #-28]	; 0xffffffe4
    3264:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3268:	0009c614 	andeq	ip, r9, r4, lsl r6
    326c:	05c80700 	strbeq	r0, [r8, #1792]	; 0x700
    3270:	000000cd 	andeq	r0, r0, sp, asr #1
    3274:	4449150c 	strbmi	r1, [r9], #-1292	; 0xfffffaf4
    3278:	c9070052 	stmdbgt	r7, {r1, r4, r6}
    327c:	0000cd05 	andeq	ip, r0, r5, lsl #26
    3280:	4f151000 	svcmi	0x00151000
    3284:	07005244 	streq	r5, [r0, -r4, asr #4]
    3288:	00cd05ca 	sbceq	r0, sp, sl, asr #11
    328c:	14140000 	ldrne	r0, [r4], #-0
    3290:	00000a1c 	andeq	r0, r0, ip, lsl sl
    3294:	ad05cb07 	vstrge	d12, [r5, #-28]	; 0xffffffe4
    3298:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    329c:	0009f914 	andeq	pc, r9, r4, lsl r9	; <UNPREDICTABLE>
    32a0:	05cc0700 	strbeq	r0, [ip, #1792]	; 0x700
    32a4:	000000ad 	andeq	r0, r0, sp, lsr #1
    32a8:	08be141a 	ldmeq	lr!, {r1, r3, r4, sl, ip}
    32ac:	cd070000 	stcgt	0, cr0, [r7, #-0]
    32b0:	0000cd05 	andeq	ip, r0, r5, lsl #26
    32b4:	41151c00 	tstmi	r5, r0, lsl #24
    32b8:	07005246 	streq	r5, [r0, -r6, asr #4]
    32bc:	044805ce 	strbeq	r0, [r8], #-1486	; 0xfffffa32
    32c0:	00200000 	eoreq	r0, r0, r0
    32c4:	0000cd09 	andeq	ip, r0, r9, lsl #26
    32c8:	00044800 	andeq	r4, r4, r0, lsl #16
    32cc:	00900a00 	addseq	r0, r0, r0, lsl #20
    32d0:	00010000 	andeq	r0, r1, r0
    32d4:	00043805 	andeq	r3, r4, r5, lsl #16
    32d8:	0fc71200 	svceq	0x00c71200
    32dc:	cf070000 	svcgt	0x00070000
    32e0:	0003ac05 	andeq	sl, r3, r5, lsl #24
    32e4:	071c1300 	ldreq	r1, [ip, -r0, lsl #6]
    32e8:	05170773 	ldreq	r0, [r7, #-1907]	; 0xfffff88d
    32ec:	53150000 	tstpl	r5, #0
    32f0:	75070052 	strvc	r0, [r7, #-82]	; 0xffffffae
    32f4:	0000ad07 	andeq	sl, r0, r7, lsl #26
    32f8:	d5140000 	ldrle	r0, [r4, #-0]
    32fc:	07000003 	streq	r0, [r0, -r3]
    3300:	00a20776 	adceq	r0, r2, r6, ror r7
    3304:	15020000 	strne	r0, [r2, #-0]
    3308:	07005244 	streq	r5, [r0, -r4, asr #4]
    330c:	00ad0777 	adceq	r0, sp, r7, ror r7
    3310:	14040000 	strne	r0, [r4], #-0
    3314:	000003df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3318:	a2077807 	andge	r7, r7, #458752	; 0x70000
    331c:	06000000 	streq	r0, [r0], -r0
    3320:	52524215 	subspl	r4, r2, #1342177281	; 0x50000001
    3324:	07790700 	ldrbeq	r0, [r9, -r0, lsl #14]!
    3328:	000000ad 	andeq	r0, r0, sp, lsr #1
    332c:	04631408 	strbteq	r1, [r3], #-1032	; 0xfffffbf8
    3330:	7a070000 	bvc	1c3338 <startup-0x1fe3ccc8>
    3334:	0000a207 	andeq	sl, r0, r7, lsl #4
    3338:	43150a00 	tstmi	r5, #0, 20
    333c:	07003152 	smlsdeq	r0, r2, r1, r3
    3340:	00ad077b 	adceq	r0, sp, fp, ror r7
    3344:	140c0000 	strne	r0, [ip], #-0
    3348:	0000046d 	andeq	r0, r0, sp, ror #8
    334c:	a2077c07 	andge	r7, r7, #1792	; 0x700
    3350:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3354:	32524315 	subscc	r4, r2, #1409286144	; 0x54000000
    3358:	077d0700 	ldrbeq	r0, [sp, -r0, lsl #14]!
    335c:	000000ad 	andeq	r0, r0, sp, lsr #1
    3360:	04091410 	streq	r1, [r9], #-1040	; 0xfffffbf0
    3364:	7e070000 	cdpvc	0, 0, cr0, cr7, cr0, {0}
    3368:	0000a207 	andeq	sl, r0, r7, lsl #4
    336c:	43151200 	tstmi	r5, #0, 4
    3370:	07003352 	smlsdeq	r0, r2, r3, r3
    3374:	00ad077f 	adceq	r0, sp, pc, ror r7
    3378:	14140000 	ldrne	r0, [r4], #-0
    337c:	00000413 	andeq	r0, r0, r3, lsl r4
    3380:	a2078007 	andge	r8, r7, #7
    3384:	16000000 	strne	r0, [r0], -r0
    3388:	00161e14 	andseq	r1, r6, r4, lsl lr
    338c:	07810700 	streq	r0, [r1, r0, lsl #14]
    3390:	000000ad 	andeq	r0, r0, sp, lsr #1
    3394:	041d1418 	ldreq	r1, [sp], #-1048	; 0xfffffbe8
    3398:	82070000 	andhi	r0, r7, #0
    339c:	0000a207 	andeq	sl, r0, r7, lsl #4
    33a0:	12001a00 	andne	r1, r0, #0, 20
    33a4:	0000168a 	andeq	r1, r0, sl, lsl #13
    33a8:	59078307 	stmdbpl	r7, {r0, r1, r2, r8, r9, pc}
    33ac:	06000004 	streq	r0, [r0], -r4
    33b0:	5c360804 	ldcpl	8, cr0, [r6], #-16
    33b4:	07000005 	streq	r0, [r0, -r5]
    33b8:	0000148b 	andeq	r1, r0, fp, lsl #9
    33bc:	00973808 	addseq	r3, r7, r8, lsl #16
    33c0:	07000000 	streq	r0, [r0, -r0]
    33c4:	000014b6 			; <UNDEFINED> instruction: 0x000014b6
    33c8:	00973d08 	addseq	r3, r7, r8, lsl #26
    33cc:	07010000 	streq	r0, [r1, -r0]
    33d0:	0000149b 	muleq	r0, fp, r4
    33d4:	00974208 	addseq	r4, r7, r8, lsl #4
    33d8:	07020000 	streq	r0, [r2, -r0]
    33dc:	000013d8 	ldrdeq	r1, [r0], -r8
    33e0:	03a04708 	moveq	r4, #8, 14	; 0x200000
    33e4:	00030000 	andeq	r0, r3, r0
    33e8:	0013c703 	andseq	ip, r3, r3, lsl #14
    33ec:	234a0800 	movtcs	r0, #43008	; 0xa800
    33f0:	06000005 	streq	r0, [r0], -r5
    33f4:	b8360910 	ldmdalt	r6!, {r4, r8, fp}
    33f8:	07000005 	streq	r0, [r0, -r5]
    33fc:	00001710 	andeq	r1, r0, r0, lsl r7
    3400:	00c23809 	sbceq	r3, r2, r9, lsl #16
    3404:	07000000 	streq	r0, [r0, -r0]
    3408:	000016e4 	andeq	r1, r0, r4, ror #13
    340c:	00a23e09 	adceq	r3, r2, r9, lsl #28
    3410:	07040000 	streq	r0, [r4, -r0]
    3414:	00001698 	muleq	r0, r8, r6
    3418:	00a24109 	adceq	r4, r2, r9, lsl #2
    341c:	07060000 	streq	r0, [r6, -r0]
    3420:	000017ae 	andeq	r1, r0, lr, lsr #15
    3424:	00a24409 	adceq	r4, r2, r9, lsl #8
    3428:	07080000 	streq	r0, [r8, -r0]
    342c:	00001882 	andeq	r1, r0, r2, lsl #17
    3430:	00a24b09 	adceq	r4, r2, r9, lsl #22
    3434:	070a0000 	streq	r0, [sl, -r0]
    3438:	00001855 	andeq	r1, r0, r5, asr r8
    343c:	00a24e09 	adceq	r4, r2, r9, lsl #28
    3440:	000c0000 	andeq	r0, ip, r0
    3444:	00182003 	andseq	r2, r8, r3
    3448:	67510900 	ldrbvs	r0, [r1, -r0, lsl #18]
    344c:	16000005 	strne	r0, [r0], -r5
    3450:	00370107 	eorseq	r0, r7, r7, lsl #2
    3454:	420a0000 	andmi	r0, sl, #0
    3458:	000005e9 	andeq	r0, r0, r9, ror #11
    345c:	0008900d 	andeq	r9, r8, sp
    3460:	170d0000 	strne	r0, [sp, -r0]
    3464:	01000007 	tsteq	r0, r7
    3468:	0002710d 	andeq	r7, r2, sp, lsl #2
    346c:	ad0d0200 	sfmge	f0, 4, [sp, #-0]
    3470:	03000002 	movweq	r0, #2
    3474:	0db90300 	ldceq	3, cr0, [r9]
    3478:	470a0000 	strmi	r0, [sl, -r0]
    347c:	000005c3 	andeq	r0, r0, r3, asr #11
    3480:	37010716 	smladcc	r1, r6, r7, r0
    3484:	0a000000 	beq	348c <startup-0x1fffcb74>
    3488:	00060e4f 	andeq	r0, r6, pc, asr #28
    348c:	042c0d00 	strteq	r0, [ip], #-3328	; 0xfffff300
    3490:	0d000000 	stceq	0, cr0, [r0, #-0]
    3494:	0000036e 	andeq	r0, r0, lr, ror #6
    3498:	0a030001 	beq	c34a4 <startup-0x1ff3cb5c>
    349c:	0a000001 	beq	34a8 <startup-0x1fffcb58>
    34a0:	0005f452 	andeq	pc, r5, r2, asr r4	; <UNPREDICTABLE>
    34a4:	01071600 	tsteq	r7, r0, lsl #12
    34a8:	00000037 	andeq	r0, r0, r7, lsr r0
    34ac:	063f5a0a 	ldrteq	r5, [pc], -sl, lsl #20
    34b0:	1b0d0000 	blne	3434b8 <startup-0x1fcbcb48>
    34b4:	00000005 	andeq	r0, r0, r5
    34b8:	0009680d 	andeq	r6, r9, sp, lsl #16
    34bc:	cd0d0100 	stfgts	f0, [sp, #-0]
    34c0:	02000011 	andeq	r0, r0, #17
    34c4:	000a220d 	andeq	r2, sl, sp, lsl #4
    34c8:	03000300 	movweq	r0, #768	; 0x300
    34cc:	00000eb6 			; <UNDEFINED> instruction: 0x00000eb6
    34d0:	06195f0a 	ldreq	r5, [r9], -sl, lsl #30
    34d4:	07160000 	ldreq	r0, [r6, -r0]
    34d8:	00003701 	andeq	r3, r0, r1, lsl #14
    34dc:	6a6e0a00 	bvs	1b85ce4 <startup-0x1e47a31c>
    34e0:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    34e4:	0000009b 	muleq	r0, fp, r0
    34e8:	10850d00 	addne	r0, r5, r0, lsl #26
    34ec:	0d010000 	stceq	0, cr0, [r1, #-0]
    34f0:	000001f5 	strdeq	r0, [r0], -r5
    34f4:	9a030002 	bls	c3504 <startup-0x1ff3cafc>
    34f8:	0a000004 	beq	3510 <startup-0x1fffcaf0>
    34fc:	00064a72 	andeq	r4, r6, r2, ror sl
    3500:	0a080600 	beq	204d08 <startup-0x1fdfb2f8>
    3504:	0006ba84 	andeq	fp, r6, r4, lsl #21
    3508:	0eda0700 	cdpeq	7, 13, cr0, cr10, cr0, {0}
    350c:	860a0000 	strhi	r0, [sl], -r0
    3510:	000000c2 	andeq	r0, r0, r2, asr #1
    3514:	0d770700 	ldcleq	7, cr0, [r7, #-0]
    3518:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
    351c:	000005e9 	andeq	r0, r0, r9, ror #11
    3520:	0b060704 	bleq	185138 <startup-0x1fe7aec8>
    3524:	8c0a0000 	stchi	0, cr0, [sl], {-0}
    3528:	0000063f 	andeq	r0, r0, pc, lsr r6
    352c:	09410705 	stmdbeq	r1, {r0, r2, r8, r9, sl}^
    3530:	8f0a0000 	svchi	0x000a0000
    3534:	0000060e 	andeq	r0, r0, lr, lsl #12
    3538:	0f070706 	svceq	0x00070706
    353c:	920a0000 	andls	r0, sl, #0
    3540:	0000066a 	andeq	r0, r0, sl, ror #12
    3544:	7c030007 	stcvc	0, cr0, [r3], {7}
    3548:	0a000003 	beq	355c <startup-0x1fffcaa4>
    354c:	00067594 	muleq	r6, r4, r5
    3550:	1ec80300 	cdpne	3, 12, cr0, cr8, cr0, {0}
    3554:	220b0000 	andcs	r0, fp, #0
    3558:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    355c:	06d60417 			; <UNDEFINED> instruction: 0x06d60417
    3560:	24180000 	ldrcs	r0, [r8], #-0
    3564:	0300001c 	movweq	r0, #28
    3568:	00001eef 	andeq	r1, r0, pc, ror #29
    356c:	00622c0c 	rsbeq	r2, r2, ip, lsl #24
    3570:	cf030000 	svcgt	0x00030000
    3574:	0c00001d 	stceq	0, cr0, [r0], {29}
    3578:	00006272 	andeq	r6, r0, r2, ror r2
    357c:	1e661200 	cdpne	2, 6, cr1, cr6, cr0, {0}
    3580:	650d0000 	strvs	r0, [sp, #-0]
    3584:	00009001 	andeq	r9, r0, r1
    3588:	0c041900 			; <UNDEFINED> instruction: 0x0c041900
    358c:	00071ca6 	andeq	r1, r7, r6, lsr #25
    3590:	1b501a00 	blne	1409d98 <startup-0x1ebf6268>
    3594:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
    3598:	000006f1 	strdeq	r0, [r0], -r1
    359c:	001dd71a 	andseq	sp, sp, sl, lsl r7
    35a0:	1ca90c00 	stcne	12, cr0, [r9]
    35a4:	00000007 	andeq	r0, r0, r7
    35a8:	00003709 	andeq	r3, r0, r9, lsl #14
    35ac:	00072c00 	andeq	r2, r7, r0, lsl #24
    35b0:	00900a00 	addseq	r0, r0, r0, lsl #20
    35b4:	00030000 	andeq	r0, r3, r0
    35b8:	a30c0806 	movwge	r0, #51206	; 0xc806
    35bc:	0000074d 	andeq	r0, r0, sp, asr #14
    35c0:	001d8807 	andseq	r8, sp, r7, lsl #16
    35c4:	89a50c00 	stmibhi	r5!, {sl, fp}
    35c8:	00000000 	andeq	r0, r0, r0
    35cc:	001a8307 	andseq	r8, sl, r7, lsl #6
    35d0:	fdaa0c00 	stc2	12, cr0, [sl]
    35d4:	04000006 	streq	r0, [r0], #-6
    35d8:	1e560300 	cdpne	3, 5, cr0, cr6, cr0, {0}
    35dc:	ab0c0000 	blge	3035e4 <startup-0x1fcfca1c>
    35e0:	0000072c 	andeq	r0, r0, ip, lsr #14
    35e4:	001e4603 	andseq	r4, lr, r3, lsl #12
    35e8:	c5af0c00 	strgt	r0, [pc, #3072]!	; 41f0 <startup-0x1fffbe10>
    35ec:	1b000006 	blne	360c <startup-0x1fffc9f4>
    35f0:	6b041704 	blvs	109208 <startup-0x1fef6df8>
    35f4:	02000007 	andeq	r0, r0, #7
    35f8:	03f20801 	mvnseq	r0, #65536	; 0x10000
    35fc:	6b1c0000 	blvs	703604 <startup-0x1f8fc9fc>
    3600:	03000007 	movweq	r0, #7
    3604:	00001edf 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    3608:	0074160e 	rsbseq	r1, r4, lr, lsl #12
    360c:	841d0000 	ldrhi	r0, [sp], #-0
    3610:	1800001c 	stmdane	r0, {r2, r3, r4}
    3614:	07d52f0e 	ldrbeq	r2, [r5, lr, lsl #30]
    3618:	73070000 	movwvc	r0, #28672	; 0x7000
    361c:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    3620:	0007d531 	andeq	sp, r7, r1, lsr r5
    3624:	5f080000 	svcpl	0x00080000
    3628:	320e006b 	andcc	r0, lr, #107	; 0x6b
    362c:	00000089 	andeq	r0, r0, r9, lsl #1
    3630:	1c8c0704 	stcne	7, cr0, [ip], {4}
    3634:	320e0000 	andcc	r0, lr, #0
    3638:	00000089 	andeq	r0, r0, r9, lsl #1
    363c:	1d090708 	stcne	7, cr0, [r9, #-32]	; 0xffffffe0
    3640:	320e0000 	andcc	r0, lr, #0
    3644:	00000089 	andeq	r0, r0, r9, lsl #1
    3648:	1c1f070c 	ldcne	7, cr0, [pc], {12}
    364c:	320e0000 	andcc	r0, lr, #0
    3650:	00000089 	andeq	r0, r0, r9, lsl #1
    3654:	785f0810 	ldmdavc	pc, {r4, fp}^	; <UNPREDICTABLE>
    3658:	db330e00 	blle	cc6e60 <startup-0x1f3391a0>
    365c:	14000007 	strne	r0, [r0], #-7
    3660:	82041700 	andhi	r1, r4, #0, 14
    3664:	09000007 	stmdbeq	r0, {r0, r1, r2}
    3668:	00000777 	andeq	r0, r0, r7, ror r7
    366c:	000007eb 	andeq	r0, r0, fp, ror #15
    3670:	0000900a 	andeq	r9, r0, sl
    3674:	1d000000 	stcne	0, cr0, [r0, #-0]
    3678:	00001b08 	andeq	r1, r0, r8, lsl #22
    367c:	64370e24 	ldrtvs	r0, [r7], #-3620	; 0xfffff1dc
    3680:	07000008 	streq	r0, [r0, -r8]
    3684:	00001b24 	andeq	r1, r0, r4, lsr #22
    3688:	0089390e 	addeq	r3, r9, lr, lsl #18
    368c:	07000000 	streq	r0, [r0, -r0]
    3690:	00001f44 	andeq	r1, r0, r4, asr #30
    3694:	00893a0e 	addeq	r3, r9, lr, lsl #20
    3698:	07040000 	streq	r0, [r4, -r0]
    369c:	00001efb 	strdeq	r1, [r0], -fp
    36a0:	00893b0e 	addeq	r3, r9, lr, lsl #22
    36a4:	07080000 	streq	r0, [r8, -r0]
    36a8:	00001d3a 	andeq	r1, r0, sl, lsr sp
    36ac:	00893c0e 	addeq	r3, r9, lr, lsl #24
    36b0:	070c0000 	streq	r0, [ip, -r0]
    36b4:	00001b97 	muleq	r0, r7, fp
    36b8:	00893d0e 	addeq	r3, r9, lr, lsl #26
    36bc:	07100000 	ldreq	r0, [r0, -r0]
    36c0:	00001e9c 	muleq	r0, ip, lr
    36c4:	00893e0e 	addeq	r3, r9, lr, lsl #28
    36c8:	07140000 	ldreq	r0, [r4, -r0]
    36cc:	00001f05 	andeq	r1, r0, r5, lsl #30
    36d0:	00893f0e 	addeq	r3, r9, lr, lsl #30
    36d4:	07180000 	ldreq	r0, [r8, -r0]
    36d8:	00001db2 			; <UNDEFINED> instruction: 0x00001db2
    36dc:	0089400e 	addeq	r4, r9, lr
    36e0:	071c0000 	ldreq	r0, [ip, -r0]
    36e4:	00001f30 	andeq	r1, r0, r0, lsr pc
    36e8:	0089410e 	addeq	r4, r9, lr, lsl #2
    36ec:	00200000 	eoreq	r0, r0, r0
    36f0:	001b5c1e 	andseq	r5, fp, lr, lsl ip
    36f4:	0e010800 	cdpeq	8, 0, cr0, cr1, cr0, {0}
    36f8:	0008a44a 	andeq	sl, r8, sl, asr #8
    36fc:	1f280700 	svcne	0x00280700
    3700:	4b0e0000 	blmi	383708 <startup-0x1fc7c8f8>
    3704:	000008a4 	andeq	r0, r0, r4, lsr #17
    3708:	1dec0700 	stclne	7, cr0, [ip]
    370c:	4c0e0000 	stcmi	0, cr0, [lr], {-0}
    3710:	000008a4 	andeq	r0, r0, r4, lsr #17
    3714:	1e8d1f80 	cdpne	15, 8, cr1, cr13, cr0, {4}
    3718:	4e0e0000 	cdpmi	0, 0, cr0, cr14, cr0, {0}
    371c:	00000777 	andeq	r0, r0, r7, ror r7
    3720:	c01f0100 	andsgt	r0, pc, r0, lsl #2
    3724:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    3728:	00077751 	andeq	r7, r7, r1, asr r7
    372c:	00010400 	andeq	r0, r1, r0, lsl #8
    3730:	00076309 	andeq	r6, r7, r9, lsl #6
    3734:	0008b400 	andeq	fp, r8, r0, lsl #8
    3738:	00900a00 	addseq	r0, r0, r0, lsl #20
    373c:	001f0000 	andseq	r0, pc, r0
    3740:	001d801e 	andseq	r8, sp, lr, lsl r0
    3744:	0e019000 	cdpeq	0, 0, cr9, cr1, cr0, {0}
    3748:	0008f25d 	andeq	pc, r8, sp, asr r2	; <UNPREDICTABLE>
    374c:	1d730700 	ldclne	7, cr0, [r3, #-0]
    3750:	5e0e0000 	cdppl	0, 0, cr0, cr14, cr0, {0}
    3754:	000008f2 	strdeq	r0, [r0], -r2
    3758:	1eb40700 	cdpne	7, 11, cr0, cr4, cr0, {0}
    375c:	5f0e0000 	svcpl	0x000e0000
    3760:	00000089 	andeq	r0, r0, r9, lsl #1
    3764:	1c020704 	stcne	7, cr0, [r2], {4}
    3768:	610e0000 	mrsvs	r0, (UNDEF: 14)
    376c:	000008f8 	strdeq	r0, [r0], -r8
    3770:	1b5c0708 	blne	1705398 <startup-0x1e8fac68>
    3774:	620e0000 	andvs	r0, lr, #0
    3778:	00000864 	andeq	r0, r0, r4, ror #16
    377c:	04170088 	ldreq	r0, [r7], #-136	; 0xffffff78
    3780:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
    3784:	00090809 	andeq	r0, r9, r9, lsl #16
    3788:	00090800 	andeq	r0, r9, r0, lsl #16
    378c:	00900a00 	addseq	r0, r0, r0, lsl #20
    3790:	001f0000 	andseq	r0, pc, r0
    3794:	090e0417 	stmdbeq	lr, {r0, r1, r2, r4, sl}
    3798:	1d200000 	stcne	0, cr0, [r0, #-0]
    379c:	00001eb9 			; <UNDEFINED> instruction: 0x00001eb9
    37a0:	34750e08 	ldrbtcc	r0, [r5], #-3592	; 0xfffff1f8
    37a4:	07000009 	streq	r0, [r0, -r9]
    37a8:	00001e24 	andeq	r1, r0, r4, lsr #28
    37ac:	0934760e 	ldmdbeq	r4!, {r1, r2, r3, r9, sl, ip, sp, lr}
    37b0:	07000000 	streq	r0, [r0, -r0]
    37b4:	00001b82 	andeq	r1, r0, r2, lsl #23
    37b8:	0089770e 	addeq	r7, r9, lr, lsl #14
    37bc:	00040000 	andeq	r0, r4, r0
    37c0:	00370417 	eorseq	r0, r7, r7, lsl r4
    37c4:	511d0000 	tstpl	sp, r0
    37c8:	6800001c 	stmdavs	r0, {r2, r3, r4}
    37cc:	0a64b50e 	beq	1930c0c <startup-0x1e6cf3f4>
    37d0:	5f080000 	svcpl	0x00080000
    37d4:	b60e0070 			; <UNDEFINED> instruction: 0xb60e0070
    37d8:	00000934 	andeq	r0, r0, r4, lsr r9
    37dc:	725f0800 	subsvc	r0, pc, #0, 16
    37e0:	89b70e00 	ldmibhi	r7!, {r9, sl, fp}
    37e4:	04000000 	streq	r0, [r0], #-0
    37e8:	00775f08 	rsbseq	r5, r7, r8, lsl #30
    37ec:	0089b80e 	addeq	fp, r9, lr, lsl #16
    37f0:	07080000 	streq	r0, [r8, -r0]
    37f4:	00001d79 	andeq	r1, r0, r9, ror sp
    37f8:	003eb90e 	eorseq	fp, lr, lr, lsl #18
    37fc:	070c0000 	streq	r0, [ip, -r0]
    3800:	00001b56 	andeq	r1, r0, r6, asr fp
    3804:	003eba0e 	eorseq	fp, lr, lr, lsl #20
    3808:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    380c:	0066625f 	rsbeq	r6, r6, pc, asr r2
    3810:	090fbb0e 	stmdbeq	pc, {r1, r2, r3, r8, r9, fp, ip, sp, pc}	; <UNPREDICTABLE>
    3814:	07100000 	ldreq	r0, [r0, -r0]
    3818:	00001ea6 	andeq	r1, r0, r6, lsr #29
    381c:	0089bc0e 	addeq	fp, r9, lr, lsl #24
    3820:	07180000 	ldreq	r0, [r8, -r0]
    3824:	00001c17 	andeq	r1, r0, r7, lsl ip
    3828:	0763c30e 	strbeq	ip, [r3, -lr, lsl #6]!
    382c:	071c0000 	ldreq	r0, [ip, -r0]
    3830:	00000584 	andeq	r0, r0, r4, lsl #11
    3834:	0bbfc50e 	bleq	feff4c74 <GPIO_Pins+0xdeff23a8>
    3838:	07200000 	streq	r0, [r0, -r0]!
    383c:	00001ae4 	andeq	r1, r0, r4, ror #21
    3840:	0be9c70e 	bleq	ffa75480 <GPIO_Pins+0xdfa72bb4>
    3844:	07240000 	streq	r0, [r4, -r0]!
    3848:	00001dc9 	andeq	r1, r0, r9, asr #27
    384c:	0c0dca0e 			; <UNDEFINED> instruction: 0x0c0dca0e
    3850:	07280000 	streq	r0, [r8, -r0]!
    3854:	00001dab 	andeq	r1, r0, fp, lsr #27
    3858:	0c27cb0e 			; <UNDEFINED> instruction: 0x0c27cb0e
    385c:	082c0000 	stmdaeq	ip!, {}	; <UNPREDICTABLE>
    3860:	0062755f 	rsbeq	r7, r2, pc, asr r5
    3864:	090fce0e 	stmdbeq	pc, {r1, r2, r3, r9, sl, fp, lr, pc}	; <UNPREDICTABLE>
    3868:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    386c:	0070755f 	rsbseq	r7, r0, pc, asr r5
    3870:	0934cf0e 	ldmdbeq	r4!, {r1, r2, r3, r8, r9, sl, fp, lr, pc}
    3874:	08380000 	ldmdaeq	r8!, {}	; <UNPREDICTABLE>
    3878:	0072755f 	rsbseq	r7, r2, pc, asr r5
    387c:	0089d00e 	addeq	sp, r9, lr
    3880:	073c0000 	ldreq	r0, [ip, -r0]!
    3884:	00001d49 	andeq	r1, r0, r9, asr #26
    3888:	0c2dd30e 	stceq	3, cr13, [sp], #-56	; 0xffffffc8
    388c:	07400000 	strbeq	r0, [r0, -r0]
    3890:	00001b1e 	andeq	r1, r0, lr, lsl fp
    3894:	0c3dd40e 	cfldrseq	mvf13, [sp], #-56	; 0xffffffc8
    3898:	08430000 	stmdaeq	r3, {}^	; <UNPREDICTABLE>
    389c:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    38a0:	090fd70e 	stmdbeq	pc, {r1, r2, r3, r8, r9, sl, ip, lr, pc}	; <UNPREDICTABLE>
    38a4:	07440000 	strbeq	r0, [r4, -r0]
    38a8:	00001e08 	andeq	r1, r0, r8, lsl #28
    38ac:	0089da0e 	addeq	sp, r9, lr, lsl #20
    38b0:	074c0000 	strbeq	r0, [ip, -r0]
    38b4:	00001f20 	andeq	r1, r0, r0, lsr #30
    38b8:	06dbdb0e 	ldrbeq	sp, [fp], lr, lsl #22
    38bc:	07500000 	ldrbeq	r0, [r0, -r0]
    38c0:	00001e6d 	andeq	r1, r0, sp, ror #28
    38c4:	0a82de0e 	beq	fe0bb104 <GPIO_Pins+0xde0b8838>
    38c8:	07540000 	ldrbeq	r0, [r4, -r0]
    38cc:	00001c25 	andeq	r1, r0, r5, lsr #24
    38d0:	0758e20e 	ldrbeq	lr, [r8, -lr, lsl #4]
    38d4:	07580000 	ldrbeq	r0, [r8, -r0]
    38d8:	00001d65 	andeq	r1, r0, r5, ror #26
    38dc:	074de40e 	strbeq	lr, [sp, -lr, lsl #8]
    38e0:	075c0000 	ldrbeq	r0, [ip, -r0]
    38e4:	00001c64 	andeq	r1, r0, r4, ror #24
    38e8:	0089e50e 	addeq	lr, r9, lr, lsl #10
    38ec:	00640000 	rsbeq	r0, r4, r0
    38f0:	00008921 	andeq	r8, r0, r1, lsr #18
    38f4:	000a8200 	andeq	r8, sl, r0, lsl #4
    38f8:	0a822200 	beq	fe08c100 <GPIO_Pins+0xde089834>
    38fc:	63220000 			; <UNDEFINED> instruction: 0x63220000
    3900:	22000007 	andcs	r0, r0, #7
    3904:	00000765 	andeq	r0, r0, r5, ror #14
    3908:	00008922 	andeq	r8, r0, r2, lsr #18
    390c:	04170000 	ldreq	r0, [r7], #-0
    3910:	00000a8d 	andeq	r0, r0, sp, lsl #21
    3914:	000a821c 	andeq	r8, sl, ip, lsl r2
    3918:	1be82300 	blne	ffa0c520 <GPIO_Pins+0xdfa09c54>
    391c:	04280000 	strteq	r0, [r8], #-0
    3920:	bf02390e 	svclt	0x0002390e
    3924:	1400000b 	strne	r0, [r0], #-11
    3928:	00001d24 	andeq	r1, r0, r4, lsr #26
    392c:	89023b0e 	stmdbhi	r2, {r1, r2, r3, r8, r9, fp, ip, sp}
    3930:	00000000 	andeq	r0, r0, r0
    3934:	001c0714 	andseq	r0, ip, r4, lsl r7
    3938:	02400e00 	subeq	r0, r0, #0, 28
    393c:	00000c94 	muleq	r0, r4, ip
    3940:	1e001404 	cdpne	4, 0, cr1, cr0, cr4, {0}
    3944:	400e0000 	andmi	r0, lr, r0
    3948:	000c9402 	andeq	r9, ip, r2, lsl #8
    394c:	4f140800 	svcmi	0x00140800
    3950:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    3954:	0c940240 	lfmeq	f0, 4, [r4], {64}	; 0x40
    3958:	140c0000 	strne	r0, [ip], #-0
    395c:	00001eaf 	andeq	r1, r0, pc, lsr #29
    3960:	8902420e 	stmdbhi	r2, {r1, r2, r3, r9, lr}
    3964:	10000000 	andne	r0, r0, r0
    3968:	001c9d14 	andseq	r9, ip, r4, lsl sp
    396c:	02430e00 	subeq	r0, r3, #0, 28
    3970:	00000e76 	andeq	r0, r0, r6, ror lr
    3974:	1bcf1414 	blne	ff3c89cc <GPIO_Pins+0xdf3c6100>
    3978:	460e0000 	strmi	r0, [lr], -r0
    397c:	00008902 	andeq	r8, r0, r2, lsl #18
    3980:	d7143000 	ldrle	r3, [r4, -r0]
    3984:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    3988:	0e8b0247 	cdpeq	2, 8, cr0, cr11, cr7, {2}
    398c:	14340000 	ldrtne	r0, [r4], #-0
    3990:	00001c59 	andeq	r1, r0, r9, asr ip
    3994:	8902490e 	stmdbhi	r2, {r1, r2, r3, r8, fp, lr}
    3998:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    399c:	001ada14 	andseq	sp, sl, r4, lsl sl
    39a0:	024b0e00 	subeq	r0, fp, #0, 28
    39a4:	00000e9c 	muleq	r0, ip, lr
    39a8:	1ee7143c 	mcrne	4, 7, r1, cr7, cr12, {1}
    39ac:	4e0e0000 	cdpmi	0, 0, cr0, cr14, cr0, {0}
    39b0:	0007d502 	andeq	sp, r7, r2, lsl #10
    39b4:	78144000 	ldmdavc	r4, {lr}
    39b8:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    39bc:	0089024f 	addeq	r0, r9, pc, asr #4
    39c0:	14440000 	strbne	r0, [r4], #-0
    39c4:	00001c4c 	andeq	r1, r0, ip, asr #24
    39c8:	d502500e 	strle	r5, [r2, #-14]
    39cc:	48000007 	stmdami	r0, {r0, r1, r2}
    39d0:	001cf314 	andseq	pc, ip, r4, lsl r3	; <UNPREDICTABLE>
    39d4:	02510e00 	subseq	r0, r1, #0, 28
    39d8:	00000ea2 	andeq	r0, r0, r2, lsr #29
    39dc:	1af8144c 	bne	ffe08b14 <GPIO_Pins+0xdfe06248>
    39e0:	540e0000 	strpl	r0, [lr], #-0
    39e4:	00008902 	andeq	r8, r0, r2, lsl #18
    39e8:	3b145000 	blcc	5179f0 <startup-0x1fae8610>
    39ec:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    39f0:	07650255 			; <UNDEFINED> instruction: 0x07650255
    39f4:	14540000 	ldrbne	r0, [r4], #-0
    39f8:	00001d44 	andeq	r1, r0, r4, asr #26
    39fc:	5402780e 	strpl	r7, [r2], #-2062	; 0xfffff7f2
    3a00:	5800000e 	stmdapl	r0, {r1, r2, r3}
    3a04:	001d8024 	andseq	r8, sp, r4, lsr #32
    3a08:	027c0e00 	rsbseq	r0, ip, #0, 28
    3a0c:	000008f2 	strdeq	r0, [r0], -r2
    3a10:	94240148 	strtls	r0, [r4], #-328	; 0xfffffeb8
    3a14:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    3a18:	08b4027d 	ldmeq	r4!, {r0, r2, r3, r4, r5, r6, r9}
    3a1c:	014c0000 	mrseq	r0, (UNDEF: 76)
    3a20:	001c3124 	andseq	r3, ip, r4, lsr #2
    3a24:	02810e00 	addeq	r0, r1, #0, 28
    3a28:	00000eb3 			; <UNDEFINED> instruction: 0x00000eb3
    3a2c:	c12402dc 	ldrdgt	r0, [r4, -ip]!
    3a30:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    3a34:	0c590286 	lfmeq	f0, 2, [r9], {134}	; 0x86
    3a38:	02e00000 	rsceq	r0, r0, #0
    3a3c:	001a8b24 	andseq	r8, sl, r4, lsr #22
    3a40:	02880e00 	addeq	r0, r8, #0, 28
    3a44:	00000ebf 			; <UNDEFINED> instruction: 0x00000ebf
    3a48:	170002ec 	strne	r0, [r0, -ip, ror #5]
    3a4c:	000a6404 	andeq	r6, sl, r4, lsl #8
    3a50:	00892100 	addeq	r2, r9, r0, lsl #2
    3a54:	0be30000 	bleq	ff8c3a5c <GPIO_Pins+0xdf8c1190>
    3a58:	82220000 	eorhi	r0, r2, #0
    3a5c:	2200000a 	andcs	r0, r0, #10
    3a60:	00000763 	andeq	r0, r0, r3, ror #14
    3a64:	000be322 	andeq	lr, fp, r2, lsr #6
    3a68:	00892200 	addeq	r2, r9, r0, lsl #4
    3a6c:	17000000 	strne	r0, [r0, -r0]
    3a70:	00077204 	andeq	r7, r7, r4, lsl #4
    3a74:	c5041700 	strgt	r1, [r4, #-1792]	; 0xfffff900
    3a78:	2100000b 	tstcs	r0, fp
    3a7c:	000006e6 	andeq	r0, r0, r6, ror #13
    3a80:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3a84:	000a8222 	andeq	r8, sl, r2, lsr #4
    3a88:	07632200 	strbeq	r2, [r3, -r0, lsl #4]!
    3a8c:	e6220000 	strt	r0, [r2], -r0
    3a90:	22000006 	andcs	r0, r0, #6
    3a94:	00000089 	andeq	r0, r0, r9, lsl #1
    3a98:	ef041700 	svc	0x00041700
    3a9c:	2100000b 	tstcs	r0, fp
    3aa0:	00000089 	andeq	r0, r0, r9, lsl #1
    3aa4:	00000c27 	andeq	r0, r0, r7, lsr #24
    3aa8:	000a8222 	andeq	r8, sl, r2, lsr #4
    3aac:	07632200 	strbeq	r2, [r3, -r0, lsl #4]!
    3ab0:	17000000 	strne	r0, [r0, -r0]
    3ab4:	000c1304 	andeq	r1, ip, r4, lsl #6
    3ab8:	00370900 	eorseq	r0, r7, r0, lsl #18
    3abc:	0c3d0000 	ldceq	0, cr0, [sp], #-0
    3ac0:	900a0000 	andls	r0, sl, r0
    3ac4:	02000000 	andeq	r0, r0, #0
    3ac8:	00370900 	eorseq	r0, r7, r0, lsl #18
    3acc:	0c4d0000 	mareq	acc0, r0, sp
    3ad0:	900a0000 	andls	r0, sl, r0
    3ad4:	00000000 	andeq	r0, r0, r0
    3ad8:	1e4f1200 	cdpne	2, 4, cr1, cr15, cr0, {0}
    3adc:	1f0e0000 	svcne	0x000e0000
    3ae0:	00093a01 	andeq	r3, r9, r1, lsl #20
    3ae4:	1d032500 	cfstr32ne	mvfx2, [r3, #-0]
    3ae8:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    3aec:	0c8e0123 	stfeqs	f0, [lr], {35}	; 0x23
    3af0:	73140000 	tstvc	r4, #0
    3af4:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    3af8:	0c8e0125 	stfeqs	f0, [lr], {37}	; 0x25
    3afc:	14000000 	strne	r0, [r0], #-0
    3b00:	00001ca8 	andeq	r1, r0, r8, lsr #25
    3b04:	8901260e 	stmdbhi	r1, {r1, r2, r3, r9, sl, sp}
    3b08:	04000000 	streq	r0, [r0], #-0
    3b0c:	001cfd14 	andseq	pc, ip, r4, lsl sp	; <UNPREDICTABLE>
    3b10:	01270e00 			; <UNDEFINED> instruction: 0x01270e00
    3b14:	00000c94 	muleq	r0, r4, ip
    3b18:	04170008 	ldreq	r0, [r7], #-8
    3b1c:	00000c59 	andeq	r0, r0, r9, asr ip
    3b20:	0c4d0417 	cfstrdeq	mvd0, [sp], {23}
    3b24:	f8250000 			; <UNDEFINED> instruction: 0xf8250000
    3b28:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    3b2c:	cf013f0e 	svcgt	0x00013f0e
    3b30:	1400000c 	strne	r0, [r0], #-12
    3b34:	00001dc3 	andeq	r1, r0, r3, asr #27
    3b38:	cf01400e 	svcgt	0x0001400e
    3b3c:	0000000c 	andeq	r0, r0, ip
    3b40:	001b3714 	andseq	r3, fp, r4, lsl r7
    3b44:	01410e00 	cmpeq	r1, r0, lsl #28
    3b48:	00000ccf 	andeq	r0, r0, pc, asr #25
    3b4c:	1ef61406 	cdpne	4, 15, cr1, cr6, cr6, {0}
    3b50:	420e0000 	andmi	r0, lr, #0
    3b54:	00005001 	andeq	r5, r0, r1
    3b58:	09000c00 	stmdbeq	r0, {sl, fp}
    3b5c:	00000050 	andeq	r0, r0, r0, asr r0
    3b60:	00000cdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3b64:	0000900a 	andeq	r9, r0, sl
    3b68:	13000200 	movwne	r0, #512	; 0x200
    3b6c:	02590ed0 	subseq	r0, r9, #208, 28	; 0xd00
    3b70:	00000de0 	andeq	r0, r0, r0, ror #27
    3b74:	001bb414 	andseq	fp, fp, r4, lsl r4
    3b78:	025b0e00 	subseq	r0, fp, #0, 28
    3b7c:	00000090 	muleq	r0, r0, r0
    3b80:	1e2a1400 	cdpne	4, 2, cr1, cr10, cr0, {0}
    3b84:	5c0e0000 	stcpl	0, cr0, [lr], {-0}
    3b88:	00076502 	andeq	r6, r7, r2, lsl #10
    3b8c:	eb140400 	bl	504b94 <startup-0x1fafb46c>
    3b90:	0e00001a 	mcreq	0, 0, r0, cr0, cr10, {0}
    3b94:	0de0025d 	sfmeq	f0, 2, [r0, #372]!	; 0x174
    3b98:	14080000 	strne	r0, [r8], #-0
    3b9c:	00001b88 	andeq	r1, r0, r8, lsl #23
    3ba0:	eb025e0e 	bl	9b3e0 <startup-0x1ff64c20>
    3ba4:	24000007 	strcs	r0, [r0], #-7
    3ba8:	001cd914 	andseq	sp, ip, r4, lsl r9
    3bac:	025f0e00 	subseq	r0, pc, #0, 28
    3bb0:	00000089 	andeq	r0, r0, r9, lsl #1
    3bb4:	1d6e1448 	cfstrdne	mvd1, [lr, #-288]!	; 0xfffffee0
    3bb8:	600e0000 	andvs	r0, lr, r0
    3bbc:	00008202 	andeq	r8, r0, r2, lsl #4
    3bc0:	61145000 	tstvs	r4, r0
    3bc4:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    3bc8:	0c9a0261 	lfmeq	f0, 4, [sl], {97}	; 0x61
    3bcc:	14580000 	ldrbne	r0, [r8], #-0
    3bd0:	00001e73 	andeq	r1, r0, r3, ror lr
    3bd4:	4d02620e 	sfmmi	f6, 4, [r2, #-56]	; 0xffffffc8
    3bd8:	68000007 	stmdavs	r0, {r0, r1, r2}
    3bdc:	001dde14 	andseq	sp, sp, r4, lsl lr
    3be0:	02630e00 	rsbeq	r0, r3, #0, 28
    3be4:	0000074d 	andeq	r0, r0, sp, asr #14
    3be8:	1d571470 	cfldrdne	mvd1, [r7, #-448]	; 0xfffffe40
    3bec:	640e0000 	strvs	r0, [lr], #-0
    3bf0:	00074d02 	andeq	r4, r7, r2, lsl #26
    3bf4:	2d147800 	ldccs	8, cr7, [r4, #-0]
    3bf8:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    3bfc:	0df00265 	lfmeq	f0, 2, [r0, #404]!	; 0x194
    3c00:	14800000 	strne	r0, [r0], #0
    3c04:	00001c78 	andeq	r1, r0, r8, ror ip
    3c08:	0002660e 	andeq	r6, r2, lr, lsl #12
    3c0c:	8800000e 	stmdahi	r0, {r1, r2, r3}
    3c10:	001f4d14 	andseq	r4, pc, r4, lsl sp	; <UNPREDICTABLE>
    3c14:	02670e00 	rsbeq	r0, r7, #0, 28
    3c18:	00000089 	andeq	r0, r0, r9, lsl #1
    3c1c:	1b6a14a0 	blne	1a88ea4 <startup-0x1e57715c>
    3c20:	680e0000 	stmdavs	lr, {}	; <UNPREDICTABLE>
    3c24:	00074d02 	andeq	r4, r7, r2, lsl #26
    3c28:	3714a400 	ldrcc	sl, [r4, -r0, lsl #8]
    3c2c:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    3c30:	074d0269 	strbeq	r0, [sp, -r9, ror #4]
    3c34:	14ac0000 	strtne	r0, [ip], #0
    3c38:	00001f0f 	andeq	r1, r0, pc, lsl #30
    3c3c:	4d026a0e 	vstrmi	s12, [r2, #-56]	; 0xffffffc8
    3c40:	b4000007 	strlt	r0, [r0], #-7
    3c44:	001d2b14 	andseq	r2, sp, r4, lsl fp
    3c48:	026b0e00 	rsbeq	r0, fp, #0, 28
    3c4c:	0000074d 	andeq	r0, r0, sp, asr #14
    3c50:	1b0d14bc 	blne	348f48 <startup-0x1fcb70b8>
    3c54:	6c0e0000 	stcvs	0, cr0, [lr], {-0}
    3c58:	00074d02 	andeq	r4, r7, r2, lsl #26
    3c5c:	2214c400 	andscs	ip, r4, #0, 8
    3c60:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    3c64:	0089026d 	addeq	r0, r9, sp, ror #4
    3c68:	00cc0000 	sbceq	r0, ip, r0
    3c6c:	00076b09 	andeq	r6, r7, r9, lsl #22
    3c70:	000df000 	andeq	pc, sp, r0
    3c74:	00900a00 	addseq	r0, r0, r0, lsl #20
    3c78:	00190000 	andseq	r0, r9, r0
    3c7c:	00076b09 	andeq	r6, r7, r9, lsl #22
    3c80:	000e0000 	andeq	r0, lr, r0
    3c84:	00900a00 	addseq	r0, r0, r0, lsl #20
    3c88:	00070000 	andeq	r0, r7, r0
    3c8c:	00076b09 	andeq	r6, r7, r9, lsl #22
    3c90:	000e1000 	andeq	r1, lr, r0
    3c94:	00900a00 	addseq	r0, r0, r0, lsl #20
    3c98:	00170000 	andseq	r0, r7, r0
    3c9c:	720ef013 	andvc	pc, lr, #19
    3ca0:	000e3402 	andeq	r3, lr, r2, lsl #8
    3ca4:	1ed01400 	cdpne	4, 13, cr1, cr0, cr0, {0}
    3ca8:	750e0000 	strvc	r0, [lr, #-0]
    3cac:	000e3402 	andeq	r3, lr, r2, lsl #8
    3cb0:	c9140000 	ldmdbgt	r4, {}	; <UNPREDICTABLE>
    3cb4:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    3cb8:	0e440276 	mcreq	2, 2, r0, cr4, cr6, {3}
    3cbc:	00780000 	rsbseq	r0, r8, r0
    3cc0:	00093409 	andeq	r3, r9, r9, lsl #8
    3cc4:	000e4400 	andeq	r4, lr, r0, lsl #8
    3cc8:	00900a00 	addseq	r0, r0, r0, lsl #20
    3ccc:	001d0000 	andseq	r0, sp, r0
    3cd0:	00009009 	andeq	r9, r0, r9
    3cd4:	000e5400 	andeq	r5, lr, r0, lsl #8
    3cd8:	00900a00 	addseq	r0, r0, r0, lsl #20
    3cdc:	001d0000 	andseq	r0, sp, r0
    3ce0:	570ef026 	strpl	pc, [lr, -r6, lsr #32]
    3ce4:	000e7602 	andeq	r7, lr, r2, lsl #12
    3ce8:	1be82700 	blne	ffa0d8f0 <GPIO_Pins+0xdfa0b024>
    3cec:	6e0e0000 	cdpvs	0, 0, cr0, cr14, cr0, {0}
    3cf0:	000cdf02 	andeq	sp, ip, r2, lsl #30
    3cf4:	1b002700 	blne	d8fc <startup-0x1fff2704>
    3cf8:	770e0000 	strvc	r0, [lr, -r0]
    3cfc:	000e1002 	andeq	r1, lr, r2
    3d00:	6b090000 	blvs	243d08 <startup-0x1fdbc2f8>
    3d04:	86000007 	strhi	r0, [r0], -r7
    3d08:	0a00000e 	beq	3d48 <startup-0x1fffc2b8>
    3d0c:	00000090 	muleq	r0, r0, r0
    3d10:	78180018 	ldmdavc	r8, {r3, r4}
    3d14:	1700001a 	smladne	r0, sl, r0, r0
    3d18:	000e8604 	andeq	r8, lr, r4, lsl #12
    3d1c:	0e9c2800 	cdpeq	8, 9, cr2, cr12, cr0, {0}
    3d20:	82220000 	eorhi	r0, r2, #0
    3d24:	0000000a 	andeq	r0, r0, sl
    3d28:	0e910417 	mrceq	4, 4, r0, cr1, cr7, {0}
    3d2c:	04170000 	ldreq	r0, [r7], #-0
    3d30:	000007d5 	ldrdeq	r0, [r0], -r5
    3d34:	000eb328 	andeq	fp, lr, r8, lsr #6
    3d38:	00892200 	addeq	r2, r9, r0, lsl #4
    3d3c:	17000000 	strne	r0, [r0, -r0]
    3d40:	000eb904 	andeq	fp, lr, r4, lsl #18
    3d44:	a8041700 	stmdage	r4, {r8, r9, sl, ip}
    3d48:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    3d4c:	00000c4d 	andeq	r0, r0, sp, asr #24
    3d50:	00000ecf 	andeq	r0, r0, pc, asr #29
    3d54:	0000900a 	andeq	r9, r0, sl
    3d58:	0e000200 	cdpeq	2, 0, cr0, cr0, cr0, {0}
    3d5c:	00001bf6 	strdeq	r1, [r0], -r6
    3d60:	8203070e 	andhi	r0, r3, #3670016	; 0x380000
    3d64:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    3d68:	00001bef 	andeq	r1, r0, pc, ror #23
    3d6c:	8803080e 	stmdahi	r3, {r1, r2, r3, fp}
    3d70:	0200000a 	andeq	r0, r0, #10
    3d74:	1d0f0404 	cfstrsne	mvf0, [pc, #-16]	; 3d6c <startup-0x1fffc294>
    3d78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3d7c:	001cd204 	andseq	sp, ip, r4, lsl #4
    3d80:	1a6f2900 	bne	1bce188 <startup-0x1e431e78>
    3d84:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    3d88:	00000f06 	andeq	r0, r0, r6, lsl #30
    3d8c:	27e40305 	strbcs	r0, [r4, r5, lsl #6]!
    3d90:	04172000 	ldreq	r2, [r7], #-0
    3d94:	0000011a 	andeq	r0, r0, sl, lsl r1
    3d98:	001c4329 	andseq	r4, ip, r9, lsr #6
    3d9c:	060e0100 	streq	r0, [lr], -r0, lsl #2
    3da0:	0500000f 	streq	r0, [r0, #-15]
    3da4:	0027e803 	eoreq	lr, r7, r3, lsl #16
    3da8:	1e802920 	vdivne.f16	s4, s0, s1	; <UNPREDICTABLE>
    3dac:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    3db0:	0000011a 	andeq	r0, r0, sl, lsl r1
    3db4:	27ec0305 	strbcs	r0, [ip, r5, lsl #6]!
    3db8:	15292000 	strne	r2, [r9, #-0]!
    3dbc:	0100001d 	tsteq	r0, sp, lsl r0
    3dc0:	00011a0e 	andeq	r1, r1, lr, lsl #20
    3dc4:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    3dc8:	2a200028 	bcs	803e70 <startup-0x1f7fc190>
    3dcc:	00001da2 	andeq	r1, r0, r2, lsr #27
    3dd0:	0097b401 	addseq	fp, r7, r1, lsl #8
    3dd4:	264e0000 	strbcs	r0, [lr], -r0
    3dd8:	00262000 	eoreq	r2, r6, r0
    3ddc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3de0:	00000f67 	andeq	r0, r0, r7, ror #30
    3de4:	0015d92b 	andseq	sp, r5, fp, lsr #18
    3de8:	67b40100 	ldrvs	r0, [r4, r0, lsl #2]!
    3dec:	0200000f 	andeq	r0, r0, #15
    3df0:	17007491 			; <UNDEFINED> instruction: 0x17007491
    3df4:	00009704 	andeq	r9, r0, r4, lsl #14
    3df8:	1bc12a00 	blne	ff04e600 <GPIO_Pins+0xdf04bd34>
    3dfc:	ad010000 	stcge	0, cr0, [r1, #-0]
    3e00:	00000097 	muleq	r0, r7, r0
    3e04:	20002632 	andcs	r2, r0, r2, lsr r6
    3e08:	0000001c 	andeq	r0, r0, ip, lsl r0
    3e0c:	0f959c01 	svceq	0x00959c01
    3e10:	6e2c0000 	cdpvs	0, 2, cr0, cr12, cr0, {0}
    3e14:	01006d75 	tsteq	r0, r5, ror sp
    3e18:	0000c2ad 	andeq	ip, r0, sp, lsr #5
    3e1c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3e20:	1d902a00 	vldrne	s4, [r0]
    3e24:	91010000 	mrsls	r0, (UNDEF: 1)
    3e28:	00000097 	muleq	r0, r7, r0
    3e2c:	2000256e 	andcs	r2, r0, lr, ror #10
    3e30:	000000c4 	andeq	r0, r0, r4, asr #1
    3e34:	0fff9c01 	svceq	0x00ff9c01
    3e38:	6e2c0000 	cdpvs	0, 2, cr0, cr12, cr0, {0}
    3e3c:	01006d75 	tsteq	r0, r5, ror sp
    3e40:	0000c291 	muleq	r0, r1, r2
    3e44:	4c910200 	lfmmi	f0, 4, [r1], {0}
    3e48:	001e252b 	andseq	r2, lr, fp, lsr #10
    3e4c:	97910100 	ldrls	r0, [r1, r0, lsl #2]
    3e50:	02000000 	andeq	r0, r0, #0
    3e54:	96294b91 			; <UNDEFINED> instruction: 0x96294b91
    3e58:	0100001e 	tsteq	r0, lr, lsl r0
    3e5c:	00009797 	muleq	r0, r7, r7
    3e60:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3e64:	001c0e29 	andseq	r0, ip, r9, lsr #28
    3e68:	ff970100 			; <UNDEFINED> instruction: 0xff970100
    3e6c:	0200000f 	andeq	r0, r0, #15
    3e70:	982d5491 	stmdals	sp!, {r0, r4, r7, sl, ip, lr}
    3e74:	5a200025 	bpl	803f10 <startup-0x1f7fc0f0>
    3e78:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    3e7c:	00001c2b 	andeq	r1, r0, fp, lsr #24
    3e80:	00979b01 	addseq	r9, r7, r1, lsl #22
    3e84:	91020000 	mrsls	r0, (UNDEF: 2)
    3e88:	09000076 	stmdbeq	r0, {r1, r2, r4, r5, r6}
    3e8c:	00000097 	muleq	r0, r7, r0
    3e90:	0000100f 	andeq	r1, r0, pc
    3e94:	0000900a 	andeq	r9, r0, sl
    3e98:	2a001f00 	bcs	baa0 <startup-0x1fff4560>
    3e9c:	00001ce8 	andeq	r1, r0, r8, ror #25
    3ea0:	00978101 	addseq	r8, r7, r1, lsl #2
    3ea4:	253c0000 	ldrcs	r0, [ip, #-0]!
    3ea8:	00322000 	eorseq	r2, r2, r0
    3eac:	9c010000 	stcls	0, cr0, [r1], {-0}
    3eb0:	00001037 	andeq	r1, r0, r7, lsr r0
    3eb4:	001cf82b 	andseq	pc, ip, fp, lsr #16
    3eb8:	67810100 	strvs	r0, [r1, r0, lsl #2]
    3ebc:	0200000f 	andeq	r0, r0, #15
    3ec0:	2a007491 	bcs	2110c <startup-0x1ffdeef4>
    3ec4:	00001f3b 	andeq	r1, r0, fp, lsr pc
    3ec8:	00977401 	addseq	r7, r7, r1, lsl #8
    3ecc:	24f40000 	ldrbtcs	r0, [r4], #0
    3ed0:	00482000 	subeq	r2, r8, r0
    3ed4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ed8:	0000105f 	andeq	r1, r0, pc, asr r0
    3edc:	0015e32b 	andseq	lr, r5, fp, lsr #6
    3ee0:	97740100 	ldrbls	r0, [r4, -r0, lsl #2]!
    3ee4:	02000000 	andeq	r0, r0, #0
    3ee8:	2e007791 	mcrcs	7, 0, r7, cr0, cr1, {4}
    3eec:	00001c6c 	andeq	r1, r0, ip, ror #24
    3ef0:	23cc2d01 	biccs	r2, ip, #1, 26	; 0x40
    3ef4:	01282000 			; <UNDEFINED> instruction: 0x01282000
    3ef8:	9c010000 	stcls	0, cr0, [r1], {-0}
    3efc:	0000109f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f00:	001e1129 	andseq	r1, lr, r9, lsr #2
    3f04:	ba3f0100 	blt	fc430c <startup-0x1f03bcf4>
    3f08:	02000006 	andeq	r0, r0, #6
    3f0c:	a0296891 	mlage	r9, r1, r8, r6
    3f10:	0100001b 	tsteq	r0, fp, lsl r0
    3f14:	0005b84c 	andeq	fp, r5, ip, asr #16
    3f18:	58910200 	ldmpl	r1, {r9}
    3f1c:	001b3d29 	andseq	r3, fp, r9, lsr #26
    3f20:	5c5e0100 	ldfple	f0, [lr], {-0}
    3f24:	02000005 	andeq	r0, r0, #5
    3f28:	2f005491 	svccs	0x00005491
    3f2c:	00001caf 	andeq	r1, r0, pc, lsr #25
    3f30:	23341301 	teqcs	r4, #67108864	; 0x4000000
    3f34:	00982000 	addseq	r2, r8, r0
    3f38:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f3c:	00003030 	andeq	r3, r0, r0, lsr r0
    3f40:	1e6e2900 	vmulne.f16	s5, s28, s0	; <UNPREDICTABLE>
    3f44:	1f010000 	svcne	0x00010000
    3f48:	00000097 	muleq	r0, r7, r0
    3f4c:	296e9102 	stmdbcs	lr!, {r1, r8, ip, pc}^
    3f50:	00001dbc 			; <UNDEFINED> instruction: 0x00001dbc
    3f54:	00972001 	addseq	r2, r7, r1
    3f58:	91020000 	mrsls	r0, (UNDEF: 2)
    3f5c:	0000006f 	andeq	r0, r0, pc, rrx

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030104 	adfeqs	f0, f3, f4
  18:	0b0b0b3e 	bleq	2c2d18 <startup-0x1fd3d2e8>
  1c:	0b3a1349 	bleq	e84d48 <startup-0x1f17b2b8>
  20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
  28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  2c:	0400000d 	streq	r0, [r0], #-13
  30:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  34:	00000b1c 	andeq	r0, r0, ip, lsl fp
  38:	0b002405 	bleq	9054 <startup-0x1fff6fac>
  3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  40:	0600000e 	streq	r0, [r0], -lr
  44:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  4c:	00001349 	andeq	r1, r0, r9, asr #6
  50:	03001607 	movweq	r1, #1543	; 0x607
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0013490b 	andseq	r4, r3, fp, lsl #18
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	13490026 	movtne	r0, #36902	; 0x9026
  74:	130b0000 	movwne	r0, #45056	; 0xb000
  78:	3a050b01 	bcc	142c84 <startup-0x1febd37c>
  7c:	01053b0b 	tsteq	r5, fp, lsl #22
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  8c:	0b381349 	bleq	e04db8 <startup-0x1f1fb248>
  90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
  94:	3a0e0300 	bcc	380c9c <startup-0x1fc7f364>
  98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  9c:	00053813 	andeq	r3, r5, r3, lsl r8
  a0:	000d0e00 	andeq	r0, sp, r0, lsl #28
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	1349053b 	movtne	r0, #38203	; 0x953b
  ac:	00000538 	andeq	r0, r0, r8, lsr r5
  b0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
  b4:	00130113 	andseq	r0, r3, r3, lsl r1
  b8:	00211000 	eoreq	r1, r1, r0
  bc:	0b2f1349 	bleq	bc4de8 <startup-0x1f43b218>
  c0:	21110000 	tstcs	r1, r0
  c4:	2f134900 	svccs	0x00134900
  c8:	12000005 	andne	r0, r0, #5
  cc:	0b0b0113 	bleq	2c0520 <startup-0x1fd3fae0>
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	03000d13 	movweq	r0, #3347	; 0xd13
  dc:	3b0b3a08 	blcc	2ce904 <startup-0x1fd316fc>
  e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  e4:	1400000b 	strne	r0, [r0], #-11
  e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f4:	0000193c 	andeq	r1, r0, ip, lsr r9
  f8:	03003415 	movweq	r3, #1045	; 0x415
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	3f13490b 	svccc	0x0013490b
 104:	00193c19 	andseq	r3, r9, r9, lsl ip
 108:	01041600 	tsteq	r4, r0, lsl #12
 10c:	0b0b0b3e 	bleq	2c2e0c <startup-0x1fd3d1f4>
 110:	0b3a1349 	bleq	e84e3c <startup-0x1f17b1c4>
 114:	1301053b 	movwne	r0, #5435	; 0x153b
 118:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
 11c:	1c080300 	stcne	3, cr0, [r8], {-0}
 120:	1800000b 	stmdane	r0, {r0, r1, r3}
 124:	0b0b0113 	bleq	2c0578 <startup-0x1fd3fa88>
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	00001301 	andeq	r1, r0, r1, lsl #6
 130:	03000d19 	movweq	r0, #3353	; 0xd19
 134:	3b0b3a0e 	blcc	2ce974 <startup-0x1fd3168c>
 138:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 13c:	1a00000b 	bne	170 <startup-0x1ffffe90>
 140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 14c:	041b0000 	ldreq	r0, [fp], #-0
 150:	0b0b3e01 	bleq	2cf95c <startup-0x1fd306a4>
 154:	3a13490b 	bcc	4d2588 <startup-0x1fb2da78>
 158:	010b3b0b 	tsteq	fp, fp, lsl #22
 15c:	1c000013 	stcne	0, cr0, [r0], {19}
 160:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 164:	0b3a0b0b 	bleq	e82d98 <startup-0x1f17d268>
 168:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 16c:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
 170:	3a080300 	bcc	200d78 <startup-0x1fdff288>
 174:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 178:	000b3813 	andeq	r3, fp, r3, lsl r8
 17c:	00341e00 	eorseq	r1, r4, r0, lsl #28
 180:	0b3a0e03 	bleq	e83994 <startup-0x1f17c66c>
 184:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 188:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 18c:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 190:	03193f01 	tsteq	r9, #1, 30
 194:	3b0b3a0e 	blcc	2ce9d4 <startup-0x1fd3162c>
 198:	1119270b 	tstne	r9, fp, lsl #14
 19c:	40061201 	andmi	r1, r6, r1, lsl #4
 1a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1a4:	00001301 	andeq	r1, r0, r1, lsl #6
 1a8:	11010b20 	tstne	r1, r0, lsr #22
 1ac:	00061201 	andeq	r1, r6, r1, lsl #4
 1b0:	00342100 	eorseq	r2, r4, r0, lsl #2
 1b4:	0b3a0803 	bleq	e821c8 <startup-0x1f17de38>
 1b8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1bc:	00001802 	andeq	r1, r0, r2, lsl #16
 1c0:	49002122 	stmdbmi	r0, {r1, r5, r8, sp}
 1c4:	00182f13 	andseq	r2, r8, r3, lsl pc
 1c8:	002e2300 	eoreq	r2, lr, r0, lsl #6
 1cc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1d0:	0b3b0b3a 	bleq	ec2ec0 <startup-0x1f13d140>
 1d4:	01111927 	tsteq	r1, r7, lsr #18
 1d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1dc:	00194297 	mulseq	r9, r7, r2
 1e0:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
 1e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e8:	0b3b0b3a 	bleq	ec2ed8 <startup-0x1f13d128>
 1ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1f0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1f4:	00130119 	andseq	r0, r3, r9, lsl r1
 1f8:	00052500 	andeq	r2, r5, r0, lsl #10
 1fc:	0b3a0e03 	bleq	e83a10 <startup-0x1f17c5f0>
 200:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 204:	00001802 	andeq	r1, r0, r2, lsl #16
 208:	55010b26 	strpl	r0, [r1, #-2854]	; 0xfffff4da
 20c:	27000017 	smladcs	r0, r7, r0, r0
 210:	0b0b000f 	bleq	2c0254 <startup-0x1fd3fdac>
 214:	00001349 	andeq	r1, r0, r9, asr #6
 218:	3f012e28 	svccc	0x00012e28
 21c:	3a0e0319 	bcc	380e88 <startup-0x1fc7f178>
 220:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 224:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 228:	97184006 	ldrls	r4, [r8, -r6]
 22c:	13011942 	movwne	r1, #6466	; 0x1942
 230:	05290000 	streq	r0, [r9, #-0]!
 234:	3a0e0300 	bcc	380e3c <startup-0x1fc7f1c4>
 238:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 23c:	00180213 	andseq	r0, r8, r3, lsl r2
 240:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
 244:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 248:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 24c:	13491927 	movtne	r1, #39207	; 0x9927
 250:	06120111 			; <UNDEFINED> instruction: 0x06120111
 254:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 258:	00130119 	andseq	r0, r3, r9, lsl r1
 25c:	00342b00 	eorseq	r2, r4, r0, lsl #22
 260:	0b3a0e03 	bleq	e83a74 <startup-0x1f17c58c>
 264:	1349053b 	movtne	r0, #38203	; 0x953b
 268:	00001802 	andeq	r1, r0, r2, lsl #16
 26c:	3f002e2c 	svccc	0x00002e2c
 270:	3a0e0319 	bcc	380edc <startup-0x1fc7f124>
 274:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 278:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 27c:	97184006 	ldrls	r4, [r8, -r6]
 280:	00001942 	andeq	r1, r0, r2, asr #18
 284:	0300342d 	movweq	r3, #1069	; 0x42d
 288:	3b0b3a08 	blcc	2ceab0 <startup-0x1fd31550>
 28c:	02134905 	andseq	r4, r3, #81920	; 0x14000
 290:	2e000018 	mcrcs	0, 0, r0, cr0, cr8, {0}
 294:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 298:	0b3a0e03 	bleq	e83aac <startup-0x1f17c554>
 29c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 2a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2a4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2a8:	00130119 	andseq	r0, r3, r9, lsl r1
 2ac:	002e2f00 	eoreq	r2, lr, r0, lsl #30
 2b0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2b8:	13491927 	movtne	r1, #39207	; 0x9927
 2bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2c0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2c4:	30000019 	andcc	r0, r0, r9, lsl r0
 2c8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2cc:	0b3a0e03 	bleq	e83ae0 <startup-0x1f17c520>
 2d0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 2d4:	01111349 	tsteq	r1, r9, asr #6
 2d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2dc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2e0:	31000013 	tstcc	r0, r3, lsl r0
 2e4:	0e03012e 	adfeqsp	f0, f3, #0.5
 2e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2ec:	13491927 	movtne	r1, #39207	; 0x9927
 2f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2f8:	00130119 	andseq	r0, r3, r9, lsl r1
 2fc:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
 300:	0b3a0e03 	bleq	e83b14 <startup-0x1f17c4ec>
 304:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 308:	06120111 			; <UNDEFINED> instruction: 0x06120111
 30c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 310:	00000019 	andeq	r0, r0, r9, lsl r0
 314:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 318:	030b130e 	movweq	r1, #45838	; 0xb30e
 31c:	110e1b0e 	tstne	lr, lr, lsl #22
 320:	10061201 	andne	r1, r6, r1, lsl #4
 324:	02000017 	andeq	r0, r0, #23
 328:	0b0b0024 	bleq	2c03c0 <startup-0x1fd3fc40>
 32c:	0e030b3e 	vmoveq.16	d3[0], r0
 330:	16030000 	strne	r0, [r3], -r0
 334:	3a0e0300 	bcc	380f3c <startup-0x1fc7f0c4>
 338:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 33c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 340:	0b0b0024 	bleq	2c03d8 <startup-0x1fd3fc28>
 344:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 348:	35050000 	strcc	r0, [r5, #-0]
 34c:	00134900 	andseq	r4, r3, r0, lsl #18
 350:	00340600 	eorseq	r0, r4, r0, lsl #12
 354:	0b3a0e03 	bleq	e83b68 <startup-0x1f17c498>
 358:	1349053b 	movtne	r0, #38203	; 0x953b
 35c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 360:	34070000 	strcc	r0, [r7], #-0
 364:	3a0e0300 	bcc	380f6c <startup-0x1fc7f094>
 368:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 36c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 370:	08000019 	stmdaeq	r0, {r0, r3, r4}
 374:	0b3e0104 	bleq	f8078c <startup-0x1f07f874>
 378:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 37c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 380:	00001301 	andeq	r1, r0, r1, lsl #6
 384:	03002809 	movweq	r2, #2057	; 0x809
 388:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 38c:	01130a00 	tsteq	r3, r0, lsl #20
 390:	0b3a0b0b 	bleq	e82fc4 <startup-0x1f17d03c>
 394:	1301053b 	movwne	r0, #5435	; 0x153b
 398:	0d0b0000 	stceq	0, cr0, [fp, #-0]
 39c:	3a0e0300 	bcc	380fa4 <startup-0x1fc7f05c>
 3a0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 3a4:	000b3813 	andeq	r3, fp, r3, lsl r8
 3a8:	000d0c00 	andeq	r0, sp, r0, lsl #24
 3ac:	0b3a0803 	bleq	e823c0 <startup-0x1f17dc40>
 3b0:	1349053b 	movtne	r0, #38203	; 0x953b
 3b4:	00000b38 	andeq	r0, r0, r8, lsr fp
 3b8:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
 3bc:	00130113 	andseq	r0, r3, r3, lsl r1
 3c0:	00210e00 	eoreq	r0, r1, r0, lsl #28
 3c4:	0b2f1349 	bleq	bc50f0 <startup-0x1f43af10>
 3c8:	160f0000 	strne	r0, [pc], -r0
 3cc:	3a0e0300 	bcc	380fd4 <startup-0x1fc7f02c>
 3d0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 3d4:	10000013 	andne	r0, r0, r3, lsl r0
 3d8:	0b3e0104 	bleq	f807f0 <startup-0x1f07f810>
 3dc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 3e0:	0b3b0b3a 	bleq	ec30d0 <startup-0x1f13cf30>
 3e4:	00001301 	andeq	r1, r0, r1, lsl #6
 3e8:	0b011311 	bleq	45034 <startup-0x1ffbafcc>
 3ec:	3b0b3a0b 	blcc	2cec20 <startup-0x1fd313e0>
 3f0:	0013010b 	andseq	r0, r3, fp, lsl #2
 3f4:	000d1200 	andeq	r1, sp, r0, lsl #4
 3f8:	0b3a0e03 	bleq	e83c0c <startup-0x1f17c3f4>
 3fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 400:	00000b38 	andeq	r0, r0, r8, lsr fp
 404:	3f012e13 	svccc	0x00012e13
 408:	3a0e0319 	bcc	381074 <startup-0x1fc7ef8c>
 40c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 410:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 414:	97184006 	ldrls	r4, [r8, -r6]
 418:	13011942 	movwne	r1, #6466	; 0x1942
 41c:	05140000 	ldreq	r0, [r4, #-0]
 420:	3a0e0300 	bcc	381028 <startup-0x1fc7efd8>
 424:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 428:	00180213 	andseq	r0, r8, r3, lsl r2
 42c:	00341500 	eorseq	r1, r4, r0, lsl #10
 430:	0b3a0e03 	bleq	e83c44 <startup-0x1f17c3bc>
 434:	1349053b 	movtne	r0, #38203	; 0x953b
 438:	00001802 	andeq	r1, r0, r2, lsl #16
 43c:	0b000f16 	bleq	409c <startup-0x1fffbf64>
 440:	0013490b 	andseq	r4, r3, fp, lsl #18
 444:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 448:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 44c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 450:	13491927 	movtne	r1, #39207	; 0x9927
 454:	06120111 			; <UNDEFINED> instruction: 0x06120111
 458:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 45c:	00130119 	andseq	r0, r3, r9, lsl r1
 460:	00341800 	eorseq	r1, r4, r0, lsl #16
 464:	0b3a0803 	bleq	e82478 <startup-0x1f17db88>
 468:	1349053b 	movtne	r0, #38203	; 0x953b
 46c:	00001802 	andeq	r1, r0, r2, lsl #16
 470:	3f012e19 	svccc	0x00012e19
 474:	3a0e0319 	bcc	3810e0 <startup-0x1fc7ef20>
 478:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 47c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 480:	97184006 	ldrls	r4, [r8, -r6]
 484:	13011942 	movwne	r1, #6466	; 0x1942
 488:	051a0000 	ldreq	r0, [sl, #-0]
 48c:	3a0e0300 	bcc	381094 <startup-0x1fc7ef6c>
 490:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 494:	00180213 	andseq	r0, r8, r3, lsl r2
 498:	00341b00 	eorseq	r1, r4, r0, lsl #22
 49c:	0b3a0e03 	bleq	e83cb0 <startup-0x1f17c350>
 4a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4a4:	00001802 	andeq	r1, r0, r2, lsl #16
 4a8:	0300341c 	movweq	r3, #1052	; 0x41c
 4ac:	3b0b3a08 	blcc	2cecd4 <startup-0x1fd3132c>
 4b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4b4:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 4b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 4bc:	0b3a0e03 	bleq	e83cd0 <startup-0x1f17c330>
 4c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 4c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4c8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 4cc:	00000019 	andeq	r0, r0, r9, lsl r0
 4d0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 4d4:	030b130e 	movweq	r1, #45838	; 0xb30e
 4d8:	110e1b0e 	tstne	lr, lr, lsl #22
 4dc:	10061201 	andne	r1, r6, r1, lsl #4
 4e0:	02000017 	andeq	r0, r0, #23
 4e4:	0b0b0024 	bleq	2c057c <startup-0x1fd3fa84>
 4e8:	0e030b3e 	vmoveq.16	d3[0], r0
 4ec:	16030000 	strne	r0, [r3], -r0
 4f0:	3a0e0300 	bcc	3810f8 <startup-0x1fc7ef08>
 4f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4f8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 4fc:	0b0b0024 	bleq	2c0594 <startup-0x1fd3fa6c>
 500:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 504:	35050000 	strcc	r0, [r5, #-0]
 508:	00134900 	andseq	r4, r3, r0, lsl #18
 50c:	00260600 	eoreq	r0, r6, r0, lsl #12
 510:	00001349 	andeq	r1, r0, r9, asr #6
 514:	0b011307 	bleq	45138 <startup-0x1ffbaec8>
 518:	3b0b3a05 	blcc	2ced34 <startup-0x1fd312cc>
 51c:	00130105 	andseq	r0, r3, r5, lsl #2
 520:	000d0800 	andeq	r0, sp, r0, lsl #16
 524:	0b3a0e03 	bleq	e83d38 <startup-0x1f17c2c8>
 528:	1349053b 	movtne	r0, #38203	; 0x953b
 52c:	00000b38 	andeq	r0, r0, r8, lsr fp
 530:	03000d09 	movweq	r0, #3337	; 0xd09
 534:	3b0b3a0e 	blcc	2ced74 <startup-0x1fd3128c>
 538:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 53c:	0a000005 	beq	558 <startup-0x1ffffaa8>
 540:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 544:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 548:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 54c:	010b0000 	mrseq	r0, (UNDEF: 11)
 550:	01134901 	tsteq	r3, r1, lsl #18
 554:	0c000013 	stceq	0, cr0, [r0], {19}
 558:	13490021 	movtne	r0, #36897	; 0x9021
 55c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 560:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
 564:	00052f13 	andeq	r2, r5, r3, lsl pc
 568:	00160e00 	andseq	r0, r6, r0, lsl #28
 56c:	0b3a0e03 	bleq	e83d80 <startup-0x1f17c280>
 570:	1349053b 	movtne	r0, #38203	; 0x953b
 574:	130f0000 	movwne	r0, #61440	; 0xf000
 578:	3a0b0b01 	bcc	2c3184 <startup-0x1fd3ce7c>
 57c:	01053b0b 	tsteq	r5, fp, lsl #22
 580:	10000013 	andne	r0, r0, r3, lsl r0
 584:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 588:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 58c:	0b381349 	bleq	e052b8 <startup-0x1f1fad48>
 590:	34110000 	ldrcc	r0, [r1], #-0
 594:	3a0e0300 	bcc	38119c <startup-0x1fc7ee64>
 598:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 59c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 5a0:	12000019 	andne	r0, r0, #25
 5a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 5a8:	0b3b0b3a 	bleq	ec3298 <startup-0x1f13cd68>
 5ac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 5b0:	0000193c 	andeq	r1, r0, ip, lsr r9
 5b4:	3e010413 	cfmvdlrcc	mvd1, r0
 5b8:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 5bc:	3b0b3a13 	blcc	2cee10 <startup-0x1fd311f0>
 5c0:	00130105 	andseq	r0, r3, r5, lsl #2
 5c4:	00281400 	eoreq	r1, r8, r0, lsl #8
 5c8:	0b1c0e03 	bleq	703ddc <startup-0x1f8fc224>
 5cc:	13150000 	tstne	r5, #0
 5d0:	3a0b0b01 	bcc	2c31dc <startup-0x1fd3ce24>
 5d4:	010b3b0b 	tsteq	fp, fp, lsl #22
 5d8:	16000013 			; <UNDEFINED> instruction: 0x16000013
 5dc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 5e0:	0b3b0b3a 	bleq	ec32d0 <startup-0x1f13cd30>
 5e4:	0b381349 	bleq	e05310 <startup-0x1f1facf0>
 5e8:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 5ec:	03193f01 	tsteq	r9, #1, 30
 5f0:	3b0b3a0e 	blcc	2cee30 <startup-0x1fd311d0>
 5f4:	1119270b 	tstne	r9, fp, lsl #14
 5f8:	40061201 	andmi	r1, r6, r1, lsl #4
 5fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 600:	00001301 	andeq	r1, r0, r1, lsl #6
 604:	03000518 	movweq	r0, #1304	; 0x518
 608:	3b0b3a0e 	blcc	2cee48 <startup-0x1fd311b8>
 60c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 610:	19000018 	stmdbne	r0, {r3, r4}
 614:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 618:	0b3b0b3a 	bleq	ec3308 <startup-0x1f13ccf8>
 61c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 620:	0f1a0000 	svceq	0x001a0000
 624:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 628:	1b000013 	blne	67c <startup-0x1ffff984>
 62c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 630:	0b3a0e03 	bleq	e83e44 <startup-0x1f17c1bc>
 634:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 638:	06120111 			; <UNDEFINED> instruction: 0x06120111
 63c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 640:	00000019 	andeq	r0, r0, r9, lsl r0
 644:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 648:	030b130e 	movweq	r1, #45838	; 0xb30e
 64c:	110e1b0e 	tstne	lr, lr, lsl #22
 650:	10061201 	andne	r1, r6, r1, lsl #4
 654:	02000017 	andeq	r0, r0, #23
 658:	0b0b0024 	bleq	2c06f0 <startup-0x1fd3f910>
 65c:	0e030b3e 	vmoveq.16	d3[0], r0
 660:	16030000 	strne	r0, [r3], -r0
 664:	3a0e0300 	bcc	38126c <startup-0x1fc7ed94>
 668:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 66c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 670:	0b0b0024 	bleq	2c0708 <startup-0x1fd3f8f8>
 674:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 678:	13050000 	movwne	r0, #20480	; 0x5000
 67c:	3a0b0b01 	bcc	2c3288 <startup-0x1fd3cd78>
 680:	010b3b0b 	tsteq	fp, fp, lsl #22
 684:	06000013 			; <UNDEFINED> instruction: 0x06000013
 688:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 68c:	0b3b0b3a 	bleq	ec337c <startup-0x1f13cc84>
 690:	0b381349 	bleq	e053bc <startup-0x1f1fac44>
 694:	0d070000 	stceq	0, cr0, [r7, #-0]
 698:	3a080300 	bcc	2012a0 <startup-0x1fdfed60>
 69c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6a0:	000b3813 	andeq	r3, fp, r3, lsl r8
 6a4:	01010800 	tsteq	r1, r0, lsl #16
 6a8:	13011349 	movwne	r1, #4937	; 0x1349
 6ac:	21090000 	mrscs	r0, (UNDEF: 9)
 6b0:	2f134900 	svccs	0x00134900
 6b4:	0a00000b 	beq	6e8 <startup-0x1ffff918>
 6b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 6bc:	0b3a0e03 	bleq	e83ed0 <startup-0x1f17c130>
 6c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6c4:	01111349 	tsteq	r1, r9, asr #6
 6c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6cc:	01194297 			; <UNDEFINED> instruction: 0x01194297
 6d0:	0b000013 	bleq	724 <startup-0x1ffff8dc>
 6d4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 6d8:	0b3b0b3a 	bleq	ec33c8 <startup-0x1f13cc38>
 6dc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6e0:	0f0c0000 	svceq	0x000c0000
 6e4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 6e8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 6ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 6f0:	0b3a0e03 	bleq	e83f04 <startup-0x1f17c0fc>
 6f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 700:	00000019 	andeq	r0, r0, r9, lsl r0
 704:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 708:	030b130e 	movweq	r1, #45838	; 0xb30e
 70c:	110e1b0e 	tstne	lr, lr, lsl #22
 710:	10061201 	andne	r1, r6, r1, lsl #4
 714:	02000017 	andeq	r0, r0, #23
 718:	0b0b0024 	bleq	2c07b0 <startup-0x1fd3f850>
 71c:	0e030b3e 	vmoveq.16	d3[0], r0
 720:	16030000 	strne	r0, [r3], -r0
 724:	3a0e0300 	bcc	38132c <startup-0x1fc7ecd4>
 728:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 72c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 730:	0b0b0024 	bleq	2c07c8 <startup-0x1fd3f838>
 734:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 738:	35050000 	strcc	r0, [r5, #-0]
 73c:	00134900 	andseq	r4, r3, r0, lsl #18
 740:	00340600 	eorseq	r0, r4, r0, lsl #12
 744:	0b3a0e03 	bleq	e83f58 <startup-0x1f17c0a8>
 748:	1349053b 	movtne	r0, #38203	; 0x953b
 74c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 750:	34070000 	strcc	r0, [r7], #-0
 754:	3a0e0300 	bcc	38135c <startup-0x1fc7eca4>
 758:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 75c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 760:	08000019 	stmdaeq	r0, {r0, r3, r4}
 764:	0b3e0104 	bleq	f80b7c <startup-0x1f07f484>
 768:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 76c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 770:	00001301 	andeq	r1, r0, r1, lsl #6
 774:	03002809 	movweq	r2, #2057	; 0x809
 778:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 77c:	00280a00 	eoreq	r0, r8, r0, lsl #20
 780:	0b1c0803 	bleq	702794 <startup-0x1f8fd86c>
 784:	160b0000 	strne	r0, [fp], -r0
 788:	3a0e0300 	bcc	381390 <startup-0x1fc7ec70>
 78c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 790:	0c000013 	stceq	0, cr0, [r0], {19}
 794:	0b0b0113 	bleq	2c0be8 <startup-0x1fd3f418>
 798:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 79c:	00001301 	andeq	r1, r0, r1, lsl #6
 7a0:	03000d0d 	movweq	r0, #3341	; 0xd0d
 7a4:	3b0b3a08 	blcc	2cefcc <startup-0x1fd31034>
 7a8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 7ac:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 7b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 7b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 7b8:	0b381349 	bleq	e054e4 <startup-0x1f1fab1c>
 7bc:	130f0000 	movwne	r0, #61440	; 0xf000
 7c0:	3a0b0b01 	bcc	2c33cc <startup-0x1fd3cc34>
 7c4:	010b3b0b 	tsteq	fp, fp, lsl #22
 7c8:	10000013 	andne	r0, r0, r3, lsl r0
 7cc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 7d0:	0b3b0b3a 	bleq	ec34c0 <startup-0x1f13cb40>
 7d4:	0b381349 	bleq	e05500 <startup-0x1f1fab00>
 7d8:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 7dc:	03193f01 	tsteq	r9, #1, 30
 7e0:	3b0b3a0e 	blcc	2cf020 <startup-0x1fd30fe0>
 7e4:	11192705 	tstne	r9, r5, lsl #14
 7e8:	40061201 	andmi	r1, r6, r1, lsl #4
 7ec:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 7f0:	00001301 	andeq	r1, r0, r1, lsl #6
 7f4:	03000512 	movweq	r0, #1298	; 0x512
 7f8:	3b0b3a0e 	blcc	2cf038 <startup-0x1fd30fc8>
 7fc:	02134905 	andseq	r4, r3, #81920	; 0x14000
 800:	13000018 	movwne	r0, #24
 804:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 808:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 80c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 810:	0f140000 	svceq	0x00140000
 814:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 818:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 81c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 820:	0b3a0e03 	bleq	e84034 <startup-0x1f17bfcc>
 824:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 828:	01111349 	tsteq	r1, r9, asr #6
 82c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 830:	01194297 			; <UNDEFINED> instruction: 0x01194297
 834:	16000013 			; <UNDEFINED> instruction: 0x16000013
 838:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 83c:	0b3a0e03 	bleq	e84050 <startup-0x1f17bfb0>
 840:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 844:	06120111 			; <UNDEFINED> instruction: 0x06120111
 848:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 84c:	00130119 	andseq	r0, r3, r9, lsl r1
 850:	00051700 	andeq	r1, r5, r0, lsl #14
 854:	0b3a0e03 	bleq	e84068 <startup-0x1f17bf98>
 858:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 85c:	00001802 	andeq	r1, r0, r2, lsl #16
 860:	03003418 	movweq	r3, #1048	; 0x418
 864:	3b0b3a0e 	blcc	2cf0a4 <startup-0x1fd30f5c>
 868:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 86c:	19000018 	stmdbne	r0, {r3, r4}
 870:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 874:	0b3a0e03 	bleq	e84088 <startup-0x1f17bf78>
 878:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 87c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 880:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 884:	00000019 	andeq	r0, r0, r9, lsl r0
 888:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 88c:	030b130e 	movweq	r1, #45838	; 0xb30e
 890:	110e1b0e 	tstne	lr, lr, lsl #22
 894:	10061201 	andne	r1, r6, r1, lsl #4
 898:	02000017 	andeq	r0, r0, #23
 89c:	0b0b0024 	bleq	2c0934 <startup-0x1fd3f6cc>
 8a0:	0e030b3e 	vmoveq.16	d3[0], r0
 8a4:	16030000 	strne	r0, [r3], -r0
 8a8:	3a0e0300 	bcc	3814b0 <startup-0x1fc7eb50>
 8ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8b0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 8b4:	0b0b0024 	bleq	2c094c <startup-0x1fd3f6b4>
 8b8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 8bc:	35050000 	strcc	r0, [r5, #-0]
 8c0:	00134900 	andseq	r4, r3, r0, lsl #18
 8c4:	01130600 	tsteq	r3, r0, lsl #12
 8c8:	0b3a0b0b 	bleq	e834fc <startup-0x1f17cb04>
 8cc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 8d0:	0d070000 	stceq	0, cr0, [r7, #-0]
 8d4:	3a0e0300 	bcc	3814dc <startup-0x1fc7eb24>
 8d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8dc:	000b3813 	andeq	r3, fp, r3, lsl r8
 8e0:	000d0800 	andeq	r0, sp, r0, lsl #16
 8e4:	0b3a0803 	bleq	e828f8 <startup-0x1f17d708>
 8e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 8ec:	00000b38 	andeq	r0, r0, r8, lsr fp
 8f0:	49010109 	stmdbmi	r1, {r0, r3, r8}
 8f4:	00130113 	andseq	r0, r3, r3, lsl r1
 8f8:	00210a00 	eoreq	r0, r1, r0, lsl #20
 8fc:	0b2f1349 	bleq	bc5628 <startup-0x1f43a9d8>
 900:	040b0000 	streq	r0, [fp], #-0
 904:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
 908:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 90c:	3b0b3a13 	blcc	2cf160 <startup-0x1fd30ea0>
 910:	0013010b 	andseq	r0, r3, fp, lsl #2
 914:	00280c00 	eoreq	r0, r8, r0, lsl #24
 918:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
 91c:	280d0000 	stmdacs	sp, {}	; <UNPREDICTABLE>
 920:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 924:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 928:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 92c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 930:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 934:	0000193c 	andeq	r1, r0, ip, lsr r9
 938:	0300340f 	movweq	r3, #1039	; 0x40f
 93c:	3b0b3a0e 	blcc	2cf17c <startup-0x1fd30e84>
 940:	3f13490b 	svccc	0x0013490b
 944:	00193c19 	andseq	r3, r9, r9, lsl ip
 948:	01041000 	mrseq	r1, (UNDEF: 4)
 94c:	0b0b0b3e 	bleq	2c364c <startup-0x1fd3c9b4>
 950:	0b3a1349 	bleq	e8567c <startup-0x1f17a984>
 954:	1301053b 	movwne	r0, #5435	; 0x153b
 958:	28110000 	ldmdacs	r1, {}	; <UNPREDICTABLE>
 95c:	1c080300 	stcne	3, cr0, [r8], {-0}
 960:	1200000b 	andne	r0, r0, #11
 964:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 968:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 96c:	00001349 	andeq	r1, r0, r9, asr #6
 970:	0b011313 	bleq	455c4 <startup-0x1ffbaa3c>
 974:	3b0b3a0b 	blcc	2cf1a8 <startup-0x1fd30e58>
 978:	00130105 	andseq	r0, r3, r5, lsl #2
 97c:	000d1400 	andeq	r1, sp, r0, lsl #8
 980:	0b3a0e03 	bleq	e84194 <startup-0x1f17be6c>
 984:	1349053b 	movtne	r0, #38203	; 0x953b
 988:	00000b38 	andeq	r0, r0, r8, lsr fp
 98c:	03000d15 	movweq	r0, #3349	; 0xd15
 990:	3b0b3a08 	blcc	2cf1b8 <startup-0x1fd30e48>
 994:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 998:	1600000b 	strne	r0, [r0], -fp
 99c:	0b3e0104 	bleq	f80db4 <startup-0x1f07f24c>
 9a0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 9a4:	0b3b0b3a 	bleq	ec3694 <startup-0x1f13c96c>
 9a8:	00001301 	andeq	r1, r0, r1, lsl #6
 9ac:	0b000f17 	bleq	4610 <startup-0x1fffb9f0>
 9b0:	0013490b 	andseq	r4, r3, fp, lsl #18
 9b4:	00131800 	andseq	r1, r3, r0, lsl #16
 9b8:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
 9bc:	17190000 	ldrne	r0, [r9, -r0]
 9c0:	3a0b0b01 	bcc	2c35cc <startup-0x1fd3ca34>
 9c4:	010b3b0b 	tsteq	fp, fp, lsl #22
 9c8:	1a000013 	bne	a1c <startup-0x1ffff5e4>
 9cc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 9d0:	0b3b0b3a 	bleq	ec36c0 <startup-0x1f13c940>
 9d4:	00001349 	andeq	r1, r0, r9, asr #6
 9d8:	0b000f1b 	bleq	464c <startup-0x1fffb9b4>
 9dc:	1c00000b 	stcne	0, cr0, [r0], {11}
 9e0:	13490026 	movtne	r0, #36902	; 0x9026
 9e4:	131d0000 	tstne	sp, #0
 9e8:	0b0e0301 	bleq	3815f4 <startup-0x1fc7ea0c>
 9ec:	3b0b3a0b 	blcc	2cf220 <startup-0x1fd30de0>
 9f0:	0013010b 	andseq	r0, r3, fp, lsl #2
 9f4:	01131e00 	tsteq	r3, r0, lsl #28
 9f8:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
 9fc:	0b3b0b3a 	bleq	ec36ec <startup-0x1f13c914>
 a00:	00001301 	andeq	r1, r0, r1, lsl #6
 a04:	03000d1f 	movweq	r0, #3359	; 0xd1f
 a08:	3b0b3a0e 	blcc	2cf248 <startup-0x1fd30db8>
 a0c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 a10:	20000005 	andcs	r0, r0, r5
 a14:	19270015 	stmdbne	r7!, {r0, r2, r4}
 a18:	15210000 	strne	r0, [r1, #-0]!
 a1c:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 a20:	00130113 	andseq	r0, r3, r3, lsl r1
 a24:	00052200 	andeq	r2, r5, r0, lsl #4
 a28:	00001349 	andeq	r1, r0, r9, asr #6
 a2c:	03011323 	movweq	r1, #4899	; 0x1323
 a30:	3a050b0e 	bcc	143670 <startup-0x1febc990>
 a34:	01053b0b 	tsteq	r5, fp, lsl #22
 a38:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
 a3c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 a40:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 a44:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 a48:	13250000 			; <UNDEFINED> instruction: 0x13250000
 a4c:	0b0e0301 	bleq	381658 <startup-0x1fc7e9a8>
 a50:	3b0b3a0b 	blcc	2cf284 <startup-0x1fd30d7c>
 a54:	00130105 	andseq	r0, r3, r5, lsl #2
 a58:	01172600 	tsteq	r7, r0, lsl #12
 a5c:	0b3a0b0b 	bleq	e83690 <startup-0x1f17c970>
 a60:	1301053b 	movwne	r0, #5435	; 0x153b
 a64:	0d270000 	stceq	0, cr0, [r7, #-0]
 a68:	3a0e0300 	bcc	381670 <startup-0x1fc7e990>
 a6c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 a70:	28000013 	stmdacs	r0, {r0, r1, r4}
 a74:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 a78:	00001301 	andeq	r1, r0, r1, lsl #6
 a7c:	03003429 	movweq	r3, #1065	; 0x429
 a80:	3b0b3a0e 	blcc	2cf2c0 <startup-0x1fd30d40>
 a84:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 a88:	2a000018 	bcs	af0 <startup-0x1ffff510>
 a8c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 a90:	0b3a0e03 	bleq	e842a4 <startup-0x1f17bd5c>
 a94:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 a98:	01111349 	tsteq	r1, r9, asr #6
 a9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 aa0:	01194296 			; <UNDEFINED> instruction: 0x01194296
 aa4:	2b000013 	blcs	af8 <startup-0x1ffff508>
 aa8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 aac:	0b3b0b3a 	bleq	ec379c <startup-0x1f13c864>
 ab0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 ab4:	052c0000 	streq	r0, [ip, #-0]!
 ab8:	3a080300 	bcc	2016c0 <startup-0x1fdfe940>
 abc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ac0:	00180213 	andseq	r0, r8, r3, lsl r2
 ac4:	010b2d00 	tsteq	fp, r0, lsl #26
 ac8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 acc:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
 ad0:	03193f01 	tsteq	r9, #1, 30
 ad4:	3b0b3a0e 	blcc	2cf314 <startup-0x1fd30cec>
 ad8:	1119270b 	tstne	r9, fp, lsl #14
 adc:	40061201 	andmi	r1, r6, r1, lsl #4
 ae0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 ae4:	00001301 	andeq	r1, r0, r1, lsl #6
 ae8:	3f012e2f 	svccc	0x00012e2f
 aec:	3a0e0319 	bcc	381758 <startup-0x1fc7e8a8>
 af0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 af4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 af8:	96184006 	ldrls	r4, [r8], -r6
 afc:	00001942 	andeq	r1, r0, r2, asr #18
 b00:	55010b30 	strpl	r0, [r1, #-2864]	; 0xfffff4d0
 b04:	00000017 	andeq	r0, r0, r7, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00001168 	andeq	r1, r0, r8, ror #2
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	17e10002 	strbne	r0, [r1, r2]!
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20001178 	andcs	r1, r0, r8, ror r1
  3c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	1e080002 	cdpne	0, 0, cr0, cr8, cr2, {0}
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20001688 	andcs	r1, r0, r8, lsl #13
  5c:	000001c4 	andeq	r0, r0, r4, asr #3
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	234f0002 	movtcs	r0, #61442	; 0xf002
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	2000184c 	andcs	r1, r0, ip, asr #16
  7c:	000000e8 	andeq	r0, r0, r8, ror #1
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	24bc0002 	ldrtcs	r0, [ip], #2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001934 	andcs	r1, r0, r4, lsr r9
  9c:	000009fe 	strdeq	r0, [r0], -lr
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	2e8c0002 	cdpcs	0, 8, cr0, cr12, cr2, {0}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20002334 	andcs	r2, r0, r4, lsr r3
  bc:	00000340 	andeq	r0, r0, r0, asr #6
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000e02 	andcs	r0, r0, r2, lsl #28
   4:	20000e82 	andcs	r0, r0, r2, lsl #29
   8:	20000e84 	andcs	r0, r0, r4, lsl #29
   c:	20000e86 	andcs	r0, r0, r6, lsl #29
	...
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	20001178 	andcs	r1, r0, r8, ror r1
  20:	20000000 	andcs	r0, r0, r0
  24:	2000000c 	andcs	r0, r0, ip
	...
  30:	00000042 	andeq	r0, r0, r2, asr #32
  34:	0000006e 	andeq	r0, r0, lr, rrx
  38:	00000070 	andeq	r0, r0, r0, ror r0
  3c:	0000007c 	andeq	r0, r0, ip, ror r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000004af 	andeq	r0, r0, pc, lsr #9
       4:	01fd0002 	mvnseq	r0, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
      1c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
      20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
      24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
      2c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
      30:	2f534953 	svccs	0x00534953
      34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      38:	00656475 	rsbeq	r6, r5, r5, ror r4
      3c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; ffffff8c <GPIO_Pins+0xdfffd6c0>
      40:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
      44:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      48:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
      4c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
      50:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      54:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
      58:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
      5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
      60:	445f6870 	ldrbmi	r6, [pc], #-2160	; 68 <startup-0x1fffff98>
      64:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
      68:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
      6c:	3a430063 	bcc	10c0200 <startup-0x1ef3fe00>
      70:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
      74:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
      78:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
      7c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
      80:	76697244 	strbtvc	r7, [r9], -r4, asr #4
      84:	6f442f65 	svcvs	0x00442f65
      88:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
      8c:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
      90:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
      94:	41442f62 	cmpmi	r4, r2, ror #30
      98:	30393254 	eorscc	r3, r9, r4, asr r2
      9c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
      a0:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
      a4:	2f6d6574 	svccs	0x006d6574
      a8:	2f646f6b 	svccs	0x00646f6b
      ac:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
      b0:	2f2e2e00 	svccs	0x002e2e00
      b4:	2f62696c 	svccs	0x0062696c
      b8:	334d5453 	movtcc	r5, #54355	; 0xd453
      bc:	5f344632 	svcpl	0x00344632
      c0:	2f62696c 	svccs	0x0062696c
      c4:	334d5453 	movtcc	r5, #54355	; 0xd453
      c8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
      cc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
      d0:	72655064 	rsbvc	r5, r5, #100	; 0x64
      d4:	5f687069 	svcpl	0x00687069
      d8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
      dc:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
      e0:	6300636e 	movwvs	r6, #878	; 0x36e
      e4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
      e8:	70706165 	rsbsvc	r6, r0, r5, ror #2
      ec:	646f635c 	strbtvs	r6, [pc], #-860	; f4 <startup-0x1fffff0c>
      f0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
      f4:	6f745c65 	svcvs	0x00745c65
      f8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
      fc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     100:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     104:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     108:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     10c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     110:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     114:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     118:	616d5c65 	cmnvs	sp, r5, ror #24
     11c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     120:	3a630065 	bcc	18c02bc <startup-0x1e73fd44>
     124:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     128:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     12c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     130:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     134:	6f6f745c 	svcvs	0x006f745c
     138:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     13c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     140:	615c6d72 	cmpvs	ip, r2, ror sp
     144:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     148:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     14c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     150:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     154:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     158:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     15c:	6f630000 	svcvs	0x00630000
     160:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     164:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     168:	00000100 	andeq	r0, r0, r0, lsl #2
     16c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     170:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     174:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     178:	00632e63 	rsbeq	r2, r3, r3, ror #28
     17c:	73000002 	movwvc	r0, #2
     180:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     184:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
     188:	00000300 	andeq	r0, r0, r0, lsl #6
     18c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     190:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     194:	00682e78 	rsbeq	r2, r8, r8, ror lr
     198:	5f000004 	svcpl	0x00000004
     19c:	61666564 	cmnvs	r6, r4, ror #10
     1a0:	5f746c75 	svcpl	0x00746c75
     1a4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     1a8:	00682e73 	rsbeq	r2, r8, r3, ror lr
     1ac:	5f000005 	svcpl	0x00000005
     1b0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     1b4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     1b8:	00000600 	andeq	r0, r0, r0, lsl #12
     1bc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     1c0:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     1c4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     1c8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     1cc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     1d0:	74730000 	ldrbtvc	r0, [r3], #-0
     1d4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     1d8:	5f787834 	svcpl	0x00787834
     1dc:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     1e0:	00040068 	andeq	r0, r4, r8, rrx
     1e4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     1e8:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     1ec:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
     1f0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     1f4:	00040068 	andeq	r0, r4, r8, rrx
     1f8:	61747300 	cmnvs	r4, r0, lsl #6
     1fc:	70757472 	rsbsvc	r7, r5, r2, ror r4
     200:	0300682e 	movweq	r6, #2094	; 0x82e
     204:	00000000 	andeq	r0, r0, r0
     208:	00100205 	andseq	r0, r0, r5, lsl #4
     20c:	dd032000 	stcle	0, cr2, [r3, #-0]
     210:	4b75010c 	blmi	1d40648 <startup-0x1e2bf9b8>
     214:	03d81ecd 	bicseq	r1, r8, #3280	; 0xcd0
     218:	4b9000fc 	blmi	fe400610 <GPIO_Pins+0xde3fdd44>
     21c:	01040200 	mrseq	r0, R12_usr
     220:	30065806 	andcc	r5, r6, r6, lsl #16
     224:	3f3d674b 	svccc	0x003d674b
     228:	03020421 	movweq	r0, #9249	; 0x2421
     22c:	308273f7 	strdcc	r7, [r2], r7	; <UNPREDICTABLE>
     230:	40693f69 	rsbmi	r3, r9, r9, ror #30
     234:	3f694e4f 	svccc	0x00694e4f
     238:	e4170350 	ldr	r0, [r7], #-848	; 0xfffffcb0
     23c:	034b3f6b 	movteq	r3, #49003	; 0xbf6b
     240:	2f3d740f 	svccs	0x003d740f
     244:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     248:	02004002 	andeq	r4, r0, #2
     24c:	00670204 	rsbeq	r0, r7, r4, lsl #4
     250:	3d020402 	cfstrscc	mvf0, [r2, #-8]
     254:	01040200 	mrseq	r0, R12_usr
     258:	4c065806 	stcmi	8, cr5, [r6], {6}
     25c:	2f3e4e5a 	svccs	0x003e4e5a
     260:	674a0b03 	strbvs	r0, [sl, -r3, lsl #22]
     264:	694d3f32 	stmdbvs	sp, {r1, r4, r5, r8, r9, sl, fp, ip, sp}^
     268:	7415033d 	ldrvc	r0, [r5], #-829	; 0xfffffcc3
     26c:	14034b6a 	strne	r4, [r3], #-2922	; 0xfffff496
     270:	3f3f6c66 	svccc	0x003f6c66
     274:	03660b03 	cmneq	r6, #3072	; 0xc00
     278:	233d2079 	teqcs	sp, #121	; 0x79
     27c:	0f03243d 	svceq	0x0003243d
     280:	034b6a74 	movteq	r6, #47732	; 0xba74
     284:	7c6600de 	stclvc	0, cr0, [r6], #-888	; 0xfffffc88
     288:	033e2dbb 	teqeq	lr, #11968	; 0x2ec0
     28c:	4b69660e 	blmi	1a59acc <startup-0x1e5a6534>
     290:	5d661a03 	vstmdbpl	r6!, {s3-s5}
     294:	01850383 	orreq	r0, r5, r3, lsl #7
     298:	034b6974 	movteq	r6, #47476	; 0xb974
     29c:	6c6600e9 	stclvs	0, cr0, [r6], #-932	; 0xfffffc5c
     2a0:	740d03ad 	strvc	r0, [sp], #-941	; 0xfffffc53
     2a4:	0e034b69 	vmlseq.f64	d4, d3, d25
     2a8:	034b6966 	movteq	r6, #47462	; 0xb966
     2ac:	34596615 	ldrbcc	r6, [r9], #-1557	; 0xfffff9eb
     2b0:	41694d3f 	cmnmi	r9, pc, lsr sp
     2b4:	59901803 	ldmibpl	r0, {r0, r1, fp, ip}
     2b8:	694d3f34 	stmdbvs	sp, {r2, r4, r5, r8, r9, sl, fp, ip, sp}^
     2bc:	01b30341 			; <UNDEFINED> instruction: 0x01b30341
     2c0:	3f334b74 	svccc	0x00334b74
     2c4:	033d4d4d 	teqeq	sp, #4928	; 0x1340
     2c8:	672f660d 	strvs	r6, [pc, -sp, lsl #12]!
     2cc:	4b661703 	blmi	1985ee0 <startup-0x1e67a120>
     2d0:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
     2d4:	660f033d 			; <UNDEFINED> instruction: 0x660f033d
     2d8:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 1b4 <startup-0x1ffffe4c>
     2dc:	0f033d4d 	svceq	0x00033d4d
     2e0:	3f334b82 	svccc	0x00334b82
     2e4:	033d5b4d 	teqeq	sp, #78848	; 0x13400
     2e8:	c04b9024 	subgt	r9, fp, r4, lsr #32
     2ec:	223d775a 	eorscs	r7, sp, #23592960	; 0x1680000
     2f0:	5a67263d 	bpl	19c9bec <startup-0x1e636414>
     2f4:	83cbdb3f 	bichi	sp, fp, #64512	; 0xfc00
     2f8:	201b0383 	andscs	r0, fp, r3, lsl #7
     2fc:	3d59253d 	cfldr64cc	mvdx2, [r9, #-244]	; 0xffffff0c
     300:	3d676968 			; <UNDEFINED> instruction: 0x3d676968
     304:	3d676968 			; <UNDEFINED> instruction: 0x3d676968
     308:	3f036768 	svccc	0x00036768
     30c:	84334bba 	ldrthi	r4, [r3], #-3002	; 0xfffff446
     310:	40694d3f 	rsbmi	r4, r9, pc, lsr sp
     314:	9e0a0383 	cdpls	3, 0, cr0, cr10, cr3, {4}
     318:	0c034b6a 			; <UNDEFINED> instruction: 0x0c034b6a
     31c:	034b6966 	movteq	r6, #47462	; 0xb966
     320:	4e6601b8 	mcrmi	1, 3, r0, cr6, cr8, {5}
     324:	7416033d 	ldrvc	r0, [r6], #-829	; 0xfffffcc3
     328:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
     32c:	14034b4d 	strne	r4, [r3], #-2893	; 0xfffff4b3
     330:	4d334b82 	vldmdbmi	r3!, {d4}
     334:	034b4d4d 	movteq	r4, #48461	; 0xbd4d
     338:	334b8211 	movtcc	r8, #45585	; 0xb211
     33c:	4b5b4d4d 	blmi	16d3878 <startup-0x1e92c788>
     340:	4b741003 	blmi	1d04354 <startup-0x1e2fbcac>
     344:	694d4d33 	stmdbvs	sp, {r0, r1, r4, r5, r8, sl, fp, lr}^
     348:	00d3034b 	sbcseq	r0, r3, fp, asr #6
     34c:	4d334b82 	vldmdbmi	r3!, {d4}
     350:	034b4d4d 	movteq	r4, #48461	; 0xbd4d
     354:	4e8200f0 	mcrmi	0, 4, r0, cr2, cr0, {7}
     358:	7425033d 	strtvc	r0, [r5], #-829	; 0xfffffcc3
     35c:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     360:	74130376 	ldrvc	r0, [r3], #-886	; 0xfffffc8a
     364:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     368:	74110376 	ldrvc	r0, [r1], #-886	; 0xfffffc8a
     36c:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     370:	742c0376 	strtvc	r0, [ip], #-886	; 0xfffffc8a
     374:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     378:	74270376 	strtvc	r0, [r7], #-886	; 0xfffffc8a
     37c:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     380:	741d0376 	ldrvc	r0, [sp], #-886	; 0xfffffc8a
     384:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     388:	74100376 	ldrvc	r0, [r0], #-886	; 0xfffffc8a
     38c:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     390:	740e0376 	strvc	r0, [lr], #-886	; 0xfffffc8a
     394:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     398:	74290376 	strtvc	r0, [r9], #-886	; 0xfffffc8a
     39c:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3a0:	74230376 	strtvc	r0, [r3], #-886	; 0xfffffc8a
     3a4:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3a8:	74250376 	strtvc	r0, [r5], #-886	; 0xfffffc8a
     3ac:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3b0:	74140376 	ldrvc	r0, [r4], #-886	; 0xfffffc8a
     3b4:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3b8:	74120376 	ldrvc	r0, [r2], #-886	; 0xfffffc8a
     3bc:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3c0:	742d0376 	strtvc	r0, [sp], #-886	; 0xfffffc8a
     3c4:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3c8:	74280376 	strtvc	r0, [r8], #-886	; 0xfffffc8a
     3cc:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3d0:	740c0376 	strvc	r0, [ip], #-886	; 0xfffffc8a
     3d4:	1e6c4c6a 	cdpne	12, 6, cr4, cr12, cr10, {3}
     3d8:	02ac0368 	adceq	r0, ip, #104, 6	; 0xa0000001
     3dc:	974d9474 	smlsldxls	r9, sp, r4, r4
     3e0:	1703ae1e 	smladne	r3, lr, lr, sl
     3e4:	2f2f6766 	svccs	0x002f6766
     3e8:	4c3e5950 			; <UNDEFINED> instruction: 0x4c3e5950
     3ec:	59404e3e 	stmdbpl	r0, {r1, r2, r3, r4, r5, r9, sl, fp, lr}^
     3f0:	3d4d5c76 	stclcc	12, cr5, [sp, #-472]	; 0xfffffe28
     3f4:	30660a03 	rsbcc	r0, r6, r3, lsl #20
     3f8:	58110375 	ldmdapl	r1, {r0, r2, r4, r5, r6, r8, r9}
     3fc:	5c685067 	stclpl	0, cr5, [r8], #-412	; 0xfffffe64
     400:	11033d4d 	tstne	r3, sp, asr #26
     404:	044b6c66 	strbeq	r6, [fp], #-3174	; 0xfffff39a
     408:	67b50303 	ldrvs	r0, [r5, r3, lsl #6]!
     40c:	ae3e4b66 	vsubge.f64	d4, d14, d22
     410:	02040200 	andeq	r0, r4, #0, 4
     414:	04020054 	streq	r0, [r2], #-84	; 0xffffffac
     418:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     41c:	2f599343 	svccs	0x00599343
     420:	3daf4e3e 	stccc	14, cr4, [pc, #248]!	; 520 <startup-0x1ffffae0>
     424:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
     428:	3d75833d 	ldclcc	3, cr8, [r5, #-244]!	; 0xffffff0c
     42c:	02040200 	andeq	r0, r4, #0, 4
     430:	003c6e03 	eorseq	r6, ip, r3, lsl #28
     434:	06010402 	streq	r0, [r1], -r2, lsl #8
     438:	1603063c 			; <UNDEFINED> instruction: 0x1603063c
     43c:	206e033c 	rsbcs	r0, lr, ip, lsr r3
     440:	94201203 	strtls	r1, [r0], #-515	; 0xfffffdfd
     444:	3d4b4b40 	vstrcc	d20, [fp, #-256]	; 0xffffff00
     448:	4b693d3d 	blmi	1a4f944 <startup-0x1e5b06bc>
     44c:	673d3d3d 			; <UNDEFINED> instruction: 0x673d3d3d
     450:	5a592f7a 	bpl	164c240 <startup-0x1e9b3dc0>
     454:	a16c3e3e 	cmnge	ip, lr, lsr lr
     458:	592f303d 	stmdbpl	pc!, {r0, r2, r3, r4, r5, ip, sp}	; <UNPREDICTABLE>
     45c:	68132d02 	ldmdavs	r3, {r1, r8, sl, fp, sp}
     460:	3e2e0d03 	cdpcc	13, 2, cr0, cr14, cr3, {0}
     464:	5d081408 	cfstrspl	mvf1, [r8, #-32]	; 0xffffffe0
     468:	4f08bcae 	svcmi	0x0008bcae
     46c:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
     470:	06ba0601 	ldrteq	r0, [sl], r1, lsl #12
     474:	e6f7a008 	ldrbt	sl, [r7], r8
     478:	01040200 	mrseq	r0, R12_usr
     47c:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
     480:	03060204 	movweq	r0, #25092	; 0x6204
     484:	0200ba75 	andeq	fp, r0, #479232	; 0x75000
     488:	3c060104 	stfccs	f0, [r6], {4}
     48c:	02040200 	andeq	r0, r4, #0, 4
     490:	906e0306 	rsbls	r0, lr, r6, lsl #6
     494:	01040200 	mrseq	r0, R12_usr
     498:	029e3c06 	addseq	r3, lr, #1536	; 0x600
     49c:	01010009 	tsteq	r1, r9
     4a0:	05000304 	streq	r0, [r0, #-772]	; 0xfffffcfc
     4a4:	00000002 	andeq	r0, r0, r2
     4a8:	010b0320 	tsteq	fp, r0, lsr #6
     4ac:	03025e13 	movweq	r5, #11795	; 0x2e13
     4b0:	b5010100 	strlt	r0, [r1, #-256]	; 0xffffff00
     4b4:	02000002 	andeq	r0, r0, #2
     4b8:	0001c900 	andeq	ip, r1, r0, lsl #18
     4bc:	fb010200 	blx	40cc6 <startup-0x1ffbf33a>
     4c0:	01000d0e 	tsteq	r0, lr, lsl #26
     4c4:	00010101 	andeq	r0, r1, r1, lsl #2
     4c8:	00010000 	andeq	r0, r1, r0
     4cc:	3a430100 	bcc	10c08d4 <startup-0x1ef3f72c>
     4d0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     4d4:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     4d8:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     4dc:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     4e0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     4e4:	6f442f65 	svcvs	0x00442f65
     4e8:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     4ec:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     4f0:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     4f4:	41442f62 	cmpmi	r4, r2, ror #30
     4f8:	30393254 	eorscc	r3, r9, r4, asr r2
     4fc:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     500:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     504:	2f6d6574 	svccs	0x006d6574
     508:	2f646f6b 	svccs	0x00646f6b
     50c:	2f62696c 	svccs	0x0062696c
     510:	334d5453 	movtcc	r5, #54355	; 0xd453
     514:	5f344632 	svcpl	0x00344632
     518:	2f62696c 	svccs	0x0062696c
     51c:	334d5453 	movtcc	r5, #54355	; 0xd453
     520:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     524:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     528:	72655064 	rsbvc	r5, r5, #100	; 0x64
     52c:	5f687069 	svcpl	0x00687069
     530:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     534:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
     538:	63006372 	movwvs	r6, #882	; 0x372
     53c:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     540:	70706165 	rsbsvc	r6, r0, r5, ror #2
     544:	646f635c 	strbtvs	r6, [pc], #-860	; 54c <startup-0x1ffffab4>
     548:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     54c:	6f745c65 	svcvs	0x00745c65
     550:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     554:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     558:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     55c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     560:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     564:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     568:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     56c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     570:	616d5c65 	cmnvs	sp, r5, ror #24
     574:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     578:	3a630065 	bcc	18c0714 <startup-0x1e73f8ec>
     57c:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     580:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     584:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     588:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     58c:	6f6f745c 	svcvs	0x006f745c
     590:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     594:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     598:	615c6d72 	cmpvs	ip, r2, ror sp
     59c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     5a0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     5a4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     5a8:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     5ac:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     5b0:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     5b4:	2f2e2e00 	svccs	0x002e2e00
     5b8:	2f62696c 	svccs	0x0062696c
     5bc:	334d5453 	movtcc	r5, #54355	; 0xd453
     5c0:	5f344632 	svcpl	0x00344632
     5c4:	2f62696c 	svccs	0x0062696c
     5c8:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     5cc:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
     5d0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     5d4:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     5d8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     5dc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     5e0:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     5e4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     5e8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     5ec:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     5f0:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     5f4:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     5f8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     5fc:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     600:	2f726576 	svccs	0x00726576
     604:	00636e69 	rsbeq	r6, r3, r9, ror #28
     608:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     60c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     610:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
     614:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     618:	00010063 	andeq	r0, r1, r3, rrx
     61c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     620:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     624:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     628:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     62c:	00020068 	andeq	r0, r2, r8, rrx
     630:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     634:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     638:	0300682e 	movweq	r6, #2094	; 0x82e
     63c:	6f630000 	svcvs	0x00630000
     640:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     644:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     648:	00000400 	andeq	r0, r0, r0, lsl #8
     64c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     650:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     654:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     658:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     65c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     660:	74730000 	ldrbtvc	r0, [r3], #-0
     664:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     668:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     66c:	00050068 	andeq	r0, r5, r8, rrx
     670:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     674:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     678:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
     67c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     680:	00050068 	andeq	r0, r5, r8, rrx
     684:	05000000 	streq	r0, [r0, #-0]
     688:	00117802 	andseq	r7, r1, r2, lsl #16
     68c:	00ff0320 	rscseq	r0, pc, r0, lsr #6
     690:	4b4c4e01 	blmi	1313e9c <startup-0x1ecec164>
     694:	034a3803 	movteq	r3, #43011	; 0xa803
     698:	4b4c204a 	blmi	13087c8 <startup-0x1ecf7838>
     69c:	034a3303 	movteq	r3, #41731	; 0xa303
     6a0:	4b4c204f 	blmi	13087e4 <startup-0x1ecf781c>
     6a4:	034a2e03 	movteq	r2, #44547	; 0xae03
     6a8:	4b4c2054 	blmi	1308800 <startup-0x1ecf7800>
     6ac:	034a2903 	movteq	r2, #43267	; 0xa903
     6b0:	4b4c2059 	blmi	130881c <startup-0x1ecf77e4>
     6b4:	034a2403 	movteq	r2, #41987	; 0xa403
     6b8:	4b4c205e 	blmi	1308838 <startup-0x1ecf77c8>
     6bc:	034a1f03 	movteq	r1, #44803	; 0xaf03
     6c0:	4b4c2063 	blmi	1308854 <startup-0x1ecf77ac>
     6c4:	034a1a03 	movteq	r1, #43523	; 0xaa03
     6c8:	4b4c2068 	blmi	1308870 <startup-0x1ecf7790>
     6cc:	034a1503 	movteq	r1, #42243	; 0xa503
     6d0:	674c206e 	strbvs	r2, [ip, -lr, rrx]
     6d4:	03660f03 	cmneq	r6, #3, 30
     6d8:	674c2073 	smlsldxvs	r2, ip, r3, r0
     6dc:	03660a03 	cmneq	r6, #12288	; 0x3000
     6e0:	674c207a 	smlsldxvs	r2, ip, sl, r0
     6e4:	080c0369 	stmdaeq	ip, {r0, r3, r5, r6, r8, r9}
     6e8:	0a035990 	beq	d6d30 <startup-0x1ff292d0>
     6ec:	5a5a3e66 	bpl	169008c <startup-0x1e96ff74>
     6f0:	00bcad4c 	adcseq	sl, ip, ip, asr #26
     6f4:	06010402 	streq	r0, [r1], -r2, lsl #8
     6f8:	ad50064a 	ldclge	6, cr0, [r0, #-296]	; 0xfffffed8
     6fc:	bbccadc0 	bllt	ff32be04 <GPIO_Pins+0xdf329538>
     700:	02040200 	andeq	r0, r4, #0, 4
     704:	00ba6203 	adcseq	r6, sl, r3, lsl #4
     708:	06010402 	streq	r0, [r1], -r2, lsl #8
     70c:	2103063c 	tstcs	r3, ip, lsr r6
     710:	3d4c523c 	sfmcc	f5, 2, [ip, #-240]	; 0xffffff10
     714:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     718:	75741003 	ldrbvc	r1, [r4, #-3]!
     71c:	4c3e5a42 			; <UNDEFINED> instruction: 0x4c3e5a42
     720:	033d3e3e 	teqeq	sp, #992	; 0x3e0
     724:	50754a1c 	rsbspl	r4, r5, ip, lsl sl
     728:	3d4c5c68 	stclcc	12, cr5, [ip, #-416]	; 0xfffffe60
     72c:	4e4a0a03 	vmlami.f32	s1, s20, s6
     730:	4a0c033d 	bmi	30142c <startup-0x1fcfebd4>
     734:	5c685075 	stclpl	0, cr5, [r8], #-468	; 0xfffffe2c
     738:	0a033d4c 	beq	cfc70 <startup-0x1ff30390>
     73c:	033d4e4a 	teqeq	sp, #1184	; 0x4a0
     740:	4b794a0f 	blmi	1e52f84 <startup-0x1e1ad07c>
     744:	794a0f03 	stmdbvc	sl, {r0, r1, r8, r9, sl, fp}^
     748:	4a10034b 	bmi	40147c <startup-0x1fbfeb84>
     74c:	1e504cc0 	cdpne	12, 5, cr4, cr0, cr0, {6}
     750:	4a0b034c 	bmi	2c1488 <startup-0x1fd3eb78>
     754:	0b034b78 	bleq	d353c <startup-0x1ff2cac4>
     758:	0375784a 	cmneq	r5, #4849664	; 0x4a0000
     75c:	bb4a00ce 	bllt	1280a9c <startup-0x1ed7f564>
     760:	089f352f 	ldmeq	pc, {r0, r1, r2, r3, r5, r8, sl, ip, sp}	; <UNPREDICTABLE>
     764:	029fbbc9 	addseq	fp, pc, #205824	; 0x32400
     768:	01010004 	tsteq	r1, r4
     76c:	000001fa 	strdeq	r0, [r0], -sl
     770:	01b50002 			; <UNDEFINED> instruction: 0x01b50002
     774:	01020000 	mrseq	r0, (UNDEF: 2)
     778:	000d0efb 	strdeq	r0, [sp], -fp
     77c:	01010101 	tsteq	r1, r1, lsl #2
     780:	01000000 	mrseq	r0, (UNDEF: 0)
     784:	43010000 	movwmi	r0, #4096	; 0x1000
     788:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     78c:	2f737265 	svccs	0x00737265
     790:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
     794:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
     798:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
     79c:	442f6576 	strtmi	r6, [pc], #-1398	; 7a4 <startup-0x1ffff85c>
     7a0:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
     7a4:	2f746e65 	svccs	0x00746e65
     7a8:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
     7ac:	442f6275 	strtmi	r6, [pc], #-629	; 7b4 <startup-0x1ffff84c>
     7b0:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
     7b4:	614c2d30 	cmpvs	ip, r0, lsr sp
     7b8:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
     7bc:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     7c0:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 7c8 <startup-0x1ffff838>
     7c4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     7c8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     7cc:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     7d0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     7d4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     7d8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     7dc:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     7e0:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     7e4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     7e8:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     7ec:	2f726576 	svccs	0x00726576
     7f0:	00637273 	rsbeq	r7, r3, r3, ror r2
     7f4:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     7f8:	70616573 	rsbvc	r6, r1, r3, ror r5
     7fc:	6f635c70 	svcvs	0x00635c70
     800:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     804:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     808:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     80c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     810:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     814:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     818:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     81c:	61652d65 	cmnvs	r5, r5, ror #26
     820:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     824:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     828:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     82c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     830:	6300656e 	movwvs	r6, #1390	; 0x56e
     834:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     838:	70706165 	rsbsvc	r6, r0, r5, ror #2
     83c:	646f635c 	strbtvs	r6, [pc], #-860	; 844 <startup-0x1ffff7bc>
     840:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     844:	6f745c65 	svcvs	0x00745c65
     848:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     84c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     850:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     854:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     858:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     85c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     860:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     864:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     868:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     86c:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
     870:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     874:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     878:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     87c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     880:	534d432f 	movtpl	r4, #54063	; 0xd32f
     884:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     888:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     88c:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     890:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     894:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     898:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     89c:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     8a0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     8a4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     8a8:	5f787834 	svcpl	0x00787834
     8ac:	50647453 	rsbpl	r7, r4, r3, asr r4
     8b0:	70697265 	rsbvc	r7, r9, r5, ror #4
     8b4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     8b8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     8bc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     8c0:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
     8c4:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
     8c8:	00000100 	andeq	r0, r0, r0, lsl #2
     8cc:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     8d0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     8d4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     8d8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     8dc:	00000200 	andeq	r0, r0, r0, lsl #4
     8e0:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     8e4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     8e8:	00030068 	andeq	r0, r3, r8, rrx
     8ec:	726f6300 	rsbvc	r6, pc, #0, 6
     8f0:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     8f4:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     8f8:	73000004 	movwvc	r0, #4
     8fc:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     900:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
     904:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     908:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     90c:	00050068 	andeq	r0, r5, r8, rrx
     910:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     914:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     918:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     91c:	00000500 	andeq	r0, r0, r0, lsl #10
     920:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
     924:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     928:	00000000 	andeq	r0, r0, r0
     92c:	16880205 	strne	r0, [r8], r5, lsl #4
     930:	f6032000 			; <UNDEFINED> instruction: 0xf6032000
     934:	594f0100 	stmdbpl	pc, {r8}^	; <UNPREDICTABLE>
     938:	4b900c03 	blmi	fe40394c <GPIO_Pins+0xde401080>
     93c:	759f4dc1 	ldrvc	r4, [pc, #3521]	; 1705 <startup-0x1fffe8fb>
     940:	5aae9192 	bpl	feba4f90 <GPIO_Pins+0xdeba26c4>
     944:	2d6757b0 	stclcs	7, cr5, [r7, #-704]!	; 0xfffffd40
     948:	1e2e0903 	vmulne.f16	s0, s28, s6	; <UNPREDICTABLE>
     94c:	4d2d6757 	stcmi	7, cr6, [sp, #-348]!	; 0xfffffea4
     950:	5d900c03 	ldcpl	12, cr0, [r0, #12]
     954:	900d0383 	andls	r0, sp, r3, lsl #7
     958:	1e7a4c95 	mrcne	12, 3, r4, cr10, cr5, {4}
     95c:	740b0384 	strvc	r0, [fp], #-900	; 0xfffffc7c
     960:	1e6c3e4d 	cdpne	14, 6, cr3, cr12, cr13, {2}
     964:	00060268 	andeq	r0, r6, r8, ror #4
     968:	01310101 	teqeq	r1, r1, lsl #2
     96c:	00020000 	andeq	r0, r2, r0
     970:	00000108 	andeq	r0, r0, r8, lsl #2
     974:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     978:	0101000d 	tsteq	r1, sp
     97c:	00000101 	andeq	r0, r0, r1, lsl #2
     980:	00000100 	andeq	r0, r0, r0, lsl #2
     984:	2f3a4301 	svccs	0x003a4301
     988:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     98c:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
     990:	2f746d61 	svccs	0x00746d61
     994:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     998:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     99c:	6b6f442f 	blvs	1bd1a60 <startup-0x1e42e5a0>
     9a0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     9a4:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     9a8:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     9ac:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
     9b0:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     9b4:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     9b8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     9bc:	6b2f6d65 	blvs	bdbf58 <startup-0x1f4240a8>
     9c0:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 80c <startup-0x1ffff7f4>
     9c4:	63006269 	movwvs	r6, #617	; 0x269
     9c8:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     9cc:	70706165 	rsbsvc	r6, r0, r5, ror #2
     9d0:	646f635c 	strbtvs	r6, [pc], #-860	; 9d8 <startup-0x1ffff628>
     9d4:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     9d8:	6f745c65 	svcvs	0x00745c65
     9dc:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     9e0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     9e4:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     9e8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     9ec:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     9f0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     9f4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     9f8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     9fc:	616d5c65 	cmnvs	sp, r5, ror #24
     a00:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     a04:	3a630065 	bcc	18c0ba0 <startup-0x1e73f460>
     a08:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     a0c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     a10:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     a14:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     a18:	6f6f745c 	svcvs	0x006f745c
     a1c:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     a20:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     a24:	615c6d72 	cmpvs	ip, r2, ror sp
     a28:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     a2c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     a30:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     a34:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     a38:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     a3c:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     a40:	75620000 	strbvc	r0, [r2, #-0]!
     a44:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     a48:	0100632e 	tsteq	r0, lr, lsr #6
     a4c:	645f0000 	ldrbvs	r0, [pc], #-0	; a54 <startup-0x1ffff5ac>
     a50:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     a54:	745f746c 	ldrbvc	r7, [pc], #-1132	; a5c <startup-0x1ffff5a4>
     a58:	73657079 	cmnvc	r5, #121	; 0x79
     a5c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     a60:	735f0000 	cmpvc	pc, #0
     a64:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     a68:	00682e74 	rsbeq	r2, r8, r4, ror lr
     a6c:	62000003 	andvs	r0, r0, #3
     a70:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     a74:	00682e72 	rsbeq	r2, r8, r2, ror lr
     a78:	00000001 	andeq	r0, r0, r1
     a7c:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
     a80:	15200018 	strne	r0, [r0, #-24]!	; 0xffffffe8
     a84:	4b4b4b4b 	blmi	12d37b8 <startup-0x1ed2c848>
     a88:	3259764e 	subscc	r7, r9, #81788928	; 0x4e00000
     a8c:	4c5985c9 	cfldr64mi	mvdx8, [r9], {201}	; 0xc9
     a90:	595a4e21 	ldmdbpl	sl, {r0, r5, r9, sl, fp, lr}^
     a94:	5985c932 	stmibpl	r5, {r1, r4, r5, r8, fp, lr, pc}
     a98:	0402214c 	streq	r2, [r2], #-332	; 0xfffffeb4
     a9c:	4f010100 	svcmi	0x00010100
     aa0:	02000003 	andeq	r0, r0, #3
     aa4:	0001de00 	andeq	sp, r1, r0, lsl #28
     aa8:	fb010200 	blx	412b2 <startup-0x1ffbed4e>
     aac:	01000d0e 	tsteq	r0, lr, lsl #26
     ab0:	00010101 	andeq	r0, r1, r1, lsl #2
     ab4:	00010000 	andeq	r0, r1, r0
     ab8:	3a430100 	bcc	10c0ec0 <startup-0x1ef3f140>
     abc:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     ac0:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     ac4:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     ac8:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     acc:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     ad0:	6f442f65 	svcvs	0x00442f65
     ad4:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     ad8:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     adc:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     ae0:	41442f62 	cmpmi	r4, r2, ror #30
     ae4:	30393254 	eorscc	r3, r9, r4, asr r2
     ae8:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     aec:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     af0:	2f6d6574 	svccs	0x006d6574
     af4:	2f646f6b 	svccs	0x00646f6b
     af8:	2f62696c 	svccs	0x0062696c
     afc:	334d5453 	movtcc	r5, #54355	; 0xd453
     b00:	5f344632 	svcpl	0x00344632
     b04:	2f62696c 	svccs	0x0062696c
     b08:	334d5453 	movtcc	r5, #54355	; 0xd453
     b0c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     b10:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     b14:	72655064 	rsbvc	r5, r5, #100	; 0x64
     b18:	5f687069 	svcpl	0x00687069
     b1c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     b20:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
     b24:	63006372 	movwvs	r6, #882	; 0x372
     b28:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     b2c:	70706165 	rsbsvc	r6, r0, r5, ror #2
     b30:	646f635c 	strbtvs	r6, [pc], #-860	; b38 <startup-0x1ffff4c8>
     b34:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     b38:	6f745c65 	svcvs	0x00745c65
     b3c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     b40:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     b44:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     b48:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     b4c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     b50:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     b54:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     b58:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     b5c:	616d5c65 	cmnvs	sp, r5, ror #24
     b60:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     b64:	3a630065 	bcc	18c0d00 <startup-0x1e73f300>
     b68:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     b6c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     b70:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     b74:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     b78:	6f6f745c 	svcvs	0x006f745c
     b7c:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     b80:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     b84:	615c6d72 	cmpvs	ip, r2, ror sp
     b88:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     b8c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     b90:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     b94:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     b98:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     b9c:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     ba0:	2f2e2e00 	svccs	0x002e2e00
     ba4:	2f62696c 	svccs	0x0062696c
     ba8:	334d5453 	movtcc	r5, #54355	; 0xd453
     bac:	5f344632 	svcpl	0x00344632
     bb0:	2f62696c 	svccs	0x0062696c
     bb4:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     bb8:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
     bbc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     bc0:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     bc4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     bc8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     bcc:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     bd0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     bd4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     bd8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     bdc:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     be0:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     be4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     be8:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     bec:	2f726576 	svccs	0x00726576
     bf0:	00636e69 	rsbeq	r6, r3, r9, ror #28
     bf4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     bf8:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     bfc:	755f7878 	ldrbvc	r7, [pc, #-2168]	; 38c <startup-0x1ffffc74>
     c00:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
     c04:	0100632e 	tsteq	r0, lr, lsr #6
     c08:	645f0000 	ldrbvs	r0, [pc], #-0	; c10 <startup-0x1ffff3f0>
     c0c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     c10:	745f746c 	ldrbvc	r7, [pc], #-1132	; c18 <startup-0x1ffff3e8>
     c14:	73657079 	cmnvc	r5, #121	; 0x79
     c18:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     c1c:	735f0000 	cmpvc	pc, #0
     c20:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     c24:	00682e74 	rsbeq	r2, r8, r4, ror lr
     c28:	63000003 	movwvs	r0, #3
     c2c:	5f65726f 	svcpl	0x0065726f
     c30:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     c34:	00040068 	andeq	r0, r4, r8, rrx
     c38:	73797300 	cmnvc	r9, #0, 6
     c3c:	5f6d6574 	svcpl	0x006d6574
     c40:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     c44:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     c48:	00682e78 	rsbeq	r2, r8, r8, ror lr
     c4c:	73000005 	movwvc	r0, #5
     c50:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     c54:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     c58:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     c5c:	74730000 	ldrbtvc	r0, [r3], #-0
     c60:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     c64:	5f787834 	svcpl	0x00787834
     c68:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
     c6c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     c70:	73000005 	movwvc	r0, #5
     c74:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     c78:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     c7c:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
     c80:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     c84:	00000000 	andeq	r0, r0, r0
     c88:	19340205 	ldmdbne	r4!, {r0, r2, r9}
     c8c:	bb032000 	bllt	c8c94 <startup-0x1ff3736c>
     c90:	4c4e0101 	stfmie	f0, [lr], {1}
     c94:	4a28034b 	bmi	a019c8 <startup-0x1f5fe638>
     c98:	4c205a03 			; <UNDEFINED> instruction: 0x4c205a03
     c9c:	66230367 	strtvs	r0, [r3], -r7, ror #6
     ca0:	4c205f03 	stcmi	15, cr5, [r0], #-12
     ca4:	661e0367 	ldrvs	r0, [lr], -r7, ror #6
     ca8:	4c206403 	cfstrsmi	mvf6, [r0], #-12
     cac:	66190367 	ldrvs	r0, [r9], -r7, ror #6
     cb0:	4c206903 			; <UNDEFINED> instruction: 0x4c206903
     cb4:	66140367 	ldrvs	r0, [r4], -r7, ror #6
     cb8:	4c206e03 	stcmi	14, cr6, [r0], #-12
     cbc:	4a0f034b 	bmi	3c19f0 <startup-0x1fc3e610>
     cc0:	4c207303 	stcmi	3, cr7, [r0], #-12
     cc4:	660a0367 	strvs	r0, [sl], -r7, ror #6
     cc8:	4c207a03 			; <UNDEFINED> instruction: 0x4c207a03
     ccc:	0c036967 			; <UNDEFINED> instruction: 0x0c036967
     cd0:	4b594a08 	blmi	16534f8 <startup-0x1e9acb08>
     cd4:	2e13032f 	cdpcs	3, 1, cr0, cr3, cr15, {1}
     cd8:	4d694e4d 	stclmi	14, cr4, [r9, #-308]!	; 0xfffffecc
     cdc:	2d67504d 	stclcs	0, cr5, [r7, #-308]!	; 0xfffffecc
     ce0:	4e4d4d6a 	cdpmi	13, 4, cr4, cr13, cr10, {3}
     ce4:	005a4e69 	subseq	r4, sl, r9, ror #28
     ce8:	06010402 	streq	r0, [r1], -r2, lsl #8
     cec:	5c4c064a 	mcrrpl	6, 4, r0, ip, cr10
     cf0:	e6f7694e 	ldrbt	r6, [r7], lr, asr #18
     cf4:	e8687785 	stmda	r8!, {r0, r2, r7, r8, r9, sl, ip, sp, lr}^
     cf8:	09034bda 	stmdbeq	r3, {r1, r3, r4, r6, r7, r8, r9, fp, lr}
     cfc:	3d4b4cd6 	stclcc	12, cr4, [fp, #-856]	; 0xfffffca8
     d00:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     d04:	594a0c03 	stmdbpl	sl, {r0, r1, sl, fp}^
     d08:	4c2e0903 			; <UNDEFINED> instruction: 0x4c2e0903
     d0c:	3fab4b50 	svccc	0x00ab4b50
     d10:	6609034b 	strvs	r0, [r9], -fp, asr #6
     d14:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
     d18:	4a0b033d 	bmi	2c1a14 <startup-0x1fd3e5ec>
     d1c:	1e974d79 	mrcne	13, 4, r4, cr7, cr9, {3}
     d20:	740b0384 	strvc	r0, [fp], #-900	; 0xfffffc7c
     d24:	039f8479 	orrseq	r8, pc, #2030043136	; 0x79000000
     d28:	4d794a0d 	vldmdbmi	r9!, {s9-s21}
     d2c:	03841e89 	orreq	r1, r4, #2192	; 0x890
     d30:	4d79740b 	cfldrdmi	mvd7, [r9, #-44]!	; 0xffffffd4
     d34:	03841e97 	orreq	r1, r4, #2416	; 0x970
     d38:	757a742a 	ldrbvc	r7, [sl, #-1066]!	; 0xfffffbd6
     d3c:	4f4a0903 	svcmi	0x004a0903
     d40:	4a2e0367 	bmi	b81ae4 <startup-0x1f47e51c>
     d44:	039f847a 	orrseq	r8, pc, #2046820352	; 0x7a000000
     d48:	4d794a0b 	vldmdbmi	r9!, {s9-s19}
     d4c:	03841e89 	orreq	r1, r4, #2192	; 0x890
     d50:	83794a0c 	cmnhi	r9, #12, 20	; 0xc000
     d54:	743e0391 	ldrtvc	r0, [lr], #-913	; 0xfffffc6f
     d58:	03918379 	orrseq	r8, r1, #-469762047	; 0xe4000001
     d5c:	4d794a0b 	vldmdbmi	r9!, {s9-s19}
     d60:	03841e97 	orreq	r1, r4, #2416	; 0x970
     d64:	834f7409 	movthi	r7, #62473	; 0xf409
     d68:	794a2f03 	stmdbvc	sl, {r0, r1, r8, r9, sl, fp, sp}^
     d6c:	841e894d 	ldrhi	r8, [lr], #-2381	; 0xfffff6b3
     d70:	4a00c503 	bmi	32184 <startup-0x1ffcde7c>
     d74:	03bb8479 			; <UNDEFINED> instruction: 0x03bb8479
     d78:	4d784a0b 	vldmdbmi	r8!, {s9-s19}
     d7c:	03841e89 	orreq	r1, r4, #2192	; 0x890
     d80:	4d784a0b 	vldmdbmi	r8!, {s9-s19}
     d84:	03841e89 	orreq	r1, r4, #2192	; 0x890
     d88:	83794a39 	cmnhi	r9, #233472	; 0x39000
     d8c:	4a0b0391 	bmi	2c1bd8 <startup-0x1fd3e428>
     d90:	1e894d79 	mcrne	13, 4, r4, cr9, cr9, {3}
     d94:	4a1f0384 	bmi	7c1bac <startup-0x1f83e454>
     d98:	1e984ec0 	cdpne	14, 9, cr4, cr8, cr0, {6}
     d9c:	00f203ae 	rscseq	r0, r2, lr, lsr #7
     da0:	0367bb4a 	cmneq	r7, #75776	; 0x12800
     da4:	69312e0c 	ldmdbvs	r1!, {r2, r3, r9, sl, fp, sp}
     da8:	4c3e5a59 			; <UNDEFINED> instruction: 0x4c3e5a59
     dac:	4c3e4e3e 	ldcmi	14, cr4, [lr], #-248	; 0xffffff08
     db0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
     db4:	03754a15 	cmneq	r5, #86016	; 0x15000
     db8:	5c924a0b 	vldmiapl	r2, {s8-s18}
     dbc:	1c033d4c 	stcne	13, cr3, [r3], {76}	; 0x4c
     dc0:	740b034a 	strvc	r0, [fp], #-842	; 0xfffffcb6
     dc4:	4a160367 	bmi	581b68 <startup-0x1fa7e498>
     dc8:	0c036775 	stceq	7, cr6, [r3], {117}	; 0x75
     dcc:	5a59684a 	bpl	165aefc <startup-0x1e9a5104>
     dd0:	863e843e 			; <UNDEFINED> instruction: 0x863e843e
     dd4:	75595977 	ldrbvc	r5, [r9, #-2423]	; 0xfffff689
     dd8:	01040200 	mrseq	r0, R12_usr
     ddc:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
     de0:	033d4d5c 	teqeq	sp, #92, 26	; 0x1700
     de4:	03754a1d 	cmneq	r5, #118784	; 0x1d000
     de8:	6759820b 	ldrbvs	r8, [r9, -fp, lsl #4]
     dec:	00040267 	andeq	r0, r4, r7, ror #4
     df0:	02ba0101 	adcseq	r0, sl, #1073741824	; 0x40000000
     df4:	00020000 	andeq	r0, r2, r0
     df8:	00000232 	andeq	r0, r0, r2, lsr r2
     dfc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     e00:	0101000d 	tsteq	r1, sp
     e04:	00000101 	andeq	r0, r0, r1, lsl #2
     e08:	00000100 	andeq	r0, r0, r0, lsl #2
     e0c:	2f3a4301 	svccs	0x003a4301
     e10:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     e14:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
     e18:	2f746d61 	svccs	0x00746d61
     e1c:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     e20:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     e24:	6b6f442f 	blvs	1bd1ee8 <startup-0x1e42e118>
     e28:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     e2c:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     e30:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     e34:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
     e38:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     e3c:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     e40:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     e44:	6b2f6d65 	blvs	bdc3e0 <startup-0x1f423c20>
     e48:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; c94 <startup-0x1ffff36c>
     e4c:	63006269 	movwvs	r6, #617	; 0x269
     e50:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     e54:	70706165 	rsbsvc	r6, r0, r5, ror #2
     e58:	646f635c 	strbtvs	r6, [pc], #-860	; e60 <startup-0x1ffff1a0>
     e5c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     e60:	6f745c65 	svcvs	0x00745c65
     e64:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     e68:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     e6c:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     e70:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     e74:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     e78:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     e7c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     e80:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     e84:	616d5c65 	cmnvs	sp, r5, ror #24
     e88:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     e8c:	3a630065 	bcc	18c1028 <startup-0x1e73efd8>
     e90:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     e94:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     e98:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     e9c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     ea0:	6f6f745c 	svcvs	0x006f745c
     ea4:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     ea8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     eac:	615c6d72 	cmpvs	ip, r2, ror sp
     eb0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     eb4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     eb8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     ebc:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     ec0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     ec4:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     ec8:	2f2e2e00 	svccs	0x002e2e00
     ecc:	2f62696c 	svccs	0x0062696c
     ed0:	334d5453 	movtcc	r5, #54355	; 0xd453
     ed4:	5f344632 	svcpl	0x00344632
     ed8:	2f62696c 	svccs	0x0062696c
     edc:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     ee0:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
     ee4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     ee8:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     eec:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     ef0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     ef4:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     ef8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     efc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     f00:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     f04:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     f08:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     f0c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     f10:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     f14:	2f726576 	svccs	0x00726576
     f18:	00636e69 	rsbeq	r6, r3, r9, ror #28
     f1c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     f20:	70616573 	rsbvc	r6, r1, r3, ror r5
     f24:	6f635c70 	svcvs	0x00635c70
     f28:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     f2c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     f30:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     f34:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     f38:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     f3c:	62696c5c 	rsbvs	r6, r9, #92, 24	; 0x5c00
     f40:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     f44:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     f48:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     f4c:	61652d65 	cmnvs	r5, r5, ror #26
     f50:	375c6962 	ldrbcc	r6, [ip, -r2, ror #18]
     f54:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
     f58:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     f5c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     f60:	53550000 	cmppl	r5, #0
     f64:	2e545241 	cdpcs	2, 5, cr5, cr4, cr1, {2}
     f68:	00010063 	andeq	r0, r1, r3, rrx
     f6c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     f70:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     f74:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     f78:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     f7c:	00020068 	andeq	r0, r2, r8, rrx
     f80:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     f84:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     f88:	0300682e 	movweq	r6, #2094	; 0x82e
     f8c:	75620000 	strbvc	r0, [r2, #-0]!
     f90:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     f94:	0100682e 	tsteq	r0, lr, lsr #16
     f98:	6f630000 	svcvs	0x00630000
     f9c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     fa0:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     fa4:	00000400 	andeq	r0, r0, r0, lsl #8
     fa8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     fac:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     fb0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     fb4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     fb8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     fbc:	74730000 	ldrbtvc	r0, [r3], #-0
     fc0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     fc4:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     fc8:	00050068 	andeq	r0, r5, r8, rrx
     fcc:	73696d00 	cmnvc	r9, #0, 26
     fd0:	00682e63 	rsbeq	r2, r8, r3, ror #28
     fd4:	73000005 	movwvc	r0, #5
     fd8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     fdc:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     fe0:	6173755f 	cmnvs	r3, pc, asr r5
     fe4:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
     fe8:	00000500 	andeq	r0, r0, r0, lsl #10
     fec:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     ff0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     ff4:	70675f78 	rsbvc	r5, r7, r8, ror pc
     ff8:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     ffc:	00000500 	andeq	r0, r0, r0, lsl #10
    1000:	6b636f6c 	blvs	18dcdb8 <startup-0x1e723248>
    1004:	0300682e 	movweq	r6, #2094	; 0x82e
    1008:	745f0000 	ldrbvc	r0, [pc], #-0	; 1010 <startup-0x1fffeff0>
    100c:	73657079 	cmnvc	r5, #121	; 0x79
    1010:	0300682e 	movweq	r6, #2094	; 0x82e
    1014:	74730000 	ldrbtvc	r0, [r3], #-0
    1018:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    101c:	0600682e 	streq	r6, [r0], -lr, lsr #16
    1020:	65720000 	ldrbvs	r0, [r2, #-0]!
    1024:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    1028:	00030068 	andeq	r0, r3, r8, rrx
    102c:	05000000 	streq	r0, [r0, #-0]
    1030:	00233402 	eoreq	r3, r3, r2, lsl #8
    1034:	01120320 	tsteq	r2, r0, lsr #6
    1038:	93c0923e 	bicls	r9, r0, #-536870909	; 0xe0000003
    103c:	1d874ba2 	vstrne	d4, [r7, #648]	; 0x288
    1040:	3d3ed969 			; <UNDEFINED> instruction: 0x3d3ed969
    1044:	4b5b593f 	blmi	16d7548 <startup-0x1e928ab8>
    1048:	4b78754d 	blmi	1e1e584 <startup-0x1e1e1a7c>
    104c:	4b3e3d3d 	blmi	f90548 <startup-0x1f06fab8>
    1050:	0b035976 	bleq	d7630 <startup-0x1ff289d0>
    1054:	3d3d5966 			; <UNDEFINED> instruction: 0x3d3d5966
    1058:	09033d3d 	stmdbeq	r3, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    105c:	3d3d3d3c 	ldccc	13, cr3, [sp, #-240]!	; 0xffffff10
    1060:	5b3f4d3d 	blpl	fd455c <startup-0x1f02baa4>
    1064:	685c0867 	ldmdavs	ip, {r0, r1, r2, r5, r6, fp}^
    1068:	213068a0 	teqcs	r0, r0, lsr #17
    106c:	91234db0 			; <UNDEFINED> instruction: 0x91234db0
    1070:	4f21512a 	svcmi	0x0021512a
    1074:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    1078:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    107c:	bb4e324b 	bllt	138d9b0 <startup-0x1ec72650>
    1080:	01040200 	mrseq	r0, R12_usr
    1084:	02004a06 	andeq	r4, r0, #24576	; 0x6000
    1088:	00660204 	rsbeq	r0, r6, r4, lsl #4
    108c:	58040402 	stmdapl	r4, {r1, sl}
    1090:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1094:	02009f06 	andeq	r9, r0, #6, 30
    1098:	3f830404 	svccc	0x00830404
    109c:	5e2cf321 	cdppl	3, 2, cr15, cr12, cr1, {1}
    10a0:	01040200 	mrseq	r0, R12_usr
    10a4:	594b4f21 	stmdbpl	fp, {r0, r5, r8, r9, sl, fp, lr}^
    10a8:	02834b5d 	addeq	r4, r3, #95232	; 0x17400
    10ac:	01010007 	tsteq	r1, r7

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	706c6c70 	rsbvc	r6, ip, r0, ror ip
       4:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
       8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
       c:	54520031 	ldrbpl	r0, [r2], #-49	; 0xffffffcf
      10:	4b575f43 	blmi	15d7d24 <startup-0x1ea282dc>
      14:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
      18:	006e5152 	rsbeq	r5, lr, r2, asr r1
      1c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
      20:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
      24:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
      28:	5f31414d 	svcpl	0x0031414d
      2c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
      30:	5f366d61 	svcpl	0x00366d61
      34:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      38:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
      3c:	50555f38 	subspl	r5, r5, r8, lsr pc
      40:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
      44:	495f3331 	ldmdbmi	pc, {r0, r4, r5, r8, r9, ip, sp}^	; <UNPREDICTABLE>
      48:	006e5152 	rsbeq	r5, lr, r2, asr r1
      4c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
      50:	46435332 			; <UNDEFINED> instruction: 0x46435332
      54:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
      58:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
      5c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
      60:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
      64:	00676966 	rsbeq	r6, r7, r6, ror #18
      68:	5f434352 	svcpl	0x00434352
      6c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
      70:	6b636f6c 	blvs	18dbe28 <startup-0x1e7241d8>
      74:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
      78:	4d440071 	stclmi	0, cr0, [r4, #-452]	; 0xfffffe3c
      7c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
      80:	61657274 	smcvs	22308	; 0x5724
      84:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
      88:	006e5152 	rsbeq	r5, lr, r2, asr r1
      8c:	4b4c4348 	blmi	1310db4 <startup-0x1ecef24c>
      90:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
      94:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
      98:	47007963 	strmi	r7, [r0, -r3, ror #18]
      9c:	5f4f4950 	svcpl	0x004f4950
      a0:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
      a4:	504f4e5f 	subpl	r4, pc, pc, asr lr	; <UNPREDICTABLE>
      a8:	004c4c55 	subeq	r4, ip, r5, asr ip
      ac:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
      b0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
      b4:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
      b8:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
      bc:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
      c0:	5152495f 	cmppl	r2, pc, asr r9
      c4:	4344006e 	movtmi	r0, #16494	; 0x406e
      c8:	495f494d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
      cc:	006e5152 	rsbeq	r5, lr, r2, asr r1
      d0:	5f434352 	svcpl	0x00434352
      d4:	32425041 	subcc	r5, r2, #65	; 0x41
      d8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
      dc:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
      e0:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
      e4:	646f4d50 	strbtvs	r4, [pc], #-3408	; ec <startup-0x1fffff14>
      e8:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
      ec:	43435200 	movtmi	r5, #12800	; 0x3200
      f0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
      f4:	72655032 	rsbvc	r5, r5, #50	; 0x32
      f8:	43687069 	cmnmi	r8, #105	; 0x69
      fc:	6b636f6c 	blvs	18dbeb4 <startup-0x1e72414c>
     100:	6f4d504c 	svcvs	0x004d504c
     104:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     108:	50470064 	subpl	r0, r7, r4, rrx
     10c:	544f4f49 	strbpl	r4, [pc], #-3913	; 114 <startup-0x1ffffeec>
     110:	5f657079 	svcpl	0x00657079
     114:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     118:	00666544 	rsbeq	r6, r6, r4, asr #10
     11c:	5f434352 	svcpl	0x00434352
     120:	31425041 	cmpcc	r2, r1, asr #32
     124:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     128:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     12c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     130:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     134:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 30 <startup-0x1fffffd0>
     138:	0065646f 	rsbeq	r6, r5, pc, ror #8
     13c:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
     140:	5152495f 	cmppl	r2, pc, asr r9
     144:	4352006e 	cmpmi	r2, #110	; 0x6e
     148:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     14c:	4b4c4343 	blmi	1310e60 <startup-0x1ecef1a0>
     150:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     154:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     158:	415f4343 	cmpmi	pc, r3, asr #6
     15c:	50324248 	eorspl	r4, r2, r8, asr #4
     160:	70697265 	rsbvc	r7, r9, r5, ror #4
     164:	6f6c4368 	svcvs	0x006c4368
     168:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     16c:	43490064 	movtmi	r0, #36964	; 0x9064
     170:	52005250 	andpl	r5, r0, #80, 4
     174:	545f4343 	ldrbpl	r4, [pc], #-835	; 17c <startup-0x1ffffe84>
     178:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
     17c:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0xffffffb5
     180:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
     184:	00676966 	rsbeq	r6, r7, r6, ror #18
     188:	5f434352 	svcpl	0x00434352
     18c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     190:	6d435332 	stclvs	3, cr5, [r3, #-200]	; 0xffffff38
     194:	43520064 	cmpmi	r2, #100	; 0x64
     198:	43485f43 	movtmi	r5, #36675	; 0x8f43
     19c:	43004b4c 	movwmi	r4, #2892	; 0xb4c
     1a0:	5f324e41 	svcpl	0x00324e41
     1a4:	5f305852 	svcpl	0x00305852
     1a8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     1ac:	41535500 	cmpmi	r3, r0, lsl #10
     1b0:	5f365452 	svcpl	0x00365452
     1b4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     1b8:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
     1bc:	616c5f65 	cmnvs	ip, r5, ror #30
     1c0:	5f006d72 	svcpl	0x00006d72
     1c4:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     1c8:	745f3874 	ldrbvc	r3, [pc], #-2164	; 1d0 <startup-0x1ffffe30>
     1cc:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     1d0:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     1d4:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     1d8:	5f384d49 	svcpl	0x00384d49
     1dc:	5f4b5242 	svcpl	0x004b5242
     1e0:	314d4954 	cmpcc	sp, r4, asr r9
     1e4:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     1e8:	41006e51 	tstmi	r0, r1, asr lr
     1ec:	4c324248 	lfmmi	f4, 4, [r2], #-288	; 0xfffffee0
     1f0:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     1f4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     1f8:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     1fc:	445f6450 	ldrbmi	r6, [pc], #-1104	; 204 <startup-0x1ffffdfc>
     200:	004e574f 	subeq	r5, lr, pc, asr #14
     204:	43524941 	cmpmi	r2, #1064960	; 0x104000
     208:	43520052 	cmpmi	r2, #82	; 0x52
     20c:	41535f43 	cmpmi	r3, r3, asr #30
     210:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
     214:	43494153 	movtmi	r4, #37203	; 0x9153
     218:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
     21c:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     220:	00676966 	rsbeq	r6, r7, r6, ror #18
     224:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     228:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
     22c:	6f505f4f 	svcvs	0x00505f4f
     230:	00737472 	rsbseq	r7, r3, r2, ror r4
     234:	49555043 	ldmdbmi	r5, {r0, r1, r6, ip, lr}^
     238:	79530044 	ldmdbvc	r3, {r2, r6}^
     23c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     240:	61485f6b 	cmpvs	r8, fp, ror #30
     244:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     248:	43520072 	cmpmi	r2, #114	; 0x72
     24c:	544c5f43 	strbpl	r5, [ip], #-3907	; 0xfffff0bd
     250:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
     254:	7669444b 	strbtvc	r4, [r9], -fp, asr #8
     258:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     25c:	44006769 	strmi	r6, [r0], #-1897	; 0xfffff897
     260:	5f32414d 	svcpl	0x0032414d
     264:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     268:	5f356d61 	svcpl	0x00356d61
     26c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     270:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     274:	6f4d5f4f 	svcvs	0x004d5f4f
     278:	415f6564 	cmpmi	pc, r4, ror #10
     27c:	43520046 	cmpmi	r2, #70	; 0x46
     280:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     284:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
     288:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     28c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     290:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     294:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     298:	52545f31 	subspl	r5, r4, #49, 30	; 0xc4
     29c:	4f435f47 	svcmi	0x00435f47
     2a0:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     2a4:	5f31314d 	svcpl	0x0031314d
     2a8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     2ac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     2b0:	6f4d5f4f 	svcvs	0x004d5f4f
     2b4:	415f6564 	cmpmi	pc, r4, ror #10
     2b8:	4352004e 	cmpmi	r2, #78	; 0x4e
     2bc:	43505f43 	cmpmi	r0, #268	; 0x10c
     2c0:	43324b4c 	teqmi	r2, #76, 22	; 0x13000
     2c4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     2c8:	6f630067 	svcvs	0x00630067
     2cc:	6f72746e 	svcvs	0x0072746e
     2d0:	7469626c 	strbtvc	r6, [r9], #-620	; 0xfffffd94
     2d4:	43520073 	cmpmi	r2, #115	; 0x73
     2d8:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xfffff0bd
     2dc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     2e0:	43435200 	movtmi	r5, #12800	; 0x3200
     2e4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     2e8:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     2ec:	4c43426b 	sfmmi	f4, 2, [r3], {107}	; 0x6b
     2f0:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     2f4:	00676966 	rsbeq	r6, r7, r6, ror #18
     2f8:	32425041 	subcc	r5, r2, #65	; 0x41
     2fc:	00524e45 	subseq	r4, r2, r5, asr #28
     300:	5f434352 	svcpl	0x00434352
     304:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     308:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     30c:	756f534b 	strbvc	r5, [pc, #-843]!	; ffffffc9 <GPIO_Pins+0xdfffd6fd>
     310:	00656372 	rsbeq	r6, r5, r2, ror r3
     314:	31424841 	cmpcc	r2, r1, asr #16
     318:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     31c:	43520052 	cmpmi	r2, #82	; 0x52
     320:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     324:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     328:	51766944 	cmnpl	r6, r4, asr #18
     32c:	73795300 	cmnvc	r9, #0, 6
     330:	6b636954 	blvs	18da888 <startup-0x1e725778>
     334:	5152495f 	cmppl	r2, pc, asr r9
     338:	4352006e 	cmpmi	r2, #110	; 0x6e
     33c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     340:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
     344:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     348:	41535500 	cmpmi	r3, r0, lsl #10
     34c:	5f335452 	svcpl	0x00335452
     350:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     354:	4b434400 	blmi	10d135c <startup-0x1ef2eca4>
     358:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     35c:	53434900 	movtpl	r4, #14592	; 0x3900
     360:	43520052 	cmpmi	r2, #82	; 0x52
     364:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     368:	6944324f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r9, ip, sp}^
     36c:	50470076 	subpl	r0, r7, r6, ror r0
     370:	4f5f4f49 	svcmi	0x005f4f49
     374:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     378:	00444f5f 	subeq	r4, r4, pc, asr pc
     37c:	4f495047 	svcmi	0x00495047
     380:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     384:	70795474 	rsbsvc	r5, r9, r4, ror r4
     388:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     38c:	43435200 	movtmi	r5, #12800	; 0x3200
     390:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     394:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     398:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     39c:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
     3a0:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     3a4:	61657274 	smcvs	22308	; 0x5724
     3a8:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     3ac:	006e5152 	rsbeq	r5, lr, r2, asr r1
     3b0:	5f434352 	svcpl	0x00434352
     3b4:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     3b8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     3bc:	43520065 	cmpmi	r2, #101	; 0x65
     3c0:	50415f43 	subpl	r5, r1, r3, asr #30
     3c4:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     3c8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     3cc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     3d0:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     3d4:	53455200 	movtpl	r5, #20992	; 0x5200
     3d8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     3dc:	52003044 	andpl	r3, r0, #68	; 0x44
     3e0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     3e4:	31444556 	cmpcc	r4, r6, asr r5
     3e8:	736e7500 	cmnvc	lr, #0, 10
     3ec:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     3f0:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     3f4:	44007261 	strmi	r7, [r0], #-609	; 0xfffffd9f
     3f8:	5f32414d 	svcpl	0x0032414d
     3fc:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     400:	5f346d61 	svcpl	0x00346d61
     404:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     408:	53455200 	movtpl	r5, #20992	; 0x5200
     40c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     410:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     414:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     418:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
     41c:	53455200 	movtpl	r5, #20992	; 0x5200
     420:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     424:	49003644 	stmdbmi	r0, {r2, r6, r9, sl, ip, sp}
     428:	00524241 	subseq	r4, r2, r1, asr #4
     42c:	4f495047 	svcmi	0x00495047
     430:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     434:	505f6570 	subspl	r6, pc, r0, ror r5	; <UNPREDICTABLE>
     438:	32490050 	subcc	r0, r9, #80	; 0x50
     43c:	455f3143 	ldrbmi	r3, [pc, #-323]	; 301 <startup-0x1ffffcff>
     440:	52495f52 	subpl	r5, r9, #328	; 0x148
     444:	43006e51 	movwmi	r6, #3665	; 0xe51
     448:	5f324e41 	svcpl	0x00324e41
     44c:	5f454353 	svcpl	0x00454353
     450:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     454:	43435200 	movtmi	r5, #12800	; 0x3200
     458:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
     45c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     460:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     464:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     468:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
     46c:	53455200 	movtpl	r5, #20992	; 0x5200
     470:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     474:	54003344 	strpl	r3, [r0], #-836	; 0xfffffcbc
     478:	5f354d49 	svcpl	0x00354d49
     47c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     480:	61735500 	cmnvs	r3, r0, lsl #10
     484:	61466567 	cmpvs	r6, r7, ror #10
     488:	5f746c75 	svcpl	0x00746c75
     48c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     490:	42435300 	submi	r5, r3, #0, 6
     494:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     498:	50470065 	subpl	r0, r7, r5, rrx
     49c:	75504f49 	ldrbvc	r4, [r0, #-3913]	; 0xfffff0b7
     4a0:	545f6450 	ldrbpl	r6, [pc], #-1104	; 4a8 <startup-0x1ffffb58>
     4a4:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     4a8:	44006665 	strmi	r6, [r0], #-1637	; 0xfffff99b
     4ac:	00525346 	subseq	r5, r2, r6, asr #6
     4b0:	31424841 	cmpcc	r2, r1, asr #16
     4b4:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     4b8:	43435200 	movtmi	r5, #12800	; 0x3200
     4bc:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     4c0:	72655032 	rsbvc	r5, r5, #50	; 0x32
     4c4:	52687069 	rsbpl	r7, r8, #105	; 0x69
     4c8:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     4cc:	00646d43 	rsbeq	r6, r4, r3, asr #26
     4d0:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
     4d4:	6f436e72 	svcvs	0x00436e72
     4d8:	52006564 	andpl	r6, r0, #100, 10	; 0x19000000
     4dc:	415f4343 	cmpmi	pc, r3, asr #6
     4e0:	50334248 	eorspl	r4, r3, r8, asr #4
     4e4:	70697265 	rsbvc	r7, r9, r5, ror #4
     4e8:	6f6c4368 	svcvs	0x006c4368
     4ec:	504c6b63 	subpl	r6, ip, r3, ror #22
     4f0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     4f4:	00646d43 	rsbeq	r6, r4, r3, asr #26
     4f8:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     4fc:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
     500:	4100745f 	tstmi	r0, pc, asr r4
     504:	45324248 	ldrmi	r4, [r2, #-584]!	; 0xfffffdb8
     508:	5000524e 	andpl	r5, r0, lr, asr #4
     50c:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
     510:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
     514:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
     518:	47007963 	strmi	r7, [r0, -r3, ror #18]
     51c:	5f4f4950 	svcpl	0x004f4950
     520:	5f776f4c 	svcpl	0x00776f4c
     524:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     528:	41430064 	cmpmi	r3, r4, rrx
     52c:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
     530:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
     534:	006e5152 	rsbeq	r5, lr, r2, asr r1
     538:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
     53c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     540:	6164415c 	cmnvs	r4, ip, asr r1
     544:	4f5c746d 	svcmi	0x005c746d
     548:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     54c:	5c657669 	stclpl	6, cr7, [r5], #-420	; 0xfffffe5c
     550:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     554:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     558:	7469475c 	strbtvc	r4, [r9], #-1884	; 0xfffff8a4
     55c:	5c627548 	cfstr64pl	mvdx7, [r2], #-288	; 0xfffffee0
     560:	32544144 	subscc	r4, r4, #68, 2
     564:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     568:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     56c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     570:	6f6b5c6d 	svcvs	0x006b5c6d
     574:	6f445c64 	svcvs	0x00445c64
     578:	4800726f 	stmdami	r0, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
     57c:	00525346 	subseq	r5, r2, r6, asr #6
     580:	4f495047 	svcmi	0x00495047
     584:	6165725f 	cmnvs	r5, pc, asr r2
     588:	43520064 	cmpmi	r2, #100	; 0x64
     58c:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     590:	4b4c4353 	blmi	13112e4 <startup-0x1eceed1c>
     594:	4c435000 	marmi	acc0, r5, r3
     598:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
     59c:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
     5a0:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     5a4:	4c4c5000 	marmi	acc0, r5, ip
     5a8:	4c50004d 	mrrcmi	0, 4, r0, r0, cr13	; <UNPREDICTABLE>
     5ac:	50004e4c 	andpl	r4, r0, ip, asr #28
     5b0:	00504c4c 	subseq	r4, r0, ip, asr #24
     5b4:	514c4c50 	cmppl	ip, r0, asr ip
     5b8:	43435200 	movtmi	r5, #12800	; 0x3200
     5bc:	49534c5f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
     5c0:	00646d43 	rsbeq	r6, r4, r3, asr #26
     5c4:	736c6c70 	cmnvc	ip, #112, 24	; 0x7000
     5c8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     5cc:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
     5d0:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     5d4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     5d8:	20554e47 	subscs	r4, r5, r7, asr #28
     5dc:	20393943 	eorscs	r3, r9, r3, asr #18
     5e0:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
     5e4:	30322031 	eorscc	r2, r2, r1, lsr r0
     5e8:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
     5ec:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
     5f0:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
     5f4:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     5f8:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
     5fc:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
     600:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
     604:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
     608:	6172622d 	cmnvs	r2, sp, lsr #4
     60c:	2068636e 	rsbcs	r6, r8, lr, ror #6
     610:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     614:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
     618:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
     61c:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
     620:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     624:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     628:	616d2d20 	cmnvs	sp, r0, lsr #26
     62c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     630:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     634:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     638:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
     63c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
     640:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
     644:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
     648:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     64c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     650:	616d2d20 	cmnvs	sp, r0, lsr #26
     654:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     658:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     65c:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     660:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     664:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
     668:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     66c:	00393963 	eorseq	r3, r9, r3, ror #18
     670:	756f6d61 	strbvc	r6, [pc, #-3425]!	; fffff917 <GPIO_Pins+0xdfffd04b>
     674:	664f746e 	strbvs	r7, [pc], -lr, ror #8
     678:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
     67c:	6f446576 	svcvs	0x00446576
     680:	0073726f 	rsbseq	r7, r3, pc, ror #4
     684:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     688:	00726574 	rsbseq	r6, r2, r4, ror r5
     68c:	5f434352 	svcpl	0x00434352
     690:	61656c43 	cmnvs	r5, r3, asr #24
     694:	616c4672 	smcvs	50274	; 0xc462
     698:	43520067 	cmpmi	r2, #103	; 0x67
     69c:	53485f43 	movtpl	r5, #36675	; 0x8f43
     6a0:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
     6a4:	00676966 	rsbeq	r6, r7, r6, ror #18
     6a8:	52434442 	subpl	r4, r3, #1107296256	; 0x42000000
     6ac:	43485300 	movtmi	r5, #33536	; 0x8300
     6b0:	50005253 	andpl	r5, r0, r3, asr r2
     6b4:	495f4456 	ldmdbmi	pc, {r1, r2, r4, r6, sl, lr}^	; <UNPREDICTABLE>
     6b8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     6bc:	5f434352 	svcpl	0x00434352
     6c0:	0045534c 	subeq	r5, r5, ip, asr #6
     6c4:	52495453 	subpl	r5, r9, #1392508928	; 0x53000000
     6c8:	43324900 	teqmi	r2, #0, 18
     6cc:	56455f31 			; <UNDEFINED> instruction: 0x56455f31
     6d0:	5152495f 	cmppl	r2, pc, asr r9
     6d4:	4352006e 	cmpmi	r2, #110	; 0x6e
     6d8:	41535f43 	cmpmi	r3, r3, asr #30
     6dc:	6f6c4249 	svcvs	0x006c4249
     6e0:	43416b63 	movtmi	r6, #7011	; 0x1b63
     6e4:	6f434b4c 	svcvs	0x00434b4c
     6e8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     6ec:	61747300 	cmnvs	r4, r0, lsl #6
     6f0:	70757472 	rsbsvc	r7, r5, r2, ror r4
     6f4:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
     6f8:	00726574 	rsbseq	r6, r2, r4, ror r5
     6fc:	5f434352 	svcpl	0x00434352
     700:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     704:	6f434941 	svcvs	0x00434941
     708:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     70c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     710:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     714:	4700736e 	strmi	r7, [r0, -lr, ror #6]
     718:	5f4f4950 	svcpl	0x004f4950
     71c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     720:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
     724:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     728:	43435f31 	movtmi	r5, #16177	; 0x3f31
     72c:	5152495f 	cmppl	r2, pc, asr r9
     730:	4148006e 	cmpmi	r8, lr, rrx
     734:	525f4853 	subspl	r4, pc, #5439488	; 0x530000
     738:	495f474e 	ldmdbmi	pc, {r1, r2, r3, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     73c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     740:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     744:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     748:	43006e51 	movwmi	r6, #3665	; 0xe51
     74c:	5f314e41 	svcpl	0x00314e41
     750:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     754:	006e5152 	rsbeq	r5, lr, r2, asr r1
     758:	31414d44 	cmpcc	r1, r4, asr #26
     75c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     760:	356d6165 	strbcc	r6, [sp, #-357]!	; 0xfffffe9b
     764:	5152495f 	cmppl	r2, pc, asr r9
     768:	4352006e 	cmpmi	r2, #110	; 0x6e
     76c:	53485f43 	movtpl	r5, #36675	; 0x8f43
     770:	65640045 	strbvs	r0, [r4, #-69]!	; 0xffffffbb
     774:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
     778:	6f6c435f 	svcvs	0x006c435f
     77c:	5f646573 	svcpl	0x00646573
     780:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
     784:	49540073 	ldmdbmi	r4, {r0, r1, r4, r5, r6}^
     788:	545f384d 	ldrbpl	r3, [pc], #-2125	; 790 <startup-0x1ffff870>
     78c:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     790:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 798 <startup-0x1ffff868>
     794:	34314d49 	ldrtcc	r4, [r1], #-3401	; 0xfffff2b7
     798:	5152495f 	cmppl	r2, pc, asr r9
     79c:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     7a0:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     7a4:	61657274 	smcvs	22308	; 0x5724
     7a8:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     7ac:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7b0:	5f47544f 	svcpl	0x0047544f
     7b4:	495f5346 	ldmdbmi	pc, {r1, r2, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     7b8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7bc:	4d6e6f4e 	stclmi	15, cr6, [lr, #-312]!	; 0xfffffec8
     7c0:	616b7361 	cmnvs	fp, r1, ror #6
     7c4:	49656c62 	stmdbmi	r5!, {r1, r5, r6, sl, fp, sp, lr}^
     7c8:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     7cc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7d0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     7d4:	6f6f445f 	svcvs	0x006f445f
     7d8:	57007372 	smlsdxpl	r0, r2, r3, r7
     7dc:	5f474457 	svcpl	0x00474457
     7e0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7e4:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     7e8:	5f53485f 	svcpl	0x0053485f
     7ec:	50554b57 	subspl	r4, r5, r7, asr fp
     7f0:	5152495f 	cmppl	r2, pc, asr r9
     7f4:	4352006e 	cmpmi	r2, #110	; 0x6e
     7f8:	50415f43 	subpl	r5, r1, r3, asr #30
     7fc:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     800:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     804:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     808:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     80c:	43435200 	movtmi	r5, #12800	; 0x3200
     810:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     814:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
     818:	00517669 	subseq	r7, r1, r9, ror #12
     81c:	5f434352 	svcpl	0x00434352
     820:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     824:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
     828:	52005276 	andpl	r5, r0, #1610612743	; 0x60000007
     82c:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     830:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     834:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
     838:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     83c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     840:	654d0065 	strbvs	r0, [sp, #-101]	; 0xffffff9b
     844:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     848:	616e614d 	cmnvs	lr, sp, asr #2
     84c:	656d6567 	strbvs	r6, [sp, #-1383]!	; 0xfffffa99
     850:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     854:	006e5152 	rsbeq	r5, lr, r2, asr r1
     858:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
     85c:	6f436d65 	svcvs	0x00436d65
     860:	6c436572 	cfstr64vs	mvdx6, [r3], {114}	; 0x72
     864:	006b636f 	rsbeq	r6, fp, pc, ror #6
     868:	504d4154 	subpl	r4, sp, r4, asr r1
     86c:	4154535f 	cmpmi	r4, pc, asr r3
     870:	495f504d 	ldmdbmi	pc, {r0, r2, r3, r6, ip, lr}^	; <UNPREDICTABLE>
     874:	006e5152 	rsbeq	r5, lr, r2, asr r1
     878:	314e4143 	cmpcc	lr, r3, asr #2
     87c:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
     880:	5152495f 	cmppl	r2, pc, asr r9
     884:	5249006e 	subpl	r0, r9, #110	; 0x6e
     888:	545f6e51 	ldrbpl	r6, [pc], #-3665	; 890 <startup-0x1ffff770>
     88c:	00657079 	rsbeq	r7, r5, r9, ror r0
     890:	4f495047 	svcmi	0x00495047
     894:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 89c <startup-0x1ffff764>
     898:	4e495f65 	cdpmi	15, 4, cr5, cr9, cr5, {3}
     89c:	414d4400 	cmpmi	sp, r0, lsl #8
     8a0:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     8a4:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     8a8:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     8ac:	52006e51 	andpl	r6, r0, #1296	; 0x510
     8b0:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 7ac <startup-0x1ffff854>
     8b4:	43324f43 	teqmi	r2, #268	; 0x10c
     8b8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     8bc:	434c0067 	movtmi	r0, #49255	; 0xc067
     8c0:	5200524b 	andpl	r5, r0, #-1342177276	; 0xb0000004
     8c4:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     8c8:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
     8cc:	756f534b 	strbvc	r5, [pc, #-843]!	; 589 <startup-0x1ffffa77>
     8d0:	00656372 	rsbeq	r6, r5, r2, ror r3
     8d4:	4f525245 	svcmi	0x00525245
     8d8:	32490052 	subcc	r0, r9, #82	; 0x52
     8dc:	455f3243 	ldrbmi	r3, [pc, #-579]	; 6a1 <startup-0x1ffff95f>
     8e0:	52495f52 	subpl	r5, r9, #328	; 0x148
     8e4:	6d006e51 	stcvs	14, cr6, [r0, #-324]	; 0xfffffebc
     8e8:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     8ec:	5200736b 	andpl	r7, r0, #-1409286143	; 0xac000001
     8f0:	505f4343 	subspl	r4, pc, r3, asr #6
     8f4:	314b4c43 	cmpcc	fp, r3, asr #24
     8f8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     8fc:	4f006769 	svcmi	0x00006769
     900:	45455053 	strbmi	r5, [r5, #-83]	; 0xffffffad
     904:	42005244 	andmi	r5, r0, #68, 4	; 0x40000004
     908:	61467375 	hvcvs	26421	; 0x6735
     90c:	5f746c75 	svcpl	0x00746c75
     910:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     914:	63697400 	cmnvs	r9, #0, 8
     918:	5000736b 	andpl	r7, r0, fp, ror #6
     91c:	46434c4c 	strbmi	r4, [r3], -ip, asr #24
     920:	55005247 	strpl	r5, [r0, #-583]	; 0xfffffdb9
     924:	35545241 	ldrbcc	r5, [r4, #-577]	; 0xfffffdbf
     928:	5152495f 	cmppl	r2, pc, asr r9
     92c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     930:	425f314d 	subsmi	r3, pc, #1073741843	; 0x40000013
     934:	545f4b52 	ldrbpl	r4, [pc], #-2898	; 93c <startup-0x1ffff6c4>
     938:	5f394d49 	svcpl	0x00394d49
     93c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     940:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     944:	544f5f4f 	strbpl	r5, [pc], #-3919	; 94c <startup-0x1ffff6b4>
     948:	00657079 	rsbeq	r7, r5, r9, ror r0
     94c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     950:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
     954:	4100745f 	tstmi	r0, pc, asr r4
     958:	48414250 	stmdami	r1, {r4, r6, r9, lr}^
     95c:	65725042 	ldrbvs	r5, [r2, #-66]!	; 0xffffffbe
     960:	61546373 	cmpvs	r4, r3, ror r3
     964:	00656c62 	rsbeq	r6, r5, r2, ror #24
     968:	4f495047 	svcmi	0x00495047
     96c:	64654d5f 	strbtvs	r4, [r5], #-3423	; 0xfffff2a1
     970:	5f6d7569 	svcpl	0x006d7569
     974:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     978:	43520064 	cmpmi	r2, #100	; 0x64
     97c:	41535f43 	cmpmi	r3, r3, asr #30
     980:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
     984:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     988:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
     98c:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     990:	00676966 	rsbeq	r6, r7, r6, ror #18
     994:	374d4954 	smlsldcc	r4, sp, r4, r9
     998:	5152495f 	cmppl	r2, pc, asr r9
     99c:	6f6c006e 	svcvs	0x006c006e
     9a0:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
     9a4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     9a8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     9ac:	5f485445 	svcpl	0x00485445
     9b0:	50554b57 	subspl	r4, r5, r7, asr fp
     9b4:	5152495f 	cmppl	r2, pc, asr r9
     9b8:	544f006e 	strbpl	r0, [pc], #-110	; 9c0 <startup-0x1ffff640>
     9bc:	53485f47 	movtpl	r5, #36679	; 0x8f47
     9c0:	5152495f 	cmppl	r2, pc, asr r9
     9c4:	5550006e 	ldrbpl	r0, [r0, #-110]	; 0xffffff92
     9c8:	00524450 	subseq	r4, r2, r0, asr r4
     9cc:	47435353 	smlsldmi	r5, r3, r3, r3
     9d0:	50530052 	subspl	r0, r3, r2, asr r0
     9d4:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     9d8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9dc:	41534944 	cmpmi	r3, r4, asr #18
     9e0:	00454c42 	subeq	r4, r5, r2, asr #24
     9e4:	61435653 	cmpvs	r3, r3, asr r6
     9e8:	495f6c6c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     9ec:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9f0:	32425041 	subcc	r5, r2, #65	; 0x41
     9f4:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     9f8:	52534200 	subspl	r4, r3, #0, 4
     9fc:	52004852 	andpl	r4, r0, #5373952	; 0x520000
     a00:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     a04:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
     a08:	74536761 	ldrbvc	r6, [r3], #-1889	; 0xfffff89f
     a0c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     a10:	43435200 	movtmi	r5, #12800	; 0x3200
     a14:	6f6c435f 	svcvs	0x006c435f
     a18:	00736b63 	rsbseq	r6, r3, r3, ror #22
     a1c:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
     a20:	5047004c 	subpl	r0, r7, ip, asr #32
     a24:	485f4f49 	ldmdami	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     a28:	5f686769 	svcpl	0x00686769
     a2c:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     a30:	43520064 	cmpmi	r2, #100	; 0x64
     a34:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
     a38:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     a3c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     a40:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 93c <startup-0x1ffff6c4>
     a44:	43314f43 	teqmi	r1, #268	; 0x10c
     a48:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     a4c:	43520067 	cmpmi	r2, #103	; 0x67
     a50:	53485f43 	movtpl	r5, #36675	; 0x8f43
     a54:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
     a58:	55504600 	ldrbpl	r4, [r0, #-1536]	; 0xfffffa00
     a5c:	5152495f 	cmppl	r2, pc, asr r9
     a60:	4352006e 	cmpmi	r2, #110	; 0x6e
     a64:	64415f43 	strbvs	r5, [r1], #-3907	; 0xfffff0bd
     a68:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
     a6c:	43495348 	movtmi	r5, #37704	; 0x9348
     a70:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
     a74:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     a78:	61566e6f 	cmpvs	r6, pc, ror #28
     a7c:	0065756c 	rsbeq	r7, r5, ip, ror #10
     a80:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     a84:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     a88:	41006e51 	tstmi	r0, r1, asr lr
     a8c:	4c324250 	lfmmi	f4, 4, [r2], #-320	; 0xfffffec0
     a90:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     a94:	43435200 	movtmi	r5, #12800	; 0x3200
     a98:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     a9c:	72655031 	rsbvc	r5, r5, #49	; 0x31
     aa0:	00687069 	rsbeq	r7, r8, r9, rrx
     aa4:	5f434352 	svcpl	0x00434352
     aa8:	43435452 	movtmi	r5, #13394	; 0x3452
     aac:	6f434b4c 	svcvs	0x00434b4c
     ab0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     ab4:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     ab8:	5f53465f 	svcpl	0x0053465f
     abc:	50554b57 	subspl	r4, r5, r7, asr fp
     ac0:	5152495f 	cmppl	r2, pc, asr r9
     ac4:	4352006e 	cmpmi	r2, #110	; 0x6e
     ac8:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
     acc:	52004741 	andpl	r4, r0, #17039360	; 0x1040000
     ad0:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     ad4:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
     ad8:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     adc:	45007375 	strmi	r7, [r0, #-885]	; 0xfffffc8b
     ae0:	34495458 	strbcc	r5, [r9], #-1112	; 0xfffffba8
     ae4:	5152495f 	cmppl	r2, pc, asr r9
     ae8:	5443006e 	strbpl	r0, [r3], #-110	; 0xffffff92
     aec:	54004c52 	strpl	r4, [r0], #-3154	; 0xfffff3ae
     af0:	5f364d49 	svcpl	0x00364d49
     af4:	5f434144 	svcpl	0x00434144
     af8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     afc:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
     b00:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     b04:	50470065 	subpl	r0, r7, r5, rrx
     b08:	535f4f49 	cmppl	pc, #292	; 0x124
     b0c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     b10:	43324900 	teqmi	r2, #0, 18
     b14:	56455f32 			; <UNDEFINED> instruction: 0x56455f32
     b18:	5152495f 	cmppl	r2, pc, asr r9
     b1c:	4352006e 	cmpmi	r2, #110	; 0x6e
     b20:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     b24:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     b28:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
     b2c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     b30:	00746942 	rsbseq	r6, r4, r2, asr #18
     b34:	5f434352 	svcpl	0x00434352
     b38:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     b3c:	6365536b 	cmnvs	r5, #-1409286143	; 0xac000001
     b40:	74697275 	strbtvc	r7, [r9], #-629	; 0xfffffd8b
     b44:	73795379 	cmnvc	r9, #-469762047	; 0xe4000001
     b48:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     b4c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     b50:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     b54:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     b58:	416b636f 	cmnmi	fp, pc, ror #6
     b5c:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     b60:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     b64:	79730065 	ldmdbvc	r3!, {r0, r2, r5, r6}^
     b68:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
     b6c:	6e495f6b 	cdpvs	15, 4, cr5, cr9, cr11, {3}
     b70:	73007469 	movwvc	r7, #1129	; 0x469
     b74:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     b78:	67657273 			; <UNDEFINED> instruction: 0x67657273
     b7c:	43435200 	movtmi	r5, #12800	; 0x3200
     b80:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     b84:	72655032 	rsbvc	r5, r5, #50	; 0x32
     b88:	00687069 	rsbeq	r7, r8, r9, rrx
     b8c:	5f434352 	svcpl	0x00434352
     b90:	4b4c4348 	blmi	13118b8 <startup-0x1ecee748>
     b94:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     b98:	42006769 	andmi	r6, r0, #27525120	; 0x1a40000
     b9c:	00524146 	subseq	r4, r2, r6, asr #2
     ba0:	31425041 	cmpcc	r2, r1, asr #32
     ba4:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     ba8:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
     bac:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     bb0:	61657274 	smcvs	22308	; 0x5724
     bb4:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     bb8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     bbc:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
     bc0:	645f6576 	ldrbvs	r6, [pc], #-1398	; bc8 <startup-0x1ffff438>
     bc4:	73726f6f 	cmnvc	r2, #444	; 0x1bc
     bc8:	414d4400 	cmpmi	sp, r0, lsl #8
     bcc:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     bd0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     bd4:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     bd8:	43006e51 	movwmi	r6, #3665	; 0xe51
     bdc:	5441474b 	strbpl	r4, [r1], #-1867	; 0xfffff8b5
     be0:	00524e45 	subseq	r4, r2, r5, asr #28
     be4:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     be8:	5f58545f 	svcpl	0x0058545f
     bec:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     bf0:	4c4c5000 	marmi	acc0, r5, ip
     bf4:	4e494153 	mcrmi	1, 2, r4, cr9, cr3, {2}
     bf8:	4c4c5000 	marmi	acc0, r5, ip
     bfc:	51494153 	cmppl	r9, r3, asr r1
     c00:	4c4c5000 	marmi	acc0, r5, ip
     c04:	52494153 	subpl	r4, r9, #-1073741804	; 0xc0000014
     c08:	43435200 	movtmi	r5, #12800	; 0x3200
     c0c:	4f434d5f 	svcmi	0x00434d5f
     c10:	756f5331 	strbvc	r5, [pc, #-817]!	; 8e7 <startup-0x1ffff719>
     c14:	00656372 	rsbeq	r6, r5, r2, ror r3
     c18:	5f434352 	svcpl	0x00434352
     c1c:	33424841 	movtcc	r4, #10305	; 0x2841
     c20:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     c24:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     c28:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     c2c:	5300646d 	movwpl	r6, #1133	; 0x46d
     c30:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     c34:	545f6b63 	ldrbpl	r6, [pc], #-2915	; c3c <startup-0x1ffff3c4>
     c38:	00657079 	rsbeq	r7, r5, r9, ror r0
     c3c:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
     c40:	754e7974 	strbvc	r7, [lr, #-2420]	; 0xfffff68c
     c44:	6974006d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6}^
     c48:	635f656d 	cmpvs	pc, #457179136	; 0x1b400000
     c4c:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
     c50:	6c5f6c61 	mrrcvs	12, 6, r6, pc, cr1	; <UNPREDICTABLE>
     c54:	006d7261 	rsbeq	r7, sp, r1, ror #4
     c58:	5f434352 	svcpl	0x00434352
     c5c:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     c60:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     c64:	425f4343 	subsmi	r4, pc, #201326593	; 0xc000001
     c68:	756b6361 	strbvc	r6, [fp, #-865]!	; 0xfffffc9f
     c6c:	73655270 	cmnvc	r5, #112, 4
     c70:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     c74:	48410064 	stmdami	r1, {r2, r5, r6}^
     c78:	53523342 	cmppl	r2, #134217729	; 0x8000001
     c7c:	64005254 	strvs	r5, [r0], #-596	; 0xfffffdac
     c80:	00726f6f 	rsbseq	r6, r2, pc, ror #30
     c84:	6f727245 	svcvs	0x00727245
     c88:	61745372 	cmnvs	r4, r2, ror r3
     c8c:	00737574 	rsbseq	r7, r3, r4, ror r5
     c90:	31414d44 	cmpcc	r1, r4, asr #26
     c94:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     c98:	306d6165 	rsbcc	r6, sp, r5, ror #2
     c9c:	5152495f 	cmppl	r2, pc, asr r9
     ca0:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0xffffff92
     ca4:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     ca8:	43520070 	cmpmi	r2, #112	; 0x70
     cac:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     cb0:	6f53324f 	svcvs	0x0053324f
     cb4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     cb8:	42504100 	subsmi	r4, r0, #0, 2
     cbc:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
     cc0:	54520052 	ldrbpl	r0, [r2], #-82	; 0xffffffae
     cc4:	6c415f43 	mcrrvs	15, 4, r5, r1, cr3
     cc8:	5f6d7261 	svcpl	0x006d7261
     ccc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     cd0:	42504100 	subsmi	r4, r0, #0, 2
     cd4:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
     cd8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     cdc:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     ce0:	46006570 			; <UNDEFINED> instruction: 0x46006570
     ce4:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     ce8:	616e6f69 	cmnvs	lr, r9, ror #30
     cec:	6174536c 	cmnvs	r4, ip, ror #6
     cf0:	49006574 	stmdbmi	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     cf4:	5f334332 	svcpl	0x00334332
     cf8:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     cfc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d00:	50595243 	subspl	r5, r9, r3, asr #4
     d04:	5152495f 	cmppl	r2, pc, asr r9
     d08:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     d0c:	35314954 	ldrcc	r4, [r1, #-2388]!	; 0xfffff6ac
     d10:	5f30315f 	svcpl	0x0030315f
     d14:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d18:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     d1c:	6f6c2067 	svcvs	0x006c2067
     d20:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
     d24:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     d28:	2064656e 	rsbcs	r6, r4, lr, ror #10
     d2c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     d30:	5f434352 	svcpl	0x00434352
     d34:	314f434d 	cmpcc	pc, sp, asr #6
     d38:	00766944 	rsbseq	r6, r6, r4, asr #18
     d3c:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
     d40:	54006874 	strpl	r6, [r0], #-2164	; 0xfffff78c
     d44:	5f334d49 	svcpl	0x00334d49
     d48:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d4c:	41535500 	cmpmi	r3, r0, lsl #10
     d50:	5f315452 	svcpl	0x00315452
     d54:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d58:	43435200 	movtmi	r5, #12800	; 0x3200
     d5c:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     d60:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
     d64:	53455348 	movtpl	r5, #21320	; 0x5348
     d68:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     d6c:	53007055 	movwpl	r7, #85	; 0x55
     d70:	45434355 	strbmi	r4, [r3, #-853]	; 0xfffffcab
     d74:	47005353 	smlsdmi	r0, r3, r3, r5
     d78:	5f4f4950 	svcpl	0x004f4950
     d7c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     d80:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     d84:	58525f32 	ldmdapl	r2, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     d88:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     d8c:	41006e51 	tstmi	r0, r1, asr lr
     d90:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     d94:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d98:	5f434352 	svcpl	0x00434352
     d9c:	4d45534c 	stclmi	3, cr5, [r5, #-304]	; 0xfffffed0
     da0:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
     da4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     da8:	43490067 	movtmi	r0, #36967	; 0x9067
     dac:	41005245 	tstmi	r0, r5, asr #4
     db0:	4c334248 	lfmmi	f4, 4, [r3], #-288	; 0xfffffee0
     db4:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     db8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     dbc:	646f4d4f 	strbtvs	r4, [pc], #-3407	; dc4 <startup-0x1ffff23c>
     dc0:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     dc4:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     dc8:	79530066 	ldmdbvc	r3, {r1, r2, r5, r6}^
     dcc:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     dd0:	6f435f6b 	svcvs	0x00435f6b
     dd4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     dd8:	2f3a4300 	svccs	0x003a4300
     ddc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     de0:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
     de4:	2f746d61 	svccs	0x00746d61
     de8:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     dec:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     df0:	6b6f442f 	blvs	1bd1eb4 <startup-0x1e42e14c>
     df4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     df8:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     dfc:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     e00:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
     e04:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     e08:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     e0c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     e10:	6b2f6d65 	blvs	bdc3ac <startup-0x1f423c54>
     e14:	442f646f 	strtmi	r6, [pc], #-1135	; e1c <startup-0x1ffff1e4>
     e18:	2f726f6f 	svccs	0x00726f6f
     e1c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     e20:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
     e24:	46410063 	strbmi	r0, [r1], -r3, rrx
     e28:	4f005253 	svcmi	0x00005253
     e2c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
     e30:	41430052 	qdaddmi	r0, r2, r3
     e34:	0042494c 	subeq	r4, r2, ip, asr #18
     e38:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
     e3c:	46006765 	strmi	r6, [r0], -r5, ror #14
     e40:	5f434d53 	svcpl	0x00434d53
     e44:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     e48:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     e4c:	495f3049 	ldmdbmi	pc, {r0, r3, r6, ip, sp}^	; <UNPREDICTABLE>
     e50:	006e5152 	rsbeq	r5, lr, r2, asr r1
     e54:	434b4344 	movtmi	r4, #45892	; 0xb344
     e58:	32524746 	subscc	r4, r2, #18350080	; 0x1180000
     e5c:	53464300 	movtpl	r4, #25344	; 0x6300
     e60:	43520052 	cmpmi	r2, #82	; 0x52
     e64:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     e68:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     e6c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     e70:	65736800 	ldrbvs	r6, [r3, #-2048]!	; 0xfffff800
     e74:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     e78:	44007375 	strmi	r7, [r0], #-885	; 0xfffffc8b
     e7c:	5f31414d 	svcpl	0x0031414d
     e80:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     e84:	5f346d61 	svcpl	0x00346d61
     e88:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     e8c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     e90:	616c5f4f 	cmnvs	ip, pc, asr #30
     e94:	4400706d 	strmi	r7, [r0], #-109	; 0xffffff93
     e98:	5f32414d 	svcpl	0x0032414d
     e9c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     ea0:	5f366d61 	svcpl	0x00366d61
     ea4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ea8:	42484100 	submi	r4, r8, #0, 2
     eac:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
     eb0:	414f4c00 	cmpmi	pc, r0, lsl #24
     eb4:	50470044 	subpl	r0, r7, r4, asr #32
     eb8:	70534f49 	subsvc	r4, r3, r9, asr #30
     ebc:	5f646565 	svcpl	0x00646565
     ec0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     ec4:	00666544 	rsbeq	r6, r6, r4, asr #10
     ec8:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
     ecc:	6e6f4d67 	cdpvs	13, 6, cr4, cr15, cr7, {3}
     ed0:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
     ed4:	5152495f 	cmppl	r2, pc, asr r9
     ed8:	5047006e 	subpl	r0, r7, lr, rrx
     edc:	505f4f49 	subspl	r4, pc, r9, asr #30
     ee0:	52006e69 	andpl	r6, r0, #1680	; 0x690
     ee4:	415f4343 	cmpmi	pc, r3, asr #6
     ee8:	50314248 	eorspl	r4, r1, r8, asr #4
     eec:	70697265 	rsbvc	r7, r9, r5, ror #4
     ef0:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     ef4:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     ef8:	32490064 	subcc	r0, r9, #100	; 0x64
     efc:	455f3343 	ldrbmi	r3, [pc, #-835]	; bc1 <startup-0x1ffff43f>
     f00:	52495f56 	subpl	r5, r9, #344	; 0x158
     f04:	47006e51 	smlsdmi	r0, r1, lr, r6
     f08:	5f4f4950 	svcpl	0x004f4950
     f0c:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     f10:	42484100 	submi	r4, r8, #0, 2
     f14:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
     f18:	54450052 	strbpl	r0, [r5], #-82	; 0xffffffae
     f1c:	52495f48 	subpl	r5, r9, #72, 30	; 0x120
     f20:	52006e51 	andpl	r6, r0, #1296	; 0x510
     f24:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     f28:	6b636f6c 	blvs	18dcce0 <startup-0x1e723320>
     f2c:	70795473 	rsbsvc	r5, r9, r3, ror r4
     f30:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     f34:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
     f38:	43520052 	cmpmi	r2, #82	; 0x52
     f3c:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     f40:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     f44:	4d4d0066 	stclmi	0, cr0, [sp, #-408]	; 0xfffffe68
     f48:	00524146 	subseq	r4, r2, r6, asr #2
     f4c:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     f50:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     f54:	61700074 	cmnvs	r0, r4, ror r0
     f58:	6f777373 	svcvs	0x00777373
     f5c:	52006472 	andpl	r6, r0, #1912602624	; 0x72000000
     f60:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     f64:	006e5152 	rsbeq	r5, lr, r2, asr r1
     f68:	5f434352 	svcpl	0x00434352
     f6c:	49005449 	stmdbmi	r0, {r0, r3, r6, sl, ip, lr}
     f70:	00524153 	subseq	r4, r2, r3, asr r1
     f74:	31414d44 	cmpcc	r1, r4, asr #26
     f78:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     f7c:	336d6165 	cmncc	sp, #1073741849	; 0x40000019
     f80:	5152495f 	cmppl	r2, pc, asr r9
     f84:	5355006e 	cmppl	r5, #110	; 0x6e
     f88:	32545241 	subscc	r5, r4, #268435460	; 0x10000004
     f8c:	5152495f 	cmppl	r2, pc, asr r9
     f90:	6962006e 	stmdbvs	r2!, {r1, r2, r3, r5, r6}^
     f94:	61747374 	cmnvs	r4, r4, ror r3
     f98:	00737574 	rsbseq	r7, r3, r4, ror r5
     f9c:	42414e45 	submi	r4, r1, #1104	; 0x450
     fa0:	7000454c 	andvc	r4, r0, ip, asr #10
     fa4:	63766c6c 	cmnvs	r6, #108, 24	; 0x6c00
     fa8:	4352006f 	cmpmi	r2, #111	; 0x6f
     fac:	50415f43 	subpl	r5, r1, r3, asr #30
     fb0:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     fb4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     fb8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     fbc:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
     fc0:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
     fc4:	4700646d 	strmi	r6, [r0, -sp, ror #8]
     fc8:	5f4f4950 	svcpl	0x004f4950
     fcc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     fd0:	00666544 	rsbeq	r6, r6, r4, asr #10
     fd4:	314d4954 	cmpcc	sp, r4, asr r9
     fd8:	5f50555f 	svcpl	0x0050555f
     fdc:	314d4954 	cmpcc	sp, r4, asr r9
     fe0:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     fe4:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     fe8:	525f4d54 	subspl	r4, pc, #84, 26	; 0x1500
     fec:	66754278 			; <UNDEFINED> instruction: 0x66754278
     ff0:	00726566 	rsbseq	r6, r2, r6, ror #10
     ff4:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     ff8:	004e5332 	subeq	r5, lr, r2, lsr r3
     ffc:	5f434352 	svcpl	0x00434352
    1000:	31424841 	cmpcc	r2, r1, asr #16
    1004:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1008:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    100c:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    1010:	646f4d50 	strbtvs	r4, [pc], #-3408	; 1018 <startup-0x1fffefe8>
    1014:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
    1018:	4c4c5000 	marmi	acc0, r5, ip
    101c:	52533249 	subspl	r3, r3, #-1879048188	; 0x90000004
    1020:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
    1024:	544f006e 	strbpl	r0, [pc], #-110	; 102c <startup-0x1fffefd4>
    1028:	53485f47 	movtpl	r5, #36679	; 0x8f47
    102c:	3150455f 	cmpcc	r0, pc, asr r5
    1030:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
    1034:	5152495f 	cmppl	r2, pc, asr r9
    1038:	616c006e 	cmnvs	ip, lr, rrx
    103c:	69546d72 	ldmdbvs	r4, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1040:	52006b63 	andpl	r6, r0, #101376	; 0x18c00
    1044:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    1048:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    104c:	646d434b 	strbtvs	r4, [sp], #-843	; 0xfffffcb5
    1050:	444f4d00 	strbmi	r4, [pc], #-3328	; 1058 <startup-0x1fffefa8>
    1054:	4e005245 	cdpmi	2, 0, cr5, cr0, cr5, {2}
    1058:	5f434956 	svcpl	0x00434956
    105c:	50746553 	rsbspl	r6, r4, r3, asr r5
    1060:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1064:	00797469 	rsbseq	r7, r9, r9, ror #8
    1068:	314e4143 	cmpcc	lr, r3, asr #2
    106c:	3158525f 	cmpcc	r8, pc, asr r2
    1070:	5152495f 	cmppl	r2, pc, asr r9
    1074:	4352006e 	cmpmi	r2, #110	; 0x6e
    1078:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    107c:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    1080:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1084:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1088:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
    108c:	555f6450 	ldrbpl	r6, [pc, #-1104]	; c44 <startup-0x1ffff3bc>
    1090:	58450050 	stmdapl	r5, {r4, r6}^
    1094:	5f394954 	svcpl	0x00394954
    1098:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    109c:	50006e51 	andpl	r6, r0, r1, asr lr
    10a0:	41534c4c 	cmpmi	r3, ip, asr #24
    10a4:	47464349 	strbmi	r4, [r6, -r9, asr #6]
    10a8:	43520052 	cmpmi	r2, #82	; 0x52
    10ac:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    10b0:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    10b4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    10b8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    10bc:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    10c0:	6f687300 	svcvs	0x00687300
    10c4:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
    10c8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
    10cc:	2064656e 	rsbcs	r6, r4, lr, ror #10
    10d0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    10d4:	5f434352 	svcpl	0x00434352
    10d8:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    10dc:	6f435332 	svcvs	0x00435332
    10e0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    10e4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    10e8:	43435f38 	movtmi	r5, #16184	; 0x3f38
    10ec:	5152495f 	cmppl	r2, pc, asr r9
    10f0:	4453006e 	ldrbmi	r0, [r3], #-110	; 0xffffff92
    10f4:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    10f8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    10fc:	43415043 	movtmi	r5, #4163	; 0x1043
    1100:	53490052 	movtpl	r0, #36946	; 0x9052
    1104:	53005250 	movwpl	r5, #592	; 0x250
    1108:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    110c:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    1110:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    1114:	0079636e 	rsbseq	r6, r9, lr, ror #6
    1118:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    111c:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    1120:	50006e51 	andpl	r6, r0, r1, asr lr
    1124:	53646e65 	cmnpl	r4, #1616	; 0x650
    1128:	52495f56 	subpl	r5, r9, #344	; 0x158
    112c:	4f006e51 	svcmi	0x00006e51
    1130:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    1134:	50455f53 	subpl	r5, r5, r3, asr pc
    1138:	4e495f31 	mcrmi	15, 2, r5, cr9, cr1, {1}
    113c:	5152495f 	cmppl	r2, pc, asr r9
    1140:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    1144:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    1148:	61657274 	smcvs	22308	; 0x5724
    114c:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    1150:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1154:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    1158:	5f323374 	svcpl	0x00323374
    115c:	43520074 	cmpmi	r2, #116	; 0x74
    1160:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1164:	4b4c434d 	blmi	1311ea0 <startup-0x1ecee160>
    1168:	73657250 	cmnvc	r5, #80, 4
    116c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    1170:	53490072 	movtpl	r0, #36978	; 0x9072
    1174:	70005245 	andvc	r5, r0, r5, asr #4
    1178:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    117c:	43435200 	movtmi	r5, #12800	; 0x3200
    1180:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1184:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1188:	52687069 	rsbpl	r7, r8, #105	; 0x69
    118c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1190:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1194:	5f434352 	svcpl	0x00434352
    1198:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    119c:	6d434941 	vstrvs.16	s9, [r3, #-130]	; 0xffffff7e	; <UNPREDICTABLE>
    11a0:	48410064 	stmdami	r1, {r2, r5, r6}^
    11a4:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
    11a8:	43520052 	cmpmi	r2, #82	; 0x52
    11ac:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    11b0:	4b4c4353 	blmi	1311f04 <startup-0x1ecee0fc>
    11b4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    11b8:	44006769 	strmi	r6, [r0], #-1897	; 0xfffff897
    11bc:	5f32414d 	svcpl	0x0032414d
    11c0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    11c4:	5f326d61 	svcpl	0x00326d61
    11c8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    11cc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    11d0:	61465f4f 	cmpvs	r6, pc, asr #30
    11d4:	535f7473 	cmppl	pc, #1929379840	; 0x73000000
    11d8:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
    11dc:	43435200 	movtmi	r5, #12800	; 0x3200
    11e0:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    11e4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    11e8:	70006769 	andvc	r6, r0, r9, ror #14
    11ec:	006d6c6c 	rsbeq	r6, sp, ip, ror #24
    11f0:	706e6970 	rsbvc	r6, lr, r0, ror r9
    11f4:	4200736f 	andmi	r7, r0, #-1140850687	; 0xbc000001
    11f8:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
    11fc:	47005445 	strmi	r5, [r0, -r5, asr #8]
    1200:	5f4f4950 	svcpl	0x004f4950
    1204:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1208:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    120c:	61447475 	hvcvs	18245	; 0x4745
    1210:	47006174 	smlsdxmi	r0, r4, r1, r6
    1214:	5f4f4950 	svcpl	0x004f4950
    1218:	74004641 	strvc	r4, [r0], #-1601	; 0xfffff9bf
    121c:	00706d65 	rsbseq	r6, r0, r5, ror #26
    1220:	4f495047 	svcmi	0x00495047
    1224:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1228:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    122c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1230:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    1234:	42006c61 	andmi	r6, r0, #24832	; 0x6100
    1238:	525f7469 	subspl	r7, pc, #1761607680	; 0x69000000
    123c:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
    1240:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1244:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    1248:	42657469 	rsbmi	r7, r5, #1761607680	; 0x69000000
    124c:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1250:	5f4f4950 	svcpl	0x004f4950
    1254:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
    1258:	00737469 	rsbseq	r7, r3, r9, ror #8
    125c:	4f495047 	svcmi	0x00495047
    1260:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1264:	50470074 	subpl	r0, r7, r4, ror r0
    1268:	525f4f49 	subspl	r4, pc, #292	; 0x124
    126c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1270:	73746942 	cmnvc	r4, #1081344	; 0x108000
    1274:	2f3a4300 	svccs	0x003a4300
    1278:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    127c:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    1280:	2f746d61 	svccs	0x00746d61
    1284:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    1288:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    128c:	6b6f442f 	blvs	1bd2350 <startup-0x1e42dcb0>
    1290:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1294:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    1298:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    129c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    12a0:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    12a4:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    12a8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    12ac:	6b2f6d65 	blvs	bdc848 <startup-0x1f4237b8>
    12b0:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 10fc <startup-0x1fffef04>
    12b4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    12b8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    12bc:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    12c0:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    12c4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    12c8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    12cc:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    12d0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    12d4:	445f6870 	ldrbmi	r6, [pc], #-2160	; 12dc <startup-0x1fffed24>
    12d8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    12dc:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    12e0:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    12e4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    12e8:	5f787834 	svcpl	0x00787834
    12ec:	6f697067 	svcvs	0x00697067
    12f0:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
    12f4:	5f4f4950 	svcpl	0x004f4950
    12f8:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    12fc:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1300:	5f4f4950 	svcpl	0x004f4950
    1304:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1308:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    130c:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1310:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
    1314:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1318:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    131c:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1320:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1324:	726f5000 	rsbvc	r5, pc, #0
    1328:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    132c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1330:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1334:	756f536e 	strbvc	r5, [pc, #-878]!	; fce <startup-0x1ffff032>
    1338:	00656372 	rsbeq	r6, r5, r2, ror r3
    133c:	4f495047 	svcmi	0x00495047
    1340:	6165525f 	cmnvs	r5, pc, asr r2
    1344:	706e4964 	rsbvc	r4, lr, r4, ror #18
    1348:	61447475 	hvcvs	18245	; 0x4745
    134c:	47006174 	smlsdxmi	r0, r4, r1, r6
    1350:	5f4f4950 	svcpl	0x004f4950
    1354:	4c6e6950 			; <UNDEFINED> instruction: 0x4c6e6950
    1358:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    135c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1360:	69420067 	stmdbvs	r2, {r0, r1, r2, r5, r6}^
    1364:	74634174 	strbtvc	r4, [r3], #-372	; 0xfffffe8c
    1368:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    136c:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    1370:	70746e65 	rsbsvc	r6, r4, r5, ror #28
    1374:	47006e69 	strmi	r6, [r0, -r9, ror #28]
    1378:	5f4f4950 	svcpl	0x004f4950
    137c:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    1380:	50470065 	subpl	r0, r7, r5, rrx
    1384:	00784f49 	rsbseq	r4, r8, r9, asr #30
    1388:	4f495047 	svcmi	0x00495047
    138c:	676f545f 			; <UNDEFINED> instruction: 0x676f545f
    1390:	42656c67 	rsbmi	r6, r5, #26368	; 0x6700
    1394:	00737469 	rsbseq	r7, r3, r9, ror #8
    1398:	706d6574 	rsbvc	r6, sp, r4, ror r5
    139c:	4700325f 	smlsdmi	r0, pc, r2, r3	; <UNPREDICTABLE>
    13a0:	5f4f4950 	svcpl	0x004f4950
    13a4:	416e6950 	cmnmi	lr, r0, asr r9
    13a8:	6e6f4346 	cdpvs	3, 6, cr4, cr15, cr6, {2}
    13ac:	00676966 	rsbeq	r6, r7, r6, ror #18
    13b0:	4f495047 	svcmi	0x00495047
    13b4:	6165525f 	cmnvs	r5, pc, asr r2
    13b8:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xfffff09c
    13bc:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    13c0:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    13c4:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    13c8:	5f434956 	svcpl	0x00434956
    13cc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    13d0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    13d4:	00666544 	rsbeq	r6, r6, r4, asr #10
    13d8:	4349564e 	movtmi	r5, #38478	; 0x964e
    13dc:	5152495f 	cmppl	r2, pc, asr r9
    13e0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    13e4:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
    13e8:	5300646d 	movwpl	r6, #1133	; 0x46d
    13ec:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    13f0:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    13f4:	6f534b4c 	svcvs	0x00534b4c
    13f8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    13fc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1400:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1404:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1408:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    140c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1410:	72505f43 	subsvc	r5, r0, #268	; 0x10c
    1414:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1418:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
    141c:	0070756f 	rsbseq	r7, r0, pc, ror #10
    1420:	4349564e 	movtmi	r5, #38478	; 0x964e
    1424:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1428:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
    142c:	65727070 	ldrbvs	r7, [r2, #-112]!	; 0xffffff90
    1430:	66664f00 	strbtvs	r4, [r6], -r0, lsl #30
    1434:	00746573 	rsbseq	r6, r4, r3, ror r5
    1438:	4349564e 	movtmi	r5, #38478	; 0x964e
    143c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1440:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    1444:	6154726f 	cmpvs	r4, pc, ror #4
    1448:	00656c62 	rsbeq	r6, r5, r2, ror #24
    144c:	73706d74 	cmnvc	r0, #116, 26	; 0x1d00
    1450:	4e006275 	mcrmi	2, 0, r6, cr0, cr5, {3}
    1454:	5f434956 	svcpl	0x00434956
    1458:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
    145c:	504c6d65 	subpl	r6, ip, r5, ror #26
    1460:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1464:	53006769 	movwpl	r6, #1897	; 0x769
    1468:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    146c:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    1470:	6f534b4c 	svcvs	0x00534b4c
    1474:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1478:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    147c:	74006769 	strvc	r6, [r0], #-1897	; 0xfffff897
    1480:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
    1484:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1488:	4e007974 			; <UNDEFINED> instruction: 0x4e007974
    148c:	5f434956 	svcpl	0x00434956
    1490:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    1494:	6e6e6168 	powvsez	f6, f6, #0.0
    1498:	4e006c65 	cdpmi	12, 0, cr6, cr0, cr5, {3}
    149c:	5f434956 	svcpl	0x00434956
    14a0:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    14a4:	6e6e6168 	powvsez	f6, f6, #0.0
    14a8:	75536c65 	ldrbvc	r6, [r3, #-3173]	; 0xfffff39b
    14ac:	69725062 	ldmdbvs	r2!, {r1, r5, r6, ip, lr}^
    14b0:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    14b4:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    14b8:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    14bc:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    14c0:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    14c4:	6572506c 	ldrbvs	r5, [r2, #-108]!	; 0xffffff94
    14c8:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
    14cc:	506e6f69 	rsbpl	r6, lr, r9, ror #30
    14d0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    14d4:	00797469 	rsbseq	r7, r9, r9, ror #8
    14d8:	4349564e 	movtmi	r5, #38478	; 0x964e
    14dc:	6365565f 	cmnvs	r5, #99614720	; 0x5f00000
    14e0:	62615474 	rsbvs	r5, r1, #116, 8	; 0x74000000
    14e4:	2f3a4300 	svccs	0x003a4300
    14e8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    14ec:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    14f0:	2f746d61 	svccs	0x00746d61
    14f4:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    14f8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    14fc:	6b6f442f 	blvs	1bd25c0 <startup-0x1e42da40>
    1500:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1504:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    1508:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    150c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    1510:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    1514:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1518:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    151c:	6b2f6d65 	blvs	bdcab8 <startup-0x1f423548>
    1520:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 136c <startup-0x1fffec94>
    1524:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1528:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    152c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1530:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1534:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1538:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    153c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1540:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1544:	445f6870 	ldrbmi	r6, [pc], #-2160	; 154c <startup-0x1fffeab4>
    1548:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    154c:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1550:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    1554:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
    1558:	776f4c00 	strbvc	r4, [pc, -r0, lsl #24]!
    155c:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    1560:	646f4d72 	strbtvs	r4, [pc], #-3442	; 1568 <startup-0x1fffea98>
    1564:	564e0065 	strbpl	r0, [lr], -r5, rrx
    1568:	505f4349 	subspl	r4, pc, r9, asr #6
    156c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1570:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
    1574:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    1578:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    157c:	62006769 	andvs	r6, r0, #27525120	; 0x1a40000
    1580:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1584:	74755072 	ldrbtvc	r5, [r5], #-114	; 0xffffff8e
    1588:	2f3a4300 	svccs	0x003a4300
    158c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1590:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    1594:	2f746d61 	svccs	0x00746d61
    1598:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    159c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    15a0:	6b6f442f 	blvs	1bd2664 <startup-0x1e42d99c>
    15a4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    15a8:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    15ac:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    15b0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    15b4:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    15b8:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    15bc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    15c0:	6b2f6d65 	blvs	bdcb5c <startup-0x1f4234a4>
    15c4:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 1410 <startup-0x1fffebf0>
    15c8:	622f6269 	eorvs	r6, pc, #-1879048186	; 0x90000006
    15cc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    15d0:	00632e72 	rsbeq	r2, r3, r2, ror lr
    15d4:	4f464946 	svcmi	0x00464946
    15d8:	73656400 	cmnvc	r5, #0, 8
    15dc:	75620074 	strbvc	r0, [r2, #-116]!	; 0xffffff8c
    15e0:	65006666 	strvs	r6, [r0, #-1638]	; 0xfffff99a
    15e4:	006d656c 	rsbeq	r6, sp, ip, ror #10
    15e8:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    15ec:	65477265 	strbvs	r7, [r7, #-613]	; 0xfffffd9b
    15f0:	75620074 	strbvc	r0, [r2, #-116]!	; 0xffffff8c
    15f4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    15f8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    15fc:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    1600:	00726566 	rsbseq	r6, r2, r6, ror #10
    1604:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    1608:	64726567 	ldrbtvs	r6, [r2], #-1383	; 0xfffffa99
    160c:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
    1610:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
    1614:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1618:	4850435f 	ldmdami	r0, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    161c:	54470041 	strbpl	r0, [r7], #-65	; 0xffffffbf
    1620:	55005250 	strpl	r5, [r0, #-592]	; 0xfffffdb0
    1624:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1628:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    162c:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    1630:	6b615772 	blvs	1857400 <startup-0x1e7a8c00>
    1634:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    1638:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    163c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1640:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1644:	73657250 	cmnvc	r5, #80, 4
    1648:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    164c:	53550072 	cmppl	r5, #114	; 0x72
    1650:	5f545241 	svcpl	0x00545241
    1654:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1658:	41535500 	cmpmi	r3, r0, lsl #10
    165c:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    1660:	72424e49 	subvc	r4, r2, #1168	; 0x490
    1664:	446b6165 	strbtmi	r6, [fp], #-357	; 0xfffffe9b
    1668:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
    166c:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    1670:	00687467 	rsbeq	r7, r8, r7, ror #8
    1674:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1678:	6e4f5f54 	mcrvs	15, 2, r5, cr15, cr4, {2}
    167c:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
    1680:	6874654d 	ldmdavs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
    1684:	6d43646f 	cfstrdvs	mvd6, [r3, #-444]	; 0xfffffe44
    1688:	53550064 	cmppl	r5, #100	; 0x64
    168c:	5f545241 	svcpl	0x00545241
    1690:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1694:	00666544 	rsbeq	r6, r6, r4, asr #10
    1698:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    169c:	74535f54 	ldrbvc	r5, [r3], #-3924	; 0xfffff0ac
    16a0:	6942706f 	stmdbvs	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    16a4:	55007374 	strpl	r7, [r0, #-884]	; 0xfffffc8c
    16a8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    16ac:	6f6c435f 	svcvs	0x006c435f
    16b0:	6e496b63 	vmlsvs.f64	d22, d9, d19
    16b4:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    16b8:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    16bc:	53550066 	cmppl	r5, #102	; 0x66
    16c0:	5f545241 	svcpl	0x00545241
    16c4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    16c8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    16cc:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xfffff0ac
    16d0:	6144646e 	cmpvs	r4, lr, ror #8
    16d4:	55006174 	strpl	r6, [r0, #-372]	; 0xfffffe8c
    16d8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    16dc:	6b61575f 	blvs	1857460 <startup-0x1e7a8ba0>
    16e0:	00705565 	rsbseq	r5, r0, r5, ror #10
    16e4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    16e8:	6f575f54 	svcvs	0x00575f54
    16ec:	654c6472 	strbvs	r6, [ip, #-1138]	; 0xfffffb8e
    16f0:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    16f4:	41535500 	cmpmi	r3, r0, lsl #10
    16f8:	445f5452 	ldrbmi	r5, [pc], #-1106	; 1700 <startup-0x1fffe900>
    16fc:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    1700:	53550064 	cmppl	r5, #100	; 0x64
    1704:	5f545241 	svcpl	0x00545241
    1708:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0xfffffeb4
    170c:	00746942 	rsbseq	r6, r4, r2, asr #18
    1710:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1714:	61425f54 	cmpvs	r2, r4, asr pc
    1718:	61526475 	cmpvs	r2, r5, ror r4
    171c:	55006574 	strpl	r6, [r0, #-1396]	; 0xfffffa8c
    1720:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1724:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0xfffff6a1
    1728:	646f4d41 	strbtvs	r4, [pc], #-3393	; 1730 <startup-0x1fffe8d0>
    172c:	70610065 	rsbvc	r0, r1, r5, rrx
    1730:	6f6c6362 	svcvs	0x006c6362
    1734:	55006b63 	strpl	r6, [r0, #-2915]	; 0xfffff49d
    1738:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    173c:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    1740:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
    1744:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    1748:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    174c:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    1750:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1754:	6175475f 	cmnvs	r5, pc, asr r7
    1758:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    175c:	5500656d 	strpl	r6, [r0, #-1389]	; 0xfffffa93
    1760:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1764:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    1768:	61657242 	cmnvs	r5, r2, asr #4
    176c:	7465446b 	strbtvc	r4, [r5], #-1131	; 0xfffffb95
    1770:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    1774:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    1778:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
    177c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1780:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1784:	4c465f54 	mcrrmi	15, 5, r5, r6, cr4
    1788:	55004741 	strpl	r4, [r0, #-1857]	; 0xfffff8bf
    178c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1790:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1794:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1798:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    179c:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    17a0:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    17a4:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    17a8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    17ac:	53550074 	cmppl	r5, #116	; 0x74
    17b0:	5f545241 	svcpl	0x00545241
    17b4:	69726150 	ldmdbvs	r2!, {r4, r6, r8, sp, lr}^
    17b8:	55007974 	strpl	r7, [r0, #-2420]	; 0xfffff68c
    17bc:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    17c0:	6f6c435f 	svcvs	0x006c435f
    17c4:	74536b63 	ldrbvc	r6, [r3], #-2915	; 0xfffff49d
    17c8:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    17cc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    17d0:	61737500 	cmnvs	r3, r0, lsl #10
    17d4:	62787472 	rsbsvs	r7, r8, #1912602624	; 0x72000000
    17d8:	00657361 	rsbeq	r7, r5, r1, ror #6
    17dc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    17e0:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    17e4:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    17e8:	0067616c 	rsbeq	r6, r7, ip, ror #2
    17ec:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    17f0:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xfffff0ac
    17f4:	64644174 	strbtvs	r4, [r4], #-372	; 0xfffffe8c
    17f8:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    17fc:	41535500 	cmpmi	r3, r0, lsl #10
    1800:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    1804:	75477465 	strbvc	r7, [r7, #-1125]	; 0xfffffb9b
    1808:	54647261 	strbtpl	r7, [r4], #-609	; 0xfffffd9f
    180c:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1810:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1814:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xfffff0ac
    1818:	7242646e 	subvc	r6, r2, #1845493760	; 0x6e000000
    181c:	006b6165 	rsbeq	r6, fp, r5, ror #2
    1820:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1824:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    1828:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    182c:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    1830:	53550066 	cmppl	r5, #102	; 0x66
    1834:	5f545241 	svcpl	0x00545241
    1838:	6f435449 	svcvs	0x00435449
    183c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1840:	41535500 	cmpmi	r3, r0, lsl #10
    1844:	445f5452 	ldrbmi	r5, [pc], #-1106	; 184c <startup-0x1fffe7b4>
    1848:	6552414d 	ldrbvs	r4, [r2, #-333]	; 0xfffffeb3
    184c:	53550071 	cmppl	r5, #113	; 0x71
    1850:	78545241 	ldmdavc	r4, {r0, r6, r9, ip, lr}^
    1854:	41535500 	cmpmi	r3, r0, lsl #10
    1858:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    185c:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
    1860:	46657261 	strbtmi	r7, [r5], -r1, ror #4
    1864:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
    1868:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    186c:	55006c6f 	strpl	r6, [r0, #-3183]	; 0xfffff391
    1870:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1874:	616d535f 	cmnvs	sp, pc, asr r3
    1878:	61437472 	hvcvs	14146	; 0x3742
    187c:	6d436472 	cfstrdvs	mvd6, [r3, #-456]	; 0xfffffe38
    1880:	53550064 	cmppl	r5, #100	; 0x64
    1884:	5f545241 	svcpl	0x00545241
    1888:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    188c:	41535500 	cmpmi	r3, r0, lsl #10
    1890:	415f5452 	cmpmi	pc, r2, asr r4	; <UNPREDICTABLE>
    1894:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1898:	62007373 	andvs	r7, r0, #-872415231	; 0xcc000001
    189c:	6f707469 	svcvs	0x00707469
    18a0:	53550073 	cmppl	r5, #115	; 0x73
    18a4:	5f545241 	svcpl	0x00545241
    18a8:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    18ac:	706d6153 	rsbvc	r6, sp, r3, asr r1
    18b0:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    18b4:	646d4338 	strbtvs	r4, [sp], #-824	; 0xfffffcc8
    18b8:	41535500 	cmpmi	r3, r0, lsl #10
    18bc:	475f5452 			; <UNDEFINED> instruction: 0x475f5452
    18c0:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
    18c4:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    18c8:	55007375 	strpl	r7, [r0, #-885]	; 0xfffffc8b
    18cc:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    18d0:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    18d4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    18d8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    18dc:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
    18e0:	6f434144 	svcvs	0x00434144
    18e4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    18e8:	41535500 	cmpmi	r3, r0, lsl #10
    18ec:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    18f0:	6b636f6c 	blvs	18dd6a8 <startup-0x1e722958>
    18f4:	41535500 	cmpmi	r3, r0, lsl #10
    18f8:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    18fc:	43414472 	movtmi	r4, #5234	; 0x1472
    1900:	6600646d 	strvs	r6, [r0], -sp, ror #8
    1904:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
    1908:	616e6f69 	cmnvs	lr, r9, ror #30
    190c:	7669646c 	strbtvc	r6, [r9], -ip, ror #8
    1910:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    1914:	41535500 	cmpmi	r3, r0, lsl #10
    1918:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    191c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1920:	64726143 	ldrbtvs	r6, [r2], #-323	; 0xfffffebd
    1924:	4b43414e 	blmi	10d1e64 <startup-0x1ef2e19c>
    1928:	00646d43 	rsbeq	r6, r4, r3, asr #26
    192c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1930:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xfffff0ac
    1934:	616c4674 	smcvs	50276	; 0xc464
    1938:	61745367 	cmnvs	r4, r7, ror #6
    193c:	00737574 	rsbseq	r7, r3, r4, ror r5
    1940:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1944:	54495f54 	strbpl	r5, [r9], #-3924	; 0xfffff0ac
    1948:	41535500 	cmpmi	r3, r0, lsl #10
    194c:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1950:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1954:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1958:	43520074 	cmpmi	r2, #116	; 0x74
    195c:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1960:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    1964:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1968:	55007375 	strpl	r7, [r0, #-885]	; 0xfffffc8b
    196c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1970:	6f6c435f 	svcvs	0x006c435f
    1974:	6e496b63 	vmlsvs.f64	d22, d9, d19
    1978:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    197c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1980:	6b61575f 	blvs	1857704 <startup-0x1e7a88fc>
    1984:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    1988:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    198c:	53550067 	cmppl	r5, #103	; 0x67
    1990:	5f545241 	svcpl	0x00545241
    1994:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    1998:	6c707544 	cfldr64vs	mvdx7, [r0], #-272	; 0xfffffef0
    199c:	6d437865 	stclvs	8, cr7, [r3, #-404]	; 0xfffffe6c
    19a0:	53550064 	cmppl	r5, #100	; 0x64
    19a4:	5f545241 	svcpl	0x00545241
    19a8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    19ac:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    19b0:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    19b4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    19b8:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
    19bc:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    19c0:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
    19c4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    19c8:	4f50435f 	svcmi	0x0050435f
    19cc:	7469004c 	strbtvc	r0, [r9], #-76	; 0xffffffb4
    19d0:	6b73616d 	blvs	1cd9f8c <startup-0x1e326074>
    19d4:	2f3a4300 	svccs	0x003a4300
    19d8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    19dc:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    19e0:	2f746d61 	svccs	0x00746d61
    19e4:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    19e8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    19ec:	6b6f442f 	blvs	1bd2ab0 <startup-0x1e42d550>
    19f0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    19f4:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    19f8:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    19fc:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    1a00:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    1a04:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1a08:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1a0c:	6b2f6d65 	blvs	bdcfa8 <startup-0x1f423058>
    1a10:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 185c <startup-0x1fffe7a4>
    1a14:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1a18:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1a1c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1a20:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1a24:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1a28:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1a2c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1a30:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1a34:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1a3c <startup-0x1fffe5c4>
    1a38:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1a3c:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1a40:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    1a44:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1a48:	5f787834 	svcpl	0x00787834
    1a4c:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    1a50:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1a54:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1a58:	65525f54 	ldrbvs	r5, [r2, #-3924]	; 0xfffff0ac
    1a5c:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    1a60:	74614465 	strbtvc	r4, [r1], #-1125	; 0xfffffb9b
    1a64:	73750061 	cmnvc	r5, #97	; 0x61
    1a68:	72747261 	rsbsvc	r7, r4, #268435462	; 0x10000006
    1a6c:	74006765 	strvc	r6, [r0], #-1893	; 0xfffff89b
    1a70:	66754278 			; <UNDEFINED> instruction: 0x66754278
    1a74:	00726566 	rsbseq	r6, r2, r6, ror #10
    1a78:	6f6c5f5f 	svcvs	0x006c5f5f
    1a7c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    1a80:	5f00745f 	svcpl	0x0000745f
    1a84:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
    1a88:	5f006575 	svcpl	0x00006575
    1a8c:	0066735f 	rsbeq	r7, r6, pc, asr r3
    1a90:	552f3a43 	strpl	r3, [pc, #-2627]!	; 1055 <startup-0x1fffefab>
    1a94:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1a98:	6164412f 	cmnvs	r4, pc, lsr #2
    1a9c:	4f2f746d 	svcmi	0x002f746d
    1aa0:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    1aa4:	2f657669 	svccs	0x00657669
    1aa8:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    1aac:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1ab0:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    1ab4:	2f627548 	svccs	0x00627548
    1ab8:	32544144 	subscc	r4, r4, #68, 2
    1abc:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1ac0:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1ac4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1ac8:	6f6b2f6d 	svcvs	0x006b2f6d
    1acc:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1ad0:	53552f62 	cmppl	r5, #392	; 0x188
    1ad4:	2e545241 	cdpcs	2, 5, cr5, cr4, cr1, {2}
    1ad8:	5f5f0063 	svcpl	0x005f0063
    1adc:	61656c63 	cmnvs	r5, r3, ror #24
    1ae0:	0070756e 	rsbseq	r7, r0, lr, ror #10
    1ae4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1ae8:	5f006574 	svcpl	0x00006574
    1aec:	74637361 	strbtvc	r7, [r3], #-865	; 0xfffffc9f
    1af0:	5f656d69 	svcpl	0x00656d69
    1af4:	00667562 	rsbeq	r7, r6, r2, ror #10
    1af8:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
    1afc:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1b00:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
    1b04:	00646573 	rsbeq	r6, r4, r3, ror r5
    1b08:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    1b0c:	63775f00 	cmnvs	r7, #0, 30
    1b10:	6f747273 	svcvs	0x00747273
    1b14:	5f73626d 	svcpl	0x0073626d
    1b18:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1b1c:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
    1b20:	00667562 	rsbeq	r7, r6, r2, ror #10
    1b24:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    1b28:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
    1b2c:	366c5f00 	strbtcc	r5, [ip], -r0, lsl #30
    1b30:	625f6134 	subsvs	r6, pc, #52, 2
    1b34:	5f006675 	svcpl	0x00006675
    1b38:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
    1b3c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1b40:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1b44:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1b48:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1b4c:	00657275 	rsbeq	r7, r5, r5, ror r2
    1b50:	63775f5f 	cmnvs	r7, #380	; 0x17c
    1b54:	665f0068 	ldrbvs	r0, [pc], -r8, rrx
    1b58:	00656c69 	rsbeq	r6, r5, r9, ror #24
    1b5c:	5f6e6f5f 	svcpl	0x006e6f5f
    1b60:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
    1b64:	6772615f 			; <UNDEFINED> instruction: 0x6772615f
    1b68:	6d5f0073 	ldclvs	0, cr0, [pc, #-460]	; 19a4 <startup-0x1fffe65c>
    1b6c:	656c7262 	strbvs	r7, [ip, #-610]!	; 0xfffffd9e
    1b70:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
    1b74:	00657461 	rsbeq	r7, r5, r1, ror #8
    1b78:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
    1b7c:	5f746c75 	svcpl	0x00746c75
    1b80:	735f006b 	cmpvc	pc, #107	; 0x6b
    1b84:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1b88:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    1b8c:	69746c61 	ldmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    1b90:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
    1b94:	5f006675 	svcpl	0x00006675
    1b98:	5f6d745f 	svcpl	0x006d745f
    1b9c:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
    1ba0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1ba4:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    1ba8:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1bac:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1bb0:	00657275 	rsbeq	r7, r5, r5, ror r2
    1bb4:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
    1bb8:	5f646573 	svcpl	0x00646573
    1bbc:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
    1bc0:	41535500 	cmpmi	r3, r0, lsl #10
    1bc4:	72505452 	subsvc	r5, r0, #1375731712	; 0x52000000
    1bc8:	4e746e69 	cdpmi	14, 7, cr6, cr4, cr9, {3}
    1bcc:	5f006d75 	svcpl	0x00006d75
    1bd0:	70736e75 	rsbsvc	r6, r3, r5, ror lr
    1bd4:	66696365 	strbtvs	r6, [r9], -r5, ror #6
    1bd8:	5f646569 	svcpl	0x00646569
    1bdc:	61636f6c 	cmnvs	r3, ip, ror #30
    1be0:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    1be4:	006f666e 	rsbeq	r6, pc, lr, ror #12
    1be8:	6565725f 	strbvs	r7, [r5, #-607]!	; 0xfffffda1
    1bec:	5f00746e 	svcpl	0x0000746e
    1bf0:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
    1bf4:	695f6c61 	ldmdbvs	pc, {r0, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1bf8:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    1bfc:	74705f65 	ldrbtvc	r5, [r0], #-3941	; 0xfffff09b
    1c00:	665f0072 			; <UNDEFINED> instruction: 0x665f0072
    1c04:	5f00736e 	svcpl	0x0000736e
    1c08:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1c0c:	6964006e 	stmdbvs	r4!, {r1, r2, r3, r5, r6}^
    1c10:	41746967 	cmnmi	r4, r7, ror #18
    1c14:	5f007272 	svcpl	0x00007272
    1c18:	6b6f6f63 	blvs	1bdd9ac <startup-0x1e422654>
    1c1c:	5f006569 	svcpl	0x00006569
    1c20:	00736477 	rsbseq	r6, r3, r7, ror r4
    1c24:	6f6c5f5f 	svcvs	0x006c5f5f
    1c28:	64006b63 	strvs	r6, [r0], #-2915	; 0xfffff49d
    1c2c:	74696769 	strbtvc	r6, [r9], #-1897	; 0xfffff897
    1c30:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
    1c34:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
    1c38:	5f00636e 	svcpl	0x0000636e
    1c3c:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
    1c40:	72006675 	andvc	r6, r0, #122683392	; 0x7500000
    1c44:	66754278 			; <UNDEFINED> instruction: 0x66754278
    1c48:	00726566 	rsbseq	r6, r2, r6, ror #10
    1c4c:	7335705f 	teqvc	r5, #95	; 0x5f
    1c50:	735f5f00 	cmpvc	pc, #0, 30
    1c54:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
    1c58:	735f5f00 	cmpvc	pc, #0, 30
    1c5c:	69646964 	stmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
    1c60:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1c64:	616c665f 	cmnvs	ip, pc, asr r6
    1c68:	00327367 	eorseq	r7, r2, r7, ror #6
    1c6c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1c70:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    1c74:	00676966 	rsbeq	r6, r7, r6, ror #18
    1c78:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    1c7c:	5f6c616e 	svcpl	0x006c616e
    1c80:	00667562 	rsbeq	r7, r6, r2, ror #10
    1c84:	6769425f 			; <UNDEFINED> instruction: 0x6769425f
    1c88:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1c8c:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    1c90:	00736477 	rsbseq	r6, r3, r7, ror r4
    1c94:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
    1c98:	30746978 	rsbscc	r6, r4, r8, ror r9
    1c9c:	6d655f00 	stclvs	15, cr5, [r5, #-0]
    1ca0:	65677265 	strbvs	r7, [r7, #-613]!	; 0xfffffd9b
    1ca4:	0079636e 	rsbseq	r6, r9, lr, ror #6
    1ca8:	6f696e5f 	svcvs	0x00696e5f
    1cac:	55007362 	strpl	r7, [r0, #-866]	; 0xfffffc9e
    1cb0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1cb4:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    1cb8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    1cbc:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1cc0:	735f5f00 	cmpvc	pc, #0, 30
    1cc4:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
    1cc8:	6d6e5f00 	stclvs	15, cr5, [lr, #-0]
    1ccc:	6f6c6c61 	svcvs	0x006c6c61
    1cd0:	6f640063 	svcvs	0x00640063
    1cd4:	656c6275 	strbvs	r6, [ip, #-629]!	; 0xfffffd8b
    1cd8:	61675f00 	cmnvs	r7, r0, lsl #30
    1cdc:	5f616d6d 	svcpl	0x00616d6d
    1ce0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    1ce4:	006d6167 	rsbeq	r6, sp, r7, ror #2
    1ce8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1cec:	69725054 	ldmdbvs	r2!, {r2, r4, r6, ip, lr}^
    1cf0:	5f00746e 	svcpl	0x0000746e
    1cf4:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    1cf8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
    1cfc:	6f695f00 	svcvs	0x00695f00
    1d00:	5f007362 	svcpl	0x00007362
    1d04:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
    1d08:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
    1d0c:	66006e67 	strvs	r6, [r0], -r7, ror #28
    1d10:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
    1d14:	61657200 	cmnvs	r5, r0, lsl #4
    1d18:	4278526c 	rsbsmi	r5, r8, #108, 4	; 0xc0000006
    1d1c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1d20:	685f0072 	ldmdavs	pc, {r1, r4, r5, r6}^	; <UNPREDICTABLE>
    1d24:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
    1d28:	5f006f6e 	svcpl	0x00006f6e
    1d2c:	74726377 	ldrbtvc	r6, [r2], #-887	; 0xfffffc89
    1d30:	5f626d6f 	svcpl	0x00626d6f
    1d34:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1d38:	5f5f0065 	svcpl	0x005f0065
    1d3c:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 1b74 <startup-0x1fffe48c>
    1d40:	00796164 	rsbseq	r6, r9, r4, ror #2
    1d44:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
    1d48:	62755f00 	rsbsvs	r5, r5, #0, 30
    1d4c:	5f006675 	svcpl	0x00006675
    1d50:	65647473 	strbvs	r7, [r4, #-1139]!	; 0xfffffb8d
    1d54:	5f007272 	svcpl	0x00007272
    1d58:	6f746377 	svcvs	0x00746377
    1d5c:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
    1d60:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1d64:	626d5f00 	rsbvs	r5, sp, #0, 30
    1d68:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1d6c:	725f0065 	subsvc	r0, pc, #101	; 0x65
    1d70:	5f646e61 	svcpl	0x00646e61
    1d74:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
    1d78:	6c665f00 	stclvs	15, cr5, [r6], #-0
    1d7c:	00736761 	rsbseq	r6, r3, r1, ror #14
    1d80:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
    1d84:	00746978 	rsbseq	r6, r4, r8, ror r9
    1d88:	6f635f5f 	svcvs	0x00635f5f
    1d8c:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1d90:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1d94:	69725054 	ldmdbvs	r2!, {r2, r4, r6, ip, lr}^
    1d98:	754e746e 	strbvc	r7, [lr, #-1134]	; 0xfffffb92
    1d9c:	7361426d 	cmnvc	r1, #-805306362	; 0xd0000006
    1da0:	53550065 	cmppl	r5, #101	; 0x65
    1da4:	47545241 	ldrbmi	r5, [r4, -r1, asr #4]
    1da8:	5f007465 	svcpl	0x00007465
    1dac:	736f6c63 	cmnvc	pc, #25344	; 0x6300
    1db0:	5f5f0065 	svcpl	0x005f0065
    1db4:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1db8:	00796164 	rsbseq	r6, r9, r4, ror #2
    1dbc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1dc0:	5f006b4f 	svcpl	0x00006b4f
    1dc4:	64656573 	strbtvs	r6, [r5], #-1395	; 0xfffffa8d
    1dc8:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
    1dcc:	5f006b65 	svcpl	0x00006b65
    1dd0:	736f7066 	cmnvc	pc, #102	; 0x66
    1dd4:	5f00745f 	svcpl	0x0000745f
    1dd8:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1ddc:	6d5f0062 	ldclvs	0, cr0, [pc, #-392]	; 1c5c <startup-0x1fffe3a4>
    1de0:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
    1de4:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
    1de8:	00657461 	rsbeq	r7, r5, r1, ror #8
    1dec:	6f73645f 	svcvs	0x0073645f
    1df0:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
    1df4:	00656c64 	rsbeq	r6, r5, r4, ror #24
    1df8:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
    1dfc:	00383464 	eorseq	r3, r8, r4, ror #8
    1e00:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    1e04:	0074756f 	rsbseq	r7, r4, pc, ror #10
    1e08:	6b6c625f 	blvs	1b1a78c <startup-0x1e4e5874>
    1e0c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    1e10:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1e14:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    1e18:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1e1c:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1e20:	00657275 	rsbeq	r7, r5, r5, ror r2
    1e24:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
    1e28:	735f0065 	cmpvc	pc, #101	; 0x65
    1e2c:	6f747274 	svcvs	0x00747274
    1e30:	616c5f6b 	cmnvs	ip, fp, ror #30
    1e34:	5f007473 	svcpl	0x00007473
    1e38:	7472626d 	ldrbtvc	r6, [r2], #-621	; 0xfffffd93
    1e3c:	5f63776f 	svcpl	0x0063776f
    1e40:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1e44:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
    1e48:	6b636f6c 	blvs	18ddc00 <startup-0x1e722400>
    1e4c:	5f00745f 	svcpl	0x0000745f
    1e50:	4c49465f 	mcrrmi	6, 5, r4, r9, cr15
    1e54:	6d5f0045 	ldclvs	0, cr0, [pc, #-276]	; 1d48 <startup-0x1fffe2b8>
    1e58:	61747362 	cmnvs	r4, r2, ror #6
    1e5c:	745f6574 	ldrbvc	r6, [pc], #-1396	; 1e64 <startup-0x1fffe19c>
    1e60:	34725f00 	ldrbtcc	r5, [r2], #-3840	; 0xfffff100
    1e64:	69770038 	ldmdbvs	r7!, {r3, r4, r5}^
    1e68:	745f746e 	ldrbvc	r7, [pc], #-1134	; 1e70 <startup-0x1fffe190>
    1e6c:	61645f00 	cmnvs	r4, r0, lsl #30
    1e70:	5f006174 	svcpl	0x00006174
    1e74:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
    1e78:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
    1e7c:	00657461 	rsbeq	r7, r5, r1, ror #8
    1e80:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
    1e84:	75427854 	strbvc	r7, [r2, #-2132]	; 0xfffff7ac
    1e88:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1e8c:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
    1e90:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1e94:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    1e98:	00786564 	rsbseq	r6, r8, r4, ror #10
    1e9c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    1ea0:	6165795f 	cmnvs	r5, pc, asr r9
    1ea4:	6c5f0072 	mrrcvs	0, 7, r0, pc, cr2	; <UNPREDICTABLE>
    1ea8:	69736662 	ldmdbvs	r3!, {r1, r5, r6, r9, sl, sp, lr}^
    1eac:	5f00657a 	svcpl	0x0000657a
    1eb0:	00636e69 	rsbeq	r6, r3, r9, ror #28
    1eb4:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
    1eb8:	735f5f00 	cmpvc	pc, #0, 30
    1ebc:	00667562 	rsbeq	r7, r6, r2, ror #10
    1ec0:	5f73695f 	svcpl	0x0073695f
    1ec4:	00617863 	rsbeq	r7, r1, r3, ror #16
    1ec8:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    1ecc:	00545f4b 	subseq	r5, r4, fp, asr #30
    1ed0:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    1ed4:	5f006674 	svcpl	0x00006674
    1ed8:	61636f6c 	cmnvs	r3, ip, ror #30
    1edc:	5f00656c 	svcpl	0x0000656c
    1ee0:	6f4c555f 	svcvs	0x004c555f
    1ee4:	5f00676e 	svcpl	0x0000676e
    1ee8:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
    1eec:	5f00746c 	svcpl	0x0000746c
    1ef0:	5f66666f 	svcpl	0x0066666f
    1ef4:	615f0074 	cmpvs	pc, r4, ror r0	; <UNPREDICTABLE>
    1ef8:	5f006464 	svcpl	0x00006464
    1efc:	5f6d745f 	svcpl	0x006d745f
    1f00:	72756f68 	rsbsvc	r6, r5, #104, 30	; 0x1a0
    1f04:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 1f0c <startup-0x1fffe0f4>
    1f08:	64775f6d 	ldrbtvs	r5, [r7], #-3949	; 0xfffff093
    1f0c:	5f007961 	svcpl	0x00007961
    1f10:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
    1f14:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
    1f18:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
    1f1c:	00657461 	rsbeq	r7, r5, r1, ror #8
    1f20:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
    1f24:	00746573 	rsbseq	r6, r4, r3, ror r5
    1f28:	616e665f 	cmnvs	lr, pc, asr r6
    1f2c:	00736772 	rsbseq	r6, r3, r2, ror r7
    1f30:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    1f34:	6473695f 	ldrbtvs	r6, [r3], #-2399	; 0xfffff6a1
    1f38:	55007473 	strpl	r7, [r0, #-1139]	; 0xfffffb8d
    1f3c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1f40:	00747550 	rsbseq	r7, r4, r0, asr r5
    1f44:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    1f48:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
    1f4c:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
    1f50:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
    1f54:	72655f65 	rsbvc	r5, r5, #404	; 0x194
    1f58:	Address 0x00001f58 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <GPIO_Pins+0xdfffca42>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000060 	andeq	r0, r0, r0, rrx
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000070 	andcs	r0, r0, r0, ror r0
  3c:	00000048 	andeq	r0, r0, r8, asr #32
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	00000018 	andeq	r0, r0, r8, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000b8 	strhcs	r0, [r0], -r8
  5c:	00000070 	andeq	r0, r0, r0, ror r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	20000128 	andcs	r0, r0, r8, lsr #2
  78:	00000028 	andeq	r0, r0, r8, lsr #32
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	100e4101 	andne	r4, lr, r1, lsl #2
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	00000020 	andeq	r0, r0, r0, lsr #32
  90:	00000000 	andeq	r0, r0, r0
  94:	20000150 	andcs	r0, r0, r0, asr r1
  98:	0000005e 	andeq	r0, r0, lr, asr r0
  9c:	400c0e41 	andmi	r0, ip, r1, asr #28
  a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  a4:	018e4002 	orreq	r4, lr, r2
  a8:	41180e41 	tstmi	r8, r1, asr #28
  ac:	0000070d 	andeq	r0, r0, sp, lsl #14
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200001ae 	andcs	r0, r0, lr, lsr #3
  bc:	0000003e 	andeq	r0, r0, lr, lsr r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	180e4101 	stmdane	lr, {r0, r8, lr}
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200001ec 	andcs	r0, r0, ip, ror #3
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	2000020c 	andcs	r0, r0, ip, lsl #4
  fc:	00000044 	andeq	r0, r0, r4, asr #32
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20000250 	andcs	r0, r0, r0, asr r2
 11c:	00000020 	andeq	r0, r0, r0, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000270 	andcs	r0, r0, r0, ror r2
 13c:	0000003c 	andeq	r0, r0, ip, lsr r0
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	180e4101 	stmdane	lr, {r0, r8, lr}
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200002ac 	andcs	r0, r0, ip, lsr #5
 15c:	00000020 	andeq	r0, r0, r0, lsr #32
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	200002cc 	andcs	r0, r0, ip, asr #5
 17c:	00000028 	andeq	r0, r0, r8, lsr #32
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	100e4101 	andne	r4, lr, r1, lsl #2
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200002f4 	strdcs	r0, [r0], -r4
 19c:	00000020 	andeq	r0, r0, r0, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20000314 	andcs	r0, r0, r4, lsl r3
 1bc:	00000030 	andeq	r0, r0, r0, lsr r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000344 	andcs	r0, r0, r4, asr #6
 1dc:	00000020 	andeq	r0, r0, r0, lsr #32
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20000364 	andcs	r0, r0, r4, ror #6
 1fc:	00000020 	andeq	r0, r0, r0, lsr #32
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000384 	andcs	r0, r0, r4, lsl #7
 21c:	00000040 	andeq	r0, r0, r0, asr #32
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	200003c4 	andcs	r0, r0, r4, asr #7
 23c:	0000003c 	andeq	r0, r0, ip, lsr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000000 	andeq	r0, r0, r0
 258:	20000400 	andcs	r0, r0, r0, lsl #8
 25c:	00000034 	andeq	r0, r0, r4, lsr r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	180e4101 	stmdane	lr, {r0, r8, lr}
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	00000018 	andeq	r0, r0, r8, lsl r0
 274:	00000000 	andeq	r0, r0, r0
 278:	20000434 	andcs	r0, r0, r4, lsr r4
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	20000450 	andcs	r0, r0, r0, asr r4
 298:	00000034 	andeq	r0, r0, r4, lsr r0
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	20000484 	andcs	r0, r0, r4, lsl #9
 2b8:	00000038 	andeq	r0, r0, r8, lsr r0
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c8:	00070d41 	andeq	r0, r7, r1, asr #26
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
 2d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	200004f8 	strdcs	r0, [r0], -r8
 2f8:	00000158 	andeq	r0, r0, r8, asr r1
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	280e4101 	stmdacs	lr, {r0, r8, lr}
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	20000650 	andcs	r0, r0, r0, asr r6
 318:	00000060 	andeq	r0, r0, r0, rrx
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	180e4101 	stmdane	lr, {r0, r8, lr}
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 358:	00000020 	andeq	r0, r0, r0, lsr #32
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	100e4101 	andne	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	100e4101 	andne	r4, lr, r1, lsl #2
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	2000070c 	andcs	r0, r0, ip, lsl #14
 398:	0000003c 	andeq	r0, r0, ip, lsr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	20000748 	andcs	r0, r0, r8, asr #14
 3b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c8:	00070d41 	andeq	r0, r7, r1, asr #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	20000784 	andcs	r0, r0, r4, lsl #15
 3d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	200007c0 	andcs	r0, r0, r0, asr #15
 3f8:	00000040 	andeq	r0, r0, r0, asr #32
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	180e4101 	stmdane	lr, {r0, r8, lr}
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	20000800 	andcs	r0, r0, r0, lsl #16
 418:	0000003c 	andeq	r0, r0, ip, lsr r0
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	180e4101 	stmdane	lr, {r0, r8, lr}
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	2000083c 	andcs	r0, r0, ip, lsr r8
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	100e4101 	andne	r4, lr, r1, lsl #2
 448:	00070d41 	andeq	r0, r7, r1, asr #26
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000000 	andeq	r0, r0, r0
 454:	20000858 	andcs	r0, r0, r8, asr r8
 458:	00000040 	andeq	r0, r0, r0, asr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	100e4101 	andne	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	20000898 	mulcs	r0, r8, r8
 478:	00000040 	andeq	r0, r0, r0, asr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	200008d8 	ldrdcs	r0, [r0], -r8
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	100e4101 	andne	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	20000918 	andcs	r0, r0, r8, lsl r9
 4b8:	00000040 	andeq	r0, r0, r0, asr #32
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	20000958 	andcs	r0, r0, r8, asr r9
 4d8:	00000040 	andeq	r0, r0, r0, asr #32
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	100e4101 	andne	r4, lr, r1, lsl #2
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	20000998 	mulcs	r0, r8, r9
 4f8:	00000040 	andeq	r0, r0, r0, asr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	100e4101 	andne	r4, lr, r1, lsl #2
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	00000000 	andeq	r0, r0, r0
 514:	200009d8 	ldrdcs	r0, [r0], -r8
 518:	00000040 	andeq	r0, r0, r0, asr #32
 51c:	40080e41 	andmi	r0, r8, r1, asr #28
 520:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 524:	100e4101 	andne	r4, lr, r1, lsl #2
 528:	00070d41 	andeq	r0, r7, r1, asr #26
 52c:	0000001c 	andeq	r0, r0, ip, lsl r0
 530:	00000000 	andeq	r0, r0, r0
 534:	20000a18 	andcs	r0, r0, r8, lsl sl
 538:	00000040 	andeq	r0, r0, r0, asr #32
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	100e4101 	andne	r4, lr, r1, lsl #2
 548:	00070d41 	andeq	r0, r7, r1, asr #26
 54c:	0000001c 	andeq	r0, r0, ip, lsl r0
 550:	00000000 	andeq	r0, r0, r0
 554:	20000a58 	andcs	r0, r0, r8, asr sl
 558:	00000040 	andeq	r0, r0, r0, asr #32
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	100e4101 	andne	r4, lr, r1, lsl #2
 568:	00070d41 	andeq	r0, r7, r1, asr #26
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	00000000 	andeq	r0, r0, r0
 574:	20000a98 	mulcs	r0, r8, sl
 578:	00000040 	andeq	r0, r0, r0, asr #32
 57c:	40080e41 	andmi	r0, r8, r1, asr #28
 580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 584:	100e4101 	andne	r4, lr, r1, lsl #2
 588:	00070d41 	andeq	r0, r7, r1, asr #26
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000000 	andeq	r0, r0, r0
 594:	20000ad8 	ldrdcs	r0, [r0], -r8
 598:	00000040 	andeq	r0, r0, r0, asr #32
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	100e4101 	andne	r4, lr, r1, lsl #2
 5a8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	20000b18 	andcs	r0, r0, r8, lsl fp
 5b8:	00000040 	andeq	r0, r0, r0, asr #32
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	100e4101 	andne	r4, lr, r1, lsl #2
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	20000b58 	andcs	r0, r0, r8, asr fp
 5d8:	00000040 	andeq	r0, r0, r0, asr #32
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	100e4101 	andne	r4, lr, r1, lsl #2
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	20000b98 	mulcs	r0, r8, fp
 5f8:	00000040 	andeq	r0, r0, r0, asr #32
 5fc:	40080e41 	andmi	r0, r8, r1, asr #28
 600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 604:	100e4101 	andne	r4, lr, r1, lsl #2
 608:	00070d41 	andeq	r0, r7, r1, asr #26
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	00000000 	andeq	r0, r0, r0
 614:	20000bd8 	ldrdcs	r0, [r0], -r8
 618:	00000040 	andeq	r0, r0, r0, asr #32
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	100e4101 	andne	r4, lr, r1, lsl #2
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	20000c18 	andcs	r0, r0, r8, lsl ip
 638:	0000003c 	andeq	r0, r0, ip, lsr r0
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	100e4101 	andne	r4, lr, r1, lsl #2
 648:	00070d41 	andeq	r0, r7, r1, asr #26
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	20000c54 	andcs	r0, r0, r4, asr ip
 658:	00000050 	andeq	r0, r0, r0, asr r0
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	100e4101 	andne	r4, lr, r1, lsl #2
 668:	00070d41 	andeq	r0, r7, r1, asr #26
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	00000000 	andeq	r0, r0, r0
 674:	20000ca4 	andcs	r0, r0, r4, lsr #25
 678:	00000084 	andeq	r0, r0, r4, lsl #1
 67c:	40080e41 	andmi	r0, r8, r1, asr #28
 680:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 684:	200e4101 	andcs	r4, lr, r1, lsl #2
 688:	00070d41 	andeq	r0, r7, r1, asr #26
 68c:	00000018 	andeq	r0, r0, r8, lsl r0
 690:	00000000 	andeq	r0, r0, r0
 694:	20000d28 	andcs	r0, r0, r8, lsr #26
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	40080e41 	andmi	r0, r8, r1, asr #28
 6a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ac:	00000000 	andeq	r0, r0, r0
 6b0:	20000d44 	andcs	r0, r0, r4, asr #26
 6b4:	00000044 	andeq	r0, r0, r4, asr #32
 6b8:	40080e41 	andmi	r0, r8, r1, asr #28
 6bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 6c4:	00070d41 	andeq	r0, r7, r1, asr #26
 6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6cc:	00000000 	andeq	r0, r0, r0
 6d0:	20000d88 	andcs	r0, r0, r8, lsl #27
 6d4:	00000020 	andeq	r0, r0, r0, lsr #32
 6d8:	40080e41 	andmi	r0, r8, r1, asr #28
 6dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e0:	100e4101 	andne	r4, lr, r1, lsl #2
 6e4:	00070d41 	andeq	r0, r7, r1, asr #26
 6e8:	0000000c 	andeq	r0, r0, ip
 6ec:	00000000 	andeq	r0, r0, r0
 6f0:	20000000 	andcs	r0, r0, r0
 6f4:	0000000c 	andeq	r0, r0, ip
 6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6fc:	00000000 	andeq	r0, r0, r0
 700:	20000da8 	andcs	r0, r0, r8, lsr #27
 704:	0000004c 	andeq	r0, r0, ip, asr #32
 708:	40080e41 	andmi	r0, r8, r1, asr #28
 70c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 710:	180e4101 	stmdane	lr, {r0, r8, lr}
 714:	00070d41 	andeq	r0, r7, r1, asr #26
 718:	0000001c 	andeq	r0, r0, ip, lsl r0
 71c:	00000000 	andeq	r0, r0, r0
 720:	20000df4 	strdcs	r0, [r0], -r4
 724:	000000a4 	andeq	r0, r0, r4, lsr #1
 728:	40080e41 	andmi	r0, r8, r1, asr #28
 72c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 730:	180e4101 	stmdane	lr, {r0, r8, lr}
 734:	00070d41 	andeq	r0, r7, r1, asr #26
 738:	0000001c 	andeq	r0, r0, ip, lsl r0
 73c:	00000000 	andeq	r0, r0, r0
 740:	20000e98 	mulcs	r0, r8, lr
 744:	00000068 	andeq	r0, r0, r8, rrx
 748:	40080e41 	andmi	r0, r8, r1, asr #28
 74c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 750:	100e4101 	andne	r4, lr, r1, lsl #2
 754:	00070d41 	andeq	r0, r7, r1, asr #26
 758:	00000018 	andeq	r0, r0, r8, lsl r0
 75c:	00000000 	andeq	r0, r0, r0
 760:	20000f00 	andcs	r0, r0, r0, lsl #30
 764:	00000018 	andeq	r0, r0, r8, lsl r0
 768:	40080e41 	andmi	r0, r8, r1, asr #28
 76c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 770:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 774:	0000001c 	andeq	r0, r0, ip, lsl r0
 778:	00000000 	andeq	r0, r0, r0
 77c:	20000f18 	andcs	r0, r0, r8, lsl pc
 780:	0000002c 	andeq	r0, r0, ip, lsr #32
 784:	40080e41 	andmi	r0, r8, r1, asr #28
 788:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 78c:	100e4101 	andne	r4, lr, r1, lsl #2
 790:	00070d41 	andeq	r0, r7, r1, asr #26
 794:	00000024 	andeq	r0, r0, r4, lsr #32
 798:	00000000 	andeq	r0, r0, r0
 79c:	20000f44 	andcs	r0, r0, r4, asr #30
 7a0:	00000234 	andeq	r0, r0, r4, lsr r2
 7a4:	40140e41 	andsmi	r0, r4, r1, asr #28
 7a8:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 7ac:	03864004 	orreq	r4, r6, #4
 7b0:	40028740 	andmi	r8, r2, r0, asr #14
 7b4:	0e41018e 	dvfeqd	f0, f1, #0.5
 7b8:	070d4138 	smladxeq	sp, r8, r1, r4
 7bc:	0000000c 	andeq	r0, r0, ip
 7c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7c4:	7c020001 	stcvc	0, cr0, [r2], {1}
 7c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 7d0:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
 7d4:	20001178 	andcs	r1, r0, r8, ror r1
 7d8:	00000170 	andeq	r0, r0, r0, ror r1
 7dc:	40080e41 	andmi	r0, r8, r1, asr #28
 7e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7e4:	100e4101 	andne	r4, lr, r1, lsl #2
 7e8:	00070d41 	andeq	r0, r7, r1, asr #26
 7ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 7f0:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
 7f4:	200012e8 	andcs	r1, r0, r8, ror #5
 7f8:	00000118 	andeq	r0, r0, r8, lsl r1
 7fc:	40080e41 	andmi	r0, r8, r1, asr #28
 800:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 804:	200e4101 	andcs	r4, lr, r1, lsl #2
 808:	00070d41 	andeq	r0, r7, r1, asr #26
 80c:	0000001c 	andeq	r0, r0, ip, lsl r0
 810:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
 814:	20001400 	andcs	r1, r0, r0, lsl #8
 818:	00000034 	andeq	r0, r0, r4, lsr r0
 81c:	40080e41 	andmi	r0, r8, r1, asr #28
 820:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 824:	100e4101 	andne	r4, lr, r1, lsl #2
 828:	00070d41 	andeq	r0, r7, r1, asr #26
 82c:	0000001c 	andeq	r0, r0, ip, lsl r0
 830:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
 834:	20001434 	andcs	r1, r0, r4, lsr r4
 838:	00000046 	andeq	r0, r0, r6, asr #32
 83c:	40080e41 	andmi	r0, r8, r1, asr #28
 840:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 844:	180e4101 	stmdane	lr, {r0, r8, lr}
 848:	00070d41 	andeq	r0, r7, r1, asr #26
 84c:	0000001c 	andeq	r0, r0, ip, lsl r0
 850:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
 854:	2000147a 	andcs	r1, r0, sl, ror r4
 858:	00000042 	andeq	r0, r0, r2, asr #32
 85c:	40080e41 	andmi	r0, r8, r1, asr #28
 860:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 864:	180e4101 	stmdane	lr, {r0, r8, lr}
 868:	00070d41 	andeq	r0, r7, r1, asr #26
 86c:	0000001c 	andeq	r0, r0, ip, lsl r0
 870:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
 874:	200014bc 			; <UNDEFINED> instruction: 0x200014bc
 878:	00000016 	andeq	r0, r0, r6, lsl r0
 87c:	40080e41 	andmi	r0, r8, r1, asr #28
 880:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 884:	100e4101 	andne	r4, lr, r1, lsl #2
 888:	00070d41 	andeq	r0, r7, r1, asr #26
 88c:	0000001c 	andeq	r0, r0, ip, lsl r0
 890:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
 894:	200014d2 	ldrdcs	r1, [r0], -r2
 898:	00000042 	andeq	r0, r0, r2, asr #32
 89c:	40080e41 	andmi	r0, r8, r1, asr #28
 8a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 8a8:	00070d41 	andeq	r0, r7, r1, asr #26
 8ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 8b0:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
 8b4:	20001514 	andcs	r1, r0, r4, lsl r5
 8b8:	00000016 	andeq	r0, r0, r6, lsl r0
 8bc:	40080e41 	andmi	r0, r8, r1, asr #28
 8c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8c4:	100e4101 	andne	r4, lr, r1, lsl #2
 8c8:	00070d41 	andeq	r0, r7, r1, asr #26
 8cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8d0:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
 8d4:	2000152a 	andcs	r1, r0, sl, lsr #10
 8d8:	0000001e 	andeq	r0, r0, lr, lsl r0
 8dc:	40080e41 	andmi	r0, r8, r1, asr #28
 8e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8e4:	100e4101 	andne	r4, lr, r1, lsl #2
 8e8:	00070d41 	andeq	r0, r7, r1, asr #26
 8ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 8f0:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
 8f4:	20001548 	andcs	r1, r0, r8, asr #10
 8f8:	0000001e 	andeq	r0, r0, lr, lsl r0
 8fc:	40080e41 	andmi	r0, r8, r1, asr #28
 900:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 904:	100e4101 	andne	r4, lr, r1, lsl #2
 908:	00070d41 	andeq	r0, r7, r1, asr #26
 90c:	0000001c 	andeq	r0, r0, ip, lsl r0
 910:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
 914:	20001566 	andcs	r1, r0, r6, ror #10
 918:	0000003a 	andeq	r0, r0, sl, lsr r0
 91c:	40080e41 	andmi	r0, r8, r1, asr #28
 920:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 924:	100e4101 	andne	r4, lr, r1, lsl #2
 928:	00070d41 	andeq	r0, r7, r1, asr #26
 92c:	0000001c 	andeq	r0, r0, ip, lsl r0
 930:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
 934:	200015a0 	andcs	r1, r0, r0, lsr #11
 938:	0000001e 	andeq	r0, r0, lr, lsl r0
 93c:	40080e41 	andmi	r0, r8, r1, asr #28
 940:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 944:	100e4101 	andne	r4, lr, r1, lsl #2
 948:	00070d41 	andeq	r0, r7, r1, asr #26
 94c:	0000001c 	andeq	r0, r0, ip, lsl r0
 950:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
 954:	200015be 			; <UNDEFINED> instruction: 0x200015be
 958:	00000024 	andeq	r0, r0, r4, lsr #32
 95c:	40080e41 	andmi	r0, r8, r1, asr #28
 960:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 964:	100e4101 	andne	r4, lr, r1, lsl #2
 968:	00070d41 	andeq	r0, r7, r1, asr #26
 96c:	0000001c 	andeq	r0, r0, ip, lsl r0
 970:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
 974:	200015e2 	andcs	r1, r0, r2, ror #11
 978:	000000a4 	andeq	r0, r0, r4, lsr #1
 97c:	40080e41 	andmi	r0, r8, r1, asr #28
 980:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 984:	180e4101 	stmdane	lr, {r0, r8, lr}
 988:	00070d41 	andeq	r0, r7, r1, asr #26
 98c:	0000000c 	andeq	r0, r0, ip
 990:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 994:	7c020001 	stcvc	0, cr0, [r2], {1}
 998:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 99c:	0000001c 	andeq	r0, r0, ip, lsl r0
 9a0:	0000098c 	andeq	r0, r0, ip, lsl #19
 9a4:	20001688 	andcs	r1, r0, r8, lsl #13
 9a8:	00000024 	andeq	r0, r0, r4, lsr #32
 9ac:	40080e41 	andmi	r0, r8, r1, asr #28
 9b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9b4:	100e4101 	andne	r4, lr, r1, lsl #2
 9b8:	00070d41 	andeq	r0, r7, r1, asr #26
 9bc:	00000024 	andeq	r0, r0, r4, lsr #32
 9c0:	0000098c 	andeq	r0, r0, ip, lsl #19
 9c4:	200016ac 	andcs	r1, r0, ip, lsr #13
 9c8:	000000f8 	strdeq	r0, [r0], -r8
 9cc:	40100e41 	andsmi	r0, r0, r1, asr #28
 9d0:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 9d4:	02874003 	addeq	r4, r7, #3
 9d8:	41018e40 	tstmi	r1, r0, asr #28
 9dc:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 9e0:	00000007 	andeq	r0, r0, r7
 9e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 9e8:	0000098c 	andeq	r0, r0, ip, lsl #19
 9ec:	200017a4 	andcs	r1, r0, r4, lsr #15
 9f0:	0000002c 	andeq	r0, r0, ip, lsr #32
 9f4:	40080e41 	andmi	r0, r8, r1, asr #28
 9f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9fc:	100e4101 	andne	r4, lr, r1, lsl #2
 a00:	00070d41 	andeq	r0, r7, r1, asr #26
 a04:	0000001c 	andeq	r0, r0, ip, lsl r0
 a08:	0000098c 	andeq	r0, r0, ip, lsl #19
 a0c:	200017d0 	ldrdcs	r1, [r0], -r0
 a10:	00000048 	andeq	r0, r0, r8, asr #32
 a14:	40080e41 	andmi	r0, r8, r1, asr #28
 a18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a1c:	100e4101 	andne	r4, lr, r1, lsl #2
 a20:	00070d41 	andeq	r0, r7, r1, asr #26
 a24:	0000001c 	andeq	r0, r0, ip, lsl r0
 a28:	0000098c 	andeq	r0, r0, ip, lsl #19
 a2c:	20001818 	andcs	r1, r0, r8, lsl r8
 a30:	00000034 	andeq	r0, r0, r4, lsr r0
 a34:	40080e41 	andmi	r0, r8, r1, asr #28
 a38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a3c:	100e4101 	andne	r4, lr, r1, lsl #2
 a40:	00070d41 	andeq	r0, r7, r1, asr #26
 a44:	0000000c 	andeq	r0, r0, ip
 a48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a4c:	7c020001 	stcvc	0, cr0, [r2], {1}
 a50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a54:	0000001c 	andeq	r0, r0, ip, lsl r0
 a58:	00000a44 	andeq	r0, r0, r4, asr #20
 a5c:	2000184c 	andcs	r1, r0, ip, asr #16
 a60:	00000028 	andeq	r0, r0, r8, lsr #32
 a64:	40080e41 	andmi	r0, r8, r1, asr #28
 a68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a6c:	100e4101 	andne	r4, lr, r1, lsl #2
 a70:	00070d41 	andeq	r0, r7, r1, asr #26
 a74:	0000001c 	andeq	r0, r0, ip, lsl r0
 a78:	00000a44 	andeq	r0, r0, r4, asr #20
 a7c:	20001874 	andcs	r1, r0, r4, ror r8
 a80:	00000062 	andeq	r0, r0, r2, rrx
 a84:	40080e41 	andmi	r0, r8, r1, asr #28
 a88:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a8c:	100e4101 	andne	r4, lr, r1, lsl #2
 a90:	00070d41 	andeq	r0, r7, r1, asr #26
 a94:	0000001c 	andeq	r0, r0, ip, lsl r0
 a98:	00000a44 	andeq	r0, r0, r4, asr #20
 a9c:	200018d6 	ldrdcs	r1, [r0], -r6
 aa0:	0000005e 	andeq	r0, r0, lr, asr r0
 aa4:	40080e41 	andmi	r0, r8, r1, asr #28
 aa8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 aac:	100e4101 	andne	r4, lr, r1, lsl #2
 ab0:	00070d41 	andeq	r0, r7, r1, asr #26
 ab4:	0000000c 	andeq	r0, r0, ip
 ab8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 abc:	7c020001 	stcvc	0, cr0, [r2], {1}
 ac0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ac4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ac8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 acc:	20001934 	andcs	r1, r0, r4, lsr r9
 ad0:	00000130 	andeq	r0, r0, r0, lsr r1
 ad4:	40080e41 	andmi	r0, r8, r1, asr #28
 ad8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 adc:	100e4101 	andne	r4, lr, r1, lsl #2
 ae0:	00070d41 	andeq	r0, r7, r1, asr #26
 ae4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ae8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 aec:	20001a64 	andcs	r1, r0, r4, ror #20
 af0:	00000194 	muleq	r0, r4, r1
 af4:	40080e41 	andmi	r0, r8, r1, asr #28
 af8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 afc:	300e4101 	andcc	r4, lr, r1, lsl #2
 b00:	00070d41 	andeq	r0, r7, r1, asr #26
 b04:	0000001c 	andeq	r0, r0, ip, lsl r0
 b08:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 b0c:	20001bf8 	strdcs	r1, [r0], -r8
 b10:	00000036 	andeq	r0, r0, r6, lsr r0
 b14:	40080e41 	andmi	r0, r8, r1, asr #28
 b18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b1c:	100e4101 	andne	r4, lr, r1, lsl #2
 b20:	00070d41 	andeq	r0, r7, r1, asr #26
 b24:	0000001c 	andeq	r0, r0, ip, lsl r0
 b28:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 b2c:	20001c2e 	andcs	r1, r0, lr, lsr #24
 b30:	00000056 	andeq	r0, r0, r6, asr r0
 b34:	40080e41 	andmi	r0, r8, r1, asr #28
 b38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b3c:	180e4101 	stmdane	lr, {r0, r8, lr}
 b40:	00070d41 	andeq	r0, r7, r1, asr #26
 b44:	0000001c 	andeq	r0, r0, ip, lsl r0
 b48:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 b4c:	20001c84 	andcs	r1, r0, r4, lsl #25
 b50:	00000028 	andeq	r0, r0, r8, lsr #32
 b54:	40080e41 	andmi	r0, r8, r1, asr #28
 b58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b5c:	100e4101 	andne	r4, lr, r1, lsl #2
 b60:	00070d41 	andeq	r0, r7, r1, asr #26
 b64:	0000001c 	andeq	r0, r0, ip, lsl r0
 b68:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 b6c:	20001cac 	andcs	r1, r0, ip, lsr #25
 b70:	00000048 	andeq	r0, r0, r8, asr #32
 b74:	40080e41 	andmi	r0, r8, r1, asr #28
 b78:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b7c:	100e4101 	andne	r4, lr, r1, lsl #2
 b80:	00070d41 	andeq	r0, r7, r1, asr #26
 b84:	0000001c 	andeq	r0, r0, ip, lsl r0
 b88:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 b8c:	20001cf4 	strdcs	r1, [r0], -r4
 b90:	0000003a 	andeq	r0, r0, sl, lsr r0
 b94:	40080e41 	andmi	r0, r8, r1, asr #28
 b98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b9c:	100e4101 	andne	r4, lr, r1, lsl #2
 ba0:	00070d41 	andeq	r0, r7, r1, asr #26
 ba4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ba8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 bac:	20001d2e 	andcs	r1, r0, lr, lsr #26
 bb0:	00000046 	andeq	r0, r0, r6, asr #32
 bb4:	40080e41 	andmi	r0, r8, r1, asr #28
 bb8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bbc:	100e4101 	andne	r4, lr, r1, lsl #2
 bc0:	00070d41 	andeq	r0, r7, r1, asr #26
 bc4:	0000001c 	andeq	r0, r0, ip, lsl r0
 bc8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 bcc:	20001d74 	andcs	r1, r0, r4, ror sp
 bd0:	00000048 	andeq	r0, r0, r8, asr #32
 bd4:	40080e41 	andmi	r0, r8, r1, asr #28
 bd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bdc:	100e4101 	andne	r4, lr, r1, lsl #2
 be0:	00070d41 	andeq	r0, r7, r1, asr #26
 be4:	0000001c 	andeq	r0, r0, ip, lsl r0
 be8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 bec:	20001dbc 			; <UNDEFINED> instruction: 0x20001dbc
 bf0:	00000024 	andeq	r0, r0, r4, lsr #32
 bf4:	40080e41 	andmi	r0, r8, r1, asr #28
 bf8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bfc:	100e4101 	andne	r4, lr, r1, lsl #2
 c00:	00070d41 	andeq	r0, r7, r1, asr #26
 c04:	0000001c 	andeq	r0, r0, ip, lsl r0
 c08:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 c0c:	20001de0 	andcs	r1, r0, r0, ror #27
 c10:	0000001c 	andeq	r0, r0, ip, lsl r0
 c14:	40080e41 	andmi	r0, r8, r1, asr #28
 c18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c1c:	100e4101 	andne	r4, lr, r1, lsl #2
 c20:	00070d41 	andeq	r0, r7, r1, asr #26
 c24:	0000001c 	andeq	r0, r0, ip, lsl r0
 c28:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 c2c:	20001dfc 	strdcs	r1, [r0], -ip
 c30:	0000003a 	andeq	r0, r0, sl, lsr r0
 c34:	40080e41 	andmi	r0, r8, r1, asr #28
 c38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c3c:	100e4101 	andne	r4, lr, r1, lsl #2
 c40:	00070d41 	andeq	r0, r7, r1, asr #26
 c44:	0000001c 	andeq	r0, r0, ip, lsl r0
 c48:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 c4c:	20001e36 	andcs	r1, r0, r6, lsr lr
 c50:	00000040 	andeq	r0, r0, r0, asr #32
 c54:	40080e41 	andmi	r0, r8, r1, asr #28
 c58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c5c:	100e4101 	andne	r4, lr, r1, lsl #2
 c60:	00070d41 	andeq	r0, r7, r1, asr #26
 c64:	0000001c 	andeq	r0, r0, ip, lsl r0
 c68:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 c6c:	20001e76 	andcs	r1, r0, r6, ror lr
 c70:	0000003e 	andeq	r0, r0, lr, lsr r0
 c74:	40080e41 	andmi	r0, r8, r1, asr #28
 c78:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c7c:	100e4101 	andne	r4, lr, r1, lsl #2
 c80:	00070d41 	andeq	r0, r7, r1, asr #26
 c84:	0000001c 	andeq	r0, r0, ip, lsl r0
 c88:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 c8c:	20001eb4 			; <UNDEFINED> instruction: 0x20001eb4
 c90:	00000038 	andeq	r0, r0, r8, lsr r0
 c94:	40080e41 	andmi	r0, r8, r1, asr #28
 c98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c9c:	100e4101 	andne	r4, lr, r1, lsl #2
 ca0:	00070d41 	andeq	r0, r7, r1, asr #26
 ca4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ca8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 cac:	20001eec 	andcs	r1, r0, ip, ror #29
 cb0:	00000048 	andeq	r0, r0, r8, asr #32
 cb4:	40080e41 	andmi	r0, r8, r1, asr #28
 cb8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cbc:	100e4101 	andne	r4, lr, r1, lsl #2
 cc0:	00070d41 	andeq	r0, r7, r1, asr #26
 cc4:	0000001c 	andeq	r0, r0, ip, lsl r0
 cc8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 ccc:	20001f34 	andcs	r1, r0, r4, lsr pc
 cd0:	00000020 	andeq	r0, r0, r0, lsr #32
 cd4:	40080e41 	andmi	r0, r8, r1, asr #28
 cd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cdc:	100e4101 	andne	r4, lr, r1, lsl #2
 ce0:	00070d41 	andeq	r0, r7, r1, asr #26
 ce4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ce8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 cec:	20001f54 	andcs	r1, r0, r4, asr pc
 cf0:	00000040 	andeq	r0, r0, r0, asr #32
 cf4:	40080e41 	andmi	r0, r8, r1, asr #28
 cf8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cfc:	100e4101 	andne	r4, lr, r1, lsl #2
 d00:	00070d41 	andeq	r0, r7, r1, asr #26
 d04:	0000001c 	andeq	r0, r0, ip, lsl r0
 d08:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 d0c:	20001f94 	mulcs	r0, r4, pc	; <UNPREDICTABLE>
 d10:	0000003e 	andeq	r0, r0, lr, lsr r0
 d14:	40080e41 	andmi	r0, r8, r1, asr #28
 d18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d1c:	100e4101 	andne	r4, lr, r1, lsl #2
 d20:	00070d41 	andeq	r0, r7, r1, asr #26
 d24:	0000001c 	andeq	r0, r0, ip, lsl r0
 d28:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 d2c:	20001fd2 	ldrdcs	r1, [r0], -r2
 d30:	00000040 	andeq	r0, r0, r0, asr #32
 d34:	40080e41 	andmi	r0, r8, r1, asr #28
 d38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d3c:	100e4101 	andne	r4, lr, r1, lsl #2
 d40:	00070d41 	andeq	r0, r7, r1, asr #26
 d44:	0000001c 	andeq	r0, r0, ip, lsl r0
 d48:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 d4c:	20002012 	andcs	r2, r0, r2, lsl r0
 d50:	00000040 	andeq	r0, r0, r0, asr #32
 d54:	40080e41 	andmi	r0, r8, r1, asr #28
 d58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d5c:	100e4101 	andne	r4, lr, r1, lsl #2
 d60:	00070d41 	andeq	r0, r7, r1, asr #26
 d64:	0000001c 	andeq	r0, r0, ip, lsl r0
 d68:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 d6c:	20002052 	andcs	r2, r0, r2, asr r0
 d70:	00000038 	andeq	r0, r0, r8, lsr r0
 d74:	40080e41 	andmi	r0, r8, r1, asr #28
 d78:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d7c:	100e4101 	andne	r4, lr, r1, lsl #2
 d80:	00070d41 	andeq	r0, r7, r1, asr #26
 d84:	0000001c 	andeq	r0, r0, ip, lsl r0
 d88:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 d8c:	2000208a 	andcs	r2, r0, sl, lsl #1
 d90:	00000040 	andeq	r0, r0, r0, asr #32
 d94:	40080e41 	andmi	r0, r8, r1, asr #28
 d98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d9c:	100e4101 	andne	r4, lr, r1, lsl #2
 da0:	00070d41 	andeq	r0, r7, r1, asr #26
 da4:	0000001c 	andeq	r0, r0, ip, lsl r0
 da8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 dac:	200020ca 	andcs	r2, r0, sl, asr #1
 db0:	00000052 	andeq	r0, r0, r2, asr r0
 db4:	40080e41 	andmi	r0, r8, r1, asr #28
 db8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 dbc:	100e4101 	andne	r4, lr, r1, lsl #2
 dc0:	00070d41 	andeq	r0, r7, r1, asr #26
 dc4:	0000001c 	andeq	r0, r0, ip, lsl r0
 dc8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 dcc:	2000211c 	andcs	r2, r0, ip, lsl r1
 dd0:	0000009a 	muleq	r0, sl, r0
 dd4:	40080e41 	andmi	r0, r8, r1, asr #28
 dd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ddc:	200e4101 	andcs	r4, lr, r1, lsl #2
 de0:	00070d41 	andeq	r0, r7, r1, asr #26
 de4:	0000001c 	andeq	r0, r0, ip, lsl r0
 de8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 dec:	200021b6 			; <UNDEFINED> instruction: 0x200021b6
 df0:	00000048 	andeq	r0, r0, r8, asr #32
 df4:	40080e41 	andmi	r0, r8, r1, asr #28
 df8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 dfc:	180e4101 	stmdane	lr, {r0, r8, lr}
 e00:	00070d41 	andeq	r0, r7, r1, asr #26
 e04:	0000001c 	andeq	r0, r0, ip, lsl r0
 e08:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 e0c:	200021fe 	strdcs	r2, [r0], -lr
 e10:	00000022 	andeq	r0, r0, r2, lsr #32
 e14:	40080e41 	andmi	r0, r8, r1, asr #28
 e18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e1c:	100e4101 	andne	r4, lr, r1, lsl #2
 e20:	00070d41 	andeq	r0, r7, r1, asr #26
 e24:	0000001c 	andeq	r0, r0, ip, lsl r0
 e28:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 e2c:	20002220 	andcs	r2, r0, r0, lsr #4
 e30:	000000ca 	andeq	r0, r0, sl, asr #1
 e34:	40080e41 	andmi	r0, r8, r1, asr #28
 e38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e3c:	200e4101 	andcs	r4, lr, r1, lsl #2
 e40:	00070d41 	andeq	r0, r7, r1, asr #26
 e44:	0000001c 	andeq	r0, r0, ip, lsl r0
 e48:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 e4c:	200022ea 	andcs	r2, r0, sl, ror #5
 e50:	00000048 	andeq	r0, r0, r8, asr #32
 e54:	40080e41 	andmi	r0, r8, r1, asr #28
 e58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e5c:	180e4101 	stmdane	lr, {r0, r8, lr}
 e60:	00070d41 	andeq	r0, r7, r1, asr #26
 e64:	0000000c 	andeq	r0, r0, ip
 e68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 e6c:	7c020001 	stcvc	0, cr0, [r2], {1}
 e70:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 e74:	00000020 	andeq	r0, r0, r0, lsr #32
 e78:	00000e64 	andeq	r0, r0, r4, ror #28
 e7c:	20002334 	andcs	r2, r0, r4, lsr r3
 e80:	00000098 	muleq	r0, r8, r0
 e84:	400c0e41 	andmi	r0, ip, r1, asr #28
 e88:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 e8c:	018e4002 	orreq	r4, lr, r2
 e90:	41180e41 	tstmi	r8, r1, asr #28
 e94:	0000070d 	andeq	r0, r0, sp, lsl #14
 e98:	00000020 	andeq	r0, r0, r0, lsr #32
 e9c:	00000e64 	andeq	r0, r0, r4, ror #28
 ea0:	200023cc 	andcs	r2, r0, ip, asr #7
 ea4:	00000128 	andeq	r0, r0, r8, lsr #2
 ea8:	400c0e41 	andmi	r0, ip, r1, asr #28
 eac:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 eb0:	018e4002 	orreq	r4, lr, r2
 eb4:	41300e41 	teqmi	r0, r1, asr #28
 eb8:	0000070d 	andeq	r0, r0, sp, lsl #14
 ebc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ec0:	00000e64 	andeq	r0, r0, r4, ror #28
 ec4:	200024f4 	strdcs	r2, [r0], -r4
 ec8:	00000048 	andeq	r0, r0, r8, asr #32
 ecc:	40080e41 	andmi	r0, r8, r1, asr #28
 ed0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ed4:	100e4101 	andne	r4, lr, r1, lsl #2
 ed8:	00070d41 	andeq	r0, r7, r1, asr #26
 edc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ee0:	00000e64 	andeq	r0, r0, r4, ror #28
 ee4:	2000253c 	andcs	r2, r0, ip, lsr r5
 ee8:	00000032 	andeq	r0, r0, r2, lsr r0
 eec:	40080e41 	andmi	r0, r8, r1, asr #28
 ef0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ef4:	100e4101 	andne	r4, lr, r1, lsl #2
 ef8:	00070d41 	andeq	r0, r7, r1, asr #26
 efc:	0000001c 	andeq	r0, r0, ip, lsl r0
 f00:	00000e64 	andeq	r0, r0, r4, ror #28
 f04:	2000256e 	andcs	r2, r0, lr, ror #10
 f08:	000000c4 	andeq	r0, r0, r4, asr #1
 f0c:	40080e41 	andmi	r0, r8, r1, asr #28
 f10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 f14:	380e4101 	stmdacc	lr, {r0, r8, lr}
 f18:	00070d41 	andeq	r0, r7, r1, asr #26
 f1c:	0000001c 	andeq	r0, r0, ip, lsl r0
 f20:	00000e64 	andeq	r0, r0, r4, ror #28
 f24:	20002632 	andcs	r2, r0, r2, lsr r6
 f28:	0000001c 	andeq	r0, r0, ip, lsl r0
 f2c:	40080e41 	andmi	r0, r8, r1, asr #28
 f30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 f34:	100e4101 	andne	r4, lr, r1, lsl #2
 f38:	00070d41 	andeq	r0, r7, r1, asr #26
 f3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 f40:	00000e64 	andeq	r0, r0, r4, ror #28
 f44:	2000264e 	andcs	r2, r0, lr, asr #12
 f48:	00000026 	andeq	r0, r0, r6, lsr #32
 f4c:	40080e41 	andmi	r0, r8, r1, asr #28
 f50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 f54:	100e4101 	andne	r4, lr, r1, lsl #2
 f58:	00070d41 	andeq	r0, r7, r1, asr #26
 f5c:	0000000c 	andeq	r0, r0, ip
 f60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 f64:	7c010001 	stcvc	0, cr0, [r1], {1}
 f68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 f6c:	0000000c 	andeq	r0, r0, ip
 f70:	00000f5c 	andeq	r0, r0, ip, asr pc
 f74:	20002675 	andcs	r2, r0, r5, ror r6
 f78:	0000010a 	andeq	r0, r0, sl, lsl #2
 f7c:	0000000c 	andeq	r0, r0, ip
 f80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 f84:	7c020001 	stcvc	0, cr0, [r2], {1}
 f88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 f8c:	00000020 	andeq	r0, r0, r0, lsr #32
 f90:	00000f7c 	andeq	r0, r0, ip, ror pc
 f94:	2000278c 	andcs	r2, r0, ip, lsl #15
 f98:	00000054 	andeq	r0, r0, r4, asr r0
 f9c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 fa0:	86048505 	strhi	r8, [r4], -r5, lsl #10
 fa4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 fa8:	1c0e4601 	stcne	6, cr4, [lr], {1}
 fac:	06890788 	streq	r0, [r9], r8, lsl #15
