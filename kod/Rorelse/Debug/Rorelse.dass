
./Debug/Rorelse.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:



void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fc90 	bl	20000928 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
20000018:	687b      	ldr	r3, [r7, #4]
2000001a:	4a4e      	ldr	r2, [pc, #312]	; (20000154 <GPIO_DeInit+0x144>)
2000001c:	4293      	cmp	r3, r2
2000001e:	d108      	bne.n	20000032 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000020:	2101      	movs	r1, #1
20000022:	2001      	movs	r0, #1
20000024:	f001 f90a 	bl	2000123c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20000028:	2100      	movs	r1, #0
2000002a:	2001      	movs	r0, #1
2000002c:	f001 f906 	bl	2000123c <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
20000030:	e08c      	b.n	2000014c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
20000032:	687b      	ldr	r3, [r7, #4]
20000034:	4a48      	ldr	r2, [pc, #288]	; (20000158 <GPIO_DeInit+0x148>)
20000036:	4293      	cmp	r3, r2
20000038:	d108      	bne.n	2000004c <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
2000003a:	2101      	movs	r1, #1
2000003c:	2002      	movs	r0, #2
2000003e:	f001 f8fd 	bl	2000123c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
20000042:	2100      	movs	r1, #0
20000044:	2002      	movs	r0, #2
20000046:	f001 f8f9 	bl	2000123c <RCC_AHB1PeriphResetCmd>
}
2000004a:	e07f      	b.n	2000014c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
2000004c:	687b      	ldr	r3, [r7, #4]
2000004e:	4a43      	ldr	r2, [pc, #268]	; (2000015c <GPIO_DeInit+0x14c>)
20000050:	4293      	cmp	r3, r2
20000052:	d108      	bne.n	20000066 <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20000054:	2101      	movs	r1, #1
20000056:	2004      	movs	r0, #4
20000058:	f001 f8f0 	bl	2000123c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
2000005c:	2100      	movs	r1, #0
2000005e:	2004      	movs	r0, #4
20000060:	f001 f8ec 	bl	2000123c <RCC_AHB1PeriphResetCmd>
}
20000064:	e072      	b.n	2000014c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
20000066:	687b      	ldr	r3, [r7, #4]
20000068:	4a3d      	ldr	r2, [pc, #244]	; (20000160 <GPIO_DeInit+0x150>)
2000006a:	4293      	cmp	r3, r2
2000006c:	d108      	bne.n	20000080 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
2000006e:	2101      	movs	r1, #1
20000070:	2008      	movs	r0, #8
20000072:	f001 f8e3 	bl	2000123c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
20000076:	2100      	movs	r1, #0
20000078:	2008      	movs	r0, #8
2000007a:	f001 f8df 	bl	2000123c <RCC_AHB1PeriphResetCmd>
}
2000007e:	e065      	b.n	2000014c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
20000080:	687b      	ldr	r3, [r7, #4]
20000082:	4a38      	ldr	r2, [pc, #224]	; (20000164 <GPIO_DeInit+0x154>)
20000084:	4293      	cmp	r3, r2
20000086:	d108      	bne.n	2000009a <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000088:	2101      	movs	r1, #1
2000008a:	2010      	movs	r0, #16
2000008c:	f001 f8d6 	bl	2000123c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20000090:	2100      	movs	r1, #0
20000092:	2010      	movs	r0, #16
20000094:	f001 f8d2 	bl	2000123c <RCC_AHB1PeriphResetCmd>
}
20000098:	e058      	b.n	2000014c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
2000009a:	687b      	ldr	r3, [r7, #4]
2000009c:	4a32      	ldr	r2, [pc, #200]	; (20000168 <GPIO_DeInit+0x158>)
2000009e:	4293      	cmp	r3, r2
200000a0:	d108      	bne.n	200000b4 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
200000a2:	2101      	movs	r1, #1
200000a4:	2020      	movs	r0, #32
200000a6:	f001 f8c9 	bl	2000123c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
200000aa:	2100      	movs	r1, #0
200000ac:	2020      	movs	r0, #32
200000ae:	f001 f8c5 	bl	2000123c <RCC_AHB1PeriphResetCmd>
}
200000b2:	e04b      	b.n	2000014c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
200000b4:	687b      	ldr	r3, [r7, #4]
200000b6:	4a2d      	ldr	r2, [pc, #180]	; (2000016c <GPIO_DeInit+0x15c>)
200000b8:	4293      	cmp	r3, r2
200000ba:	d108      	bne.n	200000ce <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
200000bc:	2101      	movs	r1, #1
200000be:	2040      	movs	r0, #64	; 0x40
200000c0:	f001 f8bc 	bl	2000123c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
200000c4:	2100      	movs	r1, #0
200000c6:	2040      	movs	r0, #64	; 0x40
200000c8:	f001 f8b8 	bl	2000123c <RCC_AHB1PeriphResetCmd>
}
200000cc:	e03e      	b.n	2000014c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
200000ce:	687b      	ldr	r3, [r7, #4]
200000d0:	4a27      	ldr	r2, [pc, #156]	; (20000170 <GPIO_DeInit+0x160>)
200000d2:	4293      	cmp	r3, r2
200000d4:	d108      	bne.n	200000e8 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
200000d6:	2101      	movs	r1, #1
200000d8:	2080      	movs	r0, #128	; 0x80
200000da:	f001 f8af 	bl	2000123c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
200000de:	2100      	movs	r1, #0
200000e0:	2080      	movs	r0, #128	; 0x80
200000e2:	f001 f8ab 	bl	2000123c <RCC_AHB1PeriphResetCmd>
}
200000e6:	e031      	b.n	2000014c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
200000e8:	687b      	ldr	r3, [r7, #4]
200000ea:	4a22      	ldr	r2, [pc, #136]	; (20000174 <GPIO_DeInit+0x164>)
200000ec:	4293      	cmp	r3, r2
200000ee:	d10c      	bne.n	2000010a <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
200000f0:	2380      	movs	r3, #128	; 0x80
200000f2:	005b      	lsls	r3, r3, #1
200000f4:	2101      	movs	r1, #1
200000f6:	0018      	movs	r0, r3
200000f8:	f001 f8a0 	bl	2000123c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
200000fc:	2380      	movs	r3, #128	; 0x80
200000fe:	005b      	lsls	r3, r3, #1
20000100:	2100      	movs	r1, #0
20000102:	0018      	movs	r0, r3
20000104:	f001 f89a 	bl	2000123c <RCC_AHB1PeriphResetCmd>
}
20000108:	e020      	b.n	2000014c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
2000010a:	687b      	ldr	r3, [r7, #4]
2000010c:	4a1a      	ldr	r2, [pc, #104]	; (20000178 <GPIO_DeInit+0x168>)
2000010e:	4293      	cmp	r3, r2
20000110:	d10c      	bne.n	2000012c <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
20000112:	2380      	movs	r3, #128	; 0x80
20000114:	009b      	lsls	r3, r3, #2
20000116:	2101      	movs	r1, #1
20000118:	0018      	movs	r0, r3
2000011a:	f001 f88f 	bl	2000123c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
2000011e:	2380      	movs	r3, #128	; 0x80
20000120:	009b      	lsls	r3, r3, #2
20000122:	2100      	movs	r1, #0
20000124:	0018      	movs	r0, r3
20000126:	f001 f889 	bl	2000123c <RCC_AHB1PeriphResetCmd>
}
2000012a:	e00f      	b.n	2000014c <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
2000012c:	687b      	ldr	r3, [r7, #4]
2000012e:	4a13      	ldr	r2, [pc, #76]	; (2000017c <GPIO_DeInit+0x16c>)
20000130:	4293      	cmp	r3, r2
20000132:	d10b      	bne.n	2000014c <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
20000134:	2380      	movs	r3, #128	; 0x80
20000136:	00db      	lsls	r3, r3, #3
20000138:	2101      	movs	r1, #1
2000013a:	0018      	movs	r0, r3
2000013c:	f001 f87e 	bl	2000123c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20000140:	2380      	movs	r3, #128	; 0x80
20000142:	00db      	lsls	r3, r3, #3
20000144:	2100      	movs	r1, #0
20000146:	0018      	movs	r0, r3
20000148:	f001 f878 	bl	2000123c <RCC_AHB1PeriphResetCmd>
}
2000014c:	46c0      	nop			; (mov r8, r8)
2000014e:	46bd      	mov	sp, r7
20000150:	b002      	add	sp, #8
20000152:	bd80      	pop	{r7, pc}
20000154:	40020000 	andmi	r0, r2, r0
20000158:	40020400 	andmi	r0, r2, r0, lsl #8
2000015c:	40020800 	andmi	r0, r2, r0, lsl #16
20000160:	40020c00 	andmi	r0, r2, r0, lsl #24
20000164:	40021000 	andmi	r1, r2, r0
20000168:	40021400 	andmi	r1, r2, r0, lsl #8
2000016c:	40021800 	andmi	r1, r2, r0, lsl #16
20000170:	40021c00 	andmi	r1, r2, r0, lsl #24
20000174:	40022000 	andmi	r2, r2, r0
20000178:	40022400 	andmi	r2, r2, r0, lsl #8
2000017c:	40022800 	andmi	r2, r2, r0, lsl #16

20000180 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
20000180:	b580      	push	{r7, lr}
20000182:	b086      	sub	sp, #24
20000184:	af00      	add	r7, sp, #0
20000186:	6078      	str	r0, [r7, #4]
20000188:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
2000018a:	2300      	movs	r3, #0
2000018c:	617b      	str	r3, [r7, #20]
2000018e:	2300      	movs	r3, #0
20000190:	613b      	str	r3, [r7, #16]
20000192:	2300      	movs	r3, #0
20000194:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20000196:	2300      	movs	r3, #0
20000198:	617b      	str	r3, [r7, #20]
2000019a:	e076      	b.n	2000028a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
2000019c:	2201      	movs	r2, #1
2000019e:	697b      	ldr	r3, [r7, #20]
200001a0:	409a      	lsls	r2, r3
200001a2:	0013      	movs	r3, r2
200001a4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
200001a6:	683b      	ldr	r3, [r7, #0]
200001a8:	681a      	ldr	r2, [r3, #0]
200001aa:	693b      	ldr	r3, [r7, #16]
200001ac:	4013      	ands	r3, r2
200001ae:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
200001b0:	68fa      	ldr	r2, [r7, #12]
200001b2:	693b      	ldr	r3, [r7, #16]
200001b4:	429a      	cmp	r2, r3
200001b6:	d165      	bne.n	20000284 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
200001b8:	687b      	ldr	r3, [r7, #4]
200001ba:	681b      	ldr	r3, [r3, #0]
200001bc:	697a      	ldr	r2, [r7, #20]
200001be:	0052      	lsls	r2, r2, #1
200001c0:	2103      	movs	r1, #3
200001c2:	4091      	lsls	r1, r2
200001c4:	000a      	movs	r2, r1
200001c6:	43d2      	mvns	r2, r2
200001c8:	401a      	ands	r2, r3
200001ca:	687b      	ldr	r3, [r7, #4]
200001cc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
200001ce:	687b      	ldr	r3, [r7, #4]
200001d0:	681a      	ldr	r2, [r3, #0]
200001d2:	683b      	ldr	r3, [r7, #0]
200001d4:	791b      	ldrb	r3, [r3, #4]
200001d6:	0019      	movs	r1, r3
200001d8:	697b      	ldr	r3, [r7, #20]
200001da:	005b      	lsls	r3, r3, #1
200001dc:	4099      	lsls	r1, r3
200001de:	000b      	movs	r3, r1
200001e0:	431a      	orrs	r2, r3
200001e2:	687b      	ldr	r3, [r7, #4]
200001e4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
200001e6:	683b      	ldr	r3, [r7, #0]
200001e8:	791b      	ldrb	r3, [r3, #4]
200001ea:	2b01      	cmp	r3, #1
200001ec:	d003      	beq.n	200001f6 <GPIO_Init+0x76>
200001ee:	683b      	ldr	r3, [r7, #0]
200001f0:	791b      	ldrb	r3, [r3, #4]
200001f2:	2b02      	cmp	r3, #2
200001f4:	d12e      	bne.n	20000254 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
200001f6:	687b      	ldr	r3, [r7, #4]
200001f8:	689b      	ldr	r3, [r3, #8]
200001fa:	697a      	ldr	r2, [r7, #20]
200001fc:	0052      	lsls	r2, r2, #1
200001fe:	2103      	movs	r1, #3
20000200:	4091      	lsls	r1, r2
20000202:	000a      	movs	r2, r1
20000204:	43d2      	mvns	r2, r2
20000206:	401a      	ands	r2, r3
20000208:	687b      	ldr	r3, [r7, #4]
2000020a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
2000020c:	687b      	ldr	r3, [r7, #4]
2000020e:	689a      	ldr	r2, [r3, #8]
20000210:	683b      	ldr	r3, [r7, #0]
20000212:	795b      	ldrb	r3, [r3, #5]
20000214:	0019      	movs	r1, r3
20000216:	697b      	ldr	r3, [r7, #20]
20000218:	005b      	lsls	r3, r3, #1
2000021a:	4099      	lsls	r1, r3
2000021c:	000b      	movs	r3, r1
2000021e:	431a      	orrs	r2, r3
20000220:	687b      	ldr	r3, [r7, #4]
20000222:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
20000224:	687b      	ldr	r3, [r7, #4]
20000226:	685b      	ldr	r3, [r3, #4]
20000228:	697a      	ldr	r2, [r7, #20]
2000022a:	b292      	uxth	r2, r2
2000022c:	0011      	movs	r1, r2
2000022e:	2201      	movs	r2, #1
20000230:	408a      	lsls	r2, r1
20000232:	43d2      	mvns	r2, r2
20000234:	401a      	ands	r2, r3
20000236:	687b      	ldr	r3, [r7, #4]
20000238:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
2000023a:	687b      	ldr	r3, [r7, #4]
2000023c:	685b      	ldr	r3, [r3, #4]
2000023e:	683a      	ldr	r2, [r7, #0]
20000240:	7992      	ldrb	r2, [r2, #6]
20000242:	0011      	movs	r1, r2
20000244:	697a      	ldr	r2, [r7, #20]
20000246:	b292      	uxth	r2, r2
20000248:	4091      	lsls	r1, r2
2000024a:	000a      	movs	r2, r1
2000024c:	b292      	uxth	r2, r2
2000024e:	431a      	orrs	r2, r3
20000250:	687b      	ldr	r3, [r7, #4]
20000252:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20000254:	687b      	ldr	r3, [r7, #4]
20000256:	68db      	ldr	r3, [r3, #12]
20000258:	697a      	ldr	r2, [r7, #20]
2000025a:	b292      	uxth	r2, r2
2000025c:	0052      	lsls	r2, r2, #1
2000025e:	2103      	movs	r1, #3
20000260:	4091      	lsls	r1, r2
20000262:	000a      	movs	r2, r1
20000264:	43d2      	mvns	r2, r2
20000266:	401a      	ands	r2, r3
20000268:	687b      	ldr	r3, [r7, #4]
2000026a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
2000026c:	687b      	ldr	r3, [r7, #4]
2000026e:	68da      	ldr	r2, [r3, #12]
20000270:	683b      	ldr	r3, [r7, #0]
20000272:	79db      	ldrb	r3, [r3, #7]
20000274:	0019      	movs	r1, r3
20000276:	697b      	ldr	r3, [r7, #20]
20000278:	005b      	lsls	r3, r3, #1
2000027a:	4099      	lsls	r1, r3
2000027c:	000b      	movs	r3, r1
2000027e:	431a      	orrs	r2, r3
20000280:	687b      	ldr	r3, [r7, #4]
20000282:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20000284:	697b      	ldr	r3, [r7, #20]
20000286:	3301      	adds	r3, #1
20000288:	617b      	str	r3, [r7, #20]
2000028a:	697b      	ldr	r3, [r7, #20]
2000028c:	2b0f      	cmp	r3, #15
2000028e:	d985      	bls.n	2000019c <GPIO_Init+0x1c>
    }
  }
}
20000290:	46c0      	nop			; (mov r8, r8)
20000292:	46bd      	mov	sp, r7
20000294:	b006      	add	sp, #24
20000296:	bd80      	pop	{r7, pc}

20000298 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20000298:	b580      	push	{r7, lr}
2000029a:	b082      	sub	sp, #8
2000029c:	af00      	add	r7, sp, #0
2000029e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
200002a0:	687b      	ldr	r3, [r7, #4]
200002a2:	4a09      	ldr	r2, [pc, #36]	; (200002c8 <GPIO_StructInit+0x30>)
200002a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
200002a6:	687b      	ldr	r3, [r7, #4]
200002a8:	2200      	movs	r2, #0
200002aa:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
200002ac:	687b      	ldr	r3, [r7, #4]
200002ae:	2200      	movs	r2, #0
200002b0:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
200002b2:	687b      	ldr	r3, [r7, #4]
200002b4:	2200      	movs	r2, #0
200002b6:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
200002b8:	687b      	ldr	r3, [r7, #4]
200002ba:	2200      	movs	r2, #0
200002bc:	71da      	strb	r2, [r3, #7]
}
200002be:	46c0      	nop			; (mov r8, r8)
200002c0:	46bd      	mov	sp, r7
200002c2:	b002      	add	sp, #8
200002c4:	bd80      	pop	{r7, pc}
200002c6:	46c0      	nop			; (mov r8, r8)
200002c8:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

200002cc <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200002cc:	b580      	push	{r7, lr}
200002ce:	b084      	sub	sp, #16
200002d0:	af00      	add	r7, sp, #0
200002d2:	6078      	str	r0, [r7, #4]
200002d4:	000a      	movs	r2, r1
200002d6:	1cbb      	adds	r3, r7, #2
200002d8:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
200002da:	2380      	movs	r3, #128	; 0x80
200002dc:	025b      	lsls	r3, r3, #9
200002de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
200002e0:	1cbb      	adds	r3, r7, #2
200002e2:	881a      	ldrh	r2, [r3, #0]
200002e4:	68fb      	ldr	r3, [r7, #12]
200002e6:	4313      	orrs	r3, r2
200002e8:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200002ea:	68fa      	ldr	r2, [r7, #12]
200002ec:	687b      	ldr	r3, [r7, #4]
200002ee:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
200002f0:	1cbb      	adds	r3, r7, #2
200002f2:	881a      	ldrh	r2, [r3, #0]
200002f4:	687b      	ldr	r3, [r7, #4]
200002f6:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200002f8:	68fa      	ldr	r2, [r7, #12]
200002fa:	687b      	ldr	r3, [r7, #4]
200002fc:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200002fe:	687b      	ldr	r3, [r7, #4]
20000300:	69db      	ldr	r3, [r3, #28]
20000302:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20000304:	687b      	ldr	r3, [r7, #4]
20000306:	69db      	ldr	r3, [r3, #28]
20000308:	60fb      	str	r3, [r7, #12]
}
2000030a:	46c0      	nop			; (mov r8, r8)
2000030c:	46bd      	mov	sp, r7
2000030e:	b004      	add	sp, #16
20000310:	bd80      	pop	{r7, pc}

20000312 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20000312:	b580      	push	{r7, lr}
20000314:	b084      	sub	sp, #16
20000316:	af00      	add	r7, sp, #0
20000318:	6078      	str	r0, [r7, #4]
2000031a:	000a      	movs	r2, r1
2000031c:	1cbb      	adds	r3, r7, #2
2000031e:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20000320:	230f      	movs	r3, #15
20000322:	18fb      	adds	r3, r7, r3
20000324:	2200      	movs	r2, #0
20000326:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20000328:	687b      	ldr	r3, [r7, #4]
2000032a:	691b      	ldr	r3, [r3, #16]
2000032c:	1cba      	adds	r2, r7, #2
2000032e:	8812      	ldrh	r2, [r2, #0]
20000330:	4013      	ands	r3, r2
20000332:	d004      	beq.n	2000033e <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20000334:	230f      	movs	r3, #15
20000336:	18fb      	adds	r3, r7, r3
20000338:	2201      	movs	r2, #1
2000033a:	701a      	strb	r2, [r3, #0]
2000033c:	e003      	b.n	20000346 <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
2000033e:	230f      	movs	r3, #15
20000340:	18fb      	adds	r3, r7, r3
20000342:	2200      	movs	r2, #0
20000344:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20000346:	230f      	movs	r3, #15
20000348:	18fb      	adds	r3, r7, r3
2000034a:	781b      	ldrb	r3, [r3, #0]
}
2000034c:	0018      	movs	r0, r3
2000034e:	46bd      	mov	sp, r7
20000350:	b004      	add	sp, #16
20000352:	bd80      	pop	{r7, pc}

20000354 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20000354:	b580      	push	{r7, lr}
20000356:	b082      	sub	sp, #8
20000358:	af00      	add	r7, sp, #0
2000035a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
2000035c:	687b      	ldr	r3, [r7, #4]
2000035e:	691b      	ldr	r3, [r3, #16]
20000360:	b29b      	uxth	r3, r3
}
20000362:	0018      	movs	r0, r3
20000364:	46bd      	mov	sp, r7
20000366:	b002      	add	sp, #8
20000368:	bd80      	pop	{r7, pc}

2000036a <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000036a:	b580      	push	{r7, lr}
2000036c:	b084      	sub	sp, #16
2000036e:	af00      	add	r7, sp, #0
20000370:	6078      	str	r0, [r7, #4]
20000372:	000a      	movs	r2, r1
20000374:	1cbb      	adds	r3, r7, #2
20000376:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20000378:	230f      	movs	r3, #15
2000037a:	18fb      	adds	r3, r7, r3
2000037c:	2200      	movs	r2, #0
2000037e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
20000380:	687b      	ldr	r3, [r7, #4]
20000382:	695b      	ldr	r3, [r3, #20]
20000384:	1cba      	adds	r2, r7, #2
20000386:	8812      	ldrh	r2, [r2, #0]
20000388:	4013      	ands	r3, r2
2000038a:	d004      	beq.n	20000396 <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
2000038c:	230f      	movs	r3, #15
2000038e:	18fb      	adds	r3, r7, r3
20000390:	2201      	movs	r2, #1
20000392:	701a      	strb	r2, [r3, #0]
20000394:	e003      	b.n	2000039e <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20000396:	230f      	movs	r3, #15
20000398:	18fb      	adds	r3, r7, r3
2000039a:	2200      	movs	r2, #0
2000039c:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
2000039e:	230f      	movs	r3, #15
200003a0:	18fb      	adds	r3, r7, r3
200003a2:	781b      	ldrb	r3, [r3, #0]
}
200003a4:	0018      	movs	r0, r3
200003a6:	46bd      	mov	sp, r7
200003a8:	b004      	add	sp, #16
200003aa:	bd80      	pop	{r7, pc}

200003ac <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
200003ac:	b580      	push	{r7, lr}
200003ae:	b082      	sub	sp, #8
200003b0:	af00      	add	r7, sp, #0
200003b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
200003b4:	687b      	ldr	r3, [r7, #4]
200003b6:	695b      	ldr	r3, [r3, #20]
200003b8:	b29b      	uxth	r3, r3
}
200003ba:	0018      	movs	r0, r3
200003bc:	46bd      	mov	sp, r7
200003be:	b002      	add	sp, #8
200003c0:	bd80      	pop	{r7, pc}

200003c2 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200003c2:	b580      	push	{r7, lr}
200003c4:	b082      	sub	sp, #8
200003c6:	af00      	add	r7, sp, #0
200003c8:	6078      	str	r0, [r7, #4]
200003ca:	000a      	movs	r2, r1
200003cc:	1cbb      	adds	r3, r7, #2
200003ce:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
200003d0:	687b      	ldr	r3, [r7, #4]
200003d2:	1cba      	adds	r2, r7, #2
200003d4:	8812      	ldrh	r2, [r2, #0]
200003d6:	831a      	strh	r2, [r3, #24]
}
200003d8:	46c0      	nop			; (mov r8, r8)
200003da:	46bd      	mov	sp, r7
200003dc:	b002      	add	sp, #8
200003de:	bd80      	pop	{r7, pc}

200003e0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200003e0:	b580      	push	{r7, lr}
200003e2:	b082      	sub	sp, #8
200003e4:	af00      	add	r7, sp, #0
200003e6:	6078      	str	r0, [r7, #4]
200003e8:	000a      	movs	r2, r1
200003ea:	1cbb      	adds	r3, r7, #2
200003ec:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
200003ee:	687b      	ldr	r3, [r7, #4]
200003f0:	1cba      	adds	r2, r7, #2
200003f2:	8812      	ldrh	r2, [r2, #0]
200003f4:	835a      	strh	r2, [r3, #26]
}
200003f6:	46c0      	nop			; (mov r8, r8)
200003f8:	46bd      	mov	sp, r7
200003fa:	b002      	add	sp, #8
200003fc:	bd80      	pop	{r7, pc}

200003fe <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
200003fe:	b580      	push	{r7, lr}
20000400:	b082      	sub	sp, #8
20000402:	af00      	add	r7, sp, #0
20000404:	6078      	str	r0, [r7, #4]
20000406:	0008      	movs	r0, r1
20000408:	0011      	movs	r1, r2
2000040a:	1cbb      	adds	r3, r7, #2
2000040c:	1c02      	adds	r2, r0, #0
2000040e:	801a      	strh	r2, [r3, #0]
20000410:	1c7b      	adds	r3, r7, #1
20000412:	1c0a      	adds	r2, r1, #0
20000414:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
20000416:	1c7b      	adds	r3, r7, #1
20000418:	781b      	ldrb	r3, [r3, #0]
2000041a:	2b00      	cmp	r3, #0
2000041c:	d004      	beq.n	20000428 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
2000041e:	687b      	ldr	r3, [r7, #4]
20000420:	1cba      	adds	r2, r7, #2
20000422:	8812      	ldrh	r2, [r2, #0]
20000424:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
20000426:	e003      	b.n	20000430 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
20000428:	687b      	ldr	r3, [r7, #4]
2000042a:	1cba      	adds	r2, r7, #2
2000042c:	8812      	ldrh	r2, [r2, #0]
2000042e:	835a      	strh	r2, [r3, #26]
}
20000430:	46c0      	nop			; (mov r8, r8)
20000432:	46bd      	mov	sp, r7
20000434:	b002      	add	sp, #8
20000436:	bd80      	pop	{r7, pc}

20000438 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
20000438:	b580      	push	{r7, lr}
2000043a:	b082      	sub	sp, #8
2000043c:	af00      	add	r7, sp, #0
2000043e:	6078      	str	r0, [r7, #4]
20000440:	000a      	movs	r2, r1
20000442:	1cbb      	adds	r3, r7, #2
20000444:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
20000446:	1cbb      	adds	r3, r7, #2
20000448:	881a      	ldrh	r2, [r3, #0]
2000044a:	687b      	ldr	r3, [r7, #4]
2000044c:	615a      	str	r2, [r3, #20]
}
2000044e:	46c0      	nop			; (mov r8, r8)
20000450:	46bd      	mov	sp, r7
20000452:	b002      	add	sp, #8
20000454:	bd80      	pop	{r7, pc}

20000456 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20000456:	b580      	push	{r7, lr}
20000458:	b082      	sub	sp, #8
2000045a:	af00      	add	r7, sp, #0
2000045c:	6078      	str	r0, [r7, #4]
2000045e:	000a      	movs	r2, r1
20000460:	1cbb      	adds	r3, r7, #2
20000462:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20000464:	687b      	ldr	r3, [r7, #4]
20000466:	695a      	ldr	r2, [r3, #20]
20000468:	1cbb      	adds	r3, r7, #2
2000046a:	881b      	ldrh	r3, [r3, #0]
2000046c:	405a      	eors	r2, r3
2000046e:	687b      	ldr	r3, [r7, #4]
20000470:	615a      	str	r2, [r3, #20]
}
20000472:	46c0      	nop			; (mov r8, r8)
20000474:	46bd      	mov	sp, r7
20000476:	b002      	add	sp, #8
20000478:	bd80      	pop	{r7, pc}

2000047a <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
2000047a:	b580      	push	{r7, lr}
2000047c:	b084      	sub	sp, #16
2000047e:	af00      	add	r7, sp, #0
20000480:	6078      	str	r0, [r7, #4]
20000482:	0008      	movs	r0, r1
20000484:	0011      	movs	r1, r2
20000486:	1cbb      	adds	r3, r7, #2
20000488:	1c02      	adds	r2, r0, #0
2000048a:	801a      	strh	r2, [r3, #0]
2000048c:	1c7b      	adds	r3, r7, #1
2000048e:	1c0a      	adds	r2, r1, #0
20000490:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
20000492:	2300      	movs	r3, #0
20000494:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
20000496:	2300      	movs	r3, #0
20000498:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
2000049a:	1c7b      	adds	r3, r7, #1
2000049c:	781a      	ldrb	r2, [r3, #0]
2000049e:	1cbb      	adds	r3, r7, #2
200004a0:	881b      	ldrh	r3, [r3, #0]
200004a2:	2107      	movs	r1, #7
200004a4:	400b      	ands	r3, r1
200004a6:	009b      	lsls	r3, r3, #2
200004a8:	409a      	lsls	r2, r3
200004aa:	0013      	movs	r3, r2
200004ac:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
200004ae:	1cbb      	adds	r3, r7, #2
200004b0:	881b      	ldrh	r3, [r3, #0]
200004b2:	08db      	lsrs	r3, r3, #3
200004b4:	b29b      	uxth	r3, r3
200004b6:	001a      	movs	r2, r3
200004b8:	687b      	ldr	r3, [r7, #4]
200004ba:	3208      	adds	r2, #8
200004bc:	0092      	lsls	r2, r2, #2
200004be:	58d3      	ldr	r3, [r2, r3]
200004c0:	1cba      	adds	r2, r7, #2
200004c2:	8812      	ldrh	r2, [r2, #0]
200004c4:	2107      	movs	r1, #7
200004c6:	400a      	ands	r2, r1
200004c8:	0092      	lsls	r2, r2, #2
200004ca:	210f      	movs	r1, #15
200004cc:	4091      	lsls	r1, r2
200004ce:	000a      	movs	r2, r1
200004d0:	43d2      	mvns	r2, r2
200004d2:	1cb9      	adds	r1, r7, #2
200004d4:	8809      	ldrh	r1, [r1, #0]
200004d6:	08c9      	lsrs	r1, r1, #3
200004d8:	b289      	uxth	r1, r1
200004da:	0008      	movs	r0, r1
200004dc:	401a      	ands	r2, r3
200004de:	0011      	movs	r1, r2
200004e0:	687b      	ldr	r3, [r7, #4]
200004e2:	0002      	movs	r2, r0
200004e4:	3208      	adds	r2, #8
200004e6:	0092      	lsls	r2, r2, #2
200004e8:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
200004ea:	1cbb      	adds	r3, r7, #2
200004ec:	881b      	ldrh	r3, [r3, #0]
200004ee:	08db      	lsrs	r3, r3, #3
200004f0:	b29b      	uxth	r3, r3
200004f2:	001a      	movs	r2, r3
200004f4:	687b      	ldr	r3, [r7, #4]
200004f6:	3208      	adds	r2, #8
200004f8:	0092      	lsls	r2, r2, #2
200004fa:	58d3      	ldr	r3, [r2, r3]
200004fc:	68fa      	ldr	r2, [r7, #12]
200004fe:	4313      	orrs	r3, r2
20000500:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
20000502:	1cbb      	adds	r3, r7, #2
20000504:	881b      	ldrh	r3, [r3, #0]
20000506:	08db      	lsrs	r3, r3, #3
20000508:	b29b      	uxth	r3, r3
2000050a:	001a      	movs	r2, r3
2000050c:	687b      	ldr	r3, [r7, #4]
2000050e:	3208      	adds	r2, #8
20000510:	0092      	lsls	r2, r2, #2
20000512:	68b9      	ldr	r1, [r7, #8]
20000514:	50d1      	str	r1, [r2, r3]
}
20000516:	46c0      	nop			; (mov r8, r8)
20000518:	46bd      	mov	sp, r7
2000051a:	b004      	add	sp, #16
2000051c:	bd80      	pop	{r7, pc}
2000051e:	46c0      	nop			; (mov r8, r8)

20000520 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20000520:	b580      	push	{r7, lr}
20000522:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
20000524:	4b11      	ldr	r3, [pc, #68]	; (2000056c <SystemInit+0x4c>)
20000526:	681a      	ldr	r2, [r3, #0]
20000528:	4b10      	ldr	r3, [pc, #64]	; (2000056c <SystemInit+0x4c>)
2000052a:	2101      	movs	r1, #1
2000052c:	430a      	orrs	r2, r1
2000052e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20000530:	4b0e      	ldr	r3, [pc, #56]	; (2000056c <SystemInit+0x4c>)
20000532:	2200      	movs	r2, #0
20000534:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
20000536:	4b0d      	ldr	r3, [pc, #52]	; (2000056c <SystemInit+0x4c>)
20000538:	681a      	ldr	r2, [r3, #0]
2000053a:	4b0c      	ldr	r3, [pc, #48]	; (2000056c <SystemInit+0x4c>)
2000053c:	490c      	ldr	r1, [pc, #48]	; (20000570 <SystemInit+0x50>)
2000053e:	400a      	ands	r2, r1
20000540:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
20000542:	4b0a      	ldr	r3, [pc, #40]	; (2000056c <SystemInit+0x4c>)
20000544:	4a0b      	ldr	r2, [pc, #44]	; (20000574 <SystemInit+0x54>)
20000546:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20000548:	4b08      	ldr	r3, [pc, #32]	; (2000056c <SystemInit+0x4c>)
2000054a:	681a      	ldr	r2, [r3, #0]
2000054c:	4b07      	ldr	r3, [pc, #28]	; (2000056c <SystemInit+0x4c>)
2000054e:	490a      	ldr	r1, [pc, #40]	; (20000578 <SystemInit+0x58>)
20000550:	400a      	ands	r2, r1
20000552:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20000554:	4b05      	ldr	r3, [pc, #20]	; (2000056c <SystemInit+0x4c>)
20000556:	2200      	movs	r2, #0
20000558:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
2000055a:	f000 f88d 	bl	20000678 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
2000055e:	4b07      	ldr	r3, [pc, #28]	; (2000057c <SystemInit+0x5c>)
20000560:	2280      	movs	r2, #128	; 0x80
20000562:	0512      	lsls	r2, r2, #20
20000564:	609a      	str	r2, [r3, #8]
#endif
}
20000566:	46c0      	nop			; (mov r8, r8)
20000568:	46bd      	mov	sp, r7
2000056a:	bd80      	pop	{r7, pc}
2000056c:	40023800 	andmi	r3, r2, r0, lsl #16
20000570:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
20000574:	24003010 	strcs	r3, [r0], #-16
20000578:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff
2000057c:	e000ed00 	and	lr, r0, r0, lsl #26

20000580 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
20000580:	b580      	push	{r7, lr}
20000582:	b086      	sub	sp, #24
20000584:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000586:	2300      	movs	r3, #0
20000588:	613b      	str	r3, [r7, #16]
2000058a:	2300      	movs	r3, #0
2000058c:	617b      	str	r3, [r7, #20]
2000058e:	2302      	movs	r3, #2
20000590:	60fb      	str	r3, [r7, #12]
20000592:	2300      	movs	r3, #0
20000594:	60bb      	str	r3, [r7, #8]
20000596:	2302      	movs	r3, #2
20000598:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
2000059a:	4b32      	ldr	r3, [pc, #200]	; (20000664 <SystemCoreClockUpdate+0xe4>)
2000059c:	689b      	ldr	r3, [r3, #8]
2000059e:	220c      	movs	r2, #12
200005a0:	4013      	ands	r3, r2
200005a2:	613b      	str	r3, [r7, #16]

  switch (tmp)
200005a4:	693b      	ldr	r3, [r7, #16]
200005a6:	2b04      	cmp	r3, #4
200005a8:	d007      	beq.n	200005ba <SystemCoreClockUpdate+0x3a>
200005aa:	2b08      	cmp	r3, #8
200005ac:	d009      	beq.n	200005c2 <SystemCoreClockUpdate+0x42>
200005ae:	2b00      	cmp	r3, #0
200005b0:	d141      	bne.n	20000636 <SystemCoreClockUpdate+0xb6>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
200005b2:	4b2d      	ldr	r3, [pc, #180]	; (20000668 <SystemCoreClockUpdate+0xe8>)
200005b4:	4a2d      	ldr	r2, [pc, #180]	; (2000066c <SystemCoreClockUpdate+0xec>)
200005b6:	601a      	str	r2, [r3, #0]
      break;
200005b8:	e041      	b.n	2000063e <SystemCoreClockUpdate+0xbe>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
200005ba:	4b2b      	ldr	r3, [pc, #172]	; (20000668 <SystemCoreClockUpdate+0xe8>)
200005bc:	4a2c      	ldr	r2, [pc, #176]	; (20000670 <SystemCoreClockUpdate+0xf0>)
200005be:	601a      	str	r2, [r3, #0]
      break;
200005c0:	e03d      	b.n	2000063e <SystemCoreClockUpdate+0xbe>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
200005c2:	4b28      	ldr	r3, [pc, #160]	; (20000664 <SystemCoreClockUpdate+0xe4>)
200005c4:	685b      	ldr	r3, [r3, #4]
200005c6:	0d9b      	lsrs	r3, r3, #22
200005c8:	2201      	movs	r2, #1
200005ca:	4013      	ands	r3, r2
200005cc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
200005ce:	4b25      	ldr	r3, [pc, #148]	; (20000664 <SystemCoreClockUpdate+0xe4>)
200005d0:	685b      	ldr	r3, [r3, #4]
200005d2:	223f      	movs	r2, #63	; 0x3f
200005d4:	4013      	ands	r3, r2
200005d6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
200005d8:	68bb      	ldr	r3, [r7, #8]
200005da:	2b00      	cmp	r3, #0
200005dc:	d00d      	beq.n	200005fa <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
200005de:	6879      	ldr	r1, [r7, #4]
200005e0:	4823      	ldr	r0, [pc, #140]	; (20000670 <SystemCoreClockUpdate+0xf0>)
200005e2:	f001 f833 	bl	2000164c <__udivsi3>
200005e6:	0003      	movs	r3, r0
200005e8:	001a      	movs	r2, r3
200005ea:	4b1e      	ldr	r3, [pc, #120]	; (20000664 <SystemCoreClockUpdate+0xe4>)
200005ec:	685b      	ldr	r3, [r3, #4]
200005ee:	099b      	lsrs	r3, r3, #6
200005f0:	05db      	lsls	r3, r3, #23
200005f2:	0ddb      	lsrs	r3, r3, #23
200005f4:	4353      	muls	r3, r2
200005f6:	617b      	str	r3, [r7, #20]
200005f8:	e00c      	b.n	20000614 <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
200005fa:	6879      	ldr	r1, [r7, #4]
200005fc:	481b      	ldr	r0, [pc, #108]	; (2000066c <SystemCoreClockUpdate+0xec>)
200005fe:	f001 f825 	bl	2000164c <__udivsi3>
20000602:	0003      	movs	r3, r0
20000604:	001a      	movs	r2, r3
20000606:	4b17      	ldr	r3, [pc, #92]	; (20000664 <SystemCoreClockUpdate+0xe4>)
20000608:	685b      	ldr	r3, [r3, #4]
2000060a:	099b      	lsrs	r3, r3, #6
2000060c:	05db      	lsls	r3, r3, #23
2000060e:	0ddb      	lsrs	r3, r3, #23
20000610:	4353      	muls	r3, r2
20000612:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000614:	4b13      	ldr	r3, [pc, #76]	; (20000664 <SystemCoreClockUpdate+0xe4>)
20000616:	685b      	ldr	r3, [r3, #4]
20000618:	0c1b      	lsrs	r3, r3, #16
2000061a:	2203      	movs	r2, #3
2000061c:	4013      	ands	r3, r2
2000061e:	3301      	adds	r3, #1
20000620:	005b      	lsls	r3, r3, #1
20000622:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
20000624:	68f9      	ldr	r1, [r7, #12]
20000626:	6978      	ldr	r0, [r7, #20]
20000628:	f001 f810 	bl	2000164c <__udivsi3>
2000062c:	0003      	movs	r3, r0
2000062e:	001a      	movs	r2, r3
20000630:	4b0d      	ldr	r3, [pc, #52]	; (20000668 <SystemCoreClockUpdate+0xe8>)
20000632:	601a      	str	r2, [r3, #0]
      break;
20000634:	e003      	b.n	2000063e <SystemCoreClockUpdate+0xbe>
    default:
      SystemCoreClock = HSI_VALUE;
20000636:	4b0c      	ldr	r3, [pc, #48]	; (20000668 <SystemCoreClockUpdate+0xe8>)
20000638:	4a0c      	ldr	r2, [pc, #48]	; (2000066c <SystemCoreClockUpdate+0xec>)
2000063a:	601a      	str	r2, [r3, #0]
      break;
2000063c:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
2000063e:	4b09      	ldr	r3, [pc, #36]	; (20000664 <SystemCoreClockUpdate+0xe4>)
20000640:	689b      	ldr	r3, [r3, #8]
20000642:	091b      	lsrs	r3, r3, #4
20000644:	220f      	movs	r2, #15
20000646:	4013      	ands	r3, r2
20000648:	4a0a      	ldr	r2, [pc, #40]	; (20000674 <SystemCoreClockUpdate+0xf4>)
2000064a:	5cd3      	ldrb	r3, [r2, r3]
2000064c:	b2db      	uxtb	r3, r3
2000064e:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
20000650:	4b05      	ldr	r3, [pc, #20]	; (20000668 <SystemCoreClockUpdate+0xe8>)
20000652:	681a      	ldr	r2, [r3, #0]
20000654:	693b      	ldr	r3, [r7, #16]
20000656:	40da      	lsrs	r2, r3
20000658:	4b03      	ldr	r3, [pc, #12]	; (20000668 <SystemCoreClockUpdate+0xe8>)
2000065a:	601a      	str	r2, [r3, #0]
}
2000065c:	46c0      	nop			; (mov r8, r8)
2000065e:	46bd      	mov	sp, r7
20000660:	b006      	add	sp, #24
20000662:	bd80      	pop	{r7, pc}
20000664:	40023800 	andmi	r3, r2, r0, lsl #16
20000668:	20001770 	andcs	r1, r0, r0, ror r7
2000066c:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000670:	017d7840 	cmneq	sp, r0, asr #16
20000674:	20001774 	andcs	r1, r0, r4, ror r7

20000678 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
20000678:	b580      	push	{r7, lr}
2000067a:	b082      	sub	sp, #8
2000067c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
2000067e:	2300      	movs	r3, #0
20000680:	607b      	str	r3, [r7, #4]
20000682:	2300      	movs	r3, #0
20000684:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
20000686:	4b38      	ldr	r3, [pc, #224]	; (20000768 <SetSysClock+0xf0>)
20000688:	681a      	ldr	r2, [r3, #0]
2000068a:	4b37      	ldr	r3, [pc, #220]	; (20000768 <SetSysClock+0xf0>)
2000068c:	2180      	movs	r1, #128	; 0x80
2000068e:	0249      	lsls	r1, r1, #9
20000690:	430a      	orrs	r2, r1
20000692:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
20000694:	4b34      	ldr	r3, [pc, #208]	; (20000768 <SetSysClock+0xf0>)
20000696:	681a      	ldr	r2, [r3, #0]
20000698:	2380      	movs	r3, #128	; 0x80
2000069a:	029b      	lsls	r3, r3, #10
2000069c:	4013      	ands	r3, r2
2000069e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
200006a0:	687b      	ldr	r3, [r7, #4]
200006a2:	3301      	adds	r3, #1
200006a4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
200006a6:	683b      	ldr	r3, [r7, #0]
200006a8:	2b00      	cmp	r3, #0
200006aa:	d104      	bne.n	200006b6 <SetSysClock+0x3e>
200006ac:	687a      	ldr	r2, [r7, #4]
200006ae:	23a0      	movs	r3, #160	; 0xa0
200006b0:	01db      	lsls	r3, r3, #7
200006b2:	429a      	cmp	r2, r3
200006b4:	d1ee      	bne.n	20000694 <SetSysClock+0x1c>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
200006b6:	4b2c      	ldr	r3, [pc, #176]	; (20000768 <SetSysClock+0xf0>)
200006b8:	681a      	ldr	r2, [r3, #0]
200006ba:	2380      	movs	r3, #128	; 0x80
200006bc:	029b      	lsls	r3, r3, #10
200006be:	4013      	ands	r3, r2
200006c0:	d002      	beq.n	200006c8 <SetSysClock+0x50>
  {
    HSEStatus = (uint32_t)0x01;
200006c2:	2301      	movs	r3, #1
200006c4:	603b      	str	r3, [r7, #0]
200006c6:	e001      	b.n	200006cc <SetSysClock+0x54>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
200006c8:	2300      	movs	r3, #0
200006ca:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
200006cc:	683b      	ldr	r3, [r7, #0]
200006ce:	2b01      	cmp	r3, #1
200006d0:	d146      	bne.n	20000760 <SetSysClock+0xe8>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
200006d2:	4b25      	ldr	r3, [pc, #148]	; (20000768 <SetSysClock+0xf0>)
200006d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
200006d6:	4b24      	ldr	r3, [pc, #144]	; (20000768 <SetSysClock+0xf0>)
200006d8:	2180      	movs	r1, #128	; 0x80
200006da:	0549      	lsls	r1, r1, #21
200006dc:	430a      	orrs	r2, r1
200006de:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
200006e0:	4b22      	ldr	r3, [pc, #136]	; (2000076c <SetSysClock+0xf4>)
200006e2:	681a      	ldr	r2, [r3, #0]
200006e4:	4b21      	ldr	r3, [pc, #132]	; (2000076c <SetSysClock+0xf4>)
200006e6:	21c0      	movs	r1, #192	; 0xc0
200006e8:	0209      	lsls	r1, r1, #8
200006ea:	430a      	orrs	r2, r1
200006ec:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
200006ee:	4a1e      	ldr	r2, [pc, #120]	; (20000768 <SetSysClock+0xf0>)
200006f0:	4b1d      	ldr	r3, [pc, #116]	; (20000768 <SetSysClock+0xf0>)
200006f2:	6892      	ldr	r2, [r2, #8]
200006f4:	609a      	str	r2, [r3, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
200006f6:	4b1c      	ldr	r3, [pc, #112]	; (20000768 <SetSysClock+0xf0>)
200006f8:	689a      	ldr	r2, [r3, #8]
200006fa:	4b1b      	ldr	r3, [pc, #108]	; (20000768 <SetSysClock+0xf0>)
200006fc:	2180      	movs	r1, #128	; 0x80
200006fe:	0209      	lsls	r1, r1, #8
20000700:	430a      	orrs	r2, r1
20000702:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
20000704:	4b18      	ldr	r3, [pc, #96]	; (20000768 <SetSysClock+0xf0>)
20000706:	689a      	ldr	r2, [r3, #8]
20000708:	4b17      	ldr	r3, [pc, #92]	; (20000768 <SetSysClock+0xf0>)
2000070a:	21a0      	movs	r1, #160	; 0xa0
2000070c:	0149      	lsls	r1, r1, #5
2000070e:	430a      	orrs	r2, r1
20000710:	609a      	str	r2, [r3, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
20000712:	4b15      	ldr	r3, [pc, #84]	; (20000768 <SetSysClock+0xf0>)
20000714:	4a16      	ldr	r2, [pc, #88]	; (20000770 <SetSysClock+0xf8>)
20000716:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
20000718:	4b13      	ldr	r3, [pc, #76]	; (20000768 <SetSysClock+0xf0>)
2000071a:	681a      	ldr	r2, [r3, #0]
2000071c:	4b12      	ldr	r3, [pc, #72]	; (20000768 <SetSysClock+0xf0>)
2000071e:	2180      	movs	r1, #128	; 0x80
20000720:	0449      	lsls	r1, r1, #17
20000722:	430a      	orrs	r2, r1
20000724:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
20000726:	46c0      	nop			; (mov r8, r8)
20000728:	4b0f      	ldr	r3, [pc, #60]	; (20000768 <SetSysClock+0xf0>)
2000072a:	681a      	ldr	r2, [r3, #0]
2000072c:	2380      	movs	r3, #128	; 0x80
2000072e:	049b      	lsls	r3, r3, #18
20000730:	4013      	ands	r3, r2
20000732:	d0f9      	beq.n	20000728 <SetSysClock+0xb0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
20000734:	4b0f      	ldr	r3, [pc, #60]	; (20000774 <SetSysClock+0xfc>)
20000736:	4a10      	ldr	r2, [pc, #64]	; (20000778 <SetSysClock+0x100>)
20000738:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
2000073a:	4b0b      	ldr	r3, [pc, #44]	; (20000768 <SetSysClock+0xf0>)
2000073c:	689a      	ldr	r2, [r3, #8]
2000073e:	4b0a      	ldr	r3, [pc, #40]	; (20000768 <SetSysClock+0xf0>)
20000740:	2103      	movs	r1, #3
20000742:	438a      	bics	r2, r1
20000744:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
20000746:	4b08      	ldr	r3, [pc, #32]	; (20000768 <SetSysClock+0xf0>)
20000748:	689a      	ldr	r2, [r3, #8]
2000074a:	4b07      	ldr	r3, [pc, #28]	; (20000768 <SetSysClock+0xf0>)
2000074c:	2102      	movs	r1, #2
2000074e:	430a      	orrs	r2, r1
20000750:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
20000752:	46c0      	nop			; (mov r8, r8)
20000754:	4b04      	ldr	r3, [pc, #16]	; (20000768 <SetSysClock+0xf0>)
20000756:	689b      	ldr	r3, [r3, #8]
20000758:	220c      	movs	r2, #12
2000075a:	4013      	ands	r3, r2
2000075c:	2b08      	cmp	r3, #8
2000075e:	d1f9      	bne.n	20000754 <SetSysClock+0xdc>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
20000760:	46c0      	nop			; (mov r8, r8)
20000762:	46bd      	mov	sp, r7
20000764:	b002      	add	sp, #8
20000766:	bd80      	pop	{r7, pc}
20000768:	40023800 	andmi	r3, r2, r0, lsl #16
2000076c:	40007000 	andmi	r7, r0, r0
20000770:	07405419 	smlaldeq	r5, r0, r9, r4
20000774:	40023c00 	andmi	r3, r2, r0, lsl #24
20000778:	00000705 	andeq	r0, r0, r5, lsl #14

2000077c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
2000077c:	b580      	push	{r7, lr}
2000077e:	b082      	sub	sp, #8
20000780:	af00      	add	r7, sp, #0
20000782:	0002      	movs	r2, r0
20000784:	6039      	str	r1, [r7, #0]
20000786:	1dfb      	adds	r3, r7, #7
20000788:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000078a:	1dfb      	adds	r3, r7, #7
2000078c:	781b      	ldrb	r3, [r3, #0]
2000078e:	2b7f      	cmp	r3, #127	; 0x7f
20000790:	d90d      	bls.n	200007ae <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000792:	683b      	ldr	r3, [r7, #0]
20000794:	b2da      	uxtb	r2, r3
20000796:	490f      	ldr	r1, [pc, #60]	; (200007d4 <NVIC_SetPriority+0x58>)
20000798:	1dfb      	adds	r3, r7, #7
2000079a:	781b      	ldrb	r3, [r3, #0]
2000079c:	0018      	movs	r0, r3
2000079e:	230f      	movs	r3, #15
200007a0:	4003      	ands	r3, r0
200007a2:	3b04      	subs	r3, #4
200007a4:	0112      	lsls	r2, r2, #4
200007a6:	b2d2      	uxtb	r2, r2
200007a8:	18cb      	adds	r3, r1, r3
200007aa:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
200007ac:	e00d      	b.n	200007ca <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200007ae:	683b      	ldr	r3, [r7, #0]
200007b0:	b2db      	uxtb	r3, r3
200007b2:	4909      	ldr	r1, [pc, #36]	; (200007d8 <NVIC_SetPriority+0x5c>)
200007b4:	1dfa      	adds	r2, r7, #7
200007b6:	7812      	ldrb	r2, [r2, #0]
200007b8:	b252      	sxtb	r2, r2
200007ba:	011b      	lsls	r3, r3, #4
200007bc:	b2d8      	uxtb	r0, r3
200007be:	23c0      	movs	r3, #192	; 0xc0
200007c0:	009b      	lsls	r3, r3, #2
200007c2:	188a      	adds	r2, r1, r2
200007c4:	18d3      	adds	r3, r2, r3
200007c6:	1c02      	adds	r2, r0, #0
200007c8:	701a      	strb	r2, [r3, #0]
}
200007ca:	46c0      	nop			; (mov r8, r8)
200007cc:	46bd      	mov	sp, r7
200007ce:	b002      	add	sp, #8
200007d0:	bd80      	pop	{r7, pc}
200007d2:	46c0      	nop			; (mov r8, r8)
200007d4:	e000ed00 	and	lr, r0, r0, lsl #26
200007d8:	e000e100 	and	lr, r0, r0, lsl #2

200007dc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
200007dc:	b580      	push	{r7, lr}
200007de:	b082      	sub	sp, #8
200007e0:	af00      	add	r7, sp, #0
200007e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
200007e4:	687b      	ldr	r3, [r7, #4]
200007e6:	3b01      	subs	r3, #1
200007e8:	4a0c      	ldr	r2, [pc, #48]	; (2000081c <SysTick_Config+0x40>)
200007ea:	4293      	cmp	r3, r2
200007ec:	d901      	bls.n	200007f2 <SysTick_Config+0x16>
200007ee:	2301      	movs	r3, #1
200007f0:	e010      	b.n	20000814 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
200007f2:	4b0b      	ldr	r3, [pc, #44]	; (20000820 <SysTick_Config+0x44>)
200007f4:	687a      	ldr	r2, [r7, #4]
200007f6:	3a01      	subs	r2, #1
200007f8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
200007fa:	2301      	movs	r3, #1
200007fc:	425b      	negs	r3, r3
200007fe:	210f      	movs	r1, #15
20000800:	0018      	movs	r0, r3
20000802:	f7ff ffbb 	bl	2000077c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20000806:	4b06      	ldr	r3, [pc, #24]	; (20000820 <SysTick_Config+0x44>)
20000808:	2200      	movs	r2, #0
2000080a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
2000080c:	4b04      	ldr	r3, [pc, #16]	; (20000820 <SysTick_Config+0x44>)
2000080e:	2207      	movs	r2, #7
20000810:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20000812:	2300      	movs	r3, #0
}
20000814:	0018      	movs	r0, r3
20000816:	46bd      	mov	sp, r7
20000818:	b002      	add	sp, #8
2000081a:	bd80      	pop	{r7, pc}
2000081c:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20000820:	e000e010 	and	lr, r0, r0, lsl r0

20000824 <SysTick_Handler>:
MotionSensor motion1;


volatile uint32_t msTicks = 0;                              /* Variable to store millisecond ticks */
  
void SysTick_Handler(void)  {                               /* SysTick interrupt Handler. */
20000824:	b580      	push	{r7, lr}
20000826:	af00      	add	r7, sp, #0
	msTicks++;
20000828:	4b11      	ldr	r3, [pc, #68]	; (20000870 <SysTick_Handler+0x4c>)
2000082a:	681b      	ldr	r3, [r3, #0]
2000082c:	1c5a      	adds	r2, r3, #1
2000082e:	4b10      	ldr	r3, [pc, #64]	; (20000870 <SysTick_Handler+0x4c>)
20000830:	601a      	str	r2, [r3, #0]
	if (msTicks % 1000 == 0) {
20000832:	4b0f      	ldr	r3, [pc, #60]	; (20000870 <SysTick_Handler+0x4c>)
20000834:	681a      	ldr	r2, [r3, #0]
20000836:	23fa      	movs	r3, #250	; 0xfa
20000838:	0099      	lsls	r1, r3, #2
2000083a:	0010      	movs	r0, r2
2000083c:	f000 ff8c 	bl	20001758 <__aeabi_uidivmod>
20000840:	1e0b      	subs	r3, r1, #0
20000842:	d104      	bne.n	2000084e <SysTick_Handler+0x2a>
		GPIO_SetBits(GPIOA,GPIO_Pin_1);
20000844:	4b0b      	ldr	r3, [pc, #44]	; (20000874 <SysTick_Handler+0x50>)
20000846:	2102      	movs	r1, #2
20000848:	0018      	movs	r0, r3
2000084a:	f7ff fdba 	bl	200003c2 <GPIO_SetBits>
	}
	if (msTicks % 2000 == 0) {
2000084e:	4b08      	ldr	r3, [pc, #32]	; (20000870 <SysTick_Handler+0x4c>)
20000850:	681a      	ldr	r2, [r3, #0]
20000852:	23fa      	movs	r3, #250	; 0xfa
20000854:	00d9      	lsls	r1, r3, #3
20000856:	0010      	movs	r0, r2
20000858:	f000 ff7e 	bl	20001758 <__aeabi_uidivmod>
2000085c:	1e0b      	subs	r3, r1, #0
2000085e:	d104      	bne.n	2000086a <SysTick_Handler+0x46>
		GPIO_ResetBits(GPIOA,GPIO_Pin_1);
20000860:	4b04      	ldr	r3, [pc, #16]	; (20000874 <SysTick_Handler+0x50>)
20000862:	2102      	movs	r1, #2
20000864:	0018      	movs	r0, r3
20000866:	f7ff fdbb 	bl	200003e0 <GPIO_ResetBits>
	}
	// Gör en ny Array med dörrar som larmar.
}
2000086a:	46c0      	nop			; (mov r8, r8)
2000086c:	46bd      	mov	sp, r7
2000086e:	bd80      	pop	{r7, pc}
20000870:	20001764 	andcs	r1, r0, r4, ror #14
20000874:	40020000 	andmi	r0, r2, r0

20000878 <init_Sensors>:


void init_Sensors(){
20000878:	b580      	push	{r7, lr}
2000087a:	af00      	add	r7, sp, #0
	motion1.id = 0;
2000087c:	4b08      	ldr	r3, [pc, #32]	; (200008a0 <init_Sensors+0x28>)
2000087e:	2200      	movs	r2, #0
20000880:	701a      	strb	r2, [r3, #0]
	motion1.controlbits = 1;
20000882:	4b07      	ldr	r3, [pc, #28]	; (200008a0 <init_Sensors+0x28>)
20000884:	2201      	movs	r2, #1
20000886:	705a      	strb	r2, [r3, #1]
	motion1.password = 2389;
20000888:	4b05      	ldr	r3, [pc, #20]	; (200008a0 <init_Sensors+0x28>)
2000088a:	4a06      	ldr	r2, [pc, #24]	; (200008a4 <init_Sensors+0x2c>)
2000088c:	805a      	strh	r2, [r3, #2]
	motion1.trig = GPIO_Pin_0;
2000088e:	4b04      	ldr	r3, [pc, #16]	; (200008a0 <init_Sensors+0x28>)
20000890:	2201      	movs	r2, #1
20000892:	809a      	strh	r2, [r3, #4]
	motion1.echo = GPIO_Pin_1;
20000894:	4b02      	ldr	r3, [pc, #8]	; (200008a0 <init_Sensors+0x28>)
20000896:	2202      	movs	r2, #2
20000898:	80da      	strh	r2, [r3, #6]
	
}
2000089a:	46c0      	nop			; (mov r8, r8)
2000089c:	46bd      	mov	sp, r7
2000089e:	bd80      	pop	{r7, pc}
200008a0:	20001768 	andcs	r1, r0, r8, ror #14
200008a4:	00000955 	andeq	r0, r0, r5, asr r9

200008a8 <init_GPIO_Ports>:


void init_GPIO_Ports(){
200008a8:	b580      	push	{r7, lr}
200008aa:	b082      	sub	sp, #8
200008ac:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO A UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
200008ae:	2101      	movs	r1, #1
200008b0:	2001      	movs	r0, #1
200008b2:	f000 fc23 	bl	200010fc <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
200008b6:	003b      	movs	r3, r7
200008b8:	0018      	movs	r0, r3
200008ba:	f7ff fced 	bl	20000298 <GPIO_StructInit>
	init.GPIO_Pin = motion1.echo | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7;
200008be:	4b18      	ldr	r3, [pc, #96]	; (20000920 <init_GPIO_Ports+0x78>)
200008c0:	88db      	ldrh	r3, [r3, #6]
200008c2:	22a8      	movs	r2, #168	; 0xa8
200008c4:	4313      	orrs	r3, r2
200008c6:	b29b      	uxth	r3, r3
200008c8:	001a      	movs	r2, r3
200008ca:	003b      	movs	r3, r7
200008cc:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
200008ce:	003b      	movs	r3, r7
200008d0:	2200      	movs	r2, #0
200008d2:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
200008d4:	003b      	movs	r3, r7
200008d6:	2200      	movs	r2, #0
200008d8:	719a      	strb	r2, [r3, #6]
	GPIO_Init(GPIOA, &init);
200008da:	003b      	movs	r3, r7
200008dc:	4a11      	ldr	r2, [pc, #68]	; (20000924 <init_GPIO_Ports+0x7c>)
200008de:	0019      	movs	r1, r3
200008e0:	0010      	movs	r0, r2
200008e2:	f7ff fc4d 	bl	20000180 <GPIO_Init>

	//konfigurerar inport GPIO A
	GPIO_StructInit(&init);
200008e6:	003b      	movs	r3, r7
200008e8:	0018      	movs	r0, r3
200008ea:	f7ff fcd5 	bl	20000298 <GPIO_StructInit>
	init.GPIO_Pin = motion1.trig | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6;
200008ee:	4b0c      	ldr	r3, [pc, #48]	; (20000920 <init_GPIO_Ports+0x78>)
200008f0:	889b      	ldrh	r3, [r3, #4]
200008f2:	2254      	movs	r2, #84	; 0x54
200008f4:	4313      	orrs	r3, r2
200008f6:	b29b      	uxth	r3, r3
200008f8:	001a      	movs	r2, r3
200008fa:	003b      	movs	r3, r7
200008fc:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
200008fe:	003b      	movs	r3, r7
20000900:	2201      	movs	r2, #1
20000902:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000904:	003b      	movs	r3, r7
20000906:	2201      	movs	r2, #1
20000908:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
2000090a:	003b      	movs	r3, r7
2000090c:	4a05      	ldr	r2, [pc, #20]	; (20000924 <init_GPIO_Ports+0x7c>)
2000090e:	0019      	movs	r1, r3
20000910:	0010      	movs	r0, r2
20000912:	f7ff fc35 	bl	20000180 <GPIO_Init>
}
20000916:	46c0      	nop			; (mov r8, r8)
20000918:	46bd      	mov	sp, r7
2000091a:	b002      	add	sp, #8
2000091c:	bd80      	pop	{r7, pc}
2000091e:	46c0      	nop			; (mov r8, r8)
20000920:	20001768 	andcs	r1, r0, r8, ror #14
20000924:	40020000 	andmi	r0, r2, r0

20000928 <main>:




void main(void)
{
20000928:	b580      	push	{r7, lr}
2000092a:	b082      	sub	sp, #8
2000092c:	af00      	add	r7, sp, #0
	init_Sensors();
2000092e:	f7ff ffa3 	bl	20000878 <init_Sensors>
	init_GPIO_Ports();
20000932:	f7ff ffb9 	bl	200008a8 <init_GPIO_Ports>

	
	//Systick
	*((void (**)(void) ) 0x2001C03C ) = SysTick_Handler;
20000936:	4b06      	ldr	r3, [pc, #24]	; (20000950 <main+0x28>)
20000938:	4a06      	ldr	r2, [pc, #24]	; (20000954 <main+0x2c>)
2000093a:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
  	returnCode = SysTick_Config(168000000/1000);      /* Configure SysTick to generate an interrupt every millisecond */
2000093c:	4b06      	ldr	r3, [pc, #24]	; (20000958 <main+0x30>)
2000093e:	0018      	movs	r0, r3
20000940:	f7ff ff4c 	bl	200007dc <SysTick_Config>
20000944:	0003      	movs	r3, r0
20000946:	607b      	str	r3, [r7, #4]
	
	
}
20000948:	46c0      	nop			; (mov r8, r8)
2000094a:	46bd      	mov	sp, r7
2000094c:	b002      	add	sp, #8
2000094e:	bd80      	pop	{r7, pc}
20000950:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000954:	20000825 	andcs	r0, r0, r5, lsr #16
20000958:	00029040 	andeq	r9, r2, r0, asr #32

2000095c <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
2000095c:	b580      	push	{r7, lr}
2000095e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
20000960:	4b14      	ldr	r3, [pc, #80]	; (200009b4 <RCC_DeInit+0x58>)
20000962:	681a      	ldr	r2, [r3, #0]
20000964:	4b13      	ldr	r3, [pc, #76]	; (200009b4 <RCC_DeInit+0x58>)
20000966:	2101      	movs	r1, #1
20000968:	430a      	orrs	r2, r1
2000096a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
2000096c:	4b11      	ldr	r3, [pc, #68]	; (200009b4 <RCC_DeInit+0x58>)
2000096e:	2200      	movs	r2, #0
20000970:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
20000972:	4b10      	ldr	r3, [pc, #64]	; (200009b4 <RCC_DeInit+0x58>)
20000974:	681a      	ldr	r2, [r3, #0]
20000976:	4b0f      	ldr	r3, [pc, #60]	; (200009b4 <RCC_DeInit+0x58>)
20000978:	490f      	ldr	r1, [pc, #60]	; (200009b8 <RCC_DeInit+0x5c>)
2000097a:	400a      	ands	r2, r1
2000097c:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
2000097e:	4b0d      	ldr	r3, [pc, #52]	; (200009b4 <RCC_DeInit+0x58>)
20000980:	4a0e      	ldr	r2, [pc, #56]	; (200009bc <RCC_DeInit+0x60>)
20000982:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
20000984:	4a0b      	ldr	r2, [pc, #44]	; (200009b4 <RCC_DeInit+0x58>)
20000986:	2384      	movs	r3, #132	; 0x84
20000988:	490d      	ldr	r1, [pc, #52]	; (200009c0 <RCC_DeInit+0x64>)
2000098a:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
2000098c:	4a09      	ldr	r2, [pc, #36]	; (200009b4 <RCC_DeInit+0x58>)
2000098e:	2388      	movs	r3, #136	; 0x88
20000990:	490c      	ldr	r1, [pc, #48]	; (200009c4 <RCC_DeInit+0x68>)
20000992:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20000994:	4b07      	ldr	r3, [pc, #28]	; (200009b4 <RCC_DeInit+0x58>)
20000996:	681a      	ldr	r2, [r3, #0]
20000998:	4b06      	ldr	r3, [pc, #24]	; (200009b4 <RCC_DeInit+0x58>)
2000099a:	490b      	ldr	r1, [pc, #44]	; (200009c8 <RCC_DeInit+0x6c>)
2000099c:	400a      	ands	r2, r1
2000099e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200009a0:	4b04      	ldr	r3, [pc, #16]	; (200009b4 <RCC_DeInit+0x58>)
200009a2:	2200      	movs	r2, #0
200009a4:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
200009a6:	4a03      	ldr	r2, [pc, #12]	; (200009b4 <RCC_DeInit+0x58>)
200009a8:	238c      	movs	r3, #140	; 0x8c
200009aa:	2100      	movs	r1, #0
200009ac:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
200009ae:	46c0      	nop			; (mov r8, r8)
200009b0:	46bd      	mov	sp, r7
200009b2:	bd80      	pop	{r7, pc}
200009b4:	40023800 	andmi	r3, r2, r0, lsl #16
200009b8:	eaf6ffff 	b	1fdc09bc <startup-0x23f644>
200009bc:	24003010 	strcs	r3, [r0], #-16
200009c0:	20003000 	andcs	r3, r0, r0
200009c4:	24003000 	strcs	r3, [r0], #-0
200009c8:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

200009cc <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
200009cc:	b580      	push	{r7, lr}
200009ce:	b082      	sub	sp, #8
200009d0:	af00      	add	r7, sp, #0
200009d2:	0002      	movs	r2, r0
200009d4:	1dfb      	adds	r3, r7, #7
200009d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
200009d8:	4b05      	ldr	r3, [pc, #20]	; (200009f0 <RCC_HSEConfig+0x24>)
200009da:	2200      	movs	r2, #0
200009dc:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
200009de:	4a04      	ldr	r2, [pc, #16]	; (200009f0 <RCC_HSEConfig+0x24>)
200009e0:	1dfb      	adds	r3, r7, #7
200009e2:	781b      	ldrb	r3, [r3, #0]
200009e4:	7013      	strb	r3, [r2, #0]
}
200009e6:	46c0      	nop			; (mov r8, r8)
200009e8:	46bd      	mov	sp, r7
200009ea:	b002      	add	sp, #8
200009ec:	bd80      	pop	{r7, pc}
200009ee:	46c0      	nop			; (mov r8, r8)
200009f0:	40023802 	andmi	r3, r2, r2, lsl #16

200009f4 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
200009f4:	b590      	push	{r4, r7, lr}
200009f6:	b083      	sub	sp, #12
200009f8:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
200009fa:	2300      	movs	r3, #0
200009fc:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
200009fe:	1dfb      	adds	r3, r7, #7
20000a00:	2200      	movs	r2, #0
20000a02:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20000a04:	1dbb      	adds	r3, r7, #6
20000a06:	2200      	movs	r2, #0
20000a08:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20000a0a:	1dbc      	adds	r4, r7, #6
20000a0c:	2031      	movs	r0, #49	; 0x31
20000a0e:	f000 fd9b 	bl	20001548 <RCC_GetFlagStatus>
20000a12:	0003      	movs	r3, r0
20000a14:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20000a16:	683b      	ldr	r3, [r7, #0]
20000a18:	3301      	adds	r3, #1
20000a1a:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20000a1c:	683a      	ldr	r2, [r7, #0]
20000a1e:	23a0      	movs	r3, #160	; 0xa0
20000a20:	01db      	lsls	r3, r3, #7
20000a22:	429a      	cmp	r2, r3
20000a24:	d003      	beq.n	20000a2e <RCC_WaitForHSEStartUp+0x3a>
20000a26:	1dbb      	adds	r3, r7, #6
20000a28:	781b      	ldrb	r3, [r3, #0]
20000a2a:	2b00      	cmp	r3, #0
20000a2c:	d0ed      	beq.n	20000a0a <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
20000a2e:	2031      	movs	r0, #49	; 0x31
20000a30:	f000 fd8a 	bl	20001548 <RCC_GetFlagStatus>
20000a34:	1e03      	subs	r3, r0, #0
20000a36:	d003      	beq.n	20000a40 <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20000a38:	1dfb      	adds	r3, r7, #7
20000a3a:	2201      	movs	r2, #1
20000a3c:	701a      	strb	r2, [r3, #0]
20000a3e:	e002      	b.n	20000a46 <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
20000a40:	1dfb      	adds	r3, r7, #7
20000a42:	2200      	movs	r2, #0
20000a44:	701a      	strb	r2, [r3, #0]
  }
  return (status);
20000a46:	1dfb      	adds	r3, r7, #7
20000a48:	781b      	ldrb	r3, [r3, #0]
}
20000a4a:	0018      	movs	r0, r3
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b003      	add	sp, #12
20000a50:	bd90      	pop	{r4, r7, pc}

20000a52 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
20000a52:	b580      	push	{r7, lr}
20000a54:	b084      	sub	sp, #16
20000a56:	af00      	add	r7, sp, #0
20000a58:	0002      	movs	r2, r0
20000a5a:	1dfb      	adds	r3, r7, #7
20000a5c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
20000a5e:	2300      	movs	r3, #0
20000a60:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
20000a62:	4b0a      	ldr	r3, [pc, #40]	; (20000a8c <RCC_AdjustHSICalibrationValue+0x3a>)
20000a64:	681b      	ldr	r3, [r3, #0]
20000a66:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
20000a68:	68fb      	ldr	r3, [r7, #12]
20000a6a:	22f8      	movs	r2, #248	; 0xf8
20000a6c:	4393      	bics	r3, r2
20000a6e:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
20000a70:	1dfb      	adds	r3, r7, #7
20000a72:	781b      	ldrb	r3, [r3, #0]
20000a74:	00db      	lsls	r3, r3, #3
20000a76:	68fa      	ldr	r2, [r7, #12]
20000a78:	4313      	orrs	r3, r2
20000a7a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
20000a7c:	4b03      	ldr	r3, [pc, #12]	; (20000a8c <RCC_AdjustHSICalibrationValue+0x3a>)
20000a7e:	68fa      	ldr	r2, [r7, #12]
20000a80:	601a      	str	r2, [r3, #0]
}
20000a82:	46c0      	nop			; (mov r8, r8)
20000a84:	46bd      	mov	sp, r7
20000a86:	b004      	add	sp, #16
20000a88:	bd80      	pop	{r7, pc}
20000a8a:	46c0      	nop			; (mov r8, r8)
20000a8c:	40023800 	andmi	r3, r2, r0, lsl #16

20000a90 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
20000a90:	b580      	push	{r7, lr}
20000a92:	b082      	sub	sp, #8
20000a94:	af00      	add	r7, sp, #0
20000a96:	0002      	movs	r2, r0
20000a98:	1dfb      	adds	r3, r7, #7
20000a9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
20000a9c:	4b03      	ldr	r3, [pc, #12]	; (20000aac <RCC_HSICmd+0x1c>)
20000a9e:	1dfa      	adds	r2, r7, #7
20000aa0:	7812      	ldrb	r2, [r2, #0]
20000aa2:	601a      	str	r2, [r3, #0]
}
20000aa4:	46c0      	nop			; (mov r8, r8)
20000aa6:	46bd      	mov	sp, r7
20000aa8:	b002      	add	sp, #8
20000aaa:	bd80      	pop	{r7, pc}
20000aac:	42470000 	submi	r0, r7, #0

20000ab0 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
20000ab0:	b580      	push	{r7, lr}
20000ab2:	b082      	sub	sp, #8
20000ab4:	af00      	add	r7, sp, #0
20000ab6:	0002      	movs	r2, r0
20000ab8:	1dfb      	adds	r3, r7, #7
20000aba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000abc:	4b0c      	ldr	r3, [pc, #48]	; (20000af0 <RCC_LSEConfig+0x40>)
20000abe:	2200      	movs	r2, #0
20000ac0:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000ac2:	4b0b      	ldr	r3, [pc, #44]	; (20000af0 <RCC_LSEConfig+0x40>)
20000ac4:	2200      	movs	r2, #0
20000ac6:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20000ac8:	1dfb      	adds	r3, r7, #7
20000aca:	781b      	ldrb	r3, [r3, #0]
20000acc:	2b01      	cmp	r3, #1
20000ace:	d002      	beq.n	20000ad6 <RCC_LSEConfig+0x26>
20000ad0:	2b04      	cmp	r3, #4
20000ad2:	d004      	beq.n	20000ade <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000ad4:	e007      	b.n	20000ae6 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20000ad6:	4b06      	ldr	r3, [pc, #24]	; (20000af0 <RCC_LSEConfig+0x40>)
20000ad8:	2201      	movs	r2, #1
20000ada:	701a      	strb	r2, [r3, #0]
      break;
20000adc:	e003      	b.n	20000ae6 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
20000ade:	4b04      	ldr	r3, [pc, #16]	; (20000af0 <RCC_LSEConfig+0x40>)
20000ae0:	2205      	movs	r2, #5
20000ae2:	701a      	strb	r2, [r3, #0]
      break;
20000ae4:	46c0      	nop			; (mov r8, r8)
  }
}
20000ae6:	46c0      	nop			; (mov r8, r8)
20000ae8:	46bd      	mov	sp, r7
20000aea:	b002      	add	sp, #8
20000aec:	bd80      	pop	{r7, pc}
20000aee:	46c0      	nop			; (mov r8, r8)
20000af0:	40023870 	andmi	r3, r2, r0, ror r8

20000af4 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20000af4:	b580      	push	{r7, lr}
20000af6:	b082      	sub	sp, #8
20000af8:	af00      	add	r7, sp, #0
20000afa:	0002      	movs	r2, r0
20000afc:	1dfb      	adds	r3, r7, #7
20000afe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
20000b00:	4b03      	ldr	r3, [pc, #12]	; (20000b10 <RCC_LSICmd+0x1c>)
20000b02:	1dfa      	adds	r2, r7, #7
20000b04:	7812      	ldrb	r2, [r2, #0]
20000b06:	601a      	str	r2, [r3, #0]
}
20000b08:	46c0      	nop			; (mov r8, r8)
20000b0a:	46bd      	mov	sp, r7
20000b0c:	b002      	add	sp, #8
20000b0e:	bd80      	pop	{r7, pc}
20000b10:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20000b14 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20000b14:	b580      	push	{r7, lr}
20000b16:	b084      	sub	sp, #16
20000b18:	af00      	add	r7, sp, #0
20000b1a:	60f8      	str	r0, [r7, #12]
20000b1c:	60b9      	str	r1, [r7, #8]
20000b1e:	607a      	str	r2, [r7, #4]
20000b20:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
20000b22:	687b      	ldr	r3, [r7, #4]
20000b24:	019a      	lsls	r2, r3, #6
20000b26:	68bb      	ldr	r3, [r7, #8]
20000b28:	431a      	orrs	r2, r3
20000b2a:	683b      	ldr	r3, [r7, #0]
20000b2c:	085b      	lsrs	r3, r3, #1
20000b2e:	3b01      	subs	r3, #1
20000b30:	041b      	lsls	r3, r3, #16
20000b32:	431a      	orrs	r2, r3
20000b34:	68fb      	ldr	r3, [r7, #12]
20000b36:	431a      	orrs	r2, r3
20000b38:	0011      	movs	r1, r2
                 (PLLQ << 24);
20000b3a:	69bb      	ldr	r3, [r7, #24]
20000b3c:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
20000b3e:	4b03      	ldr	r3, [pc, #12]	; (20000b4c <RCC_PLLConfig+0x38>)
20000b40:	430a      	orrs	r2, r1
20000b42:	605a      	str	r2, [r3, #4]
}
20000b44:	46c0      	nop			; (mov r8, r8)
20000b46:	46bd      	mov	sp, r7
20000b48:	b004      	add	sp, #16
20000b4a:	bd80      	pop	{r7, pc}
20000b4c:	40023800 	andmi	r3, r2, r0, lsl #16

20000b50 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
20000b50:	b580      	push	{r7, lr}
20000b52:	b082      	sub	sp, #8
20000b54:	af00      	add	r7, sp, #0
20000b56:	0002      	movs	r2, r0
20000b58:	1dfb      	adds	r3, r7, #7
20000b5a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
20000b5c:	4b03      	ldr	r3, [pc, #12]	; (20000b6c <RCC_PLLCmd+0x1c>)
20000b5e:	1dfa      	adds	r2, r7, #7
20000b60:	7812      	ldrb	r2, [r2, #0]
20000b62:	601a      	str	r2, [r3, #0]
}
20000b64:	46c0      	nop			; (mov r8, r8)
20000b66:	46bd      	mov	sp, r7
20000b68:	b002      	add	sp, #8
20000b6a:	bd80      	pop	{r7, pc}
20000b6c:	42470060 	submi	r0, r7, #96	; 0x60

20000b70 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
20000b70:	b580      	push	{r7, lr}
20000b72:	b082      	sub	sp, #8
20000b74:	af00      	add	r7, sp, #0
20000b76:	6078      	str	r0, [r7, #4]
20000b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
20000b7a:	687b      	ldr	r3, [r7, #4]
20000b7c:	019a      	lsls	r2, r3, #6
20000b7e:	683b      	ldr	r3, [r7, #0]
20000b80:	071b      	lsls	r3, r3, #28
20000b82:	4904      	ldr	r1, [pc, #16]	; (20000b94 <RCC_PLLI2SConfig+0x24>)
20000b84:	4313      	orrs	r3, r2
20000b86:	2284      	movs	r2, #132	; 0x84
20000b88:	508b      	str	r3, [r1, r2]
}
20000b8a:	46c0      	nop			; (mov r8, r8)
20000b8c:	46bd      	mov	sp, r7
20000b8e:	b002      	add	sp, #8
20000b90:	bd80      	pop	{r7, pc}
20000b92:	46c0      	nop			; (mov r8, r8)
20000b94:	40023800 	andmi	r3, r2, r0, lsl #16

20000b98 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
20000b98:	b580      	push	{r7, lr}
20000b9a:	b082      	sub	sp, #8
20000b9c:	af00      	add	r7, sp, #0
20000b9e:	0002      	movs	r2, r0
20000ba0:	1dfb      	adds	r3, r7, #7
20000ba2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000ba4:	4b03      	ldr	r3, [pc, #12]	; (20000bb4 <RCC_PLLI2SCmd+0x1c>)
20000ba6:	1dfa      	adds	r2, r7, #7
20000ba8:	7812      	ldrb	r2, [r2, #0]
20000baa:	601a      	str	r2, [r3, #0]
}
20000bac:	46c0      	nop			; (mov r8, r8)
20000bae:	46bd      	mov	sp, r7
20000bb0:	b002      	add	sp, #8
20000bb2:	bd80      	pop	{r7, pc}
20000bb4:	42470068 	submi	r0, r7, #104	; 0x68

20000bb8 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000bb8:	b580      	push	{r7, lr}
20000bba:	b084      	sub	sp, #16
20000bbc:	af00      	add	r7, sp, #0
20000bbe:	60f8      	str	r0, [r7, #12]
20000bc0:	60b9      	str	r1, [r7, #8]
20000bc2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000bc4:	68fb      	ldr	r3, [r7, #12]
20000bc6:	019a      	lsls	r2, r3, #6
20000bc8:	68bb      	ldr	r3, [r7, #8]
20000bca:	061b      	lsls	r3, r3, #24
20000bcc:	431a      	orrs	r2, r3
20000bce:	687b      	ldr	r3, [r7, #4]
20000bd0:	071b      	lsls	r3, r3, #28
20000bd2:	4904      	ldr	r1, [pc, #16]	; (20000be4 <RCC_PLLSAIConfig+0x2c>)
20000bd4:	4313      	orrs	r3, r2
20000bd6:	2288      	movs	r2, #136	; 0x88
20000bd8:	508b      	str	r3, [r1, r2]
}
20000bda:	46c0      	nop			; (mov r8, r8)
20000bdc:	46bd      	mov	sp, r7
20000bde:	b004      	add	sp, #16
20000be0:	bd80      	pop	{r7, pc}
20000be2:	46c0      	nop			; (mov r8, r8)
20000be4:	40023800 	andmi	r3, r2, r0, lsl #16

20000be8 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20000be8:	b580      	push	{r7, lr}
20000bea:	b082      	sub	sp, #8
20000bec:	af00      	add	r7, sp, #0
20000bee:	0002      	movs	r2, r0
20000bf0:	1dfb      	adds	r3, r7, #7
20000bf2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20000bf4:	4b03      	ldr	r3, [pc, #12]	; (20000c04 <RCC_PLLSAICmd+0x1c>)
20000bf6:	1dfa      	adds	r2, r7, #7
20000bf8:	7812      	ldrb	r2, [r2, #0]
20000bfa:	601a      	str	r2, [r3, #0]
}
20000bfc:	46c0      	nop			; (mov r8, r8)
20000bfe:	46bd      	mov	sp, r7
20000c00:	b002      	add	sp, #8
20000c02:	bd80      	pop	{r7, pc}
20000c04:	42470070 	submi	r0, r7, #112	; 0x70

20000c08 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20000c08:	b580      	push	{r7, lr}
20000c0a:	b082      	sub	sp, #8
20000c0c:	af00      	add	r7, sp, #0
20000c0e:	0002      	movs	r2, r0
20000c10:	1dfb      	adds	r3, r7, #7
20000c12:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20000c14:	4b03      	ldr	r3, [pc, #12]	; (20000c24 <RCC_ClockSecuritySystemCmd+0x1c>)
20000c16:	1dfa      	adds	r2, r7, #7
20000c18:	7812      	ldrb	r2, [r2, #0]
20000c1a:	601a      	str	r2, [r3, #0]
}
20000c1c:	46c0      	nop			; (mov r8, r8)
20000c1e:	46bd      	mov	sp, r7
20000c20:	b002      	add	sp, #8
20000c22:	bd80      	pop	{r7, pc}
20000c24:	4247004c 	submi	r0, r7, #76	; 0x4c

20000c28 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20000c28:	b580      	push	{r7, lr}
20000c2a:	b084      	sub	sp, #16
20000c2c:	af00      	add	r7, sp, #0
20000c2e:	6078      	str	r0, [r7, #4]
20000c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20000c32:	2300      	movs	r3, #0
20000c34:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20000c36:	4b0a      	ldr	r3, [pc, #40]	; (20000c60 <RCC_MCO1Config+0x38>)
20000c38:	689b      	ldr	r3, [r3, #8]
20000c3a:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20000c3c:	68fb      	ldr	r3, [r7, #12]
20000c3e:	4a09      	ldr	r2, [pc, #36]	; (20000c64 <RCC_MCO1Config+0x3c>)
20000c40:	4013      	ands	r3, r2
20000c42:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
20000c44:	687a      	ldr	r2, [r7, #4]
20000c46:	683b      	ldr	r3, [r7, #0]
20000c48:	4313      	orrs	r3, r2
20000c4a:	68fa      	ldr	r2, [r7, #12]
20000c4c:	4313      	orrs	r3, r2
20000c4e:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20000c50:	4b03      	ldr	r3, [pc, #12]	; (20000c60 <RCC_MCO1Config+0x38>)
20000c52:	68fa      	ldr	r2, [r7, #12]
20000c54:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
20000c56:	46c0      	nop			; (mov r8, r8)
20000c58:	46bd      	mov	sp, r7
20000c5a:	b004      	add	sp, #16
20000c5c:	bd80      	pop	{r7, pc}
20000c5e:	46c0      	nop			; (mov r8, r8)
20000c60:	40023800 	andmi	r3, r2, r0, lsl #16
20000c64:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

20000c68 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
20000c68:	b580      	push	{r7, lr}
20000c6a:	b084      	sub	sp, #16
20000c6c:	af00      	add	r7, sp, #0
20000c6e:	6078      	str	r0, [r7, #4]
20000c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20000c72:	2300      	movs	r3, #0
20000c74:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
20000c76:	4b0a      	ldr	r3, [pc, #40]	; (20000ca0 <RCC_MCO2Config+0x38>)
20000c78:	689b      	ldr	r3, [r3, #8]
20000c7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
20000c7c:	68fb      	ldr	r3, [r7, #12]
20000c7e:	015b      	lsls	r3, r3, #5
20000c80:	095b      	lsrs	r3, r3, #5
20000c82:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
20000c84:	687a      	ldr	r2, [r7, #4]
20000c86:	683b      	ldr	r3, [r7, #0]
20000c88:	4313      	orrs	r3, r2
20000c8a:	68fa      	ldr	r2, [r7, #12]
20000c8c:	4313      	orrs	r3, r2
20000c8e:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20000c90:	4b03      	ldr	r3, [pc, #12]	; (20000ca0 <RCC_MCO2Config+0x38>)
20000c92:	68fa      	ldr	r2, [r7, #12]
20000c94:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
20000c96:	46c0      	nop			; (mov r8, r8)
20000c98:	46bd      	mov	sp, r7
20000c9a:	b004      	add	sp, #16
20000c9c:	bd80      	pop	{r7, pc}
20000c9e:	46c0      	nop			; (mov r8, r8)
20000ca0:	40023800 	andmi	r3, r2, r0, lsl #16

20000ca4 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b084      	sub	sp, #16
20000ca8:	af00      	add	r7, sp, #0
20000caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000cac:	2300      	movs	r3, #0
20000cae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
20000cb0:	4b08      	ldr	r3, [pc, #32]	; (20000cd4 <RCC_SYSCLKConfig+0x30>)
20000cb2:	689b      	ldr	r3, [r3, #8]
20000cb4:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000cb6:	68fb      	ldr	r3, [r7, #12]
20000cb8:	2203      	movs	r2, #3
20000cba:	4393      	bics	r3, r2
20000cbc:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
20000cbe:	68fa      	ldr	r2, [r7, #12]
20000cc0:	687b      	ldr	r3, [r7, #4]
20000cc2:	4313      	orrs	r3, r2
20000cc4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000cc6:	4b03      	ldr	r3, [pc, #12]	; (20000cd4 <RCC_SYSCLKConfig+0x30>)
20000cc8:	68fa      	ldr	r2, [r7, #12]
20000cca:	609a      	str	r2, [r3, #8]
}
20000ccc:	46c0      	nop			; (mov r8, r8)
20000cce:	46bd      	mov	sp, r7
20000cd0:	b004      	add	sp, #16
20000cd2:	bd80      	pop	{r7, pc}
20000cd4:	40023800 	andmi	r3, r2, r0, lsl #16

20000cd8 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000cd8:	b580      	push	{r7, lr}
20000cda:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000cdc:	4b04      	ldr	r3, [pc, #16]	; (20000cf0 <RCC_GetSYSCLKSource+0x18>)
20000cde:	689b      	ldr	r3, [r3, #8]
20000ce0:	b2db      	uxtb	r3, r3
20000ce2:	220c      	movs	r2, #12
20000ce4:	4013      	ands	r3, r2
20000ce6:	b2db      	uxtb	r3, r3
}
20000ce8:	0018      	movs	r0, r3
20000cea:	46bd      	mov	sp, r7
20000cec:	bd80      	pop	{r7, pc}
20000cee:	46c0      	nop			; (mov r8, r8)
20000cf0:	40023800 	andmi	r3, r2, r0, lsl #16

20000cf4 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20000cf4:	b580      	push	{r7, lr}
20000cf6:	b084      	sub	sp, #16
20000cf8:	af00      	add	r7, sp, #0
20000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000cfc:	2300      	movs	r3, #0
20000cfe:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
20000d00:	4b08      	ldr	r3, [pc, #32]	; (20000d24 <RCC_HCLKConfig+0x30>)
20000d02:	689b      	ldr	r3, [r3, #8]
20000d04:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20000d06:	68fb      	ldr	r3, [r7, #12]
20000d08:	22f0      	movs	r2, #240	; 0xf0
20000d0a:	4393      	bics	r3, r2
20000d0c:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
20000d0e:	68fa      	ldr	r2, [r7, #12]
20000d10:	687b      	ldr	r3, [r7, #4]
20000d12:	4313      	orrs	r3, r2
20000d14:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000d16:	4b03      	ldr	r3, [pc, #12]	; (20000d24 <RCC_HCLKConfig+0x30>)
20000d18:	68fa      	ldr	r2, [r7, #12]
20000d1a:	609a      	str	r2, [r3, #8]
}
20000d1c:	46c0      	nop			; (mov r8, r8)
20000d1e:	46bd      	mov	sp, r7
20000d20:	b004      	add	sp, #16
20000d22:	bd80      	pop	{r7, pc}
20000d24:	40023800 	andmi	r3, r2, r0, lsl #16

20000d28 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20000d28:	b580      	push	{r7, lr}
20000d2a:	b084      	sub	sp, #16
20000d2c:	af00      	add	r7, sp, #0
20000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000d30:	2300      	movs	r3, #0
20000d32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000d34:	4b08      	ldr	r3, [pc, #32]	; (20000d58 <RCC_PCLK1Config+0x30>)
20000d36:	689b      	ldr	r3, [r3, #8]
20000d38:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20000d3a:	68fb      	ldr	r3, [r7, #12]
20000d3c:	4a07      	ldr	r2, [pc, #28]	; (20000d5c <RCC_PCLK1Config+0x34>)
20000d3e:	4013      	ands	r3, r2
20000d40:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
20000d42:	68fa      	ldr	r2, [r7, #12]
20000d44:	687b      	ldr	r3, [r7, #4]
20000d46:	4313      	orrs	r3, r2
20000d48:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000d4a:	4b03      	ldr	r3, [pc, #12]	; (20000d58 <RCC_PCLK1Config+0x30>)
20000d4c:	68fa      	ldr	r2, [r7, #12]
20000d4e:	609a      	str	r2, [r3, #8]
}
20000d50:	46c0      	nop			; (mov r8, r8)
20000d52:	46bd      	mov	sp, r7
20000d54:	b004      	add	sp, #16
20000d56:	bd80      	pop	{r7, pc}
20000d58:	40023800 	andmi	r3, r2, r0, lsl #16
20000d5c:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

20000d60 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
20000d60:	b580      	push	{r7, lr}
20000d62:	b084      	sub	sp, #16
20000d64:	af00      	add	r7, sp, #0
20000d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000d68:	2300      	movs	r3, #0
20000d6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000d6c:	4b09      	ldr	r3, [pc, #36]	; (20000d94 <RCC_PCLK2Config+0x34>)
20000d6e:	689b      	ldr	r3, [r3, #8]
20000d70:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
20000d72:	68fb      	ldr	r3, [r7, #12]
20000d74:	4a08      	ldr	r2, [pc, #32]	; (20000d98 <RCC_PCLK2Config+0x38>)
20000d76:	4013      	ands	r3, r2
20000d78:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
20000d7a:	687b      	ldr	r3, [r7, #4]
20000d7c:	00db      	lsls	r3, r3, #3
20000d7e:	68fa      	ldr	r2, [r7, #12]
20000d80:	4313      	orrs	r3, r2
20000d82:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000d84:	4b03      	ldr	r3, [pc, #12]	; (20000d94 <RCC_PCLK2Config+0x34>)
20000d86:	68fa      	ldr	r2, [r7, #12]
20000d88:	609a      	str	r2, [r3, #8]
}
20000d8a:	46c0      	nop			; (mov r8, r8)
20000d8c:	46bd      	mov	sp, r7
20000d8e:	b004      	add	sp, #16
20000d90:	bd80      	pop	{r7, pc}
20000d92:	46c0      	nop			; (mov r8, r8)
20000d94:	40023800 	andmi	r3, r2, r0, lsl #16
20000d98:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

20000d9c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
20000d9c:	b580      	push	{r7, lr}
20000d9e:	b088      	sub	sp, #32
20000da0:	af00      	add	r7, sp, #0
20000da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000da4:	2300      	movs	r3, #0
20000da6:	61bb      	str	r3, [r7, #24]
20000da8:	2300      	movs	r3, #0
20000daa:	617b      	str	r3, [r7, #20]
20000dac:	2300      	movs	r3, #0
20000dae:	61fb      	str	r3, [r7, #28]
20000db0:	2302      	movs	r3, #2
20000db2:	613b      	str	r3, [r7, #16]
20000db4:	2300      	movs	r3, #0
20000db6:	60fb      	str	r3, [r7, #12]
20000db8:	2302      	movs	r3, #2
20000dba:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000dbc:	4b49      	ldr	r3, [pc, #292]	; (20000ee4 <RCC_GetClocksFreq+0x148>)
20000dbe:	689b      	ldr	r3, [r3, #8]
20000dc0:	220c      	movs	r2, #12
20000dc2:	4013      	ands	r3, r2
20000dc4:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000dc6:	69bb      	ldr	r3, [r7, #24]
20000dc8:	2b04      	cmp	r3, #4
20000dca:	d007      	beq.n	20000ddc <RCC_GetClocksFreq+0x40>
20000dcc:	2b08      	cmp	r3, #8
20000dce:	d009      	beq.n	20000de4 <RCC_GetClocksFreq+0x48>
20000dd0:	2b00      	cmp	r3, #0
20000dd2:	d141      	bne.n	20000e58 <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000dd4:	687b      	ldr	r3, [r7, #4]
20000dd6:	4a44      	ldr	r2, [pc, #272]	; (20000ee8 <RCC_GetClocksFreq+0x14c>)
20000dd8:	601a      	str	r2, [r3, #0]
    break;
20000dda:	e041      	b.n	20000e60 <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000ddc:	687b      	ldr	r3, [r7, #4]
20000dde:	4a43      	ldr	r2, [pc, #268]	; (20000eec <RCC_GetClocksFreq+0x150>)
20000de0:	601a      	str	r2, [r3, #0]
    break;
20000de2:	e03d      	b.n	20000e60 <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000de4:	4b3f      	ldr	r3, [pc, #252]	; (20000ee4 <RCC_GetClocksFreq+0x148>)
20000de6:	685b      	ldr	r3, [r3, #4]
20000de8:	0d9b      	lsrs	r3, r3, #22
20000dea:	2201      	movs	r2, #1
20000dec:	4013      	ands	r3, r2
20000dee:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20000df0:	4b3c      	ldr	r3, [pc, #240]	; (20000ee4 <RCC_GetClocksFreq+0x148>)
20000df2:	685b      	ldr	r3, [r3, #4]
20000df4:	223f      	movs	r2, #63	; 0x3f
20000df6:	4013      	ands	r3, r2
20000df8:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000dfa:	68fb      	ldr	r3, [r7, #12]
20000dfc:	2b00      	cmp	r3, #0
20000dfe:	d00d      	beq.n	20000e1c <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
20000e00:	68b9      	ldr	r1, [r7, #8]
20000e02:	483a      	ldr	r0, [pc, #232]	; (20000eec <RCC_GetClocksFreq+0x150>)
20000e04:	f000 fc22 	bl	2000164c <__udivsi3>
20000e08:	0003      	movs	r3, r0
20000e0a:	001a      	movs	r2, r3
20000e0c:	4b35      	ldr	r3, [pc, #212]	; (20000ee4 <RCC_GetClocksFreq+0x148>)
20000e0e:	685b      	ldr	r3, [r3, #4]
20000e10:	099b      	lsrs	r3, r3, #6
20000e12:	05db      	lsls	r3, r3, #23
20000e14:	0ddb      	lsrs	r3, r3, #23
20000e16:	4353      	muls	r3, r2
20000e18:	61fb      	str	r3, [r7, #28]
20000e1a:	e00c      	b.n	20000e36 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000e1c:	68b9      	ldr	r1, [r7, #8]
20000e1e:	4832      	ldr	r0, [pc, #200]	; (20000ee8 <RCC_GetClocksFreq+0x14c>)
20000e20:	f000 fc14 	bl	2000164c <__udivsi3>
20000e24:	0003      	movs	r3, r0
20000e26:	001a      	movs	r2, r3
20000e28:	4b2e      	ldr	r3, [pc, #184]	; (20000ee4 <RCC_GetClocksFreq+0x148>)
20000e2a:	685b      	ldr	r3, [r3, #4]
20000e2c:	099b      	lsrs	r3, r3, #6
20000e2e:	05db      	lsls	r3, r3, #23
20000e30:	0ddb      	lsrs	r3, r3, #23
20000e32:	4353      	muls	r3, r2
20000e34:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000e36:	4b2b      	ldr	r3, [pc, #172]	; (20000ee4 <RCC_GetClocksFreq+0x148>)
20000e38:	685b      	ldr	r3, [r3, #4]
20000e3a:	0c1b      	lsrs	r3, r3, #16
20000e3c:	2203      	movs	r2, #3
20000e3e:	4013      	ands	r3, r2
20000e40:	3301      	adds	r3, #1
20000e42:	005b      	lsls	r3, r3, #1
20000e44:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
20000e46:	6939      	ldr	r1, [r7, #16]
20000e48:	69f8      	ldr	r0, [r7, #28]
20000e4a:	f000 fbff 	bl	2000164c <__udivsi3>
20000e4e:	0003      	movs	r3, r0
20000e50:	001a      	movs	r2, r3
20000e52:	687b      	ldr	r3, [r7, #4]
20000e54:	601a      	str	r2, [r3, #0]
    break;
20000e56:	e003      	b.n	20000e60 <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000e58:	687b      	ldr	r3, [r7, #4]
20000e5a:	4a23      	ldr	r2, [pc, #140]	; (20000ee8 <RCC_GetClocksFreq+0x14c>)
20000e5c:	601a      	str	r2, [r3, #0]
    break;
20000e5e:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
20000e60:	4b20      	ldr	r3, [pc, #128]	; (20000ee4 <RCC_GetClocksFreq+0x148>)
20000e62:	689b      	ldr	r3, [r3, #8]
20000e64:	22f0      	movs	r2, #240	; 0xf0
20000e66:	4013      	ands	r3, r2
20000e68:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
20000e6a:	69bb      	ldr	r3, [r7, #24]
20000e6c:	091b      	lsrs	r3, r3, #4
20000e6e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000e70:	4a1f      	ldr	r2, [pc, #124]	; (20000ef0 <RCC_GetClocksFreq+0x154>)
20000e72:	69bb      	ldr	r3, [r7, #24]
20000e74:	18d3      	adds	r3, r2, r3
20000e76:	781b      	ldrb	r3, [r3, #0]
20000e78:	b2db      	uxtb	r3, r3
20000e7a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
20000e7c:	687b      	ldr	r3, [r7, #4]
20000e7e:	681a      	ldr	r2, [r3, #0]
20000e80:	697b      	ldr	r3, [r7, #20]
20000e82:	40da      	lsrs	r2, r3
20000e84:	687b      	ldr	r3, [r7, #4]
20000e86:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
20000e88:	4b16      	ldr	r3, [pc, #88]	; (20000ee4 <RCC_GetClocksFreq+0x148>)
20000e8a:	689a      	ldr	r2, [r3, #8]
20000e8c:	23e0      	movs	r3, #224	; 0xe0
20000e8e:	015b      	lsls	r3, r3, #5
20000e90:	4013      	ands	r3, r2
20000e92:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
20000e94:	69bb      	ldr	r3, [r7, #24]
20000e96:	0a9b      	lsrs	r3, r3, #10
20000e98:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000e9a:	4a15      	ldr	r2, [pc, #84]	; (20000ef0 <RCC_GetClocksFreq+0x154>)
20000e9c:	69bb      	ldr	r3, [r7, #24]
20000e9e:	18d3      	adds	r3, r2, r3
20000ea0:	781b      	ldrb	r3, [r3, #0]
20000ea2:	b2db      	uxtb	r3, r3
20000ea4:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000ea6:	687b      	ldr	r3, [r7, #4]
20000ea8:	685a      	ldr	r2, [r3, #4]
20000eaa:	697b      	ldr	r3, [r7, #20]
20000eac:	40da      	lsrs	r2, r3
20000eae:	687b      	ldr	r3, [r7, #4]
20000eb0:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
20000eb2:	4b0c      	ldr	r3, [pc, #48]	; (20000ee4 <RCC_GetClocksFreq+0x148>)
20000eb4:	689a      	ldr	r2, [r3, #8]
20000eb6:	23e0      	movs	r3, #224	; 0xe0
20000eb8:	021b      	lsls	r3, r3, #8
20000eba:	4013      	ands	r3, r2
20000ebc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
20000ebe:	69bb      	ldr	r3, [r7, #24]
20000ec0:	0b5b      	lsrs	r3, r3, #13
20000ec2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000ec4:	4a0a      	ldr	r2, [pc, #40]	; (20000ef0 <RCC_GetClocksFreq+0x154>)
20000ec6:	69bb      	ldr	r3, [r7, #24]
20000ec8:	18d3      	adds	r3, r2, r3
20000eca:	781b      	ldrb	r3, [r3, #0]
20000ecc:	b2db      	uxtb	r3, r3
20000ece:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000ed0:	687b      	ldr	r3, [r7, #4]
20000ed2:	685a      	ldr	r2, [r3, #4]
20000ed4:	697b      	ldr	r3, [r7, #20]
20000ed6:	40da      	lsrs	r2, r3
20000ed8:	687b      	ldr	r3, [r7, #4]
20000eda:	60da      	str	r2, [r3, #12]
}
20000edc:	46c0      	nop			; (mov r8, r8)
20000ede:	46bd      	mov	sp, r7
20000ee0:	b008      	add	sp, #32
20000ee2:	bd80      	pop	{r7, pc}
20000ee4:	40023800 	andmi	r3, r2, r0, lsl #16
20000ee8:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000eec:	017d7840 	cmneq	sp, r0, asr #16
20000ef0:	20001784 	andcs	r1, r0, r4, lsl #15

20000ef4 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000ef4:	b580      	push	{r7, lr}
20000ef6:	b084      	sub	sp, #16
20000ef8:	af00      	add	r7, sp, #0
20000efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000efc:	2300      	movs	r3, #0
20000efe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
20000f00:	687a      	ldr	r2, [r7, #4]
20000f02:	23c0      	movs	r3, #192	; 0xc0
20000f04:	009b      	lsls	r3, r3, #2
20000f06:	401a      	ands	r2, r3
20000f08:	23c0      	movs	r3, #192	; 0xc0
20000f0a:	009b      	lsls	r3, r3, #2
20000f0c:	429a      	cmp	r2, r3
20000f0e:	d10f      	bne.n	20000f30 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
20000f10:	4b0d      	ldr	r3, [pc, #52]	; (20000f48 <RCC_RTCCLKConfig+0x54>)
20000f12:	689b      	ldr	r3, [r3, #8]
20000f14:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000f16:	68fb      	ldr	r3, [r7, #12]
20000f18:	4a0c      	ldr	r2, [pc, #48]	; (20000f4c <RCC_RTCCLKConfig+0x58>)
20000f1a:	4013      	ands	r3, r2
20000f1c:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
20000f1e:	687b      	ldr	r3, [r7, #4]
20000f20:	4a0b      	ldr	r2, [pc, #44]	; (20000f50 <RCC_RTCCLKConfig+0x5c>)
20000f22:	4013      	ands	r3, r2
20000f24:	68fa      	ldr	r2, [r7, #12]
20000f26:	4313      	orrs	r3, r2
20000f28:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000f2a:	4b07      	ldr	r3, [pc, #28]	; (20000f48 <RCC_RTCCLKConfig+0x54>)
20000f2c:	68fa      	ldr	r2, [r7, #12]
20000f2e:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
20000f30:	4b05      	ldr	r3, [pc, #20]	; (20000f48 <RCC_RTCCLKConfig+0x54>)
20000f32:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000f34:	687b      	ldr	r3, [r7, #4]
20000f36:	051b      	lsls	r3, r3, #20
20000f38:	0d1a      	lsrs	r2, r3, #20
20000f3a:	4b03      	ldr	r3, [pc, #12]	; (20000f48 <RCC_RTCCLKConfig+0x54>)
20000f3c:	430a      	orrs	r2, r1
20000f3e:	671a      	str	r2, [r3, #112]	; 0x70
}
20000f40:	46c0      	nop			; (mov r8, r8)
20000f42:	46bd      	mov	sp, r7
20000f44:	b004      	add	sp, #16
20000f46:	bd80      	pop	{r7, pc}
20000f48:	40023800 	andmi	r3, r2, r0, lsl #16
20000f4c:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
20000f50:	0ffffcff 	svceq	0x00fffcff

20000f54 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
20000f54:	b580      	push	{r7, lr}
20000f56:	b082      	sub	sp, #8
20000f58:	af00      	add	r7, sp, #0
20000f5a:	0002      	movs	r2, r0
20000f5c:	1dfb      	adds	r3, r7, #7
20000f5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
20000f60:	4b03      	ldr	r3, [pc, #12]	; (20000f70 <RCC_RTCCLKCmd+0x1c>)
20000f62:	1dfa      	adds	r2, r7, #7
20000f64:	7812      	ldrb	r2, [r2, #0]
20000f66:	601a      	str	r2, [r3, #0]
}
20000f68:	46c0      	nop			; (mov r8, r8)
20000f6a:	46bd      	mov	sp, r7
20000f6c:	b002      	add	sp, #8
20000f6e:	bd80      	pop	{r7, pc}
20000f70:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

20000f74 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
20000f74:	b580      	push	{r7, lr}
20000f76:	b082      	sub	sp, #8
20000f78:	af00      	add	r7, sp, #0
20000f7a:	0002      	movs	r2, r0
20000f7c:	1dfb      	adds	r3, r7, #7
20000f7e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
20000f80:	4b03      	ldr	r3, [pc, #12]	; (20000f90 <RCC_BackupResetCmd+0x1c>)
20000f82:	1dfa      	adds	r2, r7, #7
20000f84:	7812      	ldrb	r2, [r2, #0]
20000f86:	601a      	str	r2, [r3, #0]
}
20000f88:	46c0      	nop			; (mov r8, r8)
20000f8a:	46bd      	mov	sp, r7
20000f8c:	b002      	add	sp, #8
20000f8e:	bd80      	pop	{r7, pc}
20000f90:	42470e40 	submi	r0, r7, #64, 28	; 0x400

20000f94 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
20000f94:	b580      	push	{r7, lr}
20000f96:	b082      	sub	sp, #8
20000f98:	af00      	add	r7, sp, #0
20000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
20000f9c:	4b03      	ldr	r3, [pc, #12]	; (20000fac <RCC_I2SCLKConfig+0x18>)
20000f9e:	687a      	ldr	r2, [r7, #4]
20000fa0:	601a      	str	r2, [r3, #0]
}
20000fa2:	46c0      	nop			; (mov r8, r8)
20000fa4:	46bd      	mov	sp, r7
20000fa6:	b002      	add	sp, #8
20000fa8:	bd80      	pop	{r7, pc}
20000faa:	46c0      	nop			; (mov r8, r8)
20000fac:	4247015c 	submi	r0, r7, #92, 2

20000fb0 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
20000fb0:	b580      	push	{r7, lr}
20000fb2:	b084      	sub	sp, #16
20000fb4:	af00      	add	r7, sp, #0
20000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000fb8:	2300      	movs	r3, #0
20000fba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000fbc:	4a09      	ldr	r2, [pc, #36]	; (20000fe4 <RCC_SAIBlockACLKConfig+0x34>)
20000fbe:	238c      	movs	r3, #140	; 0x8c
20000fc0:	58d3      	ldr	r3, [r2, r3]
20000fc2:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000fc4:	68fb      	ldr	r3, [r7, #12]
20000fc6:	4a08      	ldr	r2, [pc, #32]	; (20000fe8 <RCC_SAIBlockACLKConfig+0x38>)
20000fc8:	4013      	ands	r3, r2
20000fca:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000fcc:	68fa      	ldr	r2, [r7, #12]
20000fce:	687b      	ldr	r3, [r7, #4]
20000fd0:	4313      	orrs	r3, r2
20000fd2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000fd4:	4903      	ldr	r1, [pc, #12]	; (20000fe4 <RCC_SAIBlockACLKConfig+0x34>)
20000fd6:	228c      	movs	r2, #140	; 0x8c
20000fd8:	68fb      	ldr	r3, [r7, #12]
20000fda:	508b      	str	r3, [r1, r2]
}
20000fdc:	46c0      	nop			; (mov r8, r8)
20000fde:	46bd      	mov	sp, r7
20000fe0:	b004      	add	sp, #16
20000fe2:	bd80      	pop	{r7, pc}
20000fe4:	40023800 	andmi	r3, r2, r0, lsl #16
20000fe8:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000fec <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000fec:	b580      	push	{r7, lr}
20000fee:	b084      	sub	sp, #16
20000ff0:	af00      	add	r7, sp, #0
20000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000ff4:	2300      	movs	r3, #0
20000ff6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000ff8:	4a09      	ldr	r2, [pc, #36]	; (20001020 <RCC_SAIBlockBCLKConfig+0x34>)
20000ffa:	238c      	movs	r3, #140	; 0x8c
20000ffc:	58d3      	ldr	r3, [r2, r3]
20000ffe:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
20001000:	68fb      	ldr	r3, [r7, #12]
20001002:	4a08      	ldr	r2, [pc, #32]	; (20001024 <RCC_SAIBlockBCLKConfig+0x38>)
20001004:	4013      	ands	r3, r2
20001006:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20001008:	68fa      	ldr	r2, [r7, #12]
2000100a:	687b      	ldr	r3, [r7, #4]
2000100c:	4313      	orrs	r3, r2
2000100e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20001010:	4903      	ldr	r1, [pc, #12]	; (20001020 <RCC_SAIBlockBCLKConfig+0x34>)
20001012:	228c      	movs	r2, #140	; 0x8c
20001014:	68fb      	ldr	r3, [r7, #12]
20001016:	508b      	str	r3, [r1, r2]
}
20001018:	46c0      	nop			; (mov r8, r8)
2000101a:	46bd      	mov	sp, r7
2000101c:	b004      	add	sp, #16
2000101e:	bd80      	pop	{r7, pc}
20001020:	40023800 	andmi	r3, r2, r0, lsl #16
20001024:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20001028 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20001028:	b580      	push	{r7, lr}
2000102a:	b084      	sub	sp, #16
2000102c:	af00      	add	r7, sp, #0
2000102e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20001030:	2300      	movs	r3, #0
20001032:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20001034:	4a0a      	ldr	r2, [pc, #40]	; (20001060 <RCC_SAIPLLI2SClkDivConfig+0x38>)
20001036:	238c      	movs	r3, #140	; 0x8c
20001038:	58d3      	ldr	r3, [r2, r3]
2000103a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
2000103c:	68fb      	ldr	r3, [r7, #12]
2000103e:	221f      	movs	r2, #31
20001040:	4393      	bics	r3, r2
20001042:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
20001044:	687b      	ldr	r3, [r7, #4]
20001046:	3b01      	subs	r3, #1
20001048:	68fa      	ldr	r2, [r7, #12]
2000104a:	4313      	orrs	r3, r2
2000104c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000104e:	4904      	ldr	r1, [pc, #16]	; (20001060 <RCC_SAIPLLI2SClkDivConfig+0x38>)
20001050:	228c      	movs	r2, #140	; 0x8c
20001052:	68fb      	ldr	r3, [r7, #12]
20001054:	508b      	str	r3, [r1, r2]
}
20001056:	46c0      	nop			; (mov r8, r8)
20001058:	46bd      	mov	sp, r7
2000105a:	b004      	add	sp, #16
2000105c:	bd80      	pop	{r7, pc}
2000105e:	46c0      	nop			; (mov r8, r8)
20001060:	40023800 	andmi	r3, r2, r0, lsl #16

20001064 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
20001064:	b580      	push	{r7, lr}
20001066:	b084      	sub	sp, #16
20001068:	af00      	add	r7, sp, #0
2000106a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000106c:	2300      	movs	r3, #0
2000106e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
20001070:	4a0a      	ldr	r2, [pc, #40]	; (2000109c <RCC_SAIPLLSAIClkDivConfig+0x38>)
20001072:	238c      	movs	r3, #140	; 0x8c
20001074:	58d3      	ldr	r3, [r2, r3]
20001076:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
20001078:	68fb      	ldr	r3, [r7, #12]
2000107a:	4a09      	ldr	r2, [pc, #36]	; (200010a0 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
2000107c:	4013      	ands	r3, r2
2000107e:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
20001080:	687b      	ldr	r3, [r7, #4]
20001082:	3b01      	subs	r3, #1
20001084:	021b      	lsls	r3, r3, #8
20001086:	68fa      	ldr	r2, [r7, #12]
20001088:	4313      	orrs	r3, r2
2000108a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000108c:	4903      	ldr	r1, [pc, #12]	; (2000109c <RCC_SAIPLLSAIClkDivConfig+0x38>)
2000108e:	228c      	movs	r2, #140	; 0x8c
20001090:	68fb      	ldr	r3, [r7, #12]
20001092:	508b      	str	r3, [r1, r2]
}
20001094:	46c0      	nop			; (mov r8, r8)
20001096:	46bd      	mov	sp, r7
20001098:	b004      	add	sp, #16
2000109a:	bd80      	pop	{r7, pc}
2000109c:	40023800 	andmi	r3, r2, r0, lsl #16
200010a0:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

200010a4 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
200010a4:	b580      	push	{r7, lr}
200010a6:	b084      	sub	sp, #16
200010a8:	af00      	add	r7, sp, #0
200010aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200010ac:	2300      	movs	r3, #0
200010ae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
200010b0:	4a09      	ldr	r2, [pc, #36]	; (200010d8 <RCC_LTDCCLKDivConfig+0x34>)
200010b2:	238c      	movs	r3, #140	; 0x8c
200010b4:	58d3      	ldr	r3, [r2, r3]
200010b6:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
200010b8:	68fb      	ldr	r3, [r7, #12]
200010ba:	4a08      	ldr	r2, [pc, #32]	; (200010dc <RCC_LTDCCLKDivConfig+0x38>)
200010bc:	4013      	ands	r3, r2
200010be:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
200010c0:	68fa      	ldr	r2, [r7, #12]
200010c2:	687b      	ldr	r3, [r7, #4]
200010c4:	4313      	orrs	r3, r2
200010c6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200010c8:	4903      	ldr	r1, [pc, #12]	; (200010d8 <RCC_LTDCCLKDivConfig+0x34>)
200010ca:	228c      	movs	r2, #140	; 0x8c
200010cc:	68fb      	ldr	r3, [r7, #12]
200010ce:	508b      	str	r3, [r1, r2]
}
200010d0:	46c0      	nop			; (mov r8, r8)
200010d2:	46bd      	mov	sp, r7
200010d4:	b004      	add	sp, #16
200010d6:	bd80      	pop	{r7, pc}
200010d8:	40023800 	andmi	r3, r2, r0, lsl #16
200010dc:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

200010e0 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
200010e0:	b580      	push	{r7, lr}
200010e2:	b082      	sub	sp, #8
200010e4:	af00      	add	r7, sp, #0
200010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
200010e8:	4b03      	ldr	r3, [pc, #12]	; (200010f8 <RCC_TIMCLKPresConfig+0x18>)
200010ea:	687a      	ldr	r2, [r7, #4]
200010ec:	601a      	str	r2, [r3, #0]
}
200010ee:	46c0      	nop			; (mov r8, r8)
200010f0:	46bd      	mov	sp, r7
200010f2:	b002      	add	sp, #8
200010f4:	bd80      	pop	{r7, pc}
200010f6:	46c0      	nop			; (mov r8, r8)
200010f8:	424711e0 	submi	r1, r7, #224, 2	; 0x38

200010fc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200010fc:	b580      	push	{r7, lr}
200010fe:	b082      	sub	sp, #8
20001100:	af00      	add	r7, sp, #0
20001102:	6078      	str	r0, [r7, #4]
20001104:	000a      	movs	r2, r1
20001106:	1cfb      	adds	r3, r7, #3
20001108:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000110a:	1cfb      	adds	r3, r7, #3
2000110c:	781b      	ldrb	r3, [r3, #0]
2000110e:	2b00      	cmp	r3, #0
20001110:	d006      	beq.n	20001120 <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
20001112:	4b09      	ldr	r3, [pc, #36]	; (20001138 <RCC_AHB1PeriphClockCmd+0x3c>)
20001114:	6b19      	ldr	r1, [r3, #48]	; 0x30
20001116:	4b08      	ldr	r3, [pc, #32]	; (20001138 <RCC_AHB1PeriphClockCmd+0x3c>)
20001118:	687a      	ldr	r2, [r7, #4]
2000111a:	430a      	orrs	r2, r1
2000111c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
2000111e:	e006      	b.n	2000112e <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
20001120:	4b05      	ldr	r3, [pc, #20]	; (20001138 <RCC_AHB1PeriphClockCmd+0x3c>)
20001122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001124:	687b      	ldr	r3, [r7, #4]
20001126:	43d9      	mvns	r1, r3
20001128:	4b03      	ldr	r3, [pc, #12]	; (20001138 <RCC_AHB1PeriphClockCmd+0x3c>)
2000112a:	400a      	ands	r2, r1
2000112c:	631a      	str	r2, [r3, #48]	; 0x30
}
2000112e:	46c0      	nop			; (mov r8, r8)
20001130:	46bd      	mov	sp, r7
20001132:	b002      	add	sp, #8
20001134:	bd80      	pop	{r7, pc}
20001136:	46c0      	nop			; (mov r8, r8)
20001138:	40023800 	andmi	r3, r2, r0, lsl #16

2000113c <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
2000113c:	b580      	push	{r7, lr}
2000113e:	b082      	sub	sp, #8
20001140:	af00      	add	r7, sp, #0
20001142:	6078      	str	r0, [r7, #4]
20001144:	000a      	movs	r2, r1
20001146:	1cfb      	adds	r3, r7, #3
20001148:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000114a:	1cfb      	adds	r3, r7, #3
2000114c:	781b      	ldrb	r3, [r3, #0]
2000114e:	2b00      	cmp	r3, #0
20001150:	d006      	beq.n	20001160 <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
20001152:	4b09      	ldr	r3, [pc, #36]	; (20001178 <RCC_AHB2PeriphClockCmd+0x3c>)
20001154:	6b59      	ldr	r1, [r3, #52]	; 0x34
20001156:	4b08      	ldr	r3, [pc, #32]	; (20001178 <RCC_AHB2PeriphClockCmd+0x3c>)
20001158:	687a      	ldr	r2, [r7, #4]
2000115a:	430a      	orrs	r2, r1
2000115c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
2000115e:	e006      	b.n	2000116e <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
20001160:	4b05      	ldr	r3, [pc, #20]	; (20001178 <RCC_AHB2PeriphClockCmd+0x3c>)
20001162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20001164:	687b      	ldr	r3, [r7, #4]
20001166:	43d9      	mvns	r1, r3
20001168:	4b03      	ldr	r3, [pc, #12]	; (20001178 <RCC_AHB2PeriphClockCmd+0x3c>)
2000116a:	400a      	ands	r2, r1
2000116c:	635a      	str	r2, [r3, #52]	; 0x34
}
2000116e:	46c0      	nop			; (mov r8, r8)
20001170:	46bd      	mov	sp, r7
20001172:	b002      	add	sp, #8
20001174:	bd80      	pop	{r7, pc}
20001176:	46c0      	nop			; (mov r8, r8)
20001178:	40023800 	andmi	r3, r2, r0, lsl #16

2000117c <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
2000117c:	b580      	push	{r7, lr}
2000117e:	b082      	sub	sp, #8
20001180:	af00      	add	r7, sp, #0
20001182:	6078      	str	r0, [r7, #4]
20001184:	000a      	movs	r2, r1
20001186:	1cfb      	adds	r3, r7, #3
20001188:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000118a:	1cfb      	adds	r3, r7, #3
2000118c:	781b      	ldrb	r3, [r3, #0]
2000118e:	2b00      	cmp	r3, #0
20001190:	d006      	beq.n	200011a0 <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
20001192:	4b09      	ldr	r3, [pc, #36]	; (200011b8 <RCC_AHB3PeriphClockCmd+0x3c>)
20001194:	6b99      	ldr	r1, [r3, #56]	; 0x38
20001196:	4b08      	ldr	r3, [pc, #32]	; (200011b8 <RCC_AHB3PeriphClockCmd+0x3c>)
20001198:	687a      	ldr	r2, [r7, #4]
2000119a:	430a      	orrs	r2, r1
2000119c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
2000119e:	e006      	b.n	200011ae <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
200011a0:	4b05      	ldr	r3, [pc, #20]	; (200011b8 <RCC_AHB3PeriphClockCmd+0x3c>)
200011a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200011a4:	687b      	ldr	r3, [r7, #4]
200011a6:	43d9      	mvns	r1, r3
200011a8:	4b03      	ldr	r3, [pc, #12]	; (200011b8 <RCC_AHB3PeriphClockCmd+0x3c>)
200011aa:	400a      	ands	r2, r1
200011ac:	639a      	str	r2, [r3, #56]	; 0x38
}
200011ae:	46c0      	nop			; (mov r8, r8)
200011b0:	46bd      	mov	sp, r7
200011b2:	b002      	add	sp, #8
200011b4:	bd80      	pop	{r7, pc}
200011b6:	46c0      	nop			; (mov r8, r8)
200011b8:	40023800 	andmi	r3, r2, r0, lsl #16

200011bc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
200011bc:	b580      	push	{r7, lr}
200011be:	b082      	sub	sp, #8
200011c0:	af00      	add	r7, sp, #0
200011c2:	6078      	str	r0, [r7, #4]
200011c4:	000a      	movs	r2, r1
200011c6:	1cfb      	adds	r3, r7, #3
200011c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200011ca:	1cfb      	adds	r3, r7, #3
200011cc:	781b      	ldrb	r3, [r3, #0]
200011ce:	2b00      	cmp	r3, #0
200011d0:	d006      	beq.n	200011e0 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
200011d2:	4b09      	ldr	r3, [pc, #36]	; (200011f8 <RCC_APB1PeriphClockCmd+0x3c>)
200011d4:	6c19      	ldr	r1, [r3, #64]	; 0x40
200011d6:	4b08      	ldr	r3, [pc, #32]	; (200011f8 <RCC_APB1PeriphClockCmd+0x3c>)
200011d8:	687a      	ldr	r2, [r7, #4]
200011da:	430a      	orrs	r2, r1
200011dc:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
200011de:	e006      	b.n	200011ee <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
200011e0:	4b05      	ldr	r3, [pc, #20]	; (200011f8 <RCC_APB1PeriphClockCmd+0x3c>)
200011e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
200011e4:	687b      	ldr	r3, [r7, #4]
200011e6:	43d9      	mvns	r1, r3
200011e8:	4b03      	ldr	r3, [pc, #12]	; (200011f8 <RCC_APB1PeriphClockCmd+0x3c>)
200011ea:	400a      	ands	r2, r1
200011ec:	641a      	str	r2, [r3, #64]	; 0x40
}
200011ee:	46c0      	nop			; (mov r8, r8)
200011f0:	46bd      	mov	sp, r7
200011f2:	b002      	add	sp, #8
200011f4:	bd80      	pop	{r7, pc}
200011f6:	46c0      	nop			; (mov r8, r8)
200011f8:	40023800 	andmi	r3, r2, r0, lsl #16

200011fc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200011fc:	b580      	push	{r7, lr}
200011fe:	b082      	sub	sp, #8
20001200:	af00      	add	r7, sp, #0
20001202:	6078      	str	r0, [r7, #4]
20001204:	000a      	movs	r2, r1
20001206:	1cfb      	adds	r3, r7, #3
20001208:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000120a:	1cfb      	adds	r3, r7, #3
2000120c:	781b      	ldrb	r3, [r3, #0]
2000120e:	2b00      	cmp	r3, #0
20001210:	d006      	beq.n	20001220 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
20001212:	4b09      	ldr	r3, [pc, #36]	; (20001238 <RCC_APB2PeriphClockCmd+0x3c>)
20001214:	6c59      	ldr	r1, [r3, #68]	; 0x44
20001216:	4b08      	ldr	r3, [pc, #32]	; (20001238 <RCC_APB2PeriphClockCmd+0x3c>)
20001218:	687a      	ldr	r2, [r7, #4]
2000121a:	430a      	orrs	r2, r1
2000121c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
2000121e:	e006      	b.n	2000122e <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
20001220:	4b05      	ldr	r3, [pc, #20]	; (20001238 <RCC_APB2PeriphClockCmd+0x3c>)
20001222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20001224:	687b      	ldr	r3, [r7, #4]
20001226:	43d9      	mvns	r1, r3
20001228:	4b03      	ldr	r3, [pc, #12]	; (20001238 <RCC_APB2PeriphClockCmd+0x3c>)
2000122a:	400a      	ands	r2, r1
2000122c:	645a      	str	r2, [r3, #68]	; 0x44
}
2000122e:	46c0      	nop			; (mov r8, r8)
20001230:	46bd      	mov	sp, r7
20001232:	b002      	add	sp, #8
20001234:	bd80      	pop	{r7, pc}
20001236:	46c0      	nop			; (mov r8, r8)
20001238:	40023800 	andmi	r3, r2, r0, lsl #16

2000123c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
2000123c:	b580      	push	{r7, lr}
2000123e:	b082      	sub	sp, #8
20001240:	af00      	add	r7, sp, #0
20001242:	6078      	str	r0, [r7, #4]
20001244:	000a      	movs	r2, r1
20001246:	1cfb      	adds	r3, r7, #3
20001248:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000124a:	1cfb      	adds	r3, r7, #3
2000124c:	781b      	ldrb	r3, [r3, #0]
2000124e:	2b00      	cmp	r3, #0
20001250:	d006      	beq.n	20001260 <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
20001252:	4b09      	ldr	r3, [pc, #36]	; (20001278 <RCC_AHB1PeriphResetCmd+0x3c>)
20001254:	6919      	ldr	r1, [r3, #16]
20001256:	4b08      	ldr	r3, [pc, #32]	; (20001278 <RCC_AHB1PeriphResetCmd+0x3c>)
20001258:	687a      	ldr	r2, [r7, #4]
2000125a:	430a      	orrs	r2, r1
2000125c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
2000125e:	e006      	b.n	2000126e <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
20001260:	4b05      	ldr	r3, [pc, #20]	; (20001278 <RCC_AHB1PeriphResetCmd+0x3c>)
20001262:	691a      	ldr	r2, [r3, #16]
20001264:	687b      	ldr	r3, [r7, #4]
20001266:	43d9      	mvns	r1, r3
20001268:	4b03      	ldr	r3, [pc, #12]	; (20001278 <RCC_AHB1PeriphResetCmd+0x3c>)
2000126a:	400a      	ands	r2, r1
2000126c:	611a      	str	r2, [r3, #16]
}
2000126e:	46c0      	nop			; (mov r8, r8)
20001270:	46bd      	mov	sp, r7
20001272:	b002      	add	sp, #8
20001274:	bd80      	pop	{r7, pc}
20001276:	46c0      	nop			; (mov r8, r8)
20001278:	40023800 	andmi	r3, r2, r0, lsl #16

2000127c <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
2000127c:	b580      	push	{r7, lr}
2000127e:	b082      	sub	sp, #8
20001280:	af00      	add	r7, sp, #0
20001282:	6078      	str	r0, [r7, #4]
20001284:	000a      	movs	r2, r1
20001286:	1cfb      	adds	r3, r7, #3
20001288:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000128a:	1cfb      	adds	r3, r7, #3
2000128c:	781b      	ldrb	r3, [r3, #0]
2000128e:	2b00      	cmp	r3, #0
20001290:	d006      	beq.n	200012a0 <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
20001292:	4b09      	ldr	r3, [pc, #36]	; (200012b8 <RCC_AHB2PeriphResetCmd+0x3c>)
20001294:	6959      	ldr	r1, [r3, #20]
20001296:	4b08      	ldr	r3, [pc, #32]	; (200012b8 <RCC_AHB2PeriphResetCmd+0x3c>)
20001298:	687a      	ldr	r2, [r7, #4]
2000129a:	430a      	orrs	r2, r1
2000129c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
2000129e:	e006      	b.n	200012ae <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
200012a0:	4b05      	ldr	r3, [pc, #20]	; (200012b8 <RCC_AHB2PeriphResetCmd+0x3c>)
200012a2:	695a      	ldr	r2, [r3, #20]
200012a4:	687b      	ldr	r3, [r7, #4]
200012a6:	43d9      	mvns	r1, r3
200012a8:	4b03      	ldr	r3, [pc, #12]	; (200012b8 <RCC_AHB2PeriphResetCmd+0x3c>)
200012aa:	400a      	ands	r2, r1
200012ac:	615a      	str	r2, [r3, #20]
}
200012ae:	46c0      	nop			; (mov r8, r8)
200012b0:	46bd      	mov	sp, r7
200012b2:	b002      	add	sp, #8
200012b4:	bd80      	pop	{r7, pc}
200012b6:	46c0      	nop			; (mov r8, r8)
200012b8:	40023800 	andmi	r3, r2, r0, lsl #16

200012bc <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200012bc:	b580      	push	{r7, lr}
200012be:	b082      	sub	sp, #8
200012c0:	af00      	add	r7, sp, #0
200012c2:	6078      	str	r0, [r7, #4]
200012c4:	000a      	movs	r2, r1
200012c6:	1cfb      	adds	r3, r7, #3
200012c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200012ca:	1cfb      	adds	r3, r7, #3
200012cc:	781b      	ldrb	r3, [r3, #0]
200012ce:	2b00      	cmp	r3, #0
200012d0:	d006      	beq.n	200012e0 <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
200012d2:	4b09      	ldr	r3, [pc, #36]	; (200012f8 <RCC_AHB3PeriphResetCmd+0x3c>)
200012d4:	6999      	ldr	r1, [r3, #24]
200012d6:	4b08      	ldr	r3, [pc, #32]	; (200012f8 <RCC_AHB3PeriphResetCmd+0x3c>)
200012d8:	687a      	ldr	r2, [r7, #4]
200012da:	430a      	orrs	r2, r1
200012dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
200012de:	e006      	b.n	200012ee <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
200012e0:	4b05      	ldr	r3, [pc, #20]	; (200012f8 <RCC_AHB3PeriphResetCmd+0x3c>)
200012e2:	699a      	ldr	r2, [r3, #24]
200012e4:	687b      	ldr	r3, [r7, #4]
200012e6:	43d9      	mvns	r1, r3
200012e8:	4b03      	ldr	r3, [pc, #12]	; (200012f8 <RCC_AHB3PeriphResetCmd+0x3c>)
200012ea:	400a      	ands	r2, r1
200012ec:	619a      	str	r2, [r3, #24]
}
200012ee:	46c0      	nop			; (mov r8, r8)
200012f0:	46bd      	mov	sp, r7
200012f2:	b002      	add	sp, #8
200012f4:	bd80      	pop	{r7, pc}
200012f6:	46c0      	nop			; (mov r8, r8)
200012f8:	40023800 	andmi	r3, r2, r0, lsl #16

200012fc <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
200012fc:	b580      	push	{r7, lr}
200012fe:	b082      	sub	sp, #8
20001300:	af00      	add	r7, sp, #0
20001302:	6078      	str	r0, [r7, #4]
20001304:	000a      	movs	r2, r1
20001306:	1cfb      	adds	r3, r7, #3
20001308:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000130a:	1cfb      	adds	r3, r7, #3
2000130c:	781b      	ldrb	r3, [r3, #0]
2000130e:	2b00      	cmp	r3, #0
20001310:	d006      	beq.n	20001320 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20001312:	4b09      	ldr	r3, [pc, #36]	; (20001338 <RCC_APB1PeriphResetCmd+0x3c>)
20001314:	6a19      	ldr	r1, [r3, #32]
20001316:	4b08      	ldr	r3, [pc, #32]	; (20001338 <RCC_APB1PeriphResetCmd+0x3c>)
20001318:	687a      	ldr	r2, [r7, #4]
2000131a:	430a      	orrs	r2, r1
2000131c:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
2000131e:	e006      	b.n	2000132e <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20001320:	4b05      	ldr	r3, [pc, #20]	; (20001338 <RCC_APB1PeriphResetCmd+0x3c>)
20001322:	6a1a      	ldr	r2, [r3, #32]
20001324:	687b      	ldr	r3, [r7, #4]
20001326:	43d9      	mvns	r1, r3
20001328:	4b03      	ldr	r3, [pc, #12]	; (20001338 <RCC_APB1PeriphResetCmd+0x3c>)
2000132a:	400a      	ands	r2, r1
2000132c:	621a      	str	r2, [r3, #32]
}
2000132e:	46c0      	nop			; (mov r8, r8)
20001330:	46bd      	mov	sp, r7
20001332:	b002      	add	sp, #8
20001334:	bd80      	pop	{r7, pc}
20001336:	46c0      	nop			; (mov r8, r8)
20001338:	40023800 	andmi	r3, r2, r0, lsl #16

2000133c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
2000133c:	b580      	push	{r7, lr}
2000133e:	b082      	sub	sp, #8
20001340:	af00      	add	r7, sp, #0
20001342:	6078      	str	r0, [r7, #4]
20001344:	000a      	movs	r2, r1
20001346:	1cfb      	adds	r3, r7, #3
20001348:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000134a:	1cfb      	adds	r3, r7, #3
2000134c:	781b      	ldrb	r3, [r3, #0]
2000134e:	2b00      	cmp	r3, #0
20001350:	d006      	beq.n	20001360 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20001352:	4b09      	ldr	r3, [pc, #36]	; (20001378 <RCC_APB2PeriphResetCmd+0x3c>)
20001354:	6a59      	ldr	r1, [r3, #36]	; 0x24
20001356:	4b08      	ldr	r3, [pc, #32]	; (20001378 <RCC_APB2PeriphResetCmd+0x3c>)
20001358:	687a      	ldr	r2, [r7, #4]
2000135a:	430a      	orrs	r2, r1
2000135c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
2000135e:	e006      	b.n	2000136e <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20001360:	4b05      	ldr	r3, [pc, #20]	; (20001378 <RCC_APB2PeriphResetCmd+0x3c>)
20001362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20001364:	687b      	ldr	r3, [r7, #4]
20001366:	43d9      	mvns	r1, r3
20001368:	4b03      	ldr	r3, [pc, #12]	; (20001378 <RCC_APB2PeriphResetCmd+0x3c>)
2000136a:	400a      	ands	r2, r1
2000136c:	625a      	str	r2, [r3, #36]	; 0x24
}
2000136e:	46c0      	nop			; (mov r8, r8)
20001370:	46bd      	mov	sp, r7
20001372:	b002      	add	sp, #8
20001374:	bd80      	pop	{r7, pc}
20001376:	46c0      	nop			; (mov r8, r8)
20001378:	40023800 	andmi	r3, r2, r0, lsl #16

2000137c <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
2000137c:	b580      	push	{r7, lr}
2000137e:	b082      	sub	sp, #8
20001380:	af00      	add	r7, sp, #0
20001382:	6078      	str	r0, [r7, #4]
20001384:	000a      	movs	r2, r1
20001386:	1cfb      	adds	r3, r7, #3
20001388:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000138a:	1cfb      	adds	r3, r7, #3
2000138c:	781b      	ldrb	r3, [r3, #0]
2000138e:	2b00      	cmp	r3, #0
20001390:	d006      	beq.n	200013a0 <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20001392:	4b09      	ldr	r3, [pc, #36]	; (200013b8 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20001394:	6d19      	ldr	r1, [r3, #80]	; 0x50
20001396:	4b08      	ldr	r3, [pc, #32]	; (200013b8 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20001398:	687a      	ldr	r2, [r7, #4]
2000139a:	430a      	orrs	r2, r1
2000139c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
2000139e:	e006      	b.n	200013ae <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
200013a0:	4b05      	ldr	r3, [pc, #20]	; (200013b8 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
200013a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200013a4:	687b      	ldr	r3, [r7, #4]
200013a6:	43d9      	mvns	r1, r3
200013a8:	4b03      	ldr	r3, [pc, #12]	; (200013b8 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
200013aa:	400a      	ands	r2, r1
200013ac:	651a      	str	r2, [r3, #80]	; 0x50
}
200013ae:	46c0      	nop			; (mov r8, r8)
200013b0:	46bd      	mov	sp, r7
200013b2:	b002      	add	sp, #8
200013b4:	bd80      	pop	{r7, pc}
200013b6:	46c0      	nop			; (mov r8, r8)
200013b8:	40023800 	andmi	r3, r2, r0, lsl #16

200013bc <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200013bc:	b580      	push	{r7, lr}
200013be:	b082      	sub	sp, #8
200013c0:	af00      	add	r7, sp, #0
200013c2:	6078      	str	r0, [r7, #4]
200013c4:	000a      	movs	r2, r1
200013c6:	1cfb      	adds	r3, r7, #3
200013c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200013ca:	1cfb      	adds	r3, r7, #3
200013cc:	781b      	ldrb	r3, [r3, #0]
200013ce:	2b00      	cmp	r3, #0
200013d0:	d006      	beq.n	200013e0 <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
200013d2:	4b09      	ldr	r3, [pc, #36]	; (200013f8 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200013d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
200013d6:	4b08      	ldr	r3, [pc, #32]	; (200013f8 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200013d8:	687a      	ldr	r2, [r7, #4]
200013da:	430a      	orrs	r2, r1
200013dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
200013de:	e006      	b.n	200013ee <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
200013e0:	4b05      	ldr	r3, [pc, #20]	; (200013f8 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200013e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
200013e4:	687b      	ldr	r3, [r7, #4]
200013e6:	43d9      	mvns	r1, r3
200013e8:	4b03      	ldr	r3, [pc, #12]	; (200013f8 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200013ea:	400a      	ands	r2, r1
200013ec:	655a      	str	r2, [r3, #84]	; 0x54
}
200013ee:	46c0      	nop			; (mov r8, r8)
200013f0:	46bd      	mov	sp, r7
200013f2:	b002      	add	sp, #8
200013f4:	bd80      	pop	{r7, pc}
200013f6:	46c0      	nop			; (mov r8, r8)
200013f8:	40023800 	andmi	r3, r2, r0, lsl #16

200013fc <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200013fc:	b580      	push	{r7, lr}
200013fe:	b082      	sub	sp, #8
20001400:	af00      	add	r7, sp, #0
20001402:	6078      	str	r0, [r7, #4]
20001404:	000a      	movs	r2, r1
20001406:	1cfb      	adds	r3, r7, #3
20001408:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000140a:	1cfb      	adds	r3, r7, #3
2000140c:	781b      	ldrb	r3, [r3, #0]
2000140e:	2b00      	cmp	r3, #0
20001410:	d006      	beq.n	20001420 <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20001412:	4b09      	ldr	r3, [pc, #36]	; (20001438 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20001414:	6d99      	ldr	r1, [r3, #88]	; 0x58
20001416:	4b08      	ldr	r3, [pc, #32]	; (20001438 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20001418:	687a      	ldr	r2, [r7, #4]
2000141a:	430a      	orrs	r2, r1
2000141c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
2000141e:	e006      	b.n	2000142e <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20001420:	4b05      	ldr	r3, [pc, #20]	; (20001438 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20001422:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001424:	687b      	ldr	r3, [r7, #4]
20001426:	43d9      	mvns	r1, r3
20001428:	4b03      	ldr	r3, [pc, #12]	; (20001438 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
2000142a:	400a      	ands	r2, r1
2000142c:	659a      	str	r2, [r3, #88]	; 0x58
}
2000142e:	46c0      	nop			; (mov r8, r8)
20001430:	46bd      	mov	sp, r7
20001432:	b002      	add	sp, #8
20001434:	bd80      	pop	{r7, pc}
20001436:	46c0      	nop			; (mov r8, r8)
20001438:	40023800 	andmi	r3, r2, r0, lsl #16

2000143c <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
2000143c:	b580      	push	{r7, lr}
2000143e:	b082      	sub	sp, #8
20001440:	af00      	add	r7, sp, #0
20001442:	6078      	str	r0, [r7, #4]
20001444:	000a      	movs	r2, r1
20001446:	1cfb      	adds	r3, r7, #3
20001448:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000144a:	1cfb      	adds	r3, r7, #3
2000144c:	781b      	ldrb	r3, [r3, #0]
2000144e:	2b00      	cmp	r3, #0
20001450:	d006      	beq.n	20001460 <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20001452:	4b09      	ldr	r3, [pc, #36]	; (20001478 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20001454:	6e19      	ldr	r1, [r3, #96]	; 0x60
20001456:	4b08      	ldr	r3, [pc, #32]	; (20001478 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20001458:	687a      	ldr	r2, [r7, #4]
2000145a:	430a      	orrs	r2, r1
2000145c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
2000145e:	e006      	b.n	2000146e <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20001460:	4b05      	ldr	r3, [pc, #20]	; (20001478 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20001462:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20001464:	687b      	ldr	r3, [r7, #4]
20001466:	43d9      	mvns	r1, r3
20001468:	4b03      	ldr	r3, [pc, #12]	; (20001478 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
2000146a:	400a      	ands	r2, r1
2000146c:	661a      	str	r2, [r3, #96]	; 0x60
}
2000146e:	46c0      	nop			; (mov r8, r8)
20001470:	46bd      	mov	sp, r7
20001472:	b002      	add	sp, #8
20001474:	bd80      	pop	{r7, pc}
20001476:	46c0      	nop			; (mov r8, r8)
20001478:	40023800 	andmi	r3, r2, r0, lsl #16

2000147c <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
2000147c:	b580      	push	{r7, lr}
2000147e:	b082      	sub	sp, #8
20001480:	af00      	add	r7, sp, #0
20001482:	6078      	str	r0, [r7, #4]
20001484:	000a      	movs	r2, r1
20001486:	1cfb      	adds	r3, r7, #3
20001488:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000148a:	1cfb      	adds	r3, r7, #3
2000148c:	781b      	ldrb	r3, [r3, #0]
2000148e:	2b00      	cmp	r3, #0
20001490:	d006      	beq.n	200014a0 <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20001492:	4b09      	ldr	r3, [pc, #36]	; (200014b8 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20001494:	6e59      	ldr	r1, [r3, #100]	; 0x64
20001496:	4b08      	ldr	r3, [pc, #32]	; (200014b8 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20001498:	687a      	ldr	r2, [r7, #4]
2000149a:	430a      	orrs	r2, r1
2000149c:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
2000149e:	e006      	b.n	200014ae <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
200014a0:	4b05      	ldr	r3, [pc, #20]	; (200014b8 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
200014a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
200014a4:	687b      	ldr	r3, [r7, #4]
200014a6:	43d9      	mvns	r1, r3
200014a8:	4b03      	ldr	r3, [pc, #12]	; (200014b8 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
200014aa:	400a      	ands	r2, r1
200014ac:	665a      	str	r2, [r3, #100]	; 0x64
}
200014ae:	46c0      	nop			; (mov r8, r8)
200014b0:	46bd      	mov	sp, r7
200014b2:	b002      	add	sp, #8
200014b4:	bd80      	pop	{r7, pc}
200014b6:	46c0      	nop			; (mov r8, r8)
200014b8:	40023800 	andmi	r3, r2, r0, lsl #16

200014bc <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
200014bc:	b580      	push	{r7, lr}
200014be:	b082      	sub	sp, #8
200014c0:	af00      	add	r7, sp, #0
200014c2:	0002      	movs	r2, r0
200014c4:	1dfb      	adds	r3, r7, #7
200014c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
200014c8:	1dfb      	adds	r3, r7, #7
200014ca:	781b      	ldrb	r3, [r3, #0]
200014cc:	2b01      	cmp	r3, #1
200014ce:	d106      	bne.n	200014de <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
200014d0:	4b08      	ldr	r3, [pc, #32]	; (200014f4 <RCC_LSEModeConfig+0x38>)
200014d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
200014d4:	4b07      	ldr	r3, [pc, #28]	; (200014f4 <RCC_LSEModeConfig+0x38>)
200014d6:	2108      	movs	r1, #8
200014d8:	430a      	orrs	r2, r1
200014da:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
200014dc:	e005      	b.n	200014ea <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
200014de:	4b05      	ldr	r3, [pc, #20]	; (200014f4 <RCC_LSEModeConfig+0x38>)
200014e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
200014e2:	4b04      	ldr	r3, [pc, #16]	; (200014f4 <RCC_LSEModeConfig+0x38>)
200014e4:	2108      	movs	r1, #8
200014e6:	438a      	bics	r2, r1
200014e8:	671a      	str	r2, [r3, #112]	; 0x70
}
200014ea:	46c0      	nop			; (mov r8, r8)
200014ec:	46bd      	mov	sp, r7
200014ee:	b002      	add	sp, #8
200014f0:	bd80      	pop	{r7, pc}
200014f2:	46c0      	nop			; (mov r8, r8)
200014f4:	40023800 	andmi	r3, r2, r0, lsl #16

200014f8 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
200014f8:	b580      	push	{r7, lr}
200014fa:	b082      	sub	sp, #8
200014fc:	af00      	add	r7, sp, #0
200014fe:	0002      	movs	r2, r0
20001500:	1dfb      	adds	r3, r7, #7
20001502:	701a      	strb	r2, [r3, #0]
20001504:	1dbb      	adds	r3, r7, #6
20001506:	1c0a      	adds	r2, r1, #0
20001508:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000150a:	1dbb      	adds	r3, r7, #6
2000150c:	781b      	ldrb	r3, [r3, #0]
2000150e:	2b00      	cmp	r3, #0
20001510:	d009      	beq.n	20001526 <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20001512:	4b0c      	ldr	r3, [pc, #48]	; (20001544 <RCC_ITConfig+0x4c>)
20001514:	781b      	ldrb	r3, [r3, #0]
20001516:	b2da      	uxtb	r2, r3
20001518:	490a      	ldr	r1, [pc, #40]	; (20001544 <RCC_ITConfig+0x4c>)
2000151a:	1dfb      	adds	r3, r7, #7
2000151c:	781b      	ldrb	r3, [r3, #0]
2000151e:	4313      	orrs	r3, r2
20001520:	b2db      	uxtb	r3, r3
20001522:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20001524:	e00a      	b.n	2000153c <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20001526:	4b07      	ldr	r3, [pc, #28]	; (20001544 <RCC_ITConfig+0x4c>)
20001528:	781b      	ldrb	r3, [r3, #0]
2000152a:	b2db      	uxtb	r3, r3
2000152c:	1dfa      	adds	r2, r7, #7
2000152e:	7812      	ldrb	r2, [r2, #0]
20001530:	43d2      	mvns	r2, r2
20001532:	b2d2      	uxtb	r2, r2
20001534:	4903      	ldr	r1, [pc, #12]	; (20001544 <RCC_ITConfig+0x4c>)
20001536:	4013      	ands	r3, r2
20001538:	b2db      	uxtb	r3, r3
2000153a:	700b      	strb	r3, [r1, #0]
}
2000153c:	46c0      	nop			; (mov r8, r8)
2000153e:	46bd      	mov	sp, r7
20001540:	b002      	add	sp, #8
20001542:	bd80      	pop	{r7, pc}
20001544:	4002380d 	andmi	r3, r2, sp, lsl #16

20001548 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20001548:	b580      	push	{r7, lr}
2000154a:	b086      	sub	sp, #24
2000154c:	af00      	add	r7, sp, #0
2000154e:	0002      	movs	r2, r0
20001550:	1dfb      	adds	r3, r7, #7
20001552:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20001554:	2300      	movs	r3, #0
20001556:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20001558:	2300      	movs	r3, #0
2000155a:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
2000155c:	2313      	movs	r3, #19
2000155e:	18fb      	adds	r3, r7, r3
20001560:	2200      	movs	r2, #0
20001562:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20001564:	1dfb      	adds	r3, r7, #7
20001566:	781b      	ldrb	r3, [r3, #0]
20001568:	095b      	lsrs	r3, r3, #5
2000156a:	b2db      	uxtb	r3, r3
2000156c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
2000156e:	68fb      	ldr	r3, [r7, #12]
20001570:	2b01      	cmp	r3, #1
20001572:	d103      	bne.n	2000157c <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20001574:	4b14      	ldr	r3, [pc, #80]	; (200015c8 <RCC_GetFlagStatus+0x80>)
20001576:	681b      	ldr	r3, [r3, #0]
20001578:	617b      	str	r3, [r7, #20]
2000157a:	e009      	b.n	20001590 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
2000157c:	68fb      	ldr	r3, [r7, #12]
2000157e:	2b02      	cmp	r3, #2
20001580:	d103      	bne.n	2000158a <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20001582:	4b11      	ldr	r3, [pc, #68]	; (200015c8 <RCC_GetFlagStatus+0x80>)
20001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20001586:	617b      	str	r3, [r7, #20]
20001588:	e002      	b.n	20001590 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
2000158a:	4b0f      	ldr	r3, [pc, #60]	; (200015c8 <RCC_GetFlagStatus+0x80>)
2000158c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000158e:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20001590:	1dfb      	adds	r3, r7, #7
20001592:	781b      	ldrb	r3, [r3, #0]
20001594:	221f      	movs	r2, #31
20001596:	4013      	ands	r3, r2
20001598:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
2000159a:	697a      	ldr	r2, [r7, #20]
2000159c:	68fb      	ldr	r3, [r7, #12]
2000159e:	40da      	lsrs	r2, r3
200015a0:	0013      	movs	r3, r2
200015a2:	2201      	movs	r2, #1
200015a4:	4013      	ands	r3, r2
200015a6:	d004      	beq.n	200015b2 <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
200015a8:	2313      	movs	r3, #19
200015aa:	18fb      	adds	r3, r7, r3
200015ac:	2201      	movs	r2, #1
200015ae:	701a      	strb	r2, [r3, #0]
200015b0:	e003      	b.n	200015ba <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
200015b2:	2313      	movs	r3, #19
200015b4:	18fb      	adds	r3, r7, r3
200015b6:	2200      	movs	r2, #0
200015b8:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
200015ba:	2313      	movs	r3, #19
200015bc:	18fb      	adds	r3, r7, r3
200015be:	781b      	ldrb	r3, [r3, #0]
}
200015c0:	0018      	movs	r0, r3
200015c2:	46bd      	mov	sp, r7
200015c4:	b006      	add	sp, #24
200015c6:	bd80      	pop	{r7, pc}
200015c8:	40023800 	andmi	r3, r2, r0, lsl #16

200015cc <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
200015cc:	b580      	push	{r7, lr}
200015ce:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
200015d0:	4b04      	ldr	r3, [pc, #16]	; (200015e4 <RCC_ClearFlag+0x18>)
200015d2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
200015d4:	4b03      	ldr	r3, [pc, #12]	; (200015e4 <RCC_ClearFlag+0x18>)
200015d6:	2180      	movs	r1, #128	; 0x80
200015d8:	0449      	lsls	r1, r1, #17
200015da:	430a      	orrs	r2, r1
200015dc:	675a      	str	r2, [r3, #116]	; 0x74
}
200015de:	46c0      	nop			; (mov r8, r8)
200015e0:	46bd      	mov	sp, r7
200015e2:	bd80      	pop	{r7, pc}
200015e4:	40023800 	andmi	r3, r2, r0, lsl #16

200015e8 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
200015e8:	b580      	push	{r7, lr}
200015ea:	b084      	sub	sp, #16
200015ec:	af00      	add	r7, sp, #0
200015ee:	0002      	movs	r2, r0
200015f0:	1dfb      	adds	r3, r7, #7
200015f2:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
200015f4:	230f      	movs	r3, #15
200015f6:	18fb      	adds	r3, r7, r3
200015f8:	2200      	movs	r2, #0
200015fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
200015fc:	4b0a      	ldr	r3, [pc, #40]	; (20001628 <RCC_GetITStatus+0x40>)
200015fe:	68db      	ldr	r3, [r3, #12]
20001600:	1dfa      	adds	r2, r7, #7
20001602:	7812      	ldrb	r2, [r2, #0]
20001604:	4013      	ands	r3, r2
20001606:	d004      	beq.n	20001612 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20001608:	230f      	movs	r3, #15
2000160a:	18fb      	adds	r3, r7, r3
2000160c:	2201      	movs	r2, #1
2000160e:	701a      	strb	r2, [r3, #0]
20001610:	e003      	b.n	2000161a <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20001612:	230f      	movs	r3, #15
20001614:	18fb      	adds	r3, r7, r3
20001616:	2200      	movs	r2, #0
20001618:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
2000161a:	230f      	movs	r3, #15
2000161c:	18fb      	adds	r3, r7, r3
2000161e:	781b      	ldrb	r3, [r3, #0]
}
20001620:	0018      	movs	r0, r3
20001622:	46bd      	mov	sp, r7
20001624:	b004      	add	sp, #16
20001626:	bd80      	pop	{r7, pc}
20001628:	40023800 	andmi	r3, r2, r0, lsl #16

2000162c <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
2000162c:	b580      	push	{r7, lr}
2000162e:	b082      	sub	sp, #8
20001630:	af00      	add	r7, sp, #0
20001632:	0002      	movs	r2, r0
20001634:	1dfb      	adds	r3, r7, #7
20001636:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20001638:	4a03      	ldr	r2, [pc, #12]	; (20001648 <RCC_ClearITPendingBit+0x1c>)
2000163a:	1dfb      	adds	r3, r7, #7
2000163c:	781b      	ldrb	r3, [r3, #0]
2000163e:	7013      	strb	r3, [r2, #0]
}
20001640:	46c0      	nop			; (mov r8, r8)
20001642:	46bd      	mov	sp, r7
20001644:	b002      	add	sp, #8
20001646:	bd80      	pop	{r7, pc}
20001648:	4002380e 	andmi	r3, r2, lr, lsl #16

2000164c <__udivsi3>:
2000164c:	2200      	movs	r2, #0
2000164e:	0843      	lsrs	r3, r0, #1
20001650:	428b      	cmp	r3, r1
20001652:	d374      	bcc.n	2000173e <__udivsi3+0xf2>
20001654:	0903      	lsrs	r3, r0, #4
20001656:	428b      	cmp	r3, r1
20001658:	d35f      	bcc.n	2000171a <__udivsi3+0xce>
2000165a:	0a03      	lsrs	r3, r0, #8
2000165c:	428b      	cmp	r3, r1
2000165e:	d344      	bcc.n	200016ea <__udivsi3+0x9e>
20001660:	0b03      	lsrs	r3, r0, #12
20001662:	428b      	cmp	r3, r1
20001664:	d328      	bcc.n	200016b8 <__udivsi3+0x6c>
20001666:	0c03      	lsrs	r3, r0, #16
20001668:	428b      	cmp	r3, r1
2000166a:	d30d      	bcc.n	20001688 <__udivsi3+0x3c>
2000166c:	22ff      	movs	r2, #255	; 0xff
2000166e:	0209      	lsls	r1, r1, #8
20001670:	ba12      	rev	r2, r2
20001672:	0c03      	lsrs	r3, r0, #16
20001674:	428b      	cmp	r3, r1
20001676:	d302      	bcc.n	2000167e <__udivsi3+0x32>
20001678:	1212      	asrs	r2, r2, #8
2000167a:	0209      	lsls	r1, r1, #8
2000167c:	d065      	beq.n	2000174a <__udivsi3+0xfe>
2000167e:	0b03      	lsrs	r3, r0, #12
20001680:	428b      	cmp	r3, r1
20001682:	d319      	bcc.n	200016b8 <__udivsi3+0x6c>
20001684:	e000      	b.n	20001688 <__udivsi3+0x3c>
20001686:	0a09      	lsrs	r1, r1, #8
20001688:	0bc3      	lsrs	r3, r0, #15
2000168a:	428b      	cmp	r3, r1
2000168c:	d301      	bcc.n	20001692 <__udivsi3+0x46>
2000168e:	03cb      	lsls	r3, r1, #15
20001690:	1ac0      	subs	r0, r0, r3
20001692:	4152      	adcs	r2, r2
20001694:	0b83      	lsrs	r3, r0, #14
20001696:	428b      	cmp	r3, r1
20001698:	d301      	bcc.n	2000169e <__udivsi3+0x52>
2000169a:	038b      	lsls	r3, r1, #14
2000169c:	1ac0      	subs	r0, r0, r3
2000169e:	4152      	adcs	r2, r2
200016a0:	0b43      	lsrs	r3, r0, #13
200016a2:	428b      	cmp	r3, r1
200016a4:	d301      	bcc.n	200016aa <__udivsi3+0x5e>
200016a6:	034b      	lsls	r3, r1, #13
200016a8:	1ac0      	subs	r0, r0, r3
200016aa:	4152      	adcs	r2, r2
200016ac:	0b03      	lsrs	r3, r0, #12
200016ae:	428b      	cmp	r3, r1
200016b0:	d301      	bcc.n	200016b6 <__udivsi3+0x6a>
200016b2:	030b      	lsls	r3, r1, #12
200016b4:	1ac0      	subs	r0, r0, r3
200016b6:	4152      	adcs	r2, r2
200016b8:	0ac3      	lsrs	r3, r0, #11
200016ba:	428b      	cmp	r3, r1
200016bc:	d301      	bcc.n	200016c2 <__udivsi3+0x76>
200016be:	02cb      	lsls	r3, r1, #11
200016c0:	1ac0      	subs	r0, r0, r3
200016c2:	4152      	adcs	r2, r2
200016c4:	0a83      	lsrs	r3, r0, #10
200016c6:	428b      	cmp	r3, r1
200016c8:	d301      	bcc.n	200016ce <__udivsi3+0x82>
200016ca:	028b      	lsls	r3, r1, #10
200016cc:	1ac0      	subs	r0, r0, r3
200016ce:	4152      	adcs	r2, r2
200016d0:	0a43      	lsrs	r3, r0, #9
200016d2:	428b      	cmp	r3, r1
200016d4:	d301      	bcc.n	200016da <__udivsi3+0x8e>
200016d6:	024b      	lsls	r3, r1, #9
200016d8:	1ac0      	subs	r0, r0, r3
200016da:	4152      	adcs	r2, r2
200016dc:	0a03      	lsrs	r3, r0, #8
200016de:	428b      	cmp	r3, r1
200016e0:	d301      	bcc.n	200016e6 <__udivsi3+0x9a>
200016e2:	020b      	lsls	r3, r1, #8
200016e4:	1ac0      	subs	r0, r0, r3
200016e6:	4152      	adcs	r2, r2
200016e8:	d2cd      	bcs.n	20001686 <__udivsi3+0x3a>
200016ea:	09c3      	lsrs	r3, r0, #7
200016ec:	428b      	cmp	r3, r1
200016ee:	d301      	bcc.n	200016f4 <__udivsi3+0xa8>
200016f0:	01cb      	lsls	r3, r1, #7
200016f2:	1ac0      	subs	r0, r0, r3
200016f4:	4152      	adcs	r2, r2
200016f6:	0983      	lsrs	r3, r0, #6
200016f8:	428b      	cmp	r3, r1
200016fa:	d301      	bcc.n	20001700 <__udivsi3+0xb4>
200016fc:	018b      	lsls	r3, r1, #6
200016fe:	1ac0      	subs	r0, r0, r3
20001700:	4152      	adcs	r2, r2
20001702:	0943      	lsrs	r3, r0, #5
20001704:	428b      	cmp	r3, r1
20001706:	d301      	bcc.n	2000170c <__udivsi3+0xc0>
20001708:	014b      	lsls	r3, r1, #5
2000170a:	1ac0      	subs	r0, r0, r3
2000170c:	4152      	adcs	r2, r2
2000170e:	0903      	lsrs	r3, r0, #4
20001710:	428b      	cmp	r3, r1
20001712:	d301      	bcc.n	20001718 <__udivsi3+0xcc>
20001714:	010b      	lsls	r3, r1, #4
20001716:	1ac0      	subs	r0, r0, r3
20001718:	4152      	adcs	r2, r2
2000171a:	08c3      	lsrs	r3, r0, #3
2000171c:	428b      	cmp	r3, r1
2000171e:	d301      	bcc.n	20001724 <__udivsi3+0xd8>
20001720:	00cb      	lsls	r3, r1, #3
20001722:	1ac0      	subs	r0, r0, r3
20001724:	4152      	adcs	r2, r2
20001726:	0883      	lsrs	r3, r0, #2
20001728:	428b      	cmp	r3, r1
2000172a:	d301      	bcc.n	20001730 <__udivsi3+0xe4>
2000172c:	008b      	lsls	r3, r1, #2
2000172e:	1ac0      	subs	r0, r0, r3
20001730:	4152      	adcs	r2, r2
20001732:	0843      	lsrs	r3, r0, #1
20001734:	428b      	cmp	r3, r1
20001736:	d301      	bcc.n	2000173c <__udivsi3+0xf0>
20001738:	004b      	lsls	r3, r1, #1
2000173a:	1ac0      	subs	r0, r0, r3
2000173c:	4152      	adcs	r2, r2
2000173e:	1a41      	subs	r1, r0, r1
20001740:	d200      	bcs.n	20001744 <__udivsi3+0xf8>
20001742:	4601      	mov	r1, r0
20001744:	4152      	adcs	r2, r2
20001746:	4610      	mov	r0, r2
20001748:	4770      	bx	lr
2000174a:	e7ff      	b.n	2000174c <__udivsi3+0x100>
2000174c:	b501      	push	{r0, lr}
2000174e:	2000      	movs	r0, #0
20001750:	f000 f806 	bl	20001760 <__aeabi_idiv0>
20001754:	bd02      	pop	{r1, pc}
20001756:	46c0      	nop			; (mov r8, r8)

20001758 <__aeabi_uidivmod>:
20001758:	2900      	cmp	r1, #0
2000175a:	d0f7      	beq.n	2000174c <__udivsi3+0x100>
2000175c:	e776      	b.n	2000164c <__udivsi3>
2000175e:	4770      	bx	lr

20001760 <__aeabi_idiv0>:
20001760:	4770      	bx	lr
20001762:	46c0      	nop			; (mov r8, r8)

20001764 <msTicks>:
20001764:	00000000 	andeq	r0, r0, r0

20001768 <motion1>:
	...

20001770 <SystemCoreClock>:
20001770:	0a037a00 	beq	200dff78 <APBAHBPrescTable+0xde7f4>

20001774 <AHBPrescTable>:
	...
2000177c:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20001780:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20001784 <APBAHBPrescTable>:
20001784:	00000000 	andeq	r0, r0, r0
20001788:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
2000178c:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20001790:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000623 	andeq	r0, r0, r3, lsr #12
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000001cc 	andeq	r0, r0, ip, asr #3
      10:	0003b20c 	andeq	fp, r3, ip, lsl #4
      14:	00037a00 	andeq	r7, r3, r0, lsl #20
      18:	00001000 	andeq	r1, r0, r0
      1c:	00050e20 	andeq	r0, r5, r0, lsr #28
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	000001c0 	andeq	r0, r0, r0, asr #3
      2c:	00018603 	andeq	r8, r1, r3, lsl #12
      30:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
      34:	02000000 	andeq	r0, r0, #0
      38:	01be0801 			; <UNDEFINED> instruction: 0x01be0801
      3c:	02020000 	andeq	r0, r2, #0
      40:	00005705 	andeq	r5, r0, r5, lsl #14
      44:	00a90300 	adceq	r0, r9, r0, lsl #6
      48:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
      4c:	00000050 	andeq	r0, r0, r0, asr r0
      50:	e7070202 	str	r0, [r7, -r2, lsl #4]
      54:	03000002 	movweq	r0, #2
      58:	000002dd 	ldrdeq	r0, [r0], -sp
      5c:	00624d02 	rsbeq	r4, r2, r2, lsl #26
      60:	04020000 	streq	r0, [r2], #-0
      64:	00014405 	andeq	r4, r1, r5, lsl #8
      68:	009e0300 	addseq	r0, lr, r0, lsl #6
      6c:	4f020000 	svcmi	0x00020000
      70:	00000074 	andeq	r0, r0, r4, ror r0
      74:	69070402 	stmdbvs	r7, {r1, sl}
      78:	02000002 	andeq	r0, r0, #2
      7c:	013f0508 	teqeq	pc, r8, lsl #10
      80:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      84:	00026407 	andeq	r6, r2, r7, lsl #8
      88:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
      90:	6e070402 	cdpvs	4, 0, cr0, cr7, cr2, {0}
      94:	03000002 	movweq	r0, #2
      98:	00000188 	andeq	r0, r0, r8, lsl #3
      9c:	002c1803 	eoreq	r1, ip, r3, lsl #16
      a0:	ab030000 	blge	c00a8 <startup-0x1ff3ff58>
      a4:	03000000 	movweq	r0, #0
      a8:	00004524 	andeq	r4, r0, r4, lsr #10
      ac:	00a20500 	adceq	r0, r2, r0, lsl #10
      b0:	df030000 	svcle	0x00030000
      b4:	03000002 	movweq	r0, #2
      b8:	0000572c 	andeq	r5, r0, ip, lsr #14
      bc:	00b20500 	adcseq	r0, r2, r0, lsl #10
      c0:	a0030000 	andge	r0, r3, r0
      c4:	03000000 	movweq	r0, #0
      c8:	00006930 	andeq	r6, r0, r0, lsr r9
      cc:	00c20500 	sbceq	r0, r2, r0, lsl #10
      d0:	b5060000 	strlt	r0, [r6, #-0]
      d4:	04000002 	streq	r0, [r0], #-2
      d8:	00bd06fa 	ldrshteq	r0, [sp], sl
      dc:	1a070000 	bne	1c00e4 <startup-0x1fe3ff1c>
      e0:	05000003 	streq	r0, [r0, #-3]
      e4:	0000c23b 	andeq	ip, r0, fp, lsr r2
      e8:	01070800 	tsteq	r7, r0, lsl #16
      ec:	00000037 	andeq	r0, r0, r7, lsr r0
      f0:	04035f06 	streq	r5, [r3], #-3846	; 0xfffff0fa
      f4:	09000001 	stmdbeq	r0, {r0}
      f8:	000002c2 	andeq	r0, r0, r2, asr #5
      fc:	00d90900 	sbcseq	r0, r9, r0, lsl #18
     100:	00010000 	andeq	r0, r1, r0
     104:	c306280a 	movwgt	r2, #26634	; 0x680a
     108:	00019005 	andeq	r9, r1, r5
     10c:	01800b00 	orreq	r0, r0, r0, lsl #22
     110:	c5060000 	strgt	r0, [r6, #-0]
     114:	0000cd05 	andeq	ip, r0, r5, lsl #26
     118:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
     11c:	06000001 	streq	r0, [r0], -r1
     120:	00cd05c6 	sbceq	r0, sp, r6, asr #11
     124:	0b040000 	bleq	10012c <startup-0x1feffed4>
     128:	0000034b 	andeq	r0, r0, fp, asr #6
     12c:	cd05c706 	stcgt	7, cr12, [r5, #-24]	; 0xffffffe8
     130:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     134:	00015b0b 	andeq	r5, r1, fp, lsl #22
     138:	05c80600 	strbeq	r0, [r8, #1536]	; 0x600
     13c:	000000cd 	andeq	r0, r0, sp, asr #1
     140:	44490c0c 	strbmi	r0, [r9], #-3084	; 0xfffff3f4
     144:	c9060052 	stmdbgt	r6, {r1, r4, r6}
     148:	0000cd05 	andeq	ip, r0, r5, lsl #26
     14c:	4f0c1000 	svcmi	0x000c1000
     150:	06005244 	streq	r5, [r0], -r4, asr #4
     154:	00cd05ca 	sbceq	r0, sp, sl, asr #11
     158:	0b140000 	bleq	500160 <startup-0x1faffea0>
     15c:	000004a4 	andeq	r0, r0, r4, lsr #9
     160:	ad05cb06 	vstrge	d12, [r5, #-24]	; 0xffffffe8
     164:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     168:	00017a0b 	andeq	r7, r1, fp, lsl #20
     16c:	05cc0600 	strbeq	r0, [ip, #1536]	; 0x600
     170:	000000ad 	andeq	r0, r0, sp, lsr #1
     174:	01110b1a 	tsteq	r1, sl, lsl fp
     178:	cd060000 	stcgt	0, cr0, [r6, #-0]
     17c:	0000cd05 	andeq	ip, r0, r5, lsl #26
     180:	410c1c00 	tstmi	ip, r0, lsl #24
     184:	06005246 	streq	r5, [r0], -r6, asr #4
     188:	01a005ce 	asreq	r0, lr, #11
     18c:	00200000 	eoreq	r0, r0, r0
     190:	0000cd0d 	andeq	ip, r0, sp, lsl #26
     194:	0001a000 	andeq	sl, r1, r0
     198:	00900e00 	addseq	r0, r0, r0, lsl #28
     19c:	00010000 	andeq	r0, r1, r0
     1a0:	00019005 	andeq	r9, r1, r5
     1a4:	00000f00 	andeq	r0, r0, r0, lsl #30
     1a8:	cf060000 	svcgt	0x00060000
     1ac:	00010405 	andeq	r0, r1, r5, lsl #8
     1b0:	01071000 	mrseq	r1, (UNDEF: 7)
     1b4:	00000037 	andeq	r0, r0, r7, lsr r0
     1b8:	01d74207 	bicseq	r4, r7, r7, lsl #4
     1bc:	61090000 	mrsvs	r0, (UNDEF: 9)
     1c0:	00000001 	andeq	r0, r0, r1
     1c4:	00014d09 	andeq	r4, r1, r9, lsl #26
     1c8:	bf090100 	svclt	0x00090100
     1cc:	02000000 	andeq	r0, r0, #0
     1d0:	0000f509 	andeq	pc, r0, r9, lsl #10
     1d4:	03000300 	movweq	r0, #768	; 0x300
     1d8:	00000039 	andeq	r0, r0, r9, lsr r0
     1dc:	01b14707 			; <UNDEFINED> instruction: 0x01b14707
     1e0:	07100000 	ldreq	r0, [r0, -r0]
     1e4:	00003701 	andeq	r3, r0, r1, lsl #14
     1e8:	fc4f0700 	mcrr2	7, 0, r0, pc, cr0	; <UNPREDICTABLE>
     1ec:	09000001 	stmdbeq	r0, {r0}
     1f0:	000001a6 	andeq	r0, r0, r6, lsr #3
     1f4:	00780900 	rsbseq	r0, r8, r0, lsl #18
     1f8:	00010000 	andeq	r0, r1, r0
     1fc:	00011603 	andeq	r1, r1, r3, lsl #12
     200:	e2520700 	subs	r0, r2, #0, 14
     204:	10000001 	andne	r0, r0, r1
     208:	00370107 	eorseq	r0, r7, r7, lsl #2
     20c:	5a070000 	bpl	1c0214 <startup-0x1fe3fdec>
     210:	0000022d 	andeq	r0, r0, sp, lsr #4
     214:	00032a09 	andeq	r2, r3, r9, lsl #20
     218:	39090000 	stmdbcc	r9, {}	; <UNPREDICTABLE>
     21c:	01000003 	tsteq	r0, r3
     220:	00012f09 	andeq	r2, r1, r9, lsl #30
     224:	65090200 	strvs	r0, [r9, #-512]	; 0xfffffe00
     228:	03000004 	movweq	r0, #4
     22c:	03590300 	cmpeq	r9, #0, 6
     230:	5f070000 	svcpl	0x00070000
     234:	00000207 	andeq	r0, r0, r7, lsl #4
     238:	37010710 	smladcc	r1, r0, r7, r0
     23c:	07000000 	streq	r0, [r0, -r0]
     240:	0002586e 	andeq	r5, r2, lr, ror #16
     244:	04220900 	strteq	r0, [r2], #-2304	; 0xfffff700
     248:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     24c:	00000486 	andeq	r0, r0, r6, lsl #9
     250:	036b0901 	cmneq	fp, #16384	; 0x4000
     254:	00020000 	andeq	r0, r2, r0
     258:	00047503 	andeq	r7, r4, r3, lsl #10
     25c:	38720700 	ldmdacc	r2!, {r8, r9, sl}^
     260:	10000002 	andne	r0, r0, r2
     264:	00370107 	eorseq	r0, r7, r7, lsl #2
     268:	7a070000 	bvc	1c0270 <startup-0x1fe3fd90>
     26c:	0000027d 	andeq	r0, r0, sp, ror r2
     270:	00008609 	andeq	r8, r0, r9, lsl #12
     274:	1d090000 	stcne	0, cr0, [r9, #-0]
     278:	01000000 	mrseq	r0, (UNDEF: 0)
     27c:	02fa0300 	rscseq	r0, sl, #0, 6
     280:	7d070000 	stcvc	0, cr0, [r7, #-0]
     284:	00000263 	andeq	r0, r0, r3, ror #4
     288:	84070811 	strhi	r0, [r7], #-2065	; 0xfffff7ef
     28c:	000002cd 	andeq	r0, r0, sp, asr #5
     290:	00001412 	andeq	r1, r0, r2, lsl r4
     294:	c2860700 	addgt	r0, r6, #0, 14
     298:	00000000 	andeq	r0, r0, r0
     29c:	0004c112 	andeq	ip, r4, r2, lsl r1
     2a0:	d7890700 	strle	r0, [r9, r0, lsl #14]
     2a4:	04000001 	streq	r0, [r0], #-1
     2a8:	0000e012 	andeq	lr, r0, r2, lsl r0
     2ac:	2d8c0700 	stccs	7, cr0, [ip]
     2b0:	05000002 	streq	r0, [r0, #-2]
     2b4:	0000b412 	andeq	fp, r0, r2, lsl r4
     2b8:	fc8f0700 	stc2	7, cr0, [pc], {0}
     2bc:	06000001 	streq	r0, [r0], -r1
     2c0:	00044a12 	andeq	r4, r4, r2, lsl sl
     2c4:	58920700 	ldmpl	r2, {r8, r9, sl}
     2c8:	07000002 	streq	r0, [r0, -r2]
     2cc:	04540300 	ldrbeq	r0, [r4], #-768	; 0xfffffd00
     2d0:	94070000 	strls	r0, [r7], #-0
     2d4:	00000288 	andeq	r0, r0, r8, lsl #5
     2d8:	00049313 	andeq	r9, r4, r3, lsl r3
     2dc:	02430100 	subeq	r0, r3, #0, 2
     2e0:	2000047a 	andcs	r0, r0, sl, ror r4
     2e4:	000000a4 	andeq	r0, r0, r4, lsr #1
     2e8:	033a9c01 	teqeq	sl, #256	; 0x100
     2ec:	53140000 	tstpl	r4, #0
     2f0:	01000003 	tsteq	r0, r3
     2f4:	033a0243 	teqeq	sl, #805306372	; 0x30000004
     2f8:	91020000 	mrsls	r0, (UNDEF: 2)
     2fc:	0293146c 	addseq	r1, r3, #108, 8	; 0x6c000000
     300:	43010000 	movwmi	r0, #4096	; 0x1000
     304:	0000a202 	andeq	sl, r0, r2, lsl #4
     308:	6a910200 	bvs	fe440b10 <APBAHBPrescTable+0xde43f38c>
     30c:	00004a14 	andeq	r4, r0, r4, lsl sl
     310:	02430100 	subeq	r0, r3, #0, 2
     314:	00000097 	muleq	r0, r7, r0
     318:	15699102 	strbne	r9, [r9, #-258]!	; 0xfffffefe
     31c:	00000052 	andeq	r0, r0, r2, asr r0
     320:	c2024501 	andgt	r4, r2, #4194304	; 0x400000
     324:	02000000 	andeq	r0, r0, #0
     328:	43157491 	tstmi	r5, #-1862270976	; 0x91000000
     32c:	01000004 	tsteq	r0, r4
     330:	00c20246 	sbceq	r0, r2, r6, asr #4
     334:	91020000 	mrsls	r0, (UNDEF: 2)
     338:	04160070 	ldreq	r0, [r6], #-112	; 0xffffff90
     33c:	000001a5 	andeq	r0, r0, r5, lsr #3
     340:	00043313 	andeq	r3, r4, r3, lsl r3
     344:	01f00100 	mvnseq	r0, r0, lsl #2
     348:	20000456 	andcs	r0, r0, r6, asr r4
     34c:	00000024 	andeq	r0, r0, r4, lsr #32
     350:	03759c01 	cmneq	r5, #256	; 0x100
     354:	53140000 	tstpl	r4, #0
     358:	01000003 	tsteq	r0, r3
     35c:	033a01f0 	teqeq	sl, #240, 2	; 0x3c
     360:	91020000 	mrsls	r0, (UNDEF: 2)
     364:	00141474 	andseq	r1, r4, r4, ror r4
     368:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     36c:	0000a201 	andeq	sl, r0, r1, lsl #4
     370:	72910200 	addsvc	r0, r1, #0, 4
     374:	030f1300 	movweq	r1, #62208	; 0xf300
     378:	e0010000 	and	r0, r1, r0
     37c:	00043801 	andeq	r3, r4, r1, lsl #16
     380:	00001e20 	andeq	r1, r0, r0, lsr #28
     384:	aa9c0100 	bge	fe70078c <APBAHBPrescTable+0xde6ff008>
     388:	14000003 	strne	r0, [r0], #-3
     38c:	00000353 	andeq	r0, r0, r3, asr r3
     390:	3a01e001 	bcc	7839c <startup-0x1ff87c64>
     394:	02000003 	andeq	r0, r0, #3
     398:	8b147491 	blhi	51d5e4 <startup-0x1fae2a1c>
     39c:	01000002 	tsteq	r0, r2
     3a0:	00a201e0 	adceq	r0, r2, r0, ror #3
     3a4:	91020000 	mrsls	r0, (UNDEF: 2)
     3a8:	90130072 	andsls	r0, r3, r2, ror r0
     3ac:	01000000 	mrseq	r0, (UNDEF: 0)
     3b0:	03fe01c7 	mvnseq	r0, #-1073741775	; 0xc0000031
     3b4:	003a2000 	eorseq	r2, sl, r0
     3b8:	9c010000 	stcls	0, cr0, [r1], {-0}
     3bc:	000003ee 	andeq	r0, r0, lr, ror #7
     3c0:	00035314 	andeq	r5, r3, r4, lsl r3
     3c4:	01c70100 	biceq	r0, r7, r0, lsl #2
     3c8:	0000033a 	andeq	r0, r0, sl, lsr r3
     3cc:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
     3d0:	00000014 	andeq	r0, r0, r4, lsl r0
     3d4:	a201c701 	andge	ip, r1, #262144	; 0x40000
     3d8:	02000000 	andeq	r0, r0, #0
     3dc:	71147291 			; <UNDEFINED> instruction: 0x71147291
     3e0:	01000000 	mrseq	r0, (UNDEF: 0)
     3e4:	027d01c7 	rsbseq	r0, sp, #-1073741775	; 0xc0000031
     3e8:	91020000 	mrsls	r0, (UNDEF: 2)
     3ec:	02130071 	andseq	r0, r3, #113	; 0x71
     3f0:	01000001 	tsteq	r0, r1
     3f4:	03e001b1 	mvneq	r0, #1073741868	; 0x4000002c
     3f8:	001e2000 	andseq	r2, lr, r0
     3fc:	9c010000 	stcls	0, cr0, [r1], {-0}
     400:	00000423 	andeq	r0, r0, r3, lsr #8
     404:	00035314 	andeq	r5, r3, r4, lsl r3
     408:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
     40c:	0000033a 	andeq	r0, r0, sl, lsr r3
     410:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
     414:	00000014 	andeq	r0, r0, r4, lsl r0
     418:	a201b101 	andge	fp, r1, #1073741824	; 0x40000000
     41c:	02000000 	andeq	r0, r0, #0
     420:	13007291 	movwne	r7, #657	; 0x291
     424:	000000cc 	andeq	r0, r0, ip, asr #1
     428:	c2019c01 	andgt	r9, r1, #256	; 0x100
     42c:	1e200003 	cdpne	0, 2, cr0, cr0, cr3, {0}
     430:	01000000 	mrseq	r0, (UNDEF: 0)
     434:	0004589c 	muleq	r4, ip, r8
     438:	03531400 	cmpeq	r3, #0, 8
     43c:	9c010000 	stcls	0, cr0, [r1], {-0}
     440:	00033a01 	andeq	r3, r3, r1, lsl #20
     444:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     448:	00001414 	andeq	r1, r0, r4, lsl r4
     44c:	019c0100 	orrseq	r0, ip, r0, lsl #2
     450:	000000a2 	andeq	r0, r0, r2, lsr #1
     454:	00729102 	rsbseq	r9, r2, r2, lsl #2
     458:	00002517 	andeq	r2, r0, r7, lsl r5
     45c:	01880100 	orreq	r0, r8, r0, lsl #2
     460:	000000a2 	andeq	r0, r0, r2, lsr #1
     464:	200003ac 	andcs	r0, r0, ip, lsr #7
     468:	00000016 	andeq	r0, r0, r6, lsl r0
     46c:	04829c01 	streq	r9, [r2], #3073	; 0xc01
     470:	53140000 	tstpl	r4, #0
     474:	01000003 	tsteq	r0, r3
     478:	033a0188 	teqeq	sl, #136, 2	; 0x22
     47c:	91020000 	mrsls	r0, (UNDEF: 2)
     480:	aa170074 	bge	5c0658 <startup-0x1fa3f9a8>
     484:	01000004 	tsteq	r0, r4
     488:	0097016e 	addseq	r0, r7, lr, ror #2
     48c:	036a0000 	cmneq	sl, #0
     490:	00422000 	subeq	r2, r2, r0
     494:	9c010000 	stcls	0, cr0, [r1], {-0}
     498:	000004ca 	andeq	r0, r0, sl, asr #9
     49c:	00035314 	andeq	r5, r3, r4, lsl r3
     4a0:	016e0100 	cmneq	lr, r0, lsl #2
     4a4:	0000033a 	andeq	r0, r0, sl, lsr r3
     4a8:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
     4ac:	00000014 	andeq	r0, r0, r4, lsl r0
     4b0:	a2016e01 	andge	r6, r1, #1, 28
     4b4:	02000000 	andeq	r0, r0, #0
     4b8:	b4156a91 	ldrlt	r6, [r5], #-2705	; 0xfffff56f
     4bc:	01000001 	tsteq	r0, r1
     4c0:	00970170 	addseq	r0, r7, r0, ror r1
     4c4:	91020000 	mrsls	r0, (UNDEF: 2)
     4c8:	a2170077 	andsge	r0, r7, #119	; 0x77
     4cc:	01000002 	tsteq	r0, r2
     4d0:	00a2015d 	adceq	r0, r2, sp, asr r1
     4d4:	03540000 	cmpeq	r4, #0
     4d8:	00162000 	andseq	r2, r6, r0
     4dc:	9c010000 	stcls	0, cr0, [r1], {-0}
     4e0:	000004f4 	strdeq	r0, [r0], -r4
     4e4:	00035314 	andeq	r5, r3, r4, lsl r3
     4e8:	015d0100 	cmpeq	sp, r0, lsl #2
     4ec:	0000033a 	andeq	r0, r0, sl, lsr r3
     4f0:	00749102 	rsbseq	r9, r4, r2, lsl #2
     4f4:	00019017 	andeq	r9, r1, r7, lsl r0
     4f8:	01430100 	mrseq	r0, (UNDEF: 83)
     4fc:	00000097 	muleq	r0, r7, r0
     500:	20000312 	andcs	r0, r0, r2, lsl r3
     504:	00000042 	andeq	r0, r0, r2, asr #32
     508:	053c9c01 	ldreq	r9, [ip, #-3073]!	; 0xfffff3ff
     50c:	53140000 	tstpl	r4, #0
     510:	01000003 	tsteq	r0, r3
     514:	033a0143 	teqeq	sl, #-1073741808	; 0xc0000010
     518:	91020000 	mrsls	r0, (UNDEF: 2)
     51c:	0014146c 	andseq	r1, r4, ip, ror #8
     520:	43010000 	movwmi	r0, #4096	; 0x1000
     524:	0000a201 	andeq	sl, r0, r1, lsl #4
     528:	6a910200 	bvs	fe440d30 <APBAHBPrescTable+0xde43f5ac>
     52c:	0001b415 	andeq	fp, r1, r5, lsl r4
     530:	01450100 	mrseq	r0, (UNDEF: 85)
     534:	00000097 	muleq	r0, r7, r0
     538:	00779102 	rsbseq	r9, r7, r2, lsl #2
     53c:	0002ca13 	andeq	ip, r2, r3, lsl sl
     540:	01150100 	tsteq	r5, r0, lsl #2
     544:	200002cc 	andcs	r0, r0, ip, asr #5
     548:	00000046 	andeq	r0, r0, r6, asr #32
     54c:	05809c01 	streq	r9, [r0, #3073]	; 0xc01
     550:	53140000 	tstpl	r4, #0
     554:	01000003 	tsteq	r0, r3
     558:	033a0115 	teqeq	sl, #1073741829	; 0x40000005
     55c:	91020000 	mrsls	r0, (UNDEF: 2)
     560:	0014146c 	andseq	r1, r4, ip, ror #8
     564:	15010000 	strne	r0, [r1, #-0]
     568:	0000a201 	andeq	sl, r0, r1, lsl #4
     56c:	6a910200 	bvs	fe440d74 <APBAHBPrescTable+0xde43f5f0>
     570:	706d7418 	rsbvc	r7, sp, r8, lsl r4
     574:	01170100 	tsteq	r7, r0, lsl #2
     578:	000000cd 	andeq	r0, r0, sp, asr #1
     57c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     580:	00006119 	andeq	r6, r0, r9, lsl r1
     584:	98fe0100 	ldmls	lr!, {r8}^
     588:	34200002 	strtcc	r0, [r0], #-2
     58c:	01000000 	mrseq	r0, (UNDEF: 0)
     590:	0005a49c 	muleq	r5, ip, r4
     594:	027b1a00 	rsbseq	r1, fp, #0, 20
     598:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
     59c:	000005a4 	andeq	r0, r0, r4, lsr #11
     5a0:	00749102 	rsbseq	r9, r4, r2, lsl #2
     5a4:	02cd0416 	sbceq	r0, sp, #369098752	; 0x16000000
     5a8:	eb190000 	bl	6405b0 <startup-0x1f9bfa50>
     5ac:	01000000 	mrseq	r0, (UNDEF: 0)
     5b0:	000180ca 	andeq	r8, r1, sl, asr #1
     5b4:	00011820 	andeq	r1, r1, r0, lsr #16
     5b8:	069c0100 	ldreq	r0, [ip], r0, lsl #2
     5bc:	1a000006 	bne	5dc <startup-0x1ffffa24>
     5c0:	00000353 	andeq	r0, r0, r3, asr r3
     5c4:	033aca01 	teqeq	sl, #4096	; 0x1000
     5c8:	91020000 	mrsls	r0, (UNDEF: 2)
     5cc:	027b1a64 	rsbseq	r1, fp, #100, 20	; 0x64000
     5d0:	ca010000 	bgt	405d8 <startup-0x1ffbfa28>
     5d4:	000005a4 	andeq	r0, r0, r4, lsr #11
     5d8:	1b609102 	blne	18249e8 <startup-0x1e7db618>
     5dc:	0000000d 	andeq	r0, r0, sp
     5e0:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
     5e4:	91020000 	mrsls	r0, (UNDEF: 2)
     5e8:	6f701c74 	svcvs	0x00701c74
     5ec:	cc010073 	stcgt	0, cr0, [r1], {115}	; 0x73
     5f0:	000000c2 	andeq	r0, r0, r2, asr #1
     5f4:	1b709102 	blne	1c24a04 <startup-0x1e3db5fc>
     5f8:	00000304 	andeq	r0, r0, r4, lsl #6
     5fc:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
     600:	91020000 	mrsls	r0, (UNDEF: 2)
     604:	6e1d006c 	cdpvs	0, 1, cr0, cr13, cr12, {3}
     608:	01000001 	tsteq	r0, r1
     60c:	0000107f 	andeq	r1, r0, pc, ror r0
     610:	00017020 	andeq	r7, r1, r0, lsr #32
     614:	1a9c0100 	bne	fe700a1c <APBAHBPrescTable+0xde6ff298>
     618:	00000353 	andeq	r0, r0, r3, asr r3
     61c:	033a7f01 	teqeq	sl, #1, 30
     620:	91020000 	mrsls	r0, (UNDEF: 2)
     624:	0a000074 	beq	7fc <startup-0x1ffff804>
     628:	04000006 	streq	r0, [r0], #-6
     62c:	0001bc00 	andeq	fp, r1, r0, lsl #24
     630:	cc010400 	cfstrsgt	mvf0, [r1], {-0}
     634:	0c000001 	stceq	0, cr0, [r0], {1}
     638:	0000055c 	andeq	r0, r0, ip, asr r5
     63c:	0000037a 	andeq	r0, r0, sl, ror r3
     640:	20000520 	andcs	r0, r0, r0, lsr #10
     644:	0000025c 	andeq	r0, r0, ip, asr r2
     648:	000002ab 	andeq	r0, r0, fp, lsr #5
     64c:	c0060102 	andgt	r0, r6, r2, lsl #2
     650:	03000001 	movweq	r0, #1
     654:	00000186 	andeq	r0, r0, r6, lsl #3
     658:	00372b02 	eorseq	r2, r7, r2, lsl #22
     65c:	01020000 	mrseq	r0, (UNDEF: 2)
     660:	0001be08 	andeq	fp, r1, r8, lsl #28
     664:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     668:	00000057 	andeq	r0, r0, r7, asr r0
     66c:	0000a903 	andeq	sl, r0, r3, lsl #18
     670:	50390200 	eorspl	r0, r9, r0, lsl #4
     674:	02000000 	andeq	r0, r0, #0
     678:	02e70702 	rsceq	r0, r7, #524288	; 0x80000
     67c:	dd030000 	stcle	0, cr0, [r3, #-0]
     680:	02000002 	andeq	r0, r0, #2
     684:	0000624d 	andeq	r6, r0, sp, asr #4
     688:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     68c:	00000144 	andeq	r0, r0, r4, asr #2
     690:	00009e03 	andeq	r9, r0, r3, lsl #28
     694:	744f0200 	strbvc	r0, [pc], #-512	; 69c <startup-0x1ffff964>
     698:	02000000 	andeq	r0, r0, #0
     69c:	02690704 	rsbeq	r0, r9, #4, 14	; 0x100000
     6a0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     6a4:	00013f05 	andeq	r3, r1, r5, lsl #30
     6a8:	07080200 	streq	r0, [r8, -r0, lsl #4]
     6ac:	00000264 	andeq	r0, r0, r4, ror #4
     6b0:	69050404 	stmdbvs	r5, {r2, sl}
     6b4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     6b8:	026e0704 	rsbeq	r0, lr, #4, 14	; 0x100000
     6bc:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
     6c0:	03000001 	movweq	r0, #1
     6c4:	00002c18 	andeq	r2, r0, r8, lsl ip
     6c8:	00970500 	addseq	r0, r7, r0, lsl #10
     6cc:	97060000 	strls	r0, [r6, -r0]
     6d0:	05000000 	streq	r0, [r0, #-0]
     6d4:	000000a7 	andeq	r0, r0, r7, lsr #1
     6d8:	0000ab03 	andeq	sl, r0, r3, lsl #22
     6dc:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
     6e0:	03000000 	movweq	r0, #0
     6e4:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     6e8:	00572c03 	subseq	r2, r7, r3, lsl #24
     6ec:	bc050000 	stclt	0, cr0, [r5], {-0}
     6f0:	03000000 	movweq	r0, #0
     6f4:	000000a0 	andeq	r0, r0, r0, lsr #1
     6f8:	00693003 	rsbeq	r3, r9, r3
     6fc:	cc050000 	stcgt	0, cr0, [r5], {-0}
     700:	06000000 	streq	r0, [r0], -r0
     704:	000000d7 	ldrdeq	r0, [r0], -r7
     708:	c0048c07 	andgt	r8, r4, r7, lsl #24
     70c:	0001fc01 	andeq	pc, r1, r1, lsl #24
     710:	05200800 	streq	r0, [r0, #-2048]!	; 0xfffff800
     714:	c2040000 	andgt	r0, r4, #0
     718:	0000dc01 	andeq	sp, r0, r1, lsl #24
     71c:	eb080000 	bl	200724 <startup-0x1fdff8dc>
     720:	04000004 	streq	r0, [r0], #-4
     724:	00d701c3 	sbcseq	r0, r7, r3, asr #3
     728:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     72c:	0000068c 	andeq	r0, r0, ip, lsl #13
     730:	d701c404 	strle	ip, [r1, -r4, lsl #8]
     734:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     738:	00062b08 	andeq	r2, r6, r8, lsl #22
     73c:	01c50400 	biceq	r0, r5, r0, lsl #8
     740:	000000d7 	ldrdeq	r0, [r0], -r7
     744:	4353090c 	cmpmi	r3, #12, 18	; 0x30000
     748:	c6040052 			; <UNDEFINED> instruction: 0xc6040052
     74c:	0000d701 	andeq	sp, r0, r1, lsl #14
     750:	43091000 	movwmi	r1, #36864	; 0x9000
     754:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
     758:	00d701c7 	sbcseq	r0, r7, r7, asr #3
     75c:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
     760:	00504853 	subseq	r4, r0, r3, asr r8
     764:	0c01c804 	stceq	8, cr12, [r1], {4}
     768:	18000002 	stmdane	r0, {r1}
     76c:	00065108 	andeq	r5, r6, r8, lsl #2
     770:	01c90400 	biceq	r0, r9, r0, lsl #8
     774:	000000d7 	ldrdeq	r0, [r0], -r7
     778:	06090824 	streq	r0, [r9], -r4, lsr #16
     77c:	ca040000 	bgt	100784 <startup-0x1feff87c>
     780:	0000d701 	andeq	sp, r0, r1, lsl #14
     784:	9b082800 	blls	20a78c <startup-0x1fdf5874>
     788:	04000006 	streq	r0, [r0], #-6
     78c:	00d701cb 	sbcseq	r0, r7, fp, asr #3
     790:	082c0000 	stmdaeq	ip!, {}	; <UNPREDICTABLE>
     794:	00000696 	muleq	r0, r6, r6
     798:	d701cc04 	strle	ip, [r1, -r4, lsl #24]
     79c:	30000000 	andcc	r0, r0, r0
     7a0:	00066d08 	andeq	r6, r6, r8, lsl #26
     7a4:	01cd0400 	biceq	r0, sp, r0, lsl #8
     7a8:	000000d7 	ldrdeq	r0, [r0], -r7
     7ac:	05e60834 	strbeq	r0, [r6, #2100]!	; 0x834
     7b0:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
     7b4:	0000d701 	andeq	sp, r0, r1, lsl #14
     7b8:	09083800 	stmdbeq	r8, {fp, ip, sp}
     7bc:	04000007 	streq	r0, [r0], #-7
     7c0:	00d701cf 	sbcseq	r0, r7, pc, asr #3
     7c4:	093c0000 	ldmdbeq	ip!, {}	; <UNPREDICTABLE>
     7c8:	00524650 	subseq	r4, r2, r0, asr r6
     7cc:	2601d004 	strcs	sp, [r1], -r4
     7d0:	40000002 	andmi	r0, r0, r2
     7d4:	52464409 	subpl	r4, r6, #150994944	; 0x9000000
     7d8:	01d10400 	bicseq	r0, r1, r0, lsl #8
     7dc:	000000dc 	ldrdeq	r0, [r0], -ip
     7e0:	44410948 	strbmi	r0, [r1], #-2376	; 0xfffff6b8
     7e4:	d2040052 	andle	r0, r4, #82	; 0x52
     7e8:	0000dc01 	andeq	sp, r0, r1, lsl #24
     7ec:	aa084c00 	bge	2137f4 <startup-0x1fdec80c>
     7f0:	04000006 	streq	r0, [r0], #-6
     7f4:	024001d3 	subeq	r0, r0, #-1073741772	; 0xc0000034
     7f8:	08500000 	ldmdaeq	r0, {}^	; <UNPREDICTABLE>
     7fc:	00000691 	muleq	r0, r1, r6
     800:	5a01d404 	bpl	75818 <startup-0x1ff8a7e8>
     804:	60000002 	andvs	r0, r0, r2
     808:	00052608 	andeq	r2, r5, r8, lsl #12
     80c:	01d50400 	bicseq	r0, r5, r0, lsl #8
     810:	0000025f 	andeq	r0, r0, pc, asr r2
     814:	07300874 			; <UNDEFINED> instruction: 0x07300874
     818:	d6040000 	strle	r0, [r4], -r0
     81c:	0000d701 	andeq	sp, r0, r1, lsl #14
     820:	0a008800 	beq	22828 <startup-0x1ffdd7d8>
     824:	000000a2 	andeq	r0, r0, r2, lsr #1
     828:	0000020c 	andeq	r0, r0, ip, lsl #4
     82c:	0000900b 	andeq	r9, r0, fp
     830:	05000b00 	streq	r0, [r0, #-2816]	; 0xfffff500
     834:	000001fc 	strdeq	r0, [r0], -ip
     838:	0000dc0a 	andeq	sp, r0, sl, lsl #24
     83c:	00022100 	andeq	r2, r2, r0, lsl #2
     840:	00900b00 	addseq	r0, r0, r0, lsl #22
     844:	00010000 	andeq	r0, r1, r0
     848:	00021106 	andeq	r1, r2, r6, lsl #2
     84c:	02210500 	eoreq	r0, r1, #0, 10
     850:	dc0a0000 	stcle	0, cr0, [sl], {-0}
     854:	3b000000 	blcc	85c <startup-0x1ffff7a4>
     858:	0b000002 	bleq	868 <startup-0x1ffff798>
     85c:	00000090 	muleq	r0, r0, r0
     860:	2b060003 	blcs	180874 <startup-0x1fe7f78c>
     864:	05000002 	streq	r0, [r0, #-2]
     868:	0000023b 	andeq	r0, r0, fp, lsr r2
     86c:	0000dc0a 	andeq	sp, r0, sl, lsl #24
     870:	00025500 	andeq	r5, r2, r0, lsl #10
     874:	00900b00 	addseq	r0, r0, r0, lsl #22
     878:	00040000 	andeq	r0, r4, r0
     87c:	00024506 	andeq	r4, r2, r6, lsl #10
     880:	02550500 	subseq	r0, r5, #0, 10
     884:	cc0a0000 	stcgt	0, cr0, [sl], {-0}
     888:	6f000000 	svcvs	0x00000000
     88c:	0b000002 	bleq	89c <startup-0x1ffff764>
     890:	00000090 	muleq	r0, r0, r0
     894:	310c0004 	tstcc	ip, r4
     898:	04000006 	streq	r0, [r0], #-6
     89c:	00e101d7 	ldrdeq	r0, [r1], #23	; <UNPREDICTABLE>
     8a0:	cc0a0000 	stcgt	0, cr0, [sl], {-0}
     8a4:	8b000000 	blhi	8ac <startup-0x1ffff754>
     8a8:	0b000002 	bleq	8b8 <startup-0x1ffff748>
     8ac:	00000090 	muleq	r0, r0, r0
     8b0:	b50d0001 	strlt	r0, [sp, #-1]
     8b4:	04000002 	streq	r0, [r0], #-2
     8b8:	00c706fa 	strdeq	r0, [r7], #106	; 0x6a
     8bc:	1a0e0000 	bne	3808c4 <startup-0x1fc7f73c>
     8c0:	05000003 	streq	r0, [r0, #-3]
     8c4:	0000cc3b 	andeq	ip, r0, fp, lsr ip
     8c8:	01070f00 	tsteq	r7, r0, lsl #30
     8cc:	00000037 	andeq	r0, r0, r7, lsr r0
     8d0:	bd035d06 	stclt	13, cr5, [r3, #-24]	; 0xffffffe8
     8d4:	10000002 	andne	r0, r0, r2
     8d8:	0000008a 	andeq	r0, r0, sl, lsl #1
     8dc:	45531100 	ldrbmi	r1, [r3, #-256]	; 0xffffff00
     8e0:	00010054 	andeq	r0, r1, r4, asr r0
     8e4:	2d061c07 	stccs	12, cr1, [r6, #-28]	; 0xffffffe4
     8e8:	00032005 	andeq	r2, r3, r5
     8ec:	43410900 	movtmi	r0, #6400	; 0x1900
     8f0:	2f060052 	svccs	0x00060052
     8f4:	0000d705 	andeq	sp, r0, r5, lsl #14
     8f8:	e1080000 	mrs	r0, (UNDEF: 8)
     8fc:	06000005 	streq	r0, [r0], -r5
     900:	00d70530 	sbcseq	r0, r7, r0, lsr r5
     904:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     908:	000005de 	ldrdeq	r0, [r0], -lr
     90c:	d7053106 	strle	r3, [r5, -r6, lsl #2]
     910:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     914:	00525309 	subseq	r5, r2, r9, lsl #6
     918:	d7053206 	strle	r3, [r5, -r6, lsl #4]
     91c:	0c000000 	stceq	0, cr0, [r0], {-0}
     920:	00524309 	subseq	r4, r2, r9, lsl #6
     924:	d7053306 	strle	r3, [r5, -r6, lsl #6]
     928:	10000000 	andne	r0, r0, r0
     92c:	00074008 	andeq	r4, r7, r8
     930:	05340600 	ldreq	r0, [r4, #-1536]!	; 0xfffffa00
     934:	000000d7 	ldrdeq	r0, [r0], -r7
     938:	07460814 	smlaldeq	r0, r6, r4, r8
     93c:	35060000 	strcc	r0, [r6, #-0]
     940:	0000d705 	andeq	sp, r0, r5, lsl #14
     944:	0c001800 	stceq	8, cr1, [r0], {-0}
     948:	00000717 	andeq	r0, r0, r7, lsl r7
     94c:	bd053606 	stclt	6, cr3, [r5, #-24]	; 0xffffffe8
     950:	07000002 	streq	r0, [r0, -r2]
     954:	065a0608 	ldrbeq	r0, [sl], -r8, lsl #12
     958:	0000034f 	andeq	r0, r0, pc, asr #6
     95c:	00524309 	subseq	r4, r2, r9, lsl #6
     960:	d7065c06 	strle	r5, [r6, -r6, lsl #24]
     964:	00000000 	andeq	r0, r0, r0
     968:	52534309 	subspl	r4, r3, #603979776	; 0x24000000
     96c:	065d0600 	ldrbeq	r0, [sp], -r0, lsl #12
     970:	000000d7 	ldrdeq	r0, [r0], -r7
     974:	040c0004 	streq	r0, [ip], #-4
     978:	06000005 	streq	r0, [r0], -r5
     97c:	032c065e 			; <UNDEFINED> instruction: 0x032c065e
     980:	98070000 	stmdals	r7, {}	; <UNPREDICTABLE>
     984:	1e066406 	cdpne	4, 0, cr6, cr6, cr6, {0}
     988:	09000005 	stmdbeq	r0, {r0, r2}
     98c:	06005243 	streq	r5, [r0], -r3, asr #4
     990:	00d70666 	sbcseq	r0, r7, r6, ror #12
     994:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     998:	00000673 	andeq	r0, r0, r3, ror r6
     99c:	d7066706 	strle	r6, [r6, -r6, lsl #14]
     9a0:	04000000 	streq	r0, [r0], #-0
     9a4:	00072b08 	andeq	r2, r7, r8, lsl #22
     9a8:	06680600 	strbteq	r0, [r8], -r0, lsl #12
     9ac:	000000d7 	ldrdeq	r0, [r0], -r7
     9b0:	49430908 	stmdbmi	r3, {r3, r8, fp}^
     9b4:	69060052 	stmdbvs	r6, {r1, r4, r6}
     9b8:	0000d706 	andeq	sp, r0, r6, lsl #14
     9bc:	00080c00 	andeq	r0, r8, r0, lsl #24
     9c0:	06000007 	streq	r0, [r0], -r7
     9c4:	00d7066a 	sbcseq	r0, r7, sl, ror #12
     9c8:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
     9cc:	0000060e 	andeq	r0, r0, lr, lsl #12
     9d0:	d7066b06 	strle	r6, [r6, -r6, lsl #22]
     9d4:	14000000 	strne	r0, [r0], #-0
     9d8:	00070e08 	andeq	r0, r7, r8, lsl #28
     9dc:	066c0600 	strbteq	r0, [ip], -r0, lsl #12
     9e0:	000000d7 	ldrdeq	r0, [r0], -r7
     9e4:	05260818 	streq	r0, [r6, #-2072]!	; 0xfffff7e8
     9e8:	6d060000 	stcvs	0, cr0, [r6, #-0]
     9ec:	0000cc06 	andeq	ip, r0, r6, lsl #24
     9f0:	d5081c00 	strle	r1, [r8, #-3072]	; 0xfffff400
     9f4:	06000004 	streq	r0, [r0], -r4
     9f8:	00d7066e 	sbcseq	r0, r7, lr, ror #12
     9fc:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
     a00:	00000600 	andeq	r0, r0, r0, lsl #12
     a04:	d7066f06 	strle	r6, [r6, -r6, lsl #30]
     a08:	24000000 	strcs	r0, [r0], #-0
     a0c:	0006af08 	andeq	sl, r6, r8, lsl #30
     a10:	06700600 	ldrbteq	r0, [r0], -r0, lsl #12
     a14:	0000027b 	andeq	r0, r0, fp, ror r2
     a18:	06ed0828 	strbteq	r0, [sp], r8, lsr #16
     a1c:	71060000 	mrsvc	r0, (UNDEF: 6)
     a20:	0000d706 	andeq	sp, r0, r6, lsl #14
     a24:	de083000 	cdple	0, 0, cr3, cr8, cr0, {0}
     a28:	06000004 	streq	r0, [r0], -r4
     a2c:	00d70672 	sbcseq	r0, r7, r2, ror r6
     a30:	08340000 	ldmdaeq	r4!, {}	; <UNPREDICTABLE>
     a34:	00000554 	andeq	r0, r0, r4, asr r5
     a38:	d7067306 	strle	r7, [r6, -r6, lsl #6]
     a3c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     a40:	0006b908 	andeq	fp, r6, r8, lsl #18
     a44:	06740600 	ldrbteq	r0, [r4], -r0, lsl #12
     a48:	000000cc 	andeq	r0, r0, ip, asr #1
     a4c:	0544083c 	strbeq	r0, [r4, #-2108]	; 0xfffff7c4
     a50:	75060000 	strvc	r0, [r6, #-0]
     a54:	0000d706 	andeq	sp, r0, r6, lsl #14
     a58:	3a084000 	bcc	210a60 <startup-0x1fdef5a0>
     a5c:	06000006 	streq	r0, [r0], -r6
     a60:	00d70676 	sbcseq	r0, r7, r6, ror r6
     a64:	08440000 	stmdaeq	r4, {}^	; <UNPREDICTABLE>
     a68:	0000053a 	andeq	r0, r0, sl, lsr r5
     a6c:	7b067706 	blvc	19e68c <startup-0x1fe61974>
     a70:	48000002 	stmdami	r0, {r1}
     a74:	0004cb08 	andeq	ip, r4, r8, lsl #22
     a78:	06780600 	ldrbteq	r0, [r8], -r0, lsl #12
     a7c:	000000d7 	ldrdeq	r0, [r0], -r7
     a80:	06a00850 	ssateq	r0, #1, r0, asr #16
     a84:	79060000 	stmdbvc	r6, {}	; <UNPREDICTABLE>
     a88:	0000d706 	andeq	sp, r0, r6, lsl #14
     a8c:	30085400 	andcc	r5, r8, r0, lsl #8
     a90:	06000005 	streq	r0, [r0], -r5
     a94:	00d7067a 	sbcseq	r0, r7, sl, ror r6
     a98:	08580000 	ldmdaeq	r8, {}^	; <UNPREDICTABLE>
     a9c:	000006cf 	andeq	r0, r0, pc, asr #13
     aa0:	cc067b06 			; <UNDEFINED> instruction: 0xcc067b06
     aa4:	5c000000 	stcpl	0, cr0, [r0], {-0}
     aa8:	00067b08 	andeq	r7, r6, r8, lsl #22
     aac:	067c0600 	ldrbteq	r0, [ip], -r0, lsl #12
     ab0:	000000d7 	ldrdeq	r0, [r0], -r7
     ab4:	07360860 	ldreq	r0, [r6, -r0, ror #16]!
     ab8:	7d060000 	stcvc	0, cr0, [r6, #-0]
     abc:	0000d706 	andeq	sp, r0, r6, lsl #14
     ac0:	d9086400 	stmdble	r8, {sl, sp, lr}
     ac4:	06000006 	streq	r0, [r0], -r6
     ac8:	027b067e 	rsbseq	r0, fp, #132120576	; 0x7e00000
     acc:	08680000 	stmdaeq	r8!, {}^	; <UNPREDICTABLE>
     ad0:	000004e6 	andeq	r0, r0, r6, ror #9
     ad4:	d7067f06 	strle	r7, [r6, -r6, lsl #30]
     ad8:	70000000 	andvc	r0, r0, r0
     adc:	52534309 	subspl	r4, r3, #603979776	; 0x24000000
     ae0:	06800600 	streq	r0, [r0], r0, lsl #12
     ae4:	000000d7 	ldrdeq	r0, [r0], -r7
     ae8:	06e30874 	uxtabeq	r0, r3, r4, ror #16
     aec:	81060000 	mrshi	r0, (UNDEF: 6)
     af0:	00027b06 	andeq	r7, r2, r6, lsl #22
     af4:	10087800 	andne	r7, r8, r0, lsl #16
     af8:	06000005 	streq	r0, [r0], -r5
     afc:	00d70682 	sbcseq	r0, r7, r2, lsl #13
     b00:	08800000 	stmeq	r0, {}	; <UNPREDICTABLE>
     b04:	000004f9 	strdeq	r0, [r0], -r9
     b08:	d7068306 	strle	r8, [r6, -r6, lsl #6]
     b0c:	84000000 	strhi	r0, [r0], #-0
     b10:	00072508 	andeq	r2, r7, r8, lsl #10
     b14:	06840600 	streq	r0, [r4], r0, lsl #12
     b18:	000000d7 	ldrdeq	r0, [r0], -r7
     b1c:	054c0888 	strbeq	r0, [ip, #-2184]	; 0xfffff778
     b20:	85060000 	strhi	r0, [r6, #-0]
     b24:	0000d706 	andeq	sp, r0, r6, lsl #14
     b28:	f0088c00 			; <UNDEFINED> instruction: 0xf0088c00
     b2c:	06000004 	streq	r0, [r0], -r4
     b30:	00d70686 	sbcseq	r0, r7, r6, lsl #13
     b34:	08900000 	ldmeq	r0, {}	; <UNPREDICTABLE>
     b38:	000005f7 	strdeq	r0, [r0], -r7
     b3c:	d7068706 	strle	r8, [r6, -r6, lsl #14]
     b40:	94000000 	strls	r0, [r0], #-0
     b44:	05eb0c00 	strbeq	r0, [fp, #3072]!	; 0xc00
     b48:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
     b4c:	00035b06 	andeq	r5, r3, r6, lsl #22
     b50:	02971200 	addseq	r1, r7, #0, 4
     b54:	27010000 	strcs	r0, [r1, -r0]
     b58:	70030501 	andvc	r0, r3, r1, lsl #10
     b5c:	0a200017 	beq	800bc0 <startup-0x1f7ff440>
     b60:	000000ac 	andeq	r0, r0, ip, lsr #1
     b64:	00000548 	andeq	r0, r0, r8, asr #10
     b68:	0000900b 	andeq	r9, r0, fp
     b6c:	06000f00 	streq	r0, [r0], -r0, lsl #30
     b70:	00000538 	andeq	r0, r0, r8, lsr r5
     b74:	00054805 	andeq	r4, r5, r5, lsl #16
     b78:	16ca1300 	strbne	r1, [sl], r0, lsl #6
     b7c:	32010000 	andcc	r0, r1, #0
     b80:	00054d01 	andeq	r4, r5, r1, lsl #26
     b84:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
     b88:	14200017 	strtne	r0, [r0], #-23	; 0xffffffe9
     b8c:	000006c3 	andeq	r0, r0, r3, asr #13
     b90:	7801d601 	stmdavc	r1, {r0, r9, sl, ip, lr, pc}
     b94:	04200006 	strteq	r0, [r0], #-6
     b98:	01000001 	tsteq	r0, r1
     b9c:	0005999c 	muleq	r5, ip, r9
     ba0:	06421500 	strbeq	r1, [r2], -r0, lsl #10
     ba4:	db010000 	blle	40bac <startup-0x1ffbf454>
     ba8:	0000d701 	andeq	sp, r0, r1, lsl #14
     bac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     bb0:	00051615 	andeq	r1, r5, r5, lsl r6
     bb4:	01db0100 	bicseq	r0, fp, r0, lsl #2
     bb8:	000000d7 	ldrdeq	r0, [r0], -r7
     bbc:	00709102 	rsbseq	r9, r0, r2, lsl #2
     bc0:	00065716 	andeq	r5, r6, r6, lsl r7
     bc4:	019e0100 	orrseq	r0, lr, r0, lsl #2
     bc8:	20000580 	andcs	r0, r0, r0, lsl #11
     bcc:	000000f8 	strdeq	r0, [r0], -r8
     bd0:	05fb9c01 	ldrbeq	r9, [fp, #3073]!	; 0xc01
     bd4:	74170000 	ldrvc	r0, [r7], #-0
     bd8:	0100706d 	tsteq	r0, sp, rrx
     bdc:	00cc01a0 	sbceq	r0, ip, r0, lsr #3
     be0:	91020000 	mrsls	r0, (UNDEF: 2)
     be4:	06851570 			; <UNDEFINED> instruction: 0x06851570
     be8:	a0010000 	andge	r0, r1, r0
     bec:	0000cc01 	andeq	ip, r0, r1, lsl #24
     bf0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     bf4:	00062615 	andeq	r2, r6, r5, lsl r6
     bf8:	01a00100 	lsleq	r0, r0, #2
     bfc:	000000cc 	andeq	r0, r0, ip, asr #1
     c00:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
     c04:	00000617 	andeq	r0, r0, r7, lsl r6
     c08:	cc01a001 	stcgt	0, cr10, [r1], {1}
     c0c:	02000000 	andeq	r0, r0, #0
     c10:	21156891 			; <UNDEFINED> instruction: 0x21156891
     c14:	01000006 	tsteq	r0, r6
     c18:	00cc01a0 	sbceq	r0, ip, r0, lsr #3
     c1c:	91020000 	mrsls	r0, (UNDEF: 2)
     c20:	f5180064 			; <UNDEFINED> instruction: 0xf5180064
     c24:	01000006 	tsteq	r0, r6
     c28:	05200151 	streq	r0, [r0, #-337]!	; 0xfffffeaf
     c2c:	00602000 	rsbeq	r2, r0, r0
     c30:	9c010000 	stcls	0, cr0, [r1], {-0}
     c34:	00116c00 	andseq	r6, r1, r0, lsl #24
     c38:	16000400 	strne	r0, [r0], -r0, lsl #8
     c3c:	04000003 	streq	r0, [r0], #-3
     c40:	0001cc01 	andeq	ip, r1, r1, lsl #24
     c44:	0b6e0c00 	bleq	1b83c4c <startup-0x1e47c3b4>
     c48:	037a0000 	cmneq	sl, #0
	...
     c54:	04e00000 	strbteq	r0, [r0], #0
     c58:	01020000 	mrseq	r0, (UNDEF: 2)
     c5c:	0001c006 	andeq	ip, r1, r6
     c60:	01860300 	orreq	r0, r6, r0, lsl #6
     c64:	2b030000 	blcs	c0c6c <startup-0x1ff3f394>
     c68:	00000037 	andeq	r0, r0, r7, lsr r0
     c6c:	be080102 	adflte	f0, f0, f2
     c70:	02000001 	andeq	r0, r0, #1
     c74:	00570502 	subseq	r0, r7, r2, lsl #10
     c78:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
     c7c:	03000000 	movweq	r0, #0
     c80:	00005039 	andeq	r5, r0, r9, lsr r0
     c84:	07020200 	streq	r0, [r2, -r0, lsl #4]
     c88:	000002e7 	andeq	r0, r0, r7, ror #5
     c8c:	0002dd03 	andeq	sp, r2, r3, lsl #26
     c90:	624d0300 	subvs	r0, sp, #0, 6
     c94:	02000000 	andeq	r0, r0, #0
     c98:	01440504 	cmpeq	r4, r4, lsl #10
     c9c:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
     ca0:	03000000 	movweq	r0, #0
     ca4:	0000744f 	andeq	r7, r0, pc, asr #8
     ca8:	07040200 	streq	r0, [r4, -r0, lsl #4]
     cac:	00000269 	andeq	r0, r0, r9, ror #4
     cb0:	3f050802 	svccc	0x00050802
     cb4:	02000001 	andeq	r0, r0, #1
     cb8:	02640708 	rsbeq	r0, r4, #8, 14	; 0x200000
     cbc:	04040000 	streq	r0, [r4], #-0
     cc0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     cc4:	07040200 	streq	r0, [r4, -r0, lsl #4]
     cc8:	0000026e 	andeq	r0, r0, lr, ror #4
     ccc:	44030405 	strmi	r0, [r3], #-1029	; 0xfffffbfb
     cd0:	04000010 	streq	r0, [r0], #-16
     cd4:	0000a422 	andeq	sl, r0, r2, lsr #8
     cd8:	aa040600 	bge	1024e0 <startup-0x1fefdb20>
     cdc:	07000000 	streq	r0, [r0, -r0]
     ce0:	00000a7e 	andeq	r0, r0, lr, ror sl
     ce4:	00109a03 	andseq	r9, r0, r3, lsl #20
     ce8:	622c0500 	eorvs	r0, ip, #0, 10
     cec:	03000000 	movweq	r0, #0
     cf0:	00000e28 	andeq	r0, r0, r8, lsr #28
     cf4:	00627205 	rsbeq	r7, r2, r5, lsl #4
     cf8:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
     cfc:	0600000f 	streq	r0, [r0], -pc
     d00:	00900165 	addseq	r0, r0, r5, ror #2
     d04:	04090000 	streq	r0, [r9], #-0
     d08:	00f0a605 	rscseq	sl, r0, r5, lsl #12
     d0c:	6f0a0000 	svcvs	0x000a0000
     d10:	05000008 	streq	r0, [r0, #-8]
     d14:	0000c5a8 	andeq	ip, r0, r8, lsr #11
     d18:	0e3d0a00 	vaddeq.f32	s0, s26, s0
     d1c:	a9050000 	stmdbge	r5, {}	; <UNPREDICTABLE>
     d20:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     d24:	00370b00 	eorseq	r0, r7, r0, lsl #22
     d28:	01000000 	mrseq	r0, (UNDEF: 0)
     d2c:	900c0000 	andls	r0, ip, r0
     d30:	03000000 	movweq	r0, #0
     d34:	05080d00 	streq	r0, [r8, #-3328]	; 0xfffff300
     d38:	000121a3 	andeq	r2, r1, r3, lsr #3
     d3c:	0de10e00 	stcleq	14, cr0, [r1]
     d40:	a5050000 	strge	r0, [r5, #-0]
     d44:	00000089 	andeq	r0, r0, r9, lsl #1
     d48:	079f0e00 	ldreq	r0, [pc, r0, lsl #28]
     d4c:	aa050000 	bge	140d54 <startup-0x1febf2ac>
     d50:	000000d1 	ldrdeq	r0, [r0], -r1
     d54:	10030004 	andne	r0, r3, r4
     d58:	0500000f 	streq	r0, [r0, #-15]
     d5c:	000100ab 	andeq	r0, r1, fp, lsr #1
     d60:	0f000300 	svceq	0x00000300
     d64:	af050000 	svcge	0x00050000
     d68:	00000099 	muleq	r0, r9, r0
     d6c:	00106f03 	andseq	r6, r0, r3, lsl #30
     d70:	74160700 	ldrvc	r0, [r6], #-1792	; 0xfffff900
     d74:	0f000000 	svceq	0x00000000
     d78:	00000c0d 	andeq	r0, r0, sp, lsl #24
     d7c:	952f0718 	strls	r0, [pc, #-1816]!	; 66c <startup-0x1ffff994>
     d80:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     d84:	00000d9b 	muleq	r0, fp, sp
     d88:	01953107 	orrseq	r3, r5, r7, lsl #2
     d8c:	10000000 	andne	r0, r0, r0
     d90:	07006b5f 	smlsdeq	r0, pc, fp, r6	; <UNPREDICTABLE>
     d94:	00008932 	andeq	r8, r0, r2, lsr r9
     d98:	1d0e0400 	cfstrsne	mvf0, [lr, #-0]
     d9c:	0700000c 	streq	r0, [r0, -ip]
     da0:	00008932 	andeq	r8, r0, r2, lsr r9
     da4:	080e0800 	stmdaeq	lr, {fp}
     da8:	0700000d 	streq	r0, [r0, -sp]
     dac:	00008932 	andeq	r8, r0, r2, lsr r9
     db0:	790e0c00 	stmdbvc	lr, {sl, fp}
     db4:	0700000a 	streq	r0, [r0, -sl]
     db8:	00008932 	andeq	r8, r0, r2, lsr r9
     dbc:	5f101000 	svcpl	0x00101000
     dc0:	33070078 	movwcc	r0, #28792	; 0x7078
     dc4:	0000019b 	muleq	r0, fp, r1
     dc8:	04060014 	streq	r0, [r6], #-20	; 0xffffffec
     dcc:	00000142 	andeq	r0, r0, r2, asr #2
     dd0:	0001370b 	andeq	r3, r1, fp, lsl #14
     dd4:	0001ab00 	andeq	sl, r1, r0, lsl #22
     dd8:	00900c00 	addseq	r0, r0, r0, lsl #24
     ddc:	00000000 	andeq	r0, r0, r0
     de0:	0007e00f 	andeq	lr, r7, pc
     de4:	37072400 	strcc	r2, [r7, -r0, lsl #8]
     de8:	00000224 	andeq	r0, r0, r4, lsr #4
     dec:	0007fc0e 	andeq	pc, r7, lr, lsl #24
     df0:	89390700 	ldmdbhi	r9!, {r8, r9, sl}
     df4:	00000000 	andeq	r0, r0, r0
     df8:	00113c0e 	andseq	r3, r1, lr, lsl #24
     dfc:	893a0700 	ldmdbhi	sl!, {r8, r9, sl}
     e00:	04000000 	streq	r0, [r0], #-0
     e04:	0010b10e 	andseq	fp, r0, lr, lsl #2
     e08:	893b0700 	ldmdbhi	fp!, {r8, r9, sl}
     e0c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     e10:	000d620e 	andeq	r6, sp, lr, lsl #4
     e14:	893c0700 	ldmdbhi	ip!, {r8, r9, sl}
     e18:	0c000000 	stceq	0, cr0, [r0], {-0}
     e1c:	0009430e 	andeq	r4, r9, lr, lsl #6
     e20:	893d0700 	ldmdbhi	sp!, {r8, r9, sl}
     e24:	10000000 	andne	r0, r0, r0
     e28:	0010000e 	andseq	r0, r0, lr
     e2c:	893e0700 	ldmdbhi	lr!, {r8, r9, sl}
     e30:	14000000 	strne	r0, [r0], #-0
     e34:	000df60e 	andeq	pc, sp, lr, lsl #12
     e38:	893f0700 	ldmdbhi	pc!, {r8, r9, sl}	; <UNPREDICTABLE>
     e3c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     e40:	000e000e 	andeq	r0, lr, lr
     e44:	89400700 	stmdbhi	r0, {r8, r9, sl}^
     e48:	1c000000 	stcne	0, cr0, [r0], {-0}
     e4c:	0011310e 	andseq	r3, r1, lr, lsl #2
     e50:	89410700 	stmdbhi	r1, {r8, r9, sl}^
     e54:	20000000 	andcs	r0, r0, r0
     e58:	08aa1100 	stmiaeq	sl!, {r8, ip}
     e5c:	01080000 	mrseq	r0, (UNDEF: 8)
     e60:	02644a07 	rsbeq	r4, r4, #28672	; 0x7000
     e64:	290e0000 	stmdbcs	lr, {}	; <UNPREDICTABLE>
     e68:	07000011 	smladeq	r0, r1, r0, r0
     e6c:	0002644b 	andeq	r6, r2, fp, asr #8
     e70:	870e0000 	strhi	r0, [lr, -r0]
     e74:	0700000e 	streq	r0, [r0, -lr]
     e78:	0002644c 	andeq	r6, r2, ip, asr #8
     e7c:	d9128000 	ldmdble	r2, {pc}
     e80:	0700000f 	streq	r0, [r0, -pc]
     e84:	0001374e 	andeq	r3, r1, lr, asr #14
     e88:	12010000 	andne	r0, r1, #0
     e8c:	0000103c 	andeq	r1, r0, ip, lsr r0
     e90:	01375107 	teqeq	r7, r7, lsl #2
     e94:	01040000 	mrseq	r0, (UNDEF: 4)
     e98:	00970b00 	addseq	r0, r7, r0, lsl #22
     e9c:	02740000 	rsbseq	r0, r4, #0
     ea0:	900c0000 	andls	r0, ip, r0
     ea4:	1f000000 	svcne	0x00000000
     ea8:	0dba1100 	ldfeqs	f1, [sl]
     eac:	01900000 	orrseq	r0, r0, r0
     eb0:	02b25d07 	adcseq	r5, r2, #448	; 0x1c0
     eb4:	9b0e0000 	blls	380ebc <startup-0x1fc7f144>
     eb8:	0700000d 	streq	r0, [r0, -sp]
     ebc:	0002b25e 	andeq	fp, r2, lr, asr r2
     ec0:	2b0e0000 	blcs	380ec8 <startup-0x1fc7f138>
     ec4:	07000010 	smladeq	r0, r0, r0, r0
     ec8:	0000895f 	andeq	r8, r0, pc, asr r9
     ecc:	290e0400 	stmdbcs	lr, {sl}
     ed0:	0700000a 	streq	r0, [r0, -sl]
     ed4:	0002b861 	andeq	fp, r2, r1, ror #16
     ed8:	aa0e0800 	bge	382ee0 <startup-0x1fc7d120>
     edc:	07000008 	streq	r0, [r0, -r8]
     ee0:	00022462 	andeq	r2, r2, r2, ror #8
     ee4:	06008800 	streq	r8, [r0], -r0, lsl #16
     ee8:	00027404 	andeq	r7, r2, r4, lsl #8
     eec:	02c80b00 	sbceq	r0, r8, #0, 22
     ef0:	02c80000 	sbceq	r0, r8, #0
     ef4:	900c0000 	andls	r0, ip, r0
     ef8:	1f000000 	svcne	0x00000000
     efc:	ce040600 	cfmadd32gt	mvax0, mvfx0, mvfx4, mvfx0
     f00:	13000002 	movwne	r0, #2
     f04:	0010350f 	andseq	r3, r0, pc, lsl #10
     f08:	75070800 	strvc	r0, [r7, #-2048]	; 0xfffff800
     f0c:	000002f4 	strdeq	r0, [r0], -r4
     f10:	000ec20e 	andeq	ip, lr, lr, lsl #4
     f14:	f4760700 			; <UNDEFINED> instruction: 0xf4760700
     f18:	00000002 	andeq	r0, r0, r2
     f1c:	0008e00e 	andeq	lr, r8, lr
     f20:	89770700 	ldmdbhi	r7!, {r8, r9, sl}^
     f24:	04000000 	streq	r0, [r0], #-0
     f28:	37040600 	strcc	r0, [r4, -r0, lsl #12]
     f2c:	0f000000 	svceq	0x00000000
     f30:	00000b53 	andeq	r0, r0, r3, asr fp
     f34:	24b50768 	ldrtcs	r0, [r5], #1896	; 0x768
     f38:	10000004 	andne	r0, r0, r4
     f3c:	0700705f 	smlsdeq	r0, pc, r0, r7	; <UNPREDICTABLE>
     f40:	0002f4b6 			; <UNDEFINED> instruction: 0x0002f4b6
     f44:	5f100000 	svcpl	0x00100000
     f48:	b7070072 	smlsdxlt	r7, r2, r0, r0
     f4c:	00000089 	andeq	r0, r0, r9, lsl #1
     f50:	775f1004 	ldrbvc	r1, [pc, -r4]
     f54:	89b80700 	ldmibhi	r8!, {r8, r9, sl}
     f58:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     f5c:	000da10e 	andeq	sl, sp, lr, lsl #2
     f60:	3eb90700 	cdpcc	7, 11, cr0, cr9, cr0, {0}
     f64:	0c000000 	stceq	0, cr0, [r0], {-0}
     f68:	0008a40e 	andeq	sl, r8, lr, lsl #8
     f6c:	3eba0700 	cdpcc	7, 11, cr0, cr10, cr0, {0}
     f70:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     f74:	66625f10 	uqadd16vs	r5, r2, r0
     f78:	cfbb0700 	svcgt	0x00bb0700
     f7c:	10000002 	andne	r0, r0, r2
     f80:	00101d0e 	andseq	r1, r0, lr, lsl #26
     f84:	89bc0700 	ldmibhi	ip!, {r8, r9, sl}
     f88:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     f8c:	000a710e 	andeq	r7, sl, lr, lsl #2
     f90:	97c30700 	strbls	r0, [r3, r0, lsl #14]
     f94:	1c000000 	stcne	0, cr0, [r0], {-0}
     f98:	0007ac0e 	andeq	sl, r7, lr, lsl #24
     f9c:	91c50700 	bicls	r0, r5, r0, lsl #14
     fa0:	20000005 	andcs	r0, r0, r5
     fa4:	0007bc0e 	andeq	fp, r7, lr, lsl #24
     fa8:	bbc70700 	bllt	ff1c2bb0 <APBAHBPrescTable+0xdf1c142c>
     fac:	24000005 	strcs	r0, [r0], #-5
     fb0:	000e100e 	andeq	r1, lr, lr
     fb4:	dfca0700 	svcle	0x00ca0700
     fb8:	28000005 	stmdacs	r0, {r0, r2}
     fbc:	000a2e0e 	andeq	r2, sl, lr, lsl #28
     fc0:	f9cb0700 			; <UNDEFINED> instruction: 0xf9cb0700
     fc4:	2c000005 	stccs	0, cr0, [r0], {5}
     fc8:	62755f10 	rsbsvs	r5, r5, #16, 30	; 0x40
     fcc:	cfce0700 	svcgt	0x00ce0700
     fd0:	30000002 	andcc	r0, r0, r2
     fd4:	70755f10 	rsbsvc	r5, r5, r0, lsl pc
     fd8:	f4cf0700 	vst4.16	{d16[0],d17[0],d18[0],d19[0]}, [pc], r0
     fdc:	38000002 	stmdacc	r0, {r1}
     fe0:	72755f10 	rsbsvc	r5, r5, #16, 30	; 0x40
     fe4:	89d00700 	ldmibhi	r0, {r8, r9, sl}^
     fe8:	3c000000 	stccc	0, cr0, [r0], {-0}
     fec:	000d710e 	andeq	r7, sp, lr, lsl #2
     ff0:	ffd30700 			; <UNDEFINED> instruction: 0xffd30700
     ff4:	40000005 	andmi	r0, r0, r5
     ff8:	0007f60e 	andeq	pc, r7, lr, lsl #12
     ffc:	0fd40700 	svceq	0x00d40700
    1000:	43000006 	movwmi	r0, #6
    1004:	626c5f10 	rsbvs	r5, ip, #16, 30	; 0x40
    1008:	cfd70700 	svcgt	0x00d70700
    100c:	44000002 	strmi	r0, [r0], #-2
    1010:	000eb90e 	andeq	fp, lr, lr, lsl #18
    1014:	89da0700 	ldmibhi	sl, {r8, r9, sl}^
    1018:	4c000000 	stcmi	0, cr0, [r0], {-0}
    101c:	000a8f0e 	andeq	r8, sl, lr, lsl #30
    1020:	afdb0700 	svcge	0x00db0700
    1024:	50000000 	andpl	r0, r0, r0
    1028:	000f450e 	andeq	r4, pc, lr, lsl #10
    102c:	42de0700 	sbcsmi	r0, lr, #0, 14
    1030:	54000004 	strpl	r0, [r0], #-4
    1034:	000a7f0e 	andeq	r7, sl, lr, lsl #30
    1038:	2ce20700 	stclcs	7, cr0, [r2]
    103c:	58000001 	stmdapl	r0, {r0}
    1040:	000d8d0e 	andeq	r8, sp, lr, lsl #26
    1044:	21e40700 	mvncs	r0, r0, lsl #14
    1048:	5c000001 	stcpl	0, cr0, [r0], {1}
    104c:	000b660e 	andeq	r6, fp, lr, lsl #12
    1050:	89e50700 	stmibhi	r5!, {r8, r9, sl}^
    1054:	64000000 	strvs	r0, [r0], #-0
    1058:	00891400 	addeq	r1, r9, r0, lsl #8
    105c:	04420000 	strbeq	r0, [r2], #-0
    1060:	42150000 	andsmi	r0, r5, #0
    1064:	15000004 	strne	r0, [r0, #-4]
    1068:	00000097 	muleq	r0, r7, r0
    106c:	00057f15 	andeq	r7, r5, r5, lsl pc
    1070:	00891500 	addeq	r1, r9, r0, lsl #10
    1074:	06000000 	streq	r0, [r0], -r0
    1078:	00044d04 	andeq	r4, r4, r4, lsl #26
    107c:	04421600 	strbeq	r1, [r2], #-1536	; 0xfffffa00
    1080:	e7170000 	ldr	r0, [r7, -r0]
    1084:	28000009 	stmdacs	r0, {r0, r3}
    1088:	02390704 	eorseq	r0, r9, #4, 14	; 0x100000
    108c:	0000057f 	andeq	r0, r0, pc, ror r5
    1090:	000d3f18 	andeq	r3, sp, r8, lsl pc
    1094:	023b0700 	eorseq	r0, fp, #0, 14
    1098:	00000089 	andeq	r0, r0, r9, lsl #1
    109c:	0a4e1800 	beq	13870a4 <startup-0x1ec78f5c>
    10a0:	40070000 	andmi	r0, r7, r0
    10a4:	00066602 	andeq	r6, r6, r2, lsl #12
    10a8:	a5180400 	ldrge	r0, [r8, #-1024]	; 0xfffffc00
    10ac:	0700000e 	streq	r0, [r0, -lr]
    10b0:	06660240 	strbteq	r0, [r6], -r0, asr #4
    10b4:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    10b8:	00000d77 	andeq	r0, r0, r7, ror sp
    10bc:	66024007 	strvs	r4, [r2], -r7
    10c0:	0c000006 	stceq	0, cr0, [r0], {6}
    10c4:	00102618 	andseq	r2, r0, r8, lsl r6
    10c8:	02420700 	subeq	r0, r2, #0, 14
    10cc:	00000089 	andeq	r0, r0, r9, lsl #1
    10d0:	0c781810 	ldcleq	8, cr1, [r8], #-64	; 0xffffffc0
    10d4:	43070000 	movwmi	r0, #28672	; 0x7000
    10d8:	00084802 	andeq	r4, r8, r2, lsl #16
    10dc:	c1181400 	tstgt	r8, r0, lsl #8
    10e0:	07000009 	streq	r0, [r0, -r9]
    10e4:	00890246 	addeq	r0, r9, r6, asr #4
    10e8:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    10ec:	00001067 	andeq	r1, r0, r7, rrx
    10f0:	5d024707 	stcpl	7, cr4, [r2, #-28]	; 0xffffffe4
    10f4:	34000008 	strcc	r0, [r0], #-8
    10f8:	000b5b18 	andeq	r5, fp, r8, lsl fp
    10fc:	02490700 	subeq	r0, r9, #0, 14
    1100:	00000089 	andeq	r0, r0, r9, lsl #1
    1104:	0c331838 	ldceq	8, cr1, [r3], #-224	; 0xffffff20
    1108:	4b070000 	blmi	1c1110 <startup-0x1fe3eef0>
    110c:	00086e02 	andeq	r6, r8, r2, lsl #28
    1110:	77183c00 	ldrvc	r3, [r8, -r0, lsl #24]
    1114:	07000010 	smladeq	r0, r0, r0, r0
    1118:	0195024e 	orrseq	r0, r5, lr, asr #4
    111c:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    1120:	000008d6 	ldrdeq	r0, [r0], -r6
    1124:	89024f07 	stmdbhi	r2, {r0, r1, r2, r8, r9, sl, fp, lr}
    1128:	44000000 	strmi	r0, [r0], #-0
    112c:	000b3818 	andeq	r3, fp, r8, lsl r8
    1130:	02500700 	subseq	r0, r0, #0, 14
    1134:	00000195 	muleq	r0, r5, r1
    1138:	0ce91848 	stcleq	8, cr1, [r9], #288	; 0x120
    113c:	51070000 	mrspl	r0, (UNDEF: 7)
    1140:	00087402 	andeq	r7, r8, r2, lsl #8
    1144:	d0184c00 	andsle	r4, r8, r0, lsl #24
    1148:	07000007 	streq	r0, [r0, -r7]
    114c:	00890254 	addeq	r0, r9, r4, asr r2
    1150:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    1154:	00000a97 	muleq	r0, r7, sl
    1158:	7f025507 	svcvc	0x00025507
    115c:	54000005 	strpl	r0, [r0], #-5
    1160:	000d6c18 	andeq	r6, sp, r8, lsl ip
    1164:	02780700 	rsbseq	r0, r8, #0, 14
    1168:	00000826 	andeq	r0, r0, r6, lsr #16
    116c:	0dba1958 			; <UNDEFINED> instruction: 0x0dba1958
    1170:	7c070000 	stcvc	0, cr0, [r7], {-0}
    1174:	0002b202 	andeq	fp, r2, r2, lsl #4
    1178:	19014800 	stmdbne	r1, {fp, lr}
    117c:	00000c51 	andeq	r0, r0, r1, asr ip
    1180:	74027d07 	strvc	r7, [r2], #-3335	; 0xfffff2f9
    1184:	4c000002 	stcmi	0, cr0, [r0], {2}
    1188:	0a851901 	beq	fe147594 <APBAHBPrescTable+0xde145e10>
    118c:	81070000 	mrshi	r0, (UNDEF: 7)
    1190:	00088502 	andeq	r8, r8, r2, lsl #10
    1194:	1902dc00 	stmdbne	r2, {sl, fp, ip, lr, pc}
    1198:	00000cbd 			; <UNDEFINED> instruction: 0x00000cbd
    119c:	2b028607 	blcs	a29c0 <startup-0x1ff5d640>
    11a0:	e0000006 	and	r0, r0, r6
    11a4:	07a71902 	streq	r1, [r7, r2, lsl #18]!
    11a8:	88070000 	stmdahi	r7, {}	; <UNPREDICTABLE>
    11ac:	00089102 	andeq	r9, r8, r2, lsl #2
    11b0:	0002ec00 	andeq	lr, r2, r0, lsl #24
    11b4:	05850406 	streq	r0, [r5, #1030]	; 0x406
    11b8:	01020000 	mrseq	r0, (UNDEF: 2)
    11bc:	0001c708 	andeq	ip, r1, r8, lsl #14
    11c0:	05851600 	streq	r1, [r5, #1536]	; 0x600
    11c4:	04060000 	streq	r0, [r6], #-0
    11c8:	00000424 	andeq	r0, r0, r4, lsr #8
    11cc:	00008914 	andeq	r8, r0, r4, lsl r9
    11d0:	0005b500 	andeq	fp, r5, r0, lsl #10
    11d4:	04421500 	strbeq	r1, [r2], #-1280	; 0xfffffb00
    11d8:	97150000 	ldrls	r0, [r5, -r0]
    11dc:	15000000 	strne	r0, [r0, #-0]
    11e0:	000005b5 			; <UNDEFINED> instruction: 0x000005b5
    11e4:	00008915 	andeq	r8, r0, r5, lsl r9
    11e8:	04060000 	streq	r0, [r6], #-0
    11ec:	0000058c 	andeq	r0, r0, ip, lsl #11
    11f0:	05970406 	ldreq	r0, [r7, #1030]	; 0x406
    11f4:	ba140000 	blt	5011fc <startup-0x1fafee04>
    11f8:	df000000 	svcle	0x00000000
    11fc:	15000005 	strne	r0, [r0, #-5]
    1200:	00000442 	andeq	r0, r0, r2, asr #8
    1204:	00009715 	andeq	r9, r0, r5, lsl r7
    1208:	00ba1500 	adcseq	r1, sl, r0, lsl #10
    120c:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    1210:	00000000 	andeq	r0, r0, r0
    1214:	05c10406 	strbeq	r0, [r1, #1030]	; 0x406
    1218:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
    121c:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    1220:	15000005 	strne	r0, [r0, #-5]
    1224:	00000442 	andeq	r0, r0, r2, asr #8
    1228:	00009715 	andeq	r9, r0, r5, lsl r7
    122c:	04060000 	streq	r0, [r6], #-0
    1230:	000005e5 	andeq	r0, r0, r5, ror #11
    1234:	0000370b 	andeq	r3, r0, fp, lsl #14
    1238:	00060f00 	andeq	r0, r6, r0, lsl #30
    123c:	00900c00 	addseq	r0, r0, r0, lsl #24
    1240:	00020000 	andeq	r0, r2, r0
    1244:	0000370b 	andeq	r3, r0, fp, lsl #14
    1248:	00061f00 	andeq	r1, r6, r0, lsl #30
    124c:	00900c00 	addseq	r0, r0, r0, lsl #24
    1250:	00000000 	andeq	r0, r0, r0
    1254:	000f0908 	andeq	r0, pc, r8, lsl #18
    1258:	011f0700 	tsteq	pc, r0, lsl #14
    125c:	000002fa 	strdeq	r0, [r0], -sl
    1260:	000cf91a 	andeq	pc, ip, sl, lsl r9	; <UNPREDICTABLE>
    1264:	23070c00 	movwcs	r0, #31744	; 0x7c00
    1268:	00066001 	andeq	r6, r6, r1
    126c:	0d9b1800 	ldceq	8, cr1, [fp]
    1270:	25070000 	strcs	r0, [r7, #-0]
    1274:	00066001 	andeq	r6, r6, r1
    1278:	ac180000 	ldcge	0, cr0, [r8], {-0}
    127c:	0700000c 	streq	r0, [r0, -ip]
    1280:	00890126 	addeq	r0, r9, r6, lsr #2
    1284:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    1288:	00000cf3 	strdeq	r0, [r0], -r3
    128c:	66012707 	strvs	r2, [r1], -r7, lsl #14
    1290:	08000006 	stmdaeq	r0, {r1, r2}
    1294:	2b040600 	blcs	102a9c <startup-0x1fefd564>
    1298:	06000006 	streq	r0, [r0], -r6
    129c:	00061f04 	andeq	r1, r6, r4, lsl #30
    12a0:	0e931a00 	vfnmseq.f32	s2, s6, s0
    12a4:	070e0000 	streq	r0, [lr, -r0]
    12a8:	06a1013f 			; <UNDEFINED> instruction: 0x06a1013f
    12ac:	0a180000 	beq	6012b4 <startup-0x1f9fed4c>
    12b0:	0700000e 	streq	r0, [r0, -lr]
    12b4:	06a10140 	strteq	r0, [r1], r0, asr #2
    12b8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    12bc:	00000840 	andeq	r0, r0, r0, asr #16
    12c0:	a1014107 	tstge	r1, r7, lsl #2
    12c4:	06000006 	streq	r0, [r0], -r6
    12c8:	0010a118 	andseq	sl, r0, r8, lsl r1
    12cc:	01420700 	cmpeq	r2, r0, lsl #14
    12d0:	00000050 	andeq	r0, r0, r0, asr r0
    12d4:	500b000c 	andpl	r0, fp, ip
    12d8:	b1000000 	mrslt	r0, (UNDEF: 0)
    12dc:	0c000006 	stceq	0, cr0, [r0], {6}
    12e0:	00000090 	muleq	r0, r0, r0
    12e4:	d01b0002 	andsle	r0, fp, r2
    12e8:	b2025907 	andlt	r5, r2, #114688	; 0x1c000
    12ec:	18000007 	stmdane	r0, {r0, r1, r2}
    12f0:	00000976 	andeq	r0, r0, r6, ror r9
    12f4:	90025b07 	andls	r5, r2, r7, lsl #22
    12f8:	00000000 	andeq	r0, r0, r0
    12fc:	000ed618 	andeq	sp, lr, r8, lsl r6
    1300:	025c0700 	subseq	r0, ip, #0, 14
    1304:	0000057f 	andeq	r0, r0, pc, ror r5
    1308:	07c31804 	strbeq	r1, [r3, r4, lsl #16]
    130c:	5d070000 	stcpl	0, cr0, [r7, #-0]
    1310:	0007b202 	andeq	fp, r7, r2, lsl #4
    1314:	f6180800 			; <UNDEFINED> instruction: 0xf6180800
    1318:	07000008 	streq	r0, [r0, -r8]
    131c:	01ab025e 			; <UNDEFINED> instruction: 0x01ab025e
    1320:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
    1324:	00000cda 	ldrdeq	r0, [r0], -sl
    1328:	89025f07 	stmdbhi	r2, {r0, r1, r2, r8, r9, sl, fp, ip, lr}
    132c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    1330:	000d9618 	andeq	r9, sp, r8, lsl r6
    1334:	02600700 	rsbeq	r0, r0, #0, 14
    1338:	00000082 	andeq	r0, r0, r2, lsl #1
    133c:	0f1b1850 	svceq	0x001b1850
    1340:	61070000 	mrsvs	r0, (UNDEF: 7)
    1344:	00066c02 	andeq	r6, r6, r2, lsl #24
    1348:	b1185800 	tstlt	r8, r0, lsl #16
    134c:	0700000f 	streq	r0, [r0, -pc]
    1350:	01210262 			; <UNDEFINED> instruction: 0x01210262
    1354:	18680000 	stmdane	r8!, {}^	; <UNPREDICTABLE>
    1358:	00000e53 	andeq	r0, r0, r3, asr lr
    135c:	21026307 	tstcs	r2, r7, lsl #6
    1360:	70000001 	andvc	r0, r0, r1
    1364:	000d7f18 	andeq	r7, sp, r8, lsl pc
    1368:	02640700 	rsbeq	r0, r4, #0, 14
    136c:	00000121 	andeq	r0, r0, r1, lsr #2
    1370:	08171878 	ldmdaeq	r7, {r3, r4, r5, r6, fp, ip}
    1374:	65070000 	strvs	r0, [r7, #-0]
    1378:	0007c202 	andeq	ip, r7, r2, lsl #4
    137c:	f4188000 			; <UNDEFINED> instruction: 0xf4188000
    1380:	0700000b 	streq	r0, [r0, -fp]
    1384:	07d20266 	ldrbeq	r0, [r2, r6, ror #4]
    1388:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
    138c:	00001145 	andeq	r1, r0, r5, asr #2
    1390:	89026707 	stmdbhi	r2, {r0, r1, r2, r8, r9, sl, sp, lr}
    1394:	a0000000 	andge	r0, r0, r0
    1398:	0008c818 	andeq	ip, r8, r8, lsl r8
    139c:	02680700 	rsbeq	r0, r8, #0, 14
    13a0:	00000121 	andeq	r0, r0, r1, lsr #2
    13a4:	0eec18a4 	cdpeq	8, 14, cr1, cr12, cr4, {5}
    13a8:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
    13ac:	00012102 	andeq	r2, r1, r2, lsl #2
    13b0:	ee18ac00 	cdp	12, 1, cr10, cr8, cr0, {0}
    13b4:	07000010 	smladeq	r0, r0, r0, r0
    13b8:	0121026a 			; <UNDEFINED> instruction: 0x0121026a
    13bc:	18b40000 	ldmne	r4!, {}	; <UNPREDICTABLE>
    13c0:	00000d53 	andeq	r0, r0, r3, asr sp
    13c4:	21026b07 	tstcs	r2, r7, lsl #22
    13c8:	bc000001 	stclt	0, cr0, [r0], {1}
    13cc:	0007e518 	andeq	lr, r7, r8, lsl r5
    13d0:	026c0700 	rsbeq	r0, ip, #0, 14
    13d4:	00000121 	andeq	r0, r0, r1, lsr #2
    13d8:	0d3d18c4 	ldceq	8, cr1, [sp, #-784]!	; 0xfffffcf0
    13dc:	6d070000 	stcvs	0, cr0, [r7, #-0]
    13e0:	00008902 	andeq	r8, r0, r2, lsl #18
    13e4:	0b00cc00 	bleq	343ec <startup-0x1ffcbc14>
    13e8:	00000585 	andeq	r0, r0, r5, lsl #11
    13ec:	000007c2 	andeq	r0, r0, r2, asr #15
    13f0:	0000900c 	andeq	r9, r0, ip
    13f4:	0b001900 	bleq	77fc <startup-0x1fff8804>
    13f8:	00000585 	andeq	r0, r0, r5, lsl #11
    13fc:	000007d2 	ldrdeq	r0, [r0], -r2
    1400:	0000900c 	andeq	r9, r0, ip
    1404:	0b000700 	bleq	300c <startup-0x1fffcff4>
    1408:	00000585 	andeq	r0, r0, r5, lsl #11
    140c:	000007e2 	andeq	r0, r0, r2, ror #15
    1410:	0000900c 	andeq	r9, r0, ip
    1414:	1b001700 	blne	701c <startup-0x1fff8fe4>
    1418:	027207f0 	rsbseq	r0, r2, #240, 14	; 0x3c00000
    141c:	00000806 	andeq	r0, r0, r6, lsl #16
    1420:	00104c18 	andseq	r4, r0, r8, lsl ip
    1424:	02750700 	rsbseq	r0, r5, #0, 14
    1428:	00000806 	andeq	r0, r0, r6, lsl #16
    142c:	0cc51800 	stcleq	8, cr1, [r5], {0}
    1430:	76070000 	strvc	r0, [r7], -r0
    1434:	00081602 	andeq	r1, r8, r2, lsl #12
    1438:	0b007800 	bleq	1f440 <startup-0x1ffe0bc0>
    143c:	000002f4 	strdeq	r0, [r0], -r4
    1440:	00000816 	andeq	r0, r0, r6, lsl r8
    1444:	0000900c 	andeq	r9, r0, ip
    1448:	0b001d00 	bleq	8850 <startup-0x1fff77b0>
    144c:	00000090 	muleq	r0, r0, r0
    1450:	00000826 	andeq	r0, r0, r6, lsr #16
    1454:	0000900c 	andeq	r9, r0, ip
    1458:	1c001d00 	stcne	13, cr1, [r0], {-0}
    145c:	025707f0 	subseq	r0, r7, #240, 14	; 0x3c00000
    1460:	00000848 	andeq	r0, r0, r8, asr #16
    1464:	0009e71d 	andeq	lr, r9, sp, lsl r7
    1468:	026e0700 	rsbeq	r0, lr, #0, 14
    146c:	000006b1 			; <UNDEFINED> instruction: 0x000006b1
    1470:	0007d81d 	andeq	sp, r7, sp, lsl r8
    1474:	02770700 	rsbseq	r0, r7, #0, 14
    1478:	000007e2 	andeq	r0, r0, r2, ror #15
    147c:	05850b00 	streq	r0, [r5, #2816]	; 0xb00
    1480:	08580000 	ldmdaeq	r8, {}^	; <UNPREDICTABLE>
    1484:	900c0000 	andls	r0, ip, r0
    1488:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    148c:	07940700 	ldreq	r0, [r4, r0, lsl #14]
    1490:	04060000 	streq	r0, [r6], #-0
    1494:	00000858 	andeq	r0, r0, r8, asr r8
    1498:	00086e1e 	andeq	r6, r8, lr, lsl lr
    149c:	04421500 	strbeq	r1, [r2], #-1280	; 0xfffffb00
    14a0:	06000000 	streq	r0, [r0], -r0
    14a4:	00086304 	andeq	r6, r8, r4, lsl #6
    14a8:	95040600 	strls	r0, [r4, #-1536]	; 0xfffffa00
    14ac:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    14b0:	00000885 	andeq	r0, r0, r5, lsl #17
    14b4:	00008915 	andeq	r8, r0, r5, lsl r9
    14b8:	04060000 	streq	r0, [r6], #-0
    14bc:	0000088b 	andeq	r0, r0, fp, lsl #17
    14c0:	087a0406 	ldmdaeq	sl!, {r1, r2, sl}^
    14c4:	1f0b0000 	svcne	0x000b0000
    14c8:	a1000006 	tstge	r0, r6
    14cc:	0c000008 	stceq	0, cr0, [r0], {8}
    14d0:	00000090 	muleq	r0, r0, r0
    14d4:	f51f0002 			; <UNDEFINED> instruction: 0xf51f0002
    14d8:	07000009 	streq	r0, [r0, -r9]
    14dc:	04420307 	strbeq	r0, [r2], #-775	; 0xfffffcf9
    14e0:	ee1f0000 	cdp	0, 1, cr0, cr15, cr0, {0}
    14e4:	07000009 	streq	r0, [r0, -r9]
    14e8:	04480308 	strbeq	r0, [r8], #-776	; 0xfffffcf8
    14ec:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
    14f0:	08000001 	stmdaeq	r0, {r0}
    14f4:	00002c18 	andeq	r2, r0, r8, lsl ip
    14f8:	08b92000 	ldmeq	r9!, {sp}
    14fc:	ab030000 	blge	c1504 <startup-0x1ff3eafc>
    1500:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1504:	00004524 	andeq	r4, r0, r4, lsr #10
    1508:	08c92000 	stmiaeq	r9, {sp}^
    150c:	df030000 	svcle	0x00030000
    1510:	08000002 	stmdaeq	r0, {r1}
    1514:	0000572c 	andeq	r5, r0, ip, lsr #14
    1518:	08d92000 	ldmeq	r9, {sp}^
    151c:	a0030000 	andge	r0, r3, r0
    1520:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1524:	00006930 	andeq	r6, r0, r0, lsr r9
    1528:	08e92000 	stmiaeq	r9!, {sp}^
    152c:	f4160000 			; <UNDEFINED> instruction: 0xf4160000
    1530:	21000008 	tstcs	r0, r8
    1534:	00001018 	andeq	r1, r0, r8, lsl r0
    1538:	00250105 	eoreq	r0, r5, r5, lsl #2
    153c:	c8090000 	stmdagt	r9, {}	; <UNPREDICTABLE>
    1540:	00000b2c 	andeq	r0, r0, ip, lsr #22
    1544:	000b1a22 	andeq	r1, fp, r2, lsr #20
    1548:	3d227200 	sfmcc	f7, 4, [r2, #-0]
    154c:	7400000b 	strvc	r0, [r0], #-11
    1550:	000c3d22 	andeq	r3, ip, r2, lsr #26
    1554:	19227500 	stmdbne	r2!, {r8, sl, ip, sp, lr}
    1558:	7600000a 	strvc	r0, [r0], -sl
    155c:	000cce22 	andeq	ip, ip, r2, lsr #28
    1560:	89227b00 	stmdbhi	r2!, {r8, r9, fp, ip, sp, lr}
    1564:	7c00000f 	stcvc	0, cr0, [r0], {15}
    1568:	0010e222 	andseq	lr, r0, r2, lsr #4
    156c:	5d227e00 	stcpl	14, cr7, [r2, #-0]
    1570:	7f000009 	svcvc	0x00000009
    1574:	000b2e23 	andeq	r2, fp, r3, lsr #28
    1578:	2f230000 	svccs	0x00230000
    157c:	0100000f 	tsteq	r0, pc
    1580:	000bb523 	andeq	fp, fp, r3, lsr #10
    1584:	56230200 	strtpl	r0, [r3], -r0, lsl #4
    1588:	03000007 	movweq	r0, #7
    158c:	00082b23 	andeq	r2, r8, r3, lsr #22
    1590:	c7230400 	strgt	r0, [r3, -r0, lsl #8]!
    1594:	0500000f 	streq	r0, [r0, #-15]
    1598:	000f5523 	andeq	r5, pc, r3, lsr #10
    159c:	ba230600 	blt	8c2da4 <startup-0x1f73d25c>
    15a0:	0700000a 	streq	r0, [r0, -sl]
    15a4:	00076423 	andeq	r6, r7, r3, lsr #8
    15a8:	d7230800 	strle	r0, [r3, -r0, lsl #16]!
    15ac:	09000010 	stmdbeq	r0, {r4}
    15b0:	0010a623 	andseq	sl, r0, r3, lsr #12
    15b4:	16230a00 	strtne	r0, [r3], -r0, lsl #20
    15b8:	0b00000e 	bleq	15f8 <startup-0x1fffea08>
    15bc:	000da823 	andeq	sl, sp, r3, lsr #16
    15c0:	98230c00 	stmdals	r3!, {sl, fp}
    15c4:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    15c8:	000fe223 	andeq	lr, pc, r3, lsr #4
    15cc:	60230e00 	eorvs	r0, r3, r0, lsl #28
    15d0:	0f00000f 	svceq	0x0000000f
    15d4:	000ad223 	andeq	sp, sl, r3, lsr #4
    15d8:	6f231000 	svcvs	0x00231000
    15dc:	11000007 	tstne	r0, r7
    15e0:	000ee323 	andeq	lr, lr, r3, lsr #6
    15e4:	c5231200 	strgt	r1, [r3, #-512]!	; 0xfffffe00
    15e8:	1300000a 	movwne	r0, #10
    15ec:	000a4023 	andeq	r4, sl, r3, lsr #32
    15f0:	7f231400 	svcvc	0x00231400
    15f4:	15000010 	strne	r0, [r0, #-16]
    15f8:	000bc523 	andeq	ip, fp, r3, lsr #10
    15fc:	8d231600 	stchi	6, cr1, [r3, #-0]
    1600:	17000010 	smladne	r0, r0, r0, r0
    1604:	000c6523 	andeq	r6, ip, r3, lsr #10
    1608:	0a231800 	beq	8c7610 <startup-0x1f7389f0>
    160c:	19000010 	stmdbne	r0, {r4}
    1610:	00091723 	andeq	r1, r9, r3, lsr #14
    1614:	9f231a00 	svcls	0x00231a00
    1618:	1b00000a 	blne	1648 <startup-0x1fffe9b8>
    161c:	00084623 	andeq	r4, r8, r3, lsr #12
    1620:	9b231c00 	blls	8c8628 <startup-0x1f7379d8>
    1624:	1d00000e 	stcne	0, cr0, [r0, #-56]	; 0xffffffc8
    1628:	000a5523 	andeq	r5, sl, r3, lsr #10
    162c:	64231e00 	strtvs	r1, [r3], #-3584	; 0xfffff200
    1630:	1f00000a 	svcne	0x0000000a
    1634:	0009da23 	andeq	sp, r9, r3, lsr #20
    1638:	46232000 	strtmi	r2, [r3], -r0
    163c:	2100000d 	tstcs	r0, sp
    1640:	000c0023 	andeq	r0, ip, r3, lsr #32
    1644:	b3232200 			; <UNDEFINED> instruction: 0xb3232200
    1648:	2300000c 	movwcs	r0, #12
    164c:	00088623 	andeq	r8, r8, r3, lsr #12
    1650:	ad232400 	cfstrsge	mvf2, [r3, #-0]
    1654:	2500000e 	strcs	r0, [r0, #-14]
    1658:	000ff423 	andeq	pc, pc, r3, lsr #8
    165c:	6a232600 	bvs	8cae64 <startup-0x1f73519c>
    1660:	27000009 	strcs	r0, [r0, -r9]
    1664:	000e7823 	andeq	r7, lr, r3, lsr #16
    1668:	44232800 	strtmi	r2, [r3], #-2048	; 0xfffff800
    166c:	2900000e 	stmdbcs	r0, {r1, r2, r3}
    1670:	000d1923 	andeq	r1, sp, r3, lsr #18
    1674:	90232a00 	eorls	r2, r3, r0, lsl #20
    1678:	2b000008 	blcs	16a0 <startup-0x1fffe960>
    167c:	00078123 	andeq	r8, r7, r3, lsr #2
    1680:	e4232c00 	strt	r2, [r3], #-3072	; 0xfffff400
    1684:	2d00000a 	stccs	0, cr0, [r0, #-40]	; 0xffffffd8
    1688:	0010bb23 	andseq	fp, r0, r3, lsr #22
    168c:	12232e00 	eorne	r2, r3, #0, 28
    1690:	2f000011 	svccs	0x00000011
    1694:	000f4b23 	andeq	r4, pc, r3, lsr #22
    1698:	c8233000 	stmdagt	r3!, {ip, sp}
    169c:	31000010 	tstcc	r0, r0, lsl r0
    16a0:	000a0f23 	andeq	r0, sl, r3, lsr #30
    16a4:	21233200 			; <UNDEFINED> instruction: 0x21233200
    16a8:	33000008 	movwcc	r0, #8
    16ac:	000d0e23 	andeq	r0, sp, r3, lsr #28
    16b0:	5a233400 	bpl	8ce6b8 <startup-0x1f731948>
    16b4:	3500000c 	strcc	r0, [r0, #-12]
    16b8:	000d2f23 	andeq	r2, sp, r3, lsr #30
    16bc:	83233600 			; <UNDEFINED> instruction: 0x83233600
    16c0:	3700000c 	strcc	r0, [r0, -ip]
    16c4:	000bdd23 	andeq	sp, fp, r3, lsr #26
    16c8:	05233800 	streq	r3, [r3, #-2048]!	; 0xfffff800
    16cc:	39000008 	stmdbcc	r0, {r3}
    16d0:	00115223 	andseq	r5, r1, r3, lsr #4
    16d4:	c2233a00 	eorgt	r3, r3, #0, 20
    16d8:	3b00000d 	blcc	1714 <startup-0x1fffe8ec>
    16dc:	0009aa23 	andeq	sl, r9, r3, lsr #20
    16e0:	a8233c00 	stmdage	r3!, {sl, fp, ip, sp}
    16e4:	3d00000f 	stccc	0, cr0, [r0, #-60]	; 0xffffffc4
    16e8:	000c8d23 	andeq	r8, ip, r3, lsr #26
    16ec:	d4233e00 	strtle	r3, [r3], #-3584	; 0xfffff200
    16f0:	3f00000d 	svccc	0x0000000d
    16f4:	00085523 	andeq	r5, r8, r3, lsr #10
    16f8:	c8234000 	stmdagt	r3!, {lr}
    16fc:	4100000e 	tstmi	r0, lr
    1700:	000a0123 	andeq	r0, sl, r3, lsr #2
    1704:	0e234200 	cdpeq	2, 2, cr4, cr3, cr0, {0}
    1708:	4300000b 	movwmi	r0, #11
    170c:	00090523 	andeq	r0, r9, r3, lsr #10
    1710:	72234400 	eorvc	r4, r3, #0, 8
    1714:	4500000f 	strmi	r0, [r0, #-15]
    1718:	000afc23 	andeq	pc, sl, r3, lsr #24
    171c:	63234600 			; <UNDEFINED> instruction: 0x63234600
    1720:	47000008 	strmi	r0, [r0, -r8]
    1724:	000f9b23 	andeq	r9, pc, r3, lsr #22
    1728:	61234800 			; <UNDEFINED> instruction: 0x61234800
    172c:	4900000e 	stmdbmi	r0, {r1, r2, r3}
    1730:	00105323 	andseq	r5, r0, r3, lsr #6
    1734:	ff234a00 			; <UNDEFINED> instruction: 0xff234a00
    1738:	4b000010 	blmi	1780 <startup-0x1fffe880>
    173c:	00087523 	andeq	r7, r8, r3, lsr #10
    1740:	a0234c00 	eorge	r4, r3, r0, lsl #24
    1744:	4d00000c 	stcmi	0, cr0, [r0, #-48]	; 0xffffffd0
    1748:	00083623 	andeq	r3, r8, r3, lsr #12
    174c:	6e234e00 	cdpvs	14, 2, cr4, cr3, cr0, {0}
    1750:	4f00000e 	svcmi	0x0000000e
    1754:	000aac23 	andeq	sl, sl, r3, lsr #24
    1758:	ff235000 			; <UNDEFINED> instruction: 0xff235000
    175c:	5100000c 	tstpl	r0, ip
    1760:	0bd30800 	bleq	ff4c3768 <APBAHBPrescTable+0xdf4c1fe4>
    1764:	2f090000 	svccs	0x00090000
    1768:	0008fe03 	andeq	pc, r8, r3, lsl #28
    176c:	0e042400 	cfcpyseq	mvf2, mvf4
    1770:	f401a002 	vst4.8	{d10-d13}, [r1], r2
    1774:	1800000b 	stmdane	r0, {r0, r1, r3}
    1778:	00001124 	andeq	r1, r0, r4, lsr #2
    177c:	0401a202 	streq	sl, [r1], #-514	; 0xfffffdfe
    1780:	0000000c 	andeq	r0, r0, ip
    1784:	00052618 	andeq	r2, r5, r8, lsl r6
    1788:	01a30200 			; <UNDEFINED> instruction: 0x01a30200
    178c:	00000c09 	andeq	r0, r0, r9, lsl #24
    1790:	0efb1820 	cdpeq	8, 15, cr1, cr11, cr0, {1}
    1794:	a4020000 	strge	r0, [r2], #-0
    1798:	000c0401 	andeq	r0, ip, r1, lsl #8
    179c:	4d188000 	ldcmi	0, cr8, [r8, #-0]
    17a0:	02000007 	andeq	r0, r0, #7
    17a4:	0c0901a5 	stfeqs	f0, [r9], {165}	; 0xa5
    17a8:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
    17ac:	000010d2 	ldrdeq	r1, [r0], -r2
    17b0:	0401a602 	streq	sl, [r1], #-1538	; 0xfffff9fe
    17b4:	0000000c 	andeq	r0, r0, ip
    17b8:	06b91901 	ldrteq	r1, [r9], r1, lsl #18
    17bc:	a7020000 	strge	r0, [r2, -r0]
    17c0:	000c0901 	andeq	r0, ip, r1, lsl #18
    17c4:	19012000 	stmdbne	r1, {sp}
    17c8:	00000850 	andeq	r0, r0, r0, asr r8
    17cc:	0401a802 	streq	sl, [r1], #-2050	; 0xfffff7fe
    17d0:	8000000c 	andhi	r0, r0, ip
    17d4:	053a1901 	ldreq	r1, [sl, #-2305]!	; 0xfffff6ff
    17d8:	a9020000 	stmdbge	r2, {}	; <UNPREDICTABLE>
    17dc:	000c0901 	andeq	r0, ip, r1, lsl #18
    17e0:	1901a000 	stmdbne	r1, {sp, pc}
    17e4:	000009bc 			; <UNDEFINED> instruction: 0x000009bc
    17e8:	0401aa02 	streq	sl, [r1], #-2562	; 0xfffff5fe
    17ec:	0000000c 	andeq	r0, r0, ip
    17f0:	06cf1902 	strbeq	r1, [pc], r2, lsl #18
    17f4:	ab020000 	blge	817fc <startup-0x1ff7e804>
    17f8:	000c1901 	andeq	r1, ip, r1, lsl #18
    17fc:	25022000 	strcs	r2, [r2, #-0]
    1800:	02005049 	andeq	r5, r0, #73	; 0x49
    1804:	0c3901ac 	ldfeqs	f0, [r9], #-688	; 0xfffffd50
    1808:	03000000 	movweq	r0, #0
    180c:	0006d919 	andeq	sp, r6, r9, lsl r9
    1810:	01ad0200 			; <UNDEFINED> instruction: 0x01ad0200
    1814:	00000c3e 	andeq	r0, r0, lr, lsr ip
    1818:	5f1903f0 	svcpl	0x001903f0
    181c:	0200000a 	andeq	r0, r0, #10
    1820:	08f401ae 	ldmeq	r4!, {r1, r2, r3, r5, r7, r8}^
    1824:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1828:	08f40b00 	ldmeq	r4!, {r8, r9, fp}^
    182c:	0c040000 	stceq	0, cr0, [r4], {-0}
    1830:	900c0000 	andls	r0, ip, r0
    1834:	07000000 	streq	r0, [r0, -r0]
    1838:	0bf42000 	bleq	ffd09840 <APBAHBPrescTable+0xdfd080bc>
    183c:	e90b0000 	stmdb	fp, {}	; <UNPREDICTABLE>
    1840:	19000008 	stmdbne	r0, {r3}
    1844:	0c00000c 	stceq	0, cr0, [r0], {12}
    1848:	00000090 	muleq	r0, r0, r0
    184c:	e90b0017 	stmdb	fp, {r0, r1, r2, r4}
    1850:	29000008 	stmdbcs	r0, {r3}
    1854:	0c00000c 	stceq	0, cr0, [r0], {12}
    1858:	00000090 	muleq	r0, r0, r0
    185c:	c40b0037 	strgt	r0, [fp], #-55	; 0xffffffc9
    1860:	39000008 	stmdbcc	r0, {r3}
    1864:	0c00000c 	stceq	0, cr0, [r0], {12}
    1868:	00000090 	muleq	r0, r0, r0
    186c:	292000ef 	stmdbcs	r0!, {r0, r1, r2, r3, r5, r6, r7}
    1870:	0b00000c 	bleq	18a8 <startup-0x1fffe758>
    1874:	000008e9 	andeq	r0, r0, r9, ror #17
    1878:	00000c4f 	andeq	r0, r0, pc, asr #24
    187c:	00009026 	andeq	r9, r0, r6, lsr #32
    1880:	00028300 	andeq	r8, r2, r0, lsl #6
    1884:	0007b208 	andeq	fp, r7, r8, lsl #4
    1888:	01af0200 			; <UNDEFINED> instruction: 0x01af0200
    188c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1890:	c0028c1b 	andgt	r8, r2, fp, lsl ip
    1894:	000d7601 	andeq	r7, sp, r1, lsl #12
    1898:	05201800 	streq	r1, [r0, #-2048]!	; 0xfffff800
    189c:	c2020000 	andgt	r0, r2, #0
    18a0:	0008f901 	andeq	pc, r8, r1, lsl #18
    18a4:	eb180000 	bl	6018ac <startup-0x1f9fe754>
    18a8:	02000004 	andeq	r0, r0, #4
    18ac:	08f401c3 	ldmeq	r4!, {r0, r1, r6, r7, r8}^
    18b0:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    18b4:	0000068c 	andeq	r0, r0, ip, lsl #13
    18b8:	f401c402 	vst3.8	{d12-d14}, [r1], r2
    18bc:	08000008 	stmdaeq	r0, {r3}
    18c0:	00062b18 	andeq	r2, r6, r8, lsl fp
    18c4:	01c50200 	biceq	r0, r5, r0, lsl #4
    18c8:	000008f4 	strdeq	r0, [r0], -r4
    18cc:	4353270c 	cmpmi	r3, #12, 14	; 0x300000
    18d0:	c6020052 			; <UNDEFINED> instruction: 0xc6020052
    18d4:	0008f401 	andeq	pc, r8, r1, lsl #8
    18d8:	43271000 			; <UNDEFINED> instruction: 0x43271000
    18dc:	02005243 	andeq	r5, r0, #805306372	; 0x30000004
    18e0:	08f401c7 	ldmeq	r4!, {r0, r1, r2, r6, r7, r8}^
    18e4:	27140000 	ldrcs	r0, [r4, -r0]
    18e8:	00504853 	subseq	r4, r0, r3, asr r8
    18ec:	8601c802 	strhi	ip, [r1], -r2, lsl #16
    18f0:	1800000d 	stmdane	r0, {r0, r2, r3}
    18f4:	00065118 	andeq	r5, r6, r8, lsl r1
    18f8:	01c90200 	biceq	r0, r9, r0, lsl #4
    18fc:	000008f4 	strdeq	r0, [r0], -r4
    1900:	06091824 	streq	r1, [r9], -r4, lsr #16
    1904:	ca020000 	bgt	8190c <startup-0x1ff7e6f4>
    1908:	0008f401 	andeq	pc, r8, r1, lsl #8
    190c:	9b182800 	blls	60b914 <startup-0x1f9f46ec>
    1910:	02000006 	andeq	r0, r0, #6
    1914:	08f401cb 	ldmeq	r4!, {r0, r1, r3, r6, r7, r8}^
    1918:	182c0000 	stmdane	ip!, {}	; <UNPREDICTABLE>
    191c:	00000696 	muleq	r0, r6, r6
    1920:	f401cc02 			; <UNDEFINED> instruction: 0xf401cc02
    1924:	30000008 	andcc	r0, r0, r8
    1928:	00066d18 	andeq	r6, r6, r8, lsl sp
    192c:	01cd0200 	biceq	r0, sp, r0, lsl #4
    1930:	000008f4 	strdeq	r0, [r0], -r4
    1934:	05e61834 	strbeq	r1, [r6, #2100]!	; 0x834
    1938:	ce020000 	cdpgt	0, 0, cr0, cr2, cr0, {0}
    193c:	0008f401 	andeq	pc, r8, r1, lsl #8
    1940:	09183800 	ldmdbeq	r8, {fp, ip, sp}
    1944:	02000007 	andeq	r0, r0, #7
    1948:	08f401cf 	ldmeq	r4!, {r0, r1, r2, r3, r6, r7, r8}^
    194c:	273c0000 	ldrcs	r0, [ip, -r0]!
    1950:	00524650 	subseq	r4, r2, r0, asr r6
    1954:	a001d002 	andge	sp, r1, r2
    1958:	4000000d 	andmi	r0, r0, sp
    195c:	52464427 	subpl	r4, r6, #654311424	; 0x27000000
    1960:	01d10200 	bicseq	r0, r1, r0, lsl #4
    1964:	000008f9 	strdeq	r0, [r0], -r9
    1968:	44412748 	strbmi	r2, [r1], #-1864	; 0xfffff8b8
    196c:	d2020052 	andle	r0, r2, #82	; 0x52
    1970:	0008f901 	andeq	pc, r8, r1, lsl #18
    1974:	aa184c00 	bge	61497c <startup-0x1f9eb684>
    1978:	02000006 	andeq	r0, r0, #6
    197c:	0dba01d3 	ldfeqs	f0, [sl, #844]!	; 0x34c
    1980:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    1984:	00000691 	muleq	r0, r1, r6
    1988:	d401d402 	strle	sp, [r1], #-1026	; 0xfffffbfe
    198c:	6000000d 	andvs	r0, r0, sp
    1990:	00052618 	andeq	r2, r5, r8, lsl r6
    1994:	01d50200 	bicseq	r0, r5, r0, lsl #4
    1998:	00000dd9 	ldrdeq	r0, [r0], -r9
    199c:	07301874 			; <UNDEFINED> instruction: 0x07301874
    19a0:	d6020000 	strle	r0, [r2], -r0
    19a4:	0008f401 	andeq	pc, r8, r1, lsl #8
    19a8:	0b008800 	bleq	239b0 <startup-0x1ffdc650>
    19ac:	000008c4 	andeq	r0, r0, r4, asr #17
    19b0:	00000d86 	andeq	r0, r0, r6, lsl #27
    19b4:	0000900c 	andeq	r9, r0, ip
    19b8:	20000b00 	andcs	r0, r0, r0, lsl #22
    19bc:	00000d76 	andeq	r0, r0, r6, ror sp
    19c0:	0008f90b 	andeq	pc, r8, fp, lsl #18
    19c4:	000d9b00 	andeq	r9, sp, r0, lsl #22
    19c8:	00900c00 	addseq	r0, r0, r0, lsl #24
    19cc:	00010000 	andeq	r0, r1, r0
    19d0:	000d8b16 	andeq	r8, sp, r6, lsl fp
    19d4:	0d9b2000 	ldceq	0, cr2, [fp]
    19d8:	f90b0000 			; <UNDEFINED> instruction: 0xf90b0000
    19dc:	b5000008 	strlt	r0, [r0, #-8]
    19e0:	0c00000d 	stceq	0, cr0, [r0], {13}
    19e4:	00000090 	muleq	r0, r0, r0
    19e8:	a5160003 	ldrge	r0, [r6, #-3]
    19ec:	2000000d 	andcs	r0, r0, sp
    19f0:	00000db5 			; <UNDEFINED> instruction: 0x00000db5
    19f4:	0008f90b 	andeq	pc, r8, fp, lsl #18
    19f8:	000dcf00 	andeq	ip, sp, r0, lsl #30
    19fc:	00900c00 	addseq	r0, r0, r0, lsl #24
    1a00:	00040000 	andeq	r0, r4, r0
    1a04:	000dbf16 	andeq	fp, sp, r6, lsl pc
    1a08:	0dcf2000 	stcleq	0, cr2, [pc]	; 1a10 <startup-0x1fffe5f0>
    1a0c:	e90b0000 	stmdb	fp, {}	; <UNPREDICTABLE>
    1a10:	e9000008 	stmdb	r0, {r3}
    1a14:	0c00000d 	stceq	0, cr0, [r0], {13}
    1a18:	00000090 	muleq	r0, r0, r0
    1a1c:	31080004 	tstcc	r8, r4
    1a20:	02000006 	andeq	r0, r0, #6
    1a24:	0c5b01d7 	ldfeqe	f0, [fp], {215}	; 0xd7
    1a28:	101b0000 	andsne	r0, fp, r0
    1a2c:	3302bf02 	movwcc	fp, #12034	; 0x2f02
    1a30:	1800000e 	stmdane	r0, {r1, r2, r3}
    1a34:	00000d2a 	andeq	r0, r0, sl, lsr #26
    1a38:	f402c102 	vst4.8	{d12,d14,d16,d18}, [r2], r2
    1a3c:	00000008 	andeq	r0, r0, r8
    1a40:	000f8418 	andeq	r8, pc, r8, lsl r4	; <UNPREDICTABLE>
    1a44:	02c20200 	sbceq	r0, r2, #0, 4
    1a48:	000008f4 	strdeq	r0, [r0], -r4
    1a4c:	41562704 	cmpmi	r6, r4, lsl #14
    1a50:	c302004c 	movwgt	r0, #8268	; 0x204c
    1a54:	0008f402 	andeq	pc, r8, r2, lsl #8
    1a58:	3f180800 	svccc	0x00180800
    1a5c:	0200000f 	andeq	r0, r0, #15
    1a60:	08f902c4 	ldmeq	r9!, {r2, r6, r7, r9}^
    1a64:	000c0000 	andeq	r0, ip, r0
    1a68:	000de908 	andeq	lr, sp, r8, lsl #18
    1a6c:	02c50200 	sbceq	r0, r5, #0, 4
    1a70:	00000df5 	strdeq	r0, [r0], -r5
    1a74:	0002b51f 	andeq	fp, r2, pc, lsl r5
    1a78:	06fa0200 	ldrbteq	r0, [sl], r0, lsl #4
    1a7c:	000008e4 	andeq	r0, r0, r4, ror #17
    1a80:	00031a28 	andeq	r1, r3, r8, lsr #20
    1a84:	e93b0a00 	ldmdb	fp!, {r9, fp}
    1a88:	29000008 	stmdbcs	r0, {r3}
    1a8c:	00370107 	eorseq	r0, r7, r7, lsl #2
    1a90:	5f090000 	svcpl	0x00090000
    1a94:	000e7103 	andeq	r7, lr, r3, lsl #2
    1a98:	02c22300 	sbceq	r2, r2, #0, 6
    1a9c:	23000000 	movwcs	r0, #0
    1aa0:	000000d9 	ldrdeq	r0, [r0], -r9
    1aa4:	281b0001 	ldmdacs	fp, {r0}
    1aa8:	fd05c309 	stc2	3, cr12, [r5, #-36]	; 0xffffffdc
    1aac:	1800000e 	stmdane	r0, {r1, r2, r3}
    1ab0:	00000180 	andeq	r0, r0, r0, lsl #3
    1ab4:	f405c509 	vst3.8	{d12,d14,d16}, [r5], r9
    1ab8:	00000008 	andeq	r0, r0, r8
    1abc:	00012818 	andeq	r2, r1, r8, lsl r8
    1ac0:	05c60900 	strbeq	r0, [r6, #2304]	; 0x900
    1ac4:	000008f4 	strdeq	r0, [r0], -r4
    1ac8:	034b1804 	movteq	r1, #47108	; 0xb804
    1acc:	c7090000 	strgt	r0, [r9, -r0]
    1ad0:	0008f405 	andeq	pc, r8, r5, lsl #8
    1ad4:	5b180800 	blpl	603adc <startup-0x1f9fc524>
    1ad8:	09000001 	stmdbeq	r0, {r0}
    1adc:	08f405c8 	ldmeq	r4!, {r3, r6, r7, r8, sl}^
    1ae0:	270c0000 	strcs	r0, [ip, -r0]
    1ae4:	00524449 	subseq	r4, r2, r9, asr #8
    1ae8:	f405c909 	vst2.8	{d12,d14}, [r5], r9
    1aec:	10000008 	andne	r0, r0, r8
    1af0:	52444f27 	subpl	r4, r4, #39, 30	; 0x9c
    1af4:	05ca0900 	strbeq	r0, [sl, #2304]	; 0x900
    1af8:	000008f4 	strdeq	r0, [r0], -r4
    1afc:	04a41814 	strteq	r1, [r4], #2068	; 0x814
    1b00:	cb090000 	blgt	241b08 <startup-0x1fdbe4f8>
    1b04:	0008d405 	andeq	sp, r8, r5, lsl #8
    1b08:	7a181800 	bvc	607b10 <startup-0x1f9f84f0>
    1b0c:	09000001 	stmdbeq	r0, {r0}
    1b10:	08d405cc 	ldmeq	r4, {r2, r3, r6, r7, r8, sl}^
    1b14:	181a0000 	ldmdane	sl, {}	; <UNPREDICTABLE>
    1b18:	00000111 	andeq	r0, r0, r1, lsl r1
    1b1c:	f405cd09 			; <UNDEFINED> instruction: 0xf405cd09
    1b20:	1c000008 	stcne	0, cr0, [r0], {8}
    1b24:	52464127 	subpl	r4, r6, #-1073741815	; 0xc0000009
    1b28:	05ce0900 	strbeq	r0, [lr, #2304]	; 0x900
    1b2c:	00000f0d 	andeq	r0, r0, sp, lsl #30
    1b30:	f40b0020 	vst4.8	{d0-d3}, [fp :128], r0
    1b34:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    1b38:	0c00000f 	stceq	0, cr0, [r0], {15}
    1b3c:	00000090 	muleq	r0, r0, r0
    1b40:	fd200001 	stc2	0, cr0, [r0, #-4]!
    1b44:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    1b48:	00000000 	andeq	r0, r0, r0
    1b4c:	7105cf09 	tstvc	r5, r9, lsl #30
    1b50:	2a00000e 	bcs	1b90 <startup-0x1fffe470>
    1b54:	00370107 	eorseq	r0, r7, r7, lsl #2
    1b58:	420b0000 	andmi	r0, fp, #0
    1b5c:	00000f44 	andeq	r0, r0, r4, asr #30
    1b60:	00016123 	andeq	r6, r1, r3, lsr #2
    1b64:	4d230000 	stcmi	0, cr0, [r3, #-0]
    1b68:	01000001 	tsteq	r0, r1
    1b6c:	0000bf23 	andeq	fp, r0, r3, lsr #30
    1b70:	f5230200 			; <UNDEFINED> instruction: 0xf5230200
    1b74:	03000000 	movweq	r0, #0
    1b78:	00390300 	eorseq	r0, r9, r0, lsl #6
    1b7c:	470b0000 	strmi	r0, [fp, -r0]
    1b80:	00000f1e 	andeq	r0, r0, lr, lsl pc
    1b84:	3701072a 	strcc	r0, [r1, -sl, lsr #14]
    1b88:	0b000000 	bleq	1b90 <startup-0x1fffe470>
    1b8c:	000f694f 	andeq	r6, pc, pc, asr #18
    1b90:	01a62300 			; <UNDEFINED> instruction: 0x01a62300
    1b94:	23000000 	movwcs	r0, #0
    1b98:	00000078 	andeq	r0, r0, r8, ror r0
    1b9c:	16030001 	strne	r0, [r3], -r1
    1ba0:	0b000001 	bleq	1bac <startup-0x1fffe454>
    1ba4:	000f4f52 	andeq	r4, pc, r2, asr pc	; <UNPREDICTABLE>
    1ba8:	01072a00 	tsteq	r7, r0, lsl #20
    1bac:	00000037 	andeq	r0, r0, r7, lsr r0
    1bb0:	0f9a5a0b 	svceq	0x009a5a0b
    1bb4:	2a230000 	bcs	8c1bbc <startup-0x1f73e444>
    1bb8:	00000003 	andeq	r0, r0, r3
    1bbc:	00033923 	andeq	r3, r3, r3, lsr #18
    1bc0:	2f230100 	svccs	0x00230100
    1bc4:	02000001 	andeq	r0, r0, #1
    1bc8:	00046523 	andeq	r6, r4, r3, lsr #10
    1bcc:	03000300 	movweq	r0, #768	; 0x300
    1bd0:	00000359 	andeq	r0, r0, r9, asr r3
    1bd4:	0f745f0b 	svceq	0x00745f0b
    1bd8:	072a0000 	streq	r0, [sl, -r0]!
    1bdc:	00003701 	andeq	r3, r0, r1, lsl #14
    1be0:	c56e0b00 	strbgt	r0, [lr, #-2816]!	; 0xfffff500
    1be4:	2300000f 	movwcs	r0, #15
    1be8:	00000422 	andeq	r0, r0, r2, lsr #8
    1bec:	04862300 	streq	r2, [r6], #768	; 0x300
    1bf0:	23010000 	movwcs	r0, #4096	; 0x1000
    1bf4:	0000036b 	andeq	r0, r0, fp, ror #6
    1bf8:	75030002 	strvc	r0, [r3, #-2]
    1bfc:	0b000004 	bleq	1c14 <startup-0x1fffe3ec>
    1c00:	000fa572 	andeq	sl, pc, r2, ror r5	; <UNPREDICTABLE>
    1c04:	0b080d00 	bleq	20500c <startup-0x1fdfaff4>
    1c08:	00101584 	andseq	r1, r0, r4, lsl #11
    1c0c:	00140e00 	andseq	r0, r4, r0, lsl #28
    1c10:	860b0000 	strhi	r0, [fp], -r0
    1c14:	000008e9 	andeq	r0, r0, r9, ror #17
    1c18:	04c10e00 	strbeq	r0, [r1], #3584	; 0xe00
    1c1c:	890b0000 	stmdbhi	fp, {}	; <UNPREDICTABLE>
    1c20:	00000f44 	andeq	r0, r0, r4, asr #30
    1c24:	00e00e04 	rsceq	r0, r0, r4, lsl #28
    1c28:	8c0b0000 	stchi	0, cr0, [fp], {-0}
    1c2c:	00000f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
    1c30:	00b40e05 	adcseq	r0, r4, r5, lsl #28
    1c34:	8f0b0000 	svchi	0x000b0000
    1c38:	00000f69 	andeq	r0, r0, r9, ror #30
    1c3c:	044a0e06 	strbeq	r0, [sl], #-3590	; 0xfffff1fa
    1c40:	920b0000 	andls	r0, fp, #0
    1c44:	00000fc5 	andeq	r0, r0, r5, asr #31
    1c48:	54030007 	strpl	r0, [r3], #-7
    1c4c:	0b000004 	bleq	1c64 <startup-0x1fffe39c>
    1c50:	000fd094 	muleq	pc, r4, r0	; <UNPREDICTABLE>
    1c54:	0c250f00 	stceq	15, cr0, [r5], #-0
    1c58:	01080000 	mrseq	r0, (UNDEF: 8)
    1c5c:	0010681c 	andseq	r6, r0, ip, lsl r8
    1c60:	64691000 	strbtvs	r1, [r9], #-0
    1c64:	851d0100 	ldrhi	r0, [sp, #-256]	; 0xffffff00
    1c68:	00000005 	andeq	r0, r0, r5
    1c6c:	0009370e 	andeq	r3, r9, lr, lsl #14
    1c70:	851e0100 	ldrhi	r0, [lr, #-256]	; 0xffffff00
    1c74:	01000005 	tsteq	r0, r5
    1c78:	000fbe0e 	andeq	fp, pc, lr, lsl #28
    1c7c:	3e1f0100 	mufcce	f0, f7, f0
    1c80:	02000000 	andeq	r0, r0, #0
    1c84:	000bef0e 	andeq	lr, fp, lr, lsl #30
    1c88:	c9200100 	stmdbgt	r0!, {r8}
    1c8c:	04000008 	streq	r0, [r0], #-8
    1c90:	000c9b0e 	andeq	r9, ip, lr, lsl #22
    1c94:	c9200100 	stmdbgt	r0!, {r8}
    1c98:	06000008 	streq	r0, [r0], -r8
    1c9c:	0e300300 	cdpeq	3, 3, cr0, cr0, cr0, {0}
    1ca0:	21010000 	mrscs	r0, (UNDEF: 1)
    1ca4:	00001020 	andeq	r1, r0, r0, lsr #32
    1ca8:	0009832b 	andeq	r8, r9, fp, lsr #6
    1cac:	68220100 	stmdavs	r2!, {r8}
    1cb0:	05000010 	streq	r0, [r0, #-16]
    1cb4:	00176803 	andseq	r6, r7, r3, lsl #16
    1cb8:	0c152b20 			; <UNDEFINED> instruction: 0x0c152b20
    1cbc:	25010000 	strcs	r0, [r1, #-0]
    1cc0:	000008f4 	strdeq	r0, [r0], -r4
    1cc4:	17640305 	strbne	r0, [r4, -r5, lsl #6]!
    1cc8:	302c2000 	eorcc	r2, ip, r0
    1ccc:	01000010 	tsteq	r0, r0, lsl r0
    1cd0:	00092853 	andeq	r2, r9, r3, asr r8
    1cd4:	00003420 	andeq	r3, r0, r0, lsr #8
    1cd8:	b99c0100 	ldmiblt	ip, {r8}
    1cdc:	2d000010 	stccs	0, cr0, [r0, #-64]	; 0xffffffc0
    1ce0:	00000a35 	andeq	r0, r0, r5, lsr sl
    1ce4:	08e95b01 	stmiaeq	r9!, {r0, r8, r9, fp, ip, lr}^
    1ce8:	91020000 	mrsls	r0, (UNDEF: 2)
    1cec:	b82e0074 	stmdalt	lr!, {r2, r4, r5, r6}
    1cf0:	01000008 	tsteq	r0, r8
    1cf4:	0008a83d 	andeq	sl, r8, sp, lsr r8
    1cf8:	00008020 	andeq	r8, r0, r0, lsr #32
    1cfc:	dd9c0100 	ldfles	f0, [ip]
    1d00:	2d000010 	stccs	0, cr0, [r0, #-64]	; 0xffffffc0
    1d04:	00000b61 	andeq	r0, r0, r1, ror #22
    1d08:	10153f01 	andsne	r3, r5, r1, lsl #30
    1d0c:	91020000 	mrsls	r0, (UNDEF: 2)
    1d10:	8b2f0070 	blhi	bc1ed8 <startup-0x1f43e128>
    1d14:	01000009 	tsteq	r0, r9
    1d18:	00087833 	andeq	r7, r8, r3, lsr r8
    1d1c:	00003020 	andeq	r3, r0, r0, lsr #32
    1d20:	309c0100 	addscc	r0, ip, r0, lsl #2
    1d24:	000008e6 	andeq	r0, r0, r6, ror #17
    1d28:	08242701 	stmdaeq	r4!, {r0, r8, r9, sl, sp}
    1d2c:	00542000 	subseq	r2, r4, r0
    1d30:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d34:	000f2031 	andeq	r2, pc, r1, lsr r0	; <UNPREDICTABLE>
    1d38:	06e00200 	strbteq	r0, [r0], r0, lsl #4
    1d3c:	000008e9 	andeq	r0, r0, r9, ror #17
    1d40:	200007dc 	ldrdcs	r0, [r0], -ip
    1d44:	00000048 	andeq	r0, r0, r8, asr #32
    1d48:	11299c01 			; <UNDEFINED> instruction: 0x11299c01
    1d4c:	4b320000 	blmi	c81d54 <startup-0x1f37e2ac>
    1d50:	0200000c 	andeq	r0, r0, #12
    1d54:	08e906e0 	stmiaeq	r9!, {r5, r6, r7, r9, sl}^
    1d58:	91020000 	mrsls	r0, (UNDEF: 2)
    1d5c:	4c330074 	ldcmi	0, cr0, [r3], #-464	; 0xfffffe30
    1d60:	02000009 	andeq	r0, r0, #9
    1d64:	077c065d 			; <UNDEFINED> instruction: 0x077c065d
    1d68:	00602000 	rsbeq	r2, r0, r0
    1d6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d70:	0000115e 	andeq	r1, r0, lr, asr r1
    1d74:	00101832 	andseq	r1, r0, r2, lsr r8
    1d78:	065d0200 	ldrbeq	r0, [sp], -r0, lsl #4
    1d7c:	00000b2c 	andeq	r0, r0, ip, lsr #22
    1d80:	32779102 	rsbscc	r9, r7, #-2147483648	; 0x80000000
    1d84:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1d88:	e9065d02 	stmdb	r6, {r1, r8, sl, fp, ip, lr}
    1d8c:	02000008 	andeq	r0, r0, #8
    1d90:	34007091 	strcc	r7, [r0], #-145	; 0xffffff6f
    1d94:	0000092f 	andeq	r0, r0, pc, lsr #18
    1d98:	00000f01 	andeq	r0, r0, r1, lsl #30
    1d9c:	000c2000 	andeq	r2, ip, r0
    1da0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1da4:	000e5f00 	andeq	r5, lr, r0, lsl #30
    1da8:	00000400 	andeq	r0, r0, r0, lsl #8
    1dac:	04000006 	streq	r0, [r0], #-6
    1db0:	0001cc01 	andeq	ip, r1, r1, lsl #24
    1db4:	14b70c00 	ldrtne	r0, [r7], #3072	; 0xc00
    1db8:	037a0000 	cmneq	sl, #0
    1dbc:	095c0000 	ldmdbeq	ip, {}^	; <UNPREDICTABLE>
    1dc0:	0cf02000 	ldcleq	0, cr2, [r0]
    1dc4:	074e0000 	strbeq	r0, [lr, -r0]
    1dc8:	01020000 	mrseq	r0, (UNDEF: 2)
    1dcc:	0001c006 	andeq	ip, r1, r6
    1dd0:	01860300 	orreq	r0, r6, r0, lsl #6
    1dd4:	2b020000 	blcs	81ddc <startup-0x1ff7e224>
    1dd8:	00000037 	andeq	r0, r0, r7, lsr r0
    1ddc:	be080102 	adflte	f0, f0, f2
    1de0:	02000001 	andeq	r0, r0, #1
    1de4:	00570502 	subseq	r0, r7, r2, lsl #10
    1de8:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    1dec:	02000000 	andeq	r0, r0, #0
    1df0:	00005039 	andeq	r5, r0, r9, lsr r0
    1df4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1df8:	000002e7 	andeq	r0, r0, r7, ror #5
    1dfc:	0002dd03 	andeq	sp, r2, r3, lsl #26
    1e00:	624d0200 	subvs	r0, sp, #0, 4
    1e04:	02000000 	andeq	r0, r0, #0
    1e08:	01440504 	cmpeq	r4, r4, lsl #10
    1e0c:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    1e10:	02000000 	andeq	r0, r0, #0
    1e14:	0000744f 	andeq	r7, r0, pc, asr #8
    1e18:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1e1c:	00000269 	andeq	r0, r0, r9, ror #4
    1e20:	3f050802 	svccc	0x00050802
    1e24:	02000001 	andeq	r0, r0, #1
    1e28:	02640708 	rsbeq	r0, r4, #8, 14	; 0x200000
    1e2c:	04040000 	streq	r0, [r4], #-0
    1e30:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1e34:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1e38:	0000026e 	andeq	r0, r0, lr, ror #4
    1e3c:	00018803 	andeq	r8, r1, r3, lsl #16
    1e40:	2c180300 	ldccs	3, cr0, [r8], {-0}
    1e44:	05000000 	streq	r0, [r0, #-0]
    1e48:	00000097 	muleq	r0, r7, r0
    1e4c:	0000a206 	andeq	sl, r0, r6, lsl #4
    1e50:	00ab0300 	adceq	r0, fp, r0, lsl #6
    1e54:	24030000 	strcs	r0, [r3], #-0
    1e58:	00000045 	andeq	r0, r0, r5, asr #32
    1e5c:	0002df03 	andeq	sp, r2, r3, lsl #30
    1e60:	572c0300 	strpl	r0, [ip, -r0, lsl #6]!
    1e64:	06000000 	streq	r0, [r0], -r0
    1e68:	000000b7 	strheq	r0, [r0], -r7
    1e6c:	0000a003 	andeq	sl, r0, r3
    1e70:	69300300 	ldmdbvs	r0!, {r8, r9}
    1e74:	06000000 	streq	r0, [r0], -r0
    1e78:	000000c7 	andeq	r0, r0, r7, asr #1
    1e7c:	0000c707 	andeq	ip, r0, r7, lsl #14
    1e80:	0000e700 	andeq	lr, r0, r0, lsl #14
    1e84:	00900800 	addseq	r0, r0, r0, lsl #16
    1e88:	00010000 	andeq	r0, r1, r0
    1e8c:	0002b509 	andeq	fp, r2, r9, lsl #10
    1e90:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    1e94:	000000c2 	andeq	r0, r0, r2, asr #1
    1e98:	00031a0a 	andeq	r1, r3, sl, lsl #20
    1e9c:	c73b0500 	ldrgt	r0, [fp, -r0, lsl #10]!
    1ea0:	0b000000 	bleq	1ea8 <startup-0x1fffe158>
    1ea4:	00370107 	eorseq	r0, r7, r7, lsl #2
    1ea8:	5d060000 	stcpl	0, cr0, [r6, #-0]
    1eac:	00011903 	andeq	r1, r1, r3, lsl #18
    1eb0:	008a0c00 	addeq	r0, sl, r0, lsl #24
    1eb4:	0d000000 	stceq	0, cr0, [r0, #-0]
    1eb8:	00544553 	subseq	r4, r4, r3, asr r5
    1ebc:	d30e0001 	movwle	r0, #57345	; 0xe001
    1ec0:	06000015 			; <UNDEFINED> instruction: 0x06000015
    1ec4:	00fe035d 	rscseq	r0, lr, sp, asr r3
    1ec8:	4b0e0000 	blmi	381ed0 <startup-0x1fc7e130>
    1ecc:	06000017 			; <UNDEFINED> instruction: 0x06000017
    1ed0:	00fe035d 	rscseq	r0, lr, sp, asr r3
    1ed4:	070b0000 	streq	r0, [fp, -r0]
    1ed8:	00003701 	andeq	r3, r0, r1, lsl #14
    1edc:	035f0600 	cmpeq	pc, #0, 12
    1ee0:	0000014c 	andeq	r0, r0, ip, asr #2
    1ee4:	0002c20c 	andeq	ip, r2, ip, lsl #4
    1ee8:	d90c0000 	stmdble	ip, {}	; <UNPREDICTABLE>
    1eec:	01000000 	mrseq	r0, (UNDEF: 0)
    1ef0:	15790e00 	ldrbne	r0, [r9, #-3584]!	; 0xfffff200
    1ef4:	5f060000 	svcpl	0x00060000
    1ef8:	00013103 	andeq	r3, r1, r3, lsl #2
    1efc:	01070b00 	tsteq	r7, r0, lsl #22
    1f00:	00000037 	andeq	r0, r0, r7, lsr r0
    1f04:	73036206 	movwvc	r6, #12806	; 0x3206
    1f08:	0c000001 	stceq	0, cr0, [r0], {1}
    1f0c:	00001526 	andeq	r1, r0, r6, lsr #10
    1f10:	17f30c00 	ldrbne	r0, [r3, r0, lsl #24]!
    1f14:	00010000 	andeq	r0, r1, r0
    1f18:	0013480e 	andseq	r4, r3, lr, lsl #16
    1f1c:	03620600 	cmneq	r2, #0, 12
    1f20:	00000158 	andeq	r0, r0, r8, asr r1
    1f24:	6406980f 	strvs	r9, [r6], #-2063	; 0xfffff7f1
    1f28:	00034206 	andeq	r4, r3, r6, lsl #4
    1f2c:	52431000 	subpl	r1, r3, #0
    1f30:	06660600 	strbteq	r0, [r6], -r0, lsl #12
    1f34:	000000d2 	ldrdeq	r0, [r0], -r2
    1f38:	06731100 	ldrbteq	r1, [r3], -r0, lsl #2
    1f3c:	67060000 	strvs	r0, [r6, -r0]
    1f40:	0000d206 	andeq	sp, r0, r6, lsl #4
    1f44:	2b110400 	blcs	442f4c <startup-0x1fbbd0b4>
    1f48:	06000007 	streq	r0, [r0], -r7
    1f4c:	00d20668 	sbcseq	r0, r2, r8, ror #12
    1f50:	10080000 	andne	r0, r8, r0
    1f54:	00524943 	subseq	r4, r2, r3, asr #18
    1f58:	d2066906 	andle	r6, r6, #98304	; 0x18000
    1f5c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1f60:	00070011 	andeq	r0, r7, r1, lsl r0
    1f64:	066a0600 	strbteq	r0, [sl], -r0, lsl #12
    1f68:	000000d2 	ldrdeq	r0, [r0], -r2
    1f6c:	060e1110 			; <UNDEFINED> instruction: 0x060e1110
    1f70:	6b060000 	blvs	181f78 <startup-0x1fe7e088>
    1f74:	0000d206 	andeq	sp, r0, r6, lsl #4
    1f78:	0e111400 	cfmulseq	mvf1, mvf1, mvf0
    1f7c:	06000007 	streq	r0, [r0], -r7
    1f80:	00d2066c 	sbcseq	r0, r2, ip, ror #12
    1f84:	11180000 	tstne	r8, r0
    1f88:	00000526 	andeq	r0, r0, r6, lsr #10
    1f8c:	c7066d06 	strgt	r6, [r6, -r6, lsl #26]
    1f90:	1c000000 	stcne	0, cr0, [r0], {-0}
    1f94:	0004d511 	andeq	sp, r4, r1, lsl r5
    1f98:	066e0600 	strbteq	r0, [lr], -r0, lsl #12
    1f9c:	000000d2 	ldrdeq	r0, [r0], -r2
    1fa0:	06001120 	streq	r1, [r0], -r0, lsr #2
    1fa4:	6f060000 	svcvs	0x00060000
    1fa8:	0000d206 	andeq	sp, r0, r6, lsl #4
    1fac:	af112400 	svcge	0x00112400
    1fb0:	06000006 	streq	r0, [r0], -r6
    1fb4:	00d70670 	sbcseq	r0, r7, r0, ror r6
    1fb8:	11280000 			; <UNDEFINED> instruction: 0x11280000
    1fbc:	000006ed 	andeq	r0, r0, sp, ror #13
    1fc0:	d2067106 	andle	r7, r6, #-2147483647	; 0x80000001
    1fc4:	30000000 	andcc	r0, r0, r0
    1fc8:	0004de11 	andeq	sp, r4, r1, lsl lr
    1fcc:	06720600 	ldrbteq	r0, [r2], -r0, lsl #12
    1fd0:	000000d2 	ldrdeq	r0, [r0], -r2
    1fd4:	05541134 	ldrbeq	r1, [r4, #-308]	; 0xfffffecc
    1fd8:	73060000 	movwvc	r0, #24576	; 0x6000
    1fdc:	0000d206 	andeq	sp, r0, r6, lsl #4
    1fe0:	b9113800 	ldmdblt	r1, {fp, ip, sp}
    1fe4:	06000006 	streq	r0, [r0], -r6
    1fe8:	00c70674 	sbceq	r0, r7, r4, ror r6
    1fec:	113c0000 	teqne	ip, r0
    1ff0:	00000544 	andeq	r0, r0, r4, asr #10
    1ff4:	d2067506 	andle	r7, r6, #25165824	; 0x1800000
    1ff8:	40000000 	andmi	r0, r0, r0
    1ffc:	00063a11 	andeq	r3, r6, r1, lsl sl
    2000:	06760600 	ldrbteq	r0, [r6], -r0, lsl #12
    2004:	000000d2 	ldrdeq	r0, [r0], -r2
    2008:	053a1144 	ldreq	r1, [sl, #-324]!	; 0xfffffebc
    200c:	77060000 	strvc	r0, [r6, -r0]
    2010:	0000d706 	andeq	sp, r0, r6, lsl #14
    2014:	cb114800 	blgt	45401c <startup-0x1fbabfe4>
    2018:	06000004 	streq	r0, [r0], -r4
    201c:	00d20678 	sbcseq	r0, r2, r8, ror r6
    2020:	11500000 	cmpne	r0, r0
    2024:	000006a0 	andeq	r0, r0, r0, lsr #13
    2028:	d2067906 	andle	r7, r6, #98304	; 0x18000
    202c:	54000000 	strpl	r0, [r0], #-0
    2030:	00053011 	andeq	r3, r5, r1, lsl r0
    2034:	067a0600 	ldrbteq	r0, [sl], -r0, lsl #12
    2038:	000000d2 	ldrdeq	r0, [r0], -r2
    203c:	06cf1158 			; <UNDEFINED> instruction: 0x06cf1158
    2040:	7b060000 	blvc	182048 <startup-0x1fe7dfb8>
    2044:	0000c706 	andeq	ip, r0, r6, lsl #14
    2048:	7b115c00 	blvc	459050 <startup-0x1fba6fb0>
    204c:	06000006 	streq	r0, [r0], -r6
    2050:	00d2067c 	sbcseq	r0, r2, ip, ror r6
    2054:	11600000 	cmnne	r0, r0
    2058:	00000736 	andeq	r0, r0, r6, lsr r7
    205c:	d2067d06 	andle	r7, r6, #384	; 0x180
    2060:	64000000 	strvs	r0, [r0], #-0
    2064:	0006d911 	andeq	sp, r6, r1, lsl r9
    2068:	067e0600 	ldrbteq	r0, [lr], -r0, lsl #12
    206c:	000000d7 	ldrdeq	r0, [r0], -r7
    2070:	04e61168 	strbteq	r1, [r6], #360	; 0x168
    2074:	7f060000 	svcvc	0x00060000
    2078:	0000d206 	andeq	sp, r0, r6, lsl #4
    207c:	43107000 	tstmi	r0, #0
    2080:	06005253 			; <UNDEFINED> instruction: 0x06005253
    2084:	00d20680 	sbcseq	r0, r2, r0, lsl #13
    2088:	11740000 	cmnne	r4, r0
    208c:	000006e3 	andeq	r0, r0, r3, ror #13
    2090:	d7068106 	strle	r8, [r6, -r6, lsl #2]
    2094:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    2098:	00051011 	andeq	r1, r5, r1, lsl r0
    209c:	06820600 	streq	r0, [r2], r0, lsl #12
    20a0:	000000d2 	ldrdeq	r0, [r0], -r2
    20a4:	04f91180 	ldrbteq	r1, [r9], #384	; 0x180
    20a8:	83060000 	movwhi	r0, #24576	; 0x6000
    20ac:	0000d206 	andeq	sp, r0, r6, lsl #4
    20b0:	25118400 	ldrcs	r8, [r1, #-1024]	; 0xfffffc00
    20b4:	06000007 	streq	r0, [r0], -r7
    20b8:	00d20684 	sbcseq	r0, r2, r4, lsl #13
    20bc:	11880000 	orrne	r0, r8, r0
    20c0:	0000054c 	andeq	r0, r0, ip, asr #10
    20c4:	d2068506 	andle	r8, r6, #25165824	; 0x1800000
    20c8:	8c000000 	stchi	0, cr0, [r0], {-0}
    20cc:	0004f011 	andeq	pc, r4, r1, lsl r0	; <UNPREDICTABLE>
    20d0:	06860600 	streq	r0, [r6], r0, lsl #12
    20d4:	000000d2 	ldrdeq	r0, [r0], -r2
    20d8:	05f71190 	ldrbeq	r1, [r7, #400]!	; 0x190
    20dc:	87060000 	strhi	r0, [r6, -r0]
    20e0:	0000d206 	andeq	sp, r0, r6, lsl #4
    20e4:	0e009400 	cfcpyseq	mvf9, mvf0
    20e8:	000005eb 	andeq	r0, r0, fp, ror #11
    20ec:	7f068906 	svcvc	0x00068906
    20f0:	12000001 	andne	r0, r0, #1
    20f4:	87300710 			; <UNDEFINED> instruction: 0x87300710
    20f8:	13000003 	movwne	r0, #3
    20fc:	000011ab 	andeq	r1, r0, fp, lsr #3
    2100:	00c73207 	sbceq	r3, r7, r7, lsl #4
    2104:	13000000 	movwne	r0, #0
    2108:	0000138c 	andeq	r1, r0, ip, lsl #7
    210c:	00c73307 	sbceq	r3, r7, r7, lsl #6
    2110:	13040000 	movwne	r0, #16384	; 0x4000
    2114:	000016b7 			; <UNDEFINED> instruction: 0x000016b7
    2118:	00c73407 	sbceq	r3, r7, r7, lsl #8
    211c:	13080000 	movwne	r0, #32768	; 0x8000
    2120:	00001279 	andeq	r1, r0, r9, ror r2
    2124:	00c73507 	sbceq	r3, r7, r7, lsl #10
    2128:	000c0000 	andeq	r0, ip, r0
    212c:	00180903 	andseq	r0, r8, r3, lsl #18
    2130:	4e360700 	cdpmi	7, 3, cr0, cr6, cr0, {0}
    2134:	07000003 	streq	r0, [r0, -r3]
    2138:	000000a7 	andeq	r0, r0, r7, lsr #1
    213c:	000003a2 	andeq	r0, r0, r2, lsr #7
    2140:	00009008 	andeq	r9, r0, r8
    2144:	05000f00 	streq	r0, [r0, #-3840]	; 0xfffff100
    2148:	00000392 	muleq	r0, r2, r3
    214c:	0003a206 	andeq	sl, r3, r6, lsl #4
    2150:	16c71400 	strbne	r1, [r7], r0, lsl #8
    2154:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    2158:	000003a7 	andeq	r0, r0, r7, lsr #7
    215c:	17840305 	strne	r0, [r4, r5, lsl #6]
    2160:	0b152000 	bleq	54a168 <startup-0x1fab5e98>
    2164:	01000012 	tsteq	r0, r2, lsl r0
    2168:	162c0c5e 			; <UNDEFINED> instruction: 0x162c0c5e
    216c:	00202000 	eoreq	r2, r0, r0
    2170:	9c010000 	stcls	0, cr0, [r1], {-0}
    2174:	000003e3 	andeq	r0, r0, r3, ror #7
    2178:	00122116 	andseq	r2, r2, r6, lsl r1
    217c:	0c5e0100 	ldfeqe	f0, [lr], {-0}
    2180:	00000097 	muleq	r0, r7, r0
    2184:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2188:	00174417 	andseq	r4, r7, r7, lsl r4
    218c:	0c3c0100 	ldfeqs	f0, [ip], #-0
    2190:	00000125 	andeq	r0, r0, r5, lsr #2
    2194:	200015e8 	andcs	r1, r0, r8, ror #11
    2198:	00000044 	andeq	r0, r0, r4, asr #32
    219c:	041c9c01 	ldreq	r9, [ip], #-3073	; 0xfffff3ff
    21a0:	21160000 	tstcs	r6, r0
    21a4:	01000012 	tsteq	r0, r2, lsl r0
    21a8:	00970c3c 	addseq	r0, r7, ip, lsr ip
    21ac:	91020000 	mrsls	r0, (UNDEF: 2)
    21b0:	01b4186f 			; <UNDEFINED> instruction: 0x01b4186f
    21b4:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    21b8:	0001250c 	andeq	r2, r1, ip, lsl #10
    21bc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    21c0:	12641900 	rsbne	r1, r4, #0, 18
    21c4:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    21c8:	0015cc0c 	andseq	ip, r5, ip, lsl #24
    21cc:	00001c20 	andeq	r1, r0, r0, lsr #24
    21d0:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    21d4:	000015cc 	andeq	r1, r0, ip, asr #11
    21d8:	190bfb01 	stmdbne	fp, {r0, r8, r9, fp, ip, sp, lr, pc}
    21dc:	48000001 	stmdami	r0, {r0}
    21e0:	84200015 	strthi	r0, [r0], #-21	; 0xffffffeb
    21e4:	01000000 	mrseq	r0, (UNDEF: 0)
    21e8:	0004859c 	muleq	r4, ip, r5
    21ec:	13231600 			; <UNDEFINED> instruction: 0x13231600
    21f0:	fb010000 	blx	421fa <startup-0x1ffbde06>
    21f4:	0000970b 	andeq	r9, r0, fp, lsl #14
    21f8:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    21fc:	706d741a 	rsbvc	r7, sp, sl, lsl r4
    2200:	0bfd0100 	bleq	fff42608 <APBAHBPrescTable+0xdff40e84>
    2204:	000000c7 	andeq	r0, r0, r7, asr #1
    2208:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    220c:	000011a1 	andeq	r1, r0, r1, lsr #3
    2210:	c70bfe01 	strgt	pc, [fp, -r1, lsl #28]
    2214:	02000000 	andeq	r0, r0, #0
    2218:	b4187491 	ldrlt	r7, [r8], #-1169	; 0xfffffb6f
    221c:	01000001 	tsteq	r0, r1
    2220:	01190bff 			; <UNDEFINED> instruction: 0x01190bff
    2224:	91020000 	mrsls	r0, (UNDEF: 2)
    2228:	e6150073 			; <UNDEFINED> instruction: 0xe6150073
    222c:	01000017 	tsteq	r0, r7, lsl r0
    2230:	14f80bd6 	ldrbtne	r0, [r8], #3030	; 0xbd6
    2234:	00502000 	subseq	r2, r0, r0
    2238:	9c010000 	stcls	0, cr0, [r1], {-0}
    223c:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
    2240:	00122116 	andseq	r2, r2, r6, lsl r1
    2244:	0bd60100 	bleq	ff58264c <APBAHBPrescTable+0xdf580ec8>
    2248:	00000097 	muleq	r0, r7, r0
    224c:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
    2250:	0000132c 	andeq	r1, r0, ip, lsr #6
    2254:	4c0bd601 	stcmi	6, cr13, [fp], {1}
    2258:	02000001 	andeq	r0, r0, #1
    225c:	15007691 	strne	r7, [r0, #-1681]	; 0xfffff96f
    2260:	00001567 	andeq	r1, r0, r7, ror #10
    2264:	bc0a9e01 	stclt	14, cr9, [sl], {1}
    2268:	3c200014 	stccc	0, cr0, [r0], #-80	; 0xffffffb0
    226c:	01000000 	mrseq	r0, (UNDEF: 0)
    2270:	0004e09c 	muleq	r4, ip, r0
    2274:	16511600 	ldrbne	r1, [r1], -r0, lsl #12
    2278:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    227c:	0000970a 	andeq	r9, r0, sl, lsl #14
    2280:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2284:	12471500 	subne	r1, r7, #0, 10
    2288:	86010000 	strhi	r0, [r1], -r0
    228c:	00147c0a 	andseq	r7, r4, sl, lsl #24
    2290:	00004020 	andeq	r4, r0, r0, lsr #32
    2294:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    2298:	16000005 	strne	r0, [r0], -r5
    229c:	00001780 	andeq	r1, r0, r0, lsl #15
    22a0:	c70a8601 	strgt	r8, [sl, -r1, lsl #12]
    22a4:	02000000 	andeq	r0, r0, #0
    22a8:	2c167491 	cfldrscs	mvf7, [r6], {145}	; 0x91
    22ac:	01000013 	tsteq	r0, r3, lsl r0
    22b0:	014c0a86 	smlalbbeq	r0, ip, r6, sl
    22b4:	91020000 	mrsls	r0, (UNDEF: 2)
    22b8:	71150073 	tstvc	r5, r3, ror r0
    22bc:	01000016 	tsteq	r0, r6, lsl r0
    22c0:	143c0a52 	ldrtne	r0, [ip], #-2642	; 0xfffff5ae
    22c4:	00402000 	subeq	r2, r0, r0
    22c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    22cc:	0000054a 	andeq	r0, r0, sl, asr #10
    22d0:	00139b16 	andseq	r9, r3, r6, lsl fp
    22d4:	0a520100 	beq	14826dc <startup-0x1eb7d924>
    22d8:	000000c7 	andeq	r0, r0, r7, asr #1
    22dc:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    22e0:	0000132c 	andeq	r1, r0, ip, lsr #6
    22e4:	4c0a5201 	sfmmi	f5, 4, [sl], {1}
    22e8:	02000001 	andeq	r0, r0, #1
    22ec:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
    22f0:	00001754 	andeq	r1, r0, r4, asr r7
    22f4:	fc0a1901 	stc2	9, cr1, [sl], {1}	; <UNPREDICTABLE>
    22f8:	40200013 	eormi	r0, r0, r3, lsl r0
    22fc:	01000000 	mrseq	r0, (UNDEF: 0)
    2300:	00057f9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    2304:	14741600 	ldrbtne	r1, [r4], #-1536	; 0xfffffa00
    2308:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    230c:	0000c70a 	andeq	ip, r0, sl, lsl #14
    2310:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2314:	00132c16 	andseq	r2, r3, r6, lsl ip
    2318:	0a190100 	beq	642720 <startup-0x1f9bd8e0>
    231c:	0000014c 	andeq	r0, r0, ip, asr #2
    2320:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2324:	00142c15 	andseq	r2, r4, r5, lsl ip
    2328:	09fb0100 	ldmibeq	fp!, {r8}^
    232c:	200013bc 			; <UNDEFINED> instruction: 0x200013bc
    2330:	00000040 	andeq	r0, r0, r0, asr #32
    2334:	05b49c01 	ldreq	r9, [r4, #3073]!	; 0xc01
    2338:	65160000 	ldrvs	r0, [r6, #-0]
    233c:	01000014 	tsteq	r0, r4, lsl r0
    2340:	00c709fb 	strdeq	r0, [r7], #155	; 0x9b
    2344:	91020000 	mrsls	r0, (UNDEF: 2)
    2348:	132c1674 			; <UNDEFINED> instruction: 0x132c1674
    234c:	fb010000 	blx	42356 <startup-0x1ffbdcaa>
    2350:	00014c09 	andeq	r4, r1, r9, lsl #24
    2354:	73910200 	orrsvc	r0, r1, #0, 4
    2358:	182c1500 	stmdane	ip!, {r8, sl, ip}
    235c:	db010000 	blle	42364 <startup-0x1ffbdc9c>
    2360:	00137c09 	andseq	r7, r3, r9, lsl #24
    2364:	00004020 	andeq	r4, r0, r0, lsr #32
    2368:	e99c0100 	ldmib	ip, {r8}
    236c:	16000005 	strne	r0, [r0], -r5
    2370:	0000122d 	andeq	r1, r0, sp, lsr #4
    2374:	c709db01 	strgt	sp, [r9, -r1, lsl #22]
    2378:	02000000 	andeq	r0, r0, #0
    237c:	2c167491 	cfldrscs	mvf7, [r6], {145}	; 0x91
    2380:	01000013 	tsteq	r0, r3, lsl r0
    2384:	014c09db 	ldrdeq	r0, [ip, #-155]	; 0xffffff65
    2388:	91020000 	mrsls	r0, (UNDEF: 2)
    238c:	95150073 	ldrls	r0, [r5, #-115]	; 0xffffff8d
    2390:	01000015 	tsteq	r0, r5, lsl r0
    2394:	133c09aa 	teqne	ip, #2785280	; 0x2a8000
    2398:	00402000 	subeq	r2, r0, r0
    239c:	9c010000 	stcls	0, cr0, [r1], {-0}
    23a0:	0000061e 	andeq	r0, r0, lr, lsl r6
    23a4:	00178016 	andseq	r8, r7, r6, lsl r0
    23a8:	09aa0100 	stmibeq	sl!, {r8}
    23ac:	000000c7 	andeq	r0, r0, r7, asr #1
    23b0:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    23b4:	0000132c 	andeq	r1, r0, ip, lsr #6
    23b8:	4c09aa01 			; <UNDEFINED> instruction: 0x4c09aa01
    23bc:	02000001 	andeq	r0, r0, #1
    23c0:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
    23c4:	000011cb 	andeq	r1, r0, fp, asr #3
    23c8:	fc097b01 	stc2	11, cr7, [r9], {1}	; <UNPREDICTABLE>
    23cc:	40200012 	eormi	r0, r0, r2, lsl r0
    23d0:	01000000 	mrseq	r0, (UNDEF: 0)
    23d4:	0006539c 	muleq	r6, ip, r3
    23d8:	139b1600 	orrsne	r1, fp, #0, 12
    23dc:	7b010000 	blvc	423e4 <startup-0x1ffbdc1c>
    23e0:	0000c709 	andeq	ip, r0, r9, lsl #14
    23e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    23e8:	00132c16 	andseq	r2, r3, r6, lsl ip
    23ec:	097b0100 	ldmdbeq	fp!, {r8}^
    23f0:	0000014c 	andeq	r0, r0, ip, asr #2
    23f4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    23f8:	0012b015 	andseq	fp, r2, r5, lsl r0
    23fc:	09450100 	stmdbeq	r5, {r8}^
    2400:	200012bc 			; <UNDEFINED> instruction: 0x200012bc
    2404:	00000040 	andeq	r0, r0, r0, asr #32
    2408:	06889c01 	streq	r9, [r8], r1, lsl #24
    240c:	74160000 	ldrvc	r0, [r6], #-0
    2410:	01000014 	tsteq	r0, r4, lsl r0
    2414:	00c70945 	sbceq	r0, r7, r5, asr #18
    2418:	91020000 	mrsls	r0, (UNDEF: 2)
    241c:	132c1674 			; <UNDEFINED> instruction: 0x132c1674
    2420:	45010000 	strmi	r0, [r1, #-0]
    2424:	00014c09 	andeq	r4, r1, r9, lsl #24
    2428:	73910200 	orrsvc	r0, r1, #0, 4
    242c:	165a1500 	ldrbne	r1, [sl], -r0, lsl #10
    2430:	2a010000 	bcs	42438 <startup-0x1ffbdbc8>
    2434:	00127c09 	andseq	r7, r2, r9, lsl #24
    2438:	00004020 	andeq	r4, r0, r0, lsr #32
    243c:	bd9c0100 	ldflts	f0, [ip]
    2440:	16000006 	strne	r0, [r0], -r6
    2444:	00001465 	andeq	r1, r0, r5, ror #8
    2448:	c7092a01 	strgt	r2, [r9, -r1, lsl #20]
    244c:	02000000 	andeq	r0, r0, #0
    2450:	2c167491 	cfldrscs	mvf7, [r6], {145}	; 0x91
    2454:	01000013 	tsteq	r0, r3, lsl r0
    2458:	014c092a 	cmpeq	ip, sl, lsr #18
    245c:	91020000 	mrsls	r0, (UNDEF: 2)
    2460:	de150073 	mrcle	0, 0, r0, cr5, cr3, {3}
    2464:	01000012 	tsteq	r0, r2, lsl r0
    2468:	123c090d 	eorsne	r0, ip, #212992	; 0x34000
    246c:	00402000 	subeq	r2, r0, r0
    2470:	9c010000 	stcls	0, cr0, [r1], {-0}
    2474:	000006f2 	strdeq	r0, [r0], -r2
    2478:	00122d16 	andseq	r2, r2, r6, lsl sp
    247c:	090d0100 	stmdbeq	sp, {r8}
    2480:	000000c7 	andeq	r0, r0, r7, asr #1
    2484:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    2488:	0000132c 	andeq	r1, r0, ip, lsr #6
    248c:	4c090d01 	stcmi	13, cr0, [r9], {1}
    2490:	02000001 	andeq	r0, r0, #1
    2494:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
    2498:	0000171a 	andeq	r1, r0, sl, lsl r7
    249c:	fc08e301 	stc2	3, cr14, [r8], {1}
    24a0:	40200011 	eormi	r0, r0, r1, lsl r0
    24a4:	01000000 	mrseq	r0, (UNDEF: 0)
    24a8:	0007279c 	muleq	r7, ip, r7
    24ac:	17801600 	strne	r1, [r0, r0, lsl #12]
    24b0:	e3010000 	movw	r0, #4096	; 0x1000
    24b4:	0000c708 	andeq	ip, r0, r8, lsl #14
    24b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    24bc:	00132c16 	andseq	r2, r3, r6, lsl ip
    24c0:	08e30100 	stmiaeq	r3!, {r8}^
    24c4:	0000014c 	andeq	r0, r0, ip, asr #2
    24c8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    24cc:	0017cf15 	andseq	ip, r7, r5, lsl pc
    24d0:	08af0100 	stmiaeq	pc!, {r8}	; <UNPREDICTABLE>
    24d4:	200011bc 			; <UNDEFINED> instruction: 0x200011bc
    24d8:	00000040 	andeq	r0, r0, r0, asr #32
    24dc:	075c9c01 	ldrbeq	r9, [ip, -r1, lsl #24]
    24e0:	9b160000 	blls	5824e8 <startup-0x1fa7db18>
    24e4:	01000013 	tsteq	r0, r3, lsl r0
    24e8:	00c708af 	sbceq	r0, r7, pc, lsr #17
    24ec:	91020000 	mrsls	r0, (UNDEF: 2)
    24f0:	132c1674 			; <UNDEFINED> instruction: 0x132c1674
    24f4:	af010000 	svcge	0x00010000
    24f8:	00014c08 	andeq	r4, r1, r8, lsl #24
    24fc:	73910200 	orrsvc	r0, r1, #0, 4
    2500:	18491500 	stmdane	r9, {r8, sl, ip}^
    2504:	76010000 	strvc	r0, [r1], -r0
    2508:	00117c08 	andseq	r7, r1, r8, lsl #24
    250c:	00004020 	andeq	r4, r0, r0, lsr #32
    2510:	919c0100 	orrsls	r0, ip, r0, lsl #2
    2514:	16000007 	strne	r0, [r0], -r7
    2518:	00001474 	andeq	r1, r0, r4, ror r4
    251c:	c7087601 	strgt	r7, [r8, -r1, lsl #12]
    2520:	02000000 	andeq	r0, r0, #0
    2524:	2c167491 	cfldrscs	mvf7, [r6], {145}	; 0x91
    2528:	01000013 	tsteq	r0, r3, lsl r0
    252c:	014c0876 	hvceq	49286	; 0xc086
    2530:	91020000 	mrsls	r0, (UNDEF: 2)
    2534:	89150073 	ldmdbhi	r5, {r0, r1, r4, r5, r6}
    2538:	01000012 	tsteq	r0, r2, lsl r0
    253c:	113c0858 	teqne	ip, r8, asr r8
    2540:	00402000 	subeq	r2, r0, r0
    2544:	9c010000 	stcls	0, cr0, [r1], {-0}
    2548:	000007c6 	andeq	r0, r0, r6, asr #15
    254c:	00146516 	andseq	r6, r4, r6, lsl r5
    2550:	08580100 	ldmdaeq	r8, {r8}^
    2554:	000000c7 	andeq	r0, r0, r7, asr #1
    2558:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    255c:	0000132c 	andeq	r1, r0, ip, lsr #6
    2560:	4c085801 	stcmi	8, cr5, [r8], {1}
    2564:	02000001 	andeq	r0, r0, #1
    2568:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
    256c:	0000163a 	andeq	r1, r0, sl, lsr r6
    2570:	fc083801 	stc2	8, cr3, [r8], {1}
    2574:	40200010 	eormi	r0, r0, r0, lsl r0
    2578:	01000000 	mrseq	r0, (UNDEF: 0)
    257c:	0007fb9c 	muleq	r7, ip, fp
    2580:	122d1600 	eorne	r1, sp, #0, 12
    2584:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    2588:	0000c708 	andeq	ip, r0, r8, lsl #14
    258c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2590:	00132c16 	andseq	r2, r3, r6, lsl ip
    2594:	08380100 	ldmdaeq	r8!, {r8}
    2598:	0000014c 	andeq	r0, r0, ip, asr #2
    259c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    25a0:	00178f15 	andseq	r8, r7, r5, lsl pc
    25a4:	080e0100 	stmdaeq	lr, {r8}
    25a8:	200010e0 	andcs	r1, r0, r0, ror #1
    25ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    25b0:	08219c01 	stmdaeq	r1!, {r0, sl, fp, ip, pc}
    25b4:	1b160000 	blne	5825bc <startup-0x1fa7da44>
    25b8:	01000016 	tsteq	r0, r6, lsl r0
    25bc:	00c7080e 	sbceq	r0, r7, lr, lsl #16
    25c0:	91020000 	mrsls	r0, (UNDEF: 2)
    25c4:	17150074 			; <UNDEFINED> instruction: 0x17150074
    25c8:	01000014 	tsteq	r0, r4, lsl r0
    25cc:	10a4078e 	adcne	r0, r4, lr, lsl #15
    25d0:	003c2000 	eorseq	r2, ip, r0
    25d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    25d8:	00000856 	andeq	r0, r0, r6, asr r8
    25dc:	00119216 	andseq	r9, r1, r6, lsl r2
    25e0:	078e0100 	streq	r0, [lr, r0, lsl #2]
    25e4:	000000c7 	andeq	r0, r0, r7, asr #1
    25e8:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    25ec:	00001272 	andeq	r1, r0, r2, ror r2
    25f0:	c7079001 	strgt	r9, [r7, -r1]
    25f4:	02000000 	andeq	r0, r0, #0
    25f8:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    25fc:	000011e7 	andeq	r1, r0, r7, ror #3
    2600:	64072b01 	strvs	r2, [r7], #-2817	; 0xfffff4ff
    2604:	40200010 	eormi	r0, r0, r0, lsl r0
    2608:	01000000 	mrseq	r0, (UNDEF: 0)
    260c:	00088b9c 	muleq	r8, ip, fp
    2610:	11831600 	orrne	r1, r3, r0, lsl #12
    2614:	2b010000 	blcs	4261c <startup-0x1ffbd9e4>
    2618:	0000c707 	andeq	ip, r0, r7, lsl #14
    261c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2620:	00127218 	andseq	r7, r2, r8, lsl r2
    2624:	072d0100 	streq	r0, [sp, -r0, lsl #2]!
    2628:	000000c7 	andeq	r0, r0, r7, asr #1
    262c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2630:	00148f15 	andseq	r8, r4, r5, lsl pc
    2634:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    2638:	20001028 	andcs	r1, r0, r8, lsr #32
    263c:	0000003c 	andeq	r0, r0, ip, lsr r0
    2640:	08c09c01 	stmiaeq	r0, {r0, sl, fp, ip, pc}^
    2644:	47160000 	ldrmi	r0, [r6, -r0]
    2648:	01000015 	tsteq	r0, r5, lsl r0
    264c:	00c7070b 	sbceq	r0, r7, fp, lsl #14
    2650:	91020000 	mrsls	r0, (UNDEF: 2)
    2654:	1272186c 	rsbsne	r1, r2, #108, 16	; 0x6c0000
    2658:	0d010000 	stceq	0, cr0, [r1, #-0]
    265c:	0000c707 	andeq	ip, r0, r7, lsl #14
    2660:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2664:	15ec1500 	strbne	r1, [ip, #1280]!	; 0x500
    2668:	ea010000 	b	42670 <startup-0x1ffbd990>
    266c:	000fec06 	andeq	lr, pc, r6, lsl #24
    2670:	00003c20 	andeq	r3, r0, r0, lsr #24
    2674:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
    2678:	16000008 	strne	r0, [r0], -r8
    267c:	00001400 	andeq	r1, r0, r0, lsl #8
    2680:	c706ea01 	strgt	lr, [r6, -r1, lsl #20]
    2684:	02000000 	andeq	r0, r0, #0
    2688:	72186c91 	andsvc	r6, r8, #37120	; 0x9100
    268c:	01000012 	tsteq	r0, r2, lsl r0
    2690:	00c706ec 	sbceq	r0, r7, ip, ror #13
    2694:	91020000 	mrsls	r0, (UNDEF: 2)
    2698:	c7150074 			; <UNDEFINED> instruction: 0xc7150074
    269c:	01000012 	tsteq	r0, r2, lsl r0
    26a0:	0fb006c6 	svceq	0x00b006c6
    26a4:	003c2000 	eorseq	r2, ip, r0
    26a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    26ac:	0000092a 	andeq	r0, r0, sl, lsr #18
    26b0:	0013e916 	andseq	lr, r3, r6, lsl r9
    26b4:	06c60100 	strbeq	r0, [r6], r0, lsl #2
    26b8:	000000c7 	andeq	r0, r0, r7, asr #1
    26bc:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    26c0:	00001272 	andeq	r1, r0, r2, ror r2
    26c4:	c706c801 	strgt	ip, [r6, -r1, lsl #16]
    26c8:	02000000 	andeq	r0, r0, #0
    26cc:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    26d0:	000017a4 	andeq	r1, r0, r4, lsr #15
    26d4:	9406ab01 	strls	sl, [r6], #-2817	; 0xfffff4ff
    26d8:	1c20000f 	stcne	0, cr0, [r0], #-60	; 0xffffffc4
    26dc:	01000000 	mrseq	r0, (UNDEF: 0)
    26e0:	0009509c 	muleq	r9, ip, r0
    26e4:	15bb1600 	ldrne	r1, [fp, #1536]!	; 0x600
    26e8:	ab010000 	blge	426f0 <startup-0x1ffbd910>
    26ec:	0000c706 	andeq	ip, r0, r6, lsl #14
    26f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    26f4:	13351500 	teqne	r5, #0, 10
    26f8:	ef010000 	svc	0x00010000
    26fc:	000f7405 	andeq	r7, pc, r5, lsl #8
    2700:	00002020 	andeq	r2, r0, r0, lsr #32
    2704:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
    2708:	16000009 	strne	r0, [r0], -r9
    270c:	0000132c 	andeq	r1, r0, ip, lsr #6
    2710:	4c05ef01 	stcmi	15, cr14, [r5], {1}
    2714:	02000001 	andeq	r0, r0, #1
    2718:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
    271c:	000014a9 	andeq	r1, r0, r9, lsr #9
    2720:	5405de01 	strpl	sp, [r5], #-3585	; 0xfffff1ff
    2724:	2020000f 	eorcs	r0, r0, pc
    2728:	01000000 	mrseq	r0, (UNDEF: 0)
    272c:	00099c9c 	muleq	r9, ip, ip
    2730:	132c1600 			; <UNDEFINED> instruction: 0x132c1600
    2734:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    2738:	00014c05 	andeq	r4, r1, r5, lsl #24
    273c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2740:	181b1500 	ldmdane	fp, {r8, sl, ip}
    2744:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    2748:	000ef405 	andeq	pc, lr, r5, lsl #8
    274c:	00006020 	andeq	r6, r0, r0, lsr #32
    2750:	d19c0100 	orrsle	r0, ip, r0, lsl #2
    2754:	16000009 	strne	r0, [r0], -r9
    2758:	000013d8 	ldrdeq	r1, [r0], -r8
    275c:	c705be01 	strgt	fp, [r5, -r1, lsl #28]
    2760:	02000000 	andeq	r0, r0, #0
    2764:	72186c91 	andsvc	r6, r8, #37120	; 0x9100
    2768:	01000012 	tsteq	r0, r2, lsl r0
    276c:	00c705c0 	sbceq	r0, r7, r0, asr #11
    2770:	91020000 	mrsls	r0, (UNDEF: 2)
    2774:	081b0074 	ldmdaeq	fp, {r2, r4, r5, r6}
    2778:	01000017 	tsteq	r0, r7, lsl r0
    277c:	0d9c0525 	cfldr32eq	mvfx0, [ip, #148]	; 0x94
    2780:	01582000 	cmpeq	r8, r0
    2784:	9c010000 	stcls	0, cr0, [r1], {-0}
    2788:	00000a51 	andeq	r0, r0, r1, asr sl
    278c:	00123c16 	andseq	r3, r2, r6, lsl ip
    2790:	05250100 	streq	r0, [r5, #-256]!	; 0xffffff00
    2794:	00000a51 	andeq	r0, r0, r1, asr sl
    2798:	1a5c9102 	bne	1726ba8 <startup-0x1e8d9458>
    279c:	00706d74 	rsbseq	r6, r0, r4, ror sp
    27a0:	c7052701 	strgt	r2, [r5, -r1, lsl #14]
    27a4:	02000000 	andeq	r0, r0, #0
    27a8:	d2187091 	andsle	r7, r8, #145	; 0x91
    27ac:	01000013 	tsteq	r0, r3, lsl r0
    27b0:	00c70527 	sbceq	r0, r7, r7, lsr #10
    27b4:	91020000 	mrsls	r0, (UNDEF: 2)
    27b8:	0685186c 	streq	r1, [r5], ip, ror #16
    27bc:	27010000 	strcs	r0, [r1, -r0]
    27c0:	0000c705 	andeq	ip, r0, r5, lsl #14
    27c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    27c8:	00062618 	andeq	r2, r6, r8, lsl r6
    27cc:	05270100 	streq	r0, [r7, #-256]!	; 0xffffff00
    27d0:	000000c7 	andeq	r0, r0, r7, asr #1
    27d4:	18689102 	stmdane	r8!, {r1, r8, ip, pc}^
    27d8:	00000617 	andeq	r0, r0, r7, lsl r6
    27dc:	c7052701 	strgt	r2, [r5, -r1, lsl #14]
    27e0:	02000000 	andeq	r0, r0, #0
    27e4:	21186491 			; <UNDEFINED> instruction: 0x21186491
    27e8:	01000006 	tsteq	r0, r6
    27ec:	00c70527 	sbceq	r0, r7, r7, lsr #10
    27f0:	91020000 	mrsls	r0, (UNDEF: 2)
    27f4:	041c0060 	ldreq	r0, [ip], #-96	; 0xffffffa0
    27f8:	00000387 	andeq	r0, r0, r7, lsl #7
    27fc:	00168e15 	andseq	r8, r6, r5, lsl lr
    2800:	04f10100 	ldrbteq	r0, [r1], #256	; 0x100
    2804:	20000d60 	andcs	r0, r0, r0, ror #26
    2808:	0000003c 	andeq	r0, r0, ip, lsr r0
    280c:	0a8c9c01 	beq	fe329818 <APBAHBPrescTable+0xde328094>
    2810:	64160000 	ldrvs	r0, [r6], #-0
    2814:	01000011 	tsteq	r0, r1, lsl r0
    2818:	00c704f1 	strdeq	r0, [r7], #65	; 0x41
    281c:	91020000 	mrsls	r0, (UNDEF: 2)
    2820:	1272186c 	rsbsne	r1, r2, #108, 16	; 0x6c0000
    2824:	f3010000 	vhadd.u8	d0, d1, d0
    2828:	0000c704 	andeq	ip, r0, r4, lsl #14
    282c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2830:	12a01500 	adcne	r1, r0, #0, 10
    2834:	d2010000 	andle	r0, r1, #0
    2838:	000d2804 	andeq	r2, sp, r4, lsl #16
    283c:	00003820 	andeq	r3, r0, r0, lsr #16
    2840:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    2844:	1600000a 	strne	r0, [r0], -sl
    2848:	00001164 	andeq	r1, r0, r4, ror #2
    284c:	c704d201 	strgt	sp, [r4, -r1, lsl #4]
    2850:	02000000 	andeq	r0, r0, #0
    2854:	72186c91 	andsvc	r6, r8, #37120	; 0x9100
    2858:	01000012 	tsteq	r0, r2, lsl r0
    285c:	00c704d4 	ldrdeq	r0, [r7], #68	; 0x44
    2860:	91020000 	mrsls	r0, (UNDEF: 2)
    2864:	f5150074 			; <UNDEFINED> instruction: 0xf5150074
    2868:	01000012 	tsteq	r0, r2, lsl r0
    286c:	0cf404b3 	cfldrdeq	mvd0, [r4], #716	; 0x2cc
    2870:	00342000 	eorseq	r2, r4, r0
    2874:	9c010000 	stcls	0, cr0, [r1], {-0}
    2878:	00000af6 	strdeq	r0, [r0], -r6
    287c:	0013b916 	andseq	fp, r3, r6, lsl r9
    2880:	04b30100 	ldrteq	r0, [r3], #256	; 0x100
    2884:	000000c7 	andeq	r0, r0, r7, asr #1
    2888:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    288c:	00001272 	andeq	r1, r0, r2, ror r2
    2890:	c704b501 	strgt	fp, [r4, -r1, lsl #10]
    2894:	02000000 	andeq	r0, r0, #0
    2898:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    289c:	00001362 	andeq	r1, r0, r2, ror #6
    28a0:	97049a01 	strls	r9, [r4, -r1, lsl #20]
    28a4:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    28a8:	1c20000c 	stcne	0, cr0, [r0], #-48	; 0xffffffd0
    28ac:	01000000 	mrseq	r0, (UNDEF: 0)
    28b0:	1304159c 	movwne	r1, #17820	; 0x459c
    28b4:	7d010000 	stcvc	0, cr0, [r1, #-0]
    28b8:	000ca404 	andeq	sl, ip, r4, lsl #8
    28bc:	00003420 	andeq	r3, r0, r0, lsr #8
    28c0:	419c0100 	orrsmi	r0, ip, r0, lsl #2
    28c4:	1600000b 	strne	r0, [r0], -fp
    28c8:	0000169e 	muleq	r0, lr, r6
    28cc:	c7047d01 	strgt	r7, [r4, -r1, lsl #26]
    28d0:	02000000 	andeq	r0, r0, #0
    28d4:	72186c91 	andsvc	r6, r8, #37120	; 0x9100
    28d8:	01000012 	tsteq	r0, r2, lsl r0
    28dc:	00c7047f 	sbceq	r0, r7, pc, ror r4
    28e0:	91020000 	mrsls	r0, (UNDEF: 2)
    28e4:	b5150074 	ldrlt	r0, [r5, #-116]	; 0xffffff8c
    28e8:	01000017 	tsteq	r0, r7, lsl r0
    28ec:	0c6803b5 	stcleq	3, cr0, [r8], #-724	; 0xfffffd2c
    28f0:	003c2000 	eorseq	r2, ip, r0
    28f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    28f8:	00000b85 	andeq	r0, r0, r5, lsl #23
    28fc:	0015ac16 	andseq	sl, r5, r6, lsl ip
    2900:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    2904:	000000c7 	andeq	r0, r0, r7, asr #1
    2908:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
    290c:	00001483 	andeq	r1, r0, r3, lsl #9
    2910:	c703b501 	strgt	fp, [r3, -r1, lsl #10]
    2914:	02000000 	andeq	r0, r0, #0
    2918:	72186891 	andsvc	r6, r8, #9502720	; 0x910000
    291c:	01000012 	tsteq	r0, r2, lsl r0
    2920:	00c703b7 	strheq	r0, [r7], #55	; 0x37
    2924:	91020000 	mrsls	r0, (UNDEF: 2)
    2928:	aa150074 	bge	542b00 <startup-0x1fabd500>
    292c:	01000013 	tsteq	r0, r3, lsl r0
    2930:	0c280388 	stceq	3, cr0, [r8], #-544	; 0xfffffde0
    2934:	00402000 	subeq	r2, r0, r0
    2938:	9c010000 	stcls	0, cr0, [r1], {-0}
    293c:	00000bc9 	andeq	r0, r0, r9, asr #23
    2940:	0011bc16 	andseq	fp, r1, r6, lsl ip
    2944:	03880100 	orreq	r0, r8, #0, 2
    2948:	000000c7 	andeq	r0, r0, r7, asr #1
    294c:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
    2950:	00001589 	andeq	r1, r0, r9, lsl #11
    2954:	c7038801 	strgt	r8, [r3, -r1, lsl #16]
    2958:	02000000 	andeq	r0, r0, #0
    295c:	72186891 	andsvc	r6, r8, #9502720	; 0x910000
    2960:	01000012 	tsteq	r0, r2, lsl r0
    2964:	00c7038a 	sbceq	r0, r7, sl, lsl #7
    2968:	91020000 	mrsls	r0, (UNDEF: 2)
    296c:	2c150074 	ldccs	0, cr0, [r5], {116}	; 0x74
    2970:	01000015 	tsteq	r0, r5, lsl r0
    2974:	0c08036f 	stceq	3, cr0, [r8], {111}	; 0x6f
    2978:	00202000 	eoreq	r2, r0, r0
    297c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2980:	00000bef 	andeq	r0, r0, pc, ror #23
    2984:	00132c16 	andseq	r2, r3, r6, lsl ip
    2988:	036f0100 	cmneq	pc, #0, 2
    298c:	0000014c 	andeq	r0, r0, ip, asr #2
    2990:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2994:	00117515 	andseq	r7, r1, r5, lsl r5
    2998:	035d0100 	cmpeq	sp, #0, 2
    299c:	20000be8 	andcs	r0, r0, r8, ror #23
    29a0:	00000020 	andeq	r0, r0, r0, lsr #32
    29a4:	0c159c01 	ldceq	12, cr9, [r5], {1}
    29a8:	2c160000 	ldccs	0, cr0, [r6], {-0}
    29ac:	01000013 	tsteq	r0, r3, lsl r0
    29b0:	014c035d 	cmpeq	ip, sp, asr r3
    29b4:	91020000 	mrsls	r0, (UNDEF: 2)
    29b8:	56150077 			; <UNDEFINED> instruction: 0x56150077
    29bc:	01000015 	tsteq	r0, r5, lsl r0
    29c0:	0bb80349 	bleq	fee036ec <APBAHBPrescTable+0xdee01f68>
    29c4:	00302000 	eorseq	r2, r0, r0
    29c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    29cc:	00000c59 	andeq	r0, r0, r9, asr ip
    29d0:	00160316 	andseq	r0, r6, r6, lsl r3
    29d4:	03490100 	movteq	r0, #37120	; 0x9100
    29d8:	000000c7 	andeq	r0, r0, r7, asr #1
    29dc:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    29e0:	0000160b 	andeq	r1, r0, fp, lsl #12
    29e4:	c7034901 	strgt	r4, [r3, -r1, lsl #18]
    29e8:	02000000 	andeq	r0, r0, #0
    29ec:	13167091 	tstne	r6, #145	; 0x91
    29f0:	01000016 	tsteq	r0, r6, lsl r0
    29f4:	00c70349 	sbceq	r0, r7, r9, asr #6
    29f8:	91020000 	mrsls	r0, (UNDEF: 2)
    29fc:	c415006c 	ldrgt	r0, [r5], #-108	; 0xffffff94
    2a00:	01000013 	tsteq	r0, r3, lsl r0
    2a04:	0b9802dc 	bleq	fe60357c <APBAHBPrescTable+0xde601df8>
    2a08:	00202000 	eoreq	r2, r0, r0
    2a0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a10:	00000c7f 	andeq	r0, r0, pc, ror ip
    2a14:	00132c16 	andseq	r2, r3, r6, lsl ip
    2a18:	02dc0100 	sbcseq	r0, ip, #0, 2
    2a1c:	0000014c 	andeq	r0, r0, ip, asr #2
    2a20:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2a24:	00144915 	andseq	r4, r4, r5, lsl r9
    2a28:	02510100 	subseq	r0, r1, #0, 2
    2a2c:	20000b70 	andcs	r0, r0, r0, ror fp
    2a30:	00000028 	andeq	r0, r0, r8, lsr #32
    2a34:	0cb49c01 	ldceq	12, cr9, [r4], #4
    2a38:	00160000 	andseq	r0, r6, r0
    2a3c:	01000017 	tsteq	r0, r7, lsl r0
    2a40:	00c70251 	sbceq	r0, r7, r1, asr r2
    2a44:	91020000 	mrsls	r0, (UNDEF: 2)
    2a48:	173c1674 			; <UNDEFINED> instruction: 0x173c1674
    2a4c:	51010000 	mrspl	r0, (UNDEF: 1)
    2a50:	0000c702 	andeq	ip, r0, r2, lsl #14
    2a54:	70910200 	addsvc	r0, r1, r0, lsl #4
    2a58:	162f1500 	strtne	r1, [pc], -r0, lsl #10
    2a5c:	33010000 	movwcc	r0, #4096	; 0x1000
    2a60:	000b5002 	andeq	r5, fp, r2
    2a64:	00002020 	andeq	r2, r0, r0, lsr #32
    2a68:	da9c0100 	ble	fe702e70 <APBAHBPrescTable+0xde7016ec>
    2a6c:	1600000c 	strne	r0, [r0], -ip
    2a70:	0000132c 	andeq	r1, r0, ip, lsr #6
    2a74:	4c023301 	stcmi	3, cr3, [r2], {1}
    2a78:	02000001 	andeq	r0, r0, #1
    2a7c:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
    2a80:	000017fb 	strdeq	r1, [r0], -fp
    2a84:	14021b01 	strne	r1, [r2], #-2817	; 0xfffff4ff
    2a88:	3c20000b 	stccc	0, cr0, [r0], #-44	; 0xffffffd4
    2a8c:	01000000 	mrseq	r0, (UNDEF: 0)
    2a90:	000d3c9c 	muleq	sp, ip, ip
    2a94:	13541600 	cmpne	r4, #0, 12
    2a98:	1b010000 	blne	42aa0 <startup-0x1ffbd560>
    2a9c:	0000c702 	andeq	ip, r0, r2, lsl #14
    2aa0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2aa4:	00122816 	andseq	r2, r2, r6, lsl r8
    2aa8:	021b0100 	andseq	r0, fp, #0, 2
    2aac:	000000c7 	andeq	r0, r0, r7, asr #1
    2ab0:	16709102 	ldrbtne	r9, [r0], -r2, lsl #2
    2ab4:	000011e2 	andeq	r1, r0, r2, ror #3
    2ab8:	c7021b01 	strgt	r1, [r2, -r1, lsl #22]
    2abc:	02000000 	andeq	r0, r0, #0
    2ac0:	01166c91 			; <UNDEFINED> instruction: 0x01166c91
    2ac4:	01000012 	tsteq	r0, r2, lsl r0
    2ac8:	00c7021b 	sbceq	r0, r7, fp, lsl r2
    2acc:	91020000 	mrsls	r0, (UNDEF: 2)
    2ad0:	12061668 	andne	r1, r6, #104, 12	; 0x6800000
    2ad4:	1b010000 	blne	42adc <startup-0x1ffbd524>
    2ad8:	0000c702 	andeq	ip, r0, r2, lsl #14
    2adc:	00910200 	addseq	r0, r1, r0, lsl #4
    2ae0:	17c41500 	strbne	r1, [r4, r0, lsl #10]
    2ae4:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    2ae8:	000af401 	andeq	pc, sl, r1, lsl #8
    2aec:	00002020 	andeq	r2, r0, r0, lsr #32
    2af0:	629c0100 	addsvs	r0, ip, #0, 2
    2af4:	1600000d 	strne	r0, [r0], -sp
    2af8:	0000132c 	andeq	r1, r0, ip, lsr #6
    2afc:	4c01b801 	stcmi	8, cr11, [r1], {1}
    2b00:	02000001 	andeq	r0, r0, #1
    2b04:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
    2b08:	00001315 	andeq	r1, r0, r5, lsl r3
    2b0c:	b0019001 	andlt	r9, r1, r1
    2b10:	4420000a 	strtmi	r0, [r0], #-10
    2b14:	01000000 	mrseq	r0, (UNDEF: 0)
    2b18:	000d889c 	muleq	sp, ip, r8
    2b1c:	116d1600 	cmnne	sp, r0, lsl #12
    2b20:	90010000 	andls	r0, r1, r0
    2b24:	00009701 	andeq	r9, r0, r1, lsl #14
    2b28:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2b2c:	145a1500 	ldrbne	r1, [sl], #-1280	; 0xfffffb00
    2b30:	77010000 	strvc	r0, [r1, -r0]
    2b34:	000a9001 	andeq	r9, sl, r1
    2b38:	00002020 	andeq	r2, r0, r0, lsr #32
    2b3c:	ae9c0100 	fmlgee	f0, f4, f0
    2b40:	1600000d 	strne	r0, [r0], -sp
    2b44:	0000132c 	andeq	r1, r0, ip, lsr #6
    2b48:	4c017701 	stcmi	7, cr7, [r1], {1}
    2b4c:	02000001 	andeq	r0, r0, #1
    2b50:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
    2b54:	000016d8 	ldrdeq	r1, [r0], -r8
    2b58:	52015301 	andpl	r5, r1, #67108864	; 0x4000000
    2b5c:	3e20000a 	cdpcc	0, 2, cr0, cr0, cr10, {0}
    2b60:	01000000 	mrseq	r0, (UNDEF: 0)
    2b64:	000de39c 	muleq	sp, ip, r3
    2b68:	16e21600 	strbtne	r1, [r2], r0, lsl #12
    2b6c:	53010000 	movwpl	r0, #4096	; 0x1000
    2b70:	00009701 	andeq	r9, r0, r1, lsl #14
    2b74:	6f910200 	svcvs	0x00910200
    2b78:	00127218 	andseq	r7, r2, r8, lsl r2
    2b7c:	01550100 	cmpeq	r5, r0, lsl #2
    2b80:	000000c7 	andeq	r0, r0, r7, asr #1
    2b84:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2b88:	0013761e 	andseq	r7, r3, lr, lsl r6
    2b8c:	01340100 	teqeq	r4, r0, lsl #2
    2b90:	00000173 	andeq	r0, r0, r3, ror r1
    2b94:	200009f4 	strdcs	r0, [r0], -r4
    2b98:	0000005e 	andeq	r0, r0, lr, asr r0
    2b9c:	0e2b9c01 	cdpeq	12, 2, cr9, cr11, cr1, {0}
    2ba0:	71180000 	tstvc	r8, r0
    2ba4:	01000017 	tsteq	r0, r7, lsl r0
    2ba8:	00d20136 	sbcseq	r0, r2, r6, lsr r1
    2bac:	91020000 	mrsls	r0, (UNDEF: 2)
    2bb0:	16f91868 	ldrbtne	r1, [r9], r8, ror #16
    2bb4:	37010000 	strcc	r0, [r1, -r0]
    2bb8:	00017301 	andeq	r7, r1, r1, lsl #6
    2bbc:	6f910200 	svcvs	0x00910200
    2bc0:	0016f618 	andseq	pc, r6, r8, lsl r6	; <UNPREDICTABLE>
    2bc4:	01380100 	teqeq	r8, r0, lsl #2
    2bc8:	00000119 	andeq	r0, r0, r9, lsl r1
    2bcc:	006e9102 	rsbeq	r9, lr, r2, lsl #2
    2bd0:	0015de15 	andseq	sp, r5, r5, lsl lr
    2bd4:	011c0100 	tsteq	ip, r0, lsl #2
    2bd8:	200009cc 	andcs	r0, r0, ip, asr #19
    2bdc:	00000028 	andeq	r0, r0, r8, lsr #32
    2be0:	0e519c01 	cdpeq	12, 5, cr9, cr1, cr1, {0}
    2be4:	af160000 	svcge	0x00160000
    2be8:	01000016 	tsteq	r0, r6, lsl r0
    2bec:	0097011c 	addseq	r0, r7, ip, lsl r1
    2bf0:	91020000 	mrsls	r0, (UNDEF: 2)
    2bf4:	311f0077 	tstcc	pc, r7, ror r0	; <UNPREDICTABLE>
    2bf8:	01000017 	tsteq	r0, r7, lsl r0
    2bfc:	00095ce1 	andeq	r5, r9, r1, ror #25
    2c00:	00007020 	andeq	r7, r0, r0, lsr #32
    2c04:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	35050000 	strcc	r0, [r5, #-0]
  38:	00134900 	andseq	r4, r3, r0, lsl #18
  3c:	00340600 	eorseq	r0, r4, r0, lsl #12
  40:	0b3a0e03 	bleq	e83854 <startup-0x1f17c7ac>
  44:	1349053b 	movtne	r0, #38203	; 0x953b
  48:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  4c:	34070000 	strcc	r0, [r7], #-0
  50:	3a0e0300 	bcc	380c58 <startup-0x1fc7f3a8>
  54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  58:	3c193f13 	ldccc	15, cr3, [r9], {19}
  5c:	08000019 	stmdaeq	r0, {r0, r3, r4}
  60:	0b3e0104 	bleq	f80478 <startup-0x1f07fb88>
  64:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  6c:	00001301 	andeq	r1, r0, r1, lsl #6
  70:	03002809 	movweq	r2, #2057	; 0x809
  74:	000b1c0e 	andeq	r1, fp, lr, lsl #24
  78:	01130a00 	tsteq	r3, r0, lsl #20
  7c:	0b3a0b0b 	bleq	e82cb0 <startup-0x1f17d350>
  80:	1301053b 	movwne	r0, #5435	; 0x153b
  84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	000b3813 	andeq	r3, fp, r3, lsl r8
  94:	000d0c00 	andeq	r0, sp, r0, lsl #24
  98:	0b3a0803 	bleq	e820ac <startup-0x1f17df54>
  9c:	1349053b 	movtne	r0, #38203	; 0x953b
  a0:	00000b38 	andeq	r0, r0, r8, lsr fp
  a4:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
  a8:	00130113 	andseq	r0, r3, r3, lsl r1
  ac:	00210e00 	eoreq	r0, r1, r0, lsl #28
  b0:	0b2f1349 	bleq	bc4ddc <startup-0x1f43b224>
  b4:	160f0000 	strne	r0, [pc], -r0
  b8:	3a0e0300 	bcc	380cc0 <startup-0x1fc7f340>
  bc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  c0:	10000013 	andne	r0, r0, r3, lsl r0
  c4:	0b3e0104 	bleq	f804dc <startup-0x1f07fb24>
  c8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  cc:	0b3b0b3a 	bleq	ec2dbc <startup-0x1f13d244>
  d0:	00001301 	andeq	r1, r0, r1, lsl #6
  d4:	0b011311 	bleq	44d20 <startup-0x1ffbb2e0>
  d8:	3b0b3a0b 	blcc	2ce90c <startup-0x1fd316f4>
  dc:	0013010b 	andseq	r0, r3, fp, lsl #2
  e0:	000d1200 	andeq	r1, sp, r0, lsl #4
  e4:	0b3a0e03 	bleq	e838f8 <startup-0x1f17c708>
  e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  ec:	00000b38 	andeq	r0, r0, r8, lsr fp
  f0:	3f012e13 	svccc	0x00012e13
  f4:	3a0e0319 	bcc	380d60 <startup-0x1fc7f2a0>
  f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
  fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 100:	97184006 	ldrls	r4, [r8, -r6]
 104:	13011942 	movwne	r1, #6466	; 0x1942
 108:	05140000 	ldreq	r0, [r4, #-0]
 10c:	3a0e0300 	bcc	380d14 <startup-0x1fc7f2ec>
 110:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 114:	00180213 	andseq	r0, r8, r3, lsl r2
 118:	00341500 	eorseq	r1, r4, r0, lsl #10
 11c:	0b3a0e03 	bleq	e83930 <startup-0x1f17c6d0>
 120:	1349053b 	movtne	r0, #38203	; 0x953b
 124:	00001802 	andeq	r1, r0, r2, lsl #16
 128:	0b000f16 	bleq	3d88 <startup-0x1fffc278>
 12c:	0013490b 	andseq	r4, r3, fp, lsl #18
 130:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 134:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 138:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 13c:	13491927 	movtne	r1, #39207	; 0x9927
 140:	06120111 			; <UNDEFINED> instruction: 0x06120111
 144:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 148:	00130119 	andseq	r0, r3, r9, lsl r1
 14c:	00341800 	eorseq	r1, r4, r0, lsl #16
 150:	0b3a0803 	bleq	e82164 <startup-0x1f17de9c>
 154:	1349053b 	movtne	r0, #38203	; 0x953b
 158:	00001802 	andeq	r1, r0, r2, lsl #16
 15c:	3f012e19 	svccc	0x00012e19
 160:	3a0e0319 	bcc	380dcc <startup-0x1fc7f234>
 164:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 168:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 16c:	97184006 	ldrls	r4, [r8, -r6]
 170:	13011942 	movwne	r1, #6466	; 0x1942
 174:	051a0000 	ldreq	r0, [sl, #-0]
 178:	3a0e0300 	bcc	380d80 <startup-0x1fc7f280>
 17c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 180:	00180213 	andseq	r0, r8, r3, lsl r2
 184:	00341b00 	eorseq	r1, r4, r0, lsl #22
 188:	0b3a0e03 	bleq	e8399c <startup-0x1f17c664>
 18c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 190:	00001802 	andeq	r1, r0, r2, lsl #16
 194:	0300341c 	movweq	r3, #1052	; 0x41c
 198:	3b0b3a08 	blcc	2ce9c0 <startup-0x1fd31640>
 19c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1a0:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 1a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1a8:	0b3a0e03 	bleq	e839bc <startup-0x1f17c644>
 1ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1b4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1b8:	00000019 	andeq	r0, r0, r9, lsl r0
 1bc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 1c0:	030b130e 	movweq	r1, #45838	; 0xb30e
 1c4:	110e1b0e 	tstne	lr, lr, lsl #22
 1c8:	10061201 	andne	r1, r6, r1, lsl #4
 1cc:	02000017 	andeq	r0, r0, #23
 1d0:	0b0b0024 	bleq	2c0268 <startup-0x1fd3fd98>
 1d4:	0e030b3e 	vmoveq.16	d3[0], r0
 1d8:	16030000 	strne	r0, [r3], -r0
 1dc:	3a0e0300 	bcc	380de4 <startup-0x1fc7f21c>
 1e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 1e8:	0b0b0024 	bleq	2c0280 <startup-0x1fd3fd80>
 1ec:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 1f0:	35050000 	strcc	r0, [r5, #-0]
 1f4:	00134900 	andseq	r4, r3, r0, lsl #18
 1f8:	00260600 	eoreq	r0, r6, r0, lsl #12
 1fc:	00001349 	andeq	r1, r0, r9, asr #6
 200:	0b011307 	bleq	44e24 <startup-0x1ffbb1dc>
 204:	3b0b3a0b 	blcc	2cea38 <startup-0x1fd315c8>
 208:	00130105 	andseq	r0, r3, r5, lsl #2
 20c:	000d0800 	andeq	r0, sp, r0, lsl #16
 210:	0b3a0e03 	bleq	e83a24 <startup-0x1f17c5dc>
 214:	1349053b 	movtne	r0, #38203	; 0x953b
 218:	00000b38 	andeq	r0, r0, r8, lsr fp
 21c:	03000d09 	movweq	r0, #3337	; 0xd09
 220:	3b0b3a08 	blcc	2cea48 <startup-0x1fd315b8>
 224:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 228:	0a00000b 	beq	25c <startup-0x1ffffda4>
 22c:	13490101 	movtne	r0, #37121	; 0x9101
 230:	00001301 	andeq	r1, r0, r1, lsl #6
 234:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
 238:	000b2f13 	andeq	r2, fp, r3, lsl pc
 23c:	00160c00 	andseq	r0, r6, r0, lsl #24
 240:	0b3a0e03 	bleq	e83a54 <startup-0x1f17c5ac>
 244:	1349053b 	movtne	r0, #38203	; 0x953b
 248:	340d0000 	strcc	r0, [sp], #-0
 24c:	3a0e0300 	bcc	380e54 <startup-0x1fc7f1ac>
 250:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 254:	3c193f13 	ldccc	15, cr3, [r9], {19}
 258:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 25c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 260:	0b3b0b3a 	bleq	ec2f50 <startup-0x1f13d0b0>
 264:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 268:	0000193c 	andeq	r1, r0, ip, lsr r9
 26c:	3e01040f 	cdpcc	4, 0, cr0, cr1, cr15, {0}
 270:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 274:	3b0b3a13 	blcc	2ceac8 <startup-0x1fd31538>
 278:	00130105 	andseq	r0, r3, r5, lsl #2
 27c:	00281000 	eoreq	r1, r8, r0
 280:	0b1c0e03 	bleq	703a94 <startup-0x1f8fc56c>
 284:	28110000 	ldmdacs	r1, {}	; <UNPREDICTABLE>
 288:	1c080300 	stcne	3, cr0, [r8], {-0}
 28c:	1200000b 	andne	r0, r0, #11
 290:	13470034 	movtne	r0, #28724	; 0x7034
 294:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 298:	00001802 	andeq	r1, r0, r2, lsl #16
 29c:	03003413 	movweq	r3, #1043	; 0x413
 2a0:	3b0b3a0e 	blcc	2ceae0 <startup-0x1fd31520>
 2a4:	3f134905 	svccc	0x00134905
 2a8:	00180219 	andseq	r0, r8, r9, lsl r2
 2ac:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 2b0:	0b3a0e03 	bleq	e83ac4 <startup-0x1f17c53c>
 2b4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 2b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2bc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2c0:	00130119 	andseq	r0, r3, r9, lsl r1
 2c4:	00341500 	eorseq	r1, r4, r0, lsl #10
 2c8:	0b3a0e03 	bleq	e83adc <startup-0x1f17c524>
 2cc:	1349053b 	movtne	r0, #38203	; 0x953b
 2d0:	00001802 	andeq	r1, r0, r2, lsl #16
 2d4:	3f012e16 	svccc	0x00012e16
 2d8:	3a0e0319 	bcc	380f44 <startup-0x1fc7f0bc>
 2dc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 2e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2e4:	96184006 	ldrls	r4, [r8], -r6
 2e8:	13011942 	movwne	r1, #6466	; 0x1942
 2ec:	34170000 	ldrcc	r0, [r7], #-0
 2f0:	3a080300 	bcc	200ef8 <startup-0x1fdff108>
 2f4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 2f8:	00180213 	andseq	r0, r8, r3, lsl r2
 2fc:	002e1800 	eoreq	r1, lr, r0, lsl #16
 300:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 304:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 308:	01111927 	tsteq	r1, r7, lsr #18
 30c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 310:	00194296 	mulseq	r9, r6, r2
 314:	11010000 	mrsne	r0, (UNDEF: 1)
 318:	130e2501 	movwne	r2, #58625	; 0xe501
 31c:	1b0e030b 	blne	380f50 <startup-0x1fc7f0b0>
 320:	1117550e 	tstne	r7, lr, lsl #10
 324:	00171001 	andseq	r1, r7, r1
 328:	00240200 	eoreq	r0, r4, r0, lsl #4
 32c:	0b3e0b0b 	bleq	f82f60 <startup-0x1f07d0a0>
 330:	00000e03 	andeq	r0, r0, r3, lsl #28
 334:	03001603 	movweq	r1, #1539	; 0x603
 338:	3b0b3a0e 	blcc	2ceb78 <startup-0x1fd31488>
 33c:	0013490b 	andseq	r4, r3, fp, lsl #18
 340:	00240400 	eoreq	r0, r4, r0, lsl #8
 344:	0b3e0b0b 	bleq	f82f78 <startup-0x1f07d088>
 348:	00000803 	andeq	r0, r0, r3, lsl #16
 34c:	0b000f05 	bleq	3f68 <startup-0x1fffc098>
 350:	0600000b 	streq	r0, [r0], -fp
 354:	0b0b000f 	bleq	2c0398 <startup-0x1fd3fc68>
 358:	00001349 	andeq	r1, r0, r9, asr #6
 35c:	03001307 	movweq	r1, #775	; 0x307
 360:	00193c0e 	andseq	r3, r9, lr, lsl #24
 364:	00160800 	andseq	r0, r6, r0, lsl #16
 368:	0b3a0e03 	bleq	e83b7c <startup-0x1f17c484>
 36c:	1349053b 	movtne	r0, #38203	; 0x953b
 370:	17090000 	strne	r0, [r9, -r0]
 374:	3a0b0b01 	bcc	2c2f80 <startup-0x1fd3d080>
 378:	010b3b0b 	tsteq	fp, fp, lsl #22
 37c:	0a000013 	beq	3d0 <startup-0x1ffffc30>
 380:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 384:	0b3b0b3a 	bleq	ec3074 <startup-0x1f13cf8c>
 388:	00001349 	andeq	r1, r0, r9, asr #6
 38c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 390:	00130113 	andseq	r0, r3, r3, lsl r1
 394:	00210c00 	eoreq	r0, r1, r0, lsl #24
 398:	0b2f1349 	bleq	bc50c4 <startup-0x1f43af3c>
 39c:	130d0000 	movwne	r0, #53248	; 0xd000
 3a0:	3a0b0b01 	bcc	2c2fac <startup-0x1fd3d054>
 3a4:	010b3b0b 	tsteq	fp, fp, lsl #22
 3a8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 3ac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 3b0:	0b3b0b3a 	bleq	ec30a0 <startup-0x1f13cf60>
 3b4:	0b381349 	bleq	e050e0 <startup-0x1f1faf20>
 3b8:	130f0000 	movwne	r0, #61440	; 0xf000
 3bc:	0b0e0301 	bleq	380fc8 <startup-0x1fc7f038>
 3c0:	3b0b3a0b 	blcc	2cebf4 <startup-0x1fd3140c>
 3c4:	0013010b 	andseq	r0, r3, fp, lsl #2
 3c8:	000d1000 	andeq	r1, sp, r0
 3cc:	0b3a0803 	bleq	e823e0 <startup-0x1f17dc20>
 3d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3d4:	00000b38 	andeq	r0, r0, r8, lsr fp
 3d8:	03011311 	movweq	r1, #4881	; 0x1311
 3dc:	3a050b0e 	bcc	14301c <startup-0x1febcfe4>
 3e0:	010b3b0b 	tsteq	fp, fp, lsl #22
 3e4:	12000013 	andne	r0, r0, #19
 3e8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 3ec:	0b3b0b3a 	bleq	ec30dc <startup-0x1f13cf24>
 3f0:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 3f4:	15130000 	ldrne	r0, [r3, #-0]
 3f8:	00192700 	andseq	r2, r9, r0, lsl #14
 3fc:	01151400 	tsteq	r5, r0, lsl #8
 400:	13491927 	movtne	r1, #39207	; 0x9927
 404:	00001301 	andeq	r1, r0, r1, lsl #6
 408:	49000515 	stmdbmi	r0, {r0, r2, r4, r8, sl}
 40c:	16000013 			; <UNDEFINED> instruction: 0x16000013
 410:	13490026 	movtne	r0, #36902	; 0x9026
 414:	13170000 	tstne	r7, #0
 418:	0b0e0301 	bleq	381024 <startup-0x1fc7efdc>
 41c:	3b0b3a05 	blcc	2cec38 <startup-0x1fd313c8>
 420:	00130105 	andseq	r0, r3, r5, lsl #2
 424:	000d1800 	andeq	r1, sp, r0, lsl #16
 428:	0b3a0e03 	bleq	e83c3c <startup-0x1f17c3c4>
 42c:	1349053b 	movtne	r0, #38203	; 0x953b
 430:	00000b38 	andeq	r0, r0, r8, lsr fp
 434:	03000d19 	movweq	r0, #3353	; 0xd19
 438:	3b0b3a0e 	blcc	2cec78 <startup-0x1fd31388>
 43c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 440:	1a000005 	bne	45c <startup-0x1ffffba4>
 444:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 448:	0b3a0b0b 	bleq	e8307c <startup-0x1f17cf84>
 44c:	1301053b 	movwne	r0, #5435	; 0x153b
 450:	131b0000 	tstne	fp, #0
 454:	3a0b0b01 	bcc	2c3060 <startup-0x1fd3cfa0>
 458:	01053b0b 	tsteq	r5, fp, lsl #22
 45c:	1c000013 	stcne	0, cr0, [r0], {19}
 460:	0b0b0117 	bleq	2c08c4 <startup-0x1fd3f73c>
 464:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 468:	00001301 	andeq	r1, r0, r1, lsl #6
 46c:	03000d1d 	movweq	r0, #3357	; 0xd1d
 470:	3b0b3a0e 	blcc	2cecb0 <startup-0x1fd31350>
 474:	00134905 	andseq	r4, r3, r5, lsl #18
 478:	01151e00 	tsteq	r5, r0, lsl #28
 47c:	13011927 	movwne	r1, #6439	; 0x1927
 480:	341f0000 	ldrcc	r0, [pc], #-0	; 488 <startup-0x1ffffb78>
 484:	3a0e0300 	bcc	38108c <startup-0x1fc7ef74>
 488:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 48c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 490:	20000019 	andcs	r0, r0, r9, lsl r0
 494:	13490035 	movtne	r0, #36917	; 0x9035
 498:	04210000 	strteq	r0, [r1], #-0
 49c:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
 4a0:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 4a4:	3b0b3a13 	blcc	2cecf8 <startup-0x1fd31308>
 4a8:	0013010b 	andseq	r0, r3, fp, lsl #2
 4ac:	00282200 	eoreq	r2, r8, r0, lsl #4
 4b0:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
 4b4:	28230000 	stmdacs	r3!, {}	; <UNPREDICTABLE>
 4b8:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 4bc:	2400000b 	strcs	r0, [r0], #-11
 4c0:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
 4c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 4c8:	00001301 	andeq	r1, r0, r1, lsl #6
 4cc:	03000d25 	movweq	r0, #3365	; 0xd25
 4d0:	3b0b3a08 	blcc	2cecf8 <startup-0x1fd31308>
 4d4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 4d8:	26000005 	strcs	r0, [r0], -r5
 4dc:	13490021 	movtne	r0, #36897	; 0x9021
 4e0:	0000052f 	andeq	r0, r0, pc, lsr #10
 4e4:	03000d27 	movweq	r0, #3367	; 0xd27
 4e8:	3b0b3a08 	blcc	2ced10 <startup-0x1fd312f0>
 4ec:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 4f0:	2800000b 	stmdacs	r0, {r0, r1, r3}
 4f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 4f8:	0b3b0b3a 	bleq	ec31e8 <startup-0x1f13ce18>
 4fc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 500:	0000193c 	andeq	r1, r0, ip, lsr r9
 504:	3e010429 	cdpcc	4, 0, cr0, cr1, cr9, {1}
 508:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 50c:	3b0b3a13 	blcc	2ced60 <startup-0x1fd312a0>
 510:	00130105 	andseq	r0, r3, r5, lsl #2
 514:	01042a00 	tsteq	r4, r0, lsl #20
 518:	0b0b0b3e 	bleq	2c3218 <startup-0x1fd3cde8>
 51c:	0b3a1349 	bleq	e85248 <startup-0x1f17adb8>
 520:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 524:	342b0000 	strtcc	r0, [fp], #-0
 528:	3a0e0300 	bcc	381130 <startup-0x1fc7eed0>
 52c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 530:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 534:	2c000018 	stccs	0, cr0, [r0], {24}
 538:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 53c:	0b3a0e03 	bleq	e83d50 <startup-0x1f17c2b0>
 540:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 544:	06120111 			; <UNDEFINED> instruction: 0x06120111
 548:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 54c:	00130119 	andseq	r0, r3, r9, lsl r1
 550:	00342d00 	eorseq	r2, r4, r0, lsl #26
 554:	0b3a0e03 	bleq	e83d68 <startup-0x1f17c298>
 558:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 55c:	00001802 	andeq	r1, r0, r2, lsl #16
 560:	3f012e2e 	svccc	0x00012e2e
 564:	3a0e0319 	bcc	3811d0 <startup-0x1fc7ee30>
 568:	110b3b0b 	tstne	fp, fp, lsl #22
 56c:	40061201 	andmi	r1, r6, r1, lsl #4
 570:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 574:	00001301 	andeq	r1, r0, r1, lsl #6
 578:	3f002e2f 	svccc	0x00002e2f
 57c:	3a0e0319 	bcc	3811e8 <startup-0x1fc7ee18>
 580:	110b3b0b 	tstne	fp, fp, lsl #22
 584:	40061201 	andmi	r1, r6, r1, lsl #4
 588:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 58c:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
 590:	03193f00 	tsteq	r9, #0, 30
 594:	3b0b3a0e 	blcc	2cedd4 <startup-0x1fd3122c>
 598:	1119270b 	tstne	r9, fp, lsl #14
 59c:	40061201 	andmi	r1, r6, r1, lsl #4
 5a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5a4:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
 5a8:	3a0e0301 	bcc	3811b4 <startup-0x1fc7ee4c>
 5ac:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 5b0:	11134919 	tstne	r3, r9, lsl r9
 5b4:	40061201 	andmi	r1, r6, r1, lsl #4
 5b8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5bc:	00001301 	andeq	r1, r0, r1, lsl #6
 5c0:	03000532 	movweq	r0, #1330	; 0x532
 5c4:	3b0b3a0e 	blcc	2cee04 <startup-0x1fd311fc>
 5c8:	02134905 	andseq	r4, r3, #81920	; 0x14000
 5cc:	33000018 	movwcc	r0, #24
 5d0:	0e03012e 	adfeqsp	f0, f3, #0.5
 5d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5d8:	01111927 	tsteq	r1, r7, lsr #18
 5dc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5e0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 5e4:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
 5e8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 5ec:	0b3a0e03 	bleq	e83e00 <startup-0x1f17c200>
 5f0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5f8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5fc:	00000019 	andeq	r0, r0, r9, lsl r0
 600:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 604:	030b130e 	movweq	r1, #45838	; 0xb30e
 608:	110e1b0e 	tstne	lr, lr, lsl #22
 60c:	10061201 	andne	r1, r6, r1, lsl #4
 610:	02000017 	andeq	r0, r0, #23
 614:	0b0b0024 	bleq	2c06ac <startup-0x1fd3f954>
 618:	0e030b3e 	vmoveq.16	d3[0], r0
 61c:	16030000 	strne	r0, [r3], -r0
 620:	3a0e0300 	bcc	381228 <startup-0x1fc7edd8>
 624:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 628:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 62c:	0b0b0024 	bleq	2c06c4 <startup-0x1fd3f93c>
 630:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 634:	26050000 	strcs	r0, [r5], -r0
 638:	00134900 	andseq	r4, r3, r0, lsl #18
 63c:	00350600 	eorseq	r0, r5, r0, lsl #12
 640:	00001349 	andeq	r1, r0, r9, asr #6
 644:	49010107 	stmdbmi	r1, {r0, r1, r2, r8}
 648:	00130113 	andseq	r0, r3, r3, lsl r1
 64c:	00210800 	eoreq	r0, r1, r0, lsl #16
 650:	0b2f1349 	bleq	bc537c <startup-0x1f43ac84>
 654:	34090000 	strcc	r0, [r9], #-0
 658:	3a0e0300 	bcc	381260 <startup-0x1fc7eda0>
 65c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 660:	3c193f13 	ldccc	15, cr3, [r9], {19}
 664:	0a000019 	beq	6d0 <startup-0x1ffff930>
 668:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 66c:	0b3b0b3a 	bleq	ec335c <startup-0x1f13cca4>
 670:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 674:	0000193c 	andeq	r1, r0, ip, lsr r9
 678:	3e01040b 	cdpcc	4, 0, cr0, cr1, cr11, {0}
 67c:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 680:	3b0b3a13 	blcc	2ceed4 <startup-0x1fd3112c>
 684:	00130105 	andseq	r0, r3, r5, lsl #2
 688:	00280c00 	eoreq	r0, r8, r0, lsl #24
 68c:	0b1c0e03 	bleq	703ea0 <startup-0x1f8fc160>
 690:	280d0000 	stmdacs	sp, {}	; <UNPREDICTABLE>
 694:	1c080300 	stcne	3, cr0, [r8], {-0}
 698:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 69c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 6a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6a4:	00001349 	andeq	r1, r0, r9, asr #6
 6a8:	0b01130f 	bleq	452ec <startup-0x1ffbad14>
 6ac:	3b0b3a0b 	blcc	2ceee0 <startup-0x1fd31120>
 6b0:	00130105 	andseq	r0, r3, r5, lsl #2
 6b4:	000d1000 	andeq	r1, sp, r0
 6b8:	0b3a0803 	bleq	e826cc <startup-0x1f17d934>
 6bc:	1349053b 	movtne	r0, #38203	; 0x953b
 6c0:	00000b38 	andeq	r0, r0, r8, lsr fp
 6c4:	03000d11 	movweq	r0, #3345	; 0xd11
 6c8:	3b0b3a0e 	blcc	2cef08 <startup-0x1fd310f8>
 6cc:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 6d0:	1200000b 	andne	r0, r0, #11
 6d4:	0b0b0113 	bleq	2c0b28 <startup-0x1fd3f4d8>
 6d8:	0b3b0b3a 	bleq	ec33c8 <startup-0x1f13cc38>
 6dc:	00001301 	andeq	r1, r0, r1, lsl #6
 6e0:	03000d13 	movweq	r0, #3347	; 0xd13
 6e4:	3b0b3a0e 	blcc	2cef24 <startup-0x1fd310dc>
 6e8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 6ec:	1400000b 	strne	r0, [r0], #-11
 6f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 6f4:	0b3b0b3a 	bleq	ec33e4 <startup-0x1f13cc1c>
 6f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6fc:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 700:	03193f01 	tsteq	r9, #1, 30
 704:	3b0b3a0e 	blcc	2cef44 <startup-0x1fd310bc>
 708:	11192705 	tstne	r9, r5, lsl #14
 70c:	40061201 	andmi	r1, r6, r1, lsl #4
 710:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 714:	00001301 	andeq	r1, r0, r1, lsl #6
 718:	03000516 	movweq	r0, #1302	; 0x516
 71c:	3b0b3a0e 	blcc	2cef5c <startup-0x1fd310a4>
 720:	02134905 	andseq	r4, r3, #81920	; 0x14000
 724:	17000018 	smladne	r0, r8, r0, r0
 728:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 72c:	0b3a0e03 	bleq	e83f40 <startup-0x1f17c0c0>
 730:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 734:	01111349 	tsteq	r1, r9, asr #6
 738:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 73c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 740:	18000013 	stmdane	r0, {r0, r1, r4}
 744:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 748:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 74c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 750:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 754:	03193f00 	tsteq	r9, #0, 30
 758:	3b0b3a0e 	blcc	2cef98 <startup-0x1fd31068>
 75c:	11192705 	tstne	r9, r5, lsl #14
 760:	40061201 	andmi	r1, r6, r1, lsl #4
 764:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 768:	341a0000 	ldrcc	r0, [sl], #-0
 76c:	3a080300 	bcc	201374 <startup-0x1fdfec8c>
 770:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 774:	00180213 	andseq	r0, r8, r3, lsl r2
 778:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 77c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 780:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 784:	01111927 	tsteq	r1, r7, lsr #18
 788:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 78c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 790:	1c000013 	stcne	0, cr0, [r0], {19}
 794:	0b0b000f 	bleq	2c07d8 <startup-0x1fd3f828>
 798:	00001349 	andeq	r1, r0, r9, asr #6
 79c:	3f002e1d 	svccc	0x00002e1d
 7a0:	3a0e0319 	bcc	38140c <startup-0x1fc7ebf4>
 7a4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 7a8:	11134919 	tstne	r3, r9, lsl r9
 7ac:	40061201 	andmi	r1, r6, r1, lsl #4
 7b0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 7b4:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 7b8:	03193f01 	tsteq	r9, #1, 30
 7bc:	3b0b3a0e 	blcc	2ceffc <startup-0x1fd31004>
 7c0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 7c4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 7c8:	96184006 	ldrls	r4, [r8], -r6
 7cc:	13011942 	movwne	r1, #6466	; 0x1942
 7d0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 7d4:	03193f00 	tsteq	r9, #0, 30
 7d8:	3b0b3a0e 	blcc	2cf018 <startup-0x1fd30fe8>
 7dc:	1119270b 	tstne	r9, fp, lsl #14
 7e0:	40061201 	andmi	r1, r6, r1, lsl #4
 7e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 7e8:	Address 0x000007e8 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	06270002 	strteq	r0, [r7], -r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000520 	andcs	r0, r0, r0, lsr #10
  34:	0000025c 	andeq	r0, r0, ip, asr r2
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	0c350002 	ldceq	0, cr0, [r5], #-8
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	2000077c 	andcs	r0, r0, ip, ror r7
  54:	000001e0 	andeq	r0, r0, r0, ror #3
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	1da50002 	stcne	0, cr0, [r5, #8]!
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	2000095c 	andcs	r0, r0, ip, asr r9
  7c:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000002a7 	andeq	r0, r0, r7, lsr #5
   4:	01bb0002 			; <UNDEFINED> instruction: 0x01bb0002
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6b697245 	blvs	1a5c940 <startup-0x1e5a36c0>
  28:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  2c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  30:	442f7374 	strtmi	r7, [pc], #-884	; 38 <startup-0x1fffffc8>
  34:	74617461 	strbtvc	r7, [r1], #-1121	; 0xfffffb9f
  38:	696e6b65 	stmdbvs	lr!, {r0, r2, r5, r6, r8, r9, fp, sp, lr}^
  3c:	70746b73 	rsbsvc	r6, r4, r3, ror fp
  40:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  44:	6b2f746b 	blvs	bdd1f8 <startup-0x1f422e08>
  48:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; fffffe94 <APBAHBPrescTable+0xdfffe710>
  4c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  50:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  54:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
  58:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  5c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  60:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
  64:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
  68:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
  6c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 74 <startup-0x1fffff8c>
  70:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  74:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
  78:	3a630063 	bcc	18c020c <startup-0x1e73fdf4>
  7c:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
  80:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
  84:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  88:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
  8c:	6f6f745c 	svcvs	0x006f745c
  90:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
  94:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
  98:	615c6d72 	cmpvs	ip, r2, ror sp
  9c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
  a0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
  a4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
  a8:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
  ac:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  b0:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
  b4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
  b8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
  bc:	61657363 	cmnvs	r5, r3, ror #6
  c0:	635c7070 	cmpvs	ip, #112	; 0x70
  c4:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
  c8:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
  cc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; ffffff04 <APBAHBPrescTable+0xdfffe780>
  d0:	63675c73 	cmnvs	r7, #29440	; 0x7300
  d4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
  d8:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
  dc:	6f6e2d6d 	svcvs	0x006e2d6d
  e0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  e4:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
  e8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  ec:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
  f0:	00737973 	rsbseq	r7, r3, r3, ror r9
  f4:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 44 <startup-0x1fffffbc>
  f8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  fc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 100:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 104:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
 108:	5349534d 	movtpl	r5, #37709	; 0x934d
 10c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 110:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 114:	2f2e2e00 	svccs	0x002e2e00
 118:	2f62696c 	svccs	0x0062696c
 11c:	334d5453 	movtcc	r5, #54355	; 0xd453
 120:	5f344632 	svcpl	0x00344632
 124:	2f62696c 	svccs	0x0062696c
 128:	334d5453 	movtcc	r5, #54355	; 0xd453
 12c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 130:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 134:	72655064 	rsbvc	r5, r5, #100	; 0x64
 138:	5f687069 	svcpl	0x00687069
 13c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 140:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 144:	0000636e 	andeq	r6, r0, lr, ror #6
 148:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 14c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 150:	70675f78 	rsbvc	r5, r7, r8, ror pc
 154:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
 158:	00000100 	andeq	r0, r0, r0, lsl #2
 15c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 160:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 164:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 168:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 16c:	00000200 	andeq	r0, r0, r0, lsl #4
 170:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 174:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 178:	00030068 	andeq	r0, r3, r8, rrx
 17c:	726f6300 	rsbvc	r6, pc, #0, 6
 180:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 184:	00682e34 	rsbeq	r2, r8, r4, lsr lr
 188:	73000004 	movwvc	r0, #4
 18c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 190:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
 194:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 198:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 19c:	00050068 	andeq	r0, r5, r8, rrx
 1a0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 1a4:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 1a8:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 1ac:	00000500 	andeq	r0, r0, r0, lsl #10
 1b0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 1b4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 1b8:	70675f78 	rsbvc	r5, r7, r8, ror pc
 1bc:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 1c0:	00000500 	andeq	r0, r0, r0, lsl #10
 1c4:	02050000 	andeq	r0, r5, #0
 1c8:	20000010 	andcs	r0, r0, r0, lsl r0
 1cc:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
 1d0:	034b4c4e 	movteq	r4, #48206	; 0xbc4e
 1d4:	4a034a38 	bmi	d2abc <startup-0x1ff2d544>
 1d8:	034b4c20 	movteq	r4, #48160	; 0xbc20
 1dc:	4f034a33 	svcmi	0x00034a33
 1e0:	034b4c20 	movteq	r4, #48160	; 0xbc20
 1e4:	54034a2e 	strpl	r4, [r3], #-2606	; 0xfffff5d2
 1e8:	034b4c20 	movteq	r4, #48160	; 0xbc20
 1ec:	59034a29 	stmdbpl	r3, {r0, r3, r5, r9, fp, lr}
 1f0:	034b4c20 	movteq	r4, #48160	; 0xbc20
 1f4:	5e034a24 	vmlapl.f32	s8, s6, s9
 1f8:	034b4c20 	movteq	r4, #48160	; 0xbc20
 1fc:	63034a1f 	movwvs	r4, #14879	; 0x3a1f
 200:	034b4c20 	movteq	r4, #48160	; 0xbc20
 204:	68034a1a 	stmdavs	r3, {r1, r3, r4, r9, fp, lr}
 208:	034b4c20 	movteq	r4, #48160	; 0xbc20
 20c:	6e034a15 			; <UNDEFINED> instruction: 0x6e034a15
 210:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 214:	7303660f 	movwvc	r6, #13839	; 0x360f
 218:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 21c:	7a03660a 	bvc	d9a4c <startup-0x1ff265b4>
 220:	69674c20 	stmdbvs	r7!, {r5, sl, fp, lr}^
 224:	90080c03 	andls	r0, r8, r3, lsl #24
 228:	660a0359 			; <UNDEFINED> instruction: 0x660a0359
 22c:	4c5a5a3e 	vmovmi	r5, sl, s29, s30
 230:	0200bcad 	andeq	fp, r0, #44288	; 0xad00
 234:	4a060104 	bmi	18064c <startup-0x1fe7f9b4>
 238:	c0ad5006 	adcgt	r5, sp, r6
 23c:	00bbccad 	adcseq	ip, fp, sp, lsr #25
 240:	03020402 	movweq	r0, #9218	; 0x2402
 244:	0200ba62 	andeq	fp, r0, #401408	; 0x62000
 248:	3c060104 	stfccs	f0, [r6], {4}
 24c:	3c210306 	stccc	3, cr0, [r1], #-24	; 0xffffffe8
 250:	3d3d4c52 	ldccc	12, cr4, [sp, #-328]!	; 0xfffffeb8
 254:	033d3d3d 	teqeq	sp, #3904	; 0xf40
 258:	42757410 	rsbsmi	r7, r5, #16, 8	; 0x10000000
 25c:	3e4c3e5a 	mcrcc	14, 2, r3, cr12, cr10, {2}
 260:	1c033d3e 	stcne	13, cr3, [r3], {62}	; 0x3e
 264:	6850754a 	ldmdavs	r0, {r1, r3, r6, r8, sl, ip, sp, lr}^
 268:	033d4c5c 	teqeq	sp, #92, 24	; 0x5c00
 26c:	3d4e4a0a 	vstrcc	s9, [lr, #-40]	; 0xffffffd8
 270:	754a0c03 	strbvc	r0, [sl, #-3075]	; 0xfffff3fd
 274:	4c5c6850 	mrrcmi	8, 5, r6, ip, cr0
 278:	4a0a033d 	bmi	280f74 <startup-0x1fd7f08c>
 27c:	0f033d4e 	svceq	0x00033d4e
 280:	034b794a 	movteq	r7, #47434	; 0xb94a
 284:	4b794a0f 	blmi	1e52ac8 <startup-0x1e1ad538>
 288:	c04a1003 	subgt	r1, sl, r3
 28c:	4c1e504c 	ldcmi	0, cr5, [lr], {76}	; 0x4c
 290:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
 294:	4a0b034b 	bmi	2c0fc8 <startup-0x1fd3f038>
 298:	ce037578 	cfrshl64gt	mvdx3, mvdx8, r7
 29c:	2fbb4a00 	svccs	0x00bb4a00
 2a0:	c9089f35 	stmdbgt	r8, {r0, r2, r4, r5, r8, r9, sl, fp, ip, pc}
 2a4:	04029fbb 	streq	r9, [r2], #-4027	; 0xfffff045
 2a8:	31010100 	mrscc	r0, (UNDEF: 17)
 2ac:	02000002 	andeq	r0, r0, #2
 2b0:	0001b900 	andeq	fp, r1, r0, lsl #18
 2b4:	fb010200 	blx	40abe <startup-0x1ffbf542>
 2b8:	01000d0e 	tsteq	r0, lr, lsl #26
 2bc:	00010101 	andeq	r0, r1, r1, lsl #2
 2c0:	00010000 	andeq	r0, r1, r0
 2c4:	3a430100 	bcc	10c06cc <startup-0x1ef3f934>
 2c8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 2cc:	452f7372 	strmi	r7, [pc, #-882]!	; ffffff62 <APBAHBPrescTable+0xdfffe7de>
 2d0:	2f6b6972 	svccs	0x006b6972
 2d4:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 2d8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 2dc:	61442f73 	hvcvs	17139	; 0x42f3
 2e0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 2e4:	73696e6b 	cmnvc	r9, #1712	; 0x6b0
 2e8:	7270746b 	rsbsvc	r7, r0, #1795162112	; 0x6b000000
 2ec:	6b656a6f 	blvs	195acb0 <startup-0x1e6a5350>
 2f0:	6f6b2f74 	svcvs	0x006b2f74
 2f4:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
 2f8:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 2fc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 300:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 304:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 308:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 30c:	5f787834 	svcpl	0x00787834
 310:	50647453 	rsbpl	r7, r4, r3, asr r4
 314:	70697265 	rsbvc	r7, r9, r5, ror #4
 318:	78455f68 	stmdavc	r5, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 31c:	6c706d61 	ldclvs	13, cr6, [r0], #-388	; 0xfffffe7c
 320:	572f7365 	strpl	r7, [pc, -r5, ror #6]!
 324:	2f474457 	svccs	0x00474457
 328:	47445757 	smlsldmi	r5, r4, r7, r7
 32c:	6178455f 	cmnvs	r8, pc, asr r5
 330:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
 334:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 338:	61657363 	cmnvs	r5, r3, ror #6
 33c:	635c7070 	cmpvs	ip, #112	; 0x70
 340:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 344:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 348:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 180 <startup-0x1ffffe80>
 34c:	63675c73 	cmnvs	r7, #29440	; 0x7300
 350:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 354:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 358:	6f6e2d6d 	svcvs	0x006e2d6d
 35c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 360:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 364:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 368:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 36c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 370:	00656e69 	rsbeq	r6, r5, r9, ror #28
 374:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 378:	70616573 	rsbvc	r6, r1, r3, ror r5
 37c:	6f635c70 	svcvs	0x00635c70
 380:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 384:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 388:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 38c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 390:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 394:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 398:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 39c:	61652d65 	cmnvs	r5, r5, ror #26
 3a0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 3a4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 3a8:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 3ac:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
 3b0:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 3b4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 3b8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 3bc:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 3c0:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
 3c4:	2f534953 	svccs	0x00534953
 3c8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 3cc:	00656475 	rsbeq	r6, r5, r5, ror r4
 3d0:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 320 <startup-0x1ffffce0>
 3d4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 3d8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 3dc:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 3e0:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 3e4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 3e8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 3ec:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 3f0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 3f4:	445f6870 	ldrbmi	r6, [pc], #-2160	; 3fc <startup-0x1ffffc04>
 3f8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 3fc:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
 400:	73000063 	movwvc	r0, #99	; 0x63
 404:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 408:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
 40c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 410:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 414:	00010063 	andeq	r0, r1, r3, rrx
 418:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 41c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 420:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 424:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 428:	00020068 	andeq	r0, r2, r8, rrx
 42c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 430:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 434:	0300682e 	movweq	r6, #2094	; 0x82e
 438:	6f630000 	svcvs	0x00630000
 43c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 440:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 444:	00000400 	andeq	r0, r0, r0, lsl #8
 448:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 44c:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 450:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 454:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 458:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 45c:	74730000 	ldrbtvc	r0, [r3], #-0
 460:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 464:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 468:	00050068 	andeq	r0, r5, r8, rrx
 46c:	05000000 	streq	r0, [r0, #-0]
 470:	00052002 	andeq	r2, r5, r2
 474:	02d10320 	sbcseq	r0, r1, #32, 6	; 0x80000000
 478:	3f693501 	svccc	0x00693501
 47c:	44693f69 	strbtmi	r3, [r9], #-3945	; 0xfffff097
 480:	27034c34 	smladxcs	r3, r4, ip, r4
 484:	5aa13dc8 	bpl	fe84fbac <APBAHBPrescTable+0xde84e428>
 488:	3d223d77 	stccc	13, cr3, [r2, #-476]!	; 0xfffffe24
 48c:	3f5a6726 	svccc	0x005a6726
 490:	8383cbdb 	orrhi	ip, r3, #224256	; 0x36c00
 494:	92243d22 	eorls	r3, r4, #2176	; 0x880
 498:	d60b0367 	strle	r0, [fp], -r7, ror #6
 49c:	02004d40 	andeq	r4, r0, #64, 26	; 0x1000
 4a0:	00790204 	rsbseq	r0, r9, r4, lsl #4
 4a4:	67020402 	strvs	r0, [r2, -r2, lsl #8]
 4a8:	02040200 	andeq	r0, r4, #0, 4
 4ac:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 4b0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 4b4:	3140685a 	cmpcc	r0, sl, asr r8
 4b8:	4e77753f 	mrcmi	5, 3, r7, cr7, cr15, {1}
 4bc:	740c0377 	strvc	r0, [ip], #-887	; 0xfffffc89
 4c0:	02007740 	andeq	r7, r0, #64, 14	; 0x1000000
 4c4:	20060104 	andcs	r0, r6, r4, lsl #2
 4c8:	66140306 	ldrvs	r0, [r4], -r6, lsl #6
 4cc:	673c0903 	ldrvs	r0, [ip, -r3, lsl #18]!
 4d0:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
 4d4:	06200601 	strteq	r0, [r0], -r1, lsl #12
 4d8:	02660903 	rsbeq	r0, r6, #49152	; 0xc000
 4dc:	0101000e 	tsteq	r1, lr
 4e0:	0000026a 	andeq	r0, r0, sl, ror #4
 4e4:	02040002 	andeq	r0, r4, #2
 4e8:	01020000 	mrseq	r0, (UNDEF: 2)
 4ec:	000d0efb 	strdeq	r0, [sp], -fp
 4f0:	01010101 	tsteq	r1, r1, lsl #2
 4f4:	01000000 	mrseq	r0, (UNDEF: 0)
 4f8:	43010000 	movwmi	r0, #4096	; 0x1000
 4fc:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 500:	2f737265 	svccs	0x00737265
 504:	6b697245 	blvs	1a5ce20 <startup-0x1e5a31e0>
 508:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 50c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 510:	442f7374 	strtmi	r7, [pc], #-884	; 518 <startup-0x1ffffae8>
 514:	74617461 	strbtvc	r7, [r1], #-1121	; 0xfffffb9f
 518:	696e6b65 	stmdbvs	lr!, {r0, r2, r5, r6, r8, r9, fp, sp, lr}^
 51c:	70746b73 	rsbsvc	r6, r4, r3, ror fp
 520:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 524:	6b2f746b 	blvs	bdd6d8 <startup-0x1f422928>
 528:	522f646f 	eorpl	r6, pc, #1862270976	; 0x6f000000
 52c:	6c65726f 	sfmvs	f7, 2, [r5], #-444	; 0xfffffe44
 530:	2e006573 	cfrshl64cs	mvdx0, mvdx3, r6
 534:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 538:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 53c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 540:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 544:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
 548:	2f534953 	svccs	0x00534953
 54c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 550:	00656475 	rsbeq	r6, r5, r5, ror r4
 554:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 558:	70616573 	rsbvc	r6, r1, r3, ror r5
 55c:	6f635c70 	svcvs	0x00635c70
 560:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 564:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 568:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 56c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 570:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 574:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 578:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 57c:	61652d65 	cmnvs	r5, r5, ror #26
 580:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 584:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 588:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
 58c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 590:	6300656e 	movwvs	r6, #1390	; 0x56e
 594:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 598:	70706165 	rsbsvc	r6, r0, r5, ror #2
 59c:	646f635c 	strbtvs	r6, [pc], #-860	; 5a4 <startup-0x1ffffa5c>
 5a0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 5a4:	6f745c65 	svcvs	0x00745c65
 5a8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 5ac:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 5b0:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 5b4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 5b8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 5bc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 5c0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 5c4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 5c8:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
 5cc:	3a630073 	bcc	18c07a0 <startup-0x1e73f860>
 5d0:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 5d4:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 5d8:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 5dc:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 5e0:	6f6f745c 	svcvs	0x006f745c
 5e4:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 5e8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 5ec:	6c5c6d72 	mrrcvs	13, 7, r6, ip, cr2
 5f0:	675c6269 	ldrbvs	r6, [ip, -r9, ror #4]
 5f4:	615c6363 	cmpvs	ip, r3, ror #6
 5f8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 5fc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 600:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 604:	322e375c 	eorcc	r3, lr, #92, 14	; 0x1700000
 608:	695c312e 	ldmdbvs	ip, {r1, r2, r3, r5, r8, ip, sp}^
 60c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 610:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
 614:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 618:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 61c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 620:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 624:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 628:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 62c:	5f787834 	svcpl	0x00787834
 630:	50647453 	rsbpl	r7, r4, r3, asr r4
 634:	70697265 	rsbvc	r7, r9, r5, ror #4
 638:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 63c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 640:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 644:	616d0000 	cmnvs	sp, r0
 648:	725f6e69 	subsvc	r6, pc, #1680	; 0x690
 64c:	6c65726f 	sfmvs	f7, 2, [r5], #-444	; 0xfffffe44
 650:	632e6573 			; <UNDEFINED> instruction: 0x632e6573
 654:	00000100 	andeq	r0, r0, r0, lsl #2
 658:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 65c:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
 660:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 664:	645f0000 	ldrbvs	r0, [pc], #-0	; 66c <startup-0x1ffff994>
 668:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 66c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 674 <startup-0x1ffff98c>
 670:	73657079 	cmnvc	r5, #121	; 0x79
 674:	0300682e 	movweq	r6, #2094	; 0x82e
 678:	6f6c0000 	svcvs	0x006c0000
 67c:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 680:	00000400 	andeq	r0, r0, r0, lsl #8
 684:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 688:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 68c:	00000400 	andeq	r0, r0, r0, lsl #8
 690:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
 694:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
 698:	00000500 	andeq	r0, r0, r0, lsl #10
 69c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 6a0:	00682e74 	rsbeq	r2, r8, r4, ror lr
 6a4:	5f000004 	svcpl	0x00000004
 6a8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 6ac:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 6b0:	00000400 	andeq	r0, r0, r0, lsl #8
 6b4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 6b8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 6bc:	00682e78 	rsbeq	r2, r8, r8, ror lr
 6c0:	73000006 	movwvc	r0, #6
 6c4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 6c8:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
 6cc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 6d0:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 6d4:	00060068 	andeq	r0, r6, r8, rrx
 6d8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 6dc:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 6e0:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 6e4:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 6e8:	00060068 	andeq	r0, r6, r8, rrx
 6ec:	05000000 	streq	r0, [r0, #-0]
 6f0:	00000002 	andeq	r0, r0, r2
 6f4:	010f0320 	tsteq	pc, r0, lsr #6
 6f8:	03025e13 	movweq	r5, #11795	; 0x2e13
 6fc:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
 700:	02050002 	andeq	r0, r5, #2
 704:	2000077c 	andcs	r0, r0, ip, ror r7
 708:	010cdd03 	tsteq	ip, r3, lsl #26
 70c:	1ecd4b75 			; <UNDEFINED> instruction: 0x1ecd4b75
 710:	00fc03d8 	ldrsbteq	r0, [ip], #56	; 0x38
 714:	02004b90 	andeq	r4, r0, #144, 22	; 0x24000
 718:	58060104 	stmdapl	r6, {r2, r8}
 71c:	674b3006 	strbvs	r3, [fp, -r6]
 720:	04213f3d 	strteq	r3, [r1], #-3901	; 0xfffff0c3
 724:	72bc0301 	adcsvc	r0, ip, #67108864	; 0x4000000
 728:	91592f82 	cmpls	r9, r2, lsl #31
 72c:	775b915a 			; <UNDEFINED> instruction: 0x775b915a
 730:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 734:	40773e3d 	rsbsmi	r3, r7, sp, lsr lr
 738:	3d834b4b 	vstrcc	d4, [r3, #300]	; 0x12c
 73c:	834b693d 	movthi	r6, #47421	; 0xb93d
 740:	96673d3d 			; <UNDEFINED> instruction: 0x96673d3d
 744:	3e322f3d 	mrccc	15, 1, r2, cr2, cr13, {1}
 748:	000a0269 	andeq	r0, sl, r9, ror #4
 74c:	03a70101 			; <UNDEFINED> instruction: 0x03a70101
 750:	00020000 	andeq	r0, r2, r0
 754:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
 758:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 75c:	0101000d 	tsteq	r1, sp
 760:	00000101 	andeq	r0, r0, r1, lsl #2
 764:	00000100 	andeq	r0, r0, r0, lsl #2
 768:	2f3a4301 	svccs	0x003a4301
 76c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 770:	72452f73 	subvc	r2, r5, #460	; 0x1cc
 774:	442f6b69 	strtmi	r6, [pc], #-2921	; 77c <startup-0x1ffff884>
 778:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 77c:	73746e65 	cmnvc	r4, #1616	; 0x650
 780:	7461442f 	strbtvc	r4, [r1], #-1071	; 0xfffffbd1
 784:	6b657461 	blvs	195d910 <startup-0x1e6a26f0>
 788:	6b73696e 	blvs	1cdad48 <startup-0x1e3252b8>
 78c:	6f727074 	svcvs	0x00727074
 790:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
 794:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 79c <startup-0x1ffff864>
 798:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 79c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 7a0:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 7a4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 7a8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 7ac:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 7b0:	535f7878 	cmppl	pc, #120, 16	; 0x780000
 7b4:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
 7b8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 7bc:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
 7c0:	2f726576 	svccs	0x00726576
 7c4:	00637273 	rsbeq	r7, r3, r3, ror r2
 7c8:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 7cc:	70616573 	rsbvc	r6, r1, r3, ror r5
 7d0:	6f635c70 	svcvs	0x00635c70
 7d4:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 7d8:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 7dc:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 7e0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 7e4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 7e8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 7ec:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 7f0:	61652d65 	cmnvs	r5, r5, ror #26
 7f4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 7f8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 7fc:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
 800:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 804:	6300656e 	movwvs	r6, #1390	; 0x56e
 808:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 80c:	70706165 	rsbsvc	r6, r0, r5, ror #2
 810:	646f635c 	strbtvs	r6, [pc], #-860	; 818 <startup-0x1ffff7e8>
 814:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 818:	6f745c65 	svcvs	0x00745c65
 81c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 820:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 824:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 828:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 82c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 830:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 834:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 838:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 83c:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
 840:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
 844:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 848:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 84c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 850:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 854:	534d432f 	movtpl	r4, #54063	; 0xd32f
 858:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
 85c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 860:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
 864:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 868:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 86c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 870:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 874:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 878:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 87c:	5f787834 	svcpl	0x00787834
 880:	50647453 	rsbpl	r7, r4, r3, asr r4
 884:	70697265 	rsbvc	r7, r9, r5, ror #4
 888:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 88c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 890:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 894:	74730000 	ldrbtvc	r0, [r3], #-0
 898:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 89c:	5f787834 	svcpl	0x00787834
 8a0:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
 8a4:	00010063 	andeq	r0, r1, r3, rrx
 8a8:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 8ac:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 8b0:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8b4:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 8b8:	00020068 	andeq	r0, r2, r8, rrx
 8bc:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 8c0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 8c4:	0300682e 	movweq	r6, #2094	; 0x82e
 8c8:	6f630000 	svcvs	0x00630000
 8cc:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 8d0:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 8d4:	00000400 	andeq	r0, r0, r0, lsl #8
 8d8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 8dc:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 8e0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 8e4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 8e8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 8ec:	74730000 	ldrbtvc	r0, [r3], #-0
 8f0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 8f4:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 8f8:	00050068 	andeq	r0, r5, r8, rrx
 8fc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 900:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 904:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
 908:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
 90c:	00000500 	andeq	r0, r0, r0, lsl #10
 910:	02050000 	andeq	r0, r5, #0
 914:	2000095c 	andcs	r0, r0, ip, asr r9
 918:	0101e103 	tsteq	r1, r3, lsl #2
 91c:	693f6930 	ldmdbvs	pc!, {r4, r5, r8, fp, sp, lr}	; <UNPREDICTABLE>
 920:	694e4f40 	stmdbvs	lr, {r6, r8, r9, sl, fp, lr}^
 924:	1703503f 	smladxne	r3, pc, r0, r5	; <UNPREDICTABLE>
 928:	4b3f6be4 	blmi	fdb8c0 <startup-0x1f024740>
 92c:	3d740f03 	ldclcc	15, cr0, [r4, #-12]!
 930:	02003d2f 	andeq	r3, r0, #3008	; 0xbc0
 934:	00400204 	subeq	r0, r0, r4, lsl #4
 938:	67020402 	strvs	r0, [r2, -r2, lsl #8]
 93c:	02040200 	andeq	r0, r4, #0, 4
 940:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 944:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 948:	3e4e5a4c 	vmlscc.f32	s11, s28, s24
 94c:	4a0b032f 	bmi	2c1610 <startup-0x1fd3e9f0>
 950:	4d3f3267 	lfmmi	f3, 4, [pc, #-412]!	; 7bc <startup-0x1ffff844>
 954:	15033d69 	strne	r3, [r3, #-3433]	; 0xfffff297
 958:	034b6a74 	movteq	r6, #47732	; 0xba74
 95c:	3f6c6614 	svccc	0x006c6614
 960:	660b033f 			; <UNDEFINED> instruction: 0x660b033f
 964:	3d207903 			; <UNDEFINED> instruction: 0x3d207903
 968:	03243d23 			; <UNDEFINED> instruction: 0x03243d23
 96c:	4b6a740f 	blmi	1a9d9b0 <startup-0x1e562650>
 970:	6600de03 	strvs	sp, [r0], -r3, lsl #28
 974:	3e2dbb7c 	vmovcc.16	d13[3], fp
 978:	69660e03 	stmdbvs	r6!, {r0, r1, r9, sl, fp}^
 97c:	661a034b 	ldrvs	r0, [sl], -fp, asr #6
 980:	8503835d 	strhi	r8, [r3, #-861]	; 0xfffffca3
 984:	4b697401 	blmi	1a5d990 <startup-0x1e5a2670>
 988:	6600e903 	strvs	lr, [r0], -r3, lsl #18
 98c:	0d03ad6c 	stceq	13, cr10, [r3, #-432]	; 0xfffffe50
 990:	034b6974 	movteq	r6, #47476	; 0xb974
 994:	4b69660e 	blmi	1a5a1d4 <startup-0x1e5a5e2c>
 998:	59661503 	stmdbpl	r6!, {r0, r1, r8, sl, ip}^
 99c:	694d3f34 	stmdbvs	sp, {r2, r4, r5, r8, r9, sl, fp, ip, sp}^
 9a0:	90180341 	andsls	r0, r8, r1, asr #6
 9a4:	4d3f3459 	cfldrsmi	mvf3, [pc, #-356]!	; 848 <startup-0x1ffff7b8>
 9a8:	b3034169 	movwlt	r4, #12649	; 0x3169
 9ac:	334b7401 	movtcc	r7, #46081	; 0xb401
 9b0:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
 9b4:	2f660d03 	svccs	0x00660d03
 9b8:	66170367 	ldrvs	r0, [r7], -r7, ror #6
 9bc:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 898 <startup-0x1ffff768>
 9c0:	0f033d4d 	svceq	0x00033d4d
 9c4:	3f334b66 	svccc	0x00334b66
 9c8:	033d4d4d 	teqeq	sp, #4928	; 0x1340
 9cc:	334b820f 	movtcc	r8, #45583	; 0xb20f
 9d0:	3d5b4d3f 	ldclcc	13, cr4, [fp, #-252]	; 0xffffff04
 9d4:	4b902403 	blmi	fe4099e8 <APBAHBPrescTable+0xde408264>
 9d8:	3d775ac0 	vldmdbcc	r7!, {s11-s202}
 9dc:	67263d22 	strvs	r3, [r6, -r2, lsr #26]!
 9e0:	cbdb3f5a 	blgt	ff6d0750 <APBAHBPrescTable+0xdf6cefcc>
 9e4:	1b038383 	blne	e17f8 <startup-0x1ff1e808>
 9e8:	59253d20 	stmdbpl	r5!, {r5, r8, sl, fp, ip, sp}
 9ec:	6769683d 			; <UNDEFINED> instruction: 0x6769683d
 9f0:	6769683d 			; <UNDEFINED> instruction: 0x6769683d
 9f4:	0367683d 	cmneq	r7, #3997696	; 0x3d0000
 9f8:	334bba3f 	movtcc	fp, #47679	; 0xba3f
 9fc:	694d3f84 	stmdbvs	sp, {r2, r7, r8, r9, sl, fp, ip, sp}^
 a00:	0a038340 	beq	e1708 <startup-0x1ff1e8f8>
 a04:	034b6a9e 	movteq	r6, #47774	; 0xba9e
 a08:	4b69660c 	blmi	1a5a240 <startup-0x1e5a5dc0>
 a0c:	6601b803 	strvs	fp, [r1], -r3, lsl #16
 a10:	16033d4e 	strne	r3, [r3], -lr, asr #26
 a14:	4d334b74 	vldmdbmi	r3!, {d4-<overflow reg d61>}
 a18:	034b4d4d 	movteq	r4, #48461	; 0xbd4d
 a1c:	334b8214 	movtcc	r8, #45588	; 0xb214
 a20:	4b4d4d4d 	blmi	1353f5c <startup-0x1ecac0a4>
 a24:	4b821103 	blmi	fe084e38 <APBAHBPrescTable+0xde0836b4>
 a28:	5b4d4d33 	blpl	1353efc <startup-0x1ecac104>
 a2c:	7410034b 	ldrvc	r0, [r0], #-843	; 0xfffffcb5
 a30:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 a34:	d3034b69 	movwle	r4, #15209	; 0x3b69
 a38:	334b8200 	movtcc	r8, #45568	; 0xb200
 a3c:	4b4d4d4d 	blmi	1353f78 <startup-0x1ecac088>
 a40:	8200f003 	andhi	pc, r0, #3
 a44:	25033d4e 	strcs	r3, [r3, #-3406]	; 0xfffff2b2
 a48:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 a4c:	1303761e 	movwne	r7, #13854	; 0x361e
 a50:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 a54:	1103761e 	tstne	r3, lr, lsl r6
 a58:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 a5c:	2c03761e 	stccs	6, cr7, [r3], {30}
 a60:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 a64:	2703761e 	smladcs	r3, lr, r6, r7
 a68:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 a6c:	1d03761e 	stcne	6, cr7, [r3, #-120]	; 0xffffff88
 a70:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 a74:	1003761e 	andne	r7, r3, lr, lsl r6
 a78:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 a7c:	0e03761e 	mcreq	6, 0, r7, cr3, cr14, {0}
 a80:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 a84:	2903761e 	stmdbcs	r3, {r1, r2, r3, r4, r9, sl, ip, sp, lr}
 a88:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 a8c:	2303761e 	movwcs	r7, #13854	; 0x361e
 a90:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 a94:	2503761e 	strcs	r7, [r3, #-1566]	; 0xfffff9e2
 a98:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 a9c:	1403761e 	strne	r7, [r3], #-1566	; 0xfffff9e2
 aa0:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 aa4:	1203761e 	andne	r7, r3, #31457280	; 0x1e00000
 aa8:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 aac:	2d03761e 	stccs	6, cr7, [r3, #-120]	; 0xffffff88
 ab0:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 ab4:	2803761e 	stmdacs	r3, {r1, r2, r3, r4, r9, sl, ip, sp, lr}
 ab8:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 abc:	0c03761e 	stceq	6, cr7, [r3], {30}
 ac0:	6c4c6a74 	mcrrvs	10, 7, r6, ip, cr4
 ac4:	ac03681e 	stcge	8, cr6, [r3], {30}
 ac8:	4d947402 	cfldrsmi	mvf7, [r4, #8]
 acc:	03ae1e97 			; <UNDEFINED> instruction: 0x03ae1e97
 ad0:	2f676617 	svccs	0x00676617
 ad4:	3e59502f 	cdpcc	0, 5, cr5, cr9, cr15, {1}
 ad8:	404e3e4c 	submi	r3, lr, ip, asr #28
 adc:	4d5c7659 	ldclmi	6, cr7, [ip, #-356]	; 0xfffffe9c
 ae0:	660a033d 			; <UNDEFINED> instruction: 0x660a033d
 ae4:	11037530 	tstne	r3, r0, lsr r5
 ae8:	68506758 	ldmdavs	r0, {r3, r4, r6, r8, r9, sl, sp, lr}^
 aec:	033d4d5c 	teqeq	sp, #92, 26	; 0x1700
 af0:	4b6c6611 	blmi	1b1a33c <startup-0x1e4e5cc4>
 af4:	01000602 	tsteq	r0, r2, lsl #12
 af8:	Address 0x00000af8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4f495047 	svcmi	0x00495047
       4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
       8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
       c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
      10:	00736f70 	rsbseq	r6, r3, r0, ror pc
      14:	4f495047 	svcmi	0x00495047
      18:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
      1c:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
      20:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
      24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      28:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
      2c:	754f6461 	strbvc	r6, [pc, #-1121]	; fffffbd3 <APBAHBPrescTable+0xdfffe44f>
      30:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
      34:	61746144 	cmnvs	r4, r4, asr #2
      38:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      3c:	646f4d4f 	strbtvs	r4, [pc], #-3407	; 44 <startup-0x1fffffbc>
      40:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
      44:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
      48:	50470066 	subpl	r0, r7, r6, rrx
      4c:	415f4f49 	cmpmi	pc, r9, asr #30
      50:	65740046 	ldrbvs	r0, [r4, #-70]!	; 0xffffffba
      54:	7300706d 	movwvc	r7, #109	; 0x6d
      58:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
      5c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
      60:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      64:	74535f4f 	ldrbvc	r5, [r3], #-3919	; 0xfffff0b1
      68:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
      6c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
      70:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
      74:	006c6156 	rsbeq	r6, ip, r6, asr r1
      78:	4f495047 	svcmi	0x00495047
      7c:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
      80:	4f5f6570 	svcmi	0x005f6570
      84:	69420044 	stmdbvs	r2, {r2, r6}^
      88:	45525f74 	ldrbmi	r5, [r2, #-3956]	; 0xfffff08c
      8c:	00544553 	subseq	r4, r4, r3, asr r5
      90:	4f495047 	svcmi	0x00495047
      94:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
      98:	69426574 	stmdbvs	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
      9c:	5f5f0074 	svcpl	0x005f0074
      a0:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
      a4:	745f3233 	ldrbvc	r3, [pc], #-563	; ac <startup-0x1fffff54>
      a8:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff1b0 <APBAHBPrescTable+0xdfffda2c>
      ac:	31746e69 	cmncc	r4, r9, ror #28
      b0:	00745f36 	rsbseq	r5, r4, r6, lsr pc
      b4:	4f495047 	svcmi	0x00495047
      b8:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
      bc:	47006570 	smlsdxmi	r0, r0, r5, r6
      c0:	5f4f4950 	svcpl	0x004f4950
      c4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
      c8:	0046415f 	subeq	r4, r6, pc, asr r1
      cc:	4f495047 	svcmi	0x00495047
      d0:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
      d4:	73746942 	cmnvc	r4, #1081344	; 0x108000
      d8:	414e4500 	cmpmi	lr, r0, lsl #10
      dc:	00454c42 	subeq	r4, r5, r2, asr #24
      e0:	4f495047 	svcmi	0x00495047
      e4:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
      e8:	47006465 	strmi	r6, [r0, -r5, ror #8]
      ec:	5f4f4950 	svcpl	0x004f4950
      f0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
      f4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      f8:	6f4d5f4f 	svcvs	0x004d5f4f
      fc:	415f6564 	cmpmi	pc, r4, ror #10
     100:	5047004e 	subpl	r0, r7, lr, asr #32
     104:	525f4f49 	subspl	r4, pc, #292	; 0x124
     108:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     10c:	73746942 	cmnvc	r4, #1081344	; 0x108000
     110:	4b434c00 	blmi	10d3118 <startup-0x1ef2cee8>
     114:	50470052 	subpl	r0, r7, r2, asr r0
     118:	544f4f49 	strbpl	r4, [pc], #-3913	; 120 <startup-0x1ffffee0>
     11c:	5f657079 	svcpl	0x00657079
     120:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     124:	00666544 	rsbeq	r6, r6, r4, asr #10
     128:	5059544f 	subspl	r5, r9, pc, asr #8
     12c:	47005245 	strmi	r5, [r0, -r5, asr #4]
     130:	5f4f4950 	svcpl	0x004f4950
     134:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
     138:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     13c:	6c006465 	cfstrsvs	mvf6, [r0], {101}	; 0x65
     140:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     144:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     148:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     14c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     150:	6f4d5f4f 	svcvs	0x004d5f4f
     154:	4f5f6564 	svcmi	0x005f6564
     158:	50005455 	andpl	r5, r0, r5, asr r4
     15c:	52445055 	subpl	r5, r4, #85	; 0x55
     160:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     164:	6f4d5f4f 	svcvs	0x004d5f4f
     168:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     16c:	5047004e 	subpl	r0, r7, lr, asr #32
     170:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 178 <startup-0x1ffffe88>
     174:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     178:	53420074 	movtpl	r0, #8308	; 0x2074
     17c:	00485252 	subeq	r5, r8, r2, asr r2
     180:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
     184:	5f5f0052 	svcpl	0x005f0052
     188:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     18c:	00745f38 	rsbseq	r5, r4, r8, lsr pc
     190:	4f495047 	svcmi	0x00495047
     194:	6165525f 	cmnvs	r5, pc, asr r2
     198:	706e4964 	rsbvc	r4, lr, r4, ror #18
     19c:	61447475 	hvcvs	18245	; 0x4745
     1a0:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
     1a4:	50470074 	subpl	r0, r7, r4, ror r0
     1a8:	4f5f4f49 	svcmi	0x005f4f49
     1ac:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     1b0:	0050505f 	subseq	r5, r0, pc, asr r0
     1b4:	73746962 	cmnvc	r4, #1605632	; 0x188000
     1b8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     1bc:	6e750073 	mrcvs	0, 3, r0, cr5, cr3, {3}
     1c0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     1c4:	63206465 			; <UNDEFINED> instruction: 0x63206465
     1c8:	00726168 	rsbseq	r6, r2, r8, ror #2
     1cc:	20554e47 	subscs	r4, r5, r7, asr #28
     1d0:	20393943 	eorscs	r3, r9, r3, asr #18
     1d4:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
     1d8:	30322031 	eorscc	r2, r2, r1, lsr r0
     1dc:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
     1e0:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
     1e4:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
     1e8:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     1ec:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
     1f0:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
     1f4:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
     1f8:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
     1fc:	6172622d 	cmnvs	r2, sp, lsr #4
     200:	2068636e 	rsbcs	r6, r8, lr, ror #6
     204:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     208:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
     20c:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
     210:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
     214:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     218:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     21c:	616d2d20 	cmnvs	sp, r0, lsr #26
     220:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     224:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     228:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     22c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
     230:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
     234:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
     238:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
     23c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     240:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     244:	616d2d20 	cmnvs	sp, r0, lsr #26
     248:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     24c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     250:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     254:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     258:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
     25c:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     260:	00393963 	eorseq	r3, r9, r3, ror #18
     264:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     268:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     26c:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
     270:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     274:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     278:	4700746e 	strmi	r7, [r0, -lr, ror #8]
     27c:	5f4f4950 	svcpl	0x004f4950
     280:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     284:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     288:	50007463 	andpl	r7, r0, r3, ror #8
     28c:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
     290:	47006c61 	strmi	r6, [r0, -r1, ror #24]
     294:	5f4f4950 	svcpl	0x004f4950
     298:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
     29c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     2a0:	50470065 	subpl	r0, r7, r5, rrx
     2a4:	525f4f49 	subspl	r4, pc, #292	; 0x124
     2a8:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     2ac:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
     2b0:	61746144 	cmnvs	r4, r4, asr #2
     2b4:	4d544900 	vldrmi.16	s9, [r4, #-0]	; <UNPREDICTABLE>
     2b8:	4278525f 	rsbsmi	r5, r8, #-268435451	; 0xf0000005
     2bc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     2c0:	49440072 	stmdbmi	r4, {r1, r4, r5, r6}^
     2c4:	4c424153 	stfmie	f4, [r2], {83}	; 0x53
     2c8:	50470045 	subpl	r0, r7, r5, asr #32
     2cc:	505f4f49 	subspl	r4, pc, r9, asr #30
     2d0:	6f4c6e69 	svcvs	0x004c6e69
     2d4:	6f436b63 	svcvs	0x00436b63
     2d8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     2dc:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
     2e0:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
     2e4:	7300745f 	movwvc	r7, #1119	; 0x45f
     2e8:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     2ec:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     2f0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     2f4:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     2f8:	69420074 	stmdbvs	r2, {r2, r4, r5, r6}^
     2fc:	74634174 	strbtvc	r4, [r3], #-372	; 0xfffffe8c
     300:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     304:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
     308:	70746e65 	rsbsvc	r6, r4, r5, ror #28
     30c:	47006e69 	strmi	r6, [r0, -r9, ror #28]
     310:	5f4f4950 	svcpl	0x004f4950
     314:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
     318:	79530065 	ldmdbvc	r3, {r0, r2, r5, r6}^
     31c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     320:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
     324:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     328:	5047006b 	subpl	r0, r7, fp, rrx
     32c:	4c5f4f49 	mrrcmi	15, 4, r4, pc, cr9	; <UNPREDICTABLE>
     330:	535f776f 	cmppl	pc, #29097984	; 0x1bc0000
     334:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     338:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     33c:	654d5f4f 	strbvs	r5, [sp, #-3919]	; 0xfffff0b1
     340:	6d756964 			; <UNDEFINED> instruction: 0x6d756964
     344:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     348:	4f006465 	svcmi	0x00006465
     34c:	45455053 	strbmi	r5, [r5, #-83]	; 0xffffffad
     350:	47005244 	strmi	r5, [r0, -r4, asr #4]
     354:	784f4950 	stmdavc	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
     358:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     35c:	6570534f 	ldrbvs	r5, [r0, #-847]!	; 0xfffffcb1
     360:	545f6465 	ldrbpl	r6, [pc], #-1125	; 368 <startup-0x1ffffc98>
     364:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     368:	47006665 	strmi	r6, [r0, -r5, ror #12]
     36c:	5f4f4950 	svcpl	0x004f4950
     370:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     374:	574f445f 	smlsldpl	r4, pc, pc, r4	; <UNPREDICTABLE>
     378:	3a43004e 	bcc	10c04b8 <startup-0x1ef3fb48>
     37c:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
     380:	455c7372 	ldrbmi	r7, [ip, #-882]	; 0xfffffc8e
     384:	5c6b6972 			; <UNDEFINED> instruction: 0x5c6b6972
     388:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
     38c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     390:	61445c73 	hvcvs	17859	; 0x45c3
     394:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     398:	73696e6b 	cmnvc	r9, #1712	; 0x6b0
     39c:	7270746b 	rsbsvc	r7, r0, #1795162112	; 0x6b000000
     3a0:	6b656a6f 	blvs	195ad64 <startup-0x1e6a529c>
     3a4:	6f6b5c74 	svcvs	0x006b5c74
     3a8:	6f525c64 	svcvs	0x00525c64
     3ac:	736c6572 	cmnvc	ip, #478150656	; 0x1c800000
     3b0:	3a430065 	bcc	10c054c <startup-0x1ef3fab4>
     3b4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     3b8:	452f7372 	strmi	r7, [pc, #-882]!	; 4e <startup-0x1fffffb2>
     3bc:	2f6b6972 	svccs	0x006b6972
     3c0:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
     3c4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     3c8:	61442f73 	hvcvs	17139	; 0x42f3
     3cc:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     3d0:	73696e6b 	cmnvc	r9, #1712	; 0x6b0
     3d4:	7270746b 	rsbsvc	r7, r0, #1795162112	; 0x6b000000
     3d8:	6b656a6f 	blvs	195ad9c <startup-0x1e6a5264>
     3dc:	6f6b2f74 	svcvs	0x006b2f74
     3e0:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
     3e4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     3e8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     3ec:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     3f0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     3f4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     3f8:	5f787834 	svcpl	0x00787834
     3fc:	50647453 	rsbpl	r7, r4, r3, asr r4
     400:	70697265 	rsbvc	r7, r9, r5, ror #4
     404:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     408:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     40c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     410:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     414:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     418:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
     41c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     420:	50470063 	subpl	r0, r7, r3, rrx
     424:	505f4f49 	subspl	r4, pc, r9, asr #30
     428:	5f645075 	svcpl	0x00645075
     42c:	55504f4e 	ldrbpl	r4, [r0, #-3918]	; 0xfffff0b2
     430:	47004c4c 	strmi	r4, [r0, -ip, asr #24]
     434:	5f4f4950 	svcpl	0x004f4950
     438:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
     43c:	6942656c 	stmdbvs	r2, {r2, r3, r5, r6, r8, sl, sp, lr}^
     440:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     444:	5f706d65 	svcpl	0x00706d65
     448:	50470032 	subpl	r0, r7, r2, lsr r0
     44c:	505f4f49 	subspl	r4, pc, r9, asr #30
     450:	00645075 	rsbeq	r5, r4, r5, ror r0
     454:	4f495047 	svcmi	0x00495047
     458:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     45c:	70795474 	rsbsvc	r5, r9, r4, ror r4
     460:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     464:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     468:	69485f4f 	stmdbvs	r8, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     46c:	535f6867 	cmppl	pc, #6750208	; 0x670000
     470:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     474:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     478:	5075504f 	rsbspl	r5, r5, pc, asr #32
     47c:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     480:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     484:	50470066 	subpl	r0, r7, r6, rrx
     488:	505f4f49 	subspl	r4, pc, r9, asr #30
     48c:	5f645075 	svcpl	0x00645075
     490:	47005055 	smlsdmi	r0, r5, r0, r5
     494:	5f4f4950 	svcpl	0x004f4950
     498:	416e6950 	cmnmi	lr, r0, asr r9
     49c:	6e6f4346 	cdpvs	3, 6, cr4, cr15, cr6, {2}
     4a0:	00676966 	rsbeq	r6, r7, r6, ror #18
     4a4:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
     4a8:	5047004c 	subpl	r0, r7, ip, asr #32
     4ac:	525f4f49 	subspl	r4, pc, #292	; 0x124
     4b0:	4f646165 	svcmi	0x00646165
     4b4:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
     4b8:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
     4bc:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
     4c0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     4c4:	6f4d5f4f 	svcvs	0x004d5f4f
     4c8:	41006564 	tstmi	r0, r4, ror #10
     4cc:	4c314248 	lfmmi	f4, 4, [r1], #-288	; 0xfffffee0
     4d0:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     4d4:	42504100 	subsmi	r4, r0, #0, 2
     4d8:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
     4dc:	48410052 	stmdami	r1, {r1, r4, r6}^
     4e0:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
     4e4:	44420052 	strbmi	r0, [r2], #-82	; 0xffffffae
     4e8:	49005243 	stmdbmi	r0, {r0, r1, r6, r9, ip, lr}
     4ec:	00525343 	subseq	r5, r2, r3, asr #6
     4f0:	41474b43 	cmpmi	r7, r3, asr #22
     4f4:	524e4554 	subpl	r4, lr, #84, 10	; 0x15000000
     4f8:	4c4c5000 	marmi	acc0, r5, ip
     4fc:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     500:	00524746 	subseq	r4, r2, r6, asr #14
     504:	5f525750 	svcpl	0x00525750
     508:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     50c:	00666544 	rsbeq	r6, r6, r4, asr #10
     510:	47435353 	smlsldmi	r5, r3, r3, r3
     514:	53480052 	movtpl	r0, #32850	; 0x8052
     518:	61745345 	cmnvs	r4, r5, asr #6
     51c:	00737574 	rsbseq	r7, r3, r4, ror r5
     520:	49555043 	ldmdbmi	r5, {r0, r1, r6, ip, lr}^
     524:	45520044 	ldrbmi	r0, [r2, #-68]	; 0xffffffbc
     528:	56524553 			; <UNDEFINED> instruction: 0x56524553
     52c:	00304445 	eorseq	r4, r0, r5, asr #8
     530:	33424841 	movtcc	r4, #10305	; 0x2841
     534:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     538:	45520052 	ldrbmi	r0, [r2, #-82]	; 0xffffffae
     53c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     540:	00334445 	eorseq	r4, r3, r5, asr #8
     544:	31425041 	cmpcc	r2, r1, asr #32
     548:	00524e45 	subseq	r4, r2, r5, asr #28
     54c:	434b4344 	movtmi	r4, #45892	; 0xb344
     550:	00524746 	subseq	r4, r2, r6, asr #14
     554:	33424841 	movtcc	r4, #10305	; 0x2841
     558:	00524e45 	subseq	r4, r2, r5, asr #28
     55c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffb21 <APBAHBPrescTable+0xdfffe39d>
     560:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     564:	6972452f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r8, sl, lr}^
     568:	6f442f6b 	svcvs	0x00442f6b
     56c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
     570:	2f73746e 	svccs	0x0073746e
     574:	61746144 	cmnvs	r4, r4, asr #2
     578:	6e6b6574 	mcrvs	5, 3, r6, cr11, cr4, {3}
     57c:	746b7369 	strbtvc	r7, [fp], #-873	; 0xfffffc97
     580:	6a6f7270 	bvs	1bdcf48 <startup-0x1e4230b8>
     584:	2f746b65 	svccs	0x00746b65
     588:	2f646f6b 	svccs	0x00646f6b
     58c:	2f62696c 	svccs	0x0062696c
     590:	334d5453 	movtcc	r5, #54355	; 0xd453
     594:	5f344632 	svcpl	0x00344632
     598:	2f62696c 	svccs	0x0062696c
     59c:	334d5453 	movtcc	r5, #54355	; 0xd453
     5a0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     5a4:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     5a8:	72655064 	rsbvc	r5, r5, #100	; 0x64
     5ac:	5f687069 	svcpl	0x00687069
     5b0:	6d617845 	stclvs	8, cr7, [r1, #-276]!	; 0xfffffeec
     5b4:	73656c70 	cmnvc	r5, #112, 24	; 0x7000
     5b8:	4457572f 	ldrbmi	r5, [r7], #-1839	; 0xfffff8d1
     5bc:	57572f47 	ldrbpl	r2, [r7, -r7, asr #30]
     5c0:	455f4744 	ldrbmi	r4, [pc, #-1860]	; fffffe84 <APBAHBPrescTable+0xdfffe700>
     5c4:	706d6178 	rsbvc	r6, sp, r8, ror r1
     5c8:	732f656c 			; <UNDEFINED> instruction: 0x732f656c
     5cc:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     5d0:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
     5d4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     5d8:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     5dc:	504f0063 	subpl	r0, pc, r3, rrx
     5e0:	59454b54 	stmdbpl	r5, {r2, r4, r6, r8, r9, fp, lr}^
     5e4:	46420052 			; <UNDEFINED> instruction: 0x46420052
     5e8:	52005241 	andpl	r5, r0, #268435460	; 0x10000004
     5ec:	545f4343 	ldrbpl	r4, [pc], #-835	; 5f4 <startup-0x1ffffa0c>
     5f0:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     5f4:	44006665 	strmi	r6, [r0], #-1637	; 0xfffff99b
     5f8:	46434b43 	strbmi	r4, [r3], -r3, asr #22
     5fc:	00325247 	eorseq	r5, r2, r7, asr #4
     600:	32425041 	subcc	r5, r2, #65	; 0x41
     604:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     608:	53464300 	movtpl	r4, #25344	; 0x6300
     60c:	48410052 	stmdami	r1, {r1, r4, r6}^
     610:	53523242 	cmppl	r2, #536870916	; 0x20000004
     614:	70005254 	andvc	r5, r0, r4, asr r2
     618:	6f736c6c 	svcvs	0x00736c6c
     61c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     620:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     624:	6c70006d 	ldclvs	0, cr0, [r0], #-436	; 0xfffffe4c
     628:	4100706c 	tstmi	r0, ip, rrx
     62c:	52435249 	subpl	r5, r3, #-1879048188	; 0x90000004
     630:	42435300 	submi	r5, r3, #0, 6
     634:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     638:	50410065 	subpl	r0, r1, r5, rrx
     63c:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
     640:	74530052 	ldrbvc	r0, [r3], #-82	; 0xffffffae
     644:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0xfffffd9f
     648:	756f4370 	strbvc	r4, [pc, #-880]!	; 2e0 <startup-0x1ffffd20>
     64c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     650:	43485300 	movtmi	r5, #33536	; 0x8300
     654:	53005253 	movwpl	r5, #595	; 0x253
     658:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     65c:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
     660:	6f6c4365 	svcvs	0x006c4365
     664:	70556b63 	subsvc	r6, r5, r3, ror #22
     668:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     66c:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
     670:	50005241 	andpl	r5, r0, r1, asr #4
     674:	46434c4c 	strbmi	r4, [r3], -ip, asr #24
     678:	41005247 	tstmi	r0, r7, asr #4
     67c:	4c314250 	lfmmi	f4, 4, [r1], #-320	; 0xfffffec0
     680:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     684:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     688:	006f6376 	rsbeq	r6, pc, r6, ror r3	; <UNPREDICTABLE>
     68c:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
     690:	41534900 	cmpmi	r3, r0, lsl #18
     694:	46440052 			; <UNDEFINED> instruction: 0x46440052
     698:	48005253 	stmdami	r0, {r0, r1, r4, r6, r9, ip, lr}
     69c:	00525346 	subseq	r5, r2, r6, asr #6
     6a0:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     6a4:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     6a8:	4d4d0052 	stclmi	0, cr0, [sp, #-328]	; 0xfffffeb8
     6ac:	52005246 	andpl	r5, r0, #1610612740	; 0x60000004
     6b0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     6b4:	31444556 	cmpcc	r4, r6, asr r5
     6b8:	53455200 	movtpl	r5, #20992	; 0x5200
     6bc:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     6c0:	53003244 	movwpl	r3, #580	; 0x244
     6c4:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
     6c8:	6f6c4373 	svcvs	0x006c4373
     6cc:	52006b63 	andpl	r6, r0, #101376	; 0x18c00
     6d0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     6d4:	34444556 	strbcc	r4, [r4], #-1366	; 0xfffffaaa
     6d8:	53455200 	movtpl	r5, #20992	; 0x5200
     6dc:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     6e0:	52003544 	andpl	r3, r0, #68, 10	; 0x11000000
     6e4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     6e8:	36444556 			; <UNDEFINED> instruction: 0x36444556
     6ec:	42484100 	submi	r4, r8, #0, 2
     6f0:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
     6f4:	73795300 	cmnvc	r9, #0, 6
     6f8:	496d6574 	stmdbmi	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     6fc:	0074696e 	rsbseq	r6, r4, lr, ror #18
     700:	31424841 	cmpcc	r2, r1, asr #16
     704:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     708:	53464100 	movtpl	r4, #24832	; 0x6100
     70c:	48410052 	stmdami	r1, {r1, r4, r6}^
     710:	53523342 	cmppl	r2, #134217729	; 0x8000001
     714:	46005254 			; <UNDEFINED> instruction: 0x46005254
     718:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     71c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     720:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     724:	4c4c5000 	marmi	acc0, r5, ip
     728:	43494153 	movtmi	r4, #37203	; 0x9153
     72c:	00524746 	subseq	r4, r2, r6, asr #14
     730:	43415043 	movtmi	r5, #4163	; 0x1043
     734:	50410052 	subpl	r0, r1, r2, asr r0
     738:	504c3242 	subpl	r3, ip, r2, asr #4
     73c:	00524e45 	subseq	r4, r2, r5, asr #28
     740:	4354504f 	cmpmi	r4, #79	; 0x4f
     744:	504f0052 	subpl	r0, pc, r2, asr r0	; <UNPREDICTABLE>
     748:	31524354 	cmpcc	r2, r4, asr r3
     74c:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
     750:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     754:	54520031 	ldrbpl	r0, [r2], #-49	; 0xffffffcf
     758:	4b575f43 	blmi	15d846c <startup-0x1ea27b94>
     75c:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     760:	006e5152 	rsbeq	r5, lr, r2, asr r1
     764:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     768:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     76c:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     770:	5f31414d 	svcpl	0x0031414d
     774:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     778:	5f366d61 	svcpl	0x00366d61
     77c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     780:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     784:	50555f38 	subspl	r5, r5, r8, lsr pc
     788:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     78c:	495f3331 	ldmdbmi	pc, {r0, r4, r5, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     790:	006e5152 	rsbeq	r5, lr, r2, asr r1
     794:	6f6c5f5f 	svcvs	0x006c5f5f
     798:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
     79c:	5f00745f 	svcpl	0x0000745f
     7a0:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
     7a4:	5f006575 	svcpl	0x00006575
     7a8:	0066735f 	rsbeq	r7, r6, pc, asr r3
     7ac:	6165725f 	cmnvs	r5, pc, asr r2
     7b0:	564e0064 	strbpl	r0, [lr], -r4, rrx
     7b4:	545f4349 	ldrbpl	r4, [pc], #-841	; 7bc <startup-0x1ffff844>
     7b8:	00657079 	rsbeq	r7, r5, r9, ror r0
     7bc:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     7c0:	5f006574 	svcpl	0x00006574
     7c4:	74637361 	strbtvc	r7, [r3], #-865	; 0xfffffc9f
     7c8:	5f656d69 	svcpl	0x00656d69
     7cc:	00667562 	rsbeq	r7, r6, r2, ror #10
     7d0:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
     7d4:	006e656c 	rsbeq	r6, lr, ip, ror #10
     7d8:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
     7dc:	00646573 	rsbeq	r6, r4, r3, ror r5
     7e0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     7e4:	63775f00 	cmnvs	r7, #0, 30
     7e8:	6f747273 	svcvs	0x00747273
     7ec:	5f73626d 	svcpl	0x0073626d
     7f0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     7f4:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
     7f8:	00667562 	rsbeq	r7, r6, r2, ror #10
     7fc:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     800:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
     804:	414d4400 	cmpmi	sp, r0, lsl #8
     808:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     80c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     810:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     814:	5f006e51 	svcpl	0x00006e51
     818:	6134366c 	teqvs	r4, ip, ror #12
     81c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     820:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     824:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     828:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
     82c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     830:	5152495f 	cmppl	r2, pc, asr r9
     834:	4344006e 	movtmi	r0, #16494	; 0x406e
     838:	495f494d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
     83c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     840:	6c756d5f 	ldclvs	13, cr6, [r5], #-380	; 0xfffffe84
     844:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
     848:	495f324d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     84c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     850:	52504349 	subspl	r4, r0, #603979777	; 0x24000001
     854:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     858:	58525f32 	ldmdapl	r2, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     85c:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     860:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
     864:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     868:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
     86c:	5f006e51 	svcpl	0x00006e51
     870:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     874:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     878:	5f53485f 	svcpl	0x0053485f
     87c:	50554b57 	subspl	r4, r5, r7, asr fp
     880:	5152495f 	cmppl	r2, pc, asr r9
     884:	5053006e 	subspl	r0, r3, lr, rrx
     888:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     88c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     890:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     894:	4b52425f 	blmi	1491218 <startup-0x1eb6ede8>
     898:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     89c:	495f3231 	ldmdbmi	pc, {r0, r4, r5, r9, ip, sp}^	; <UNPREDICTABLE>
     8a0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     8a4:	6c69665f 	stclvs	6, cr6, [r9], #-380	; 0xfffffe84
     8a8:	6f5f0065 	svcvs	0x005f0065
     8ac:	78655f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     8b0:	615f7469 	cmpvs	pc, r9, ror #8
     8b4:	00736772 	rsbseq	r6, r3, r2, ror r7
     8b8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     8bc:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
     8c0:	6f505f4f 	svcvs	0x00505f4f
     8c4:	00737472 	rsbseq	r7, r3, r2, ror r4
     8c8:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
     8cc:	5f6e656c 	svcpl	0x006e656c
     8d0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     8d4:	725f0065 	subsvc	r0, pc, #101	; 0x65
     8d8:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
     8dc:	006b5f74 	rsbeq	r5, fp, r4, ror pc
     8e0:	7a69735f 	bvc	1a5d664 <startup-0x1e5a299c>
     8e4:	79530065 	ldmdbvc	r3, {r0, r2, r5, r6}^
     8e8:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     8ec:	61485f6b 	cmpvs	r8, fp, ror #30
     8f0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     8f4:	6c5f0072 	mrrcvs	0, 7, r0, pc, cr2	; <UNPREDICTABLE>
     8f8:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     8fc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     900:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     904:	414d4400 	cmpmi	sp, r0, lsl #8
     908:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     90c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     910:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     914:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     918:	5f314d49 	svcpl	0x00314d49
     91c:	5f475254 	svcpl	0x00475254
     920:	5f4d4f43 	svcpl	0x004d4f43
     924:	314d4954 	cmpcc	sp, r4, asr r9
     928:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     92c:	73006e51 	movwvc	r6, #3665	; 0xe51
     930:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     934:	63007075 	movwvs	r7, #117	; 0x75
     938:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     93c:	69626c6f 	stmdbvs	r2!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
     940:	5f007374 	svcpl	0x00007374
     944:	5f6d745f 	svcpl	0x006d745f
     948:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
     94c:	4349564e 	movtmi	r5, #38478	; 0x964e
     950:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     954:	6f697250 	svcvs	0x00697250
     958:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     95c:	73795300 	cmnvc	r9, #0, 6
     960:	6b636954 	blvs	18daeb8 <startup-0x1e725148>
     964:	5152495f 	cmppl	r2, pc, asr r9
     968:	5355006e 	cmppl	r5, #110	; 0x6e
     96c:	33545241 	cmpcc	r4, #268435460	; 0x10000004
     970:	5152495f 	cmppl	r2, pc, asr r9
     974:	755f006e 	ldrbvc	r0, [pc, #-110]	; 90e <startup-0x1ffff6f2>
     978:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
     97c:	61725f64 	cmnvs	r2, r4, ror #30
     980:	6d00646e 	cfstrsvs	mvf6, [r0, #-440]	; 0xfffffe48
     984:	6f69746f 	svcvs	0x0069746f
     988:	6900316e 	stmdbvs	r0, {r1, r2, r3, r5, r6, r8, ip, sp}
     98c:	5f74696e 	svcpl	0x0074696e
     990:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
     994:	0073726f 	rsbseq	r7, r3, pc, ror #4
     998:	31414d44 	cmpcc	r1, r4, asr #26
     99c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     9a0:	326d6165 	rsbcc	r6, sp, #1073741849	; 0x40000019
     9a4:	5152495f 	cmppl	r2, pc, asr r9
     9a8:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     9ac:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     9b0:	61657274 	smcvs	22308	; 0x5724
     9b4:	495f346d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     9b8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9bc:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
     9c0:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
     9c4:	63657073 	cmnvs	r5, #115	; 0x73
     9c8:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
     9cc:	6f6c5f64 	svcvs	0x006c5f64
     9d0:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
     9d4:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
     9d8:	3249006f 	subcc	r0, r9, #111	; 0x6f
     9dc:	455f3143 	ldrbmi	r3, [pc, #-323]	; 8a1 <startup-0x1ffff75f>
     9e0:	52495f52 	subpl	r5, r9, #328	; 0x148
     9e4:	5f006e51 	svcpl	0x00006e51
     9e8:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
     9ec:	675f0074 			; <UNDEFINED> instruction: 0x675f0074
     9f0:	61626f6c 	cmnvs	r2, ip, ror #30
     9f4:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!	; 0xfffffe50
     9f8:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
     9fc:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
     a00:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     a04:	43535f32 	cmpmi	r3, #50, 30	; 0xc8
     a08:	52495f45 	subpl	r5, r9, #276	; 0x114
     a0c:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     a10:	5f354d49 	svcpl	0x00354d49
     a14:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a18:	61735500 	cmnvs	r3, r0, lsl #10
     a1c:	61466567 	cmpvs	r6, r7, ror #10
     a20:	5f746c75 	svcpl	0x00746c75
     a24:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a28:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
     a2c:	635f0073 	cmpvs	pc, #115	; 0x73
     a30:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
     a34:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
     a38:	436e7275 	cmnmi	lr, #1342177287	; 0x50000007
     a3c:	0065646f 	rsbeq	r6, r5, pc, ror #8
     a40:	314e4143 	cmpcc	lr, r3, asr #2
     a44:	3058525f 	subscc	r5, r8, pc, asr r2
     a48:	5152495f 	cmppl	r2, pc, asr r9
     a4c:	735f006e 	cmpvc	pc, #110	; 0x6e
     a50:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     a54:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     a58:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     a5c:	53006e51 	movwpl	r6, #3665	; 0xe51
     a60:	00524954 	subseq	r4, r2, r4, asr r9
     a64:	31433249 	cmpcc	r3, r9, asr #4
     a68:	5f56455f 	svcpl	0x0056455f
     a6c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a70:	6f635f00 	svcvs	0x00635f00
     a74:	65696b6f 	strbvs	r6, [r9, #-2927]!	; 0xfffff491
     a78:	64775f00 	ldrbtvs	r5, [r7], #-3840	; 0xfffff100
     a7c:	5f5f0073 	svcpl	0x005f0073
     a80:	6b636f6c 	blvs	18dc838 <startup-0x1e7237c8>
     a84:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     a88:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
     a8c:	5f00636e 	svcpl	0x0000636e
     a90:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
     a94:	5f007465 	svcpl	0x00007465
     a98:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
     a9c:	54006675 	strpl	r6, [r0], #-1653	; 0xfffff98b
     aa0:	5f314d49 	svcpl	0x00314d49
     aa4:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     aa8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     aac:	48534148 	ldmdami	r3, {r3, r6, r8, lr}^
     ab0:	474e525f 	smlsldmi	r5, lr, pc, r2	; <UNPREDICTABLE>
     ab4:	5152495f 	cmppl	r2, pc, asr r9
     ab8:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     abc:	5f314954 	svcpl	0x00314954
     ac0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ac4:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     ac8:	58545f31 	ldmdapl	r4, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     acc:	5152495f 	cmppl	r2, pc, asr r9
     ad0:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     ad4:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     ad8:	61657274 	smcvs	22308	; 0x5724
     adc:	495f356d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     ae0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ae4:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     ae8:	4752545f 			; <UNDEFINED> instruction: 0x4752545f
     aec:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 978 <startup-0x1ffff688>
     af0:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     af4:	495f3431 	ldmdbmi	pc, {r0, r4, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     af8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     afc:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     b00:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     b04:	376d6165 	strbcc	r6, [sp, -r5, ror #2]!
     b08:	5152495f 	cmppl	r2, pc, asr r9
     b0c:	544f006e 	strbpl	r0, [pc], #-110	; b14 <startup-0x1ffff4ec>
     b10:	53465f47 	movtpl	r5, #28487	; 0x6f47
     b14:	5152495f 	cmppl	r2, pc, asr r9
     b18:	6f4e006e 	svcvs	0x004e006e
     b1c:	73614d6e 	cmnvc	r1, #7040	; 0x1b80
     b20:	6c62616b 	stfvse	f6, [r2], #-428	; 0xfffffe54
     b24:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
     b28:	5152495f 	cmppl	r2, pc, asr r9
     b2c:	5757006e 	ldrbpl	r0, [r7, -lr, rrx]
     b30:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     b34:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b38:	7335705f 	teqvc	r5, #95	; 0x5f
     b3c:	6d654d00 	stclvs	13, cr4, [r5, #-0]
     b40:	4d79726f 	lfmmi	f7, 2, [r9, #-444]!	; 0xfffffe44
     b44:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     b48:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
     b4c:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     b50:	5f006e51 	svcpl	0x00006e51
     b54:	4946735f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
     b58:	5f00454c 	svcpl	0x0000454c
     b5c:	6964735f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
     b60:	696e6964 	stmdbvs	lr!, {r2, r5, r6, r8, fp, sp, lr}^
     b64:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
     b68:	7367616c 	cmnvc	r7, #108, 2
     b6c:	3a430032 	bcc	10c0c3c <startup-0x1ef3f3c4>
     b70:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     b74:	452f7372 	strmi	r7, [pc, #-882]!	; 80a <startup-0x1ffff7f6>
     b78:	2f6b6972 	svccs	0x006b6972
     b7c:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
     b80:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     b84:	61442f73 	hvcvs	17139	; 0x42f3
     b88:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     b8c:	73696e6b 	cmnvc	r9, #1712	; 0x6b0
     b90:	7270746b 	rsbsvc	r7, r0, #1795162112	; 0x6b000000
     b94:	6b656a6f 	blvs	195b558 <startup-0x1e6a4aa8>
     b98:	6f6b2f74 	svcvs	0x006b2f74
     b9c:	6f522f64 	svcvs	0x00522f64
     ba0:	736c6572 	cmnvc	ip, #478150656	; 0x1c800000
     ba4:	616d2f65 	cmnvs	sp, r5, ror #30
     ba8:	725f6e69 	subsvc	r6, pc, #1680	; 0x690
     bac:	6c65726f 	sfmvs	f7, 2, [r5], #-444	; 0xfffffe44
     bb0:	632e6573 			; <UNDEFINED> instruction: 0x632e6573
     bb4:	4d415400 	cfstrdmi	mvd5, [r1, #-0]
     bb8:	54535f50 	ldrbpl	r5, [r3], #-3920	; 0xfffff0b0
     bbc:	5f504d41 	svcpl	0x00504d41
     bc0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     bc4:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     bc8:	43535f31 	cmpmi	r3, #49, 30	; 0xc4
     bcc:	52495f45 	subpl	r5, r9, #276	; 0x114
     bd0:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     bd4:	5f6e5152 	svcpl	0x006e5152
     bd8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     bdc:	414d4400 	cmpmi	sp, r0, lsl #8
     be0:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     be4:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     be8:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     bec:	74006e51 	strvc	r6, [r0], #-3665	; 0xfffff1af
     bf0:	00676972 	rsbeq	r6, r7, r2, ror r9
     bf4:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
     bf8:	5f6c616e 	svcpl	0x006c616e
     bfc:	00667562 	rsbeq	r7, r6, r2, ror #10
     c00:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     c04:	5f52455f 	svcpl	0x0052455f
     c08:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c0c:	69425f00 	stmdbvs	r2, {r8, r9, sl, fp, ip, lr}^
     c10:	746e6967 	strbtvc	r6, [lr], #-2407	; 0xfffff699
     c14:	54736d00 	ldrbtpl	r6, [r3], #-3328	; 0xfffff300
     c18:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     c1c:	616d5f00 	cmnvs	sp, r0, lsl #30
     c20:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
     c24:	746f4d00 	strbtvc	r4, [pc], #-3328	; c2c <startup-0x1ffff3d4>
     c28:	536e6f69 	cmnpl	lr, #420	; 0x1a4
     c2c:	6f736e65 	svcvs	0x00736e65
     c30:	5f007372 	svcpl	0x00007372
     c34:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
     c38:	70756e61 	rsbsvc	r6, r5, r1, ror #28
     c3c:	73754200 	cmnvc	r5, #0, 4
     c40:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
     c44:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     c48:	74006e51 	strvc	r6, [r0], #-3665	; 0xfffff1af
     c4c:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     c50:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
     c54:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
     c58:	41550030 	cmpmi	r5, r0, lsr r0
     c5c:	5f355452 	svcpl	0x00355452
     c60:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c64:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     c68:	52425f31 	subpl	r5, r2, #49, 30	; 0xc4
     c6c:	49545f4b 	ldmdbmi	r4, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
     c70:	495f394d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, ip, sp}^	; <UNPREDICTABLE>
     c74:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c78:	656d655f 	strbvs	r6, [sp, #-1375]!	; 0xfffffaa1
     c7c:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
     c80:	54007963 	strpl	r7, [r0], #-2403	; 0xfffff69d
     c84:	5f374d49 	svcpl	0x00374d49
     c88:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c8c:	48544500 	ldmdami	r4, {r8, sl, lr}^
     c90:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
     c94:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     c98:	65006e51 	strvs	r6, [r0, #-3665]	; 0xfffff1af
     c9c:	006f6863 	rsbeq	r6, pc, r3, ror #16
     ca0:	5f47544f 	svcpl	0x0047544f
     ca4:	495f5348 	ldmdbmi	pc, {r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     ca8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cac:	6f696e5f 	svcvs	0x00696e5f
     cb0:	53007362 	movwpl	r7, #866	; 0x362
     cb4:	5f314950 	svcpl	0x00314950
     cb8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     cbc:	735f5f00 	cmpvc	pc, #0, 30
     cc0:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
     cc4:	6d6e5f00 	stclvs	15, cr5, [lr, #-0]
     cc8:	6f6c6c61 	svcvs	0x006c6c61
     ccc:	56530063 	ldrbpl	r0, [r3], -r3, rrx
     cd0:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
     cd4:	5152495f 	cmppl	r2, pc, asr r9
     cd8:	675f006e 	ldrbvs	r0, [pc, -lr, rrx]
     cdc:	616d6d61 	cmnvs	sp, r1, ror #26
     ce0:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
     ce4:	6d61676e 	stclvs	7, cr6, [r1, #-440]!	; 0xfffffe48
     ce8:	72665f00 	rsbvc	r5, r6, #0, 30
     cec:	696c6565 	stmdbvs	ip!, {r0, r2, r5, r6, r8, sl, sp, lr}^
     cf0:	5f007473 	svcpl	0x00007473
     cf4:	73626f69 	cmnvc	r2, #420	; 0x1a4
     cf8:	6c675f00 	stclvs	15, cr5, [r7], #-0
     cfc:	46006575 			; <UNDEFINED> instruction: 0x46006575
     d00:	495f5550 	ldmdbmi	pc, {r4, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
     d04:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d08:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
     d0c:	4155006e 	cmpmi	r5, lr, rrx
     d10:	5f345452 	svcpl	0x00345452
     d14:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d18:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     d1c:	5f53465f 	svcpl	0x0053465f
     d20:	50554b57 	subspl	r4, r5, r7, asr fp
     d24:	5152495f 	cmppl	r2, pc, asr r9
     d28:	5443006e 	strbpl	r0, [r3], #-110	; 0xffffff92
     d2c:	54004c52 	strpl	r4, [r0], #-3154	; 0xfffff3ae
     d30:	5f364d49 	svcpl	0x00364d49
     d34:	5f434144 	svcpl	0x00434144
     d38:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d3c:	5f685f00 	svcpl	0x00685f00
     d40:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
     d44:	3249006f 	subcc	r0, r9, #111	; 0x6f
     d48:	455f3243 	ldrbmi	r3, [pc, #-579]	; b0d <startup-0x1ffff4f3>
     d4c:	52495f56 	subpl	r5, r9, #344	; 0x158
     d50:	5f006e51 	svcpl	0x00006e51
     d54:	74726377 	ldrbtvc	r6, [r2], #-887	; 0xfffffc89
     d58:	5f626d6f 	svcpl	0x00626d6f
     d5c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     d60:	5f5f0065 	svcpl	0x005f0065
     d64:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; b9c <startup-0x1ffff464>
     d68:	00796164 	rsbseq	r6, r9, r4, ror #2
     d6c:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
     d70:	62755f00 	rsbsvs	r5, r5, #0, 30
     d74:	5f006675 	svcpl	0x00006675
     d78:	65647473 	strbvs	r7, [r4, #-1139]!	; 0xfffffb8d
     d7c:	5f007272 	svcpl	0x00007272
     d80:	6f746377 	svcvs	0x00746377
     d84:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
     d88:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     d8c:	626d5f00 	rsbvs	r5, sp, #0, 30
     d90:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     d94:	725f0065 	subsvc	r0, pc, #101	; 0x65
     d98:	5f646e61 	svcpl	0x00646e61
     d9c:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
     da0:	6c665f00 	stclvs	15, cr5, [r6], #-0
     da4:	00736761 	rsbseq	r6, r3, r1, ror #14
     da8:	31414d44 	cmpcc	r1, r4, asr #26
     dac:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     db0:	316d6165 	cmncc	sp, r5, ror #2
     db4:	5152495f 	cmppl	r2, pc, asr r9
     db8:	615f006e 	cmpvs	pc, lr, rrx
     dbc:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     dc0:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
     dc4:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     dc8:	61657274 	smcvs	22308	; 0x5724
     dcc:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     dd0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     dd4:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     dd8:	5f58545f 	svcpl	0x0058545f
     ddc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     de0:	635f5f00 	cmpvs	pc, #0, 30
     de4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     de8:	73795300 	cmnvc	r9, #0, 6
     dec:	6b636954 	blvs	18db344 <startup-0x1e724cbc>
     df0:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     df4:	5f5f0065 	svcpl	0x005f0065
     df8:	775f6d74 			; <UNDEFINED> instruction: 0x775f6d74
     dfc:	00796164 	rsbseq	r6, r9, r4, ror #2
     e00:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     e04:	6164795f 	cmnvs	r4, pc, asr r9
     e08:	735f0079 	cmpvc	pc, #121	; 0x79
     e0c:	00646565 	rsbeq	r6, r4, r5, ror #10
     e10:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
     e14:	4d44006b 	stclmi	0, cr0, [r4, #-428]	; 0xfffffe54
     e18:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     e1c:	61657274 	smcvs	22308	; 0x5724
     e20:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
     e24:	006e5152 	rsbeq	r5, lr, r2, asr r1
     e28:	6f70665f 	svcvs	0x0070665f
     e2c:	00745f73 	rsbseq	r5, r4, r3, ror pc
     e30:	69746f4d 	ldmdbvs	r4!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
     e34:	65536e6f 	ldrbvs	r6, [r3, #-3695]	; 0xfffff191
     e38:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
     e3c:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
     e40:	00626863 	rsbeq	r6, r2, r3, ror #16
     e44:	5f435452 	svcpl	0x00435452
     e48:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
     e4c:	52495f6d 	subpl	r5, r9, #436	; 0x1b4
     e50:	5f006e51 	svcpl	0x00006e51
     e54:	6f74626d 	svcvs	0x0074626d
     e58:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
     e5c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     e60:	43324900 	teqmi	r2, #0, 18
     e64:	52455f33 	subpl	r5, r5, #51, 30	; 0xcc
     e68:	5152495f 	cmppl	r2, pc, asr r9
     e6c:	5243006e 	subpl	r0, r3, #110	; 0x6e
     e70:	495f5059 	ldmdbmi	pc, {r0, r3, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     e74:	006e5152 	rsbeq	r5, lr, r2, asr r1
     e78:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     e7c:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
     e80:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     e84:	5f006e51 	svcpl	0x00006e51
     e88:	5f6f7364 	svcpl	0x006f7364
     e8c:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
     e90:	5f00656c 	svcpl	0x0000656c
     e94:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     e98:	54003834 	strpl	r3, [r0], #-2100	; 0xfffff7cc
     e9c:	5f334d49 	svcpl	0x00334d49
     ea0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ea4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     ea8:	74756f64 	ldrbtvc	r6, [r5], #-3940	; 0xfffff09c
     eac:	41535500 	cmpmi	r3, r0, lsl #10
     eb0:	5f315452 	svcpl	0x00315452
     eb4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     eb8:	6c625f00 	stclvs	15, cr5, [r2], #-0
     ebc:	7a69736b 	bvc	1a5dc70 <startup-0x1e5a2390>
     ec0:	625f0065 	subsvs	r0, pc, #101	; 0x65
     ec4:	00657361 	rsbeq	r7, r5, r1, ror #6
     ec8:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     ecc:	3158525f 	cmpcc	r8, pc, asr r2
     ed0:	5152495f 	cmppl	r2, pc, asr r9
     ed4:	735f006e 	cmpvc	pc, #110	; 0x6e
     ed8:	6f747274 	svcvs	0x00747274
     edc:	616c5f6b 	cmnvs	ip, fp, ror #30
     ee0:	41007473 	tstmi	r0, r3, ror r4
     ee4:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     ee8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     eec:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
     ef0:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
     ef4:	6174735f 	cmnvs	r4, pc, asr r3
     ef8:	49006574 	stmdbmi	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     efc:	00524543 	subseq	r4, r2, r3, asr #10
     f00:	6f6c665f 	svcvs	0x006c665f
     f04:	745f6b63 	ldrbvc	r6, [pc], #-2915	; f0c <startup-0x1ffff0f4>
     f08:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
     f0c:	00454c49 	subeq	r4, r5, r9, asr #24
     f10:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
     f14:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     f18:	5f00745f 	svcpl	0x0000745f
     f1c:	00383472 	eorseq	r3, r8, r2, ror r4
     f20:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
     f24:	5f6b6369 	svcpl	0x006b6369
     f28:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     f2c:	50006769 	andpl	r6, r0, r9, ror #14
     f30:	495f4456 	ldmdbmi	pc, {r1, r2, r4, r6, sl, lr}^	; <UNPREDICTABLE>
     f34:	006e5152 	rsbeq	r5, lr, r2, asr r1
     f38:	746e6977 	strbtvc	r6, [lr], #-2423	; 0xfffff689
     f3c:	4300745f 	movwmi	r7, #1119	; 0x45f
     f40:	42494c41 	submi	r4, r9, #16640	; 0x4100
     f44:	61645f00 	cmnvs	r4, r0, lsl #30
     f48:	46006174 			; <UNDEFINED> instruction: 0x46006174
     f4c:	5f434d53 	svcpl	0x00434d53
     f50:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f54:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     f58:	495f3049 	ldmdbmi	pc, {r0, r3, r6, ip, sp}^	; <UNPREDICTABLE>
     f5c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     f60:	31414d44 	cmpcc	r1, r4, asr #26
     f64:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     f68:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
     f6c:	5152495f 	cmppl	r2, pc, asr r9
     f70:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     f74:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     f78:	61657274 	smcvs	22308	; 0x5724
     f7c:	495f366d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     f80:	006e5152 	rsbeq	r5, lr, r2, asr r1
     f84:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xfffff0b4
     f88:	62654400 	rsbvs	r4, r5, #0, 8
     f8c:	6f4d6775 	svcvs	0x004d6775
     f90:	6f74696e 	svcvs	0x0074696e
     f94:	52495f72 	subpl	r5, r9, #456	; 0x1c8
     f98:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     f9c:	5f334332 	svcpl	0x00334332
     fa0:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     fa4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     fa8:	5f485445 	svcpl	0x00485445
     fac:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     fb0:	626d5f00 	rsbvs	r5, sp, #0, 30
     fb4:	5f6e656c 	svcpl	0x006e656c
     fb8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     fbc:	61700065 	cmnvs	r0, r5, rrx
     fc0:	6f777373 	svcvs	0x00777373
     fc4:	52006472 	andpl	r6, r0, #1912602624	; 0x72000000
     fc8:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     fcc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     fd0:	6f697270 	svcvs	0x00697270
     fd4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     fd8:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
     fdc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     fe0:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
     fe4:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     fe8:	61657274 	smcvs	22308	; 0x5724
     fec:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     ff0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ff4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     ff8:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     ffc:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1000:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    1004:	6165795f 	cmnvs	r5, pc, asr r9
    1008:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    100c:	555f314d 	ldrbpl	r3, [pc, #-333]	; ec7 <startup-0x1ffff139>
    1010:	49545f50 	ldmdbmi	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    1014:	5f30314d 	svcpl	0x0030314d
    1018:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    101c:	626c5f00 	rsbvs	r5, ip, #0, 30
    1020:	7a697366 	bvc	1a5ddc0 <startup-0x1e5a2240>
    1024:	695f0065 	ldmdbvs	pc, {r0, r2, r5, r6}^	; <UNPREDICTABLE>
    1028:	5f00636e 	svcpl	0x0000636e
    102c:	00646e69 	rsbeq	r6, r4, r9, ror #28
    1030:	6e69616d 	powvsez	f6, f1, #5.0
    1034:	735f5f00 	cmpvc	pc, #0, 30
    1038:	00667562 	rsbeq	r7, r6, r2, ror #10
    103c:	5f73695f 	svcpl	0x0073695f
    1040:	00617863 	rsbeq	r7, r1, r3, ror #16
    1044:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    1048:	00545f4b 	subseq	r5, r4, fp, asr #30
    104c:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    1050:	4f006674 	svcmi	0x00006674
    1054:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    1058:	50455f53 	subpl	r5, r5, r3, asr pc
    105c:	554f5f31 	strbpl	r5, [pc, #-3889]	; 133 <startup-0x1ffffecd>
    1060:	52495f54 	subpl	r5, r9, #84, 30	; 0x150
    1064:	5f006e51 	svcpl	0x00006e51
    1068:	61636f6c 	cmnvs	r3, ip, ror #30
    106c:	5f00656c 	svcpl	0x0000656c
    1070:	6f4c555f 	svcvs	0x004c555f
    1074:	5f00676e 	svcpl	0x0000676e
    1078:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
    107c:	4300746c 	movwmi	r7, #1132	; 0x46c
    1080:	5f314e41 	svcpl	0x00314e41
    1084:	5f315852 	svcpl	0x00315852
    1088:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    108c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    1090:	355f3949 	ldrbcc	r3, [pc, #-2377]	; 74f <startup-0x1ffff8b1>
    1094:	5152495f 	cmppl	r2, pc, asr r9
    1098:	6f5f006e 	svcvs	0x005f006e
    109c:	745f6666 	ldrbvc	r6, [pc], #-1638	; 10a4 <startup-0x1fffef5c>
    10a0:	64615f00 	strbtvs	r5, [r1], #-3840	; 0xfffff100
    10a4:	58450064 	stmdapl	r5, {r2, r5, r6}^
    10a8:	5f344954 	svcpl	0x00344954
    10ac:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    10b0:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 10b8 <startup-0x1fffef48>
    10b4:	6f685f6d 	svcvs	0x00685f6d
    10b8:	54007275 	strpl	r7, [r0], #-629	; 0xfffffd8b
    10bc:	5f384d49 	svcpl	0x00384d49
    10c0:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    10c4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    10c8:	4f494453 	svcmi	0x00494453
    10cc:	5152495f 	cmppl	r2, pc, asr r9
    10d0:	5349006e 	movtpl	r0, #36974	; 0x906e
    10d4:	45005250 	strmi	r5, [r0, #-592]	; 0xfffffdb0
    10d8:	33495458 	movtcc	r5, #37976	; 0x9458
    10dc:	5152495f 	cmppl	r2, pc, asr r9
    10e0:	6550006e 	ldrbvs	r0, [r0, #-110]	; 0xffffff92
    10e4:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
    10e8:	5152495f 	cmppl	r2, pc, asr r9
    10ec:	6d5f006e 	ldclvs	0, cr0, [pc, #-440]	; f3c <startup-0x1ffff0c4>
    10f0:	74727362 	ldrbtvc	r7, [r2], #-866	; 0xfffffc9e
    10f4:	7363776f 	cmnvc	r3, #29097984	; 0x1bc0000
    10f8:	6174735f 	cmnvs	r4, pc, asr r3
    10fc:	4f006574 	svcmi	0x00006574
    1100:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    1104:	50455f53 	subpl	r5, r5, r3, asr pc
    1108:	4e495f31 	mcrmi	15, 2, r5, cr9, cr1, {1}
    110c:	5152495f 	cmppl	r2, pc, asr r9
    1110:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    1114:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    1118:	61657274 	smcvs	22308	; 0x5724
    111c:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    1120:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1124:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
    1128:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
    112c:	73677261 	cmnvc	r7, #268435462	; 0x10000006
    1130:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 1138 <startup-0x1fffeec8>
    1134:	73695f6d 	cmnvc	r9, #436	; 0x1b4
    1138:	00747364 	rsbseq	r7, r4, r4, ror #6
    113c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    1140:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
    1144:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
    1148:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
    114c:	72655f65 	rsbvc	r5, r5, #404	; 0x194
    1150:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
    1154:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    1158:	61657274 	smcvs	22308	; 0x5724
    115c:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    1160:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1164:	5f434352 	svcpl	0x00434352
    1168:	4b4c4348 	blmi	1311e90 <startup-0x1ecee170>
    116c:	43435200 	movtmi	r5, #12800	; 0x3200
    1170:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
    1174:	43435200 	movtmi	r5, #12800	; 0x3200
    1178:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    117c:	43494153 	movtmi	r4, #37203	; 0x9153
    1180:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1184:	505f4343 	subspl	r4, pc, r3, asr #6
    1188:	41534c4c 	cmpmi	r3, ip, asr #24
    118c:	76694449 	strbtvc	r4, [r9], -r9, asr #8
    1190:	43520051 	cmpmi	r2, #81	; 0x51
    1194:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1198:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    119c:	52766944 	rsbspl	r6, r6, #68, 18	; 0x110000
    11a0:	61747300 	cmnvs	r4, r0, lsl #6
    11a4:	72737574 	rsbsvc	r7, r3, #116, 10	; 0x1d000000
    11a8:	53006765 	movwpl	r6, #1893	; 0x765
    11ac:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    11b0:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    11b4:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    11b8:	0079636e 	rsbseq	r6, r9, lr, ror #6
    11bc:	5f434352 	svcpl	0x00434352
    11c0:	314f434d 	cmpcc	pc, sp, asr #6
    11c4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    11c8:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    11cc:	415f4343 	cmpmi	pc, r3, asr #6
    11d0:	50314250 	eorspl	r4, r1, r0, asr r2
    11d4:	70697265 	rsbvc	r7, r9, r5, ror #4
    11d8:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    11dc:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    11e0:	4c500064 	mrrcmi	0, 6, r0, r0, cr4	; <UNPREDICTABLE>
    11e4:	52004e4c 	andpl	r4, r0, #76, 28	; 0x4c0
    11e8:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    11ec:	4c504941 	mrrcmi	9, 4, r4, r0, cr1	; <UNPREDICTABLE>
    11f0:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    11f4:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xfffff3bd
    11f8:	6f437669 	svcvs	0x00437669
    11fc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1200:	4c4c5000 	marmi	acc0, r5, ip
    1204:	4c500050 	mrrcmi	0, 5, r0, r0, cr0	; <UNPREDICTABLE>
    1208:	5200514c 	andpl	r5, r0, #76, 2
    120c:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1210:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1214:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
    1218:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    121c:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    1220:	43435200 	movtmi	r5, #12800	; 0x3200
    1224:	0054495f 	subseq	r4, r4, pc, asr r9
    1228:	4d4c4c50 	stclmi	12, cr4, [ip, #-320]	; 0xfffffec0
    122c:	43435200 	movtmi	r5, #12800	; 0x3200
    1230:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1234:	72655031 	rsbvc	r5, r5, #49	; 0x31
    1238:	00687069 	rsbeq	r7, r8, r9, rrx
    123c:	5f434352 	svcpl	0x00434352
    1240:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1244:	5200736b 	andpl	r7, r0, #-1409286143	; 0xac000001
    1248:	415f4343 	cmpmi	pc, r3, asr #6
    124c:	50324250 	eorspl	r4, r2, r0, asr r2
    1250:	70697265 	rsbvc	r7, r9, r5, ror #4
    1254:	6f6c4368 	svcvs	0x006c4368
    1258:	504c6b63 	subpl	r6, ip, r3, ror #22
    125c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1260:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1264:	5f434352 	svcpl	0x00434352
    1268:	61656c43 	cmnvs	r5, r3, asr #24
    126c:	616c4672 	smcvs	50274	; 0xc462
    1270:	6d740067 	ldclvs	0, cr0, [r4, #-412]!	; 0xfffffe64
    1274:	67657270 			; <UNDEFINED> instruction: 0x67657270
    1278:	4c435000 	marmi	acc0, r5, r3
    127c:	465f324b 	ldrbmi	r3, [pc], -fp, asr #4
    1280:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    1284:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1288:	43435200 	movtmi	r5, #12800	; 0x3200
    128c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1290:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1294:	43687069 	cmnmi	r8, #105	; 0x69
    1298:	6b636f6c 	blvs	18dd050 <startup-0x1e722fb0>
    129c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    12a0:	5f434352 	svcpl	0x00434352
    12a4:	4b4c4350 	blmi	1311fec <startup-0x1ecee014>
    12a8:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    12ac:	00676966 	rsbeq	r6, r7, r6, ror #18
    12b0:	5f434352 	svcpl	0x00434352
    12b4:	33424841 	movtcc	r4, #10305	; 0x2841
    12b8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    12bc:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    12c0:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    12c4:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    12c8:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    12cc:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
    12d0:	416b636f 	cmnmi	fp, pc, ror #6
    12d4:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    12d8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    12dc:	43520067 	cmpmi	r2, #103	; 0x67
    12e0:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    12e4:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    12e8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    12ec:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    12f0:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    12f4:	43435200 	movtmi	r5, #12800	; 0x3200
    12f8:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
    12fc:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1300:	00676966 	rsbeq	r6, r7, r6, ror #18
    1304:	5f434352 	svcpl	0x00434352
    1308:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    130c:	6f434b4c 	svcvs	0x00434b4c
    1310:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1314:	43435200 	movtmi	r5, #12800	; 0x3200
    1318:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
    131c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1320:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1324:	465f4343 	ldrbmi	r4, [pc], -r3, asr #6
    1328:	0047414c 	subeq	r4, r7, ip, asr #2
    132c:	5377654e 	cmnpl	r7, #327155712	; 0x13800000
    1330:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1334:	43435200 	movtmi	r5, #12800	; 0x3200
    1338:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    133c:	5270756b 	rsbspl	r7, r0, #448790528	; 0x1ac00000
    1340:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1344:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1348:	6f727245 	svcvs	0x00727245
    134c:	61745372 	cmnvs	r4, r2, ror r3
    1350:	00737574 	rsbseq	r7, r3, r4, ror r5
    1354:	5f434352 	svcpl	0x00434352
    1358:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    135c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1360:	43520065 	cmpmi	r2, #101	; 0x65
    1364:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    1368:	53595374 	cmppl	r9, #116, 6	; 0xd0000001
    136c:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1370:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1374:	43520065 	cmpmi	r2, #101	; 0x65
    1378:	61575f43 	cmpvs	r7, r3, asr #30
    137c:	6f467469 	svcvs	0x00467469
    1380:	45534872 	ldrbmi	r4, [r3, #-2162]	; 0xfffff78e
    1384:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    1388:	00705574 	rsbseq	r5, r0, r4, ror r5
    138c:	4b4c4348 	blmi	13120b4 <startup-0x1ecedf4c>
    1390:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
    1394:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1398:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    139c:	415f4343 	cmpmi	pc, r3, asr #6
    13a0:	50314250 	eorspl	r4, r1, r0, asr r2
    13a4:	70697265 	rsbvc	r7, r9, r5, ror #4
    13a8:	43520068 	cmpmi	r2, #104	; 0x68
    13ac:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    13b0:	6f43314f 	svcvs	0x0043314f
    13b4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    13b8:	43435200 	movtmi	r5, #12800	; 0x3200
    13bc:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    13c0:	004b4c43 	subeq	r4, fp, r3, asr #24
    13c4:	5f434352 	svcpl	0x00434352
    13c8:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    13cc:	6d435332 	stclvs	3, cr5, [r3, #-200]	; 0xffffff38
    13d0:	72700064 	rsbsvc	r0, r0, #100	; 0x64
    13d4:	00637365 	rsbeq	r7, r3, r5, ror #6
    13d8:	5f434352 	svcpl	0x00434352
    13dc:	43435452 	movtmi	r5, #13394	; 0x3452
    13e0:	6f534b4c 	svcvs	0x00534b4c
    13e4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    13e8:	43435200 	movtmi	r5, #12800	; 0x3200
    13ec:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    13f0:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    13f4:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
    13f8:	756f534b 	strbvc	r5, [pc, #-843]!	; 10b5 <startup-0x1fffef4b>
    13fc:	00656372 	rsbeq	r6, r5, r2, ror r3
    1400:	5f434352 	svcpl	0x00434352
    1404:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
    1408:	6b636f6c 	blvs	18dd1c0 <startup-0x1e722e40>
    140c:	4b4c4342 	blmi	131211c <startup-0x1ecedee4>
    1410:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1414:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1418:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    141c:	43434454 	movtmi	r4, #13396	; 0x3454
    1420:	69444b4c 	stmdbvs	r4, {r2, r3, r6, r8, r9, fp, lr}^
    1424:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
    1428:	00676966 	rsbeq	r6, r7, r6, ror #18
    142c:	5f434352 	svcpl	0x00434352
    1430:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    1434:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1438:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    143c:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    1440:	646f4d50 	strbtvs	r4, [pc], #-3408	; 1448 <startup-0x1fffebb8>
    1444:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
    1448:	43435200 	movtmi	r5, #12800	; 0x3200
    144c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1450:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    1454:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1458:	43520067 	cmpmi	r2, #103	; 0x67
    145c:	53485f43 	movtpl	r5, #36675	; 0x8f43
    1460:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
    1464:	43435200 	movtmi	r5, #12800	; 0x3200
    1468:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    146c:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1470:	00687069 	rsbeq	r7, r8, r9, rrx
    1474:	5f434352 	svcpl	0x00434352
    1478:	33424841 	movtcc	r4, #10305	; 0x2841
    147c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1480:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
    1484:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 1380 <startup-0x1fffec80>
    1488:	44324f43 	ldrtmi	r4, [r2], #-3907	; 0xfffff0bd
    148c:	52007669 	andpl	r7, r0, #110100480	; 0x6900000
    1490:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    1494:	4c504941 	mrrcmi	9, 4, r4, r0, cr1	; <UNPREDICTABLE>
    1498:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    149c:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xfffff3bd
    14a0:	6f437669 	svcvs	0x00437669
    14a4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    14a8:	43435200 	movtmi	r5, #12800	; 0x3200
    14ac:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    14b0:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    14b4:	4300646d 	movwmi	r6, #1133	; 0x46d
    14b8:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    14bc:	2f737265 	svccs	0x00737265
    14c0:	6b697245 	blvs	1a5dddc <startup-0x1e5a2224>
    14c4:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
    14c8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    14cc:	442f7374 	strtmi	r7, [pc], #-884	; 14d4 <startup-0x1fffeb2c>
    14d0:	74617461 	strbtvc	r7, [r1], #-1121	; 0xfffffb9f
    14d4:	696e6b65 	stmdbvs	lr!, {r0, r2, r5, r6, r8, r9, fp, sp, lr}^
    14d8:	70746b73 	rsbsvc	r6, r4, r3, ror fp
    14dc:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
    14e0:	6b2f746b 	blvs	bde694 <startup-0x1f42196c>
    14e4:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 1330 <startup-0x1fffecd0>
    14e8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    14ec:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    14f0:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    14f4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    14f8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    14fc:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1500:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1504:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1508:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1510 <startup-0x1fffeaf0>
    150c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1510:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1514:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    1518:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    151c:	5f787834 	svcpl	0x00787834
    1520:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    1524:	52450063 	subpl	r0, r5, #99	; 0x63
    1528:	00524f52 	subseq	r4, r2, r2, asr pc
    152c:	5f434352 	svcpl	0x00434352
    1530:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1534:	6365536b 	cmnvs	r5, #-1409286143	; 0xac000001
    1538:	74697275 	strbtvc	r7, [r9], #-629	; 0xfffffd8b
    153c:	73795379 	cmnvc	r9, #-469762047	; 0xe4000001
    1540:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
    1544:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1548:	505f4343 	subspl	r4, pc, r3, asr #6
    154c:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    1550:	76694453 			; <UNDEFINED> instruction: 0x76694453
    1554:	43520051 	cmpmi	r2, #81	; 0x51
    1558:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    155c:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    1560:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1564:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1568:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    156c:	6f4d4553 	svcvs	0x004d4553
    1570:	6f436564 	svcvs	0x00436564
    1574:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1578:	6e754600 	cdpvs	6, 7, cr4, cr5, cr0, {0}
    157c:	6f697463 	svcvs	0x00697463
    1580:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
    1584:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1588:	43435200 	movtmi	r5, #12800	; 0x3200
    158c:	4f434d5f 	svcmi	0x00434d5f
    1590:	76694431 			; <UNDEFINED> instruction: 0x76694431
    1594:	43435200 	movtmi	r5, #12800	; 0x3200
    1598:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    159c:	72655032 	rsbvc	r5, r5, #50	; 0x32
    15a0:	52687069 	rsbpl	r7, r8, #105	; 0x69
    15a4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    15a8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    15ac:	5f434352 	svcpl	0x00434352
    15b0:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
    15b4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    15b8:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    15bc:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    15c0:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
    15c4:	756f534b 	strbvc	r5, [pc, #-843]!	; 1281 <startup-0x1fffed7f>
    15c8:	00656372 	rsbeq	r6, r5, r2, ror r3
    15cc:	5f434352 	svcpl	0x00434352
    15d0:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    15d4:	5367616c 	cmnpl	r7, #108, 2
    15d8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    15dc:	43520073 	cmpmi	r2, #115	; 0x73
    15e0:	53485f43 	movtpl	r5, #36675	; 0x8f43
    15e4:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    15e8:	00676966 	rsbeq	r6, r7, r6, ror #18
    15ec:	5f434352 	svcpl	0x00434352
    15f0:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
    15f4:	6b636f6c 	blvs	18dd3ac <startup-0x1e722c54>
    15f8:	4b4c4342 	blmi	1312308 <startup-0x1ecedcf8>
    15fc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1600:	50006769 	andpl	r6, r0, r9, ror #14
    1604:	41534c4c 	cmpmi	r3, ip, asr #24
    1608:	50004e49 	andpl	r4, r0, r9, asr #28
    160c:	41534c4c 	cmpmi	r3, ip, asr #24
    1610:	50005149 	andpl	r5, r0, r9, asr #2
    1614:	41534c4c 	cmpmi	r3, ip, asr #24
    1618:	52005249 	andpl	r5, r0, #-1879048188	; 0x90000004
    161c:	545f4343 	ldrbpl	r4, [pc], #-835	; 1624 <startup-0x1fffe9dc>
    1620:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
    1624:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0xffffffb5
    1628:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    162c:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    1630:	505f4343 	subspl	r4, pc, r3, asr #6
    1634:	6d434c4c 	stclvs	12, cr4, [r3, #-304]	; 0xfffffed0
    1638:	43520064 	cmpmi	r2, #100	; 0x64
    163c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1640:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    1644:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1648:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    164c:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    1650:	43435200 	movtmi	r5, #12800	; 0x3200
    1654:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 165c <startup-0x1fffe9a4>
    1658:	43520065 	cmpmi	r2, #101	; 0x65
    165c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1660:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    1664:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1668:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    166c:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    1670:	43435200 	movtmi	r5, #12800	; 0x3200
    1674:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1678:	72655031 	rsbvc	r5, r5, #49	; 0x31
    167c:	43687069 	cmnmi	r8, #105	; 0x69
    1680:	6b636f6c 	blvs	18dd438 <startup-0x1e722bc8>
    1684:	6f4d504c 	svcvs	0x004d504c
    1688:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    168c:	43520064 	cmpmi	r2, #100	; 0x64
    1690:	43505f43 	cmpmi	r0, #268	; 0x10c
    1694:	43324b4c 	teqmi	r2, #76, 22	; 0x13000
    1698:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    169c:	43520067 	cmpmi	r2, #103	; 0x67
    16a0:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    16a4:	4b4c4353 	blmi	13123f8 <startup-0x1ecedc08>
    16a8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    16ac:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    16b0:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    16b4:	50004553 	andpl	r4, r0, r3, asr r5
    16b8:	314b4c43 	cmpcc	fp, r3, asr #24
    16bc:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
    16c0:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    16c4:	41007963 	tstmi	r0, r3, ror #18
    16c8:	48414250 	stmdami	r1, {r4, r6, r9, lr}^
    16cc:	65725042 	ldrbvs	r5, [r2, #-66]!	; 0xffffffbe
    16d0:	61546373 	cmpvs	r4, r3, ror r3
    16d4:	00656c62 	rsbeq	r6, r5, r2, ror #24
    16d8:	5f434352 	svcpl	0x00434352
    16dc:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
    16e0:	53487473 	movtpl	r7, #33907	; 0x8473
    16e4:	6c614349 	stclvs	3, cr4, [r1], #-292	; 0xfffffedc
    16e8:	61726269 	cmnvs	r2, r9, ror #4
    16ec:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    16f0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    16f4:	73680065 	cmnvc	r8, #101	; 0x65
    16f8:	61747365 	cmnvs	r4, r5, ror #6
    16fc:	00737574 	rsbseq	r7, r3, r4, ror r5
    1700:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    1704:	004e5332 	subeq	r5, lr, r2, lsr r3
    1708:	5f434352 	svcpl	0x00434352
    170c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1710:	6b636f6c 	blvs	18dd4c8 <startup-0x1e722b38>
    1714:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
    1718:	43520071 	cmpmi	r2, #113	; 0x71
    171c:	50415f43 	subpl	r5, r1, r3, asr #30
    1720:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    1724:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1728:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    172c:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    1730:	43435200 	movtmi	r5, #12800	; 0x3200
    1734:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1738:	0074696e 	rsbseq	r6, r4, lr, ror #18
    173c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    1740:	00525332 	subseq	r5, r2, r2, lsr r3
    1744:	5f434352 	svcpl	0x00434352
    1748:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    174c:	61745354 	cmnvs	r4, r4, asr r3
    1750:	00737574 	rsbseq	r7, r3, r4, ror r5
    1754:	5f434352 	svcpl	0x00434352
    1758:	33424841 	movtcc	r4, #10305	; 0x2841
    175c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1760:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    1764:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    1768:	646f4d50 	strbtvs	r4, [pc], #-3408	; 1770 <startup-0x1fffe890>
    176c:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
    1770:	61747300 	cmnvs	r4, r0, lsl #6
    1774:	70757472 	rsbsvc	r7, r5, r2, ror r4
    1778:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    177c:	00726574 	rsbseq	r6, r2, r4, ror r5
    1780:	5f434352 	svcpl	0x00434352
    1784:	32425041 	subcc	r5, r2, #65	; 0x41
    1788:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    178c:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
    1790:	545f4343 	ldrbpl	r4, [pc], #-835	; 1798 <startup-0x1fffe868>
    1794:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
    1798:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0xffffffb5
    179c:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
    17a0:	00676966 	rsbeq	r6, r7, r6, ror #18
    17a4:	5f434352 	svcpl	0x00434352
    17a8:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    17ac:	6f434b4c 	svcvs	0x00434b4c
    17b0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    17b4:	43435200 	movtmi	r5, #12800	; 0x3200
    17b8:	4f434d5f 	svcmi	0x00434d5f
    17bc:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    17c0:	00676966 	rsbeq	r6, r7, r6, ror #18
    17c4:	5f434352 	svcpl	0x00434352
    17c8:	4349534c 	movtmi	r5, #37708	; 0x934c
    17cc:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    17d0:	415f4343 	cmpmi	pc, r3, asr #6
    17d4:	50314250 	eorspl	r4, r1, r0, asr r2
    17d8:	70697265 	rsbvc	r7, r9, r5, ror #4
    17dc:	6f6c4368 	svcvs	0x006c4368
    17e0:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    17e4:	43520064 	cmpmi	r2, #100	; 0x64
    17e8:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
    17ec:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    17f0:	53006769 	movwpl	r6, #1897	; 0x769
    17f4:	45434355 	strbmi	r4, [r3, #-853]	; 0xfffffcab
    17f8:	52005353 	andpl	r5, r0, #1275068417	; 0x4c000001
    17fc:	505f4343 	subspl	r4, pc, r3, asr #6
    1800:	6f434c4c 	svcvs	0x00434c4c
    1804:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1808:	43435200 	movtmi	r5, #12800	; 0x3200
    180c:	6f6c435f 	svcvs	0x006c435f
    1810:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
    1814:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1818:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    181c:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    1820:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    1824:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1828:	00676966 	rsbeq	r6, r7, r6, ror #18
    182c:	5f434352 	svcpl	0x00434352
    1830:	31424841 	cmpcc	r2, r1, asr #16
    1834:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1838:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    183c:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    1840:	646f4d50 	strbtvs	r4, [pc], #-3408	; 1848 <startup-0x1fffe7b8>
    1844:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
    1848:	43435200 	movtmi	r5, #12800	; 0x3200
    184c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1850:	72655033 	rsbvc	r5, r5, #51	; 0x33
    1854:	43687069 	cmnmi	r8, #105	; 0x69
    1858:	6b636f6c 	blvs	18dd610 <startup-0x1e7229f0>
    185c:	00646d43 	rsbeq	r6, r4, r3, asr #26

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <APBAHBPrescTable+0xdfffdb8a>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000170 	andeq	r0, r0, r0, ror r1
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000180 	andcs	r0, r0, r0, lsl #3
  3c:	00000118 	andeq	r0, r0, r8, lsl r1
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	200e4101 	andcs	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000298 	mulcs	r0, r8, r2
  5c:	00000034 	andeq	r0, r0, r4, lsr r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	100e4101 	andne	r4, lr, r1, lsl #2
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200002cc 	andcs	r0, r0, ip, asr #5
  7c:	00000046 	andeq	r0, r0, r6, asr #32
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	180e4101 	stmdane	lr, {r0, r8, lr}
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000312 	andcs	r0, r0, r2, lsl r3
  9c:	00000042 	andeq	r0, r0, r2, asr #32
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	180e4101 	stmdane	lr, {r0, r8, lr}
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000354 	andcs	r0, r0, r4, asr r3
  bc:	00000016 	andeq	r0, r0, r6, lsl r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	2000036a 	andcs	r0, r0, sl, ror #6
  dc:	00000042 	andeq	r0, r0, r2, asr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	180e4101 	stmdane	lr, {r0, r8, lr}
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200003ac 	andcs	r0, r0, ip, lsr #7
  fc:	00000016 	andeq	r0, r0, r6, lsl r0
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	200003c2 	andcs	r0, r0, r2, asr #7
 11c:	0000001e 	andeq	r0, r0, lr, lsl r0
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	200003e0 	andcs	r0, r0, r0, ror #7
 13c:	0000001e 	andeq	r0, r0, lr, lsl r0
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	100e4101 	andne	r4, lr, r1, lsl #2
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200003fe 	strdcs	r0, [r0], -lr
 15c:	0000003a 	andeq	r0, r0, sl, lsr r0
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20000438 	andcs	r0, r0, r8, lsr r4
 17c:	0000001e 	andeq	r0, r0, lr, lsl r0
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	100e4101 	andne	r4, lr, r1, lsl #2
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	20000456 	andcs	r0, r0, r6, asr r4
 19c:	00000024 	andeq	r0, r0, r4, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	2000047a 	andcs	r0, r0, sl, ror r4
 1bc:	000000a4 	andeq	r0, r0, r4, lsr #1
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000000c 	andeq	r0, r0, ip
 1d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1d8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1e0:	00000018 	andeq	r0, r0, r8, lsl r0
 1e4:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1e8:	20000520 	andcs	r0, r0, r0, lsr #10
 1ec:	00000060 	andeq	r0, r0, r0, rrx
 1f0:	40080e41 	andmi	r0, r8, r1, asr #28
 1f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 204:	20000580 	andcs	r0, r0, r0, lsl #11
 208:	000000f8 	strdeq	r0, [r0], -r8
 20c:	40080e41 	andmi	r0, r8, r1, asr #28
 210:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 214:	200e4101 	andcs	r4, lr, r1, lsl #2
 218:	00070d41 	andeq	r0, r7, r1, asr #26
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 224:	20000678 	andcs	r0, r0, r8, ror r6
 228:	00000104 	andeq	r0, r0, r4, lsl #2
 22c:	40080e41 	andmi	r0, r8, r1, asr #28
 230:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 234:	100e4101 	andne	r4, lr, r1, lsl #2
 238:	00070d41 	andeq	r0, r7, r1, asr #26
 23c:	0000000c 	andeq	r0, r0, ip
 240:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 244:	7c020001 	stcvc	0, cr0, [r2], {1}
 248:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 24c:	0000000c 	andeq	r0, r0, ip
 250:	0000023c 	andeq	r0, r0, ip, lsr r2
 254:	20000000 	andcs	r0, r0, r0
 258:	0000000c 	andeq	r0, r0, ip
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	0000023c 	andeq	r0, r0, ip, lsr r2
 264:	2000077c 	andcs	r0, r0, ip, ror r7
 268:	00000060 	andeq	r0, r0, r0, rrx
 26c:	40080e41 	andmi	r0, r8, r1, asr #28
 270:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 274:	100e4101 	andne	r4, lr, r1, lsl #2
 278:	00070d41 	andeq	r0, r7, r1, asr #26
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	0000023c 	andeq	r0, r0, ip, lsr r2
 284:	200007dc 	ldrdcs	r0, [r0], -ip
 288:	00000048 	andeq	r0, r0, r8, asr #32
 28c:	40080e41 	andmi	r0, r8, r1, asr #28
 290:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 294:	100e4101 	andne	r4, lr, r1, lsl #2
 298:	00070d41 	andeq	r0, r7, r1, asr #26
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	0000023c 	andeq	r0, r0, ip, lsr r2
 2a4:	20000824 	andcs	r0, r0, r4, lsr #16
 2a8:	00000054 	andeq	r0, r0, r4, asr r0
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2b8:	00000018 	andeq	r0, r0, r8, lsl r0
 2bc:	0000023c 	andeq	r0, r0, ip, lsr r2
 2c0:	20000878 	andcs	r0, r0, r8, ror r8
 2c4:	00000030 	andeq	r0, r0, r0, lsr r0
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d8:	0000023c 	andeq	r0, r0, ip, lsr r2
 2dc:	200008a8 	andcs	r0, r0, r8, lsr #17
 2e0:	00000080 	andeq	r0, r0, r0, lsl #1
 2e4:	40080e41 	andmi	r0, r8, r1, asr #28
 2e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ec:	100e4101 	andne	r4, lr, r1, lsl #2
 2f0:	00070d41 	andeq	r0, r7, r1, asr #26
 2f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f8:	0000023c 	andeq	r0, r0, ip, lsr r2
 2fc:	20000928 	andcs	r0, r0, r8, lsr #18
 300:	00000034 	andeq	r0, r0, r4, lsr r0
 304:	40080e41 	andmi	r0, r8, r1, asr #28
 308:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 30c:	100e4101 	andne	r4, lr, r1, lsl #2
 310:	00070d41 	andeq	r0, r7, r1, asr #26
 314:	0000000c 	andeq	r0, r0, ip
 318:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 31c:	7c020001 	stcvc	0, cr0, [r2], {1}
 320:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 324:	00000018 	andeq	r0, r0, r8, lsl r0
 328:	00000314 	andeq	r0, r0, r4, lsl r3
 32c:	2000095c 	andcs	r0, r0, ip, asr r9
 330:	00000070 	andeq	r0, r0, r0, ror r0
 334:	40080e41 	andmi	r0, r8, r1, asr #28
 338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 33c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 340:	0000001c 	andeq	r0, r0, ip, lsl r0
 344:	00000314 	andeq	r0, r0, r4, lsl r3
 348:	200009cc 	andcs	r0, r0, ip, asr #19
 34c:	00000028 	andeq	r0, r0, r8, lsr #32
 350:	40080e41 	andmi	r0, r8, r1, asr #28
 354:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 358:	100e4101 	andne	r4, lr, r1, lsl #2
 35c:	00070d41 	andeq	r0, r7, r1, asr #26
 360:	00000020 	andeq	r0, r0, r0, lsr #32
 364:	00000314 	andeq	r0, r0, r4, lsl r3
 368:	200009f4 	strdcs	r0, [r0], -r4
 36c:	0000005e 	andeq	r0, r0, lr, asr r0
 370:	400c0e41 	andmi	r0, ip, r1, asr #28
 374:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 378:	018e4002 	orreq	r4, lr, r2
 37c:	41180e41 	tstmi	r8, r1, asr #28
 380:	0000070d 	andeq	r0, r0, sp, lsl #14
 384:	0000001c 	andeq	r0, r0, ip, lsl r0
 388:	00000314 	andeq	r0, r0, r4, lsl r3
 38c:	20000a52 	andcs	r0, r0, r2, asr sl
 390:	0000003e 	andeq	r0, r0, lr, lsr r0
 394:	40080e41 	andmi	r0, r8, r1, asr #28
 398:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 39c:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a0:	00070d41 	andeq	r0, r7, r1, asr #26
 3a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a8:	00000314 	andeq	r0, r0, r4, lsl r3
 3ac:	20000a90 	mulcs	r0, r0, sl
 3b0:	00000020 	andeq	r0, r0, r0, lsr #32
 3b4:	40080e41 	andmi	r0, r8, r1, asr #28
 3b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3bc:	100e4101 	andne	r4, lr, r1, lsl #2
 3c0:	00070d41 	andeq	r0, r7, r1, asr #26
 3c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c8:	00000314 	andeq	r0, r0, r4, lsl r3
 3cc:	20000ab0 			; <UNDEFINED> instruction: 0x20000ab0
 3d0:	00000044 	andeq	r0, r0, r4, asr #32
 3d4:	40080e41 	andmi	r0, r8, r1, asr #28
 3d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3dc:	100e4101 	andne	r4, lr, r1, lsl #2
 3e0:	00070d41 	andeq	r0, r7, r1, asr #26
 3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e8:	00000314 	andeq	r0, r0, r4, lsl r3
 3ec:	20000af4 	strdcs	r0, [r0], -r4
 3f0:	00000020 	andeq	r0, r0, r0, lsr #32
 3f4:	40080e41 	andmi	r0, r8, r1, asr #28
 3f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3fc:	100e4101 	andne	r4, lr, r1, lsl #2
 400:	00070d41 	andeq	r0, r7, r1, asr #26
 404:	0000001c 	andeq	r0, r0, ip, lsl r0
 408:	00000314 	andeq	r0, r0, r4, lsl r3
 40c:	20000b14 	andcs	r0, r0, r4, lsl fp
 410:	0000003c 	andeq	r0, r0, ip, lsr r0
 414:	40080e41 	andmi	r0, r8, r1, asr #28
 418:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 41c:	180e4101 	stmdane	lr, {r0, r8, lr}
 420:	00070d41 	andeq	r0, r7, r1, asr #26
 424:	0000001c 	andeq	r0, r0, ip, lsl r0
 428:	00000314 	andeq	r0, r0, r4, lsl r3
 42c:	20000b50 	andcs	r0, r0, r0, asr fp
 430:	00000020 	andeq	r0, r0, r0, lsr #32
 434:	40080e41 	andmi	r0, r8, r1, asr #28
 438:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 43c:	100e4101 	andne	r4, lr, r1, lsl #2
 440:	00070d41 	andeq	r0, r7, r1, asr #26
 444:	0000001c 	andeq	r0, r0, ip, lsl r0
 448:	00000314 	andeq	r0, r0, r4, lsl r3
 44c:	20000b70 	andcs	r0, r0, r0, ror fp
 450:	00000028 	andeq	r0, r0, r8, lsr #32
 454:	40080e41 	andmi	r0, r8, r1, asr #28
 458:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 45c:	100e4101 	andne	r4, lr, r1, lsl #2
 460:	00070d41 	andeq	r0, r7, r1, asr #26
 464:	0000001c 	andeq	r0, r0, ip, lsl r0
 468:	00000314 	andeq	r0, r0, r4, lsl r3
 46c:	20000b98 	mulcs	r0, r8, fp
 470:	00000020 	andeq	r0, r0, r0, lsr #32
 474:	40080e41 	andmi	r0, r8, r1, asr #28
 478:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 47c:	100e4101 	andne	r4, lr, r1, lsl #2
 480:	00070d41 	andeq	r0, r7, r1, asr #26
 484:	0000001c 	andeq	r0, r0, ip, lsl r0
 488:	00000314 	andeq	r0, r0, r4, lsl r3
 48c:	20000bb8 			; <UNDEFINED> instruction: 0x20000bb8
 490:	00000030 	andeq	r0, r0, r0, lsr r0
 494:	40080e41 	andmi	r0, r8, r1, asr #28
 498:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 49c:	180e4101 	stmdane	lr, {r0, r8, lr}
 4a0:	00070d41 	andeq	r0, r7, r1, asr #26
 4a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a8:	00000314 	andeq	r0, r0, r4, lsl r3
 4ac:	20000be8 	andcs	r0, r0, r8, ror #23
 4b0:	00000020 	andeq	r0, r0, r0, lsr #32
 4b4:	40080e41 	andmi	r0, r8, r1, asr #28
 4b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4bc:	100e4101 	andne	r4, lr, r1, lsl #2
 4c0:	00070d41 	andeq	r0, r7, r1, asr #26
 4c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c8:	00000314 	andeq	r0, r0, r4, lsl r3
 4cc:	20000c08 	andcs	r0, r0, r8, lsl #24
 4d0:	00000020 	andeq	r0, r0, r0, lsr #32
 4d4:	40080e41 	andmi	r0, r8, r1, asr #28
 4d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4dc:	100e4101 	andne	r4, lr, r1, lsl #2
 4e0:	00070d41 	andeq	r0, r7, r1, asr #26
 4e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e8:	00000314 	andeq	r0, r0, r4, lsl r3
 4ec:	20000c28 	andcs	r0, r0, r8, lsr #24
 4f0:	00000040 	andeq	r0, r0, r0, asr #32
 4f4:	40080e41 	andmi	r0, r8, r1, asr #28
 4f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 500:	00070d41 	andeq	r0, r7, r1, asr #26
 504:	0000001c 	andeq	r0, r0, ip, lsl r0
 508:	00000314 	andeq	r0, r0, r4, lsl r3
 50c:	20000c68 	andcs	r0, r0, r8, ror #24
 510:	0000003c 	andeq	r0, r0, ip, lsr r0
 514:	40080e41 	andmi	r0, r8, r1, asr #28
 518:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 51c:	180e4101 	stmdane	lr, {r0, r8, lr}
 520:	00070d41 	andeq	r0, r7, r1, asr #26
 524:	0000001c 	andeq	r0, r0, ip, lsl r0
 528:	00000314 	andeq	r0, r0, r4, lsl r3
 52c:	20000ca4 	andcs	r0, r0, r4, lsr #25
 530:	00000034 	andeq	r0, r0, r4, lsr r0
 534:	40080e41 	andmi	r0, r8, r1, asr #28
 538:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 53c:	180e4101 	stmdane	lr, {r0, r8, lr}
 540:	00070d41 	andeq	r0, r7, r1, asr #26
 544:	00000018 	andeq	r0, r0, r8, lsl r0
 548:	00000314 	andeq	r0, r0, r4, lsl r3
 54c:	20000cd8 	ldrdcs	r0, [r0], -r8
 550:	0000001c 	andeq	r0, r0, ip, lsl r0
 554:	40080e41 	andmi	r0, r8, r1, asr #28
 558:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 55c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 560:	0000001c 	andeq	r0, r0, ip, lsl r0
 564:	00000314 	andeq	r0, r0, r4, lsl r3
 568:	20000cf4 	strdcs	r0, [r0], -r4
 56c:	00000034 	andeq	r0, r0, r4, lsr r0
 570:	40080e41 	andmi	r0, r8, r1, asr #28
 574:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 578:	180e4101 	stmdane	lr, {r0, r8, lr}
 57c:	00070d41 	andeq	r0, r7, r1, asr #26
 580:	0000001c 	andeq	r0, r0, ip, lsl r0
 584:	00000314 	andeq	r0, r0, r4, lsl r3
 588:	20000d28 	andcs	r0, r0, r8, lsr #26
 58c:	00000038 	andeq	r0, r0, r8, lsr r0
 590:	40080e41 	andmi	r0, r8, r1, asr #28
 594:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 598:	180e4101 	stmdane	lr, {r0, r8, lr}
 59c:	00070d41 	andeq	r0, r7, r1, asr #26
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	00000314 	andeq	r0, r0, r4, lsl r3
 5a8:	20000d60 	andcs	r0, r0, r0, ror #26
 5ac:	0000003c 	andeq	r0, r0, ip, lsr r0
 5b0:	40080e41 	andmi	r0, r8, r1, asr #28
 5b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5b8:	180e4101 	stmdane	lr, {r0, r8, lr}
 5bc:	00070d41 	andeq	r0, r7, r1, asr #26
 5c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c4:	00000314 	andeq	r0, r0, r4, lsl r3
 5c8:	20000d9c 	mulcs	r0, ip, sp
 5cc:	00000158 	andeq	r0, r0, r8, asr r1
 5d0:	40080e41 	andmi	r0, r8, r1, asr #28
 5d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5d8:	280e4101 	stmdacs	lr, {r0, r8, lr}
 5dc:	00070d41 	andeq	r0, r7, r1, asr #26
 5e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e4:	00000314 	andeq	r0, r0, r4, lsl r3
 5e8:	20000ef4 	strdcs	r0, [r0], -r4
 5ec:	00000060 	andeq	r0, r0, r0, rrx
 5f0:	40080e41 	andmi	r0, r8, r1, asr #28
 5f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5f8:	180e4101 	stmdane	lr, {r0, r8, lr}
 5fc:	00070d41 	andeq	r0, r7, r1, asr #26
 600:	0000001c 	andeq	r0, r0, ip, lsl r0
 604:	00000314 	andeq	r0, r0, r4, lsl r3
 608:	20000f54 	andcs	r0, r0, r4, asr pc
 60c:	00000020 	andeq	r0, r0, r0, lsr #32
 610:	40080e41 	andmi	r0, r8, r1, asr #28
 614:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 618:	100e4101 	andne	r4, lr, r1, lsl #2
 61c:	00070d41 	andeq	r0, r7, r1, asr #26
 620:	0000001c 	andeq	r0, r0, ip, lsl r0
 624:	00000314 	andeq	r0, r0, r4, lsl r3
 628:	20000f74 	andcs	r0, r0, r4, ror pc
 62c:	00000020 	andeq	r0, r0, r0, lsr #32
 630:	40080e41 	andmi	r0, r8, r1, asr #28
 634:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 638:	100e4101 	andne	r4, lr, r1, lsl #2
 63c:	00070d41 	andeq	r0, r7, r1, asr #26
 640:	0000001c 	andeq	r0, r0, ip, lsl r0
 644:	00000314 	andeq	r0, r0, r4, lsl r3
 648:	20000f94 	mulcs	r0, r4, pc	; <UNPREDICTABLE>
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	40080e41 	andmi	r0, r8, r1, asr #28
 654:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 658:	100e4101 	andne	r4, lr, r1, lsl #2
 65c:	00070d41 	andeq	r0, r7, r1, asr #26
 660:	0000001c 	andeq	r0, r0, ip, lsl r0
 664:	00000314 	andeq	r0, r0, r4, lsl r3
 668:	20000fb0 			; <UNDEFINED> instruction: 0x20000fb0
 66c:	0000003c 	andeq	r0, r0, ip, lsr r0
 670:	40080e41 	andmi	r0, r8, r1, asr #28
 674:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 678:	180e4101 	stmdane	lr, {r0, r8, lr}
 67c:	00070d41 	andeq	r0, r7, r1, asr #26
 680:	0000001c 	andeq	r0, r0, ip, lsl r0
 684:	00000314 	andeq	r0, r0, r4, lsl r3
 688:	20000fec 	andcs	r0, r0, ip, ror #31
 68c:	0000003c 	andeq	r0, r0, ip, lsr r0
 690:	40080e41 	andmi	r0, r8, r1, asr #28
 694:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 698:	180e4101 	stmdane	lr, {r0, r8, lr}
 69c:	00070d41 	andeq	r0, r7, r1, asr #26
 6a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6a4:	00000314 	andeq	r0, r0, r4, lsl r3
 6a8:	20001028 	andcs	r1, r0, r8, lsr #32
 6ac:	0000003c 	andeq	r0, r0, ip, lsr r0
 6b0:	40080e41 	andmi	r0, r8, r1, asr #28
 6b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6b8:	180e4101 	stmdane	lr, {r0, r8, lr}
 6bc:	00070d41 	andeq	r0, r7, r1, asr #26
 6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c4:	00000314 	andeq	r0, r0, r4, lsl r3
 6c8:	20001064 	andcs	r1, r0, r4, rrx
 6cc:	00000040 	andeq	r0, r0, r0, asr #32
 6d0:	40080e41 	andmi	r0, r8, r1, asr #28
 6d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6d8:	180e4101 	stmdane	lr, {r0, r8, lr}
 6dc:	00070d41 	andeq	r0, r7, r1, asr #26
 6e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e4:	00000314 	andeq	r0, r0, r4, lsl r3
 6e8:	200010a4 	andcs	r1, r0, r4, lsr #1
 6ec:	0000003c 	andeq	r0, r0, ip, lsr r0
 6f0:	40080e41 	andmi	r0, r8, r1, asr #28
 6f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6f8:	180e4101 	stmdane	lr, {r0, r8, lr}
 6fc:	00070d41 	andeq	r0, r7, r1, asr #26
 700:	0000001c 	andeq	r0, r0, ip, lsl r0
 704:	00000314 	andeq	r0, r0, r4, lsl r3
 708:	200010e0 	andcs	r1, r0, r0, ror #1
 70c:	0000001c 	andeq	r0, r0, ip, lsl r0
 710:	40080e41 	andmi	r0, r8, r1, asr #28
 714:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 718:	100e4101 	andne	r4, lr, r1, lsl #2
 71c:	00070d41 	andeq	r0, r7, r1, asr #26
 720:	0000001c 	andeq	r0, r0, ip, lsl r0
 724:	00000314 	andeq	r0, r0, r4, lsl r3
 728:	200010fc 	strdcs	r1, [r0], -ip
 72c:	00000040 	andeq	r0, r0, r0, asr #32
 730:	40080e41 	andmi	r0, r8, r1, asr #28
 734:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 738:	100e4101 	andne	r4, lr, r1, lsl #2
 73c:	00070d41 	andeq	r0, r7, r1, asr #26
 740:	0000001c 	andeq	r0, r0, ip, lsl r0
 744:	00000314 	andeq	r0, r0, r4, lsl r3
 748:	2000113c 	andcs	r1, r0, ip, lsr r1
 74c:	00000040 	andeq	r0, r0, r0, asr #32
 750:	40080e41 	andmi	r0, r8, r1, asr #28
 754:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 758:	100e4101 	andne	r4, lr, r1, lsl #2
 75c:	00070d41 	andeq	r0, r7, r1, asr #26
 760:	0000001c 	andeq	r0, r0, ip, lsl r0
 764:	00000314 	andeq	r0, r0, r4, lsl r3
 768:	2000117c 	andcs	r1, r0, ip, ror r1
 76c:	00000040 	andeq	r0, r0, r0, asr #32
 770:	40080e41 	andmi	r0, r8, r1, asr #28
 774:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 778:	100e4101 	andne	r4, lr, r1, lsl #2
 77c:	00070d41 	andeq	r0, r7, r1, asr #26
 780:	0000001c 	andeq	r0, r0, ip, lsl r0
 784:	00000314 	andeq	r0, r0, r4, lsl r3
 788:	200011bc 			; <UNDEFINED> instruction: 0x200011bc
 78c:	00000040 	andeq	r0, r0, r0, asr #32
 790:	40080e41 	andmi	r0, r8, r1, asr #28
 794:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 798:	100e4101 	andne	r4, lr, r1, lsl #2
 79c:	00070d41 	andeq	r0, r7, r1, asr #26
 7a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a4:	00000314 	andeq	r0, r0, r4, lsl r3
 7a8:	200011fc 	strdcs	r1, [r0], -ip
 7ac:	00000040 	andeq	r0, r0, r0, asr #32
 7b0:	40080e41 	andmi	r0, r8, r1, asr #28
 7b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7b8:	100e4101 	andne	r4, lr, r1, lsl #2
 7bc:	00070d41 	andeq	r0, r7, r1, asr #26
 7c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7c4:	00000314 	andeq	r0, r0, r4, lsl r3
 7c8:	2000123c 	andcs	r1, r0, ip, lsr r2
 7cc:	00000040 	andeq	r0, r0, r0, asr #32
 7d0:	40080e41 	andmi	r0, r8, r1, asr #28
 7d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7d8:	100e4101 	andne	r4, lr, r1, lsl #2
 7dc:	00070d41 	andeq	r0, r7, r1, asr #26
 7e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7e4:	00000314 	andeq	r0, r0, r4, lsl r3
 7e8:	2000127c 	andcs	r1, r0, ip, ror r2
 7ec:	00000040 	andeq	r0, r0, r0, asr #32
 7f0:	40080e41 	andmi	r0, r8, r1, asr #28
 7f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7f8:	100e4101 	andne	r4, lr, r1, lsl #2
 7fc:	00070d41 	andeq	r0, r7, r1, asr #26
 800:	0000001c 	andeq	r0, r0, ip, lsl r0
 804:	00000314 	andeq	r0, r0, r4, lsl r3
 808:	200012bc 			; <UNDEFINED> instruction: 0x200012bc
 80c:	00000040 	andeq	r0, r0, r0, asr #32
 810:	40080e41 	andmi	r0, r8, r1, asr #28
 814:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 818:	100e4101 	andne	r4, lr, r1, lsl #2
 81c:	00070d41 	andeq	r0, r7, r1, asr #26
 820:	0000001c 	andeq	r0, r0, ip, lsl r0
 824:	00000314 	andeq	r0, r0, r4, lsl r3
 828:	200012fc 	strdcs	r1, [r0], -ip
 82c:	00000040 	andeq	r0, r0, r0, asr #32
 830:	40080e41 	andmi	r0, r8, r1, asr #28
 834:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 838:	100e4101 	andne	r4, lr, r1, lsl #2
 83c:	00070d41 	andeq	r0, r7, r1, asr #26
 840:	0000001c 	andeq	r0, r0, ip, lsl r0
 844:	00000314 	andeq	r0, r0, r4, lsl r3
 848:	2000133c 	andcs	r1, r0, ip, lsr r3
 84c:	00000040 	andeq	r0, r0, r0, asr #32
 850:	40080e41 	andmi	r0, r8, r1, asr #28
 854:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 858:	100e4101 	andne	r4, lr, r1, lsl #2
 85c:	00070d41 	andeq	r0, r7, r1, asr #26
 860:	0000001c 	andeq	r0, r0, ip, lsl r0
 864:	00000314 	andeq	r0, r0, r4, lsl r3
 868:	2000137c 	andcs	r1, r0, ip, ror r3
 86c:	00000040 	andeq	r0, r0, r0, asr #32
 870:	40080e41 	andmi	r0, r8, r1, asr #28
 874:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 878:	100e4101 	andne	r4, lr, r1, lsl #2
 87c:	00070d41 	andeq	r0, r7, r1, asr #26
 880:	0000001c 	andeq	r0, r0, ip, lsl r0
 884:	00000314 	andeq	r0, r0, r4, lsl r3
 888:	200013bc 			; <UNDEFINED> instruction: 0x200013bc
 88c:	00000040 	andeq	r0, r0, r0, asr #32
 890:	40080e41 	andmi	r0, r8, r1, asr #28
 894:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 898:	100e4101 	andne	r4, lr, r1, lsl #2
 89c:	00070d41 	andeq	r0, r7, r1, asr #26
 8a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 8a4:	00000314 	andeq	r0, r0, r4, lsl r3
 8a8:	200013fc 	strdcs	r1, [r0], -ip
 8ac:	00000040 	andeq	r0, r0, r0, asr #32
 8b0:	40080e41 	andmi	r0, r8, r1, asr #28
 8b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8b8:	100e4101 	andne	r4, lr, r1, lsl #2
 8bc:	00070d41 	andeq	r0, r7, r1, asr #26
 8c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 8c4:	00000314 	andeq	r0, r0, r4, lsl r3
 8c8:	2000143c 	andcs	r1, r0, ip, lsr r4
 8cc:	00000040 	andeq	r0, r0, r0, asr #32
 8d0:	40080e41 	andmi	r0, r8, r1, asr #28
 8d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8d8:	100e4101 	andne	r4, lr, r1, lsl #2
 8dc:	00070d41 	andeq	r0, r7, r1, asr #26
 8e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e4:	00000314 	andeq	r0, r0, r4, lsl r3
 8e8:	2000147c 	andcs	r1, r0, ip, ror r4
 8ec:	00000040 	andeq	r0, r0, r0, asr #32
 8f0:	40080e41 	andmi	r0, r8, r1, asr #28
 8f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8f8:	100e4101 	andne	r4, lr, r1, lsl #2
 8fc:	00070d41 	andeq	r0, r7, r1, asr #26
 900:	0000001c 	andeq	r0, r0, ip, lsl r0
 904:	00000314 	andeq	r0, r0, r4, lsl r3
 908:	200014bc 			; <UNDEFINED> instruction: 0x200014bc
 90c:	0000003c 	andeq	r0, r0, ip, lsr r0
 910:	40080e41 	andmi	r0, r8, r1, asr #28
 914:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 918:	100e4101 	andne	r4, lr, r1, lsl #2
 91c:	00070d41 	andeq	r0, r7, r1, asr #26
 920:	0000001c 	andeq	r0, r0, ip, lsl r0
 924:	00000314 	andeq	r0, r0, r4, lsl r3
 928:	200014f8 	strdcs	r1, [r0], -r8
 92c:	00000050 	andeq	r0, r0, r0, asr r0
 930:	40080e41 	andmi	r0, r8, r1, asr #28
 934:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 938:	100e4101 	andne	r4, lr, r1, lsl #2
 93c:	00070d41 	andeq	r0, r7, r1, asr #26
 940:	0000001c 	andeq	r0, r0, ip, lsl r0
 944:	00000314 	andeq	r0, r0, r4, lsl r3
 948:	20001548 	andcs	r1, r0, r8, asr #10
 94c:	00000084 	andeq	r0, r0, r4, lsl #1
 950:	40080e41 	andmi	r0, r8, r1, asr #28
 954:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 958:	200e4101 	andcs	r4, lr, r1, lsl #2
 95c:	00070d41 	andeq	r0, r7, r1, asr #26
 960:	00000018 	andeq	r0, r0, r8, lsl r0
 964:	00000314 	andeq	r0, r0, r4, lsl r3
 968:	200015cc 	andcs	r1, r0, ip, asr #11
 96c:	0000001c 	andeq	r0, r0, ip, lsl r0
 970:	40080e41 	andmi	r0, r8, r1, asr #28
 974:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 978:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 97c:	0000001c 	andeq	r0, r0, ip, lsl r0
 980:	00000314 	andeq	r0, r0, r4, lsl r3
 984:	200015e8 	andcs	r1, r0, r8, ror #11
 988:	00000044 	andeq	r0, r0, r4, asr #32
 98c:	40080e41 	andmi	r0, r8, r1, asr #28
 990:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 994:	180e4101 	stmdane	lr, {r0, r8, lr}
 998:	00070d41 	andeq	r0, r7, r1, asr #26
 99c:	0000001c 	andeq	r0, r0, ip, lsl r0
 9a0:	00000314 	andeq	r0, r0, r4, lsl r3
 9a4:	2000162c 	andcs	r1, r0, ip, lsr #12
 9a8:	00000020 	andeq	r0, r0, r0, lsr #32
 9ac:	40080e41 	andmi	r0, r8, r1, asr #28
 9b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9b4:	100e4101 	andne	r4, lr, r1, lsl #2
 9b8:	00070d41 	andeq	r0, r7, r1, asr #26
 9bc:	0000000c 	andeq	r0, r0, ip
 9c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9c4:	7c010001 	stcvc	0, cr0, [r1], {1}
 9c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9cc:	0000000c 	andeq	r0, r0, ip
 9d0:	000009bc 			; <UNDEFINED> instruction: 0x000009bc
 9d4:	2000164d 	andcs	r1, r0, sp, asr #12
 9d8:	0000010a 	andeq	r0, r0, sl, lsl #2

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	2000077c 	andcs	r0, r0, ip, ror r7
   4:	2000095c 	andcs	r0, r0, ip, asr r9
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
