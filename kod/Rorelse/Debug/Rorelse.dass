
./Debug/Rorelse.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

#include "stm32f4xx_gpio.h"

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fe7c 	bl	20000d00 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
20000014:	4b14      	ldr	r3, [pc, #80]	; (20000068 <RCC_DeInit+0x58>)
20000016:	681a      	ldr	r2, [r3, #0]
20000018:	4b13      	ldr	r3, [pc, #76]	; (20000068 <RCC_DeInit+0x58>)
2000001a:	2101      	movs	r1, #1
2000001c:	430a      	orrs	r2, r1
2000001e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20000020:	4b11      	ldr	r3, [pc, #68]	; (20000068 <RCC_DeInit+0x58>)
20000022:	2200      	movs	r2, #0
20000024:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
20000026:	4b10      	ldr	r3, [pc, #64]	; (20000068 <RCC_DeInit+0x58>)
20000028:	681a      	ldr	r2, [r3, #0]
2000002a:	4b0f      	ldr	r3, [pc, #60]	; (20000068 <RCC_DeInit+0x58>)
2000002c:	490f      	ldr	r1, [pc, #60]	; (2000006c <RCC_DeInit+0x5c>)
2000002e:	400a      	ands	r2, r1
20000030:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
20000032:	4b0d      	ldr	r3, [pc, #52]	; (20000068 <RCC_DeInit+0x58>)
20000034:	4a0e      	ldr	r2, [pc, #56]	; (20000070 <RCC_DeInit+0x60>)
20000036:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
20000038:	4a0b      	ldr	r2, [pc, #44]	; (20000068 <RCC_DeInit+0x58>)
2000003a:	2384      	movs	r3, #132	; 0x84
2000003c:	490d      	ldr	r1, [pc, #52]	; (20000074 <RCC_DeInit+0x64>)
2000003e:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
20000040:	4a09      	ldr	r2, [pc, #36]	; (20000068 <RCC_DeInit+0x58>)
20000042:	2388      	movs	r3, #136	; 0x88
20000044:	490c      	ldr	r1, [pc, #48]	; (20000078 <RCC_DeInit+0x68>)
20000046:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20000048:	4b07      	ldr	r3, [pc, #28]	; (20000068 <RCC_DeInit+0x58>)
2000004a:	681a      	ldr	r2, [r3, #0]
2000004c:	4b06      	ldr	r3, [pc, #24]	; (20000068 <RCC_DeInit+0x58>)
2000004e:	490b      	ldr	r1, [pc, #44]	; (2000007c <RCC_DeInit+0x6c>)
20000050:	400a      	ands	r2, r1
20000052:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20000054:	4b04      	ldr	r3, [pc, #16]	; (20000068 <RCC_DeInit+0x58>)
20000056:	2200      	movs	r2, #0
20000058:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
2000005a:	4a03      	ldr	r2, [pc, #12]	; (20000068 <RCC_DeInit+0x58>)
2000005c:	238c      	movs	r3, #140	; 0x8c
2000005e:	2100      	movs	r1, #0
20000060:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
20000062:	46c0      	nop			; (mov r8, r8)
20000064:	46bd      	mov	sp, r7
20000066:	bd80      	pop	{r7, pc}
20000068:	40023800 	andmi	r3, r2, r0, lsl #16
2000006c:	eaf6ffff 	b	1fdc0070 <startup-0x23ff90>
20000070:	24003010 	strcs	r3, [r0], #-16
20000074:	20003000 	andcs	r3, r0, r0
20000078:	24003000 	strcs	r3, [r0], #-0
2000007c:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000080 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000080:	b580      	push	{r7, lr}
20000082:	b082      	sub	sp, #8
20000084:	af00      	add	r7, sp, #0
20000086:	0002      	movs	r2, r0
20000088:	1dfb      	adds	r3, r7, #7
2000008a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
2000008c:	4b05      	ldr	r3, [pc, #20]	; (200000a4 <RCC_HSEConfig+0x24>)
2000008e:	2200      	movs	r2, #0
20000090:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
20000092:	4a04      	ldr	r2, [pc, #16]	; (200000a4 <RCC_HSEConfig+0x24>)
20000094:	1dfb      	adds	r3, r7, #7
20000096:	781b      	ldrb	r3, [r3, #0]
20000098:	7013      	strb	r3, [r2, #0]
}
2000009a:	46c0      	nop			; (mov r8, r8)
2000009c:	46bd      	mov	sp, r7
2000009e:	b002      	add	sp, #8
200000a0:	bd80      	pop	{r7, pc}
200000a2:	46c0      	nop			; (mov r8, r8)
200000a4:	40023802 	andmi	r3, r2, r2, lsl #16

200000a8 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
200000a8:	b590      	push	{r4, r7, lr}
200000aa:	b083      	sub	sp, #12
200000ac:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
200000ae:	2300      	movs	r3, #0
200000b0:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
200000b2:	1dfb      	adds	r3, r7, #7
200000b4:	2200      	movs	r2, #0
200000b6:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
200000b8:	1dbb      	adds	r3, r7, #6
200000ba:	2200      	movs	r2, #0
200000bc:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
200000be:	1dbc      	adds	r4, r7, #6
200000c0:	2031      	movs	r0, #49	; 0x31
200000c2:	f000 fd9b 	bl	20000bfc <RCC_GetFlagStatus>
200000c6:	0003      	movs	r3, r0
200000c8:	7023      	strb	r3, [r4, #0]
    startupcounter++;
200000ca:	683b      	ldr	r3, [r7, #0]
200000cc:	3301      	adds	r3, #1
200000ce:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
200000d0:	683a      	ldr	r2, [r7, #0]
200000d2:	23a0      	movs	r3, #160	; 0xa0
200000d4:	01db      	lsls	r3, r3, #7
200000d6:	429a      	cmp	r2, r3
200000d8:	d003      	beq.n	200000e2 <RCC_WaitForHSEStartUp+0x3a>
200000da:	1dbb      	adds	r3, r7, #6
200000dc:	781b      	ldrb	r3, [r3, #0]
200000de:	2b00      	cmp	r3, #0
200000e0:	d0ed      	beq.n	200000be <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
200000e2:	2031      	movs	r0, #49	; 0x31
200000e4:	f000 fd8a 	bl	20000bfc <RCC_GetFlagStatus>
200000e8:	1e03      	subs	r3, r0, #0
200000ea:	d003      	beq.n	200000f4 <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
200000ec:	1dfb      	adds	r3, r7, #7
200000ee:	2201      	movs	r2, #1
200000f0:	701a      	strb	r2, [r3, #0]
200000f2:	e002      	b.n	200000fa <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
200000f4:	1dfb      	adds	r3, r7, #7
200000f6:	2200      	movs	r2, #0
200000f8:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200000fa:	1dfb      	adds	r3, r7, #7
200000fc:	781b      	ldrb	r3, [r3, #0]
}
200000fe:	0018      	movs	r0, r3
20000100:	46bd      	mov	sp, r7
20000102:	b003      	add	sp, #12
20000104:	bd90      	pop	{r4, r7, pc}

20000106 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
20000106:	b580      	push	{r7, lr}
20000108:	b084      	sub	sp, #16
2000010a:	af00      	add	r7, sp, #0
2000010c:	0002      	movs	r2, r0
2000010e:	1dfb      	adds	r3, r7, #7
20000110:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
20000112:	2300      	movs	r3, #0
20000114:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
20000116:	4b0a      	ldr	r3, [pc, #40]	; (20000140 <RCC_AdjustHSICalibrationValue+0x3a>)
20000118:	681b      	ldr	r3, [r3, #0]
2000011a:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
2000011c:	68fb      	ldr	r3, [r7, #12]
2000011e:	22f8      	movs	r2, #248	; 0xf8
20000120:	4393      	bics	r3, r2
20000122:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
20000124:	1dfb      	adds	r3, r7, #7
20000126:	781b      	ldrb	r3, [r3, #0]
20000128:	00db      	lsls	r3, r3, #3
2000012a:	68fa      	ldr	r2, [r7, #12]
2000012c:	4313      	orrs	r3, r2
2000012e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
20000130:	4b03      	ldr	r3, [pc, #12]	; (20000140 <RCC_AdjustHSICalibrationValue+0x3a>)
20000132:	68fa      	ldr	r2, [r7, #12]
20000134:	601a      	str	r2, [r3, #0]
}
20000136:	46c0      	nop			; (mov r8, r8)
20000138:	46bd      	mov	sp, r7
2000013a:	b004      	add	sp, #16
2000013c:	bd80      	pop	{r7, pc}
2000013e:	46c0      	nop			; (mov r8, r8)
20000140:	40023800 	andmi	r3, r2, r0, lsl #16

20000144 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
20000144:	b580      	push	{r7, lr}
20000146:	b082      	sub	sp, #8
20000148:	af00      	add	r7, sp, #0
2000014a:	0002      	movs	r2, r0
2000014c:	1dfb      	adds	r3, r7, #7
2000014e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
20000150:	4b03      	ldr	r3, [pc, #12]	; (20000160 <RCC_HSICmd+0x1c>)
20000152:	1dfa      	adds	r2, r7, #7
20000154:	7812      	ldrb	r2, [r2, #0]
20000156:	601a      	str	r2, [r3, #0]
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	b002      	add	sp, #8
2000015e:	bd80      	pop	{r7, pc}
20000160:	42470000 	submi	r0, r7, #0

20000164 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
20000164:	b580      	push	{r7, lr}
20000166:	b082      	sub	sp, #8
20000168:	af00      	add	r7, sp, #0
2000016a:	0002      	movs	r2, r0
2000016c:	1dfb      	adds	r3, r7, #7
2000016e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000170:	4b0c      	ldr	r3, [pc, #48]	; (200001a4 <RCC_LSEConfig+0x40>)
20000172:	2200      	movs	r2, #0
20000174:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000176:	4b0b      	ldr	r3, [pc, #44]	; (200001a4 <RCC_LSEConfig+0x40>)
20000178:	2200      	movs	r2, #0
2000017a:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	781b      	ldrb	r3, [r3, #0]
20000180:	2b01      	cmp	r3, #1
20000182:	d002      	beq.n	2000018a <RCC_LSEConfig+0x26>
20000184:	2b04      	cmp	r3, #4
20000186:	d004      	beq.n	20000192 <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000188:	e007      	b.n	2000019a <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
2000018a:	4b06      	ldr	r3, [pc, #24]	; (200001a4 <RCC_LSEConfig+0x40>)
2000018c:	2201      	movs	r2, #1
2000018e:	701a      	strb	r2, [r3, #0]
      break;
20000190:	e003      	b.n	2000019a <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
20000192:	4b04      	ldr	r3, [pc, #16]	; (200001a4 <RCC_LSEConfig+0x40>)
20000194:	2205      	movs	r2, #5
20000196:	701a      	strb	r2, [r3, #0]
      break;
20000198:	46c0      	nop			; (mov r8, r8)
  }
}
2000019a:	46c0      	nop			; (mov r8, r8)
2000019c:	46bd      	mov	sp, r7
2000019e:	b002      	add	sp, #8
200001a0:	bd80      	pop	{r7, pc}
200001a2:	46c0      	nop			; (mov r8, r8)
200001a4:	40023870 	andmi	r3, r2, r0, ror r8

200001a8 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
200001a8:	b580      	push	{r7, lr}
200001aa:	b082      	sub	sp, #8
200001ac:	af00      	add	r7, sp, #0
200001ae:	0002      	movs	r2, r0
200001b0:	1dfb      	adds	r3, r7, #7
200001b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
200001b4:	4b03      	ldr	r3, [pc, #12]	; (200001c4 <RCC_LSICmd+0x1c>)
200001b6:	1dfa      	adds	r2, r7, #7
200001b8:	7812      	ldrb	r2, [r2, #0]
200001ba:	601a      	str	r2, [r3, #0]
}
200001bc:	46c0      	nop			; (mov r8, r8)
200001be:	46bd      	mov	sp, r7
200001c0:	b002      	add	sp, #8
200001c2:	bd80      	pop	{r7, pc}
200001c4:	42470e80 	submi	r0, r7, #128, 28	; 0x800

200001c8 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
200001c8:	b580      	push	{r7, lr}
200001ca:	b084      	sub	sp, #16
200001cc:	af00      	add	r7, sp, #0
200001ce:	60f8      	str	r0, [r7, #12]
200001d0:	60b9      	str	r1, [r7, #8]
200001d2:	607a      	str	r2, [r7, #4]
200001d4:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200001d6:	687b      	ldr	r3, [r7, #4]
200001d8:	019a      	lsls	r2, r3, #6
200001da:	68bb      	ldr	r3, [r7, #8]
200001dc:	431a      	orrs	r2, r3
200001de:	683b      	ldr	r3, [r7, #0]
200001e0:	085b      	lsrs	r3, r3, #1
200001e2:	3b01      	subs	r3, #1
200001e4:	041b      	lsls	r3, r3, #16
200001e6:	431a      	orrs	r2, r3
200001e8:	68fb      	ldr	r3, [r7, #12]
200001ea:	431a      	orrs	r2, r3
200001ec:	0011      	movs	r1, r2
                 (PLLQ << 24);
200001ee:	69bb      	ldr	r3, [r7, #24]
200001f0:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200001f2:	4b03      	ldr	r3, [pc, #12]	; (20000200 <RCC_PLLConfig+0x38>)
200001f4:	430a      	orrs	r2, r1
200001f6:	605a      	str	r2, [r3, #4]
}
200001f8:	46c0      	nop			; (mov r8, r8)
200001fa:	46bd      	mov	sp, r7
200001fc:	b004      	add	sp, #16
200001fe:	bd80      	pop	{r7, pc}
20000200:	40023800 	andmi	r3, r2, r0, lsl #16

20000204 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
20000204:	b580      	push	{r7, lr}
20000206:	b082      	sub	sp, #8
20000208:	af00      	add	r7, sp, #0
2000020a:	0002      	movs	r2, r0
2000020c:	1dfb      	adds	r3, r7, #7
2000020e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
20000210:	4b03      	ldr	r3, [pc, #12]	; (20000220 <RCC_PLLCmd+0x1c>)
20000212:	1dfa      	adds	r2, r7, #7
20000214:	7812      	ldrb	r2, [r2, #0]
20000216:	601a      	str	r2, [r3, #0]
}
20000218:	46c0      	nop			; (mov r8, r8)
2000021a:	46bd      	mov	sp, r7
2000021c:	b002      	add	sp, #8
2000021e:	bd80      	pop	{r7, pc}
20000220:	42470060 	submi	r0, r7, #96	; 0x60

20000224 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
20000224:	b580      	push	{r7, lr}
20000226:	b082      	sub	sp, #8
20000228:	af00      	add	r7, sp, #0
2000022a:	6078      	str	r0, [r7, #4]
2000022c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
2000022e:	687b      	ldr	r3, [r7, #4]
20000230:	019a      	lsls	r2, r3, #6
20000232:	683b      	ldr	r3, [r7, #0]
20000234:	071b      	lsls	r3, r3, #28
20000236:	4904      	ldr	r1, [pc, #16]	; (20000248 <RCC_PLLI2SConfig+0x24>)
20000238:	4313      	orrs	r3, r2
2000023a:	2284      	movs	r2, #132	; 0x84
2000023c:	508b      	str	r3, [r1, r2]
}
2000023e:	46c0      	nop			; (mov r8, r8)
20000240:	46bd      	mov	sp, r7
20000242:	b002      	add	sp, #8
20000244:	bd80      	pop	{r7, pc}
20000246:	46c0      	nop			; (mov r8, r8)
20000248:	40023800 	andmi	r3, r2, r0, lsl #16

2000024c <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
2000024c:	b580      	push	{r7, lr}
2000024e:	b082      	sub	sp, #8
20000250:	af00      	add	r7, sp, #0
20000252:	0002      	movs	r2, r0
20000254:	1dfb      	adds	r3, r7, #7
20000256:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000258:	4b03      	ldr	r3, [pc, #12]	; (20000268 <RCC_PLLI2SCmd+0x1c>)
2000025a:	1dfa      	adds	r2, r7, #7
2000025c:	7812      	ldrb	r2, [r2, #0]
2000025e:	601a      	str	r2, [r3, #0]
}
20000260:	46c0      	nop			; (mov r8, r8)
20000262:	46bd      	mov	sp, r7
20000264:	b002      	add	sp, #8
20000266:	bd80      	pop	{r7, pc}
20000268:	42470068 	submi	r0, r7, #104	; 0x68

2000026c <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
2000026c:	b580      	push	{r7, lr}
2000026e:	b084      	sub	sp, #16
20000270:	af00      	add	r7, sp, #0
20000272:	60f8      	str	r0, [r7, #12]
20000274:	60b9      	str	r1, [r7, #8]
20000276:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000278:	68fb      	ldr	r3, [r7, #12]
2000027a:	019a      	lsls	r2, r3, #6
2000027c:	68bb      	ldr	r3, [r7, #8]
2000027e:	061b      	lsls	r3, r3, #24
20000280:	431a      	orrs	r2, r3
20000282:	687b      	ldr	r3, [r7, #4]
20000284:	071b      	lsls	r3, r3, #28
20000286:	4904      	ldr	r1, [pc, #16]	; (20000298 <RCC_PLLSAIConfig+0x2c>)
20000288:	4313      	orrs	r3, r2
2000028a:	2288      	movs	r2, #136	; 0x88
2000028c:	508b      	str	r3, [r1, r2]
}
2000028e:	46c0      	nop			; (mov r8, r8)
20000290:	46bd      	mov	sp, r7
20000292:	b004      	add	sp, #16
20000294:	bd80      	pop	{r7, pc}
20000296:	46c0      	nop			; (mov r8, r8)
20000298:	40023800 	andmi	r3, r2, r0, lsl #16

2000029c <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
2000029c:	b580      	push	{r7, lr}
2000029e:	b082      	sub	sp, #8
200002a0:	af00      	add	r7, sp, #0
200002a2:	0002      	movs	r2, r0
200002a4:	1dfb      	adds	r3, r7, #7
200002a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
200002a8:	4b03      	ldr	r3, [pc, #12]	; (200002b8 <RCC_PLLSAICmd+0x1c>)
200002aa:	1dfa      	adds	r2, r7, #7
200002ac:	7812      	ldrb	r2, [r2, #0]
200002ae:	601a      	str	r2, [r3, #0]
}
200002b0:	46c0      	nop			; (mov r8, r8)
200002b2:	46bd      	mov	sp, r7
200002b4:	b002      	add	sp, #8
200002b6:	bd80      	pop	{r7, pc}
200002b8:	42470070 	submi	r0, r7, #112	; 0x70

200002bc <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
200002bc:	b580      	push	{r7, lr}
200002be:	b082      	sub	sp, #8
200002c0:	af00      	add	r7, sp, #0
200002c2:	0002      	movs	r2, r0
200002c4:	1dfb      	adds	r3, r7, #7
200002c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
200002c8:	4b03      	ldr	r3, [pc, #12]	; (200002d8 <RCC_ClockSecuritySystemCmd+0x1c>)
200002ca:	1dfa      	adds	r2, r7, #7
200002cc:	7812      	ldrb	r2, [r2, #0]
200002ce:	601a      	str	r2, [r3, #0]
}
200002d0:	46c0      	nop			; (mov r8, r8)
200002d2:	46bd      	mov	sp, r7
200002d4:	b002      	add	sp, #8
200002d6:	bd80      	pop	{r7, pc}
200002d8:	4247004c 	submi	r0, r7, #76	; 0x4c

200002dc <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
200002dc:	b580      	push	{r7, lr}
200002de:	b084      	sub	sp, #16
200002e0:	af00      	add	r7, sp, #0
200002e2:	6078      	str	r0, [r7, #4]
200002e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200002e6:	2300      	movs	r3, #0
200002e8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
200002ea:	4b0a      	ldr	r3, [pc, #40]	; (20000314 <RCC_MCO1Config+0x38>)
200002ec:	689b      	ldr	r3, [r3, #8]
200002ee:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
200002f0:	68fb      	ldr	r3, [r7, #12]
200002f2:	4a09      	ldr	r2, [pc, #36]	; (20000318 <RCC_MCO1Config+0x3c>)
200002f4:	4013      	ands	r3, r2
200002f6:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200002f8:	687a      	ldr	r2, [r7, #4]
200002fa:	683b      	ldr	r3, [r7, #0]
200002fc:	4313      	orrs	r3, r2
200002fe:	68fa      	ldr	r2, [r7, #12]
20000300:	4313      	orrs	r3, r2
20000302:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20000304:	4b03      	ldr	r3, [pc, #12]	; (20000314 <RCC_MCO1Config+0x38>)
20000306:	68fa      	ldr	r2, [r7, #12]
20000308:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
2000030a:	46c0      	nop			; (mov r8, r8)
2000030c:	46bd      	mov	sp, r7
2000030e:	b004      	add	sp, #16
20000310:	bd80      	pop	{r7, pc}
20000312:	46c0      	nop			; (mov r8, r8)
20000314:	40023800 	andmi	r3, r2, r0, lsl #16
20000318:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

2000031c <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
2000031c:	b580      	push	{r7, lr}
2000031e:	b084      	sub	sp, #16
20000320:	af00      	add	r7, sp, #0
20000322:	6078      	str	r0, [r7, #4]
20000324:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20000326:	2300      	movs	r3, #0
20000328:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
2000032a:	4b0a      	ldr	r3, [pc, #40]	; (20000354 <RCC_MCO2Config+0x38>)
2000032c:	689b      	ldr	r3, [r3, #8]
2000032e:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
20000330:	68fb      	ldr	r3, [r7, #12]
20000332:	015b      	lsls	r3, r3, #5
20000334:	095b      	lsrs	r3, r3, #5
20000336:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
20000338:	687a      	ldr	r2, [r7, #4]
2000033a:	683b      	ldr	r3, [r7, #0]
2000033c:	4313      	orrs	r3, r2
2000033e:	68fa      	ldr	r2, [r7, #12]
20000340:	4313      	orrs	r3, r2
20000342:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20000344:	4b03      	ldr	r3, [pc, #12]	; (20000354 <RCC_MCO2Config+0x38>)
20000346:	68fa      	ldr	r2, [r7, #12]
20000348:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
2000034a:	46c0      	nop			; (mov r8, r8)
2000034c:	46bd      	mov	sp, r7
2000034e:	b004      	add	sp, #16
20000350:	bd80      	pop	{r7, pc}
20000352:	46c0      	nop			; (mov r8, r8)
20000354:	40023800 	andmi	r3, r2, r0, lsl #16

20000358 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000358:	b580      	push	{r7, lr}
2000035a:	b084      	sub	sp, #16
2000035c:	af00      	add	r7, sp, #0
2000035e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000360:	2300      	movs	r3, #0
20000362:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
20000364:	4b08      	ldr	r3, [pc, #32]	; (20000388 <RCC_SYSCLKConfig+0x30>)
20000366:	689b      	ldr	r3, [r3, #8]
20000368:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
2000036a:	68fb      	ldr	r3, [r7, #12]
2000036c:	2203      	movs	r2, #3
2000036e:	4393      	bics	r3, r2
20000370:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
20000372:	68fa      	ldr	r2, [r7, #12]
20000374:	687b      	ldr	r3, [r7, #4]
20000376:	4313      	orrs	r3, r2
20000378:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
2000037a:	4b03      	ldr	r3, [pc, #12]	; (20000388 <RCC_SYSCLKConfig+0x30>)
2000037c:	68fa      	ldr	r2, [r7, #12]
2000037e:	609a      	str	r2, [r3, #8]
}
20000380:	46c0      	nop			; (mov r8, r8)
20000382:	46bd      	mov	sp, r7
20000384:	b004      	add	sp, #16
20000386:	bd80      	pop	{r7, pc}
20000388:	40023800 	andmi	r3, r2, r0, lsl #16

2000038c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
2000038c:	b580      	push	{r7, lr}
2000038e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000390:	4b04      	ldr	r3, [pc, #16]	; (200003a4 <RCC_GetSYSCLKSource+0x18>)
20000392:	689b      	ldr	r3, [r3, #8]
20000394:	b2db      	uxtb	r3, r3
20000396:	220c      	movs	r2, #12
20000398:	4013      	ands	r3, r2
2000039a:	b2db      	uxtb	r3, r3
}
2000039c:	0018      	movs	r0, r3
2000039e:	46bd      	mov	sp, r7
200003a0:	bd80      	pop	{r7, pc}
200003a2:	46c0      	nop			; (mov r8, r8)
200003a4:	40023800 	andmi	r3, r2, r0, lsl #16

200003a8 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
200003a8:	b580      	push	{r7, lr}
200003aa:	b084      	sub	sp, #16
200003ac:	af00      	add	r7, sp, #0
200003ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200003b0:	2300      	movs	r3, #0
200003b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
200003b4:	4b08      	ldr	r3, [pc, #32]	; (200003d8 <RCC_HCLKConfig+0x30>)
200003b6:	689b      	ldr	r3, [r3, #8]
200003b8:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
200003ba:	68fb      	ldr	r3, [r7, #12]
200003bc:	22f0      	movs	r2, #240	; 0xf0
200003be:	4393      	bics	r3, r2
200003c0:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
200003c2:	68fa      	ldr	r2, [r7, #12]
200003c4:	687b      	ldr	r3, [r7, #4]
200003c6:	4313      	orrs	r3, r2
200003c8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ca:	4b03      	ldr	r3, [pc, #12]	; (200003d8 <RCC_HCLKConfig+0x30>)
200003cc:	68fa      	ldr	r2, [r7, #12]
200003ce:	609a      	str	r2, [r3, #8]
}
200003d0:	46c0      	nop			; (mov r8, r8)
200003d2:	46bd      	mov	sp, r7
200003d4:	b004      	add	sp, #16
200003d6:	bd80      	pop	{r7, pc}
200003d8:	40023800 	andmi	r3, r2, r0, lsl #16

200003dc <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
200003dc:	b580      	push	{r7, lr}
200003de:	b084      	sub	sp, #16
200003e0:	af00      	add	r7, sp, #0
200003e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200003e4:	2300      	movs	r3, #0
200003e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200003e8:	4b08      	ldr	r3, [pc, #32]	; (2000040c <RCC_PCLK1Config+0x30>)
200003ea:	689b      	ldr	r3, [r3, #8]
200003ec:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
200003ee:	68fb      	ldr	r3, [r7, #12]
200003f0:	4a07      	ldr	r2, [pc, #28]	; (20000410 <RCC_PCLK1Config+0x34>)
200003f2:	4013      	ands	r3, r2
200003f4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
200003f6:	68fa      	ldr	r2, [r7, #12]
200003f8:	687b      	ldr	r3, [r7, #4]
200003fa:	4313      	orrs	r3, r2
200003fc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200003fe:	4b03      	ldr	r3, [pc, #12]	; (2000040c <RCC_PCLK1Config+0x30>)
20000400:	68fa      	ldr	r2, [r7, #12]
20000402:	609a      	str	r2, [r3, #8]
}
20000404:	46c0      	nop			; (mov r8, r8)
20000406:	46bd      	mov	sp, r7
20000408:	b004      	add	sp, #16
2000040a:	bd80      	pop	{r7, pc}
2000040c:	40023800 	andmi	r3, r2, r0, lsl #16
20000410:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

20000414 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
20000414:	b580      	push	{r7, lr}
20000416:	b084      	sub	sp, #16
20000418:	af00      	add	r7, sp, #0
2000041a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000041c:	2300      	movs	r3, #0
2000041e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000420:	4b09      	ldr	r3, [pc, #36]	; (20000448 <RCC_PCLK2Config+0x34>)
20000422:	689b      	ldr	r3, [r3, #8]
20000424:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
20000426:	68fb      	ldr	r3, [r7, #12]
20000428:	4a08      	ldr	r2, [pc, #32]	; (2000044c <RCC_PCLK2Config+0x38>)
2000042a:	4013      	ands	r3, r2
2000042c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
2000042e:	687b      	ldr	r3, [r7, #4]
20000430:	00db      	lsls	r3, r3, #3
20000432:	68fa      	ldr	r2, [r7, #12]
20000434:	4313      	orrs	r3, r2
20000436:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000438:	4b03      	ldr	r3, [pc, #12]	; (20000448 <RCC_PCLK2Config+0x34>)
2000043a:	68fa      	ldr	r2, [r7, #12]
2000043c:	609a      	str	r2, [r3, #8]
}
2000043e:	46c0      	nop			; (mov r8, r8)
20000440:	46bd      	mov	sp, r7
20000442:	b004      	add	sp, #16
20000444:	bd80      	pop	{r7, pc}
20000446:	46c0      	nop			; (mov r8, r8)
20000448:	40023800 	andmi	r3, r2, r0, lsl #16
2000044c:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

20000450 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
20000450:	b580      	push	{r7, lr}
20000452:	b088      	sub	sp, #32
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000458:	2300      	movs	r3, #0
2000045a:	61bb      	str	r3, [r7, #24]
2000045c:	2300      	movs	r3, #0
2000045e:	617b      	str	r3, [r7, #20]
20000460:	2300      	movs	r3, #0
20000462:	61fb      	str	r3, [r7, #28]
20000464:	2302      	movs	r3, #2
20000466:	613b      	str	r3, [r7, #16]
20000468:	2300      	movs	r3, #0
2000046a:	60fb      	str	r3, [r7, #12]
2000046c:	2302      	movs	r3, #2
2000046e:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000470:	4b49      	ldr	r3, [pc, #292]	; (20000598 <RCC_GetClocksFreq+0x148>)
20000472:	689b      	ldr	r3, [r3, #8]
20000474:	220c      	movs	r2, #12
20000476:	4013      	ands	r3, r2
20000478:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
2000047a:	69bb      	ldr	r3, [r7, #24]
2000047c:	2b04      	cmp	r3, #4
2000047e:	d007      	beq.n	20000490 <RCC_GetClocksFreq+0x40>
20000480:	2b08      	cmp	r3, #8
20000482:	d009      	beq.n	20000498 <RCC_GetClocksFreq+0x48>
20000484:	2b00      	cmp	r3, #0
20000486:	d141      	bne.n	2000050c <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000488:	687b      	ldr	r3, [r7, #4]
2000048a:	4a44      	ldr	r2, [pc, #272]	; (2000059c <RCC_GetClocksFreq+0x14c>)
2000048c:	601a      	str	r2, [r3, #0]
    break;
2000048e:	e041      	b.n	20000514 <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000490:	687b      	ldr	r3, [r7, #4]
20000492:	4a43      	ldr	r2, [pc, #268]	; (200005a0 <RCC_GetClocksFreq+0x150>)
20000494:	601a      	str	r2, [r3, #0]
    break;
20000496:	e03d      	b.n	20000514 <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000498:	4b3f      	ldr	r3, [pc, #252]	; (20000598 <RCC_GetClocksFreq+0x148>)
2000049a:	685b      	ldr	r3, [r3, #4]
2000049c:	0d9b      	lsrs	r3, r3, #22
2000049e:	2201      	movs	r2, #1
200004a0:	4013      	ands	r3, r2
200004a2:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
200004a4:	4b3c      	ldr	r3, [pc, #240]	; (20000598 <RCC_GetClocksFreq+0x148>)
200004a6:	685b      	ldr	r3, [r3, #4]
200004a8:	223f      	movs	r2, #63	; 0x3f
200004aa:	4013      	ands	r3, r2
200004ac:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
200004ae:	68fb      	ldr	r3, [r7, #12]
200004b0:	2b00      	cmp	r3, #0
200004b2:	d00d      	beq.n	200004d0 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
200004b4:	68b9      	ldr	r1, [r7, #8]
200004b6:	483a      	ldr	r0, [pc, #232]	; (200005a0 <RCC_GetClocksFreq+0x150>)
200004b8:	f000 fec0 	bl	2000123c <__udivsi3>
200004bc:	0003      	movs	r3, r0
200004be:	001a      	movs	r2, r3
200004c0:	4b35      	ldr	r3, [pc, #212]	; (20000598 <RCC_GetClocksFreq+0x148>)
200004c2:	685b      	ldr	r3, [r3, #4]
200004c4:	099b      	lsrs	r3, r3, #6
200004c6:	05db      	lsls	r3, r3, #23
200004c8:	0ddb      	lsrs	r3, r3, #23
200004ca:	4353      	muls	r3, r2
200004cc:	61fb      	str	r3, [r7, #28]
200004ce:	e00c      	b.n	200004ea <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
200004d0:	68b9      	ldr	r1, [r7, #8]
200004d2:	4832      	ldr	r0, [pc, #200]	; (2000059c <RCC_GetClocksFreq+0x14c>)
200004d4:	f000 feb2 	bl	2000123c <__udivsi3>
200004d8:	0003      	movs	r3, r0
200004da:	001a      	movs	r2, r3
200004dc:	4b2e      	ldr	r3, [pc, #184]	; (20000598 <RCC_GetClocksFreq+0x148>)
200004de:	685b      	ldr	r3, [r3, #4]
200004e0:	099b      	lsrs	r3, r3, #6
200004e2:	05db      	lsls	r3, r3, #23
200004e4:	0ddb      	lsrs	r3, r3, #23
200004e6:	4353      	muls	r3, r2
200004e8:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
200004ea:	4b2b      	ldr	r3, [pc, #172]	; (20000598 <RCC_GetClocksFreq+0x148>)
200004ec:	685b      	ldr	r3, [r3, #4]
200004ee:	0c1b      	lsrs	r3, r3, #16
200004f0:	2203      	movs	r2, #3
200004f2:	4013      	ands	r3, r2
200004f4:	3301      	adds	r3, #1
200004f6:	005b      	lsls	r3, r3, #1
200004f8:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200004fa:	6939      	ldr	r1, [r7, #16]
200004fc:	69f8      	ldr	r0, [r7, #28]
200004fe:	f000 fe9d 	bl	2000123c <__udivsi3>
20000502:	0003      	movs	r3, r0
20000504:	001a      	movs	r2, r3
20000506:	687b      	ldr	r3, [r7, #4]
20000508:	601a      	str	r2, [r3, #0]
    break;
2000050a:	e003      	b.n	20000514 <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
2000050c:	687b      	ldr	r3, [r7, #4]
2000050e:	4a23      	ldr	r2, [pc, #140]	; (2000059c <RCC_GetClocksFreq+0x14c>)
20000510:	601a      	str	r2, [r3, #0]
    break;
20000512:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
20000514:	4b20      	ldr	r3, [pc, #128]	; (20000598 <RCC_GetClocksFreq+0x148>)
20000516:	689b      	ldr	r3, [r3, #8]
20000518:	22f0      	movs	r2, #240	; 0xf0
2000051a:	4013      	ands	r3, r2
2000051c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
2000051e:	69bb      	ldr	r3, [r7, #24]
20000520:	091b      	lsrs	r3, r3, #4
20000522:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000524:	4a1f      	ldr	r2, [pc, #124]	; (200005a4 <RCC_GetClocksFreq+0x154>)
20000526:	69bb      	ldr	r3, [r7, #24]
20000528:	18d3      	adds	r3, r2, r3
2000052a:	781b      	ldrb	r3, [r3, #0]
2000052c:	b2db      	uxtb	r3, r3
2000052e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	681a      	ldr	r2, [r3, #0]
20000534:	697b      	ldr	r3, [r7, #20]
20000536:	40da      	lsrs	r2, r3
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
2000053c:	4b16      	ldr	r3, [pc, #88]	; (20000598 <RCC_GetClocksFreq+0x148>)
2000053e:	689a      	ldr	r2, [r3, #8]
20000540:	23e0      	movs	r3, #224	; 0xe0
20000542:	015b      	lsls	r3, r3, #5
20000544:	4013      	ands	r3, r2
20000546:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
20000548:	69bb      	ldr	r3, [r7, #24]
2000054a:	0a9b      	lsrs	r3, r3, #10
2000054c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
2000054e:	4a15      	ldr	r2, [pc, #84]	; (200005a4 <RCC_GetClocksFreq+0x154>)
20000550:	69bb      	ldr	r3, [r7, #24]
20000552:	18d3      	adds	r3, r2, r3
20000554:	781b      	ldrb	r3, [r3, #0]
20000556:	b2db      	uxtb	r3, r3
20000558:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000055a:	687b      	ldr	r3, [r7, #4]
2000055c:	685a      	ldr	r2, [r3, #4]
2000055e:	697b      	ldr	r3, [r7, #20]
20000560:	40da      	lsrs	r2, r3
20000562:	687b      	ldr	r3, [r7, #4]
20000564:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
20000566:	4b0c      	ldr	r3, [pc, #48]	; (20000598 <RCC_GetClocksFreq+0x148>)
20000568:	689a      	ldr	r2, [r3, #8]
2000056a:	23e0      	movs	r3, #224	; 0xe0
2000056c:	021b      	lsls	r3, r3, #8
2000056e:	4013      	ands	r3, r2
20000570:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
20000572:	69bb      	ldr	r3, [r7, #24]
20000574:	0b5b      	lsrs	r3, r3, #13
20000576:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000578:	4a0a      	ldr	r2, [pc, #40]	; (200005a4 <RCC_GetClocksFreq+0x154>)
2000057a:	69bb      	ldr	r3, [r7, #24]
2000057c:	18d3      	adds	r3, r2, r3
2000057e:	781b      	ldrb	r3, [r3, #0]
20000580:	b2db      	uxtb	r3, r3
20000582:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000584:	687b      	ldr	r3, [r7, #4]
20000586:	685a      	ldr	r2, [r3, #4]
20000588:	697b      	ldr	r3, [r7, #20]
2000058a:	40da      	lsrs	r2, r3
2000058c:	687b      	ldr	r3, [r7, #4]
2000058e:	60da      	str	r2, [r3, #12]
}
20000590:	46c0      	nop			; (mov r8, r8)
20000592:	46bd      	mov	sp, r7
20000594:	b008      	add	sp, #32
20000596:	bd80      	pop	{r7, pc}
20000598:	40023800 	andmi	r3, r2, r0, lsl #16
2000059c:	00f42400 	rscseq	r2, r4, r0, lsl #8
200005a0:	017d7840 	cmneq	sp, r0, asr #16
200005a4:	20001354 	andcs	r1, r0, r4, asr r3

200005a8 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
200005a8:	b580      	push	{r7, lr}
200005aa:	b084      	sub	sp, #16
200005ac:	af00      	add	r7, sp, #0
200005ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200005b0:	2300      	movs	r3, #0
200005b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
200005b4:	687a      	ldr	r2, [r7, #4]
200005b6:	23c0      	movs	r3, #192	; 0xc0
200005b8:	009b      	lsls	r3, r3, #2
200005ba:	401a      	ands	r2, r3
200005bc:	23c0      	movs	r3, #192	; 0xc0
200005be:	009b      	lsls	r3, r3, #2
200005c0:	429a      	cmp	r2, r3
200005c2:	d10f      	bne.n	200005e4 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
200005c4:	4b0d      	ldr	r3, [pc, #52]	; (200005fc <RCC_RTCCLKConfig+0x54>)
200005c6:	689b      	ldr	r3, [r3, #8]
200005c8:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
200005ca:	68fb      	ldr	r3, [r7, #12]
200005cc:	4a0c      	ldr	r2, [pc, #48]	; (20000600 <RCC_RTCCLKConfig+0x58>)
200005ce:	4013      	ands	r3, r2
200005d0:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
200005d2:	687b      	ldr	r3, [r7, #4]
200005d4:	4a0b      	ldr	r2, [pc, #44]	; (20000604 <RCC_RTCCLKConfig+0x5c>)
200005d6:	4013      	ands	r3, r2
200005d8:	68fa      	ldr	r2, [r7, #12]
200005da:	4313      	orrs	r3, r2
200005dc:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
200005de:	4b07      	ldr	r3, [pc, #28]	; (200005fc <RCC_RTCCLKConfig+0x54>)
200005e0:	68fa      	ldr	r2, [r7, #12]
200005e2:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
200005e4:	4b05      	ldr	r3, [pc, #20]	; (200005fc <RCC_RTCCLKConfig+0x54>)
200005e6:	6f19      	ldr	r1, [r3, #112]	; 0x70
200005e8:	687b      	ldr	r3, [r7, #4]
200005ea:	051b      	lsls	r3, r3, #20
200005ec:	0d1a      	lsrs	r2, r3, #20
200005ee:	4b03      	ldr	r3, [pc, #12]	; (200005fc <RCC_RTCCLKConfig+0x54>)
200005f0:	430a      	orrs	r2, r1
200005f2:	671a      	str	r2, [r3, #112]	; 0x70
}
200005f4:	46c0      	nop			; (mov r8, r8)
200005f6:	46bd      	mov	sp, r7
200005f8:	b004      	add	sp, #16
200005fa:	bd80      	pop	{r7, pc}
200005fc:	40023800 	andmi	r3, r2, r0, lsl #16
20000600:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
20000604:	0ffffcff 	svceq	0x00fffcff

20000608 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
20000608:	b580      	push	{r7, lr}
2000060a:	b082      	sub	sp, #8
2000060c:	af00      	add	r7, sp, #0
2000060e:	0002      	movs	r2, r0
20000610:	1dfb      	adds	r3, r7, #7
20000612:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
20000614:	4b03      	ldr	r3, [pc, #12]	; (20000624 <RCC_RTCCLKCmd+0x1c>)
20000616:	1dfa      	adds	r2, r7, #7
20000618:	7812      	ldrb	r2, [r2, #0]
2000061a:	601a      	str	r2, [r3, #0]
}
2000061c:	46c0      	nop			; (mov r8, r8)
2000061e:	46bd      	mov	sp, r7
20000620:	b002      	add	sp, #8
20000622:	bd80      	pop	{r7, pc}
20000624:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

20000628 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
20000628:	b580      	push	{r7, lr}
2000062a:	b082      	sub	sp, #8
2000062c:	af00      	add	r7, sp, #0
2000062e:	0002      	movs	r2, r0
20000630:	1dfb      	adds	r3, r7, #7
20000632:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
20000634:	4b03      	ldr	r3, [pc, #12]	; (20000644 <RCC_BackupResetCmd+0x1c>)
20000636:	1dfa      	adds	r2, r7, #7
20000638:	7812      	ldrb	r2, [r2, #0]
2000063a:	601a      	str	r2, [r3, #0]
}
2000063c:	46c0      	nop			; (mov r8, r8)
2000063e:	46bd      	mov	sp, r7
20000640:	b002      	add	sp, #8
20000642:	bd80      	pop	{r7, pc}
20000644:	42470e40 	submi	r0, r7, #64, 28	; 0x400

20000648 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
20000648:	b580      	push	{r7, lr}
2000064a:	b082      	sub	sp, #8
2000064c:	af00      	add	r7, sp, #0
2000064e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
20000650:	4b03      	ldr	r3, [pc, #12]	; (20000660 <RCC_I2SCLKConfig+0x18>)
20000652:	687a      	ldr	r2, [r7, #4]
20000654:	601a      	str	r2, [r3, #0]
}
20000656:	46c0      	nop			; (mov r8, r8)
20000658:	46bd      	mov	sp, r7
2000065a:	b002      	add	sp, #8
2000065c:	bd80      	pop	{r7, pc}
2000065e:	46c0      	nop			; (mov r8, r8)
20000660:	4247015c 	submi	r0, r7, #92, 2

20000664 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
20000664:	b580      	push	{r7, lr}
20000666:	b084      	sub	sp, #16
20000668:	af00      	add	r7, sp, #0
2000066a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000066c:	2300      	movs	r3, #0
2000066e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000670:	4a09      	ldr	r2, [pc, #36]	; (20000698 <RCC_SAIBlockACLKConfig+0x34>)
20000672:	238c      	movs	r3, #140	; 0x8c
20000674:	58d3      	ldr	r3, [r2, r3]
20000676:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000678:	68fb      	ldr	r3, [r7, #12]
2000067a:	4a08      	ldr	r2, [pc, #32]	; (2000069c <RCC_SAIBlockACLKConfig+0x38>)
2000067c:	4013      	ands	r3, r2
2000067e:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000680:	68fa      	ldr	r2, [r7, #12]
20000682:	687b      	ldr	r3, [r7, #4]
20000684:	4313      	orrs	r3, r2
20000686:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000688:	4903      	ldr	r1, [pc, #12]	; (20000698 <RCC_SAIBlockACLKConfig+0x34>)
2000068a:	228c      	movs	r2, #140	; 0x8c
2000068c:	68fb      	ldr	r3, [r7, #12]
2000068e:	508b      	str	r3, [r1, r2]
}
20000690:	46c0      	nop			; (mov r8, r8)
20000692:	46bd      	mov	sp, r7
20000694:	b004      	add	sp, #16
20000696:	bd80      	pop	{r7, pc}
20000698:	40023800 	andmi	r3, r2, r0, lsl #16
2000069c:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

200006a0 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
200006a0:	b580      	push	{r7, lr}
200006a2:	b084      	sub	sp, #16
200006a4:	af00      	add	r7, sp, #0
200006a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200006a8:	2300      	movs	r3, #0
200006aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
200006ac:	4a09      	ldr	r2, [pc, #36]	; (200006d4 <RCC_SAIBlockBCLKConfig+0x34>)
200006ae:	238c      	movs	r3, #140	; 0x8c
200006b0:	58d3      	ldr	r3, [r2, r3]
200006b2:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
200006b4:	68fb      	ldr	r3, [r7, #12]
200006b6:	4a08      	ldr	r2, [pc, #32]	; (200006d8 <RCC_SAIBlockBCLKConfig+0x38>)
200006b8:	4013      	ands	r3, r2
200006ba:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
200006bc:	68fa      	ldr	r2, [r7, #12]
200006be:	687b      	ldr	r3, [r7, #4]
200006c0:	4313      	orrs	r3, r2
200006c2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200006c4:	4903      	ldr	r1, [pc, #12]	; (200006d4 <RCC_SAIBlockBCLKConfig+0x34>)
200006c6:	228c      	movs	r2, #140	; 0x8c
200006c8:	68fb      	ldr	r3, [r7, #12]
200006ca:	508b      	str	r3, [r1, r2]
}
200006cc:	46c0      	nop			; (mov r8, r8)
200006ce:	46bd      	mov	sp, r7
200006d0:	b004      	add	sp, #16
200006d2:	bd80      	pop	{r7, pc}
200006d4:	40023800 	andmi	r3, r2, r0, lsl #16
200006d8:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

200006dc <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
200006dc:	b580      	push	{r7, lr}
200006de:	b084      	sub	sp, #16
200006e0:	af00      	add	r7, sp, #0
200006e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200006e4:	2300      	movs	r3, #0
200006e6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
200006e8:	4a0a      	ldr	r2, [pc, #40]	; (20000714 <RCC_SAIPLLI2SClkDivConfig+0x38>)
200006ea:	238c      	movs	r3, #140	; 0x8c
200006ec:	58d3      	ldr	r3, [r2, r3]
200006ee:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
200006f0:	68fb      	ldr	r3, [r7, #12]
200006f2:	221f      	movs	r2, #31
200006f4:	4393      	bics	r3, r2
200006f6:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200006f8:	687b      	ldr	r3, [r7, #4]
200006fa:	3b01      	subs	r3, #1
200006fc:	68fa      	ldr	r2, [r7, #12]
200006fe:	4313      	orrs	r3, r2
20000700:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000702:	4904      	ldr	r1, [pc, #16]	; (20000714 <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000704:	228c      	movs	r2, #140	; 0x8c
20000706:	68fb      	ldr	r3, [r7, #12]
20000708:	508b      	str	r3, [r1, r2]
}
2000070a:	46c0      	nop			; (mov r8, r8)
2000070c:	46bd      	mov	sp, r7
2000070e:	b004      	add	sp, #16
20000710:	bd80      	pop	{r7, pc}
20000712:	46c0      	nop			; (mov r8, r8)
20000714:	40023800 	andmi	r3, r2, r0, lsl #16

20000718 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
20000718:	b580      	push	{r7, lr}
2000071a:	b084      	sub	sp, #16
2000071c:	af00      	add	r7, sp, #0
2000071e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000720:	2300      	movs	r3, #0
20000722:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000724:	4a0a      	ldr	r2, [pc, #40]	; (20000750 <RCC_SAIPLLSAIClkDivConfig+0x38>)
20000726:	238c      	movs	r3, #140	; 0x8c
20000728:	58d3      	ldr	r3, [r2, r3]
2000072a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
2000072c:	68fb      	ldr	r3, [r7, #12]
2000072e:	4a09      	ldr	r2, [pc, #36]	; (20000754 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
20000730:	4013      	ands	r3, r2
20000732:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
20000734:	687b      	ldr	r3, [r7, #4]
20000736:	3b01      	subs	r3, #1
20000738:	021b      	lsls	r3, r3, #8
2000073a:	68fa      	ldr	r2, [r7, #12]
2000073c:	4313      	orrs	r3, r2
2000073e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000740:	4903      	ldr	r1, [pc, #12]	; (20000750 <RCC_SAIPLLSAIClkDivConfig+0x38>)
20000742:	228c      	movs	r2, #140	; 0x8c
20000744:	68fb      	ldr	r3, [r7, #12]
20000746:	508b      	str	r3, [r1, r2]
}
20000748:	46c0      	nop			; (mov r8, r8)
2000074a:	46bd      	mov	sp, r7
2000074c:	b004      	add	sp, #16
2000074e:	bd80      	pop	{r7, pc}
20000750:	40023800 	andmi	r3, r2, r0, lsl #16
20000754:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000758 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000758:	b580      	push	{r7, lr}
2000075a:	b084      	sub	sp, #16
2000075c:	af00      	add	r7, sp, #0
2000075e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000760:	2300      	movs	r3, #0
20000762:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
20000764:	4a09      	ldr	r2, [pc, #36]	; (2000078c <RCC_LTDCCLKDivConfig+0x34>)
20000766:	238c      	movs	r3, #140	; 0x8c
20000768:	58d3      	ldr	r3, [r2, r3]
2000076a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
2000076c:	68fb      	ldr	r3, [r7, #12]
2000076e:	4a08      	ldr	r2, [pc, #32]	; (20000790 <RCC_LTDCCLKDivConfig+0x38>)
20000770:	4013      	ands	r3, r2
20000772:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
20000774:	68fa      	ldr	r2, [r7, #12]
20000776:	687b      	ldr	r3, [r7, #4]
20000778:	4313      	orrs	r3, r2
2000077a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000077c:	4903      	ldr	r1, [pc, #12]	; (2000078c <RCC_LTDCCLKDivConfig+0x34>)
2000077e:	228c      	movs	r2, #140	; 0x8c
20000780:	68fb      	ldr	r3, [r7, #12]
20000782:	508b      	str	r3, [r1, r2]
}
20000784:	46c0      	nop			; (mov r8, r8)
20000786:	46bd      	mov	sp, r7
20000788:	b004      	add	sp, #16
2000078a:	bd80      	pop	{r7, pc}
2000078c:	40023800 	andmi	r3, r2, r0, lsl #16
20000790:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

20000794 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
20000794:	b580      	push	{r7, lr}
20000796:	b082      	sub	sp, #8
20000798:	af00      	add	r7, sp, #0
2000079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
2000079c:	4b03      	ldr	r3, [pc, #12]	; (200007ac <RCC_TIMCLKPresConfig+0x18>)
2000079e:	687a      	ldr	r2, [r7, #4]
200007a0:	601a      	str	r2, [r3, #0]
}
200007a2:	46c0      	nop			; (mov r8, r8)
200007a4:	46bd      	mov	sp, r7
200007a6:	b002      	add	sp, #8
200007a8:	bd80      	pop	{r7, pc}
200007aa:	46c0      	nop			; (mov r8, r8)
200007ac:	424711e0 	submi	r1, r7, #224, 2	; 0x38

200007b0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200007b0:	b580      	push	{r7, lr}
200007b2:	b082      	sub	sp, #8
200007b4:	af00      	add	r7, sp, #0
200007b6:	6078      	str	r0, [r7, #4]
200007b8:	000a      	movs	r2, r1
200007ba:	1cfb      	adds	r3, r7, #3
200007bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200007be:	1cfb      	adds	r3, r7, #3
200007c0:	781b      	ldrb	r3, [r3, #0]
200007c2:	2b00      	cmp	r3, #0
200007c4:	d006      	beq.n	200007d4 <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
200007c6:	4b09      	ldr	r3, [pc, #36]	; (200007ec <RCC_AHB1PeriphClockCmd+0x3c>)
200007c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
200007ca:	4b08      	ldr	r3, [pc, #32]	; (200007ec <RCC_AHB1PeriphClockCmd+0x3c>)
200007cc:	687a      	ldr	r2, [r7, #4]
200007ce:	430a      	orrs	r2, r1
200007d0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
200007d2:	e006      	b.n	200007e2 <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
200007d4:	4b05      	ldr	r3, [pc, #20]	; (200007ec <RCC_AHB1PeriphClockCmd+0x3c>)
200007d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200007d8:	687b      	ldr	r3, [r7, #4]
200007da:	43d9      	mvns	r1, r3
200007dc:	4b03      	ldr	r3, [pc, #12]	; (200007ec <RCC_AHB1PeriphClockCmd+0x3c>)
200007de:	400a      	ands	r2, r1
200007e0:	631a      	str	r2, [r3, #48]	; 0x30
}
200007e2:	46c0      	nop			; (mov r8, r8)
200007e4:	46bd      	mov	sp, r7
200007e6:	b002      	add	sp, #8
200007e8:	bd80      	pop	{r7, pc}
200007ea:	46c0      	nop			; (mov r8, r8)
200007ec:	40023800 	andmi	r3, r2, r0, lsl #16

200007f0 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200007f0:	b580      	push	{r7, lr}
200007f2:	b082      	sub	sp, #8
200007f4:	af00      	add	r7, sp, #0
200007f6:	6078      	str	r0, [r7, #4]
200007f8:	000a      	movs	r2, r1
200007fa:	1cfb      	adds	r3, r7, #3
200007fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200007fe:	1cfb      	adds	r3, r7, #3
20000800:	781b      	ldrb	r3, [r3, #0]
20000802:	2b00      	cmp	r3, #0
20000804:	d006      	beq.n	20000814 <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
20000806:	4b09      	ldr	r3, [pc, #36]	; (2000082c <RCC_AHB2PeriphClockCmd+0x3c>)
20000808:	6b59      	ldr	r1, [r3, #52]	; 0x34
2000080a:	4b08      	ldr	r3, [pc, #32]	; (2000082c <RCC_AHB2PeriphClockCmd+0x3c>)
2000080c:	687a      	ldr	r2, [r7, #4]
2000080e:	430a      	orrs	r2, r1
20000810:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
20000812:	e006      	b.n	20000822 <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
20000814:	4b05      	ldr	r3, [pc, #20]	; (2000082c <RCC_AHB2PeriphClockCmd+0x3c>)
20000816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20000818:	687b      	ldr	r3, [r7, #4]
2000081a:	43d9      	mvns	r1, r3
2000081c:	4b03      	ldr	r3, [pc, #12]	; (2000082c <RCC_AHB2PeriphClockCmd+0x3c>)
2000081e:	400a      	ands	r2, r1
20000820:	635a      	str	r2, [r3, #52]	; 0x34
}
20000822:	46c0      	nop			; (mov r8, r8)
20000824:	46bd      	mov	sp, r7
20000826:	b002      	add	sp, #8
20000828:	bd80      	pop	{r7, pc}
2000082a:	46c0      	nop			; (mov r8, r8)
2000082c:	40023800 	andmi	r3, r2, r0, lsl #16

20000830 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000830:	b580      	push	{r7, lr}
20000832:	b082      	sub	sp, #8
20000834:	af00      	add	r7, sp, #0
20000836:	6078      	str	r0, [r7, #4]
20000838:	000a      	movs	r2, r1
2000083a:	1cfb      	adds	r3, r7, #3
2000083c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000083e:	1cfb      	adds	r3, r7, #3
20000840:	781b      	ldrb	r3, [r3, #0]
20000842:	2b00      	cmp	r3, #0
20000844:	d006      	beq.n	20000854 <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
20000846:	4b09      	ldr	r3, [pc, #36]	; (2000086c <RCC_AHB3PeriphClockCmd+0x3c>)
20000848:	6b99      	ldr	r1, [r3, #56]	; 0x38
2000084a:	4b08      	ldr	r3, [pc, #32]	; (2000086c <RCC_AHB3PeriphClockCmd+0x3c>)
2000084c:	687a      	ldr	r2, [r7, #4]
2000084e:	430a      	orrs	r2, r1
20000850:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
20000852:	e006      	b.n	20000862 <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
20000854:	4b05      	ldr	r3, [pc, #20]	; (2000086c <RCC_AHB3PeriphClockCmd+0x3c>)
20000856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000858:	687b      	ldr	r3, [r7, #4]
2000085a:	43d9      	mvns	r1, r3
2000085c:	4b03      	ldr	r3, [pc, #12]	; (2000086c <RCC_AHB3PeriphClockCmd+0x3c>)
2000085e:	400a      	ands	r2, r1
20000860:	639a      	str	r2, [r3, #56]	; 0x38
}
20000862:	46c0      	nop			; (mov r8, r8)
20000864:	46bd      	mov	sp, r7
20000866:	b002      	add	sp, #8
20000868:	bd80      	pop	{r7, pc}
2000086a:	46c0      	nop			; (mov r8, r8)
2000086c:	40023800 	andmi	r3, r2, r0, lsl #16

20000870 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000870:	b580      	push	{r7, lr}
20000872:	b082      	sub	sp, #8
20000874:	af00      	add	r7, sp, #0
20000876:	6078      	str	r0, [r7, #4]
20000878:	000a      	movs	r2, r1
2000087a:	1cfb      	adds	r3, r7, #3
2000087c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000087e:	1cfb      	adds	r3, r7, #3
20000880:	781b      	ldrb	r3, [r3, #0]
20000882:	2b00      	cmp	r3, #0
20000884:	d006      	beq.n	20000894 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
20000886:	4b09      	ldr	r3, [pc, #36]	; (200008ac <RCC_APB1PeriphClockCmd+0x3c>)
20000888:	6c19      	ldr	r1, [r3, #64]	; 0x40
2000088a:	4b08      	ldr	r3, [pc, #32]	; (200008ac <RCC_APB1PeriphClockCmd+0x3c>)
2000088c:	687a      	ldr	r2, [r7, #4]
2000088e:	430a      	orrs	r2, r1
20000890:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
20000892:	e006      	b.n	200008a2 <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
20000894:	4b05      	ldr	r3, [pc, #20]	; (200008ac <RCC_APB1PeriphClockCmd+0x3c>)
20000896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000898:	687b      	ldr	r3, [r7, #4]
2000089a:	43d9      	mvns	r1, r3
2000089c:	4b03      	ldr	r3, [pc, #12]	; (200008ac <RCC_APB1PeriphClockCmd+0x3c>)
2000089e:	400a      	ands	r2, r1
200008a0:	641a      	str	r2, [r3, #64]	; 0x40
}
200008a2:	46c0      	nop			; (mov r8, r8)
200008a4:	46bd      	mov	sp, r7
200008a6:	b002      	add	sp, #8
200008a8:	bd80      	pop	{r7, pc}
200008aa:	46c0      	nop			; (mov r8, r8)
200008ac:	40023800 	andmi	r3, r2, r0, lsl #16

200008b0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200008b0:	b580      	push	{r7, lr}
200008b2:	b082      	sub	sp, #8
200008b4:	af00      	add	r7, sp, #0
200008b6:	6078      	str	r0, [r7, #4]
200008b8:	000a      	movs	r2, r1
200008ba:	1cfb      	adds	r3, r7, #3
200008bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008be:	1cfb      	adds	r3, r7, #3
200008c0:	781b      	ldrb	r3, [r3, #0]
200008c2:	2b00      	cmp	r3, #0
200008c4:	d006      	beq.n	200008d4 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
200008c6:	4b09      	ldr	r3, [pc, #36]	; (200008ec <RCC_APB2PeriphClockCmd+0x3c>)
200008c8:	6c59      	ldr	r1, [r3, #68]	; 0x44
200008ca:	4b08      	ldr	r3, [pc, #32]	; (200008ec <RCC_APB2PeriphClockCmd+0x3c>)
200008cc:	687a      	ldr	r2, [r7, #4]
200008ce:	430a      	orrs	r2, r1
200008d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
200008d2:	e006      	b.n	200008e2 <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
200008d4:	4b05      	ldr	r3, [pc, #20]	; (200008ec <RCC_APB2PeriphClockCmd+0x3c>)
200008d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200008d8:	687b      	ldr	r3, [r7, #4]
200008da:	43d9      	mvns	r1, r3
200008dc:	4b03      	ldr	r3, [pc, #12]	; (200008ec <RCC_APB2PeriphClockCmd+0x3c>)
200008de:	400a      	ands	r2, r1
200008e0:	645a      	str	r2, [r3, #68]	; 0x44
}
200008e2:	46c0      	nop			; (mov r8, r8)
200008e4:	46bd      	mov	sp, r7
200008e6:	b002      	add	sp, #8
200008e8:	bd80      	pop	{r7, pc}
200008ea:	46c0      	nop			; (mov r8, r8)
200008ec:	40023800 	andmi	r3, r2, r0, lsl #16

200008f0 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200008f0:	b580      	push	{r7, lr}
200008f2:	b082      	sub	sp, #8
200008f4:	af00      	add	r7, sp, #0
200008f6:	6078      	str	r0, [r7, #4]
200008f8:	000a      	movs	r2, r1
200008fa:	1cfb      	adds	r3, r7, #3
200008fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008fe:	1cfb      	adds	r3, r7, #3
20000900:	781b      	ldrb	r3, [r3, #0]
20000902:	2b00      	cmp	r3, #0
20000904:	d006      	beq.n	20000914 <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
20000906:	4b09      	ldr	r3, [pc, #36]	; (2000092c <RCC_AHB1PeriphResetCmd+0x3c>)
20000908:	6919      	ldr	r1, [r3, #16]
2000090a:	4b08      	ldr	r3, [pc, #32]	; (2000092c <RCC_AHB1PeriphResetCmd+0x3c>)
2000090c:	687a      	ldr	r2, [r7, #4]
2000090e:	430a      	orrs	r2, r1
20000910:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
20000912:	e006      	b.n	20000922 <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
20000914:	4b05      	ldr	r3, [pc, #20]	; (2000092c <RCC_AHB1PeriphResetCmd+0x3c>)
20000916:	691a      	ldr	r2, [r3, #16]
20000918:	687b      	ldr	r3, [r7, #4]
2000091a:	43d9      	mvns	r1, r3
2000091c:	4b03      	ldr	r3, [pc, #12]	; (2000092c <RCC_AHB1PeriphResetCmd+0x3c>)
2000091e:	400a      	ands	r2, r1
20000920:	611a      	str	r2, [r3, #16]
}
20000922:	46c0      	nop			; (mov r8, r8)
20000924:	46bd      	mov	sp, r7
20000926:	b002      	add	sp, #8
20000928:	bd80      	pop	{r7, pc}
2000092a:	46c0      	nop			; (mov r8, r8)
2000092c:	40023800 	andmi	r3, r2, r0, lsl #16

20000930 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000930:	b580      	push	{r7, lr}
20000932:	b082      	sub	sp, #8
20000934:	af00      	add	r7, sp, #0
20000936:	6078      	str	r0, [r7, #4]
20000938:	000a      	movs	r2, r1
2000093a:	1cfb      	adds	r3, r7, #3
2000093c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000093e:	1cfb      	adds	r3, r7, #3
20000940:	781b      	ldrb	r3, [r3, #0]
20000942:	2b00      	cmp	r3, #0
20000944:	d006      	beq.n	20000954 <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
20000946:	4b09      	ldr	r3, [pc, #36]	; (2000096c <RCC_AHB2PeriphResetCmd+0x3c>)
20000948:	6959      	ldr	r1, [r3, #20]
2000094a:	4b08      	ldr	r3, [pc, #32]	; (2000096c <RCC_AHB2PeriphResetCmd+0x3c>)
2000094c:	687a      	ldr	r2, [r7, #4]
2000094e:	430a      	orrs	r2, r1
20000950:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
20000952:	e006      	b.n	20000962 <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
20000954:	4b05      	ldr	r3, [pc, #20]	; (2000096c <RCC_AHB2PeriphResetCmd+0x3c>)
20000956:	695a      	ldr	r2, [r3, #20]
20000958:	687b      	ldr	r3, [r7, #4]
2000095a:	43d9      	mvns	r1, r3
2000095c:	4b03      	ldr	r3, [pc, #12]	; (2000096c <RCC_AHB2PeriphResetCmd+0x3c>)
2000095e:	400a      	ands	r2, r1
20000960:	615a      	str	r2, [r3, #20]
}
20000962:	46c0      	nop			; (mov r8, r8)
20000964:	46bd      	mov	sp, r7
20000966:	b002      	add	sp, #8
20000968:	bd80      	pop	{r7, pc}
2000096a:	46c0      	nop			; (mov r8, r8)
2000096c:	40023800 	andmi	r3, r2, r0, lsl #16

20000970 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000970:	b580      	push	{r7, lr}
20000972:	b082      	sub	sp, #8
20000974:	af00      	add	r7, sp, #0
20000976:	6078      	str	r0, [r7, #4]
20000978:	000a      	movs	r2, r1
2000097a:	1cfb      	adds	r3, r7, #3
2000097c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000097e:	1cfb      	adds	r3, r7, #3
20000980:	781b      	ldrb	r3, [r3, #0]
20000982:	2b00      	cmp	r3, #0
20000984:	d006      	beq.n	20000994 <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000986:	4b09      	ldr	r3, [pc, #36]	; (200009ac <RCC_AHB3PeriphResetCmd+0x3c>)
20000988:	6999      	ldr	r1, [r3, #24]
2000098a:	4b08      	ldr	r3, [pc, #32]	; (200009ac <RCC_AHB3PeriphResetCmd+0x3c>)
2000098c:	687a      	ldr	r2, [r7, #4]
2000098e:	430a      	orrs	r2, r1
20000990:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000992:	e006      	b.n	200009a2 <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000994:	4b05      	ldr	r3, [pc, #20]	; (200009ac <RCC_AHB3PeriphResetCmd+0x3c>)
20000996:	699a      	ldr	r2, [r3, #24]
20000998:	687b      	ldr	r3, [r7, #4]
2000099a:	43d9      	mvns	r1, r3
2000099c:	4b03      	ldr	r3, [pc, #12]	; (200009ac <RCC_AHB3PeriphResetCmd+0x3c>)
2000099e:	400a      	ands	r2, r1
200009a0:	619a      	str	r2, [r3, #24]
}
200009a2:	46c0      	nop			; (mov r8, r8)
200009a4:	46bd      	mov	sp, r7
200009a6:	b002      	add	sp, #8
200009a8:	bd80      	pop	{r7, pc}
200009aa:	46c0      	nop			; (mov r8, r8)
200009ac:	40023800 	andmi	r3, r2, r0, lsl #16

200009b0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
200009b0:	b580      	push	{r7, lr}
200009b2:	b082      	sub	sp, #8
200009b4:	af00      	add	r7, sp, #0
200009b6:	6078      	str	r0, [r7, #4]
200009b8:	000a      	movs	r2, r1
200009ba:	1cfb      	adds	r3, r7, #3
200009bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200009be:	1cfb      	adds	r3, r7, #3
200009c0:	781b      	ldrb	r3, [r3, #0]
200009c2:	2b00      	cmp	r3, #0
200009c4:	d006      	beq.n	200009d4 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
200009c6:	4b09      	ldr	r3, [pc, #36]	; (200009ec <RCC_APB1PeriphResetCmd+0x3c>)
200009c8:	6a19      	ldr	r1, [r3, #32]
200009ca:	4b08      	ldr	r3, [pc, #32]	; (200009ec <RCC_APB1PeriphResetCmd+0x3c>)
200009cc:	687a      	ldr	r2, [r7, #4]
200009ce:	430a      	orrs	r2, r1
200009d0:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
200009d2:	e006      	b.n	200009e2 <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
200009d4:	4b05      	ldr	r3, [pc, #20]	; (200009ec <RCC_APB1PeriphResetCmd+0x3c>)
200009d6:	6a1a      	ldr	r2, [r3, #32]
200009d8:	687b      	ldr	r3, [r7, #4]
200009da:	43d9      	mvns	r1, r3
200009dc:	4b03      	ldr	r3, [pc, #12]	; (200009ec <RCC_APB1PeriphResetCmd+0x3c>)
200009de:	400a      	ands	r2, r1
200009e0:	621a      	str	r2, [r3, #32]
}
200009e2:	46c0      	nop			; (mov r8, r8)
200009e4:	46bd      	mov	sp, r7
200009e6:	b002      	add	sp, #8
200009e8:	bd80      	pop	{r7, pc}
200009ea:	46c0      	nop			; (mov r8, r8)
200009ec:	40023800 	andmi	r3, r2, r0, lsl #16

200009f0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200009f0:	b580      	push	{r7, lr}
200009f2:	b082      	sub	sp, #8
200009f4:	af00      	add	r7, sp, #0
200009f6:	6078      	str	r0, [r7, #4]
200009f8:	000a      	movs	r2, r1
200009fa:	1cfb      	adds	r3, r7, #3
200009fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200009fe:	1cfb      	adds	r3, r7, #3
20000a00:	781b      	ldrb	r3, [r3, #0]
20000a02:	2b00      	cmp	r3, #0
20000a04:	d006      	beq.n	20000a14 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000a06:	4b09      	ldr	r3, [pc, #36]	; (20000a2c <RCC_APB2PeriphResetCmd+0x3c>)
20000a08:	6a59      	ldr	r1, [r3, #36]	; 0x24
20000a0a:	4b08      	ldr	r3, [pc, #32]	; (20000a2c <RCC_APB2PeriphResetCmd+0x3c>)
20000a0c:	687a      	ldr	r2, [r7, #4]
20000a0e:	430a      	orrs	r2, r1
20000a10:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20000a12:	e006      	b.n	20000a22 <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20000a14:	4b05      	ldr	r3, [pc, #20]	; (20000a2c <RCC_APB2PeriphResetCmd+0x3c>)
20000a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000a18:	687b      	ldr	r3, [r7, #4]
20000a1a:	43d9      	mvns	r1, r3
20000a1c:	4b03      	ldr	r3, [pc, #12]	; (20000a2c <RCC_APB2PeriphResetCmd+0x3c>)
20000a1e:	400a      	ands	r2, r1
20000a20:	625a      	str	r2, [r3, #36]	; 0x24
}
20000a22:	46c0      	nop			; (mov r8, r8)
20000a24:	46bd      	mov	sp, r7
20000a26:	b002      	add	sp, #8
20000a28:	bd80      	pop	{r7, pc}
20000a2a:	46c0      	nop			; (mov r8, r8)
20000a2c:	40023800 	andmi	r3, r2, r0, lsl #16

20000a30 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000a30:	b580      	push	{r7, lr}
20000a32:	b082      	sub	sp, #8
20000a34:	af00      	add	r7, sp, #0
20000a36:	6078      	str	r0, [r7, #4]
20000a38:	000a      	movs	r2, r1
20000a3a:	1cfb      	adds	r3, r7, #3
20000a3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a3e:	1cfb      	adds	r3, r7, #3
20000a40:	781b      	ldrb	r3, [r3, #0]
20000a42:	2b00      	cmp	r3, #0
20000a44:	d006      	beq.n	20000a54 <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20000a46:	4b09      	ldr	r3, [pc, #36]	; (20000a6c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000a48:	6d19      	ldr	r1, [r3, #80]	; 0x50
20000a4a:	4b08      	ldr	r3, [pc, #32]	; (20000a6c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000a4c:	687a      	ldr	r2, [r7, #4]
20000a4e:	430a      	orrs	r2, r1
20000a50:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20000a52:	e006      	b.n	20000a62 <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20000a54:	4b05      	ldr	r3, [pc, #20]	; (20000a6c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000a56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20000a58:	687b      	ldr	r3, [r7, #4]
20000a5a:	43d9      	mvns	r1, r3
20000a5c:	4b03      	ldr	r3, [pc, #12]	; (20000a6c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000a5e:	400a      	ands	r2, r1
20000a60:	651a      	str	r2, [r3, #80]	; 0x50
}
20000a62:	46c0      	nop			; (mov r8, r8)
20000a64:	46bd      	mov	sp, r7
20000a66:	b002      	add	sp, #8
20000a68:	bd80      	pop	{r7, pc}
20000a6a:	46c0      	nop			; (mov r8, r8)
20000a6c:	40023800 	andmi	r3, r2, r0, lsl #16

20000a70 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000a70:	b580      	push	{r7, lr}
20000a72:	b082      	sub	sp, #8
20000a74:	af00      	add	r7, sp, #0
20000a76:	6078      	str	r0, [r7, #4]
20000a78:	000a      	movs	r2, r1
20000a7a:	1cfb      	adds	r3, r7, #3
20000a7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a7e:	1cfb      	adds	r3, r7, #3
20000a80:	781b      	ldrb	r3, [r3, #0]
20000a82:	2b00      	cmp	r3, #0
20000a84:	d006      	beq.n	20000a94 <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20000a86:	4b09      	ldr	r3, [pc, #36]	; (20000aac <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000a88:	6d59      	ldr	r1, [r3, #84]	; 0x54
20000a8a:	4b08      	ldr	r3, [pc, #32]	; (20000aac <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000a8c:	687a      	ldr	r2, [r7, #4]
20000a8e:	430a      	orrs	r2, r1
20000a90:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20000a92:	e006      	b.n	20000aa2 <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20000a94:	4b05      	ldr	r3, [pc, #20]	; (20000aac <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000a96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20000a98:	687b      	ldr	r3, [r7, #4]
20000a9a:	43d9      	mvns	r1, r3
20000a9c:	4b03      	ldr	r3, [pc, #12]	; (20000aac <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000a9e:	400a      	ands	r2, r1
20000aa0:	655a      	str	r2, [r3, #84]	; 0x54
}
20000aa2:	46c0      	nop			; (mov r8, r8)
20000aa4:	46bd      	mov	sp, r7
20000aa6:	b002      	add	sp, #8
20000aa8:	bd80      	pop	{r7, pc}
20000aaa:	46c0      	nop			; (mov r8, r8)
20000aac:	40023800 	andmi	r3, r2, r0, lsl #16

20000ab0 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000ab0:	b580      	push	{r7, lr}
20000ab2:	b082      	sub	sp, #8
20000ab4:	af00      	add	r7, sp, #0
20000ab6:	6078      	str	r0, [r7, #4]
20000ab8:	000a      	movs	r2, r1
20000aba:	1cfb      	adds	r3, r7, #3
20000abc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000abe:	1cfb      	adds	r3, r7, #3
20000ac0:	781b      	ldrb	r3, [r3, #0]
20000ac2:	2b00      	cmp	r3, #0
20000ac4:	d006      	beq.n	20000ad4 <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20000ac6:	4b09      	ldr	r3, [pc, #36]	; (20000aec <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000ac8:	6d99      	ldr	r1, [r3, #88]	; 0x58
20000aca:	4b08      	ldr	r3, [pc, #32]	; (20000aec <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000acc:	687a      	ldr	r2, [r7, #4]
20000ace:	430a      	orrs	r2, r1
20000ad0:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20000ad2:	e006      	b.n	20000ae2 <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20000ad4:	4b05      	ldr	r3, [pc, #20]	; (20000aec <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000ad6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20000ad8:	687b      	ldr	r3, [r7, #4]
20000ada:	43d9      	mvns	r1, r3
20000adc:	4b03      	ldr	r3, [pc, #12]	; (20000aec <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000ade:	400a      	ands	r2, r1
20000ae0:	659a      	str	r2, [r3, #88]	; 0x58
}
20000ae2:	46c0      	nop			; (mov r8, r8)
20000ae4:	46bd      	mov	sp, r7
20000ae6:	b002      	add	sp, #8
20000ae8:	bd80      	pop	{r7, pc}
20000aea:	46c0      	nop			; (mov r8, r8)
20000aec:	40023800 	andmi	r3, r2, r0, lsl #16

20000af0 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000af0:	b580      	push	{r7, lr}
20000af2:	b082      	sub	sp, #8
20000af4:	af00      	add	r7, sp, #0
20000af6:	6078      	str	r0, [r7, #4]
20000af8:	000a      	movs	r2, r1
20000afa:	1cfb      	adds	r3, r7, #3
20000afc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000afe:	1cfb      	adds	r3, r7, #3
20000b00:	781b      	ldrb	r3, [r3, #0]
20000b02:	2b00      	cmp	r3, #0
20000b04:	d006      	beq.n	20000b14 <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20000b06:	4b09      	ldr	r3, [pc, #36]	; (20000b2c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000b08:	6e19      	ldr	r1, [r3, #96]	; 0x60
20000b0a:	4b08      	ldr	r3, [pc, #32]	; (20000b2c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000b0c:	687a      	ldr	r2, [r7, #4]
20000b0e:	430a      	orrs	r2, r1
20000b10:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20000b12:	e006      	b.n	20000b22 <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20000b14:	4b05      	ldr	r3, [pc, #20]	; (20000b2c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000b16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20000b18:	687b      	ldr	r3, [r7, #4]
20000b1a:	43d9      	mvns	r1, r3
20000b1c:	4b03      	ldr	r3, [pc, #12]	; (20000b2c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000b1e:	400a      	ands	r2, r1
20000b20:	661a      	str	r2, [r3, #96]	; 0x60
}
20000b22:	46c0      	nop			; (mov r8, r8)
20000b24:	46bd      	mov	sp, r7
20000b26:	b002      	add	sp, #8
20000b28:	bd80      	pop	{r7, pc}
20000b2a:	46c0      	nop			; (mov r8, r8)
20000b2c:	40023800 	andmi	r3, r2, r0, lsl #16

20000b30 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000b30:	b580      	push	{r7, lr}
20000b32:	b082      	sub	sp, #8
20000b34:	af00      	add	r7, sp, #0
20000b36:	6078      	str	r0, [r7, #4]
20000b38:	000a      	movs	r2, r1
20000b3a:	1cfb      	adds	r3, r7, #3
20000b3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b3e:	1cfb      	adds	r3, r7, #3
20000b40:	781b      	ldrb	r3, [r3, #0]
20000b42:	2b00      	cmp	r3, #0
20000b44:	d006      	beq.n	20000b54 <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20000b46:	4b09      	ldr	r3, [pc, #36]	; (20000b6c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000b48:	6e59      	ldr	r1, [r3, #100]	; 0x64
20000b4a:	4b08      	ldr	r3, [pc, #32]	; (20000b6c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000b4c:	687a      	ldr	r2, [r7, #4]
20000b4e:	430a      	orrs	r2, r1
20000b50:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20000b52:	e006      	b.n	20000b62 <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20000b54:	4b05      	ldr	r3, [pc, #20]	; (20000b6c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000b56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20000b58:	687b      	ldr	r3, [r7, #4]
20000b5a:	43d9      	mvns	r1, r3
20000b5c:	4b03      	ldr	r3, [pc, #12]	; (20000b6c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000b5e:	400a      	ands	r2, r1
20000b60:	665a      	str	r2, [r3, #100]	; 0x64
}
20000b62:	46c0      	nop			; (mov r8, r8)
20000b64:	46bd      	mov	sp, r7
20000b66:	b002      	add	sp, #8
20000b68:	bd80      	pop	{r7, pc}
20000b6a:	46c0      	nop			; (mov r8, r8)
20000b6c:	40023800 	andmi	r3, r2, r0, lsl #16

20000b70 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20000b70:	b580      	push	{r7, lr}
20000b72:	b082      	sub	sp, #8
20000b74:	af00      	add	r7, sp, #0
20000b76:	0002      	movs	r2, r0
20000b78:	1dfb      	adds	r3, r7, #7
20000b7a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20000b7c:	1dfb      	adds	r3, r7, #7
20000b7e:	781b      	ldrb	r3, [r3, #0]
20000b80:	2b01      	cmp	r3, #1
20000b82:	d106      	bne.n	20000b92 <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000b84:	4b08      	ldr	r3, [pc, #32]	; (20000ba8 <RCC_LSEModeConfig+0x38>)
20000b86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000b88:	4b07      	ldr	r3, [pc, #28]	; (20000ba8 <RCC_LSEModeConfig+0x38>)
20000b8a:	2108      	movs	r1, #8
20000b8c:	430a      	orrs	r2, r1
20000b8e:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20000b90:	e005      	b.n	20000b9e <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000b92:	4b05      	ldr	r3, [pc, #20]	; (20000ba8 <RCC_LSEModeConfig+0x38>)
20000b94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000b96:	4b04      	ldr	r3, [pc, #16]	; (20000ba8 <RCC_LSEModeConfig+0x38>)
20000b98:	2108      	movs	r1, #8
20000b9a:	438a      	bics	r2, r1
20000b9c:	671a      	str	r2, [r3, #112]	; 0x70
}
20000b9e:	46c0      	nop			; (mov r8, r8)
20000ba0:	46bd      	mov	sp, r7
20000ba2:	b002      	add	sp, #8
20000ba4:	bd80      	pop	{r7, pc}
20000ba6:	46c0      	nop			; (mov r8, r8)
20000ba8:	40023800 	andmi	r3, r2, r0, lsl #16

20000bac <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20000bac:	b580      	push	{r7, lr}
20000bae:	b082      	sub	sp, #8
20000bb0:	af00      	add	r7, sp, #0
20000bb2:	0002      	movs	r2, r0
20000bb4:	1dfb      	adds	r3, r7, #7
20000bb6:	701a      	strb	r2, [r3, #0]
20000bb8:	1dbb      	adds	r3, r7, #6
20000bba:	1c0a      	adds	r2, r1, #0
20000bbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000bbe:	1dbb      	adds	r3, r7, #6
20000bc0:	781b      	ldrb	r3, [r3, #0]
20000bc2:	2b00      	cmp	r3, #0
20000bc4:	d009      	beq.n	20000bda <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20000bc6:	4b0c      	ldr	r3, [pc, #48]	; (20000bf8 <RCC_ITConfig+0x4c>)
20000bc8:	781b      	ldrb	r3, [r3, #0]
20000bca:	b2da      	uxtb	r2, r3
20000bcc:	490a      	ldr	r1, [pc, #40]	; (20000bf8 <RCC_ITConfig+0x4c>)
20000bce:	1dfb      	adds	r3, r7, #7
20000bd0:	781b      	ldrb	r3, [r3, #0]
20000bd2:	4313      	orrs	r3, r2
20000bd4:	b2db      	uxtb	r3, r3
20000bd6:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20000bd8:	e00a      	b.n	20000bf0 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20000bda:	4b07      	ldr	r3, [pc, #28]	; (20000bf8 <RCC_ITConfig+0x4c>)
20000bdc:	781b      	ldrb	r3, [r3, #0]
20000bde:	b2db      	uxtb	r3, r3
20000be0:	1dfa      	adds	r2, r7, #7
20000be2:	7812      	ldrb	r2, [r2, #0]
20000be4:	43d2      	mvns	r2, r2
20000be6:	b2d2      	uxtb	r2, r2
20000be8:	4903      	ldr	r1, [pc, #12]	; (20000bf8 <RCC_ITConfig+0x4c>)
20000bea:	4013      	ands	r3, r2
20000bec:	b2db      	uxtb	r3, r3
20000bee:	700b      	strb	r3, [r1, #0]
}
20000bf0:	46c0      	nop			; (mov r8, r8)
20000bf2:	46bd      	mov	sp, r7
20000bf4:	b002      	add	sp, #8
20000bf6:	bd80      	pop	{r7, pc}
20000bf8:	4002380d 	andmi	r3, r2, sp, lsl #16

20000bfc <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20000bfc:	b580      	push	{r7, lr}
20000bfe:	b086      	sub	sp, #24
20000c00:	af00      	add	r7, sp, #0
20000c02:	0002      	movs	r2, r0
20000c04:	1dfb      	adds	r3, r7, #7
20000c06:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20000c08:	2300      	movs	r3, #0
20000c0a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20000c0c:	2300      	movs	r3, #0
20000c0e:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20000c10:	2313      	movs	r3, #19
20000c12:	18fb      	adds	r3, r7, r3
20000c14:	2200      	movs	r2, #0
20000c16:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20000c18:	1dfb      	adds	r3, r7, #7
20000c1a:	781b      	ldrb	r3, [r3, #0]
20000c1c:	095b      	lsrs	r3, r3, #5
20000c1e:	b2db      	uxtb	r3, r3
20000c20:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20000c22:	68fb      	ldr	r3, [r7, #12]
20000c24:	2b01      	cmp	r3, #1
20000c26:	d103      	bne.n	20000c30 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20000c28:	4b14      	ldr	r3, [pc, #80]	; (20000c7c <RCC_GetFlagStatus+0x80>)
20000c2a:	681b      	ldr	r3, [r3, #0]
20000c2c:	617b      	str	r3, [r7, #20]
20000c2e:	e009      	b.n	20000c44 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20000c30:	68fb      	ldr	r3, [r7, #12]
20000c32:	2b02      	cmp	r3, #2
20000c34:	d103      	bne.n	20000c3e <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20000c36:	4b11      	ldr	r3, [pc, #68]	; (20000c7c <RCC_GetFlagStatus+0x80>)
20000c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20000c3a:	617b      	str	r3, [r7, #20]
20000c3c:	e002      	b.n	20000c44 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20000c3e:	4b0f      	ldr	r3, [pc, #60]	; (20000c7c <RCC_GetFlagStatus+0x80>)
20000c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000c42:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20000c44:	1dfb      	adds	r3, r7, #7
20000c46:	781b      	ldrb	r3, [r3, #0]
20000c48:	221f      	movs	r2, #31
20000c4a:	4013      	ands	r3, r2
20000c4c:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20000c4e:	697a      	ldr	r2, [r7, #20]
20000c50:	68fb      	ldr	r3, [r7, #12]
20000c52:	40da      	lsrs	r2, r3
20000c54:	0013      	movs	r3, r2
20000c56:	2201      	movs	r2, #1
20000c58:	4013      	ands	r3, r2
20000c5a:	d004      	beq.n	20000c66 <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20000c5c:	2313      	movs	r3, #19
20000c5e:	18fb      	adds	r3, r7, r3
20000c60:	2201      	movs	r2, #1
20000c62:	701a      	strb	r2, [r3, #0]
20000c64:	e003      	b.n	20000c6e <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20000c66:	2313      	movs	r3, #19
20000c68:	18fb      	adds	r3, r7, r3
20000c6a:	2200      	movs	r2, #0
20000c6c:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20000c6e:	2313      	movs	r3, #19
20000c70:	18fb      	adds	r3, r7, r3
20000c72:	781b      	ldrb	r3, [r3, #0]
}
20000c74:	0018      	movs	r0, r3
20000c76:	46bd      	mov	sp, r7
20000c78:	b006      	add	sp, #24
20000c7a:	bd80      	pop	{r7, pc}
20000c7c:	40023800 	andmi	r3, r2, r0, lsl #16

20000c80 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20000c80:	b580      	push	{r7, lr}
20000c82:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20000c84:	4b04      	ldr	r3, [pc, #16]	; (20000c98 <RCC_ClearFlag+0x18>)
20000c86:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20000c88:	4b03      	ldr	r3, [pc, #12]	; (20000c98 <RCC_ClearFlag+0x18>)
20000c8a:	2180      	movs	r1, #128	; 0x80
20000c8c:	0449      	lsls	r1, r1, #17
20000c8e:	430a      	orrs	r2, r1
20000c90:	675a      	str	r2, [r3, #116]	; 0x74
}
20000c92:	46c0      	nop			; (mov r8, r8)
20000c94:	46bd      	mov	sp, r7
20000c96:	bd80      	pop	{r7, pc}
20000c98:	40023800 	andmi	r3, r2, r0, lsl #16

20000c9c <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20000c9c:	b580      	push	{r7, lr}
20000c9e:	b084      	sub	sp, #16
20000ca0:	af00      	add	r7, sp, #0
20000ca2:	0002      	movs	r2, r0
20000ca4:	1dfb      	adds	r3, r7, #7
20000ca6:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20000ca8:	230f      	movs	r3, #15
20000caa:	18fb      	adds	r3, r7, r3
20000cac:	2200      	movs	r2, #0
20000cae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20000cb0:	4b0a      	ldr	r3, [pc, #40]	; (20000cdc <RCC_GetITStatus+0x40>)
20000cb2:	68db      	ldr	r3, [r3, #12]
20000cb4:	1dfa      	adds	r2, r7, #7
20000cb6:	7812      	ldrb	r2, [r2, #0]
20000cb8:	4013      	ands	r3, r2
20000cba:	d004      	beq.n	20000cc6 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20000cbc:	230f      	movs	r3, #15
20000cbe:	18fb      	adds	r3, r7, r3
20000cc0:	2201      	movs	r2, #1
20000cc2:	701a      	strb	r2, [r3, #0]
20000cc4:	e003      	b.n	20000cce <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20000cc6:	230f      	movs	r3, #15
20000cc8:	18fb      	adds	r3, r7, r3
20000cca:	2200      	movs	r2, #0
20000ccc:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20000cce:	230f      	movs	r3, #15
20000cd0:	18fb      	adds	r3, r7, r3
20000cd2:	781b      	ldrb	r3, [r3, #0]
}
20000cd4:	0018      	movs	r0, r3
20000cd6:	46bd      	mov	sp, r7
20000cd8:	b004      	add	sp, #16
20000cda:	bd80      	pop	{r7, pc}
20000cdc:	40023800 	andmi	r3, r2, r0, lsl #16

20000ce0 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20000ce0:	b580      	push	{r7, lr}
20000ce2:	b082      	sub	sp, #8
20000ce4:	af00      	add	r7, sp, #0
20000ce6:	0002      	movs	r2, r0
20000ce8:	1dfb      	adds	r3, r7, #7
20000cea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20000cec:	4a03      	ldr	r2, [pc, #12]	; (20000cfc <RCC_ClearITPendingBit+0x1c>)
20000cee:	1dfb      	adds	r3, r7, #7
20000cf0:	781b      	ldrb	r3, [r3, #0]
20000cf2:	7013      	strb	r3, [r2, #0]
}
20000cf4:	46c0      	nop			; (mov r8, r8)
20000cf6:	46bd      	mov	sp, r7
20000cf8:	b002      	add	sp, #8
20000cfa:	bd80      	pop	{r7, pc}
20000cfc:	4002380e 	andmi	r3, r2, lr, lsl #16

20000d00 <main>:



void main(void)
{
20000d00:	b580      	push	{r7, lr}
20000d02:	b082      	sub	sp, #8
20000d04:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef init = {GPIO_Pin_0, GPIO_Mode_OUT, GPIO_Low_Speed, GPIO_OType_PP, GPIO_PuPd_DOWN};
20000d06:	003b      	movs	r3, r7
20000d08:	4a06      	ldr	r2, [pc, #24]	; (20000d24 <main+0x24>)
20000d0a:	ca03      	ldmia	r2!, {r0, r1}
20000d0c:	c303      	stmia	r3!, {r0, r1}
	GPIO_Init(GPIOA, &init);
20000d0e:	003b      	movs	r3, r7
20000d10:	4a05      	ldr	r2, [pc, #20]	; (20000d28 <main+0x28>)
20000d12:	0019      	movs	r1, r3
20000d14:	0010      	movs	r0, r2
20000d16:	f000 f8c1 	bl	20000e9c <GPIO_Init>
	
	
}
20000d1a:	46c0      	nop			; (mov r8, r8)
20000d1c:	46bd      	mov	sp, r7
20000d1e:	b002      	add	sp, #8
20000d20:	bd80      	pop	{r7, pc}
20000d22:	46c0      	nop			; (mov r8, r8)
20000d24:	20001364 	andcs	r1, r0, r4, ror #6
20000d28:	40020000 	andmi	r0, r2, r0

20000d2c <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
20000d2c:	b580      	push	{r7, lr}
20000d2e:	b082      	sub	sp, #8
20000d30:	af00      	add	r7, sp, #0
20000d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
20000d34:	687b      	ldr	r3, [r7, #4]
20000d36:	4a4e      	ldr	r2, [pc, #312]	; (20000e70 <GPIO_DeInit+0x144>)
20000d38:	4293      	cmp	r3, r2
20000d3a:	d108      	bne.n	20000d4e <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000d3c:	2101      	movs	r1, #1
20000d3e:	2001      	movs	r0, #1
20000d40:	f7ff fdd6 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20000d44:	2100      	movs	r1, #0
20000d46:	2001      	movs	r0, #1
20000d48:	f7ff fdd2 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
20000d4c:	e08c      	b.n	20000e68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
20000d4e:	687b      	ldr	r3, [r7, #4]
20000d50:	4a48      	ldr	r2, [pc, #288]	; (20000e74 <GPIO_DeInit+0x148>)
20000d52:	4293      	cmp	r3, r2
20000d54:	d108      	bne.n	20000d68 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20000d56:	2101      	movs	r1, #1
20000d58:	2002      	movs	r0, #2
20000d5a:	f7ff fdc9 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
20000d5e:	2100      	movs	r1, #0
20000d60:	2002      	movs	r0, #2
20000d62:	f7ff fdc5 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000d66:	e07f      	b.n	20000e68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20000d68:	687b      	ldr	r3, [r7, #4]
20000d6a:	4a43      	ldr	r2, [pc, #268]	; (20000e78 <GPIO_DeInit+0x14c>)
20000d6c:	4293      	cmp	r3, r2
20000d6e:	d108      	bne.n	20000d82 <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20000d70:	2101      	movs	r1, #1
20000d72:	2004      	movs	r0, #4
20000d74:	f7ff fdbc 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20000d78:	2100      	movs	r1, #0
20000d7a:	2004      	movs	r0, #4
20000d7c:	f7ff fdb8 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000d80:	e072      	b.n	20000e68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
20000d82:	687b      	ldr	r3, [r7, #4]
20000d84:	4a3d      	ldr	r2, [pc, #244]	; (20000e7c <GPIO_DeInit+0x150>)
20000d86:	4293      	cmp	r3, r2
20000d88:	d108      	bne.n	20000d9c <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20000d8a:	2101      	movs	r1, #1
20000d8c:	2008      	movs	r0, #8
20000d8e:	f7ff fdaf 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
20000d92:	2100      	movs	r1, #0
20000d94:	2008      	movs	r0, #8
20000d96:	f7ff fdab 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000d9a:	e065      	b.n	20000e68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
20000d9c:	687b      	ldr	r3, [r7, #4]
20000d9e:	4a38      	ldr	r2, [pc, #224]	; (20000e80 <GPIO_DeInit+0x154>)
20000da0:	4293      	cmp	r3, r2
20000da2:	d108      	bne.n	20000db6 <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000da4:	2101      	movs	r1, #1
20000da6:	2010      	movs	r0, #16
20000da8:	f7ff fda2 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20000dac:	2100      	movs	r1, #0
20000dae:	2010      	movs	r0, #16
20000db0:	f7ff fd9e 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000db4:	e058      	b.n	20000e68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
20000db6:	687b      	ldr	r3, [r7, #4]
20000db8:	4a32      	ldr	r2, [pc, #200]	; (20000e84 <GPIO_DeInit+0x158>)
20000dba:	4293      	cmp	r3, r2
20000dbc:	d108      	bne.n	20000dd0 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
20000dbe:	2101      	movs	r1, #1
20000dc0:	2020      	movs	r0, #32
20000dc2:	f7ff fd95 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20000dc6:	2100      	movs	r1, #0
20000dc8:	2020      	movs	r0, #32
20000dca:	f7ff fd91 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000dce:	e04b      	b.n	20000e68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20000dd0:	687b      	ldr	r3, [r7, #4]
20000dd2:	4a2d      	ldr	r2, [pc, #180]	; (20000e88 <GPIO_DeInit+0x15c>)
20000dd4:	4293      	cmp	r3, r2
20000dd6:	d108      	bne.n	20000dea <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20000dd8:	2101      	movs	r1, #1
20000dda:	2040      	movs	r0, #64	; 0x40
20000ddc:	f7ff fd88 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20000de0:	2100      	movs	r1, #0
20000de2:	2040      	movs	r0, #64	; 0x40
20000de4:	f7ff fd84 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000de8:	e03e      	b.n	20000e68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
20000dea:	687b      	ldr	r3, [r7, #4]
20000dec:	4a27      	ldr	r2, [pc, #156]	; (20000e8c <GPIO_DeInit+0x160>)
20000dee:	4293      	cmp	r3, r2
20000df0:	d108      	bne.n	20000e04 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
20000df2:	2101      	movs	r1, #1
20000df4:	2080      	movs	r0, #128	; 0x80
20000df6:	f7ff fd7b 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
20000dfa:	2100      	movs	r1, #0
20000dfc:	2080      	movs	r0, #128	; 0x80
20000dfe:	f7ff fd77 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000e02:	e031      	b.n	20000e68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
20000e04:	687b      	ldr	r3, [r7, #4]
20000e06:	4a22      	ldr	r2, [pc, #136]	; (20000e90 <GPIO_DeInit+0x164>)
20000e08:	4293      	cmp	r3, r2
20000e0a:	d10c      	bne.n	20000e26 <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
20000e0c:	2380      	movs	r3, #128	; 0x80
20000e0e:	005b      	lsls	r3, r3, #1
20000e10:	2101      	movs	r1, #1
20000e12:	0018      	movs	r0, r3
20000e14:	f7ff fd6c 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20000e18:	2380      	movs	r3, #128	; 0x80
20000e1a:	005b      	lsls	r3, r3, #1
20000e1c:	2100      	movs	r1, #0
20000e1e:	0018      	movs	r0, r3
20000e20:	f7ff fd66 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000e24:	e020      	b.n	20000e68 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
20000e26:	687b      	ldr	r3, [r7, #4]
20000e28:	4a1a      	ldr	r2, [pc, #104]	; (20000e94 <GPIO_DeInit+0x168>)
20000e2a:	4293      	cmp	r3, r2
20000e2c:	d10c      	bne.n	20000e48 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
20000e2e:	2380      	movs	r3, #128	; 0x80
20000e30:	009b      	lsls	r3, r3, #2
20000e32:	2101      	movs	r1, #1
20000e34:	0018      	movs	r0, r3
20000e36:	f7ff fd5b 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
20000e3a:	2380      	movs	r3, #128	; 0x80
20000e3c:	009b      	lsls	r3, r3, #2
20000e3e:	2100      	movs	r1, #0
20000e40:	0018      	movs	r0, r3
20000e42:	f7ff fd55 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000e46:	e00f      	b.n	20000e68 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20000e48:	687b      	ldr	r3, [r7, #4]
20000e4a:	4a13      	ldr	r2, [pc, #76]	; (20000e98 <GPIO_DeInit+0x16c>)
20000e4c:	4293      	cmp	r3, r2
20000e4e:	d10b      	bne.n	20000e68 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
20000e50:	2380      	movs	r3, #128	; 0x80
20000e52:	00db      	lsls	r3, r3, #3
20000e54:	2101      	movs	r1, #1
20000e56:	0018      	movs	r0, r3
20000e58:	f7ff fd4a 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20000e5c:	2380      	movs	r3, #128	; 0x80
20000e5e:	00db      	lsls	r3, r3, #3
20000e60:	2100      	movs	r1, #0
20000e62:	0018      	movs	r0, r3
20000e64:	f7ff fd44 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000e68:	46c0      	nop			; (mov r8, r8)
20000e6a:	46bd      	mov	sp, r7
20000e6c:	b002      	add	sp, #8
20000e6e:	bd80      	pop	{r7, pc}
20000e70:	40020000 	andmi	r0, r2, r0
20000e74:	40020400 	andmi	r0, r2, r0, lsl #8
20000e78:	40020800 	andmi	r0, r2, r0, lsl #16
20000e7c:	40020c00 	andmi	r0, r2, r0, lsl #24
20000e80:	40021000 	andmi	r1, r2, r0
20000e84:	40021400 	andmi	r1, r2, r0, lsl #8
20000e88:	40021800 	andmi	r1, r2, r0, lsl #16
20000e8c:	40021c00 	andmi	r1, r2, r0, lsl #24
20000e90:	40022000 	andmi	r2, r2, r0
20000e94:	40022400 	andmi	r2, r2, r0, lsl #8
20000e98:	40022800 	andmi	r2, r2, r0, lsl #16

20000e9c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
20000e9c:	b580      	push	{r7, lr}
20000e9e:	b086      	sub	sp, #24
20000ea0:	af00      	add	r7, sp, #0
20000ea2:	6078      	str	r0, [r7, #4]
20000ea4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
20000ea6:	2300      	movs	r3, #0
20000ea8:	617b      	str	r3, [r7, #20]
20000eaa:	2300      	movs	r3, #0
20000eac:	613b      	str	r3, [r7, #16]
20000eae:	2300      	movs	r3, #0
20000eb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20000eb2:	2300      	movs	r3, #0
20000eb4:	617b      	str	r3, [r7, #20]
20000eb6:	e076      	b.n	20000fa6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20000eb8:	2201      	movs	r2, #1
20000eba:	697b      	ldr	r3, [r7, #20]
20000ebc:	409a      	lsls	r2, r3
20000ebe:	0013      	movs	r3, r2
20000ec0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
20000ec2:	683b      	ldr	r3, [r7, #0]
20000ec4:	681a      	ldr	r2, [r3, #0]
20000ec6:	693b      	ldr	r3, [r7, #16]
20000ec8:	4013      	ands	r3, r2
20000eca:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20000ecc:	68fa      	ldr	r2, [r7, #12]
20000ece:	693b      	ldr	r3, [r7, #16]
20000ed0:	429a      	cmp	r2, r3
20000ed2:	d165      	bne.n	20000fa0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
20000ed4:	687b      	ldr	r3, [r7, #4]
20000ed6:	681b      	ldr	r3, [r3, #0]
20000ed8:	697a      	ldr	r2, [r7, #20]
20000eda:	0052      	lsls	r2, r2, #1
20000edc:	2103      	movs	r1, #3
20000ede:	4091      	lsls	r1, r2
20000ee0:	000a      	movs	r2, r1
20000ee2:	43d2      	mvns	r2, r2
20000ee4:	401a      	ands	r2, r3
20000ee6:	687b      	ldr	r3, [r7, #4]
20000ee8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
20000eea:	687b      	ldr	r3, [r7, #4]
20000eec:	681a      	ldr	r2, [r3, #0]
20000eee:	683b      	ldr	r3, [r7, #0]
20000ef0:	791b      	ldrb	r3, [r3, #4]
20000ef2:	0019      	movs	r1, r3
20000ef4:	697b      	ldr	r3, [r7, #20]
20000ef6:	005b      	lsls	r3, r3, #1
20000ef8:	4099      	lsls	r1, r3
20000efa:	000b      	movs	r3, r1
20000efc:	431a      	orrs	r2, r3
20000efe:	687b      	ldr	r3, [r7, #4]
20000f00:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
20000f02:	683b      	ldr	r3, [r7, #0]
20000f04:	791b      	ldrb	r3, [r3, #4]
20000f06:	2b01      	cmp	r3, #1
20000f08:	d003      	beq.n	20000f12 <GPIO_Init+0x76>
20000f0a:	683b      	ldr	r3, [r7, #0]
20000f0c:	791b      	ldrb	r3, [r3, #4]
20000f0e:	2b02      	cmp	r3, #2
20000f10:	d12e      	bne.n	20000f70 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
20000f12:	687b      	ldr	r3, [r7, #4]
20000f14:	689b      	ldr	r3, [r3, #8]
20000f16:	697a      	ldr	r2, [r7, #20]
20000f18:	0052      	lsls	r2, r2, #1
20000f1a:	2103      	movs	r1, #3
20000f1c:	4091      	lsls	r1, r2
20000f1e:	000a      	movs	r2, r1
20000f20:	43d2      	mvns	r2, r2
20000f22:	401a      	ands	r2, r3
20000f24:	687b      	ldr	r3, [r7, #4]
20000f26:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
20000f28:	687b      	ldr	r3, [r7, #4]
20000f2a:	689a      	ldr	r2, [r3, #8]
20000f2c:	683b      	ldr	r3, [r7, #0]
20000f2e:	795b      	ldrb	r3, [r3, #5]
20000f30:	0019      	movs	r1, r3
20000f32:	697b      	ldr	r3, [r7, #20]
20000f34:	005b      	lsls	r3, r3, #1
20000f36:	4099      	lsls	r1, r3
20000f38:	000b      	movs	r3, r1
20000f3a:	431a      	orrs	r2, r3
20000f3c:	687b      	ldr	r3, [r7, #4]
20000f3e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
20000f40:	687b      	ldr	r3, [r7, #4]
20000f42:	685b      	ldr	r3, [r3, #4]
20000f44:	697a      	ldr	r2, [r7, #20]
20000f46:	b292      	uxth	r2, r2
20000f48:	0011      	movs	r1, r2
20000f4a:	2201      	movs	r2, #1
20000f4c:	408a      	lsls	r2, r1
20000f4e:	43d2      	mvns	r2, r2
20000f50:	401a      	ands	r2, r3
20000f52:	687b      	ldr	r3, [r7, #4]
20000f54:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
20000f56:	687b      	ldr	r3, [r7, #4]
20000f58:	685b      	ldr	r3, [r3, #4]
20000f5a:	683a      	ldr	r2, [r7, #0]
20000f5c:	7992      	ldrb	r2, [r2, #6]
20000f5e:	0011      	movs	r1, r2
20000f60:	697a      	ldr	r2, [r7, #20]
20000f62:	b292      	uxth	r2, r2
20000f64:	4091      	lsls	r1, r2
20000f66:	000a      	movs	r2, r1
20000f68:	b292      	uxth	r2, r2
20000f6a:	431a      	orrs	r2, r3
20000f6c:	687b      	ldr	r3, [r7, #4]
20000f6e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20000f70:	687b      	ldr	r3, [r7, #4]
20000f72:	68db      	ldr	r3, [r3, #12]
20000f74:	697a      	ldr	r2, [r7, #20]
20000f76:	b292      	uxth	r2, r2
20000f78:	0052      	lsls	r2, r2, #1
20000f7a:	2103      	movs	r1, #3
20000f7c:	4091      	lsls	r1, r2
20000f7e:	000a      	movs	r2, r1
20000f80:	43d2      	mvns	r2, r2
20000f82:	401a      	ands	r2, r3
20000f84:	687b      	ldr	r3, [r7, #4]
20000f86:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20000f88:	687b      	ldr	r3, [r7, #4]
20000f8a:	68da      	ldr	r2, [r3, #12]
20000f8c:	683b      	ldr	r3, [r7, #0]
20000f8e:	79db      	ldrb	r3, [r3, #7]
20000f90:	0019      	movs	r1, r3
20000f92:	697b      	ldr	r3, [r7, #20]
20000f94:	005b      	lsls	r3, r3, #1
20000f96:	4099      	lsls	r1, r3
20000f98:	000b      	movs	r3, r1
20000f9a:	431a      	orrs	r2, r3
20000f9c:	687b      	ldr	r3, [r7, #4]
20000f9e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20000fa0:	697b      	ldr	r3, [r7, #20]
20000fa2:	3301      	adds	r3, #1
20000fa4:	617b      	str	r3, [r7, #20]
20000fa6:	697b      	ldr	r3, [r7, #20]
20000fa8:	2b0f      	cmp	r3, #15
20000faa:	d985      	bls.n	20000eb8 <GPIO_Init+0x1c>
    }
  }
}
20000fac:	46c0      	nop			; (mov r8, r8)
20000fae:	46bd      	mov	sp, r7
20000fb0:	b006      	add	sp, #24
20000fb2:	bd80      	pop	{r7, pc}

20000fb4 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20000fb4:	b580      	push	{r7, lr}
20000fb6:	b082      	sub	sp, #8
20000fb8:	af00      	add	r7, sp, #0
20000fba:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
20000fbc:	687b      	ldr	r3, [r7, #4]
20000fbe:	4a09      	ldr	r2, [pc, #36]	; (20000fe4 <GPIO_StructInit+0x30>)
20000fc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
20000fc2:	687b      	ldr	r3, [r7, #4]
20000fc4:	2200      	movs	r2, #0
20000fc6:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20000fc8:	687b      	ldr	r3, [r7, #4]
20000fca:	2200      	movs	r2, #0
20000fcc:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
20000fce:	687b      	ldr	r3, [r7, #4]
20000fd0:	2200      	movs	r2, #0
20000fd2:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
20000fd4:	687b      	ldr	r3, [r7, #4]
20000fd6:	2200      	movs	r2, #0
20000fd8:	71da      	strb	r2, [r3, #7]
}
20000fda:	46c0      	nop			; (mov r8, r8)
20000fdc:	46bd      	mov	sp, r7
20000fde:	b002      	add	sp, #8
20000fe0:	bd80      	pop	{r7, pc}
20000fe2:	46c0      	nop			; (mov r8, r8)
20000fe4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20000fe8 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20000fe8:	b580      	push	{r7, lr}
20000fea:	b084      	sub	sp, #16
20000fec:	af00      	add	r7, sp, #0
20000fee:	6078      	str	r0, [r7, #4]
20000ff0:	000a      	movs	r2, r1
20000ff2:	1cbb      	adds	r3, r7, #2
20000ff4:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
20000ff6:	2380      	movs	r3, #128	; 0x80
20000ff8:	025b      	lsls	r3, r3, #9
20000ffa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
20000ffc:	1cbb      	adds	r3, r7, #2
20000ffe:	881a      	ldrh	r2, [r3, #0]
20001000:	68fb      	ldr	r3, [r7, #12]
20001002:	4313      	orrs	r3, r2
20001004:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001006:	68fa      	ldr	r2, [r7, #12]
20001008:	687b      	ldr	r3, [r7, #4]
2000100a:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
2000100c:	1cbb      	adds	r3, r7, #2
2000100e:	881a      	ldrh	r2, [r3, #0]
20001010:	687b      	ldr	r3, [r7, #4]
20001012:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001014:	68fa      	ldr	r2, [r7, #12]
20001016:	687b      	ldr	r3, [r7, #4]
20001018:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
2000101a:	687b      	ldr	r3, [r7, #4]
2000101c:	69db      	ldr	r3, [r3, #28]
2000101e:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20001020:	687b      	ldr	r3, [r7, #4]
20001022:	69db      	ldr	r3, [r3, #28]
20001024:	60fb      	str	r3, [r7, #12]
}
20001026:	46c0      	nop			; (mov r8, r8)
20001028:	46bd      	mov	sp, r7
2000102a:	b004      	add	sp, #16
2000102c:	bd80      	pop	{r7, pc}

2000102e <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000102e:	b580      	push	{r7, lr}
20001030:	b084      	sub	sp, #16
20001032:	af00      	add	r7, sp, #0
20001034:	6078      	str	r0, [r7, #4]
20001036:	000a      	movs	r2, r1
20001038:	1cbb      	adds	r3, r7, #2
2000103a:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
2000103c:	230f      	movs	r3, #15
2000103e:	18fb      	adds	r3, r7, r3
20001040:	2200      	movs	r2, #0
20001042:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20001044:	687b      	ldr	r3, [r7, #4]
20001046:	691b      	ldr	r3, [r3, #16]
20001048:	1cba      	adds	r2, r7, #2
2000104a:	8812      	ldrh	r2, [r2, #0]
2000104c:	4013      	ands	r3, r2
2000104e:	d004      	beq.n	2000105a <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001050:	230f      	movs	r3, #15
20001052:	18fb      	adds	r3, r7, r3
20001054:	2201      	movs	r2, #1
20001056:	701a      	strb	r2, [r3, #0]
20001058:	e003      	b.n	20001062 <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
2000105a:	230f      	movs	r3, #15
2000105c:	18fb      	adds	r3, r7, r3
2000105e:	2200      	movs	r2, #0
20001060:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20001062:	230f      	movs	r3, #15
20001064:	18fb      	adds	r3, r7, r3
20001066:	781b      	ldrb	r3, [r3, #0]
}
20001068:	0018      	movs	r0, r3
2000106a:	46bd      	mov	sp, r7
2000106c:	b004      	add	sp, #16
2000106e:	bd80      	pop	{r7, pc}

20001070 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20001070:	b580      	push	{r7, lr}
20001072:	b082      	sub	sp, #8
20001074:	af00      	add	r7, sp, #0
20001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20001078:	687b      	ldr	r3, [r7, #4]
2000107a:	691b      	ldr	r3, [r3, #16]
2000107c:	b29b      	uxth	r3, r3
}
2000107e:	0018      	movs	r0, r3
20001080:	46bd      	mov	sp, r7
20001082:	b002      	add	sp, #8
20001084:	bd80      	pop	{r7, pc}

20001086 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001086:	b580      	push	{r7, lr}
20001088:	b084      	sub	sp, #16
2000108a:	af00      	add	r7, sp, #0
2000108c:	6078      	str	r0, [r7, #4]
2000108e:	000a      	movs	r2, r1
20001090:	1cbb      	adds	r3, r7, #2
20001092:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20001094:	230f      	movs	r3, #15
20001096:	18fb      	adds	r3, r7, r3
20001098:	2200      	movs	r2, #0
2000109a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
2000109c:	687b      	ldr	r3, [r7, #4]
2000109e:	695b      	ldr	r3, [r3, #20]
200010a0:	1cba      	adds	r2, r7, #2
200010a2:	8812      	ldrh	r2, [r2, #0]
200010a4:	4013      	ands	r3, r2
200010a6:	d004      	beq.n	200010b2 <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
200010a8:	230f      	movs	r3, #15
200010aa:	18fb      	adds	r3, r7, r3
200010ac:	2201      	movs	r2, #1
200010ae:	701a      	strb	r2, [r3, #0]
200010b0:	e003      	b.n	200010ba <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
200010b2:	230f      	movs	r3, #15
200010b4:	18fb      	adds	r3, r7, r3
200010b6:	2200      	movs	r2, #0
200010b8:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200010ba:	230f      	movs	r3, #15
200010bc:	18fb      	adds	r3, r7, r3
200010be:	781b      	ldrb	r3, [r3, #0]
}
200010c0:	0018      	movs	r0, r3
200010c2:	46bd      	mov	sp, r7
200010c4:	b004      	add	sp, #16
200010c6:	bd80      	pop	{r7, pc}

200010c8 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
200010c8:	b580      	push	{r7, lr}
200010ca:	b082      	sub	sp, #8
200010cc:	af00      	add	r7, sp, #0
200010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
200010d0:	687b      	ldr	r3, [r7, #4]
200010d2:	695b      	ldr	r3, [r3, #20]
200010d4:	b29b      	uxth	r3, r3
}
200010d6:	0018      	movs	r0, r3
200010d8:	46bd      	mov	sp, r7
200010da:	b002      	add	sp, #8
200010dc:	bd80      	pop	{r7, pc}

200010de <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200010de:	b580      	push	{r7, lr}
200010e0:	b082      	sub	sp, #8
200010e2:	af00      	add	r7, sp, #0
200010e4:	6078      	str	r0, [r7, #4]
200010e6:	000a      	movs	r2, r1
200010e8:	1cbb      	adds	r3, r7, #2
200010ea:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
200010ec:	687b      	ldr	r3, [r7, #4]
200010ee:	1cba      	adds	r2, r7, #2
200010f0:	8812      	ldrh	r2, [r2, #0]
200010f2:	831a      	strh	r2, [r3, #24]
}
200010f4:	46c0      	nop			; (mov r8, r8)
200010f6:	46bd      	mov	sp, r7
200010f8:	b002      	add	sp, #8
200010fa:	bd80      	pop	{r7, pc}

200010fc <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200010fc:	b580      	push	{r7, lr}
200010fe:	b082      	sub	sp, #8
20001100:	af00      	add	r7, sp, #0
20001102:	6078      	str	r0, [r7, #4]
20001104:	000a      	movs	r2, r1
20001106:	1cbb      	adds	r3, r7, #2
20001108:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
2000110a:	687b      	ldr	r3, [r7, #4]
2000110c:	1cba      	adds	r2, r7, #2
2000110e:	8812      	ldrh	r2, [r2, #0]
20001110:	835a      	strh	r2, [r3, #26]
}
20001112:	46c0      	nop			; (mov r8, r8)
20001114:	46bd      	mov	sp, r7
20001116:	b002      	add	sp, #8
20001118:	bd80      	pop	{r7, pc}

2000111a <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
2000111a:	b580      	push	{r7, lr}
2000111c:	b082      	sub	sp, #8
2000111e:	af00      	add	r7, sp, #0
20001120:	6078      	str	r0, [r7, #4]
20001122:	0008      	movs	r0, r1
20001124:	0011      	movs	r1, r2
20001126:	1cbb      	adds	r3, r7, #2
20001128:	1c02      	adds	r2, r0, #0
2000112a:	801a      	strh	r2, [r3, #0]
2000112c:	1c7b      	adds	r3, r7, #1
2000112e:	1c0a      	adds	r2, r1, #0
20001130:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
20001132:	1c7b      	adds	r3, r7, #1
20001134:	781b      	ldrb	r3, [r3, #0]
20001136:	2b00      	cmp	r3, #0
20001138:	d004      	beq.n	20001144 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
2000113a:	687b      	ldr	r3, [r7, #4]
2000113c:	1cba      	adds	r2, r7, #2
2000113e:	8812      	ldrh	r2, [r2, #0]
20001140:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
20001142:	e003      	b.n	2000114c <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
20001144:	687b      	ldr	r3, [r7, #4]
20001146:	1cba      	adds	r2, r7, #2
20001148:	8812      	ldrh	r2, [r2, #0]
2000114a:	835a      	strh	r2, [r3, #26]
}
2000114c:	46c0      	nop			; (mov r8, r8)
2000114e:	46bd      	mov	sp, r7
20001150:	b002      	add	sp, #8
20001152:	bd80      	pop	{r7, pc}

20001154 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
20001154:	b580      	push	{r7, lr}
20001156:	b082      	sub	sp, #8
20001158:	af00      	add	r7, sp, #0
2000115a:	6078      	str	r0, [r7, #4]
2000115c:	000a      	movs	r2, r1
2000115e:	1cbb      	adds	r3, r7, #2
20001160:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
20001162:	1cbb      	adds	r3, r7, #2
20001164:	881a      	ldrh	r2, [r3, #0]
20001166:	687b      	ldr	r3, [r7, #4]
20001168:	615a      	str	r2, [r3, #20]
}
2000116a:	46c0      	nop			; (mov r8, r8)
2000116c:	46bd      	mov	sp, r7
2000116e:	b002      	add	sp, #8
20001170:	bd80      	pop	{r7, pc}

20001172 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001172:	b580      	push	{r7, lr}
20001174:	b082      	sub	sp, #8
20001176:	af00      	add	r7, sp, #0
20001178:	6078      	str	r0, [r7, #4]
2000117a:	000a      	movs	r2, r1
2000117c:	1cbb      	adds	r3, r7, #2
2000117e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20001180:	687b      	ldr	r3, [r7, #4]
20001182:	695a      	ldr	r2, [r3, #20]
20001184:	1cbb      	adds	r3, r7, #2
20001186:	881b      	ldrh	r3, [r3, #0]
20001188:	405a      	eors	r2, r3
2000118a:	687b      	ldr	r3, [r7, #4]
2000118c:	615a      	str	r2, [r3, #20]
}
2000118e:	46c0      	nop			; (mov r8, r8)
20001190:	46bd      	mov	sp, r7
20001192:	b002      	add	sp, #8
20001194:	bd80      	pop	{r7, pc}

20001196 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
20001196:	b580      	push	{r7, lr}
20001198:	b084      	sub	sp, #16
2000119a:	af00      	add	r7, sp, #0
2000119c:	6078      	str	r0, [r7, #4]
2000119e:	0008      	movs	r0, r1
200011a0:	0011      	movs	r1, r2
200011a2:	1cbb      	adds	r3, r7, #2
200011a4:	1c02      	adds	r2, r0, #0
200011a6:	801a      	strh	r2, [r3, #0]
200011a8:	1c7b      	adds	r3, r7, #1
200011aa:	1c0a      	adds	r2, r1, #0
200011ac:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
200011ae:	2300      	movs	r3, #0
200011b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
200011b2:	2300      	movs	r3, #0
200011b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
200011b6:	1c7b      	adds	r3, r7, #1
200011b8:	781a      	ldrb	r2, [r3, #0]
200011ba:	1cbb      	adds	r3, r7, #2
200011bc:	881b      	ldrh	r3, [r3, #0]
200011be:	2107      	movs	r1, #7
200011c0:	400b      	ands	r3, r1
200011c2:	009b      	lsls	r3, r3, #2
200011c4:	409a      	lsls	r2, r3
200011c6:	0013      	movs	r3, r2
200011c8:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
200011ca:	1cbb      	adds	r3, r7, #2
200011cc:	881b      	ldrh	r3, [r3, #0]
200011ce:	08db      	lsrs	r3, r3, #3
200011d0:	b29b      	uxth	r3, r3
200011d2:	001a      	movs	r2, r3
200011d4:	687b      	ldr	r3, [r7, #4]
200011d6:	3208      	adds	r2, #8
200011d8:	0092      	lsls	r2, r2, #2
200011da:	58d3      	ldr	r3, [r2, r3]
200011dc:	1cba      	adds	r2, r7, #2
200011de:	8812      	ldrh	r2, [r2, #0]
200011e0:	2107      	movs	r1, #7
200011e2:	400a      	ands	r2, r1
200011e4:	0092      	lsls	r2, r2, #2
200011e6:	210f      	movs	r1, #15
200011e8:	4091      	lsls	r1, r2
200011ea:	000a      	movs	r2, r1
200011ec:	43d2      	mvns	r2, r2
200011ee:	1cb9      	adds	r1, r7, #2
200011f0:	8809      	ldrh	r1, [r1, #0]
200011f2:	08c9      	lsrs	r1, r1, #3
200011f4:	b289      	uxth	r1, r1
200011f6:	0008      	movs	r0, r1
200011f8:	401a      	ands	r2, r3
200011fa:	0011      	movs	r1, r2
200011fc:	687b      	ldr	r3, [r7, #4]
200011fe:	0002      	movs	r2, r0
20001200:	3208      	adds	r2, #8
20001202:	0092      	lsls	r2, r2, #2
20001204:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
20001206:	1cbb      	adds	r3, r7, #2
20001208:	881b      	ldrh	r3, [r3, #0]
2000120a:	08db      	lsrs	r3, r3, #3
2000120c:	b29b      	uxth	r3, r3
2000120e:	001a      	movs	r2, r3
20001210:	687b      	ldr	r3, [r7, #4]
20001212:	3208      	adds	r2, #8
20001214:	0092      	lsls	r2, r2, #2
20001216:	58d3      	ldr	r3, [r2, r3]
20001218:	68fa      	ldr	r2, [r7, #12]
2000121a:	4313      	orrs	r3, r2
2000121c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
2000121e:	1cbb      	adds	r3, r7, #2
20001220:	881b      	ldrh	r3, [r3, #0]
20001222:	08db      	lsrs	r3, r3, #3
20001224:	b29b      	uxth	r3, r3
20001226:	001a      	movs	r2, r3
20001228:	687b      	ldr	r3, [r7, #4]
2000122a:	3208      	adds	r2, #8
2000122c:	0092      	lsls	r2, r2, #2
2000122e:	68b9      	ldr	r1, [r7, #8]
20001230:	50d1      	str	r1, [r2, r3]
}
20001232:	46c0      	nop			; (mov r8, r8)
20001234:	46bd      	mov	sp, r7
20001236:	b004      	add	sp, #16
20001238:	bd80      	pop	{r7, pc}
2000123a:	46c0      	nop			; (mov r8, r8)

2000123c <__udivsi3>:
2000123c:	2200      	movs	r2, #0
2000123e:	0843      	lsrs	r3, r0, #1
20001240:	428b      	cmp	r3, r1
20001242:	d374      	bcc.n	2000132e <__udivsi3+0xf2>
20001244:	0903      	lsrs	r3, r0, #4
20001246:	428b      	cmp	r3, r1
20001248:	d35f      	bcc.n	2000130a <__udivsi3+0xce>
2000124a:	0a03      	lsrs	r3, r0, #8
2000124c:	428b      	cmp	r3, r1
2000124e:	d344      	bcc.n	200012da <__udivsi3+0x9e>
20001250:	0b03      	lsrs	r3, r0, #12
20001252:	428b      	cmp	r3, r1
20001254:	d328      	bcc.n	200012a8 <__udivsi3+0x6c>
20001256:	0c03      	lsrs	r3, r0, #16
20001258:	428b      	cmp	r3, r1
2000125a:	d30d      	bcc.n	20001278 <__udivsi3+0x3c>
2000125c:	22ff      	movs	r2, #255	; 0xff
2000125e:	0209      	lsls	r1, r1, #8
20001260:	ba12      	rev	r2, r2
20001262:	0c03      	lsrs	r3, r0, #16
20001264:	428b      	cmp	r3, r1
20001266:	d302      	bcc.n	2000126e <__udivsi3+0x32>
20001268:	1212      	asrs	r2, r2, #8
2000126a:	0209      	lsls	r1, r1, #8
2000126c:	d065      	beq.n	2000133a <__udivsi3+0xfe>
2000126e:	0b03      	lsrs	r3, r0, #12
20001270:	428b      	cmp	r3, r1
20001272:	d319      	bcc.n	200012a8 <__udivsi3+0x6c>
20001274:	e000      	b.n	20001278 <__udivsi3+0x3c>
20001276:	0a09      	lsrs	r1, r1, #8
20001278:	0bc3      	lsrs	r3, r0, #15
2000127a:	428b      	cmp	r3, r1
2000127c:	d301      	bcc.n	20001282 <__udivsi3+0x46>
2000127e:	03cb      	lsls	r3, r1, #15
20001280:	1ac0      	subs	r0, r0, r3
20001282:	4152      	adcs	r2, r2
20001284:	0b83      	lsrs	r3, r0, #14
20001286:	428b      	cmp	r3, r1
20001288:	d301      	bcc.n	2000128e <__udivsi3+0x52>
2000128a:	038b      	lsls	r3, r1, #14
2000128c:	1ac0      	subs	r0, r0, r3
2000128e:	4152      	adcs	r2, r2
20001290:	0b43      	lsrs	r3, r0, #13
20001292:	428b      	cmp	r3, r1
20001294:	d301      	bcc.n	2000129a <__udivsi3+0x5e>
20001296:	034b      	lsls	r3, r1, #13
20001298:	1ac0      	subs	r0, r0, r3
2000129a:	4152      	adcs	r2, r2
2000129c:	0b03      	lsrs	r3, r0, #12
2000129e:	428b      	cmp	r3, r1
200012a0:	d301      	bcc.n	200012a6 <__udivsi3+0x6a>
200012a2:	030b      	lsls	r3, r1, #12
200012a4:	1ac0      	subs	r0, r0, r3
200012a6:	4152      	adcs	r2, r2
200012a8:	0ac3      	lsrs	r3, r0, #11
200012aa:	428b      	cmp	r3, r1
200012ac:	d301      	bcc.n	200012b2 <__udivsi3+0x76>
200012ae:	02cb      	lsls	r3, r1, #11
200012b0:	1ac0      	subs	r0, r0, r3
200012b2:	4152      	adcs	r2, r2
200012b4:	0a83      	lsrs	r3, r0, #10
200012b6:	428b      	cmp	r3, r1
200012b8:	d301      	bcc.n	200012be <__udivsi3+0x82>
200012ba:	028b      	lsls	r3, r1, #10
200012bc:	1ac0      	subs	r0, r0, r3
200012be:	4152      	adcs	r2, r2
200012c0:	0a43      	lsrs	r3, r0, #9
200012c2:	428b      	cmp	r3, r1
200012c4:	d301      	bcc.n	200012ca <__udivsi3+0x8e>
200012c6:	024b      	lsls	r3, r1, #9
200012c8:	1ac0      	subs	r0, r0, r3
200012ca:	4152      	adcs	r2, r2
200012cc:	0a03      	lsrs	r3, r0, #8
200012ce:	428b      	cmp	r3, r1
200012d0:	d301      	bcc.n	200012d6 <__udivsi3+0x9a>
200012d2:	020b      	lsls	r3, r1, #8
200012d4:	1ac0      	subs	r0, r0, r3
200012d6:	4152      	adcs	r2, r2
200012d8:	d2cd      	bcs.n	20001276 <__udivsi3+0x3a>
200012da:	09c3      	lsrs	r3, r0, #7
200012dc:	428b      	cmp	r3, r1
200012de:	d301      	bcc.n	200012e4 <__udivsi3+0xa8>
200012e0:	01cb      	lsls	r3, r1, #7
200012e2:	1ac0      	subs	r0, r0, r3
200012e4:	4152      	adcs	r2, r2
200012e6:	0983      	lsrs	r3, r0, #6
200012e8:	428b      	cmp	r3, r1
200012ea:	d301      	bcc.n	200012f0 <__udivsi3+0xb4>
200012ec:	018b      	lsls	r3, r1, #6
200012ee:	1ac0      	subs	r0, r0, r3
200012f0:	4152      	adcs	r2, r2
200012f2:	0943      	lsrs	r3, r0, #5
200012f4:	428b      	cmp	r3, r1
200012f6:	d301      	bcc.n	200012fc <__udivsi3+0xc0>
200012f8:	014b      	lsls	r3, r1, #5
200012fa:	1ac0      	subs	r0, r0, r3
200012fc:	4152      	adcs	r2, r2
200012fe:	0903      	lsrs	r3, r0, #4
20001300:	428b      	cmp	r3, r1
20001302:	d301      	bcc.n	20001308 <__udivsi3+0xcc>
20001304:	010b      	lsls	r3, r1, #4
20001306:	1ac0      	subs	r0, r0, r3
20001308:	4152      	adcs	r2, r2
2000130a:	08c3      	lsrs	r3, r0, #3
2000130c:	428b      	cmp	r3, r1
2000130e:	d301      	bcc.n	20001314 <__udivsi3+0xd8>
20001310:	00cb      	lsls	r3, r1, #3
20001312:	1ac0      	subs	r0, r0, r3
20001314:	4152      	adcs	r2, r2
20001316:	0883      	lsrs	r3, r0, #2
20001318:	428b      	cmp	r3, r1
2000131a:	d301      	bcc.n	20001320 <__udivsi3+0xe4>
2000131c:	008b      	lsls	r3, r1, #2
2000131e:	1ac0      	subs	r0, r0, r3
20001320:	4152      	adcs	r2, r2
20001322:	0843      	lsrs	r3, r0, #1
20001324:	428b      	cmp	r3, r1
20001326:	d301      	bcc.n	2000132c <__udivsi3+0xf0>
20001328:	004b      	lsls	r3, r1, #1
2000132a:	1ac0      	subs	r0, r0, r3
2000132c:	4152      	adcs	r2, r2
2000132e:	1a41      	subs	r1, r0, r1
20001330:	d200      	bcs.n	20001334 <__udivsi3+0xf8>
20001332:	4601      	mov	r1, r0
20001334:	4152      	adcs	r2, r2
20001336:	4610      	mov	r0, r2
20001338:	4770      	bx	lr
2000133a:	e7ff      	b.n	2000133c <__udivsi3+0x100>
2000133c:	b501      	push	{r0, lr}
2000133e:	2000      	movs	r0, #0
20001340:	f000 f806 	bl	20001350 <__aeabi_idiv0>
20001344:	bd02      	pop	{r1, pc}
20001346:	46c0      	nop			; (mov r8, r8)

20001348 <__aeabi_uidivmod>:
20001348:	2900      	cmp	r1, #0
2000134a:	d0f7      	beq.n	2000133c <__udivsi3+0x100>
2000134c:	e776      	b.n	2000123c <__udivsi3>
2000134e:	4770      	bx	lr

20001350 <__aeabi_idiv0>:
20001350:	4770      	bx	lr
20001352:	46c0      	nop			; (mov r8, r8)

20001354 <APBAHBPrescTable>:
20001354:	00000000 	andeq	r0, r0, r0
20001358:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
2000135c:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20001360:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}
20001364:	00000001 	andeq	r0, r0, r1
20001368:	02000001 	andeq	r0, r0, #1

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000e5f 	andeq	r0, r0, pc, asr lr
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000004e7 	andeq	r0, r0, r7, ror #9
      10:	0004720c 	andeq	r7, r4, ip, lsl #4
      14:	00016700 	andeq	r6, r1, r0, lsl #14
      18:	00001000 	andeq	r1, r0, r0
      1c:	000cf020 	andeq	pc, ip, r0, lsr #32
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	0000087f 	andeq	r0, r0, pc, ror r8
      2c:	00006c03 	andeq	r6, r0, r3, lsl #24
      30:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
      34:	02000000 	andeq	r0, r0, #0
      38:	087d0801 	ldmdaeq	sp!, {r0, fp}^
      3c:	02020000 	andeq	r0, r2, #0
      40:	0006de05 	andeq	sp, r6, r5, lsl #28
      44:	080f0300 	stmdaeq	pc, {r8, r9}	; <UNPREDICTABLE>
      48:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
      4c:	00000050 	andeq	r0, r0, r0, asr r0
      50:	bf070202 	svclt	0x00070202
      54:	03000003 	movweq	r0, #3
      58:	00000836 	andeq	r0, r0, r6, lsr r8
      5c:	00624d02 	rsbeq	r4, r2, r2, lsl #26
      60:	04020000 	streq	r0, [r2], #-0
      64:	00024605 	andeq	r4, r2, r5, lsl #12
      68:	029b0300 	addseq	r0, fp, #0, 6
      6c:	4f020000 	svcmi	0x00020000
      70:	00000074 	andeq	r0, r0, r4, ror r0
      74:	e0070402 	and	r0, r7, r2, lsl #8
      78:	02000000 	andeq	r0, r0, #0
      7c:	02410508 	subeq	r0, r1, #8, 10	; 0x2000000
      80:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      84:	0000db07 	andeq	sp, r0, r7, lsl #22
      88:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
      90:	e5070402 	str	r0, [r7, #-1026]	; 0xfffffbfe
      94:	03000000 	movweq	r0, #0
      98:	0000006e 	andeq	r0, r0, lr, rrx
      9c:	002c1803 	eoreq	r1, ip, r3, lsl #16
      a0:	97050000 	strls	r0, [r5, -r0]
      a4:	06000000 	streq	r0, [r0], -r0
      a8:	000000a2 	andeq	r0, r0, r2, lsr #1
      ac:	00081103 	andeq	r1, r8, r3, lsl #2
      b0:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
      b4:	03000000 	movweq	r0, #0
      b8:	00000838 	andeq	r0, r0, r8, lsr r8
      bc:	00572c03 	subseq	r2, r7, r3, lsl #24
      c0:	b7060000 	strlt	r0, [r6, -r0]
      c4:	03000000 	movweq	r0, #0
      c8:	0000029d 	muleq	r0, sp, r2
      cc:	00693003 	rsbeq	r3, r9, r3
      d0:	c7060000 	strgt	r0, [r6, -r0]
      d4:	07000000 	streq	r0, [r0, -r0]
      d8:	000000c7 	andeq	r0, r0, r7, asr #1
      dc:	000000e7 	andeq	r0, r0, r7, ror #1
      e0:	00009008 	andeq	r9, r0, r8
      e4:	09000100 	stmdbeq	r0, {r8}
      e8:	000006c1 	andeq	r0, r0, r1, asr #13
      ec:	c206fa04 	andgt	pc, r6, #4, 20	; 0x4000
      f0:	0a000000 	beq	f8 <startup-0x1fffff08>
      f4:	00000321 	andeq	r0, r0, r1, lsr #6
      f8:	00c73b05 	sbceq	r3, r7, r5, lsl #22
      fc:	070b0000 	streq	r0, [fp, -r0]
     100:	00003701 	andeq	r3, r0, r1, lsl #14
     104:	035d0600 	cmpeq	sp, #0, 12
     108:	00000119 	andeq	r0, r0, r9, lsl r1
     10c:	000bd40c 	andeq	sp, fp, ip, lsl #8
     110:	530d0000 	movwpl	r0, #53248	; 0xd000
     114:	01005445 	tsteq	r0, r5, asr #8
     118:	06890e00 	streq	r0, [r9], r0, lsl #28
     11c:	5d060000 	stcpl	0, cr0, [r6, #-0]
     120:	0000fe03 	andeq	pc, r0, r3, lsl #28
     124:	08470e00 	stmdaeq	r7, {r9, sl, fp}^
     128:	5d060000 	stcpl	0, cr0, [r6, #-0]
     12c:	0000fe03 	andeq	pc, r0, r3, lsl #28
     130:	01070b00 	tsteq	r7, r0, lsl #22
     134:	00000037 	andeq	r0, r0, r7, lsr r0
     138:	4c035f06 	stcmi	15, cr5, [r3], {6}
     13c:	0c000001 	stceq	0, cr0, [r0], {1}
     140:	00000319 	andeq	r0, r0, r9, lsl r3
     144:	01cd0c00 	biceq	r0, sp, r0, lsl #24
     148:	00010000 	andeq	r0, r1, r0
     14c:	0005de0e 	andeq	sp, r5, lr, lsl #28
     150:	035f0600 	cmpeq	pc, #0, 12
     154:	00000131 	andeq	r0, r0, r1, lsr r1
     158:	3701070b 	strcc	r0, [r1, -fp, lsl #14]
     15c:	06000000 	streq	r0, [r0], -r0
     160:	01730362 	cmneq	r3, r2, ror #6
     164:	e10c0000 	mrs	r0, (UNDEF: 12)
     168:	00000004 	andeq	r0, r0, r4
     16c:	0009340c 	andeq	r3, r9, ip, lsl #8
     170:	0e000100 	adfeqs	f0, f0, f0
     174:	000002a6 	andeq	r0, r0, r6, lsr #5
     178:	58036206 	stmdapl	r3, {r1, r2, r9, sp, lr}
     17c:	0f000001 	svceq	0x00000001
     180:	06640698 			; <UNDEFINED> instruction: 0x06640698
     184:	00000342 	andeq	r0, r0, r2, asr #6
     188:	00524310 	subseq	r4, r2, r0, lsl r3
     18c:	d2066606 	andle	r6, r6, #6291456	; 0x600000
     190:	00000000 	andeq	r0, r0, r0
     194:	00028011 	andeq	r8, r2, r1, lsl r0
     198:	06670600 	strbteq	r0, [r7], -r0, lsl #12
     19c:	000000d2 	ldrdeq	r0, [r0], -r2
     1a0:	06371104 	ldrteq	r1, [r7], -r4, lsl #2
     1a4:	68060000 	stmdavs	r6, {}	; <UNPREDICTABLE>
     1a8:	0000d206 	andeq	sp, r0, r6, lsl #4
     1ac:	43100800 	tstmi	r0, #0, 16
     1b0:	06005249 	streq	r5, [r0], -r9, asr #4
     1b4:	00d20669 	sbcseq	r0, r2, r9, ror #12
     1b8:	110c0000 	mrsne	r0, (UNDEF: 12)
     1bc:	00000155 	andeq	r0, r0, r5, asr r1
     1c0:	d2066a06 	andle	r6, r6, #24576	; 0x6000
     1c4:	10000000 	andne	r0, r0, r0
     1c8:	00081a11 	andeq	r1, r8, r1, lsl sl
     1cc:	066b0600 	strbteq	r0, [fp], -r0, lsl #12
     1d0:	000000d2 	ldrdeq	r0, [r0], -r2
     1d4:	07261114 			; <UNDEFINED> instruction: 0x07261114
     1d8:	6c060000 	stcvs	0, cr0, [r6], {-0}
     1dc:	0000d206 	andeq	sp, r0, r6, lsl #4
     1e0:	3c111800 	ldccc	8, cr1, [r1], {-0}
     1e4:	06000006 	streq	r0, [r0], -r6
     1e8:	00c7066d 	sbceq	r0, r7, sp, ror #12
     1ec:	111c0000 	tstne	ip, r0
     1f0:	000008ee 	andeq	r0, r0, lr, ror #17
     1f4:	d2066e06 	andle	r6, r6, #6, 28	; 0x60
     1f8:	20000000 	andcs	r0, r0, r0
     1fc:	0001d411 	andeq	sp, r1, r1, lsl r4
     200:	066f0600 	strbteq	r0, [pc], -r0, lsl #12
     204:	000000d2 	ldrdeq	r0, [r0], -r2
     208:	06461124 	strbeq	r1, [r6], -r4, lsr #2
     20c:	70060000 	andvc	r0, r6, r0
     210:	0000d706 	andeq	sp, r0, r6, lsl #14
     214:	5c112800 	ldcpl	8, cr2, [r1], {-0}
     218:	06000009 	streq	r0, [r0], -r9
     21c:	00d20671 	sbcseq	r0, r2, r1, ror r6
     220:	11300000 	teqne	r0, r0
     224:	00000858 	andeq	r0, r0, r8, asr r8
     228:	d2067206 	andle	r7, r6, #1610612736	; 0x60000000
     22c:	34000000 	strcc	r0, [r0], #-0
     230:	0005ba11 	andeq	fp, r5, r1, lsl sl
     234:	06730600 	ldrbteq	r0, [r3], -r0, lsl #12
     238:	000000d2 	ldrdeq	r0, [r0], -r2
     23c:	06501138 			; <UNDEFINED> instruction: 0x06501138
     240:	74060000 	strvc	r0, [r6], #-0
     244:	0000c706 	andeq	ip, r0, r6, lsl #14
     248:	50113c00 	andspl	r3, r1, r0, lsl #24
     24c:	06000008 	streq	r0, [r0], -r8
     250:	00d20675 	sbcseq	r0, r2, r5, ror r6
     254:	11400000 	mrsne	r0, (UNDEF: 64)
     258:	0000071e 	andeq	r0, r0, lr, lsl r7
     25c:	d2067606 	andle	r7, r6, #6291456	; 0x600000
     260:	44000000 	strmi	r0, [r0], #-0
     264:	00065a11 	andeq	r5, r6, r1, lsl sl
     268:	06770600 	ldrbteq	r0, [r7], -r0, lsl #12
     26c:	000000d7 	ldrdeq	r0, [r0], -r7
     270:	010d1148 	tsteq	sp, r8, asr #2
     274:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
     278:	0000d206 	andeq	sp, r0, r6, lsl #4
     27c:	d4115000 	ldrle	r5, [r1], #-0
     280:	06000005 	streq	r0, [r0], -r5
     284:	00d20679 	sbcseq	r0, r2, r9, ror r6
     288:	11540000 	cmpne	r4, r0
     28c:	000008e4 	andeq	r0, r0, r4, ror #17
     290:	d2067a06 	andle	r7, r6, #24576	; 0x6000
     294:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     298:	00066411 	andeq	r6, r6, r1, lsl r4
     29c:	067b0600 	ldrbteq	r0, [fp], -r0, lsl #12
     2a0:	000000c7 	andeq	r0, r0, r7, asr #1
     2a4:	0011115c 	andseq	r1, r1, ip, asr r1
     2a8:	7c060000 	stcvc	0, cr0, [r6], {-0}
     2ac:	0000d206 	andeq	sp, r0, r6, lsl #4
     2b0:	25116000 	ldrcs	r6, [r1, #-0]
     2b4:	06000004 	streq	r0, [r0], -r4
     2b8:	00d2067d 	sbcseq	r0, r2, sp, ror r6
     2bc:	11640000 	cmnne	r4, r0
     2c0:	0000066e 	andeq	r0, r0, lr, ror #12
     2c4:	d7067e06 	strle	r7, [r6, -r6, lsl #28]
     2c8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     2cc:	00090b11 	andeq	r0, r9, r1, lsl fp
     2d0:	067f0600 	ldrbteq	r0, [pc], -r0, lsl #12
     2d4:	000000d2 	ldrdeq	r0, [r0], -r2
     2d8:	53431070 	movtpl	r1, #12400	; 0x3070
     2dc:	80060052 	andhi	r0, r6, r2, asr r0
     2e0:	0000d206 	andeq	sp, r0, r6, lsl #4
     2e4:	78117400 	ldmdavc	r1, {sl, ip, sp, lr}
     2e8:	06000006 	streq	r0, [r0], -r6
     2ec:	00d70681 	sbcseq	r0, r7, r1, lsl #13
     2f0:	11780000 	cmnne	r8, r0
     2f4:	000008de 	ldrdeq	r0, [r0], -lr
     2f8:	d2068206 	andle	r8, r6, #1610612736	; 0x60000000
     2fc:	80000000 	andhi	r0, r0, r0
     300:	0003d211 	andeq	sp, r3, r1, lsl r2
     304:	06830600 	streq	r0, [r3], r0, lsl #12
     308:	000000d2 	ldrdeq	r0, [r0], -r2
     30c:	06311184 	ldrteq	r1, [r1], -r4, lsl #3
     310:	84060000 	strhi	r0, [r6], #-0
     314:	0000d206 	andeq	sp, r0, r6, lsl #4
     318:	3f118800 	svccc	0x00118800
     31c:	06000001 	streq	r0, [r0], -r1
     320:	00d20685 	sbcseq	r0, r2, r5, lsl #13
     324:	118c0000 	orrne	r0, ip, r0
     328:	00000902 	andeq	r0, r0, r2, lsl #18
     32c:	d2068606 	andle	r8, r6, #6291456	; 0x600000
     330:	90000000 	andls	r0, r0, r0
     334:	00015e11 	andeq	r5, r1, r1, lsl lr
     338:	06870600 	streq	r0, [r7], r0, lsl #12
     33c:	000000d2 	ldrdeq	r0, [r0], -r2
     340:	590e0094 	stmdbpl	lr, {r2, r4, r7}
     344:	06000003 	streq	r0, [r0], -r3
     348:	017f0689 	cmneq	pc, r9, lsl #13
     34c:	10120000 	andsne	r0, r2, r0
     350:	03873007 	orreq	r3, r7, #7
     354:	51130000 	tstpl	r3, r0
     358:	07000000 	streq	r0, [r0, -r0]
     35c:	0000c732 	andeq	ip, r0, r2, lsr r7
     360:	f4130000 			; <UNDEFINED> instruction: 0xf4130000
     364:	07000002 	streq	r0, [r0, -r2]
     368:	0000c733 	andeq	ip, r0, r3, lsr r7
     36c:	95130400 	ldrls	r0, [r3, #-1024]	; 0xfffffc00
     370:	07000007 	streq	r0, [r0, -r7]
     374:	0000c734 	andeq	ip, r0, r4, lsr r7
     378:	a6130800 	ldrge	r0, [r3], -r0, lsl #16
     37c:	07000001 	streq	r0, [r0, -r1]
     380:	0000c735 	andeq	ip, r0, r5, lsr r7
     384:	03000c00 	movweq	r0, #3072	; 0xc00
     388:	0000094a 	andeq	r0, r0, sl, asr #18
     38c:	034e3607 	movteq	r3, #58887	; 0xe607
     390:	a7070000 	strge	r0, [r7, -r0]
     394:	a2000000 	andge	r0, r0, #0
     398:	08000003 	stmdaeq	r0, {r0, r1}
     39c:	00000090 	muleq	r0, r0, r0
     3a0:	9205000f 	andls	r0, r5, #15
     3a4:	06000003 	streq	r0, [r0], -r3
     3a8:	000003a2 	andeq	r0, r0, r2, lsr #7
     3ac:	0007a514 	andeq	sl, r7, r4, lsl r5
     3b0:	a7990100 	ldrge	r0, [r9, r0, lsl #2]
     3b4:	05000003 	streq	r0, [r0, #-3]
     3b8:	00135403 	andseq	r5, r3, r3, lsl #8
     3bc:	00c51520 	sbceq	r1, r5, r0, lsr #10
     3c0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
     3c4:	000ce00c 	andeq	lr, ip, ip
     3c8:	00002020 	andeq	r2, r0, r0, lsr #32
     3cc:	e39c0100 	orrs	r0, ip, #0, 2
     3d0:	16000003 	strne	r0, [r0], -r3
     3d4:	000000f2 	strdeq	r0, [r0], -r2
     3d8:	970c5e01 	strls	r5, [ip, -r1, lsl #28]
     3dc:	02000000 	andeq	r0, r0, #0
     3e0:	17007791 			; <UNDEFINED> instruction: 0x17007791
     3e4:	00000840 	andeq	r0, r0, r0, asr #16
     3e8:	250c3c01 	strcs	r3, [ip, #-3073]	; 0xfffff3ff
     3ec:	9c000001 	stcls	0, cr0, [r0], {1}
     3f0:	4420000c 	strtmi	r0, [r0], #-12
     3f4:	01000000 	mrseq	r0, (UNDEF: 0)
     3f8:	00041c9c 	muleq	r4, ip, ip
     3fc:	00f21600 	rscseq	r1, r2, r0, lsl #12
     400:	3c010000 	stccc	0, cr0, [r1], {-0}
     404:	0000970c 	andeq	r9, r0, ip, lsl #14
     408:	6f910200 	svcvs	0x00910200
     40c:	0002ea18 	andeq	lr, r2, r8, lsl sl
     410:	0c3e0100 	ldfeqs	f0, [lr], #-0
     414:	00000125 	andeq	r0, r0, r5, lsr #2
     418:	00779102 	rsbseq	r9, r7, r2, lsl #2
     41c:	00014719 	andeq	r4, r1, r9, lsl r7
     420:	0c280100 	stfeqs	f0, [r8], #-0
     424:	20000c80 	andcs	r0, r0, r0, lsl #25
     428:	0000001c 	andeq	r0, r0, ip, lsl r0
     42c:	82179c01 	andshi	r9, r7, #256	; 0x100
     430:	01000006 	tsteq	r0, r6
     434:	01190bfb 			; <UNDEFINED> instruction: 0x01190bfb
     438:	0bfc0000 	bleq	fff00440 <APBAHBPrescTable+0xdfeff0ec>
     43c:	00842000 	addeq	r2, r4, r0
     440:	9c010000 	stcls	0, cr0, [r1], {-0}
     444:	00000485 	andeq	r0, r0, r5, lsl #9
     448:	00026e16 	andeq	r6, r2, r6, lsl lr
     44c:	0bfb0100 	bleq	ffec0854 <APBAHBPrescTable+0xdfebf500>
     450:	00000097 	muleq	r0, r7, r0
     454:	1a679102 	bne	19e4864 <startup-0x1e61b79c>
     458:	00706d74 	rsbseq	r6, r0, r4, ror sp
     45c:	c70bfd01 	strgt	pc, [fp, -r1, lsl #26]
     460:	02000000 	andeq	r0, r0, #0
     464:	47186c91 			; <UNDEFINED> instruction: 0x47186c91
     468:	01000000 	mrseq	r0, (UNDEF: 0)
     46c:	00c70bfe 	strdeq	r0, [r7], #190	; 0xbe
     470:	91020000 	mrsls	r0, (UNDEF: 2)
     474:	02ea1874 	rsceq	r1, sl, #116, 16	; 0x740000
     478:	ff010000 			; <UNDEFINED> instruction: 0xff010000
     47c:	0001190b 	andeq	r1, r1, fp, lsl #18
     480:	73910200 	orrsvc	r0, r1, #0, 4
     484:	09271500 	stmdbeq	r7!, {r8, sl, ip}
     488:	d6010000 	strle	r0, [r1], -r0
     48c:	000bac0b 	andeq	sl, fp, fp, lsl #24
     490:	00005020 	andeq	r5, r0, r0, lsr #32
     494:	ba9c0100 	blt	fe70089c <APBAHBPrescTable+0xde6ff548>
     498:	16000004 	strne	r0, [r0], -r4
     49c:	000000f2 	strdeq	r0, [r0], -r2
     4a0:	970bd601 	strls	sp, [fp, -r1, lsl #12]
     4a4:	02000000 	andeq	r0, r0, #0
     4a8:	77167791 			; <UNDEFINED> instruction: 0x77167791
     4ac:	01000002 	tsteq	r0, r2
     4b0:	014c0bd6 	ldrdeq	r0, [ip, #-182]	; 0xffffff4a
     4b4:	91020000 	mrsls	r0, (UNDEF: 2)
     4b8:	c2150076 	andsgt	r0, r5, #118	; 0x76
     4bc:	01000005 	tsteq	r0, r5
     4c0:	0b700a9e 	bleq	1c02f40 <startup-0x1e3fd0c0>
     4c4:	003c2000 	eorseq	r2, ip, r0
     4c8:	9c010000 	stcls	0, cr0, [r1], {-0}
     4cc:	000004e0 	andeq	r0, r0, r0, ror #9
     4d0:	00072f16 	andeq	r2, r7, r6, lsl pc
     4d4:	0a9e0100 	beq	fe7808dc <APBAHBPrescTable+0xde77f588>
     4d8:	00000097 	muleq	r0, r7, r0
     4dc:	00779102 	rsbseq	r9, r7, r2, lsl #2
     4e0:	00012215 	andeq	r2, r1, r5, lsl r2
     4e4:	0a860100 	beq	fe1808ec <APBAHBPrescTable+0xde17f598>
     4e8:	20000b30 	andcs	r0, r0, r0, lsr fp
     4ec:	00000040 	andeq	r0, r0, r0, asr #32
     4f0:	05159c01 	ldreq	r9, [r5, #-3073]	; 0xfffff3ff
     4f4:	9a160000 	bls	5804fc <startup-0x1fa7fb04>
     4f8:	01000008 	tsteq	r0, r8
     4fc:	00c70a86 	sbceq	r0, r7, r6, lsl #21
     500:	91020000 	mrsls	r0, (UNDEF: 2)
     504:	02771674 	rsbseq	r1, r7, #116, 12	; 0x7400000
     508:	86010000 	strhi	r0, [r1], -r0
     50c:	00014c0a 	andeq	r4, r1, sl, lsl #24
     510:	73910200 	orrsvc	r0, r1, #0, 4
     514:	074f1500 	strbeq	r1, [pc, -r0, lsl #10]
     518:	52010000 	andpl	r0, r1, #0
     51c:	000af00a 	andeq	pc, sl, sl
     520:	00004020 	andeq	r4, r0, r0, lsr #32
     524:	4a9c0100 	bmi	fe70092c <APBAHBPrescTable+0xde6ff5d8>
     528:	16000005 	strne	r0, [r0], -r5
     52c:	00000303 	andeq	r0, r0, r3, lsl #6
     530:	c70a5201 	strgt	r5, [sl, -r1, lsl #4]
     534:	02000000 	andeq	r0, r0, #0
     538:	77167491 			; <UNDEFINED> instruction: 0x77167491
     53c:	01000002 	tsteq	r0, r2
     540:	014c0a52 	cmpeq	ip, r2, asr sl
     544:	91020000 	mrsls	r0, (UNDEF: 2)
     548:	60150073 	andsvs	r0, r5, r3, ror r0
     54c:	01000008 	tsteq	r0, r8
     550:	0ab00a19 	beq	fec02dbc <APBAHBPrescTable+0xdec01a68>
     554:	00402000 	subeq	r2, r0, r0
     558:	9c010000 	stcls	0, cr0, [r1], {-0}
     55c:	0000057f 	andeq	r0, r0, pc, ror r5
     560:	00042f16 	andeq	r2, r4, r6, lsl pc
     564:	0a190100 	beq	64096c <startup-0x1f9bf694>
     568:	000000c7 	andeq	r0, r0, r7, asr #1
     56c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     570:	00000277 	andeq	r0, r0, r7, ror r2
     574:	4c0a1901 			; <UNDEFINED> instruction: 0x4c0a1901
     578:	02000001 	andeq	r0, r0, #1
     57c:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     580:	000003dd 	ldrdeq	r0, [r0], -sp
     584:	7009fb01 	andvc	pc, r9, r1, lsl #22
     588:	4020000a 	eormi	r0, r0, sl
     58c:	01000000 	mrseq	r0, (UNDEF: 0)
     590:	0005b49c 	muleq	r5, ip, r4
     594:	04161600 	ldreq	r1, [r6], #-1536	; 0xfffffa00
     598:	fb010000 	blx	405a2 <startup-0x1ffbfa5e>
     59c:	0000c709 	andeq	ip, r0, r9, lsl #14
     5a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     5a4:	00027716 	andeq	r7, r2, r6, lsl r7
     5a8:	09fb0100 	ldmibeq	fp!, {r8}^
     5ac:	0000014c 	andeq	r0, r0, ip, asr #2
     5b0:	00739102 	rsbseq	r9, r3, r2, lsl #2
     5b4:	00097f15 	andeq	r7, r9, r5, lsl pc
     5b8:	09db0100 	ldmibeq	fp, {r8}^
     5bc:	20000a30 	andcs	r0, r0, r0, lsr sl
     5c0:	00000040 	andeq	r0, r0, r0, asr #32
     5c4:	05e99c01 	strbeq	r9, [r9, #3073]!	; 0xc01
     5c8:	fe160000 	cdp2	0, 1, cr0, cr6, cr0, {0}
     5cc:	01000000 	mrseq	r0, (UNDEF: 0)
     5d0:	00c709db 	ldrdeq	r0, [r7], #155	; 0x9b
     5d4:	91020000 	mrsls	r0, (UNDEF: 2)
     5d8:	02771674 	rsbseq	r1, r7, #116, 12	; 0x7400000
     5dc:	db010000 	blle	405e4 <startup-0x1ffbfa1c>
     5e0:	00014c09 	andeq	r4, r1, r9, lsl #24
     5e4:	73910200 	orrsvc	r0, r1, #0, 4
     5e8:	05fa1500 	ldrbeq	r1, [sl, #1280]!	; 0x500
     5ec:	aa010000 	bge	405f4 <startup-0x1ffbfa0c>
     5f0:	0009f009 	andeq	pc, r9, r9
     5f4:	00004020 	andeq	r4, r0, r0, lsr #32
     5f8:	1e9c0100 	fmlnee	f0, f4, f0
     5fc:	16000006 	strne	r0, [r0], -r6
     600:	0000089a 	muleq	r0, sl, r8
     604:	c709aa01 	strgt	sl, [r9, -r1, lsl #20]
     608:	02000000 	andeq	r0, r0, #0
     60c:	77167491 			; <UNDEFINED> instruction: 0x77167491
     610:	01000002 	tsteq	r0, r2
     614:	014c09aa 	smlaltbeq	r0, ip, sl, r9
     618:	91020000 	mrsls	r0, (UNDEF: 2)
     61c:	85150073 	ldrhi	r0, [r5, #-115]	; 0xffffff8d
     620:	01000000 	mrseq	r0, (UNDEF: 0)
     624:	09b0097b 	ldmibeq	r0!, {r0, r1, r3, r4, r5, r6, r8, fp}
     628:	00402000 	subeq	r2, r0, r0
     62c:	9c010000 	stcls	0, cr0, [r1], {-0}
     630:	00000653 	andeq	r0, r0, r3, asr r6
     634:	00030316 	andeq	r0, r3, r6, lsl r3
     638:	097b0100 	ldmdbeq	fp!, {r8}^
     63c:	000000c7 	andeq	r0, r0, r7, asr #1
     640:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     644:	00000277 	andeq	r0, r0, r7, ror r2
     648:	4c097b01 			; <UNDEFINED> instruction: 0x4c097b01
     64c:	02000001 	andeq	r0, r0, #1
     650:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     654:	000001ed 	andeq	r0, r0, sp, ror #3
     658:	70094501 	andvc	r4, r9, r1, lsl #10
     65c:	40200009 	eormi	r0, r0, r9
     660:	01000000 	mrseq	r0, (UNDEF: 0)
     664:	0006889c 	muleq	r6, ip, r8
     668:	042f1600 	strteq	r1, [pc], #-1536	; 670 <startup-0x1ffff990>
     66c:	45010000 	strmi	r0, [r1, #-0]
     670:	0000c709 	andeq	ip, r0, r9, lsl #14
     674:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     678:	00027716 	andeq	r7, r2, r6, lsl r7
     67c:	09450100 	stmdbeq	r5, {r8}^
     680:	0000014c 	andeq	r0, r0, ip, asr #2
     684:	00739102 	rsbseq	r9, r3, r2, lsl #2
     688:	00073815 	andeq	r3, r7, r5, lsl r8
     68c:	092a0100 	stmdbeq	sl!, {r8}
     690:	20000930 	andcs	r0, r0, r0, lsr r9
     694:	00000040 	andeq	r0, r0, r0, asr #32
     698:	06bd9c01 	ldrteq	r9, [sp], r1, lsl #24
     69c:	16160000 	ldrne	r0, [r6], -r0
     6a0:	01000004 	tsteq	r0, r4
     6a4:	00c7092a 	sbceq	r0, r7, sl, lsr #18
     6a8:	91020000 	mrsls	r0, (UNDEF: 2)
     6ac:	02771674 	rsbseq	r1, r7, #116, 12	; 0x7400000
     6b0:	2a010000 	bcs	406b8 <startup-0x1ffbf948>
     6b4:	00014c09 	andeq	r4, r1, r9, lsl #24
     6b8:	73910200 	orrsvc	r0, r1, #0, 4
     6bc:	021b1500 	andseq	r1, fp, #0, 10
     6c0:	0d010000 	stceq	0, cr0, [r1, #-0]
     6c4:	0008f009 	andeq	pc, r8, r9
     6c8:	00004020 	andeq	r4, r0, r0, lsr #32
     6cc:	f29c0100 	vaddw.s16	q0, q6, d0
     6d0:	16000006 	strne	r0, [r0], -r6
     6d4:	000000fe 	strdeq	r0, [r0], -lr
     6d8:	c7090d01 	strgt	r0, [r9, -r1, lsl #26]
     6dc:	02000000 	andeq	r0, r0, #0
     6e0:	77167491 			; <UNDEFINED> instruction: 0x77167491
     6e4:	01000002 	tsteq	r0, r2
     6e8:	014c090d 	cmpeq	ip, sp, lsl #18
     6ec:	91020000 	mrsls	r0, (UNDEF: 2)
     6f0:	f8150073 			; <UNDEFINED> instruction: 0xf8150073
     6f4:	01000007 	tsteq	r0, r7
     6f8:	08b008e3 	ldmeq	r0!, {r0, r1, r5, r6, r7, fp}
     6fc:	00402000 	subeq	r2, r0, r0
     700:	9c010000 	stcls	0, cr0, [r1], {-0}
     704:	00000727 	andeq	r0, r0, r7, lsr #14
     708:	00089a16 	andeq	r9, r8, r6, lsl sl
     70c:	08e30100 	stmiaeq	r3!, {r8}^
     710:	000000c7 	andeq	r0, r0, r7, asr #1
     714:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     718:	00000277 	andeq	r0, r0, r7, ror r2
     71c:	4c08e301 	stcmi	3, cr14, [r8], {1}
     720:	02000001 	andeq	r0, r0, #1
     724:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     728:	00000910 	andeq	r0, r0, r0, lsl r9
     72c:	7008af01 	andvc	sl, r8, r1, lsl #30
     730:	40200008 	eormi	r0, r0, r8
     734:	01000000 	mrseq	r0, (UNDEF: 0)
     738:	00075c9c 	muleq	r7, ip, ip
     73c:	03031600 	movweq	r1, #13824	; 0x3600
     740:	af010000 	svcge	0x00010000
     744:	0000c708 	andeq	ip, r0, r8, lsl #14
     748:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     74c:	00027716 	andeq	r7, r2, r6, lsl r7
     750:	08af0100 	stmiaeq	pc!, {r8}	; <UNPREDICTABLE>
     754:	0000014c 	andeq	r0, r0, ip, asr #2
     758:	00739102 	rsbseq	r9, r3, r2, lsl #2
     75c:	00099c15 	andeq	r9, r9, r5, lsl ip
     760:	08760100 	ldmdaeq	r6!, {r8}^
     764:	20000830 	andcs	r0, r0, r0, lsr r8
     768:	00000040 	andeq	r0, r0, r0, asr #32
     76c:	07919c01 	ldreq	r9, [r1, r1, lsl #24]
     770:	2f160000 	svccs	0x00160000
     774:	01000004 	tsteq	r0, r4
     778:	00c70876 	sbceq	r0, r7, r6, ror r8
     77c:	91020000 	mrsls	r0, (UNDEF: 2)
     780:	02771674 	rsbseq	r1, r7, #116, 12	; 0x7400000
     784:	76010000 	strvc	r0, [r1], -r0
     788:	00014c08 	andeq	r4, r1, r8, lsl #24
     78c:	73910200 	orrsvc	r0, r1, #0, 4
     790:	01b61500 			; <UNDEFINED> instruction: 0x01b61500
     794:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
     798:	0007f008 	andeq	pc, r7, r8
     79c:	00004020 	andeq	r4, r0, r0, lsr #32
     7a0:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
     7a4:	16000007 	strne	r0, [r0], -r7
     7a8:	00000416 	andeq	r0, r0, r6, lsl r4
     7ac:	c7085801 	strgt	r5, [r8, -r1, lsl #16]
     7b0:	02000000 	andeq	r0, r0, #0
     7b4:	77167491 			; <UNDEFINED> instruction: 0x77167491
     7b8:	01000002 	tsteq	r0, r2
     7bc:	014c0858 	cmpeq	ip, r8, asr r8
     7c0:	91020000 	mrsls	r0, (UNDEF: 2)
     7c4:	07150073 			; <UNDEFINED> instruction: 0x07150073
     7c8:	01000007 	tsteq	r0, r7
     7cc:	07b00838 			; <UNDEFINED> instruction: 0x07b00838
     7d0:	00402000 	subeq	r2, r0, r0
     7d4:	9c010000 	stcls	0, cr0, [r1], {-0}
     7d8:	000007fb 	strdeq	r0, [r0], -fp
     7dc:	0000fe16 	andeq	pc, r0, r6, lsl lr	; <UNPREDICTABLE>
     7e0:	08380100 	ldmdaeq	r8!, {r8}
     7e4:	000000c7 	andeq	r0, r0, r7, asr #1
     7e8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     7ec:	00000277 	andeq	r0, r0, r7, ror r2
     7f0:	4c083801 	stcmi	8, cr3, [r8], {1}
     7f4:	02000001 	andeq	r0, r0, #1
     7f8:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     7fc:	000008a9 	andeq	r0, r0, r9, lsr #17
     800:	94080e01 	strls	r0, [r8], #-3585	; 0xfffff1ff
     804:	1c200007 	stcne	0, cr0, [r0], #-28	; 0xffffffe4
     808:	01000000 	mrseq	r0, (UNDEF: 0)
     80c:	0008219c 	muleq	r8, ip, r1
     810:	06e81600 	strbteq	r1, [r8], r0, lsl #12
     814:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
     818:	0000c708 	andeq	ip, r0, r8, lsl #14
     81c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     820:	03aa1500 			; <UNDEFINED> instruction: 0x03aa1500
     824:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
     828:	00075807 	andeq	r5, r7, r7, lsl #16
     82c:	00003c20 	andeq	r3, r0, r0, lsr #24
     830:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
     834:	16000008 	strne	r0, [r0], -r8
     838:	00000038 	andeq	r0, r0, r8, lsr r0
     83c:	c7078e01 	strgt	r8, [r7, -r1, lsl #28]
     840:	02000000 	andeq	r0, r0, #0
     844:	9f186c91 	svcls	0x00186c91
     848:	01000001 	tsteq	r0, r1
     84c:	00c70790 	smulleq	r0, r7, r0, r7
     850:	91020000 	mrsls	r0, (UNDEF: 2)
     854:	a1150074 	tstge	r5, r4, ror r0
     858:	01000000 	mrseq	r0, (UNDEF: 0)
     85c:	0718072b 	ldreq	r0, [r8, -fp, lsr #14]
     860:	00402000 	subeq	r2, r0, r0
     864:	9c010000 	stcls	0, cr0, [r1], {-0}
     868:	0000088b 	andeq	r0, r0, fp, lsl #17
     86c:	00002916 	andeq	r2, r0, r6, lsl r9
     870:	072b0100 	streq	r0, [fp, -r0, lsl #2]!
     874:	000000c7 	andeq	r0, r0, r7, asr #1
     878:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     87c:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
     880:	c7072d01 	strgt	r2, [r7, -r1, lsl #26]
     884:	02000000 	andeq	r0, r0, #0
     888:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
     88c:	0000044a 	andeq	r0, r0, sl, asr #8
     890:	dc070b01 			; <UNDEFINED> instruction: 0xdc070b01
     894:	3c200006 	stccc	0, cr0, [r0], #-24	; 0xffffffe8
     898:	01000000 	mrseq	r0, (UNDEF: 0)
     89c:	0008c09c 	muleq	r8, ip, r0
     8a0:	059a1600 	ldreq	r1, [sl, #1536]	; 0x600
     8a4:	0b010000 	bleq	408ac <startup-0x1ffbf754>
     8a8:	0000c707 	andeq	ip, r0, r7, lsl #14
     8ac:	6c910200 	lfmvs	f0, 4, [r1], {0}
     8b0:	00019f18 	andeq	r9, r1, r8, lsl pc
     8b4:	070d0100 	streq	r0, [sp, -r0, lsl #2]
     8b8:	000000c7 	andeq	r0, r0, r7, asr #1
     8bc:	00749102 	rsbseq	r9, r4, r2, lsl #2
     8c0:	0006a215 	andeq	sl, r6, r5, lsl r2
     8c4:	06ea0100 	strbteq	r0, [sl], r0, lsl #2
     8c8:	200006a0 	andcs	r0, r0, r0, lsr #13
     8cc:	0000003c 	andeq	r0, r0, ip, lsr r0
     8d0:	08f59c01 	ldmeq	r5!, {r0, sl, fp, ip, pc}^
     8d4:	93160000 	tstls	r6, #0
     8d8:	01000003 	tsteq	r0, r3
     8dc:	00c706ea 	sbceq	r0, r7, sl, ror #13
     8e0:	91020000 	mrsls	r0, (UNDEF: 2)
     8e4:	019f186c 	orrseq	r1, pc, ip, ror #16
     8e8:	ec010000 	stc	0, cr0, [r1], {-0}
     8ec:	0000c706 	andeq	ip, r0, r6, lsl #14
     8f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     8f4:	02041500 	andeq	r1, r4, #0, 10
     8f8:	c6010000 	strgt	r0, [r1], -r0
     8fc:	00066406 	andeq	r6, r6, r6, lsl #8
     900:	00003c20 	andeq	r3, r0, r0, lsr #24
     904:	2a9c0100 	bcs	fe700d0c <APBAHBPrescTable+0xde6ff9b8>
     908:	16000009 	strne	r0, [r0], -r9
     90c:	0000037c 	andeq	r0, r0, ip, ror r3
     910:	c706c601 	strgt	ip, [r6, -r1, lsl #12]
     914:	02000000 	andeq	r0, r0, #0
     918:	9f186c91 	svcls	0x00186c91
     91c:	01000001 	tsteq	r0, r1
     920:	00c706c8 	sbceq	r0, r7, r8, asr #13
     924:	91020000 	mrsls	r0, (UNDEF: 2)
     928:	be150074 	mrclt	0, 0, r0, cr5, cr4, {3}
     92c:	01000008 	tsteq	r0, r8
     930:	064806ab 	strbeq	r0, [r8], -fp, lsr #13
     934:	001c2000 	andseq	r2, ip, r0
     938:	9c010000 	stcls	0, cr0, [r1], {-0}
     93c:	00000950 	andeq	r0, r0, r0, asr r9
     940:	00062016 	andeq	r2, r6, r6, lsl r0
     944:	06ab0100 	strteq	r0, [fp], r0, lsl #2
     948:	000000c7 	andeq	r0, r0, r7, asr #1
     94c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     950:	00028815 	andeq	r8, r2, r5, lsl r8
     954:	05ef0100 	strbeq	r0, [pc, #256]!	; a5c <startup-0x1ffff5a4>
     958:	20000628 	andcs	r0, r0, r8, lsr #12
     95c:	00000020 	andeq	r0, r0, r0, lsr #32
     960:	09769c01 	ldmdbeq	r6!, {r0, sl, fp, ip, pc}^
     964:	77160000 	ldrvc	r0, [r6, -r0]
     968:	01000002 	tsteq	r0, r2
     96c:	014c05ef 	smlaltteq	r0, ip, pc, r5	; <UNPREDICTABLE>
     970:	91020000 	mrsls	r0, (UNDEF: 2)
     974:	64150077 	ldrvs	r0, [r5], #-119	; 0xffffff89
     978:	01000004 	tsteq	r0, r4
     97c:	060805de 			; <UNDEFINED> instruction: 0x060805de
     980:	00202000 	eoreq	r2, r0, r0
     984:	9c010000 	stcls	0, cr0, [r1], {-0}
     988:	0000099c 	muleq	r0, ip, r9
     98c:	00027716 	andeq	r7, r2, r6, lsl r7
     990:	05de0100 	ldrbeq	r0, [lr, #256]	; 0x100
     994:	0000014c 	andeq	r0, r0, ip, asr #2
     998:	00779102 	rsbseq	r9, r7, r2, lsl #2
     99c:	00096415 	andeq	r6, r9, r5, lsl r4
     9a0:	05be0100 	ldreq	r0, [lr, #256]!	; 0x100
     9a4:	200005a8 	andcs	r0, r0, r8, lsr #11
     9a8:	00000060 	andeq	r0, r0, r0, rrx
     9ac:	09d19c01 	ldmibeq	r1, {r0, sl, fp, ip, pc}^
     9b0:	6b160000 	blvs	5809b8 <startup-0x1fa7f648>
     9b4:	01000003 	tsteq	r0, r3
     9b8:	00c705be 	strheq	r0, [r7], #94	; 0x5e
     9bc:	91020000 	mrsls	r0, (UNDEF: 2)
     9c0:	019f186c 	orrseq	r1, pc, ip, ror #16
     9c4:	c0010000 	andgt	r0, r1, r0
     9c8:	0000c705 	andeq	ip, r0, r5, lsl #14
     9cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     9d0:	07e61b00 	strbeq	r1, [r6, r0, lsl #22]!
     9d4:	25010000 	strcs	r0, [r1, #-0]
     9d8:	00045005 	andeq	r5, r4, r5
     9dc:	00015820 	andeq	r5, r1, r0, lsr #16
     9e0:	519c0100 	orrspl	r0, ip, r0, lsl #2
     9e4:	1600000a 	strne	r0, [r0], -sl
     9e8:	00000117 	andeq	r0, r0, r7, lsl r1
     9ec:	51052501 	tstpl	r5, r1, lsl #10
     9f0:	0200000a 	andeq	r0, r0, #10
     9f4:	741a5c91 	ldrvc	r5, [sl], #-3217	; 0xfffff36f
     9f8:	0100706d 	tsteq	r0, sp, rrx
     9fc:	00c70527 	sbceq	r0, r7, r7, lsr #10
     a00:	91020000 	mrsls	r0, (UNDEF: 2)
     a04:	03651870 	cmneq	r5, #112, 16	; 0x700000
     a08:	27010000 	strcs	r0, [r1, -r0]
     a0c:	0000c705 	andeq	ip, r0, r5, lsl #14
     a10:	6c910200 	lfmvs	f0, 4, [r1], {0}
     a14:	00031218 	andeq	r1, r3, r8, lsl r2
     a18:	05270100 	streq	r0, [r7, #-256]!	; 0xffffff00
     a1c:	000000c7 	andeq	r0, r0, r7, asr #1
     a20:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
     a24:	00000067 	andeq	r0, r0, r7, rrx
     a28:	c7052701 	strgt	r2, [r5, -r1, lsl #14]
     a2c:	02000000 	andeq	r0, r0, #0
     a30:	75186891 	ldrvc	r6, [r8, #-2193]	; 0xfffff76f
     a34:	01000009 	tsteq	r0, r9
     a38:	00c70527 	sbceq	r0, r7, r7, lsr #10
     a3c:	91020000 	mrsls	r0, (UNDEF: 2)
     a40:	00621864 	rsbeq	r1, r2, r4, ror #16
     a44:	27010000 	strcs	r0, [r1, -r0]
     a48:	0000c705 	andeq	ip, r0, r5, lsl #14
     a4c:	60910200 	addsvs	r0, r1, r0, lsl #4
     a50:	87041c00 	strhi	r1, [r4, -r0, lsl #24]
     a54:	15000003 	strne	r0, [r0, #-3]
     a58:	0000076c 	andeq	r0, r0, ip, ror #14
     a5c:	1404f101 	strne	pc, [r4], #-257	; 0xfffffeff
     a60:	3c200004 	stccc	0, cr0, [r0], #-16
     a64:	01000000 	mrseq	r0, (UNDEF: 0)
     a68:	000a8c9c 	muleq	sl, ip, ip
     a6c:	00001600 	andeq	r1, r0, r0, lsl #12
     a70:	f1010000 	setend	le
     a74:	0000c704 	andeq	ip, r0, r4, lsl #14
     a78:	6c910200 	lfmvs	f0, 4, [r1], {0}
     a7c:	00019f18 	andeq	r9, r1, r8, lsl pc
     a80:	04f30100 	ldrbteq	r0, [r3], #256	; 0x100
     a84:	000000c7 	andeq	r0, r0, r7, asr #1
     a88:	00749102 	rsbseq	r9, r4, r2, lsl #2
     a8c:	0001dd15 	andeq	sp, r1, r5, lsl sp
     a90:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
     a94:	200003dc 	ldrdcs	r0, [r0], -ip
     a98:	00000038 	andeq	r0, r0, r8, lsr r0
     a9c:	0ac19c01 	beq	ff067aa8 <APBAHBPrescTable+0xdf066754>
     aa0:	00160000 	andseq	r0, r6, r0
     aa4:	01000000 	mrseq	r0, (UNDEF: 0)
     aa8:	00c704d2 	ldrdeq	r0, [r7], #66	; 0x42
     aac:	91020000 	mrsls	r0, (UNDEF: 2)
     ab0:	019f186c 	orrseq	r1, pc, ip, ror #16
     ab4:	d4010000 	strle	r0, [r1], #-0
     ab8:	0000c704 	andeq	ip, r0, r4, lsl #14
     abc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ac0:	02321500 	eorseq	r1, r2, #0, 10
     ac4:	b3010000 	movwlt	r0, #4096	; 0x1000
     ac8:	0003a804 	andeq	sl, r3, r4, lsl #16
     acc:	00003420 	andeq	r3, r0, r0, lsr #8
     ad0:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
     ad4:	1600000a 	strne	r0, [r0], -sl
     ad8:	00000340 	andeq	r0, r0, r0, asr #6
     adc:	c704b301 	strgt	fp, [r4, -r1, lsl #6]
     ae0:	02000000 	andeq	r0, r0, #0
     ae4:	9f186c91 	svcls	0x00186c91
     ae8:	01000001 	tsteq	r0, r1
     aec:	00c704b5 	strheq	r0, [r7], #69	; 0x45
     af0:	91020000 	mrsls	r0, (UNDEF: 2)
     af4:	c01d0074 	andsgt	r0, sp, r4, ror r0
     af8:	01000002 	tsteq	r0, r2
     afc:	0097049a 	umullseq	r0, r7, sl, r4
     b00:	038c0000 	orreq	r0, ip, #0
     b04:	001c2000 	andseq	r2, ip, r0
     b08:	9c010000 	stcls	0, cr0, [r1], {-0}
     b0c:	00024f15 	andeq	r4, r2, r5, lsl pc
     b10:	047d0100 	ldrbteq	r0, [sp], #-256	; 0xffffff00
     b14:	20000358 	andcs	r0, r0, r8, asr r3
     b18:	00000034 	andeq	r0, r0, r4, lsr r0
     b1c:	0b419c01 	bleq	1067b28 <startup-0x1ef984d8>
     b20:	7c160000 	ldcvc	0, cr0, [r6], {-0}
     b24:	01000007 	tsteq	r0, r7
     b28:	00c7047d 	sbceq	r0, r7, sp, ror r4
     b2c:	91020000 	mrsls	r0, (UNDEF: 2)
     b30:	019f186c 	orrseq	r1, pc, ip, ror #16
     b34:	7f010000 	svcvc	0x00010000
     b38:	0000c704 	andeq	ip, r0, r4, lsl #14
     b3c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     b40:	08cf1500 	stmiaeq	pc, {r8, sl, ip}^	; <UNPREDICTABLE>
     b44:	b5010000 	strlt	r0, [r1, #-0]
     b48:	00031c03 	andeq	r1, r3, r3, lsl #24
     b4c:	00003c20 	andeq	r3, r0, r0, lsr #24
     b50:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
     b54:	1600000b 	strne	r0, [r0], -fp
     b58:	00000611 	andeq	r0, r0, r1, lsl r6
     b5c:	c703b501 	strgt	fp, [r3, -r1, lsl #10]
     b60:	02000000 	andeq	r0, r0, #0
     b64:	3e166c91 	mrccc	12, 0, r6, cr6, cr1, {4}
     b68:	01000004 	tsteq	r0, r4
     b6c:	00c703b5 	strheq	r0, [r7], #53	; 0x35
     b70:	91020000 	mrsls	r0, (UNDEF: 2)
     b74:	019f1868 	orrseq	r1, pc, r8, ror #16
     b78:	b7010000 	strlt	r0, [r1, -r0]
     b7c:	0000c703 	andeq	ip, r0, r3, lsl #14
     b80:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     b84:	03311500 	teqeq	r1, #0, 10
     b88:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
     b8c:	0002dc03 	andeq	sp, r2, r3, lsl #24
     b90:	00004020 	andeq	r4, r0, r0, lsr #32
     b94:	c99c0100 	ldmibgt	ip, {r8}
     b98:	1600000b 	strne	r0, [r0], -fp
     b9c:	00000076 	andeq	r0, r0, r6, ror r0
     ba0:	c7038801 	strgt	r8, [r3, -r1, lsl #16]
     ba4:	02000000 	andeq	r0, r0, #0
     ba8:	ee166c91 	mrc	12, 0, r6, cr6, cr1, {4}
     bac:	01000005 	tsteq	r0, r5
     bb0:	00c70388 	sbceq	r0, r7, r8, lsl #7
     bb4:	91020000 	mrsls	r0, (UNDEF: 2)
     bb8:	019f1868 	orrseq	r1, pc, r8, ror #16
     bbc:	8a010000 	bhi	40bc4 <startup-0x1ffbf43c>
     bc0:	0000c703 	andeq	ip, r0, r3, lsl #14
     bc4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     bc8:	057f1500 	ldrbeq	r1, [pc, #-1280]!	; 6d0 <startup-0x1ffff930>
     bcc:	6f010000 	svcvs	0x00010000
     bd0:	0002bc03 	andeq	fp, r2, r3, lsl #24
     bd4:	00002020 	andeq	r2, r0, r0, lsr #32
     bd8:	ef9c0100 	svc	0x009c0100
     bdc:	1600000b 	strne	r0, [r0], -fp
     be0:	00000277 	andeq	r0, r0, r7, ror r2
     be4:	4c036f01 	stcmi	15, cr6, [r3], {1}
     be8:	02000001 	andeq	r0, r0, #1
     bec:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
     bf0:	0000001b 	andeq	r0, r0, fp, lsl r0
     bf4:	9c035d01 	stcls	13, cr5, [r3], {1}
     bf8:	20200002 	eorcs	r0, r0, r2
     bfc:	01000000 	mrseq	r0, (UNDEF: 0)
     c00:	000c159c 	muleq	ip, ip, r5
     c04:	02771600 	rsbseq	r1, r7, #0, 12
     c08:	5d010000 	stcpl	0, cr0, [r1, #-0]
     c0c:	00014c03 	andeq	r4, r1, r3, lsl #24
     c10:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     c14:	05a91500 	streq	r1, [r9, #1280]!	; 0x500
     c18:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     c1c:	00026c03 	andeq	r6, r2, r3, lsl #24
     c20:	00003020 	andeq	r3, r0, r0, lsr #32
     c24:	599c0100 	ldmibpl	ip, {r8}
     c28:	1600000c 	strne	r0, [r0], -ip
     c2c:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
     c30:	c7034901 	strgt	r4, [r3, -r1, lsl #18]
     c34:	02000000 	andeq	r0, r0, #0
     c38:	ce167491 	cfcmpsgt	r7, mvf6, mvf1
     c3c:	01000006 	tsteq	r0, r6
     c40:	00c70349 	sbceq	r0, r7, r9, asr #6
     c44:	91020000 	mrsls	r0, (UNDEF: 2)
     c48:	06d61670 			; <UNDEFINED> instruction: 0x06d61670
     c4c:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     c50:	0000c703 	andeq	ip, r0, r3, lsl #14
     c54:	6c910200 	lfmvs	f0, 4, [r1], {0}
     c58:	034b1500 	movteq	r1, #46336	; 0xb500
     c5c:	dc010000 	stcle	0, cr0, [r1], {-0}
     c60:	00024c02 	andeq	r4, r2, r2, lsl #24
     c64:	00002020 	andeq	r2, r0, r0, lsr #32
     c68:	7f9c0100 	svcvc	0x009c0100
     c6c:	1600000c 	strne	r0, [r0], -ip
     c70:	00000277 	andeq	r0, r0, r7, ror r2
     c74:	4c02dc01 	stcmi	12, cr13, [r2], {1}
     c78:	02000001 	andeq	r0, r0, #1
     c7c:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
     c80:	000003fa 	strdeq	r0, [r0], -sl
     c84:	24025101 	strcs	r5, [r2], #-257	; 0xfffffeff
     c88:	28200002 	stmdacs	r0!, {r1}
     c8c:	01000000 	mrseq	r0, (UNDEF: 0)
     c90:	000cb49c 	muleq	ip, ip, r4
     c94:	07de1600 	ldrbeq	r1, [lr, r0, lsl #12]
     c98:	51010000 	mrspl	r0, (UNDEF: 1)
     c9c:	0000c702 	andeq	ip, r0, r2, lsl #14
     ca0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ca4:	00082e16 	andeq	r2, r8, r6, lsl lr
     ca8:	02510100 	subseq	r0, r1, #0, 2
     cac:	000000c7 	andeq	r0, r0, r7, asr #1
     cb0:	00709102 	rsbseq	r9, r0, r2, lsl #2
     cb4:	0006fc15 	andeq	pc, r6, r5, lsl ip	; <UNPREDICTABLE>
     cb8:	02330100 	eorseq	r0, r3, #0, 2
     cbc:	20000204 	andcs	r0, r0, r4, lsl #4
     cc0:	00000020 	andeq	r0, r0, r0, lsr #32
     cc4:	0cda9c01 	ldcleq	12, cr9, [sl], {1}
     cc8:	77160000 	ldrvc	r0, [r6, -r0]
     ccc:	01000002 	tsteq	r0, r2
     cd0:	014c0233 	cmpeq	ip, r3, lsr r2
     cd4:	91020000 	mrsls	r0, (UNDEF: 2)
     cd8:	3c150077 	ldccc	0, cr0, [r5], {119}	; 0x77
     cdc:	01000009 	tsteq	r0, r9
     ce0:	01c8021b 	biceq	r0, r8, fp, lsl r2
     ce4:	003c2000 	eorseq	r2, ip, r0
     ce8:	9c010000 	stcls	0, cr0, [r1], {-0}
     cec:	00000d3c 	andeq	r0, r0, ip, lsr sp
     cf0:	0002b216 	andeq	fp, r2, r6, lsl r2
     cf4:	021b0100 	andseq	r0, fp, #0, 2
     cf8:	000000c7 	andeq	r0, r0, r7, asr #1
     cfc:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     d00:	000000f9 	strdeq	r0, [r0], -r9
     d04:	c7021b01 	strgt	r1, [r2, -r1, lsl #22]
     d08:	02000000 	andeq	r0, r0, #0
     d0c:	9c167091 	ldcls	0, cr7, [r6], {145}	; 0x91
     d10:	01000000 	mrseq	r0, (UNDEF: 0)
     d14:	00c7021b 	sbceq	r0, r7, fp, lsl r2
     d18:	91020000 	mrsls	r0, (UNDEF: 2)
     d1c:	00bb166c 	adcseq	r1, fp, ip, ror #12
     d20:	1b010000 	blne	40d28 <startup-0x1ffbf2d8>
     d24:	0000c702 	andeq	ip, r0, r2, lsl #14
     d28:	68910200 	ldmvs	r1, {r9}
     d2c:	0000c016 	andeq	ip, r0, r6, lsl r0
     d30:	021b0100 	andseq	r0, fp, #0, 2
     d34:	000000c7 	andeq	r0, r0, r7, asr #1
     d38:	00009102 	andeq	r9, r0, r2, lsl #2
     d3c:	0008f715 	andeq	pc, r8, r5, lsl r7	; <UNPREDICTABLE>
     d40:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
     d44:	200001a8 	andcs	r0, r0, r8, lsr #3
     d48:	00000020 	andeq	r0, r0, r0, lsr #32
     d4c:	0d629c01 	stcleq	12, cr9, [r2, #-4]!
     d50:	77160000 	ldrvc	r0, [r6, -r0]
     d54:	01000002 	tsteq	r0, r2
     d58:	014c01b8 	strheq	r0, [ip, #-24]	; 0xffffffe8
     d5c:	91020000 	mrsls	r0, (UNDEF: 2)
     d60:	60150077 	andsvs	r0, r5, r7, ror r0
     d64:	01000002 	tsteq	r0, r2
     d68:	01640190 			; <UNDEFINED> instruction: 0x01640190
     d6c:	00442000 	subeq	r2, r4, r0
     d70:	9c010000 	stcls	0, cr0, [r1], {-0}
     d74:	00000d88 	andeq	r0, r0, r8, lsl #27
     d78:	00000916 	andeq	r0, r0, r6, lsl r9
     d7c:	01900100 	orrseq	r0, r0, r0, lsl #2
     d80:	00000097 	muleq	r0, r7, r0
     d84:	00779102 	rsbseq	r9, r7, r2, lsl #2
     d88:	00040b15 	andeq	r0, r4, r5, lsl fp
     d8c:	01770100 	cmneq	r7, r0, lsl #2
     d90:	20000144 	andcs	r0, r0, r4, asr #2
     d94:	00000020 	andeq	r0, r0, r0, lsr #32
     d98:	0dae9c01 	stceq	12, cr9, [lr, #4]!
     d9c:	77160000 	ldrvc	r0, [r6, -r0]
     da0:	01000002 	tsteq	r0, r2
     da4:	014c0177 	hvceq	49175	; 0xc017
     da8:	91020000 	mrsls	r0, (UNDEF: 2)
     dac:	b6150077 			; <UNDEFINED> instruction: 0xb6150077
     db0:	01000007 	tsteq	r0, r7
     db4:	01060153 	tsteq	r6, r3, asr r1
     db8:	003e2000 	eorseq	r2, lr, r0
     dbc:	9c010000 	stcls	0, cr0, [r1], {-0}
     dc0:	00000de3 	andeq	r0, r0, r3, ror #27
     dc4:	0007c016 	andeq	ip, r7, r6, lsl r0
     dc8:	01530100 	cmpeq	r3, r0, lsl #2
     dcc:	00000097 	muleq	r0, r7, r0
     dd0:	186f9102 	stmdane	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
     dd4:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
     dd8:	c7015501 	strgt	r5, [r1, -r1, lsl #10]
     ddc:	02000000 	andeq	r0, r0, #0
     de0:	1e007491 	mcrne	4, 0, r7, cr0, cr1, {4}
     de4:	000002d4 	ldrdeq	r0, [r0], -r4
     de8:	73013401 	movwvc	r3, #5121	; 0x1401
     dec:	a8000001 	stmdage	r0, {r0}
     df0:	5e200000 	cdppl	0, 2, cr0, cr0, cr0, {0}
     df4:	01000000 	mrseq	r0, (UNDEF: 0)
     df8:	000e2b9c 	muleq	lr, ip, fp
     dfc:	088b1800 	stmeq	fp, {fp, ip}
     e00:	36010000 	strcc	r0, [r1], -r0
     e04:	0000d201 	andeq	sp, r0, r1, lsl #4
     e08:	68910200 	ldmvs	r1, {r9}
     e0c:	0007d718 	andeq	sp, r7, r8, lsl r7
     e10:	01370100 	teqeq	r7, r0, lsl #2
     e14:	00000173 	andeq	r0, r0, r3, ror r1
     e18:	186f9102 	stmdane	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
     e1c:	000007d4 	ldrdeq	r0, [r0], -r4
     e20:	19013801 	stmdbne	r1, {r0, fp, ip, sp}
     e24:	02000001 	andeq	r0, r0, #1
     e28:	15006e91 	strne	r6, [r0, #-3729]	; 0xfffff16f
     e2c:	00000694 	muleq	r0, r4, r6
     e30:	80011c01 	andhi	r1, r1, r1, lsl #24
     e34:	28200000 	stmdacs	r0!, {}	; <UNPREDICTABLE>
     e38:	01000000 	mrseq	r0, (UNDEF: 0)
     e3c:	000e519c 	muleq	lr, ip, r1
     e40:	078d1600 	streq	r1, [sp, r0, lsl #12]
     e44:	1c010000 	stcne	0, cr0, [r1], {-0}
     e48:	00009701 	andeq	r9, r0, r1, lsl #14
     e4c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e50:	08231f00 	stmdaeq	r3!, {r8, r9, sl, fp, ip}
     e54:	e1010000 	mrs	r0, (UNDEF: 1)
     e58:	20000010 	andcs	r0, r0, r0, lsl r0
     e5c:	00000070 	andeq	r0, r0, r0, ror r0
     e60:	b4009c01 	strlt	r9, [r0], #-3073	; 0xfffff3ff
     e64:	04000002 	streq	r0, [r0], #-2
     e68:	0001eb00 	andeq	lr, r1, r0, lsl #22
     e6c:	e7010400 	str	r0, [r1, -r0, lsl #8]
     e70:	0c000004 	stceq	0, cr0, [r0], {4}
     e74:	00000ab9 			; <UNDEFINED> instruction: 0x00000ab9
     e78:	00000167 	andeq	r0, r0, r7, ror #2
	...
     e84:	000003ab 	andeq	r0, r0, fp, lsr #7
     e88:	7f060102 	svcvc	0x00060102
     e8c:	02000008 	andeq	r0, r0, #8
     e90:	087d0801 	ldmdaeq	sp!, {r0, fp}^
     e94:	02020000 	andeq	r0, r2, #0
     e98:	0006de05 	andeq	sp, r6, r5, lsl #28
     e9c:	080f0300 	stmdaeq	pc, {r8, r9}	; <UNPREDICTABLE>
     ea0:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
     ea4:	00000045 	andeq	r0, r0, r5, asr #32
     ea8:	bf070202 	svclt	0x00070202
     eac:	03000003 	movweq	r0, #3
     eb0:	00000836 	andeq	r0, r0, r6, lsr r8
     eb4:	00574d02 	subseq	r4, r7, r2, lsl #26
     eb8:	04020000 	streq	r0, [r2], #-0
     ebc:	00024605 	andeq	r4, r2, r5, lsl #12
     ec0:	029b0300 	addseq	r0, fp, #0, 6
     ec4:	4f020000 	svcmi	0x00020000
     ec8:	00000069 	andeq	r0, r0, r9, rrx
     ecc:	e0070402 	and	r0, r7, r2, lsl #8
     ed0:	02000000 	andeq	r0, r0, #0
     ed4:	02410508 	subeq	r0, r1, #8, 10	; 0x2000000
     ed8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     edc:	0000db07 	andeq	sp, r0, r7, lsl #22
     ee0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
     ee4:	00746e69 	rsbseq	r6, r4, r9, ror #28
     ee8:	e5070402 	str	r0, [r7, #-1026]	; 0xfffffbfe
     eec:	03000000 	movweq	r0, #0
     ef0:	00000811 	andeq	r0, r0, r1, lsl r8
     ef4:	003a2403 	eorseq	r2, sl, r3, lsl #8
     ef8:	8c050000 	stchi	0, cr0, [r5], {-0}
     efc:	03000000 	movweq	r0, #0
     f00:	00000838 	andeq	r0, r0, r8, lsr r8
     f04:	004c2c03 	subeq	r2, ip, r3, lsl #24
     f08:	9c050000 	stcls	0, cr0, [r5], {-0}
     f0c:	03000000 	movweq	r0, #0
     f10:	0000029d 	muleq	r0, sp, r2
     f14:	005e3003 	subseq	r3, lr, r3
     f18:	ac050000 	stcge	0, cr0, [r5], {-0}
     f1c:	06000000 	streq	r0, [r0], -r0
     f20:	000006c1 	andeq	r0, r0, r1, asr #13
     f24:	a706fa04 	strge	pc, [r6, -r4, lsl #20]
     f28:	07000000 	streq	r0, [r0, -r0]
     f2c:	00000321 	andeq	r0, r0, r1, lsr #6
     f30:	00ac3b05 	adceq	r3, ip, r5, lsl #22
     f34:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
     f38:	5f05c306 	svcpl	0x0005c306
     f3c:	09000001 	stmdbeq	r0, {r0}
     f40:	00000a11 	andeq	r0, r0, r1, lsl sl
     f44:	b705c506 	strlt	ip, [r5, -r6, lsl #10]
     f48:	00000000 	andeq	r0, r0, r0
     f4c:	000a2609 	andeq	r2, sl, r9, lsl #12
     f50:	05c60600 	strbeq	r0, [r6, #1536]	; 0x600
     f54:	000000b7 	strheq	r0, [r0], -r7
     f58:	0a9f0904 	beq	fe7c3370 <APBAHBPrescTable+0xde7c201c>
     f5c:	c7060000 	strgt	r0, [r6, -r0]
     f60:	0000b705 	andeq	fp, r0, r5, lsl #14
     f64:	fb090800 	blx	242f6e <startup-0x1fdbd092>
     f68:	0600000a 	streq	r0, [r0], -sl
     f6c:	00b705c8 	adcseq	r0, r7, r8, asr #11
     f70:	0a0c0000 	beq	300f78 <startup-0x1fcff088>
     f74:	00524449 	subseq	r4, r2, r9, asr #8
     f78:	b705c906 	strlt	ip, [r5, -r6, lsl #18]
     f7c:	10000000 	andne	r0, r0, r0
     f80:	52444f0a 	subpl	r4, r4, #10, 30	; 0x28
     f84:	05ca0600 	strbeq	r0, [sl, #1536]	; 0x600
     f88:	000000b7 	strheq	r0, [r0], -r7
     f8c:	0b5b0914 	bleq	16c33e4 <startup-0x1e93cc1c>
     f90:	cb060000 	blgt	180f98 <startup-0x1fe7f068>
     f94:	00009705 	andeq	r9, r0, r5, lsl #14
     f98:	3a091800 	bcc	246fa0 <startup-0x1fdb9060>
     f9c:	0600000a 	streq	r0, [r0], -sl
     fa0:	009705cc 	addseq	r0, r7, ip, asr #11
     fa4:	091a0000 	ldmdbeq	sl, {}	; <UNPREDICTABLE>
     fa8:	000009c6 	andeq	r0, r0, r6, asr #19
     fac:	b705cd06 	strlt	ip, [r5, -r6, lsl #26]
     fb0:	1c000000 	stcne	0, cr0, [r0], {-0}
     fb4:	5246410a 	subpl	r4, r6, #-2147483646	; 0x80000002
     fb8:	05ce0600 	strbeq	r0, [lr, #1536]	; 0x600
     fbc:	0000016f 	andeq	r0, r0, pc, ror #2
     fc0:	b70b0020 	strlt	r0, [fp, -r0, lsr #32]
     fc4:	6f000000 	svcvs	0x00000000
     fc8:	0c000001 	stceq	0, cr0, [r0], {1}
     fcc:	00000085 	andeq	r0, r0, r5, lsl #1
     fd0:	5f050001 	svcpl	0x00050001
     fd4:	0d000001 	stceq	0, cr0, [r0, #-4]
     fd8:	00000aac 	andeq	r0, r0, ip, lsr #21
     fdc:	d305cf06 	movwle	ip, #24326	; 0x5f06
     fe0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     fe4:	002c0107 	eoreq	r0, ip, r7, lsl #2
     fe8:	42070000 	andmi	r0, r7, #0
     fec:	000001a6 	andeq	r0, r0, r6, lsr #3
     ff0:	000a2d0f 	andeq	r2, sl, pc, lsl #26
     ff4:	6a0f0000 	bvs	3c0ffc <startup-0x1fc3f004>
     ff8:	0100000b 	tsteq	r0, fp
     ffc:	0009cb0f 	andeq	ip, r9, pc, lsl #22
    1000:	040f0200 	streq	r0, [pc], #-512	; 1008 <startup-0x1fffeff8>
    1004:	0300000a 	movweq	r0, #10
    1008:	0b780300 	bleq	1e01c10 <startup-0x1e1fe3f0>
    100c:	47070000 	strmi	r0, [r7, -r0]
    1010:	00000180 	andeq	r0, r0, r0, lsl #3
    1014:	2c01070e 	stccs	7, cr0, [r1], {14}
    1018:	07000000 	streq	r0, [r0, -r0]
    101c:	0001cb4f 	andeq	ip, r1, pc, asr #22
    1020:	0b010f00 	bleq	44c28 <startup-0x1ffbb3d8>
    1024:	0f000000 	svceq	0x00000000
    1028:	000009e7 	andeq	r0, r0, r7, ror #19
    102c:	1c030001 	stcne	0, cr0, [r3], {1}
    1030:	0700000b 	streq	r0, [r0, -fp]
    1034:	0001b152 	andeq	fp, r1, r2, asr r1
    1038:	01070e00 	tsteq	r7, r0, lsl #28
    103c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1040:	01fc5a07 	mvnseq	r5, r7, lsl #20
    1044:	f50f0000 			; <UNDEFINED> instruction: 0xf50f0000
    1048:	00000009 	andeq	r0, r0, r9
    104c:	000a6a0f 	andeq	r6, sl, pc, lsl #20
    1050:	5a0f0100 	bpl	3c1458 <startup-0x1fc3eba8>
    1054:	0200000a 	andeq	r0, r0, #10
    1058:	000a400f 	andeq	r4, sl, pc
    105c:	03000300 	movweq	r0, #768	; 0x300
    1060:	00000a8d 	andeq	r0, r0, sp, lsl #21
    1064:	01d65f07 	bicseq	r5, r6, r7, lsl #30
    1068:	070e0000 	streq	r0, [lr, -r0]
    106c:	00002c01 	andeq	r2, r0, r1, lsl #24
    1070:	276e0700 	strbcs	r0, [lr, -r0, lsl #14]!
    1074:	0f000002 	svceq	0x00000002
    1078:	00000a7c 	andeq	r0, r0, ip, ror sl
    107c:	0b0f0f00 	bleq	3c4c84 <startup-0x1fc3b37c>
    1080:	0f010000 	svceq	0x00010000
    1084:	000009d8 	ldrdeq	r0, [r0], -r8
    1088:	4a030002 	bmi	c1098 <startup-0x1ff3ef68>
    108c:	0700000b 	streq	r0, [r0, -fp]
    1090:	00020772 	andeq	r0, r2, r2, ror r7
    1094:	07081000 	streq	r1, [r8, -r0]
    1098:	00027784 	andeq	r7, r2, r4, lsl #15
    109c:	0b611100 	bleq	18454a4 <startup-0x1e7bab5c>
    10a0:	86070000 	strhi	r0, [r7], -r0
    10a4:	000000ac 	andeq	r0, r0, ip, lsr #1
    10a8:	0a1c1100 	beq	7054b0 <startup-0x1f8fab50>
    10ac:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
    10b0:	000001a6 	andeq	r0, r0, r6, lsr #3
    10b4:	09bb1104 	ldmibeq	fp!, {r2, r8, ip}
    10b8:	8c070000 	stchi	0, cr0, [r7], {-0}
    10bc:	000001fc 	strdeq	r0, [r0], -ip
    10c0:	0b2e1105 	bleq	b854dc <startup-0x1f47ab24>
    10c4:	8f070000 	svchi	0x00070000
    10c8:	000001cb 	andeq	r0, r0, fp, asr #3
    10cc:	0a501106 	beq	14054ec <startup-0x1ebfab14>
    10d0:	92070000 	andls	r0, r7, #0
    10d4:	00000227 	andeq	r0, r0, r7, lsr #4
    10d8:	39030007 	stmdbcc	r3, {r0, r1, r2}
    10dc:	0700000b 	streq	r0, [r0, -fp]
    10e0:	00023294 	muleq	r2, r4, r2
    10e4:	0aa71200 	beq	fe9c58ec <APBAHBPrescTable+0xde9c4598>
    10e8:	16010000 	strne	r0, [r1], -r0
    10ec:	20000d00 	andcs	r0, r0, r0, lsl #26
    10f0:	0000002c 	andeq	r0, r0, ip, lsr #32
    10f4:	02a69c01 	adceq	r9, r6, #256	; 0x100
    10f8:	17130000 	ldrne	r0, [r3, -r0]
    10fc:	0100000a 	tsteq	r0, sl
    1100:	00027718 	andeq	r7, r2, r8, lsl r7
    1104:	70910200 	addsvc	r0, r1, r0, lsl #4
    1108:	09b31400 	ldmibeq	r3!, {sl, ip}
    110c:	0a010000 	beq	41114 <startup-0x1ffbeeec>
    1110:	20000000 	andcs	r0, r0, r0
    1114:	0000000c 	andeq	r0, r0, ip
    1118:	23009c01 	movwcs	r9, #3073	; 0xc01
    111c:	04000006 	streq	r0, [r0], #-6
    1120:	00030c00 	andeq	r0, r3, r0, lsl #24
    1124:	e7010400 	str	r0, [r1, -r0, lsl #8]
    1128:	0c000004 	stceq	0, cr0, [r0], {4}
    112c:	00000ca3 	andeq	r0, r0, r3, lsr #25
    1130:	00000167 	andeq	r0, r0, r7, ror #2
    1134:	20000d2c 	andcs	r0, r0, ip, lsr #26
    1138:	0000050e 	andeq	r0, r0, lr, lsl #10
    113c:	00000565 	andeq	r0, r0, r5, ror #10
    1140:	7f060102 	svcvc	0x00060102
    1144:	03000008 	movweq	r0, #8
    1148:	0000006c 	andeq	r0, r0, ip, rrx
    114c:	00372b02 	eorseq	r2, r7, r2, lsl #22
    1150:	01020000 	mrseq	r0, (UNDEF: 2)
    1154:	00087d08 	andeq	r7, r8, r8, lsl #26
    1158:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    115c:	000006de 	ldrdeq	r0, [r0], -lr
    1160:	00080f03 	andeq	r0, r8, r3, lsl #30
    1164:	50390200 	eorspl	r0, r9, r0, lsl #4
    1168:	02000000 	andeq	r0, r0, #0
    116c:	03bf0702 			; <UNDEFINED> instruction: 0x03bf0702
    1170:	36030000 	strcc	r0, [r3], -r0
    1174:	02000008 	andeq	r0, r0, #8
    1178:	0000624d 	andeq	r6, r0, sp, asr #4
    117c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    1180:	00000246 	andeq	r0, r0, r6, asr #4
    1184:	00029b03 	andeq	r9, r2, r3, lsl #22
    1188:	744f0200 	strbvc	r0, [pc], #-512	; 1190 <startup-0x1fffee70>
    118c:	02000000 	andeq	r0, r0, #0
    1190:	00e00704 	rsceq	r0, r0, r4, lsl #14
    1194:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1198:	00024105 	andeq	r4, r2, r5, lsl #2
    119c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    11a0:	000000db 	ldrdeq	r0, [r0], -fp
    11a4:	69050404 	stmdbvs	r5, {r2, sl}
    11a8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    11ac:	00e50704 	rsceq	r0, r5, r4, lsl #14
    11b0:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
    11b4:	03000000 	movweq	r0, #0
    11b8:	00002c18 	andeq	r2, r0, r8, lsl ip
    11bc:	08110300 	ldmdaeq	r1, {r8, r9}
    11c0:	24030000 	strcs	r0, [r3], #-0
    11c4:	00000045 	andeq	r0, r0, r5, asr #32
    11c8:	0000a205 	andeq	sl, r0, r5, lsl #4
    11cc:	08380300 	ldmdaeq	r8!, {r8, r9}
    11d0:	2c030000 	stccs	0, cr0, [r3], {-0}
    11d4:	00000057 	andeq	r0, r0, r7, asr r0
    11d8:	0000b205 	andeq	fp, r0, r5, lsl #4
    11dc:	029d0300 	addseq	r0, sp, #0, 6
    11e0:	30030000 	andcc	r0, r3, r0
    11e4:	00000069 	andeq	r0, r0, r9, rrx
    11e8:	0000c205 	andeq	ip, r0, r5, lsl #4
    11ec:	06c10600 	strbeq	r0, [r1], r0, lsl #12
    11f0:	fa040000 	blx	1011f8 <startup-0x1fefee08>
    11f4:	0000bd06 	andeq	fp, r0, r6, lsl #26
    11f8:	03210700 			; <UNDEFINED> instruction: 0x03210700
    11fc:	3b050000 	blcc	141204 <startup-0x1febedfc>
    1200:	000000c2 	andeq	r0, r0, r2, asr #1
    1204:	37010708 	strcc	r0, [r1, -r8, lsl #14]
    1208:	06000000 	streq	r0, [r0], -r0
    120c:	0104035f 	tsteq	r4, pc, asr r3
    1210:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    1214:	00000003 	andeq	r0, r0, r3
    1218:	0001cd09 	andeq	ip, r1, r9, lsl #26
    121c:	0a000100 	beq	1624 <startup-0x1fffe9dc>
    1220:	05c30628 	strbeq	r0, [r3, #1576]	; 0x628
    1224:	00000190 	muleq	r0, r0, r1
    1228:	000a110b 	andeq	r1, sl, fp, lsl #2
    122c:	05c50600 	strbeq	r0, [r5, #1536]	; 0x600
    1230:	000000cd 	andeq	r0, r0, sp, asr #1
    1234:	0a260b00 	beq	983e3c <startup-0x1f67c1c4>
    1238:	c6060000 	strgt	r0, [r6], -r0
    123c:	0000cd05 	andeq	ip, r0, r5, lsl #26
    1240:	9f0b0400 	svcls	0x000b0400
    1244:	0600000a 	streq	r0, [r0], -sl
    1248:	00cd05c7 	sbceq	r0, sp, r7, asr #11
    124c:	0b080000 	bleq	201254 <startup-0x1fdfedac>
    1250:	00000afb 	strdeq	r0, [r0], -fp
    1254:	cd05c806 	stcgt	8, cr12, [r5, #-24]	; 0xffffffe8
    1258:	0c000000 	stceq	0, cr0, [r0], {-0}
    125c:	5244490c 	subpl	r4, r4, #12, 18	; 0x30000
    1260:	05c90600 	strbeq	r0, [r9, #1536]	; 0x600
    1264:	000000cd 	andeq	r0, r0, sp, asr #1
    1268:	444f0c10 	strbmi	r0, [pc], #-3088	; 1270 <startup-0x1fffed90>
    126c:	ca060052 	bgt	1813bc <startup-0x1fe7ec44>
    1270:	0000cd05 	andeq	ip, r0, r5, lsl #26
    1274:	5b0b1400 	blpl	2c627c <startup-0x1fd39d84>
    1278:	0600000b 	streq	r0, [r0], -fp
    127c:	00ad05cb 	adceq	r0, sp, fp, asr #11
    1280:	0b180000 	bleq	601288 <startup-0x1f9fed78>
    1284:	00000a3a 	andeq	r0, r0, sl, lsr sl
    1288:	ad05cc06 	stcge	12, cr12, [r5, #-24]	; 0xffffffe8
    128c:	1a000000 	bne	1294 <startup-0x1fffed6c>
    1290:	0009c60b 	andeq	ip, r9, fp, lsl #12
    1294:	05cd0600 	strbeq	r0, [sp, #1536]	; 0x600
    1298:	000000cd 	andeq	r0, r0, sp, asr #1
    129c:	46410c1c 			; <UNDEFINED> instruction: 0x46410c1c
    12a0:	ce060052 	mcrgt	0, 0, r0, cr6, cr2, {2}
    12a4:	0001a005 	andeq	sl, r1, r5
    12a8:	0d002000 	stceq	0, cr2, [r0, #-0]
    12ac:	000000cd 	andeq	r0, r0, sp, asr #1
    12b0:	000001a0 	andeq	r0, r0, r0, lsr #3
    12b4:	0000900e 	andeq	r9, r0, lr
    12b8:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
    12bc:	00000190 	muleq	r0, r0, r1
    12c0:	000aac0f 	andeq	sl, sl, pc, lsl #24
    12c4:	05cf0600 	strbeq	r0, [pc, #1536]	; 18cc <startup-0x1fffe734>
    12c8:	00000104 	andeq	r0, r0, r4, lsl #2
    12cc:	37010710 	smladcc	r1, r0, r7, r0
    12d0:	07000000 	streq	r0, [r0, -r0]
    12d4:	0001d742 	andeq	sp, r1, r2, asr #14
    12d8:	0a2d0900 	beq	b436e0 <startup-0x1f4bc920>
    12dc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    12e0:	00000b6a 	andeq	r0, r0, sl, ror #22
    12e4:	09cb0901 	stmibeq	fp, {r0, r8, fp}^
    12e8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    12ec:	00000a04 	andeq	r0, r0, r4, lsl #20
    12f0:	78030003 	stmdavc	r3, {r0, r1}
    12f4:	0700000b 	streq	r0, [r0, -fp]
    12f8:	0001b147 	andeq	fp, r1, r7, asr #2
    12fc:	01071000 	mrseq	r1, (UNDEF: 7)
    1300:	00000037 	andeq	r0, r0, r7, lsr r0
    1304:	01fc4f07 	mvnseq	r4, r7, lsl #30
    1308:	01090000 	mrseq	r0, (UNDEF: 9)
    130c:	0000000b 	andeq	r0, r0, fp
    1310:	0009e709 	andeq	lr, r9, r9, lsl #14
    1314:	03000100 	movweq	r0, #256	; 0x100
    1318:	00000b1c 	andeq	r0, r0, ip, lsl fp
    131c:	01e25207 	mvneq	r5, r7, lsl #4
    1320:	07100000 	ldreq	r0, [r0, -r0]
    1324:	00003701 	andeq	r3, r0, r1, lsl #14
    1328:	2d5a0700 	ldclcs	7, cr0, [sl, #-0]
    132c:	09000002 	stmdbeq	r0, {r1}
    1330:	000009f5 	strdeq	r0, [r0], -r5
    1334:	0a6a0900 	beq	1a8373c <startup-0x1e57c8c4>
    1338:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    133c:	00000a5a 	andeq	r0, r0, sl, asr sl
    1340:	0a400902 	beq	1003750 <startup-0x1effc8b0>
    1344:	00030000 	andeq	r0, r3, r0
    1348:	000a8d03 	andeq	r8, sl, r3, lsl #26
    134c:	075f0700 	ldrbeq	r0, [pc, -r0, lsl #14]
    1350:	10000002 	andne	r0, r0, r2
    1354:	00370107 	eorseq	r0, r7, r7, lsl #2
    1358:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    135c:	00000258 	andeq	r0, r0, r8, asr r2
    1360:	000a7c09 	andeq	r7, sl, r9, lsl #24
    1364:	0f090000 	svceq	0x00090000
    1368:	0100000b 	tsteq	r0, fp
    136c:	0009d809 	andeq	sp, r9, r9, lsl #16
    1370:	03000200 	movweq	r0, #512	; 0x200
    1374:	00000b4a 	andeq	r0, r0, sl, asr #22
    1378:	02387207 	eorseq	r7, r8, #1879048192	; 0x70000000
    137c:	07100000 	ldreq	r0, [r0, -r0]
    1380:	00003701 	andeq	r3, r0, r1, lsl #14
    1384:	7d7a0700 	ldclvc	7, cr0, [sl, #-0]
    1388:	09000002 	stmdbeq	r0, {r1}
    138c:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1390:	0b900900 	bleq	fe403798 <APBAHBPrescTable+0xde402444>
    1394:	00010000 	andeq	r0, r1, r0
    1398:	000c7d03 	andeq	r7, ip, r3, lsl #26
    139c:	637d0700 	cmnvs	sp, #0, 14
    13a0:	11000002 	tstne	r0, r2
    13a4:	cd840708 	stcgt	7, cr0, [r4, #32]
    13a8:	12000002 	andne	r0, r0, #2
    13ac:	00000b61 	andeq	r0, r0, r1, ror #22
    13b0:	00c28607 	sbceq	r8, r2, r7, lsl #12
    13b4:	12000000 	andne	r0, r0, #0
    13b8:	00000a1c 	andeq	r0, r0, ip, lsl sl
    13bc:	01d78907 	bicseq	r8, r7, r7, lsl #18
    13c0:	12040000 	andne	r0, r4, #0
    13c4:	000009bb 			; <UNDEFINED> instruction: 0x000009bb
    13c8:	022d8c07 	eoreq	r8, sp, #1792	; 0x700
    13cc:	12050000 	andne	r0, r5, #0
    13d0:	00000b2e 	andeq	r0, r0, lr, lsr #22
    13d4:	01fc8f07 	mvnseq	r8, r7, lsl #30
    13d8:	12060000 	andne	r0, r6, #0
    13dc:	00000a50 	andeq	r0, r0, r0, asr sl
    13e0:	02589207 	subseq	r9, r8, #1879048192	; 0x70000000
    13e4:	00070000 	andeq	r0, r7, r0
    13e8:	000b3903 	andeq	r3, fp, r3, lsl #18
    13ec:	88940700 	ldmhi	r4, {r8, r9, sl}
    13f0:	13000002 	movwne	r0, #2
    13f4:	00000d2a 	andeq	r0, r0, sl, lsr #26
    13f8:	96024301 	strls	r4, [r2], -r1, lsl #6
    13fc:	a4200011 	strtge	r0, [r0], #-17	; 0xffffffef
    1400:	01000000 	mrseq	r0, (UNDEF: 0)
    1404:	00033a9c 	muleq	r3, ip, sl
    1408:	0c9d1400 	cfldrseq	mvf1, [sp], {0}
    140c:	43010000 	movwmi	r0, #4096	; 0x1000
    1410:	00033a02 	andeq	r3, r3, r2, lsl #20
    1414:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1418:	000c4814 	andeq	r4, ip, r4, lsl r8
    141c:	02430100 	subeq	r0, r3, #0, 2
    1420:	000000a2 	andeq	r0, r0, r2, lsr #1
    1424:	146a9102 	strbtne	r9, [sl], #-258	; 0xfffffefe
    1428:	00000bac 	andeq	r0, r0, ip, lsr #23
    142c:	97024301 	strls	r4, [r2, -r1, lsl #6]
    1430:	02000000 	andeq	r0, r0, #0
    1434:	b4156991 	ldrlt	r6, [r5], #-2449	; 0xfffff66f
    1438:	0100000b 	tsteq	r0, fp
    143c:	00c20245 	sbceq	r0, r2, r5, asr #4
    1440:	91020000 	mrsls	r0, (UNDEF: 2)
    1444:	0d231574 	cfstr32eq	mvfx1, [r3, #-464]!	; 0xfffffe30
    1448:	46010000 	strmi	r0, [r1], -r0
    144c:	0000c202 	andeq	ip, r0, r2, lsl #4
    1450:	70910200 	addsvc	r0, r1, r0, lsl #4
    1454:	a5041600 	strge	r1, [r4, #-1536]	; 0xfffffa00
    1458:	13000001 	movwne	r0, #1
    145c:	00000d13 	andeq	r0, r0, r3, lsl sp
    1460:	7201f001 	andvc	pc, r1, #1
    1464:	24200011 	strtcs	r0, [r0], #-17	; 0xffffffef
    1468:	01000000 	mrseq	r0, (UNDEF: 0)
    146c:	0003759c 	muleq	r3, ip, r5
    1470:	0c9d1400 	cfldrseq	mvf1, [sp], {0}
    1474:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1478:	00033a01 	andeq	r3, r3, r1, lsl #20
    147c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1480:	000b6114 	andeq	r6, fp, r4, lsl r1
    1484:	01f00100 	mvnseq	r0, r0, lsl #2
    1488:	000000a2 	andeq	r0, r0, r2, lsr #1
    148c:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1490:	000c9213 	andeq	r9, ip, r3, lsl r2
    1494:	01e00100 	mvneq	r0, r0, lsl #2
    1498:	20001154 	andcs	r1, r0, r4, asr r1
    149c:	0000001e 	andeq	r0, r0, lr, lsl r0
    14a0:	03aa9c01 			; <UNDEFINED> instruction: 0x03aa9c01
    14a4:	9d140000 	ldcls	0, cr0, [r4, #-0]
    14a8:	0100000c 	tsteq	r0, ip
    14ac:	033a01e0 	teqeq	sl, #224, 2	; 0x38
    14b0:	91020000 	mrsls	r0, (UNDEF: 2)
    14b4:	0c401474 	cfstrdeq	mvd1, [r0], {116}	; 0x74
    14b8:	e0010000 	and	r0, r1, r0
    14bc:	0000a201 	andeq	sl, r0, r1, lsl #4
    14c0:	72910200 	addsvc	r0, r1, #0, 4
    14c4:	0bda1300 	bleq	ff6860cc <APBAHBPrescTable+0xdf684d78>
    14c8:	c7010000 	strgt	r0, [r1, -r0]
    14cc:	00111a01 	andseq	r1, r1, r1, lsl #20
    14d0:	00003a20 	andeq	r3, r0, r0, lsr #20
    14d4:	ee9c0100 	fmle	f0, f4, f0
    14d8:	14000003 	strne	r0, [r0], #-3
    14dc:	00000c9d 	muleq	r0, sp, ip
    14e0:	3a01c701 	bcc	730ec <startup-0x1ff8cf14>
    14e4:	02000003 	andeq	r0, r0, #3
    14e8:	61147491 			; <UNDEFINED> instruction: 0x61147491
    14ec:	0100000b 	tsteq	r0, fp
    14f0:	00a201c7 	adceq	r0, r2, r7, asr #3
    14f4:	91020000 	mrsls	r0, (UNDEF: 2)
    14f8:	0bc91472 	bleq	ff2466c8 <APBAHBPrescTable+0xdf245374>
    14fc:	c7010000 	strgt	r0, [r1, -r0]
    1500:	00027d01 	andeq	r7, r2, r1, lsl #26
    1504:	71910200 	orrsvc	r0, r1, r0, lsl #4
    1508:	0bff1300 	bleq	fffc6110 <APBAHBPrescTable+0xdffc4dbc>
    150c:	b1010000 	mrslt	r0, (UNDEF: 1)
    1510:	0010fc01 	andseq	pc, r0, r1, lsl #24
    1514:	00001e20 	andeq	r1, r0, r0, lsr #28
    1518:	239c0100 	orrscs	r0, ip, #0, 2
    151c:	14000004 	strne	r0, [r0], #-4
    1520:	00000c9d 	muleq	r0, sp, ip
    1524:	3a01b101 	bcc	6d930 <startup-0x1ff926d0>
    1528:	02000003 	andeq	r0, r0, #3
    152c:	61147491 			; <UNDEFINED> instruction: 0x61147491
    1530:	0100000b 	tsteq	r0, fp
    1534:	00a201b1 	strhteq	r0, [r2], r1
    1538:	91020000 	mrsls	r0, (UNDEF: 2)
    153c:	e8130072 	ldmda	r3, {r1, r4, r5, r6}
    1540:	0100000b 	tsteq	r0, fp
    1544:	10de019c 	smullsne	r0, lr, ip, r1
    1548:	001e2000 	andseq	r2, lr, r0
    154c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1550:	00000458 	andeq	r0, r0, r8, asr r4
    1554:	000c9d14 	andeq	r9, ip, r4, lsl sp
    1558:	019c0100 	orrseq	r0, ip, r0, lsl #2
    155c:	0000033a 	andeq	r0, r0, sl, lsr r3
    1560:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    1564:	00000b61 	andeq	r0, r0, r1, ror #22
    1568:	a2019c01 	andge	r9, r1, #256	; 0x100
    156c:	02000000 	andeq	r0, r0, #0
    1570:	17007291 			; <UNDEFINED> instruction: 0x17007291
    1574:	00000b98 	muleq	r0, r8, fp
    1578:	a2018801 	andge	r8, r1, #65536	; 0x10000
    157c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    1580:	16200010 			; <UNDEFINED> instruction: 0x16200010
    1584:	01000000 	mrseq	r0, (UNDEF: 0)
    1588:	0004829c 	muleq	r4, ip, r2
    158c:	0c9d1400 	cfldrseq	mvf1, [sp], {0}
    1590:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    1594:	00033a01 	andeq	r3, r3, r1, lsl #20
    1598:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    159c:	0d3b1700 	ldceq	7, cr1, [fp, #-0]
    15a0:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    15a4:	00009701 	andeq	r9, r0, r1, lsl #14
    15a8:	00108600 	andseq	r8, r0, r0, lsl #12
    15ac:	00004220 	andeq	r4, r0, r0, lsr #4
    15b0:	ca9c0100 	bgt	fe7019b8 <APBAHBPrescTable+0xde700664>
    15b4:	14000004 	strne	r0, [r0], #-4
    15b8:	00000c9d 	muleq	r0, sp, ip
    15bc:	3a016e01 	bcc	5cdc8 <startup-0x1ffa3238>
    15c0:	02000003 	andeq	r0, r0, #3
    15c4:	61146c91 			; <UNDEFINED> instruction: 0x61146c91
    15c8:	0100000b 	tsteq	r0, fp
    15cc:	00a2016e 	adceq	r0, r2, lr, ror #2
    15d0:	91020000 	mrsls	r0, (UNDEF: 2)
    15d4:	02ea156a 	rsceq	r1, sl, #444596224	; 0x1a800000
    15d8:	70010000 	andvc	r0, r1, r0
    15dc:	00009701 	andeq	r9, r0, r1, lsl #14
    15e0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    15e4:	0c571700 	mrrceq	7, 0, r1, r7, cr0
    15e8:	5d010000 	stcpl	0, cr0, [r1, #-0]
    15ec:	0000a201 	andeq	sl, r0, r1, lsl #4
    15f0:	00107000 	andseq	r7, r0, r0
    15f4:	00001620 	andeq	r1, r0, r0, lsr #12
    15f8:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
    15fc:	14000004 	strne	r0, [r0], #-4
    1600:	00000c9d 	muleq	r0, sp, ip
    1604:	3a015d01 	bcc	58a10 <startup-0x1ffa75f0>
    1608:	02000003 	andeq	r0, r0, #3
    160c:	17007491 			; <UNDEFINED> instruction: 0x17007491
    1610:	00000c1a 	andeq	r0, r0, sl, lsl ip
    1614:	97014301 	strls	r4, [r1, -r1, lsl #6]
    1618:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    161c:	42200010 	eormi	r0, r0, #16
    1620:	01000000 	mrseq	r0, (UNDEF: 0)
    1624:	00053c9c 	muleq	r5, ip, ip
    1628:	0c9d1400 	cfldrseq	mvf1, [sp], {0}
    162c:	43010000 	movwmi	r0, #4096	; 0x1000
    1630:	00033a01 	andeq	r3, r3, r1, lsl #20
    1634:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1638:	000b6114 	andeq	r6, fp, r4, lsl r1
    163c:	01430100 	mrseq	r0, (UNDEF: 83)
    1640:	000000a2 	andeq	r0, r0, r2, lsr #1
    1644:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    1648:	000002ea 	andeq	r0, r0, sl, ror #5
    164c:	97014501 	strls	r4, [r1, -r1, lsl #10]
    1650:	02000000 	andeq	r0, r0, #0
    1654:	13007791 	movwne	r7, #1937	; 0x791
    1658:	00000c6a 	andeq	r0, r0, sl, ror #24
    165c:	e8011501 	stmda	r1, {r0, r8, sl, ip}
    1660:	4620000f 	strtmi	r0, [r0], -pc
    1664:	01000000 	mrseq	r0, (UNDEF: 0)
    1668:	0005809c 	muleq	r5, ip, r0
    166c:	0c9d1400 	cfldrseq	mvf1, [sp], {0}
    1670:	15010000 	strne	r0, [r1, #-0]
    1674:	00033a01 	andeq	r3, r3, r1, lsl #20
    1678:	6c910200 	lfmvs	f0, 4, [r1], {0}
    167c:	000b6114 	andeq	r6, fp, r4, lsl r1
    1680:	01150100 	tsteq	r5, r0, lsl #2
    1684:	000000a2 	andeq	r0, r0, r2, lsr #1
    1688:	186a9102 	stmdane	sl!, {r1, r8, ip, pc}^
    168c:	00706d74 	rsbseq	r6, r0, r4, ror sp
    1690:	cd011701 	stcgt	7, cr1, [r1, #-4]
    1694:	02000000 	andeq	r0, r0, #0
    1698:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
    169c:	00000bb9 			; <UNDEFINED> instruction: 0x00000bb9
    16a0:	0fb4fe01 	svceq	0x00b4fe01
    16a4:	00342000 	eorseq	r2, r4, r0
    16a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    16ac:	000005a4 	andeq	r0, r0, r4, lsr #11
    16b0:	000c301a 	andeq	r3, ip, sl, lsl r0
    16b4:	a4fe0100 	ldrbtge	r0, [lr], #256	; 0x100
    16b8:	02000005 	andeq	r0, r0, #5
    16bc:	16007491 			; <UNDEFINED> instruction: 0x16007491
    16c0:	0002cd04 	andeq	ip, r2, r4, lsl #26
    16c4:	0bf51900 	bleq	ffd47acc <APBAHBPrescTable+0xdfd46778>
    16c8:	ca010000 	bgt	416d0 <startup-0x1ffbe930>
    16cc:	20000e9c 	mulcs	r0, ip, lr
    16d0:	00000118 	andeq	r0, r0, r8, lsl r1
    16d4:	06069c01 	streq	r9, [r6], -r1, lsl #24
    16d8:	9d1a0000 	ldcls	0, cr0, [sl, #-0]
    16dc:	0100000c 	tsteq	r0, ip
    16e0:	00033aca 	andeq	r3, r3, sl, asr #21
    16e4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    16e8:	000c301a 	andeq	r3, ip, sl, lsl r0
    16ec:	a4ca0100 	strbge	r0, [sl], #256	; 0x100
    16f0:	02000005 	andeq	r0, r0, #5
    16f4:	891b6091 	ldmdbhi	fp, {r0, r4, r7, sp, lr}
    16f8:	0100000b 	tsteq	r0, fp
    16fc:	0000c2cc 	andeq	ip, r0, ip, asr #5
    1700:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1704:	736f701c 	cmnvc	pc, #28
    1708:	c2cc0100 	sbcgt	r0, ip, #0, 2
    170c:	02000000 	andeq	r0, r0, #0
    1710:	871b7091 			; <UNDEFINED> instruction: 0x871b7091
    1714:	0100000c 	tsteq	r0, ip
    1718:	0000c2cc 	andeq	ip, r0, ip, asr #5
    171c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1720:	0c0e1d00 	stceq	13, cr1, [lr], {-0}
    1724:	7f010000 	svcvc	0x00010000
    1728:	20000d2c 	andcs	r0, r0, ip, lsr #26
    172c:	00000170 	andeq	r0, r0, r0, ror r1
    1730:	9d1a9c01 	ldcls	12, cr9, [sl, #-4]
    1734:	0100000c 	tsteq	r0, ip
    1738:	00033a7f 	andeq	r3, r3, pc, ror sl
    173c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	26050000 	strcs	r0, [r5], -r0
  38:	00134900 	andseq	r4, r3, r0, lsl #18
  3c:	00350600 	eorseq	r0, r5, r0, lsl #12
  40:	00001349 	andeq	r1, r0, r9, asr #6
  44:	49010107 	stmdbmi	r1, {r0, r1, r2, r8}
  48:	00130113 	andseq	r0, r3, r3, lsl r1
  4c:	00210800 	eoreq	r0, r1, r0, lsl #16
  50:	0b2f1349 	bleq	bc4d7c <startup-0x1f43b284>
  54:	34090000 	strcc	r0, [r9], #-0
  58:	3a0e0300 	bcc	380c60 <startup-0x1fc7f3a0>
  5c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  60:	3c193f13 	ldccc	15, cr3, [r9], {19}
  64:	0a000019 	beq	d0 <startup-0x1fffff30>
  68:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  6c:	0b3b0b3a 	bleq	ec2d5c <startup-0x1f13d2a4>
  70:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  74:	0000193c 	andeq	r1, r0, ip, lsr r9
  78:	3e01040b 	cdpcc	4, 0, cr0, cr1, cr11, {0}
  7c:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
  80:	3b0b3a13 	blcc	2ce8d4 <startup-0x1fd3172c>
  84:	00130105 	andseq	r0, r3, r5, lsl #2
  88:	00280c00 	eoreq	r0, r8, r0, lsl #24
  8c:	0b1c0e03 	bleq	7038a0 <startup-0x1f8fc760>
  90:	280d0000 	stmdacs	sp, {}	; <UNPREDICTABLE>
  94:	1c080300 	stcne	3, cr0, [r8], {-0}
  98:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
  9c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  a4:	00001349 	andeq	r1, r0, r9, asr #6
  a8:	0b01130f 	bleq	44cec <startup-0x1ffbb314>
  ac:	3b0b3a0b 	blcc	2ce8e0 <startup-0x1fd31720>
  b0:	00130105 	andseq	r0, r3, r5, lsl #2
  b4:	000d1000 	andeq	r1, sp, r0
  b8:	0b3a0803 	bleq	e820cc <startup-0x1f17df34>
  bc:	1349053b 	movtne	r0, #38203	; 0x953b
  c0:	00000b38 	andeq	r0, r0, r8, lsr fp
  c4:	03000d11 	movweq	r0, #3345	; 0xd11
  c8:	3b0b3a0e 	blcc	2ce908 <startup-0x1fd316f8>
  cc:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  d0:	1200000b 	andne	r0, r0, #11
  d4:	0b0b0113 	bleq	2c0528 <startup-0x1fd3fad8>
  d8:	0b3b0b3a 	bleq	ec2dc8 <startup-0x1f13d238>
  dc:	00001301 	andeq	r1, r0, r1, lsl #6
  e0:	03000d13 	movweq	r0, #3347	; 0xd13
  e4:	3b0b3a0e 	blcc	2ce924 <startup-0x1fd316dc>
  e8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  ec:	1400000b 	strne	r0, [r0], #-11
  f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  f4:	0b3b0b3a 	bleq	ec2de4 <startup-0x1f13d21c>
  f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  fc:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 100:	03193f01 	tsteq	r9, #1, 30
 104:	3b0b3a0e 	blcc	2ce944 <startup-0x1fd316bc>
 108:	11192705 	tstne	r9, r5, lsl #14
 10c:	40061201 	andmi	r1, r6, r1, lsl #4
 110:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 114:	00001301 	andeq	r1, r0, r1, lsl #6
 118:	03000516 	movweq	r0, #1302	; 0x516
 11c:	3b0b3a0e 	blcc	2ce95c <startup-0x1fd316a4>
 120:	02134905 	andseq	r4, r3, #81920	; 0x14000
 124:	17000018 	smladne	r0, r8, r0, r0
 128:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 12c:	0b3a0e03 	bleq	e83940 <startup-0x1f17c6c0>
 130:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 134:	01111349 	tsteq	r1, r9, asr #6
 138:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 13c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 140:	18000013 	stmdane	r0, {r0, r1, r4}
 144:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 148:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 14c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 150:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 154:	03193f00 	tsteq	r9, #0, 30
 158:	3b0b3a0e 	blcc	2ce998 <startup-0x1fd31668>
 15c:	11192705 	tstne	r9, r5, lsl #14
 160:	40061201 	andmi	r1, r6, r1, lsl #4
 164:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 168:	341a0000 	ldrcc	r0, [sl], #-0
 16c:	3a080300 	bcc	200d74 <startup-0x1fdff28c>
 170:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 174:	00180213 	andseq	r0, r8, r3, lsl r2
 178:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 17c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 180:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 184:	01111927 	tsteq	r1, r7, lsr #18
 188:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 18c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 190:	1c000013 	stcne	0, cr0, [r0], {19}
 194:	0b0b000f 	bleq	2c01d8 <startup-0x1fd3fe28>
 198:	00001349 	andeq	r1, r0, r9, asr #6
 19c:	3f002e1d 	svccc	0x00002e1d
 1a0:	3a0e0319 	bcc	380e0c <startup-0x1fc7f1f4>
 1a4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 1a8:	11134919 	tstne	r3, r9, lsl r9
 1ac:	40061201 	andmi	r1, r6, r1, lsl #4
 1b0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1b4:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 1b8:	03193f01 	tsteq	r9, #1, 30
 1bc:	3b0b3a0e 	blcc	2ce9fc <startup-0x1fd31604>
 1c0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 1c4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1c8:	96184006 	ldrls	r4, [r8], -r6
 1cc:	13011942 	movwne	r1, #6466	; 0x1942
 1d0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 1d4:	03193f00 	tsteq	r9, #0, 30
 1d8:	3b0b3a0e 	blcc	2cea18 <startup-0x1fd315e8>
 1dc:	1119270b 	tstne	r9, fp, lsl #14
 1e0:	40061201 	andmi	r1, r6, r1, lsl #4
 1e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1e8:	01000000 	mrseq	r0, (UNDEF: 0)
 1ec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 1f0:	0e030b13 	vmoveq.32	d3[0], r0
 1f4:	17550e1b 	smmlane	r5, fp, lr, r0
 1f8:	17100111 			; <UNDEFINED> instruction: 0x17100111
 1fc:	24020000 	strcs	r0, [r2], #-0
 200:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 204:	000e030b 	andeq	r0, lr, fp, lsl #6
 208:	00160300 	andseq	r0, r6, r0, lsl #6
 20c:	0b3a0e03 	bleq	e83a20 <startup-0x1f17c5e0>
 210:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 214:	24040000 	strcs	r0, [r4], #-0
 218:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 21c:	0008030b 	andeq	r0, r8, fp, lsl #6
 220:	00350500 	eorseq	r0, r5, r0, lsl #10
 224:	00001349 	andeq	r1, r0, r9, asr #6
 228:	03003406 	movweq	r3, #1030	; 0x406
 22c:	3b0b3a0e 	blcc	2cea6c <startup-0x1fd31594>
 230:	3f134905 	svccc	0x00134905
 234:	00193c19 	andseq	r3, r9, r9, lsl ip
 238:	00340700 	eorseq	r0, r4, r0, lsl #14
 23c:	0b3a0e03 	bleq	e83a50 <startup-0x1f17c5b0>
 240:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 244:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 248:	13080000 	movwne	r0, #32768	; 0x8000
 24c:	3a0b0b01 	bcc	2c2e58 <startup-0x1fd3d1a8>
 250:	01053b0b 	tsteq	r5, fp, lsl #22
 254:	09000013 	stmdbeq	r0, {r0, r1, r4}
 258:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 25c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 260:	0b381349 	bleq	e04f8c <startup-0x1f1fb074>
 264:	0d0a0000 	stceq	0, cr0, [sl, #-0]
 268:	3a080300 	bcc	200e70 <startup-0x1fdff190>
 26c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 270:	000b3813 	andeq	r3, fp, r3, lsl r8
 274:	01010b00 	tsteq	r1, r0, lsl #22
 278:	13011349 	movwne	r1, #4937	; 0x1349
 27c:	210c0000 	mrscs	r0, (UNDEF: 12)
 280:	2f134900 	svccs	0x00134900
 284:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 288:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 28c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 290:	00001349 	andeq	r1, r0, r9, asr #6
 294:	3e01040e 	cdpcc	4, 0, cr0, cr1, cr14, {0}
 298:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 29c:	3b0b3a13 	blcc	2ceaf0 <startup-0x1fd31510>
 2a0:	0013010b 	andseq	r0, r3, fp, lsl #2
 2a4:	00280f00 	eoreq	r0, r8, r0, lsl #30
 2a8:	0b1c0e03 	bleq	703abc <startup-0x1f8fc544>
 2ac:	13100000 	tstne	r0, #0
 2b0:	3a0b0b01 	bcc	2c2ebc <startup-0x1fd3d144>
 2b4:	010b3b0b 	tsteq	fp, fp, lsl #22
 2b8:	11000013 	tstne	r0, r3, lsl r0
 2bc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 2c0:	0b3b0b3a 	bleq	ec2fb0 <startup-0x1f13d050>
 2c4:	0b381349 	bleq	e04ff0 <startup-0x1f1fb010>
 2c8:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 2cc:	03193f01 	tsteq	r9, #1, 30
 2d0:	3b0b3a0e 	blcc	2ceb10 <startup-0x1fd314f0>
 2d4:	1119270b 	tstne	r9, fp, lsl #14
 2d8:	40061201 	andmi	r1, r6, r1, lsl #4
 2dc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2e0:	00001301 	andeq	r1, r0, r1, lsl #6
 2e4:	03003413 	movweq	r3, #1043	; 0x413
 2e8:	3b0b3a0e 	blcc	2ceb28 <startup-0x1fd314d8>
 2ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2f0:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 2f4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2f8:	0b3a0e03 	bleq	e83b0c <startup-0x1f17c4f4>
 2fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 300:	06120111 			; <UNDEFINED> instruction: 0x06120111
 304:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 308:	00000019 	andeq	r0, r0, r9, lsl r0
 30c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 310:	030b130e 	movweq	r1, #45838	; 0xb30e
 314:	110e1b0e 	tstne	lr, lr, lsl #22
 318:	10061201 	andne	r1, r6, r1, lsl #4
 31c:	02000017 	andeq	r0, r0, #23
 320:	0b0b0024 	bleq	2c03b8 <startup-0x1fd3fc48>
 324:	0e030b3e 	vmoveq.16	d3[0], r0
 328:	16030000 	strne	r0, [r3], -r0
 32c:	3a0e0300 	bcc	380f34 <startup-0x1fc7f0cc>
 330:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 334:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 338:	0b0b0024 	bleq	2c03d0 <startup-0x1fd3fc30>
 33c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 340:	35050000 	strcc	r0, [r5, #-0]
 344:	00134900 	andseq	r4, r3, r0, lsl #18
 348:	00340600 	eorseq	r0, r4, r0, lsl #12
 34c:	0b3a0e03 	bleq	e83b60 <startup-0x1f17c4a0>
 350:	1349053b 	movtne	r0, #38203	; 0x953b
 354:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 358:	34070000 	strcc	r0, [r7], #-0
 35c:	3a0e0300 	bcc	380f64 <startup-0x1fc7f09c>
 360:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 364:	3c193f13 	ldccc	15, cr3, [r9], {19}
 368:	08000019 	stmdaeq	r0, {r0, r3, r4}
 36c:	0b3e0104 	bleq	f80784 <startup-0x1f07f87c>
 370:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 374:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 378:	00001301 	andeq	r1, r0, r1, lsl #6
 37c:	03002809 	movweq	r2, #2057	; 0x809
 380:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 384:	01130a00 	tsteq	r3, r0, lsl #20
 388:	0b3a0b0b 	bleq	e82fbc <startup-0x1f17d044>
 38c:	1301053b 	movwne	r0, #5435	; 0x153b
 390:	0d0b0000 	stceq	0, cr0, [fp, #-0]
 394:	3a0e0300 	bcc	380f9c <startup-0x1fc7f064>
 398:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 39c:	000b3813 	andeq	r3, fp, r3, lsl r8
 3a0:	000d0c00 	andeq	r0, sp, r0, lsl #24
 3a4:	0b3a0803 	bleq	e823b8 <startup-0x1f17dc48>
 3a8:	1349053b 	movtne	r0, #38203	; 0x953b
 3ac:	00000b38 	andeq	r0, r0, r8, lsr fp
 3b0:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
 3b4:	00130113 	andseq	r0, r3, r3, lsl r1
 3b8:	00210e00 	eoreq	r0, r1, r0, lsl #28
 3bc:	0b2f1349 	bleq	bc50e8 <startup-0x1f43af18>
 3c0:	160f0000 	strne	r0, [pc], -r0
 3c4:	3a0e0300 	bcc	380fcc <startup-0x1fc7f034>
 3c8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 3cc:	10000013 	andne	r0, r0, r3, lsl r0
 3d0:	0b3e0104 	bleq	f807e8 <startup-0x1f07f818>
 3d4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 3d8:	0b3b0b3a 	bleq	ec30c8 <startup-0x1f13cf38>
 3dc:	00001301 	andeq	r1, r0, r1, lsl #6
 3e0:	0b011311 	bleq	4502c <startup-0x1ffbafd4>
 3e4:	3b0b3a0b 	blcc	2cec18 <startup-0x1fd313e8>
 3e8:	0013010b 	andseq	r0, r3, fp, lsl #2
 3ec:	000d1200 	andeq	r1, sp, r0, lsl #4
 3f0:	0b3a0e03 	bleq	e83c04 <startup-0x1f17c3fc>
 3f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3f8:	00000b38 	andeq	r0, r0, r8, lsr fp
 3fc:	3f012e13 	svccc	0x00012e13
 400:	3a0e0319 	bcc	38106c <startup-0x1fc7ef94>
 404:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 408:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 40c:	97184006 	ldrls	r4, [r8, -r6]
 410:	13011942 	movwne	r1, #6466	; 0x1942
 414:	05140000 	ldreq	r0, [r4, #-0]
 418:	3a0e0300 	bcc	381020 <startup-0x1fc7efe0>
 41c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 420:	00180213 	andseq	r0, r8, r3, lsl r2
 424:	00341500 	eorseq	r1, r4, r0, lsl #10
 428:	0b3a0e03 	bleq	e83c3c <startup-0x1f17c3c4>
 42c:	1349053b 	movtne	r0, #38203	; 0x953b
 430:	00001802 	andeq	r1, r0, r2, lsl #16
 434:	0b000f16 	bleq	4094 <startup-0x1fffbf6c>
 438:	0013490b 	andseq	r4, r3, fp, lsl #18
 43c:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 440:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 444:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 448:	13491927 	movtne	r1, #39207	; 0x9927
 44c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 450:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 454:	00130119 	andseq	r0, r3, r9, lsl r1
 458:	00341800 	eorseq	r1, r4, r0, lsl #16
 45c:	0b3a0803 	bleq	e82470 <startup-0x1f17db90>
 460:	1349053b 	movtne	r0, #38203	; 0x953b
 464:	00001802 	andeq	r1, r0, r2, lsl #16
 468:	3f012e19 	svccc	0x00012e19
 46c:	3a0e0319 	bcc	3810d8 <startup-0x1fc7ef28>
 470:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 474:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 478:	97184006 	ldrls	r4, [r8, -r6]
 47c:	13011942 	movwne	r1, #6466	; 0x1942
 480:	051a0000 	ldreq	r0, [sl, #-0]
 484:	3a0e0300 	bcc	38108c <startup-0x1fc7ef74>
 488:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 48c:	00180213 	andseq	r0, r8, r3, lsl r2
 490:	00341b00 	eorseq	r1, r4, r0, lsl #22
 494:	0b3a0e03 	bleq	e83ca8 <startup-0x1f17c358>
 498:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 49c:	00001802 	andeq	r1, r0, r2, lsl #16
 4a0:	0300341c 	movweq	r3, #1052	; 0x41c
 4a4:	3b0b3a08 	blcc	2ceccc <startup-0x1fd31334>
 4a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4ac:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 4b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 4b4:	0b3a0e03 	bleq	e83cc8 <startup-0x1f17c338>
 4b8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 4bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4c0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 4c4:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  20:	00000024 	andeq	r0, r0, r4, lsr #32
  24:	0e630002 	cdpeq	0, 6, cr0, cr3, cr2, {0}
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000d00 	andcs	r0, r0, r0, lsl #26
  34:	0000002c 	andeq	r0, r0, ip, lsr #32
  38:	20000000 	andcs	r0, r0, r0
  3c:	0000000c 	andeq	r0, r0, ip
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	111b0002 	tstne	fp, r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000d2c 	andcs	r0, r0, ip, lsr #26
  5c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000003a7 	andeq	r0, r0, r7, lsr #7
   4:	01b90002 			; <UNDEFINED> instruction: 0x01b90002
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6b697245 	blvs	1a5c940 <startup-0x1e5a36c0>
  28:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  2c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  30:	442f7374 	strtmi	r7, [pc], #-884	; 38 <startup-0x1fffffc8>
  34:	74617461 	strbtvc	r7, [r1], #-1121	; 0xfffffb9f
  38:	696e6b65 	stmdbvs	lr!, {r0, r2, r5, r6, r8, r9, fp, sp, lr}^
  3c:	70746b73 	rsbsvc	r6, r4, r3, ror fp
  40:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  44:	6b2f746b 	blvs	bdd1f8 <startup-0x1f422e08>
  48:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; fffffe94 <APBAHBPrescTable+0xdfffeb40>
  4c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  50:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  54:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
  58:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  5c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  60:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
  64:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
  68:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
  6c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 74 <startup-0x1fffff8c>
  70:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  74:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
  78:	3a630063 	bcc	18c020c <startup-0x1e73fdf4>
  7c:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
  80:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
  84:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  88:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
  8c:	6f6f745c 	svcvs	0x006f745c
  90:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
  94:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
  98:	615c6d72 	cmpvs	ip, r2, ror sp
  9c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
  a0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
  a4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
  a8:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
  ac:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  b0:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
  b4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
  b8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
  bc:	61657363 	cmnvs	r5, r3, ror #6
  c0:	635c7070 	cmpvs	ip, #112	; 0x70
  c4:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
  c8:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
  cc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; ffffff04 <APBAHBPrescTable+0xdfffebb0>
  d0:	63675c73 	cmnvs	r7, #29440	; 0x7300
  d4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
  d8:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
  dc:	6f6e2d6d 	svcvs	0x006e2d6d
  e0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  e4:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
  e8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  ec:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
  f0:	00737973 	rsbseq	r7, r3, r3, ror r9
  f4:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 44 <startup-0x1fffffbc>
  f8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  fc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 100:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 104:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
 108:	5349534d 	movtpl	r5, #37709	; 0x934d
 10c:	636e492f 	cmnvs	lr, #770048	; 0xbc000
 110:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 114:	2f2e2e00 	svccs	0x002e2e00
 118:	2f62696c 	svccs	0x0062696c
 11c:	334d5453 	movtcc	r5, #54355	; 0xd453
 120:	5f344632 	svcpl	0x00344632
 124:	2f62696c 	svccs	0x0062696c
 128:	334d5453 	movtcc	r5, #54355	; 0xd453
 12c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 130:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 134:	72655064 	rsbvc	r5, r5, #100	; 0x64
 138:	5f687069 	svcpl	0x00687069
 13c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 140:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 144:	0000636e 	andeq	r6, r0, lr, ror #6
 148:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 14c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 150:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
 154:	00632e63 	rsbeq	r2, r3, r3, ror #28
 158:	5f000001 	svcpl	0x00000001
 15c:	61666564 	cmnvs	r6, r4, ror #10
 160:	5f746c75 	svcpl	0x00746c75
 164:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 168:	00682e73 	rsbeq	r2, r8, r3, ror lr
 16c:	5f000002 	svcpl	0x00000002
 170:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 174:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 178:	00000300 	andeq	r0, r0, r0, lsl #6
 17c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 180:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
 184:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 188:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 18c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 190:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
 194:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 198:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 19c:	00000500 	andeq	r0, r0, r0, lsl #10
 1a0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 1a4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 1a8:	00682e78 	rsbeq	r2, r8, r8, ror lr
 1ac:	73000005 	movwvc	r0, #5
 1b0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 1b4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 1b8:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
 1bc:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	00100205 	andseq	r0, r0, r5, lsl #4
 1c8:	e1032000 	mrs	r2, (UNDEF: 3)
 1cc:	69300101 	ldmdbvs	r0!, {r0, r8}
 1d0:	4f40693f 	svcmi	0x0040693f
 1d4:	503f694e 	eorspl	r6, pc, lr, asr #18
 1d8:	6be41703 	blvs	ff905dec <APBAHBPrescTable+0xdf904a98>
 1dc:	0f034b3f 	svceq	0x00034b3f
 1e0:	3d2f3d74 	stccc	13, cr3, [pc, #-464]!	; 18 <startup-0x1fffffe8>
 1e4:	02040200 	andeq	r0, r4, #0, 4
 1e8:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
 1ec:	02006702 	andeq	r6, r0, #524288	; 0x80000
 1f0:	003d0204 	eorseq	r0, sp, r4, lsl #4
 1f4:	06010402 	streq	r0, [r1], -r2, lsl #8
 1f8:	5a4c0658 	bpl	1301b60 <startup-0x1ecfe4a0>
 1fc:	032f3e4e 			; <UNDEFINED> instruction: 0x032f3e4e
 200:	32674a0b 	rsbcc	r4, r7, #45056	; 0xb000
 204:	3d694d3f 	stclcc	13, cr4, [r9, #-252]!	; 0xffffff04
 208:	6a741503 	bvs	1d0561c <startup-0x1e2fa9e4>
 20c:	6614034b 	ldrvs	r0, [r4], -fp, asr #6
 210:	033f3f6c 	teqeq	pc, #108, 30	; 0x1b0
 214:	7903660b 	stmdbvc	r3, {r0, r1, r3, r9, sl, sp, lr}
 218:	3d233d20 	stccc	13, cr3, [r3, #-128]!	; 0xffffff80
 21c:	740f0324 	strvc	r0, [pc], #-804	; 224 <startup-0x1ffffddc>
 220:	de034b6a 	vmlsle.f64	d4, d3, d26
 224:	bb7c6600 	bllt	1f19a2c <startup-0x1e0e65d4>
 228:	0e033e2d 	cdpeq	14, 0, cr3, cr3, cr13, {1}
 22c:	034b6966 	movteq	r6, #47462	; 0xb966
 230:	835d661a 	cmphi	sp, #27262976	; 0x1a00000
 234:	74018503 	strvc	r8, [r1], #-1283	; 0xfffffafd
 238:	e9034b69 	stmdb	r3, {r0, r3, r5, r6, r8, r9, fp, lr}
 23c:	ad6c6600 	stclge	6, cr6, [ip, #-0]
 240:	69740d03 	ldmdbvs	r4!, {r0, r1, r8, sl, fp}^
 244:	660e034b 	strvs	r0, [lr], -fp, asr #6
 248:	15034b69 	strne	r4, [r3, #-2921]	; 0xfffff497
 24c:	3f345966 	svccc	0x00345966
 250:	0341694d 	movteq	r6, #6477	; 0x194d
 254:	34599018 	ldrbcc	r9, [r9], #-24	; 0xffffffe8
 258:	41694d3f 	cmnmi	r9, pc, lsr sp
 25c:	7401b303 	strvc	fp, [r1], #-771	; 0xfffffcfd
 260:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 13c <startup-0x1ffffec4>
 264:	0d033d4d 	stceq	13, cr3, [r3, #-308]	; 0xfffffecc
 268:	03672f66 	cmneq	r7, #408	; 0x198
 26c:	334b6617 	movtcc	r6, #46615	; 0xb617
 270:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
 274:	4b660f03 	blmi	1983e88 <startup-0x1e67c178>
 278:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
 27c:	820f033d 	andhi	r0, pc, #-201326592	; 0xf4000000
 280:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 15c <startup-0x1ffffea4>
 284:	24033d5b 	strcs	r3, [r3], #-3419	; 0xfffff2a5
 288:	5ac04b90 	bpl	ff0130d0 <APBAHBPrescTable+0xdf011d7c>
 28c:	3d223d77 	stccc	13, cr3, [r2, #-476]!	; 0xfffffe24
 290:	3f5a6726 	svccc	0x005a6726
 294:	8383cbdb 	orrhi	ip, r3, #224256	; 0x36c00
 298:	3d201b03 	fstmdbxcc	r0!, {d1}	;@ Deprecated
 29c:	683d5925 	ldmdavs	sp!, {r0, r2, r5, r8, fp, ip, lr}
 2a0:	683d6769 	ldmdavs	sp!, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
 2a4:	683d6769 	ldmdavs	sp!, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
 2a8:	ba3f0367 	blt	fc104c <startup-0x1f03efb4>
 2ac:	3f84334b 	svccc	0x0084334b
 2b0:	8340694d 	movthi	r6, #2381	; 0x94d
 2b4:	6a9e0a03 	bvs	fe782ac8 <APBAHBPrescTable+0xde781774>
 2b8:	660c034b 	strvs	r0, [ip], -fp, asr #6
 2bc:	b8034b69 	stmdalt	r3, {r0, r3, r5, r6, r8, r9, fp, lr}
 2c0:	3d4e6601 	stclcc	6, cr6, [lr, #-4]
 2c4:	4b741603 	blmi	1d05ad8 <startup-0x1e2fa528>
 2c8:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 2cc:	8214034b 	andshi	r0, r4, #738197505	; 0x2c000001
 2d0:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 2d4:	11034b4d 	tstne	r3, sp, asr #22
 2d8:	4d334b82 	vldmdbmi	r3!, {d4}
 2dc:	034b5b4d 	movteq	r5, #47949	; 0xbb4d
 2e0:	334b7410 	movtcc	r7, #46096	; 0xb410
 2e4:	4b694d4d 	blmi	1a53820 <startup-0x1e5ac7e0>
 2e8:	8200d303 	andhi	sp, r0, #201326592	; 0xc000000
 2ec:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 2f0:	f0034b4d 			; <UNDEFINED> instruction: 0xf0034b4d
 2f4:	3d4e8200 	sfmcc	f0, 3, [lr, #-0]
 2f8:	79742503 	ldmdbvc	r4!, {r0, r1, r8, sl, sp}^
 2fc:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 300:	79741303 	ldmdbvc	r4!, {r0, r1, r8, r9, ip}^
 304:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 308:	79741103 	ldmdbvc	r4!, {r0, r1, r8, ip}^
 30c:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 310:	79742c03 	ldmdbvc	r4!, {r0, r1, sl, fp, sp}^
 314:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 318:	79742703 	ldmdbvc	r4!, {r0, r1, r8, r9, sl, sp}^
 31c:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 320:	79741d03 	ldmdbvc	r4!, {r0, r1, r8, sl, fp, ip}^
 324:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 328:	79741003 	ldmdbvc	r4!, {r0, r1, ip}^
 32c:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 330:	79740e03 	ldmdbvc	r4!, {r0, r1, r9, sl, fp}^
 334:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 338:	78742903 	ldmdavc	r4!, {r0, r1, r8, fp, sp}^
 33c:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 340:	78742303 	ldmdavc	r4!, {r0, r1, r8, r9, sp}^
 344:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 348:	78742503 	ldmdavc	r4!, {r0, r1, r8, sl, sp}^
 34c:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 350:	78741403 	ldmdavc	r4!, {r0, r1, sl, ip}^
 354:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 358:	78741203 	ldmdavc	r4!, {r0, r1, r9, ip}^
 35c:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 360:	78742d03 	ldmdavc	r4!, {r0, r1, r8, sl, fp, sp}^
 364:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 368:	78742803 	ldmdavc	r4!, {r0, r1, fp, sp}^
 36c:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 370:	6a740c03 	bvs	1d03384 <startup-0x1e2fcc7c>
 374:	681e6c4c 	ldmdavs	lr, {r2, r3, r6, sl, fp, sp, lr}
 378:	7402ac03 	strvc	sl, [r2], #-3075	; 0xfffff3fd
 37c:	1e974d94 	mrcne	13, 4, r4, cr7, cr4, {4}
 380:	661703ae 	ldrvs	r0, [r7], -lr, lsr #7
 384:	502f2f67 	eorpl	r2, pc, r7, ror #30
 388:	3e4c3e59 	mcrcc	14, 2, r3, cr12, cr9, {2}
 38c:	7659404e 	ldrbvc	r4, [r9], -lr, asr #32
 390:	033d4d5c 	teqeq	sp, #92, 26	; 0x1700
 394:	7530660a 	ldrvc	r6, [r0, #-1546]!	; 0xfffff9f6
 398:	67581103 	ldrbvs	r1, [r8, -r3, lsl #2]
 39c:	4d5c6850 	ldclmi	8, cr6, [ip, #-320]	; 0xfffffec0
 3a0:	6611033d 			; <UNDEFINED> instruction: 0x6611033d
 3a4:	06024b6c 	streq	r4, [r2], -ip, ror #22
 3a8:	b6010100 	strlt	r0, [r1], -r0, lsl #2
 3ac:	02000001 	andeq	r0, r0, #1
 3b0:	00018d00 	andeq	r8, r1, r0, lsl #26
 3b4:	fb010200 	blx	40bbe <startup-0x1ffbf442>
 3b8:	01000d0e 	tsteq	r0, lr, lsl #26
 3bc:	00010101 	andeq	r0, r1, r1, lsl #2
 3c0:	00010000 	andeq	r0, r1, r0
 3c4:	3a430100 	bcc	10c07cc <startup-0x1ef3f834>
 3c8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 3cc:	452f7372 	strmi	r7, [pc, #-882]!	; 62 <startup-0x1fffff9e>
 3d0:	2f6b6972 	svccs	0x006b6972
 3d4:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 3d8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 3dc:	61442f73 	hvcvs	17139	; 0x42f3
 3e0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 3e4:	73696e6b 	cmnvc	r9, #1712	; 0x6b0
 3e8:	7270746b 	rsbsvc	r7, r0, #1795162112	; 0x6b000000
 3ec:	6b656a6f 	blvs	195adb0 <startup-0x1e6a5250>
 3f0:	6f6b2f74 	svcvs	0x006b2f74
 3f4:	6f522f64 	svcvs	0x00522f64
 3f8:	736c6572 	cmnvc	ip, #478150656	; 0x1c800000
 3fc:	3a630065 	bcc	18c0598 <startup-0x1e73fa68>
 400:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 404:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 408:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 40c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 410:	6f6f745c 	svcvs	0x006f745c
 414:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 418:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 41c:	615c6d72 	cmpvs	ip, r2, ror sp
 420:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 424:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 428:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 42c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 430:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 434:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 438:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 43c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 440:	61657363 	cmnvs	r5, r3, ror #6
 444:	635c7070 	cmpvs	ip, #112	; 0x70
 448:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 44c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 450:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 288 <startup-0x1ffffd78>
 454:	63675c73 	cmnvs	r7, #29440	; 0x7300
 458:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 45c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 460:	6f6e2d6d 	svcvs	0x006e2d6d
 464:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 468:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 46c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 470:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 474:	00737973 	rsbseq	r7, r3, r3, ror r9
 478:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 3c8 <startup-0x1ffffc38>
 47c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 480:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 484:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 488:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
 48c:	5349534d 	movtpl	r5, #37709	; 0x934d
 490:	636e492f 	cmnvs	lr, #770048	; 0xbc000
 494:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 498:	2f2e2e00 	svccs	0x002e2e00
 49c:	2f62696c 	svccs	0x0062696c
 4a0:	334d5453 	movtcc	r5, #54355	; 0xd453
 4a4:	5f344632 	svcpl	0x00344632
 4a8:	2f62696c 	svccs	0x0062696c
 4ac:	334d5453 	movtcc	r5, #54355	; 0xd453
 4b0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 4b4:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 4b8:	72655064 	rsbvc	r5, r5, #100	; 0x64
 4bc:	5f687069 	svcpl	0x00687069
 4c0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 4c4:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 4c8:	0000636e 	andeq	r6, r0, lr, ror #6
 4cc:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 4d0:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 4d4:	00010063 	andeq	r0, r1, r3, rrx
 4d8:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 4dc:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 4e0:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 4e4:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 4e8:	00020068 	andeq	r0, r2, r8, rrx
 4ec:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 4f0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 4f4:	0300682e 	movweq	r6, #2094	; 0x82e
 4f8:	6f630000 	svcvs	0x00630000
 4fc:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 500:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 504:	00000400 	andeq	r0, r0, r0, lsl #8
 508:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 50c:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 510:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 514:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 518:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 51c:	74730000 	ldrbtvc	r0, [r3], #-0
 520:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 524:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 528:	00050068 	andeq	r0, r5, r8, rrx
 52c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 530:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 534:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 538:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 53c:	00050068 	andeq	r0, r5, r8, rrx
 540:	05000000 	streq	r0, [r0, #-0]
 544:	00000002 	andeq	r0, r0, r2
 548:	010a0320 	tsteq	sl, r0, lsr #6
 54c:	03025e13 	movweq	r5, #11795	; 0x2e13
 550:	00010100 	andeq	r0, r1, r0, lsl #2
 554:	0d000205 	sfmeq	f0, 4, [r0, #-20]	; 0xffffffec
 558:	16032000 	strne	r2, [r3], -r0
 55c:	694b3d01 	stmdbvs	fp, {r0, r8, sl, fp, ip, sp}^
 560:	01000902 	tsteq	r0, r2, lsl #18
 564:	0002a701 	andeq	sl, r2, r1, lsl #14
 568:	bb000200 	bllt	d70 <startup-0x1ffff290>
 56c:	02000001 	andeq	r0, r0, #1
 570:	0d0efb01 	vstreq	d15, [lr, #-4]
 574:	01010100 	mrseq	r0, (UNDEF: 17)
 578:	00000001 	andeq	r0, r0, r1
 57c:	01000001 	tsteq	r0, r1
 580:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffb45 <APBAHBPrescTable+0xdfffe7f1>
 584:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 588:	6972452f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r8, sl, lr}^
 58c:	6f442f6b 	svcvs	0x00442f6b
 590:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 594:	2f73746e 	svccs	0x0073746e
 598:	61746144 	cmnvs	r4, r4, asr #2
 59c:	6e6b6574 	mcrvs	5, 3, r6, cr11, cr4, {3}
 5a0:	746b7369 	strbtvc	r7, [fp], #-873	; 0xfffffc97
 5a4:	6a6f7270 	bvs	1bdcf6c <startup-0x1e423094>
 5a8:	2f746b65 	svccs	0x00746b65
 5ac:	2f646f6b 	svccs	0x00646f6b
 5b0:	2f62696c 	svccs	0x0062696c
 5b4:	334d5453 	movtcc	r5, #54355	; 0xd453
 5b8:	5f344632 	svcpl	0x00344632
 5bc:	2f62696c 	svccs	0x0062696c
 5c0:	334d5453 	movtcc	r5, #54355	; 0xd453
 5c4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 5c8:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 5cc:	72655064 	rsbvc	r5, r5, #100	; 0x64
 5d0:	5f687069 	svcpl	0x00687069
 5d4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 5d8:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
 5dc:	63006372 	movwvs	r6, #882	; 0x372
 5e0:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 5e4:	70706165 	rsbsvc	r6, r0, r5, ror #2
 5e8:	646f635c 	strbtvs	r6, [pc], #-860	; 5f0 <startup-0x1ffffa10>
 5ec:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 5f0:	6f745c65 	svcvs	0x00745c65
 5f4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 5f8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 5fc:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 600:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 604:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 608:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 60c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 610:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 614:	616d5c65 	cmnvs	sp, r5, ror #24
 618:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 61c:	3a630065 	bcc	18c07b8 <startup-0x1e73f848>
 620:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 624:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 628:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 62c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 630:	6f6f745c 	svcvs	0x006f745c
 634:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 638:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 63c:	615c6d72 	cmpvs	ip, r2, ror sp
 640:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 644:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 648:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 64c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 650:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 654:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 658:	2f2e2e00 	svccs	0x002e2e00
 65c:	2f62696c 	svccs	0x0062696c
 660:	334d5453 	movtcc	r5, #54355	; 0xd453
 664:	5f344632 	svcpl	0x00344632
 668:	2f62696c 	svccs	0x0062696c
 66c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
 670:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
 674:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 678:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
 67c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 680:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 684:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 688:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 68c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 690:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 694:	535f7878 	cmppl	pc, #120, 16	; 0x780000
 698:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
 69c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 6a0:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
 6a4:	2f726576 	svccs	0x00726576
 6a8:	00636e69 	rsbeq	r6, r3, r9, ror #28
 6ac:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 6b0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 6b4:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 6b8:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 6bc:	00010063 	andeq	r0, r1, r3, rrx
 6c0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 6c4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 6c8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 6cc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 6d0:	00020068 	andeq	r0, r2, r8, rrx
 6d4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 6d8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 6dc:	0300682e 	movweq	r6, #2094	; 0x82e
 6e0:	6f630000 	svcvs	0x00630000
 6e4:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 6e8:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 6ec:	00000400 	andeq	r0, r0, r0, lsl #8
 6f0:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 6f4:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 6f8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 6fc:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 700:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 704:	74730000 	ldrbtvc	r0, [r3], #-0
 708:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 70c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 710:	00050068 	andeq	r0, r5, r8, rrx
 714:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 718:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 71c:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 720:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 724:	00050068 	andeq	r0, r5, r8, rrx
 728:	05000000 	streq	r0, [r0, #-0]
 72c:	000d2c02 	andeq	r2, sp, r2, lsl #24
 730:	00ff0320 	rscseq	r0, pc, r0, lsr #6
 734:	4b4c4e01 	blmi	1313f40 <startup-0x1ecec0c0>
 738:	034a3803 	movteq	r3, #43011	; 0xa803
 73c:	4b4c204a 	blmi	130886c <startup-0x1ecf7794>
 740:	034a3303 	movteq	r3, #41731	; 0xa303
 744:	4b4c204f 	blmi	1308888 <startup-0x1ecf7778>
 748:	034a2e03 	movteq	r2, #44547	; 0xae03
 74c:	4b4c2054 	blmi	13088a4 <startup-0x1ecf775c>
 750:	034a2903 	movteq	r2, #43267	; 0xa903
 754:	4b4c2059 	blmi	13088c0 <startup-0x1ecf7740>
 758:	034a2403 	movteq	r2, #41987	; 0xa403
 75c:	4b4c205e 	blmi	13088dc <startup-0x1ecf7724>
 760:	034a1f03 	movteq	r1, #44803	; 0xaf03
 764:	4b4c2063 	blmi	13088f8 <startup-0x1ecf7708>
 768:	034a1a03 	movteq	r1, #43523	; 0xaa03
 76c:	4b4c2068 	blmi	1308914 <startup-0x1ecf76ec>
 770:	034a1503 	movteq	r1, #42243	; 0xa503
 774:	674c206e 	strbvs	r2, [ip, -lr, rrx]
 778:	03660f03 	cmneq	r6, #3, 30
 77c:	674c2073 	smlsldxvs	r2, ip, r3, r0
 780:	03660a03 	cmneq	r6, #12288	; 0x3000
 784:	674c207a 	smlsldxvs	r2, ip, sl, r0
 788:	080c0369 	stmdaeq	ip, {r0, r3, r5, r6, r8, r9}
 78c:	0a035990 	beq	d6dd4 <startup-0x1ff2922c>
 790:	5a5a3e66 	bpl	1690130 <startup-0x1e96fed0>
 794:	00bcad4c 	adcseq	sl, ip, ip, asr #26
 798:	06010402 	streq	r0, [r1], -r2, lsl #8
 79c:	ad50064a 	ldclge	6, cr0, [r0, #-296]	; 0xfffffed8
 7a0:	bbccadc0 	bllt	ff32bea8 <APBAHBPrescTable+0xdf32ab54>
 7a4:	02040200 	andeq	r0, r4, #0, 4
 7a8:	00ba6203 	adcseq	r6, sl, r3, lsl #4
 7ac:	06010402 	streq	r0, [r1], -r2, lsl #8
 7b0:	2103063c 	tstcs	r3, ip, lsr r6
 7b4:	3d4c523c 	sfmcc	f5, 2, [ip, #-240]	; 0xffffff10
 7b8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 7bc:	75741003 	ldrbvc	r1, [r4, #-3]!
 7c0:	4c3e5a42 			; <UNDEFINED> instruction: 0x4c3e5a42
 7c4:	033d3e3e 	teqeq	sp, #992	; 0x3e0
 7c8:	50754a1c 	rsbspl	r4, r5, ip, lsl sl
 7cc:	3d4c5c68 	stclcc	12, cr5, [ip, #-416]	; 0xfffffe60
 7d0:	4e4a0a03 	vmlami.f32	s1, s20, s6
 7d4:	4a0c033d 	bmi	3014d0 <startup-0x1fcfeb30>
 7d8:	5c685075 	stclpl	0, cr5, [r8], #-468	; 0xfffffe2c
 7dc:	0a033d4c 	beq	cfd14 <startup-0x1ff302ec>
 7e0:	033d4e4a 	teqeq	sp, #1184	; 0x4a0
 7e4:	4b794a0f 	blmi	1e53028 <startup-0x1e1acfd8>
 7e8:	794a0f03 	stmdbvc	sl, {r0, r1, r8, r9, sl, fp}^
 7ec:	4a10034b 	bmi	401520 <startup-0x1fbfeae0>
 7f0:	1e504cc0 	cdpne	12, 5, cr4, cr0, cr0, {6}
 7f4:	4a0b034c 	bmi	2c152c <startup-0x1fd3ead4>
 7f8:	0b034b78 	bleq	d35e0 <startup-0x1ff2ca20>
 7fc:	0375784a 	cmneq	r5, #4849664	; 0x4a0000
 800:	bb4a00ce 	bllt	1280b40 <startup-0x1ed7f4c0>
 804:	089f352f 	ldmeq	pc, {r0, r1, r2, r3, r5, r8, sl, ip, sp}	; <UNPREDICTABLE>
 808:	029fbbc9 	addseq	fp, pc, #205824	; 0x32400
 80c:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	5f434352 	svcpl	0x00434352
   4:	4b4c4348 	blmi	1310d2c <startup-0x1ecef2d4>
   8:	43435200 	movtmi	r5, #12800	; 0x3200
   c:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
  10:	42504100 	subsmi	r4, r0, #0, 2
  14:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
  18:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
  1c:	505f4343 	subspl	r4, pc, r3, asr #6
  20:	41534c4c 	cmpmi	r3, ip, asr #24
  24:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
  28:	43435200 	movtmi	r5, #12800	; 0x3200
  2c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
  30:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
  34:	00517669 	subseq	r7, r1, r9, ror #12
  38:	5f434352 	svcpl	0x00434352
  3c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
  40:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
  44:	73005276 	movwvc	r5, #630	; 0x276
  48:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
  4c:	67657273 			; <UNDEFINED> instruction: 0x67657273
  50:	53595300 	cmppl	r9, #0, 6
  54:	5f4b4c43 	svcpl	0x004b4c43
  58:	71657246 	cmnvc	r5, r6, asr #4
  5c:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
  60:	6c700079 	ldclvs	0, cr0, [r0], #-484	; 0xfffffe1c
  64:	70006d6c 	andvc	r6, r0, ip, ror #26
  68:	00706c6c 	rsbseq	r6, r0, ip, ror #24
  6c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
  70:	5f38746e 	svcpl	0x0038746e
  74:	43520074 	cmpmi	r2, #116	; 0x74
  78:	434d5f43 	movtmi	r5, #57155	; 0xdf43
  7c:	6f53314f 	svcvs	0x0053314f
  80:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
  84:	43435200 	movtmi	r5, #12800	; 0x3200
  88:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
  8c:	72655031 	rsbvc	r5, r5, #49	; 0x31
  90:	52687069 	rsbpl	r7, r8, #105	; 0x69
  94:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
  98:	00646d43 	rsbeq	r6, r4, r3, asr #26
  9c:	4e4c4c50 	mcrmi	12, 2, r4, cr12, cr0, {2}
  a0:	43435200 	movtmi	r5, #12800	; 0x3200
  a4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
  a8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
  ac:	6c434941 	mcrrvs	9, 4, r4, r3, cr1	; <UNPREDICTABLE>
  b0:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
  b4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
  b8:	50006769 	andpl	r6, r0, r9, ror #14
  bc:	00504c4c 	subseq	r4, r0, ip, asr #24
  c0:	514c4c50 	cmppl	ip, r0, asr ip
  c4:	43435200 	movtmi	r5, #12800	; 0x3200
  c8:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
  cc:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
  d0:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
  d4:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
  d8:	6c007469 	cfstrsvs	mvf7, [r0], {105}	; 0x69
  dc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
  e0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
  e4:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  e8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  ec:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  f0:	43520074 	cmpmi	r2, #116	; 0x74
  f4:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
  f8:	4c4c5000 	marmi	acc0, r5, ip
  fc:	4352004d 	cmpmi	r2, #77	; 0x4d
 100:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 104:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
 108:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 10c:	42484100 	submi	r4, r8, #0, 2
 110:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
 114:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
 118:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
 11c:	6b636f6c 	blvs	18dbed4 <startup-0x1e72412c>
 120:	43520073 	cmpmi	r2, #115	; 0x73
 124:	50415f43 	subpl	r5, r1, r3, asr #30
 128:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
 12c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 130:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 134:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
 138:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
 13c:	4400646d 	strmi	r6, [r0], #-1133	; 0xfffffb93
 140:	46434b43 	strbmi	r4, [r3], -r3, asr #22
 144:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
 148:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
 14c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 150:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
 154:	42484100 	submi	r4, r8, #0, 2
 158:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
 15c:	43440052 	movtmi	r0, #16466	; 0x4052
 160:	4746434b 	strbmi	r4, [r6, -fp, asr #6]
 164:	43003252 	movwmi	r3, #594	; 0x252
 168:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
 16c:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
 170:	6b697245 	blvs	1a5ca8c <startup-0x1e5a3574>
 174:	636f445c 	cmnvs	pc, #92, 8	; 0x5c000000
 178:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 17c:	445c7374 	ldrbmi	r7, [ip], #-884	; 0xfffffc8c
 180:	74617461 	strbtvc	r7, [r1], #-1121	; 0xfffffb9f
 184:	696e6b65 	stmdbvs	lr!, {r0, r2, r5, r6, r8, r9, fp, sp, lr}^
 188:	70746b73 	rsbsvc	r6, r4, r3, ror fp
 18c:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 190:	6b5c746b 	blvs	171d344 <startup-0x1e8e2cbc>
 194:	525c646f 	subspl	r6, ip, #1862270976	; 0x6f000000
 198:	6c65726f 	sfmvs	f7, 2, [r5], #-444	; 0xfffffe44
 19c:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
 1a0:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0xffffff93
 1a4:	43500067 	cmpmi	r0, #103	; 0x67
 1a8:	5f324b4c 	svcpl	0x00324b4c
 1ac:	71657246 	cmnvc	r5, r6, asr #4
 1b0:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
 1b4:	43520079 	cmpmi	r2, #121	; 0x79
 1b8:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 1bc:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
 1c0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 1c4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 1c8:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
 1cc:	414e4500 	cmpmi	lr, r0, lsl #10
 1d0:	00454c42 	subeq	r4, r5, r2, asr #24
 1d4:	32425041 	subcc	r5, r2, #65	; 0x41
 1d8:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
 1dc:	43435200 	movtmi	r5, #12800	; 0x3200
 1e0:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
 1e4:	6f43314b 	svcvs	0x0043314b
 1e8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 1ec:	43435200 	movtmi	r5, #12800	; 0x3200
 1f0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 1f4:	72655033 	rsbvc	r5, r5, #51	; 0x33
 1f8:	52687069 	rsbpl	r7, r8, #105	; 0x69
 1fc:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
 200:	00646d43 	rsbeq	r6, r4, r3, asr #26
 204:	5f434352 	svcpl	0x00434352
 208:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
 20c:	6b636f6c 	blvs	18dbfc4 <startup-0x1e72403c>
 210:	4b4c4341 	blmi	1310f1c <startup-0x1ecef0e4>
 214:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 218:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
 21c:	415f4343 	cmpmi	pc, r3, asr #6
 220:	50314248 	eorspl	r4, r1, r8, asr #4
 224:	70697265 	rsbvc	r7, r9, r5, ror #4
 228:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
 22c:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
 230:	43520064 	cmpmi	r2, #100	; 0x64
 234:	43485f43 	movtmi	r5, #36675	; 0x8f43
 238:	6f434b4c 	svcvs	0x00434b4c
 23c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 240:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 244:	6f6c2067 	svcvs	0x006c2067
 248:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 24c:	5200746e 	andpl	r7, r0, #1845493760	; 0x6e000000
 250:	535f4343 	cmppl	pc, #201326593	; 0xc000001
 254:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
 258:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
 25c:	00676966 	rsbeq	r6, r7, r6, ror #18
 260:	5f434352 	svcpl	0x00434352
 264:	4345534c 	movtmi	r5, #21324	; 0x534c
 268:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 26c:	43520067 	cmpmi	r2, #103	; 0x67
 270:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
 274:	4e004741 	cdpmi	7, 0, cr4, cr0, cr1, {2}
 278:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
 27c:	00657461 	rsbeq	r7, r5, r1, ror #8
 280:	434c4c50 	movtmi	r4, #52304	; 0xcc50
 284:	00524746 	subseq	r4, r2, r6, asr #14
 288:	5f434352 	svcpl	0x00434352
 28c:	6b636142 	blvs	18d879c <startup-0x1e727864>
 290:	65527075 	ldrbvs	r7, [r2, #-117]	; 0xffffff8b
 294:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
 298:	5f00646d 	svcpl	0x0000646d
 29c:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
 2a0:	5f323374 	svcpl	0x00323374
 2a4:	72450074 	subvc	r0, r5, #116	; 0x74
 2a8:	53726f72 	cmnpl	r2, #456	; 0x1c8
 2ac:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 2b0:	43520073 	cmpmi	r2, #115	; 0x73
 2b4:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
 2b8:	756f534c 	strbvc	r5, [pc, #-844]!	; ffffff74 <APBAHBPrescTable+0xdfffec20>
 2bc:	00656372 	rsbeq	r6, r5, r2, ror r3
 2c0:	5f434352 	svcpl	0x00434352
 2c4:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
 2c8:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
 2cc:	756f534b 	strbvc	r5, [pc, #-843]!	; ffffff89 <APBAHBPrescTable+0xdfffec35>
 2d0:	00656372 	rsbeq	r6, r5, r2, ror r3
 2d4:	5f434352 	svcpl	0x00434352
 2d8:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
 2dc:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
 2e0:	74534553 	ldrbvc	r4, [r3], #-1363	; 0xfffffaad
 2e4:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0xfffffd9f
 2e8:	69620070 	stmdbvs	r2!, {r4, r5, r6}^
 2ec:	61747374 	cmnvs	r4, r4, ror r3
 2f0:	00737574 	rsbseq	r7, r3, r4, ror r5
 2f4:	4b4c4348 	blmi	131101c <startup-0x1eceefe4>
 2f8:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
 2fc:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
 300:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
 304:	415f4343 	cmpmi	pc, r3, asr #6
 308:	50314250 	eorspl	r4, r1, r0, asr r2
 30c:	70697265 	rsbvc	r7, r9, r5, ror #4
 310:	6c700068 	ldclvs	0, cr0, [r0], #-416	; 0xfffffe60
 314:	6f63766c 	svcvs	0x0063766c
 318:	53494400 	movtpl	r4, #37888	; 0x9400
 31c:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
 320:	73795300 	cmnvc	r9, #0, 6
 324:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
 328:	4365726f 	cmnmi	r5, #-268435450	; 0xf0000006
 32c:	6b636f6c 	blvs	18dc0e4 <startup-0x1e723f1c>
 330:	43435200 	movtmi	r5, #12800	; 0x3200
 334:	4f434d5f 	svcmi	0x00434d5f
 338:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
 33c:	00676966 	rsbeq	r6, r7, r6, ror #18
 340:	5f434352 	svcpl	0x00434352
 344:	43535953 	cmpmi	r3, #1359872	; 0x14c000
 348:	52004b4c 	andpl	r4, r0, #76, 22	; 0x13000
 34c:	505f4343 	subspl	r4, pc, r3, asr #6
 350:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
 354:	646d4353 	strbtvs	r4, [sp], #-851	; 0xfffffcad
 358:	43435200 	movtmi	r5, #12800	; 0x3200
 35c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
 360:	66654465 	strbtvs	r4, [r5], -r5, ror #8
 364:	65727000 	ldrbvs	r7, [r2, #-0]!
 368:	52006373 	andpl	r6, r0, #-872415231	; 0xcc000001
 36c:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
 370:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
 374:	756f534b 	strbvc	r5, [pc, #-843]!	; 31 <startup-0x1fffffcf>
 378:	00656372 	rsbeq	r6, r5, r2, ror r3
 37c:	5f434352 	svcpl	0x00434352
 380:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
 384:	6b636f6c 	blvs	18dc13c <startup-0x1e723ec4>
 388:	4b4c4341 	blmi	1311094 <startup-0x1eceef6c>
 38c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
 390:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
 394:	535f4343 	cmppl	pc, #201326593	; 0xc000001
 398:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
 39c:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
 3a0:	534b4c43 	movtpl	r4, #48195	; 0xbc43
 3a4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
 3a8:	43520065 	cmpmi	r2, #101	; 0x65
 3ac:	544c5f43 	strbpl	r5, [ip], #-3907	; 0xfffff0bd
 3b0:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
 3b4:	7669444b 	strbtvc	r4, [r9], -fp, asr #8
 3b8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 3bc:	73006769 	movwvc	r6, #1897	; 0x769
 3c0:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 3c4:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 3c8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 3cc:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 3d0:	4c500074 	mrrcmi	0, 7, r0, r0, cr4	; <UNPREDICTABLE>
 3d4:	5332494c 	teqpl	r2, #76, 18	; 0x130000
 3d8:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 3dc:	43435200 	movtmi	r5, #12800	; 0x3200
 3e0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 3e4:	72655032 	rsbvc	r5, r5, #50	; 0x32
 3e8:	43687069 	cmnmi	r8, #105	; 0x69
 3ec:	6b636f6c 	blvs	18dc1a4 <startup-0x1e723e5c>
 3f0:	6f4d504c 	svcvs	0x004d504c
 3f4:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
 3f8:	43520064 	cmpmi	r2, #100	; 0x64
 3fc:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
 400:	5332494c 	teqpl	r2, #76, 18	; 0x130000
 404:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 408:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
 40c:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
 410:	6d434953 	vstrvs.16	s9, [r3, #-166]	; 0xffffff5a	; <UNPREDICTABLE>
 414:	43520064 	cmpmi	r2, #100	; 0x64
 418:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 41c:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
 420:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 424:	42504100 	subsmi	r4, r0, #0, 2
 428:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
 42c:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
 430:	415f4343 	cmpmi	pc, r3, asr #6
 434:	50334248 	eorspl	r4, r3, r8, asr #4
 438:	70697265 	rsbvc	r7, r9, r5, ror #4
 43c:	43520068 	cmpmi	r2, #104	; 0x68
 440:	434d5f43 	movtmi	r5, #57155	; 0xdf43
 444:	6944324f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r9, ip, sp}^
 448:	43520076 	cmpmi	r2, #118	; 0x76
 44c:	41535f43 	cmpmi	r3, r3, asr #30
 450:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
 454:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
 458:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
 45c:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
 460:	00676966 	rsbeq	r6, r7, r6, ror #18
 464:	5f434352 	svcpl	0x00434352
 468:	43435452 	movtmi	r5, #13394	; 0x3452
 46c:	6d434b4c 	vstrvs	d20, [r3, #-304]	; 0xfffffed0
 470:	3a430064 	bcc	10c0608 <startup-0x1ef3f9f8>
 474:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 478:	452f7372 	strmi	r7, [pc, #-882]!	; 10e <startup-0x1ffffef2>
 47c:	2f6b6972 	svccs	0x006b6972
 480:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 484:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 488:	61442f73 	hvcvs	17139	; 0x42f3
 48c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 490:	73696e6b 	cmnvc	r9, #1712	; 0x6b0
 494:	7270746b 	rsbsvc	r7, r0, #1795162112	; 0x6b000000
 498:	6b656a6f 	blvs	195ae5c <startup-0x1e6a51a4>
 49c:	6f6b2f74 	svcvs	0x006b2f74
 4a0:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
 4a4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 4a8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 4ac:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 4b0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 4b4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 4b8:	5f787834 	svcpl	0x00787834
 4bc:	50647453 	rsbpl	r7, r4, r3, asr r4
 4c0:	70697265 	rsbvc	r7, r9, r5, ror #4
 4c4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 4c8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 4cc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 4d0:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
 4d4:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 4d8:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
 4dc:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
 4e0:	52524500 	subspl	r4, r2, #0, 10
 4e4:	4700524f 	strmi	r5, [r0, -pc, asr #4]
 4e8:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
 4ec:	37203939 			; <UNDEFINED> instruction: 0x37203939
 4f0:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
 4f4:	31303220 	teqcc	r0, r0, lsr #4
 4f8:	30393037 	eorscc	r3, r9, r7, lsr r0
 4fc:	72282034 	eorvc	r2, r8, #52	; 0x34
 500:	61656c65 	cmnvs	r5, r5, ror #24
 504:	20296573 	eorcs	r6, r9, r3, ror r5
 508:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
 50c:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
 510:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
 514:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
 518:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
 51c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
 520:	73697665 	cmnvc	r9, #105906176	; 0x6500000
 524:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 528:	32353532 	eorscc	r3, r5, #209715200	; 0xc800000
 52c:	205d3430 	subscs	r3, sp, r0, lsr r4
 530:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 534:	20626d75 	rsbcs	r6, r2, r5, ror sp
 538:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 53c:	613d6863 	teqvs	sp, r3, ror #16
 540:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 544:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 548:	6f6c666d 	svcvs	0x006c666d
 54c:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
 550:	733d6962 	teqvc	sp, #1605632	; 0x188000
 554:	2074666f 	rsbscs	r6, r4, pc, ror #12
 558:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 55c:	20626d75 	rsbcs	r6, r2, r5, ror sp
 560:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 564:	613d6863 	teqvs	sp, r3, ror #16
 568:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 56c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 570:	4f2d2067 	svcmi	0x002d2067
 574:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 578:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 57c:	52003939 	andpl	r3, r0, #933888	; 0xe4000
 580:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
 584:	6b636f6c 	blvs	18dc33c <startup-0x1e723cc4>
 588:	75636553 	strbvc	r6, [r3, #-1363]!	; 0xfffffaad
 58c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 590:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
 594:	6d436d65 	stclvs	13, cr6, [r3, #-404]	; 0xfffffe6c
 598:	43520064 	cmpmi	r2, #100	; 0x64
 59c:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
 5a0:	5332494c 	teqpl	r2, #76, 18	; 0x130000
 5a4:	51766944 	cmnpl	r6, r4, asr #18
 5a8:	43435200 	movtmi	r5, #12800	; 0x3200
 5ac:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
 5b0:	43494153 	movtmi	r4, #37203	; 0x9153
 5b4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 5b8:	48410067 	stmdami	r1, {r0, r1, r2, r5, r6}^
 5bc:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
 5c0:	43520052 	cmpmi	r2, #82	; 0x52
 5c4:	534c5f43 	movtpl	r5, #53059	; 0xcf43
 5c8:	646f4d45 	strbtvs	r4, [pc], #-3397	; 5d0 <startup-0x1ffffa30>
 5cc:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
 5d0:	00676966 	rsbeq	r6, r7, r6, ror #18
 5d4:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 5d8:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 5dc:	75460052 	strbvc	r0, [r6, #-82]	; 0xffffffae
 5e0:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 5e4:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
 5e8:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 5ec:	43520065 	cmpmi	r2, #101	; 0x65
 5f0:	434d5f43 	movtmi	r5, #57155	; 0xdf43
 5f4:	6944314f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r8, ip, sp}^
 5f8:	43520076 	cmpmi	r2, #118	; 0x76
 5fc:	50415f43 	subpl	r5, r1, r3, asr #30
 600:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
 604:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 608:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 60c:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
 610:	43435200 	movtmi	r5, #12800	; 0x3200
 614:	4f434d5f 	svcmi	0x00434d5f
 618:	756f5332 	strbvc	r5, [pc, #-818]!	; 2ee <startup-0x1ffffd12>
 61c:	00656372 	rsbeq	r6, r5, r2, ror r3
 620:	5f434352 	svcpl	0x00434352
 624:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
 628:	6f534b4c 	svcvs	0x00534b4c
 62c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
 630:	4c4c5000 	marmi	acc0, r5, ip
 634:	43494153 	movtmi	r4, #37203	; 0x9153
 638:	00524746 	subseq	r4, r2, r6, asr #14
 63c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
 640:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
 644:	45520030 	ldrbmi	r0, [r2, #-48]	; 0xffffffd0
 648:	56524553 			; <UNDEFINED> instruction: 0x56524553
 64c:	00314445 	eorseq	r4, r1, r5, asr #8
 650:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
 654:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
 658:	45520032 	ldrbmi	r0, [r2, #-50]	; 0xffffffce
 65c:	56524553 			; <UNDEFINED> instruction: 0x56524553
 660:	00334445 	eorseq	r4, r3, r5, asr #8
 664:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
 668:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
 66c:	45520034 	ldrbmi	r0, [r2, #-52]	; 0xffffffcc
 670:	56524553 			; <UNDEFINED> instruction: 0x56524553
 674:	00354445 	eorseq	r4, r5, r5, asr #8
 678:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
 67c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
 680:	43520036 	cmpmi	r2, #54	; 0x36
 684:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
 688:	616c4674 	smcvs	50276	; 0xc464
 68c:	61745367 	cmnvs	r4, r7, ror #6
 690:	00737574 	rsbseq	r7, r3, r4, ror r5
 694:	5f434352 	svcpl	0x00434352
 698:	43455348 	movtmi	r5, #21320	; 0x5348
 69c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 6a0:	43520067 	cmpmi	r2, #103	; 0x67
 6a4:	41535f43 	cmpmi	r3, r3, asr #30
 6a8:	6f6c4249 	svcvs	0x006c4249
 6ac:	43426b63 	movtmi	r6, #11107	; 0x2b63
 6b0:	6f434b4c 	svcvs	0x00434b4c
 6b4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 6b8:	4c4c5000 	marmi	acc0, r5, ip
 6bc:	4e494153 	mcrmi	1, 2, r4, cr9, cr3, {2}
 6c0:	4d544900 	vldrmi.16	s9, [r4, #-0]	; <UNPREDICTABLE>
 6c4:	4278525f 	rsbsmi	r5, r8, #-268435451	; 0xf0000005
 6c8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 6cc:	4c500072 	mrrcmi	0, 7, r0, r0, cr2	; <UNPREDICTABLE>
 6d0:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
 6d4:	4c500051 	mrrcmi	0, 5, r0, r0, cr1	; <UNPREDICTABLE>
 6d8:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
 6dc:	68730052 	ldmdavs	r3!, {r1, r4, r6}^
 6e0:	2074726f 	rsbscs	r7, r4, pc, ror #4
 6e4:	00746e69 	rsbseq	r6, r4, r9, ror #28
 6e8:	5f434352 	svcpl	0x00434352
 6ec:	434d4954 	movtmi	r4, #55636	; 0xd954
 6f0:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
 6f4:	61637365 	cmnvs	r3, r5, ror #6
 6f8:	0072656c 	rsbseq	r6, r2, ip, ror #10
 6fc:	5f434352 	svcpl	0x00434352
 700:	434c4c50 	movtmi	r4, #52304	; 0xcc50
 704:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
 708:	415f4343 	cmpmi	pc, r3, asr #6
 70c:	50314248 	eorspl	r4, r1, r8, asr #4
 710:	70697265 	rsbvc	r7, r9, r5, ror #4
 714:	6f6c4368 	svcvs	0x006c4368
 718:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
 71c:	50410064 	subpl	r0, r1, r4, rrx
 720:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
 724:	48410052 	stmdami	r1, {r1, r4, r6}^
 728:	53523342 	cmppl	r2, #134217729	; 0x8000001
 72c:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
 730:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 62c <startup-0x1ffff9d4>
 734:	0065646f 	rsbeq	r6, r5, pc, ror #8
 738:	5f434352 	svcpl	0x00434352
 73c:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 740:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 744:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
 748:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
 74c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
 750:	415f4343 	cmpmi	pc, r3, asr #6
 754:	50314250 	eorspl	r4, r1, r0, asr r2
 758:	70697265 	rsbvc	r7, r9, r5, ror #4
 75c:	6f6c4368 	svcvs	0x006c4368
 760:	504c6b63 	subpl	r6, ip, r3, ror #22
 764:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 768:	00646d43 	rsbeq	r6, r4, r3, asr #26
 76c:	5f434352 	svcpl	0x00434352
 770:	4b4c4350 	blmi	13114b8 <startup-0x1eceeb48>
 774:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
 778:	00676966 	rsbeq	r6, r7, r6, ror #18
 77c:	5f434352 	svcpl	0x00434352
 780:	43535953 	cmpmi	r3, #1359872	; 0x14c000
 784:	6f534b4c 	svcvs	0x00534b4c
 788:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
 78c:	43435200 	movtmi	r5, #12800	; 0x3200
 790:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
 794:	4c435000 	marmi	acc0, r5, r3
 798:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
 79c:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
 7a0:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 7a4:	42504100 	subsmi	r4, r0, #0, 2
 7a8:	50424841 	subpl	r4, r2, r1, asr #16
 7ac:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
 7b0:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
 7b4:	43520065 	cmpmi	r2, #101	; 0x65
 7b8:	64415f43 	strbvs	r5, [r1], #-3907	; 0xfffff0bd
 7bc:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
 7c0:	43495348 	movtmi	r5, #37704	; 0x9348
 7c4:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
 7c8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 7cc:	61566e6f 	cmpvs	r6, pc, ror #28
 7d0:	0065756c 	rsbeq	r7, r5, ip, ror #10
 7d4:	73657368 	cmnvc	r5, #104, 6	; 0xa0000001
 7d8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 7dc:	4c500073 	mrrcmi	0, 7, r0, r0, cr3	; <UNPREDICTABLE>
 7e0:	5332494c 	teqpl	r2, #76, 18	; 0x130000
 7e4:	4352004e 	cmpmi	r2, #78	; 0x4e
 7e8:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
 7ec:	6f6c4374 	svcvs	0x006c4374
 7f0:	46736b63 	ldrbtmi	r6, [r3], -r3, ror #22
 7f4:	00716572 	rsbseq	r6, r1, r2, ror r5
 7f8:	5f434352 	svcpl	0x00434352
 7fc:	32425041 	subcc	r5, r2, #65	; 0x41
 800:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 804:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
 808:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
 80c:	5f00646d 	svcpl	0x0000646d
 810:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
 814:	5f363174 	svcpl	0x00363174
 818:	48410074 	stmdami	r1, {r2, r4, r5, r6}^
 81c:	53523242 	cmppl	r2, #536870916	; 0x20000004
 820:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
 824:	445f4343 	ldrbmi	r4, [pc], #-835	; 82c <startup-0x1ffff7d4>
 828:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
 82c:	4c500074 	mrrcmi	0, 7, r0, r0, cr4	; <UNPREDICTABLE>
 830:	5332494c 	teqpl	r2, #76, 18	; 0x130000
 834:	5f5f0052 	svcpl	0x005f0052
 838:	33746e69 	cmncc	r4, #1680	; 0x690
 83c:	00745f32 	rsbseq	r5, r4, r2, lsr pc
 840:	5f434352 	svcpl	0x00434352
 844:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
 848:	61745354 	cmnvs	r4, r4, asr r3
 84c:	00737574 	rsbseq	r7, r3, r4, ror r5
 850:	31425041 	cmpcc	r2, r1, asr #32
 854:	00524e45 	subseq	r4, r2, r5, asr #28
 858:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 85c:	00524e45 	subseq	r4, r2, r5, asr #28
 860:	5f434352 	svcpl	0x00434352
 864:	33424841 	movtcc	r4, #10305	; 0x2841
 868:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 86c:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
 870:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
 874:	646f4d50 	strbtvs	r4, [pc], #-3408	; 87c <startup-0x1ffff784>
 878:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
 87c:	736e7500 	cmnvc	lr, #0, 10
 880:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 884:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 888:	73007261 	movwvc	r7, #609	; 0x261
 88c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 890:	6f637075 	svcvs	0x00637075
 894:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
 898:	43520072 	cmpmi	r2, #114	; 0x72
 89c:	50415f43 	subpl	r5, r1, r3, asr #30
 8a0:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
 8a4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8a8:	43435200 	movtmi	r5, #12800	; 0x3200
 8ac:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
 8b0:	504b4c43 	subpl	r4, fp, r3, asr #24
 8b4:	43736572 	cmnmi	r3, #478150656	; 0x1c800000
 8b8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8bc:	43520067 	cmpmi	r2, #103	; 0x67
 8c0:	32495f43 	subcc	r5, r9, #268	; 0x10c
 8c4:	4b4c4353 	blmi	1311618 <startup-0x1ecee9e8>
 8c8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8cc:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
 8d0:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 7cc <startup-0x1ffff834>
 8d4:	43324f43 	teqmi	r2, #268	; 0x10c
 8d8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8dc:	53530067 	cmppl	r3, #103	; 0x67
 8e0:	00524743 	subseq	r4, r2, r3, asr #14
 8e4:	33424841 	movtcc	r4, #10305	; 0x2841
 8e8:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 8ec:	50410052 	subpl	r0, r1, r2, asr r0
 8f0:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
 8f4:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
 8f8:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
 8fc:	6d434953 	vstrvs.16	s9, [r3, #-166]	; 0xffffff5a	; <UNPREDICTABLE>
 900:	4b430064 	blmi	10c0a98 <startup-0x1ef3f568>
 904:	45544147 	ldrbmi	r4, [r4, #-327]	; 0xfffffeb9
 908:	4200524e 	andmi	r5, r0, #-536870908	; 0xe0000004
 90c:	00524344 	subseq	r4, r2, r4, asr #6
 910:	5f434352 	svcpl	0x00434352
 914:	31425041 	cmpcc	r2, r1, asr #32
 918:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 91c:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
 920:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
 924:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
 928:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
 92c:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
 930:	00676966 	rsbeq	r6, r7, r6, ror #18
 934:	43435553 	movtmi	r5, #13651	; 0x3553
 938:	00535345 	subseq	r5, r3, r5, asr #6
 93c:	5f434352 	svcpl	0x00434352
 940:	434c4c50 	movtmi	r4, #52304	; 0xcc50
 944:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 948:	43520067 	cmpmi	r2, #103	; 0x67
 94c:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
 950:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
 954:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 958:	00666544 	rsbeq	r6, r6, r4, asr #10
 95c:	31424841 	cmpcc	r2, r1, asr #16
 960:	00524e45 	subseq	r4, r2, r5, asr #28
 964:	5f434352 	svcpl	0x00434352
 968:	43435452 	movtmi	r5, #13394	; 0x3452
 96c:	6f434b4c 	svcvs	0x00434b4c
 970:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 974:	6c6c7000 	stclvs	0, cr7, [ip], #-0
 978:	72756f73 	rsbsvc	r6, r5, #460	; 0x1cc
 97c:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
 980:	415f4343 	cmpmi	pc, r3, asr #6
 984:	50314248 	eorspl	r4, r1, r8, asr #4
 988:	70697265 	rsbvc	r7, r9, r5, ror #4
 98c:	6f6c4368 	svcvs	0x006c4368
 990:	504c6b63 	subpl	r6, ip, r3, ror #22
 994:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 998:	00646d43 	rsbeq	r6, r4, r3, asr #26
 99c:	5f434352 	svcpl	0x00434352
 9a0:	33424841 	movtcc	r4, #10305	; 0x2841
 9a4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 9a8:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
 9ac:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
 9b0:	7300646d 	movwvc	r6, #1133	; 0x46d
 9b4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 9b8:	47007075 	smlsdxmi	r0, r5, r0, r7
 9bc:	5f4f4950 	svcpl	0x004f4950
 9c0:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
 9c4:	434c0064 	movtmi	r0, #49252	; 0xc064
 9c8:	4700524b 	strmi	r5, [r0, -fp, asr #4]
 9cc:	5f4f4950 	svcpl	0x004f4950
 9d0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 9d4:	0046415f 	subeq	r4, r6, pc, asr r1
 9d8:	4f495047 	svcmi	0x00495047
 9dc:	5075505f 	rsbspl	r5, r5, pc, asr r0
 9e0:	4f445f64 	svcmi	0x00445f64
 9e4:	47004e57 	smlsdmi	r0, r7, lr, r4
 9e8:	5f4f4950 	svcpl	0x004f4950
 9ec:	7079544f 	rsbsvc	r5, r9, pc, asr #8
 9f0:	444f5f65 	strbmi	r5, [pc], #-3941	; 9f8 <startup-0x1ffff608>
 9f4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 9f8:	6f4c5f4f 	svcvs	0x004c5f4f
 9fc:	70535f77 	subsvc	r5, r3, r7, ror pc
 a00:	00646565 	rsbeq	r6, r4, r5, ror #10
 a04:	4f495047 	svcmi	0x00495047
 a08:	646f4d5f 	strbtvs	r4, [pc], #-3423	; a10 <startup-0x1ffff5f0>
 a0c:	4e415f65 	cdpmi	15, 4, cr5, cr1, cr5, {3}
 a10:	444f4d00 	strbmi	r4, [pc], #-3328	; a18 <startup-0x1ffff5e8>
 a14:	69005245 	stmdbvs	r0, {r0, r2, r6, r9, ip, lr}
 a18:	0074696e 	rsbseq	r6, r4, lr, ror #18
 a1c:	4f495047 	svcmi	0x00495047
 a20:	646f4d5f 	strbtvs	r4, [pc], #-3423	; a28 <startup-0x1ffff5d8>
 a24:	544f0065 	strbpl	r0, [pc], #-101	; a2c <startup-0x1ffff5d4>
 a28:	52455059 	subpl	r5, r5, #89	; 0x59
 a2c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 a30:	6f4d5f4f 	svcvs	0x004d5f4f
 a34:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 a38:	5342004e 	movtpl	r0, #8270	; 0x204e
 a3c:	00485252 	subeq	r5, r8, r2, asr r2
 a40:	4f495047 	svcmi	0x00495047
 a44:	6769485f 			; <UNDEFINED> instruction: 0x6769485f
 a48:	70535f68 	subsvc	r5, r3, r8, ror #30
 a4c:	00646565 	rsbeq	r6, r4, r5, ror #10
 a50:	4f495047 	svcmi	0x00495047
 a54:	5075505f 	rsbspl	r5, r5, pc, asr r0
 a58:	50470064 	subpl	r0, r7, r4, rrx
 a5c:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
 a60:	5f747361 	svcpl	0x00747361
 a64:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
 a68:	50470064 	subpl	r0, r7, r4, rrx
 a6c:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 950 <startup-0x1ffff6b0>
 a70:	75696465 	strbvc	r6, [r9, #-1125]!	; 0xfffffb9b
 a74:	70535f6d 	subsvc	r5, r3, sp, ror #30
 a78:	00646565 	rsbeq	r6, r4, r5, ror #10
 a7c:	4f495047 	svcmi	0x00495047
 a80:	5075505f 	rsbspl	r5, r5, pc, asr r0
 a84:	4f4e5f64 	svcmi	0x004e5f64
 a88:	4c4c5550 	cfstr64mi	mvdx5, [ip], {80}	; 0x50
 a8c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 a90:	6570534f 	ldrbvs	r5, [r0, #-847]!	; 0xfffffcb1
 a94:	545f6465 	ldrbpl	r6, [pc], #-1125	; a9c <startup-0x1ffff564>
 a98:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
 a9c:	4f006665 	svcmi	0x00006665
 aa0:	45455053 	strbmi	r5, [r5, #-83]	; 0xffffffad
 aa4:	6d005244 	sfmvs	f5, 4, [r0, #-272]	; 0xfffffef0
 aa8:	006e6961 	rsbeq	r6, lr, r1, ror #18
 aac:	4f495047 	svcmi	0x00495047
 ab0:	7079545f 	rsbsvc	r5, r9, pc, asr r4
 ab4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
 ab8:	2f3a4300 	svccs	0x003a4300
 abc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 ac0:	72452f73 	subvc	r2, r5, #460	; 0x1cc
 ac4:	442f6b69 	strtmi	r6, [pc], #-2921	; acc <startup-0x1ffff534>
 ac8:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 acc:	73746e65 	cmnvc	r4, #1616	; 0x650
 ad0:	7461442f 	strbtvc	r4, [r1], #-1071	; 0xfffffbd1
 ad4:	6b657461 	blvs	195dc60 <startup-0x1e6a23a0>
 ad8:	6b73696e 	blvs	1cdb098 <startup-0x1e324f68>
 adc:	6f727074 	svcvs	0x00727074
 ae0:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
 ae4:	646f6b2f 	strbtvs	r6, [pc], #-2863	; aec <startup-0x1ffff514>
 ae8:	726f522f 	rsbvc	r5, pc, #-268435454	; 0xf0000002
 aec:	65736c65 	ldrbvs	r6, [r3, #-3173]!	; 0xfffff39b
 af0:	6174732f 	cmnvs	r4, pc, lsr #6
 af4:	70757472 	rsbsvc	r7, r5, r2, ror r4
 af8:	5000632e 	andpl	r6, r0, lr, lsr #6
 afc:	52445055 	subpl	r5, r4, #85	; 0x55
 b00:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 b04:	544f5f4f 	strbpl	r5, [pc], #-3919	; b0c <startup-0x1ffff4f4>
 b08:	5f657079 	svcpl	0x00657079
 b0c:	47005050 	smlsdmi	r0, r0, r0, r5
 b10:	5f4f4950 	svcpl	0x004f4950
 b14:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
 b18:	0050555f 	subseq	r5, r0, pc, asr r5
 b1c:	4f495047 	svcmi	0x00495047
 b20:	7079544f 	rsbsvc	r5, r9, pc, asr #8
 b24:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 b28:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
 b2c:	50470066 	subpl	r0, r7, r6, rrx
 b30:	4f5f4f49 	svcmi	0x005f4f49
 b34:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 b38:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 b3c:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
 b40:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
 b44:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
 b48:	50470066 	subpl	r0, r7, r6, rrx
 b4c:	75504f49 	ldrbvc	r4, [r0, #-3913]	; 0xfffff0b7
 b50:	545f6450 	ldrbpl	r6, [pc], #-1104	; b58 <startup-0x1ffff4a8>
 b54:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
 b58:	42006665 	andmi	r6, r0, #105906176	; 0x6500000
 b5c:	4c525253 	lfmmi	f5, 2, [r2], {83}	; 0x53
 b60:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 b64:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 b68:	5047006e 	subpl	r0, r7, lr, rrx
 b6c:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; a50 <startup-0x1ffff5b0>
 b70:	5f65646f 	svcpl	0x0065646f
 b74:	0054554f 	subseq	r5, r4, pc, asr #10
 b78:	4f495047 	svcmi	0x00495047
 b7c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 b80:	7079545f 	rsbsvc	r5, r9, pc, asr r4
 b84:	66654465 	strbtvs	r4, [r5], -r5, ror #8
 b88:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
 b8c:	00736f70 	rsbseq	r6, r3, r0, ror pc
 b90:	5f746942 	svcpl	0x00746942
 b94:	00544553 	subseq	r4, r4, r3, asr r5
 b98:	4f495047 	svcmi	0x00495047
 b9c:	6165525f 	cmnvs	r5, pc, asr r2
 ba0:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xfffff09c
 ba4:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
 ba8:	00617461 	rsbeq	r7, r1, r1, ror #8
 bac:	4f495047 	svcmi	0x00495047
 bb0:	0046415f 	subeq	r4, r6, pc, asr r1
 bb4:	706d6574 	rsbvc	r6, sp, r4, ror r5
 bb8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 bbc:	74535f4f 	ldrbvc	r5, [r3], #-3919	; 0xfffff0b1
 bc0:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
 bc4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
 bc8:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
 bcc:	006c6156 	rsbeq	r6, ip, r6, asr r1
 bd0:	5f746942 	svcpl	0x00746942
 bd4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
 bd8:	50470054 	subpl	r0, r7, r4, asr r0
 bdc:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
 be0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 be4:	00746942 	rsbseq	r6, r4, r2, asr #18
 be8:	4f495047 	svcmi	0x00495047
 bec:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
 bf0:	73746942 	cmnvc	r4, #1081344	; 0x108000
 bf4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 bf8:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
 bfc:	47007469 	strmi	r7, [r0, -r9, ror #8]
 c00:	5f4f4950 	svcpl	0x004f4950
 c04:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 c08:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
 c0c:	50470073 	subpl	r0, r7, r3, ror r0
 c10:	445f4f49 	ldrbmi	r4, [pc], #-3913	; c18 <startup-0x1ffff3e8>
 c14:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
 c18:	50470074 	subpl	r0, r7, r4, ror r0
 c1c:	525f4f49 	subspl	r4, pc, #292	; 0x124
 c20:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 c24:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
 c28:	61746144 	cmnvs	r4, r4, asr #2
 c2c:	00746942 	rsbseq	r6, r4, r2, asr #18
 c30:	4f495047 	svcmi	0x00495047
 c34:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
 c38:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
 c3c:	00746375 	rsbseq	r6, r4, r5, ror r3
 c40:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 c44:	006c6156 	rsbeq	r6, ip, r6, asr r1
 c48:	4f495047 	svcmi	0x00495047
 c4c:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
 c50:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
 c54:	47006563 	strmi	r6, [r0, -r3, ror #10]
 c58:	5f4f4950 	svcpl	0x004f4950
 c5c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 c60:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
 c64:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
 c68:	50470061 	subpl	r0, r7, r1, rrx
 c6c:	505f4f49 	subspl	r4, pc, r9, asr #30
 c70:	6f4c6e69 	svcvs	0x004c6e69
 c74:	6f436b63 	svcvs	0x00436b63
 c78:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 c7c:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
 c80:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
 c84:	63006e6f 	movwvs	r6, #3695	; 0xe6f
 c88:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
 c8c:	6970746e 	ldmdbvs	r0!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 c90:	5047006e 	subpl	r0, r7, lr, rrx
 c94:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
 c98:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 c9c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 ca0:	4300784f 	movwmi	r7, #2127	; 0x84f
 ca4:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 ca8:	2f737265 	svccs	0x00737265
 cac:	6b697245 	blvs	1a5d5c8 <startup-0x1e5a2a38>
 cb0:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 cb4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 cb8:	442f7374 	strtmi	r7, [pc], #-884	; cc0 <startup-0x1ffff340>
 cbc:	74617461 	strbtvc	r7, [r1], #-1121	; 0xfffffb9f
 cc0:	696e6b65 	stmdbvs	lr!, {r0, r2, r5, r6, r8, r9, fp, sp, lr}^
 cc4:	70746b73 	rsbsvc	r6, r4, r3, ror fp
 cc8:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 ccc:	6b2f746b 	blvs	bdde80 <startup-0x1f422180>
 cd0:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; b1c <startup-0x1ffff4e4>
 cd4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 cd8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 cdc:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 ce0:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 ce4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 ce8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 cec:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 cf0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 cf4:	445f6870 	ldrbmi	r6, [pc], #-2160	; cfc <startup-0x1ffff304>
 cf8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 cfc:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
 d00:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
 d04:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 d08:	5f787834 	svcpl	0x00787834
 d0c:	6f697067 	svcvs	0x00697067
 d10:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
 d14:	5f4f4950 	svcpl	0x004f4950
 d18:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
 d1c:	6942656c 	stmdbvs	r2, {r2, r3, r5, r6, r8, sl, sp, lr}^
 d20:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
 d24:	5f706d65 	svcpl	0x00706d65
 d28:	50470032 	subpl	r0, r7, r2, lsr r0
 d2c:	505f4f49 	subspl	r4, pc, r9, asr #30
 d30:	46416e69 	strbmi	r6, [r1], -r9, ror #28
 d34:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 d38:	47006769 	strmi	r6, [r0, -r9, ror #14]
 d3c:	5f4f4950 	svcpl	0x004f4950
 d40:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 d44:	7074754f 	rsbsvc	r7, r4, pc, asr #10
 d48:	61447475 	hvcvs	18245	; 0x4745
 d4c:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
 d50:	Address 0x00000d50 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <APBAHBPrescTable+0xdfffdfba>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000070 	andeq	r0, r0, r0, ror r0
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000080 	andcs	r0, r0, r0, lsl #1
  38:	00000028 	andeq	r0, r0, r8, lsr #32
  3c:	40080e41 	andmi	r0, r8, r1, asr #28
  40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  44:	100e4101 	andne	r4, lr, r1, lsl #2
  48:	00070d41 	andeq	r0, r7, r1, asr #26
  4c:	00000020 	andeq	r0, r0, r0, lsr #32
  50:	00000000 	andeq	r0, r0, r0
  54:	200000a8 	andcs	r0, r0, r8, lsr #1
  58:	0000005e 	andeq	r0, r0, lr, asr r0
  5c:	400c0e41 	andmi	r0, ip, r1, asr #28
  60:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  64:	018e4002 	orreq	r4, lr, r2
  68:	41180e41 	tstmi	r8, r1, asr #28
  6c:	0000070d 	andeq	r0, r0, sp, lsl #14
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000106 	andcs	r0, r0, r6, lsl #2
  7c:	0000003e 	andeq	r0, r0, lr, lsr r0
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	180e4101 	stmdane	lr, {r0, r8, lr}
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000144 	andcs	r0, r0, r4, asr #2
  9c:	00000020 	andeq	r0, r0, r0, lsr #32
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000164 	andcs	r0, r0, r4, ror #2
  bc:	00000044 	andeq	r0, r0, r4, asr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200001a8 	andcs	r0, r0, r8, lsr #3
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200001c8 	andcs	r0, r0, r8, asr #3
  fc:	0000003c 	andeq	r0, r0, ip, lsr r0
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	180e4101 	stmdane	lr, {r0, r8, lr}
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20000204 	andcs	r0, r0, r4, lsl #4
 11c:	00000020 	andeq	r0, r0, r0, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000224 	andcs	r0, r0, r4, lsr #4
 13c:	00000028 	andeq	r0, r0, r8, lsr #32
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	100e4101 	andne	r4, lr, r1, lsl #2
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	2000024c 	andcs	r0, r0, ip, asr #4
 15c:	00000020 	andeq	r0, r0, r0, lsr #32
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	2000026c 	andcs	r0, r0, ip, ror #4
 17c:	00000030 	andeq	r0, r0, r0, lsr r0
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	180e4101 	stmdane	lr, {r0, r8, lr}
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	2000029c 	mulcs	r0, ip, r2
 19c:	00000020 	andeq	r0, r0, r0, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	200002bc 			; <UNDEFINED> instruction: 0x200002bc
 1bc:	00000020 	andeq	r0, r0, r0, lsr #32
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	100e4101 	andne	r4, lr, r1, lsl #2
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	200002dc 	ldrdcs	r0, [r0], -ip
 1dc:	00000040 	andeq	r0, r0, r0, asr #32
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	2000031c 	andcs	r0, r0, ip, lsl r3
 1fc:	0000003c 	andeq	r0, r0, ip, lsr r0
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	180e4101 	stmdane	lr, {r0, r8, lr}
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000358 	andcs	r0, r0, r8, asr r3
 21c:	00000034 	andeq	r0, r0, r4, lsr r0
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	00000018 	andeq	r0, r0, r8, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	2000038c 	andcs	r0, r0, ip, lsl #7
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 24c:	0000001c 	andeq	r0, r0, ip, lsl r0
 250:	00000000 	andeq	r0, r0, r0
 254:	200003a8 	andcs	r0, r0, r8, lsr #7
 258:	00000034 	andeq	r0, r0, r4, lsr r0
 25c:	40080e41 	andmi	r0, r8, r1, asr #28
 260:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 264:	180e4101 	stmdane	lr, {r0, r8, lr}
 268:	00070d41 	andeq	r0, r7, r1, asr #26
 26c:	0000001c 	andeq	r0, r0, ip, lsl r0
 270:	00000000 	andeq	r0, r0, r0
 274:	200003dc 	ldrdcs	r0, [r0], -ip
 278:	00000038 	andeq	r0, r0, r8, lsr r0
 27c:	40080e41 	andmi	r0, r8, r1, asr #28
 280:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 284:	180e4101 	stmdane	lr, {r0, r8, lr}
 288:	00070d41 	andeq	r0, r7, r1, asr #26
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	20000414 	andcs	r0, r0, r4, lsl r4
 298:	0000003c 	andeq	r0, r0, ip, lsr r0
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	20000450 	andcs	r0, r0, r0, asr r4
 2b8:	00000158 	andeq	r0, r0, r8, asr r1
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	280e4101 	stmdacs	lr, {r0, r8, lr}
 2c8:	00070d41 	andeq	r0, r7, r1, asr #26
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	200005a8 	andcs	r0, r0, r8, lsr #11
 2d8:	00000060 	andeq	r0, r0, r0, rrx
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	20000608 	andcs	r0, r0, r8, lsl #12
 2f8:	00000020 	andeq	r0, r0, r0, lsr #32
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	100e4101 	andne	r4, lr, r1, lsl #2
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	20000628 	andcs	r0, r0, r8, lsr #12
 318:	00000020 	andeq	r0, r0, r0, lsr #32
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	100e4101 	andne	r4, lr, r1, lsl #2
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	20000648 	andcs	r0, r0, r8, asr #12
 338:	0000001c 	andeq	r0, r0, ip, lsl r0
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	20000664 	andcs	r0, r0, r4, ror #12
 358:	0000003c 	andeq	r0, r0, ip, lsr r0
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	180e4101 	stmdane	lr, {r0, r8, lr}
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	200006a0 	andcs	r0, r0, r0, lsr #13
 378:	0000003c 	andeq	r0, r0, ip, lsr r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	180e4101 	stmdane	lr, {r0, r8, lr}
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	200006dc 	ldrdcs	r0, [r0], -ip
 398:	0000003c 	andeq	r0, r0, ip, lsr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	20000718 	andcs	r0, r0, r8, lsl r7
 3b8:	00000040 	andeq	r0, r0, r0, asr #32
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c8:	00070d41 	andeq	r0, r7, r1, asr #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	20000758 	andcs	r0, r0, r8, asr r7
 3d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	20000794 	mulcs	r0, r4, r7
 3f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	100e4101 	andne	r4, lr, r1, lsl #2
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	200007b0 			; <UNDEFINED> instruction: 0x200007b0
 418:	00000040 	andeq	r0, r0, r0, asr #32
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	100e4101 	andne	r4, lr, r1, lsl #2
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	200007f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 438:	00000040 	andeq	r0, r0, r0, asr #32
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	100e4101 	andne	r4, lr, r1, lsl #2
 448:	00070d41 	andeq	r0, r7, r1, asr #26
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000000 	andeq	r0, r0, r0
 454:	20000830 	andcs	r0, r0, r0, lsr r8
 458:	00000040 	andeq	r0, r0, r0, asr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	100e4101 	andne	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	20000870 	andcs	r0, r0, r0, ror r8
 478:	00000040 	andeq	r0, r0, r0, asr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	200008b0 			; <UNDEFINED> instruction: 0x200008b0
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	100e4101 	andne	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	200008f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 4b8:	00000040 	andeq	r0, r0, r0, asr #32
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	20000930 	andcs	r0, r0, r0, lsr r9
 4d8:	00000040 	andeq	r0, r0, r0, asr #32
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	100e4101 	andne	r4, lr, r1, lsl #2
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	20000970 	andcs	r0, r0, r0, ror r9
 4f8:	00000040 	andeq	r0, r0, r0, asr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	100e4101 	andne	r4, lr, r1, lsl #2
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	00000000 	andeq	r0, r0, r0
 514:	200009b0 			; <UNDEFINED> instruction: 0x200009b0
 518:	00000040 	andeq	r0, r0, r0, asr #32
 51c:	40080e41 	andmi	r0, r8, r1, asr #28
 520:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 524:	100e4101 	andne	r4, lr, r1, lsl #2
 528:	00070d41 	andeq	r0, r7, r1, asr #26
 52c:	0000001c 	andeq	r0, r0, ip, lsl r0
 530:	00000000 	andeq	r0, r0, r0
 534:	200009f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 538:	00000040 	andeq	r0, r0, r0, asr #32
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	100e4101 	andne	r4, lr, r1, lsl #2
 548:	00070d41 	andeq	r0, r7, r1, asr #26
 54c:	0000001c 	andeq	r0, r0, ip, lsl r0
 550:	00000000 	andeq	r0, r0, r0
 554:	20000a30 	andcs	r0, r0, r0, lsr sl
 558:	00000040 	andeq	r0, r0, r0, asr #32
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	100e4101 	andne	r4, lr, r1, lsl #2
 568:	00070d41 	andeq	r0, r7, r1, asr #26
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	00000000 	andeq	r0, r0, r0
 574:	20000a70 	andcs	r0, r0, r0, ror sl
 578:	00000040 	andeq	r0, r0, r0, asr #32
 57c:	40080e41 	andmi	r0, r8, r1, asr #28
 580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 584:	100e4101 	andne	r4, lr, r1, lsl #2
 588:	00070d41 	andeq	r0, r7, r1, asr #26
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000000 	andeq	r0, r0, r0
 594:	20000ab0 			; <UNDEFINED> instruction: 0x20000ab0
 598:	00000040 	andeq	r0, r0, r0, asr #32
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	100e4101 	andne	r4, lr, r1, lsl #2
 5a8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	20000af0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 5b8:	00000040 	andeq	r0, r0, r0, asr #32
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	100e4101 	andne	r4, lr, r1, lsl #2
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	20000b30 	andcs	r0, r0, r0, lsr fp
 5d8:	00000040 	andeq	r0, r0, r0, asr #32
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	100e4101 	andne	r4, lr, r1, lsl #2
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	20000b70 	andcs	r0, r0, r0, ror fp
 5f8:	0000003c 	andeq	r0, r0, ip, lsr r0
 5fc:	40080e41 	andmi	r0, r8, r1, asr #28
 600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 604:	100e4101 	andne	r4, lr, r1, lsl #2
 608:	00070d41 	andeq	r0, r7, r1, asr #26
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	00000000 	andeq	r0, r0, r0
 614:	20000bac 	andcs	r0, r0, ip, lsr #23
 618:	00000050 	andeq	r0, r0, r0, asr r0
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	100e4101 	andne	r4, lr, r1, lsl #2
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	20000bfc 	strdcs	r0, [r0], -ip
 638:	00000084 	andeq	r0, r0, r4, lsl #1
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	200e4101 	andcs	r4, lr, r1, lsl #2
 648:	00070d41 	andeq	r0, r7, r1, asr #26
 64c:	00000018 	andeq	r0, r0, r8, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	20000c80 	andcs	r0, r0, r0, lsl #25
 658:	0000001c 	andeq	r0, r0, ip, lsl r0
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 668:	0000001c 	andeq	r0, r0, ip, lsl r0
 66c:	00000000 	andeq	r0, r0, r0
 670:	20000c9c 	mulcs	r0, ip, ip
 674:	00000044 	andeq	r0, r0, r4, asr #32
 678:	40080e41 	andmi	r0, r8, r1, asr #28
 67c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 680:	180e4101 	stmdane	lr, {r0, r8, lr}
 684:	00070d41 	andeq	r0, r7, r1, asr #26
 688:	0000001c 	andeq	r0, r0, ip, lsl r0
 68c:	00000000 	andeq	r0, r0, r0
 690:	20000ce0 	andcs	r0, r0, r0, ror #25
 694:	00000020 	andeq	r0, r0, r0, lsr #32
 698:	40080e41 	andmi	r0, r8, r1, asr #28
 69c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a0:	100e4101 	andne	r4, lr, r1, lsl #2
 6a4:	00070d41 	andeq	r0, r7, r1, asr #26
 6a8:	0000000c 	andeq	r0, r0, ip
 6ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6b0:	7c020001 	stcvc	0, cr0, [r2], {1}
 6b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6b8:	0000000c 	andeq	r0, r0, ip
 6bc:	000006a8 	andeq	r0, r0, r8, lsr #13
 6c0:	20000000 	andcs	r0, r0, r0
 6c4:	0000000c 	andeq	r0, r0, ip
 6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6cc:	000006a8 	andeq	r0, r0, r8, lsr #13
 6d0:	20000d00 	andcs	r0, r0, r0, lsl #26
 6d4:	0000002c 	andeq	r0, r0, ip, lsr #32
 6d8:	40080e41 	andmi	r0, r8, r1, asr #28
 6dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e0:	100e4101 	andne	r4, lr, r1, lsl #2
 6e4:	00070d41 	andeq	r0, r7, r1, asr #26
 6e8:	0000000c 	andeq	r0, r0, ip
 6ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6f0:	7c020001 	stcvc	0, cr0, [r2], {1}
 6f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6fc:	000006e8 	andeq	r0, r0, r8, ror #13
 700:	20000d2c 	andcs	r0, r0, ip, lsr #26
 704:	00000170 	andeq	r0, r0, r0, ror r1
 708:	40080e41 	andmi	r0, r8, r1, asr #28
 70c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 710:	100e4101 	andne	r4, lr, r1, lsl #2
 714:	00070d41 	andeq	r0, r7, r1, asr #26
 718:	0000001c 	andeq	r0, r0, ip, lsl r0
 71c:	000006e8 	andeq	r0, r0, r8, ror #13
 720:	20000e9c 	mulcs	r0, ip, lr
 724:	00000118 	andeq	r0, r0, r8, lsl r1
 728:	40080e41 	andmi	r0, r8, r1, asr #28
 72c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 730:	200e4101 	andcs	r4, lr, r1, lsl #2
 734:	00070d41 	andeq	r0, r7, r1, asr #26
 738:	0000001c 	andeq	r0, r0, ip, lsl r0
 73c:	000006e8 	andeq	r0, r0, r8, ror #13
 740:	20000fb4 			; <UNDEFINED> instruction: 0x20000fb4
 744:	00000034 	andeq	r0, r0, r4, lsr r0
 748:	40080e41 	andmi	r0, r8, r1, asr #28
 74c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 750:	100e4101 	andne	r4, lr, r1, lsl #2
 754:	00070d41 	andeq	r0, r7, r1, asr #26
 758:	0000001c 	andeq	r0, r0, ip, lsl r0
 75c:	000006e8 	andeq	r0, r0, r8, ror #13
 760:	20000fe8 	andcs	r0, r0, r8, ror #31
 764:	00000046 	andeq	r0, r0, r6, asr #32
 768:	40080e41 	andmi	r0, r8, r1, asr #28
 76c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 770:	180e4101 	stmdane	lr, {r0, r8, lr}
 774:	00070d41 	andeq	r0, r7, r1, asr #26
 778:	0000001c 	andeq	r0, r0, ip, lsl r0
 77c:	000006e8 	andeq	r0, r0, r8, ror #13
 780:	2000102e 	andcs	r1, r0, lr, lsr #32
 784:	00000042 	andeq	r0, r0, r2, asr #32
 788:	40080e41 	andmi	r0, r8, r1, asr #28
 78c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 790:	180e4101 	stmdane	lr, {r0, r8, lr}
 794:	00070d41 	andeq	r0, r7, r1, asr #26
 798:	0000001c 	andeq	r0, r0, ip, lsl r0
 79c:	000006e8 	andeq	r0, r0, r8, ror #13
 7a0:	20001070 	andcs	r1, r0, r0, ror r0
 7a4:	00000016 	andeq	r0, r0, r6, lsl r0
 7a8:	40080e41 	andmi	r0, r8, r1, asr #28
 7ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7b0:	100e4101 	andne	r4, lr, r1, lsl #2
 7b4:	00070d41 	andeq	r0, r7, r1, asr #26
 7b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7bc:	000006e8 	andeq	r0, r0, r8, ror #13
 7c0:	20001086 	andcs	r1, r0, r6, lsl #1
 7c4:	00000042 	andeq	r0, r0, r2, asr #32
 7c8:	40080e41 	andmi	r0, r8, r1, asr #28
 7cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 7d4:	00070d41 	andeq	r0, r7, r1, asr #26
 7d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7dc:	000006e8 	andeq	r0, r0, r8, ror #13
 7e0:	200010c8 	andcs	r1, r0, r8, asr #1
 7e4:	00000016 	andeq	r0, r0, r6, lsl r0
 7e8:	40080e41 	andmi	r0, r8, r1, asr #28
 7ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7f0:	100e4101 	andne	r4, lr, r1, lsl #2
 7f4:	00070d41 	andeq	r0, r7, r1, asr #26
 7f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7fc:	000006e8 	andeq	r0, r0, r8, ror #13
 800:	200010de 	ldrdcs	r1, [r0], -lr
 804:	0000001e 	andeq	r0, r0, lr, lsl r0
 808:	40080e41 	andmi	r0, r8, r1, asr #28
 80c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 810:	100e4101 	andne	r4, lr, r1, lsl #2
 814:	00070d41 	andeq	r0, r7, r1, asr #26
 818:	0000001c 	andeq	r0, r0, ip, lsl r0
 81c:	000006e8 	andeq	r0, r0, r8, ror #13
 820:	200010fc 	strdcs	r1, [r0], -ip
 824:	0000001e 	andeq	r0, r0, lr, lsl r0
 828:	40080e41 	andmi	r0, r8, r1, asr #28
 82c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 830:	100e4101 	andne	r4, lr, r1, lsl #2
 834:	00070d41 	andeq	r0, r7, r1, asr #26
 838:	0000001c 	andeq	r0, r0, ip, lsl r0
 83c:	000006e8 	andeq	r0, r0, r8, ror #13
 840:	2000111a 	andcs	r1, r0, sl, lsl r1
 844:	0000003a 	andeq	r0, r0, sl, lsr r0
 848:	40080e41 	andmi	r0, r8, r1, asr #28
 84c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 850:	100e4101 	andne	r4, lr, r1, lsl #2
 854:	00070d41 	andeq	r0, r7, r1, asr #26
 858:	0000001c 	andeq	r0, r0, ip, lsl r0
 85c:	000006e8 	andeq	r0, r0, r8, ror #13
 860:	20001154 	andcs	r1, r0, r4, asr r1
 864:	0000001e 	andeq	r0, r0, lr, lsl r0
 868:	40080e41 	andmi	r0, r8, r1, asr #28
 86c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 870:	100e4101 	andne	r4, lr, r1, lsl #2
 874:	00070d41 	andeq	r0, r7, r1, asr #26
 878:	0000001c 	andeq	r0, r0, ip, lsl r0
 87c:	000006e8 	andeq	r0, r0, r8, ror #13
 880:	20001172 	andcs	r1, r0, r2, ror r1
 884:	00000024 	andeq	r0, r0, r4, lsr #32
 888:	40080e41 	andmi	r0, r8, r1, asr #28
 88c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 890:	100e4101 	andne	r4, lr, r1, lsl #2
 894:	00070d41 	andeq	r0, r7, r1, asr #26
 898:	0000001c 	andeq	r0, r0, ip, lsl r0
 89c:	000006e8 	andeq	r0, r0, r8, ror #13
 8a0:	20001196 	mulcs	r0, r6, r1
 8a4:	000000a4 	andeq	r0, r0, r4, lsr #1
 8a8:	40080e41 	andmi	r0, r8, r1, asr #28
 8ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8b0:	180e4101 	stmdane	lr, {r0, r8, lr}
 8b4:	00070d41 	andeq	r0, r7, r1, asr #26
 8b8:	0000000c 	andeq	r0, r0, ip
 8bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8c0:	7c010001 	stcvc	0, cr0, [r1], {1}
 8c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 8c8:	0000000c 	andeq	r0, r0, ip
 8cc:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
 8d0:	2000123d 	andcs	r1, r0, sp, lsr r2
 8d4:	0000010a 	andeq	r0, r0, sl, lsl #2

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000d00 	andcs	r0, r0, r0, lsl #26
   4:	20000d2c 	andcs	r0, r0, ip, lsr #26
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
